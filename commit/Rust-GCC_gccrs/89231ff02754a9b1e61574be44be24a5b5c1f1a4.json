{"sha": "89231ff02754a9b1e61574be44be24a5b5c1f1a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyMzFmZjAyNzU0YTliMWU2MTU3NGJlNDRiZTI0YTViNWMxZjFhNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-04T17:52:01Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-04T17:52:01Z"}, "message": "2003-12-04  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/http/Connection.java\n\t(sendRequest): Merged writing http headers with classpath.\n\t(getInputStream): Merged documentation from classpath.\n\t(getHeaderField): Likewise.\n\t(getHeaderFieldKey): Likewise.\n\nFrom-SVN: r74283", "tree": {"sha": "60f4ac855ef30dc3d82bdb1eefe80c85a51d8ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f4ac855ef30dc3d82bdb1eefe80c85a51d8ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89231ff02754a9b1e61574be44be24a5b5c1f1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89231ff02754a9b1e61574be44be24a5b5c1f1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89231ff02754a9b1e61574be44be24a5b5c1f1a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89231ff02754a9b1e61574be44be24a5b5c1f1a4/comments", "author": null, "committer": null, "parents": [{"sha": "0ee646d6ac66a54d4dd9a015a513ac365542e796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee646d6ac66a54d4dd9a015a513ac365542e796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee646d6ac66a54d4dd9a015a513ac365542e796"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "99b92503635a4d3d7ba4861aa53742ba0b0fd79b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89231ff02754a9b1e61574be44be24a5b5c1f1a4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89231ff02754a9b1e61574be44be24a5b5c1f1a4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=89231ff02754a9b1e61574be44be24a5b5c1f1a4", "patch": "@@ -1,3 +1,11 @@\n+2003-12-04  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/http/Connection.java\n+\t(sendRequest): Merged writing http headers with classpath.\n+\t(getInputStream): Merged documentation from classpath.\n+\t(getHeaderField): Likewise.\n+\t(getHeaderFieldKey): Likewise.\n+\n 2003-12-04  Michael Koch  <konqueror@gmx.de>\n \n \t* boehm.cc (_Jv_MarkObj): Access hack_signers field."}, {"sha": "b564afb376f03514ef5e23a19215abdaade7d797", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89231ff02754a9b1e61574be44be24a5b5c1f1a4/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89231ff02754a9b1e61574be44be24a5b5c1f1a4/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=89231ff02754a9b1e61574be44be24a5b5c1f1a4", "patch": "@@ -48,10 +48,10 @@\n import java.net.Socket;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Vector;\n import java.util.Hashtable;\n-import java.util.Enumeration;\n \n /**\n  * This subclass of java.net.URLConnection models a URLConnection via\n@@ -212,12 +212,14 @@ void sendRequest() throws IOException\n       setRequestProperty (\"Host\", url.getHost());\n     \n     // Write all req_props name-value pairs to the output writer.\n-    Enumeration reqKeys = requestProperties.keys();\n-    Enumeration reqVals = requestProperties.elements();\n-    \n-    while (reqKeys.hasMoreElements())\n-      outputWriter.print (reqKeys.nextElement() + \": \" + reqVals.nextElement() + \"\\r\\n\");\n-    \n+    Iterator itr = getRequestProperties().entrySet().iterator();\n+\n+    while (itr.hasNext())\n+      {\n+        Map.Entry e = (Map.Entry) itr.next();\n+        outputWriter.print (e.getKey() + \": \" + e.getValue() + \"\\r\\n\");\n+      }\n+\n     // One more CR-LF indicates end of header.\n     outputWriter.print (\"\\r\\n\");\n     outputWriter.flush();\n@@ -234,6 +236,15 @@ public boolean usingProxy()\n     return proxyInUse;\n   }\n \n+  /**\n+   * Returns an InputStream for reading from this connection.  This stream\n+   * will be \"queued up\" for reading just the contents of the requested file.\n+   * Overrides URLConnection.getInputStream()\n+   *\n+   * @return An InputStream for this connection.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public InputStream getInputStream() throws IOException\n   {\n     if (!connected)\n@@ -256,6 +267,25 @@ public OutputStream getOutputStream() throws IOException\n     return socket.getOutputStream();\n   }\n \n+  /**\n+   * Overrides java.net.HttpURLConnection.setRequestMethod() in order to\n+   * restrict the available methods to only those we support.\n+   *\n+   * @param method The RequestMethod to use\n+   *\n+   * @exception ProtocolException If the specified method is not valid\n+   */\n+  public void setRequestMethod (String method) throws ProtocolException\n+  {\n+    method = method.toUpperCase();\n+    \n+    if (method.equals(\"GET\"))\n+      super.setRequestMethod (method);\n+    else\n+      throw new ProtocolException (\"Unsupported or unknown request method \" +\n+                                   method);\n+  }\n+\n   public String getHeaderField(String name)\n   {\n     if (!connected)\n@@ -286,6 +316,15 @@ public Map getHeaderFields()\n     return hdrHash;\n   }\n \n+  /**\n+   * This method returns the header field value at the specified numeric\n+   * index.\n+   *\n+   * @param n The index into the header field array\n+   *\n+   * @return The value of the specified header field, or <code>null</code>\n+   * if the specified index is not valid.\n+   */\n   public String getHeaderField(int n)\n   {\n     if (!connected)\n@@ -303,6 +342,15 @@ public String getHeaderField(int n)\n     return null;\n   }\n \n+  /**\n+   * This method returns the header field key at the specified numeric\n+   * index.\n+   *\n+   * @param n The index into the header field array\n+   *\n+   * @return The name of the header field key, or <code>null</code> if the\n+   * specified index is not valid.\n+   */\n   public String getHeaderFieldKey(int n)\n   {\n     if (!connected)"}]}