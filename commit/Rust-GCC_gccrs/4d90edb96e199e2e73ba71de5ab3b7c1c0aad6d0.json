{"sha": "4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5MGVkYjk2ZTE5OWUyZTczYmE3MWRlNWFiM2I3YzFjMGFhZDZkMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T14:01:39Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T14:01:39Z"}, "message": "Handle POINTER_PLUS_EXPR in jump functions in ipa-modref.\n\ngcc/ChangeLog:\n\n\t* ipa-modref.c (compute_parm_map): Handle POINTER_PLUS_EXPR in\n\tPASSTHROUGH.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/ipa/modref-1.c: New test.\n\t* gcc.dg/tree-ssa/modref-4.c: New test.", "tree": {"sha": "0a6e42042ff91a4b4b50b58f59ee66d71d9cada5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6e42042ff91a4b4b50b58f59ee66d71d9cada5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/comments", "author": null, "committer": null, "parents": [{"sha": "4aa9742252ea419947fe32ff64c7546c92286b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa9742252ea419947fe32ff64c7546c92286b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa9742252ea419947fe32ff64c7546c92286b96"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "8e6a87643ecce490a682b179850759c069abc66b", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "patch": "@@ -1682,9 +1682,18 @@ compute_parm_map (cgraph_edge *callee_edge, vec<modref_parm_map> *parm_map)\n \t    {\n \t      (*parm_map)[i].parm_index\n \t\t= ipa_get_jf_pass_through_formal_id (jf);\n-\t      (*parm_map)[i].parm_offset_known\n-\t\t= ipa_get_jf_pass_through_operation (jf) == NOP_EXPR;\n-\t      (*parm_map)[i].parm_offset = 0;\n+\t      if (ipa_get_jf_pass_through_operation (jf) == NOP_EXPR)\n+\t\t{\n+\t\t  (*parm_map)[i].parm_offset_known = true;\n+\t\t  (*parm_map)[i].parm_offset = 0;\n+\t\t}\n+\t      else if (ipa_get_jf_pass_through_operation (jf)\n+\t\t       == POINTER_PLUS_EXPR\n+\t\t       && ptrdiff_tree_p (ipa_get_jf_pass_through_operand (jf),\n+\t\t\t\t\t  &(*parm_map)[i].parm_offset))\n+\t\t(*parm_map)[i].parm_offset_known = true;\n+\t      else\n+\t\t(*parm_map)[i].parm_offset_known = false;\n \t      continue;\n \t    }\n \t  if (jf && jf->type == IPA_JF_ANCESTOR)"}, {"sha": "46eb78ccebf86536f22aabe3be99352e8004646e", "filename": "gcc/testsuite/gcc.dg/ipa/modref-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodref-1.c?ref=4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-options \"-O2 -fdump-ipa-modref\"  } */\n+/* { dg-do compile } */\n+__attribute__((noinline))\n+void a(char *ptr, char *ptr2)\n+{\n+  (*ptr)++;\n+  (*ptr2)++;\n+}\n+\n+__attribute__((noinline))\n+b(char *ptr)\n+{\n+  a(ptr+1,&ptr[2]);\n+}\n+main()\n+{\n+  char c[2]={0,1,0};\n+  b(c);\n+  return c[0]+c[2];\n+}\n+/* Check that both param offsets are determined correctly.  */\n+/* { dg-final { scan-ipa-dump \"param offset: 1\" \"modref\"  } } */\n+/* { dg-final { scan-ipa-dump \"param offset: 2\" \"modref\"  } } */"}, {"sha": "776f46ed687b34e0e2eaa969ceb9cdcba55586e3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/modref-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-4.c?ref=4d90edb96e199e2e73ba71de5ab3b7c1c0aad6d0", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2 -fdump-tree-modref1\"  } */\n+/* { dg-do compile } */\n+__attribute__((noinline))\n+void a(char *ptr, char *ptr2)\n+{\n+  (*ptr)++;\n+  (*ptr2)++;\n+}\n+\n+__attribute__((noinline))\n+b(char *ptr)\n+{\n+  a(ptr+1,&ptr[2]);\n+}\n+main()\n+{\n+  char c[2]={0,1,0};\n+  b(c);\n+  return c[0]+c[2];\n+}\n+/* Check that both param offsets are determined correctly and the computation\n+   is optimized out.  */\n+/* { dg-final { scan-tree-dump \"param offset: 1\" \"modref1\"  } } */\n+/* { dg-final { scan-tree-dump \"param offset: 2\" \"modref2\"  } } */\n+/* { dg-final { scan-tree-dump \"return 0\" \"modref2\"  } } */"}]}