{"sha": "3dbe9454540ab183476df93e6ef8eab50fbb13b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiZTk0NTQ1NDBhYjE4MzQ3NmRmOTNlNmVmOGVhYjUwZmJiMTNiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-27T14:32:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-27T14:32:47Z"}, "message": "gimple.c (gimple_assign_copy_p): Use gimple_assign_single_p.\n\n2010-11-27  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_assign_copy_p): Use gimple_assign_single_p.\n\t(gimple_assign_ssa_name_copy_p): Likewise.\n\t(gimple_assign_unary_nop_p): Use is_gimple_assign.\n\t(is_gimple_cast): Remove.\n\t(gimple_assign_single_p): Move ...\n\t* gimple.h (gimple_assign_single_p): ... here.\n\t(is_gimple_cast): Remove.\n\t(gimple_assign_rhs_code): Simplify.\n\t* gimple-fold.c (gimple_fold_builtin): Use CONVERT_EXPR_P\n\tinstead of is_gimple_cast.\n\t* ipa-type-escape.c (look_for_casts): Likewise.\n\nFrom-SVN: r167200", "tree": {"sha": "2ef7f1febc0aea12d3964123c22645dfb8cb316b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef7f1febc0aea12d3964123c22645dfb8cb316b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbe9454540ab183476df93e6ef8eab50fbb13b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbe9454540ab183476df93e6ef8eab50fbb13b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbe9454540ab183476df93e6ef8eab50fbb13b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbe9454540ab183476df93e6ef8eab50fbb13b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3b8263e201b728fd6f9a4e418b9d4f3c477ae99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b8263e201b728fd6f9a4e418b9d4f3c477ae99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b8263e201b728fd6f9a4e418b9d4f3c477ae99"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "e82364fd7c6c26cbc3577b91915340d5c6f6c3be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dbe9454540ab183476df93e6ef8eab50fbb13b5", "patch": "@@ -1,3 +1,17 @@\n+2010-11-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_assign_copy_p): Use gimple_assign_single_p.\n+\t(gimple_assign_ssa_name_copy_p): Likewise.\n+\t(gimple_assign_unary_nop_p): Use is_gimple_assign.\n+\t(is_gimple_cast): Remove.\n+\t(gimple_assign_single_p): Move ...\n+\t* gimple.h (gimple_assign_single_p): ... here.\n+\t(is_gimple_cast): Remove.\n+\t(gimple_assign_rhs_code): Simplify.\n+\t* gimple-fold.c (gimple_fold_builtin): Use CONVERT_EXPR_P\n+\tinstead of is_gimple_cast.\n+\t* ipa-type-escape.c (look_for_casts): Likewise.\n+\n 2010-11-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (Enum, EnumValue): Document new record types."}, {"sha": "ae4771c903a052fa5183dbed2a57b0c7221cf6ae", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3dbe9454540ab183476df93e6ef8eab50fbb13b5", "patch": "@@ -1273,7 +1273,7 @@ gimple_fold_builtin (gimple stmt)\n \t  /* If the result is not a valid gimple value, or not a cast\n \t     of a valid gimple value, then we cannot use the result.  */\n \t  if (is_gimple_val (new_val)\n-\t      || (is_gimple_cast (new_val)\n+\t      || (CONVERT_EXPR_P (new_val)\n \t\t  && is_gimple_val (TREE_OPERAND (new_val, 0))))\n \t    return new_val;\n \t}"}, {"sha": "7713dab21f9d9e7d5b3322f561b043df5ec7db7c", "filename": "gcc/gimple.c", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3dbe9454540ab183476df93e6ef8eab50fbb13b5", "patch": "@@ -1873,15 +1873,14 @@ gimple_call_return_flags (const_gimple stmt)\n     }\n }\n \n+\n /* Return true if GS is a copy assignment.  */\n \n bool\n gimple_assign_copy_p (gimple gs)\n {\n-  return gimple_code (gs) == GIMPLE_ASSIGN\n-         && get_gimple_rhs_class (gimple_assign_rhs_code (gs))\n-\t    == GIMPLE_SINGLE_RHS\n-\t && is_gimple_val (gimple_op (gs, 1));\n+  return (gimple_assign_single_p (gs)\n+\t  && is_gimple_val (gimple_op (gs, 1)));\n }\n \n \n@@ -1890,28 +1889,12 @@ gimple_assign_copy_p (gimple gs)\n bool\n gimple_assign_ssa_name_copy_p (gimple gs)\n {\n-  return (gimple_code (gs) == GIMPLE_ASSIGN\n-\t  && (get_gimple_rhs_class (gimple_assign_rhs_code (gs))\n-\t      == GIMPLE_SINGLE_RHS)\n+  return (gimple_assign_single_p (gs)\n \t  && TREE_CODE (gimple_assign_lhs (gs)) == SSA_NAME\n \t  && TREE_CODE (gimple_assign_rhs1 (gs)) == SSA_NAME);\n }\n \n \n-/* Return true if GS is an assignment with a singleton RHS, i.e.,\n-   there is no operator associated with the assignment itself.\n-   Unlike gimple_assign_copy_p, this predicate returns true for\n-   any RHS operand, including those that perform an operation\n-   and do not have the semantics of a copy, such as COND_EXPR.  */\n-\n-bool\n-gimple_assign_single_p (gimple gs)\n-{\n-  return (gimple_code (gs) == GIMPLE_ASSIGN\n-          && get_gimple_rhs_class (gimple_assign_rhs_code (gs))\n-\t     == GIMPLE_SINGLE_RHS);\n-}\n-\n /* Return true if GS is an assignment with a unary RHS, but the\n    operator has no effect on the assigned value.  The logic is adapted\n    from STRIP_NOPS.  This predicate is intended to be used in tuplifying\n@@ -1929,7 +1912,7 @@ gimple_assign_single_p (gimple gs)\n bool\n gimple_assign_unary_nop_p (gimple gs)\n {\n-  return (gimple_code (gs) == GIMPLE_ASSIGN\n+  return (is_gimple_assign (gs)\n           && (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (gs))\n               || gimple_assign_rhs_code (gs) == NON_LVALUE_EXPR)\n           && gimple_assign_rhs1 (gs) != error_mark_node\n@@ -2950,15 +2933,6 @@ is_gimple_min_lval (tree t)\n   return (is_gimple_id (t) || TREE_CODE (t) == MEM_REF);\n }\n \n-/* Return true if T is a typecast operation.  */\n-\n-bool\n-is_gimple_cast (tree t)\n-{\n-  return (CONVERT_EXPR_P (t)\n-          || TREE_CODE (t) == FIX_TRUNC_EXPR);\n-}\n-\n /* Return true if T is a valid function operand of a CALL_EXPR.  */\n \n bool"}, {"sha": "05f5231888639a69d8b81234d333053678a8d15b", "filename": "gcc/gimple.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3dbe9454540ab183476df93e6ef8eab50fbb13b5", "patch": "@@ -869,7 +869,6 @@ int gimple_call_arg_flags (const_gimple, unsigned);\n void gimple_call_reset_alias_info (gimple);\n bool gimple_assign_copy_p (gimple);\n bool gimple_assign_ssa_name_copy_p (gimple);\n-bool gimple_assign_single_p (gimple);\n bool gimple_assign_unary_nop_p (gimple);\n void gimple_set_bb (gimple, struct basic_block_def *);\n void gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *, tree);\n@@ -944,8 +943,6 @@ extern bool is_gimple_mem_rhs (tree);\n /* Returns true iff T is a valid if-statement condition.  */\n extern bool is_gimple_condexpr (tree);\n \n-/* Returns true iff T is a type conversion.  */\n-extern bool is_gimple_cast (tree);\n /* Returns true iff T is a variable that does not need to live in memory.  */\n extern bool is_gimple_non_addressable (tree t);\n \n@@ -1904,7 +1901,10 @@ gimple_assign_rhs_code (const_gimple gs)\n   enum tree_code code;\n   GIMPLE_CHECK (gs, GIMPLE_ASSIGN);\n \n-  code = gimple_expr_code (gs);\n+  code = (enum tree_code) gs->gsbase.subcode;\n+  /* While we initially set subcode to the TREE_CODE of the rhs for\n+     GIMPLE_SINGLE_RHS assigns we do not update that subcode to stay\n+     in sync when we rewrite stmts into SSA form or do SSA propagations.  */\n   if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)\n     code = TREE_CODE (gimple_assign_rhs1 (gs));\n \n@@ -1933,6 +1933,19 @@ gimple_assign_rhs_class (const_gimple gs)\n   return get_gimple_rhs_class (gimple_assign_rhs_code (gs));\n }\n \n+/* Return true if GS is an assignment with a singleton RHS, i.e.,\n+   there is no operator associated with the assignment itself.\n+   Unlike gimple_assign_copy_p, this predicate returns true for\n+   any RHS operand, including those that perform an operation\n+   and do not have the semantics of a copy, such as COND_EXPR.  */\n+\n+static inline bool\n+gimple_assign_single_p (gimple gs)\n+{\n+  return (is_gimple_assign (gs)\n+          && gimple_assign_rhs_class (gs) == GIMPLE_SINGLE_RHS);\n+}\n+\n \n /* Return true if S is a type-cast assignment.  */\n "}, {"sha": "6b464dff94c2c29d9c51d156276464554faf41cb", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbe9454540ab183476df93e6ef8eab50fbb13b5/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=3dbe9454540ab183476df93e6ef8eab50fbb13b5", "patch": "@@ -1236,7 +1236,7 @@ look_for_casts (tree t)\n {\n   unsigned int cast = 0;\n \n-  if (is_gimple_cast (t) || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n+  if (CONVERT_EXPR_P (t) || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n     {\n       tree castfromvar = TREE_OPERAND (t, 0);\n       cast = cast | check_cast (TREE_TYPE (t), castfromvar);"}]}