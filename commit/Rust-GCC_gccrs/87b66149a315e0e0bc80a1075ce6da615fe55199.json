{"sha": "87b66149a315e0e0bc80a1075ce6da615fe55199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiNjYxNDlhMzE1ZTBlMGJjODBhMTA3NWNlNmRhNjE1ZmU1NTE5OQ==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-12-12T10:01:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:01:55Z"}, "message": "[Ada] Crash on use of Loop_Entry, Result, and Old as actuals\n\n2019-12-12  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Added null case for\n\t'Loop_Entry, 'Old, and 'Result when calculating whether to\n\tcreate extra accessibility parameters.\n\t* sem_util.adb (Dynamic_Accessibility_Level): Added null case\n\tfor 'Loop_Entry, 'Old, and 'Result when  calculating\n\taccessibility level based on access-valued attributes.  Also\n\tadded special handling for uses of 'Loop_Entry when used in its\n\tindexed component form.\n\nFrom-SVN: r279280", "tree": {"sha": "c4904ecc4b4553aaf066da6ed785da41761a94d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4904ecc4b4553aaf066da6ed785da41761a94d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b66149a315e0e0bc80a1075ce6da615fe55199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b66149a315e0e0bc80a1075ce6da615fe55199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b66149a315e0e0bc80a1075ce6da615fe55199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b66149a315e0e0bc80a1075ce6da615fe55199/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "73434302329d9e873b99c5549ad17bcdc34d60ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87b66149a315e0e0bc80a1075ce6da615fe55199", "patch": "@@ -1,3 +1,14 @@\n+2019-12-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Added null case for\n+\t'Loop_Entry, 'Old, and 'Result when calculating whether to\n+\tcreate extra accessibility parameters.\n+\t* sem_util.adb (Dynamic_Accessibility_Level): Added null case\n+\tfor 'Loop_Entry, 'Old, and 'Result when  calculating\n+\taccessibility level based on access-valued attributes.  Also\n+\tadded special handling for uses of 'Loop_Entry when used in its\n+\tindexed component form.\n+\n 2019-12-12  Arnaud Charlet  <charlet@adacore.com>\n \n \t* raise-gcc.c: Remove references to VMS"}, {"sha": "3d6ef4847030f4ee89d810e3654291c722c544ad", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=87b66149a315e0e0bc80a1075ce6da615fe55199", "patch": "@@ -3389,6 +3389,15 @@ package body Exp_Ch6 is\n                case Nkind (Prev_Orig) is\n                   when N_Attribute_Reference =>\n                      case Get_Attribute_Id (Attribute_Name (Prev_Orig)) is\n+                        --  Ignore 'Result, 'Loop_Entry, and 'Old as they can\n+                        --  be used to identify access objects and do not have\n+                        --  an effect on accessibility level.\n+\n+                        when Attribute_Loop_Entry\n+                           | Attribute_Old\n+                           | Attribute_Result\n+                        =>\n+                           null;\n \n                         --  For X'Access, pass on the level of the prefix X\n "}, {"sha": "c7dabdd6cfa300707b48850c686e444d8d5bd138", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b66149a315e0e0bc80a1075ce6da615fe55199/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=87b66149a315e0e0bc80a1075ce6da615fe55199", "patch": "@@ -6488,7 +6488,7 @@ package body Sem_Util is\n \n       --  Local variables\n \n-      Expr : constant Node_Id := Original_Node (N);\n+      Expr : Node_Id := Original_Node (N);\n       --  Expr references the original node because at this stage N may be the\n       --  reference to a variable internally created by the frontend to remove\n       --  side effects of an expression.\n@@ -6516,6 +6516,21 @@ package body Sem_Util is\n       --  Unimplemented: Ptr.all'Access, where Ptr has Extra_Accessibility ???\n \n       case Nkind (Expr) is\n+         --  It may be possible that we have an access object denoted by an\n+         --  attribute reference for 'Loop_Entry which may, in turn, have an\n+         --  indexed component representing a loop identifier.\n+\n+         --  In this case we must climb up the indexed component and set expr\n+         --  to the attribute reference so the rest of the machinery can\n+         --  operate as expected.\n+\n+         when N_Indexed_Component =>\n+            if Nkind (Prefix (Expr)) = N_Attribute_Reference\n+              and then Get_Attribute_Id (Attribute_Name (Prefix (Expr)))\n+                         = Attribute_Loop_Entry\n+            then\n+               Expr := Prefix (Expr);\n+            end if;\n \n          --  For access discriminant, the level of the enclosing object\n \n@@ -6530,6 +6545,13 @@ package body Sem_Util is\n          when N_Attribute_Reference =>\n             case Get_Attribute_Id (Attribute_Name (Expr)) is\n \n+               --  Ignore 'Loop_Entry, 'Result, and 'Old as they can be used to\n+               --  identify access objects and do not have an effect on\n+               --  accessibility level.\n+\n+               when Attribute_Loop_Entry | Attribute_Old | Attribute_Result =>\n+                  null;\n+\n                --  For X'Access, the level of the prefix X\n \n                when Attribute_Access =>"}]}