{"sha": "27abac26489e547861904edf53ce1f9d3358a20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhYmFjMjY0ODllNTQ3ODYxOTA0ZWRmNTNjZTFmOWQzMzU4YTIwZA==", "commit": {"author": {"name": "Gleb Natapov", "email": "gleb@scylladb.com", "date": "2016-08-22T17:29:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-22T17:29:31Z"}, "message": "libstdc++/68297 avoid throw/catch in make_exception_ptr\n\n2016-08-22  Gleb Natapov  <gleb@scylladb.com>\n\n\tPR libstdc++/68297\n\t* config/abi/pre/gnu-versioned-namespace.ver: Export\n\t__cxa_init_primary_exception and std::exception_ptr(void*).\n\t* config/abi/pre/gnu.ver (CXXABI_1.3.11) : Add new symbol version and\n\texport __cxa_init_primary_exception and std::exception_ptr(void*).\n\t* include/Makefile.am: Add new headers.\n\t* include/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Add new headers.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* libsupc++/cxxabi.h (__cxa_allocate_exception): Move to ...\n\t* libsupc++/cxxabi_init_exception.h: New header.\n\t(__cxa_init_primary_exception): Declare.\n\t* libsupc++/eh_throw.cc (__cxa_init_primary_exception): Define.\n\t(__cxa_throw): Use __cxa_init_primary_exception.\n\t* libsupc++/exception (std::exception): Move to ...\n\t* libsupc++/exception.h: New header.\n\t* libsupc++/exception_ptr.h (__exception_ptr::exception_ptr): Add\n\tfriend declaration.\n\t(__exception_ptr::__dest_thunk): New function template.\n\t(std::make_exception_ptr) [__cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI]:\n\tUse __cxa_allocate_exception and __cxa_init_primary_exception to\n\tcreate exception_ptr.\n\t* libsupc++/typeinfo: Include bits/exception.h instead of exception.\n\t* testsuite/util/testsuite_abi.cc: Add CXXABI_1.3.11 version.\n\nFrom-SVN: r239664", "tree": {"sha": "c914b0f04c008806298aa8f5876f24d1b18fd5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c914b0f04c008806298aa8f5876f24d1b18fd5c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27abac26489e547861904edf53ce1f9d3358a20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27abac26489e547861904edf53ce1f9d3358a20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27abac26489e547861904edf53ce1f9d3358a20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27abac26489e547861904edf53ce1f9d3358a20d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c86ffccf9f7cc4fe6290e5aacf6fb517ac9221b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c86ffccf9f7cc4fe6290e5aacf6fb517ac9221b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c86ffccf9f7cc4fe6290e5aacf6fb517ac9221b"}], "stats": {"total": 294, "additions": 243, "deletions": 51}, "files": [{"sha": "299bce642e8c925208e039d2f29ca7f9ae695379", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -1,3 +1,30 @@\n+2016-08-22  Gleb Natapov  <gleb@scylladb.com>\n+\n+\tPR libstdc++/68297\n+\t* config/abi/pre/gnu-versioned-namespace.ver: Export\n+\t__cxa_init_primary_exception and std::exception_ptr(void*).\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.11) : Add new symbol version and\n+\texport __cxa_init_primary_exception and std::exception_ptr(void*).\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Add new headers.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* libsupc++/cxxabi.h (__cxa_allocate_exception): Move to ...\n+\t* libsupc++/cxxabi_init_exception.h: New header.\n+\t(__cxa_init_primary_exception): Declare.\n+\t* libsupc++/eh_throw.cc (__cxa_init_primary_exception): Define.\n+\t(__cxa_throw): Use __cxa_init_primary_exception.\n+\t* libsupc++/exception (std::exception): Move to ...\n+\t* libsupc++/exception.h: New header.\n+\t* libsupc++/exception_ptr.h (__exception_ptr::exception_ptr): Add\n+\tfriend declaration.\n+\t(__exception_ptr::__dest_thunk): New function template.\n+\t(std::make_exception_ptr) [__cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI]:\n+\tUse __cxa_allocate_exception and __cxa_init_primary_exception to\n+\tcreate exception_ptr.\n+\t* libsupc++/typeinfo: Include bits/exception.h instead of exception.\n+\t* testsuite/util/testsuite_abi.cc: Add CXXABI_1.3.11 version.\n+\n 2016-08-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/api.xml: Replace hardcoded links for specific versions with"}, {"sha": "65866a380f3b3b0eabfdc11100a14843ea3c27fa", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -179,6 +179,7 @@ CXXABI_2.0 {\n     __cxa_free_exception;\n     __cxa_free_dependent_exception;\n     __cxa_get_exception_ptr;\n+    __cxa_init_primary_exception;\n     __cxa_get_globals;\n     __cxa_get_globals_fast;\n     __cxa_guard_abort;\n@@ -205,6 +206,7 @@ CXXABI_2.0 {\n     # std::exception_ptr\n     _ZNSt15__exception_ptr13exception_ptrC1Ev;\n     _ZNSt15__exception_ptr13exception_ptrC2Ev;\n+    _ZNSt15__exception_ptr13exception_ptrC1EPv;\n     _ZNSt15__exception_ptr13exception_ptrC1ERKS0_;\n     _ZNSt15__exception_ptr13exception_ptrC2ERKS0_;\n     _ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE;"}, {"sha": "f51c6f961b08728bc846e9a44effa5173239306d", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -2164,6 +2164,13 @@ CXXABI_1.3.10 {\n \n } CXXABI_1.3.9;\n \n+CXXABI_1.3.11 {\n+\n+    __cxa_init_primary_exception;\n+    _ZNSt15__exception_ptr13exception_ptrC1EPv;\n+\n+} CXXABI_1.3.10;\n+\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}, {"sha": "9cd18dfa3b9c15474a943a24e676bd8cc2ed8dff", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -205,6 +205,8 @@ bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n bits_sup_headers = \\\n \t${bits_sup_srcdir}/atomic_lockfree_defines.h \\\n \t${bits_sup_srcdir}/cxxabi_forced.h \\\n+\t${bits_sup_srcdir}/cxxabi_init_exception.h \\\n+\t${bits_sup_srcdir}/exception.h \\\n \t${bits_sup_srcdir}/exception_defines.h \\\n \t${bits_sup_srcdir}/exception_ptr.h \\\n \t${bits_sup_srcdir}/hash_bytes.h \\"}, {"sha": "d799860d095d6768cd2a9a7070d4f899981ed4ee", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -495,6 +495,8 @@ bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n bits_sup_headers = \\\n \t${bits_sup_srcdir}/atomic_lockfree_defines.h \\\n \t${bits_sup_srcdir}/cxxabi_forced.h \\\n+\t${bits_sup_srcdir}/cxxabi_init_exception.h \\\n+\t${bits_sup_srcdir}/exception.h \\\n \t${bits_sup_srcdir}/exception_defines.h \\\n \t${bits_sup_srcdir}/exception_ptr.h \\\n \t${bits_sup_srcdir}/hash_bytes.h \\"}, {"sha": "ba4eac1e3f86670f15defa509a65c5f76316d7f3", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -35,7 +35,7 @@ std_HEADERS = \\\n \n bits_HEADERS = \\\n \tatomic_lockfree_defines.h cxxabi_forced.h \\\n-\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h\n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h exception.h cxxabi_init_exception.h\n \n headers = $(std_HEADERS) $(bits_HEADERS)\n "}, {"sha": "3fb9d16e527ff046a89d6c8730981a2b5b47b12d", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -395,7 +395,7 @@ std_HEADERS = \\\n \n bits_HEADERS = \\\n \tatomic_lockfree_defines.h cxxabi_forced.h \\\n-\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h\n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h exception.h cxxabi_init_exception.h\n \n headers = $(std_HEADERS) $(bits_HEADERS)\n @GLIBCXX_HOSTED_TRUE@c_sources = \\"}, {"sha": "f4b8f75fd18015a668f73b8e00a41755e5d1007a", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -49,10 +49,7 @@\n #include <bits/c++config.h>\n #include <bits/cxxabi_tweaks.h>\n #include <bits/cxxabi_forced.h>\n-\n-#ifndef _GLIBCXX_CDTOR_CALLABI\n-#define _GLIBCXX_CDTOR_CALLABI\n-#endif\n+#include <bits/cxxabi_init_exception.h>\n \n #ifdef __cplusplus\n namespace __cxxabiv1\n@@ -608,10 +605,6 @@ namespace __cxxabiv1\n   __cxa_eh_globals*\n   __cxa_get_globals_fast() _GLIBCXX_NOTHROW __attribute__ ((__const__));\n \n-  // Allocate memory for the primary exception plus the thrown object.\n-  void*\n-  __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;\n-\n   // Free the space allocated for the primary exception.\n   void \n   __cxa_free_exception(void*) _GLIBCXX_NOTHROW;"}, {"sha": "9af762574f40aacf37e112fffec4a65130cff795", "filename": "libstdc++-v3/libsupc++/cxxabi_init_exception.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -0,0 +1,77 @@\n+// ABI Support -*- C++ -*-\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/cxxabi_init_exception.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly.\n+ */\n+\n+#ifndef _CXXABI_INIT_EXCEPTION_H\n+#define _CXXABI_INIT_EXCEPTION_H 1\n+\n+#pragma GCC system_header\n+\n+#pragma GCC visibility push(default)\n+\n+#include <stddef.h>\n+#include <bits/c++config.h>\n+\n+#ifndef _GLIBCXX_CDTOR_CALLABI\n+#define _GLIBCXX_CDTOR_CALLABI\n+#define _GLIBCXX_HAVE_CDTOR_CALLABI 0\n+#else\n+#define _GLIBCXX_HAVE_CDTOR_CALLABI 1\n+#endif\n+\n+#ifdef __cplusplus\n+\n+namespace std\n+{\n+  class type_info;\n+}\n+\n+namespace __cxxabiv1\n+{\n+  struct __cxa_refcounted_exception;\n+\n+  extern \"C\"\n+    {\n+      // Allocate memory for the primary exception plus the thrown object.\n+      void*\n+      __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;\n+\n+      // Initialize exception (this is a GNU extension)\n+      __cxa_refcounted_exception*\n+      __cxa_init_primary_exception(void *object, std::type_info *tinfo,\n+                void (_GLIBCXX_CDTOR_CALLABI *dest) (void *)) _GLIBCXX_NOTHROW;\n+\n+    }\n+} // namespace __cxxabiv1\n+\n+#endif\n+\n+#pragma GCC visibility pop\n+\n+#endif // _CXXABI_INIT_EXCEPTION_H"}, {"sha": "a05f4eb04ea102580464b2020ed95e1ad5e9a663", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -55,6 +55,22 @@ __gxx_exception_cleanup (_Unwind_Reason_Code code, _Unwind_Exception *exc)\n #endif\n }\n \n+extern \"C\" __cxa_refcounted_exception*\n+__cxxabiv1::__cxa_init_primary_exception(void *obj, std::type_info *tinfo,\n+                                         void (_GLIBCXX_CDTOR_CALLABI *dest) (void *))\n+{\n+  __cxa_refcounted_exception *header\n+    = __get_refcounted_exception_header_from_obj (obj);\n+  header->referenceCount = 0;\n+  header->exc.exceptionType = tinfo;\n+  header->exc.exceptionDestructor = dest;\n+  header->exc.unexpectedHandler = std::get_unexpected ();\n+  header->exc.terminateHandler = std::get_terminate ();\n+  __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->exc.unwindHeader.exception_class);\n+  header->exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n+\n+  return header;\n+}\n \n extern \"C\" void\n __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n@@ -64,17 +80,10 @@ __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n \n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   globals->uncaughtExceptions += 1;\n-\n   // Definitely a primary.\n-  __cxa_refcounted_exception *header\n-    = __get_refcounted_exception_header_from_obj (obj);\n+  __cxa_refcounted_exception *header =\n+    __cxa_init_primary_exception(obj, tinfo, dest);\n   header->referenceCount = 1;\n-  header->exc.exceptionType = tinfo;\n-  header->exc.exceptionDestructor = dest;\n-  header->exc.unexpectedHandler = std::get_unexpected ();\n-  header->exc.terminateHandler = std::get_terminate ();\n-  __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->exc.unwindHeader.exception_class);\n-  header->exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (&header->exc.unwindHeader);"}, {"sha": "8be903ba2dbadc8eb7ad328d5c6edb1ef751eb8c", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -36,39 +36,12 @@\n \n #include <bits/c++config.h>\n #include <bits/atomic_lockfree_defines.h>\n+#include <bits/exception.h>\n \n extern \"C++\" {\n \n namespace std\n {\n-  /**\n-   * @defgroup exceptions Exceptions\n-   * @ingroup diagnostics\n-   *\n-   * Classes and functions for reporting errors via exception classes.\n-   * @{\n-   */\n-\n-  /**\n-   *  @brief Base class for all library exceptions.\n-   *\n-   *  This is the base class for all exceptions thrown by the standard\n-   *  library, and by certain language expressions.  You are free to derive\n-   *  your own %exception classes, or use a different hierarchy, or to\n-   *  throw non-class data (e.g., fundamental types).\n-   */\n-  class exception\n-  {\n-  public:\n-    exception() _GLIBCXX_USE_NOEXCEPT { }\n-    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n-\n-    /** Returns a C-style character string describing the general cause\n-     *  of the current error.  */\n-    virtual const char*\n-    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n-  };\n-\n   /** If an %exception is thrown which is not listed in a function's\n    *  %exception specification, one of these may be thrown.  */\n   class bad_exception : public exception"}, {"sha": "09ac4e021cb6e84296adcbf2f8c7c48f2d06ffa2", "filename": "libstdc++-v3/libsupc++/exception.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -0,0 +1,78 @@\n+// Exception Handling support header for -*- C++ -*-\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/exception.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly.\n+ */\n+\n+#ifndef __EXCEPTION_H\n+#define __EXCEPTION_H 1\n+\n+#pragma GCC system_header\n+\n+#pragma GCC visibility push(default)\n+\n+#include <bits/c++config.h>\n+\n+extern \"C++\" {\n+\n+namespace std\n+{\n+  /**\n+   * @defgroup exceptions Exceptions\n+   * @ingroup diagnostics\n+   *\n+   * Classes and functions for reporting errors via exception classes.\n+   * @{\n+   */\n+\n+  /**\n+   *  @brief Base class for all library exceptions.\n+   *\n+   *  This is the base class for all exceptions thrown by the standard\n+   *  library, and by certain language expressions.  You are free to derive\n+   *  your own %exception classes, or use a different hierarchy, or to\n+   *  throw non-class data (e.g., fundamental types).\n+   */\n+  class exception\n+  {\n+  public:\n+    exception() _GLIBCXX_USE_NOEXCEPT { }\n+    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+\n+    /** Returns a C-style character string describing the general cause\n+     *  of the current error.  */\n+    virtual const char*\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+  };\n+\n+} // namespace std\n+\n+}\n+\n+#pragma GCC visibility pop\n+\n+#endif"}, {"sha": "21e4e8b834858163d25ea835e511d587d1bfe9d1", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -35,6 +35,9 @@\n \n #include <bits/c++config.h>\n #include <bits/exception_defines.h>\n+#include <bits/cxxabi_init_exception.h>\n+#include <typeinfo>\n+#include <new>\n \n #if ATOMIC_INT_LOCK_FREE < 2\n #  error This platform does not support exception propagation.\n@@ -63,6 +66,9 @@ namespace std\n    */\n   exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;\n \n+  template<typename _Ex>\n+  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;\n+\n   /// Throw the object pointed to by the exception_ptr.\n   void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));\n \n@@ -87,6 +93,8 @@ namespace std\n \n       friend exception_ptr std::current_exception() _GLIBCXX_USE_NOEXCEPT;\n       friend void std::rethrow_exception(exception_ptr);\n+      template<typename _Ex>\n+      friend exception_ptr std::make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;\n \n     public:\n       exception_ptr() _GLIBCXX_USE_NOEXCEPT;\n@@ -162,8 +170,12 @@ namespace std\n     swap(exception_ptr& __lhs, exception_ptr& __rhs)\n     { __lhs.swap(__rhs); }\n \n-  } // namespace __exception_ptr\n+    template<typename _Ex>\n+      inline void\n+      __dest_thunk(void* x)\n+      { static_cast<_Ex*>(x)->~_Ex(); }\n \n+  } // namespace __exception_ptr\n \n   /// Obtain an exception_ptr pointing to a copy of the supplied object.\n   template<typename _Ex>\n@@ -173,7 +185,16 @@ namespace std\n #if __cpp_exceptions\n       try\n \t{\n-\t  throw __ex;\n+#if __cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI\n+          void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));\n+          (void)__cxxabiv1::__cxa_init_primary_exception(__e,\n+                                           const_cast<std::type_info*>(&typeid(__ex)),\n+                                           __exception_ptr::__dest_thunk<_Ex>);\n+          new (__e) _Ex(__ex);\n+          return exception_ptr(__e);\n+#else\n+          throw __ex;\n+#endif\n \t}\n       catch(...)\n \t{"}, {"sha": "1c5ccc5ad5d96bea23e90f489332a501092a4515", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -31,7 +31,7 @@\n \n #pragma GCC system_header\n \n-#include <exception>\n+#include <bits/exception.h>\n #if __cplusplus >= 201103L\n #include <bits/hash_bytes.h>\n #endif"}, {"sha": "5174a7f0d9340044b175ba4a5381a7a7f000423e", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27abac26489e547861904edf53ce1f9d3358a20d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=27abac26489e547861904edf53ce1f9d3358a20d", "patch": "@@ -216,6 +216,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.8\");\n       known_versions.push_back(\"CXXABI_1.3.9\");\n       known_versions.push_back(\"CXXABI_1.3.10\");\n+      known_versions.push_back(\"CXXABI_1.3.11\");\n       known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_FLOAT128\");\n     }\n@@ -234,7 +235,7 @@ check_version(symbol& test, bool added)\n \n       // Check that added symbols are added in the latest pre-release version.\n       bool latestp = (test.version_name == \"GLIBCXX_3.4.23\"\n-\t\t     || test.version_name == \"CXXABI_1.3.10\"\n+\t\t     || test.version_name == \"CXXABI_1.3.11\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");\n       if (added && !latestp)"}]}