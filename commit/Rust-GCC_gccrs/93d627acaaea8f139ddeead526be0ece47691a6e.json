{"sha": "93d627acaaea8f139ddeead526be0ece47691a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkNjI3YWNhYWVhOGYxMzlkZGVlYWQ1MjZiZTBlY2U0NzY5MWE2ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-05-22T18:08:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-05-22T18:08:46Z"}, "message": "ZipInputStream.java (fill): New method.\n\n\t* java/util/zip/ZipInputStream.java (fill): New method.\n\t(compressed_len): New instance variable.\n\t(getNextStream): Set it.\n\t(read): Reset inflater on EOF.  Only read via `super' if entry is\n\tdeflated.\n\t(skip): Only skip via `super' if entry is deflated.\n\t* java/util/zip/Deflater.java (last_input_count): Removed.\n\t* java/util/zip/natDeflater.cc (deflate): Return 0 if input array\n\tis length 0.\n\t(needsInput): Don't use last_input_count.\n\t(setInput): Don't set last_input_count.\n\t* java/util/zip/natInflater.cc (getRemaining): Return correct\n\tresult.\n\t(inflate): Return 0 if input array is length 0.\n\t(setInput): Don't set last_input_count.\n\t* java/util/zip/Inflater.java (last_input_count): Removed.\n\nFrom-SVN: r27105", "tree": {"sha": "6128e2388588a5c77d006bb9db245ed589d04041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6128e2388588a5c77d006bb9db245ed589d04041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d627acaaea8f139ddeead526be0ece47691a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d627acaaea8f139ddeead526be0ece47691a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d627acaaea8f139ddeead526be0ece47691a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d627acaaea8f139ddeead526be0ece47691a6e/comments", "author": null, "committer": null, "parents": [{"sha": "5256aa37b4d72f98157015eae9b53aba21789d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5256aa37b4d72f98157015eae9b53aba21789d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5256aa37b4d72f98157015eae9b53aba21789d3b"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "791fa6f15348cece31f62cf4924a0e53e67b7b90", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -1,3 +1,22 @@\n+1999-05-22  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/util/zip/ZipInputStream.java (fill): New method.\n+\t(compressed_len): New instance variable.\n+\t(getNextStream): Set it.\n+\t(read): Reset inflater on EOF.  Only read via `super' if entry is\n+\tdeflated.\n+\t(skip): Only skip via `super' if entry is deflated.\n+\t* java/util/zip/Deflater.java (last_input_count): Removed.\n+\t* java/util/zip/natDeflater.cc (deflate): Return 0 if input array\n+\tis length 0.\n+\t(needsInput): Don't use last_input_count.\n+\t(setInput): Don't set last_input_count.\n+\t* java/util/zip/natInflater.cc (getRemaining): Return correct\n+\tresult.\n+\t(inflate): Return 0 if input array is length 0.\n+\t(setInput): Don't set last_input_count.\n+\t* java/util/zip/Inflater.java (last_input_count): Removed.\n+\n 1999-05-21  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "3c45b285544cf770ac45f7c574805e91e61d0597", "filename": "libjava/java/util/zip/Deflater.java", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -124,9 +124,6 @@ public synchronized void setStrategy (int stgy)\n   // True if finished.\n   private boolean is_finished;\n \n-  // Total number of bytes made available at last setInput.\n-  private int last_input_count;\n-\n   // `Flush' flag to pass to next call to deflate.\n   private int flush_flag;\n }"}, {"sha": "8e9fc6ab4b2548aad3b68c1ae2d15d361962e7b6", "filename": "libjava/java/util/zip/Inflater.java", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FInflater.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FInflater.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FInflater.java?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -95,7 +95,4 @@ public void setInput (byte[] buf)\n \n   // True if dictionary needed.\n   private boolean dict_needed;\n-\n-  // Total number of bytes made available at last setInput.\n-  private int last_input_count;\n }"}, {"sha": "224e7859cfcdc04b5e7bffd8d6002190f5c5c426", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -28,13 +28,9 @@\n \n public class ZipInputStream extends InflaterInputStream\n {\n-  ZipEntry current;\n-  int current_flags;\n-  int avail;\n-\n   public ZipInputStream (InputStream in)\n   {\n-    super(in);\n+    super (in, new Inflater (true));\n   }\n \n   public ZipEntry getNextEntry () throws IOException\n@@ -101,15 +97,41 @@ public ZipEntry getNextEntry () throws IOException\n     entry.time = ZipEntry.timeFromDOS(moddate, modtime);\n     current = entry;\n     avail = uncompressedSize;\n+    compressed_bytes = compressedSize;\n     return entry;\n   }\n \n+  // We override fill to let us control how much data gets read from\n+  // the underlying input stream.  This lets us avoid having to push\n+  // back data.\n+  protected void fill () throws IOException\n+  {\n+    int count = buf.length;\n+    if (count > compressed_bytes)\n+      count = compressed_bytes;\n+    len = in.read(buf, 0, count);\n+    if (len != -1)\n+      {\n+\tcompressed_bytes -= len;\n+\tinf.setInput(buf, 0, len);\n+      }\n+  }\n+\n   public int read (byte[] b, int off, int len)  throws IOException\n   {\n     if (len > avail)\n       len = avail;\n-    int count = super.read(b, off, len);\n-    if (count > 0)\n+    int count;\n+    if (current.method == Deflater.DEFLATED)\n+      count = super.read(b, off, len);\n+    else\n+      count = in.read(b, off, len);\n+    if (count == -1 || avail == 0)\n+      {\n+\tinf.reset();\n+\tcount = -1;\n+      }\n+    else\n       avail -= count;\n     return count;\n   }\n@@ -118,7 +140,11 @@ public long skip (long n)  throws IOException\n   {\n     if (n > avail)\n       n = avail;\n-    long count = super.skip(n);\n+    long count;\n+    if (current.method == Deflater.DEFLATED)\n+      count = super.skip(n);\n+    else\n+      count = in.skip(n);\n     avail = avail - (int) count;\n     return count;\n   }\n@@ -187,4 +213,11 @@ public void close ()  throws IOException\n     current = null;\n     super.close();\n   }\n+\n+  private ZipEntry current;\n+  private int current_flags;\n+  // Number of uncompressed bytes to be read.\n+  private int avail;\n+  // Number of bytes we can read from underlying stream.\n+  private int compressed_bytes;\n }"}, {"sha": "566f918a77a732b927f63dab3a3a0790eafea4a6", "filename": "libjava/java/util/zip/natDeflater.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -41,6 +41,9 @@ java::util::zip::Deflater::deflate (jbyteArray buf, jint off, jint len)\n   if (off < 0 || len < 0 || off + len > buf->length)\n     _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n \n+  if (len == 0)\n+    return 0;\n+\n   s->next_out = (Bytef *) (elements (buf) + off);\n   s->avail_out = len;\n \n@@ -111,7 +114,7 @@ java::util::zip::Deflater::needsInput ()\n {\n   JvSynchronize sync (this);\n   z_streamp s = (z_streamp) zstream;\n-  return s->avail_in - last_input_count == 0;\n+  return s->avail_in == 0;\n }\n \n void\n@@ -150,7 +153,6 @@ java::util::zip::Deflater::setInput (jbyteArray buf, jint off, jint len)\n   if (off < 0 || len < 0 || off + len > buf->length)\n     _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n \n-  last_input_count = len;\n   s->next_in = (Bytef *) (elements (buf) + off);\n   s->avail_in = len;\n }"}, {"sha": "6fc9e3deaab089f069c133c55dee70df927a42d5", "filename": "libjava/java/util/zip/natInflater.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d627acaaea8f139ddeead526be0ece47691a6e/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc?ref=93d627acaaea8f139ddeead526be0ece47691a6e", "patch": "@@ -68,7 +68,7 @@ java::util::zip::Inflater::getRemaining ()\n {\n   JvSynchronize sync (this);\n   z_streamp s = (z_streamp) zstream;\n-  return s->avail_in - last_input_count;\n+  return s->avail_in;\n }\n \n jint\n@@ -98,6 +98,9 @@ java::util::zip::Inflater::inflate (jbyteArray buf, jint off, jint len)\n   if (off < 0 || len < 0 || off + len > buf->length)\n     _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n \n+  if (len == 0)\n+    return 0;\n+\n   s->next_out = (Bytef *) (elements (buf) + off);\n   s->avail_out = len;\n \n@@ -169,7 +172,6 @@ java::util::zip::Inflater::setInput (jbyteArray buf, jint off, jint len)\n   if (off < 0 || len < 0 || off + len > buf->length)\n     _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n \n-  last_input_count = len;\n   s->next_in = (Bytef *) (elements (buf) + off);\n   s->avail_in = len;\n }"}]}