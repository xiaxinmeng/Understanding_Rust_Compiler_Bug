{"sha": "3e3935a94ce8702a788cd3e76eab584ed09277e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzOTM1YTk0Y2U4NzAyYTc4OGNkM2U3NmVhYjU4NGVkMDkyNzdlOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-06-02T17:52:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-06-02T17:52:28Z"}, "message": "re PR c++/21280 (#pragma interface, templates, and \"inline function used but never defined\")\n\ncp:\n\tPR c++/21280\n\t* Make-lang.in (method.o): Add diagnostic.h\n\t* decl.c (start_preparsed_function): Use decl's location for file\n\tinfo.\n\t* decl2.c (cp_finish_file): Set input_location before synthesizing\n\ta function.\n\t(mark_used): When deferring a synthesized function, save current\n\tlocation.  Do not set function's location when actually\n\tsynthesizing it.\n\t* method.c: #include diagnostic.h.\n\t(synthesize_method): Set the functions source location.  Show\n\tneeded location if errors are emitted.\ntestsuite:\n\tPR c++/21280\n\t* g++.dg/opt/interface2.h: New.\n\t* g++.dg/opt/interface2.C: New.\n\t* g++.dg/init/ctor4.C: Adjust error lines.\n\t* g++.old-deja/g++.bob/inherit2.C: Likewise.\n\t* g++.old-deja/g++.bugs/900205_04.C: Likewise.\n\t* g++.old-deja/g++.jason/opeq3.C: Likewise.\n\t* g++.old-deja/g++.pt/assign1.C: Likewise.\n\t* g++.old-deja/g++.pt/crash20.C: Likewise.\n\nFrom-SVN: r100500", "tree": {"sha": "a0248ab483fa16d5d61e52a91d59af7f8fbedf6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0248ab483fa16d5d61e52a91d59af7f8fbedf6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e3935a94ce8702a788cd3e76eab584ed09277e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3935a94ce8702a788cd3e76eab584ed09277e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3935a94ce8702a788cd3e76eab584ed09277e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3935a94ce8702a788cd3e76eab584ed09277e8/comments", "author": null, "committer": null, "parents": [{"sha": "646221d67de0d8ddfe9b35570c8e52a544e20194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646221d67de0d8ddfe9b35570c8e52a544e20194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646221d67de0d8ddfe9b35570c8e52a544e20194"}], "stats": {"total": 138, "additions": 107, "deletions": 31}, "files": [{"sha": "22e08335d7fe5bdde649cb6533aa3a4581631dcb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -1,5 +1,18 @@\n 2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/21280\n+\t* Make-lang.in (method.o): Add diagnostic.h\n+\t* decl.c (start_preparsed_function): Use decl's location for file\n+\tinfo.\n+\t* decl2.c (cp_finish_file): Set input_location before synthesizing\n+\ta function.\n+\t(mark_used): When deferring a synthesized function, save current\n+\tlocation.  Do not set function's location when actually\n+\tsynthesizing it.\n+\t* method.c: #include diagnostic.h.\n+\t(synthesize_method): Set the functions source location.  Show\n+\tneeded location if errors are emitted.\n+\n \t* decl.c (start_decl): Simplify specialization handling. Remove\n \tunneeded CLASSTYPE_TEMPLATE_INSTANTIATION check.\n \t* mangle.c (discriminator_for_local_entity): Use VEC_index."}, {"sha": "30b15fc4d62596af3e54ed801a94018c70860a66", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -260,7 +260,7 @@ cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) toplev.h $(EXPR_\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n   except.h $(TARGET_H)\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h $(RTL_H) $(EXPR_H) \\\n-  $(TM_P_H) $(TARGET_H) gt-cp-method.h\n+  $(TM_P_H) $(TARGET_H) diagnostic.h gt-cp-method.h\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h flags.h toplev.h convert.h\n cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H)\n cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) \\"}, {"sha": "6f1394ba5131a5bf78c167b4eb08762a081a84ac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -9879,7 +9879,8 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   int doing_friend = 0;\n   struct cp_binding_level *bl;\n   tree current_function_parms;\n-  struct c_fileinfo *finfo = get_fileinfo (lbasename (input_filename));\n+  struct c_fileinfo *finfo\n+    = get_fileinfo (lbasename (LOCATION_FILE (DECL_SOURCE_LOCATION (decl1))));\n \n   /* Sanity check.  */\n   gcc_assert (TREE_CODE (TREE_VALUE (void_list_node)) == VOID_TYPE);"}, {"sha": "48febf714d05fbc84da127f48490698ab38d2011", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -2966,6 +2966,10 @@ cp_finish_file (void)\n \t\t finish_function doesn't clean things up, and we end\n \t\t up with CURRENT_FUNCTION_DECL set.  */\n \t      push_to_top_level ();\n+\t      /* The decl's location will mark where it was first\n+\t         needed.  Save that so synthesize method can indicate\n+\t         where it was needed from, in case of error  */\n+\t      input_location = DECL_SOURCE_LOCATION (decl);\n \t      synthesize_method (decl);\n \t      pop_from_top_level ();\n \t      reconsider = true;\n@@ -3228,6 +3232,14 @@ mark_used (tree decl)\n     {\n       if (DECL_DEFERRED_FN (decl))\n \treturn;\n+      \n+      /* Remember the current location for a function we will end up\n+         synthesizing.  Then we can inform the user where it was\n+         required in the case of error.  */\n+      if (DECL_ARTIFICIAL (decl) && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n+\t  && !DECL_THUNK_P (decl))\n+\tDECL_SOURCE_LOCATION (decl) = input_location;\n+      \n       note_vague_linkage_fn (decl);\n     }\n   \n@@ -3245,14 +3257,6 @@ mark_used (tree decl)\n \t pointing to the class location.  */\n       && current_function_decl)\n     {\n-      /* Put the function definition at the position where it is needed,\n-\t rather than within the body of the class.  That way, an error\n-\t during the generation of the implicit body points at the place\n-\t where the attempt to generate the function occurs, giving the\n-\t user a hint as to why we are attempting to generate the\n-\t function.  */\n-      DECL_SOURCE_LOCATION (decl) = input_location;\n-\n       synthesize_method (decl);\n       /* If we've already synthesized the method we don't need to\n \t instantiate it, so we can return right away.  */"}, {"sha": "b64a31d3fd0a2bd9c70ffca1d074bd654eec5a37", "filename": "gcc/cp/method.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"tree-pass.h\"\n+#include \"diagnostic.h\"\n \n /* Various flags to control the mangling process.  */\n \n@@ -731,6 +732,8 @@ do_build_assign_ref (tree fndecl)\n   finish_compound_stmt (compound_stmt);\n }\n \n+/* Synthesize FNDECL, a non-static member function.   */\n+\n void\n synthesize_method (tree fndecl)\n {\n@@ -739,17 +742,19 @@ synthesize_method (tree fndecl)\n   bool need_body = true;\n   tree stmt;\n   location_t save_input_location = input_location;\n+  int error_count = errorcount;\n+  int warning_count = warningcount;\n \n+  /* Reset the source location, we might have been previously\n+     deferred, and thus have saved where we were first needed.  */\n+  DECL_SOURCE_LOCATION (fndecl)\n+    = DECL_SOURCE_LOCATION (TYPE_NAME (DECL_CONTEXT (fndecl)));\n+  \n   /* If we've been asked to synthesize a clone, just synthesize the\n      cloned function instead.  Doing so will automatically fill in the\n      body for the clone.  */\n   if (DECL_CLONED_FUNCTION_P (fndecl))\n-    {\n-      DECL_SOURCE_LOCATION (DECL_CLONED_FUNCTION (fndecl)) =\n-\tDECL_SOURCE_LOCATION (fndecl);\n-      synthesize_method (DECL_CLONED_FUNCTION (fndecl));\n-      return;\n-    }\n+    fndecl = DECL_CLONED_FUNCTION (fndecl);\n \n   /* We may be in the middle of deferred access check.  Disable\n      it now.  */\n@@ -799,6 +804,10 @@ synthesize_method (tree fndecl)\n     pop_function_context_from (context);\n \n   pop_deferring_access_checks ();\n+\n+  if (error_count != errorcount || warning_count != warningcount)\n+    warning (\"%Hsynthesized method %qD first required here \",\n+\t     &input_location, fndecl);\n }\n \n /* Use EXTRACTOR to locate the relevant function called for each base &"}, {"sha": "224ed080422dd4bd46ab2b30a2088e8a60dcc2ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -1,3 +1,15 @@\n+2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21280\n+\t* g++.dg/opt/interface2.h: New.\n+\t* g++.dg/opt/interface2.C: New.\n+\t* g++.dg/init/ctor4.C: Adjust error lines.\n+\t* g++.old-deja/g++.bob/inherit2.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900205_04.C: Likewise.\n+\t* g++.old-deja/g++.jason/opeq3.C: Likewise.\n+\t* g++.old-deja/g++.pt/assign1.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash20.C: Likewise.\n+\n 2005-06-02  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/21734"}, {"sha": "70643ec4e10cd456d9e3fb99f3fd491f4c75fd92", "filename": "gcc/testsuite/g++.dg/init/ctor4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -6,7 +6,7 @@ public:\n   foo();\n };\n \n-class bar: public foo {\n+class bar: public foo {// { dg-error \"uninitialized\" }\n private:\n   int &a;\n };\n@@ -16,5 +16,5 @@ foo::foo() {\n \n int main(int argc, char **argv)\n {\n-  bar x; // { dg-error \"uninitialized\" }\n+  bar x; // { dg-error \"synthesized\" }\n }"}, {"sha": "e75e425893d9a066536fb49eb815922eee41b261", "filename": "gcc/testsuite/g++.dg/opt/interface2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -0,0 +1,19 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 2 Jun 2005 <nathan@codesourcery.com>\n+\n+// PR 21280\n+// Origin: Jens Maurer <jens.maurer@gmx.net>\n+\n+#include \"interface2.h\"\n+\n+struct A\n+{\n+  A() { }\n+  virtual ~A() { }\n+};\n+\n+int main()\n+{\n+  A a;\n+  C<A> c(a);\n+}"}, {"sha": "dc0590472303af5859b4e1f35ac189f2b0e36199", "filename": "gcc/testsuite/g++.dg/opt/interface2.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finterface2.h?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -0,0 +1,11 @@\n+#pragma interface\n+\n+template<class T>\n+struct C\n+{\n+  explicit C(const T& t) : a(t) { }\n+  virtual ~C() { }\n+  T a;\n+};\n+\n+"}, {"sha": "9a64de4dc3e1cf4f0eeb5c7ce2413d9cd84b2538", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -6,11 +6,11 @@ public:\n   void z();\n   A(void) {}\n private:\n-  A(const A &) { abort(); } // { dg-error \"\" } \n+  A(const A &) { abort(); } // { dg-error \"private\" } \n   const A& operator =(const A &) { abort(); }\n };\n \n-class B : public A {\n+class B : public A { // { dg-error \"within\" }\n public:\n   B(void) {}\n };\n@@ -20,5 +20,5 @@ void f(B b) {\n \n void g() {\n   B h;\n-  f(h); // { dg-error \"\" } \n+  f(h); // { dg-error \"synthesized|argument\" } \n }"}, {"sha": "d93181ebb1e1c64258ee1f20fa7d038ac81661c0", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900205_04.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -23,9 +23,9 @@ struct0::struct0 (int, void *) // { dg-error \"note\" }\n {\n }\n \n-struct struct0_derived_struct_0 : public struct0 { // { dg-error \"\" }\n+struct struct0_derived_struct_0 : public struct0 { // { dg-error \"no matching\" }\n };\n \n-struct0_derived_struct_0 object;\n+struct0_derived_struct_0 object; // { dg-error \"synthesized\" }\n \n int main () { return 0; }"}, {"sha": "1267fafbe4928008609b44e68769a2bd794a4d25", "filename": "gcc/testsuite/g++.old-deja/g++.jason/opeq3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fopeq3.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n // Bug: g++ generates code for assignment in invalid situations.\n \n-class X {\n+class X { // { dg-error \"assignment\" }\n   int& a;\n public:\n   X(int& i): a(i) { };\n@@ -11,5 +11,5 @@ void foo ()\n {\n   int one=1, two=2;\n   X a(one), b(two);\n-  a = b;\t\t\t// { dg-error \"\" } no assignment semantics defined\n+  a = b;\t\t\t// { dg-error \"synthesized\" }\n }"}, {"sha": "9f2a4bf065b94b63fb7519bd95ccceb3e4c52ea5", "filename": "gcc/testsuite/g++.old-deja/g++.pt/assign1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -1,14 +1,14 @@\n-// { dg-do assemble  }\n+// { dg-do compile  }\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n template <class T>\n-struct S {\n+struct S { // { dg-error \"assignment\" }\n   S();\n   T t;\n };\n \n void f()\n {\n   S<const int> s;\n-  s = s; // { dg-error \"\" } generated assignment operator is illegal\n+  s = s; // { dg-error \"synthesized\" }\n }"}, {"sha": "f910294e65cc3a34dc017abf700cdf2a0addde1a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash20.C", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3935a94ce8702a788cd3e76eab584ed09277e8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash20.C?ref=3e3935a94ce8702a788cd3e76eab584ed09277e8", "patch": "@@ -1,9 +1,16 @@\n-// { dg-do assemble  }\n+// { dg-do compile  }\n \n template <class T = int>\n-struct A { const T x; A() : x(0) { } A(T x) : x(x) { } }; \n+struct A { // { dg-error \"assignment\" }\n+  const T x;\n+  A() : x(0) { } A(T x) : x(x) { }\n+}; \n \n template <class B>\n-void func () { B y; y = B(); } // { dg-error \"\" } can't use default assignment\n+void func ()\n+{\n+  B y; \n+  y = B();  // { dg-error \"synthesized\" }\n+}\n \n int main (void) { func< A<> >(); }"}]}