{"sha": "4c599ae6e081496466cada6f97b0d4687a6d765a", "node_id": "C_kwDOANBUbNoAKDRjNTk5YWU2ZTA4MTQ5NjQ2NmNhZGE2Zjk3YjBkNDY4N2E2ZDc2NWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T09:38:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T09:38:49Z"}, "message": "tree: Use comdat tree_code_{type,length} even for C++11/14 [PR108634]\n\nThe recent change to undo the tree_code_type/tree_code_length\nexcessive duplication apparently broke building the Linux kernel\nplugin.  While it is certainly desirable that GCC plugins are built\nwith the same compiler as GCC has been built and with the same options\n(at least the important ones), it might be hard to arrange that,\ne.g. if gcc is built using a cross-compiler but the plugin then built\nnatively, or GCC isn't bootstrapped for other reasons, or just as in\nthe kernel case they were building the plugin with -std=gnu++11 while\nthe bootstrapped GCC has been built without any such option and so with\nwhatever the compiler defaulted to.\n\nFor C++17 and later tree_code_{type,length} are UNIQUE symbols with\nthose assembler names, while for C++11/14 they were\n_ZL14tree_code_type and _ZL16tree_code_length.\n\nThe following patch uses a comdat var for those even for C++11/14\nas suggested by Maciej Cencora.  Relying on weak attribute is not an\noption because not all hosts support it and there are non-GNU system\ncompilers.  While we could use it unconditionally,\nI think defining a template just to make it comdat is weird, and\nthe compiler itself is always built with the same compiler.\nPlugins, being separate shared libraries, will have a separate copy of\nthe arrays if they are ODR-used in the plugin, so there is not a big\ndeal if e.g. cc1plus uses tree_code_type while plugin uses\n_ZN19tree_code_type_tmplILi0EE14tree_code_typeE or vice versa.\n\n2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR plugins/108634\n\t* tree-core.h (tree_code_type, tree_code_length): For C++11 or\n\tC++14, don't declare as extern const arrays.\n\t(tree_code_type_tmpl, tree_code_length_tmpl): New types with\n\tstatic constexpr member arrays for C++11 or C++14.\n\t* tree.h (TREE_CODE_CLASS): For C++11 or C++14 use\n\ttree_code_type_tmpl <0>::tree_code_type instead of tree_code_type.\n\t(TREE_CODE_LENGTH): For C++11 or C++14 use\n\ttree_code_length_tmpl <0>::tree_code_length instead of\n\ttree_code_length.\n\t* tree.cc (tree_code_type, tree_code_length): Remove.", "tree": {"sha": "03a7d763a1acd563aaafbf6a019bfdc5cda85c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a7d763a1acd563aaafbf6a019bfdc5cda85c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c599ae6e081496466cada6f97b0d4687a6d765a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c599ae6e081496466cada6f97b0d4687a6d765a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c599ae6e081496466cada6f97b0d4687a6d765a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c599ae6e081496466cada6f97b0d4687a6d765a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb0191aa104badf3cab127f7f87d371c0fef92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb0191aa104badf3cab127f7f87d371c0fef92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb0191aa104badf3cab127f7f87d371c0fef92b"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "fd2be57b78cd064bdf28e87af1064556dd28bb43", "filename": "gcc/tree-core.h", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=4c599ae6e081496466cada6f97b0d4687a6d765a", "patch": "@@ -2285,38 +2285,55 @@ struct floatn_type_info {\n extern bool tree_contains_struct[MAX_TREE_CODES][64];\n \n /* Class of tree given its code.  */\n-#if __cpp_inline_variables >= 201606L\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n #define END_OF_BASE_TREE_CODES tcc_exceptional,\n \n+#if __cpp_inline_variables < 201606L\n+template <int N>\n+struct tree_code_type_tmpl {\n+  static constexpr enum tree_code_class tree_code_type[] = {\n+#include \"all-tree.def\"\n+  };\n+};\n+\n+template <int N>\n+constexpr enum tree_code_class tree_code_type_tmpl<N>::tree_code_type[];\n+#else\n constexpr inline enum tree_code_class tree_code_type[] = {\n #include \"all-tree.def\"\n };\n+#endif\n \n #undef DEFTREECODE\n #undef END_OF_BASE_TREE_CODES\n-#else\n-extern const enum tree_code_class tree_code_type[];\n-#endif\n \n /* Each tree code class has an associated string representation.\n    These must correspond to the tree_code_class entries.  */\n extern const char *const tree_code_class_strings[];\n \n /* Number of argument-words in each kind of tree-node.  */\n \n-#if __cpp_inline_variables >= 201606L\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n #define END_OF_BASE_TREE_CODES 0,\n+\n+#if __cpp_inline_variables < 201606L\n+template <int N>\n+struct tree_code_length_tmpl {\n+  static constexpr unsigned char tree_code_length[] = {\n+#include \"all-tree.def\"\n+  };\n+};\n+\n+template <int N>\n+constexpr unsigned char tree_code_length_tmpl<N>::tree_code_length[];\n+#else\n constexpr inline unsigned char tree_code_length[] = {\n #include \"all-tree.def\"\n };\n+#endif\n \n #undef DEFTREECODE\n #undef END_OF_BASE_TREE_CODES\n-#else\n-extern const unsigned char tree_code_length[];\n-#endif\n \n /* Vector of all alias pairs for global symbols.  */\n extern GTY(()) vec<alias_pair, va_gc> *alias_pairs;"}, {"sha": "d17106e99a814f5bd787b4fbda81de7a91e81af4", "filename": "gcc/tree.cc", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=4c599ae6e081496466cada6f97b0d4687a6d765a", "patch": "@@ -74,34 +74,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"ubsan.h\"\n \n-#if __cpp_inline_variables < 201606L\n-/* Tree code classes.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-#define END_OF_BASE_TREE_CODES tcc_exceptional,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"all-tree.def\"\n-};\n-\n-#undef DEFTREECODE\n-#undef END_OF_BASE_TREE_CODES\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-#define END_OF_BASE_TREE_CODES 0,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"all-tree.def\"\n-};\n-\n-#undef DEFTREECODE\n-#undef END_OF_BASE_TREE_CODES\n-#endif\n-\n /* Names of tree components.\n    Used for printing out the tree and error messages.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,"}, {"sha": "91375f9652f7ea349b524fe2e0c6e53bc1131215", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c599ae6e081496466cada6f97b0d4687a6d765a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4c599ae6e081496466cada6f97b0d4687a6d765a", "patch": "@@ -177,7 +177,12 @@ code_helper::is_builtin_fn () const\n #define TREE_CODE_CLASS_STRING(CLASS)\\\n         tree_code_class_strings[(int) (CLASS)]\n \n+#if __cpp_inline_variables < 201606L\n+#define TREE_CODE_CLASS(CODE)\t\\\n+  tree_code_type_tmpl <0>::tree_code_type[(int) (CODE)]\n+#else\n #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n+#endif\n \n /* Nonzero if NODE represents an exceptional code.  */\n \n@@ -271,7 +276,12 @@ code_helper::is_builtin_fn () const\n \n #define EXPR_P(NODE) IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (NODE)))\n \n+#if __cpp_inline_variables < 201606L\n+#define TREE_CODE_LENGTH(CODE)\t\\\n+  tree_code_length_tmpl <0>::tree_code_length[(int) (CODE)]\n+#else\n #define TREE_CODE_LENGTH(CODE)\ttree_code_length[(int) (CODE)]\n+#endif\n \n \n /* Helper macros for math builtins.  */"}]}