{"sha": "3638733b62b61fe455e7673d248e564843a04666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzODczM2I2MmI2MWZlNDU1ZTc2NzNkMjQ4ZTU2NDg0M2EwNDY2Ng==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-02-24T07:35:42Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-02-24T07:35:42Z"}, "message": "Out-of-date comments noticed while looking at PR 169.\n\n\t* calls.c (preompute_arguments): Update comment.\n\nFrom-SVN: r78357", "tree": {"sha": "167f72f639e83f390cf2585878cbcca3c766a697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/167f72f639e83f390cf2585878cbcca3c766a697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3638733b62b61fe455e7673d248e564843a04666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3638733b62b61fe455e7673d248e564843a04666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3638733b62b61fe455e7673d248e564843a04666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3638733b62b61fe455e7673d248e564843a04666/comments", "author": null, "committer": null, "parents": [{"sha": "69e9762e617f2d1e6e75ae41d24891a6ce7635e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e9762e617f2d1e6e75ae41d24891a6ce7635e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69e9762e617f2d1e6e75ae41d24891a6ce7635e5"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "385e988c1c3b5cb924d65b9b49fe1d67c8f53a7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3638733b62b61fe455e7673d248e564843a04666/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3638733b62b61fe455e7673d248e564843a04666/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3638733b62b61fe455e7673d248e564843a04666", "patch": "@@ -1,3 +1,7 @@\n+2004-02-23  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* calls.c (preompute_arguments): Update comment.\n+\n 2004-02-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* et-forest.c: Replace et_occurences with et_occurrences."}, {"sha": "4bbec9d421fc21c36bf95a33e4c0b1a6e04137f4", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3638733b62b61fe455e7673d248e564843a04666/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3638733b62b61fe455e7673d248e564843a04666/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3638733b62b61fe455e7673d248e564843a04666", "patch": "@@ -1376,20 +1376,16 @@ precompute_arguments (int flags, int num_actuals, struct arg_data *args)\n {\n   int i;\n \n-  /* If this function call is cse'able, precompute all the parameters.\n-     Note that if the parameter is constructed into a temporary, this will\n-     cause an additional copy because the parameter will be constructed\n-     into a temporary location and then copied into the outgoing arguments.\n-     If a parameter contains a call to alloca and this function uses the\n-     stack, precompute the parameter.  */\n-\n-  /* If we preallocated the stack space, and some arguments must be passed\n-     on the stack, then we must precompute any parameter which contains a\n-     function call which will store arguments on the stack.\n-     Otherwise, evaluating the parameter may clobber previous parameters\n-     which have already been stored into the stack.  (we have code to avoid\n-     such case by saving the outgoing stack arguments, but it results in\n-     worse code)  */\n+  /* If this is a libcall, then precompute all arguments so that we do not\n+     get extraneous instructions emitted as part of the libcall sequence.\n+\n+     If this target defines ACCUMULATE_OUTGOING_ARGS to true, then we must\n+     precompute all arguments that contain function calls.  Otherwise,\n+     computing arguments for a subcall may clobber arguments for this call.\n+\n+     If this target defines ACCUMULATE_OUTGOING_ARGS to false, then we only\n+     need to precompute arguments that change the stack pointer, such as calls\n+     to alloca, and calls that do not pop all of their arguments.  */\n \n   for (i = 0; i < num_actuals; i++)\n     if ((flags & ECF_LIBCALL_BLOCK)"}]}