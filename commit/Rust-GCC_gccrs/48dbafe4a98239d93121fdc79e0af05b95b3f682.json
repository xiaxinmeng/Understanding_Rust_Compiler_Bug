{"sha": "48dbafe4a98239d93121fdc79e0af05b95b3f682", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkYmFmZTRhOTgyMzlkOTMxMjFmZGM3OWUwYWYwNWI5NWIzZjY4Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-02-11T18:15:49Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-02-11T18:15:49Z"}, "message": "gen-num-limits.cc: Use sigsetjmp and siglongjmp if available.\n\n* src/gen-num-limits.cc: Use sigsetjmp and siglongjmp if available.\n* mknumeric_limits: Compile it with -DHAVE_CONFIG_H.\n* configure.in: Test for sigsetjmp.\n* configure, config.h.in: Rebuilt.\n\nFrom-SVN: r39586", "tree": {"sha": "81566952f82d63ccedb4d322324ab51879bcd4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81566952f82d63ccedb4d322324ab51879bcd4d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48dbafe4a98239d93121fdc79e0af05b95b3f682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48dbafe4a98239d93121fdc79e0af05b95b3f682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48dbafe4a98239d93121fdc79e0af05b95b3f682", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48dbafe4a98239d93121fdc79e0af05b95b3f682/comments", "author": null, "committer": null, "parents": [{"sha": "1796dff4e376661362700bbfb221e470ddf1b9ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1796dff4e376661362700bbfb221e470ddf1b9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1796dff4e376661362700bbfb221e470ddf1b9ea"}], "stats": {"total": 1683, "additions": 873, "deletions": 810}, "files": [{"sha": "0c3f90f9e00e7c9384c5df56d728b69f971b94de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682", "patch": "@@ -1,3 +1,10 @@\n+2001-02-11  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* src/gen-num-limits.cc: Use sigsetjmp and siglongjmp if available.\n+\t* mknumeric_limits: Compile it with -DHAVE_CONFIG_H.\n+\t* configure.in: Test for sigsetjmp.\n+\t* configure, config.h.in: Rebuilt.\n+\n 2001-02-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* src/valarray-inst.cc (gslice::_Indexer::_Indexer): Don't flip "}, {"sha": "d424291054a53ee9554939cc8c2ab81f58f58734", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682", "patch": "@@ -546,6 +546,9 @@\n /* Version number of package */\n #undef VERSION\n \n+/* Define if sigsetjmp is available.   */\n+#undef HAVE_SIGSETJMP\n+\n //\n // Systems that have certain non-standard functions prefixed with an\n // underscore, we'll handle those here. Must come after config.h.in."}, {"sha": "0f053e5327c52180df7c6fe94d35176032f6fa46", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 835, "deletions": 802, "changes": 1637, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682"}, {"sha": "2342adea86243ec1fcd6437250c17ef268e95c1f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682", "patch": "@@ -217,6 +217,11 @@ else\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n \n+  AC_TRY_COMPILE([\n+#include <setjmp.h>\n+], [sigjmp_buf env; while (! sigsetjmp (env, 1)) siglongjmp (env, 1);],\n+[AC_DEFINE(HAVE_SIGSETJMP, 1, [Define if sigsetjmp is available.  ])])\n+\n   AC_FUNC_MMAP\n fi\n "}, {"sha": "918743f30d3e9077517e07bc5ceadcc9175a7295", "filename": "libstdc++-v3/mknumeric_limits", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682", "patch": "@@ -178,18 +178,17 @@ namespace std {\n \n EOF\n \n-echo \"$CXX $CPPFLAGS -I$BUILD_DIR/include \\\n+echo \"$CXX -I. $CPPFLAGS -I$BUILD_DIR/include -DHAVE_CONFIG_H \\\n     -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\" \\\n      $LDFLAGS\"\n \n-$CXX $CPPFLAGS -I$BUILD_DIR/include \\\n+{ $CXX -I. $CPPFLAGS -I$BUILD_DIR/include -DHAVE_CONFIG_H \\\n     -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\" \\\n      $LDFLAGS\n-\n-if [ ! -f \"$BUILD_DIR/src/gen-num-limits\" ]; then\n+} || {\n   echo \"gen-num-limits failed to build, exiting.\"\n   exit 1\n-fi\n+}\n \n \"$BUILD_DIR/src/gen-num-limits\" >> $OUT_H-t\n "}, {"sha": "7a1416cd768ecb711bba4f965199b0225fd61610", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbafe4a98239d93121fdc79e0af05b95b3f682/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=48dbafe4a98239d93121fdc79e0af05b95b3f682", "patch": "@@ -35,6 +35,10 @@\n \n #include <bits/c++config.h>\n \n+#if HAVE_CONFIG_H\n+# include <config.h>\n+#endif\n+\n //\n // Force Linux <limits.h> to define the *LONG_LONG*\n //\n@@ -57,6 +61,18 @@\n #include <wchar.h>\n #endif\n \n+// mknumeric_limits will first try to compile this file with\n+// HAVE_SIGSETJMP.  If it fails, then it will try without it.  Some\n+// systems, such as GNU/Linux/sparc, would remain with the signal\n+// blocked if the signal handler uses longjmp instead of siglongjmp.\n+// We assume here setjmp/longjmp will preserve the sigblock mask if\n+// sigsetjmp is not present.\n+\n+#if ! HAVE_SIGSETJMP \n+# define sigjmp_buf jmp_buf \n+# define sigsetjmp(buf, save) setjmp (buf) \n+# define siglongjmp(env, ret) longjmp (env, ret) \n+#endif \n \n const char tab[] = \"    \";\n const char tab2[] = \"        \";\n@@ -90,7 +106,7 @@ const int integer_base_rep = 2;\n // occur for int, unsigned, long, unsigned long. Furthermore\n // overflow cannot happen for unsigned integer types.\n \n-jmp_buf env;\n+sigjmp_buf env;\n \n /* The prototype of signal() may vary.  Accomodate variations such as\n    void(*)(int) and void(*)(...).  */\n@@ -112,13 +128,13 @@ void signal_handler(int sig)\n   sigemptyset (&x);\n   sigprocmask(SIG_SETMASK, &x, NULL);\n #endif /* __CYGWIN__ */\n-  longjmp(env, sig); \n+  siglongjmp(env, sig); \n }\n \n template<typename Operation>\n bool trapping(const Operation& op)\n {\n-    if (setjmp(env) == 0) op();\n+    if (sigsetjmp(env, 1) == 0) op();\n     else return true;\n     return false;\n }"}]}