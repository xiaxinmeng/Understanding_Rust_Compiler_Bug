{"sha": "83c64db681317c28239f07c5a8e6bb201834f0ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjNjRkYjY4MTMxN2MyODIzOWYwN2M1YThlNmJiMjAxODM0ZjBiYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-03-23T19:15:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-03-23T19:15:44Z"}, "message": "jni.cc (_Jv_JNI_GetAnyFieldID): Handle unresolved fields.\n\n\t* jni.cc (_Jv_JNI_GetAnyFieldID): Handle unresolved fields.\n\t* java/lang/reflect/natField.cc (getType): Use _Jv_ResolveField\n\tunconditionally.\n\t* include/jvm.h (_Jv_ResolveField): Declare.\n\t* include/java-interp.h (_Jv_ResolveField): Don't declare.\n\t* resolve.cc (_Jv_ResolveField): No longer conditional on\n\tINTERPRETER.\n\nFrom-SVN: r40785", "tree": {"sha": "28774e5e29803dc3ce69073c0dcf0c60c43a6982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28774e5e29803dc3ce69073c0dcf0c60c43a6982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83c64db681317c28239f07c5a8e6bb201834f0ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c64db681317c28239f07c5a8e6bb201834f0ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c64db681317c28239f07c5a8e6bb201834f0ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c64db681317c28239f07c5a8e6bb201834f0ba/comments", "author": null, "committer": null, "parents": [{"sha": "e9f4fa71431e33e47b1eab017ee03f937e27b058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f4fa71431e33e47b1eab017ee03f937e27b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f4fa71431e33e47b1eab017ee03f937e27b058"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "a58e14b51604e4aa43b6c84b92ef553d125a7fed", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1,3 +1,13 @@\n+2001-03-22  Tom Tromey  <tromey@redhat.com>\n+\n+\t* jni.cc (_Jv_JNI_GetAnyFieldID): Handle unresolved fields.\n+\t* java/lang/reflect/natField.cc (getType): Use _Jv_ResolveField\n+\tunconditionally.\n+\t* include/jvm.h (_Jv_ResolveField): Declare.\n+\t* include/java-interp.h (_Jv_ResolveField): Don't declare.\n+\t* resolve.cc (_Jv_ResolveField): No longer conditional on\n+\tINTERPRETER.\n+\n 2001-03-23  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tFix for PR libgcj/1736. Thanks to Robert Boehne and Alexandre Oliva"}, {"sha": "ebf958bf197ade4f0e294dc6938a629822be99a7", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1,6 +1,6 @@\n // java-interp.h - Header file for the bytecode interpreter.  -*- c++ -*-\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -40,7 +40,6 @@ bool _Jv_VerifyClassName (_Jv_Utf8Const *name);\n bool _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n bool _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2);\n void _Jv_DefineClass (jclass, jbyteArray, jint, jint);\n-void _Jv_ResolveField (_Jv_Field *, java::lang::ClassLoader*);\n \n void _Jv_InitField (jobject, jclass, int);\n void * _Jv_AllocMethodInvocation (jsize size);"}, {"sha": "50af7569fb293db5198fade66a72b09028430011", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1,6 +1,6 @@\n // jvm.h - Header file for private implementation information. -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -219,6 +219,7 @@ extern \"C\" void _Jv_CheckArrayStore (jobject array, jobject obj);\n extern \"C\" void _Jv_RegisterClass (jclass klass);\n extern \"C\" void _Jv_RegisterClasses (jclass *classes);\n extern void _Jv_UnregisterClass (_Jv_Utf8Const*, java::lang::ClassLoader*);\n+extern void _Jv_ResolveField (_Jv_Field *, java::lang::ClassLoader*);\n \n extern jclass _Jv_FindClass (_Jv_Utf8Const *name,\n \t\t\t     java::lang::ClassLoader *loader);"}, {"sha": "b934ae76389af4b8abad233d92bd87cd053f1678", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -678,7 +678,7 @@ java::lang::Class::finalize (void)\n void\n java::lang::Class::initializeClass (void)\n {\n-  // jshort-circuit to avoid needless locking.\n+  // short-circuit to avoid needless locking.\n   if (state == JV_STATE_DONE)\n     return;\n \n@@ -713,7 +713,9 @@ java::lang::Class::initializeClass (void)\n     wait ();\n \n   // Steps 3 &  4.\n-  if (state == JV_STATE_DONE || state == JV_STATE_IN_PROGRESS || thread == self)\n+  if (state == JV_STATE_DONE\n+      || state == JV_STATE_IN_PROGRESS\n+      || thread == self)\n     {\n       _Jv_MonitorExit (this);\n       return;"}, {"sha": "0aedc4ea3639a27dd8f172804d1af6d0a8210a2e", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1,6 +1,6 @@\n // natField.cc - Implementation of java.lang.reflect.Field native methods.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -44,17 +44,8 @@ jclass\n java::lang::reflect::Field::getType ()\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  if (! fld->isResolved())\n-    {\n-      JvSynchronize sync (declaringClass);\n-      if (! fld->isResolved())\n-\t{\n-\t  fld->type\n-\t    = _Jv_FindClassFromSignature(((Utf8Const*) (fld->type))->data,\n-\t\t\t\t\t declaringClass->getClassLoader());\n-\t  fld->flags &= ~_Jv_FIELD_UNRESOLVED_FLAG;\n-\t}\n-    }\n+  JvSynchronize sync (declaringClass);\n+  _Jv_ResolveField (fld, declaringClass->getClassLoader ());\n   return fld->type;\n }\n "}, {"sha": "7b682f177b73711e6e097f83ed07d1bf13c86574", "filename": "libjava/jni.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1068,8 +1068,13 @@ _Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n \n       // FIXME: what if field_class == NULL?\n \n+      java::lang::ClassLoader *loader = clazz->getClassLoader ();\n       while (clazz != NULL)\n \t{\n+\t  // We acquire the class lock so that fields aren't resolved\n+\t  // while we are running.\n+\t  JvSynchronize sync (clazz);\n+\n \t  jint count = (is_static\n \t\t\t? JvNumStaticFields (clazz)\n \t\t\t: JvNumInstanceFields (clazz));\n@@ -1078,12 +1083,11 @@ _Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n \t\t\t    : JvGetFirstInstanceField (clazz));\n \t  for (jint i = 0; i < count; ++i)\n \t    {\n-\t      // The field is resolved as a side effect of class\n-\t      // initialization.\n-\t      JvAssert (field->isResolved ());\n-\n \t      _Jv_Utf8Const *f_name = field->getNameUtf8Const(clazz);\n \n+\t      // The field might be resolved or it might not be.  It\n+\t      // is much simpler to always resolve it.\n+\t      _Jv_ResolveField (field, loader);\n \t      if (_Jv_equalUtf8Consts (f_name, a_name)\n \t\t  && field->getClass() == field_class)\n \t\treturn field;"}, {"sha": "b0a0565e32e07c828b6bfcd00f21db36d654be84", "filename": "libjava/resolve.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c64db681317c28239f07c5a8e6bb201834f0ba/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=83c64db681317c28239f07c5a8e6bb201834f0ba", "patch": "@@ -1,6 +1,6 @@\n // resolve.cc - Code for linking and resolving classes and pool entries.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -32,6 +32,17 @@ details.  */\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/reflect/Modifier.h>\n \n+void\n+_Jv_ResolveField (_Jv_Field *field, java::lang::ClassLoader *loader)\n+{\n+  if (! field->isResolved ())\n+    {\n+      _Jv_Utf8Const *sig = (_Jv_Utf8Const*)field->type;\n+      field->type = _Jv_FindClassFromSignature (sig->data, loader);\n+      field->flags &= ~_Jv_FIELD_UNRESOLVED_FLAG;\n+    }\n+}\n+\n #ifdef INTERPRETER\n \n static void throw_internal_error (char *msg)\n@@ -361,17 +372,6 @@ _Jv_SearchMethodInClass (jclass cls, jclass klass,\n   return 0;\n }\n \n-void\n-_Jv_ResolveField (_Jv_Field *field, java::lang::ClassLoader *loader)\n-{\n-  if (! field->isResolved ())\n-    {\n-      _Jv_Utf8Const *sig = (_Jv_Utf8Const*)field->type;\n-      field->type = _Jv_FindClassFromSignature (sig->data, loader);\n-      field->flags &= ~_Jv_FIELD_UNRESOLVED_FLAG;\n-    }\n-}\n-\n /** FIXME: this is a terribly inefficient algorithm!  It would improve\n     things if compiled classes to know vtable offset, and _Jv_Method had\n     a field for this."}]}