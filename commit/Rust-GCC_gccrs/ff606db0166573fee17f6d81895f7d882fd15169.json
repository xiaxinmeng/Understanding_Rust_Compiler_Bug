{"sha": "ff606db0166573fee17f6d81895f7d882fd15169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2MDZkYjAxNjY1NzNmZWUxN2Y2ZDgxODk1ZjdkODgyZmQxNTE2OQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-09T07:54:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:54:14Z"}, "message": "[Ada] Sinfo: refine comment for Do_Range_Check\n\n2019-07-09  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sinfo.ads: Refine comment for Do_Range_Check.\n\nFrom-SVN: r273277", "tree": {"sha": "c26baca94e095afa05a109c3bfcb1c294a7d3216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26baca94e095afa05a109c3bfcb1c294a7d3216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff606db0166573fee17f6d81895f7d882fd15169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff606db0166573fee17f6d81895f7d882fd15169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff606db0166573fee17f6d81895f7d882fd15169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff606db0166573fee17f6d81895f7d882fd15169/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd9290ec5334de4426f4a510f4a32fd02e012f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9290ec5334de4426f4a510f4a32fd02e012f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9290ec5334de4426f4a510f4a32fd02e012f04"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "17c27abcfd599c53a38a868ddb557223b43ddc5f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff606db0166573fee17f6d81895f7d882fd15169/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff606db0166573fee17f6d81895f7d882fd15169/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff606db0166573fee17f6d81895f7d882fd15169", "patch": "@@ -1,3 +1,7 @@\n+2019-07-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinfo.ads: Refine comment for Do_Range_Check.\n+\n 2019-07-09  Yannick Moy  <moy@adacore.com>\n \n \t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Expand"}, {"sha": "7be56cb98505deed9f73b6afcfc90e864147210c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff606db0166573fee17f6d81895f7d882fd15169/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff606db0166573fee17f6d81895f7d882fd15169/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ff606db0166573fee17f6d81895f7d882fd15169", "patch": "@@ -754,7 +754,11 @@ package Sinfo is\n    --  GNATprove mode. As a special case, the front end does not insert a\n    --  Do_Division_Check flag on float exponentiation expressions, for the case\n    --  where the value is 0.0 and the exponent is negative, although this case\n-   --  does lead to a division check failure.\n+   --  does lead to a division check failure. As another special case,\n+   --  the frontend does not insert a Do_Range_Check on an allocator where\n+   --  the designated type is scalar, and the designated type is more\n+   --  constrained than the type of the initialized allocator value or the type\n+   --  of the default value for an uninitialized allocator.\n \n    --  Note: the expander always takes care of the Do_Range check case,\n    --  so this flag will never be set in the expanded tree passed to the"}]}