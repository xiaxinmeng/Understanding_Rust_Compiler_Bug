{"sha": "e449429213d601e60b19d1d5db6dd761df98c2c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0OTQyOTIxM2Q2MDFlNjBiMTlkMWQ1ZGI2ZGQ3NjFkZjk4YzJjNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-02-20T13:38:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:38:06Z"}, "message": "einfo.ads: Minor comment addition: Etype of package is Standard_Void_Type.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads: Minor comment addition: Etype of package is\n\tStandard_Void_Type.\n\t* checks.adb, exp_aggr.adb, exp_atag.adb, exp_attr.adb, exp_ch13.adb,\n\texp_ch2.adb, exp_ch3.adb, exp_ch4.adb, exp_ch5.adb, exp_ch6.adb,\n\texp_ch7.adb, exp_ch9.adb, exp_dbug.adb, exp_disp.adb, exp_imgv.adb,\n\texp_intr.adb, exp_prag.adb, exp_sel.adb, exp_strm.adb, exp_util.adb,\n\tfreeze.adb, rtsfind.adb, sem_aggr.adb, sem_attr.adb, sem_ch10.adb,\n\tsem_ch12.adb, sem_ch13.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n\tsem_ch6.adb, sem_ch8.adb, sem_dim.adb, sem_prag.adb, sem_res.adb,\n\tsem_util.adb, tbuild.adb, tbuild.ads: Remove New_Reference_To.\n\tReplace all calls with calls to New_Occurrence_Of.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* par-util.adb (Ignore, case of right paren): Make this a\n\tserious error.\n\nFrom-SVN: r207942", "tree": {"sha": "cecff9bfdd85fd8f02159f7941edbadfef64e28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cecff9bfdd85fd8f02159f7941edbadfef64e28c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e449429213d601e60b19d1d5db6dd761df98c2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e449429213d601e60b19d1d5db6dd761df98c2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e449429213d601e60b19d1d5db6dd761df98c2c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e449429213d601e60b19d1d5db6dd761df98c2c5/comments", "author": null, "committer": null, "parents": [{"sha": "9576e7b112cad4adb1f9f37d913b7161640808d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9576e7b112cad4adb1f9f37d913b7161640808d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9576e7b112cad4adb1f9f37d913b7161640808d8"}], "stats": {"total": 3326, "additions": 1692, "deletions": 1634}, "files": [{"sha": "ae7d4fec6b59346bc067e1a21106ce13f2111619", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1,3 +1,22 @@\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads: Minor comment addition: Etype of package is\n+\tStandard_Void_Type.\n+\t* checks.adb, exp_aggr.adb, exp_atag.adb, exp_attr.adb, exp_ch13.adb,\n+\texp_ch2.adb, exp_ch3.adb, exp_ch4.adb, exp_ch5.adb, exp_ch6.adb,\n+\texp_ch7.adb, exp_ch9.adb, exp_dbug.adb, exp_disp.adb, exp_imgv.adb,\n+\texp_intr.adb, exp_prag.adb, exp_sel.adb, exp_strm.adb, exp_util.adb,\n+\tfreeze.adb, rtsfind.adb, sem_aggr.adb, sem_attr.adb, sem_ch10.adb,\n+\tsem_ch12.adb, sem_ch13.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n+\tsem_ch6.adb, sem_ch8.adb, sem_dim.adb, sem_prag.adb, sem_res.adb,\n+\tsem_util.adb, tbuild.adb, tbuild.ads: Remove New_Reference_To.\n+\tReplace all calls with calls to New_Occurrence_Of.\n+\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-util.adb (Ignore, case of right paren): Make this a\n+\tserious error.\n+\n 2014-02-19  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch5.adb, sem_prag.adb, sem_attr.adb: Minor reformatting."}, {"sha": "82b6d6019cab355c34bb0a4da2e52dcaa156b84b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1031,7 +1031,7 @@ package body Checks is\n             Rewrite (N,\n               OK_Convert_To (Typ,\n                 Make_Function_Call (Loc,\n-                  Name => New_Reference_To (RTE (Cent), Loc),\n+                  Name => New_Occurrence_Of (RTE (Cent), Loc),\n                   Parameter_Associations => New_List (\n                     OK_Convert_To (RTE (RE_Integer_64), Left_Opnd  (N)),\n                     OK_Convert_To (RTE (RE_Integer_64), Right_Opnd (N))))));\n@@ -2258,7 +2258,7 @@ package body Checks is\n                 Then_Statements => New_List (\n                   Make_Raise_Statement (Loc,\n                     Name       =>\n-                      New_Reference_To (Standard_Program_Error, Loc),\n+                      New_Occurrence_Of (Standard_Program_Error, Loc),\n                     Expression => Make_String_Literal (Loc, End_String)))));\n \n          --  Create a sequence of overlapping checks by and-ing them all\n@@ -2388,7 +2388,7 @@ package body Checks is\n          --  Step 1: Create the expression to verify the validity of the\n          --  context.\n \n-         Check := New_Reference_To (Context, Loc);\n+         Check := New_Occurrence_Of (Context, Loc);\n \n          --  When processing a function result, use 'Result. Generate\n          --    Context'Result\n@@ -5734,7 +5734,7 @@ package body Checks is\n                          Duplicate_Subexpr_Move_Checks (Sub)),\n                      Right_Opnd =>\n                        Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Reference_To (Etype (A), Loc),\n+                         Prefix         => New_Occurrence_Of (Etype (A), Loc),\n                          Attribute_Name => Name_Range)),\n                 Reason => CE_Index_Check_Failed));\n          end if;\n@@ -5788,7 +5788,7 @@ package body Checks is\n                      Range_N :=\n                        Make_Attribute_Reference (Loc,\n                          Prefix         =>\n-                           New_Reference_To (Etype (A_Idx), Loc),\n+                           New_Occurrence_Of (Etype (A_Idx), Loc),\n                          Attribute_Name => Name_Range);\n \n                   --  For arrays with non-constant bounds we cannot generate\n@@ -6936,15 +6936,15 @@ package body Checks is\n                 New_Occurrence_Of (RTE (RE_Mark_Id), Loc),\n               Expression          =>\n                 Make_Function_Call (Loc,\n-                  Name => New_Reference_To (RTE (RE_SS_Mark), Loc)))),\n+                  Name => New_Occurrence_Of (RTE (RE_SS_Mark), Loc)))),\n \n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               Statements => New_List (\n                 Make_Procedure_Call_Statement (Loc,\n                   Name => New_Occurrence_Of (RTE (RE_SS_Release), Loc),\n                   Parameter_Associations => New_List (\n-                    New_Reference_To (M, Loc))))));\n+                    New_Occurrence_Of (M, Loc))))));\n    end Make_Bignum_Block;\n \n    ----------------------------------"}, {"sha": "0b5d72b1c87d5d279f3f94b954ebbb082cd7dbfc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1121,7 +1121,8 @@ package Einfo is\n --       itself. For a subtype entity, Etype points to the base type. For\n --       a class wide type, points to the corresponding specific type. For a\n --       subprogram or subprogram type, Etype has the return type of a function\n---       or is set to Standard_Void_Type to represent a procedure.\n+--       or is set to Standard_Void_Type to represent a procedure. The Etype\n+--       field of a package is also set to Standard_Void_Type.\n --\n --       Note one obscure case: for pragma Default_Storage_Pool (null), the\n --       Etype of the N_Null node is Empty."}, {"sha": "aa742d6a21f830979dfa1a428825f9608e83ae00", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1236,12 +1236,12 @@ package body Exp_Aggr is\n                         Make_Selected_Component (Loc,\n                           Prefix        =>  New_Copy_Tree (Indexed_Comp),\n                           Selector_Name =>\n-                            New_Reference_To\n+                            New_Occurrence_Of\n                               (First_Tag_Component (Full_Typ), Loc)),\n \n                       Expression =>\n                         Unchecked_Convert_To (RTE (RE_Tag),\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (Node (First_Elmt (Access_Disp_Table (Full_Typ))),\n                              Loc)));\n \n@@ -1409,7 +1409,7 @@ package body Exp_Aggr is\n \n          --  Construct the statements to execute in the loop body\n \n-         L_Body := Gen_Assign (New_Reference_To (L_J, Loc), Expr);\n+         L_Body := Gen_Assign (New_Occurrence_Of (L_J, Loc), Expr);\n \n          --  Construct the final loop\n \n@@ -1496,7 +1496,7 @@ package body Exp_Aggr is\n              (Loc,\n               Condition => Make_Op_Lt\n                              (Loc,\n-                              Left_Opnd  => New_Reference_To (W_J, Loc),\n+                              Left_Opnd  => New_Occurrence_Of (W_J, Loc),\n                               Right_Opnd => New_Copy_Tree (H)));\n \n          --  Construct the statements to execute in the loop body\n@@ -1506,17 +1506,17 @@ package body Exp_Aggr is\n              (Loc,\n               Prefix         => Index_Base_Name,\n               Attribute_Name => Name_Succ,\n-              Expressions    => New_List (New_Reference_To (W_J, Loc)));\n+              Expressions    => New_List (New_Occurrence_Of (W_J, Loc)));\n \n          W_Increment  :=\n            Make_OK_Assignment_Statement\n              (Loc,\n-              Name       => New_Reference_To (W_J, Loc),\n+              Name       => New_Occurrence_Of (W_J, Loc),\n               Expression => W_Index_Succ);\n \n          Append_To (W_Body, W_Increment);\n          Append_List_To (W_Body,\n-           Gen_Assign (New_Reference_To (W_J, Loc), Expr));\n+           Gen_Assign (New_Occurrence_Of (W_J, Loc), Expr));\n \n          --  Construct the final loop\n \n@@ -1535,7 +1535,7 @@ package body Exp_Aggr is\n \n       function Index_Base_Name return Node_Id is\n       begin\n-         return New_Reference_To (Index_Base, Sloc (N));\n+         return New_Occurrence_Of (Index_Base, Sloc (N));\n       end Index_Base_Name;\n \n       ------------------------------------\n@@ -2198,7 +2198,7 @@ package body Exp_Aggr is\n             Append_To (L,\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n-                  New_Reference_To\n+                  New_Occurrence_Of\n                     (Find_Prim_Op (Init_Typ, Name_Initialize), Loc),\n                 Parameter_Associations => New_List (New_Copy_Tree (Ref))));\n          end if;\n@@ -2490,12 +2490,12 @@ package body Exp_Aggr is\n                         Make_Selected_Component (Loc,\n                           Prefix => New_Copy_Tree (Target),\n                           Selector_Name =>\n-                            New_Reference_To\n+                            New_Occurrence_Of\n                               (First_Tag_Component (Base_Type (Typ)), Loc)),\n \n                       Expression =>\n                         Unchecked_Convert_To (RTE (RE_Tag),\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (Node (First_Elmt\n                                (Access_Disp_Table (Base_Type (Typ)))),\n                              Loc)));\n@@ -2628,7 +2628,7 @@ package body Exp_Aggr is\n                if Present (CPP_Init_Proc (T)) then\n                   Append_To (L,\n                     Make_Procedure_Call_Statement (Loc,\n-                      New_Reference_To (CPP_Init_Proc (T), Loc)));\n+                      New_Occurrence_Of (CPP_Init_Proc (T), Loc)));\n                end if;\n             end Invoke_IC_Proc;\n \n@@ -2641,7 +2641,7 @@ package body Exp_Aggr is\n                Append_To (L,\n                  Make_Procedure_Call_Statement (Loc,\n                    Name =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Base_Init_Proc (CPP_Parent), Loc),\n                    Parameter_Associations => New_List (\n                      Unchecked_Convert_To (CPP_Parent,\n@@ -2798,7 +2798,7 @@ package body Exp_Aggr is\n                          Subtype_Indication  =>\n                            Make_Subtype_Indication (Loc,\n                              Subtype_Mark =>\n-                               New_Reference_To (Etype (Comp_Type), Loc),\n+                               New_Occurrence_Of (Etype (Comp_Type), Loc),\n                              Constraint =>\n                                Make_Index_Or_Discriminant_Constraint\n                                  (Loc,\n@@ -2814,7 +2814,7 @@ package body Exp_Aggr is\n                      TmpD : constant Node_Id :=\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => TmpE,\n-                         Object_Definition   => New_Reference_To (SubE, Loc));\n+                         Object_Definition   => New_Occurrence_Of (SubE, Loc));\n \n                   begin\n                      Set_No_Initialization (TmpD);\n@@ -2825,14 +2825,14 @@ package body Exp_Aggr is\n \n                      Append_List_To (L,\n                        Late_Expansion (Expr_Q, Comp_Type,\n-                         New_Reference_To (TmpE, Loc)));\n+                         New_Occurrence_Of (TmpE, Loc)));\n \n                      --  Slide\n \n                      Append_To (L,\n                        Make_Assignment_Statement (Loc,\n                          Name       => New_Copy_Tree (Comp_Expr),\n-                         Expression => New_Reference_To (TmpE, Loc)));\n+                         Expression => New_Occurrence_Of (TmpE, Loc)));\n                   end;\n \n                --  Normal case (sliding not required)\n@@ -2872,12 +2872,12 @@ package body Exp_Aggr is\n                         Make_Selected_Component (Loc,\n                           Prefix =>  New_Copy_Tree (Comp_Expr),\n                           Selector_Name =>\n-                            New_Reference_To\n+                            New_Occurrence_Of\n                               (First_Tag_Component (Comp_Type), Loc)),\n \n                       Expression =>\n                         Unchecked_Convert_To (RTE (RE_Tag),\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (Node (First_Elmt (Access_Disp_Table (Comp_Type))),\n                              Loc)));\n \n@@ -2990,12 +2990,12 @@ package body Exp_Aggr is\n                Make_Selected_Component (Loc,\n                  Prefix => New_Copy_Tree (Target),\n                  Selector_Name =>\n-                   New_Reference_To\n+                   New_Occurrence_Of\n                      (First_Tag_Component (Base_Type (Typ)), Loc)),\n \n              Expression =>\n                Unchecked_Convert_To (RTE (RE_Tag),\n-                 New_Reference_To\n+                 New_Occurrence_Of\n                    (Node (First_Elmt (Access_Disp_Table (Base_Type (Typ)))),\n                     Loc)));\n \n@@ -3073,7 +3073,7 @@ package body Exp_Aggr is\n \n       Occ  : constant Node_Id :=\n         Unchecked_Convert_To (Typ,\n-          Make_Explicit_Dereference (Loc, New_Reference_To (Temp, Loc)));\n+          Make_Explicit_Dereference (Loc, New_Occurrence_Of (Temp, Loc)));\n \n    begin\n       if Is_Array_Type (Typ) then\n@@ -4655,7 +4655,7 @@ package body Exp_Aggr is\n                   Make_Op_Add (Loc,\n                     Left_Opnd  =>\n                       Make_Attribute_Reference (Loc,\n-                        Prefix         => New_Reference_To (Ind_Typ, Loc),\n+                        Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n                         Attribute_Name => Name_Pos,\n                         Expressions    =>\n                           New_List\n@@ -4664,7 +4664,7 @@ package body Exp_Aggr is\n \n                 Right_Opnd =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Reference_To (Ind_Typ, Loc),\n+                    Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n                     Attribute_Name => Name_Pos,\n                     Expressions    => New_List (\n                       Duplicate_Subexpr_Move_Checks (Aggr_Hi))));\n@@ -5214,7 +5214,7 @@ package body Exp_Aggr is\n \n       begin\n          if Nkind (Tmp) = N_Defining_Identifier then\n-            Target := New_Reference_To (Tmp, Loc);\n+            Target := New_Occurrence_Of (Tmp, Loc);\n \n          else\n \n@@ -6579,7 +6579,7 @@ package body Exp_Aggr is\n          --   Call init proc to set discriminants.\n          --   There should eventually be a special procedure for this ???\n \n-         Ref := New_Reference_To (Defining_Identifier (N), Loc);\n+         Ref := New_Occurrence_Of (Defining_Identifier (N), Loc);\n          Insert_Actions_After (N,\n            Build_Initialization_Call (Sloc (N), Ref, Typ));\n       end if;"}, {"sha": "36e7dc6abcf4b7e0388055300dfb951aa37640fd", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -87,13 +87,13 @@ package body Exp_Atag is\n       if Tagged_Type_Expansion then\n          Tag_Node :=\n            Unchecked_Convert_To (RTE (RE_Tag),\n-             New_Reference_To\n+             New_Occurrence_Of\n               (Node (First_Elmt (Access_Disp_Table (Typ))), Loc));\n \n       else\n          Tag_Node :=\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Reference_To (Typ, Loc),\n+             Prefix => New_Occurrence_Of (Typ, Loc),\n              Attribute_Name => Name_Tag);\n       end if;\n \n@@ -128,27 +128,27 @@ package body Exp_Atag is\n                 Make_Op_Eq (Loc,\n                   Left_Opnd  => Make_Identifier (Loc, Name_uC),\n                   Right_Opnd =>\n-                    New_Reference_To (RTE (RE_POK_Procedure), Loc)),\n+                    New_Occurrence_Of (RTE (RE_POK_Procedure), Loc)),\n               Right_Opnd =>\n                 Make_Or_Else (Loc,\n                   Left_Opnd =>\n                     Make_Op_Eq (Loc,\n                       Left_Opnd => Make_Identifier (Loc, Name_uC),\n                       Right_Opnd =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (RTE (RE_POK_Protected_Procedure), Loc)),\n                   Right_Opnd =>\n                     Make_Op_Eq (Loc,\n                       Left_Opnd  => Make_Identifier (Loc, Name_uC),\n                       Right_Opnd =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (RTE (RE_POK_Task_Procedure), Loc)))),\n \n           Then_Statements =>\n             New_List (\n               Make_Assignment_Statement (Loc,\n                 Name       => Make_Identifier (Loc, Name_uF),\n-                Expression => New_Reference_To (Standard_True, Loc)),\n+                Expression => New_Occurrence_Of (Standard_True, Loc)),\n               Make_Simple_Return_Statement (Loc))));\n    end Build_Common_Dispatching_Select_Statements;\n \n@@ -183,7 +183,7 @@ package body Exp_Atag is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Tag_Addr,\n           Constant_Present    => True,\n-          Object_Definition   => New_Reference_To (RTE (RE_Address), Loc),\n+          Object_Definition   => New_Occurrence_Of (RTE (RE_Address), Loc),\n           Expression          => Unchecked_Convert_To\n                                    (RTE (RE_Address), Obj_Tag_Node)));\n \n@@ -196,15 +196,15 @@ package body Exp_Atag is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Obj_TSD,\n           Constant_Present    => True,\n-          Object_Definition   => New_Reference_To\n+          Object_Definition   => New_Occurrence_Of\n                                    (RTE (RE_Type_Specific_Data_Ptr), Loc),\n-          Expression => Build_TSD (Loc, New_Reference_To (Tag_Addr, Loc))));\n+          Expression => Build_TSD (Loc, New_Occurrence_Of (Tag_Addr, Loc))));\n \n       Insert_Action (Related_Nod,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Typ_TSD,\n           Constant_Present    => True,\n-          Object_Definition   => New_Reference_To\n+          Object_Definition   => New_Occurrence_Of\n                                    (RTE (RE_Type_Specific_Data_Ptr), Loc),\n           Expression => Build_TSD (Loc,\n                           Unchecked_Convert_To (RTE (RE_Address),\n@@ -219,16 +219,16 @@ package body Exp_Atag is\n             Make_Op_Subtract (Loc,\n               Left_Opnd =>\n                 Make_Selected_Component (Loc,\n-                  Prefix        => New_Reference_To (Obj_TSD, Loc),\n+                  Prefix        => New_Occurrence_Of (Obj_TSD, Loc),\n                   Selector_Name =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (RTE_Record_Component (RE_Idepth), Loc)),\n \n                Right_Opnd =>\n                  Make_Selected_Component (Loc,\n-                   Prefix        => New_Reference_To (Typ_TSD, Loc),\n+                   Prefix        => New_Occurrence_Of (Typ_TSD, Loc),\n                    Selector_Name =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (RTE_Record_Component (RE_Idepth), Loc)))));\n \n       New_Node :=\n@@ -244,9 +244,9 @@ package body Exp_Atag is\n                 Make_Indexed_Component (Loc,\n                   Prefix =>\n                     Make_Selected_Component (Loc,\n-                      Prefix        => New_Reference_To (Obj_TSD, Loc),\n+                      Prefix        => New_Occurrence_Of (Obj_TSD, Loc),\n                       Selector_Name =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (RTE_Record_Component (RE_Tags_Table), Loc)),\n                   Expressions =>\n                     New_List (New_Occurrence_Of (Index, Loc))),\n@@ -265,7 +265,7 @@ package body Exp_Atag is\n    begin\n       return\n         Make_Function_Call (Loc,\n-          Name => New_Reference_To (RTE (RE_DT), Loc),\n+          Name => New_Occurrence_Of (RTE (RE_DT), Loc),\n           Parameter_Associations => New_List (\n             Unchecked_Convert_To (RTE (RE_Tag), Tag_Node)));\n    end Build_DT;\n@@ -285,7 +285,7 @@ package body Exp_Atag is\n             Build_TSD (Loc,\n               Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n           Selector_Name =>\n-            New_Reference_To\n+            New_Occurrence_Of\n               (RTE_Record_Component (RE_Access_Level), Loc));\n    end Build_Get_Access_Level;\n \n@@ -303,7 +303,7 @@ package body Exp_Atag is\n           Prefix        =>\n             Build_TSD (Loc, Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n           Selector_Name =>\n-            New_Reference_To (RTE_Record_Component (RE_Alignment), Loc));\n+            New_Occurrence_Of (RTE_Record_Component (RE_Alignment), Loc));\n    end Build_Get_Alignment;\n \n    ------------------------------------------\n@@ -344,13 +344,13 @@ package body Exp_Atag is\n                       Make_Expanded_Name (Loc,\n                         Chars => Name_Op_Subtract,\n                         Prefix =>\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (RTU_Entity (System_Storage_Elements), Loc),\n                         Selector_Name =>\n                           Make_Identifier (Loc, Name_Op_Subtract)),\n                     Parameter_Associations => New_List (\n                       Ctrl_Tag,\n-                      New_Reference_To\n+                      New_Occurrence_Of\n                         (RTE (RE_DT_Predef_Prims_Offset), Loc)))))),\n           Expressions =>\n             New_List (Make_Integer_Literal (Loc, Position)));\n@@ -421,14 +421,14 @@ package body Exp_Atag is\n                       Make_Explicit_Dereference (Loc,\n                         Unchecked_Convert_To\n                           (Node (Last_Elmt (Access_Disp_Table (Typ))),\n-                           New_Reference_To (Typ_Tag, Loc))),\n+                           New_Occurrence_Of (Typ_Tag, Loc))),\n                     Expressions =>\n                        New_List (Make_Integer_Literal (Loc, Prim_Pos))),\n \n                Expression =>\n                  Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (E, Loc),\n+                     Prefix => New_Occurrence_Of (E, Loc),\n                      Attribute_Name => Name_Unrestricted_Access))));\n          end if;\n \n@@ -459,12 +459,12 @@ package body Exp_Atag is\n                   Make_Explicit_Dereference (Loc,\n                     Unchecked_Convert_To\n                       (Node (Last_Elmt (Access_Disp_Table (CPP_Typ))),\n-                       New_Reference_To (Typ_Tag, Loc))),\n+                       New_Occurrence_Of (Typ_Tag, Loc))),\n                 Expression =>\n                   Make_Explicit_Dereference (Loc,\n                     Unchecked_Convert_To\n                       (Node (Last_Elmt (Access_Disp_Table (CPP_Typ))),\n-                       New_Reference_To (Parent_Tag, Loc)))));\n+                       New_Occurrence_Of (Parent_Tag, Loc)))));\n             exit;\n          end if;\n       end loop;\n@@ -558,15 +558,15 @@ package body Exp_Atag is\n                                       (Node\n                                         (Last_Elmt\n                                           (Access_Disp_Table (Iface))),\n-                                       New_Reference_To (Typ_Tag, Loc))),\n+                                       New_Occurrence_Of (Typ_Tag, Loc))),\n                                 Expressions =>\n                                    New_List\n                                     (Make_Integer_Literal (Loc, Prim_Pos))),\n \n                             Expression =>\n                               Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                                 Make_Attribute_Reference (Loc,\n-                                  Prefix => New_Reference_To (E, Loc),\n+                                  Prefix => New_Occurrence_Of (E, Loc),\n                                   Attribute_Name =>\n                                     Name_Unrestricted_Access))));\n                      end if;\n@@ -588,12 +588,12 @@ package body Exp_Atag is\n                               Make_Explicit_Dereference (Loc,\n                                 Unchecked_Convert_To\n                                  (Node (Last_Elmt (Access_Disp_Table (Iface))),\n-                                  New_Reference_To (Typ_Tag, Loc))),\n+                                  New_Occurrence_Of (Typ_Tag, Loc))),\n                             Expression =>\n                               Make_Explicit_Dereference (Loc,\n                                 Unchecked_Convert_To\n                                  (Node (Last_Elmt (Access_Disp_Table (Iface))),\n-                                  New_Reference_To (Parent_Tag, Loc)))));\n+                                  New_Occurrence_Of (Parent_Tag, Loc)))));\n                         exit;\n                      end if;\n                   end loop;\n@@ -630,7 +630,7 @@ package body Exp_Atag is\n                      Prefix =>\n                        Build_DT (Loc, New_Tag_Node),\n                      Selector_Name =>\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                  Discrete_Range =>\n                    Make_Range (Loc,\n@@ -644,7 +644,7 @@ package body Exp_Atag is\n                      Prefix =>\n                        Build_DT (Loc, Old_Tag_Node),\n                      Selector_Name =>\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                  Discrete_Range =>\n                    Make_Range (Loc,\n@@ -728,7 +728,7 @@ package body Exp_Atag is\n             Build_TSD (Loc,\n               Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n           Selector_Name =>\n-            New_Reference_To\n+            New_Occurrence_Of\n               (RTE_Record_Component (RE_Transportable), Loc));\n    end Build_Get_Transportable;\n \n@@ -754,7 +754,7 @@ package body Exp_Atag is\n                         New_Tag_Node)))),\n               Discrete_Range => Make_Range (Loc,\n                 Make_Integer_Literal (Loc, Uint_1),\n-                New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))),\n+                New_Occurrence_Of (RTE (RE_Max_Predef_Prims), Loc))),\n \n           Expression =>\n             Make_Slice (Loc,\n@@ -767,7 +767,7 @@ package body Exp_Atag is\n               Discrete_Range =>\n                 Make_Range (Loc,\n                   Make_Integer_Literal (Loc, 1),\n-                  New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))));\n+                  New_Occurrence_Of (RTE (RE_Max_Predef_Prims), Loc))));\n    end Build_Inherit_Predefined_Prims;\n \n    -------------------------\n@@ -793,12 +793,12 @@ package body Exp_Atag is\n                 Make_Expanded_Name (Loc,\n                   Chars         => Name_Op_Subtract,\n                   Prefix        =>\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (RTU_Entity (System_Storage_Elements), Loc),\n                   Selector_Name => Make_Identifier (Loc, Name_Op_Subtract)),\n               Parameter_Associations => New_List (\n                 Unchecked_Convert_To (RTE (RE_Address), Tag_Node),\n-                New_Reference_To\n+                New_Occurrence_Of\n                   (RTE (RE_DT_Offset_To_Top_Offset), Loc)))));\n    end Build_Offset_To_Top;\n \n@@ -869,12 +869,12 @@ package body Exp_Atag is\n                 Build_TSD (Loc,\n                   Unchecked_Convert_To (RTE (RE_Address), Tag_Node)),\n               Selector_Name =>\n-                New_Reference_To\n+                New_Occurrence_Of\n                   (RTE_Record_Component (RE_Size_Func), Loc)),\n           Expression =>\n             Unchecked_Convert_To (RTE (RE_Size_Ptr),\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Reference_To (Size_Func, Loc),\n+                Prefix => New_Occurrence_Of (Size_Func, Loc),\n                 Attribute_Name => Name_Unrestricted_Access)));\n    end Build_Set_Size_Function;\n \n@@ -896,12 +896,12 @@ package body Exp_Atag is\n                   Make_Expanded_Name (Loc,\n                     Chars         => Name_Op_Subtract,\n                     Prefix        =>\n-                      New_Reference_To\n+                      New_Occurrence_Of\n                         (RTU_Entity (System_Storage_Elements), Loc),\n                     Selector_Name => Make_Identifier (Loc, Name_Op_Subtract)),\n                 Parameter_Associations => New_List (\n                   Unchecked_Convert_To (RTE (RE_Address), Iface_Tag),\n-                  New_Reference_To\n+                  New_Occurrence_Of\n                     (RTE (RE_DT_Offset_To_Top_Offset), Loc))))),\n           Offset_Value);\n    end Build_Set_Static_Offset_To_Top;\n@@ -923,13 +923,13 @@ package body Exp_Atag is\n                   Make_Expanded_Name (Loc,\n                     Chars => Name_Op_Subtract,\n                     Prefix =>\n-                      New_Reference_To\n+                      New_Occurrence_Of\n                         (RTU_Entity (System_Storage_Elements), Loc),\n                     Selector_Name => Make_Identifier (Loc, Name_Op_Subtract)),\n \n                 Parameter_Associations => New_List (\n                   Tag_Node_Addr,\n-                  New_Reference_To\n+                  New_Occurrence_Of\n                     (RTE (RE_DT_Typeinfo_Ptr_Size), Loc))))));\n    end Build_TSD;\n "}, {"sha": "4b4ede7b820c5a1f62a98f48114561a20ba6fadf", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 75, "deletions": 73, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -272,7 +272,7 @@ package body Exp_Attr is\n             Index :=\n               Make_Defining_Identifier (Loc, New_External_Name ('J', N));\n \n-            Append (New_Reference_To (Index, Loc), Index_List);\n+            Append (New_Occurrence_Of (Index, Loc), Index_List);\n \n             return New_List (\n               Make_Implicit_Loop_Statement (Nod,\n@@ -309,7 +309,7 @@ package body Exp_Attr is\n           Defining_Identifier => Make_Defining_Identifier (Loc, Name_uA),\n           In_Present          => True,\n           Out_Present         => False,\n-          Parameter_Type      => New_Reference_To (A_Type, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (A_Type, Loc)));\n \n       --  Build body\n \n@@ -575,7 +575,7 @@ package body Exp_Attr is\n \n       Fnm :=\n         Make_Selected_Component (Loc,\n-          Prefix        => New_Reference_To (RTE (Pkg), Loc),\n+          Prefix        => New_Occurrence_Of (RTE (Pkg), Loc),\n           Selector_Name => Make_Identifier (Loc, Nam));\n \n       --  The generated call is given the provided set of parameters, and then\n@@ -912,7 +912,7 @@ package body Exp_Attr is\n                     Make_Op_Gt (Loc,\n                       Left_Opnd  =>\n                         Make_Attribute_Reference (Loc,\n-                          Prefix         => New_Reference_To (Array_Nam, Loc),\n+                          Prefix         => New_Occurrence_Of (Array_Nam, Loc),\n                           Attribute_Name => Name_Length,\n                           Expressions    => New_List (\n                             Make_Integer_Literal (Loc, Dim))),\n@@ -1000,13 +1000,13 @@ package body Exp_Attr is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Temp_Id,\n           Constant_Present    => True,\n-          Object_Definition   => New_Reference_To (Typ, Loc),\n+          Object_Definition   => New_Occurrence_Of (Typ, Loc),\n           Expression          => Relocate_Node (Pref));\n       Append_To (Decls, Temp_Decl);\n \n       --  Step 4: Analyze all bits\n \n-      Rewrite (N, New_Reference_To (Temp_Id, Loc));\n+      Rewrite (N, New_Occurrence_Of (Temp_Id, Loc));\n \n       Installed := Current_Scope = Scope (Loop_Id);\n \n@@ -1835,7 +1835,7 @@ package body Exp_Attr is\n          then\n             Rewrite (N,\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To (RTE (RE_Base_Address), Loc),\n+                Name => New_Occurrence_Of (RTE (RE_Base_Address), Loc),\n                 Parameter_Associations => New_List (\n                   Relocate_Node (N))));\n             Analyze (N);\n@@ -1884,7 +1884,7 @@ package body Exp_Attr is\n             else\n                New_Node :=\n                  Make_Function_Call (Loc,\n-                   Name => New_Reference_To (RTE (RE_Get_Alignment), Loc),\n+                   Name => New_Occurrence_Of (RTE (RE_Get_Alignment), Loc),\n                    Parameter_Associations => New_List (New_Node));\n             end if;\n \n@@ -2126,7 +2126,7 @@ package body Exp_Attr is\n \n             Rewrite (N,\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To (RTE (RE_Get_Version_String), Loc),\n+                Name => New_Occurrence_Of (RTE (RE_Get_Version_String), Loc),\n                 Parameter_Associations => New_List (\n                   New_Occurrence_Of (E, Loc))));\n          end if;\n@@ -2164,11 +2164,11 @@ package body Exp_Attr is\n             Rewrite (N,\n               Make_Function_Call (Loc,\n                 Name =>\n-                  New_Reference_To (RTE (RE_Callable), Loc),\n+                  New_Occurrence_Of (RTE (RE_Callable), Loc),\n                 Parameter_Associations => New_List (\n                   Make_Unchecked_Type_Conversion (Loc,\n                     Subtype_Mark =>\n-                      New_Reference_To (RTE (RO_ST_Task_Id), Loc),\n+                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n                     Expression =>\n                       Make_Selected_Component (Loc,\n                         Prefix =>\n@@ -2206,12 +2206,12 @@ package body Exp_Attr is\n             case Corresponding_Runtime_Package (Conctype) is\n                when System_Tasking_Protected_Objects_Entries =>\n                   Name :=\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (RTE (RE_Protected_Entry_Caller), Loc);\n \n                when System_Tasking_Protected_Objects_Single_Entry =>\n                   Name :=\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (RTE (RE_Protected_Single_Entry_Caller), Loc);\n \n                when others =>\n@@ -2223,7 +2223,7 @@ package body Exp_Attr is\n                 Make_Function_Call (Loc,\n                   Name => Name,\n                   Parameter_Associations => New_List (\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (Find_Protection_Object (Current_Scope), Loc)))));\n \n          --  Task case\n@@ -2255,7 +2255,7 @@ package body Exp_Attr is\n               Unchecked_Convert_To (Id_Kind,\n                 Make_Function_Call (Loc,\n                   Name =>\n-                    New_Reference_To (RTE (RE_Task_Entry_Caller), Loc),\n+                    New_Occurrence_Of (RTE (RE_Task_Entry_Caller), Loc),\n                   Parameter_Associations => New_List (\n                     Make_Integer_Literal (Loc,\n                       Intval => Int (Nest_Depth))))));\n@@ -2421,7 +2421,7 @@ package body Exp_Attr is\n                                and then Is_Limited_Type (Ptyp));\n                end if;\n \n-               Rewrite (N, New_Reference_To (Boolean_Literals (Res), Loc));\n+               Rewrite (N, New_Occurrence_Of (Boolean_Literals (Res), Loc));\n             end;\n \n          --  Prefix is not an entity name. These are also cases where we can\n@@ -2433,7 +2433,7 @@ package body Exp_Attr is\n \n          else\n             Rewrite (N,\n-              New_Reference_To (\n+              New_Occurrence_Of (\n                 Boolean_Literals (\n                   not Is_Variable (Pref)\n                     or else\n@@ -2503,26 +2503,26 @@ package body Exp_Attr is\n          if Is_Protected_Type (Conctyp) then\n             case Corresponding_Runtime_Package (Conctyp) is\n                when System_Tasking_Protected_Objects_Entries =>\n-                  Name := New_Reference_To (RTE (RE_Protected_Count), Loc);\n+                  Name := New_Occurrence_Of (RTE (RE_Protected_Count), Loc);\n \n                   Call :=\n                     Make_Function_Call (Loc,\n                       Name => Name,\n                       Parameter_Associations => New_List (\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (Find_Protection_Object (Current_Scope), Loc),\n                         Entry_Index_Expression\n                           (Loc, Entry_Id, Index, Scope (Entry_Id))));\n \n                when System_Tasking_Protected_Objects_Single_Entry =>\n                   Name :=\n-                    New_Reference_To (RTE (RE_Protected_Count_Entry), Loc);\n+                    New_Occurrence_Of (RTE (RE_Protected_Count_Entry), Loc);\n \n                   Call :=\n                     Make_Function_Call (Loc,\n                       Name => Name,\n                       Parameter_Associations => New_List (\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (Find_Protection_Object (Current_Scope), Loc)));\n \n                when others =>\n@@ -2534,7 +2534,7 @@ package body Exp_Attr is\n          else\n             Call :=\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To (RTE (RE_Task_Count), Loc),\n+                Name => New_Occurrence_Of (RTE (RE_Task_Count), Loc),\n                 Parameter_Associations => New_List (\n                   Entry_Index_Expression (Loc,\n                     Entry_Id, Index, Scope (Entry_Id))));\n@@ -2802,7 +2802,7 @@ package body Exp_Attr is\n                  Left_Opnd =>\n                    Make_Function_Call (Loc,\n                      Name =>\n-                       New_Reference_To (TSS (Btyp, TSS_Rep_To_Pos), Loc),\n+                       New_Occurrence_Of (TSS (Btyp, TSS_Rep_To_Pos), Loc),\n                      Parameter_Associations => New_List (\n                        Relocate_Node (Duplicate_Subexpr (Expr)),\n                          New_Occurrence_Of (Standard_False, Loc))),\n@@ -2834,7 +2834,7 @@ package body Exp_Attr is\n       begin\n          Rewrite (N,\n            Make_Function_Call (Loc,\n-             Name => New_Reference_To (RTE (RE_External_Tag), Loc),\n+             Name => New_Occurrence_Of (RTE (RE_External_Tag), Loc),\n              Parameter_Associations => New_List (\n                Make_Attribute_Reference (Loc,\n                  Attribute_Name => Name_Tag,\n@@ -2859,7 +2859,7 @@ package body Exp_Attr is\n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n                 Attribute_Name => Name_First,\n-                Prefix => New_Reference_To (Get_Index_Subtype (N), Loc)));\n+                Prefix => New_Occurrence_Of (Get_Index_Subtype (N), Loc)));\n             Analyze_And_Resolve (N, Typ);\n \n          elsif Is_Access_Type (Ptyp) then\n@@ -2970,17 +2970,17 @@ package body Exp_Attr is\n          Rewrite (N,\n            Convert_To (Typ,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (RE_Fore), Loc),\n+               Name => New_Occurrence_Of (RTE (RE_Fore), Loc),\n \n                Parameter_Associations => New_List (\n                  Convert_To (Universal_Real,\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (Ptyp, Loc),\n+                     Prefix => New_Occurrence_Of (Ptyp, Loc),\n                      Attribute_Name => Name_First)),\n \n                  Convert_To (Universal_Real,\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (Ptyp, Loc),\n+                     Prefix => New_Occurrence_Of (Ptyp, Loc),\n                      Attribute_Name => Name_Last))))));\n \n          Analyze_And_Resolve (N, Typ);\n@@ -3087,7 +3087,7 @@ package body Exp_Attr is\n       begin\n          Rewrite (N,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Reference_To (Ptyp, Loc),\n+             Prefix => New_Occurrence_Of (Ptyp, Loc),\n              Attribute_Name => Name_Image,\n              Expressions => New_List (Relocate_Node (Pref))));\n \n@@ -3273,7 +3273,7 @@ package body Exp_Attr is\n                           Expressions => New_List (\n                             Relocate_Node (Duplicate_Subexpr (Strm)))),\n                         Make_Attribute_Reference (Loc,\n-                          Prefix => New_Reference_To (P_Type, Loc),\n+                          Prefix => New_Occurrence_Of (P_Type, Loc),\n                           Attribute_Name => Name_Tag)));\n \n                   Dnn := Make_Temporary (Loc, 'D', Expr);\n@@ -3439,7 +3439,7 @@ package body Exp_Attr is\n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n                 Attribute_Name => Name_Last,\n-                Prefix => New_Reference_To (Get_Index_Subtype (N), Loc)));\n+                Prefix => New_Occurrence_Of (Get_Index_Subtype (N), Loc)));\n             Analyze_And_Resolve (N, Typ);\n \n          elsif Is_Access_Type (Ptyp) then\n@@ -3590,7 +3590,7 @@ package body Exp_Attr is\n                Rewrite (N,\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Range_Length,\n-                   Prefix => New_Reference_To (Ityp, Loc)));\n+                   Prefix => New_Occurrence_Of (Ityp, Loc)));\n                Analyze_And_Resolve (N, Typ);\n             end if;\n \n@@ -3810,21 +3810,21 @@ package body Exp_Attr is\n                   Convert_To (Universal_Integer,\n                     Make_Function_Call (Loc,\n                       Name                   =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (RTE (RE_Header_Size_With_Padding), Loc),\n \n                       Parameter_Associations => New_List (\n                         Make_Attribute_Reference (Loc,\n                           Prefix         =>\n-                            New_Reference_To (Ptyp, Loc),\n+                            New_Occurrence_Of (Ptyp, Loc),\n                           Attribute_Name => Name_Alignment))))));\n \n             --  Add a conversion to the target type\n \n             if not Conversion_Added then\n                Rewrite (Attr,\n                  Make_Type_Conversion (Loc,\n-                   Subtype_Mark => New_Reference_To (Typ, Loc),\n+                   Subtype_Mark => New_Occurrence_Of (Typ, Loc),\n                    Expression   => Relocate_Node (Attr)));\n             end if;\n \n@@ -4370,7 +4370,7 @@ package body Exp_Attr is\n                  Convert_To (Typ,\n                    Make_Function_Call (Loc,\n                      Name =>\n-                       New_Reference_To (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n+                       New_Occurrence_Of (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n                      Parameter_Associations => Exprs)));\n \n                Analyze_And_Resolve (N, Typ);\n@@ -4472,7 +4472,7 @@ package body Exp_Attr is\n                         Right_Opnd =>\n                           Make_Function_Call (Loc,\n                             Name =>\n-                              New_Reference_To\n+                              New_Occurrence_Of\n                                (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n \n                             Parameter_Associations =>\n@@ -4495,14 +4495,14 @@ package body Exp_Attr is\n                Rewrite (N,\n                  Make_Indexed_Component (Loc,\n                    Prefix =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Enum_Pos_To_Rep (Etyp), Loc),\n                    Expressions => New_List (\n                      Make_Op_Subtract (Loc,\n                     Left_Opnd =>\n                       Make_Function_Call (Loc,\n                         Name =>\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n                           Parameter_Associations => Exprs),\n                     Right_Opnd => Make_Integer_Literal (Loc, 1)))));\n@@ -4608,7 +4608,7 @@ package body Exp_Attr is\n                         Make_Selected_Component (Loc,\n                           Prefix =>\n                             Unchecked_Convert_To (New_Itype,\n-                              New_Reference_To\n+                              New_Occurrence_Of\n                                 (First_Entity\n                                   (Protected_Body_Subprogram (Subprg)),\n                                  Loc)),\n@@ -4624,7 +4624,7 @@ package body Exp_Attr is\n                  Make_Attribute_Reference (Loc,\n                     Prefix =>\n                       Make_Selected_Component (Loc,\n-                        Prefix => New_Reference_To\n+                        Prefix => New_Occurrence_Of\n                                     (First_Entity\n                                       (Protected_Body_Subprogram (Subprg)),\n                                        Loc),\n@@ -4636,10 +4636,10 @@ package body Exp_Attr is\n \n             if Number_Entries (Conctyp) = 0 then\n                RT_Subprg_Name :=\n-                 New_Reference_To (RTE (RE_Get_Ceiling), Loc);\n+                 New_Occurrence_Of (RTE (RE_Get_Ceiling), Loc);\n             else\n                RT_Subprg_Name :=\n-                 New_Reference_To (RTE (RO_PE_Get_Ceiling), Loc);\n+                 New_Occurrence_Of (RTE (RO_PE_Get_Ceiling), Loc);\n             end if;\n \n             Call :=\n@@ -5044,8 +5044,8 @@ package body Exp_Attr is\n       when Attribute_Simple_Storage_Pool =>\n          Rewrite (N,\n            Make_Type_Conversion (Loc,\n-             Subtype_Mark => New_Reference_To (Etype (N), Loc),\n-             Expression   => New_Reference_To (Entity (N), Loc)));\n+             Subtype_Mark => New_Occurrence_Of (Etype (N), Loc),\n+             Expression   => New_Occurrence_Of (Entity (N), Loc)));\n          Analyze_And_Resolve (N, Typ);\n \n       ----------\n@@ -5151,7 +5151,7 @@ package body Exp_Attr is\n \n             New_Node :=\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To\n+                Name => New_Occurrence_Of\n                   (Find_Prim_Op (Ptyp, Name_uSize), Loc),\n                 Parameter_Associations => New_List (Pref));\n \n@@ -5298,8 +5298,8 @@ package body Exp_Attr is\n       when Attribute_Storage_Pool =>\n          Rewrite (N,\n            Make_Type_Conversion (Loc,\n-             Subtype_Mark => New_Reference_To (Etype (N), Loc),\n-             Expression   => New_Reference_To (Entity (N), Loc)));\n+             Subtype_Mark => New_Occurrence_Of (Etype (N), Loc),\n+             Expression   => New_Occurrence_Of (Entity (N), Loc)));\n          Analyze_And_Resolve (N, Typ);\n \n       ------------------\n@@ -5322,12 +5322,12 @@ package body Exp_Attr is\n             if Present (Storage_Size_Variable (Root_Type (Ptyp))) then\n                Rewrite (N,\n                  Make_Attribute_Reference (Loc,\n-                   Prefix => New_Reference_To (Typ, Loc),\n+                   Prefix => New_Occurrence_Of (Typ, Loc),\n                    Attribute_Name => Name_Max,\n                    Expressions => New_List (\n                      Make_Integer_Literal (Loc, 0),\n                      Convert_To (Typ,\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (Storage_Size_Variable (Root_Type (Ptyp)), Loc)))));\n \n             elsif Present (Associated_Storage_Pool (Root_Type (Ptyp))) then\n@@ -5382,10 +5382,10 @@ package body Exp_Attr is\n                     OK_Convert_To (Typ,\n                       Make_Function_Call (Loc,\n                         Name =>\n-                          New_Reference_To (Alloc_Op, Loc),\n+                          New_Occurrence_Of (Alloc_Op, Loc),\n \n                         Parameter_Associations => New_List (\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (Associated_Storage_Pool\n                                (Root_Type (Ptyp)), Loc)))));\n                end if;\n@@ -5427,7 +5427,7 @@ package body Exp_Attr is\n                        New_List (\n                          Make_Function_Call (Loc,\n                            Name =>\n-                             New_Reference_To (RTE (RE_Self), Loc))))));\n+                             New_Occurrence_Of (RTE (RE_Self), Loc))))));\n \n             elsif not Is_Entity_Name (Pref)\n               or else not Is_Type (Entity (Pref))\n@@ -5461,7 +5461,7 @@ package body Exp_Attr is\n                        RTE (RE_Adjust_Storage_Size), Loc),\n                      Parameter_Associations =>\n                        New_List (\n-                         New_Reference_To (\n+                         New_Occurrence_Of (\n                            Storage_Size_Variable (Ptyp), Loc)))));\n             else\n                --  Get system default\n@@ -5521,7 +5521,7 @@ package body Exp_Attr is\n                         Right_Opnd =>\n                           Make_Function_Call (Loc,\n                             Name =>\n-                              New_Reference_To\n+                              New_Occurrence_Of\n                                (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n \n                             Parameter_Associations =>\n@@ -5543,14 +5543,14 @@ package body Exp_Attr is\n                Rewrite (N,\n                  Make_Indexed_Component (Loc,\n                    Prefix =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Enum_Pos_To_Rep (Etyp), Loc),\n                    Expressions => New_List (\n                      Make_Op_Add (Loc,\n                        Left_Opnd =>\n                          Make_Function_Call (Loc,\n                            Name =>\n-                             New_Reference_To\n+                             New_Occurrence_Of\n                                (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n                            Parameter_Associations => Exprs),\n                        Right_Opnd => Make_Integer_Literal (Loc, 1)))));\n@@ -5621,7 +5621,7 @@ package body Exp_Attr is\n             if Tagged_Type_Expansion then\n                Rewrite (N,\n                  Unchecked_Convert_To (RTE (RE_Tag),\n-                   New_Reference_To\n+                   New_Occurrence_Of\n                      (Node (First_Elmt (Access_Disp_Table (Ttyp))), Loc)));\n                Analyze_And_Resolve (N, RTE (RE_Tag));\n             end if;\n@@ -5658,7 +5658,7 @@ package body Exp_Attr is\n               Make_Selected_Component (Loc,\n                 Prefix => Relocate_Node (Pref),\n                 Selector_Name =>\n-                  New_Reference_To (First_Tag_Component (Ttyp), Loc)));\n+                  New_Occurrence_Of (First_Tag_Component (Ttyp), Loc)));\n             Analyze_And_Resolve (N, RTE (RE_Tag));\n          end if;\n       end Tag;\n@@ -5683,11 +5683,11 @@ package body Exp_Attr is\n             Rewrite (N,\n               Make_Function_Call (Loc,\n                 Name =>\n-                  New_Reference_To (RTE (RE_Terminated), Loc),\n+                  New_Occurrence_Of (RTE (RE_Terminated), Loc),\n                 Parameter_Associations => New_List (\n                   Make_Unchecked_Type_Conversion (Loc,\n                     Subtype_Mark =>\n-                      New_Reference_To (RTE (RO_ST_Task_Id), Loc),\n+                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n                     Expression =>\n                       Make_Selected_Component (Loc,\n                         Prefix =>\n@@ -5871,7 +5871,7 @@ package body Exp_Attr is\n                            Right_Opnd =>\n                              Make_Function_Call (Loc,\n                                Name =>\n-                                 New_Reference_To\n+                                 New_Occurrence_Of\n                                    (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n                                Parameter_Associations => New_List (\n                                  Rep_Node,\n@@ -5881,7 +5881,7 @@ package body Exp_Attr is\n             else\n                Rewrite (N,\n                  Make_Indexed_Component (Loc,\n-                   Prefix => New_Reference_To (Enum_Pos_To_Rep (Etyp), Loc),\n+                   Prefix => New_Occurrence_Of (Enum_Pos_To_Rep (Etyp), Loc),\n                    Expressions => New_List (\n                      Convert_To (Standard_Integer,\n                        Relocate_Node (First (Exprs))))));\n@@ -6081,7 +6081,7 @@ package body Exp_Attr is\n                 Left_Opnd =>\n                   Make_Function_Call (Loc,\n                     Name =>\n-                      New_Reference_To (TSS (Btyp, TSS_Rep_To_Pos), Loc),\n+                      New_Occurrence_Of (TSS (Btyp, TSS_Rep_To_Pos), Loc),\n                     Parameter_Associations => New_List (\n                       Pref,\n                       New_Occurrence_Of (Standard_False, Loc))),\n@@ -6379,7 +6379,7 @@ package body Exp_Attr is\n              Expressions    => New_List (\n                Make_Function_Call (Loc,\n                  Name =>\n-                   New_Reference_To (RTE (RE_Wide_String_To_String), Loc),\n+                   New_Occurrence_Of (RTE (RE_Wide_String_To_String), Loc),\n \n                  Parameter_Associations => New_List (\n                    Relocate_Node (First (Exprs)),\n@@ -6417,7 +6417,8 @@ package body Exp_Attr is\n              Expressions    => New_List (\n                Make_Function_Call (Loc,\n                  Name =>\n-                   New_Reference_To (RTE (RE_Wide_Wide_String_To_String), Loc),\n+                   New_Occurrence_Of\n+                     (RTE (RE_Wide_Wide_String_To_String), Loc),\n \n                  Parameter_Associations => New_List (\n                    Relocate_Node (First (Exprs)),\n@@ -6734,7 +6735,7 @@ package body Exp_Attr is\n                  Right_Opnd =>\n                    Make_Attribute_Reference (Loc,\n                      Prefix =>\n-                       New_Reference_To (Base_Type (Etype (Prefix (N))), Loc),\n+                       New_Occurrence_Of (Base_Type (Etype (Prefix (N))), Loc),\n                      Attribute_Name => Cnam)),\n              Reason => CE_Overflow_Check_Failed));\n       end if;\n@@ -6809,7 +6810,7 @@ package body Exp_Attr is\n \n             LHS :=\n               Make_Indexed_Component (Loc,\n-                Prefix      => New_Reference_To (Temp, Loc),\n+                Prefix      => New_Occurrence_Of (Temp, Loc),\n                 Expressions => Exprs);\n \n          --  A record component update appears in the following form:\n@@ -6824,7 +6825,7 @@ package body Exp_Attr is\n          else pragma Assert (Is_Record_Type (Typ));\n             LHS :=\n               Make_Selected_Component (Loc,\n-                Prefix        => New_Reference_To (Temp, Loc),\n+                Prefix        => New_Occurrence_Of (Temp, Loc),\n                 Selector_Name => Relocate_Node (Comp));\n          end if;\n \n@@ -6876,9 +6877,10 @@ package body Exp_Attr is\n                Make_Assignment_Statement (Loc,\n                  Name       =>\n                    Make_Indexed_Component (Loc,\n-                     Prefix      => New_Reference_To (Temp, Loc),\n+                     Prefix      => New_Occurrence_Of (Temp, Loc),\n                      Expressions => New_List (\n-                       Convert_To (Index_Typ, New_Reference_To (Index, Loc)))),\n+                       Convert_To (Index_Typ,\n+                         New_Occurrence_Of (Index, Loc)))),\n                  Expression => Relocate_Node (Expr))),\n \n              End_Label        => Empty));\n@@ -6908,7 +6910,7 @@ package body Exp_Attr is\n       Insert_Action (N,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Temp,\n-          Object_Definition   => New_Reference_To (Typ, Loc),\n+          Object_Definition   => New_Occurrence_Of (Typ, Loc),\n           Expression          => Relocate_Node (Pref)));\n \n       --  Process the update aggregate\n@@ -6932,7 +6934,7 @@ package body Exp_Attr is\n \n       --  The attribute is replaced by a reference to the anonymous object\n \n-      Rewrite (N, New_Reference_To (Temp, Loc));\n+      Rewrite (N, New_Occurrence_Of (Temp, Loc));\n       Analyze (N);\n    end Expand_Update_Attribute;\n "}, {"sha": "c87132732a33389658ff0ba8970b7d0b45565d11", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -220,7 +220,7 @@ package body Exp_Ch13 is\n                   Assign :=\n                     Make_Assignment_Statement (Loc,\n                       Name =>\n-                        New_Reference_To (Storage_Size_Variable (Ent), Loc),\n+                        New_Occurrence_Of (Storage_Size_Variable (Ent), Loc),\n                       Expression =>\n                         Convert_To (RTE (RE_Size_Type), Expression (N)));\n \n@@ -260,7 +260,7 @@ package body Exp_Ch13 is\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => V,\n                       Object_Definition  =>\n-                        New_Reference_To (RTE (RE_Storage_Offset), Loc),\n+                        New_Occurrence_Of (RTE (RE_Storage_Offset), Loc),\n                       Expression =>\n                         Convert_To (RTE (RE_Storage_Offset), Expression (N))));\n \n@@ -344,11 +344,11 @@ package body Exp_Ch13 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Temp_Id,\n                 Object_Definition =>\n-                  New_Reference_To (Expr_Typ, Loc),\n+                  New_Occurrence_Of (Expr_Typ, Loc),\n                 Expression =>\n                   Relocate_Node (Expr)));\n \n-            New_Expr := New_Reference_To (Temp_Id, Loc);\n+            New_Expr := New_Occurrence_Of (Temp_Id, Loc);\n             Set_Etype (New_Expr, Expr_Typ);\n \n             Set_Expression (N, New_Expr);\n@@ -668,7 +668,7 @@ package body Exp_Ch13 is\n \n          AtM_Nod :=\n            Make_Attribute_Definition_Clause (Loc,\n-             Name       => New_Reference_To (Base_Type (Rectype), Loc),\n+             Name       => New_Occurrence_Of (Base_Type (Rectype), Loc),\n              Chars      => Name_Alignment,\n              Expression => Make_Integer_Literal (Loc, Mod_Val));\n "}, {"sha": "0aa7878464e640e9ae937e00a731233bc78dce9e", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -574,9 +574,9 @@ package body Exp_Ch2 is\n           Prefix =>\n             Make_Explicit_Dereference (Loc,\n               Unchecked_Convert_To (Parm_Type,\n-                New_Reference_To (Addr_Ent, Loc))),\n+                New_Occurrence_Of (Addr_Ent, Loc))),\n           Selector_Name =>\n-            New_Reference_To (Entry_Component (Ent_Formal), Loc));\n+            New_Occurrence_Of (Entry_Component (Ent_Formal), Loc));\n \n       --  For all types of parameters, the constructed parameter record object\n       --  contains a pointer to the parameter. Thus we must dereference them to"}, {"sha": "6cd46362f2ee4c6357e873efc7947f276cfacee9", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 124, "deletions": 120, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -629,7 +629,7 @@ package body Exp_Ch3 is\n             Index :=\n               Make_Defining_Identifier (Loc, New_External_Name ('J', N));\n \n-            Append (New_Reference_To (Index, Loc), Index_List);\n+            Append (New_Occurrence_Of (Index, Loc), Index_List);\n \n             return New_List (\n               Make_Implicit_Loop_Statement (Nod,\n@@ -874,7 +874,7 @@ package body Exp_Ch3 is\n             Index :=\n               Make_Defining_Identifier (Loc, New_External_Name ('J', N));\n \n-            Append (New_Reference_To (Index, Loc), Index_List);\n+            Append (New_Occurrence_Of (Index, Loc), Index_List);\n \n             return New_List (\n               Make_Implicit_Loop_Statement (Nod,\n@@ -1019,15 +1019,15 @@ package body Exp_Ch3 is\n                    Expression =>\n                      Make_Function_Call (Loc,\n                        Name =>\n-                         New_Reference_To (Enclosing_Func_Id,  Loc),\n+                         New_Occurrence_Of (Enclosing_Func_Id,  Loc),\n                        Parameter_Associations =>\n                          Actuals_List));\n \n             else\n                Return_Node :=\n                  Make_Simple_Return_Statement (Loc,\n                    Expression =>\n-                     New_Reference_To (Standard_False, Loc));\n+                     New_Occurrence_Of (Standard_False, Loc));\n             end if;\n \n             Set_Statements (Case_Alt_Node, New_List (Return_Node));\n@@ -1041,7 +1041,7 @@ package body Exp_Ch3 is\n          Return_Node :=\n            Make_Simple_Return_Statement (Loc,\n              Expression =>\n-               New_Reference_To (Standard_True, Loc));\n+               New_Occurrence_Of (Standard_True, Loc));\n \n          Set_Statements (Case_Alt_Node, New_List (Return_Node));\n          Append (Case_Alt_Node, Alt_List);\n@@ -1079,7 +1079,7 @@ package body Exp_Ch3 is\n \n          Set_Parameter_Specifications (Spec_Node, Parameter_List);\n          Set_Result_Definition (Spec_Node,\n-                                New_Reference_To (Standard_Boolean,  Loc));\n+                                New_Occurrence_Of (Standard_Boolean,  Loc));\n          Set_Specification (Body_Node, Spec_Node);\n          Set_Declarations (Body_Node, New_List);\n \n@@ -1229,7 +1229,7 @@ package body Exp_Ch3 is\n               Make_Parameter_Specification (Loc,\n                   Defining_Identifier => Formal,\n                 Parameter_Type =>\n-                  New_Reference_To (Formal_Type, Loc));\n+                  New_Occurrence_Of (Formal_Type, Loc));\n             Append (Param_Spec_Node, Parameter_List);\n             Next_Discriminant (D);\n          end loop;\n@@ -1622,7 +1622,7 @@ package body Exp_Ch3 is\n                if Nkind (Arg) = N_Identifier\n                   and then Ekind (Entity (Arg)) = E_Discriminant\n                then\n-                  Arg := New_Reference_To (Discriminal (Entity (Arg)), Loc);\n+                  Arg := New_Occurrence_Of (Discriminal (Entity (Arg)), Loc);\n \n                --  Otherwise make a copy of the default expression. Note that\n                --  we use the current Sloc for this, because we do not want the\n@@ -1872,11 +1872,11 @@ package body Exp_Ch3 is\n                     Prefix        =>\n                       New_Copy_Tree (Lhs, New_Scope => Proc_Id),\n                     Selector_Name =>\n-                      New_Reference_To (First_Tag_Component (Typ), N_Loc)),\n+                      New_Occurrence_Of (First_Tag_Component (Typ), N_Loc)),\n \n                 Expression =>\n                   Unchecked_Convert_To (RTE (RE_Tag),\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (Node\n                         (First_Elmt\n                           (Access_Disp_Table (Underlying_Type (Typ)))),\n@@ -1937,7 +1937,7 @@ package body Exp_Ch3 is\n                   D_Loc := Sloc (D);\n                   Append_List_To (Statement_List,\n                     Build_Assignment (D,\n-                      New_Reference_To (Discriminal (D), D_Loc)));\n+                      New_Occurrence_Of (Discriminal (D), D_Loc)));\n                end if;\n \n                Next_Discriminant (D);\n@@ -1973,7 +1973,8 @@ package body Exp_Ch3 is\n \n          First_Arg :=\n            OK_Convert_To (Parent_Type,\n-             New_Reference_To (Defining_Identifier (First (Parameters)), Loc));\n+             New_Occurrence_Of\n+               (Defining_Identifier (First (Parameters)), Loc));\n \n          Set_Etype (First_Arg, Parent_Type);\n \n@@ -2044,7 +2045,7 @@ package body Exp_Ch3 is\n                   and then Ekind (Entity (Arg)) = E_Discriminant\n                then\n                   Append_To (Args,\n-                    New_Reference_To (Discriminal (Entity (Arg)), Loc));\n+                    New_Occurrence_Of (Discriminal (Entity (Arg)), Loc));\n \n                --  Case of access discriminants. We replace the reference\n                --  to the type by a reference to the actual object.\n@@ -2109,9 +2110,9 @@ package body Exp_Ch3 is\n                   Make_Defining_Identifier (Loc, Name_uO),\n                 In_Present          => True,\n                 Parameter_Type      =>\n-                  New_Reference_To (RTE (RE_Address), Loc))));\n+                  New_Occurrence_Of (RTE (RE_Address), Loc))));\n             Set_Result_Definition (Spec_Node,\n-              New_Reference_To (RTE (RE_Storage_Offset), Loc));\n+              New_Occurrence_Of (RTE (RE_Storage_Offset), Loc));\n \n             --  Generate\n             --    function Fxx (O : in Rec_Typ) return Storage_Offset is\n@@ -2132,7 +2133,7 @@ package body Exp_Ch3 is\n                     Null_Exclusion_Present => False,\n                     Constant_Present       => False,\n                     Subtype_Indication     =>\n-                      New_Reference_To (Rec_Type, Loc)))));\n+                      New_Occurrence_Of (Rec_Type, Loc)))));\n \n             Set_Handled_Statement_Sequence (Body_Node,\n               Make_Handled_Sequence_Of_Statements (Loc,\n@@ -2146,7 +2147,7 @@ package body Exp_Ch3 is\n                               Unchecked_Convert_To (Acc_Type,\n                                 Make_Identifier (Loc, Name_uO)),\n                             Selector_Name =>\n-                              New_Reference_To (Iface_Comp, Loc)),\n+                              New_Occurrence_Of (Iface_Comp, Loc)),\n                         Attribute_Name => Name_Position)))));\n \n             Set_Ekind       (Func_Id, E_Function);\n@@ -2252,9 +2253,9 @@ package body Exp_Ch3 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Flag_Id,\n              Object_Definition =>\n-               New_Reference_To (Standard_Boolean, Loc),\n+               New_Occurrence_Of (Standard_Boolean, Loc),\n              Expression =>\n-               New_Reference_To (Standard_True, Loc));\n+               New_Occurrence_Of (Standard_True, Loc));\n \n          Analyze (Flag_Decl);\n          Append_Freeze_Action (Rec_Type, Flag_Decl);\n@@ -2282,9 +2283,9 @@ package body Exp_Ch3 is\n          Append_To (Init_Tags_List,\n            Make_Assignment_Statement (Loc,\n              Name =>\n-               New_Reference_To (Flag_Id, Loc),\n+               New_Occurrence_Of (Flag_Id, Loc),\n              Expression =>\n-               New_Reference_To (Standard_False, Loc)));\n+               New_Occurrence_Of (Standard_False, Loc)));\n \n          Append_To (Body_Stmts,\n            Make_If_Statement (Loc,\n@@ -2435,10 +2436,10 @@ package body Exp_Ch3 is\n                      Make_Selected_Component (Loc,\n                        Prefix        => Make_Identifier (Loc, Name_uInit),\n                        Selector_Name =>\n-                         New_Reference_To\n+                         New_Occurrence_Of\n                            (First_Tag_Component (Rec_Type), Loc)),\n                    Expression =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Node\n                          (First_Elmt (Access_Disp_Table (Rec_Type))), Loc)));\n \n@@ -2490,10 +2491,10 @@ package body Exp_Ch3 is\n                      Make_Selected_Component (Loc,\n                        Prefix        => Make_Identifier (Loc, Name_uInit),\n                        Selector_Name =>\n-                         New_Reference_To\n+                         New_Occurrence_Of\n                            (First_Tag_Component (Rec_Type), Loc)),\n                    Expression =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Node\n                          (First_Elmt (Access_Disp_Table (Rec_Type))), Loc)));\n \n@@ -2550,7 +2551,7 @@ package body Exp_Ch3 is\n \n                         New_Nod :=\n                           Make_Procedure_Call_Statement (Loc,\n-                            New_Reference_To (Init_DT, Loc));\n+                            New_Occurrence_Of (Init_DT, Loc));\n                         Insert_After (Ins_Nod, New_Nod);\n \n                         --  Update location of init tag statements\n@@ -2623,11 +2624,11 @@ package body Exp_Ch3 is\n                    Statements => New_List (\n                      Make_Procedure_Call_Statement (Loc,\n                        Name =>\n-                         New_Reference_To (Local_DF_Id, Loc),\n+                         New_Occurrence_Of (Local_DF_Id, Loc),\n \n                        Parameter_Associations => New_List (\n                          Make_Identifier (Loc, Name_uInit),\n-                         New_Reference_To (Standard_False, Loc))),\n+                         New_Occurrence_Of (Standard_False, Loc))),\n \n                      Make_Raise_Statement (Loc)))));\n             end;\n@@ -2700,10 +2701,10 @@ package body Exp_Ch3 is\n \n             Append_To (Stmts,\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Reference_To (Counter_Id, Loc),\n+                Name       => New_Occurrence_Of (Counter_Id, Loc),\n                 Expression =>\n                   Make_Op_Add (Loc,\n-                    Left_Opnd  => New_Reference_To (Counter_Id, Loc),\n+                    Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n                     Right_Opnd => Make_Integer_Literal (Loc, 1))));\n          end Increment_Counter;\n \n@@ -2730,7 +2731,7 @@ package body Exp_Ch3 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Counter_Id,\n                 Object_Definition   =>\n-                  New_Reference_To (Standard_Integer, Loc),\n+                  New_Occurrence_Of (Standard_Integer, Loc),\n                 Expression          =>\n                   Make_Integer_Literal (Loc, 0)));\n          end Make_Counter;\n@@ -3043,7 +3044,7 @@ package body Exp_Ch3 is\n                               Append_To (Stmts,\n                                 Make_Procedure_Call_Statement (Decl_Loc,\n                                   Name =>\n-                                    New_Reference_To (RTE (\n+                                    New_Occurrence_Of (RTE (\n                                       RE_Bind_Interrupt_To_Entry), Decl_Loc),\n                                   Parameter_Associations => New_List (\n                                     Make_Selected_Component (Decl_Loc,\n@@ -3149,7 +3150,7 @@ package body Exp_Ch3 is\n                Append_To (Stmts,\n                  Make_Case_Statement (Var_Loc,\n                    Expression =>\n-                     New_Reference_To (Discriminal (\n+                     New_Occurrence_Of (Discriminal (\n                        Entity (Name (Variant_Part (Comp_List)))), Var_Loc),\n                    Alternatives => Variant_Alts));\n             end;\n@@ -4063,38 +4064,38 @@ package body Exp_Ch3 is\n              Defining_Identifier => Larray,\n              Out_Present => True,\n              Parameter_Type =>\n-               New_Reference_To (Base_Type (Typ), Loc)),\n+               New_Occurrence_Of (Base_Type (Typ), Loc)),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Rarray,\n              Parameter_Type =>\n-               New_Reference_To (Base_Type (Typ), Loc)),\n+               New_Occurrence_Of (Base_Type (Typ), Loc)),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Left_Lo,\n              Parameter_Type =>\n-               New_Reference_To (Index, Loc)),\n+               New_Occurrence_Of (Index, Loc)),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Left_Hi,\n              Parameter_Type =>\n-               New_Reference_To (Index, Loc)),\n+               New_Occurrence_Of (Index, Loc)),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Right_Lo,\n              Parameter_Type =>\n-               New_Reference_To (Index, Loc)),\n+               New_Occurrence_Of (Index, Loc)),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Right_Hi,\n              Parameter_Type =>\n-               New_Reference_To (Index, Loc)));\n+               New_Occurrence_Of (Index, Loc)));\n \n          Append_To (Formals,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Rev,\n              Parameter_Type =>\n-               New_Reference_To (Standard_Boolean, Loc)));\n+               New_Occurrence_Of (Standard_Boolean, Loc)));\n \n          Spec :=\n            Make_Procedure_Specification (Loc,\n@@ -4340,20 +4341,20 @@ package body Exp_Ch3 is\n             Make_Function_Specification (Loc,\n               Defining_Unit_Name       => F,\n               Parameter_Specifications => Pspecs,\n-              Result_Definition => New_Reference_To (Standard_Boolean, Loc)),\n+              Result_Definition => New_Occurrence_Of (Standard_Boolean, Loc)),\n           Declarations               => New_List,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts)));\n \n       Append_To (Pspecs,\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => X,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n       Append_To (Pspecs,\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => Y,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n       --  Unchecked_Unions require additional machinery to support equality.\n       --  Two extra parameters (A and B) are added to the equality function\n@@ -4386,12 +4387,14 @@ package body Exp_Ch3 is\n                Append_To (Pspecs,\n                  Make_Parameter_Specification (Loc,\n                    Defining_Identifier => A,\n-                   Parameter_Type      => New_Reference_To (Discr_Type, Loc)));\n+                   Parameter_Type      =>\n+                     New_Occurrence_Of (Discr_Type, Loc)));\n \n                Append_To (Pspecs,\n                  Make_Parameter_Specification (Loc,\n                    Defining_Identifier => B,\n-                   Parameter_Type      => New_Reference_To (Discr_Type, Loc)));\n+                   Parameter_Type      =>\n+                     New_Occurrence_Of (Discr_Type, Loc)));\n \n                Append_Elmt (A, New_Discrs);\n \n@@ -4406,8 +4409,8 @@ package body Exp_Ch3 is\n                  Make_If_Statement (Loc,\n                    Condition       =>\n                      Make_Op_Ne (Loc,\n-                       Left_Opnd  => New_Reference_To (A, Loc),\n-                       Right_Opnd => New_Reference_To (B, Loc)),\n+                       Left_Opnd  => New_Occurrence_Of (A, Loc),\n+                       Right_Opnd => New_Occurrence_Of (B, Loc)),\n                    Then_Statements => New_List (\n                      Make_Simple_Return_Statement (Loc,\n                        Expression =>\n@@ -4437,7 +4440,7 @@ package body Exp_Ch3 is\n \n       Append_To (Stmts,\n         Make_Simple_Return_Statement (Loc,\n-          Expression => New_Reference_To (Standard_True, Loc)));\n+          Expression => New_Occurrence_Of (Standard_True, Loc)));\n \n       Set_TSS (Typ, F);\n       Set_Is_Pure (F);\n@@ -4580,7 +4583,7 @@ package body Exp_Ch3 is\n          Par_Subtype :=\n            Process_Subtype (\n              Make_Subtype_Indication (Loc,\n-               Subtype_Mark => New_Reference_To (Entity (Indic), Loc),\n+               Subtype_Mark => New_Occurrence_Of (Entity (Indic), Loc),\n                Constraint   =>\n                  Make_Index_Or_Discriminant_Constraint (Loc,\n                    Constraints => List_Constr)),\n@@ -4600,7 +4603,7 @@ package body Exp_Ch3 is\n           Component_Definition =>\n             Make_Component_Definition (Loc,\n               Aliased_Present => False,\n-              Subtype_Indication => New_Reference_To (Par_Subtype, Loc)));\n+              Subtype_Indication => New_Occurrence_Of (Par_Subtype, Loc)));\n \n       if Null_Present (Rec_Ext_Part) then\n          Set_Component_List (Rec_Ext_Part,\n@@ -5176,7 +5179,7 @@ package body Exp_Ch3 is\n             --  address clause is applied to the object, causing it to get\n             --  delayed freezing).\n \n-            Id_Ref := New_Reference_To (Def_Id, Loc);\n+            Id_Ref := New_Occurrence_Of (Def_Id, Loc);\n             Set_Must_Not_Freeze (Id_Ref);\n             Set_Assignment_OK (Id_Ref);\n \n@@ -5393,7 +5396,7 @@ package body Exp_Ch3 is\n                        Make_Selected_Component (Loc,\n                          Prefix => New_Occurrence_Of (Obj_Id, Loc),\n                          Selector_Name =>\n-                           New_Reference_To\n+                           New_Occurrence_Of\n                              (Find_Interface_Tag (Expr_Typ, Iface), Loc));\n \n                   --  Replace\n@@ -5464,12 +5467,12 @@ package body Exp_Ch3 is\n \n                      Tag_Comp :=\n                        Make_Function_Call (Loc,\n-                         Name => New_Reference_To (RTE (RE_Displace), Loc),\n+                         Name => New_Occurrence_Of (RTE (RE_Displace), Loc),\n                          Parameter_Associations => New_List (\n                            Make_Attribute_Reference (Loc,\n                              Prefix => New_Occurrence_Of (Obj_Id, Loc),\n                              Attribute_Name => Name_Address),\n-                           New_Reference_To\n+                           New_Occurrence_Of\n                              (Node (First_Elmt (Access_Disp_Table (Iface))),\n                               Loc)));\n                   end if;\n@@ -5591,7 +5594,7 @@ package body Exp_Ch3 is\n             then\n                Insert_Action_After (Init_After,\n                  Make_Adjust_Call (\n-                   Obj_Ref => New_Reference_To (Def_Id, Loc),\n+                   Obj_Ref => New_Occurrence_Of (Def_Id, Loc),\n                    Typ     => Base_Typ));\n             end if;\n \n@@ -5624,7 +5627,7 @@ package body Exp_Ch3 is\n                     Make_Selected_Component (Loc,\n                        Prefix => New_Occurrence_Of (Def_Id, Loc),\n                        Selector_Name =>\n-                         New_Reference_To (First_Tag_Component (Full_Typ),\n+                         New_Occurrence_Of (First_Tag_Component (Full_Typ),\n                                            Loc));\n                   Set_Assignment_OK (New_Ref);\n \n@@ -5633,7 +5636,7 @@ package body Exp_Ch3 is\n                       Name       => New_Ref,\n                       Expression =>\n                         Unchecked_Convert_To (RTE (RE_Tag),\n-                          New_Reference_To\n+                          New_Occurrence_Of\n                             (Node (First_Elmt (Access_Disp_Table (Full_Typ))),\n                              Loc))));\n                end;\n@@ -5648,7 +5651,7 @@ package body Exp_Ch3 is\n                --  The call to the initialization procedure does NOT freeze the\n                --  object being initialized.\n \n-               Id_Ref := New_Reference_To (Def_Id, Loc);\n+               Id_Ref := New_Occurrence_Of (Def_Id, Loc);\n                Set_Must_Not_Freeze (Id_Ref);\n                Set_Assignment_OK (Id_Ref);\n \n@@ -5714,7 +5717,7 @@ package body Exp_Ch3 is\n             declare\n                Stat : constant Node_Id :=\n                        Make_Assignment_Statement (Loc,\n-                         Name       => New_Reference_To (Def_Id, Loc),\n+                         Name       => New_Occurrence_Of (Def_Id, Loc),\n                          Expression => Relocate_Node (Expr));\n             begin\n                Set_Expression (N, Empty);\n@@ -5936,7 +5939,7 @@ package body Exp_Ch3 is\n           Component_Definition =>\n             Make_Component_Definition (Sloc_N,\n               Aliased_Present => False,\n-              Subtype_Indication => New_Reference_To (RTE (RE_Tag), Sloc_N)));\n+              Subtype_Indication => New_Occurrence_Of (RTE (RE_Tag), Sloc_N)));\n \n       if Null_Present (Comp_List)\n         or else Is_Empty_List (Component_Items (Comp_List))\n@@ -6211,7 +6214,7 @@ package body Exp_Ch3 is\n          Set_Has_Contiguous_Rep (Typ);\n          Ent := First_Literal (Typ);\n          Num := 1;\n-         Lst := New_List (New_Reference_To (Ent, Sloc (Ent)));\n+         Lst := New_List (New_Occurrence_Of (Ent, Sloc (Ent)));\n \n       else\n          --  Build list of literal references\n@@ -6221,7 +6224,7 @@ package body Exp_Ch3 is\n \n          Ent := First_Literal (Typ);\n          while Present (Ent) loop\n-            Append_To (Lst, New_Reference_To (Ent, Sloc (Ent)));\n+            Append_To (Lst, New_Occurrence_Of (Ent, Sloc (Ent)));\n             Num := Num + 1;\n             Next_Literal (Ent);\n          end loop;\n@@ -6249,7 +6252,7 @@ package body Exp_Ch3 is\n             Make_Constrained_Array_Definition (Loc,\n               Discrete_Subtype_Definitions => New_List (\n                 Make_Subtype_Indication (Loc,\n-                  Subtype_Mark => New_Reference_To (Standard_Natural, Loc),\n+                  Subtype_Mark => New_Occurrence_Of (Standard_Natural, Loc),\n                   Constraint =>\n                     Make_Range_Constraint (Loc,\n                       Range_Expression =>\n@@ -6262,7 +6265,7 @@ package body Exp_Ch3 is\n               Component_Definition =>\n                 Make_Component_Definition (Loc,\n                   Aliased_Present => False,\n-                  Subtype_Indication => New_Reference_To (Typ, Loc))),\n+                  Subtype_Indication => New_Occurrence_Of (Typ, Loc))),\n \n           Expression =>\n             Make_Aggregate (Loc,\n@@ -6431,13 +6434,14 @@ package body Exp_Ch3 is\n                 Make_Parameter_Specification (Loc,\n                   Defining_Identifier =>\n                     Make_Defining_Identifier (Loc, Name_uA),\n-                  Parameter_Type => New_Reference_To (Typ, Loc)),\n+                  Parameter_Type => New_Occurrence_Of (Typ, Loc)),\n                 Make_Parameter_Specification (Loc,\n                   Defining_Identifier =>\n                     Make_Defining_Identifier (Loc, Name_uF),\n-                  Parameter_Type => New_Reference_To (Standard_Boolean, Loc))),\n+                  Parameter_Type =>\n+                    New_Occurrence_Of (Standard_Boolean, Loc))),\n \n-              Result_Definition => New_Reference_To (Standard_Integer, Loc)),\n+              Result_Definition => New_Occurrence_Of (Standard_Integer, Loc)),\n \n             Declarations => Empty_List,\n \n@@ -7018,10 +7022,10 @@ package body Exp_Ch3 is\n                            Insert_Action (Ins_Node,\n                              Make_Procedure_Call_Statement (Loc,\n                                Name =>\n-                                 New_Reference_To\n+                                 New_Occurrence_Of\n                                    (RTE (RE_Set_Is_Heterogeneous), Loc),\n                                Parameter_Associations => New_List (\n-                                 New_Reference_To (Fin_Mas_Id, Loc))));\n+                                 New_Occurrence_Of (Fin_Mas_Id, Loc))));\n                         end if;\n                      end if;\n \n@@ -7204,12 +7208,12 @@ package body Exp_Ch3 is\n                   else\n                      DT_Size :=\n                        Make_Attribute_Reference (Loc,\n-                         Prefix => New_Reference_To (Desig_Type, Loc),\n+                         Prefix => New_Occurrence_Of (Desig_Type, Loc),\n                          Attribute_Name => Name_Max_Size_In_Storage_Elements);\n \n                      DT_Align :=\n                        Make_Attribute_Reference (Loc,\n-                         Prefix => New_Reference_To (Desig_Type, Loc),\n+                         Prefix => New_Occurrence_Of (Desig_Type, Loc),\n                          Attribute_Name => Name_Alignment);\n                   end if;\n \n@@ -7246,7 +7250,7 @@ package body Exp_Ch3 is\n                       Object_Definition =>\n                         Make_Subtype_Indication (Loc,\n                           Subtype_Mark =>\n-                            New_Reference_To\n+                            New_Occurrence_Of\n                               (RTE (RE_Stack_Bounded_Pool), Loc),\n \n                           Constraint =>\n@@ -7255,7 +7259,7 @@ package body Exp_Ch3 is\n \n                               --  First discriminant is the Pool Size\n \n-                                New_Reference_To (\n+                                New_Occurrence_Of (\n                                   Storage_Size_Variable (Def_Id), Loc),\n \n                               --  Second discriminant is the element size\n@@ -7331,9 +7335,9 @@ package body Exp_Ch3 is\n                             Condition =>\n                               Make_In (Loc,\n                                 Left_Opnd =>\n-                                  New_Reference_To (Pool, Loc),\n+                                  New_Occurrence_Of (Pool, Loc),\n                                 Right_Opnd =>\n-                                  New_Reference_To\n+                                  New_Occurrence_Of\n                                     (Class_Wide_Type (RSPWS), Loc)),\n \n                             Then_Statements => New_List (\n@@ -7853,7 +7857,7 @@ package body Exp_Ch3 is\n                    Name => New_Occurrence_Of (Proc_Id, Loc),\n                    Parameter_Associations =>\n                      New_List\n-                       (New_Reference_To (First_Formal (Inv_Id), Loc)));\n+                       (New_Occurrence_Of (First_Formal (Inv_Id), Loc)));\n \n             begin\n \n@@ -7953,7 +7957,7 @@ package body Exp_Ch3 is\n             Make_Defining_Identifier (Loc, Name_uInit),\n           In_Present  => True,\n           Out_Present => True,\n-          Parameter_Type => New_Reference_To (Typ, Loc)));\n+          Parameter_Type => New_Occurrence_Of (Typ, Loc)));\n \n       --  For task record value, or type that contains tasks, add two more\n       --  formals, _Master : Master_Id and _Chain : in out Activation_Chain\n@@ -7967,7 +7971,7 @@ package body Exp_Ch3 is\n              Defining_Identifier =>\n                Make_Defining_Identifier (Loc, Name_uMaster),\n              Parameter_Type      =>\n-               New_Reference_To (RTE (RE_Master_Id), Loc)));\n+               New_Occurrence_Of (RTE (RE_Master_Id), Loc)));\n \n          --  Add _Chain (not done for sequential elaboration policy, see\n          --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n@@ -7980,15 +7984,15 @@ package body Exp_Ch3 is\n                 In_Present          => True,\n                 Out_Present         => True,\n                 Parameter_Type      =>\n-                  New_Reference_To (RTE (RE_Activation_Chain), Loc)));\n+                  New_Occurrence_Of (RTE (RE_Activation_Chain), Loc)));\n          end if;\n \n          Append_To (Formals,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier =>\n                Make_Defining_Identifier (Loc, Name_uTask_Name),\n              In_Present          => True,\n-             Parameter_Type      => New_Reference_To (Standard_String, Loc)));\n+             Parameter_Type      => New_Occurrence_Of (Standard_String, Loc)));\n       end if;\n \n       return Formals;\n@@ -8048,9 +8052,9 @@ package body Exp_Ch3 is\n                 Name =>\n                   Make_Selected_Component (Loc,\n                     Prefix => New_Copy_Tree (Target),\n-                    Selector_Name => New_Reference_To (Tag_Comp, Loc)),\n+                    Selector_Name => New_Occurrence_Of (Tag_Comp, Loc)),\n                 Expression =>\n-                  New_Reference_To (Iface_Tag, Loc)));\n+                  New_Occurrence_Of (Iface_Tag, Loc)));\n          end if;\n \n          Comp_Typ := Scope (Tag_Comp);\n@@ -8083,15 +8087,15 @@ package body Exp_Ch3 is\n \n             Append_To (Stmts_List,\n               Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To\n+                Name => New_Occurrence_Of\n                           (RTE (RE_Set_Dynamic_Offset_To_Top), Loc),\n                 Parameter_Associations => New_List (\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => New_Copy_Tree (Target),\n                     Attribute_Name => Name_Address),\n \n                   Unchecked_Convert_To (RTE (RE_Tag),\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (Node (First_Elmt (Access_Disp_Table (Iface))),\n                        Loc)),\n \n@@ -8102,12 +8106,12 @@ package body Exp_Ch3 is\n                          Make_Selected_Component (Loc,\n                            Prefix        => New_Copy_Tree (Target),\n                            Selector_Name =>\n-                             New_Reference_To (Tag_Comp, Loc)),\n+                             New_Occurrence_Of (Tag_Comp, Loc)),\n                        Attribute_Name => Name_Position)),\n \n                   Unchecked_Convert_To (RTE (RE_Offset_To_Top_Function_Ptr),\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To\n+                      Prefix => New_Occurrence_Of\n                                   (DT_Offset_To_Top_Func (Tag_Comp), Loc),\n                       Attribute_Name => Name_Address)))));\n \n@@ -8122,14 +8126,14 @@ package body Exp_Ch3 is\n                 Name =>\n                   Make_Selected_Component (Loc,\n                     Prefix => New_Copy_Tree (Target),\n-                    Selector_Name => New_Reference_To\n+                    Selector_Name => New_Occurrence_Of\n                                        (Offset_To_Top_Comp, Loc)),\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n                     Prefix       =>\n                       Make_Selected_Component (Loc,\n                         Prefix        => New_Copy_Tree (Target),\n-                        Selector_Name => New_Reference_To (Tag_Comp, Loc)),\n+                        Selector_Name => New_Occurrence_Of (Tag_Comp, Loc)),\n                   Attribute_Name => Name_Position)));\n \n          --  Normal case: No discriminants in the parent type\n@@ -8141,15 +8145,15 @@ package body Exp_Ch3 is\n             if not Is_Ancestor (Iface, Typ, Use_Full_View => True) then\n                Append_To (Stmts_List,\n                  Build_Set_Static_Offset_To_Top (Loc,\n-                   Iface_Tag    => New_Reference_To (Iface_Tag, Loc),\n+                   Iface_Tag    => New_Occurrence_Of (Iface_Tag, Loc),\n                    Offset_Value =>\n                      Unchecked_Convert_To (RTE (RE_Storage_Offset),\n                        Make_Attribute_Reference (Loc,\n                          Prefix =>\n                            Make_Selected_Component (Loc,\n                              Prefix        => New_Copy_Tree (Target),\n                              Selector_Name =>\n-                               New_Reference_To (Tag_Comp, Loc)),\n+                               New_Occurrence_Of (Tag_Comp, Loc)),\n                          Attribute_Name => Name_Position))));\n             end if;\n \n@@ -8164,15 +8168,15 @@ package body Exp_Ch3 is\n             if RTE_Available (RE_Register_Interface_Offset) then\n                Append_To (Stmts_List,\n                  Make_Procedure_Call_Statement (Loc,\n-                   Name => New_Reference_To\n+                   Name => New_Occurrence_Of\n                              (RTE (RE_Register_Interface_Offset), Loc),\n                    Parameter_Associations => New_List (\n                      Make_Attribute_Reference (Loc,\n                        Prefix         => New_Copy_Tree (Target),\n                        Attribute_Name => Name_Address),\n \n                      Unchecked_Convert_To (RTE (RE_Tag),\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (Node (First_Elmt (Access_Disp_Table (Iface))), Loc)),\n \n                      New_Occurrence_Of (Standard_True, Loc),\n@@ -8184,7 +8188,7 @@ package body Exp_Ch3 is\n                             Make_Selected_Component (Loc,\n                               Prefix         => New_Copy_Tree (Target),\n                               Selector_Name  =>\n-                                New_Reference_To (Tag_Comp, Loc)),\n+                                New_Occurrence_Of (Tag_Comp, Loc)),\n                          Attribute_Name => Name_Position)),\n \n                      Make_Null (Loc))));\n@@ -8295,9 +8299,9 @@ package body Exp_Ch3 is\n                      Make_Selected_Component (Loc,\n                        Prefix => New_Copy_Tree (Target),\n                        Selector_Name =>\n-                         New_Reference_To (Node (Iface_Comp_Elmt), Loc)),\n+                         New_Occurrence_Of (Node (Iface_Comp_Elmt), Loc)),\n                    Expression =>\n-                     New_Reference_To (Node (Iface_Tag_Elmt), Loc)));\n+                     New_Occurrence_Of (Node (Iface_Tag_Elmt), Loc)));\n             end if;\n \n          --  Otherwise generate code to initialize the tag\n@@ -8417,7 +8421,7 @@ package body Exp_Ch3 is\n                         Null_Exclusion_Present =>\n                           Null_Exclusion_Present (Parent (Formal)),\n                         Parameter_Type =>\n-                          New_Reference_To (Etype (Formal), Loc),\n+                          New_Occurrence_Of (Etype (Formal), Loc),\n                         Expression =>\n                           New_Copy_Tree (Expression (Parent (Formal)))),\n                      Formal_List);\n@@ -8433,7 +8437,7 @@ package body Exp_Ch3 is\n                     Chars => Chars (Subp)),\n                 Parameter_Specifications => Formal_List,\n                 Result_Definition        =>\n-                  New_Reference_To (Etype (Subp), Loc));\n+                  New_Occurrence_Of (Etype (Subp), Loc));\n \n             Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n             Append_To (Decl_List, Func_Decl);\n@@ -8463,12 +8467,12 @@ package body Exp_Ch3 is\n                       Subtype_Mark =>\n                         New_Occurrence_Of (Etype (Par_Formal), Loc),\n                       Expression   =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (Defining_Identifier (Formal_Node), Loc)));\n                else\n                   Append_To\n                     (Actual_List,\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Defining_Identifier (Formal_Node), Loc));\n                end if;\n \n@@ -8483,7 +8487,7 @@ package body Exp_Ch3 is\n                   Make_Extension_Aggregate (Loc,\n                     Ancestor_Part =>\n                       Make_Function_Call (Loc,\n-                        Name => New_Reference_To (Alias (Subp), Loc),\n+                        Name => New_Occurrence_Of (Alias (Subp), Loc),\n                         Parameter_Associations => Actual_List),\n                     Null_Record_Present => True));\n \n@@ -8542,12 +8546,12 @@ package body Exp_Ch3 is\n             Make_Parameter_Specification (Loc,\n               Defining_Identifier =>\n                 Make_Defining_Identifier (Loc, Name_X),\n-              Parameter_Type      => New_Reference_To (Typ, Loc)),\n+              Parameter_Type      => New_Occurrence_Of (Typ, Loc)),\n \n             Make_Parameter_Specification (Loc,\n               Defining_Identifier =>\n                 Make_Defining_Identifier (Loc, Name_Y),\n-              Parameter_Type      => New_Reference_To (Typ, Loc))),\n+              Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n \n           Ret_Type => Standard_Boolean,\n           For_Body => True);\n@@ -8571,7 +8575,7 @@ package body Exp_Ch3 is\n          Append_List_To (Stmts, Make_Eq_Case (Typ, Comps));\n          Append_To (Stmts,\n            Make_Simple_Return_Statement (Loc,\n-             Expression => New_Reference_To (Standard_True, Loc)));\n+             Expression => New_Occurrence_Of (Standard_True, Loc)));\n \n       else\n          Append_To (Stmts,\n@@ -8689,7 +8693,7 @@ package body Exp_Ch3 is\n          Append_To (Result,\n            Make_Case_Statement (Loc,\n              Expression =>\n-               New_Reference_To (Corresponding_Formal (CL), Loc),\n+               New_Occurrence_Of (Corresponding_Formal (CL), Loc),\n              Alternatives => Alt_List));\n \n       else\n@@ -8747,7 +8751,7 @@ package body Exp_Ch3 is\n             --  abstract.\n \n             --  Note also that in the following, we use Make_Identifier for\n-            --  the component names. Use of New_Reference_To to identify the\n+            --  the component names. Use of New_Occurrence_Of to identify the\n             --  components would be incorrect because the wrong entities for\n             --  discriminants could be picked up in the private type case.\n \n@@ -8898,12 +8902,12 @@ package body Exp_Ch3 is\n             Make_Parameter_Specification (Loc,\n               Defining_Identifier =>\n                 Make_Defining_Identifier (Loc, Chars (Left_Op)),\n-              Parameter_Type      => New_Reference_To (Tag_Typ, Loc)),\n+              Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)),\n \n             Make_Parameter_Specification (Loc,\n               Defining_Identifier =>\n                 Make_Defining_Identifier (Loc, Chars (Right_Op)),\n-              Parameter_Type      => New_Reference_To (Tag_Typ, Loc))),\n+              Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc))),\n \n           Ret_Type => Standard_Boolean,\n           For_Body => True);\n@@ -8946,7 +8950,7 @@ package body Exp_Ch3 is\n           Expression =>\n             Make_Op_Not (Loc,\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To (Target, Loc),\n+                Name => New_Occurrence_Of (Target, Loc),\n                 Parameter_Associations => New_List (\n                   Make_Identifier (Loc, Chars (Left_Op)),\n                   Make_Identifier (Loc, Chars (Right_Op)))))));\n@@ -9097,7 +9101,7 @@ package body Exp_Ch3 is\n         Profile => New_List (\n           Make_Parameter_Specification (Loc,\n             Defining_Identifier => Make_Defining_Identifier (Loc, Name_X),\n-            Parameter_Type      => New_Reference_To (Tag_Typ, Loc))),\n+            Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc))),\n \n         Ret_Type => Standard_Long_Long_Integer));\n \n@@ -9205,11 +9209,11 @@ package body Exp_Ch3 is\n                 Make_Parameter_Specification (Loc,\n                   Defining_Identifier =>\n                     Make_Defining_Identifier (Loc, Name_X),\n-                    Parameter_Type      => New_Reference_To (Tag_Typ, Loc)),\n+                    Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)),\n                 Make_Parameter_Specification (Loc,\n                   Defining_Identifier =>\n                     Make_Defining_Identifier (Loc, Name_Y),\n-                    Parameter_Type      => New_Reference_To (Tag_Typ, Loc))),\n+                    Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc))),\n                 Ret_Type => Standard_Boolean);\n             Append_To (Res, Eq_Spec);\n \n@@ -9250,11 +9254,11 @@ package body Exp_Ch3 is\n              Make_Parameter_Specification (Loc,\n                Defining_Identifier => Make_Defining_Identifier (Loc, Name_X),\n                Out_Present         => True,\n-               Parameter_Type      => New_Reference_To (Tag_Typ, Loc)),\n+               Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)),\n \n              Make_Parameter_Specification (Loc,\n                Defining_Identifier => Make_Defining_Identifier (Loc, Name_Y),\n-               Parameter_Type      => New_Reference_To (Tag_Typ, Loc)))));\n+               Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)))));\n       end if;\n \n       --  Ada 2005: Generate declarations for the following primitive\n@@ -9478,7 +9482,7 @@ package body Exp_Ch3 is\n           Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n           In_Present          => True,\n           Out_Present         => True,\n-          Parameter_Type      => New_Reference_To (Tag_Typ, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)));\n \n       --  F : Boolean := True\n \n@@ -9488,8 +9492,8 @@ package body Exp_Ch3 is\n          Append_To (Formals,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_F),\n-             Parameter_Type      => New_Reference_To (Standard_Boolean, Loc),\n-             Expression          => New_Reference_To (Standard_True, Loc)));\n+             Parameter_Type      => New_Occurrence_Of (Standard_Boolean, Loc),\n+             Expression          => New_Occurrence_Of (Standard_True, Loc)));\n       end if;\n \n       return\n@@ -9544,7 +9548,7 @@ package body Exp_Ch3 is\n            Make_Function_Specification (Loc,\n              Defining_Unit_Name       => Id,\n              Parameter_Specifications => Profile,\n-             Result_Definition        => New_Reference_To (Ret_Type, Loc));\n+             Result_Definition        => New_Occurrence_Of (Ret_Type, Loc));\n       end if;\n \n       if Is_Interface (Tag_Typ) then\n@@ -9689,7 +9693,7 @@ package body Exp_Ch3 is\n         Profile => New_List (\n           Make_Parameter_Specification (Loc,\n             Defining_Identifier => Make_Defining_Identifier (Loc, Name_X),\n-            Parameter_Type      => New_Reference_To (Tag_Typ, Loc))),\n+            Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc))),\n \n         Ret_Type => Standard_Long_Long_Integer,\n         For_Body => True);\n@@ -9814,11 +9818,11 @@ package body Exp_Ch3 is\n                Make_Parameter_Specification (Loc,\n                  Defining_Identifier => Make_Defining_Identifier (Loc, Name_X),\n                  Out_Present         => True,\n-                 Parameter_Type      => New_Reference_To (Tag_Typ, Loc)),\n+                 Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc)),\n \n                Make_Parameter_Specification (Loc,\n                  Defining_Identifier => Make_Defining_Identifier (Loc, Name_Y),\n-                 Parameter_Type      => New_Reference_To (Tag_Typ, Loc))),\n+                 Parameter_Type      => New_Occurrence_Of (Tag_Typ, Loc))),\n              For_Body => True);\n \n          Set_Handled_Statement_Sequence (Decl,"}, {"sha": "36c12acd206d27c4d4e902935fed3517f3813752", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 177, "deletions": 169, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -532,7 +532,7 @@ package body Exp_Ch4 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Fin_Mas_Id,\n                 Object_Definition =>\n-                  New_Reference_To (RTE (RE_Finalization_Master), Loc));\n+                  New_Occurrence_Of (RTE (RE_Finalization_Master), Loc));\n \n             Insert_Before_And_Analyze (First_Decl, Action);\n \n@@ -553,13 +553,13 @@ package body Exp_Ch4 is\n                Action :=\n                  Make_Procedure_Call_Statement (Loc,\n                    Name =>\n-                     New_Reference_To (RTE (RE_Set_Base_Pool), Loc),\n+                     New_Occurrence_Of (RTE (RE_Set_Base_Pool), Loc),\n \n                    Parameter_Associations => New_List (\n-                     New_Reference_To (Fin_Mas_Id, Loc),\n+                     New_Occurrence_Of (Fin_Mas_Id, Loc),\n                      Make_Attribute_Reference (Loc,\n                        Prefix =>\n-                         New_Reference_To (RTE (RE_Global_Pool_Object), Loc),\n+                         New_Occurrence_Of (RTE (RE_Global_Pool_Object), Loc),\n                        Attribute_Name => Name_Unrestricted_Access)));\n \n                Insert_Before_And_Analyze (First_Decl, Action);\n@@ -570,9 +570,9 @@ package body Exp_Ch4 is\n                Action :=\n                  Make_Procedure_Call_Statement (Loc,\n                    Name =>\n-                     New_Reference_To (RTE (RE_Set_Is_Heterogeneous), Loc),\n+                     New_Occurrence_Of (RTE (RE_Set_Is_Heterogeneous), Loc),\n                    Parameter_Associations => New_List (\n-                     New_Reference_To (Fin_Mas_Id, Loc)));\n+                     New_Occurrence_Of (Fin_Mas_Id, Loc)));\n \n                Insert_Before_And_Analyze (First_Decl, Action);\n             end if;\n@@ -663,7 +663,7 @@ package body Exp_Ch4 is\n             Rewrite (N,\n               Unchecked_Convert_To (PtrT,\n                 Make_Function_Call (Loc,\n-                  Name => New_Reference_To (RTE (RE_Displace), Loc),\n+                  Name => New_Occurrence_Of (RTE (RE_Displace), Loc),\n                   Parameter_Associations => New_List (\n                     Unchecked_Convert_To (RTE (RE_Address),\n                       Relocate_Node (N)),\n@@ -755,7 +755,7 @@ package body Exp_Ch4 is\n                Remove_Side_Effects (Ref);\n                Obj_Ref := New_Copy_Tree (Ref);\n             else\n-               Obj_Ref := New_Reference_To (Ref, Loc);\n+               Obj_Ref := New_Occurrence_Of (Ref, Loc);\n             end if;\n \n             --  Step 1: Create the object clean up code\n@@ -826,7 +826,7 @@ package body Exp_Ch4 is\n \n             Append_To (Stmts,\n               Make_Raise_Program_Error (Loc,\n-                Condition => New_Reference_To (Standard_True, Loc),\n+                Condition => New_Occurrence_Of (Standard_True, Loc),\n                 Reason    => PE_Accessibility_Check_Failed));\n \n             --  Step 2: Create the accessibility comparison\n@@ -856,7 +856,7 @@ package body Exp_Ch4 is\n                Cond :=\n                  Make_Function_Call (Loc,\n                    Name                   =>\n-                     New_Reference_To (RTE (RE_Get_Access_Level), Loc),\n+                     New_Occurrence_Of (RTE (RE_Get_Access_Level), Loc),\n                    Parameter_Associations => New_List (Obj_Ref));\n             end if;\n \n@@ -1015,11 +1015,11 @@ package body Exp_Ch4 is\n                Temp_Decl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n-                   Object_Definition   => New_Reference_To (PtrT, Loc),\n+                   Object_Definition   => New_Occurrence_Of (PtrT, Loc),\n                    Expression          =>\n                      Make_Allocator (Loc,\n                        Expression =>\n-                         New_Reference_To (Etype (Exp), Loc)));\n+                         New_Occurrence_Of (Etype (Exp), Loc)));\n \n                --  Copy the Comes_From_Source flag for the allocator we just\n                --  built, since logically this allocator is a replacement of\n@@ -1046,7 +1046,7 @@ package body Exp_Ch4 is\n                then\n                   Insert_Action (N,\n                     Make_Attach_Call (\n-                      Obj_Ref => New_Reference_To (Temp, Loc),\n+                      Obj_Ref => New_Occurrence_Of (Temp, Loc),\n                       Ptr_Typ => PtrT));\n                end if;\n \n@@ -1058,7 +1058,7 @@ package body Exp_Ch4 is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n                    Constant_Present    => True,\n-                   Object_Definition   => New_Reference_To (PtrT, Loc),\n+                   Object_Definition   => New_Occurrence_Of (PtrT, Loc),\n                    Expression          => Node);\n \n                Insert_Action (N, Temp_Decl);\n@@ -1076,7 +1076,7 @@ package body Exp_Ch4 is\n                   Insert_Action (N,\n                     Make_Attach_Call (\n                       Obj_Ref =>\n-                        New_Reference_To (Temp, Loc),\n+                        New_Occurrence_Of (Temp, Loc),\n                       Ptr_Typ => PtrT));\n                end if;\n             end if;\n@@ -1101,7 +1101,7 @@ package body Exp_Ch4 is\n                        Constant_Present       =>\n                          Is_Access_Constant (Etype (N)),\n                        Subtype_Indication     =>\n-                         New_Reference_To (Etype (Exp), Loc)));\n+                         New_Occurrence_Of (Etype (Exp), Loc)));\n \n                Insert_Action (N, New_Decl);\n \n@@ -1119,10 +1119,10 @@ package body Exp_Ch4 is\n                   Temp_Decl :=\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Temp,\n-                      Object_Definition   => New_Reference_To (Def_Id, Loc),\n+                      Object_Definition   => New_Occurrence_Of (Def_Id, Loc),\n                       Expression          =>\n                         Make_Allocator (Loc,\n-                          New_Reference_To (Etype (Exp), Loc)));\n+                          New_Occurrence_Of (Etype (Exp), Loc)));\n \n                   --  Copy the Comes_From_Source flag for the allocator we just\n                   --  built, since logically this allocator is a replacement of\n@@ -1146,7 +1146,7 @@ package body Exp_Ch4 is\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Temp,\n                       Constant_Present    => True,\n-                      Object_Definition   => New_Reference_To (Def_Id, Loc),\n+                      Object_Definition   => New_Occurrence_Of (Def_Id, Loc),\n                       Expression          => Node);\n \n                   Insert_Action (N, Temp_Decl);\n@@ -1163,10 +1163,10 @@ package body Exp_Ch4 is\n                New_Decl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Make_Temporary (Loc, 'P'),\n-                   Object_Definition   => New_Reference_To (PtrT, Loc),\n+                   Object_Definition   => New_Occurrence_Of (PtrT, Loc),\n                    Expression          =>\n                      Unchecked_Convert_To (PtrT,\n-                       New_Reference_To (Temp, Loc)));\n+                       New_Occurrence_Of (Temp, Loc)));\n \n                Insert_Action (N, New_Decl);\n \n@@ -1195,7 +1195,7 @@ package body Exp_Ch4 is\n \n          elsif Is_Tagged_Type (T) and then not Is_Class_Wide_Type (T) then\n             TagT := T;\n-            TagR := New_Reference_To (Temp, Loc);\n+            TagR := New_Occurrence_Of (Temp, Loc);\n \n          elsif Is_Private_Type (T)\n            and then Is_Tagged_Type (Underlying_Type (T))\n@@ -1204,23 +1204,26 @@ package body Exp_Ch4 is\n             TagR :=\n               Unchecked_Convert_To (Underlying_Type (T),\n                 Make_Explicit_Dereference (Loc,\n-                  Prefix => New_Reference_To (Temp, Loc)));\n+                  Prefix => New_Occurrence_Of (Temp, Loc)));\n          end if;\n \n          if Present (TagT) then\n             declare\n                Full_T : constant Entity_Id := Underlying_Type (TagT);\n+\n             begin\n                Tag_Assign :=\n                  Make_Assignment_Statement (Loc,\n                    Name =>\n                      Make_Selected_Component (Loc,\n                        Prefix => TagR,\n                        Selector_Name =>\n-                         New_Reference_To (First_Tag_Component (Full_T), Loc)),\n+                         New_Occurrence_Of\n+                           (First_Tag_Component (Full_T), Loc)),\n+\n                    Expression =>\n                      Unchecked_Convert_To (RTE (RE_Tag),\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (Elists.Node\n                            (First_Elmt (Access_Disp_Table (Full_T))), Loc)));\n             end;\n@@ -1255,7 +1258,7 @@ package body Exp_Ch4 is\n                    (Obj_Ref =>\n                       Unchecked_Convert_To (T,\n                         Make_Explicit_Dereference (Loc,\n-                          Prefix => New_Reference_To (Temp, Loc))),\n+                          Prefix => New_Occurrence_Of (Temp, Loc))),\n                     Typ     => T));\n             end if;\n \n@@ -1284,7 +1287,7 @@ package body Exp_Ch4 is\n             end if;\n          end if;\n \n-         Rewrite (N, New_Reference_To (Temp, Loc));\n+         Rewrite (N, New_Occurrence_Of (Temp, Loc));\n          Analyze_And_Resolve (N, PtrT);\n \n          --  Ada 2005 (AI-251): Displace the pointer to reference the record\n@@ -1300,10 +1303,10 @@ package body Exp_Ch4 is\n          Temp_Decl :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Temp,\n-             Object_Definition   => New_Reference_To (PtrT, Loc),\n+             Object_Definition   => New_Occurrence_Of (PtrT, Loc),\n              Expression          =>\n                Make_Allocator (Loc,\n-                 Expression => New_Reference_To (Etype (Exp), Loc)));\n+                 Expression => New_Occurrence_Of (Etype (Exp), Loc)));\n \n          --  Copy the Comes_From_Source flag for the allocator we just built,\n          --  since logically this allocator is a replacement of the original\n@@ -1330,11 +1333,11 @@ package body Exp_Ch4 is\n          then\n             Insert_Action (N,\n               Make_Attach_Call\n-                (Obj_Ref => New_Reference_To (Temp, Loc),\n+                (Obj_Ref => New_Occurrence_Of (Temp, Loc),\n                  Ptr_Typ => PtrT));\n          end if;\n \n-         Rewrite (N, New_Reference_To (Temp, Loc));\n+         Rewrite (N, New_Occurrence_Of (Temp, Loc));\n          Analyze_And_Resolve (N, PtrT);\n \n       elsif Is_Access_Type (T) and then Can_Never_Be_Null (T) then\n@@ -1648,7 +1651,7 @@ package body Exp_Ch4 is\n       Func_Name := Defining_Unit_Name (Specification (Func_Body));\n       Expr :=\n         Make_Function_Call (Loc,\n-          Name => New_Reference_To (Func_Name, Loc),\n+          Name => New_Occurrence_Of (Func_Name, Loc),\n           Parameter_Associations => New_List (Op1, Op2));\n \n       Insert_Action (N, Func_Body);\n@@ -1821,7 +1824,7 @@ package body Exp_Ch4 is\n          return\n            Make_Attribute_Reference (Loc,\n             Attribute_Name => Nam,\n-            Prefix => New_Reference_To (Arr, Loc),\n+            Prefix => New_Occurrence_Of (Arr, Loc),\n             Expressions => New_List (Make_Integer_Literal (Loc, Num)));\n       end Arr_Attr;\n \n@@ -1941,8 +1944,8 @@ package body Exp_Ch4 is\n             Bn := An;\n          end if;\n \n-         Append (New_Reference_To (An, Loc), Index_List1);\n-         Append (New_Reference_To (Bn, Loc), Index_List2);\n+         Append (New_Occurrence_Of (An, Loc), Index_List1);\n+         Append (New_Occurrence_Of (Bn, Loc), Index_List2);\n \n          Stm_List := New_List (\n            Handle_One_Dimension (N + 1, Next_Index (Index)));\n@@ -1955,26 +1958,28 @@ package body Exp_Ch4 is\n                Make_Exit_Statement (Loc,\n                  Condition =>\n                    Make_Op_Eq (Loc,\n-                      Left_Opnd => New_Reference_To (An, Loc),\n+                      Left_Opnd => New_Occurrence_Of (An, Loc),\n                       Right_Opnd => Arr_Attr (A, Name_Last, N))));\n \n             Append_To (Stm_List,\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Reference_To (An, Loc),\n+                Name       => New_Occurrence_Of (An, Loc),\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Reference_To (Index_T, Loc),\n+                    Prefix         => New_Occurrence_Of (Index_T, Loc),\n                     Attribute_Name => Name_Succ,\n-                    Expressions    => New_List (New_Reference_To (An, Loc)))));\n+                    Expressions    => New_List (\n+                      New_Occurrence_Of (An, Loc)))));\n \n             Append_To (Stm_List,\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Reference_To (Bn, Loc),\n+                Name       => New_Occurrence_Of (Bn, Loc),\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Reference_To (Index_T, Loc),\n+                    Prefix         => New_Occurrence_Of (Index_T, Loc),\n                     Attribute_Name => Name_Succ,\n-                    Expressions    => New_List (New_Reference_To (Bn, Loc)))));\n+                    Expressions    => New_List (\n+                      New_Occurrence_Of (Bn, Loc)))));\n          end if;\n \n          --  If separate indexes, we need a declare block for An and Bn, and a\n@@ -1989,12 +1994,12 @@ package body Exp_Ch4 is\n                 Declarations => New_List (\n                   Make_Object_Declaration (Loc,\n                     Defining_Identifier => An,\n-                    Object_Definition   => New_Reference_To (Index_T, Loc),\n+                    Object_Definition   => New_Occurrence_Of (Index_T, Loc),\n                     Expression          => Arr_Attr (A, Name_First, N)),\n \n                   Make_Object_Declaration (Loc,\n                     Defining_Identifier => Bn,\n-                    Object_Definition   => New_Reference_To (Index_T, Loc),\n+                    Object_Definition   => New_Occurrence_Of (Index_T, Loc),\n                     Expression          => Arr_Attr (B, Name_First, N))),\n \n                 Handled_Statement_Sequence =>\n@@ -2117,11 +2122,11 @@ package body Exp_Ch4 is\n       Formals := New_List (\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => A,\n-          Parameter_Type      => New_Reference_To (Ltyp, Loc)),\n+          Parameter_Type      => New_Occurrence_Of (Ltyp, Loc)),\n \n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => B,\n-          Parameter_Type      => New_Reference_To (Rtyp, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Rtyp, Loc)));\n \n       Func_Name := Make_Temporary (Loc, 'E');\n \n@@ -2133,7 +2138,7 @@ package body Exp_Ch4 is\n             Make_Function_Specification (Loc,\n               Defining_Unit_Name       => Func_Name,\n               Parameter_Specifications => Formals,\n-              Result_Definition => New_Reference_To (Standard_Boolean, Loc)),\n+              Result_Definition => New_Occurrence_Of (Standard_Boolean, Loc)),\n \n           Declarations =>  Decls,\n \n@@ -2193,7 +2198,7 @@ package body Exp_Ch4 is\n \n          return\n            Make_Function_Call (Loc,\n-             Name                   => New_Reference_To (Func_Name, Loc),\n+             Name                   => New_Occurrence_Of (Func_Name, Loc),\n              Parameter_Associations => Actuals);\n    end Expand_Array_Equality;\n \n@@ -2265,12 +2270,12 @@ package body Exp_Ch4 is\n \n             Rewrite (N,\n               Make_Function_Call (Loc,\n-                Name                   => New_Reference_To (Func_Name, Loc),\n+                Name                   => New_Occurrence_Of (Func_Name, Loc),\n                 Parameter_Associations =>\n                   New_List (\n                     L,\n                     Make_Type_Conversion\n-                      (Loc, New_Reference_To (Etype (L), Loc), R))));\n+                      (Loc, New_Occurrence_Of (Etype (L), Loc), R))));\n \n             Analyze_And_Resolve (N, Typ);\n          end if;\n@@ -2569,7 +2574,7 @@ package body Exp_Ch4 is\n                else\n                   return\n                     Make_Function_Call (Loc,\n-                      Name                   => New_Reference_To (Prim, Loc),\n+                      Name                   => New_Occurrence_Of (Prim, Loc),\n                       Parameter_Associations => New_List (Lhs, Rhs));\n                end if;\n             end if;\n@@ -2674,7 +2679,7 @@ package body Exp_Ch4 is\n \n          return\n            Make_Function_Call (Loc,\n-             Name => New_Reference_To (Eq_Op, Loc),\n+             Name => New_Occurrence_Of (Eq_Op, Loc),\n              Parameter_Associations =>\n                New_List\n                  (Unchecked_Convert_To (Etype (First_Formal (Eq_Op)), Lhs),\n@@ -2697,7 +2702,7 @@ package body Exp_Ch4 is\n                begin\n                   return\n                     Make_Function_Call (Loc,\n-                      Name                  => New_Reference_To (Eq_Op, Loc),\n+                      Name                  => New_Occurrence_Of (Eq_Op, Loc),\n                       Parameter_Associations => New_List (\n                         OK_Convert_To (T, Lhs),\n                         OK_Convert_To (T, Rhs)));\n@@ -2804,7 +2809,7 @@ package body Exp_Ch4 is\n \n                      return\n                        Make_Function_Call (Loc,\n-                         Name => New_Reference_To (Eq_Op, Loc),\n+                         Name => New_Occurrence_Of (Eq_Op, Loc),\n                          Parameter_Associations => New_List (\n                            Lhs,\n                            Rhs,\n@@ -2815,7 +2820,7 @@ package body Exp_Ch4 is\n                else\n                   return\n                     Make_Function_Call (Loc,\n-                      Name                   => New_Reference_To (Eq_Op, Loc),\n+                      Name                   => New_Occurrence_Of (Eq_Op, Loc),\n                       Parameter_Associations => New_List (Lhs, Rhs));\n                end if;\n             end if;\n@@ -3155,7 +3160,7 @@ package body Exp_Ch4 is\n \n             Opnd_Low_Bound (NN) :=\n               Make_Attribute_Reference (Loc,\n-                Prefix         => New_Reference_To (Istyp, Loc),\n+                Prefix         => New_Occurrence_Of (Istyp, Loc),\n                 Attribute_Name => Name_First);\n \n             Set := True;\n@@ -3326,7 +3331,7 @@ package body Exp_Ch4 is\n             if Is_Fixed_Length (1) then\n                Aggr_Length (1) := Make_Integer_Literal (Loc, Fixed_Length (1));\n             else\n-               Aggr_Length (1) := New_Reference_To (Var_Length (1), Loc);\n+               Aggr_Length (1) := New_Occurrence_Of (Var_Length (1), Loc);\n             end if;\n \n          --  If entry is fixed length and only fixed lengths so far, make\n@@ -3348,7 +3353,7 @@ package body Exp_Ch4 is\n             if Is_Fixed_Length (NN) then\n                Clen := Make_Integer_Literal (Loc, Fixed_Length (NN));\n             else\n-               Clen := New_Reference_To (Var_Length (NN), Loc);\n+               Clen := New_Occurrence_Of (Var_Length (NN), Loc);\n             end if;\n \n             Append_To (Actions,\n@@ -3447,8 +3452,10 @@ package body Exp_Ch4 is\n                       Expressions => New_List (\n \n                         Make_Op_Ne (Loc,\n-                          Left_Opnd  => New_Reference_To (Var_Length (J), Loc),\n-                          Right_Opnd => Make_Integer_Literal (Loc, 0)),\n+                          Left_Opnd  =>\n+                            New_Occurrence_Of (Var_Length (J), Loc),\n+                          Right_Opnd =>\n+                            Make_Integer_Literal (Loc, 0)),\n \n                         New_Copy (Opnd_Low_Bound (J)),\n                         Get_Known_Bound (J + 1)));\n@@ -3465,7 +3472,7 @@ package body Exp_Ch4 is\n                 Object_Definition   => New_Occurrence_Of (Ityp, Loc),\n                 Expression          => Get_Known_Bound (1)));\n \n-            Low_Bound := New_Reference_To (Ent, Loc);\n+            Low_Bound := New_Occurrence_Of (Ent, Loc);\n          end;\n       end if;\n \n@@ -3625,10 +3632,10 @@ package body Exp_Ch4 is\n \n                   Insert_Action (Cnode,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name => New_Reference_To (RTE (RR (NN)), Loc),\n+                      Name => New_Occurrence_Of (RTE (RR (NN)), Loc),\n                       Parameter_Associations => Opnds));\n \n-                  Result := New_Reference_To (Ent, Loc);\n+                  Result := New_Occurrence_Of (Ent, Loc);\n                   goto Done;\n                end;\n             end if;\n@@ -3715,7 +3722,7 @@ package body Exp_Ch4 is\n \n       --  Finally we build the result, which is a reference to the array object\n \n-      Result := New_Reference_To (Ent, Loc);\n+      Result := New_Occurrence_Of (Ent, Loc);\n \n    <<Done>>\n       Rewrite (Cnode, Result);\n@@ -3783,11 +3790,11 @@ package body Exp_Ch4 is\n                 Low_Bound =>\n                   Make_Attribute_Reference (Loc,\n                     Attribute_Name => Name_First,\n-                    Prefix         => New_Reference_To (Rtyp, Loc)),\n+                    Prefix         => New_Occurrence_Of (Rtyp, Loc)),\n                 High_Bound =>\n                   Make_Attribute_Reference (Loc,\n                     Attribute_Name => Name_Last,\n-                    Prefix         => New_Reference_To (Rtyp, Loc))));\n+                    Prefix         => New_Occurrence_Of (Rtyp, Loc))));\n             Analyze_And_Resolve (Rop, Rtyp, Suppress => All_Checks);\n          end;\n       end if;\n@@ -4562,7 +4569,7 @@ package body Exp_Ch4 is\n                Init_Arg1 :=\n                  Make_Explicit_Dereference (Loc,\n                    Prefix =>\n-                     New_Reference_To (Temp, Loc));\n+                     New_Occurrence_Of (Temp, Loc));\n \n                Set_Assignment_OK (Init_Arg1);\n                Temp_Type := PtrT;\n@@ -4683,7 +4690,7 @@ package body Exp_Ch4 is\n                        New_Occurrence_Of (RTE (RE_Library_Task_Level), Loc));\n                   else\n                      Append_To (Args,\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (Master_Id (Base_Type (Root_Type (PtrT))), Loc));\n                   end if;\n \n@@ -4735,7 +4742,7 @@ package body Exp_Ch4 is\n                                       (Typ, Current_Scope))\n                      then\n                         Typ := Build_Default_Subtype (Typ, N);\n-                        Set_Expression (N, New_Reference_To (Typ, Loc));\n+                        Set_Expression (N, New_Occurrence_Of (Typ, Loc));\n                      end if;\n \n                      Discr := First_Elmt (Discriminant_Constraint (Typ));\n@@ -4780,7 +4787,7 @@ package body Exp_Ch4 is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n                    Constant_Present    => True,\n-                   Object_Definition   => New_Reference_To (Temp_Type, Loc),\n+                   Object_Definition   => New_Occurrence_Of (Temp_Type, Loc),\n                    Expression          => Nod);\n \n                Set_Assignment_OK (Temp_Decl);\n@@ -4806,7 +4813,7 @@ package body Exp_Ch4 is\n                else\n                   Insert_Action (N,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name                   => New_Reference_To (Init, Loc),\n+                      Name                   => New_Occurrence_Of (Init, Loc),\n                       Parameter_Associations => Args));\n                end if;\n \n@@ -4857,7 +4864,7 @@ package body Exp_Ch4 is\n                   end if;\n                end if;\n \n-               Rewrite (N, New_Reference_To (Temp, Loc));\n+               Rewrite (N, New_Occurrence_Of (Temp, Loc));\n                Analyze_And_Resolve (N, PtrT);\n             end if;\n          end if;\n@@ -4962,7 +4969,7 @@ package body Exp_Ch4 is\n              Type_Definition     =>\n                Make_Access_To_Object_Definition (Loc,\n                  All_Present        => True,\n-                 Subtype_Indication => New_Reference_To (Typ, Loc))));\n+                 Subtype_Indication => New_Occurrence_Of (Typ, Loc))));\n          Ttyp := Pnn;\n       end if;\n \n@@ -5272,7 +5279,7 @@ package body Exp_Ch4 is\n              Type_Definition     =>\n                Make_Access_To_Object_Definition (Loc,\n                  All_Present        => True,\n-                 Subtype_Indication => New_Reference_To (Typ, Loc))));\n+                 Subtype_Indication => New_Occurrence_Of (Typ, Loc))));\n \n          --  Generate:\n          --    Cnn : Ann;\n@@ -5296,15 +5303,15 @@ package body Exp_Ch4 is\n              Condition       => Relocate_Node (Cond),\n              Then_Statements => New_List (\n                Make_Assignment_Statement (Sloc (Thenx),\n-                 Name       => New_Reference_To (Cnn, Sloc (Thenx)),\n+                 Name       => New_Occurrence_Of (Cnn, Sloc (Thenx)),\n                  Expression =>\n                    Make_Attribute_Reference (Loc,\n                      Prefix         => Relocate_Node (Thenx),\n                      Attribute_Name => Name_Unrestricted_Access))),\n \n              Else_Statements => New_List (\n                Make_Assignment_Statement (Sloc (Elsex),\n-                 Name       => New_Reference_To (Cnn, Sloc (Elsex)),\n+                 Name       => New_Occurrence_Of (Cnn, Sloc (Elsex)),\n                  Expression =>\n                    Make_Attribute_Reference (Loc,\n                      Prefix         => Relocate_Node (Elsex),\n@@ -5604,7 +5611,7 @@ package body Exp_Ch4 is\n                   Error_Msg_N (\"\\?c?value is known to be out of range\", N);\n                end if;\n \n-               Rewrite (N, New_Reference_To (Standard_False, Loc));\n+               Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n                Analyze_And_Resolve (N, Restyp);\n                Set_Is_Static_Expression (N, Static);\n                goto Leave;\n@@ -5618,7 +5625,7 @@ package body Exp_Ch4 is\n                   Error_Msg_N (\"\\?c?value is known to be in range\", N);\n                end if;\n \n-               Rewrite (N, New_Reference_To (Standard_True, Loc));\n+               Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n                Analyze_And_Resolve (N, Restyp);\n                Set_Is_Static_Expression (N, Static);\n                goto Leave;\n@@ -5751,12 +5758,12 @@ package body Exp_Ch4 is\n                       Low_Bound =>\n                         Make_Attribute_Reference (Loc,\n                           Attribute_Name => Name_First,\n-                          Prefix         => New_Reference_To (Typ, Loc)),\n+                          Prefix         => New_Occurrence_Of (Typ, Loc)),\n \n                       High_Bound =>\n                         Make_Attribute_Reference (Loc,\n                           Attribute_Name => Name_Last,\n-                          Prefix         => New_Reference_To (Typ, Loc))));\n+                          Prefix         => New_Occurrence_Of (Typ, Loc))));\n                   Analyze_And_Resolve (N, Restyp);\n                end if;\n \n@@ -5789,7 +5796,7 @@ package body Exp_Ch4 is\n             end if;\n \n             if not Is_Constrained (Typ) then\n-               Rewrite (N, New_Reference_To (Standard_True, Loc));\n+               Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n                Analyze_And_Resolve (N, Restyp);\n \n             --  For the constrained array case, we have to check the subscripts\n@@ -6871,7 +6878,7 @@ package body Exp_Ch4 is\n \n                   Rewrite (N,\n                     Make_Function_Call (Loc,\n-                      Name                   => New_Reference_To (Eq, Loc),\n+                      Name                   => New_Occurrence_Of (Eq, Loc),\n                       Parameter_Associations => Params));\n                end;\n             end;\n@@ -6881,7 +6888,7 @@ package body Exp_Ch4 is\n          else\n             Rewrite (N,\n               Make_Function_Call (Loc,\n-                Name                   => New_Reference_To (Eq, Loc),\n+                Name                   => New_Occurrence_Of (Eq, Loc),\n                 Parameter_Associations => New_List (L_Exp, R_Exp)));\n          end if;\n \n@@ -7451,7 +7458,7 @@ package body Exp_Ch4 is\n                      Make_Object_Declaration (Loc,\n                        Defining_Identifier => Temp,\n                        Constant_Present    => True,\n-                       Object_Definition   => New_Reference_To (Typ, Loc),\n+                       Object_Definition   => New_Occurrence_Of (Typ, Loc),\n                        Expression =>\n                          Make_Op_Multiply (Loc,\n                            Left_Opnd  =>\n@@ -7461,8 +7468,8 @@ package body Exp_Ch4 is\n \n                    Expression =>\n                      Make_Op_Multiply (Loc,\n-                       Left_Opnd  => New_Reference_To (Temp, Loc),\n-                       Right_Opnd => New_Reference_To (Temp, Loc)));\n+                       Left_Opnd  => New_Occurrence_Of (Temp, Loc),\n+                       Right_Opnd => New_Occurrence_Of (Temp, Loc)));\n             end if;\n \n             Rewrite (N, Xnode);\n@@ -7551,7 +7558,7 @@ package body Exp_Ch4 is\n             Rewrite (N,\n               Convert_To (Typ,\n                 Make_Function_Call (Loc,\n-                  Name => New_Reference_To (RTE (RE_Exp_Modular), Loc),\n+                  Name => New_Occurrence_Of (RTE (RE_Exp_Modular), Loc),\n                   Parameter_Associations => New_List (\n                     Convert_To (Standard_Integer, Base),\n                     Make_Integer_Literal (Loc, Modulus (Rtyp)),\n@@ -7573,7 +7580,7 @@ package body Exp_Ch4 is\n                 Make_Op_And (Loc,\n                   Left_Opnd =>\n                     Make_Function_Call (Loc,\n-                      Name => New_Reference_To (Ent, Loc),\n+                      Name => New_Occurrence_Of (Ent, Loc),\n                       Parameter_Associations => New_List (\n                         Convert_To (Etype (First_Formal (Ent)), Base),\n                         Exp)),\n@@ -7640,7 +7647,7 @@ package body Exp_Ch4 is\n       then\n          Rewrite (N,\n            Make_Function_Call (Loc,\n-             Name                   => New_Reference_To (RTE (Rent), Loc),\n+             Name                   => New_Occurrence_Of (RTE (Rent), Loc),\n              Parameter_Associations => New_List (Base, Exp)));\n \n       --  Otherwise we have to introduce conversions (conversions are also\n@@ -7651,7 +7658,7 @@ package body Exp_Ch4 is\n          Rewrite (N,\n            Convert_To (Typ,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (Rent), Loc),\n+               Name => New_Occurrence_Of (RTE (Rent), Loc),\n                Parameter_Associations => New_List (\n                  Convert_To (Etyp, Base),\n                  Exp))));\n@@ -8640,13 +8647,13 @@ package body Exp_Ch4 is\n \n       A_J :=\n         Make_Indexed_Component (Loc,\n-          Prefix      => New_Reference_To (A, Loc),\n-          Expressions => New_List (New_Reference_To (J, Loc)));\n+          Prefix      => New_Occurrence_Of (A, Loc),\n+          Expressions => New_List (New_Occurrence_Of (J, Loc)));\n \n       B_J :=\n         Make_Indexed_Component (Loc,\n-          Prefix      => New_Reference_To (B, Loc),\n-          Expressions => New_List (New_Reference_To (J, Loc)));\n+          Prefix      => New_Occurrence_Of (B, Loc),\n+          Expressions => New_List (New_Occurrence_Of (J, Loc)));\n \n       Loop_Statement :=\n         Make_Implicit_Loop_Statement (N,\n@@ -8678,13 +8685,13 @@ package body Exp_Ch4 is\n               Parameter_Specifications => New_List (\n                 Make_Parameter_Specification (Loc,\n                   Defining_Identifier => A,\n-                  Parameter_Type      => New_Reference_To (Typ, Loc))),\n-              Result_Definition => New_Reference_To (Typ, Loc)),\n+                  Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n+              Result_Definition => New_Occurrence_Of (Typ, Loc)),\n \n           Declarations => New_List (\n             Make_Object_Declaration (Loc,\n               Defining_Identifier => B,\n-              Object_Definition   => New_Reference_To (Arr, Loc))),\n+              Object_Definition   => New_Occurrence_Of (Arr, Loc))),\n \n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n@@ -8695,7 +8702,7 @@ package body Exp_Ch4 is\n \n       Rewrite (N,\n         Make_Function_Call (Loc,\n-          Name                   => New_Reference_To (Func_Name, Loc),\n+          Name                   => New_Occurrence_Of (Func_Name, Loc),\n           Parameter_Associations => New_List (Opnd)));\n \n       Analyze_And_Resolve (N, Typ);\n@@ -10318,7 +10325,7 @@ package body Exp_Ch4 is\n          begin\n             R :=\n               Make_Type_Conversion (Loc,\n-                Subtype_Mark => New_Reference_To (Standard_Integer, Loc),\n+                Subtype_Mark => New_Occurrence_Of (Standard_Integer, Loc),\n                 Expression   => Relocate_Node (Right_Opnd (Operand)));\n \n             Opnd := New_Op_Node (Nkind (Operand), Loc);\n@@ -10327,7 +10334,7 @@ package body Exp_Ch4 is\n             if Nkind (Operand) in N_Binary_Op then\n                L :=\n                  Make_Type_Conversion (Loc,\n-                   Subtype_Mark => New_Reference_To (Standard_Integer, Loc),\n+                   Subtype_Mark => New_Occurrence_Of (Standard_Integer, Loc),\n                    Expression   => Relocate_Node (Left_Opnd (Operand)));\n \n                Set_Left_Opnd  (Opnd, L);\n@@ -10474,7 +10481,7 @@ package body Exp_Ch4 is\n                           Left_Opnd  =>\n                             Make_Explicit_Dereference (Loc,\n                               Prefix => Duplicate_Subexpr_No_Checks (Operand)),\n-                          Right_Opnd => New_Reference_To (Targ_Typ, Loc)));\n+                          Right_Opnd => New_Occurrence_Of (Targ_Typ, Loc)));\n \n                --  Generate:\n                --    [Constraint_Error when Operand not in Targ_Typ]\n@@ -10483,7 +10490,7 @@ package body Exp_Ch4 is\n                   Cond :=\n                     Make_Not_In (Loc,\n                       Left_Opnd  => Duplicate_Subexpr_No_Checks (Operand),\n-                      Right_Opnd => New_Reference_To (Targ_Typ, Loc));\n+                      Right_Opnd => New_Occurrence_Of (Targ_Typ, Loc));\n                end if;\n \n                Insert_Action (N,\n@@ -11111,7 +11118,7 @@ package body Exp_Ch4 is\n       --     and then ...\n       --     and then Lhs.Cmpn = Rhs.Cmpn\n \n-      Result := New_Reference_To (Standard_True, Loc);\n+      Result := New_Occurrence_Of (Standard_True, Loc);\n       C := Element_To_Compare (First_Entity (Typ));\n       while Present (C) loop\n          declare\n@@ -11134,11 +11141,11 @@ package body Exp_Ch4 is\n                Lhs =>\n                  Make_Selected_Component (Loc,\n                    Prefix        => New_Lhs,\n-                   Selector_Name => New_Reference_To (C, Loc)),\n+                   Selector_Name => New_Occurrence_Of (C, Loc)),\n                Rhs =>\n                  Make_Selected_Component (Loc,\n                    Prefix        => New_Rhs,\n-                   Selector_Name => New_Reference_To (C, Loc)),\n+                   Selector_Name => New_Occurrence_Of (C, Loc)),\n                Bodies => Bodies);\n \n             --  If some (sub)component is an unchecked_union, the whole\n@@ -11531,7 +11538,7 @@ package body Exp_Ch4 is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Addr,\n           Object_Definition   =>\n-            New_Reference_To (RTE (RE_Address), Loc),\n+            New_Occurrence_Of (RTE (RE_Address), Loc),\n           Expression          =>\n             Make_Attribute_Reference (Loc,\n               Prefix         => Duplicate_Subexpr_Move_Checks (N),\n@@ -11553,7 +11560,7 @@ package body Exp_Ch4 is\n           Defining_Identifier => Size,\n \n           Object_Definition   =>\n-            New_Reference_To (RTE (RE_Storage_Count), Loc),\n+            New_Occurrence_Of (RTE (RE_Storage_Count), Loc),\n \n           Expression          =>\n             Make_Op_Divide (Loc,\n@@ -11578,7 +11585,7 @@ package body Exp_Ch4 is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Alig,\n           Object_Definition   =>\n-            New_Reference_To (RTE (RE_Storage_Count), Loc),\n+            New_Occurrence_Of (RTE (RE_Storage_Count), Loc),\n           Expression          =>\n             Make_Attribute_Reference (Loc,\n               Prefix         => Deref,\n@@ -11599,11 +11606,11 @@ package body Exp_Ch4 is\n          Stmt :=\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Adjust_Controlled_Dereference), Loc),\n+               New_Occurrence_Of (RTE (RE_Adjust_Controlled_Dereference), Loc),\n              Parameter_Associations => New_List (\n-               New_Reference_To (Addr, Loc),\n-               New_Reference_To (Size, Loc),\n-               New_Reference_To (Alig, Loc)));\n+               New_Occurrence_Of (Addr, Loc),\n+               New_Occurrence_Of (Size, Loc),\n+               New_Occurrence_Of (Alig, Loc)));\n \n          --  Class-wide types complicate things because we cannot determine\n          --  statically whether the actual object is truly controlled. We must\n@@ -11624,7 +11631,7 @@ package body Exp_Ch4 is\n                 Condition       =>\n                   Make_Function_Call (Loc,\n                     Name                   =>\n-                      New_Reference_To (RTE (RE_Needs_Finalization), Loc),\n+                      New_Occurrence_Of (RTE (RE_Needs_Finalization), Loc),\n                     Parameter_Associations => New_List (\n                       Make_Attribute_Reference (Loc,\n                         Prefix         => Deref,\n@@ -11641,13 +11648,13 @@ package body Exp_Ch4 is\n       Insert_Action (N,\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n-            New_Reference_To\n+            New_Occurrence_Of\n               (Find_Prim_Op (Etype (Pool), Name_Dereference), Loc),\n           Parameter_Associations => New_List (\n-            New_Reference_To (Pool, Loc),\n-            New_Reference_To (Addr, Loc),\n-            New_Reference_To (Size, Loc),\n-            New_Reference_To (Alig, Loc))));\n+            New_Occurrence_Of (Pool, Loc),\n+            New_Occurrence_Of (Addr, Loc),\n+            New_Occurrence_Of (Size, Loc),\n+            New_Occurrence_Of (Alig, Loc))));\n \n       --  Mark the explicit dereference as processed to avoid potential\n       --  infinite expansion.\n@@ -11782,10 +11789,10 @@ package body Exp_Ch4 is\n         Make_Implicit_If_Statement (Nod,\n           Condition =>\n             Make_Op_Eq (Loc,\n-              Left_Opnd => New_Reference_To (J, Loc),\n+              Left_Opnd => New_Occurrence_Of (J, Loc),\n               Right_Opnd =>\n                 Make_Attribute_Reference (Loc,\n-                  Prefix => New_Reference_To (Y, Loc),\n+                  Prefix => New_Occurrence_Of (Y, Loc),\n                   Attribute_Name => Name_Last)),\n \n           Then_Statements => New_List (\n@@ -11794,12 +11801,12 @@ package body Exp_Ch4 is\n           Else_Statements =>\n             New_List (\n               Make_Assignment_Statement (Loc,\n-                Name => New_Reference_To (J, Loc),\n+                Name => New_Occurrence_Of (J, Loc),\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix => New_Reference_To (Index, Loc),\n+                    Prefix => New_Occurrence_Of (Index, Loc),\n                     Attribute_Name => Name_Succ,\n-                    Expressions => New_List (New_Reference_To (J, Loc))))));\n+                    Expressions => New_List (New_Occurrence_Of (J, Loc))))));\n \n       --  if X (I) = Y (J) then\n       --     if ... end if;\n@@ -11813,13 +11820,13 @@ package body Exp_Ch4 is\n             Make_Op_Eq (Loc,\n               Left_Opnd =>\n                 Make_Indexed_Component (Loc,\n-                  Prefix      => New_Reference_To (X, Loc),\n-                  Expressions => New_List (New_Reference_To (I, Loc))),\n+                  Prefix      => New_Occurrence_Of (X, Loc),\n+                  Expressions => New_List (New_Occurrence_Of (I, Loc))),\n \n               Right_Opnd =>\n                 Make_Indexed_Component (Loc,\n-                  Prefix      => New_Reference_To (Y, Loc),\n-                  Expressions => New_List (New_Reference_To (J, Loc)))),\n+                  Prefix      => New_Occurrence_Of (Y, Loc),\n+                  Expressions => New_List (New_Occurrence_Of (J, Loc)))),\n \n           Then_Statements => New_List (Inner_If),\n \n@@ -11829,14 +11836,14 @@ package body Exp_Ch4 is\n                 Make_Op_Gt (Loc,\n                   Left_Opnd =>\n                     Make_Indexed_Component (Loc,\n-                      Prefix      => New_Reference_To (X, Loc),\n-                      Expressions => New_List (New_Reference_To (I, Loc))),\n+                      Prefix      => New_Occurrence_Of (X, Loc),\n+                      Expressions => New_List (New_Occurrence_Of (I, Loc))),\n \n                   Right_Opnd =>\n                     Make_Indexed_Component (Loc,\n-                      Prefix      => New_Reference_To (Y, Loc),\n+                      Prefix      => New_Occurrence_Of (Y, Loc),\n                       Expressions => New_List (\n-                        New_Reference_To (J, Loc)))))));\n+                        New_Occurrence_Of (J, Loc)))))));\n \n       --  for I in X'range loop\n       --     if ... end if;\n@@ -11853,7 +11860,7 @@ package body Exp_Ch4 is\n                   Defining_Identifier => I,\n                   Discrete_Subtype_Definition =>\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (X, Loc),\n+                      Prefix => New_Occurrence_Of (X, Loc),\n                       Attribute_Name => Name_Range))),\n \n           Statements => New_List (Loop_Body));\n@@ -11869,12 +11876,12 @@ package body Exp_Ch4 is\n \n       Length1 :=\n         Make_Attribute_Reference (Loc,\n-          Prefix => New_Reference_To (X, Loc),\n+          Prefix => New_Occurrence_Of (X, Loc),\n           Attribute_Name => Name_Length);\n \n       Length2 :=\n         Make_Attribute_Reference (Loc,\n-          Prefix => New_Reference_To (Y, Loc),\n+          Prefix => New_Occurrence_Of (Y, Loc),\n           Attribute_Name => Name_Length);\n \n       Final_Expr :=\n@@ -11888,31 +11895,31 @@ package body Exp_Ch4 is\n             Make_Op_Eq (Loc,\n               Left_Opnd =>\n                 Make_Attribute_Reference (Loc,\n-                  Prefix => New_Reference_To (X, Loc),\n+                  Prefix => New_Occurrence_Of (X, Loc),\n                   Attribute_Name => Name_Length),\n               Right_Opnd =>\n                 Make_Integer_Literal (Loc, 0)),\n \n           Then_Statements =>\n             New_List (\n               Make_Simple_Return_Statement (Loc,\n-                Expression => New_Reference_To (Standard_False, Loc))),\n+                Expression => New_Occurrence_Of (Standard_False, Loc))),\n \n           Elsif_Parts => New_List (\n             Make_Elsif_Part (Loc,\n               Condition =>\n                 Make_Op_Eq (Loc,\n                   Left_Opnd =>\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (Y, Loc),\n+                      Prefix => New_Occurrence_Of (Y, Loc),\n                       Attribute_Name => Name_Length),\n                   Right_Opnd =>\n                     Make_Integer_Literal (Loc, 0)),\n \n               Then_Statements =>\n                 New_List (\n                   Make_Simple_Return_Statement (Loc,\n-                     Expression => New_Reference_To (Standard_True, Loc))))),\n+                     Expression => New_Occurrence_Of (Standard_True, Loc))))),\n \n           Else_Statements => New_List (\n             Loop_Statement,\n@@ -11924,11 +11931,11 @@ package body Exp_Ch4 is\n       Formals := New_List (\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => X,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)),\n \n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => Y,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n       --  function Gnnn (...) return boolean is\n       --    J : index := Y'first;\n@@ -11944,15 +11951,15 @@ package body Exp_Ch4 is\n             Make_Function_Specification (Loc,\n               Defining_Unit_Name       => Func_Name,\n               Parameter_Specifications => Formals,\n-              Result_Definition => New_Reference_To (Standard_Boolean, Loc)),\n+              Result_Definition => New_Occurrence_Of (Standard_Boolean, Loc)),\n \n           Declarations => New_List (\n             Make_Object_Declaration (Loc,\n               Defining_Identifier => J,\n-              Object_Definition   => New_Reference_To (Index, Loc),\n+              Object_Definition   => New_Occurrence_Of (Index, Loc),\n               Expression =>\n                 Make_Attribute_Reference (Loc,\n-                  Prefix => New_Reference_To (Y, Loc),\n+                  Prefix => New_Occurrence_Of (Y, Loc),\n                   Attribute_Name => Name_First))),\n \n           Handled_Statement_Sequence =>\n@@ -12004,18 +12011,18 @@ package body Exp_Ch4 is\n    begin\n       A_J :=\n         Make_Indexed_Component (Loc,\n-          Prefix      => New_Reference_To (A, Loc),\n-          Expressions => New_List (New_Reference_To (J, Loc)));\n+          Prefix      => New_Occurrence_Of (A, Loc),\n+          Expressions => New_List (New_Occurrence_Of (J, Loc)));\n \n       B_J :=\n         Make_Indexed_Component (Loc,\n-          Prefix      => New_Reference_To (B, Loc),\n-          Expressions => New_List (New_Reference_To (J, Loc)));\n+          Prefix      => New_Occurrence_Of (B, Loc),\n+          Expressions => New_List (New_Occurrence_Of (J, Loc)));\n \n       C_J :=\n         Make_Indexed_Component (Loc,\n-          Prefix      => New_Reference_To (C, Loc),\n-          Expressions => New_List (New_Reference_To (J, Loc)));\n+          Prefix      => New_Occurrence_Of (C, Loc),\n+          Expressions => New_List (New_Occurrence_Of (J, Loc)));\n \n       if Nkind (N) = N_Op_And then\n          Op :=\n@@ -12047,7 +12054,7 @@ package body Exp_Ch4 is\n                   Defining_Identifier => J,\n                   Discrete_Subtype_Definition =>\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (A, Loc),\n+                      Prefix => New_Occurrence_Of (A, Loc),\n                       Attribute_Name => Name_Range))),\n \n           Statements => New_List (\n@@ -12058,11 +12065,11 @@ package body Exp_Ch4 is\n       Formals := New_List (\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => A,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)),\n \n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => B,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n       Func_Name := Make_Temporary (Loc, 'A');\n       Set_Is_Inlined (Func_Name);\n@@ -12073,19 +12080,19 @@ package body Exp_Ch4 is\n             Make_Function_Specification (Loc,\n               Defining_Unit_Name       => Func_Name,\n               Parameter_Specifications => Formals,\n-              Result_Definition        => New_Reference_To (Typ, Loc)),\n+              Result_Definition        => New_Occurrence_Of (Typ, Loc)),\n \n           Declarations => New_List (\n             Make_Object_Declaration (Loc,\n               Defining_Identifier => C,\n-              Object_Definition   => New_Reference_To (Typ, Loc))),\n+              Object_Definition   => New_Occurrence_Of (Typ, Loc))),\n \n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               Statements => New_List (\n                 Loop_Statement,\n                 Make_Simple_Return_Statement (Loc,\n-                  Expression => New_Reference_To (C, Loc)))));\n+                  Expression => New_Occurrence_Of (C, Loc)))));\n \n       return Func_Body;\n    end Make_Boolean_Array_Op;\n@@ -12742,7 +12749,7 @@ package body Exp_Ch4 is\n           Type_Definition     =>\n             Make_Access_To_Object_Definition (Loc,\n               All_Present        => Ekind (Obj_Typ) = E_General_Access_Type,\n-              Subtype_Indication => New_Reference_To (Desig_Typ, Loc))));\n+              Subtype_Indication => New_Occurrence_Of (Desig_Typ, Loc))));\n \n       --  Step 2: Create a temporary which acts as a hook to the transient\n       --  controlled object. Generate:\n@@ -12754,7 +12761,7 @@ package body Exp_Ch4 is\n       Insert_Action (Hook_Context,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Temp_Id,\n-          Object_Definition   => New_Reference_To (Ptr_Id, Loc)));\n+          Object_Definition   => New_Occurrence_Of (Ptr_Id, Loc)));\n \n       --  Mark the temporary as created for the purposes of exporting the\n       --  transient controlled object out of the expression_with_action or if\n@@ -12778,11 +12785,12 @@ package body Exp_Ch4 is\n       --  points to an existing object.\n \n       if Is_Access_Type (Obj_Typ) then\n-         Expr := Unchecked_Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n+         Expr :=\n+           Unchecked_Convert_To (Ptr_Id, New_Occurrence_Of (Obj_Id, Loc));\n       else\n          Expr :=\n            Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Obj_Id, Loc),\n+             Prefix         => New_Occurrence_Of (Obj_Id, Loc),\n              Attribute_Name => Name_Unrestricted_Access);\n       end if;\n \n@@ -12808,7 +12816,7 @@ package body Exp_Ch4 is\n \n       Insert_After_And_Analyze (Temp_Ins,\n         Make_Assignment_Statement (Loc,\n-          Name       => New_Reference_To (Temp_Id, Loc),\n+          Name       => New_Occurrence_Of (Temp_Id, Loc),\n           Expression => Expr));\n \n       --  Step 4: Finalize the transient controlled object after the context\n@@ -12831,19 +12839,19 @@ package body Exp_Ch4 is\n            Make_Final_Call\n              (Obj_Ref =>\n                 Make_Explicit_Dereference (Loc,\n-                  Prefix => New_Reference_To (Temp_Id, Loc)),\n+                  Prefix => New_Occurrence_Of (Temp_Id, Loc)),\n               Typ     => Desig_Typ),\n \n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Temp_Id, Loc),\n+             Name       => New_Occurrence_Of (Temp_Id, Loc),\n              Expression => Make_Null (Loc)));\n \n          if not Finalize_Always then\n             Fin_Stmts := New_List (\n               Make_Implicit_If_Statement (Decl,\n                 Condition =>\n                   Make_Op_Ne (Loc,\n-                    Left_Opnd  => New_Reference_To (Temp_Id, Loc),\n+                    Left_Opnd  => New_Occurrence_Of (Temp_Id, Loc),\n                     Right_Opnd => Make_Null (Loc)),\n                 Then_Statements => Fin_Stmts));\n          end if;\n@@ -13145,7 +13153,7 @@ package body Exp_Ch4 is\n         Make_Selected_Component (Loc,\n           Prefix        => Relocate_Node (Left),\n           Selector_Name =>\n-            New_Reference_To (First_Tag_Component (Left_Type), Loc));\n+            New_Occurrence_Of (First_Tag_Component (Left_Type), Loc));\n \n       if Is_Class_Wide_Type (Right_Type) then\n \n@@ -13180,7 +13188,7 @@ package body Exp_Ch4 is\n                                            (Typ   => Left_Type,\n                                             Iface => Etype (Right_Type))))\n          then\n-            Result := New_Reference_To (Standard_True, Loc);\n+            Result := New_Occurrence_Of (Standard_True, Loc);\n             return;\n          end if;\n \n@@ -13209,7 +13217,7 @@ package body Exp_Ch4 is\n                    Make_Attribute_Reference (Loc,\n                      Prefix => Obj_Tag,\n                      Attribute_Name => Name_Address),\n-                   New_Reference_To (\n+                   New_Occurrence_Of (\n                      Node (First_Elmt (Access_Disp_Table (Full_R_Typ))),\n                      Loc)));\n \n@@ -13219,7 +13227,7 @@ package body Exp_Ch4 is\n             Build_CW_Membership (Loc,\n               Obj_Tag_Node => Obj_Tag,\n               Typ_Tag_Node =>\n-                 New_Reference_To (\n+                 New_Occurrence_Of (\n                    Node (First_Elmt (Access_Disp_Table (Full_R_Typ))),  Loc),\n               Related_Nod => N,\n               New_Node    => New_Node);\n@@ -13243,14 +13251,14 @@ package body Exp_Ch4 is\n          --  No need to check the tag of the object if Right_Typ is abstract\n \n          if Is_Abstract_Type (Right_Type) then\n-            Result := New_Reference_To (Standard_False, Loc);\n+            Result := New_Occurrence_Of (Standard_False, Loc);\n \n          else\n             Result :=\n               Make_Op_Eq (Loc,\n                 Left_Opnd  => Obj_Tag,\n                 Right_Opnd =>\n-                  New_Reference_To\n+                  New_Occurrence_Of\n                     (Node (First_Elmt (Access_Disp_Table (Full_R_Typ))), Loc));\n          end if;\n       end if;"}, {"sha": "10b280c8e28da1a46c214b35bb0f36c4000bb6a2", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -793,7 +793,7 @@ package body Exp_Ch5 is\n \n                   Rewrite (N,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name => New_Reference_To (Proc, Loc),\n+                      Name => New_Occurrence_Of (Proc, Loc),\n                       Parameter_Associations => Actuals));\n                end;\n \n@@ -859,7 +859,7 @@ package body Exp_Ch5 is\n                              Expressions => New_List (\n                                Make_Attribute_Reference (Loc,\n                                  Prefix =>\n-                                   New_Reference_To\n+                                   New_Occurrence_Of\n                                      (L_Index_Typ, Loc),\n                                  Attribute_Name => Name_First))),\n                          Attribute_Name => Name_Address)),\n@@ -874,7 +874,7 @@ package body Exp_Ch5 is\n                              Expressions => New_List (\n                                Make_Attribute_Reference (Loc,\n                                  Prefix =>\n-                                   New_Reference_To\n+                                   New_Occurrence_Of\n                                      (R_Index_Typ, Loc),\n                                  Attribute_Name => Name_First))),\n                          Attribute_Name => Name_Address)));\n@@ -942,7 +942,7 @@ package body Exp_Ch5 is\n \n                   Rewrite (N,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name => New_Reference_To (Proc, Loc),\n+                      Name => New_Occurrence_Of (Proc, Loc),\n                       Parameter_Associations => Actuals));\n                end;\n \n@@ -1172,7 +1172,7 @@ package body Exp_Ch5 is\n                            Defining_Identifier => Lnn (J),\n                            Reverse_Present => Rev,\n                            Discrete_Subtype_Definition =>\n-                             New_Reference_To (L_Index_Type (J), Loc))),\n+                             New_Occurrence_Of (L_Index_Type (J), Loc))),\n \n                    Statements => New_List (Assign, Build_Step (J))))));\n       end loop;\n@@ -1629,10 +1629,10 @@ package body Exp_Ch5 is\n \n                if Number_Entries (Conctyp) = 0 then\n                   RT_Subprg_Name :=\n-                    New_Reference_To (RTE (RE_Set_Ceiling), Loc);\n+                    New_Occurrence_Of (RTE (RE_Set_Ceiling), Loc);\n                else\n                   RT_Subprg_Name :=\n-                    New_Reference_To (RTE (RO_PE_Set_Ceiling), Loc);\n+                    New_Occurrence_Of (RTE (RO_PE_Set_Ceiling), Loc);\n                end if;\n \n                Call :=\n@@ -2177,7 +2177,7 @@ package body Exp_Ch5 is\n \n                      Append_To (L,\n                        Make_Procedure_Call_Statement (Loc,\n-                         Name => New_Reference_To (Op, Loc),\n+                         Name => New_Occurrence_Of (Op, Loc),\n                          Parameter_Associations => New_List (\n                            Node1 => Left_N,\n                            Node2 => Right_N)));\n@@ -2727,8 +2727,8 @@ package body Exp_Ch5 is\n                     New_Occurrence_Of (Has_Element_Op, Loc),\n                   Parameter_Associations =>\n                     New_List\n-                     (New_Reference_To (Container, Loc),\n-                      New_Reference_To (Cursor, Loc)))),\n+                     (New_Occurrence_Of (Container, Loc),\n+                      New_Occurrence_Of (Cursor, Loc)))),\n           Statements => Stats,\n           End_Label  => Empty);\n       Rewrite (N, New_Loop);\n@@ -3204,7 +3204,7 @@ package body Exp_Ch5 is\n                  Make_Object_Renaming_Declaration (Loc,\n                    Defining_Identifier => Id,\n                    Subtype_Mark     =>\n-                     New_Reference_To (Element_Type, Loc),\n+                     New_Occurrence_Of (Element_Type, Loc),\n                    Name             =>\n                      Make_Indexed_Component (Loc,\n                        Prefix      => Relocate_Node (Container_Arg),\n@@ -3296,10 +3296,10 @@ package body Exp_Ch5 is\n               Make_Function_Call (Loc,\n                 Name                   =>\n                   Make_Selected_Component (Loc,\n-                    Prefix        => New_Reference_To (Iterator, Loc),\n+                    Prefix        => New_Occurrence_Of (Iterator, Loc),\n                     Selector_Name => Make_Identifier (Loc, Name_Step)),\n                 Parameter_Associations => New_List (\n-                   New_Reference_To (Cursor, Loc)));\n+                   New_Occurrence_Of (Cursor, Loc)));\n \n             Append_To (Stats,\n               Make_Assignment_Statement (Loc,\n@@ -3324,7 +3324,7 @@ package body Exp_Ch5 is\n                        New_Occurrence_Of (\n                         Next_Entity (First_Entity (Pack)), Loc),\n                      Parameter_Associations =>\n-                       New_List (New_Reference_To (Cursor, Loc)))),\n+                       New_List (New_Occurrence_Of (Cursor, Loc)))),\n \n              Statements => Stats,\n              End_Label  => Empty);\n@@ -3364,7 +3364,7 @@ package body Exp_Ch5 is\n                   New_Occurrence_Of (Etype (Cursor), Loc),\n                 Expression          =>\n                   Make_Selected_Component (Loc,\n-                    Prefix        => New_Reference_To (Iterator, Loc),\n+                    Prefix        => New_Occurrence_Of (Iterator, Loc),\n                     Selector_Name =>\n                       Make_Identifier (Loc, Name_Init)));\n \n@@ -3426,13 +3426,13 @@ package body Exp_Ch5 is\n          Ind_Comp :=\n            Make_Indexed_Component (Loc,\n              Prefix      => Relocate_Node (Array_Node),\n-             Expressions => New_List (New_Reference_To (Iterator, Loc)));\n+             Expressions => New_List (New_Occurrence_Of (Iterator, Loc)));\n \n          Prepend_To (Stats,\n            Make_Object_Renaming_Declaration (Loc,\n              Defining_Identifier => Id,\n              Subtype_Mark        =>\n-               New_Reference_To (Component_Type (Array_Typ), Loc),\n+               New_Occurrence_Of (Component_Type (Array_Typ), Loc),\n              Name                => Ind_Comp));\n \n          --  Mark the loop variable as needing debug info, so that expansion\n@@ -3508,7 +3508,7 @@ package body Exp_Ch5 is\n             --  the new iterator.\n \n             Prepend_To (Expressions (Ind_Comp),\n-              New_Reference_To (Iterator, Loc));\n+              New_Occurrence_Of (Iterator, Loc));\n          end loop;\n       end if;\n \n@@ -3631,16 +3631,16 @@ package body Exp_Ch5 is\n                          Left_Opnd =>\n                             Make_Integer_Literal (Loc,\n                               Enumeration_Rep (First_Literal (Btype))),\n-                         Right_Opnd => New_Reference_To (New_Id, Loc)));\n+                         Right_Opnd => New_Occurrence_Of (New_Id, Loc)));\n                else\n                   --  Use the constructed array Enum_Pos_To_Rep\n \n                   Expr :=\n                     Make_Indexed_Component (Loc,\n                       Prefix      =>\n-                        New_Reference_To (Enum_Pos_To_Rep (Btype), Loc),\n+                        New_Occurrence_Of (Enum_Pos_To_Rep (Btype), Loc),\n                       Expressions =>\n-                        New_List (New_Reference_To (New_Id, Loc)));\n+                        New_List (New_Occurrence_Of (New_Id, Loc)));\n                end if;\n \n                --  Build declaration for loop identifier\n@@ -3650,7 +3650,7 @@ package body Exp_Ch5 is\n                    Make_Object_Declaration (Loc,\n                      Defining_Identifier => Loop_Id,\n                      Constant_Present    => True,\n-                     Object_Definition   => New_Reference_To (Ltype, Loc),\n+                     Object_Definition   => New_Occurrence_Of (Ltype, Loc),\n                      Expression          => Expr));\n \n                Rewrite (N,\n@@ -3668,7 +3668,7 @@ package body Exp_Ch5 is\n                              Make_Subtype_Indication (Loc,\n \n                                Subtype_Mark =>\n-                                 New_Reference_To (Standard_Natural, Loc),\n+                                 New_Occurrence_Of (Standard_Natural, Loc),\n \n                                Constraint =>\n                                  Make_Range_Constraint (Loc,\n@@ -3678,7 +3678,7 @@ package body Exp_Ch5 is\n                                        Low_Bound =>\n                                          Make_Attribute_Reference (Loc,\n                                            Prefix =>\n-                                             New_Reference_To (Btype, Loc),\n+                                             New_Occurrence_Of (Btype, Loc),\n \n                                            Attribute_Name => Name_Pos,\n \n@@ -3689,7 +3689,7 @@ package body Exp_Ch5 is\n                                        High_Bound =>\n                                          Make_Attribute_Reference (Loc,\n                                            Prefix =>\n-                                             New_Reference_To (Btype, Loc),\n+                                             New_Occurrence_Of (Btype, Loc),\n \n                                            Attribute_Name => Name_Pos,\n \n@@ -4087,12 +4087,12 @@ package body Exp_Ch5 is\n          Append_To (Res,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Tag_Id,\n-             Object_Definition   => New_Reference_To (RTE (RE_Tag), Loc),\n+             Object_Definition   => New_Occurrence_Of (RTE (RE_Tag), Loc),\n              Expression          =>\n                Make_Selected_Component (Loc,\n                  Prefix        => Duplicate_Subexpr_No_Checks (L),\n                  Selector_Name =>\n-                   New_Reference_To (First_Tag_Component (T), Loc))));\n+                   New_Occurrence_Of (First_Tag_Component (T), Loc))));\n \n       --  Otherwise Tag_Id is not used\n \n@@ -4116,7 +4116,7 @@ package body Exp_Ch5 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Prev_Id,\n              Object_Definition   =>\n-               New_Reference_To (RTE (RE_Root_Controlled_Ptr), Loc),\n+               New_Occurrence_Of (RTE (RE_Root_Controlled_Ptr), Loc),\n              Expression          =>\n                Make_Selected_Component (Loc,\n                  Prefix        =>\n@@ -4132,7 +4132,7 @@ package body Exp_Ch5 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Next_Id,\n              Object_Definition   =>\n-               New_Reference_To (RTE (RE_Root_Controlled_Ptr), Loc),\n+               New_Occurrence_Of (RTE (RE_Root_Controlled_Ptr), Loc),\n              Expression          =>\n                Make_Selected_Component (Loc,\n                  Prefix        =>\n@@ -4163,8 +4163,8 @@ package body Exp_Ch5 is\n                Make_Selected_Component (Loc,\n                  Prefix        => Duplicate_Subexpr_No_Checks (L),\n                  Selector_Name =>\n-                   New_Reference_To (First_Tag_Component (T), Loc)),\n-             Expression => New_Reference_To (Tag_Id, Loc)));\n+                   New_Occurrence_Of (First_Tag_Component (T), Loc)),\n+             Expression => New_Occurrence_Of (Tag_Id, Loc)));\n       end if;\n \n       --  Restore the Prev and Next fields on .NET/JVM\n@@ -4184,7 +4184,7 @@ package body Exp_Ch5 is\n                      (RTE (RE_Root_Controlled), New_Copy_Tree (L)),\n                  Selector_Name =>\n                    Make_Identifier (Loc, Name_Prev)),\n-             Expression => New_Reference_To (Prev_Id, Loc)));\n+             Expression => New_Occurrence_Of (Prev_Id, Loc)));\n \n          --  Generate:\n          --    Root_Controlled (L).Next := Next_Id;\n@@ -4197,7 +4197,7 @@ package body Exp_Ch5 is\n                    Unchecked_Convert_To\n                      (RTE (RE_Root_Controlled), New_Copy_Tree (L)),\n                  Selector_Name => Make_Identifier (Loc, Name_Next)),\n-             Expression => New_Reference_To (Next_Id, Loc)));\n+             Expression => New_Occurrence_Of (Next_Id, Loc)));\n       end if;\n \n       --  Adjust the target after the assignment when controlled (not in the"}, {"sha": "5ffea6acc3f0bd04f8aeb5baaf0172fbff46b061", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 92, "deletions": 90, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -408,7 +408,7 @@ package body Exp_Ch6 is\n                Actual :=\n                  Make_Attribute_Reference (Loc,\n                    Prefix =>\n-                     New_Reference_To (Finalization_Master (Ptr_Typ), Loc),\n+                     New_Occurrence_Of (Finalization_Master (Ptr_Typ), Loc),\n                    Attribute_Name => Name_Unrestricted_Access);\n \n             --  Tagged types\n@@ -515,7 +515,7 @@ package body Exp_Ch6 is\n       --  the actual is an entity and requires an explicit reference.\n \n       elsif Nkind (Actual) = N_Defining_Identifier then\n-         Actual := New_Reference_To (Actual, Loc);\n+         Actual := New_Occurrence_Of (Actual, Loc);\n       end if;\n \n       --  Locate the implicit master parameter in the called function\n@@ -1154,7 +1154,7 @@ package body Exp_Ch6 is\n          --  For IN parameter, all we do is to replace the actual\n \n          if Ekind (Formal) = E_In_Parameter then\n-            Rewrite (Actual, New_Reference_To (Temp, Loc));\n+            Rewrite (Actual, New_Occurrence_Of (Temp, Loc));\n             Analyze (Actual);\n \n          --  Processing for OUT or IN OUT parameter\n@@ -1178,7 +1178,7 @@ package body Exp_Ch6 is\n                Expr := New_Occurrence_Of (Temp, Loc);\n             end if;\n \n-            Rewrite (Actual, New_Reference_To (Temp, Loc));\n+            Rewrite (Actual, New_Occurrence_Of (Temp, Loc));\n             Analyze (Actual);\n \n             --  If the actual is a conversion of a packed reference, it may\n@@ -1809,7 +1809,7 @@ package body Exp_Ch6 is\n                if In_Open_Scopes (Entity (Actual)) then\n                   Rewrite (Actual,\n                     (Make_Function_Call (Loc,\n-                     Name => New_Reference_To (RTE (RE_Self), Loc))));\n+                     Name => New_Occurrence_Of (RTE (RE_Self), Loc))));\n                   Analyze (Actual);\n \n                --  A task type cannot otherwise appear as an actual\n@@ -2555,7 +2555,7 @@ package body Exp_Ch6 is\n             Rewrite (N,\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n-                  New_Reference_To (Deep_Fin, Loc),\n+                  New_Occurrence_Of (Deep_Fin, Loc),\n                 Parameter_Associations =>\n                   New_Copy_List_Tree (Parameter_Associations (N))));\n \n@@ -3418,16 +3418,16 @@ package body Exp_Ch6 is\n                                Make_Selected_Component (Loc,\n                                  Prefix        => New_Value (Param),\n                                  Selector_Name =>\n-                                   New_Reference_To (First_Tag_Component (Typ),\n-                                                     Loc)),\n+                                   New_Occurrence_Of\n+                                     (First_Tag_Component (Typ), Loc)),\n \n                              Right_Opnd =>\n                                Make_Selected_Component (Loc,\n                                  Prefix        =>\n                                    Unchecked_Convert_To (Typ,\n                                      New_Value (Next_Actual (Param))),\n                                  Selector_Name =>\n-                                   New_Reference_To\n+                                   New_Occurrence_Of\n                                      (First_Tag_Component (Typ), Loc))),\n                       Right_Opnd => Prev_Call);\n \n@@ -4248,7 +4248,7 @@ package body Exp_Ch6 is\n       begin\n          if No (Exit_Lab) then\n             Lab_Ent := Make_Temporary (Loc, 'L');\n-            Lab_Id  := New_Reference_To (Lab_Ent, Loc);\n+            Lab_Id  := New_Occurrence_Of (Lab_Ent, Loc);\n             Exit_Lab := Make_Label (Loc, Lab_Id);\n             Lab_Decl :=\n               Make_Implicit_Label_Declaration (Loc,\n@@ -5172,7 +5172,7 @@ package body Exp_Ch6 is\n \n             Remove (First (Parameter_Associations (Blk_Call_Stmt)));\n             Prepend_To (Parameter_Associations (Blk_Call_Stmt),\n-              New_Reference_To (Targ, Loc));\n+              New_Occurrence_Of (Targ, Loc));\n          end;\n \n          --  Remove the return statement\n@@ -5432,17 +5432,17 @@ package body Exp_Ch6 is\n                  Make_Object_Renaming_Declaration (Loc,\n                    Defining_Identifier => Pool_Id,\n                    Subtype_Mark        =>\n-                     New_Reference_To (RTE (RE_Root_Storage_Pool), Loc),\n+                     New_Occurrence_Of (RTE (RE_Root_Storage_Pool), Loc),\n                    Name                =>\n                      Make_Explicit_Dereference (Loc,\n                        Prefix =>\n                          Make_Function_Call (Loc,\n                            Name                   =>\n-                             New_Reference_To (RTE (RE_Base_Pool), Loc),\n+                             New_Occurrence_Of (RTE (RE_Base_Pool), Loc),\n                            Parameter_Associations => New_List (\n                              Make_Explicit_Dereference (Loc,\n                                Prefix =>\n-                                 New_Reference_To (Fin_Mas_Id, Loc)))))));\n+                                 New_Occurrence_Of (Fin_Mas_Id, Loc)))))));\n \n                --  Create an access type which uses the storage pool of the\n                --  caller's master. This additional type is necessary because\n@@ -5472,7 +5472,7 @@ package body Exp_Ch6 is\n                    Type_Definition     =>\n                      Make_Access_To_Object_Definition (Loc,\n                        Subtype_Indication =>\n-                         New_Reference_To (Desig_Typ, Loc))));\n+                         New_Occurrence_Of (Desig_Typ, Loc))));\n \n                --  Perform minor decoration in order to set the master and the\n                --  storage pool attributes.\n@@ -5490,25 +5490,25 @@ package body Exp_Ch6 is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Local_Id,\n                    Object_Definition   =>\n-                     New_Reference_To (Ptr_Typ, Loc)));\n+                     New_Occurrence_Of (Ptr_Typ, Loc)));\n \n                --  Allocate the object, generate:\n                --    Local_Id := <Alloc_Expr>;\n \n                Append_To (Stmts,\n                  Make_Assignment_Statement (Loc,\n-                   Name       => New_Reference_To (Local_Id, Loc),\n+                   Name       => New_Occurrence_Of (Local_Id, Loc),\n                    Expression => Alloc_Expr));\n \n                --  Generate:\n                --    Temp_Id := Temp_Typ (Local_Id);\n \n                Append_To (Stmts,\n                  Make_Assignment_Statement (Loc,\n-                   Name       => New_Reference_To (Temp_Id, Loc),\n+                   Name       => New_Occurrence_Of (Temp_Id, Loc),\n                    Expression =>\n                      Unchecked_Convert_To (Temp_Typ,\n-                       New_Reference_To (Local_Id, Loc))));\n+                       New_Occurrence_Of (Local_Id, Loc))));\n \n                --  Wrap the allocation in a block. This is further conditioned\n                --  by checking the caller finalization master at runtime. A\n@@ -5528,7 +5528,7 @@ package body Exp_Ch6 is\n                  Make_If_Statement (Loc,\n                    Condition       =>\n                      Make_Op_Ne (Loc,\n-                       Left_Opnd  => New_Reference_To (Fin_Mas_Id, Loc),\n+                       Left_Opnd  => New_Occurrence_Of (Fin_Mas_Id, Loc),\n                        Right_Opnd => Make_Null (Loc)),\n \n                    Then_Statements => New_List (\n@@ -5545,7 +5545,7 @@ package body Exp_Ch6 is\n          else\n             return\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Reference_To (Temp_Id, Loc),\n+                Name       => New_Occurrence_Of (Temp_Id, Loc),\n                 Expression => Alloc_Expr);\n          end if;\n       end Build_Heap_Allocator;\n@@ -5559,7 +5559,7 @@ package body Exp_Ch6 is\n          return\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Move_Activation_Chain), Loc),\n+               New_Occurrence_Of (RTE (RE_Move_Activation_Chain), Loc),\n \n              Parameter_Associations => New_List (\n \n@@ -5571,12 +5571,12 @@ package body Exp_Ch6 is\n \n                --  Destination chain\n \n-               New_Reference_To\n+               New_Occurrence_Of\n                  (Build_In_Place_Formal (Par_Func, BIP_Activation_Chain), Loc),\n \n                --  New master\n \n-               New_Reference_To\n+               New_Occurrence_Of\n                  (Build_In_Place_Formal (Par_Func, BIP_Task_Master), Loc)));\n       end Move_Activation_Chain;\n \n@@ -5633,8 +5633,9 @@ package body Exp_Ch6 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Flag_Id,\n                   Object_Definition =>\n-                    New_Reference_To (Standard_Boolean, Loc),\n-                  Expression        => New_Reference_To (Standard_False, Loc));\n+                    New_Occurrence_Of (Standard_Boolean, Loc),\n+                  Expression        =>\n+                    New_Occurrence_Of (Standard_False, Loc));\n \n             Prepend_To (Declarations (Func_Bod), Flag_Decl);\n             Analyze (Flag_Decl);\n@@ -5710,8 +5711,8 @@ package body Exp_Ch6 is\n \n                Append_To (Stmts,\n                  Make_Assignment_Statement (Loc,\n-                   Name       => New_Reference_To (Flag_Id, Loc),\n-                   Expression => New_Reference_To (Standard_True, Loc)));\n+                   Name       => New_Occurrence_Of (Flag_Id, Loc),\n+                   Expression => New_Occurrence_Of (Standard_True, Loc)));\n             end;\n          end if;\n \n@@ -5829,7 +5830,7 @@ package body Exp_Ch6 is\n                then\n                   Init_Assignment :=\n                     Make_Assignment_Statement (Loc,\n-                      Name       => New_Reference_To (Return_Obj_Id, Loc),\n+                      Name       => New_Occurrence_Of (Return_Obj_Id, Loc),\n                       Expression => Relocate_Node (Return_Obj_Expr));\n \n                   Set_Etype (Name (Init_Assignment), Etype (Return_Obj_Id));\n@@ -5924,7 +5925,7 @@ package body Exp_Ch6 is\n                            Make_Access_To_Object_Definition (Loc,\n                              All_Present        => True,\n                              Subtype_Indication =>\n-                               New_Reference_To (Return_Obj_Typ, Loc)));\n+                               New_Occurrence_Of (Return_Obj_Typ, Loc)));\n \n                      Insert_Before (Ret_Obj_Decl, Ptr_Type_Decl);\n \n@@ -5940,7 +5941,7 @@ package body Exp_Ch6 is\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => Alloc_Obj_Id,\n                          Object_Definition   =>\n-                           New_Reference_To (Ref_Type, Loc));\n+                           New_Occurrence_Of (Ref_Type, Loc));\n \n                      Insert_Before (Ret_Obj_Decl, Alloc_Obj_Decl);\n \n@@ -5964,7 +5965,7 @@ package body Exp_Ch6 is\n                             Expression =>\n                               Make_Qualified_Expression (Loc,\n                                 Subtype_Mark =>\n-                                  New_Reference_To\n+                                  New_Occurrence_Of\n                                     (Etype (Return_Obj_Expr), Loc),\n                                 Expression   =>\n                                   New_Copy_Tree (Return_Obj_Expr)));\n@@ -5979,13 +5980,13 @@ package body Exp_Ch6 is\n                            Heap_Allocator :=\n                              Make_Allocator (Loc,\n                                Expression =>\n-                                 New_Reference_To\n+                                 New_Occurrence_Of\n                                    (Etype (Return_Obj_Expr), Loc));\n                         else\n                            Heap_Allocator :=\n                              Make_Allocator (Loc,\n                                Expression =>\n-                                 New_Reference_To (Return_Obj_Typ, Loc));\n+                                 New_Occurrence_Of (Return_Obj_Typ, Loc));\n                         end if;\n \n                         --  If the object requires default initialization then\n@@ -6013,11 +6014,11 @@ package body Exp_Ch6 is\n                           Make_Object_Renaming_Declaration (Loc,\n                             Defining_Identifier => Pool_Id,\n                             Subtype_Mark        =>\n-                              New_Reference_To\n+                              New_Occurrence_Of\n                                 (RTE (RE_Root_Storage_Pool), Loc),\n                             Name                =>\n                               Make_Explicit_Dereference (Loc,\n-                                New_Reference_To\n+                                New_Occurrence_Of\n                                   (Build_In_Place_Formal\n                                      (Par_Func, BIP_Storage_Pool), Loc)));\n                         Set_Storage_Pool (Pool_Allocator, Pool_Id);\n@@ -6104,7 +6105,7 @@ package body Exp_Ch6 is\n                          Condition =>\n                            Make_Op_Eq (Loc,\n                              Left_Opnd  =>\n-                               New_Reference_To (Obj_Alloc_Formal, Loc),\n+                               New_Occurrence_Of (Obj_Alloc_Formal, Loc),\n                              Right_Opnd =>\n                                Make_Integer_Literal (Loc,\n                                  UI_From_Int (BIP_Allocation_Form'Pos\n@@ -6113,20 +6114,20 @@ package body Exp_Ch6 is\n                          Then_Statements => New_List (\n                            Make_Assignment_Statement (Loc,\n                              Name       =>\n-                               New_Reference_To (Alloc_Obj_Id, Loc),\n+                               New_Occurrence_Of (Alloc_Obj_Id, Loc),\n                              Expression =>\n                                Make_Unchecked_Type_Conversion (Loc,\n                                  Subtype_Mark =>\n-                                   New_Reference_To (Ref_Type, Loc),\n+                                   New_Occurrence_Of (Ref_Type, Loc),\n                                  Expression   =>\n-                                   New_Reference_To (Object_Access, Loc)))),\n+                                   New_Occurrence_Of (Object_Access, Loc)))),\n \n                          Elsif_Parts => New_List (\n                            Make_Elsif_Part (Loc,\n                              Condition =>\n                                Make_Op_Eq (Loc,\n                                  Left_Opnd  =>\n-                                   New_Reference_To (Obj_Alloc_Formal, Loc),\n+                                   New_Occurrence_Of (Obj_Alloc_Formal, Loc),\n                                  Right_Opnd =>\n                                    Make_Integer_Literal (Loc,\n                                      UI_From_Int (BIP_Allocation_Form'Pos\n@@ -6135,14 +6136,14 @@ package body Exp_Ch6 is\n                              Then_Statements => New_List (\n                                Make_Assignment_Statement (Loc,\n                                  Name       =>\n-                                   New_Reference_To (Alloc_Obj_Id, Loc),\n+                                   New_Occurrence_Of (Alloc_Obj_Id, Loc),\n                                  Expression => SS_Allocator))),\n \n                            Make_Elsif_Part (Loc,\n                              Condition =>\n                                Make_Op_Eq (Loc,\n                                  Left_Opnd  =>\n-                                   New_Reference_To (Obj_Alloc_Formal, Loc),\n+                                   New_Occurrence_Of (Obj_Alloc_Formal, Loc),\n                                  Right_Opnd =>\n                                    Make_Integer_Literal (Loc,\n                                      UI_From_Int (BIP_Allocation_Form'Pos\n@@ -6176,7 +6177,7 @@ package body Exp_Ch6 is\n                      if Present (Init_Assignment) then\n                         Rewrite (Name (Init_Assignment),\n                           Make_Explicit_Dereference (Loc,\n-                            Prefix => New_Reference_To (Alloc_Obj_Id, Loc)));\n+                            Prefix => New_Occurrence_Of (Alloc_Obj_Id, Loc)));\n \n                         Set_Etype\n                           (Name (Init_Assignment), Etype (Return_Obj_Id));\n@@ -6200,7 +6201,7 @@ package body Exp_Ch6 is\n \n                Obj_Acc_Deref :=\n                  Make_Explicit_Dereference (Loc,\n-                   Prefix => New_Reference_To (Object_Access, Loc));\n+                   Prefix => New_Occurrence_Of (Object_Access, Loc));\n \n                Rewrite (Ret_Obj_Decl,\n                  Make_Object_Renaming_Declaration (Loc,\n@@ -6420,7 +6421,8 @@ package body Exp_Ch6 is\n                   Insert_Action (Rtn,\n                     Make_Procedure_Call_Statement (Loc,\n                       Name =>\n-                        New_Reference_To (Postcondition_Proc (Spec_Id), Loc)));\n+                        New_Occurrence_Of\n+                          (Postcondition_Proc (Spec_Id), Loc)));\n                end if;\n             end;\n          end if;\n@@ -6882,7 +6884,7 @@ package body Exp_Ch6 is\n          pragma Assert (Present (Postcondition_Proc (Scope_Id)));\n          Insert_Action (N,\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Reference_To (Postcondition_Proc (Scope_Id), Loc)));\n+             Name => New_Occurrence_Of (Postcondition_Proc (Scope_Id), Loc)));\n       end if;\n \n       --  If it is a return from a procedure do no extra steps\n@@ -6924,7 +6926,7 @@ package body Exp_Ch6 is\n \n          Call :=\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Reference_To (RTE (RE_Complete_Rendezvous), Loc));\n+             Name => New_Occurrence_Of (RTE (RE_Complete_Rendezvous), Loc));\n          Insert_Before (N, Call);\n          --  why not insert actions here???\n          Analyze (Call);\n@@ -6953,11 +6955,11 @@ package body Exp_Ch6 is\n          Call :=\n            Make_Procedure_Call_Statement (Loc,\n              Name =>\n-               New_Reference_To (RTE (RE_Complete_Entry_Body), Loc),\n+               New_Occurrence_Of (RTE (RE_Complete_Entry_Body), Loc),\n              Parameter_Associations => New_List (\n                Make_Attribute_Reference (Loc,\n                  Prefix         =>\n-                   New_Reference_To\n+                   New_Occurrence_Of\n                      (Find_Protection_Object (Current_Scope), Loc),\n                  Attribute_Name => Name_Unchecked_Access)));\n \n@@ -7043,7 +7045,7 @@ package body Exp_Ch6 is\n                   Type_Definition   =>\n                      Make_Access_To_Object_Definition (Loc,\n                        Subtype_Indication =>\n-                         New_Reference_To\n+                         New_Occurrence_Of\n                            (Corresponding_Record_Type (Scop), Loc))));\n \n             Insert_Actions (N, Decls);\n@@ -7432,7 +7434,7 @@ package body Exp_Ch6 is\n                  Make_Allocator (Loc,\n                    Expression =>\n                      Make_Qualified_Expression (Loc,\n-                       Subtype_Mark => New_Reference_To (Etype (Exp), Loc),\n+                       Subtype_Mark => New_Occurrence_Of (Etype (Exp), Loc),\n                        Expression   => Relocate_Node (Exp)));\n \n                --  We do not want discriminant checks on the declaration,\n@@ -7451,12 +7453,12 @@ package body Exp_Ch6 is\n \n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n-                   Object_Definition   => New_Reference_To (Acc_Typ, Loc),\n+                   Object_Definition   => New_Occurrence_Of (Acc_Typ, Loc),\n                    Expression          => Alloc_Node)));\n \n                Rewrite (Exp,\n                  Make_Explicit_Dereference (Loc,\n-                 Prefix => New_Reference_To (Temp, Loc)));\n+                 Prefix => New_Occurrence_Of (Temp, Loc)));\n \n                --  Ada 2005 (AI-251): If the type of the returned object is\n                --  an interface then add an implicit type conversion to force\n@@ -7532,12 +7534,12 @@ package body Exp_Ch6 is\n                Result_Id  : constant Entity_Id :=\n                               Make_Temporary (Loc, 'R', ExpR);\n                Result_Exp : constant Node_Id   :=\n-                              New_Reference_To (Result_Id, Loc);\n+                              New_Occurrence_Of (Result_Id, Loc);\n                Result_Obj : constant Node_Id   :=\n                               Make_Object_Declaration (Loc,\n                                 Defining_Identifier => Result_Id,\n                                 Object_Definition   =>\n-                                  New_Reference_To (R_Type, Loc),\n+                                  New_Occurrence_Of (R_Type, Loc),\n                                 Constant_Present    => True,\n                                 Expression          => ExpR);\n \n@@ -7597,7 +7599,7 @@ package body Exp_Ch6 is\n                      Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n                        Make_Function_Call (Loc,\n                          Name                   =>\n-                           New_Reference_To (RTE (RE_Base_Address), Loc),\n+                           New_Occurrence_Of (RTE (RE_Base_Address), Loc),\n                          Parameter_Associations => New_List (\n                            Unchecked_Convert_To (RTE (RE_Address),\n                              Duplicate_Subexpr (Prefix (Exp)))))));\n@@ -8396,7 +8398,7 @@ package body Exp_Ch6 is\n                   Append_Enabled_Item\n                     (Item =>\n                        Make_Predicate_Check\n-                         (Typ, New_Reference_To (Formal, Loc)),\n+                         (Typ, New_Occurrence_Of (Formal, Loc)),\n                      List => Stmts);\n                end if;\n             end if;\n@@ -8520,7 +8522,7 @@ package body Exp_Ch6 is\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier => Result,\n                 Parameter_Type      =>\n-                  New_Reference_To (Etype (Result), Loc)));\n+                  New_Occurrence_Of (Etype (Result), Loc)));\n          end if;\n \n          --  Insert _Postconditions before the first source declaration of the\n@@ -9268,24 +9270,24 @@ package body Exp_Ch6 is\n \n                  Build_Set_Predefined_Prim_Op_Address (Loc,\n                    Tag_Node     =>\n-                     New_Reference_To (Node (Next_Elmt (Iface_DT_Ptr)), Loc),\n+                     New_Occurrence_Of (Node (Next_Elmt (Iface_DT_Ptr)), Loc),\n                    Position     => DT_Position (Prim),\n                    Address_Node =>\n                      Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                        Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Reference_To (Thunk_Id, Loc),\n+                         Prefix         => New_Occurrence_Of (Thunk_Id, Loc),\n                          Attribute_Name => Name_Unrestricted_Access))),\n \n                  Build_Set_Predefined_Prim_Op_Address (Loc,\n                    Tag_Node     =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                       (Node (Next_Elmt (Next_Elmt (Next_Elmt (Iface_DT_Ptr)))),\n                        Loc),\n                    Position     => DT_Position (Prim),\n                    Address_Node =>\n                      Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                        Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Reference_To (Prim, Loc),\n+                         Prefix         => New_Occurrence_Of (Prim, Loc),\n                          Attribute_Name => Name_Unrestricted_Access)))));\n             end if;\n \n@@ -9542,7 +9544,7 @@ package body Exp_Ch6 is\n \n          New_Allocator :=\n            Make_Allocator (Loc,\n-             Expression => New_Reference_To (Result_Subt, Loc));\n+             Expression => New_Occurrence_Of (Result_Subt, Loc));\n          Set_No_Initialization (New_Allocator);\n \n          --  Copy attributes to new allocator. Note that the new allocator\n@@ -9567,7 +9569,7 @@ package body Exp_Ch6 is\n          Insert_Action (Allocator,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Return_Obj_Access,\n-             Object_Definition   => New_Reference_To (Acc_Type, Loc),\n+             Object_Definition   => New_Occurrence_Of (Acc_Type, Loc),\n              Expression          => Relocate_Node (Allocator)));\n \n          --  When the function has a controlling result, an allocation-form\n@@ -9594,10 +9596,10 @@ package body Exp_Ch6 is\n            (Func_Call,\n             Function_Id,\n             Make_Unchecked_Type_Conversion (Loc,\n-              Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n+              Subtype_Mark => New_Occurrence_Of (Result_Subt, Loc),\n               Expression   =>\n                 Make_Explicit_Dereference (Loc,\n-                  Prefix => New_Reference_To (Return_Obj_Access, Loc))));\n+                  Prefix => New_Occurrence_Of (Return_Obj_Access, Loc))));\n \n       --  When the result subtype is unconstrained, the function itself must\n       --  perform the allocation of the return object, so we pass parameters\n@@ -9620,7 +9622,7 @@ package body Exp_Ch6 is\n                Pool_Actual =>\n                  Make_Attribute_Reference (Loc,\n                    Prefix         =>\n-                     New_Reference_To\n+                     New_Occurrence_Of\n                        (Associated_Storage_Pool (Acc_Type), Loc),\n                    Attribute_Name => Name_Unrestricted_Access));\n \n@@ -9768,13 +9770,13 @@ package body Exp_Ch6 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Temp_Id,\n                 Object_Definition =>\n-                  New_Reference_To (Result_Subt, Loc),\n+                  New_Occurrence_Of (Result_Subt, Loc),\n                 Expression =>\n                   New_Copy_Tree (Function_Call));\n \n             Insert_Action (Function_Call, Temp_Decl);\n \n-            Rewrite (Function_Call, New_Reference_To (Temp_Id, Loc));\n+            Rewrite (Function_Call, New_Occurrence_Of (Temp_Id, Loc));\n             Analyze (Function_Call);\n          end;\n \n@@ -9792,7 +9794,7 @@ package body Exp_Ch6 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Return_Obj_Id,\n              Aliased_Present     => True,\n-             Object_Definition   => New_Reference_To (Result_Subt, Loc));\n+             Object_Definition   => New_Occurrence_Of (Result_Subt, Loc));\n \n          Set_No_Initialization (Return_Obj_Decl);\n \n@@ -9817,7 +9819,7 @@ package body Exp_Ch6 is\n          --  to the caller's return object.\n \n          Add_Access_Actual_To_Build_In_Place_Call\n-           (Func_Call, Function_Id, New_Reference_To (Return_Obj_Id, Loc));\n+           (Func_Call, Function_Id, New_Occurrence_Of (Return_Obj_Id, Loc));\n \n       --  When the result subtype is unconstrained, the function must allocate\n       --  the return object in the secondary stack, so appropriate implicit\n@@ -9923,7 +9925,7 @@ package body Exp_Ch6 is\n         (Func_Call,\n          Func_Id,\n          Make_Unchecked_Type_Conversion (Loc,\n-           Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n+           Subtype_Mark => New_Occurrence_Of (Result_Subt, Loc),\n            Expression   => Relocate_Node (Lhs)));\n \n       --  Create an access type designating the function's result subtype\n@@ -9937,7 +9939,7 @@ package body Exp_Ch6 is\n             Make_Access_To_Object_Definition (Loc,\n               All_Present        => True,\n               Subtype_Indication =>\n-                New_Reference_To (Result_Subt, Loc)));\n+                New_Occurrence_Of (Result_Subt, Loc)));\n       Insert_After_And_Analyze (Assign, Ptr_Typ_Decl);\n \n       --  Finally, create an access object initialized to a reference to the\n@@ -9953,7 +9955,7 @@ package body Exp_Ch6 is\n       Obj_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Obj_Id,\n-          Object_Definition   => New_Reference_To (Ptr_Typ, Loc),\n+          Object_Definition   => New_Occurrence_Of (Ptr_Typ, Loc),\n           Expression          => New_Expr);\n       Insert_After_And_Analyze (Ptr_Typ_Decl, Obj_Decl);\n \n@@ -10065,7 +10067,7 @@ package body Exp_Ch6 is\n               RTE_Available (RE_Root_Storage_Pool_Ptr)\n             then\n                Pool_Actual :=\n-                 New_Reference_To (Build_In_Place_Formal\n+                 New_Occurrence_Of (Build_In_Place_Formal\n                    (Enclosing_Func, BIP_Storage_Pool), Loc);\n \n             --  The build-in-place pool formal is not built on .NET/JVM\n@@ -10078,7 +10080,7 @@ package body Exp_Ch6 is\n               (Func_Call,\n                Function_Id,\n                Alloc_Form_Exp =>\n-                 New_Reference_To\n+                 New_Occurrence_Of\n                    (Build_In_Place_Formal (Enclosing_Func, BIP_Alloc_Form),\n                     Loc),\n                Pool_Actual => Pool_Actual);\n@@ -10093,7 +10095,7 @@ package body Exp_Ch6 is\n \n          if Needs_BIP_Finalization_Master (Enclosing_Func) then\n             Fmaster_Actual :=\n-              New_Reference_To\n+              New_Occurrence_Of\n                 (Build_In_Place_Formal\n                    (Enclosing_Func, BIP_Finalization_Master), Loc);\n          end if;\n@@ -10104,12 +10106,12 @@ package body Exp_Ch6 is\n          Caller_Object :=\n             Make_Unchecked_Type_Conversion (Loc,\n               Subtype_Mark =>\n-                New_Reference_To\n+                New_Occurrence_Of\n                   (Etype\n                      (Build_In_Place_Formal (Function_Id, BIP_Object_Access)),\n                    Loc),\n               Expression   =>\n-                New_Reference_To\n+                New_Occurrence_Of\n                   (Build_In_Place_Formal (Enclosing_Func, BIP_Object_Access),\n                    Loc));\n \n@@ -10121,8 +10123,8 @@ package body Exp_Ch6 is\n       elsif Is_Constrained (Underlying_Type (Result_Subt)) then\n          Caller_Object :=\n             Make_Unchecked_Type_Conversion (Loc,\n-              Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n-              Expression   => New_Reference_To (Obj_Def_Id, Loc));\n+              Subtype_Mark => New_Occurrence_Of (Result_Subt, Loc),\n+              Expression   => New_Occurrence_Of (Obj_Def_Id, Loc));\n \n          --  When the function has a controlling result, an allocation-form\n          --  parameter must be passed indicating that the caller is allocating\n@@ -10164,7 +10166,7 @@ package body Exp_Ch6 is\n          Add_Task_Actuals_To_Build_In_Place_Call\n            (Func_Call, Function_Id,\n             Master_Actual =>\n-              New_Reference_To (Build_In_Place_Formal\n+              New_Occurrence_Of (Build_In_Place_Formal\n                 (Enclosing_Func, BIP_Task_Master), Loc));\n \n       else\n@@ -10189,7 +10191,7 @@ package body Exp_Ch6 is\n             Make_Access_To_Object_Definition (Loc,\n               All_Present        => True,\n               Subtype_Indication =>\n-                New_Reference_To (Etype (Function_Call), Loc)));\n+                New_Occurrence_Of (Etype (Function_Call), Loc)));\n \n       --  The access type and its accompanying object must be inserted after\n       --  the object declaration in the constrained case, so that the function\n@@ -10220,7 +10222,7 @@ package body Exp_Ch6 is\n       Res_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Def_Id,\n-          Object_Definition   => New_Reference_To (Ref_Type, Loc),\n+          Object_Definition   => New_Occurrence_Of (Ref_Type, Loc),\n           Expression          => New_Expr);\n       Insert_After_And_Analyze (Ptr_Typ_Decl, Res_Decl);\n \n@@ -10262,7 +10264,7 @@ package body Exp_Ch6 is\n       else\n          Call_Deref :=\n            Make_Explicit_Dereference (Loc,\n-             Prefix => New_Reference_To (Def_Id, Loc));\n+             Prefix => New_Occurrence_Of (Def_Id, Loc));\n \n          Loc := Sloc (Object_Decl);\n          Rewrite (Object_Decl,\n@@ -10360,7 +10362,7 @@ package body Exp_Ch6 is\n \n       New_Allocator :=\n         Make_Allocator (Loc,\n-          Expression => New_Reference_To (Result_Subt, Loc));\n+          Expression => New_Occurrence_Of (Result_Subt, Loc));\n       Set_No_Initialization (New_Allocator);\n \n       --  Copy attributes to new allocator. Note that the new allocator\n@@ -10390,23 +10392,23 @@ package body Exp_Ch6 is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Return_Obj_Access,\n           Constant_Present    => True,\n-          Object_Definition   => New_Reference_To (Acc_Type, Loc),\n+          Object_Definition   => New_Occurrence_Of (Acc_Type, Loc),\n           Expression          => Relocate_Node (Allocator));\n       Insert_Action (Allocator, Tmp_Obj);\n \n       Insert_List_After_And_Analyze (Tmp_Obj,\n         Build_Initialization_Call (Loc,\n           Id_Ref =>\n             Make_Explicit_Dereference (Loc,\n-              Prefix => New_Reference_To (Return_Obj_Access, Loc)),\n+              Prefix => New_Occurrence_Of (Return_Obj_Access, Loc)),\n           Typ => Etype (Function_Id),\n           Constructor_Ref => Function_Call));\n \n       --  Finally, replace the allocator node with a reference to the result of\n       --  the function call itself (which will effectively be an access to the\n       --  object created by the allocator).\n \n-      Rewrite (Allocator, New_Reference_To (Return_Obj_Access, Loc));\n+      Rewrite (Allocator, New_Occurrence_Of (Return_Obj_Access, Loc));\n \n       --  Ada 2005 (AI-251): If the type of the allocator is an interface then\n       --  generate an implicit conversion to force displacement of the \"this\""}, {"sha": "41fe352751f279a41768966a66c74ef757d75ff9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 110, "deletions": 108, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -557,10 +557,10 @@ package body Exp_Ch7 is\n          Append_To (Stmts,\n            Make_Procedure_Call_Statement (Loc,\n              Name =>\n-               New_Reference_To\n+               New_Occurrence_Of\n                  (RTE (RE_Expunge_Unactivated_Tasks), Loc),\n              Parameter_Associations => New_List (\n-               New_Reference_To (Activation_Chain_Entity (N), Loc))));\n+               New_Occurrence_Of (Activation_Chain_Entity (N), Loc))));\n \n       --  Attempt to cancel an asynchronous entry call whenever the block which\n       --  contains the abortable part is exited.\n@@ -586,17 +586,17 @@ package body Exp_Ch7 is\n                    Condition =>\n                      Make_Function_Call (Loc,\n                        Name                   =>\n-                         New_Reference_To (RTE (RE_Enqueued), Loc),\n+                         New_Occurrence_Of (RTE (RE_Enqueued), Loc),\n                        Parameter_Associations => New_List (\n-                         New_Reference_To (Cancel_Param, Loc))),\n+                         New_Occurrence_Of (Cancel_Param, Loc))),\n \n                    Then_Statements => New_List (\n                      Make_Procedure_Call_Statement (Loc,\n                        Name =>\n-                         New_Reference_To\n+                         New_Occurrence_Of\n                            (RTE (RE_Cancel_Protected_Entry_Call), Loc),\n                          Parameter_Associations => New_List (\n-                           New_Reference_To (Cancel_Param, Loc))))));\n+                           New_Occurrence_Of (Cancel_Param, Loc))))));\n \n             --  Asynchronous delay, generate:\n             --    Cancel_Async_Delay (Cancel_Param);\n@@ -605,11 +605,11 @@ package body Exp_Ch7 is\n                Append_To (Stmts,\n                  Make_Procedure_Call_Statement (Loc,\n                    Name                   =>\n-                     New_Reference_To (RTE (RE_Cancel_Async_Delay), Loc),\n+                     New_Occurrence_Of (RTE (RE_Cancel_Async_Delay), Loc),\n                    Parameter_Associations => New_List (\n                      Make_Attribute_Reference (Loc,\n                        Prefix         =>\n-                         New_Reference_To (Cancel_Param, Loc),\n+                         New_Occurrence_Of (Cancel_Param, Loc),\n                        Attribute_Name => Name_Unchecked_Access))));\n \n             --  Task entry call, generate:\n@@ -619,9 +619,9 @@ package body Exp_Ch7 is\n                Append_To (Stmts,\n                  Make_Procedure_Call_Statement (Loc,\n                    Name                   =>\n-                     New_Reference_To (RTE (RE_Cancel_Task_Entry_Call), Loc),\n+                     New_Occurrence_Of (RTE (RE_Cancel_Task_Entry_Call), Loc),\n                    Parameter_Associations => New_List (\n-                     New_Reference_To (Cancel_Param, Loc))));\n+                     New_Occurrence_Of (Cancel_Param, Loc))));\n             end if;\n          end;\n       end if;\n@@ -672,7 +672,7 @@ package body Exp_Ch7 is\n                 Name =>\n                   Make_Explicit_Dereference (Data.Loc,\n                     Prefix =>\n-                      New_Reference_To\n+                      New_Occurrence_Of\n                         (RTE (RE_Get_Current_Excep), Data.Loc)));\n \n          else\n@@ -695,7 +695,7 @@ package body Exp_Ch7 is\n \n             Actuals :=\n               New_List (\n-                New_Reference_To (Data.E_Id, Data.Loc),\n+                New_Occurrence_Of (Data.E_Id, Data.Loc),\n                 Make_Explicit_Dereference (Data.Loc, Except));\n          end if;\n \n@@ -715,16 +715,16 @@ package body Exp_Ch7 is\n              Make_If_Statement (Data.Loc,\n                Condition       =>\n                  Make_Op_Not (Data.Loc,\n-                   Right_Opnd => New_Reference_To (Data.Raised_Id, Data.Loc)),\n+                   Right_Opnd => New_Occurrence_Of (Data.Raised_Id, Data.Loc)),\n \n                Then_Statements => New_List (\n                  Make_Assignment_Statement (Data.Loc,\n-                   Name       => New_Reference_To (Data.Raised_Id, Data.Loc),\n-                   Expression => New_Reference_To (Standard_True, Data.Loc)),\n+                   Name       => New_Occurrence_Of (Data.Raised_Id, Data.Loc),\n+                   Expression => New_Occurrence_Of (Standard_True, Data.Loc)),\n \n                  Make_Procedure_Call_Statement (Data.Loc,\n                    Name                   =>\n-                     New_Reference_To (Proc_To_Call, Data.Loc),\n+                     New_Occurrence_Of (Proc_To_Call, Data.Loc),\n                    Parameter_Associations => Actuals))));\n \n       else\n@@ -734,8 +734,8 @@ package body Exp_Ch7 is\n \n          Stmts := New_List (\n            Make_Assignment_Statement (Data.Loc,\n-             Name       => New_Reference_To (Data.Raised_Id, Data.Loc),\n-             Expression => New_Reference_To (Standard_True, Data.Loc)));\n+             Name       => New_Occurrence_Of (Data.Raised_Id, Data.Loc),\n+             Expression => New_Occurrence_Of (Standard_True, Data.Loc)));\n       end if;\n \n       --  Generate:\n@@ -907,7 +907,7 @@ package body Exp_Ch7 is\n              Defining_Identifier => Fin_Mas_Id,\n              Aliased_Present     => True,\n              Object_Definition   =>\n-               New_Reference_To (RTE (RE_Finalization_Master), Loc)));\n+               New_Occurrence_Of (RTE (RE_Finalization_Master), Loc)));\n \n          --  Storage pool selection and attribute decoration of the generated\n          --  master. Since .NET/JVM compilers do not support pools, this step\n@@ -934,11 +934,11 @@ package body Exp_Ch7 is\n             Append_To (Actions,\n               Make_Procedure_Call_Statement (Loc,\n                 Name                   =>\n-                  New_Reference_To (RTE (RE_Set_Base_Pool), Loc),\n+                  New_Occurrence_Of (RTE (RE_Set_Base_Pool), Loc),\n                 Parameter_Associations => New_List (\n-                  New_Reference_To (Fin_Mas_Id, Loc),\n+                  New_Occurrence_Of (Fin_Mas_Id, Loc),\n                   Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Reference_To (Pool_Id, Loc),\n+                    Prefix         => New_Occurrence_Of (Pool_Id, Loc),\n                     Attribute_Name => Name_Unrestricted_Access))));\n          end if;\n \n@@ -1201,7 +1201,7 @@ package body Exp_Ch7 is\n                 Defining_Identifier => Counter_Typ,\n                 Subtype_Indication  =>\n                   Make_Subtype_Indication (Loc,\n-                    Subtype_Mark => New_Reference_To (Standard_Natural, Loc),\n+                    Subtype_Mark => New_Occurrence_Of (Standard_Natural, Loc),\n                     Constraint   =>\n                       Make_Range_Constraint (Loc,\n                         Range_Expression =>\n@@ -1218,7 +1218,7 @@ package body Exp_Ch7 is\n             Counter_Decl :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Counter_Id,\n-                Object_Definition   => New_Reference_To (Counter_Typ, Loc),\n+                Object_Definition   => New_Occurrence_Of (Counter_Typ, Loc),\n                 Expression          => Make_Integer_Literal (Loc, 0));\n \n             --  Set the type of the counter explicitly to prevent errors when\n@@ -1421,7 +1421,7 @@ package body Exp_Ch7 is\n                 Discrete_Choices => New_List (Make_Others_Choice (Loc)),\n                 Statements       => New_List (\n                   Make_Goto_Statement (Loc,\n-                    Name => New_Reference_To (Entity (Label_Id), Loc)))));\n+                    Name => New_Occurrence_Of (Entity (Label_Id), Loc)))));\n \n             --  Generate:\n             --    <<L0>>\n@@ -1472,9 +1472,9 @@ package body Exp_Ch7 is\n             Append_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n                 Name                   =>\n-                  New_Reference_To (RTE (RE_SS_Release), Loc),\n+                  New_Occurrence_Of (RTE (RE_SS_Release), Loc),\n                 Parameter_Associations => New_List (\n-                  New_Reference_To (Mark_Id, Loc))));\n+                  New_Occurrence_Of (Mark_Id, Loc))));\n          end if;\n \n          --  Protect the statements with abort defer/undefer. This is only when\n@@ -1487,11 +1487,11 @@ package body Exp_Ch7 is\n          then\n             Prepend_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (RTE (RE_Abort_Defer), Loc)));\n+                Name => New_Occurrence_Of (RTE (RE_Abort_Defer), Loc)));\n \n             Append_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc)));\n+                Name => New_Occurrence_Of (RTE (RE_Abort_Undefer), Loc)));\n          end if;\n \n          --  The local exception does not need to be reraised for library-level\n@@ -2149,16 +2149,17 @@ package body Exp_Ch7 is\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Pool_Id,\n                 Subtype_Mark        =>\n-                  New_Reference_To (RTE (RE_Root_Storage_Pool), Loc),\n+                  New_Occurrence_Of (RTE (RE_Root_Storage_Pool), Loc),\n                 Name                =>\n                   Make_Explicit_Dereference (Loc,\n                     Prefix =>\n                       Make_Function_Call (Loc,\n                         Name                   =>\n-                          New_Reference_To (RTE (RE_Base_Pool), Loc),\n+                          New_Occurrence_Of (RTE (RE_Base_Pool), Loc),\n                         Parameter_Associations => New_List (\n                           Make_Explicit_Dereference (Loc,\n-                            Prefix => New_Reference_To (Fin_Mas_Id, Loc)))))));\n+                            Prefix =>\n+                              New_Occurrence_Of (Fin_Mas_Id, Loc)))))));\n \n             --  Create an access type which uses the storage pool of the\n             --  caller's finalization master.\n@@ -2173,7 +2174,7 @@ package body Exp_Ch7 is\n                 Defining_Identifier => Ptr_Typ,\n                 Type_Definition     =>\n                   Make_Access_To_Object_Definition (Loc,\n-                    Subtype_Indication => New_Reference_To (Obj_Typ, Loc))));\n+                    Subtype_Indication => New_Occurrence_Of (Obj_Typ, Loc))));\n \n             --  Perform minor decoration in order to set the master and the\n             --  storage pool attributes.\n@@ -2189,7 +2190,7 @@ package body Exp_Ch7 is\n               Make_Free_Statement (Loc,\n                 Expression =>\n                   Unchecked_Convert_To (Ptr_Typ,\n-                    New_Reference_To (Temp_Id, Loc)));\n+                    New_Occurrence_Of (Temp_Id, Loc)));\n \n             Set_Storage_Pool (Free_Stmt, Pool_Id);\n \n@@ -2215,7 +2216,7 @@ package body Exp_Ch7 is\n \n             Cond :=\n               Make_Op_Ne (Loc,\n-                Left_Opnd  => New_Reference_To (Fin_Mas_Id, Loc),\n+                Left_Opnd  => New_Occurrence_Of (Fin_Mas_Id, Loc),\n                 Right_Opnd => Make_Null (Loc));\n \n             --  For constrained or tagged results escalate the condition to\n@@ -2236,7 +2237,7 @@ package body Exp_Ch7 is\n                     Make_And_Then (Loc,\n                       Left_Opnd  =>\n                         Make_Op_Gt (Loc,\n-                          Left_Opnd  => New_Reference_To (Alloc, Loc),\n+                          Left_Opnd  => New_Occurrence_Of (Alloc, Loc),\n                           Right_Opnd =>\n                             Make_Integer_Literal (Loc,\n                               UI_From_Int\n@@ -2431,7 +2432,7 @@ package body Exp_Ch7 is\n       --  Start of processing for Process_Object_Declaration\n \n       begin\n-         Obj_Ref := New_Reference_To (Obj_Id, Loc);\n+         Obj_Ref := New_Occurrence_Of (Obj_Id, Loc);\n          Obj_Typ := Base_Type (Etype (Obj_Id));\n \n          --  Handle access types\n@@ -2450,7 +2451,7 @@ package body Exp_Ch7 is\n \n          Inc_Decl :=\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Counter_Id, Loc),\n+             Name       => New_Occurrence_Of (Counter_Id, Loc),\n              Expression => Make_Integer_Literal (Loc, Counter_Val));\n \n          --  Insert the counter after all initialization has been done. The\n@@ -2517,7 +2518,7 @@ package body Exp_Ch7 is\n                Make_Integer_Literal (Loc, Counter_Val)),\n              Statements       => New_List (\n                Make_Goto_Statement (Loc,\n-                 Name => New_Reference_To (Entity (Label_Id), Loc)))));\n+                 Name => New_Occurrence_Of (Entity (Label_Id), Loc)))));\n \n          --  Insert the jump destination, generate:\n          --\n@@ -2693,7 +2694,7 @@ package body Exp_Ch7 is\n                     Make_If_Statement (Loc,\n                       Condition       =>\n                         Make_Op_Ne (Loc,\n-                          Left_Opnd  => New_Reference_To (Obj_Id, Loc),\n+                          Left_Opnd  => New_Occurrence_Of (Obj_Id, Loc),\n                           Right_Opnd => Make_Null (Loc)),\n                       Then_Statements => Fin_Stmts));\n \n@@ -2711,7 +2712,7 @@ package body Exp_Ch7 is\n                       Condition     =>\n                         Make_Op_Not (Loc,\n                           Right_Opnd =>\n-                            New_Reference_To\n+                            New_Occurrence_Of\n                               (Status_Flag_Or_Transient_Decl (Obj_Id), Loc)),\n \n                     Then_Statements => Fin_Stmts));\n@@ -2743,9 +2744,9 @@ package body Exp_Ch7 is\n          Append_To (Tagged_Type_Stmts,\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Unregister_Tag), Loc),\n+               New_Occurrence_Of (RTE (RE_Unregister_Tag), Loc),\n              Parameter_Associations => New_List (\n-               New_Reference_To (DT_Ptr, Loc))));\n+               New_Occurrence_Of (DT_Ptr, Loc))));\n       end Process_Tagged_Type_Declaration;\n \n    --  Start of processing for Build_Finalizer\n@@ -2971,7 +2972,7 @@ package body Exp_Ch7 is\n          end;\n       end if;\n \n-      Set_At_End_Proc (HSS, New_Reference_To (Fin_Id, Loc));\n+      Set_At_End_Proc (HSS, New_Occurrence_Of (Fin_Id, Loc));\n \n       Analyze (At_End_Proc (HSS));\n       Expand_At_End_Handler (HSS, Empty);\n@@ -3043,7 +3044,7 @@ package body Exp_Ch7 is\n       then\n          Data.Abort_Id  := Make_Temporary (Loc, 'A');\n \n-         A_Expr := New_Reference_To (RTE (RE_Triggered_By_Abort), Loc);\n+         A_Expr := New_Occurrence_Of (RTE (RE_Triggered_By_Abort), Loc);\n \n          --  Generate:\n \n@@ -3053,7 +3054,7 @@ package body Exp_Ch7 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Data.Abort_Id,\n              Constant_Present    => True,\n-             Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n+             Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n              Expression          => A_Expr));\n \n       else\n@@ -3073,7 +3074,7 @@ package body Exp_Ch7 is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Data.E_Id,\n              Object_Definition   =>\n-               New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n+               New_Occurrence_Of (RTE (RE_Exception_Occurrence), Loc));\n          Set_No_Initialization (E_Decl);\n \n          Append_To (Decls, E_Decl);\n@@ -3089,8 +3090,8 @@ package body Exp_Ch7 is\n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Data.Raised_Id,\n-          Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n-          Expression          => New_Reference_To (Standard_False, Loc)));\n+          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Expression          => New_Occurrence_Of (Standard_False, Loc)));\n    end Build_Object_Declarations;\n \n    ---------------------------\n@@ -3113,10 +3114,10 @@ package body Exp_Ch7 is\n          Stmt :=\n            Make_Procedure_Call_Statement (Data.Loc,\n               Name                   =>\n-                New_Reference_To\n+                New_Occurrence_Of\n                   (RTE (RE_Raise_From_Controlled_Operation), Data.Loc),\n               Parameter_Associations =>\n-                New_List (New_Reference_To (Data.E_Id, Data.Loc)));\n+                New_List (New_Occurrence_Of (Data.E_Id, Data.Loc)));\n \n       --  Restricted run-time: exception messages are not supported and hence\n       --  Raise_From_Controlled_Operation is not supported. Raise Program_Error\n@@ -3134,14 +3135,14 @@ package body Exp_Ch7 is\n       --      <or>\n       --    Raised_Id\n \n-      Expr := New_Reference_To (Data.Raised_Id, Data.Loc);\n+      Expr := New_Occurrence_Of (Data.Raised_Id, Data.Loc);\n \n       if Present (Data.Abort_Id) then\n          Expr := Make_And_Then (Data.Loc,\n            Left_Opnd  => Expr,\n            Right_Opnd =>\n              Make_Op_Not (Data.Loc,\n-               Right_Opnd => New_Reference_To (Data.Abort_Id, Data.Loc)));\n+               Right_Opnd => New_Occurrence_Of (Data.Abort_Id, Data.Loc)));\n       end if;\n \n       --  Generate:\n@@ -3270,7 +3271,7 @@ package body Exp_Ch7 is\n \n          else\n             Index := Make_Temporary (Loc, 'J');\n-            Append (New_Reference_To (Index, Loc), Index_List);\n+            Append (New_Occurrence_Of (Index, Loc), Index_List);\n \n             return New_List (\n               Make_Implicit_Loop_Statement (N,\n@@ -3389,7 +3390,7 @@ package body Exp_Ch7 is\n          return\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Finalize_Protection), Loc),\n+               New_Occurrence_Of (RTE (RE_Finalize_Protection), Loc),\n              Parameter_Associations => New_List (Concurrent_Ref (Ref)));\n       end if;\n    end Cleanup_Protected_Object;\n@@ -3416,7 +3417,7 @@ package body Exp_Ch7 is\n          return\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Free_Task), Loc),\n+               New_Occurrence_Of (RTE (RE_Free_Task), Loc),\n              Parameter_Associations => New_List (Concurrent_Ref (Ref)));\n       end if;\n    end Cleanup_Task;\n@@ -3778,10 +3779,10 @@ package body Exp_Ch7 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Mark,\n                 Object_Definition   =>\n-                  New_Reference_To (RTE (RE_Mark_Id), Loc),\n+                  New_Occurrence_Of (RTE (RE_Mark_Id), Loc),\n                 Expression          =>\n                   Make_Function_Call (Loc,\n-                    Name => New_Reference_To (RTE (RE_SS_Mark), Loc))));\n+                    Name => New_Occurrence_Of (RTE (RE_SS_Mark), Loc))));\n \n             Set_Uses_Sec_Stack (Scop, False);\n          end if;\n@@ -4601,7 +4602,7 @@ package body Exp_Ch7 is\n                           All_Present        =>\n                             Ekind (Obj_Typ) = E_General_Access_Type,\n                           Subtype_Indication =>\n-                            New_Reference_To (Desig_Typ, Loc))));\n+                            New_Occurrence_Of (Desig_Typ, Loc))));\n \n                   --  Step 2: Create a temporary which acts as a hook to the\n                   --  transient object. Generate:\n@@ -4614,7 +4615,7 @@ package body Exp_Ch7 is\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Temp_Id,\n                       Object_Definition   =>\n-                        New_Reference_To (Ptr_Id, Loc)));\n+                        New_Occurrence_Of (Ptr_Id, Loc)));\n \n                   --  Mark the temporary as a transient hook. This signals the\n                   --  machinery in Build_Finalizer to recognize this special\n@@ -4626,11 +4627,11 @@ package body Exp_Ch7 is\n \n                   if Is_Access_Type (Obj_Typ) then\n                      Expr :=\n-                       Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n+                       Convert_To (Ptr_Id, New_Occurrence_Of (Obj_Id, Loc));\n                   else\n                      Expr :=\n                        Make_Attribute_Reference (Loc,\n-                         Prefix         => New_Reference_To (Obj_Id, Loc),\n+                         Prefix         => New_Occurrence_Of (Obj_Id, Loc),\n                          Attribute_Name => Name_Unrestricted_Access);\n                   end if;\n \n@@ -4657,7 +4658,7 @@ package body Exp_Ch7 is\n \n                   Insert_After_And_Analyze (Temp_Ins,\n                     Make_Assignment_Statement (Loc,\n-                      Name       => New_Reference_To (Temp_Id, Loc),\n+                      Name       => New_Occurrence_Of (Temp_Id, Loc),\n                       Expression => Expr));\n                end if;\n \n@@ -4673,14 +4674,14 @@ package body Exp_Ch7 is\n                if Must_Hook then\n                   Append_To (Stmts,\n                     Make_Assignment_Statement (Loc,\n-                      Name       => New_Reference_To (Temp_Id, Loc),\n+                      Name       => New_Occurrence_Of (Temp_Id, Loc),\n                       Expression => Make_Null (Loc)));\n                end if;\n \n                --  Generate:\n                --    [Deep_]Finalize (Obj_Ref);\n \n-               Obj_Ref := New_Reference_To (Obj_Id, Loc);\n+               Obj_Ref := New_Occurrence_Of (Obj_Id, Loc);\n \n                if Is_Access_Type (Obj_Typ) then\n                   Obj_Ref := Make_Explicit_Dereference (Loc, Obj_Ref);\n@@ -4967,9 +4968,9 @@ package body Exp_Ch7 is\n       return\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n-            New_Reference_To (RTE (RE_Attach), Loc),\n+            New_Occurrence_Of (RTE (RE_Attach), Loc),\n           Parameter_Associations => New_List (\n-            New_Reference_To (Finalization_Master (Ptr_Typ), Loc),\n+            New_Occurrence_Of (Finalization_Master (Ptr_Typ), Loc),\n             Unchecked_Convert_To (RTE (RE_Root_Controlled_Ptr), Obj_Ref)));\n    end Make_Attach_Call;\n \n@@ -4984,7 +4985,7 @@ package body Exp_Ch7 is\n       return\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n-            New_Reference_To (RTE (RE_Detach), Loc),\n+            New_Occurrence_Of (RTE (RE_Detach), Loc),\n           Parameter_Associations => New_List (\n             Unchecked_Convert_To (RTE (RE_Root_Controlled_Ptr), Obj_Ref)));\n    end Make_Detach_Call;\n@@ -5007,12 +5008,12 @@ package body Exp_Ch7 is\n       --  the corresponding flag a False value.\n \n       if For_Parent then\n-         Append_To (Params, New_Reference_To (Standard_False, Loc));\n+         Append_To (Params, New_Occurrence_Of (Standard_False, Loc));\n       end if;\n \n       return\n         Make_Procedure_Call_Statement (Loc,\n-          Name                   => New_Reference_To (Proc_Id, Loc),\n+          Name                   => New_Occurrence_Of (Proc_Id, Loc),\n           Parameter_Associations => Params);\n    end Make_Call;\n \n@@ -5384,11 +5385,11 @@ package body Exp_Ch7 is\n \n             return\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Reference_To (Counter_Id, Loc),\n+                Name       => New_Occurrence_Of (Counter_Id, Loc),\n                 Expression =>\n                   Make_Op_Subtract (Loc,\n                     Left_Opnd  => Expr,\n-                    Right_Opnd => New_Reference_To (Counter_Id, Loc)));\n+                    Right_Opnd => New_Occurrence_Of (Counter_Id, Loc)));\n          end Build_Counter_Assignment;\n \n          -----------------------------\n@@ -5495,15 +5496,15 @@ package body Exp_Ch7 is\n            Make_If_Statement (Loc,\n              Condition =>\n                Make_Op_Gt (Loc,\n-                 Left_Opnd  => New_Reference_To (Counter_Id, Loc),\n+                 Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n                  Right_Opnd => Make_Integer_Literal (Loc, 0)),\n \n              Then_Statements => New_List (\n                Make_Assignment_Statement (Loc,\n-                 Name       => New_Reference_To (Counter_Id, Loc),\n+                 Name       => New_Occurrence_Of (Counter_Id, Loc),\n                  Expression =>\n                    Make_Op_Subtract (Loc,\n-                     Left_Opnd  => New_Reference_To (Counter_Id, Loc),\n+                     Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n                      Right_Opnd => Make_Integer_Literal (Loc, 1)))),\n \n              Else_Statements => New_List (Fin_Stmt));\n@@ -5611,10 +5612,10 @@ package body Exp_Ch7 is\n \n          Append_To (Statements (Handled_Statement_Sequence (Init_Loop)),\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Counter_Id, Loc),\n+             Name       => New_Occurrence_Of (Counter_Id, Loc),\n              Expression =>\n                Make_Op_Add (Loc,\n-                 Left_Opnd  => New_Reference_To (Counter_Id, Loc),\n+                 Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n                  Right_Opnd => Make_Integer_Literal (Loc, 1))));\n \n          --  Generate all initialization loops starting from the innermost\n@@ -5667,7 +5668,7 @@ package body Exp_Ch7 is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Counter_Id,\n                    Object_Definition   =>\n-                     New_Reference_To (Standard_Integer, Loc),\n+                     New_Occurrence_Of (Standard_Integer, Loc),\n                    Expression          => Make_Integer_Literal (Loc, 0))),\n \n                Handled_Statement_Sequence =>\n@@ -5689,7 +5690,7 @@ package body Exp_Ch7 is\n       begin\n          Id := First (L);\n          while Present (Id) loop\n-            Append_To (Refs, New_Reference_To (Id, Loc));\n+            Append_To (Refs, New_Occurrence_Of (Id, Loc));\n             Next (Id);\n          end loop;\n \n@@ -5733,7 +5734,8 @@ package body Exp_Ch7 is\n          Formals := New_List (\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n-             Parameter_Type      => New_Reference_To (RTE (RE_Address), Loc)));\n+             Parameter_Type      =>\n+               New_Occurrence_Of (RTE (RE_Address), Loc)));\n \n       --  Default case\n \n@@ -5745,7 +5747,7 @@ package body Exp_Ch7 is\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n              In_Present          => True,\n              Out_Present         => True,\n-             Parameter_Type      => New_Reference_To (Typ, Loc)));\n+             Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n          --  F : Boolean := True\n \n@@ -5756,9 +5758,9 @@ package body Exp_Ch7 is\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier => Make_Defining_Identifier (Loc, Name_F),\n                 Parameter_Type      =>\n-                  New_Reference_To (Standard_Boolean, Loc),\n+                  New_Occurrence_Of (Standard_Boolean, Loc),\n                 Expression          =>\n-                  New_Reference_To (Standard_True, Loc)));\n+                  New_Occurrence_Of (Standard_True, Loc)));\n          end if;\n       end if;\n \n@@ -6296,7 +6298,7 @@ package body Exp_Ch7 is\n                if Present (Proc) then\n                   Adj_Stmt :=\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name                   => New_Reference_To (Proc, Loc),\n+                      Name                   => New_Occurrence_Of (Proc, Loc),\n                       Parameter_Associations => New_List (\n                         Make_Identifier (Loc, Name_V)));\n \n@@ -6462,7 +6464,7 @@ package body Exp_Ch7 is\n                          Statements => New_List (\n                            Make_Goto_Statement (Loc,\n                              Name =>\n-                               New_Reference_To (Entity (Label_Id), Loc)))));\n+                               New_Occurrence_Of (Entity (Label_Id), Loc)))));\n \n                      --  Generate:\n                      --    <<LN>>\n@@ -6708,7 +6710,7 @@ package body Exp_Ch7 is\n \n                    Statements => New_List (\n                      Make_Goto_Statement (Loc,\n-                       Name => New_Reference_To (Entity (Label_Id), Loc)))));\n+                       Name => New_Occurrence_Of (Entity (Label_Id), Loc)))));\n \n                Append_To (Stmts, Label);  --  statement\n \n@@ -6876,7 +6878,7 @@ package body Exp_Ch7 is\n                if Present (Proc) then\n                   Fin_Stmt :=\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name                   => New_Reference_To (Proc, Loc),\n+                      Name                   => New_Occurrence_Of (Proc, Loc),\n                       Parameter_Associations => New_List (\n                         Make_Identifier (Loc, Name_V)));\n \n@@ -7022,7 +7024,7 @@ package body Exp_Ch7 is\n                   return New_List (\n                     Make_Procedure_Call_Statement (Loc,\n                       Name                   =>\n-                        New_Reference_To\n+                        New_Occurrence_Of\n                           (Find_Prim_Op (Typ, Name_Of (Prim)), Loc),\n                       Parameter_Associations => New_List (\n                         Make_Identifier (Loc, Name_V))));\n@@ -7277,7 +7279,7 @@ package body Exp_Ch7 is\n                   Defining_Identifier =>\n                     Make_Defining_Identifier (Loc, Name_V),\n                   Parameter_Type =>\n-                    New_Reference_To (RTE (RE_Address), Loc)))),\n+                    New_Occurrence_Of (RTE (RE_Address), Loc)))),\n \n           Declarations => No_List,\n \n@@ -7355,10 +7357,10 @@ package body Exp_Ch7 is\n           Type_Definition     =>\n             Make_Access_To_Object_Definition (Loc,\n               All_Present        => True,\n-              Subtype_Indication => New_Reference_To (Desg_Typ, Loc))),\n+              Subtype_Indication => New_Occurrence_Of (Desg_Typ, Loc))),\n \n         Make_Attribute_Definition_Clause (Loc,\n-          Name       => New_Reference_To (Ptr_Typ, Loc),\n+          Name       => New_Occurrence_Of (Ptr_Typ, Loc),\n           Chars      => Name_Storage_Size,\n           Expression => Make_Integer_Literal (Loc, 0)));\n \n@@ -7381,7 +7383,7 @@ package body Exp_Ch7 is\n \n             Append_To (Decls,\n               Make_Attribute_Definition_Clause (Loc,\n-                Name       => New_Reference_To (Ptr_Typ, Loc),\n+                Name       => New_Occurrence_Of (Ptr_Typ, Loc),\n                 Chars      => Name_Size,\n                 Expression =>\n                   Make_Integer_Literal (Loc, System_Address_Size)));\n@@ -7397,12 +7399,12 @@ package body Exp_Ch7 is\n                 Defining_Identifier => Dope_Id,\n                 Constant_Present    => True,\n                 Object_Definition   =>\n-                  New_Reference_To (RTE (RE_Storage_Offset), Loc),\n+                  New_Occurrence_Of (RTE (RE_Storage_Offset), Loc),\n                 Expression          =>\n                   Make_Op_Divide (Loc,\n                     Left_Opnd  =>\n                       Make_Attribute_Reference (Loc,\n-                        Prefix         => New_Reference_To (Desg_Typ, Loc),\n+                        Prefix         => New_Occurrence_Of (Desg_Typ, Loc),\n                         Attribute_Name => Name_Descriptor_Size),\n                     Right_Opnd =>\n                       Make_Integer_Literal (Loc, System_Storage_Unit))));\n@@ -7418,10 +7420,10 @@ package body Exp_Ch7 is\n             Obj_Expr :=\n               Make_Function_Call (Loc,\n                 Name                   =>\n-                  New_Reference_To (RTE (RE_Add_Offset_To_Address), Loc),\n+                  New_Occurrence_Of (RTE (RE_Add_Offset_To_Address), Loc),\n                 Parameter_Associations => New_List (\n                   Obj_Expr,\n-                  New_Reference_To (Dope_Id, Loc)));\n+                  New_Occurrence_Of (Dope_Id, Loc)));\n          end;\n       end if;\n \n@@ -7477,10 +7479,10 @@ package body Exp_Ch7 is\n          Raise_Node :=\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To\n+               New_Occurrence_Of\n                  (RTE (RE_Raise_From_Controlled_Operation), Loc),\n              Parameter_Associations => New_List (\n-               New_Reference_To (E_Occ, Loc)));\n+               New_Occurrence_Of (E_Occ, Loc)));\n \n       --  Restricted run-time: exception messages are not supported\n \n@@ -7582,7 +7584,7 @@ package body Exp_Ch7 is\n       return\n         Make_Procedure_Call_Statement (Loc,\n           Name =>\n-            New_Reference_To (Proc, Loc),\n+            New_Occurrence_Of (Proc, Loc),\n           Parameter_Associations => New_List (Ref));\n    end Make_Init_Call;\n \n@@ -7606,14 +7608,14 @@ package body Exp_Ch7 is\n           Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n           In_Present          => True,\n           Out_Present         => True,\n-          Parameter_Type      => New_Reference_To (Typ, Loc)),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc)),\n \n          --  F : Boolean := True\n \n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => Make_Defining_Identifier (Loc, Name_F),\n-          Parameter_Type      => New_Reference_To (Standard_Boolean, Loc),\n-          Expression          => New_Reference_To (Standard_True, Loc)));\n+          Parameter_Type      => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Expression          => New_Occurrence_Of (Standard_True, Loc)));\n \n       --  Add the necessary number of counters to represent the initialization\n       --  state of an object.\n@@ -7711,12 +7713,12 @@ package body Exp_Ch7 is\n       return\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n-            New_Reference_To (RTE (RE_Set_Finalize_Address), Loc),\n+            New_Occurrence_Of (RTE (RE_Set_Finalize_Address), Loc),\n           Parameter_Associations => New_List (\n             Fin_Mas_Ref,\n             Make_Attribute_Reference (Loc,\n               Prefix         =>\n-                New_Reference_To (TSS (Utyp, TSS_Finalize_Address), Loc),\n+                New_Occurrence_Of (TSS (Utyp, TSS_Finalize_Address), Loc),\n               Attribute_Name => Name_Unrestricted_Access)));\n    end Make_Set_Finalize_Address_Call;\n \n@@ -7796,7 +7798,7 @@ package body Exp_Ch7 is\n \n       Block :=\n         Make_Block_Statement (Loc,\n-          Identifier                 => New_Reference_To (Current_Scope, Loc),\n+          Identifier                 => New_Occurrence_Of (Current_Scope, Loc),\n           Declarations               => Decls,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Statements => Instrs),\n@@ -8002,16 +8004,16 @@ package body Exp_Ch7 is\n       Insert_Actions (N, New_List (\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Temp,\n-          Object_Definition   => New_Reference_To (Typ, Loc)),\n+          Object_Definition   => New_Occurrence_Of (Typ, Loc)),\n \n         Make_Transient_Block (Loc,\n           Action =>\n             Make_Assignment_Statement (Loc,\n-              Name       => New_Reference_To (Temp, Loc),\n+              Name       => New_Occurrence_Of (Temp, Loc),\n               Expression => Expr),\n           Par    => Parent (N))));\n \n-      Rewrite (N, New_Reference_To (Temp, Loc));\n+      Rewrite (N, New_Occurrence_Of (Temp, Loc));\n       Analyze_And_Resolve (N, Typ);\n    end Wrap_Transient_Expression;\n "}, {"sha": "e1b0267919637997b0866ff59b4aab67061dde3f", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 420, "deletions": 401, "changes": 821, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5"}, {"sha": "7dc4264cc592751964b69c03662f14ec89729021", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -472,7 +472,7 @@ package body Exp_Dbug is\n       Res :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Obj,\n-          Object_Definition   => New_Reference_To\n+          Object_Definition   => New_Occurrence_Of\n                                    (Standard_Debug_Renaming_Type, Loc));\n \n       Set_Debug_Renaming_Link (Obj, Entity (Ren));"}, {"sha": "8ed3b3956c28393abc31b4667e74ad38452dcf82", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 309, "deletions": 301, "changes": 610, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5"}, {"sha": "1c953d6a5745519ff345ca9527e2dfec96442994", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -458,15 +458,15 @@ package body Exp_Imgv is\n       elsif Is_Floating_Point_Type (Rtyp) then\n          Append_To (Arg_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Ptyp, Loc),\n+             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n              Attribute_Name => Name_Digits));\n \n       --  For ordinary fixed-point types, append Aft parameter\n \n       elsif Is_Ordinary_Fixed_Point_Type (Rtyp) then\n          Append_To (Arg_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Ptyp, Loc),\n+             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n              Attribute_Name => Name_Aft));\n \n          if Has_Decimal_Small (Rtyp) then\n@@ -479,7 +479,7 @@ package body Exp_Imgv is\n       elsif Is_Decimal_Fixed_Point_Type (Rtyp) then\n          Append_To (Arg_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Ptyp, Loc),\n+             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n              Attribute_Name => Name_Scale));\n \n          Set_Conversion_OK (First (Arg_List));\n@@ -489,14 +489,15 @@ package body Exp_Imgv is\n \n       elsif Rtyp = Standard_Wide_Character then\n          Append_To (Arg_List,\n-           New_Reference_To (Boolean_Literals (Ada_Version >= Ada_2005), Loc));\n+           New_Occurrence_Of\n+             (Boolean_Literals (Ada_Version >= Ada_2005), Loc));\n       end if;\n \n       --  Now append the procedure call to the insert list\n \n       Append_To (Ins_List,\n          Make_Procedure_Call_Statement (Loc,\n-          Name                   => New_Reference_To (Proc_Ent, Loc),\n+          Name                   => New_Occurrence_Of (Proc_Ent, Loc),\n           Parameter_Associations => Arg_List));\n \n       --  Insert declarations of Snn, Pnn, and the procedure call. We suppress\n@@ -643,13 +644,13 @@ package body Exp_Imgv is\n \n          Append_To (Args,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Reference_To (Typ, Loc),\n+             Prefix => New_Occurrence_Of (Typ, Loc),\n              Attribute_Name => Name_Scale));\n \n          Rewrite (N,\n            OK_Convert_To (Btyp,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (Vid), Loc),\n+               Name => New_Occurrence_Of (RTE (Vid), Loc),\n                Parameter_Associations => Args)));\n \n          Set_Etype (N, Btyp);\n@@ -672,7 +673,7 @@ package body Exp_Imgv is\n          then\n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Reference_To (Btyp, Loc),\n+                Prefix => New_Occurrence_Of (Btyp, Loc),\n                 Attribute_Name => Name_Val,\n                 Expressions => New_List (\n                   Make_Attribute_Reference (Loc,\n@@ -718,12 +719,12 @@ package body Exp_Imgv is\n \n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Reference_To (Typ, Loc),\n+                Prefix => New_Occurrence_Of (Typ, Loc),\n                 Attribute_Name => Name_Val,\n                 Expressions => New_List (\n                   Make_Function_Call (Loc,\n                     Name =>\n-                      New_Reference_To (RTE (Func), Loc),\n+                      New_Occurrence_Of (RTE (Func), Loc),\n                     Parameter_Associations => Args))));\n \n             Analyze_And_Resolve (N, Btyp);\n@@ -758,7 +759,7 @@ package body Exp_Imgv is\n          Rewrite (N,\n            Convert_To (Btyp,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (Vid), Loc),\n+               Name => New_Occurrence_Of (RTE (Vid), Loc),\n                Parameter_Associations => Args)));\n       end if;\n \n@@ -826,15 +827,15 @@ package body Exp_Imgv is\n \n          Make_Procedure_Call_Statement (Loc,\n            Name =>\n-             New_Reference_To (RTE (RE_String_To_Wide_String), Loc),\n+             New_Occurrence_Of (RTE (RE_String_To_Wide_String), Loc),\n \n            Parameter_Associations => New_List (\n              Make_Attribute_Reference (Loc,\n                Prefix         => Prefix (N),\n                Attribute_Name => Name_Image,\n                Expressions    => Expressions (N)),\n-             New_Reference_To (Rnn, Loc),\n-             New_Reference_To (Lnn, Loc),\n+             New_Occurrence_Of (Rnn, Loc),\n+             New_Occurrence_Of (Lnn, Loc),\n              Make_Integer_Literal (Loc,\n                Intval => Int (Wide_Character_Encoding_Method))))),\n \n@@ -918,15 +919,15 @@ package body Exp_Imgv is\n \n          Make_Procedure_Call_Statement (Loc,\n            Name =>\n-             New_Reference_To (RTE (RE_String_To_Wide_Wide_String), Loc),\n+             New_Occurrence_Of (RTE (RE_String_To_Wide_Wide_String), Loc),\n \n            Parameter_Associations => New_List (\n              Make_Attribute_Reference (Loc,\n                Prefix         => Prefix (N),\n                Attribute_Name => Name_Image,\n                Expressions    => Expressions (N)),\n-             New_Reference_To (Rnn, Loc),\n-             New_Reference_To (Lnn, Loc),\n+             New_Occurrence_Of (Rnn, Loc),\n+             New_Occurrence_Of (Lnn, Loc),\n              Make_Integer_Literal (Loc,\n                Intval => Int (Wide_Character_Encoding_Method))))),\n \n@@ -1141,18 +1142,18 @@ package body Exp_Imgv is\n                Make_Op_Gt (Loc,\n                  Left_Opnd =>\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (Ptyp, Loc),\n+                     Prefix => New_Occurrence_Of (Ptyp, Loc),\n                      Attribute_Name => Name_First),\n \n                  Right_Opnd =>\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (Ptyp, Loc),\n+                     Prefix => New_Occurrence_Of (Ptyp, Loc),\n                      Attribute_Name => Name_Last)),\n \n                Make_Integer_Literal (Loc, 0),\n \n                Make_Attribute_Reference (Loc,\n-                 Prefix => New_Reference_To (Base_Type (Ptyp), Loc),\n+                 Prefix => New_Occurrence_Of (Base_Type (Ptyp), Loc),\n                  Attribute_Name => Name_Width))));\n \n          Analyze_And_Resolve (N, Typ);\n@@ -1311,27 +1312,27 @@ package body Exp_Imgv is\n                Attribute_Name => Name_Address),\n \n              Make_Attribute_Reference (Loc,\n-               Prefix => New_Reference_To (Ptyp, Loc),\n+               Prefix => New_Occurrence_Of (Ptyp, Loc),\n                Attribute_Name => Name_Pos,\n \n                Expressions => New_List (\n                  Make_Attribute_Reference (Loc,\n-                   Prefix => New_Reference_To (Ptyp, Loc),\n+                   Prefix => New_Occurrence_Of (Ptyp, Loc),\n                    Attribute_Name => Name_First))),\n \n              Make_Attribute_Reference (Loc,\n-               Prefix => New_Reference_To (Ptyp, Loc),\n+               Prefix => New_Occurrence_Of (Ptyp, Loc),\n                Attribute_Name => Name_Pos,\n \n                Expressions => New_List (\n                  Make_Attribute_Reference (Loc,\n-                   Prefix => New_Reference_To (Ptyp, Loc),\n+                   Prefix => New_Occurrence_Of (Ptyp, Loc),\n                    Attribute_Name => Name_Last))));\n \n          Rewrite (N,\n            Convert_To (Typ,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (XX), Loc),\n+               Name => New_Occurrence_Of (RTE (XX), Loc),\n                Parameter_Associations => Arglist)));\n \n          Analyze_And_Resolve (N, Typ);\n@@ -1343,18 +1344,18 @@ package body Exp_Imgv is\n       Arglist := New_List (\n         Convert_To (YY,\n           Make_Attribute_Reference (Loc,\n-            Prefix => New_Reference_To (Ptyp, Loc),\n+            Prefix => New_Occurrence_Of (Ptyp, Loc),\n             Attribute_Name => Name_First)),\n \n         Convert_To (YY,\n           Make_Attribute_Reference (Loc,\n-            Prefix => New_Reference_To (Ptyp, Loc),\n+            Prefix => New_Occurrence_Of (Ptyp, Loc),\n             Attribute_Name => Name_Last)));\n \n       Rewrite (N,\n         Convert_To (Typ,\n           Make_Function_Call (Loc,\n-            Name => New_Reference_To (RTE (XX), Loc),\n+            Name => New_Occurrence_Of (RTE (XX), Loc),\n             Parameter_Associations => Arglist)));\n \n       Analyze_And_Resolve (N, Typ);"}, {"sha": "a4a498904f4daa51013e427b7b14265b141f16d8", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -247,7 +247,7 @@ package body Exp_Intr is\n \n             declare\n                Fname : constant Node_Id :=\n-                         New_Reference_To (RTE (RE_Secondary_Tag), Loc);\n+                         New_Occurrence_Of (RTE (RE_Secondary_Tag), Loc);\n \n             begin\n                pragma Assert (not Is_Interface (Etype (Tag_Arg)));\n@@ -256,13 +256,13 @@ package body Exp_Intr is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Make_Temporary (Loc, 'V'),\n                    Object_Definition   =>\n-                     New_Reference_To (RTE (RE_Tag), Loc),\n+                     New_Occurrence_Of (RTE (RE_Tag), Loc),\n                    Expression          =>\n                      Make_Function_Call (Loc,\n                        Name                   => Fname,\n                        Parameter_Associations => New_List (\n                          Relocate_Node (Tag_Arg),\n-                         New_Reference_To\n+                         New_Occurrence_Of\n                            (Node (First_Elmt (Access_Disp_Table\n                                                (Etype (Etype (Act_Constr))))),\n                             Loc))));\n@@ -324,7 +324,7 @@ package body Exp_Intr is\n             Build_CW_Membership (Loc,\n               Obj_Tag_Node => Obj_Tag_Node,\n               Typ_Tag_Node =>\n-                New_Reference_To (\n+                New_Occurrence_Of (\n                    Node (First_Elmt (Access_Disp_Table (\n                                        Root_Type (Result_Typ)))), Loc),\n               Related_Nod => N,\n@@ -354,7 +354,7 @@ package body Exp_Intr is\n                         Prefix         => New_Copy_Tree (Tag_Arg),\n                         Attribute_Name => Name_Address),\n \n-                      New_Reference_To (\n+                      New_Occurrence_Of (\n                         Node (First_Elmt (Access_Disp_Table (\n                                             Root_Type (Result_Typ)))), Loc)))),\n              Then_Statements =>\n@@ -1193,7 +1193,7 @@ package body Exp_Intr is\n          Set_Expression (Free_Node,\n            Unchecked_Convert_To (Typ,\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (RE_Base_Address), Loc),\n+               Name => New_Occurrence_Of (RTE (RE_Base_Address), Loc),\n                Parameter_Associations => New_List (\n                  Unchecked_Convert_To (RTE (RE_Address), Free_Arg)))));\n "}, {"sha": "54aec71de66c3d73163e70a2039ae04ed28be5dd", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -319,17 +319,17 @@ package body Exp_Prag is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => New_Msg,\n              Constant_Present    => True,\n-             Object_Definition   => New_Reference_To (Standard_String, Loc),\n+             Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n              Expression          =>\n                Make_If_Expression (Loc,\n                  Expressions => New_List (\n-                   New_Reference_To (Flag, Loc),\n+                   New_Occurrence_Of (Flag, Loc),\n \n                    Make_Op_Concat (Loc,\n-                     Left_Opnd  => New_Reference_To (Msg, Loc),\n+                     Left_Opnd  => New_Occurrence_Of (Msg, Loc),\n                      Right_Opnd => Make_String_Literal (Loc, End_String)),\n \n-                   New_Reference_To (Msg, Loc)))));\n+                   New_Occurrence_Of (Msg, Loc)))));\n \n          Msg := New_Msg;\n       end Case_Guard_Error;\n@@ -352,7 +352,7 @@ package body Exp_Prag is\n \n          Cond :=\n            Make_And_Then (Loc,\n-             Left_Opnd  => New_Reference_To (Flag, Loc),\n+             Left_Opnd  => New_Occurrence_Of (Flag, Loc),\n              Right_Opnd =>\n                Make_Op_Not (Loc,\n                  Right_Opnd => Relocate_Node (Conseq)));\n@@ -368,7 +368,7 @@ package body Exp_Prag is\n          Error :=\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Raise_Assert_Failure), Loc),\n+               New_Occurrence_Of (RTE (RE_Raise_Assert_Failure), Loc),\n              Parameter_Associations => New_List (\n                Make_String_Literal (Loc, End_String)));\n \n@@ -399,8 +399,8 @@ package body Exp_Prag is\n          return\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Id,\n-             Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n-             Expression          => New_Reference_To (Standard_False, Loc));\n+             Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+             Expression          => New_Occurrence_Of (Standard_False, Loc));\n       end Declaration_Of;\n \n       -------------------------------\n@@ -444,7 +444,7 @@ package body Exp_Prag is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n                    Object_Definition   =>\n-                     New_Reference_To (Etype (Pref), Loc));\n+                     New_Occurrence_Of (Etype (Pref), Loc));\n                Set_No_Initialization (Decl);\n \n                Append_To (Decls, Decl);\n@@ -458,7 +458,7 @@ package body Exp_Prag is\n \n                Append_To (Eval_Stmts,\n                  Make_Assignment_Statement (Loc,\n-                   Name       => New_Reference_To (Temp, Loc),\n+                   Name       => New_Occurrence_Of (Temp, Loc),\n                    Expression => Pref));\n \n                --  Ensure that the prefix is valid\n@@ -470,7 +470,7 @@ package body Exp_Prag is\n                --  Replace the original attribute 'Old by a reference to the\n                --  generated temporary.\n \n-               Rewrite (N, New_Reference_To (Temp, Loc));\n+               Rewrite (N, New_Occurrence_Of (Temp, Loc));\n             end if;\n \n             return OK;\n@@ -497,7 +497,7 @@ package body Exp_Prag is\n          if No (Evals) then\n             Evals :=\n               Make_Implicit_If_Statement (CCs,\n-                Condition       => New_Reference_To (Flag, Loc),\n+                Condition       => New_Occurrence_Of (Flag, Loc),\n                 Then_Statements => Eval_Stmts);\n \n          --  Otherwise generate:\n@@ -512,7 +512,7 @@ package body Exp_Prag is\n \n             Append_To (Elsif_Parts (Evals),\n               Make_Elsif_Part (Loc,\n-                Condition       => New_Reference_To (Flag, Loc),\n+                Condition       => New_Occurrence_Of (Flag, Loc),\n                 Then_Statements => Eval_Stmts));\n          end if;\n       end Expand_Old_In_Consequence;\n@@ -525,10 +525,10 @@ package body Exp_Prag is\n       begin\n          return\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Id, Loc),\n+             Name       => New_Occurrence_Of (Id, Loc),\n              Expression =>\n                Make_Op_Add (Loc,\n-                 Left_Opnd  => New_Reference_To (Id, Loc),\n+                 Left_Opnd  => New_Occurrence_Of (Id, Loc),\n                  Right_Opnd => Make_Integer_Literal (Loc, 1)));\n       end Increment;\n \n@@ -540,8 +540,8 @@ package body Exp_Prag is\n       begin\n          return\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Id, Loc),\n-             Expression => New_Reference_To (Standard_True, Loc));\n+             Name       => New_Occurrence_Of (Id, Loc),\n+             Expression => New_Occurrence_Of (Standard_True, Loc));\n       end Set;\n \n       --  Local variables\n@@ -590,7 +590,7 @@ package body Exp_Prag is\n       Prepend_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Count,\n-          Object_Definition   => New_Reference_To (Standard_Natural, Loc),\n+          Object_Definition   => New_Occurrence_Of (Standard_Natural, Loc),\n           Expression          => Make_Integer_Literal (Loc, 0)));\n \n       --  Create the base error message for multiple overlapping case guards\n@@ -609,7 +609,7 @@ package body Exp_Prag is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Msg_Str,\n              Constant_Present    => True,\n-             Object_Definition   => New_Reference_To (Standard_String, Loc),\n+             Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n              Expression          => Make_String_Literal (Loc, End_String)));\n       end if;\n \n@@ -726,7 +726,7 @@ package body Exp_Prag is\n          CG_Stmts := New_List (\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n-               New_Reference_To (RTE (RE_Raise_Assert_Failure), Loc),\n+               New_Occurrence_Of (RTE (RE_Raise_Assert_Failure), Loc),\n              Parameter_Associations => New_List (\n                Make_String_Literal (Loc, End_String))));\n       end if;\n@@ -735,7 +735,7 @@ package body Exp_Prag is\n         Make_Implicit_If_Statement (CCs,\n           Condition       =>\n             Make_Op_Eq (Loc,\n-              Left_Opnd  => New_Reference_To (Count, Loc),\n+              Left_Opnd  => New_Occurrence_Of (Count, Loc),\n               Right_Opnd => Make_Integer_Literal (Loc, 0)),\n           Then_Statements => CG_Stmts);\n \n@@ -755,7 +755,7 @@ package body Exp_Prag is\n            Make_Elsif_Part (Loc,\n              Condition       =>\n                Make_Op_Gt (Loc,\n-                 Left_Opnd  => New_Reference_To (Count, Loc),\n+                 Left_Opnd  => New_Occurrence_Of (Count, Loc),\n                  Right_Opnd => Make_Integer_Literal (Loc, 1)),\n \n              Then_Statements => New_List (\n@@ -766,10 +766,10 @@ package body Exp_Prag is\n                      Statements => New_List (\n                        Make_Procedure_Call_Statement (Loc,\n                          Name                   =>\n-                           New_Reference_To\n+                           New_Occurrence_Of\n                              (RTE (RE_Raise_Assert_Failure), Loc),\n                          Parameter_Associations => New_List (\n-                           New_Reference_To (Msg_Str, Loc))))))))));\n+                           New_Occurrence_Of (Msg_Str, Loc))))))))));\n       end if;\n \n       Append_To (Decls, CG_Checks);\n@@ -996,7 +996,7 @@ package body Exp_Prag is\n              Then_Statements => New_List (\n                Make_Raise_Statement (Loc,\n                  Name =>\n-                   New_Reference_To (RTE (RE_Assert_Failure), Loc)))));\n+                   New_Occurrence_Of (RTE (RE_Assert_Failure), Loc)))));\n \n       --  Case where we call the procedure\n \n@@ -1083,7 +1083,7 @@ package body Exp_Prag is\n              Then_Statements => New_List (\n                Make_Procedure_Call_Statement (Loc,\n                  Name =>\n-                   New_Reference_To (RTE (RE_Raise_Assert_Failure), Loc),\n+                   New_Occurrence_Of (RTE (RE_Raise_Assert_Failure), Loc),\n                  Parameter_Associations => New_List (Relocate_Node (Msg))))));\n       end if;\n \n@@ -1376,7 +1376,7 @@ package body Exp_Prag is\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => Excep_Internal,\n                          Object_Definition   =>\n-                           New_Reference_To (RTE (RE_Address), Loc));\n+                           New_Occurrence_Of (RTE (RE_Address), Loc));\n \n                      Insert_Action (N, Excep_Object);\n                      Analyze (Excep_Object);\n@@ -1396,7 +1396,7 @@ package body Exp_Prag is\n                          Pragma_Argument_Associations => New_List (\n                            Make_Pragma_Argument_Association (Loc,\n                              Expression =>\n-                               New_Reference_To (Excep_Internal, Loc)),\n+                               New_Occurrence_Of (Excep_Internal, Loc)),\n \n                            Make_Pragma_Argument_Association (Loc,\n                              Expression =>\n@@ -1417,7 +1417,7 @@ package body Exp_Prag is\n \n                            Make_Pragma_Argument_Association (Loc,\n                              Expression =>\n-                               New_Reference_To (Excep_Internal, Loc)),\n+                               New_Occurrence_Of (Excep_Internal, Loc)),\n \n                            Make_Pragma_Argument_Association (Loc,\n                              Expression =>\n@@ -1434,7 +1434,7 @@ package body Exp_Prag is\n                      Code :=\n                         Make_Function_Call (Loc,\n                           Name                   =>\n-                            New_Reference_To (RTE (RE_Import_Address), Loc),\n+                            New_Occurrence_Of (RTE (RE_Import_Address), Loc),\n                           Parameter_Associations => New_List\n                             (Make_String_Literal (Loc,\n                               Strval => Excep_Image)));\n@@ -1444,7 +1444,7 @@ package body Exp_Prag is\n \n                   Rewrite (Call,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name => New_Reference_To\n+                      Name => New_Occurrence_Of\n                                 (RTE (RE_Register_VMS_Exception), Loc),\n                       Parameter_Associations => New_List (\n                         Code,\n@@ -1675,9 +1675,9 @@ package body Exp_Prag is\n               Make_Object_Declaration (Loop_Loc,\n                 Defining_Identifier => Flag_Id,\n                 Object_Definition   =>\n-                  New_Reference_To (Standard_Boolean, Loop_Loc),\n+                  New_Occurrence_Of (Standard_Boolean, Loop_Loc),\n                 Expression          =>\n-                  New_Reference_To (Standard_False, Loop_Loc)));\n+                  New_Occurrence_Of (Standard_False, Loop_Loc)));\n \n             --  Prevent an unwanted optimization where the Current_Value of\n             --  the flag eliminates the if statement which stores the variant\n@@ -1706,7 +1706,7 @@ package body Exp_Prag is\n          Insert_Action (Loop_Stmt,\n            Make_Object_Declaration (Loop_Loc,\n              Defining_Identifier => Curr_Id,\n-             Object_Definition   => New_Reference_To (Expr_Typ, Loop_Loc)));\n+             Object_Definition   => New_Occurrence_Of (Expr_Typ, Loop_Loc)));\n \n          --  Generate:\n          --    Old : <type of Expr>;\n@@ -1716,7 +1716,7 @@ package body Exp_Prag is\n          Insert_Action (Loop_Stmt,\n            Make_Object_Declaration (Loop_Loc,\n              Defining_Identifier => Old_Id,\n-             Object_Definition   => New_Reference_To (Expr_Typ, Loop_Loc)));\n+             Object_Definition   => New_Occurrence_Of (Expr_Typ, Loop_Loc)));\n \n          --  Restore original scope after all temporaries have been analyzed\n \n@@ -1733,8 +1733,8 @@ package body Exp_Prag is\n \n          Append_To (Old_Assign,\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Old_Id, Loc),\n-             Expression => New_Reference_To (Curr_Id, Loc)));\n+             Name       => New_Occurrence_Of (Old_Id, Loc),\n+             Expression => New_Occurrence_Of (Curr_Id, Loc)));\n \n          --  Step 4: Store the current value of the expression\n \n@@ -1747,7 +1747,7 @@ package body Exp_Prag is\n \n          Append_To (Curr_Assign,\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (Curr_Id, Loc),\n+             Name       => New_Occurrence_Of (Curr_Id, Loc),\n              Expression => Relocate_Node (Expr)));\n \n          --  Step 5: Create corresponding assertion to verify change of value\n@@ -1764,8 +1764,8 @@ package body Exp_Prag is\n                Make_Pragma_Argument_Association (Loc,\n                  Expression =>\n                    Make_Op (Loc,\n-                     Curr_Val => New_Reference_To (Curr_Id, Loc),\n-                     Old_Val  => New_Reference_To (Old_Id, Loc)))));\n+                     Curr_Val => New_Occurrence_Of (Curr_Id, Loc),\n+                     Old_Val  => New_Occurrence_Of (Old_Id, Loc)))));\n \n          --  Generate:\n          --    if Curr /= Old then\n@@ -1783,8 +1783,8 @@ package body Exp_Prag is\n                  Make_If_Statement (Loc,\n                    Condition       =>\n                      Make_Op_Ne (Loc,\n-                       Left_Opnd  => New_Reference_To (Curr_Id, Loc),\n-                       Right_Opnd => New_Reference_To (Old_Id, Loc)),\n+                       Left_Opnd  => New_Occurrence_Of (Curr_Id, Loc),\n+                       Right_Opnd => New_Occurrence_Of (Old_Id, Loc)),\n                    Then_Statements => New_List (Prag));\n             end if;\n \n@@ -1809,8 +1809,8 @@ package body Exp_Prag is\n               Make_Elsif_Part (Loc,\n                 Condition       =>\n                   Make_Op_Ne (Loc,\n-                    Left_Opnd  => New_Reference_To (Curr_Id, Loc),\n-                    Right_Opnd => New_Reference_To (Old_Id, Loc)),\n+                    Left_Opnd  => New_Occurrence_Of (Curr_Id, Loc),\n+                    Right_Opnd => New_Occurrence_Of (Old_Id, Loc)),\n                 Then_Statements => New_List (Prag)));\n          end if;\n       end Process_Variant;\n@@ -1861,7 +1861,7 @@ package body Exp_Prag is\n \n       Insert_Action (N,\n         Make_If_Statement (Loc,\n-          Condition       => New_Reference_To (Flag_Id, Loc),\n+          Condition       => New_Occurrence_Of (Flag_Id, Loc),\n           Then_Statements => Old_Assign));\n \n       --  Update the values of all expressions\n@@ -1878,12 +1878,12 @@ package body Exp_Prag is\n \n       Insert_Action (N,\n         Make_If_Statement (Loc,\n-          Condition       => New_Reference_To (Flag_Id, Loc),\n+          Condition       => New_Occurrence_Of (Flag_Id, Loc),\n           Then_Statements => New_List (If_Stmt),\n           Else_Statements => New_List (\n             Make_Assignment_Statement (Loc,\n-              Name       => New_Reference_To (Flag_Id, Loc),\n-              Expression => New_Reference_To (Standard_True, Loc)))));\n+              Name       => New_Occurrence_Of (Flag_Id, Loc),\n+              Expression => New_Occurrence_Of (Standard_True, Loc)))));\n \n       --  Note: the pragma has been completely transformed into a sequence of\n       --  corresponding declarations and statements. We leave it in the tree\n@@ -1919,15 +1919,15 @@ package body Exp_Prag is\n          Rewrite\n            (N,\n             Make_Procedure_Call_Statement (Loc,\n-              Name => New_Reference_To (RTE (RE_Set_Deadline), Loc),\n+              Name => New_Occurrence_Of (RTE (RE_Set_Deadline), Loc),\n               Parameter_Associations => New_List (\n                 Unchecked_Convert_To (RTE (RO_RT_Time),\n                   Make_Op_Add (Loc,\n                     Left_Opnd  =>\n                       Make_Function_Call (Loc,\n-                        New_Reference_To (RTE (RO_RT_To_Duration), Loc),\n+                        New_Occurrence_Of (RTE (RO_RT_To_Duration), Loc),\n                         New_List (Make_Function_Call (Loc,\n-                          New_Reference_To (RTE (RE_Clock), Loc)))),\n+                          New_Occurrence_Of (RTE (RE_Clock), Loc)))),\n                     Right_Opnd  =>\n                       Unchecked_Convert_To (Standard_Duration, Arg1 (N)))))));\n "}, {"sha": "5bf33bc2ae223520607692ab7eb0104f03751fb7", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,7 +48,7 @@ package body Exp_Sel is\n    begin\n       return\n         Make_Block_Statement (Loc,\n-          Identifier   => New_Reference_To (Abr_Blk_Ent, Loc),\n+          Identifier   => New_Occurrence_Of (Abr_Blk_Ent, Loc),\n \n           Declarations => No_List,\n \n@@ -84,13 +84,13 @@ package body Exp_Sel is\n \n          Stmt :=\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n+             Name => New_Occurrence_Of (RTE (RE_Abort_Undefer), Loc),\n              Parameter_Associations => No_List);\n       end if;\n \n       return Make_Implicit_Exception_Handler (Loc,\n         Exception_Choices =>\n-          New_List (New_Reference_To (Stand.Abort_Signal, Loc)),\n+          New_List (New_Occurrence_Of (Stand.Abort_Signal, Loc)),\n         Statements        => New_List (Stmt));\n    end Build_Abort_Block_Handler;\n \n@@ -107,8 +107,8 @@ package body Exp_Sel is\n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => B,\n-          Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n-          Expression          => New_Reference_To (Standard_False, Loc)));\n+          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Expression          => New_Occurrence_Of (Standard_False, Loc)));\n       return B;\n    end Build_B;\n \n@@ -125,7 +125,8 @@ package body Exp_Sel is\n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => C,\n-          Object_Definition => New_Reference_To (RTE (RE_Prim_Op_Kind), Loc)));\n+          Object_Definition   =>\n+            New_Occurrence_Of (RTE (RE_Prim_Op_Kind), Loc)));\n       return C;\n    end Build_C;\n \n@@ -142,7 +143,7 @@ package body Exp_Sel is\n       Cleanup_Block : constant Node_Id :=\n                         Make_Block_Statement (Loc,\n                           Identifier                 =>\n-                            New_Reference_To (Blk_Ent, Loc),\n+                            New_Occurrence_Of (Blk_Ent, Loc),\n                           Declarations               => No_List,\n                           Handled_Statement_Sequence =>\n                             Make_Handled_Sequence_Of_Statements (Loc,\n@@ -181,10 +182,10 @@ package body Exp_Sel is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => K,\n           Object_Definition   =>\n-            New_Reference_To (RTE (RE_Tagged_Kind), Loc),\n+            New_Occurrence_Of (RTE (RE_Tagged_Kind), Loc),\n           Expression          =>\n             Make_Function_Call (Loc,\n-              Name => New_Reference_To (RTE (RE_Get_Tagged_Kind), Loc),\n+              Name => New_Occurrence_Of (RTE (RE_Get_Tagged_Kind), Loc),\n               Parameter_Associations => New_List (Tag_Node))));\n       return K;\n    end Build_K;\n@@ -202,7 +203,7 @@ package body Exp_Sel is\n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => S,\n-          Object_Definition   => New_Reference_To (Standard_Integer, Loc)));\n+          Object_Definition   => New_Occurrence_Of (Standard_Integer, Loc)));\n       return S;\n    end Build_S;\n \n@@ -222,10 +223,10 @@ package body Exp_Sel is\n       if Tagged_Type_Expansion then\n          return\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (S, Loc),\n+             Name       => New_Occurrence_Of (S, Loc),\n              Expression =>\n                Make_Function_Call (Loc,\n-                 Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                 Name => New_Occurrence_Of (RTE (RE_Get_Offset_Index), Loc),\n                  Parameter_Associations => New_List (\n                    Unchecked_Convert_To (RTE (RE_Tag), Obj),\n                    Make_Integer_Literal (Loc, DT_Position (Call_Ent)))));\n@@ -235,10 +236,10 @@ package body Exp_Sel is\n       else\n          return\n            Make_Assignment_Statement (Loc,\n-             Name       => New_Reference_To (S, Loc),\n+             Name       => New_Occurrence_Of (S, Loc),\n              Expression =>\n                Make_Function_Call (Loc,\n-                 Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                 Name => New_Occurrence_Of (RTE (RE_Get_Offset_Index), Loc),\n \n                  Parameter_Associations => New_List (\n \n@@ -251,7 +252,7 @@ package body Exp_Sel is\n                      --  Iface_Typ\n \n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Reference_To (Typ, Loc),\n+                     Prefix => New_Occurrence_Of (Typ, Loc),\n                      Attribute_Name => Name_Tag),\n \n                      --  Position"}, {"sha": "ce313c6c4b39af4d52fd66d18786fdbc4f8cd782", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1171,7 +1171,7 @@ package body Exp_Strm is\n                  Make_Raise_Constraint_Error (Loc,\n                    Condition => Make_Op_Ne (Loc,\n                                   Left_Opnd  =>\n-                                    New_Reference_To\n+                                    New_Occurrence_Of\n                                       (Defining_Identifier (Decl), Loc),\n                                   Right_Opnd =>\n                                     New_Copy_Tree (Node (Discr_Elmt))),\n@@ -1600,15 +1600,15 @@ package body Exp_Strm is\n           Parameter_Type      =>\n           Make_Access_Definition (Loc,\n              Null_Exclusion_Present => True,\n-             Subtype_Mark => New_Reference_To (\n+             Subtype_Mark => New_Occurrence_Of (\n                Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc))));\n \n       if Nam /= TSS_Stream_Input then\n          Append_To (Profile,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n              Out_Present         => (Nam = TSS_Stream_Read),\n-             Parameter_Type      => New_Reference_To (Typ, Loc)));\n+             Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n       end if;\n \n       return Profile;\n@@ -1644,7 +1644,7 @@ package body Exp_Strm is\n               Parameter_Type =>\n                 Make_Access_Definition (Loc,\n                   Null_Exclusion_Present => True,\n-                  Subtype_Mark => New_Reference_To (\n+                  Subtype_Mark => New_Occurrence_Of (\n                     Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc)))),\n \n           Result_Definition => New_Occurrence_Of (Typ, Loc));\n@@ -1688,7 +1688,7 @@ package body Exp_Strm is\n               Parameter_Type =>\n                 Make_Access_Definition (Loc,\n                   Null_Exclusion_Present => True,\n-                  Subtype_Mark => New_Reference_To (\n+                  Subtype_Mark => New_Occurrence_Of (\n                     Class_Wide_Type (RTE (RE_Root_Stream_Type)), Loc))),\n \n             Make_Parameter_Specification (Loc,"}, {"sha": "001bc5b728c66e4ef739a71b6fe1c8bc3b2a625c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -718,7 +718,7 @@ package body Exp_Util is\n \n          --  a) Storage pool\n \n-         Actuals := New_List (New_Reference_To (Pool_Id, Loc));\n+         Actuals := New_List (New_Occurrence_Of (Pool_Id, Loc));\n \n          if Is_Allocate then\n \n@@ -741,7 +741,7 @@ package body Exp_Util is\n \n             if Needs_Finalization (Desig_Typ) then\n                Fin_Mas_Id  := Finalization_Master (Ptr_Typ);\n-               Fin_Mas_Act := New_Reference_To (Fin_Mas_Id, Loc);\n+               Fin_Mas_Act := New_Occurrence_Of (Fin_Mas_Id, Loc);\n \n                --  Handle the case where the master is actually a pointer to a\n                --  master. This case arises in build-in-place functions.\n@@ -769,7 +769,7 @@ package body Exp_Util is\n \n                Append_To (Actuals,\n                  Make_Attribute_Reference (Loc,\n-                   Prefix         => New_Reference_To (Fin_Addr_Id, Loc),\n+                   Prefix         => New_Occurrence_Of (Fin_Addr_Id, Loc),\n                    Attribute_Name => Name_Unrestricted_Access));\n             else\n                Append_To (Actuals, Make_Null (Loc));\n@@ -780,11 +780,11 @@ package body Exp_Util is\n          --  f) Storage_Size\n          --  g) Alignment\n \n-         Append_To (Actuals, New_Reference_To (Addr_Id, Loc));\n-         Append_To (Actuals, New_Reference_To (Size_Id, Loc));\n+         Append_To (Actuals, New_Occurrence_Of (Addr_Id, Loc));\n+         Append_To (Actuals, New_Occurrence_Of (Size_Id, Loc));\n \n          if Is_Allocate or else not Is_Class_Wide_Type (Desig_Typ) then\n-            Append_To (Actuals, New_Reference_To (Alig_Id, Loc));\n+            Append_To (Actuals, New_Occurrence_Of (Alig_Id, Loc));\n \n          --  For deallocation of class wide types we obtain the value of\n          --  alignment from the Type Specific Record of the deallocated object.\n@@ -831,7 +831,7 @@ package body Exp_Util is\n                  and then Is_Type (Entity (Temp))\n                then\n                   Flag_Expr :=\n-                    New_Reference_To\n+                    New_Occurrence_Of\n                       (Boolean_Literals\n                          (Needs_Finalization (Entity (Temp))), Loc);\n \n@@ -875,21 +875,21 @@ package body Exp_Util is\n                   Flag_Expr :=\n                     Make_Function_Call (Loc,\n                       Name                   =>\n-                        New_Reference_To (RTE (RE_Needs_Finalization), Loc),\n+                        New_Occurrence_Of (RTE (RE_Needs_Finalization), Loc),\n                       Parameter_Associations => New_List (Param));\n \n                --  Processing for generic actuals\n \n                elsif Is_Generic_Actual_Type (Desig_Typ) then\n                   Flag_Expr :=\n-                    New_Reference_To (Boolean_Literals\n+                    New_Occurrence_Of (Boolean_Literals\n                       (Needs_Finalization (Base_Type (Desig_Typ))), Loc);\n \n                --  The object does not require any specialized checks, it is\n                --  known to be controlled.\n \n                else\n-                  Flag_Expr := New_Reference_To (Standard_True, Loc);\n+                  Flag_Expr := New_Occurrence_Of (Standard_True, Loc);\n                end if;\n \n                --  Create the temporary which represents the finalization state\n@@ -902,23 +902,23 @@ package body Exp_Util is\n                    Defining_Identifier => Flag_Id,\n                    Constant_Present    => True,\n                    Object_Definition   =>\n-                     New_Reference_To (Standard_Boolean, Loc),\n+                     New_Occurrence_Of (Standard_Boolean, Loc),\n                     Expression          => Flag_Expr));\n \n-               Append_To (Actuals, New_Reference_To (Flag_Id, Loc));\n+               Append_To (Actuals, New_Occurrence_Of (Flag_Id, Loc));\n             end;\n \n          --  The object is not controlled\n \n          else\n-            Append_To (Actuals, New_Reference_To (Standard_False, Loc));\n+            Append_To (Actuals, New_Occurrence_Of (Standard_False, Loc));\n          end if;\n \n          --  i) On_Subpool\n \n          if Is_Allocate then\n             Append_To (Actuals,\n-              New_Reference_To (Boolean_Literals (Present (Subpool)), Loc));\n+              New_Occurrence_Of (Boolean_Literals (Present (Subpool)), Loc));\n          end if;\n \n          --  Step 2: Build a wrapper Allocate / Deallocate which internally\n@@ -950,37 +950,37 @@ package body Exp_Util is\n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Make_Temporary (Loc, 'P'),\n                      Parameter_Type =>\n-                       New_Reference_To (RTE (RE_Root_Storage_Pool), Loc)),\n+                       New_Occurrence_Of (RTE (RE_Root_Storage_Pool), Loc)),\n \n                   --  A : [out] Address\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Addr_Id,\n                      Out_Present         => Is_Allocate,\n                      Parameter_Type      =>\n-                       New_Reference_To (RTE (RE_Address), Loc)),\n+                       New_Occurrence_Of (RTE (RE_Address), Loc)),\n \n                   --  S : Storage_Count\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Size_Id,\n                      Parameter_Type      =>\n-                       New_Reference_To (RTE (RE_Storage_Count), Loc)),\n+                       New_Occurrence_Of (RTE (RE_Storage_Count), Loc)),\n \n                   --  L : Storage_Count\n \n                    Make_Parameter_Specification (Loc,\n                      Defining_Identifier => Alig_Id,\n                      Parameter_Type      =>\n-                       New_Reference_To (RTE (RE_Storage_Count), Loc)))),\n+                       New_Occurrence_Of (RTE (RE_Storage_Count), Loc)))),\n \n              Declarations => No_List,\n \n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (\n                    Make_Procedure_Call_Statement (Loc,\n-                     Name => New_Reference_To (Proc_To_Call, Loc),\n+                     Name => New_Occurrence_Of (Proc_To_Call, Loc),\n                      Parameter_Associations => Actuals)))));\n \n          --  The newly generated Allocate / Deallocate becomes the default\n@@ -1009,7 +1009,7 @@ package body Exp_Util is\n       else\n          return\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Reference_To (RTE (RE), Loc));\n+             Name => New_Occurrence_Of (RTE (RE), Loc));\n       end if;\n    end Build_Runtime_Call;\n \n@@ -2097,11 +2097,11 @@ package body Exp_Util is\n          begin\n             Rewrite (Subtype_Indic,\n               Make_Subtype_Indication (Loc,\n-                Subtype_Mark => New_Reference_To (Unc_Type, Loc),\n+                Subtype_Mark => New_Occurrence_Of (Unc_Type, Loc),\n                 Constraint =>\n                   Make_Index_Or_Discriminant_Constraint (Loc,\n                     Constraints => New_List\n-                      (New_Reference_To (Slice_Type, Loc)))));\n+                      (New_Occurrence_Of (Slice_Type, Loc)))));\n \n             --  This subtype indication may be used later for constraint checks\n             --  we better make sure that if a variable was used as a bound of\n@@ -2113,7 +2113,7 @@ package body Exp_Util is\n       elsif Ekind (Exp_Typ) = E_String_Literal_Subtype then\n          Rewrite (Subtype_Indic,\n            Make_Subtype_Indication (Loc,\n-             Subtype_Mark => New_Reference_To (Unc_Type, Loc),\n+             Subtype_Mark => New_Occurrence_Of (Unc_Type, Loc),\n              Constraint =>\n                Make_Index_Or_Discriminant_Constraint (Loc,\n                  Constraints => New_List (\n@@ -2169,7 +2169,7 @@ package body Exp_Util is\n             Insert_Action (N,\n               Make_Subtype_Declaration (Loc,\n                 Defining_Identifier => T,\n-                Subtype_Indication  => New_Reference_To (Exp_Typ, Loc)));\n+                Subtype_Indication  => New_Occurrence_Of (Exp_Typ, Loc)));\n \n             --  This type is marked as an itype even though it has an explicit\n             --  declaration since otherwise Is_Generic_Actual_Type can get\n@@ -2180,7 +2180,7 @@ package body Exp_Util is\n             Set_Associated_Node_For_Itype (T, Exp);\n          end if;\n \n-         Rewrite (Subtype_Indic, New_Reference_To (T, Loc));\n+         Rewrite (Subtype_Indic, New_Occurrence_Of (T, Loc));\n \n       --  Nothing needs to be done for private types with unknown discriminants\n       --  if the underlying type is not an unconstrained composite type or it\n@@ -5532,7 +5532,7 @@ package body Exp_Util is\n                  Attribute_Name => Name_Size),\n              Right_Opnd =>\n                Make_Attribute_Reference (Loc,\n-                 Prefix => New_Reference_To (Constr_Root, Loc),\n+                 Prefix => New_Occurrence_Of (Constr_Root, Loc),\n                  Attribute_Name => Name_Object_Size));\n       else\n          --  subtype rg__xx is\n@@ -5552,7 +5552,7 @@ package body Exp_Util is\n           Defining_Identifier => Range_Type,\n           Subtype_Indication =>\n             Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Reference_To (RTE (RE_Storage_Offset), Loc),\n+              Subtype_Mark => New_Occurrence_Of (RTE (RE_Storage_Offset), Loc),\n               Constraint => Make_Range_Constraint (Loc,\n                 Range_Expression =>\n                   Make_Range (Loc,\n@@ -5571,11 +5571,11 @@ package body Exp_Util is\n           Defining_Identifier => Str_Type,\n           Subtype_Indication =>\n             Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Reference_To (RTE (RE_Storage_Array), Loc),\n+              Subtype_Mark => New_Occurrence_Of (RTE (RE_Storage_Array), Loc),\n               Constraint =>\n                 Make_Index_Or_Discriminant_Constraint (Loc,\n                   Constraints =>\n-                    New_List (New_Reference_To (Range_Type, Loc))))));\n+                    New_List (New_Occurrence_Of (Range_Type, Loc))))));\n \n       --  type Equiv_T is record\n       --    [ _parent : Tnn; ]\n@@ -5602,7 +5602,7 @@ package body Exp_Util is\n              Component_Definition =>\n                Make_Component_Definition (Loc,\n                  Aliased_Present    => False,\n-                 Subtype_Indication => New_Reference_To (Constr_Root, Loc))));\n+                 Subtype_Indication => New_Occurrence_Of (Constr_Root, Loc))));\n       end if;\n \n       Append_To (Comp_List,\n@@ -5611,7 +5611,7 @@ package body Exp_Util is\n           Component_Definition =>\n             Make_Component_Definition (Loc,\n               Aliased_Present    => False,\n-              Subtype_Indication => New_Reference_To (Str_Type, Loc))));\n+              Subtype_Indication => New_Occurrence_Of (Str_Type, Loc))));\n \n       Append_To (List_Def,\n         Make_Full_Type_Declaration (Loc,\n@@ -5882,7 +5882,7 @@ package body Exp_Util is\n \n          Set_Full_View (Priv_Subtyp, Full_Subtyp);\n \n-         return New_Reference_To (Priv_Subtyp, Loc);\n+         return New_Occurrence_Of (Priv_Subtyp, Loc);\n \n       elsif Is_Array_Type (Unc_Typ) then\n          for J in 1 .. Number_Dimensions (Unc_Typ) loop\n@@ -5947,15 +5947,15 @@ package body Exp_Util is\n             Append_To (List_Constr,\n               Make_Selected_Component (Loc,\n                 Prefix        => Duplicate_Subexpr_No_Checks (E),\n-                Selector_Name => New_Reference_To (D, Loc)));\n+                Selector_Name => New_Occurrence_Of (D, Loc)));\n \n             Next_Discriminant (D);\n          end loop;\n       end if;\n \n       return\n         Make_Subtype_Indication (Loc,\n-          Subtype_Mark => New_Reference_To (Unc_Typ, Loc),\n+          Subtype_Mark => New_Occurrence_Of (Unc_Typ, Loc),\n           Constraint   =>\n             Make_Index_Or_Discriminant_Constraint (Loc,\n               Constraints => List_Constr));\n@@ -6696,7 +6696,7 @@ package body Exp_Util is\n       then\n          Def_Id := Make_Temporary (Loc, 'R', Exp);\n          Set_Etype (Def_Id, Exp_Type);\n-         Res := New_Reference_To (Def_Id, Loc);\n+         Res := New_Occurrence_Of (Def_Id, Loc);\n \n          --  If the expression is a packed reference, it must be reanalyzed and\n          --  expanded, depending on context. This is the case for actuals where\n@@ -6713,7 +6713,7 @@ package body Exp_Util is\n          E :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Def_Id,\n-             Object_Definition   => New_Reference_To (Exp_Type, Loc),\n+             Object_Definition   => New_Occurrence_Of (Exp_Type, Loc),\n              Constant_Present    => True,\n              Expression          => Relocate_Node (Exp));\n \n@@ -6726,13 +6726,13 @@ package body Exp_Util is\n       elsif Nkind (Exp) = N_Explicit_Dereference then\n          Def_Id := Make_Temporary (Loc, 'R', Exp);\n          Res :=\n-           Make_Explicit_Dereference (Loc, New_Reference_To (Def_Id, Loc));\n+           Make_Explicit_Dereference (Loc, New_Occurrence_Of (Def_Id, Loc));\n \n          Insert_Action (Exp,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Def_Id,\n              Object_Definition   =>\n-               New_Reference_To (Etype (Prefix (Exp)), Loc),\n+               New_Occurrence_Of (Etype (Prefix (Exp)), Loc),\n              Constant_Present    => True,\n              Expression          => Relocate_Node (Prefix (Exp))));\n \n@@ -6767,23 +6767,23 @@ package body Exp_Util is\n             --  a controlled temporary.\n \n             Def_Id := Make_Temporary (Loc, 'R', Exp);\n-            Res := New_Reference_To (Def_Id, Loc);\n+            Res := New_Occurrence_Of (Def_Id, Loc);\n \n             Insert_Action (Exp,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Def_Id,\n-                Subtype_Mark        => New_Reference_To (Exp_Type, Loc),\n+                Subtype_Mark        => New_Occurrence_Of (Exp_Type, Loc),\n                 Name                => Relocate_Node (Exp)));\n \n          else\n             Def_Id := Make_Temporary (Loc, 'R', Exp);\n             Set_Etype (Def_Id, Exp_Type);\n-            Res := New_Reference_To (Def_Id, Loc);\n+            Res := New_Occurrence_Of (Def_Id, Loc);\n \n             E :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Def_Id,\n-                Object_Definition   => New_Reference_To (Exp_Type, Loc),\n+                Object_Definition   => New_Occurrence_Of (Exp_Type, Loc),\n                 Constant_Present    => not Is_Variable (Exp),\n                 Expression          => Relocate_Node (Exp));\n \n@@ -6828,16 +6828,16 @@ package body Exp_Util is\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Def_Id,\n                 Subtype_Mark        =>\n-                  New_Reference_To (Base_Type (Etype (Prefix (Exp))), Loc),\n+                  New_Occurrence_Of (Base_Type (Etype (Prefix (Exp))), Loc),\n                 Name                => Relocate_Node (Prefix (Exp))));\n \n          else\n-            Res := New_Reference_To (Def_Id, Loc);\n+            Res := New_Occurrence_Of (Def_Id, Loc);\n \n             Insert_Action (Exp,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Def_Id,\n-                Subtype_Mark        => New_Reference_To (Exp_Type, Loc),\n+                Subtype_Mark        => New_Occurrence_Of (Exp_Type, Loc),\n                 Name                => Relocate_Node (Exp)));\n          end if;\n \n@@ -6910,15 +6910,15 @@ package body Exp_Util is\n          --  and \"copies\" the returned object.\n \n          if GNATprove_Mode then\n-            Res := New_Reference_To (Def_Id, Loc);\n+            Res := New_Occurrence_Of (Def_Id, Loc);\n             Ref_Type := Exp_Type;\n \n          --  Regular expansion utilizing an access type and 'reference\n \n          else\n             Res :=\n               Make_Explicit_Dereference (Loc,\n-                Prefix => New_Reference_To (Def_Id, Loc));\n+                Prefix => New_Occurrence_Of (Def_Id, Loc));\n \n             --  Generate:\n             --    type Ann is access all <Exp_Type>;\n@@ -6932,7 +6932,7 @@ package body Exp_Util is\n                   Make_Access_To_Object_Definition (Loc,\n                     All_Present        => True,\n                     Subtype_Indication =>\n-                      New_Reference_To (Exp_Type, Loc)));\n+                      New_Occurrence_Of (Exp_Type, Loc)));\n \n             Insert_Action (Exp, Ptr_Typ_Decl);\n          end if;\n@@ -6981,7 +6981,7 @@ package body Exp_Util is\n          Insert_Action (Exp,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Def_Id,\n-             Object_Definition   => New_Reference_To (Ref_Type, Loc),\n+             Object_Definition   => New_Occurrence_Of (Ref_Type, Loc),\n              Constant_Present    => True,\n              Expression          => New_Exp));\n       end if;"}, {"sha": "d6da132cb46e6dd1d28083becffa2d06406dbc61", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -350,7 +350,7 @@ package body Freeze is\n          then\n             Call_Name := New_Copy (Name (N));\n          else\n-            Call_Name := New_Reference_To (Old_S, Loc);\n+            Call_Name := New_Occurrence_Of (Old_S, Loc);\n          end if;\n \n       else\n@@ -432,7 +432,7 @@ package body Freeze is\n \n       if Present (Formal) then\n          while Present (Formal) loop\n-            Append (New_Reference_To (Formal, Loc), Actuals);\n+            Append (New_Occurrence_Of (Formal, Loc), Actuals);\n             Next_Formal (Formal);\n          end loop;\n       end if;"}, {"sha": "ec9a916be0b99ad9282f72ee056d53d00aae3bf2", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -429,9 +429,23 @@ package body Util is\n             Error_Msg_SC -- CODEFIX\n               (\"|extra \"\"(\"\" ignored\");\n \n+         --  Note: the following error used to be labeled as a non-serious\n+         --  error like the other similar messages here (with a | at the start\n+         --  of the message). But this caused some annoying cascaded errors\n+         --  that were confusing, as shown by this example:\n+\n+         --          A : array (1 .. 9) of Integer :=\n+         --            ((1 .. 2) => 0,\n+         --             1  2   3\n+         --       >>> positional aggregate cannot have one component\n+         --       >>> named association cannot follow positional association\n+         --       >>> extra \")\" ignored\n+\n+         --  So we decided to label it as serious after all\n+\n          elsif T = Tok_Right_Paren then\n             Error_Msg_SC -- CODEFIX\n-              (\"|extra \"\")\"\" ignored\");\n+              (\"extra \"\")\"\" ignored\");\n \n          elsif T = Tok_Semicolon then\n             Error_Msg_SC -- CODEFIX"}, {"sha": "60e47f83afd03151a090e1a28ee1d44b0363e609", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -806,15 +806,15 @@ package body Rtsfind is\n       Scop : Entity_Id;\n \n    begin\n-      Nam  := New_Reference_To (U.Entity, Standard_Location);\n+      Nam  := New_Occurrence_Of (U.Entity, Standard_Location);\n       Scop := Scope (U.Entity);\n \n       if Nkind (N) = N_Defining_Program_Unit_Name then\n          while Scop /= Standard_Standard loop\n             Nam :=\n               Make_Expanded_Name (Standard_Location,\n                 Chars  => Chars (U.Entity),\n-                Prefix => New_Reference_To (Scop, Standard_Location),\n+                Prefix => New_Occurrence_Of (Scop, Standard_Location),\n                 Selector_Name => Nam);\n             Set_Entity (Nam, U.Entity);\n "}, {"sha": "bb1794444cd76e694b4e949fd83e23da8f53da88", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1377,7 +1377,7 @@ package body Sem_Aggr is\n                Expr :=\n                  Make_Attribute_Reference\n                    (Loc,\n-                    Prefix         => New_Reference_To (Index_Typ, Loc),\n+                    Prefix         => New_Occurrence_Of (Index_Typ, Loc),\n                     Attribute_Name => Name_Val,\n                     Expressions    => New_List (Expr_Pos));\n             end if;\n@@ -1400,7 +1400,7 @@ package body Sem_Aggr is\n             To_Pos :=\n               Make_Attribute_Reference\n                 (Loc,\n-                 Prefix         => New_Reference_To (Index_Typ, Loc),\n+                 Prefix         => New_Occurrence_Of (Index_Typ, Loc),\n                  Attribute_Name => Name_Pos,\n                  Expressions    => New_List (Duplicate_Subexpr (To)));\n \n@@ -1412,7 +1412,7 @@ package body Sem_Aggr is\n             Expr :=\n               Make_Attribute_Reference\n                 (Loc,\n-                 Prefix         => New_Reference_To (Index_Typ, Loc),\n+                 Prefix         => New_Occurrence_Of (Index_Typ, Loc),\n                  Attribute_Name => Name_Val,\n                  Expressions    => New_List (Expr_Pos));\n \n@@ -1432,11 +1432,12 @@ package body Sem_Aggr is\n                   Insert_Action (N,\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Def_Id,\n-                      Object_Definition   => New_Reference_To (Index_Typ, Loc),\n+                      Object_Definition   =>\n+                        New_Occurrence_Of (Index_Typ, Loc),\n                       Constant_Present    => True,\n                       Expression          => Relocate_Node (Expr)));\n \n-                  Expr := New_Reference_To (Def_Id, Loc);\n+                  Expr := New_Occurrence_Of (Def_Id, Loc);\n                end;\n             end if;\n          end if;"}, {"sha": "5d8cc7ebdb8c0d3c5da7b1682095ce1052305687", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -2507,7 +2507,7 @@ package body Sem_Attr is\n \n       when Attribute_Abort_Signal =>\n          Check_Standard_Prefix;\n-         Rewrite (N, New_Reference_To (Stand.Abort_Signal, Loc));\n+         Rewrite (N, New_Occurrence_Of (Stand.Abort_Signal, Loc));\n          Analyze (N);\n \n       ------------\n@@ -2776,7 +2776,7 @@ package body Sem_Attr is\n \n          Set_Etype (N, Base_Type (Entity (P)));\n          Set_Entity (N, Base_Type (Entity (P)));\n-         Rewrite (N, New_Reference_To (Entity (N), Loc));\n+         Rewrite (N, New_Occurrence_Of (Entity (N), Loc));\n          Analyze (N);\n       end Base;\n \n@@ -7783,7 +7783,7 @@ package body Sem_Attr is\n          elsif Is_VAX_Float (P_Type)\n            and then Nkind (Lo_Bound) = N_Identifier\n          then\n-            Rewrite (N, New_Reference_To (Entity (Lo_Bound), Sloc (N)));\n+            Rewrite (N, New_Occurrence_Of (Entity (Lo_Bound), Sloc (N)));\n             Analyze (N);\n \n          else\n@@ -8027,7 +8027,7 @@ package body Sem_Attr is\n          elsif Is_VAX_Float (P_Type)\n            and then Nkind (Hi_Bound) = N_Identifier\n          then\n-            Rewrite (N, New_Reference_To (Entity (Hi_Bound), Sloc (N)));\n+            Rewrite (N, New_Occurrence_Of (Entity (Hi_Bound), Sloc (N)));\n             Analyze (N);\n \n          else"}, {"sha": "958bbb24c58591fd82712f290b053ac299b34198", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -2379,7 +2379,7 @@ package body Sem_Ch10 is\n                 Name =>\n                   Make_Identifier (Loc,\n                     Chars => New_External_Name (Chars (Etype (Nam)), 'E')),\n-                 Expression => New_Reference_To (Standard_True, Loc)));\n+                 Expression => New_Occurrence_Of (Standard_True, Loc)));\n          end if;\n       end if;\n    end Analyze_Task_Body_Stub;\n@@ -3170,7 +3170,7 @@ package body Sem_Ch10 is\n \n       function Build_Ancestor_Name (P : Node_Id) return Node_Id is\n          P_Ref  : constant Node_Id :=\n-                   New_Reference_To (Defining_Entity (P), Loc);\n+                   New_Occurrence_Of (Defining_Entity (P), Loc);\n          P_Spec : Node_Id := P;\n \n       begin\n@@ -3202,14 +3202,14 @@ package body Sem_Ch10 is\n \n       begin\n          if No (Parent_Spec (P_Unit)) then\n-            return New_Reference_To (P_Name, Loc);\n+            return New_Occurrence_Of (P_Name, Loc);\n \n          else\n             Result :=\n               Make_Expanded_Name (Loc,\n                 Chars  => Chars (P_Name),\n                 Prefix => Build_Ancestor_Name (Unit (Parent_Spec (P_Unit))),\n-                Selector_Name => New_Reference_To (P_Name, Loc));\n+                Selector_Name => New_Occurrence_Of (P_Name, Loc));\n             Set_Entity (Result, P_Name);\n             return Result;\n          end if;\n@@ -3945,7 +3945,7 @@ package body Sem_Ch10 is\n                      --  a parent unit that has limited with-clauses.\n \n                      Set_Subtype_Indication (Decl,\n-                       New_Reference_To (Non_Lim_View, Sloc (Def_Id)));\n+                       New_Occurrence_Of (Non_Lim_View, Sloc (Def_Id)));\n                      Set_Etype (Def_Id, Non_Lim_View);\n                      Set_Ekind (Def_Id, Subtype_Kind (Ekind (Non_Lim_View)));\n                      Set_Analyzed (Decl, False);"}, {"sha": "56cdc3d00db51caf5c73bb133deaf851b80c6cac", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -1931,13 +1931,13 @@ package body Sem_Ch12 is\n       Lo :=\n         Make_Attribute_Reference (Loc,\n           Attribute_Name => Name_First,\n-          Prefix         => New_Reference_To (T, Loc));\n+          Prefix         => New_Occurrence_Of (T, Loc));\n       Set_Etype (Lo, T);\n \n       Hi :=\n         Make_Attribute_Reference (Loc,\n           Attribute_Name => Name_Last,\n-          Prefix         => New_Reference_To (T, Loc));\n+          Prefix         => New_Occurrence_Of (T, Loc));\n       Set_Etype (Hi, T);\n \n       Set_Scalar_Range (T,\n@@ -2143,7 +2143,7 @@ package body Sem_Ch12 is\n          then\n             declare\n                Non_Freezing_Ref : constant Node_Id :=\n-                                    New_Reference_To (Id, Sloc (Id));\n+                                    New_Occurrence_Of (Id, Sloc (Id));\n                Decl : Node_Id;\n \n             begin\n@@ -3598,7 +3598,7 @@ package body Sem_Ch12 is\n            Make_Package_Renaming_Declaration (Loc,\n              Defining_Unit_Name =>\n                Make_Defining_Identifier (Loc, Chars (Gen_Unit)),\n-             Name => New_Reference_To (Act_Decl_Id, Loc));\n+             Name => New_Occurrence_Of (Act_Decl_Id, Loc));\n \n          Append (Unit_Renaming, Renaming_List);\n \n@@ -9048,7 +9048,7 @@ package body Sem_Ch12 is\n          Nod :=\n            Make_Package_Renaming_Declaration (Loc,\n              Defining_Unit_Name => New_Copy (Defining_Identifier (Formal)),\n-             Name               => New_Reference_To (Actual_Pack, Loc));\n+             Name               => New_Occurrence_Of (Actual_Pack, Loc));\n \n          Set_Associated_Formal_Package (Defining_Unit_Name (Nod),\n            Defining_Identifier (Formal));\n@@ -11743,7 +11743,7 @@ package body Sem_Ch12 is\n       Decl_Node :=\n         Make_Subtype_Declaration (Loc,\n           Defining_Identifier => Subt,\n-          Subtype_Indication  => New_Reference_To (Act_T, Loc));\n+          Subtype_Indication  => New_Occurrence_Of (Act_T, Loc));\n \n       if Is_Private_Type (Act_T) then\n          Set_Has_Private_View (Subtype_Indication (Decl_Node));\n@@ -11806,7 +11806,7 @@ package body Sem_Ch12 is\n               Make_Subtype_Declaration (Loc,\n                 Defining_Identifier => New_Corr,\n                 Subtype_Indication  =>\n-                  New_Reference_To (Corr_Rec, Loc));\n+                  New_Occurrence_Of (Corr_Rec, Loc));\n             Append_To (Decl_Nodes, Corr_Decl);\n \n             if Ekind (Act_T) = E_Task_Type then"}, {"sha": "cf80e8d68489bc029f0ac5abf396e4bde6e0c8d7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -5610,7 +5610,7 @@ package body Sem_Ch13 is\n             if Operating_Mode = Check_Semantics and then ASIS_Mode then\n                AtM_Nod :=\n                  Make_Attribute_Definition_Clause (Loc,\n-                   Name       => New_Reference_To (Base_Type (Rectype), Loc),\n+                   Name       => New_Occurrence_Of (Base_Type (Rectype), Loc),\n                    Chars      => Name_Alignment,\n                    Expression => Relocate_Node (Expression (M)));\n \n@@ -6861,14 +6861,14 @@ package body Sem_Ch13 is\n                        Defining_Identifier => BTemp,\n                        Constant_Present    => True,\n                          Object_Definition =>\n-                           New_Reference_To (Standard_Boolean, Loc),\n+                           New_Occurrence_Of (Standard_Boolean, Loc),\n                          Expression        => Expr_M)),\n \n                    Handled_Statement_Sequence =>\n                      Make_Handled_Sequence_Of_Statements (Loc,\n                        Statements => New_List (\n                          Make_Simple_Return_Statement (Loc,\n-                           Expression => New_Reference_To (BTemp, Loc)))));\n+                           Expression => New_Occurrence_Of (BTemp, Loc)))));\n \n                --  Insert declaration before freeze node and body after\n \n@@ -10266,7 +10266,7 @@ package body Sem_Ch13 is\n          Out_P   : constant Boolean := (Nam = TSS_Stream_Read);\n          Formals : List_Id;\n          Spec    : Node_Id;\n-         T_Ref   : constant Node_Id := New_Reference_To (Etyp, Loc);\n+         T_Ref   : constant Node_Id := New_Occurrence_Of (Etyp, Loc);\n \n       begin\n          Subp_Id := Make_Defining_Identifier (Loc, Sname);\n@@ -10280,7 +10280,7 @@ package body Sem_Ch13 is\n                         Parameter_Type =>\n                           Make_Access_Definition (Loc,\n                             Subtype_Mark =>\n-                              New_Reference_To (\n+                              New_Occurrence_Of (\n                                 Designated_Type (Etype (F)), Loc))));\n \n          if Nam = TSS_Stream_Input then\n@@ -10350,7 +10350,7 @@ package body Sem_Ch13 is\n       Subp_Decl :=\n         Make_Subprogram_Renaming_Declaration (Loc,\n           Specification => Build_Spec,\n-          Name => New_Reference_To (Subp, Loc));\n+          Name => New_Occurrence_Of (Subp, Loc));\n \n       if Defer_Declaration then\n          Set_TSS (Base_Type (Ent), Subp_Id);"}, {"sha": "fc5c4f2140a0749488166d53ebe461bdbc434f53", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -5651,7 +5651,7 @@ package body Sem_Ch3 is\n                 Defining_Identifier => Derived_Type,\n                 Subtype_Indication  =>\n                   Make_Subtype_Indication (Loc,\n-                    Subtype_Mark => New_Reference_To (Implicit_Base, Loc),\n+                    Subtype_Mark => New_Occurrence_Of (Implicit_Base, Loc),\n                     Constraint => Constraint (Indic)));\n \n             Rewrite (N, New_Indic);\n@@ -6026,13 +6026,13 @@ package body Sem_Ch3 is\n                Lo :=\n                   Make_Attribute_Reference (Loc,\n                     Attribute_Name => Name_First,\n-                    Prefix         => New_Reference_To (Derived_Type, Loc));\n+                    Prefix         => New_Occurrence_Of (Derived_Type, Loc));\n                Set_Etype (Lo, Derived_Type);\n \n                Hi :=\n                   Make_Attribute_Reference (Loc,\n                     Attribute_Name => Name_Last,\n-                    Prefix         => New_Reference_To (Derived_Type, Loc));\n+                    Prefix         => New_Occurrence_Of (Derived_Type, Loc));\n                Set_Etype (Hi, Derived_Type);\n \n                Set_Scalar_Range (Derived_Type,\n@@ -9276,7 +9276,7 @@ package body Sem_Ch3 is\n           Defining_Identifier => Subt,\n           Subtype_Indication  =>\n             Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Reference_To (Par, Loc),\n+              Subtype_Mark => New_Occurrence_Of (Par, Loc),\n               Constraint   => New_Copy_Tree (Constr)));\n \n       --  If this is a component subtype for an outer itype, it is not\n@@ -9468,7 +9468,7 @@ package body Sem_Ch3 is\n              Chars                        => Name_Implemented,\n              Pragma_Argument_Associations => New_List (\n                Make_Pragma_Argument_Association (Loc,\n-                 Expression => New_Reference_To (Subp, Loc)),\n+                 Expression => New_Occurrence_Of (Subp, Loc)),\n \n                Make_Pragma_Argument_Association (Loc,\n                  Expression => Make_Identifier (Loc, Iface_Kind))));\n@@ -16664,7 +16664,7 @@ package body Sem_Ch3 is\n       then\n          D := First_Discriminant (Derived_Base);\n          while Present (D) loop\n-            Append_Elmt (New_Reference_To (D, Loc), Discs);\n+            Append_Elmt (New_Occurrence_Of (D, Loc), Discs);\n             Next_Discriminant (D);\n          end loop;\n       end if;\n@@ -18877,7 +18877,7 @@ package body Sem_Ch3 is\n \n          elsif Ekind (Priv_Dep) = E_Incomplete_Subtype then\n             Set_Subtype_Indication\n-              (Parent (Priv_Dep), New_Reference_To (Full_T, Sloc (Priv_Dep)));\n+              (Parent (Priv_Dep), New_Occurrence_Of (Full_T, Sloc (Priv_Dep)));\n             Set_Etype (Priv_Dep, Full_T);\n             Set_Ekind (Priv_Dep, Subtype_Kind (Ekind (Full_T)));\n             Set_Analyzed (Parent (Priv_Dep), False);\n@@ -18996,15 +18996,15 @@ package body Sem_Ch3 is\n             Rewrite (Lo,\n               Make_Attribute_Reference (Sloc (Lo),\n                 Attribute_Name => Name_First,\n-                Prefix => New_Reference_To (T, Sloc (Lo))));\n+                Prefix => New_Occurrence_Of (T, Sloc (Lo))));\n             Analyze_And_Resolve (Lo);\n          end if;\n \n          if Nkind (Hi) = N_String_Literal then\n             Rewrite (Hi,\n               Make_Attribute_Reference (Sloc (Hi),\n                 Attribute_Name => Name_First,\n-                Prefix => New_Reference_To (T, Sloc (Hi))));\n+                Prefix => New_Occurrence_Of (T, Sloc (Hi))));\n             Analyze_And_Resolve (Hi);\n          end if;\n "}, {"sha": "8f93ad3970be6a2e3c57927d77be8543ee939221", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -6644,7 +6644,7 @@ package body Sem_Ch4 is\n          --  can never assign to its prefix). The Comes_From_Source attribute\n          --  needs to be propagated for accurate warnings.\n \n-         Ref := New_Reference_To (E, Sloc (P));\n+         Ref := New_Occurrence_Of (E, Sloc (P));\n          Set_Comes_From_Source (Ref, Comes_From_Source (P));\n          Generate_Reference (E, Ref);\n       end if;\n@@ -7728,7 +7728,7 @@ package body Sem_Ch4 is\n                   Success := False;\n \n                   if No (Matching_Op) then\n-                     Hom_Ref := New_Reference_To (Hom, Sloc (Subprog));\n+                     Hom_Ref := New_Occurrence_Of (Hom, Sloc (Subprog));\n                      Set_Etype (Call_Node, Any_Type);\n                      Set_Parent (Call_Node, Parent (Node_To_Replace));\n \n@@ -8188,7 +8188,7 @@ package body Sem_Ch4 is\n                Set_Is_Overloaded (Call_Node, False);\n \n                if No (Matching_Op) then\n-                  Prim_Op_Ref := New_Reference_To (Prim_Op, Sloc (Subprog));\n+                  Prim_Op_Ref := New_Occurrence_Of (Prim_Op, Sloc (Subprog));\n                   Candidate := Prim_Op;\n \n                   Set_Parent (Call_Node, Parent (Node_To_Replace));"}, {"sha": "927d566f883474ef4a0fd7aa2695f3bd0fa62770", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -2039,15 +2039,15 @@ package body Sem_Ch5 is\n                    Defining_Identifier => Subt,\n                    Subtype_Indication  =>\n                       Make_Subtype_Indication (Loc,\n-                        Subtype_Mark => New_Reference_To (Indx, Loc),\n+                        Subtype_Mark => New_Occurrence_Of (Indx, Loc),\n                         Constraint   =>\n                           Make_Range_Constraint (Loc, Relocate_Node (DS))));\n                Insert_Before (Loop_Nod, Decl);\n                Analyze (Decl);\n \n                Rewrite (DS,\n                  Make_Attribute_Reference (Loc,\n-                   Prefix         => New_Reference_To (Subt, Loc),\n+                   Prefix         => New_Occurrence_Of (Subt, Loc),\n                    Attribute_Name => Attribute_Name (DS)));\n \n                Analyze (DS);"}, {"sha": "b3aeb9c63e5eb9a8c4d860bea85769dd20778413", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -2187,10 +2187,10 @@ package body Sem_Ch6 is\n                   Make_Defining_Identifier (Loc, Name_uMaster),\n                 Constant_Present => True,\n                 Object_Definition =>\n-                  New_Reference_To (RTE (RE_Master_Id), Loc),\n+                  New_Occurrence_Of (RTE (RE_Master_Id), Loc),\n                 Expression =>\n                   Make_Explicit_Dereference (Loc,\n-                    New_Reference_To (RTE (RE_Current_Master), Loc)));\n+                    New_Occurrence_Of (RTE (RE_Current_Master), Loc)));\n \n             if Present (Declarations (N)) then\n                Prepend (Decl, Declarations (N));\n@@ -5588,7 +5588,7 @@ package body Sem_Ch6 is\n                    Null_Exclusion_Present =>\n                      Null_Exclusion_Present (Parent (Formal)),\n                    Parameter_Type =>\n-                     New_Reference_To (Etype (Formal), Loc),\n+                     New_Occurrence_Of (Etype (Formal), Loc),\n                    Expression =>\n                      Copy_Separate_Tree (Expression (Parent (Formal)))));\n \n@@ -5682,11 +5682,11 @@ package body Sem_Ch6 is\n \n          begin\n             Append_To (Actual_List,\n-              New_Reference_To (Defining_Identifier (New_Obj), Loc));\n+              New_Occurrence_Of (Defining_Identifier (New_Obj), Loc));\n \n             Formal := First_Formal (Spec_Id);\n             while Present (Formal) loop\n-               Append_To (Actual_List, New_Reference_To (Formal, Loc));\n+               Append_To (Actual_List, New_Occurrence_Of (Formal, Loc));\n \n                --  Avoid spurious warning on unreferenced formals\n \n@@ -5696,7 +5696,7 @@ package body Sem_Ch6 is\n \n             Proc_Call :=\n               Make_Procedure_Call_Statement (Loc,\n-                Name => New_Reference_To (Proc_Id, Loc),\n+                Name => New_Occurrence_Of (Proc_Id, Loc),\n                 Parameter_Associations => Actual_List);\n          end;\n \n@@ -5720,7 +5720,7 @@ package body Sem_Ch6 is\n \n                    Make_Simple_Return_Statement (Loc,\n                      Expression =>\n-                       New_Reference_To\n+                       New_Occurrence_Of\n                          (Defining_Identifier (New_Obj), Loc)))));\n \n          Rewrite (Ret_Node, Blk_Stmt);\n@@ -9693,13 +9693,13 @@ package body Sem_Ch6 is\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => A,\n              Parameter_Type      =>\n-               New_Reference_To (Etype (First_Formal (S)),\n+               New_Occurrence_Of (Etype (First_Formal (S)),\n                  Sloc (Etype (First_Formal (S))))),\n \n            Make_Parameter_Specification (Loc,\n              Defining_Identifier => B,\n              Parameter_Type      =>\n-               New_Reference_To (Etype (Next_Formal (First_Formal (S))),\n+               New_Occurrence_Of (Etype (Next_Formal (First_Formal (S))),\n                  Sloc (Etype (Next_Formal (First_Formal (S)))))));\n \n          Decl :=\n@@ -9709,7 +9709,7 @@ package body Sem_Ch6 is\n                  Defining_Unit_Name       => Op_Name,\n                  Parameter_Specifications => Formals,\n                  Result_Definition        =>\n-                   New_Reference_To (Standard_Boolean, Loc)));\n+                   New_Occurrence_Of (Standard_Boolean, Loc)));\n \n          --  Insert inequality right after equality if it is explicit or after\n          --  the derived type when implicit. These entities are created only"}, {"sha": "ce636264153aff651e232efd48ddbb077b6bafce", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -3368,7 +3368,7 @@ package body Sem_Ch8 is\n                --  there are no subtypes involved.\n \n                Rewrite (Parameter_Type (Param_Spec),\n-                 New_Reference_To\n+                 New_Occurrence_Of\n                    (Base_Type (Entity (Parameter_Type (Param_Spec))), Loc));\n             end if;\n \n@@ -3470,7 +3470,7 @@ package body Sem_Ch8 is\n \n          Find_Type (Result_Definition (Spec));\n          Rewrite (Result_Definition (Spec),\n-           New_Reference_To\n+           New_Occurrence_Of\n              (Base_Type (Entity (Result_Definition (Spec))), Loc));\n \n          Body_Node :=\n@@ -6625,10 +6625,10 @@ package body Sem_Ch8 is\n                      Make_Expanded_Name (Sloc (N),\n                        Chars         => Chars (T),\n                        Prefix        => New_Copy (Prefix (Prefix (N))),\n-                       Selector_Name => New_Reference_To (T, Sloc (N))));\n+                       Selector_Name => New_Occurrence_Of (T, Sloc (N))));\n \n                else\n-                  Rewrite (N, New_Reference_To (T, Sloc (N)));\n+                  Rewrite (N, New_Occurrence_Of (T, Sloc (N)));\n                end if;\n \n                Set_Entity (N, T);\n@@ -7836,8 +7836,8 @@ package body Sem_Ch8 is\n                 Name =>\n                   Make_Expanded_Name (Loc,\n                     Chars  => Chars (System_Aux_Id),\n-                    Prefix => New_Reference_To (Scope (System_Aux_Id), Loc),\n-                    Selector_Name => New_Reference_To (System_Aux_Id, Loc)));\n+                    Prefix => New_Occurrence_Of (Scope (System_Aux_Id), Loc),\n+                    Selector_Name => New_Occurrence_Of (System_Aux_Id, Loc)));\n \n             Set_Entity (Name (Withn), System_Aux_Id);\n "}, {"sha": "825eb029cd1cf52524c517763593cde28968f5e2", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -2590,7 +2590,7 @@ package body Sem_Dim is\n \n       Actual_1 :=\n         Make_Type_Conversion (Loc,\n-          Subtype_Mark => New_Reference_To (Standard_Long_Long_Float, Loc),\n+          Subtype_Mark => New_Occurrence_Of (Standard_Long_Long_Float, Loc),\n           Expression   => Relocate_Node (L));\n \n       Actual_2 :=\n@@ -2606,10 +2606,10 @@ package body Sem_Dim is\n \n       New_N :=\n          Make_Type_Conversion (Loc,\n-           Subtype_Mark => New_Reference_To (New_Id, Loc),\n+           Subtype_Mark => New_Occurrence_Of (New_Id, Loc),\n            Expression   =>\n              Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (RE_Expon_LLF), Loc),\n+               Name => New_Occurrence_Of (RTE (RE_Expon_LLF), Loc),\n                Parameter_Associations => New_List (\n                  Actual_1, Actual_2)));\n "}, {"sha": "fff855375e631329dac9f242ddcaa4db4813fe43", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -871,7 +871,7 @@ package body Sem_Prag is\n \n                      if Present (Renamed_Object (Entity (Item))) then\n                         Rewrite (Item,\n-                          New_Reference_To (Item_Id, Sloc (Item)));\n+                          New_Occurrence_Of (Item_Id, Sloc (Item)));\n                         Analyze (Item);\n                      end if;\n \n@@ -2014,7 +2014,7 @@ package body Sem_Prag is\n                --  with a reference to the object.\n \n                if Present (Renamed_Object (Entity (Item))) then\n-                  Rewrite (Item, New_Reference_To (Item_Id, Sloc (Item)));\n+                  Rewrite (Item, New_Occurrence_Of (Item_Id, Sloc (Item)));\n                   Analyze (Item);\n                end if;\n "}, {"sha": "db1eacf14f5b8e24cefac71763f05746f507dbd1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -9842,7 +9842,7 @@ package body Sem_Res is\n \n          Rewrite (N,\n            Make_Qualified_Expression (Loc,\n-             Subtype_Mark => New_Reference_To (Typ, Loc),\n+             Subtype_Mark => New_Occurrence_Of (Typ, Loc),\n              Expression   =>\n                Make_Aggregate (Loc, Expressions => Lits)));\n "}, {"sha": "5062e7eb3951a9d1abda45d1681bf0c33f0f7825", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -710,7 +710,7 @@ package body Sem_Util is\n       Loc := Sloc (N);\n \n       if Nkind (N) = N_Defining_Identifier then\n-         Obj := New_Reference_To (N, Loc);\n+         Obj := New_Occurrence_Of (N, Loc);\n \n          --  If this is a formal parameter of a subprogram declaration, and\n          --  we are compiling the body, we want the declaration for the\n@@ -808,7 +808,7 @@ package body Sem_Util is\n           Defining_Identifier => Subt,\n           Subtype_Indication =>\n             Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Reference_To (T,  Loc),\n+              Subtype_Mark => New_Occurrence_Of (T,  Loc),\n               Constraint  =>\n                 Make_Index_Or_Discriminant_Constraint (Loc,\n                   Constraints => Constraints)));\n@@ -1038,7 +1038,7 @@ package body Sem_Util is\n           Defining_Identifier => Subt,\n           Subtype_Indication =>\n             Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Reference_To (Base_Type (T),  Loc),\n+              Subtype_Mark => New_Occurrence_Of (Base_Type (T),  Loc),\n               Constraint  =>\n                 Make_Index_Or_Discriminant_Constraint (Loc,\n                   Constraints => C)));\n@@ -3874,7 +3874,7 @@ package body Sem_Util is\n                 In_Present  => In_Present (Parent (Formal)),\n                 Out_Present => Out_Present (Parent (Formal)),\n              Parameter_Type =>\n-                  New_Reference_To (Etype (Formal), Loc),\n+                  New_Occurrence_Of (Etype (Formal), Loc),\n                 Expression =>\n                   New_Copy_Tree (Expression (Parent (Formal)))),\n               Plist);"}, {"sha": "524c14f7100bed7c9abfc32aa068ff972857d870", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -203,7 +203,7 @@ package body Tbuild is\n           Make_Selected_Component (Loc,\n             Prefix => New_Copy (Rec),\n             Selector_Name =>\n-              New_Reference_To (First_Tag_Component (Full_Type), Loc)));\n+              New_Occurrence_Of (First_Tag_Component (Full_Type), Loc)));\n    end Make_DT_Access;\n \n    ------------------------\n@@ -718,23 +718,6 @@ package body Tbuild is\n       return Nod;\n    end New_Op_Node;\n \n-   ----------------------\n-   -- New_Reference_To --\n-   ----------------------\n-\n-   function New_Reference_To\n-     (Def_Id : Entity_Id;\n-      Loc    : Source_Ptr) return Node_Id\n-   is\n-      pragma Assert (Present (Def_Id) and then Nkind (Def_Id) in N_Entity);\n-      Occurrence : Node_Id;\n-   begin\n-      Occurrence := New_Node (N_Identifier, Loc);\n-      Set_Chars (Occurrence, Chars (Def_Id));\n-      Set_Entity (Occurrence, Def_Id);\n-      return Occurrence;\n-   end New_Reference_To;\n-\n    -----------------------\n    -- New_Suffixed_Name --\n    -----------------------"}, {"sha": "16d6304d5ebec9208f238c018d2ea9c679d568b5", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e449429213d601e60b19d1d5db6dd761df98c2c5/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=e449429213d601e60b19d1d5db6dd761df98c2c5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -304,13 +304,6 @@ package Tbuild is\n    --  follows: Entity is simply a copy of Def_Id. Etype is a copy of Def_Id\n    --  for types, and a copy of the Etype of Def_Id for other entities.\n \n-   function New_Reference_To\n-     (Def_Id : Entity_Id;\n-      Loc    : Source_Ptr) return Node_Id;\n-   --  This is like New_Occurrence_Of, but it does not set the Etype field. It\n-   --  is used from the expander, where Etype fields are generally not set,\n-   --  since they are set when the expanded tree is reanalyzed.\n-\n    function New_Suffixed_Name\n      (Related_Id : Name_Id;\n       Suffix     : String) return Name_Id;"}]}