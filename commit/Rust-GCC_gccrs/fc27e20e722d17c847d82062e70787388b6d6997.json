{"sha": "fc27e20e722d17c847d82062e70787388b6d6997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyN2UyMGU3MjJkMTdjODQ3ZDgyMDYyZTcwNzg3Mzg4YjZkNjk5Nw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-29T14:59:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T14:59:26Z"}, "message": "frontend.adb, [...]: Minor reformatting and code clean up.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* frontend.adb, inline.adb, sem_util.adb, sem_res.adb,\n\tprepcomp.ads: Minor reformatting and code clean up.\n\t* exp_ch6.adb (Expand_Actuals): Generate predicate test\n\tunconditionally for case of OUT or IN OUT actual (before this\n\twas generated only for certain subcases, which is wrong, the\n\ttest is always needed).\n\nFrom-SVN: r213208", "tree": {"sha": "86609ef51a606089072c0dc69e1f4a0b146dddb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86609ef51a606089072c0dc69e1f4a0b146dddb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc27e20e722d17c847d82062e70787388b6d6997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27e20e722d17c847d82062e70787388b6d6997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc27e20e722d17c847d82062e70787388b6d6997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27e20e722d17c847d82062e70787388b6d6997/comments", "author": null, "committer": null, "parents": [{"sha": "1c4ff014fe1f6b440b4df75ca6f419ebc00fcac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4ff014fe1f6b440b4df75ca6f419ebc00fcac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4ff014fe1f6b440b4df75ca6f419ebc00fcac0"}], "stats": {"total": 161, "additions": 109, "deletions": 52}, "files": [{"sha": "0a8e374ae83e0aa1428b71d2cf91ed4ccdb1aa0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -1,3 +1,12 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* frontend.adb, inline.adb, sem_util.adb, sem_res.adb,\n+\tprepcomp.ads: Minor reformatting and code clean up.\n+\t* exp_ch6.adb (Expand_Actuals): Generate predicate test\n+\tunconditionally for case of OUT or IN OUT actual (before this\n+\twas generated only for certain subcases, which is wrong, the\n+\ttest is always needed).\n+\n 2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb: Move Has_Defaulted_Discriminants to sem_util."}, {"sha": "724e82ae8d92b5c7702d366d442abb56d483010b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -1743,10 +1743,6 @@ package body Exp_Ch6 is\n             --  be handled separately because the name does not denote an\n             --  overloadable entity.\n \n-            --  If the formal is class-wide the corresponding postcondition\n-            --  procedure does not include a predicate call, so it has to be\n-            --  generated explicitly.\n-\n             if not Is_Init_Proc (Subp)\n               and then (Has_Aspect (E_Actual, Aspect_Predicate)\n                           or else\n@@ -1755,21 +1751,8 @@ package body Exp_Ch6 is\n                         Has_Aspect (E_Actual, Aspect_Static_Predicate))\n               and then Present (Predicate_Function (E_Actual))\n             then\n-               if Is_Entity_Name (Actual)\n-                 or else\n-                   (Is_Derived_Type (E_Actual)\n-                     and then Is_Overloadable (Subp)\n-                     and then Is_Inherited_Operation_For_Type (Subp, E_Actual))\n-               then\n-                  Append_To (Post_Call,\n-                    Make_Predicate_Check (E_Actual, Actual));\n-\n-               elsif Is_Class_Wide_Type (E_Formal)\n-                 and then not Is_Class_Wide_Type (E_Actual)\n-               then\n-                  Append_To (Post_Call,\n-                    Make_Predicate_Check (E_Actual, Actual));\n-               end if;\n+               Append_To (Post_Call,\n+                 Make_Predicate_Check (E_Actual, Actual));\n             end if;\n \n          --  Processing for IN parameters"}, {"sha": "292cab1339d71eb705bcc2eed25580c4cda4d41a", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 75, "deletions": 13, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -71,6 +71,39 @@ procedure Frontend is\n    Config_Pragmas : List_Id;\n    --  Gather configuration pragmas\n \n+   function Need_To_Be_In_The_Dependencies (Pragma_List : List_Id)\n+     return Boolean;\n+   --  Check if a configuration pragmas file that contains the Pragma_List\n+   --  should be a dependency for the source being compiled. Returns\n+   --  False if Pragma_List is Error_List or contains only pragmas\n+   --  Source_File_Name_Project, returns True otherwise.\n+\n+   ------------------------------------\n+   -- Need_To_Be_In_The_Dependencies --\n+   ------------------------------------\n+\n+   function Need_To_Be_In_The_Dependencies (Pragma_List : List_Id)\n+     return Boolean\n+   is\n+      Prag  : Node_Id;\n+      Pname : Name_Id;\n+   begin\n+      if Pragma_List /= Error_List then\n+         Prag := First (Pragma_List);\n+         while Present (Prag) loop\n+            Pname := Pragma_Name (Prag);\n+\n+            if Pname /= Name_Source_File_Name_Project then\n+               return True;\n+            end if;\n+\n+            Next (Prag);\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Need_To_Be_In_The_Dependencies;\n+\n begin\n    --  Carry out package initializations. These are initializations which might\n    --  logically be performed at elaboration time, were it not for the fact\n@@ -144,8 +177,6 @@ begin\n \n       Prag : Node_Id;\n \n-      Temp_File : Boolean;\n-\n    begin\n       --  We always analyze config files with style checks off, since\n       --  we don't want a miscellaneous gnat.adc that is around to\n@@ -166,10 +197,23 @@ begin\n          Name_Len := 8;\n          Source_gnat_adc := Load_Config_File (Name_Enter);\n \n+         --  Case of gnat.adc file present\n+\n          if Source_gnat_adc /= No_Source_File then\n+\n+            --  Parse the gnat.adc file for configuration pragmas\n+\n             Initialize_Scanner (No_Unit, Source_gnat_adc);\n             Config_Pragmas := Par (Configuration_Pragmas => True);\n+\n+            --  We unconditionally add a compilation dependency for gnat.adc\n+            --  so that if it changes, we force a recompilation. This is a\n+            --  fairly recent (2014-03-28) change.\n+\n             Prepcomp.Add_Dependency (Source_gnat_adc);\n+\n+         --  Case of no gnat.adc file present\n+\n          else\n             Config_Pragmas := Empty_List;\n          end if;\n@@ -196,15 +240,17 @@ begin\n       --  Now deal with specified config pragmas files if there are any\n \n       if Opt.Config_File_Names /= null then\n+\n+         --  Loop through config pragmas files\n+\n          for Index in Opt.Config_File_Names'Range loop\n+\n+            --  See if extension is .TMP/.tmp indicating a temporary config\n+            --  file (which we ignore from the dependency point of view).\n+\n             Name_Len := Config_File_Names (Index)'Length;\n             Name_Buffer (1 .. Name_Len) := Config_File_Names (Index).all;\n-            Temp_File :=\n-              Name_Len > 4\n-              and then\n-                (Name_Buffer (Name_Len - 3 .. Name_Len) = \".TMP\"\n-                 or else\n-                 Name_Buffer (Name_Len - 3 .. Name_Len) = \".tmp\");\n+            --  Load the file, error if we did not find it\n \n             Source_Config_File := Load_Config_File (Name_Enter);\n \n@@ -213,13 +259,29 @@ begin\n                  (\"cannot find configuration pragmas file \"\n                   & Config_File_Names (Index).all);\n \n-            elsif not Temp_File then\n-               Prepcomp.Add_Dependency (Source_Config_File);\n+            --  If we did find the file, and it contains pragmas other than\n+            --  Source_File_Name_Project, then we unconditionally add a\n+            --  compilation dependency for it so that if it changes, we force\n+            --  a recompilation. This is a fairly recent (2014-03-28) change.\n+\n+            else\n+\n+               --  Parse the config pragmas file, and accumulate results\n+\n+               Initialize_Scanner (No_Unit, Source_Config_File);\n+\n+               declare\n+                  Pragma_List : constant List_Id :=\n+                    Par (Configuration_Pragmas => True);\n+               begin\n+                  if Need_To_Be_In_The_Dependencies (Pragma_List) then\n+                     Prepcomp.Add_Dependency (Source_Config_File);\n+                  end if;\n+\n+                  Append_List_To (Config_Pragmas, Pragma_List);\n+               end;\n             end if;\n \n-            Initialize_Scanner (No_Unit, Source_Config_File);\n-            Append_List_To\n-              (Config_Pragmas, Par (Configuration_Pragmas => True));\n          end loop;\n       end if;\n "}, {"sha": "4e7f8f96fbf37ed01e6f1264bf474f3e47aea0f1", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -1499,12 +1499,12 @@ package body Inline is\n       --------------------------\n \n       function In_Some_Private_Part (N : Node_Id) return Boolean is\n-         P  : Node_Id := N;\n+         P  : Node_Id;\n          PP : Node_Id;\n+\n       begin\n-         while Present (P)\n-           and then Present (Parent (P))\n-         loop\n+         P := N;\n+         while Present (P) and then Present (Parent (P)) loop\n             PP := Parent (P);\n \n             if Nkind (PP) = N_Package_Specification\n@@ -1515,6 +1515,7 @@ package body Inline is\n \n             P := PP;\n          end loop;\n+\n          return False;\n       end In_Some_Private_Part;\n \n@@ -1541,6 +1542,8 @@ package body Inline is\n          return Nkind (Original_Node (Decl)) = N_Expression_Function;\n       end Is_Expression_Function;\n \n+      --  Local declarations\n+\n       Id : Entity_Id;  --  Procedure or function entity for the subprogram\n \n    --  Start of Can_Be_Inlined_In_GNATprove_Mode\n@@ -2162,9 +2165,10 @@ package body Inline is\n                           or else Has_Pragma_Inline_Always (Spec_Id)\n                           or else (Has_Pragma_Inline (Spec_Id)\n                                     and then ((Optimization_Level > 0\n-                                                and then Ekind (Spec_Id)\n-                                                             = E_Function)\n+                                                and then Ekind (Spec_Id) =\n+                                                                   E_Function)\n                                                or else Front_End_Inlining));\n+\n          Body_To_Analyze : Node_Id;\n \n       --  Start of processing for Check_Body_To_Inline"}, {"sha": "20a69bfbd4cc6594c2b9e4e5f8ef15c96d7a1cfc", "filename": "gcc/ada/prepcomp.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fprepcomp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fprepcomp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.ads?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -31,10 +31,9 @@ with Types; use Types;\n package Prepcomp is\n \n    procedure Add_Dependency (S : Source_File_Index);\n-   --  Add a dependency on a non-source file.\n-   --  This is used internally for the preprocessing data file and the\n-   --  preprocessing definition file, and also externally for non-temporary\n-   --  configuration pragmas files.\n+   --  Add a dependency on a non-source file. This is used internally for the\n+   --  preprocessing data file and the preprocessing definition file, and also\n+   --  externally for non-temporary configuration pragmas files.\n \n    procedure Add_Dependencies;\n    --  Add dependencies on the preprocessing data file and the preprocessing"}, {"sha": "e8051e7dce2216bf8068126bd45801fa95a5ee62", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -2978,7 +2978,7 @@ package body Sem_Res is\n \n       procedure Check_Aliased_Parameter;\n       --  Check rules on aliased parameters and related accessibility rules\n-      --  in (3.10.2 (10.2-10.4)).\n+      --  in (RM 3.10.2 (10.2-10.4)).\n \n       procedure Check_Argument_Order;\n       --  Performs a check for the case where the actuals are all simple\n@@ -3050,32 +3050,32 @@ package body Sem_Res is\n \n                else\n                   Error_Msg_NE (\"untagged actual does not match \"\n-                    & \"aliased formal&\", A, F);\n+                                & \"aliased formal&\", A, F);\n                end if;\n \n             else\n                Error_Msg_NE (\"actual for aliased formal& must be \"\n-                 & \"aliased object\", A, F);\n+                             & \"aliased object\", A, F);\n             end if;\n \n             if Ekind (Nam) = E_Procedure then\n                null;\n \n             elsif Ekind (Etype (Nam)) = E_Anonymous_Access_Type then\n                if Nkind (Parent (N)) = N_Type_Conversion\n-                 and then Type_Access_Level (Etype (Parent (N)))\n-                   < Object_Access_Level (A)\n+                 and then Type_Access_Level (Etype (Parent (N))) <\n+                                                        Object_Access_Level (A)\n                then\n                   Error_Msg_N (\"aliased actual has wrong accessibility\", A);\n                end if;\n \n             elsif Nkind (Parent (N)) = N_Qualified_Expression\n               and then Nkind (Parent (Parent (N))) = N_Allocator\n-              and then Type_Access_Level (Etype (Parent (Parent (N))))\n-                < Object_Access_Level (A)\n+              and then Type_Access_Level (Etype (Parent (Parent (N)))) <\n+                                                        Object_Access_Level (A)\n             then\n                Error_Msg_N\n-                 (\"Aliased actual in allocator has wrong accessibility\", A);\n+                 (\"aliased actual in allocator has wrong accessibility\", A);\n             end if;\n          end if;\n       end Check_Aliased_Parameter;"}, {"sha": "fd7fbea627acf0748178d4fdb17477c03b3f2744", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27e20e722d17c847d82062e70787388b6d6997/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=fc27e20e722d17c847d82062e70787388b6d6997", "patch": "@@ -7345,8 +7345,8 @@ package body Sem_Util is\n    begin\n       return Has_Discriminants (Typ)\n        and then Present (First_Discriminant (Typ))\n-       and then Present\n-         (Discriminant_Default_Value (First_Discriminant (Typ)));\n+       and then Present (Discriminant_Default_Value\n+                           (First_Discriminant (Typ)));\n    end Has_Defaulted_Discriminants;\n \n    -------------------"}]}