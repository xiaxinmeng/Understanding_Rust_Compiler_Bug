{"sha": "fabead06137e34773b26c619b0085e2c03e06f4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiZWFkMDYxMzdlMzQ3NzNiMjZjNjE5YjAwODVlMmMwM2UwNmY0ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-20T14:28:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-20T14:28:28Z"}, "message": "fold-const.c (int_const_binop): Don't generate non-overflowing size-types specially.\n\n\t* fold-const.c (int_const_binop): Don't generate non-overflowing\n\tsize-types specially.\n\t(fold_convert_const): Likewise.\n\nFrom-SVN: r86321", "tree": {"sha": "d3da5d39adba6b1b0e4d10a71161c188470c2bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3da5d39adba6b1b0e4d10a71161c188470c2bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fabead06137e34773b26c619b0085e2c03e06f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabead06137e34773b26c619b0085e2c03e06f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabead06137e34773b26c619b0085e2c03e06f4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabead06137e34773b26c619b0085e2c03e06f4d/comments", "author": null, "committer": null, "parents": [{"sha": "3224beadb4cebe8137600efe3d13082f40076cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3224beadb4cebe8137600efe3d13082f40076cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3224beadb4cebe8137600efe3d13082f40076cc1"}], "stats": {"total": 22, "additions": 5, "deletions": 17}, "files": [{"sha": "d0e31e46676d7b999ffa25f2564eabab6c32399f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabead06137e34773b26c619b0085e2c03e06f4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabead06137e34773b26c619b0085e2c03e06f4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fabead06137e34773b26c619b0085e2c03e06f4d", "patch": "@@ -1,5 +1,9 @@\n 2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* fold-const.c (int_const_binop): Don't generate non-overflowing\n+\tsize-types specially.\n+\t(fold_convert_const): Likewise.\n+\n \t* stor-layout.c (initialize_sizetypes): Set SIZETYPE earlier,\n \tclear cache on copied sizetype.\n "}, {"sha": "2384bd1dd233e87c4920ae4775b81278cab245db", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabead06137e34773b26c619b0085e2c03e06f4d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabead06137e34773b26c619b0085e2c03e06f4d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fabead06137e34773b26c619b0085e2c03e06f4d", "patch": "@@ -1412,16 +1412,7 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       abort ();\n     }\n \n-  /* If this is for a sizetype, can be represented as one (signed)\n-     HOST_WIDE_INT word, and doesn't overflow, use size_int since it caches\n-     constants.  */\n-  if (is_sizetype\n-      && ((hi == 0 && (HOST_WIDE_INT) low >= 0)\n-\t  || (hi == -1 && (HOST_WIDE_INT) low < 0))\n-      && overflow == 0 && ! TREE_OVERFLOW (arg1) && ! TREE_OVERFLOW (arg2))\n-    return size_int_type (low, type);\n-  else\n-    t = build_int_cst (TREE_TYPE (arg1), low, hi);\n+  t = build_int_cst (TREE_TYPE (arg1), low, hi);\n \n   if (notrunc)\n     {\n@@ -1783,13 +1774,6 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n \t  if (TYPE_PRECISION (type) > 2 * HOST_BITS_PER_WIDE_INT)\n \t    return NULL_TREE;\n \n-\t  /* If we are trying to make a sizetype for a small integer, use\n-\t     size_int to pick up cached types to reduce duplicate nodes.  */\n-\t  if (TREE_CODE (type) == INTEGER_TYPE && TYPE_IS_SIZETYPE (type)\n-\t      && !TREE_CONSTANT_OVERFLOW (arg1)\n-\t      && compare_tree_int (arg1, 10000) < 0)\n-\t    return size_int_type (TREE_INT_CST_LOW (arg1), type);\n-\n \t  /* Given an integer constant, make new constant with new type,\n \t     appropriately sign-extended or truncated.  */\n \t  t = build_int_cst (type, TREE_INT_CST_LOW (arg1),"}]}