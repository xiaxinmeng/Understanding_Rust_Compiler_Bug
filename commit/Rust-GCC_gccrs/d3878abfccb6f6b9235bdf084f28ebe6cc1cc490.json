{"sha": "d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4NzhhYmZjY2I2ZjZiOTIzNWJkZjA4NGYyOGViZTZjYzFjYzQ5MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-05T10:54:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-05T10:54:14Z"}, "message": "gimple-fold.c (gimple_fold_stmt_to_constant_1): For ternary ops with an embedded expression valueize and fold that as well.\n\n2011-10-05  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): For\n\tternary ops with an embedded expression valueize and fold\n\tthat as well.\n\t* tree-ssa-sccvn.c (try_to_simplify): Also allow SSA name\n\tresults from gimple_fold_stmt_to_constant_1.\n\nFrom-SVN: r179543", "tree": {"sha": "8f305cd98368d269f8bb3b30639fd03210cf77df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f305cd98368d269f8bb3b30639fd03210cf77df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d75fbd3dbf7f1a5bf91ccc55acf312cba4f91bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75fbd3dbf7f1a5bf91ccc55acf312cba4f91bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75fbd3dbf7f1a5bf91ccc55acf312cba4f91bae"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "da53b3869759fdfc16a4a0198719be559fa162f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "patch": "@@ -1,3 +1,11 @@\n+2011-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): For\n+\tternary ops with an embedded expression valueize and fold\n+\tthat as well.\n+\t* tree-ssa-sccvn.c (try_to_simplify): Also allow SSA name\n+\tresults from gimple_fold_stmt_to_constant_1.\n+\n 2011-10-05  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.md (tablejump): Add missing label."}, {"sha": "fcfbcc8f5b332a00e9251cfaaa64ccdca786f12b", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "patch": "@@ -2569,6 +2569,19 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n               tree op1 = (*valueize) (gimple_assign_rhs2 (stmt));\n               tree op2 = (*valueize) (gimple_assign_rhs3 (stmt));\n \n+\t      /* Fold embedded expressions in ternary codes.  */\n+\t      if ((subcode == COND_EXPR\n+\t\t   || subcode == VEC_COND_EXPR)\n+\t\t  && COMPARISON_CLASS_P (op0))\n+\t\t{\n+\t\t  tree op00 = (*valueize) (TREE_OPERAND (op0, 0));\n+\t\t  tree op01 = (*valueize) (TREE_OPERAND (op0, 1));\n+\t\t  tree tem = fold_binary_loc (loc, TREE_CODE (op0),\n+\t\t\t\t\t      TREE_TYPE (op0), op00, op01);\n+\t\t  if (tem)\n+\t\t    op0 = tem;\n+\t\t}\n+\n               return fold_ternary_loc (loc, subcode,\n \t\t\t\t       gimple_expr_type (stmt), op0, op1, op2);\n             }"}, {"sha": "208c272d37169384232257668c7fcd7819cf8cbc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3878abfccb6f6b9235bdf084f28ebe6cc1cc490/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d3878abfccb6f6b9235bdf084f28ebe6cc1cc490", "patch": "@@ -2967,27 +2967,29 @@ simplify_unary_expression (gimple stmt)\n static tree\n try_to_simplify (gimple stmt)\n {\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n   tree tem;\n \n   /* For stores we can end up simplifying a SSA_NAME rhs.  Just return\n      in this case, there is no point in doing extra work.  */\n-  if (gimple_assign_copy_p (stmt)\n-      && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+  if (code == SSA_NAME)\n     return NULL_TREE;\n \n   /* First try constant folding based on our current lattice.  */\n-  tem = gimple_fold_stmt_to_constant (stmt, vn_valueize);\n-  if (tem)\n+  tem = gimple_fold_stmt_to_constant_1 (stmt, vn_valueize);\n+  if (tem\n+      && (TREE_CODE (tem) == SSA_NAME\n+\t  || is_gimple_min_invariant (tem)))\n     return tem;\n \n   /* If that didn't work try combining multiple statements.  */\n-  switch (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)))\n+  switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_reference:\n-      /* Fallthrough for some codes that can operate on registers.  */\n-      if (!(TREE_CODE (gimple_assign_rhs1 (stmt)) == REALPART_EXPR\n-\t    || TREE_CODE (gimple_assign_rhs1 (stmt)) == IMAGPART_EXPR\n-\t    || TREE_CODE (gimple_assign_rhs1 (stmt)) == VIEW_CONVERT_EXPR))\n+      /* Fallthrough for some unary codes that can operate on registers.  */\n+      if (!(code == REALPART_EXPR\n+\t    || code == IMAGPART_EXPR\n+\t    || code == VIEW_CONVERT_EXPR))\n \tbreak;\n       /* We could do a little more with unary ops, if they expand\n \t into binary ops, but it's debatable whether it is worth it. */"}]}