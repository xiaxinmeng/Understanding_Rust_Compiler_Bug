{"sha": "1e188d1e13003433b2efd794a0ae53749dc19d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxODhkMWUxMzAwMzQzM2IyZWZkNzk0YTBhZTUzNzQ5ZGMxOWQwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-16T00:07:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-16T00:07:17Z"}, "message": "re PR middle-end/23714 (ICE in expand_assignment)\n\n        PR 23714\n        * builtins.c (expand_builtin_trap): Export.\n        * expr.h (expand_builtin_trap): Declare.\n        * expr.c (expand_assignment): Emit a trap for integral offsets\n        from registers that weren't reduced to bitpos.\n\n        * tree-cfg.c (mark_array_ref_addressable_1): Remove.\n        (mark_array_ref_addressable): Remove.\n        * tree-flow.h (mark_array_ref_addressable): Remove.\n        * tree-optimize.c (execute_cleanup_cfg_post_optimizing): Don't call it.\n\nFrom-SVN: r105449", "tree": {"sha": "ce736adf1e7d1ab6bdbe217c3eed0c23288c5e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce736adf1e7d1ab6bdbe217c3eed0c23288c5e0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e188d1e13003433b2efd794a0ae53749dc19d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e188d1e13003433b2efd794a0ae53749dc19d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e188d1e13003433b2efd794a0ae53749dc19d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e188d1e13003433b2efd794a0ae53749dc19d0c/comments", "author": null, "committer": null, "parents": [{"sha": "48c410a254046d839bec7337831d6f21394fe12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c410a254046d839bec7337831d6f21394fe12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c410a254046d839bec7337831d6f21394fe12c"}], "stats": {"total": 63, "additions": 25, "deletions": 38}, "files": [{"sha": "23ccab683a2d4f27af893785b56c980fcdd43f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -1,3 +1,16 @@\n+2005-10-15  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 23714\n+\t* builtins.c (expand_builtin_trap): Export.\n+\t* expr.h (expand_builtin_trap): Declare.\n+\t* expr.c (expand_assignment): Emit a trap for integral offsets \n+\tfrom registers that weren't reduced to bitpos.\n+\n+\t* tree-cfg.c (mark_array_ref_addressable_1): Remove.\n+\t(mark_array_ref_addressable): Remove.\n+\t* tree-flow.h (mark_array_ref_addressable): Remove.\n+\t* tree-optimize.c (execute_cleanup_cfg_post_optimizing): Don't call it.\n+\n 2005-10-15  James E Wilson  <wilson@specifix.com>\n \n \tPR target/24232"}, {"sha": "2136900f0831bf7e28f64c9cec9be1670545bd1a", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -4751,7 +4751,7 @@ expand_builtin_expect_jump (tree exp, rtx if_false_label, rtx if_true_label)\n   return ret;\n }\n \n-static void\n+void\n expand_builtin_trap (void)\n {\n #ifdef HAVE_trap"}, {"sha": "9743c2a608222ebb5aecfc27e6f10a74066b3c8f", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -3924,10 +3924,18 @@ expand_assignment (tree to, tree from)\n \n       if (offset != 0)\n \t{\n-\t  rtx offset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, EXPAND_SUM);\n+\t  rtx offset_rtx;\n \n-\t  gcc_assert (MEM_P (to_rtx));\n+\t  if (!MEM_P (to_rtx))\n+\t    {\n+\t      /* We can get constant negative offsets into arrays with broken\n+\t\t user code.  Translate this to a trap instead of ICEing.  */\n+\t      gcc_assert (TREE_CODE (offset) == INTEGER_CST);\n+\t      expand_builtin_trap ();\n+\t      to_rtx = gen_rtx_MEM (BLKmode, const0_rtx);\n+\t    }\n \n+\t  offset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, EXPAND_SUM);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (offset_rtx) != Pmode)\n \t    offset_rtx = convert_to_mode (Pmode, offset_rtx, 0);"}, {"sha": "ef4238787b6795ca95dcf3904dfb1f8565af0df2", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -341,6 +341,7 @@ extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern rtx expand_builtin_saveregs (void);\n+extern void expand_builtin_trap (void);\n \f\n /* Functions from expr.c:  */\n "}, {"sha": "90c27307b3e1c4c17ef333b69769efe460b205ef", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -421,39 +421,6 @@ fold_cond_expr_cond (void)\n     }\n }\n \n-/* Mark the array of any remaining ARRAY_REFs as addressable.  */\n-\n-static tree\n-mark_array_ref_addressable_1 (tree *tp, int *walk_subtrees,\n-\t\t\t      void *data ATTRIBUTE_UNUSED)\n-{\n-  tree t = *tp;\n-\n-  if (DECL_P (t) || TYPE_P (t))\n-    *walk_subtrees = 0;\n-  else if (TREE_CODE (t) == ARRAY_REF)\n-    {\n-      tree base = get_base_address (TREE_OPERAND (t, 0));\n-      if (base && DECL_P (base))\n-\tTREE_ADDRESSABLE (base) = 1;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-void\n-mark_array_ref_addressable (void)\n-{\n-  basic_block bb;\n-  block_stmt_iterator i;\n-\n-  FOR_EACH_BB (bb)\n-    {\n-      for (i = bsi_start (bb); !bsi_end_p(i); bsi_next(&i))\n-\twalk_tree (bsi_stmt_ptr (i), mark_array_ref_addressable_1, NULL, NULL);\n-    }\n-}\n-\n /* Join all the blocks in the flowgraph.  */\n \n static void"}, {"sha": "135a4e823604b91e13fed77fb8e7daf829a246ba", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -556,7 +556,6 @@ extern tree gimplify_build3 (block_stmt_iterator *, enum tree_code,\n \t\t\t     tree, tree, tree, tree);\n extern void init_empty_tree_cfg (void);\n extern void fold_cond_expr_cond (void);\n-extern void mark_array_ref_addressable (void);\n extern void replace_uses_by (tree, tree);\n extern void start_recording_case_labels (void);\n extern void end_recording_case_labels (void);"}, {"sha": "0678889c7722cbf8a9bb6a6046b65fd78e48cf32", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e188d1e13003433b2efd794a0ae53749dc19d0c/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1e188d1e13003433b2efd794a0ae53749dc19d0c", "patch": "@@ -133,7 +133,6 @@ static void\n execute_cleanup_cfg_post_optimizing (void)\n {\n   fold_cond_expr_cond ();\n-  mark_array_ref_addressable ();\n   cleanup_tree_cfg ();\n   cleanup_dead_labels ();\n   group_case_labels ();"}]}