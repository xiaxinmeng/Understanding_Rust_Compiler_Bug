{"sha": "cc558e28014f0d85247398c89e7cf75d92df1bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1NThlMjgwMTRmMGQ4NTI0NzM5OGM4OWU3Y2Y3NWQ5MmRmMWJkMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-17T13:52:02Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-17T13:52:14Z"}, "message": "x86: Add gcc.target/i386/strncmp-1.c\n\nAdd a strncmp test for the cmpstrn pattern with neither of the strings\nis a constant string.  We can expand the cmpstrn pattern to \"repz cmpsb\"\nonly if one of the strings is a constant so that expand_builtin_strncmp()\ncan write the length argument to be the minimum of the const string\nlength and the actual length argument.  Otherwise, \"repz cmpsb\" may pass\nthe 0 byte.\n\n\t* gcc.target/i386/strncmp-1.c: New test.", "tree": {"sha": "a118dc18e40c36e892c820e9ff756e1ca194ae14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a118dc18e40c36e892c820e9ff756e1ca194ae14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc558e28014f0d85247398c89e7cf75d92df1bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc558e28014f0d85247398c89e7cf75d92df1bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc558e28014f0d85247398c89e7cf75d92df1bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc558e28014f0d85247398c89e7cf75d92df1bd3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e785dfec360573c2e8a700ef570a22359410c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e785dfec360573c2e8a700ef570a22359410c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e785dfec360573c2e8a700ef570a22359410c5"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "fa3d018cb2e6a152e8acec3d8e42878b6bfe0288", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc558e28014f0d85247398c89e7cf75d92df1bd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc558e28014f0d85247398c89e7cf75d92df1bd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc558e28014f0d85247398c89e7cf75d92df1bd3", "patch": "@@ -1,3 +1,7 @@\n+2020-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/strncmp-1.c: New test.\n+\n 2020-05-16  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/coroutines/co-return-syntax-10-movable.C: New test."}, {"sha": "044fc5cc5fa1b3e0c41b1d91b889e4b3e4cb38c1", "filename": "gcc/testsuite/gcc.target/i386/strncmp-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc558e28014f0d85247398c89e7cf75d92df1bd3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstrncmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc558e28014f0d85247398c89e7cf75d92df1bd3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstrncmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstrncmp-1.c?ref=cc558e28014f0d85247398c89e7cf75d92df1bd3", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target mmap } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+#include <sys/mman.h>\n+\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n+int\n+__attribute__ ((noclone, noinline))\n+compare (char *d, char *s, unsigned int l)\n+{\n+  return __builtin_strncmp (d, s, l);\n+}\n+\n+int\n+main ()\n+{\n+  size_t page_size = sysconf(_SC_PAGESIZE);\n+  char *buf = mmap (0, 2 * page_size, PROT_READ | PROT_WRITE,\n+\t\t    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (buf == MAP_FAILED)\n+    {\n+      perror (\"mmap\");\n+      abort ();\n+    }\n+\n+  if (mprotect (buf + page_size, page_size, PROT_NONE))\n+    {\n+      perror (\"mprotect\");\n+      abort ();\n+    }\n+\n+  char *src1 = buf + page_size - sizeof (\"foo\");\n+  char *src2 = buf;\n+  memcpy (src1, \"foo\", sizeof (\"foo\"));\n+  memcpy (src2, \"foo\", sizeof (\"foo\"));\n+  int result = compare (src1, src2, sizeof (\"foo\") + 16);\n+  if (result != 0)\n+    abort ();\n+  return 0;\n+}"}]}