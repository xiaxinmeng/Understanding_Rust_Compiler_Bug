{"sha": "0c952af328e6048ddbc5087225197b4851a57f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5NTJhZjMyOGU2MDQ4ZGRiYzUwODcyMjUxOTdiNDg1MWE1N2Y1ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-02-07T20:26:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-07T20:26:24Z"}, "message": "Clean up stdexcept.\n\n\n2001-02-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tClean up stdexcept.\n\t* include/bits/stringfwd.h: New file.\n\t* include/bits/stl_string_fwd.h: Remove.\n\t* include/bits/localefwd.h: Remove declaration for allocator.\n\t* include/bits/std_iosfwd: Same.\n\t* include/bits/std_string.h: Include it.\n\t* include/bits/std_ios.h: Remove include.\n\t* include/bits/basic_string.h: Tweak.\n\t* libsupc++/new: Format.\n\t* src/Makefile.am (base_headers): Add stringfwd.h, remove\n\tstl_string_fwd.h\n\t* src/Makefile.in: Regenerate.\n\t* include/bits/std_stdexcept.h: Rewrite.\n\t* src/stdexcept.cc: Same.\n\nFrom-SVN: r39526", "tree": {"sha": "710c4b07600eecce610471e49a8073942cbf0a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710c4b07600eecce610471e49a8073942cbf0a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c952af328e6048ddbc5087225197b4851a57f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c952af328e6048ddbc5087225197b4851a57f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c952af328e6048ddbc5087225197b4851a57f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c952af328e6048ddbc5087225197b4851a57f5e/comments", "author": null, "committer": null, "parents": [{"sha": "830a95f892afa094e134511ae4ae871f0dd090b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830a95f892afa094e134511ae4ae871f0dd090b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/830a95f892afa094e134511ae4ae871f0dd090b4"}], "stats": {"total": 486, "additions": 282, "deletions": 204}, "files": [{"sha": "cb801578272b3fe0fa65cdf9436e703332a1491e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1,3 +1,20 @@\n+2001-02-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tClean up stdexcept.\n+\t* include/bits/stringfwd.h: New file.\n+\t* include/bits/stl_string_fwd.h: Remove.\n+\t* include/bits/localefwd.h: Remove declaration for allocator.\n+\t* include/bits/std_iosfwd: Same.\n+\t* include/bits/std_string.h: Include it.\n+\t* include/bits/std_ios.h: Remove include.\n+\t* include/bits/basic_string.h: Tweak.\n+\t* libsupc++/new: Format.\n+\t* src/Makefile.am (base_headers): Add stringfwd.h, remove\n+\tstl_string_fwd.h\n+\t* src/Makefile.in: Regenerate.\n+\t* include/bits/std_stdexcept.h: Rewrite.\n+\t* src/stdexcept.cc: Same.\n+\t\n 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Deal with library"}, {"sha": "b678dd27fd38945e4c55d2d3e4afb1216c6b2aa6", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1028,7 +1028,6 @@ namespace std {\n     inline basic_istream<_CharT,_Traits>&\n     getline(basic_istream<_CharT, _Traits>& __is,\n \t    basic_string<_CharT, _Traits, _Alloc>& __str);\n-\n } // namespace std\n \n #endif /* _CPP_BITS_STRING_H */"}, {"sha": "5e08c7ec8afc6884d7202b811932f98d98759b32", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -79,8 +79,8 @@ namespace std\n     };\n \n   // 22.1.1 Locale\n-  template<typename _Tp> class allocator;\n-  template<typename _Tp, typename _Alloc> class vector;\n+  template<typename _Tp, typename _Alloc> \n+    class vector;\n   class locale;\n \n   // 22.1.3 Convenience interfaces"}, {"sha": "1471c1ca619a9c3388fd665f78cbbcd5d66466cc", "filename": "libstdc++-v3/include/bits/std_ios.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,6 @@\n #include <bits/std_iosfwd.h>\n #include <exception> \t\t// For ios_base::failure\n #include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n-#include <bits/stl_string_fwd.h>// For string.\n #include <bits/std_cstdio.h> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n #include <bits/localefwd.h>\t// For class locale\n #include <bits/ios_base.h>\t// For ios_base declarations."}, {"sha": "15631a29e2b0c370eeb5a775af5a5f66a1dfc3c7", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -36,67 +36,64 @@\n \n #include <bits/c++config.h>\n #include <bits/std_cwchar.h> // For mbstate_t\n+#include <bits/stringfwd.h> // For string forward declarations.\n \n-namespace std {\n-\n-  // Generic declarations.\n-  template<typename _CharT> struct char_traits;\n-  template<typename _Alloc> class allocator;\n-\n+namespace std \n+{\n   // Forward declarations\n   template<> class char_traits<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> class char_traits<wchar_t>;\n #endif\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_ios;\n+    class basic_ios;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_streambuf;\n+    class basic_streambuf;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_istream;\n+    class basic_istream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_ostream;\n+    class basic_ostream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_iostream;\n+    class basic_iostream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t    typename _Alloc = allocator<_CharT> >\n-  class basic_stringbuf;\n+    class basic_stringbuf;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t   typename _Alloc = allocator<_CharT> >\n-  class basic_istringstream;\n+    class basic_istringstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t   typename _Alloc = allocator<_CharT> >\n-  class basic_ostringstream;\n+    class basic_ostringstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t   typename _Alloc = allocator<_CharT> >\n-  class basic_stringstream;\n+    class basic_stringstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_filebuf;\n+    class basic_filebuf;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_ifstream;\n+    class basic_ifstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_ofstream;\n+    class basic_ofstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class basic_fstream;\n+    class basic_fstream;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class istreambuf_iterator;\n+    class istreambuf_iterator;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-  class ostreambuf_iterator;\n+    class ostreambuf_iterator;\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n   // Not included.\n@@ -144,14 +141,6 @@ namespace std {\n   typedef basic_ofstream<wchar_t> \twofstream;\n   typedef basic_fstream<wchar_t> \twfstream;\n #endif\n-\n } // namespace std\n \n #endif\t// _CPP_IOSFWD\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "b9c5dccf74ad99458cf31074dfa449b3258b268e", "filename": "libstdc++-v3/include/bits/std_stdexcept.h", "status": "modified", "additions": 111, "deletions": 86, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1,90 +1,115 @@\n-/*\n- * Copyright (c) 1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */ \n+// Standard exception classes  -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 19.1  Exception classes\n+//\n \n #ifndef _CPP_STDEXCEPT\n-#define _CPP_STDEXCEPT 1\n+#define _CPP_STDEXCEPT \t  1\n \n #include <exception>\n-\n-#if defined(__STL_USE_EXCEPTIONS) || \\\n-    !(defined(_MIPS_SIM) && defined(_ABIO32) && _MIPS_SIM == _ABIO32)\n-\n-#include <bits/stl_string_fwd.h>\n-\n-__STL_BEGIN_NAMESPACE\n-\n-class __Named_exception : public exception {\n-public:\n-  __Named_exception(const string& __str);\n-  virtual const char* what() const __STL_NOTHROW { return _M_name; }\n-\n-private:\n-  enum { _S_bufsize = 256 };\n-  char _M_name[_S_bufsize];\n-};\n-\n-class logic_error : public __Named_exception {\n-public:\n-  logic_error(const string& __s) : __Named_exception(__s) {}\n-};\n-\n-class runtime_error : public __Named_exception {\n-public:\n-  runtime_error(const string& __s) : __Named_exception(__s) {}\n-};\n-\n-class domain_error : public logic_error {\n-public:\n-  domain_error(const string& __arg) : logic_error(__arg) {}\n-};\n-\n-class invalid_argument : public logic_error {\n-public:\n-  invalid_argument(const string& __arg) : logic_error(__arg) {}\n-};\n-\n-class length_error : public logic_error {\n-public:\n-  length_error(const string& __arg) : logic_error(__arg) {}\n-};\n-\n-class out_of_range : public logic_error {\n-public:\n-  out_of_range(const string& __arg) : logic_error(__arg) {}\n-};\n-\n-class range_error : public runtime_error {\n-public:\n-  range_error(const string& __arg) : runtime_error(__arg) {}\n-};\n-\n-class overflow_error : public runtime_error {\n-public:\n-  overflow_error(const string& __arg) : runtime_error(__arg) {}\n-};\n-\n-class underflow_error : public runtime_error {\n-public:\n-  underflow_error(const string& __arg) : runtime_error(__arg) {}\n-};\n-\n-__STL_END_NAMESPACE\n-\n-#endif /* Not o32, and no exceptions */\n-\n-#endif /* _CPP_STDEXCEPT */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-\n+#include <bits/stringfwd.h>\n+\n+namespace std \n+{\n+  class logic_error : public exception \n+  {\n+    const string& _M_msg;\n+\n+  public:\n+    explicit \n+    logic_error(const string&  __arg);\n+\n+    virtual \n+    ~logic_error() throw();\n+\n+    virtual const char* \n+    what() const throw();\n+  };\n+\n+  class domain_error : public logic_error \n+  {\n+  public:\n+    explicit domain_error(const string&  __arg);\n+  };\n+\n+  class invalid_argument : public logic_error \n+  {\n+  public:\n+    explicit invalid_argument(const string&  __arg);\n+  };\n+\n+  class length_error : public logic_error \n+  {\n+  public:\n+    explicit length_error(const string&  __arg);\n+  };\n+\n+  class out_of_range : public logic_error \n+  {\n+  public:\n+    explicit out_of_range(const string&  __arg);\n+  };\n+\n+  class runtime_error : public exception \n+  {\n+    const string& _M_msg;\n+\n+  public:\n+    explicit \n+    runtime_error(const string&  __arg);\n+\n+    virtual \n+    ~runtime_error() throw();\n+\n+    virtual const char* \n+    what() const throw();\n+  };\n+\n+  class range_error : public runtime_error \n+  {\n+  public:\n+    explicit range_error(const string&  __arg);\n+  };\n+\n+  class overflow_error : public runtime_error \n+  {\n+  public:\n+    explicit overflow_error(const string&  __arg);\n+  };\n+\n+  class underflow_error : public runtime_error \n+  {\n+  public:\n+    explicit underflow_error(const string&  __arg);\n+  };\n+} // namespace std\n+\n+#endif // _CPP_STDEXCEPT"}, {"sha": "0a2da3ae72969c0642f2410d4c82ef2043cfaa10", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -35,11 +35,12 @@\n #define _CPP_STRING\t1\n \n #include <bits/c++config.h>\n-#include <bits/stl_string_fwd.h>\n-#include <bits/std_iterator.h>\n+#include <bits/stringfwd.h>\n #include <bits/char_traits.h>\n+#include <bits/std_iterator.h>\n+#include <bits/std_memory.h> \t// For allocator.\n #include <bits/type_traits.h>\n-#include <bits/std_iosfwd.h> // for operators >>, <<, and getline decls\n+#include <bits/std_iosfwd.h> \t// For operators >>, <<, and getline decls.\n #include <bits/basic_string.h>\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "46845b9870c56fd49a8549eec6bc9f77c44980f1", "filename": "libstdc++-v3/include/bits/stl_string_fwd.h", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830a95f892afa094e134511ae4ae871f0dd090b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_string_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830a95f892afa094e134511ae4ae871f0dd090b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_string_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_string_fwd.h?ref=830a95f892afa094e134511ae4ae871f0dd090b4", "patch": "@@ -1,46 +0,0 @@\n-/*\n- * Copyright (c) 1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */ \n-\n-#ifndef __SGI_STL_STRING_FWD_H\n-#define __SGI_STL_STRING_FWD_H\n-\n-#include <bits/stl_config.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/char_traits.h>\n-\n-__STL_BEGIN_NAMESPACE\n-\n-template <class _CharT, \n-          class _Traits = char_traits<_CharT>, \n-          class _Alloc = allocator<_CharT> >\n-class basic_string;\n-\n-typedef basic_string<char>    string;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-typedef basic_string<wchar_t> wstring;\n-#endif\n-\n-__STL_END_NAMESPACE\n-\n-#endif /* __SGI_STL_STRING_FWD_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "020257437ff538bf04f984132989f25c4f70feb0", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -0,0 +1,61 @@\n+// String support -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 21 Strings library\n+//\n+\n+#ifndef _CPP_BITS_STRINGFWD_H\n+#define _CPP_BITS_STRINGFWD_H\t1\n+\n+#include <bits/c++config.h>\n+\n+namespace std\n+{\n+  template<class _CharT>\n+    struct char_traits;\n+\n+  template<typename _Alloc> \n+    class allocator;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>, \n+           typename _Alloc = allocator<_CharT> >\n+    class basic_string;\n+\n+  typedef basic_string<char>    string;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef basic_string<wchar_t> wstring;\n+#endif\n+} // namespace std\n+\n+#endif\t// _CPP_BITS_STRINGFWD_H\n+\n+// Local Variables:\n+// mode:c++\n+// End:"}, {"sha": "87c9d712f37fcc117e0f2ae3f24549b22549f5a6", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1,5 +1,6 @@\n // The -*- C++ -*- dynamic memory management header.\n-// Copyright (C) 1994, 1996, 1997, 1998, 2000 Free Software Foundation\n+\n+// Copyright (C) 1994, 1996, 1997, 1998, 2000, 2001 Free Software Foundation\n \n // This file is part of GNU CC.\n //\n@@ -36,31 +37,31 @@\n \n extern \"C++\" {\n \n-namespace std {\n-\n-  class bad_alloc : public exception {\n+namespace std \n+{\n+  class bad_alloc : public exception \n+  {\n   public:\n     virtual const char* what() const throw() { return \"bad_alloc\"; }\n   };\n \n-  struct nothrow_t {};\n+  struct nothrow_t { };\n   extern const nothrow_t nothrow;\n   typedef void (*new_handler)();\n-  new_handler set_new_handler (new_handler);\n-\n+  new_handler set_new_handler(new_handler);\n } // namespace std\n \n-// replaceable signatures\n-void *operator new (std::size_t) throw (std::bad_alloc);\n-void *operator new[] (std::size_t) throw (std::bad_alloc);\n-void operator delete (void *) throw();\n-void operator delete[] (void *) throw();\n-void *operator new (std::size_t, const std::nothrow_t&) throw();\n-void *operator new[] (std::size_t, const std::nothrow_t&) throw();\n-void operator delete (void *, const std::nothrow_t&) throw();\n-void operator delete[] (void *, const std::nothrow_t&) throw();\n+// Replaceable signatures.\n+void *operator new(std::size_t) throw (std::bad_alloc);\n+void *operator new[](std::size_t) throw (std::bad_alloc);\n+void operator delete(void *) throw();\n+void operator delete[](void *) throw();\n+void *operator new(std::size_t, const std::nothrow_t&) throw();\n+void *operator new[](std::size_t, const std::nothrow_t&) throw();\n+void operator delete(void *, const std::nothrow_t&) throw();\n+void operator delete[](void *, const std::nothrow_t&) throw();\n \n-// default placement versions of operator new\n+// Default placement versions of operator new.\n inline void *operator new(std::size_t, void *place) throw() { return place; }\n inline void *operator new[](std::size_t, void *place) throw() { return place; }\n } // extern \"C++\""}, {"sha": "788f968fe4b86a43331b6710960844e9cdcef6bc", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.69 2001/02/06 06:36:18 mmitchel Exp $\n+## $Id: Makefile.am,v 1.70 2001/02/07 01:54:21 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -66,7 +66,8 @@ INCLUDES = \\\n \n base_headers = \\\n \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/std_string.h bits/basic_string.h bits/basic_string.tcc \\\n+\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n+\tbits/basic_string.tcc \\\n \tbits/generic_shadow.h bits/std_utility.h \\\n \tbits/std_complex.h \\\n \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n@@ -94,7 +95,7 @@ base_headers = \\\n \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n \tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n+\tbits/stl_stack.h bits/stl_tempbuf.h \\\n \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n \tbits/concept_checks.h bits/container_concepts.h \\"}, {"sha": "f197451be7fff39597bacb02c1f6feb6e526255f", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -144,7 +144,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n \n \n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/std_string.h bits/basic_string.h bits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n \n \n backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream"}, {"sha": "af22c9e0fa881c1afce94afe6718dd0d1844979d", "filename": "libstdc++-v3/src/stdexcept.cc", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c952af328e6048ddbc5087225197b4851a57f5e/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc?ref=0c952af328e6048ddbc5087225197b4851a57f5e", "patch": "@@ -1,6 +1,6 @@\n // Methods for Exception Support for -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,28 +27,59 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-// Written by Mike Stump based upon the specification in the 20 September 1994\n-// C++ working paper, ANSI document X3J16/94-0158.\n-\n //\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n #include <bits/std_string.h>\n #include <bits/std_stdexcept.h>\n+#if 1\n #include <bits/stl_range_errors.h>\n+#endif\n+\n+namespace std \n+{\n+  logic_error::logic_error(const string& __arg) \n+  : exception(), _M_msg(__arg) { }\n+\n+  logic_error::~logic_error() throw() { };\n+\n+  const char*\n+  logic_error::what() const throw()\n+  { return _M_msg.c_str(); }\n+\n+  domain_error::domain_error(const string& __arg)\n+  : logic_error(__arg) { }\n+\n+  invalid_argument::invalid_argument(const string& __arg)\n+  : logic_error(__arg) { }\n \n-// To break the circularity with the <stdexcept> and <string> header we\n-// define two functions which throw exceptions as a direct call would do.\n+  length_error::length_error(const string& __arg)\n+  : logic_error(__arg) { }\n \n-namespace std {\n+  out_of_range::out_of_range(const string& __arg)\n+  : logic_error(__arg) { }\n \n-  __Named_exception::__Named_exception(const string& __str)\n-  {\n-    strncpy(_M_name, __str.c_str(), _S_bufsize);\n-    _M_name[_S_bufsize - 1] = '\\0';\n-  }\n+  runtime_error::runtime_error(const string& __arg) \n+  : exception(), _M_msg(__arg) { }\n \n+  runtime_error::~runtime_error() throw() { };\n+\n+  const char*\n+  runtime_error::what() const throw()\n+  { return _M_msg.c_str(); }\n+\n+  range_error::range_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+  overflow_error::overflow_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+  underflow_error::underflow_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+#if 1\n+  // XXX need to deal with this.\n   void\n   __out_of_range(const char *str)\n   { throw out_of_range(str); }\n@@ -66,8 +97,8 @@ namespace std {\n   void \n   __stl_throw_length_error(const char* __msg)\n   { throw length_error(__msg); }\n-\n-} //namespace std\n+#endif\n+} // namespace std\n \n \n "}]}