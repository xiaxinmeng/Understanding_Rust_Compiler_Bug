{"sha": "897f610ba4492354c4bab4d61f476dc8d27c9124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3ZjYxMGJhNDQ5MjM1NGM0YmFiNGQ2MWY0NzZkYzhkMjdjOTEyNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-26T14:58:34Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-26T14:58:34Z"}, "message": "re PR middle-end/17112 (Copying of packed bitfields is wrong)\n\n\n\tPR middle-end/17112\n\t* stor-layout.c (compute_record_mode): For records with a single\n\tfield, only use the field's mode if its size matches what we'd\n\thave choosen for the record ourselves.  This forces the use of\n\tBLKmode for packed records that don't completely fill a mode.\n\n\t* gcc.dg/pr17112-1.c: New test case.\n\nCo-Authored-By: Giovanni Bajo <giovannibajo@gcc.gnu.org>\n\nFrom-SVN: r88130", "tree": {"sha": "aa76381885409572a4b6e89bce34c27e9ce000c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa76381885409572a4b6e89bce34c27e9ce000c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/897f610ba4492354c4bab4d61f476dc8d27c9124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897f610ba4492354c4bab4d61f476dc8d27c9124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897f610ba4492354c4bab4d61f476dc8d27c9124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897f610ba4492354c4bab4d61f476dc8d27c9124/comments", "author": null, "committer": null, "parents": [{"sha": "5c8c573a86eddc5949d59c602704775d1671a8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8c573a86eddc5949d59c602704775d1671a8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8c573a86eddc5949d59c602704775d1671a8fb"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "75ba5a7163f9a8948148eff3087655c6b588ce08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=897f610ba4492354c4bab4d61f476dc8d27c9124", "patch": "@@ -1,3 +1,12 @@\n+2004-09-26  Roger Sayle  <roger@eyesopen.com>\n+\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR middle-end/17112\n+\t* stor-layout.c (compute_record_mode): For records with a single\n+\tfield, only use the field's mode if its size matches what we'd\n+\thave choosen for the record ourselves.  This forces the use of\n+\tBLKmode for packed records that don't completely fill a mode.\n+\n 2004-09-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/17151"}, {"sha": "4ac93404a8e62533071d191ce71ce566a2be85f3", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=897f610ba4492354c4bab4d61f476dc8d27c9124", "patch": "@@ -1296,12 +1296,14 @@ compute_record_mode (tree type)\n #endif /* MEMBER_TYPE_FORCES_BLK  */\n     }\n \n-  /* If we only have one real field; use its mode.  This only applies to\n-     RECORD_TYPE.  This does not apply to unions.  */\n-  if (TREE_CODE (type) == RECORD_TYPE && mode != VOIDmode)\n+  TYPE_MODE (type) = mode_for_size_tree (TYPE_SIZE (type), MODE_INT, 1);\n+\n+  /* If we only have one real field; use its mode if that mode's size\n+     matches the type's size.  This only applies to RECORD_TYPE.  This\n+     does not apply to unions.  */\n+  if (TREE_CODE (type) == RECORD_TYPE && mode != VOIDmode\n+      && GET_MODE_SIZE (mode) == GET_MODE_SIZE (TYPE_MODE (type)))\n     TYPE_MODE (type) = mode;\n-  else\n-    TYPE_MODE (type) = mode_for_size_tree (TYPE_SIZE (type), MODE_INT, 1);\n \n   /* If structure's known alignment is less than what the scalar\n      mode would need, and it matters, then stick with BLKmode.  */"}, {"sha": "f6ac25c0f07f4404f154881a223db4fb809a9a56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=897f610ba4492354c4bab4d61f476dc8d27c9124", "patch": "@@ -1,3 +1,8 @@\n+2004-09-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17112\n+\t* gcc.dg/pr17112-1.c: New test case.\n+\n 2004-09-26  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/11459"}, {"sha": "7c8b7aa04320ed329fc653cf2459a5661b7730dc", "filename": "gcc/testsuite/gcc.dg/pr17112-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897f610ba4492354c4bab4d61f476dc8d27c9124/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c?ref=897f610ba4492354c4bab4d61f476dc8d27c9124", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/17112 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort(void);\n+\n+typedef struct {\n+  int int24:24  __attribute__ ((packed));\n+} myint24;\n+\n+myint24 x[3] = {\n+  0x123456,\n+  0x789abc,\n+  0xdef012\n+};\n+\n+myint24 y[3];  // starts out as zeros\n+\n+void foo()\n+{\n+  y[1] = x[1];\n+}\n+\n+int main()\n+{\n+  foo();\n+\n+  if (y[0].int24 != 0 || y[2].int24 != 0)\n+    abort();\n+  return 0;\n+}\n+"}]}