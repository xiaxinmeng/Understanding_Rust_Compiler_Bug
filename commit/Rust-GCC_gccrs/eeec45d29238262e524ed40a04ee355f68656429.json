{"sha": "eeec45d29238262e524ed40a04ee355f68656429", "node_id": "C_kwDOANBUbNoAKGVlZWM0NWQyOTIzODI2MmU1MjRlZDQwYTA0ZWUzNTVmNjg2NTY0Mjk", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-09T21:52:41Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:26:32Z"}, "message": "RISC-V: Add vnsra C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vnsra_wv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wv_tumu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnsra_wx_tumu-3.c: New test.", "tree": {"sha": "8362b03172def9a769e6a4e82462ed5ef03bc592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8362b03172def9a769e6a4e82462ed5ef03bc592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeec45d29238262e524ed40a04ee355f68656429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeec45d29238262e524ed40a04ee355f68656429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeec45d29238262e524ed40a04ee355f68656429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeec45d29238262e524ed40a04ee355f68656429/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e999a3abdb676475a0d2bcf7d83188862cc85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e999a3abdb676475a0d2bcf7d83188862cc85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e999a3abdb676475a0d2bcf7d83188862cc85d"}], "stats": {"total": 3996, "additions": 3996, "deletions": 0}, "files": [{"sha": "699d2a412382b6dbc257cd72bec86ce64408009f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4(op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "8930860ffbd43e51ecad9cbecdaa2f8eeab62006", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4(op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "1163624298ff46fa5889d725a0f782eea9f0ace2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4(op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "3200a4301dac5bdb9a2853179831f0f3fdc063d3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_m(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_m(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_m(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_m(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_m(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_m(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_m(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_m(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_m(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_m(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_m(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_m(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_m(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_m(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_m(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "7458f3bfedb74b81e81ea3a23df29bd2fb89dd2c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_m(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_m(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_m(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_m(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_m(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_m(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_m(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_m(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_m(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_m(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_m(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_m(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_m(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_m(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_m(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_m(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "68e8343454f686da6e7a17366c87bdd45632bf1a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_m-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_m(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_m(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_m(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_m(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_m(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_m(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_m(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_m(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_m(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_m(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_m(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_m(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_m(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_m(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_m(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_m(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "df60811e0f9fd6bae4df1dee0a5b80af2b7fec80", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ff6e2e3fdac11363e6427cbf723e7544bae824ac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8d749b57f2d9868d80fcfd1d7f2289e063148843", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_mu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ca3e963647d434108894473f9e889026914b80c2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "319e0c580fc879916620b2fb38edac3795d2d6e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "b17eec2b8d5d0eca6e01de2940bff8babb7c2f37", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "d41f41f936140d0ed2380d9931522fa90a1814da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ad396d664b912799d4431c4a6a56d602d3acaead", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "c7078da01b49d6d3d47ffd2406f12ae4c872e561", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tum-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "e82fa2f576bf4afbda71644f0bff257c2d24534e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "89a8361be94e32318791674f6f0f7b7c0855b69d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2805fa3edab638342a5f13d808f222ff71496978", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wv_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wv_tumu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wv_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wv_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wv_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wv_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wv_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wv_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i8m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i16m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wv_i32m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "9d73d3ca177c6761e1b2b121e0ed86d5c5f0aedc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4(op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "a64277481463005404f39d54609e043482b6e8b0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4(op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "6a1369720959a504d11f3012020a5f0ad94fe779", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4(op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "a960228bdf75875f86125090a3538677c4646dcd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "64ee422857b2a95c5a2dbb947a5c71972c2012cf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_m(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1fb8b43154073b8ee653745ff554c532a714d582", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_m-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_m(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "4d0a3cb4c1dad8e7628706f1af206038240dda98", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "b4ffd402af68809bd1df15652da63db78cb849c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3e7f8d78ef8a23d653b36798808e5b0e86d409e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_mu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "02380fad4662cabe91ac528f4c4d4db71551bead", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "873ba05fc33965ef4124c6c5eb63afe95c4ff8e7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "8c3abbdd606f426776faa133966053778e196fcb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "49996e051022626fbc168b1beb1bc5f59ae8d1a0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "dff3b3ea7289547ea8d842751742ac7c42adeecc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ebbc13decdc662a25b11edc75c4ce93257cd87a1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tum-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1471ddf2d777556eae94309064976090fe8b4110", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-1.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d594e43c1518048f4a51c59ba4f3dda0292f239c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-2.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "85b3935f8862852324ba316208a6bdcf72e89d83", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnsra_wx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeec45d29238262e524ed40a04ee355f68656429/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnsra_wx_tumu-3.c?ref=eeec45d29238262e524ed40a04ee355f68656429", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnsra_wx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnsra_wx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnsra_wx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnsra_wx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnsra_wx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnsra_wx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i8m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnsra_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnsra_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnsra_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnsra_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnsra_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i16m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnsra_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnsra_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnsra_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnsra_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsra_wx_i32m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsra\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}