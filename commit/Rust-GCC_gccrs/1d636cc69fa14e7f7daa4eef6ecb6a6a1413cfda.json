{"sha": "1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2MzZjYzY5ZmExNGU3ZjdkYWE0ZWVmNmVjYjZhNmExNDEzY2ZkYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-07-14T07:39:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-07-14T07:39:56Z"}, "message": "Makefile.in (explow.o, [...]): Depend on target.h.\n\n2005-07-14  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (explow.o, reg-stack.o): Depend on target.h.\n\t* calls.c (expand_call): Pass fntype to hard_function_value.\n\t(emit_library_call_value_1): Likewise.\n\t* explow.c: Include target.h.\n\t(hard_function_value): Take extra argument, the fntype.\n\tUse new target hook for function_value.\n\t* expr.h (hard_function_value): Change prototype.\n\t* function.c (aggregate_value_p): Pass 0 as fntype to\n\thard_function_value.\n\t(assign_parms): Use new target hook for function_value.\n\tPass 0 as fntype to hard_function_value.\n\t(expand_function_end): Likewise.\n\t* reg-stack.c: Include target.h.\n\t(stack_result): Use new target hook for function_value.\n\t* target-def.h: New target hook function_value.\n\t* target.h: Likewise.\n\t* targhooks.c (default_function_value): New function.\n\t* targhooks.h (default_function_value): Declare.\n\nFrom-SVN: r102013", "tree": {"sha": "db222e8988c1c3f0439e84b38f6bc6ae99babae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db222e8988c1c3f0439e84b38f6bc6ae99babae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94b00ee4e1126901db295a7223b3c6d7c5b1868d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b00ee4e1126901db295a7223b3c6d7c5b1868d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b00ee4e1126901db295a7223b3c6d7c5b1868d"}], "stats": {"total": 116, "additions": 76, "deletions": 40}, "files": [{"sha": "126409f62478fc41f7127e787d53b96b02595dcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -1,3 +1,24 @@\n+2005-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (explow.o, reg-stack.o): Depend on target.h.\n+\t* calls.c (expand_call): Pass fntype to hard_function_value.\n+\t(emit_library_call_value_1): Likewise.\n+\t* explow.c: Include target.h.\n+\t(hard_function_value): Take extra argument, the fntype.\n+\tUse new target hook for function_value.\n+\t* expr.h (hard_function_value): Change prototype.\n+\t* function.c (aggregate_value_p): Pass 0 as fntype to\n+\thard_function_value.\n+\t(assign_parms): Use new target hook for function_value.\n+\tPass 0 as fntype to hard_function_value.\n+\t(expand_function_end): Likewise.\n+\t* reg-stack.c: Include target.h.\n+\t(stack_result): Use new target hook for function_value.\n+\t* target-def.h: New target hook function_value.\n+\t* target.h: Likewise.\n+\t* targhooks.c (default_function_value): New function.\n+\t* targhooks.h (default_function_value): Declare.\n+\n 2005-07-13  Ian Lance Taylor  <ian@airs.com>\n \n \t* config/mips/mips.h (CLZ_DEFINED_VALUE_AT_ZERO): Define."}, {"sha": "2bc109238992b17033032f9788fc841509bebc90", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -2079,7 +2079,7 @@ expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n    toplev.h $(TM_P_H) langhooks.h\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n-   toplev.h function.h $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h\n+   toplev.h function.h $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h target.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h \\\n    $(RECOG_H) reload.h toplev.h $(GGC_H) real.h $(TM_P_H) except.h \\\n@@ -2391,7 +2391,8 @@ recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h toplev.h reload.h function.h $(TM_P_H) $(GGC_H) \\\n-   gt-reg-stack.h $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h\n+   gt-reg-stack.h $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h \\\n+   target.h\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) \\"}, {"sha": "89f747fe2eb7a549d61995de108e3a1581ef03aa", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -2517,9 +2517,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t{\n \t  if (pcc_struct_value)\n \t    valreg = hard_function_value (build_pointer_type (TREE_TYPE (exp)),\n-\t\t\t\t\t  fndecl, (pass == 0));\n+\t\t\t\t\t  fndecl, NULL, (pass == 0));\n \t  else\n-\t    valreg = hard_function_value (TREE_TYPE (exp), fndecl, (pass == 0));\n+\t    valreg = hard_function_value (TREE_TYPE (exp), fndecl, fntype,\n+\t\t\t\t\t  (pass == 0));\n \t}\n \n       /* Precompute all register parameters.  It isn't safe to compute anything\n@@ -3266,7 +3267,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t{\n #ifdef PCC_STATIC_STRUCT_RETURN\n \t  rtx pointer_reg\n-\t    = hard_function_value (build_pointer_type (tfom), 0, 0);\n+\t    = hard_function_value (build_pointer_type (tfom), 0, 0, 0);\n \t  mem_value = gen_rtx_MEM (outmode, pointer_reg);\n \t  pcc_struct_value = 1;\n \t  if (value == 0)"}, {"sha": "23b124fbbb596fef8e55f42344254d3c832d9ccd", "filename": "gcc/explow.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"ggc.h\"\n #include \"recog.h\"\n #include \"langhooks.h\"\n+#include \"target.h\"\n \n static rtx break_out_memory_refs (rtx);\n static void emit_stack_probe (rtx);\n@@ -1405,24 +1406,19 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n /* Return an rtx representing the register or memory location\n    in which a scalar value of data type VALTYPE\n    was returned by a function call to function FUNC.\n-   FUNC is a FUNCTION_DECL node if the precise function is known,\n-   otherwise 0.\n+   FUNC is a FUNCTION_DECL, FNTYPE a FUNCTION_TYPE node if the precise\n+   function is known, otherwise 0.\n    OUTGOING is 1 if on a machine with register windows this function\n    should return the register in which the function will put its result\n    and 0 otherwise.  */\n \n rtx\n-hard_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n+hard_function_value (tree valtype, tree func, tree fntype,\n \t\t     int outgoing ATTRIBUTE_UNUSED)\n {\n   rtx val;\n \n-#ifdef FUNCTION_OUTGOING_VALUE\n-  if (outgoing)\n-    val = FUNCTION_OUTGOING_VALUE (valtype, func);\n-  else\n-#endif\n-    val = FUNCTION_VALUE (valtype, func);\n+  val = targetm.calls.function_value (valtype, func ? func : fntype, outgoing);\n \n   if (REG_P (val)\n       && GET_MODE (val) == BLKmode)"}, {"sha": "224e2857f2b9ad601bd2a64501b8ae96b09b80c9", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -550,7 +550,7 @@ extern HOST_WIDE_INT int_expr_size (tree);\n \n /* Return an rtx that refers to the value returned by a function\n    in its original home.  This becomes invalid if any more code is emitted.  */\n-extern rtx hard_function_value (tree, tree, int);\n+extern rtx hard_function_value (tree, tree, tree, int);\n \n extern rtx prepare_call_address (rtx, rtx, rtx *, int, int);\n "}, {"sha": "160c80dfaa0dee63857e8bb435eaef0c5dc33e6b", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -1732,7 +1732,7 @@ aggregate_value_p (tree exp, tree fntype)\n     return 1;\n   /* Make sure we have suitable call-clobbered regs to return\n      the value in; if not, we must return it in memory.  */\n-  reg = hard_function_value (type, 0, 0);\n+  reg = hard_function_value (type, 0, fntype, 0);\n \n   /* If we have something other than a REG (e.g. a PARALLEL), then assume\n      it is OK.  */\n@@ -3055,13 +3055,8 @@ assign_parms (tree fndecl)\n \t{\n \t  rtx real_decl_rtl;\n \n-#ifdef FUNCTION_OUTGOING_VALUE\n-\t  real_decl_rtl = FUNCTION_OUTGOING_VALUE (TREE_TYPE (decl_result),\n-\t\t\t\t\t\t   fndecl);\n-#else\n-\t  real_decl_rtl = FUNCTION_VALUE (TREE_TYPE (decl_result),\n-\t\t\t\t\t  fndecl);\n-#endif\n+\t  real_decl_rtl = targetm.calls.function_value (TREE_TYPE (decl_result),\n+\t\t\t\t\t\t\tfndecl, true);\n \t  REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n \t  /* The delay slot scheduler assumes that current_function_return_rtx\n \t     holds the hard register containing the return value, not a\n@@ -4149,7 +4144,7 @@ expand_function_start (tree subr)\n \t  /* In order to figure out what mode to use for the pseudo, we\n \t     figure out what the mode of the eventual return register will\n \t     actually be, and use that.  */\n-\t  rtx hard_reg = hard_function_value (return_type, subr, 1);\n+\t  rtx hard_reg = hard_function_value (return_type, subr, 0, 1);\n \n \t  /* Structures that are returned in registers are not\n \t     aggregate_value_p, so we may see a PARALLEL or a REG.  */\n@@ -4499,13 +4494,8 @@ expand_function_end (void)\n       else\n \tvalue_address = XEXP (value_address, 0);\n \n-#ifdef FUNCTION_OUTGOING_VALUE\n-      outgoing = FUNCTION_OUTGOING_VALUE (build_pointer_type (type),\n-\t\t\t\t\t  current_function_decl);\n-#else\n-      outgoing = FUNCTION_VALUE (build_pointer_type (type),\n-\t\t\t\t current_function_decl);\n-#endif \n+      outgoing = targetm.calls.function_value (build_pointer_type (type),\n+\t\t\t\t\t       current_function_decl, true);\n \n       /* Mark this as a function return value so integrate will delete the\n \t assignment and USE below when inlining this function.  */"}, {"sha": "9f44f5180954714920022bd575e0356ee02a3e9a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -172,6 +172,7 @@\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n+#include \"target.h\"\n \n /* We use this array to cache info about insns, because otherwise we\n    spend too much time in stack_regs_mentioned_p.\n@@ -667,14 +668,8 @@ stack_result (tree decl)\n \n   result = DECL_RTL_IF_SET (DECL_RESULT (decl));\n   if (result != 0)\n-    {\n-#ifdef FUNCTION_OUTGOING_VALUE\n-      result\n-\t= FUNCTION_OUTGOING_VALUE (TREE_TYPE (DECL_RESULT (decl)), decl);\n-#else\n-      result = FUNCTION_VALUE (TREE_TYPE (DECL_RESULT (decl)), decl);\n-#endif\n-    }\n+    result = targetm.calls.function_value (TREE_TYPE (DECL_RESULT (decl)),\n+\t\t\t\t\t   decl, true);\n \n   return result != 0 && STACK_REG_P (result) ? result : 0;\n }"}, {"sha": "a9921c7409aa73bc6e2f97be4287f530f6992e6e", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -438,6 +438,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false\n #define TARGET_ARG_PARTIAL_BYTES hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n \n+#define TARGET_FUNCTION_VALUE default_function_value\n+\n #define TARGET_CALLS {\t\t\t\t\t\t\\\n    TARGET_PROMOTE_FUNCTION_ARGS,\t\t\t\t\\\n    TARGET_PROMOTE_FUNCTION_RETURN,\t\t\t\t\\\n@@ -454,7 +456,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n    TARGET_MUST_PASS_IN_STACK,\t\t\t\t\t\\\n    TARGET_CALLEE_COPIES,\t\t\t\t\t\\\n    TARGET_ARG_PARTIAL_BYTES,\t\t\t\t\t\\\n-   TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN\t\t\t\\\n+   TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN,\t\t\t\\\n+   TARGET_FUNCTION_VALUE\t\t\t\t\t\\\n    }\n \n #ifndef TARGET_UNWIND_TABLES_DEFAULT"}, {"sha": "564c333136c6416cd8416b3714f84101edbc8eb2", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -603,6 +603,11 @@ struct gcc_target\n        is not allowed for this 'val' argument; NULL otherwise. */\n     const char *(*invalid_arg_for_unprototyped_fn) (tree typelist, \n \t\t\t\t\t     \t    tree funcdecl, tree val);\n+\n+    /* Return an rtx for the return value location of the function\n+       specified by FN_DECL_OR_TYPE with a return type of RET_TYPE.  */\n+    rtx (*function_value) (tree ret_type, tree fn_decl_or_type,\n+\t\t\t   bool outgoing);\n   } calls;\n \n   /* Return the diagnostic message string if conversion from FROMTYPE"}, {"sha": "c0c42019a04a6bee45a48af7e7563606a1acf167", "filename": "gcc/targhooks.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -417,4 +417,26 @@ hook_bool_rtx_commutative_p (rtx x, int outer_code ATTRIBUTE_UNUSED)\n   return COMMUTATIVE_P (x);\n }\n \n+rtx\n+default_function_value (tree ret_type ATTRIBUTE_UNUSED,\n+\t\t\ttree fn_decl_or_type,\n+\t\t\tbool outgoing ATTRIBUTE_UNUSED)\n+{\n+  /* The old interface doesn't handle receiving the function type.  */\n+  if (fn_decl_or_type\n+      && !DECL_P (fn_decl_or_type))\n+    fn_decl_or_type = NULL;\n+\n+#ifdef FUNCTION_OUTGOING_VALUE\n+  if (outgoing)\n+    return FUNCTION_OUTGOING_VALUE (ret_type, fn_decl_or_type);\n+#endif\n+\n+#ifdef FUNCTION_VALUE\n+  return FUNCTION_VALUE (ret_type, fn_decl_or_type);\n+#else\n+  return NULL_RTX;\n+#endif\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "a39d27df33707ae69ea024759583d6ded7b73390", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=1d636cc69fa14e7f7daa4eef6ecb6a6a1413cfda", "patch": "@@ -67,3 +67,5 @@ extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n extern const char *hook_invalid_arg_for_unprototyped_fn\n   (tree, tree, tree);\n extern bool hook_bool_rtx_commutative_p (rtx, int);\n+extern rtx default_function_value (tree, tree, bool);\n+"}]}