{"sha": "8f23c89a5fd677301137917b2658e564f770acd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyM2M4OWE1ZmQ2NzczMDExMzc5MTdiMjY1OGU1NjRmNzcwYWNkNQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:24:28Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:24:28Z"}, "message": "[Patch 7/17] Delete TARGET_FLT_EVAL_METHOD and poison it.\n\ngcc/\n\n\t* config/s390/s390.h (TARGET_FLT_EVAL_METHOD): Delete.\n\t* config/m68k/m68k.h (TARGET_FLT_EVAL_METHOD): Delete.\n\t* config/i386/i386.h (TARGET_FLT_EVAL_METHOD): Delete.\n\t* defaults.h (TARGET_FLT_EVAL_METHOD): Delete.\n\t* doc/tm.texi.in (TARGET_FLT_EVAL_METHOD): Delete.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (TARGET_FLT_EVAL_METHOD): Poison.\n\nFrom-SVN: r242777", "tree": {"sha": "f8639dd9c19a21d1ba8caae85c96c5178d455d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8639dd9c19a21d1ba8caae85c96c5178d455d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f23c89a5fd677301137917b2658e564f770acd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f23c89a5fd677301137917b2658e564f770acd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f23c89a5fd677301137917b2658e564f770acd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f23c89a5fd677301137917b2658e564f770acd5/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56d8ffc170912cb1dee5900799acaf5d4857fde9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d8ffc170912cb1dee5900799acaf5d4857fde9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d8ffc170912cb1dee5900799acaf5d4857fde9"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "963f022550fbf1f7b850c29d7a70f545a5235cc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -1,3 +1,13 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/s390/s390.h (TARGET_FLT_EVAL_METHOD): Delete.\n+\t* config/m68k/m68k.h (TARGET_FLT_EVAL_METHOD): Delete.\n+\t* config/i386/i386.h (TARGET_FLT_EVAL_METHOD): Delete.\n+\t* defaults.h (TARGET_FLT_EVAL_METHOD): Delete.\n+\t* doc/tm.texi.in (TARGET_FLT_EVAL_METHOD): Delete.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (TARGET_FLT_EVAL_METHOD): Poison.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* toplev.c (init_excess_precision): Delete most logic."}, {"sha": "83ffd4e5a58d781cc9a23ace77e231dcef3354e6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -690,17 +690,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   SUBTARGET_EXTRA_SPECS\n \f\n \n-/* Set the value of FLT_EVAL_METHOD in float.h.  When using only the\n-   FPU, assume that the fpcw is set to extended precision; when using\n-   only SSE, rounding is correct; when using both SSE and the FPU,\n-   the rounding precision is indeterminate, since either may be chosen\n-   apparently at random.  */\n-#define TARGET_FLT_EVAL_METHOD\t\t\t\t\t\t\\\n-  (TARGET_80387\t\t\t\t\t\t\t\t\\\n-   ? (TARGET_MIX_SSE_I387 ? -1\t\t\t\t\t\t\\\n-      : (TARGET_SSE_MATH ? (TARGET_SSE2 ? 0 : -1) : 2))\t\t\t\\\n-   : 0)\n-\n /* Whether to allow x87 floating-point arithmetic on MODE (one of\n    SFmode, DFmode and XFmode) in the current excess precision\n    configuration.  */"}, {"sha": "6837d416f964ee7acb0279ebc3bbdab17a6cd82a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -281,11 +281,6 @@ along with GCC; see the file COPYING3.  If not see\n #define LONG_DOUBLE_TYPE_SIZE\t\t\t\\\n   ((TARGET_COLDFIRE || TARGET_FIDOA) ? 64 : 80)\n \n-/* Set the value of FLT_EVAL_METHOD in float.h.  When using 68040 fp\n-   instructions, we get proper intermediate rounding, otherwise we\n-   get extended precision results.  */\n-#define TARGET_FLT_EVAL_METHOD ((TARGET_68040 || ! TARGET_68881) ? 0 : 2)\n-\n #define BITS_BIG_ENDIAN 1\n #define BYTES_BIG_ENDIAN 1\n #define WORDS_BIG_ENDIAN 1"}, {"sha": "6be4d34ce13a74365efa8af17f8f481550852809", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -247,11 +247,6 @@ extern const char *s390_host_detect_local_cpu (int argc, const char **argv);\n #define S390_TDC_INFINITY (S390_TDC_POSITIVE_INFINITY \\\n \t\t\t  | S390_TDC_NEGATIVE_INFINITY )\n \n-/* This is used by float.h to define the float_t and double_t data\n-   types.  For historical reasons both are double on s390 what cannot\n-   be changed anymore.  */\n-#define TARGET_FLT_EVAL_METHOD 1\n-\n /* Target machine storage layout.  */\n \n /* Everything is big-endian.  */"}, {"sha": "2536f76584c85cb5b738f359ae58cf9ca48d5078", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -942,9 +942,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define REG_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n #endif\n \n-#ifndef TARGET_FLT_EVAL_METHOD\n-#define TARGET_FLT_EVAL_METHOD 0\n-#endif\n \n #ifndef TARGET_DEC_EVAL_METHOD\n #define TARGET_DEC_EVAL_METHOD 2"}, {"sha": "bd820392b6dfc5d472547033631dc97127bc2baa", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -1566,13 +1566,6 @@ uses this macro should also arrange to use @file{t-gnu-prefix} in\n the libgcc @file{config.host}.\n @end defmac\n \n-@defmac TARGET_FLT_EVAL_METHOD\n-A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n-assuming, if applicable, that the floating-point control word is in its\n-default state.  If you do not define this macro the value of\n-@code{FLT_EVAL_METHOD} will be zero.\n-@end defmac\n-\n @defmac WIDEST_HARDWARE_FP_SIZE\n A C expression for the size in bits of the widest floating-point format\n supported by the hardware.  If you define this macro, you must specify a"}, {"sha": "95f5fd9f2842f3baa17ca01764ab32358d5b485b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -1402,13 +1402,6 @@ uses this macro should also arrange to use @file{t-gnu-prefix} in\n the libgcc @file{config.host}.\n @end defmac\n \n-@defmac TARGET_FLT_EVAL_METHOD\n-A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n-assuming, if applicable, that the floating-point control word is in its\n-default state.  If you do not define this macro the value of\n-@code{FLT_EVAL_METHOD} will be zero.\n-@end defmac\n-\n @defmac WIDEST_HARDWARE_FP_SIZE\n A C expression for the size in bits of the widest floating-point format\n supported by the hardware.  If you define this macro, you must specify a"}, {"sha": "cf86235bcd1c36777b4338a3b929ff533d008ab1", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23c89a5fd677301137917b2658e564f770acd5/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=8f23c89a5fd677301137917b2658e564f770acd5", "patch": "@@ -902,7 +902,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tASM_BYTE_OP MEMBER_TYPE_FORCES_BLK LIBGCC2_HAS_SF_MODE\t\t\\\n \tLIBGCC2_HAS_DF_MODE LIBGCC2_HAS_XF_MODE LIBGCC2_HAS_TF_MODE\t\\\n \tCLEAR_BY_PIECES_P MOVE_BY_PIECES_P SET_BY_PIECES_P\t\t\\\n-\tSTORE_BY_PIECES_P\n+\tSTORE_BY_PIECES_P TARGET_FLT_EVAL_METHOD\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}]}