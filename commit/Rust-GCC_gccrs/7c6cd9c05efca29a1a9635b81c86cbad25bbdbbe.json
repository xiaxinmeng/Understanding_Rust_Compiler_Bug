{"sha": "7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "node_id": "C_kwDOANBUbNoAKDdjNmNkOWMwNWVmY2EyOWExYTk2MzViODFjODZjYmFkMjViYmRiYmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T06:30:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T06:30:07Z"}, "message": "ragen-op-float: Fix up float_binary_op_range_finish [PR107668]\n\nThe following testcase ICEs, because when !HONOR_NANS but\nHONOR_SIGNED_ZEROS, if we see\nlhs = op1 * op2;\nand know that lhs is [-0.0, 0.0] and op2 is [0.0, 0.0], the\ndivision of these two yields UNDEFINED and clear_nan () on it\nfails an assert.  With HONOR_NANS it would actually result in\na known NAN, but when NANs aren't honored, we clear the NAN bits.\nNow, for the above case we actually don't know anything about\nthe op1 range (except that it isn't a NAN/INF because of\n!HONOR_NANS !HONOR_INFINITIES), so I think the best is just\nto return VARYING for the case we get UNDEFINED as well.\n\nIf we want, the op[12]_range methods perhaps can handle the\ncorner cases earlier separately, say for\nlhs [0.0, 0.0] and op2 [0.0, 0.0] when HONOR_SIGNED_ZEROS this\nwould be just [0.0, MAX].\n\n2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/107668\n\t* range-op-float.cc (float_binary_op_range_finish): Set VARYING\n\talso when r is UNDEFINED.\n\n\t* gcc.dg/ubsan/pr107668.c: New test.", "tree": {"sha": "241f98b0b5db21c5780b4e35952506f52dab6186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241f98b0b5db21c5780b4e35952506f52dab6186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b7f0378b915a6a294b330bea00e50069f181bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7f0378b915a6a294b330bea00e50069f181bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7f0378b915a6a294b330bea00e50069f181bd7"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "0c4ec8dd1782b091106a0d858ebe75a3b5b5fb03", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "patch": "@@ -1891,8 +1891,9 @@ float_binary_op_range_finish (bool ret, frange &r, tree type,\n   // or the reverse operation introduced a known NAN.\n   // Say for lhs = op1 * op2 if lhs is [-0, +0] and op2 is too,\n   // 0 / 0 is known NAN.  Just punt in that case.\n+  // If NANs aren't honored, we get for 0 / 0 UNDEFINED, so punt as well.\n   // Or if lhs is a known NAN, we also don't know anything.\n-  if (r.known_isnan () || lhs.known_isnan ())\n+  if (r.known_isnan () || lhs.known_isnan () || r.undefined_p ())\n     {\n       r.set_varying (type);\n       return true;"}, {"sha": "e94d6cdb530f1831d87b965d89b994c6bc910eed", "filename": "gcc/testsuite/gcc.dg/ubsan/pr107668.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr107668.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr107668.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr107668.c?ref=7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/107668 */\n+/* { dg-do compile } */\n+/* { dg-options \"-ffast-math -fno-associative-math -fsanitize=float-cast-overflow -fno-guess-branch-probability -fsigned-zeros\" } */\n+\n+_Complex int c;\n+int i;\n+\n+void\n+foo (void)\n+{\n+  c /= (_Complex) i;\n+}"}]}