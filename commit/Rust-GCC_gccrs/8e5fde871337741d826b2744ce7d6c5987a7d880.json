{"sha": "8e5fde871337741d826b2744ce7d6c5987a7d880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1ZmRlODcxMzM3NzQxZDgyNmIyNzQ0Y2U3ZDZjNTk4N2E3ZDg4MA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2006-08-15T09:36:39Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2006-08-15T09:36:39Z"}, "message": "ffi_common.h: Remove lint directives.\n\n2006-08-15  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* include/ffi_common.h: Remove lint directives.\n\t* include/ffi.h.in: Likewise.\n\nFrom-SVN: r116152", "tree": {"sha": "fb4f7e178745964de1635fe1c7427563d21f5af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb4f7e178745964de1635fe1c7427563d21f5af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e5fde871337741d826b2744ce7d6c5987a7d880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5fde871337741d826b2744ce7d6c5987a7d880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5fde871337741d826b2744ce7d6c5987a7d880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5fde871337741d826b2744ce7d6c5987a7d880/comments", "author": null, "committer": null, "parents": [{"sha": "64c23908ee23536e7333664003e9d60bf6e0f091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c23908ee23536e7333664003e9d60bf6e0f091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c23908ee23536e7333664003e9d60bf6e0f091"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "875e940f21ef25c4d02cfaaac7f69e0082e97b33", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=8e5fde871337741d826b2744ce7d6c5987a7d880", "patch": "@@ -1,3 +1,8 @@\n+2006-08-15  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* include/ffi_common.h: Remove lint directives.\n+\t* include/ffi.h.in: Likewise.\n+\n 2006-07-25  Torsten Schoenfeld  <kaffeetisch@gmx.de>\n \n \t* include/ffi.h.in (ffi_type_ulong, ffi_type_slong): Define correctly"}, {"sha": "fee88baa0cd00bd06812d60f9aa3ba025bdd21e3", "filename": "libffi/include/ffi.h.in", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2Finclude%2Fffi.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2Finclude%2Fffi.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2Fffi.h.in?ref=8e5fde871337741d826b2744ce7d6c5987a7d880", "patch": "@@ -138,7 +138,7 @@ typedef struct _ffi_type\n   size_t size;\n   unsigned short alignment;\n   unsigned short type;\n-  /*@null@*/ struct _ffi_type **elements;\n+  struct _ffi_type **elements;\n } ffi_type;\n \n /* These are defined in types.c */\n@@ -160,16 +160,16 @@ extern ffi_type ffi_type_pointer;\n typedef enum {\n   FFI_OK = 0,\n   FFI_BAD_TYPEDEF,\n-  FFI_BAD_ABI \n+  FFI_BAD_ABI\n } ffi_status;\n \n typedef unsigned FFI_TYPE;\n \n typedef struct {\n   ffi_abi abi;\n   unsigned nargs;\n-  /*@dependent@*/ ffi_type **arg_types;\n-  /*@dependent@*/ ffi_type *rtype;\n+  ffi_type **arg_types;\n+  ffi_type *rtype;\n   unsigned bytes;\n   unsigned flags;\n #ifdef FFI_EXTRA_CIF_FIELDS\n@@ -195,10 +195,10 @@ typedef union {\n   void*     ptr;\n } ffi_raw;\n \n-void ffi_raw_call (/*@dependent@*/ ffi_cif *cif, \n-\t\t   void (*fn)(), \n-\t\t   /*@out@*/ void *rvalue, \n-\t\t   /*@dependent@*/ ffi_raw *avalue);\n+void ffi_raw_call (ffi_cif *cif,\n+\t\t   void (*fn)(),\n+\t\t   void *rvalue,\n+\t\t   ffi_raw *avalue);\n \n void ffi_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_raw *raw);\n void ffi_raw_to_ptrarray (ffi_cif *cif, ffi_raw *raw, void **args);\n@@ -208,10 +208,10 @@ size_t ffi_raw_size (ffi_cif *cif);\n /* packing, even on 64-bit machines.  I.e. on 64-bit machines\t\t*/\n /* longs and doubles are followed by an empty 64-bit word.\t\t*/\n \n-void ffi_java_raw_call (/*@dependent@*/ ffi_cif *cif, \n-\t\t        void (*fn)(), \n-\t\t        /*@out@*/ void *rvalue, \n-\t\t        /*@dependent@*/ ffi_raw *avalue);\n+void ffi_java_raw_call (ffi_cif *cif,\n+\t\t\tvoid (*fn)(),\n+\t\t\tvoid *rvalue,\n+\t\t\tffi_raw *avalue);\n \n void ffi_java_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_raw *raw);\n void ffi_java_raw_to_ptrarray (ffi_cif *cif, ffi_raw *raw, void **args);\n@@ -271,16 +271,16 @@ ffi_prep_java_raw_closure (ffi_raw_closure*,\n \n /* ---- Public interface definition -------------------------------------- */\n \n-ffi_status ffi_prep_cif(/*@out@*/ /*@partial@*/ ffi_cif *cif, \n+ffi_status ffi_prep_cif(ffi_cif *cif,\n \t\t\tffi_abi abi,\n-\t\t\tunsigned int nargs, \n-\t\t\t/*@dependent@*/ /*@out@*/ /*@partial@*/ ffi_type *rtype, \n-\t\t\t/*@dependent@*/ ffi_type **atypes);\n-\n-void ffi_call(/*@dependent@*/ ffi_cif *cif, \n-\t      void (*fn)(), \n-\t      /*@out@*/ void *rvalue, \n-\t      /*@dependent@*/ void **avalue);\n+\t\t\tunsigned int nargs,\n+\t\t\tffi_type *rtype,\n+\t\t\tffi_type **atypes);\n+\n+void ffi_call(ffi_cif *cif,\n+\t      void (*fn)(),\n+\t      void *rvalue,\n+\t      void **avalue);\n \n /* Useful for eliminating compiler warnings */\n #define FFI_FN(f) ((void (*)())f)"}, {"sha": "58714a70f5321dffe8e26faf7e85fbf062f4587f", "filename": "libffi/include/ffi_common.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2Finclude%2Fffi_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5fde871337741d826b2744ce7d6c5987a7d880/libffi%2Finclude%2Fffi_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2Fffi_common.h?ref=8e5fde871337741d826b2744ce7d6c5987a7d880", "patch": "@@ -41,20 +41,20 @@ char *alloca ();\n # endif\n #endif\n \n-#if defined(FFI_DEBUG) \n+#if defined(FFI_DEBUG)\n #include <stdio.h>\n #endif\n \n #ifdef FFI_DEBUG\n-/*@exits@*/ void ffi_assert(/*@temp@*/ char *expr, /*@temp@*/ char *file, int line);\n+void ffi_assert(char *expr, char *file, int line);\n void ffi_stop_here(void);\n-void ffi_type_test(/*@temp@*/ /*@out@*/ ffi_type *a, /*@temp@*/ char *file, int line);\n+void ffi_type_test(ffi_type *a, char *file, int line);\n \n #define FFI_ASSERT(x) ((x) ? (void)0 : ffi_assert(#x, __FILE__,__LINE__))\n #define FFI_ASSERT_AT(x, f, l) ((x) ? 0 : ffi_assert(#x, (f), (l)))\n #define FFI_ASSERT_VALID_TYPE(x) ffi_type_test (x, __FILE__, __LINE__)\n #else\n-#define FFI_ASSERT(x) \n+#define FFI_ASSERT(x)\n #define FFI_ASSERT_AT(x, f, l)\n #define FFI_ASSERT_VALID_TYPE(x)\n #endif\n@@ -68,9 +68,9 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif);\n /* Extended cif, used in callback from assembly routine */\n typedef struct\n {\n-  /*@dependent@*/ ffi_cif *cif;\n-  /*@dependent@*/ void *rvalue;\n-  /*@dependent@*/ void **avalue;\n+  ffi_cif *cif;\n+  void *rvalue;\n+  void **avalue __attribute__((aligned));\n } extended_cif;\n \n /* Terse sized type definitions.  */"}]}