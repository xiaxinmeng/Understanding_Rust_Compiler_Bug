{"sha": "99f68181b11021f92f9f41324d16ad22fbc8c57e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmNjgxODFiMTEwMjFmOTJmOWY0MTMyNGQxNmFkMjJmYmM4YzU3ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-24T05:37:02Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-26T22:53:07Z"}, "message": "[RS6000] Tests that use int128_t and -m32\n\nAll these tests fail with -m32 due to lack of int128 support, in some\ncases with what I thought was not the best error message.  For example\nvsx_mask-move-runnable.c:34:3: error: unknown type name 'vector'\nis misleading.  The problem isn't \"vector\" but \"vector __uint128_t\".\n\n\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Require int128.\n\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.\n\t* gcc.target/powerpc/vsx_mask-count-runnable.c: Likewise.\n\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: Likewise.\n\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: Likewise.\n\t* gcc.target/powerpc/vsx_mask-move-runnable.c: Likewise.", "tree": {"sha": "30aae31ab984c6f13742ba7091dc663c1f584de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30aae31ab984c6f13742ba7091dc663c1f584de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f68181b11021f92f9f41324d16ad22fbc8c57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f68181b11021f92f9f41324d16ad22fbc8c57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f68181b11021f92f9f41324d16ad22fbc8c57e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f68181b11021f92f9f41324d16ad22fbc8c57e/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8fef197114a986f6597499e9a2a14aca70cd1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8fef197114a986f6597499e9a2a14aca70cd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8fef197114a986f6597499e9a2a14aca70cd1c"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "58986d636e4ce907a47565aad9f10e5ebb920c91", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-char.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -4,6 +4,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O3\" } */\n \n /* At the time of writing, the number of lxvrbx instructions is"}, {"sha": "366a01370044990b034d83c323dc0bbf5658d87b", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-int.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -4,6 +4,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm\n    the lxvr*x instruction is generated. At higher optimization levels"}, {"sha": "8dfbc79a33d7fc2f1c879635584ceda2ac48282f", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-longlong.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -4,6 +4,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O3\" } */\n \n /* At time of writing, we also geenerate a .constrprop copy"}, {"sha": "87e263c864de7a3dc619f86bbdf60ca0d4beb365", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-short.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -4,6 +4,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm\n    the lxvr*x instruction is generated. At higher optimization levels"}, {"sha": "b69a1f3e291a2038e12c712eff7b54f0c94f2bd4", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-char.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other"}, {"sha": "76e09fde0683bb692985d1b462077bb4379cb8dd", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-int.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other"}, {"sha": "c137ce2d19f680da18aea184c31c45de94df40bf", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-longlong.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels"}, {"sha": "7d856e7c3eb278e2c99ef0bb09e50a6a516c5df6", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-short.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n+/* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels"}, {"sha": "6ac4ed2173f411a9999ec38092d0e292ed3736a3", "filename": "gcc/testsuite/gcc.target/powerpc/vsx_mask-count-runnable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-count-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-count-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-count-runnable.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { power10_hw } } } */\n /* { dg-do link { target { ! power10_hw } } } */\n /* { dg-options \"-mcpu=power10 -O2\" } */\n-/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target { int128 && power10_ok } } */\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */"}, {"sha": "05fedf77eb9022f9cade496b4983bd24d27fe1b0", "filename": "gcc/testsuite/gcc.target/powerpc/vsx_mask-expand-runnable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-expand-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-expand-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-expand-runnable.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { power10_hw } } } */\n /* { dg-do link { target { ! power10_hw } } } */\n /* { dg-options \"-mcpu=power10 -O2\" } */\n-/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target { int128 && power10_ok } } */\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */"}, {"sha": "6e952695905d5a6955d160c591c7aeacec103dea", "filename": "gcc/testsuite/gcc.target/powerpc/vsx_mask-extract-runnable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-extract-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-extract-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-extract-runnable.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { power10_hw } } } */\n /* { dg-do link { target { ! power10_hw } } } */\n /* { dg-options \"-mcpu=power10 -O2\" } */\n-/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target { int128 && power10_ok } } */\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */"}, {"sha": "c2eb53d3bb2331ae522e1fa455c348e083d143b8", "filename": "gcc/testsuite/gcc.target/powerpc/vsx_mask-move-runnable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-move-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f68181b11021f92f9f41324d16ad22fbc8c57e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-move-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx_mask-move-runnable.c?ref=99f68181b11021f92f9f41324d16ad22fbc8c57e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { power10_hw } } } */\n /* { dg-do link { target { ! power10_hw } } } */\n /* { dg-options \"-mcpu=power10 -O2\" } */\n-/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target { int128 && power10_ok } } */\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */"}]}