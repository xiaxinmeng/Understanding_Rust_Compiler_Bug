{"sha": "60163eae1b932f9d15ad3345e44593e27d8bfb0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxNjNlYWUxYjkzMmY5ZDE1YWQzMzQ1ZTQ0NTkzZTI3ZDhiZmIwYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-09-04T02:25:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-09-04T02:25:28Z"}, "message": "Initial revision\n\nFrom-SVN: r38", "tree": {"sha": "a5806405a23ce35699029544241f3006eedf0c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5806405a23ce35699029544241f3006eedf0c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60163eae1b932f9d15ad3345e44593e27d8bfb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60163eae1b932f9d15ad3345e44593e27d8bfb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60163eae1b932f9d15ad3345e44593e27d8bfb0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60163eae1b932f9d15ad3345e44593e27d8bfb0a/comments", "author": null, "committer": null, "parents": [{"sha": "07f280dc8c5e24a67a79ca4129ffa62a9318822c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f280dc8c5e24a67a79ca4129ffa62a9318822c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f280dc8c5e24a67a79ca4129ffa62a9318822c"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "d24a1f533b2d0ffa3ed97540f5d9ebeda58211f7", "filename": "gcc/ginclude/va-pyr.h", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60163eae1b932f9d15ad3345e44593e27d8bfb0a/gcc%2Fginclude%2Fva-pyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60163eae1b932f9d15ad3345e44593e27d8bfb0a/gcc%2Fginclude%2Fva-pyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pyr.h?ref=60163eae1b932f9d15ad3345e44593e27d8bfb0a", "patch": "@@ -0,0 +1,110 @@\n+/**\n+ *\n+ * \tVarargs for PYR/GNU CC\n+ *\n+ * WARNING -- WARNING -- DANGER\n+ *\n+ * The code in this file implements varargs for gcc on a pyr in\n+ * a way that is compatible with code compiled by the Pyramid Technology\n+ * C compiler.\n+ * As such, it depends strongly on the Pyramid conventions for\n+ * parameter passing.ct and indepenent implementation. \n+ * These (somewhat bizarre) paramter-passing conventions are described\n+ * in the ``OSx Operating System Porting Guide''.\n+ * \n+ * A quick summary is useful:\n+ * 12 of the 48 register-windowed regs available for\n+ * parameter passing.  Parameters of a function call that are eligible\n+ * to be passed in registers are assigned registers from TR0/PR0 onwards;\n+ * all other arguments are passed on the stack.\n+ * Structure and union parameters are *never* passed in registers,\n+ * even if they are small enough to fit.  They are always passed on\n+ * the stack.\n+ *\n+ * Double-sized parameters cannot be passed in TR11, because\n+ * TR12 is not used for passing parameters.  If, in the absence of this\n+ * rule, a double-sized param would have been passed in TR11,\n+ * that parameter is passed on the stack and no parameters are\n+ * passed in TR11.\n+ * \n+ * It is only known to work for passing 32-bit integer quantities\n+ * (ie chars, shorts, ints/enums, longs), doubles, or pointers. \n+ * Passing structures on a Pyramid via varargs is a loser.\n+ * Passing an object larger than 8 bytes on a pyramid via varargs may\n+ * also be a loser.\n+ * \n+ */\n+\n+\f\n+/*\n+ *  pointer to next stack parameter in __va_buf[0]\n+ *  pointer to next parameter register in __va_buf[1]\n+ *  Count of registers seen at __va_buf[2]\n+ *  saved pr0..pr11 in __va_buf[3..14]\n+ *  # of calls to va_arg (debugging) at __va_buf[15]\n+ */\n+\n+typedef void *__voidptr;\n+#if 1\n+\n+typedef struct __va_regs {\n+      __voidptr __stackp,__regp,__count;\n+      __voidptr __pr0,__pr1,__pr2,__pr3,__pr4,__pr5,__pr6,__pr7,__pr8,__pr9,__pr10,__pr11;\n+  } __va_regs;\n+\n+typedef __va_regs __va_buf;\n+#else\n+\n+/* __va_buf[0] = address of next arg passed on the stack\n+   __va_buf[1] = address of next arg passed in a register\n+   __va_buf[2] = register-# of next arg passed in a register\n+ */\n+typedef __voidptr(*__va_buf);\n+\n+#endif\n+\n+/* In GCC version 2, we want an ellipsis at the end of the declaration\n+   of the argument list.  GCC version 1 can't parse it.  */\n+\n+#if __GNUC__ > 1\n+#define __va_ellipsis ...\n+#else\n+#define __va_ellipsis\n+#endif\n+\n+#define va_alist \\\n+  __va0,__va1,__va2,__va3,__va4,__va5,__va6,__va7,__va8,__va9,__va10,__va11, \\\n+ __builtin_va_alist\n+\n+/* The ... causes current_function_varargs to be set in cc1.  */\n+#define va_dcl __voidptr va_alist; __va_ellipsis\n+\n+typedef __va_buf va_list;\n+\n+\n+/* __asm (\"rcsp %0\" : \"=r\" ( _AP [0]));*/\n+\n+#define va_start(_AP)  \\\n+  _AP =  ((struct __va_regs) {\t\t\t\t\t\t\\\n+   &(_AP.__pr0), (void*)&__builtin_va_alist, (void*)0,\t\t\t\\\n+        __va0,__va1,__va2,__va3,__va4,__va5,\t\t\t\t\\\n+\t__va6,__va7,__va8,__va9,__va10,__va11})\n+ \n+  \n+\t \n+\n+#define va_arg(_AP, _MODE)\t\\\n+({__voidptr *__ap = (__voidptr*)&_AP;\t\t\t\t\t\\\n+  register int __size = sizeof (_MODE);\t\t\t\t\t\\\n+  register int __onstack =\t\t\t\t\t\t\\\n+\t  (__size > 8 || ( (int)(__ap[2]) > 11) ||\t\t\t\\\n+\t    (__size==8 && (int)(__ap[2])==11));\t\t\t\t\\\n+  register int* __param_addr =  ((int*)((__ap) [__onstack]));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ((void *)__ap[__onstack])+=__size;\t\t\t\t\t\\\n+    if (__onstack==0 || (int)(__ap[2])==11)\t\t\t\t\\\n+      __ap[2]+= (__size >> 2);\t\t\t\t\t\t\\\n+  *(( _MODE *)__param_addr);\t\t\t\t\t\t\\\n+})\n+\n+#define va_end(_X)"}]}