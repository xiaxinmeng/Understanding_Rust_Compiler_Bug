{"sha": "cbf5d0e70c98103d28c869305043d9889bb36c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JmNWQwZTcwYzk4MTAzZDI4Yzg2OTMwNTA0M2Q5ODg5YmIzNmM4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-01-21T09:04:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-01-21T09:04:53Z"}, "message": "re PR middle-end/64313 (gcc.dg/torture/builtin-explog-1.c fails on bare-metal targets)\n\n2015-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/64313\n\t* tree-core.h (builtin_info, builtin_info_type): Turn from\n\tan object with two arrays into an array of an object with\n\tdecl and two flags, implicit_p and declared_p.\n\t* tree.h (builtin_decl_explicit, builtin_decl_implicit,\n\tset_builtin_decl, set_builtin_decl_implicit_p,\n\tbuiltin_decl_explicit_p, builtin_decl_implicit_p): Adjust.\n\t(set_builtin_decl_declared_p, builtin_decl_declared_p): New functions.\n\t* builtins.c (builtin_info): Adjust.\n\t* gimplify.c (gimplify_addr_expr): References to builtins\n\tthat have been declared by the user makes them eligible for\n\tuse by the compiler.  Call set_builtin_decl_implicit_p on them.\n\n\tc/\n\t* c-decl.c (merge_decls): Call set_builtin_decl_declared_p\n\tfor builtins the user declared correctly.\n\n\tcp/\n\t* decl.c (duplicate_decls): Call set_builtin_decl_declared_p\n\tfor builtins the user declared correctly.\n\nFrom-SVN: r219928", "tree": {"sha": "33d3bb74da1e52661a0940e472d95cdc4efa58ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33d3bb74da1e52661a0940e472d95cdc4efa58ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbf5d0e70c98103d28c869305043d9889bb36c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf5d0e70c98103d28c869305043d9889bb36c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf5d0e70c98103d28c869305043d9889bb36c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf5d0e70c98103d28c869305043d9889bb36c8f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "c6600d9bb1e754b82f66033f4a95dbe96e21db94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -1,3 +1,18 @@\n+2015-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64313\n+\t* tree-core.h (builtin_info, builtin_info_type): Turn from\n+\tan object with two arrays into an array of an object with\n+\tdecl and two flags, implicit_p and declared_p.\n+\t* tree.h (builtin_decl_explicit, builtin_decl_implicit,\n+\tset_builtin_decl, set_builtin_decl_implicit_p,\n+\tbuiltin_decl_explicit_p, builtin_decl_implicit_p): Adjust.\n+\t(set_builtin_decl_declared_p, builtin_decl_declared_p): New functions.\n+\t* builtins.c (builtin_info): Adjust.\n+\t* gimplify.c (gimplify_addr_expr): References to builtins\n+\tthat have been declared by the user makes them eligible for\n+\tuse by the compiler.  Call set_builtin_decl_implicit_p on them.\n+\n 2015-01-20  Jeff Law  <law@redhat.com>\n \n \tPR target/59946"}, {"sha": "3ddaddc1ab061815f3a0f12d2850baca6b9deb7a", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -105,9 +105,9 @@ const char * built_in_names[(int) END_BUILTINS] =\n };\n #undef DEF_BUILTIN\n \n-/* Setup an array of _DECL trees, make sure each element is\n+/* Setup an array of builtin_info_type, make sure each element decl is\n    initialized to NULL_TREE.  */\n-builtin_info_type builtin_info;\n+builtin_info_type builtin_info[(int)END_BUILTINS];\n \n /* Non-zero if __builtin_constant_p should be folded right away.  */\n bool force_folding_builtin_constant_p;"}, {"sha": "33cc2bd3a20326bf1960e6e8d821ebab8658ac51", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64313\n+\t* c-decl.c (merge_decls): Call set_builtin_decl_declared_p\n+\tfor builtins the user declared correctly.\n+\n 2015-01-15  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "48c2bcbf8bb4730c8d9159c6e9859a5b3039d973", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -2582,6 +2582,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t\t\tset_builtin_decl_implicit_p (fncode, true);\n \t\t      break;\n \t\t    default:\n+\t\t      if (builtin_decl_explicit_p (fncode))\n+\t\t\tset_builtin_decl_declared_p (fncode, true);\n \t\t      break;\n \t\t    }\n \t\t}"}, {"sha": "d5b3cd8ad43b998389e48322fdd2182c5cd566c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64313\n+\t* decl.c (duplicate_decls): Call set_builtin_decl_declared_p\n+\tfor builtins the user declared correctly.\n+\n 2015-01-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58614"}, {"sha": "5119964dea9a7539bf8fe22db1997aba266446a1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -2309,6 +2309,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t    set_builtin_decl_implicit_p (fncode, true);\n \t\t  break;\n \t\tdefault:\n+\t\t  if (builtin_decl_explicit_p (fncode))\n+\t\t    set_builtin_decl_declared_p (fncode, true);\n \t\t  break;\n \t\t}\n \t    }"}, {"sha": "947b0af8d566c8b0b29356096d7c07029720453c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -4956,6 +4956,14 @@ gimplify_addr_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       break;\n \n     default:\n+      /* If we see a call to a declared builtin or see its address\n+\t being taken (we can unify those cases here) then we can mark\n+\t the builtin for implicit generation by GCC.  */\n+      if (TREE_CODE (op0) == FUNCTION_DECL\n+\t  && DECL_BUILT_IN_CLASS (op0) == BUILT_IN_NORMAL\n+\t  && builtin_decl_declared_p (DECL_FUNCTION_CODE (op0)))\n+\tset_builtin_decl_implicit_p (DECL_FUNCTION_CODE (op0), true);\n+\n       /* We use fb_either here because the C frontend sometimes takes\n \t the address of a call that returns a struct; see\n \t gcc.dg/c99-array-lval-1.c.  The gimplifier will correctly make"}, {"sha": "c7a21b5c35350cc1558cb90f58c2c0eaeb15619b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -1853,11 +1853,14 @@ struct const_call_expr_arg_iterator {\n };\n \n /* The builtin_info structure holds the FUNCTION_DECL of the standard builtin\n-   function, and a flag that says if the function is available implicitly, or\n-   whether the user has to code explicit calls to __builtin_<xxx>.  */\n+   function, and flags.  */\n struct GTY(()) builtin_info_type {\n-  tree decl[(int)END_BUILTINS];\n-  bool implicit_p[(int)END_BUILTINS];\n+  tree decl;\n+  /* Whether the user can use <xxx> instead of explicitly using calls\n+     to __builtin_<xxx>.  */\n+  unsigned implicit_p : 1;\n+  /* Whether the user has provided a declaration of <xxx>.  */\n+  unsigned declared_p : 1;\n };\n \n \n@@ -1913,7 +1916,7 @@ extern int tree_node_sizes[];\n extern bool in_gimple_form;\n \n /* Functional interface to the builtin functions.  */\n-extern GTY(()) builtin_info_type builtin_info;\n+extern GTY(()) builtin_info_type builtin_info[(int)END_BUILTINS];\n \n /* If nonzero, an upper limit on alignment of structure fields, in bits,  */\n extern unsigned int maximum_field_alignment;"}, {"sha": "d8eaff6785181211c4b87dde9a65c5a0b348691b", "filename": "gcc/tree.h", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf5d0e70c98103d28c869305043d9889bb36c8f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cbf5d0e70c98103d28c869305043d9889bb36c8f", "patch": "@@ -4606,7 +4606,7 @@ builtin_decl_explicit (enum built_in_function fncode)\n {\n   gcc_checking_assert (BUILTIN_VALID_P (fncode));\n \n-  return builtin_info.decl[(size_t)fncode];\n+  return builtin_info[(size_t)fncode].decl;\n }\n \n /* Return the tree node for an implicit builtin function or NULL.  */\n@@ -4616,10 +4616,10 @@ builtin_decl_implicit (enum built_in_function fncode)\n   size_t uns_fncode = (size_t)fncode;\n   gcc_checking_assert (BUILTIN_VALID_P (fncode));\n \n-  if (!builtin_info.implicit_p[uns_fncode])\n+  if (!builtin_info[uns_fncode].implicit_p)\n     return NULL_TREE;\n \n-  return builtin_info.decl[uns_fncode];\n+  return builtin_info[uns_fncode].decl;\n }\n \n /* Set explicit builtin function nodes and whether it is an implicit\n@@ -4633,8 +4633,9 @@ set_builtin_decl (enum built_in_function fncode, tree decl, bool implicit_p)\n   gcc_checking_assert (BUILTIN_VALID_P (fncode)\n \t\t       && (decl != NULL_TREE || !implicit_p));\n \n-  builtin_info.decl[ufncode] = decl;\n-  builtin_info.implicit_p[ufncode] = implicit_p;\n+  builtin_info[ufncode].decl = decl;\n+  builtin_info[ufncode].implicit_p = implicit_p;\n+  builtin_info[ufncode].declared_p = false;\n }\n \n /* Set the implicit flag for a builtin function.  */\n@@ -4645,9 +4646,22 @@ set_builtin_decl_implicit_p (enum built_in_function fncode, bool implicit_p)\n   size_t uns_fncode = (size_t)fncode;\n \n   gcc_checking_assert (BUILTIN_VALID_P (fncode)\n-\t\t       && builtin_info.decl[uns_fncode] != NULL_TREE);\n+\t\t       && builtin_info[uns_fncode].decl != NULL_TREE);\n \n-  builtin_info.implicit_p[uns_fncode] = implicit_p;\n+  builtin_info[uns_fncode].implicit_p = implicit_p;\n+}\n+\n+/* Set the declared flag for a builtin function.  */\n+\n+static inline void\n+set_builtin_decl_declared_p (enum built_in_function fncode, bool declared_p)\n+{\n+  size_t uns_fncode = (size_t)fncode;\n+\n+  gcc_checking_assert (BUILTIN_VALID_P (fncode)\n+\t\t       && builtin_info[uns_fncode].decl != NULL_TREE);\n+\n+  builtin_info[uns_fncode].declared_p = declared_p;\n }\n \n /* Return whether the standard builtin function can be used as an explicit\n@@ -4657,7 +4671,7 @@ static inline bool\n builtin_decl_explicit_p (enum built_in_function fncode)\n {\n   gcc_checking_assert (BUILTIN_VALID_P (fncode));\n-  return (builtin_info.decl[(size_t)fncode] != NULL_TREE);\n+  return (builtin_info[(size_t)fncode].decl != NULL_TREE);\n }\n \n /* Return whether the standard builtin function can be used implicitly.  */\n@@ -4668,8 +4682,20 @@ builtin_decl_implicit_p (enum built_in_function fncode)\n   size_t uns_fncode = (size_t)fncode;\n \n   gcc_checking_assert (BUILTIN_VALID_P (fncode));\n-  return (builtin_info.decl[uns_fncode] != NULL_TREE\n-\t  && builtin_info.implicit_p[uns_fncode]);\n+  return (builtin_info[uns_fncode].decl != NULL_TREE\n+\t  && builtin_info[uns_fncode].implicit_p);\n+}\n+\n+/* Return whether the standard builtin function was declared.  */\n+\n+static inline bool\n+builtin_decl_declared_p (enum built_in_function fncode)\n+{\n+  size_t uns_fncode = (size_t)fncode;\n+\n+  gcc_checking_assert (BUILTIN_VALID_P (fncode));\n+  return (builtin_info[uns_fncode].decl != NULL_TREE\n+\t  && builtin_info[uns_fncode].declared_p);\n }\n \n /* Return true if T (assumed to be a DECL) is a global variable."}]}