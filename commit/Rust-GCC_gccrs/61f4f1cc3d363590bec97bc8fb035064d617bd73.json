{"sha": "61f4f1cc3d363590bec97bc8fb035064d617bd73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNGYxY2MzZDM2MzU5MGJlYzk3YmM4ZmIwMzUwNjRkNjE3YmQ3Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-13T21:00:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-13T21:00:33Z"}, "message": "c-decl.c (grokdeclarator): Correct comments about where storage class specifiers are rejected by grammar...\n\n\t* c-decl.c (grokdeclarator): Correct comments about where storage\n\tclass specifiers are rejected by grammar and add corresponding\n\tasserts.  Diagnose typedefs and parameters declared inline.\n\tChange warning for inline main to a pedwarn.  Only diagnose inline\n\tmain if hosted.\n\t(declspecs_add_scspec): Allow duplicate \"inline\".\n\ntestsuite:\n\t* gcc.dg/declspec-7.c: Don't expect diagnostic for duplicate\n\t\"inline\".\n\t* gcc.dg/declspec-11.c: Update expected messages.\n\t* gcc.dg/inline-6.c, gcc.dg/inline-7.c, gcc.dg/inline-8.c,\n\tgcc.dg/inline-9.c, gcc.dg/inline-10.c, gcc.dg/inline-11.c,\n\tgcc.dg/inline-12.c: New tests.\n\nFrom-SVN: r87450", "tree": {"sha": "ba99baf31dd5640c618debd8f6de5121f2512a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba99baf31dd5640c618debd8f6de5121f2512a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f4f1cc3d363590bec97bc8fb035064d617bd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f4f1cc3d363590bec97bc8fb035064d617bd73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f4f1cc3d363590bec97bc8fb035064d617bd73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f4f1cc3d363590bec97bc8fb035064d617bd73/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cb0e432b123b1e152e9d35c0675495bde8fe72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cb0e432b123b1e152e9d35c0675495bde8fe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4cb0e432b123b1e152e9d35c0675495bde8fe72"}], "stats": {"total": 110, "additions": 98, "deletions": 12}, "files": [{"sha": "3166bd15c66837599330a8528422ccb6d9f4cb94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -1,3 +1,12 @@\n+2004-09-13  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-decl.c (grokdeclarator): Correct comments about where storage\n+\tclass specifiers are rejected by grammar and add corresponding\n+\tasserts.  Diagnose typedefs and parameters declared inline.\n+\tChange warning for inline main to a pedwarn.  Only diagnose inline\n+\tmain if hosted.\n+\t(declspecs_add_scspec): Allow duplicate \"inline\".\n+\n 2004-09-13  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.c (ia64_scalar_mode_supported_p): New."}, {"sha": "1d6c40dd0b0e6e275bf03e5a1e12298bd28954c4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -4356,8 +4356,6 @@ grokdeclarator (const struct c_declarator *declarator,\n   if (storage_class == csc_typedef)\n     {\n       tree decl;\n-      /* Note that the grammar rejects storage classes\n-\t in typenames, fields or parameters */\n       if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t  && type_quals)\n \tpedwarn (\"ISO C forbids qualified function types\");\n@@ -4368,6 +4366,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  || declspecs->typedef_signed_p)\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       decl_attributes (&decl, returned_attrs, 0);\n+      if (declspecs->inline_p)\n+\tpedwarn (\"%Jtypedef %qD declared %<inline%>\", decl, decl);\n       return decl;\n     }\n \n@@ -4391,8 +4391,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   if (decl_context == TYPENAME)\n     {\n-      /* Note that the grammar rejects storage classes\n-\t in typenames, fields or parameters */\n+      /* Note that the grammar rejects storage classes in typenames\n+\t and fields.  */\n+      gcc_assert (storage_class == csc_none && !threadp\n+\t\t  && !declspecs->inline_p);\n       if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t  && type_quals)\n \tpedwarn (\"ISO C forbids const or volatile function types\");\n@@ -4495,9 +4497,16 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \tDECL_ARG_TYPE (decl) = promoted_type;\n \tDECL_ARG_TYPE_AS_WRITTEN (decl) = type_as_written;\n+\tif (declspecs->inline_p)\n+\t  pedwarn (\"%Jparameter %qD declared %<inline%>\", decl, decl);\n       }\n     else if (decl_context == FIELD)\n       {\n+\t/* Note that the grammar rejects storage classes in typenames\n+\t   and fields.  */\n+\tgcc_assert (storage_class == csc_none && !threadp\n+\t\t    && !declspecs->inline_p);\n+\n \t/* Structure field.  It may not be a function.  */\n \n \tif (TREE_CODE (type) == FUNCTION_TYPE)\n@@ -4579,10 +4588,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  C_FUNCTION_IMPLICIT_INT (decl) = 1;\n \n \t/* Record presence of `inline', if it is reasonable.  */\n-\tif (MAIN_NAME_P (declarator->u.id))\n+\tif (flag_hosted && MAIN_NAME_P (declarator->u.id))\n \t  {\n \t    if (declspecs->inline_p)\n-\t      warning (\"cannot inline function %<main%>\");\n+\t      pedwarn (\"cannot inline function %<main%>\");\n \t  }\n \telse if (declspecs->inline_p)\n \t  {\n@@ -6858,10 +6867,11 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n   switch (i)\n     {\n     case RID_INLINE:\n-      /* GCC has hitherto given an error for duplicate inline, but\n-\t this should be revisited since C99 permits duplicate\n-\t inline.  */\n-      dupe = specs->inline_p;\n+      /* C99 permits duplicate inline.  Although of doubtful utility,\n+\t it seems simplest to permit it in gnu89 mode as well, as\n+\t there is also little utility in maintaining this as a\n+\t difference between gnu89 and C99 inline.  */\n+      dupe = false;\n       specs->inline_p = true;\n       break;\n     case RID_THREAD:"}, {"sha": "4353e177c08be0ee908ddce58f475ff82307486f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -1,3 +1,12 @@\n+2004-09-13  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/declspec-7.c: Don't expect diagnostic for duplicate\n+\t\"inline\".\n+\t* gcc.dg/declspec-11.c: Update expected messages.\n+\t* gcc.dg/inline-6.c, gcc.dg/inline-7.c, gcc.dg/inline-8.c,\n+\tgcc.dg/inline-9.c, gcc.dg/inline-10.c, gcc.dg/inline-11.c,\n+\tgcc.dg/inline-12.c: New tests.\n+\n 2004-09-13  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* g++.dg/tree-ssa/pr17400.C: New testcase."}, {"sha": "6c6892fe11fc1549e7a720c8570cf60baf61b2a8", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -42,4 +42,4 @@ register void f8 (void); /* { dg-error \"error: invalid storage class for functio\n void i (void) { auto void y (void) {} } /* { dg-error \"error: ISO C forbids nested functions\" } */\n /* { dg-error \"error: function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n \n-inline int main (void) { return 0; } /* { dg-warning \"warning: cannot inline function 'main'\" } */\n+inline int main (void) { return 0; } /* { dg-error \"error: cannot inline function 'main'\" } */"}, {"sha": "1cd4e836d627d8e0ca52e33318cee1c906c44d3f", "filename": "gcc/testsuite/gcc.dg/declspec-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-7.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -8,7 +8,7 @@\n \n /* Duplicate specifiers.  */\n \n-inline inline void f0 (void), /* { dg-error \"error: duplicate 'inline'\" } */\n+inline inline void f0 (void),\n   f1 (void);\n \n static static int a, /* { dg-error \"error: duplicate 'static'\" } */"}, {"sha": "ed6851a615b0e7ad30e08c43da50e48276cc928e", "filename": "gcc/testsuite/gcc.dg/inline-10.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-10.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,6 @@\n+/* Test inline main, gnu99 mode, freestanding, -pedantic-errors.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -ffreestanding -pedantic-errors\" } */\n+\n+inline int main (void);"}, {"sha": "6d0f41d969cf1fab2fd0bea54dcff19503c8e302", "filename": "gcc/testsuite/gcc.dg/inline-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-11.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,14 @@\n+/* Test misuses of inline.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* These should perhaps be hard errors, but are pedwarns at\n+   present.  */\n+\n+inline int a; /* { dg-warning \"warning: variable 'a' declared 'inline'\" } */\n+inline int (*b)(void); /* { dg-warning \"warning: variable 'b' declared 'inline'\" } */\n+typedef inline void c(void); /* { dg-warning \"warning: typedef 'c' declared 'inline'\" } */\n+typedef inline int d; /* { dg-warning \"warning: typedef 'd' declared 'inline'\" } */\n+void e(inline int f(void)); /* { dg-warning \"warning: parameter 'f' declared 'inline'\" } */\n+void g(inline int(void)); /* { dg-warning \"warning: parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */"}, {"sha": "c793196fe72282ed81300372dbd78a04ab085d16", "filename": "gcc/testsuite/gcc.dg/inline-12.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-12.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,14 @@\n+/* Test misuses of inline.  -pedantic-errors test.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n+\n+/* These should perhaps be hard errors, but are pedwarns at\n+   present.  */\n+\n+inline int a; /* { dg-error \"error: variable 'a' declared 'inline'\" } */\n+inline int (*b)(void); /* { dg-error \"error: variable 'b' declared 'inline'\" } */\n+typedef inline void c(void); /* { dg-error \"error: typedef 'c' declared 'inline'\" } */\n+typedef inline int d; /* { dg-error \"error: typedef 'd' declared 'inline'\" } */\n+void e(inline int f(void)); /* { dg-error \"error: parameter 'f' declared 'inline'\" } */\n+void g(inline int(void)); /* { dg-error \"error: parameter '\\\\({anonymous}\\\\)' declared 'inline'\" } */"}, {"sha": "81d6dc2208202a2016149df5c4072359d81abfc1", "filename": "gcc/testsuite/gcc.dg/inline-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-6.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,6 @@\n+/* Test duplicate inline, gnu89 mode.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+inline inline void f (void) {}"}, {"sha": "b239a20461cee596e9424204f6db454ba1d25f28", "filename": "gcc/testsuite/gcc.dg/inline-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-7.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,6 @@\n+/* Test duplicate inline, gnu99 mode.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+inline inline void f (void) {}"}, {"sha": "80d9fff544065a1b55c27d43fe8ec1106f30e7e0", "filename": "gcc/testsuite/gcc.dg/inline-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-8.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,6 @@\n+/* Test inline main, gnu99 mode, hosted.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fhosted\" } */\n+\n+inline int main (void); /* { dg-warning \"warning: cannot inline function 'main'\" } */"}, {"sha": "0f22b0805a398655ba16e08242b6869b9a8e6442", "filename": "gcc/testsuite/gcc.dg/inline-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f4f1cc3d363590bec97bc8fb035064d617bd73/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-9.c?ref=61f4f1cc3d363590bec97bc8fb035064d617bd73", "patch": "@@ -0,0 +1,6 @@\n+/* Test inline main, gnu99 mode, hosted, -pedantic-errors.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fhosted -pedantic-errors\" } */\n+\n+inline int main (void); /* { dg-error \"error: cannot inline function 'main'\" } */"}]}