{"sha": "ff23b16ca751a71229f1830e59c277b1ff82cfdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyM2IxNmNhNzUxYTcxMjI5ZjE4MzBlNTljMjc3YjFmZjgyY2ZkYg==", "commit": {"author": {"name": "Raif S. Naffah", "email": "raif@fl.net.au", "date": "2003-02-11T00:08:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-02-11T00:08:32Z"}, "message": "SHA1PRNG.java (ensureIsSeeded): new method used to ensure seeding has occurred and that a specific seed can be...\n\n2003-02-10  Raif S. Naffah  <raif@fl.net.au>\n\n\t* gnu/java/security/provider/SHA1PRNG.java (ensureIsSeeded): new\n\tmethod used to ensure seeding has occurred and that a specific\n\tseed can be set and used.\n\nFrom-SVN: r62660", "tree": {"sha": "4e3bd3398ccf2322a0b7a45bff2cf8d35acd1f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e3bd3398ccf2322a0b7a45bff2cf8d35acd1f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff23b16ca751a71229f1830e59c277b1ff82cfdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff23b16ca751a71229f1830e59c277b1ff82cfdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff23b16ca751a71229f1830e59c277b1ff82cfdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff23b16ca751a71229f1830e59c277b1ff82cfdb/comments", "author": null, "committer": null, "parents": [{"sha": "d6a2d36ee72dd89c72dbd05720fd4bc81e4b20e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a2d36ee72dd89c72dbd05720fd4bc81e4b20e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a2d36ee72dd89c72dbd05720fd4bc81e4b20e2"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "4dfe820cd302dd2a0ed878c43af376df7199705f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff23b16ca751a71229f1830e59c277b1ff82cfdb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff23b16ca751a71229f1830e59c277b1ff82cfdb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ff23b16ca751a71229f1830e59c277b1ff82cfdb", "patch": "@@ -1,3 +1,9 @@\n+2003-02-10  Raif S. Naffah  <raif@fl.net.au>\n+\n+\t* gnu/java/security/provider/SHA1PRNG.java (ensureIsSeeded): new \n+\tmethod used to ensure seeding has occurred and that a specific \n+\tseed can be set and used.\n+\n 2003-02-10  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* java/lang/Win32Process.java (destroy): Declare as native."}, {"sha": "97a8b9e34334c1c095246dded593427ddcffc1f8", "filename": "libjava/gnu/java/security/provider/SHA1PRNG.java", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff23b16ca751a71229f1830e59c277b1ff82cfdb/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff23b16ca751a71229f1830e59c277b1ff82cfdb/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java?ref=ff23b16ca751a71229f1830e59c277b1ff82cfdb", "patch": "@@ -1,5 +1,5 @@\n /* SHA1PRNG.java --- Secure Random SPI SHA1PRNG\n-   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -51,27 +51,22 @@ public class SHA1PRNG extends SecureRandomSpi implements Serializable\n   byte data[];\n   int seedpos;\n   int datapos;\n+  private boolean seeded = false; // set to true when we seed this\n \n   public SHA1PRNG()\n   {\n     try {\n       digest = MessageDigest.getInstance(\"SHA\");\n     } catch ( NoSuchAlgorithmException nsae) {\n-      System.out.println(\"Failed to find SHA Message Digest: \" + nsae);\n-      nsae.printStackTrace();\n+//      System.out.println(\"Failed to find SHA Message Digest: \" + nsae);\n+//      nsae.printStackTrace();\n+      throw new InternalError (\"no SHA implementation found\");\n     }\n \n     seed = new byte[20];\n     seedpos = 0;\n     data = new byte[40];\n-    datapos = 0;\n-\n-    new Random().nextBytes(seed);\n-\n-    byte digestdata[];\n-    digestdata = digest.digest( data );\n-    System.arraycopy( digestdata, 0, data, 0, 20);\n-\n+    datapos = 20;  // try to force hashing a first block\n   }\n \n   public void engineSetSeed(byte[] seed)\n@@ -84,6 +79,7 @@ public void engineSetSeed(byte[] seed)\n \n   public void engineNextBytes(byte[] bytes)\n   {\n+    ensureIsSeeded ();\n     int loc = 0;\n     while (loc < bytes.length)\n       {\n@@ -113,4 +109,18 @@ public byte[] engineGenerateSeed(int numBytes)\n     engineNextBytes( tmp );\n     return tmp;\n   }\n+\n+  private void ensureIsSeeded()\n+  {\n+    if (!seeded)\n+      {\n+        new Random(0L).nextBytes(seed);\n+\n+        byte[] digestdata = digest.digest(data);\n+        System.arraycopy(digestdata, 0, data, 0, 20);\n+\n+        seeded = true;\n+      }\n+  }\n+\n }"}]}