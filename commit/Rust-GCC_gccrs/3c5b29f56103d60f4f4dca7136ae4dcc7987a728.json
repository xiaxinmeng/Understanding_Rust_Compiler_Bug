{"sha": "3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1YjI5ZjU2MTAzZDYwZjRmNGRjYTcxMzZhZTRkY2M3OTg3YTcyOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-07T07:43:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-07T07:43:35Z"}, "message": "tree-ssa-pre.c: Include alias.h.\n\n2016-07-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c: Include alias.h.\n\t(compute_avail): If we have multiple VN_REFERENCEs with the\n\tsame hashtable entry adjust that to make it a valid replacement\n\tfor all of them with respect to alignment and aliasing\n\twhen doing insertion.\n\t* tree-ssa-sccvn.h (vn_reference_operands_for_lookup): Declare.\n\t* tree-ssa-sccvn.c (vn_reference_operands_for_lookup): New function.\n\nFrom-SVN: r238078", "tree": {"sha": "1418b84f009ff78ba988582b7613211c85a2c645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1418b84f009ff78ba988582b7613211c85a2c645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ddaee94e247a189a8a17af7dce8d45e0c30adee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddaee94e247a189a8a17af7dce8d45e0c30adee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ddaee94e247a189a8a17af7dce8d45e0c30adee"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "4fa2c4dcee4d1414df8cc5735ed90768cb9c24d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "patch": "@@ -1,3 +1,13 @@\n+2016-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c: Include alias.h.\n+\t(compute_avail): If we have multiple VN_REFERENCEs with the\n+\tsame hashtable entry adjust that to make it a valid replacement\n+\tfor all of them with respect to alignment and aliasing\n+\twhen doing insertion.\n+\t* tree-ssa-sccvn.h (vn_reference_operands_for_lookup): Declare.\n+\t* tree-ssa-sccvn.c (vn_reference_operands_for_lookup): New function.\n+\n 2016-07-06  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/70098"}, {"sha": "0c97f4fbcce68ffd2efb3b66f605bb58087d9888", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 74, "deletions": 5, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"langhooks.h\"\n+#include \"alias.h\"\n \n /* TODO:\n \n@@ -3724,12 +3725,19 @@ compute_avail (void)\n \n \t\t  case VN_REFERENCE:\n \t\t    {\n+\t\t      tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t\t      alias_set_type set = get_alias_set (rhs1);\n+\t\t      vec<vn_reference_op_s> operands\n+\t\t\t= vn_reference_operands_for_lookup (rhs1);\n \t\t      vn_reference_t ref;\n-\t\t      vn_reference_lookup (gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t   gimple_vuse (stmt),\n-\t\t\t\t\t   VN_WALK, &ref, true);\n+\t\t      vn_reference_lookup_pieces (gimple_vuse (stmt), set,\n+\t\t\t\t\t\t  TREE_TYPE (rhs1),\n+\t\t\t\t\t\t  operands, &ref, VN_WALK);\n \t\t      if (!ref)\n-\t\t\tcontinue;\n+\t\t\t{\n+\t\t\t  operands.release ();\n+\t\t\t  continue;\n+\t\t\t}\n \n \t\t      /* If the value of the reference is not invalidated in\n \t\t\t this block until it is computed, add the expression\n@@ -3753,7 +3761,68 @@ compute_avail (void)\n \t\t\t\t= SSA_NAME_DEF_STMT (gimple_vuse (def_stmt));\n \t\t\t    }\n \t\t\t  if (!ok)\n-\t\t\t    continue;\n+\t\t\t    {\n+\t\t\t      operands.release ();\n+\t\t\t      continue;\n+\t\t\t    }\n+\t\t\t}\n+\n+\t\t      /* If the load was value-numbered to another\n+\t\t\t load make sure we do not use its expression\n+\t\t\t for insertion if it wouldn't be a valid\n+\t\t\t replacement.  */\n+\t\t      /* At the momemt we have a testcase\n+\t\t\t for hoist insertion of aligned vs. misaligned\n+\t\t\t variants in gcc.dg/torture/pr65270-1.c thus\n+\t\t\t with just alignment to be considered we can\n+\t\t\t simply replace the expression in the hashtable\n+\t\t\t with the most conservative one.  */\n+\t\t      vn_reference_op_t ref1 = &ref->operands.last ();\n+\t\t      while (ref1->opcode != TARGET_MEM_REF\n+\t\t\t     && ref1->opcode != MEM_REF\n+\t\t\t     && ref1 != &ref->operands[0])\n+\t\t\t--ref1;\n+\t\t      vn_reference_op_t ref2 = &operands.last ();\n+\t\t      while (ref2->opcode != TARGET_MEM_REF\n+\t\t\t     && ref2->opcode != MEM_REF\n+\t\t\t     && ref2 != &operands[0])\n+\t\t\t--ref2;\n+\t\t      if ((ref1->opcode == TARGET_MEM_REF\n+\t\t\t   || ref1->opcode == MEM_REF)\n+\t\t\t  && (TYPE_ALIGN (ref1->type)\n+\t\t\t      > TYPE_ALIGN (ref2->type)))\n+\t\t\t{\n+\t\t\t  ref->operands.release ();\n+\t\t\t  ref->operands = operands;\n+\t\t\t  ref1 = ref2;\n+\t\t\t}\n+\t\t      else\n+\t\t\toperands.release ();\n+\t\t      /* TBAA behavior is an obvious part so make sure\n+\t\t         that the hashtable one covers this as well\n+\t\t\t by adjusting the ref alias set and its base.  */\n+\t\t      if (ref->set == set\n+\t\t\t  || alias_set_subset_of (set, ref->set))\n+\t\t\t;\n+\t\t      else if (alias_set_subset_of (ref->set, set))\n+\t\t\t{\n+\t\t\t  ref->set = set;\n+\t\t\t  if (ref1->opcode == MEM_REF)\n+\t\t\t    ref1->op0 = fold_convert (TREE_TYPE (ref2->op0),\n+\t\t\t\t\t\t      ref1->op0);\n+\t\t\t  else\n+\t\t\t    ref1->op2 = fold_convert (TREE_TYPE (ref2->op2),\n+\t\t\t\t\t\t      ref1->op2);\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ref->set = 0;\n+\t\t\t  if (ref1->opcode == MEM_REF)\n+\t\t\t    ref1->op0 = fold_convert (ptr_type_node,\n+\t\t\t\t\t\t      ref1->op0);\n+\t\t\t  else\n+\t\t\t    ref1->op2 = fold_convert (ptr_type_node,\n+\t\t\t\t\t\t      ref1->op2);\n \t\t\t}\n \n \t\t      result = pre_expr_pool.allocate ();"}, {"sha": "e9e18526a0b36aff01b1281b531c6c901657af61", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "patch": "@@ -2285,6 +2285,17 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n   return (void *)-1;\n }\n \n+/* Return a reference op vector from OP that can be used for\n+   vn_reference_lookup_pieces.  The caller is responsible for releasing\n+   the vector.  */\n+\n+vec<vn_reference_op_s>\n+vn_reference_operands_for_lookup (tree op)\n+{\n+  bool valueized;\n+  return valueize_shared_reference_ops_from_ref (op, &valueized).copy ();\n+}\n+\n /* Lookup a reference operation by it's parts, in the current hash table.\n    Returns the resulting value number if it exists in the hash table,\n    NULL_TREE otherwise.  VNRESULT will be filled in with the actual"}, {"sha": "069590a0b01c2c2469daf369e8872017dd21a2bb", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5b29f56103d60f4f4dca7136ae4dcc7987a728/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "patch": "@@ -214,6 +214,7 @@ vn_nary_op_t vn_nary_op_insert_pieces (unsigned int, enum tree_code,\n \t\t\t\t       tree, tree *, tree, unsigned int);\n bool ao_ref_init_from_vn_reference (ao_ref *, alias_set_type, tree,\n \t\t\t\t    vec<vn_reference_op_s> );\n+vec<vn_reference_op_s> vn_reference_operands_for_lookup (tree);\n tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t vec<vn_reference_op_s> ,\n \t\t\t\t vn_reference_t *, vn_lookup_kind);"}]}