{"sha": "01ec978cec1f5c790a4881acef1dfc824ab67f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlYzk3OGNlYzFmNWM3OTBhNDg4MWFjZWYxZGZjODI0YWI2N2YyNg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2018-05-15T08:34:29Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2018-05-15T08:34:29Z"}, "message": "DWARF calculate the number of indexed addresses.\n\nThe length in the .debug_addr unit header was calculated using the number\nof elements in the addr_index_table. This is wrong because the entries in\nthe table are refcounted and only those with a refcount > 0 are actually\nput in the index. Add a helper function count_index_addrs to get the\ncorrect number of addresses in the index.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (count_index_addrs): New function.\n\t(dwarf2out_finish): Use count_index_addrs to calculate addrs_length.\n\nFrom-SVN: r260251", "tree": {"sha": "7d20c11e108ec76106ab8a2dc22906511d9a6d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d20c11e108ec76106ab8a2dc22906511d9a6d0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ec978cec1f5c790a4881acef1dfc824ab67f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ec978cec1f5c790a4881acef1dfc824ab67f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ec978cec1f5c790a4881acef1dfc824ab67f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ec978cec1f5c790a4881acef1dfc824ab67f26/comments", "author": null, "committer": null, "parents": [{"sha": "a8c80d03d4e0fab9cf4edb7bd5acb7edafd2438c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c80d03d4e0fab9cf4edb7bd5acb7edafd2438c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c80d03d4e0fab9cf4edb7bd5acb7edafd2438c"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "7e145f4c7e872b1ebdd976c7ad2b41b04e6c9a85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ec978cec1f5c790a4881acef1dfc824ab67f26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ec978cec1f5c790a4881acef1dfc824ab67f26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01ec978cec1f5c790a4881acef1dfc824ab67f26", "patch": "@@ -1,3 +1,8 @@\n+2018-05-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (count_index_addrs): New function.\n+\t(dwarf2out_finish): Use count_index_addrs to calculate addrs_length.\n+\n 2018-05-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/83648"}, {"sha": "7ced2b18195145b776ee6842df6154cea4bf40fc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ec978cec1f5c790a4881acef1dfc824ab67f26/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ec978cec1f5c790a4881acef1dfc824ab67f26/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=01ec978cec1f5c790a4881acef1dfc824ab67f26", "patch": "@@ -28820,6 +28820,19 @@ output_addr_table_entry (addr_table_entry **slot, unsigned int *cur_index)\n   return 1;\n }\n \n+/* A helper function for dwarf2out_finish.  Counts the number\n+   of indexed addresses.  Must match the logic of the functions\n+   output_addr_table_entry above.  */\n+int\n+count_index_addrs (addr_table_entry **slot, unsigned int *last_idx)\n+{\n+  addr_table_entry *entry = *slot;\n+\n+  if (entry->refcount > 0)\n+    *last_idx += 1;\n+  return 1;\n+}\n+\n /* Produce the .debug_addr section.  */\n \n static void\n@@ -31306,8 +31319,12 @@ dwarf2out_finish (const char *)\n \t DWARF5 specifies a small header when address tables are used.  */\n       if (dwarf_version >= 5)\n \t{\n-\t  unsigned long addrs_length\n-\t    = addr_index_table->elements () * DWARF2_ADDR_SIZE + 4;\n+\t  unsigned int last_idx = 0;\n+\t  unsigned long addrs_length;\n+\n+\t  addr_index_table->traverse_noresize\n+\t    <unsigned int *, count_index_addrs> (&last_idx);\n+\t  addrs_length = last_idx * DWARF2_ADDR_SIZE + 4;\n \n \t  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n \t    dw2_asm_output_data (4, 0xffffffff,"}]}