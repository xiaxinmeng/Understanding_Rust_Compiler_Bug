{"sha": "bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjYWUwMmJjNDA1OTRiOGU0MWU3YWZmN2E0YjMwOWQ0MWJlNTljMA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-17T19:37:43Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-17T19:37:43Z"}, "message": "c-common.c (c_common_init_options): Use C89 for Objective-C, and set the options flag.\n\n\t* c-common.c (c_common_init_options): Use C89 for Objective-C,\n\tand set the options flag.\n\t* cppinit.c (lang_flags): Remove objc.\n\t(lang_defaults): Remove OBJC and OBJCXX.\n\t(set_lang): Update.\n\t(COMMAND_LINE_OPTIONS): Remove -+ and -lang-objc++.\n\t(cpp_handle_option): Remove -+ and -lang-objc++.\n\tFor ObjC, just set a flag.\n\t(print_help): Update.\n\t* cpplib.h (enum c_lang): Remove CLK_OBJC and CLK_OBJCXX.\n\nFrom-SVN: r53566", "tree": {"sha": "f20cac63581f41b6154d0525dd2fbecec4ecddf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20cac63581f41b6154d0525dd2fbecec4ecddf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/comments", "author": null, "committer": null, "parents": [{"sha": "0fca60abae8a470b8fa0be07ed10dc44fc2f039d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fca60abae8a470b8fa0be07ed10dc44fc2f039d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fca60abae8a470b8fa0be07ed10dc44fc2f039d"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "42c8f168d4c0766b575d526fb8b7232804a2033d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "patch": "@@ -1,3 +1,16 @@\n+2002-05-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (c_common_init_options): Use C89 for Objective-C,\n+\tand set the options flag.\n+\t* cppinit.c (lang_flags): Remove objc.\n+\t(lang_defaults): Remove OBJC and OBJCXX.\n+\t(set_lang): Update.\n+\t(COMMAND_LINE_OPTIONS): Remove -+ and -lang-objc++.\n+\t(cpp_handle_option): Remove -+ and -lang-objc++.\n+\tFor ObjC, just set a flag.\n+\t(print_help): Update.\n+\t* cpplib.h (enum c_lang): Remove CLK_OBJC and CLK_OBJCXX.\n+\n 2002-05-17  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* doc/install.texi (Specific, mips-sgi-irix6): Document need to"}, {"sha": "5a87899134540a6a9e4026034a53ebc66ec2d057", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "patch": "@@ -4271,8 +4271,10 @@ c_common_init_options (lang)\n      enum c_language_kind lang;\n {\n   c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89:\n-\t\t\t\tlang == clk_cplusplus ? CLK_GNUCXX: CLK_OBJC);\n+  parse_in = cpp_create_reader (lang == clk_c || lang == clk_objective_c\n+\t\t\t\t? CLK_GNUC89 : CLK_GNUCXX);\n+  if (lang == clk_objective_c)\n+    cpp_get_options (parse_in)->objc = 1;\n \n   /* Mark as \"unspecified\" (see c_common_post_options).  */\n   flag_bounds_check = -1;"}, {"sha": "cb3f483d550381841ea9694c2553deaf499fbabc", "filename": "gcc/cppinit.c", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "patch": "@@ -391,7 +391,6 @@ merge_include_chains (pfile)\n struct lang_flags\n {\n   char c99;\n-  char objc;\n   char cplusplus;\n   char extended_numbers;\n   char trigraphs;\n@@ -402,17 +401,15 @@ struct lang_flags\n \n /* ??? Enable $ in identifiers in assembly? */\n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 objc c++ xnum trig dollar c++comm digr  */\n-  /* GNUC89 */  { 0,  0,   0,  1,   0,   1,     1,      1     },\n-  /* GNUC99 */  { 1,  0,   0,  1,   0,   1,     1,      1     },\n-  /* STDC89 */  { 0,  0,   0,  0,   1,   0,     0,      0     },\n-  /* STDC94 */  { 0,  0,   0,  0,   1,   0,     0,      1     },\n-  /* STDC99 */  { 1,  0,   0,  1,   1,   0,     1,      1     },\n-  /* GNUCXX */  { 0,  0,   1,  1,   0,   1,     1,      1     },\n-  /* CXX98  */  { 0,  0,   1,  1,   1,   0,     1,      1     },\n-  /* OBJC   */  { 0,  1,   0,  1,   0,   1,     1,      1     },\n-  /* OBJCXX */  { 0,  1,   1,  1,   0,   1,     1,      1     },\n-  /* ASM    */  { 0,  0,   0,  1,   0,   0,     1,      0     }\n+{ /*              c99 c++ xnum trig dollar c++comm digr  */\n+  /* GNUC89 */  { 0,  0,  1,   0,   1,     1,      1     },\n+  /* GNUC99 */  { 1,  0,  1,   0,   1,     1,      1     },\n+  /* STDC89 */  { 0,  0,  0,   1,   0,     0,      0     },\n+  /* STDC94 */  { 0,  0,  0,   1,   0,     0,      1     },\n+  /* STDC99 */  { 1,  0,  1,   1,   0,     1,      1     },\n+  /* GNUCXX */  { 0,  1,  1,   0,   1,     1,      1     },\n+  /* CXX98  */  { 0,  1,  1,   1,   0,     1,      1     },\n+  /* ASM    */  { 0,  0,  1,   0,   0,     1,      0     }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -426,7 +423,6 @@ set_lang (pfile, lang)\n   CPP_OPTION (pfile, lang) = lang;\n \n   CPP_OPTION (pfile, c99)\t\t = l->c99;\n-  CPP_OPTION (pfile, objc)\t\t = l->objc;\n   CPP_OPTION (pfile, cplusplus)\t\t = l->cplusplus;\n   CPP_OPTION (pfile, extended_numbers)\t = l->extended_numbers;\n   CPP_OPTION (pfile, trigraphs)\t\t = l->trigraphs;\n@@ -1139,7 +1135,6 @@ new_pending_directive (pend, text, handler)\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n #define COMMAND_LINE_OPTIONS                                                  \\\n   DEF_OPT(\"$\",                        0,      OPT_dollar)                     \\\n-  DEF_OPT(\"+\",                        0,      OPT_plus)                       \\\n   DEF_OPT(\"-help\",                    0,      OPT__help)                      \\\n   DEF_OPT(\"-target-help\",             0,      OPT_target__help)               \\\n   DEF_OPT(\"-version\",                 0,      OPT__version)                   \\\n@@ -1183,7 +1178,6 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus)             \\\n   DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89)                   \\\n   DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc)                  \\\n-  DEF_OPT(\"lang-objc++\",              0,      OPT_lang_objcplusplus)          \\\n   DEF_OPT(\"nostdinc\",                 0,      OPT_nostdinc)                   \\\n   DEF_OPT(\"nostdinc++\",               0,      OPT_nostdincplusplus)           \\\n   DEF_OPT(\"o\",                        no_fil, OPT_o)                          \\\n@@ -1447,10 +1441,6 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \tcase OPT_trigraphs:\n  \t  CPP_OPTION (pfile, trigraphs) = 1;\n \t  break;\n-\tcase OPT_plus:\n-\t  CPP_OPTION (pfile, cplusplus) = 1;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n-\t  break;\n \tcase OPT_remap:\n \t  CPP_OPTION (pfile, remap) = 1;\n \t  break;\n@@ -1465,10 +1455,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t  set_lang (pfile, CLK_GNUCXX);\n \t  break;\n \tcase OPT_lang_objc:\n-\t  set_lang (pfile, CLK_OBJC);\n-\t  break;\n-\tcase OPT_lang_objcplusplus:\n-\t  set_lang (pfile, CLK_OBJCXX);\n+\t  CPP_OPTION (pfile, objc) = 1;\n \t  break;\n \tcase OPT_lang_asm:\n \t  set_lang (pfile, CLK_ASM);\n@@ -1909,14 +1896,12 @@ Switches:\\n\\\n   fputs (_(\"\\\n   -lang-c++                 Assume that the input sources are in C++\\n\\\n   -lang-objc                Assume that the input sources are in ObjectiveC\\n\\\n-  -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\\\n   -lang-asm                 Assume that the input sources are in assembler\\n\\\n \"), stdout);\n   fputs (_(\"\\\n   -std=<std name>           Specify the conformance standard; one of:\\n\\\n                             gnu89, gnu99, c89, c99, iso9899:1990,\\n\\\n                             iso9899:199409, iso9899:1999\\n\\\n-  -+                        Allow parsing of C++ style features\\n\\\n   -w                        Inhibit warning messages\\n\\\n   -Wtrigraphs               Warn if trigraphs are encountered\\n\\\n   -Wno-trigraphs            Do not warn about trigraphs\\n\\"}, {"sha": "378fa7e2e54cd7cd5f34f1e77106fb7ae1486112", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdcae02bc40594b8e41e7aff7a4b309d41be59c0/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bdcae02bc40594b8e41e7aff7a4b309d41be59c0", "patch": "@@ -153,7 +153,7 @@ enum cpp_ttype\n \n /* C language kind, used when calling cpp_reader_init.  */\n enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_STDC89, CLK_STDC94, CLK_STDC99,\n-\t     CLK_GNUCXX, CLK_CXX98, CLK_OBJC, CLK_OBJCXX, CLK_ASM};\n+\t     CLK_GNUCXX, CLK_CXX98, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct cpp_string\n@@ -260,7 +260,8 @@ struct cpp_options\n   /* Nonzero means handle cplusplus style comments */\n   unsigned char cplusplus_comments;\n \n-  /* Nonzero means handle #import, for objective C.  */\n+  /* Nonzero means define __OBJC__, treat @ as a special token, and\n+     use the OBJC[PLUS]_INCLUDE_PATH environment variable.  */\n   unsigned char objc;\n \n   /* Nonzero means don't copy comments into the output file.  */"}]}