{"sha": "fcf8632eede077dd7ca327768af56e28f2d3fdca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmODYzMmVlZGUwNzdkZDdjYTMyNzc2OGFmNTZlMjhmMmQzZmRjYQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2012-09-14T13:22:29Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2012-09-14T13:22:29Z"}, "message": "re PR target/54546 (SH: Enable -fshrink-wrap)\n\n       PR target/54546\n       * config/sh/sh-protos.h (sh_need_epilogue): Delete.\n       (sh_can_use_simple_return_p): Declare.\n       * config/sh/sh.c (sh_can_use_simple_return_p): Define.\n       (sh_need_epilogue, sh_need_epilogue_known): Delete.\n       (sh_output_function_epilogue): Remove sh_need_epilogue_known.\n       * config/sh/sh.md (simple_return, return): Define.\n       (epilogue): Use inline return rtl.\n       (sh_expand_epilogue): Cleanup parameters boolean type.\n       * config/sh/iterators.md (any_return): New iterator.\n\nFrom-SVN: r191301", "tree": {"sha": "a1dcc9b0a7cffcda35e3ad8ce7798b445d761443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1dcc9b0a7cffcda35e3ad8ce7798b445d761443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcf8632eede077dd7ca327768af56e28f2d3fdca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf8632eede077dd7ca327768af56e28f2d3fdca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf8632eede077dd7ca327768af56e28f2d3fdca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf8632eede077dd7ca327768af56e28f2d3fdca/comments", "author": null, "committer": null, "parents": [{"sha": "312f9b9de78c8074663a6450d49bd5113dea3509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312f9b9de78c8074663a6450d49bd5113dea3509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312f9b9de78c8074663a6450d49bd5113dea3509"}], "stats": {"total": 90, "additions": 57, "deletions": 33}, "files": [{"sha": "bb673f4be712a89317095842ef28067472e51f3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcf8632eede077dd7ca327768af56e28f2d3fdca", "patch": "@@ -1,3 +1,16 @@\n+2012-09-14  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/54546\n+\t* config/sh/sh-protos.h (sh_need_epilogue): Delete.\n+\t(sh_can_use_simple_return_p): Declare.\n+\t* config/sh/sh.c (sh_can_use_simple_return_p): Define.\n+\t(sh_need_epilogue, sh_need_epilogue_known): Delete.\n+\t(sh_output_function_epilogue): Remove sh_need_epilogue_known.\n+\t* config/sh/sh.md (simple_return, return): Define.\n+\t(epilogue): Use inline return rtl.\n+\t(sh_expand_epilogue): Cleanup parameters boolean type.\n+\t* config/sh/iterators.md (any_return): New iterator.\n+\n 2012-09-14  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/predicates.md (t_reg_operand): Check REG_P for SUBREG."}, {"sha": "ec95013b2c3bd17e876eac0ee46492242a2ba7e8", "filename": "gcc/config/sh/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fiterators.md?ref=fcf8632eede077dd7ca327768af56e28f2d3fdca", "patch": "@@ -34,3 +34,6 @@\n (define_mode_attr disp04 [(QI \"K04\") (HI \"K05\")])\n (define_mode_attr disp12 [(QI \"K12\") (HI \"K13\")])\n \n+;; Return codes.\n+(define_code_iterator any_return [return simple_return])\n+"}, {"sha": "827b1b48819433ad9c1d63de306191a75faf6211", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=fcf8632eede077dd7ca327768af56e28f2d3fdca", "patch": "@@ -117,7 +117,6 @@ extern rtx get_fpscr_rtx (void);\n extern int sh_media_register_for_return (void);\n extern void sh_expand_prologue (void);\n extern void sh_expand_epilogue (bool);\n-extern bool sh_need_epilogue (void);\n extern void sh_set_return_address (rtx, rtx);\n extern int initial_elimination_offset (int, int);\n extern bool fldi_ok (void);\n@@ -155,4 +154,5 @@ extern int sh2a_get_function_vector_number (rtx);\n extern bool sh2a_is_function_vector_call (rtx);\n extern void sh_fix_range (const char *);\n extern bool sh_hard_regno_mode_ok (unsigned int, enum machine_mode);\n+extern bool sh_can_use_simple_return_p (void);\n #endif /* ! GCC_SH_PROTOS_H */"}, {"sha": "7f8ded0f5a67809ca8bfea39e41301549d402430", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=fcf8632eede077dd7ca327768af56e28f2d3fdca", "patch": "@@ -7899,24 +7899,6 @@ sh_expand_epilogue (bool sibcall_p)\n     emit_use (gen_rtx_REG (SImode, PR_REG));\n }\n \n-static int sh_need_epilogue_known = 0;\n-\n-bool\n-sh_need_epilogue (void)\n-{\n-  if (! sh_need_epilogue_known)\n-    {\n-      rtx epilogue;\n-\n-      start_sequence ();\n-      sh_expand_epilogue (0);\n-      epilogue = get_insns ();\n-      end_sequence ();\n-      sh_need_epilogue_known = (epilogue == NULL ? -1 : 1);\n-    }\n-  return sh_need_epilogue_known > 0;\n-}\n-\n /* Emit code to change the current function's return address to RA.\n    TEMP is available as a scratch register, if needed.  */\n \n@@ -7996,7 +7978,6 @@ static void\n sh_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \t\t\t     HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n-  sh_need_epilogue_known = 0;\n }\n \n static rtx\n@@ -12955,4 +12936,34 @@ sh_init_sync_libfuncs (void)\n   init_sync_libfuncs (UNITS_PER_WORD);\n }\n \n+/* Return true if it is appropriate to emit `ret' instructions in the\n+   body of a function.  */\n+\n+bool\n+sh_can_use_simple_return_p (void)\n+{\n+  HARD_REG_SET live_regs_mask;\n+  int d;\n+\n+  if (! reload_completed || frame_pointer_needed)\n+    return false;\n+\n+  /* Moving prologue around does't reduce the size.  */\n+  if (optimize_function_for_size_p (cfun))\n+    return false;\n+\n+  /* Can't optimize CROSSING_JUMPS for now.  */\n+  if (flag_reorder_blocks_and_partition)\n+    return false;\n+\n+  /* Finally, allow for pr save.  */\n+  d = calc_live_regs (&live_regs_mask);\n+\n+  if (rounded_frame_size (d) > 4)\n+   return false;\n+\n+  return true;\n+\n+}\n+\n #include \"gt-sh.h\""}, {"sha": "c510629c553a7929b6e3b1917059865e670da61d", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf8632eede077dd7ca327768af56e28f2d3fdca/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=fcf8632eede077dd7ca327768af56e28f2d3fdca", "patch": "@@ -9335,7 +9335,7 @@ label:\n   [(return)]\n   \"\"\n {\n-  sh_expand_epilogue (1);\n+  sh_expand_epilogue (true);\n   if (TARGET_SHCOMPACT)\n     {\n       rtx insn, set;\n@@ -10154,9 +10154,13 @@ label:\n }\n   [(set_attr \"type\" \"load_media\")])\n \n+(define_expand \"simple_return\"\n+  [(simple_return)]\n+ \"sh_can_use_simple_return_p ()\")\n+\n (define_expand \"return\"\n   [(return)]\n-  \"reload_completed && ! sh_need_epilogue ()\"\n+ \"reload_completed && epilogue_completed\"\n {\n   if (TARGET_SHMEDIA)\n     {\n@@ -10172,8 +10176,8 @@ label:\n     }\n })\n \n-(define_insn \"*return_i\"\n-  [(return)]\n+(define_insn \"*<code>_i\"\n+  [(any_return)]\n   \"TARGET_SH1 && ! (TARGET_SHCOMPACT\n \t\t    && (crtl->args.info.call_cookie\n \t\t\t& CALL_COOKIE_RET_TRAMP (1)))\n@@ -10299,19 +10303,12 @@ label:\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n-{\n-  sh_expand_prologue ();\n-  DONE;\n-})\n+  \"sh_expand_prologue (); DONE;\")\n \n (define_expand \"epilogue\"\n   [(return)]\n   \"\"\n-{\n-  sh_expand_epilogue (0);\n-  emit_jump_insn (gen_return ());\n-  DONE;\n-})\n+  \"sh_expand_epilogue (false);\")\n \n (define_expand \"eh_return\"\n   [(use (match_operand 0 \"register_operand\" \"\"))]"}]}