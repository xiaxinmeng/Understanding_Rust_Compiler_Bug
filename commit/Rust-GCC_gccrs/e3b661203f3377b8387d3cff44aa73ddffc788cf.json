{"sha": "e3b661203f3377b8387d3cff44aa73ddffc788cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNjYxMjAzZjMzNzdiODM4N2QzY2ZmNDRhYTczZGRmZmM3ODhjZg==", "commit": {"author": {"name": "James Lemke", "email": "jim@wasabisystems.com", "date": "2003-12-02T02:17:18Z"}, "committer": {"name": "James Lemke", "email": "jwlemke@gcc.gnu.org", "date": "2003-12-02T02:17:18Z"}, "message": "arm.c (arm_rtx_costs): Improve for xscale multiply.\n\n* config/arm/arm.c (arm_rtx_costs): Improve for xscale multiply.\n* testsuite/gcc.dg/arm-g2.c: New test.\n\nFrom-SVN: r74149", "tree": {"sha": "2221ae3f10793ee075b38c50bb26424774d8e364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2221ae3f10793ee075b38c50bb26424774d8e364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b661203f3377b8387d3cff44aa73ddffc788cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b661203f3377b8387d3cff44aa73ddffc788cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b661203f3377b8387d3cff44aa73ddffc788cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b661203f3377b8387d3cff44aa73ddffc788cf/comments", "author": null, "committer": null, "parents": [{"sha": "d9e7c8e3c35b45d40660abe038d4379eb4f770a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e7c8e3c35b45d40660abe038d4379eb4f770a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e7c8e3c35b45d40660abe038d4379eb4f770a3"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "7804fc0a89b2c077a8fd428eb2f0954c99569d32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3b661203f3377b8387d3cff44aa73ddffc788cf", "patch": "@@ -1,3 +1,7 @@\n+2003-12-01  James Lemke <jim@wasabisystems.com>\n+ \n+\t* config/arm/arm.c (arm_rtx_costs): Improve for xscale multiply.\n+\n 2003-12-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/11634"}, {"sha": "cadbe65fe44bba6f4e274fa59a37fe6e37ead99d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e3b661203f3377b8387d3cff44aa73ddffc788cf", "patch": "@@ -3389,19 +3389,41 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n \t{\n \t  unsigned HOST_WIDE_INT i = (INTVAL (XEXP (x, 1))\n \t\t\t\t      & (unsigned HOST_WIDE_INT) 0xffffffff);\n-\t  int add_cost = const_ok_for_arm (i) ? 4 : 8;\n-\t  int j;\n+\t  int cost, const_ok = const_ok_for_arm (i);\n+\t  int j, booth_unit_size;\n+\n+\t  if (arm_tune_xscale)\n+\t    {\n+\t      unsigned HOST_WIDE_INT masked_const;\n+\n+\t      /* The cost will be related to two insns.\n+\t\t First a load of the constant (MOV or LDR), then a multiply. */\n+\t      cost = 2;\n+\t      if (! const_ok)\n+\t\tcost += 1;      /* LDR is probably more expensive because\n+\t\t\t\t   of longer result latency. */\n+\t      masked_const = i & 0xffff8000;\n+\t      if (masked_const != 0 && masked_const != 0xffff8000)\n+\t\t{\n+\t\t  masked_const = i & 0xf8000000;\n+\t\t  if (masked_const == 0 || masked_const == 0xf8000000)\n+\t\t    cost += 1;\n+\t\t  else\n+\t\t    cost += 2;\n+\t\t}\n+\t      return cost;\n+\t    }\n \t  \n \t  /* Tune as appropriate.  */ \n-\t  int booth_unit_size = ((tune_flags & FL_FAST_MULT) ? 8 : 2);\n-\t  \n+\t  cost = const_ok ? 4 : 8;\n+\t  booth_unit_size = ((tune_flags & FL_FAST_MULT) ? 8 : 2);\n \t  for (j = 0; i && j < 32; j += booth_unit_size)\n \t    {\n \t      i >>= booth_unit_size;\n-\t      add_cost += 2;\n+\t      cost += 2;\n \t    }\n \n-\t  return add_cost;\n+\t  return cost;\n \t}\n \n       return (((tune_flags & FL_FAST_MULT) ? 8 : 30)"}, {"sha": "00fb340059b3801c78b329a5c3cfafd7ea3532dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3b661203f3377b8387d3cff44aa73ddffc788cf", "patch": "@@ -1,3 +1,7 @@\n+2003-12-01  James Lemke  <jim@wasabisystems.com>\n+\n+\t* gcc.dg/arm-g2.c: New test.\n+\n 2003-12-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/11634"}, {"sha": "0120ffb8331361c17f99fbe1f1d5f897efe36fc0", "filename": "gcc/testsuite/gcc.dg/arm-g2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b661203f3377b8387d3cff44aa73ddffc788cf/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-g2.c?ref=e3b661203f3377b8387d3cff44aa73ddffc788cf", "patch": "@@ -0,0 +1,19 @@\n+/* Verify that hardware multiply is preferred on XScale. */\n+/* { dg-do compile { target xscale*-*-* } } */\n+/* { dg-options \"-mcpu=xscale -O2\" } */\n+\n+/* Brett Gaines' test case. */\n+unsigned BCPL(unsigned) __attribute__ ((naked));\n+unsigned BCPL(unsigned seed)\n+{\n+    /* Best code would be:\n+       ldr r1, =2147001325\n+       ldr r2, =715136305\n+       mla r0, r1, r0, r2\n+       mov pc, lr */\n+\n+    return seed * 2147001325U + 715136305U;\n+}\n+\n+/* We want to suppress running for -mthumb but not for -mthumb-interwork. */\n+/* { dg-final { global compiler_flags; if ![string match \"*-mthumb *\" $compiler_flags] { scan-assembler \"mla\\[ \t].*\" } } } */"}]}