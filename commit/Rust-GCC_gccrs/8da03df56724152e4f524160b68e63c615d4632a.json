{"sha": "8da03df56724152e4f524160b68e63c615d4632a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhMDNkZjU2NzI0MTUyZTRmNTI0MTYwYjY4ZTYzYzYxNWQ0NjMyYQ==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2018-07-24T15:37:52Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-07-24T15:37:52Z"}, "message": "[GCC][AARCH64] Canonicalize aarch64 widening simd plus insns\n\nCommitted on behalf of matthew.malcomson@arm.com\n\n2018-07-24  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>): Split into...\n\t(aarch64_<ANY_EXTEND:su>subw<mode>): ... This...\n\t(aarch64_<ANY_EXTEND:su>addw<mode>): ... And this.\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal): Split into...\n\t(aarch64_<ANY_EXTEND:su>subw<mode>_internal): ... This...\n\t(aarch64_<ANY_EXTEND:su>addw<mode>_internal): ... And this.\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w2<mode>_internal): Split into...\n\t(aarch64_<ANY_EXTEND:su>subw2<mode>_internal): ... This...\n\t(aarch64_<ANY_EXTEND:su>addw2<mode>_internal): ... And this.\n\n\t* gcc.target/aarch64/vect-su-add-sub.c: New.\n\nFrom-SVN: r262949", "tree": {"sha": "8ff7ea849f6e10ce80490101868f49424376ea74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ff7ea849f6e10ce80490101868f49424376ea74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8da03df56724152e4f524160b68e63c615d4632a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da03df56724152e4f524160b68e63c615d4632a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da03df56724152e4f524160b68e63c615d4632a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da03df56724152e4f524160b68e63c615d4632a/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebac3c0236c626f80b005af53505de5b79cba99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebac3c0236c626f80b005af53505de5b79cba99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebac3c0236c626f80b005af53505de5b79cba99d"}], "stats": {"total": 146, "additions": 124, "deletions": 22}, "files": [{"sha": "f1fdb1f35ed9acf2c8c7c148466335a6de3bb8cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da03df56724152e4f524160b68e63c615d4632a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da03df56724152e4f524160b68e63c615d4632a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8da03df56724152e4f524160b68e63c615d4632a", "patch": "@@ -1,3 +1,16 @@\n+2018-07-24  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>): Split into...\n+\t(aarch64_<ANY_EXTEND:su>subw<mode>): ... This...\n+\t(aarch64_<ANY_EXTEND:su>addw<mode>): ... And this.\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal): Split into...\n+\t(aarch64_<ANY_EXTEND:su>subw<mode>_internal): ... This...\n+\t(aarch64_<ANY_EXTEND:su>addw<mode>_internal): ... And this.\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w2<mode>_internal): Split into...\n+\t(aarch64_<ANY_EXTEND:su>subw2<mode>_internal): ... This...\n+\t(aarch64_<ANY_EXTEND:su>addw2<mode>_internal): ... And this.\n+\n 2018-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/86627"}, {"sha": "9ee9bbe0b75f493939fb11a8e51ea6890dc08409", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 58, "deletions": 22, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8da03df56724152e4f524160b68e63c615d4632a", "patch": "@@ -3303,38 +3303,74 @@\n   DONE;\n })\n \n-(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>\"\n+(define_insn \"aarch64_<ANY_EXTEND:su>subw<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-\t\t\t(ANY_EXTEND:<VWIDE>\n-\t\t\t  (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))))]\n+\t(minus:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n-  \"<ANY_EXTEND:su><ADDSUB:optab>w\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n+  \"<ANY_EXTEND:su>subw\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_sub_widen\")]\n )\n \n-(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal\"\n+(define_insn \"aarch64_<ANY_EXTEND:su>subw<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-\t\t\t(ANY_EXTEND:<VWIDE>\n-\t\t\t  (vec_select:<VHALF>\n-\t\t\t   (match_operand:VQW 2 \"register_operand\" \"w\")\n-\t\t\t   (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))))]\n+\t(minus:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQW 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))))]\n   \"TARGET_SIMD\"\n-  \"<ANY_EXTEND:su><ADDSUB:optab>w\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vhalftype>\"\n-  [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n+  \"<ANY_EXTEND:su>subw\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vhalftype>\"\n+  [(set_attr \"type\" \"neon_sub_widen\")]\n )\n \n-(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w2<mode>_internal\"\n+(define_insn \"aarch64_<ANY_EXTEND:su>subw2<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-\t\t\t(ANY_EXTEND:<VWIDE>\n-\t\t\t  (vec_select:<VHALF>\n-\t\t\t   (match_operand:VQW 2 \"register_operand\" \"w\")\n-\t\t\t   (match_operand:VQW 3 \"vect_par_cnst_hi_half\" \"\")))))]\n+\t(minus:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQW 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQW 3 \"vect_par_cnst_hi_half\" \"\")))))]\n   \"TARGET_SIMD\"\n-  \"<ANY_EXTEND:su><ADDSUB:optab>w2\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n+  \"<ANY_EXTEND:su>subw2\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_sub_widen\")]\n+)\n+\n+(define_insn \"aarch64_<ANY_EXTEND:su>addw<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(plus:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE> (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"<ANY_EXTEND:su>addw\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_add_widen\")]\n+)\n+\n+(define_insn \"aarch64_<ANY_EXTEND:su>addw<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(plus:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQW 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"<ANY_EXTEND:su>addw\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vhalftype>\"\n+  [(set_attr \"type\" \"neon_add_widen\")]\n+)\n+\n+(define_insn \"aarch64_<ANY_EXTEND:su>addw2<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(plus:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQW 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQW 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"<ANY_EXTEND:su>addw2\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_add_widen\")]\n )\n \n (define_expand \"aarch64_saddw2<mode>\""}, {"sha": "10488cac66da649c1470c25bc49b91ec633baa58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8da03df56724152e4f524160b68e63c615d4632a", "patch": "@@ -1,3 +1,7 @@\n+2018-07-24  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/vect-su-add-sub.c: New.\n+\n 2018-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/86627"}, {"sha": "338da54f6281c90e1c6b1c59fa50d9b719005c77", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vect_su_add_sub.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_su_add_sub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da03df56724152e4f524160b68e63c615d4632a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_su_add_sub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_su_add_sub.c?ref=8da03df56724152e4f524160b68e63c615d4632a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+/* Ensure we use the signed/unsigned extend vectorized add and sub\n+   instructions.  */\n+#define N 1024\n+\n+int a[N];\n+long c[N];\n+long d[N];\n+unsigned int ua[N];\n+unsigned long uc[N];\n+unsigned long ud[N];\n+\n+void\n+add ()\n+{\n+  for (int i = 0; i < N; i++)\n+    d[i] = a[i] + c[i];\n+}\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]saddw2\\[ \\t\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]saddw\\[ \\t\\]+\" 1 } } */\n+\n+void\n+subtract ()\n+{\n+  for (int i = 0; i < N; i++)\n+    d[i] = c[i] - a[i];\n+}\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]ssubw2\\[ \\t\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]ssubw\\[ \\t\\]+\" 1 } } */\n+\n+void\n+uadd ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ud[i] = ua[i] + uc[i];\n+}\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]uaddw2\\[ \\t\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]uaddw\\[ \\t\\]+\" 1 } } */\n+\n+void\n+usubtract ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ud[i] = uc[i] - ua[i];\n+}\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]usubw2\\[ \\t\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t\\]usubw\\[ \\t\\]+\" 1 } } */"}]}