{"sha": "5b904f175ff26269615f148459a8604f45880591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5MDRmMTc1ZmYyNjI2OTYxNWYxNDg0NTlhODYwNGY0NTg4MDU5MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-25T12:21:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-25T12:21:44Z"}, "message": "libstdc++: Fix regression in std::move algorithm (PR 93872)\n\nThe std::move and std::move_backward algorithms dispatch to the\nstd::__memmove helper when appropriate. That function uses a\npointer-to-const for the source values, preventing them from being\nmoved. The two callers of that function have the same problem.\n\nRather than altering __memmove and its callers to work with const or\nnon-const source pointers, this takes a more conservative approach of\ncasting away the const at the point where we want to do a move\nassignment. This relies on the fact that we only use __memmove when the\ntype is trivially copyable, so we know the move assignment doesn't alter\nthe source anyway.\n\n\tPR libstdc++/93872\n\t* include/bits/stl_algobase.h (__memmove): Cast away const before\n\tdoing move assignment.\n\t* testsuite/25_algorithms/move/93872.cc: New test.\n\t* testsuite/25_algorithms/move_backward/93872.cc: New test.", "tree": {"sha": "d5bb4382caa9c91036e35441c9974f970521d9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bb4382caa9c91036e35441c9974f970521d9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b904f175ff26269615f148459a8604f45880591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b904f175ff26269615f148459a8604f45880591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b904f175ff26269615f148459a8604f45880591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b904f175ff26269615f148459a8604f45880591/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2877ad9ac28e1c7f0a6e643ca8f03f795e0f4985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2877ad9ac28e1c7f0a6e643ca8f03f795e0f4985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2877ad9ac28e1c7f0a6e643ca8f03f795e0f4985"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "f14a6e223ea37eed088c6def8021bfa025a8112d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b904f175ff26269615f148459a8604f45880591", "patch": "@@ -1,3 +1,11 @@\n+2020-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93872\n+\t* include/bits/stl_algobase.h (__memmove): Cast away const before\n+\tdoing move assignment.\n+\t* testsuite/25_algorithms/move/93872.cc: New test.\n+\t* testsuite/25_algorithms/move_backward/93872.cc: New test.\n+\n 2020-02-24  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/93884"}, {"sha": "c6b7148b39cb162594224174a2f148f74f14b63c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=5b904f175ff26269615f148459a8604f45880591", "patch": "@@ -95,7 +95,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  for(; __num > 0; --__num)\n \t    {\n \t      if constexpr (_IsMove)\n-\t\t*__dst = std::move(*__src);\n+\t\t// This const_cast looks unsafe, but we only use this function\n+\t\t// for trivially-copyable types, which means this assignment\n+\t\t// is trivial and so doesn't alter the source anyway.\n+\t\t// See PR 93872 for why it's needed.\n+\t\t*__dst = std::move(*const_cast<_Tp*>(__src));\n \t      else\n \t\t*__dst = *__src;\n \t      ++__src;"}, {"sha": "c4dd43dfb6452126997569485b79c09807cffbfe", "filename": "libstdc++-v3/testsuite/25_algorithms/move/93872.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b904f175ff26269615f148459a8604f45880591/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F93872.cc?ref=5b904f175ff26269615f148459a8604f45880591", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+\n+struct X\n+{\n+  X() = default;\n+\n+  X(const X&) = delete;\n+  X& operator=(const X&) = delete;\n+\n+  X(X&&) = default;\n+  X& operator=(X&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  X a[2], b[2];\n+  std::move(std::begin(a), std::end(a), std::begin(b));\n+}"}]}