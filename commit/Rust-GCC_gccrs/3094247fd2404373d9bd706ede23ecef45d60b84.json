{"sha": "3094247fd2404373d9bd706ede23ecef45d60b84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5NDI0N2ZkMjQwNDM3M2Q5YmQ3MDZlZGUyM2VjZWY0NWQ2MGI4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-12-20T19:42:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-12-20T19:42:41Z"}, "message": "alpha.c (decl_has_samegp): New.\n\n        * config/alpha/alpha.c (decl_has_samegp): New.\n        (samegp_function_operand): Use it.  Rename from\n        current_file_function_operand.\n        (direct_call_operand): Handle -msmall-text via symbol->jump.\n        (tls_symbolic_operand_1): Use T for tprel64, t for smaller tprel.\n        (tls_symbolic_operand_type): Likewise.\n        (alpha_encode_section_info): Likewise.  Handle -msmall-text.\n        (alpha_function_ok_for_sibcall): Use decl_has_samegp.\n        (alpha_end_function): Set symbol->jump for functions defined in\n        the text section.\n        * config/alpha/alpha-protos.h: Update.\n        * config/alpha/alpha.h (MASK_SMALL_TEXT, TARGET_SMALL_TEXT): New.\n        (TARGET_SWITCHES): Add -msmall-text and -mlarge-text.\n        (PREDICATE_CODES): Update.\n        * config/alpha/alpha.md (call patterns): Update for\n        samegp_function_operand rename; use !samegp reloc if\n        TARGET_EXPLICIT_RELOCS.\n        * doc/invoke.text: Document -msmall-text and -mlarge-text.\n\nFrom-SVN: r60373", "tree": {"sha": "e9ad5ecc94f5c28cedecb40bff4161664ef0581c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ad5ecc94f5c28cedecb40bff4161664ef0581c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3094247fd2404373d9bd706ede23ecef45d60b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3094247fd2404373d9bd706ede23ecef45d60b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3094247fd2404373d9bd706ede23ecef45d60b84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3094247fd2404373d9bd706ede23ecef45d60b84/comments", "author": null, "committer": null, "parents": [{"sha": "913746e3284267294197f2b41df8d5f67f9398a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913746e3284267294197f2b41df8d5f67f9398a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913746e3284267294197f2b41df8d5f67f9398a6"}], "stats": {"total": 226, "additions": 163, "deletions": 63}, "files": [{"sha": "19fee5850f1662fc365ba79d0e63f221de11a00f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -1,3 +1,24 @@\n+2002-12-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (decl_has_samegp): New.\n+\t(samegp_function_operand): Use it.  Rename from\n+\tcurrent_file_function_operand.\n+\t(direct_call_operand): Handle -msmall-text via symbol->jump.\n+\t(tls_symbolic_operand_1): Use T for tprel64, t for smaller tprel.\n+\t(tls_symbolic_operand_type): Likewise.\n+\t(alpha_encode_section_info): Likewise.  Handle -msmall-text.\n+\t(alpha_function_ok_for_sibcall): Use decl_has_samegp.\n+\t(alpha_end_function): Set symbol->jump for functions defined in\n+\tthe text section.\n+\t* config/alpha/alpha-protos.h: Update.\n+\t* config/alpha/alpha.h (MASK_SMALL_TEXT, TARGET_SMALL_TEXT): New.\n+\t(TARGET_SWITCHES): Add -msmall-text and -mlarge-text.\n+\t(PREDICATE_CODES): Update.\n+\t* config/alpha/alpha.md (call patterns): Update for \n+\tsamegp_function_operand rename; use !samegp reloc if\n+\tTARGET_EXPLICIT_RELOCS.\n+\t* doc/invoke.text: Document -msmall-text and -mlarge-text.\n+\n 2002-12-20  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n \n         * config/ns32k/ns32k.md (movdi): Use \"l\" instead of \"f\" to match"}, {"sha": "e19f7cb10eee5b25cc148e9185bcb7fb22fe8710", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -54,7 +54,7 @@ extern int reg_or_cint_operand PARAMS ((rtx, enum machine_mode));\n extern int some_operand PARAMS ((rtx, enum machine_mode));\n extern int some_ni_operand PARAMS ((rtx, enum machine_mode));\n extern int input_operand PARAMS ((rtx, enum machine_mode));\n-extern int current_file_function_operand PARAMS ((rtx, enum machine_mode));\n+extern int samegp_function_operand PARAMS ((rtx, enum machine_mode));\n extern int direct_call_operand PARAMS ((rtx, enum machine_mode));\n extern int local_symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int small_symbolic_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "e28f3195b3df4d0b1f14ab3231febd1bb57e38e9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 111, "deletions": 52, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -128,6 +128,8 @@ static enum tls_model tls_symbolic_operand_type\n   PARAMS ((rtx));\n static bool decl_in_text_section\n   PARAMS ((tree));\n+static bool decl_has_samegp\n+  PARAMS ((tree));\n static bool alpha_in_small_data_p\n   PARAMS ((tree));\n static void alpha_encode_section_info\n@@ -971,7 +973,7 @@ input_operand (op, mode)\n    file, and in the same section as the current function.  */\n \n int\n-current_file_function_operand (op, mode)\n+samegp_function_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n@@ -982,14 +984,9 @@ current_file_function_operand (op, mode)\n   if (op == XEXP (DECL_RTL (current_function_decl), 0))\n     return 1;\n \n-  /* Otherwise, we need the DECL for the SYMBOL_REF, which we can't get.\n-     So SYMBOL_REF_FLAG has been declared to imply that the function is\n-     in the default text section.  So we must also check that the current\n-     function is also in the text section.  */\n-  if (SYMBOL_REF_FLAG (op) && decl_in_text_section (current_function_decl))\n-    return 1;\n-\n-  return 0;\n+  /* Otherwise, encode_section_info recorded whether we are to treat\n+     this symbol as having the same GP.  */\n+  return SYMBOL_REF_FLAG (op);\n }\n \n /* Return 1 if OP is a SYMBOL_REF for which we can make a call via bsr.  */\n@@ -999,20 +996,28 @@ direct_call_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  /* Must be defined in this file.  */\n-  if (! current_file_function_operand (op, mode))\n+  /* Must share the same GP.  */\n+  if (!samegp_function_operand (op, mode))\n     return 0;\n \n   /* If profiling is implemented via linker tricks, we can't jump\n-     to the nogp alternate entry point.  */\n+     to the nogp alternate entry point.  Note that current_function_profile\n+     would not be correct, since that doesn't indicate if the target\n+     function uses profiling.  */\n   /* ??? TARGET_PROFILING_NEEDS_GP isn't really the right test,\n      but is approximately correct for the OSF ABIs.  Don't know\n      what to do for VMS, NT, or UMK.  */\n-  if (! TARGET_PROFILING_NEEDS_GP\n-      && ! current_function_profile)\n+  if (!TARGET_PROFILING_NEEDS_GP && profile_flag)\n     return 0;\n \n-  return 1;\n+  /* Must be \"near\" so that the branch is assumed to reach.  With\n+     -msmall-text, this is true of all local symbols.  */\n+  if (TARGET_SMALL_TEXT)\n+    return op->jump;\n+\n+  /* Otherwise, a decl is \"near\" if it is defined in the same section.\n+     See alpha_encode_section_info for commentary.  */\n+  return op->jump && decl_in_text_section (cfun->decl);\n }\n \n /* Return true if OP is a LABEL_REF, or SYMBOL_REF or CONST referencing\n@@ -1182,7 +1187,6 @@ tls_symbolic_operand_1 (op, mode, size, unspec)\n      int size, unspec;\n {\n   const char *str;\n-  int letter;\n \n   if (mode != VOIDmode && GET_MODE (op) != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -1212,9 +1216,17 @@ tls_symbolic_operand_1 (op, mode, size, unspec)\n   else\n     return 0;\n \n-  letter = (unspec == UNSPEC_DTPREL ? 'D' : 'T');\n-\n-  return str[1] == letter;\n+  switch (str[1])\n+    {\n+    case 'D':\n+      return unspec == UNSPEC_DTPREL;\n+    case 'T':\n+      return unspec == UNSPEC_TPREL && size == 64;\n+    case 't':\n+      return unspec == UNSPEC_TPREL && size < 64;\n+    default:\n+      abort ();\n+    }\n }\n \n /* Return true if OP is valid for 16-bit DTP relative relocations.  */\n@@ -1784,14 +1796,9 @@ tls_symbolic_operand_type (symbol)\n \t    return TLS_MODEL_GLOBAL_DYNAMIC;\n \t}\n       if (str[1] == 'T')\n-\t{\n-\t  /* 64-bit local exec is the same as initial exec except without\n-\t     the dynamic relocation.  In either case we use a got entry.  */\n-\t  if (alpha_tls_size == 64)\n-\t    return TLS_MODEL_INITIAL_EXEC;\n-\t  else\n-\t    return TLS_MODEL_LOCAL_EXEC;\n-\t}\n+\treturn TLS_MODEL_INITIAL_EXEC;\n+      if (str[1] == 't')\n+\treturn TLS_MODEL_LOCAL_EXEC;\n     }\n \n   return 0;\n@@ -1814,6 +1821,29 @@ decl_in_text_section (decl)\n \t\t    && DECL_ONE_ONLY (decl))));\n }\n \n+/* Return true if the function DECL will share the same GP as any\n+   function in the current unit of translation.  */\n+\n+static bool\n+decl_has_samegp (decl)\n+     tree decl;\n+{\n+  /* Functions that are not local can be overridden, and thus may\n+     not share the same gp.  */\n+  if (!(*targetm.binds_local_p) (decl))\n+    return false;\n+\n+  /* If -msmall-data is in effect, assume that there is only one GP\n+     for the module, and so any local symbol has this property.  We\n+     need explicit relocations to be able to enforce this for symbols\n+     not defined in this unit of translation, however.  */\n+  if (TARGET_EXPLICIT_RELOCS && TARGET_SMALL_DATA)\n+    return true;\n+\n+  /* Functions that are not external are defined in this UoT.  */\n+  return !DECL_EXTERNAL (decl);\n+}\n+\n /* Return true if EXP should be placed in the small data section.  */\n \n static bool\n@@ -1870,20 +1900,38 @@ alpha_encode_section_info (decl, first)\n   symbol = XEXP (rtl, 0);\n   if (GET_CODE (symbol) != SYMBOL_REF)\n     return;\n+\n+  /* A variable is considered \"local\" if it is defined in this module.  */\n+  is_local = (*targetm.binds_local_p) (decl);\n     \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      /* We mark public functions once they are emitted; otherwise we\n-\t don't know that they exist in this unit of translation.  */\n-      if (TREE_PUBLIC (decl))\n-\treturn;\n+      /* Mark whether the decl is \"near\" in distance.  If -msmall-text is\n+\t in effect, this is trivially true of all local symbols.  */\n+      if (TARGET_SMALL_TEXT)\n+\t{\n+\t  if (is_local)\n+\t    symbol->jump = 1;\n+\t}\n+      else\n+\t{\n+\t  /* Otherwise, a decl is \"near\" if it is defined in this same\n+\t     section.  What we really need is to be able to access the\n+\t     target decl of a call from the call_insn pattern, so that\n+\t     we can determine if the call is from the same section.  We\n+\t     can't do that at present, so handle the common case and\n+\t     match up .text with .text.\n \n-      /* Do not mark functions that are not in .text; otherwise we\n-\t don't know that they are near enough for a direct branch.  */\n-      if (! decl_in_text_section (decl))\n-\treturn;\n+\t     Delay marking public functions until they are emitted; otherwise\n+\t     we don't know that they exist in this unit of translation.  */\n+\t  if (!TREE_PUBLIC (decl) && decl_in_text_section (decl))\n+            symbol->jump = 1;\n+\t}\n \n-      SYMBOL_REF_FLAG (symbol) = 1;\n+      /* Indicate whether the target function shares the same GP as any\n+\t function emitted in this unit of translation.  */\n+      if (decl_has_samegp (decl))\n+\tSYMBOL_REF_FLAG (symbol) = 1;\n       return;\n     }\n \n@@ -1893,9 +1941,6 @@ alpha_encode_section_info (decl, first)\n \n   symbol_str = XSTR (symbol, 0);\n \n-  /* A variable is considered \"local\" if it is defined in this module.  */\n-  is_local = (*targetm.binds_local_p) (decl);\n-\n   /* Care for TLS variables.  */\n   if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n     {\n@@ -1908,9 +1953,11 @@ alpha_encode_section_info (decl, first)\n \t  encoding = 'D';\n \t  break;\n \tcase TLS_MODEL_INITIAL_EXEC:\n-\tcase TLS_MODEL_LOCAL_EXEC:\n \t  encoding = 'T';\n \t  break;\n+\tcase TLS_MODEL_LOCAL_EXEC:\n+\t  encoding = (alpha_tls_size == 64 ? 'T' : 't');\n+\t  break;\n \t}\n     }\n   else if (is_local)\n@@ -2282,16 +2329,22 @@ alpha_legitimize_address (x, scratch, mode)\n }\n \n /* We do not allow indirect calls to be optimized into sibling calls, nor\n-   can we allow a call to a function in a different compilation unit to\n-   be optimized into a sibcall.  */\n+   can we allow a call to a function with a different GP to be optimized\n+   into a sibcall.  */\n+\n static bool\n alpha_function_ok_for_sibcall (decl, exp)\n      tree decl;\n      tree exp ATTRIBUTE_UNUSED;\n {\n-  return (decl\n-\t  && (! TREE_PUBLIC (decl)\n-\t      || (TREE_ASM_WRITTEN (decl) && (*targetm.binds_local_p) (decl))));\n+  /* Can't do indirect tail calls, since we don't know if the target\n+     uses the same GP.  */\n+  if (!decl)\n+    return false;\n+\n+  /* Otherwise, we can make a tail call if the target function shares\n+     the same GP.  */\n+  return decl_has_samegp (decl);\n }\n \n /* For TARGET_EXPLICIT_RELOCS, we don't obfuscate a SYMBOL_REF to a\n@@ -7853,15 +7906,21 @@ alpha_end_function (file, fnname, decl)\n #endif\n \n   /* Show that we know this function if it is called again.\n+     This is only meaningful for symbols that bind locally.  */\n+  if ((*targetm.binds_local_p) (decl))\n+    {\n+      rtx symbol = XEXP (DECL_RTL (decl), 0);\n \n-     Do this only for functions whose symbols bind locally.\n-\n-     Don't do this for functions not defined in the .text section, as\n-     otherwise it's not unlikely that the destination is out of range\n-     for a direct branch.  */\n+      /* Mark whether the decl is \"near\".  See the commentary in \n+\t alpha_encode_section_info wrt the .text section.  */\n+      if (decl_in_text_section (decl))\n+\tsymbol->jump = 1;\n \n-  if ((*targetm.binds_local_p) (decl) && decl_in_text_section (decl))\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      /* Mark whether the decl shares a GP with other functions\n+\t in this unit of translation.  This is trivially true of\n+\t local symbols.  */\n+      SYMBOL_REF_FLAG (symbol) = 1;\n+    }\n \n   /* Output jump tables and the static subroutine information block.  */\n   if (TARGET_ABI_UNICOSMK)"}, {"sha": "2873d157eff17d7ac0aa82a6d46c917df3fc5999", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -222,6 +222,10 @@ extern int alpha_tls_size;\n #define MASK_TLS_KERNEL\t(1 << 14)\n #define TARGET_TLS_KERNEL (target_flags & MASK_TLS_KERNEL)\n \n+/* This means use direct branches to local functions.  */\n+#define MASK_SMALL_TEXT (1 << 15)\n+#define TARGET_SMALL_TEXT (target_flags & MASK_SMALL_TEXT)\n+\n /* This means that the processor is an EV5, EV56, or PCA56.\n    Unlike alpha_cpu this is not affected by -mtune= setting.  */\n #define MASK_CPU_EV5\t(1 << 28)\n@@ -310,6 +314,9 @@ extern int alpha_tls_size;\n      N_(\"Emit 16-bit relocations to the small data areas\")},\t\t\\\n     {\"large-data\", -MASK_SMALL_DATA,\t\t\t\t\t\\\n      N_(\"Emit 32-bit relocations to the small data areas\")},\t\t\\\n+    {\"small-text\", MASK_SMALL_TEXT,\t\t\t\t\t\\\n+     N_(\"Emit direct branches to local functions\")},\t\t\t\\\n+    {\"large-text\", -MASK_SMALL_TEXT, \"\"},\t\t\t\t\\\n     {\"tls-kernel\", MASK_TLS_KERNEL,\t\t\t\t\t\\\n      N_(\"Emit rdval instead of rduniq for thread pointer\")},\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT\t\t\t\t\\\n@@ -1914,7 +1921,7 @@ do {\t\t\t\t\t\t\\\n   {\"alpha_fp_comparison_operator\", {EQ, LE, LT, UNORDERED}},\t\t\\\n   {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\t\t\\\n   {\"const0_operand\", {CONST_INT, CONST_DOUBLE, CONST_VECTOR}},\t\t\\\n-  {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\t\\\n+  {\"samegp_function_operand\", {SYMBOL_REF}},\t\t\t\t\\\n   {\"direct_call_operand\", {SYMBOL_REF}},\t\t\t\t\\\n   {\"local_symbolic_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n   {\"small_symbolic_operand\", {SYMBOL_REF, CONST}},\t\t\t\\"}, {"sha": "523b1d2b3eb267e31a87b93ebe8806d6a6c4c555", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -4567,7 +4567,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n    jsr $26,(%0),0\\;ldah $29,0($26)\\t\\t!gpdisp!%*\\;lda $29,0($29)\\t\\t!gpdisp!%*\n-   bsr $26,$%0..ng\n+   bsr $26,%0\\t\\t!samegp\n    ldq $27,%0($29)\\t\\t!literal!%#\\;jsr $26,($27),%0\\t\\t!lituse_jsr!%#\\;ldah $29,0($26)\\t\\t!gpdisp!%*\\;lda $29,0($29)\\t\\t!gpdisp!%*\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n@@ -4580,7 +4580,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n-   && ! current_file_function_operand (operands[0], Pmode)\n+   && ! samegp_function_operand (operands[0], Pmode)\n    && peep2_regno_dead_p (1, 29)\"\n   [(parallel [(call (mem:DI (match_dup 2))\n \t\t    (match_dup 1))\n@@ -4610,7 +4610,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n-   && ! current_file_function_operand (operands[0], Pmode)\n+   && ! samegp_function_operand (operands[0], Pmode)\n    && ! peep2_regno_dead_p (1, 29)\"\n   [(parallel [(call (mem:DI (match_dup 2))\n \t\t    (match_dup 1))\n@@ -4688,7 +4688,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n-   br $31,$%0..ng\n+   br $31,%0\\t\\t!samegp\n    ldq $27,%0($29)\\t\\t!literal!%#\\;jmp $31,($27),%0\\t\\t!lituse_jsr!%#\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,8\")])\n@@ -7779,7 +7779,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n    jsr $26,(%1),0\\;ldah $29,0($26)\\t\\t!gpdisp!%*\\;lda $29,0($29)\\t\\t!gpdisp!%*\n-   bsr $26,$%1..ng\n+   bsr $26,%1\\t\\t!samegp\n    ldq $27,%1($29)\\t\\t!literal!%#\\;jsr $26,($27),0\\t\\t!lituse_jsr!%#\\;ldah $29,0($26)\\t\\t!gpdisp!%*\\;lda $29,0($29)\\t\\t!gpdisp!%*\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n@@ -7793,7 +7793,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n-   && ! current_file_function_operand (operands[1], Pmode)\n+   && ! samegp_function_operand (operands[1], Pmode)\n    && peep2_regno_dead_p (1, 29)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n@@ -7825,7 +7825,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t      (use (reg:DI 29))\n \t      (clobber (reg:DI 26))])]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && reload_completed\n-   && ! current_file_function_operand (operands[1], Pmode)\n+   && ! samegp_function_operand (operands[1], Pmode)\n    && ! peep2_regno_dead_p (1, 29)\"\n   [(parallel [(set (match_dup 0)\n \t\t   (call (mem:DI (match_dup 3))\n@@ -7970,7 +7970,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    (unspec [(reg:DI 29)] UNSPEC_SIBCALL)]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n   \"@\n-   br $31,$%1..ng\n+   br $31,%1\\t\\t!samegp\n    ldq $27,%1($29)\\t\\t!literal!%#\\;jmp $31,($27),%1\\t\\t!lituse_jsr!%#\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,8\")])"}, {"sha": "8b602358b185f95dc0a0d48fb78fd08a96f4a90c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3094247fd2404373d9bd706ede23ecef45d60b84/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3094247fd2404373d9bd706ede23ecef45d60b84", "patch": "@@ -559,7 +559,7 @@ in the following sections.\n -mcpu=@var{cpu-type}  -mtune=@var{cpu-type} @gol\n -mbwx  -mmax  -mfix  -mcix @gol\n -mfloat-vax  -mfloat-ieee @gol\n--mexplicit-relocs  -msmall-data  -mlarge-data @gol\n+-mexplicit-relocs  -msmall-data  -mlarge-data -msmall-text -mlarge-text @gol\n -mmemory-latency=@var{time}}\n \n @emph{DEC Alpha/VMS Options}\n@@ -8749,6 +8749,19 @@ heap instead of in the program's data segment.\n When generating code for shared libraries, @option{-fpic} implies\n @option{-msmall-data} and @option{-fPIC} implies @option{-mlarge-data}.\n \n+@item -msmall-text\n+@itemx -mlarge-text\n+@opindex msmall-text\n+@opindex mlarge-text\n+When @option{-msmall-text} is used, the compiler assumes that the\n+code of the entire program (or shared library) fits in 4MB, and is\n+thus reachable with a branch instruction.  When @option{-msmall-data}\n+is used, the compiler can assume that all local symbols share the\n+same @code{$gp} value, and thus reduce the number of instructions\n+required for a function call from 4 to 1.\n+\n+The default is @option{-mlarge-text}.\n+\n @item -mcpu=@var{cpu_type}\n @opindex mcpu\n Set the instruction set and instruction scheduling parameters for"}]}