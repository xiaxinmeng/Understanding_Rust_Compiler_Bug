{"sha": "d476b53c3651786fa283f89ad9434731f4f902e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3NmI1M2MzNjUxNzg2ZmEyODNmODlhZDk0MzQ3MzFmNGY5MDJlOQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-12-16T12:56:09Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-12-16T12:56:09Z"}, "message": "[ARC] Rework ARC600 64-bit multiplication patterns.\n\nPreviously users of mulsidi_600 and umulsidi_600 had to take care of\nmoving the multiplication result into the final destination themselves\n(from the MUL64_OUT_REG register).  This commit converts these two\ninstruction patterns into insn_and_split patterns that now take the\nfinal destination as an extra operand.  The insn_and_split patterns\ngenerate the multiplication using two new multiplication instruction\npatterns, then generate the move of the result from the MUL64_OUT_REG\nregister into the final destination.\n\nThis is a clean up commit, there should be no user visible changes\nafter this commit.\n\n2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (mulsidi_600): Change to insn_and_split,\n\tgenerate new mul64 insn for core multiplication work.\n\t(umulsidi_600): Likewise, but use mulu64 insn.\n\t(mul64): New pattern, content taken from old mulsidi_600 insn\n\tpattern.\n\t(mulu64): Likewise, but using umulsidi_600.\n\t(mulsidi3): Remove move to destination, this is now handled by\n\tmulsidi_600 insn_and_split.\n\t(umulsidi3): Likewise, but using umulsidi_600.\n\nFrom-SVN: r243741", "tree": {"sha": "1eac28fb70034876808df669e37acd4f99b4f50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eac28fb70034876808df669e37acd4f99b4f50c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d476b53c3651786fa283f89ad9434731f4f902e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d476b53c3651786fa283f89ad9434731f4f902e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d476b53c3651786fa283f89ad9434731f4f902e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d476b53c3651786fa283f89ad9434731f4f902e9/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc0ca4999b681022fe5a409d187d4af2f86adff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0ca4999b681022fe5a409d187d4af2f86adff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0ca4999b681022fe5a409d187d4af2f86adff2"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "fe59c99df065cd441cc26d1f06ae77960e382700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,3 +1,15 @@\n+2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (mulsidi_600): Change to insn_and_split,\n+\tgenerate new mul64 insn for core multiplication work.\n+\t(umulsidi_600): Likewise, but use mulu64 insn.\n+\t(mul64): New pattern, content taken from old mulsidi_600 insn\n+\tpattern.\n+\t(mulu64): Likewise, but using umulsidi_600.\n+\t(mulsidi3): Remove move to destination, this is now handled by\n+\tmulsidi_600 insn_and_split.\n+\t(umulsidi3): Likewise, but using umulsidi_600.\n+\n 2016-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/71694"}, {"sha": "6fe237e777c30413642df1b64c5a47e8e8fa84a5", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -12,10 +12,6 @@\n ;;    Profiling support and performance improvements by\n ;;    Joern Rennecke (joern.rennecke@embecosm.com)\n ;;\n-;;    Support for DSP multiply instructions and mul64\n-;;    instructions for ARC600; and improvements in flag setting\n-;;    instructions by\n-;;    Muhammad Khurram Riaz (Khurram.Riaz@arc.com)\n \n ;; This file is part of GCC.\n \n@@ -2054,14 +2050,26 @@\n   [(set_attr \"is_sfunc\" \"yes\")\n    (set_attr \"predicable\" \"yes\")])\n \n-(define_insn \"mulsidi_600\"\n+(define_insn_and_split \"mulsidi_600\"\n+  [(set (match_operand:DI 0 \"register_operand\"                               \"=c, c,c,  c\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\"  \"%Rcq#q, c,c,  c\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"nonmemory_operand\"  \"Rcq#q,cL,L,C32\"))))\n+   (clobber (reg:DI MUL64_OUT_REG))]\n+  \"TARGET_MUL64_SET\"\n+  \"#\"\n+  \"TARGET_MUL64_SET\"\n+  [(const_int 0)]\n+  \"emit_insn (gen_mul64 (operands[1], operands[2]));\n+   emit_move_insn (operands[0], gen_rtx_REG (DImode, MUL64_OUT_REG));\n+   DONE;\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"mul64\"\n   [(set (reg:DI MUL64_OUT_REG)\n-\t(mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 0 \"register_operand\"  \"%Rcq#q,c,c,c\"))\n-\t\t (sign_extend:DI\n-; assembler issue for \"I\", see mulsi_600\n-;\t\t   (match_operand:SI 1 \"register_operand\" \"Rcq#q,cL,I,Cal\"))))]\n-\t\t   (match_operand:SI 1 \"register_operand\" \"Rcq#q,cL,L,C32\"))))]\n+\t(mult:DI\n+\t (sign_extend:DI (match_operand:SI 0 \"register_operand\" \"%Rcq#q, c,c,  c\"))\n+\t (sign_extend:DI (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,L,C32\"))))]\n   \"TARGET_MUL64_SET\"\n   \"mul64%? \\t0, %0, %1%&\"\n   [(set_attr \"length\" \"*,4,4,8\")\n@@ -2070,14 +2078,26 @@\n    (set_attr \"predicable\" \"yes,yes,no,yes\")\n    (set_attr \"cond\" \"canuse,canuse,canuse_limm,canuse\")])\n \n-(define_insn \"umulsidi_600\"\n+(define_insn_and_split \"umulsidi_600\"\n+  [(set (match_operand:DI 0 \"register_operand\"                            \"=c,c, c\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\"   \"%c,c, c\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"nonmemory_operand\"  \"cL,L,C32\"))))\n+   (clobber (reg:DI MUL64_OUT_REG))]\n+  \"TARGET_MUL64_SET\"\n+  \"#\"\n+  \"TARGET_MUL64_SET\"\n+  [(const_int 0)]\n+  \"emit_insn (gen_mulu64 (operands[1], operands[2]));\n+   emit_move_insn (operands[0], gen_rtx_REG (DImode, MUL64_OUT_REG));\n+   DONE;\"\n+  [(set_attr \"type\" \"umulti\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"mulu64\"\n   [(set (reg:DI MUL64_OUT_REG)\n-\t(mult:DI (zero_extend:DI\n-\t\t   (match_operand:SI 0 \"register_operand\"  \"%c,c,c\"))\n-\t\t (sign_extend:DI\n-; assembler issue for \"I\", see mulsi_600\n-;\t\t   (match_operand:SI 1 \"register_operand\" \"cL,I,Cal\"))))]\n-\t\t   (match_operand:SI 1 \"register_operand\" \"cL,L,C32\"))))]\n+\t(mult:DI\n+\t (zero_extend:DI (match_operand:SI 0 \"register_operand\"  \"%c,c,c\"))\n+\t (zero_extend:DI (match_operand:SI 1 \"nonmemory_operand\" \"cL,L,C32\"))))]\n   \"TARGET_MUL64_SET\"\n   \"mulu64%? \\t0, %0, %1%&\"\n   [(set_attr \"length\" \"4,4,8\")\n@@ -2141,9 +2161,7 @@\n     }\n   else if (TARGET_MUL64_SET)\n     {\n-      operands[2] = force_reg (SImode, operands[2]);\n-      emit_insn (gen_mulsidi_600 (operands[1], operands[2]));\n-      emit_move_insn (operands[0], gen_rtx_REG (DImode, MUL64_OUT_REG));\n+      emit_insn (gen_mulsidi_600 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n   else if (TARGET_MULMAC_32BY16_SET)\n@@ -2375,9 +2393,7 @@\n     }\n   else if (TARGET_MUL64_SET)\n     {\n-      operands[2] = force_reg (SImode, operands[2]);\n-      emit_insn (gen_umulsidi_600 (operands[1], operands[2]));\n-      emit_move_insn (operands[0], gen_rtx_REG (DImode, MUL64_OUT_REG));\n+      emit_insn (gen_umulsidi_600 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n   else if (TARGET_MULMAC_32BY16_SET)"}]}