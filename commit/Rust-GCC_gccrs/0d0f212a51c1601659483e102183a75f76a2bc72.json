{"sha": "0d0f212a51c1601659483e102183a75f76a2bc72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwZjIxMmE1MWMxNjAxNjU5NDgzZTEwMjE4M2E3NWY3NmEyYmM3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-08T12:36:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-08T12:36:58Z"}, "message": "re PR rtl-optimization/89865 (FAIL: gcc.target/i386/pr49095.c scan-assembler-times \\\\\\\\), % 45)\n\n\tPR rtl-optimization/89865\n\t* config/i386/i386.md: Add peepholes for z = x; x ^= y; x != z.\n\n\t* gcc.target/i386/pr49095.c: Don't expect any RMW sequences.\n\nFrom-SVN: r270206", "tree": {"sha": "e86a239c5f2a6037d81f67b21f602e8a4041b071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86a239c5f2a6037d81f67b21f602e8a4041b071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d0f212a51c1601659483e102183a75f76a2bc72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0f212a51c1601659483e102183a75f76a2bc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0f212a51c1601659483e102183a75f76a2bc72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0f212a51c1601659483e102183a75f76a2bc72/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ad68a6d87ff1978a7ef9228e79795711aed4d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad68a6d87ff1978a7ef9228e79795711aed4d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad68a6d87ff1978a7ef9228e79795711aed4d61"}], "stats": {"total": 106, "additions": 102, "deletions": 4}, "files": [{"sha": "5339017821f294fb37b4420192f6eed0b671f767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d0f212a51c1601659483e102183a75f76a2bc72", "patch": "@@ -1,5 +1,8 @@\n 2019-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/89865\n+\t* config/i386/i386.md: Add peepholes for z = x; x ^= y; x != z.\n+\n \tPR rtl-optimization/89865\n \t* config/i386/i386.md\n \t(SWI12 peephole for mem {+,-,&,|,^}= x; mem != 0): Fix up operand"}, {"sha": "4188c1a96225c9eb7fcf03e932c6da0fef827aba", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d0f212a51c1601659483e102183a75f76a2bc72", "patch": "@@ -18931,6 +18931,100 @@\n \t\t       const0_rtx);\n })\n \n+;; Special cases for xor, where (x ^= y) != 0 is (misoptimized)\n+;; into x = z; x ^= y; x != z\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"memory_operand\"))\n+   (set (match_operand:SWI 3 \"register_operand\") (match_dup 0))\n+   (parallel [(set (match_operand:SWI 4 \"register_operand\")\n+\t\t   (xor:SWI (match_dup 4)\n+\t\t\t    (match_operand:SWI 2 \"<nonmemory_operand>\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 1) (match_dup 4))\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (match_operand:SWI 5 \"register_operand\")\n+\t\t     (match_operand:SWI 6 \"<nonmemory_operand>\")))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && (REGNO (operands[4]) == REGNO (operands[0])\n+       || REGNO (operands[4]) == REGNO (operands[3]))\n+   && (rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n+\t\t\t     ? 3 : 0], operands[5])\n+       ? rtx_equal_p (operands[2], operands[6])\n+       : rtx_equal_p (operands[2], operands[5])\n+\t && rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n+\t\t\t\t  ? 3 : 0], operands[6]))\n+   && peep2_reg_dead_p (4, operands[4])\n+   && peep2_reg_dead_p (5, operands[REGNO (operands[4]) == REGNO (operands[0])\n+\t\t\t\t    ? 3 : 0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && !reg_overlap_mentioned_p (operands[3], operands[0])\n+   && !reg_overlap_mentioned_p (operands[3], operands[1])\n+   && !reg_overlap_mentioned_p (operands[3], operands[2])\n+   && (<MODE>mode != QImode\n+       || immediate_operand (operands[2], QImode)\n+       || any_QIreg_operand (operands[2], QImode))\"\n+  [(parallel [(set (match_dup 7) (match_dup 9))\n+\t      (set (match_dup 1) (match_dup 8))])]\n+{\n+  operands[7] = SET_DEST (PATTERN (peep2_next_insn (4)));\n+  operands[8] = gen_rtx_XOR (<MODE>mode, copy_rtx (operands[1]),\n+\t\t\t     operands[2]);\n+  operands[9]\n+    = gen_rtx_COMPARE (GET_MODE (operands[7]),\n+\t\t       copy_rtx (operands[8]),\n+\t\t       const0_rtx);\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:SWI12 0 \"register_operand\")\n+\t(match_operand:SWI12 1 \"memory_operand\"))\n+   (set (match_operand:SWI12 3 \"register_operand\") (match_dup 0))\n+   (parallel [(set (match_operand:SI 4 \"register_operand\")\n+\t\t   (xor:SI (match_dup 4)\n+\t\t\t   (match_operand:SI 2 \"<nonmemory_operand>\")))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 1) (match_operand:SWI12 5 \"register_operand\"))\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (match_operand:SWI12 6 \"register_operand\")\n+\t\t     (match_operand:SWI12 7 \"<nonmemory_operand>\")))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && (REGNO (operands[5]) == REGNO (operands[0])\n+       || REGNO (operands[5]) == REGNO (operands[3]))\n+   && REGNO (operands[5]) == REGNO (operands[4])\n+   && (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n+\t\t\t     ? 3 : 0], operands[6])\n+       ? (REG_P (operands[2])\n+\t  ? REG_P (operands[7]) && REGNO (operands[2]) == REGNO (operands[7])\n+\t  : rtx_equal_p (operands[2], operands[7]))\n+       : (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n+\t\t\t\t? 3 : 0], operands[7])\n+\t  && REG_P (operands[2])\n+\t  && REGNO (operands[2]) == REGNO (operands[6])))\n+   && peep2_reg_dead_p (4, operands[5])\n+   && peep2_reg_dead_p (5, operands[REGNO (operands[5]) == REGNO (operands[0])\n+\t\t\t\t    ? 3 : 0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && !reg_overlap_mentioned_p (operands[3], operands[0])\n+   && !reg_overlap_mentioned_p (operands[3], operands[1])\n+   && !reg_overlap_mentioned_p (operands[3], operands[2])\n+   && (<MODE>mode != QImode\n+       || immediate_operand (operands[2], SImode)\n+       || any_QIreg_operand (operands[2], SImode))\"\n+  [(parallel [(set (match_dup 8) (match_dup 10))\n+\t      (set (match_dup 1) (match_dup 9))])]\n+{\n+  operands[8] = SET_DEST (PATTERN (peep2_next_insn (4)));\n+  operands[9] = gen_rtx_XOR (<MODE>mode, copy_rtx (operands[1]),\n+\t\t\t     gen_lowpart (<MODE>mode, operands[2]));\n+  operands[10]\n+    = gen_rtx_COMPARE (GET_MODE (operands[8]),\n+\t\t       copy_rtx (operands[9]),\n+\t\t       const0_rtx);\n+})\n+\n ;; Attempt to optimize away memory stores of values the memory already\n ;; has.  See PR79593.\n (define_peephole2"}, {"sha": "9b7b08d0e0e3ea7b11d4b472f6f5c788b54b5740", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d0f212a51c1601659483e102183a75f76a2bc72", "patch": "@@ -1,5 +1,8 @@\n 2019-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/89865\n+\t* gcc.target/i386/pr49095.c: Don't expect any RMW sequences.\n+\n \tPR rtl-optimization/89865\n \t* gcc.target/i386/pr49095.c: Adjust number of expected RMW spots\n \ton ia32."}, {"sha": "f1295b3314016581f29e3ed60dd1d894c6be59fe", "filename": "gcc/testsuite/gcc.target/i386/pr49095.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d0f212a51c1601659483e102183a75f76a2bc72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c?ref=0d0f212a51c1601659483e102183a75f76a2bc72", "patch": "@@ -71,7 +71,5 @@ G (int)\n G (long)\n \n /* { dg-final { scan-assembler-not \"test\\[lq\\]\" } } */\n-/* The {f,h}{char,short,int,long}xor functions aren't optimized into\n-   a RMW instruction, so need load, modify and store.  FIXME eventually.  */\n-/* { dg-final { scan-assembler-times \"\\\\(%eax\\\\), %\" 8 { target { ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"\\\\(%\\[re\\]di\\\\), %\" 8 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\\\(%eax\\\\), %\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\\\(%\\[re\\]di\\\\), %\" { target { ! ia32 } } } } */"}]}