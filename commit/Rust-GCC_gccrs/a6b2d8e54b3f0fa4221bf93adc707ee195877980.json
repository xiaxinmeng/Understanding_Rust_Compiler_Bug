{"sha": "a6b2d8e54b3f0fa4221bf93adc707ee195877980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiMmQ4ZTU0YjNmMGZhNDIyMWJmOTNhZGM3MDdlZTE5NTg3Nzk4MA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-11-17T00:53:17Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-11-17T00:53:17Z"}, "message": "re PR middle-end/23197 (Improve documentation on -fprofile-generate, -fprofile-use)\n\n2018-11-16  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR middle-end/23197\n\n\tgcc/\n\t* doc/invoke.texi (Optimize Options): Update options enabled by\n\tfprofile-generate, -fprofile-use, and -fauto-profile.\n\nFrom-SVN: r266231", "tree": {"sha": "8b55435ffecb7c9a2df004ecf446ed6db63b111e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b55435ffecb7c9a2df004ecf446ed6db63b111e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6b2d8e54b3f0fa4221bf93adc707ee195877980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b2d8e54b3f0fa4221bf93adc707ee195877980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b2d8e54b3f0fa4221bf93adc707ee195877980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b2d8e54b3f0fa4221bf93adc707ee195877980/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cf403a36e197c40f42021e78b8fd9a5ede64b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf403a36e197c40f42021e78b8fd9a5ede64b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf403a36e197c40f42021e78b8fd9a5ede64b3f"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "949061a369e2bc7ac3b6bb768a56c36e1c52b046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b2d8e54b3f0fa4221bf93adc707ee195877980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b2d8e54b3f0fa4221bf93adc707ee195877980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6b2d8e54b3f0fa4221bf93adc707ee195877980", "patch": "@@ -1,3 +1,9 @@\n+2018-11-16  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/23197\n+\t* doc/invoke.texi (Optimize Options): Update options enabled by\n+\tfprofile-generate, -fprofile-use, and -fauto-profile.\n+\n 2018-11-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \tPR target/87927"}, {"sha": "93f97636d75bcc247a3b9357e9b3c0e5d78364a4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b2d8e54b3f0fa4221bf93adc707ee195877980/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b2d8e54b3f0fa4221bf93adc707ee195877980/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a6b2d8e54b3f0fa4221bf93adc707ee195877980", "patch": "@@ -8412,7 +8412,8 @@ If all calls to a given function are integrated, and the function is\n declared @code{static}, then the function is normally not output as\n assembler code in its own right.\n \n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.  Also enabled\n+by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -finline-functions-called-once\n @opindex finline-functions-called-once\n@@ -8671,6 +8672,8 @@ When @option{-fgcse-after-reload} is enabled, a redundant load elimination\n pass is performed after reload.  The purpose of this pass is to clean up\n redundant spilling.\n \n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n+\n @item -faggressive-loop-optimizations\n @opindex faggressive-loop-optimizations\n This option tells the loop optimizer to use language constraints to\n@@ -9241,6 +9244,7 @@ to functions are constants and then optimizes accordingly.\n This optimization can substantially increase performance\n if the application has constants passed to functions.\n This flag is enabled by default at @option{-O2}, @option{-Os} and @option{-O3}.\n+It is also enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -fipa-cp-clone\n @opindex fipa-cp-clone\n@@ -9251,12 +9255,14 @@ Because this optimization can create multiple copies of functions,\n it may significantly increase code size\n (see @option{--param ipcp-unit-growth=@var{value}}).\n This flag is enabled by default at @option{-O3}.\n+It is also enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -fipa-bit-cp\n @opindex fipa-bit-cp\n When enabled, perform interprocedural bitwise constant\n-propagation. This flag is enabled by default at @option{-O2}. It\n-requires that @option{-fipa-cp} is enabled.\n+propagation. This flag is enabled by default at @option{-O2} and\n+by @option{-fprofile-use} and @option{-fauto-profile}.\n+It requires that @option{-fipa-cp} is enabled.  \n \n @item -fipa-vrp\n @opindex fipa-vrp\n@@ -9455,7 +9461,8 @@ ENDDO\n @item -ftree-loop-distribute-patterns\n @opindex ftree-loop-distribute-patterns\n Perform loop distribution of patterns that can be code generated with\n-calls to a library.  This flag is enabled by default at @option{-O3}.\n+calls to a library.  This flag is enabled by default at @option{-O3}, and\n+by @option{-fprofile-use} and @option{-fauto-profile}.\n \n This pass distributes the initialization loops and generates a call to\n memset zero.  For example, the loop\n@@ -9584,12 +9591,14 @@ and @option{-ftree-slp-vectorize} if not explicitly specified.\n @item -ftree-loop-vectorize\n @opindex ftree-loop-vectorize\n Perform loop vectorization on trees. This flag is enabled by default at\n-@option{-O3} and when @option{-ftree-vectorize} is enabled.\n+@option{-O3} and by @option{-ftree-vectorize}, @option{-fprofile-use},\n+and @option{-fauto-profile}.\n \n @item -ftree-slp-vectorize\n @opindex ftree-slp-vectorize\n Perform basic block vectorization on trees. This flag is enabled by default at\n-@option{-O3} and when @option{-ftree-vectorize} is enabled.\n+@option{-O3} and by @option{-ftree-vectorize}, @option{-fprofile-use},\n+and @option{-fauto-profile}.\n \n @item -fvect-cost-model=@var{model}\n @opindex fvect-cost-model\n@@ -9663,6 +9672,7 @@ Perform predictive commoning optimization, i.e., reusing computations\n iterations of loops.\n \n This option is enabled at level @option{-O3}.\n+It is also enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -fprefetch-loop-arrays\n @opindex fprefetch-loop-arrays\n@@ -10276,15 +10286,22 @@ be inconsistent due to missed counter updates. When this option is specified,\n GCC uses heuristics to correct or smooth out such inconsistencies. By\n default, GCC emits an error message when an inconsistent profile is detected.\n \n+This option is enabled by @option{-fauto-profile}.\n+\n @item -fprofile-use\n @itemx -fprofile-use=@var{path}\n @opindex fprofile-use\n Enable profile feedback-directed optimizations, \n-and the following optimizations\n-which are generally profitable only with profile feedback available:\n-@option{-fbranch-probabilities}, @option{-fvpt},\n-@option{-funroll-loops}, @option{-fpeel-loops}, @option{-ftracer}, \n-@option{-ftree-vectorize}, and @option{ftree-loop-distribute-patterns}.\n+and the following optimizations, many of which\n+are generally profitable only with profile feedback available:\n+\n+@gccoptlist{-fbranch-probabilities  -fprofile-values @gol\n+-funroll-loops  -fpeel-loops  -ftracer  -fvpt @gol\n+-finline-functions  -fipa-cp  -fipa-cp-clone  -fipa-bit-cp @gol\n+-fpredictive-commoning  -fsplit-loops  -funswitch-loops @gol\n+-fgcse-after-reload  -ftree-loop-vectorize  -ftree-slp-vectorize @gol\n+-fvect-cost-model=dynamic  -ftree-loop-distribute-patterns @gol\n+-fprofile-reorder-functions}\n \n Before you can use this option, you must first generate profiling information.\n @xref{Instrumentation Options}, for information about the\n@@ -10294,7 +10311,7 @@ By default, GCC emits an error message if the feedback profiles do not\n match the source code.  This error can be turned into a warning by using\n @option{-Wno-error=coverage-mismatch}.  Note this may result in poorly\n optimized code.  Additionally, by default, GCC also emits a warning message if\n-the feedback profiles do not exist (See @option{-Wmissing-profile}).\n+the feedback profiles do not exist (see @option{-Wmissing-profile}).\n \n If @var{path} is specified, GCC looks at the @var{path} to find\n the profile feedback data files. See @option{-fprofile-dir}.\n@@ -10303,14 +10320,16 @@ the profile feedback data files. See @option{-fprofile-dir}.\n @itemx -fauto-profile=@var{path}\n @opindex fauto-profile\n Enable sampling-based feedback-directed optimizations, \n-and the following optimizations\n-which are generally profitable only with profile feedback available:\n-@option{-fbranch-probabilities}, @option{-fvpt},\n-@option{-funroll-loops}, @option{-fpeel-loops}, @option{-ftracer}, \n-@option{-ftree-vectorize},\n-@option{-finline-functions}, @option{-fipa-cp}, @option{-fipa-cp-clone},\n-@option{-fpredictive-commoning}, @option{-funswitch-loops},\n-@option{-fgcse-after-reload}, and @option{-ftree-loop-distribute-patterns}.\n+and the following optimizations,\n+many of which are generally profitable only with profile feedback available:\n+\n+@gccoptlist{-fbranch-probabilities  -fprofile-values @gol\n+-funroll-loops  -fpeel-loops  -ftracer  -fvpt @gol\n+-finline-functions  -fipa-cp  -fipa-cp-clone  -fipa-bit-cp @gol\n+-fpredictive-commoning  -fsplit-loops  -funswitch-loops @gol\n+-fgcse-after-reload  -ftree-loop-vectorize  -ftree-slp-vectorize @gol\n+-fvect-cost-model=dynamic  -ftree-loop-distribute-patterns @gol\n+-fprofile-correction}\n \n @var{path} is the name of a file containing AutoFDO profile information.\n If omitted, it defaults to @file{fbdata.afdo} in the current directory.\n@@ -10613,6 +10632,8 @@ used in one place: in @file{reorg.c}, instead of guessing which path a\n branch is most likely to take, the @samp{REG_BR_PROB} values are used to\n exactly determine which path is taken more often.\n \n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n+\n @item -fprofile-values\n @opindex fprofile-values\n If combined with @option{-fprofile-arcs}, it adds code so that some\n@@ -10621,7 +10642,8 @@ data about values of expressions in the program is gathered.\n With @option{-fbranch-probabilities}, it reads back the data gathered\n from profiling values of expressions for usage in optimizations.\n \n-Enabled with @option{-fprofile-generate} and @option{-fprofile-use}.\n+Enabled by @option{-fprofile-generate}, @option{-fprofile-use}, and\n+@option{-fauto-profile}.\n \n @item -fprofile-reorder-functions\n @opindex fprofile-reorder-functions\n@@ -10641,6 +10663,8 @@ and actually performs the optimizations based on them.\n Currently the optimizations include specialization of division operations\n using the knowledge about the value of the denominator.\n \n+Enabled with @option{-fprofile-use} and @option{-fauto-profile}.\n+\n @item -frename-registers\n @opindex frename-registers\n Attempt to avoid false dependencies in scheduled code by making use\n@@ -10666,7 +10690,7 @@ Perform tail duplication to enlarge superblock size.  This transformation\n simplifies the control flow of the function allowing other optimizations to do\n a better job.\n \n-Enabled with @option{-fprofile-use}.\n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -funroll-loops\n @opindex funroll-loops\n@@ -10677,7 +10701,7 @@ It also turns on complete loop peeling (i.e.@: complete removal of loops with\n a small constant number of iterations).  This option makes code larger, and may\n or may not make it run faster.\n \n-Enabled with @option{-fprofile-use}.\n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n \n @item -funroll-all-loops\n @opindex funroll-all-loops\n@@ -10693,7 +10717,7 @@ roll much (from profile feedback or static analysis).  It also turns on\n complete loop peeling (i.e.@: complete removal of loops with small constant\n number of iterations).\n \n-Enabled with @option{-O3} and/or @option{-fprofile-use}.\n+Enabled by @option{-O3}, @option{-fprofile-use}, and @option{-fauto-profile}.\n \n @item -fmove-loop-invariants\n @opindex fmove-loop-invariants\n@@ -10705,11 +10729,15 @@ at level @option{-O1} and higher, except for @option{-Og}.\n Split a loop into two if it contains a condition that's always true\n for one side of the iteration space and false for the other.\n \n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n+\n @item -funswitch-loops\n @opindex funswitch-loops\n Move branches with loop invariant conditions out of the loop, with duplicates\n of the loop on both branches (modified according to result of the condition).\n \n+Enabled by @option{-fprofile-use} and @option{-fauto-profile}.\n+\n @item -ffunction-sections\n @itemx -fdata-sections\n @opindex ffunction-sections\n@@ -12096,7 +12124,9 @@ profile useful for later recompilation with profile feedback based\n optimization.  You must use @option{-fprofile-generate} both when\n compiling and when linking your program.\n \n-The following options are enabled: @option{-fprofile-arcs}, @option{-fprofile-values}, @option{-fvpt}.\n+The following options are enabled:\n+@option{-fprofile-arcs}, @option{-fprofile-values},\n+@option{-finline-functions}, and @option{-fipa-bit-cp}.\n \n If @var{path} is specified, GCC looks at the @var{path} to find\n the profile feedback data files. See @option{-fprofile-dir}."}]}