{"sha": "425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "node_id": "C_kwDOANBUbNoAKDQyNTkwNWI0OWFlMDRiZjBlMDBiZTk1Y2FhMDFmZDZkMmNjOGU3NGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-18T11:50:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T11:50:32Z"}, "message": "Merge #942\n\n942:  Removed Lambda Function within AST::PathPattern r=philberty a=mvvsmk\n\nAddresses issue #717 \r\n1) Changed the rust-path.h and removed the iterate_path_segments\r\n   fuction.\r\n2) Removed the lambda fuction form rust-ast-lower.cc and replaced it\r\n   with a for loop.\r\n\r\nDo let me know if I missed anything or could improve on something.\r\n\r\nSigned-off-by : M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\r\n\r\n\n\nCo-authored-by: M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>", "tree": {"sha": "83db64aeb7c1bf0002615e8f06e631a2e2682579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83db64aeb7c1bf0002615e8f06e631a2e2682579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiD4gICRBK7hj4Ov3rIwAA79EIABAjLN37Mkl00rde0VO25Qh1\ntYipP1yFyHV6N4EwRRSVaFv58pz78+ZBBXl0irbczKeEbLf6/gKgmnjcqCMFqEzx\nDfyhgLKSEsREO77/3aj6y0zQatsple8GSzAmlEkRJHhoDRS+tjoiWznwfU14y1Vx\nnvBZNvTQLBipk/jUVFRKpddIM/nSmes/A4DFKBT6iiVbX2e95nhCIDdiihxXDn2R\nIko1n498J8oD+AE3Bdj2HWThtwhAojTWCrkhGncojmfAIeSFWsWFA/voLINPtutM\nWaxkuba5DODP+SxGPUPnZ9D0Z/xNB5FOSBeTEELHUOE71zrY9xzalG86TPjhLjc=\n=kEjE\n-----END PGP SIGNATURE-----\n", "payload": "tree 83db64aeb7c1bf0002615e8f06e631a2e2682579\nparent fbe22e87687c68357430e60361a8a124c81148cc\nparent ee4131396ebebf75280fe88a23c2d1778541376c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645185032 +0000\ncommitter GitHub <noreply@github.com> 1645185032 +0000\n\nMerge #942\n\n942:  Removed Lambda Function within AST::PathPattern r=philberty a=mvvsmk\n\nAddresses issue #717 \r\n1) Changed the rust-path.h and removed the iterate_path_segments\r\n   fuction.\r\n2) Removed the lambda fuction form rust-ast-lower.cc and replaced it\r\n   with a for loop.\r\n\r\nDo let me know if I missed anything or could improve on something.\r\n\r\nSigned-off-by : M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\r\n\r\n\n\nCo-authored-by: M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425905b49ae04bf0e00be95caa01fd6d2cc8e74c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe22e87687c68357430e60361a8a124c81148cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe22e87687c68357430e60361a8a124c81148cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe22e87687c68357430e60361a8a124c81148cc"}, {"sha": "ee4131396ebebf75280fe88a23c2d1778541376c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4131396ebebf75280fe88a23c2d1778541376c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4131396ebebf75280fe88a23c2d1778541376c"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "a1898724ae048029e9443281236984eb30ea1796", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425905b49ae04bf0e00be95caa01fd6d2cc8e74c/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425905b49ae04bf0e00be95caa01fd6d2cc8e74c/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "patch": "@@ -305,15 +305,6 @@ class PathPattern : public Pattern\n   // TODO: this seems kinda dodgy\n   std::vector<PathExprSegment> &get_segments () { return segments; }\n   const std::vector<PathExprSegment> &get_segments () const { return segments; }\n-\n-  void iterate_path_segments (std::function<bool (PathExprSegment &)> cb)\n-  {\n-    for (auto it = segments.begin (); it != segments.end (); it++)\n-      {\n-\tif (!cb (*it))\n-\t  return;\n-      }\n-  }\n };\n \n /* AST node representing a path-in-expression pattern (path that allows generic"}, {"sha": "aac6ee5f1f8113f680fb8a69fddf304acd8bd97b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425905b49ae04bf0e00be95caa01fd6d2cc8e74c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425905b49ae04bf0e00be95caa01fd6d2cc8e74c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=425905b49ae04bf0e00be95caa01fd6d2cc8e74c", "patch": "@@ -263,17 +263,17 @@ void\n ASTLowerPathInExpression::visit (AST::PathInExpression &expr)\n {\n   std::vector<HIR::PathExprSegment> path_segments;\n-  expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n-    path_segments.push_back (lower_path_expr_seg (s));\n-\n-    // insert the mappings for the segment\n-    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-    mappings->insert_hir_path_expr_seg (\n-      lowered_seg->get_mappings ().get_crate_num (),\n-      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n-    return true;\n-  });\n+  auto &segments = expr.get_segments ();\n+  for (auto &s : segments)\n+    {\n+      path_segments.push_back (lower_path_expr_seg ((s)));\n \n+      // insert the mappings for the segment\n+      HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+      mappings->insert_hir_path_expr_seg (\n+\tlowered_seg->get_mappings ().get_crate_num (),\n+\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+    }\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n@@ -311,16 +311,17 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n     = lower_qual_path_type (expr.get_qualified_path_type ());\n \n   std::vector<HIR::PathExprSegment> path_segments;\n-  expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n-    path_segments.push_back (lower_path_expr_seg (s));\n-\n-    // insert the mappings for the segment\n-    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-    mappings->insert_hir_path_expr_seg (\n-      lowered_seg->get_mappings ().get_crate_num (),\n-      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n-    return true;\n-  });\n+  auto &segments = expr.get_segments ();\n+  for (auto &s : segments)\n+    {\n+      path_segments.push_back (lower_path_expr_seg ((s)));\n+\n+      // insert the mappings for the segment\n+      HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+      mappings->insert_hir_path_expr_seg (\n+\tlowered_seg->get_mappings ().get_crate_num (),\n+\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+    }\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}]}