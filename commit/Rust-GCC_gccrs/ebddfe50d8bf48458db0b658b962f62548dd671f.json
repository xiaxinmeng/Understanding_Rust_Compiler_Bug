{"sha": "ebddfe50d8bf48458db0b658b962f62548dd671f", "node_id": "C_kwDOANBUbNoAKGViZGRmZTUwZDhiZjQ4NDU4ZGIwYjY1OGI5NjJmNjI1NDhkZDY3MWY", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-04-20T21:48:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-30T08:29:03Z"}, "message": "[Ada] Incorrect determination of whether an expression is predicate-static\n\nThe expression given in a Static_Predicate aspect specification is\nrequired to be predicate-static. The implementation of this compile-time\ncheck was incorrect in some cases. There were problems in both\ndirections: expressions that are not predicate-static were incorrectly\ntreated as though they were and vice versa. This led to both accepting\ninvalid code and to rejecting valid code.\n\ngcc/ada/\n\n\t* sem_ch13.adb (Is_Predicate_Static): Do not generate warnings\n\tabout subexpressions of enclosing expressions. Generate warnings\n\tfor predicates that are known to be always true or always false,\n\texcept in the case where the predicate is expressed as a Boolean\n\tliteral. Deal with non-predicate-static expressions that have\n\tbeen transformed into predicate-static expressions.  Add missing\n\tIs_Type_Ref call to N_Membership_Test case.", "tree": {"sha": "4e39c5ba33e7802d161e4ad0599e0728e7c54e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e39c5ba33e7802d161e4ad0599e0728e7c54e78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebddfe50d8bf48458db0b658b962f62548dd671f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebddfe50d8bf48458db0b658b962f62548dd671f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebddfe50d8bf48458db0b658b962f62548dd671f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebddfe50d8bf48458db0b658b962f62548dd671f/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567bf44932542b8f861dc7880dba3273fb5838ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567bf44932542b8f861dc7880dba3273fb5838ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567bf44932542b8f861dc7880dba3273fb5838ce"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "6ca69e54cd052fd7e21cbb2d39a303c0693c7214", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebddfe50d8bf48458db0b658b962f62548dd671f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebddfe50d8bf48458db0b658b962f62548dd671f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ebddfe50d8bf48458db0b658b962f62548dd671f", "patch": "@@ -180,7 +180,8 @@ package body Sem_Ch13 is\n \n    function Is_Predicate_Static\n      (Expr : Node_Id;\n-      Nam  : Name_Id) return Boolean;\n+      Nam  : Name_Id;\n+      Warn : Boolean := True) return Boolean;\n    --  Given predicate expression Expr, tests if Expr is predicate-static in\n    --  the sense of the rules in (RM 3.2.4 (15-24)). Occurrences of the type\n    --  name in the predicate expression have been replaced by references to\n@@ -205,6 +206,11 @@ package body Sem_Ch13 is\n    --\n    --  We can't allow this, otherwise we have predicate-static applying to a\n    --  larger class than static expressions, which was never intended.\n+   --\n+   --  The Warn parameter is True iff this is not a recursive call. This\n+   --  parameter is used to avoid generating warnings for subexpressions and\n+   --  for cases where the predicate expression (as originally written by\n+   --  the user, before any transformations) is a Boolean literal.\n \n    procedure New_Put_Image_Subprogram\n      (N    : Node_Id;\n@@ -14000,7 +14006,8 @@ package body Sem_Ch13 is\n \n    function Is_Predicate_Static\n      (Expr : Node_Id;\n-      Nam  : Name_Id) return Boolean\n+      Nam  : Name_Id;\n+      Warn : Boolean := True) return Boolean\n    is\n       function All_Static_Case_Alternatives (L : List_Id) return Boolean;\n       --  Given a list of case expression alternatives, returns True if all\n@@ -14050,13 +14057,42 @@ package body Sem_Ch13 is\n       begin\n          return (Nkind (N) = N_Identifier\n                   and then Chars (N) = Nam\n-                  and then Paren_Count (N) = 0)\n-           or else Nkind (N) = N_Function_Call;\n+                  and then Paren_Count (N) = 0);\n       end Is_Type_Ref;\n \n+      --  helper function for recursive calls\n+      function Is_Predicate_Static_Aux (Expr : Node_Id) return Boolean is\n+        (Is_Predicate_Static (Expr, Nam, Warn => False));\n+\n    --  Start of processing for Is_Predicate_Static\n \n    begin\n+      --   Handle cases like\n+      --     subtype S is Integer with Static_Predicate =>\n+      --       (Some_Integer_Variable in Integer) and then (S /= 0);\n+      --   where the predicate (which should be rejected) might have been\n+      --   transformed into just \"(S /= 0)\", which would appear to be\n+      --   a predicate-static expression (and therefore legal).\n+\n+      if Original_Node (Expr) /= Expr then\n+\n+         --  Emit warnings for predicates that are always True or always False\n+         --  and were not originally expressed as Boolean literals.\n+\n+         return Result : constant Boolean :=\n+           Is_Predicate_Static_Aux (Original_Node (Expr))\n+         do\n+            if Result and then Warn and then Is_Entity_Name (Expr) then\n+               if Entity (Expr) = Standard_True then\n+                  Error_Msg_N (\"predicate is redundant (always True)?\", Expr);\n+               elsif Entity (Expr) = Standard_False then\n+                  Error_Msg_N\n+                    (\"predicate is unsatisfiable (always False)?\", Expr);\n+               end if;\n+            end if;\n+         end return;\n+      end if;\n+\n       --  Predicate_Static means one of the following holds. Numbers are the\n       --  corresponding paragraph numbers in (RM 3.2.4(16-22)).\n \n@@ -14070,6 +14106,7 @@ package body Sem_Ch13 is\n       --  for a static membership test.\n \n       elsif Nkind (Expr) in N_Membership_Test\n+        and then Is_Type_Ref (Left_Opnd (Expr))\n         and then All_Membership_Choices_Static (Expr)\n       then\n          return True;\n@@ -14115,20 +14152,20 @@ package body Sem_Ch13 is\n       --  operand is predicate-static.\n \n       elsif (Nkind (Expr) in N_Op_And | N_Op_Or | N_Op_Xor\n-              and then Is_Predicate_Static (Left_Opnd (Expr), Nam)\n-              and then Is_Predicate_Static (Right_Opnd (Expr), Nam))\n+              and then Is_Predicate_Static_Aux (Left_Opnd (Expr))\n+              and then Is_Predicate_Static_Aux (Right_Opnd (Expr)))\n         or else\n             (Nkind (Expr) = N_Op_Not\n-              and then Is_Predicate_Static (Right_Opnd (Expr), Nam))\n+              and then Is_Predicate_Static_Aux (Right_Opnd (Expr)))\n       then\n          return True;\n \n       --  21. A short-circuit control form where both operands are\n       --  predicate-static.\n \n       elsif Nkind (Expr) in N_Short_Circuit\n-        and then Is_Predicate_Static (Left_Opnd (Expr), Nam)\n-        and then Is_Predicate_Static (Right_Opnd (Expr), Nam)\n+        and then Is_Predicate_Static_Aux (Left_Opnd (Expr))\n+        and then Is_Predicate_Static_Aux (Right_Opnd (Expr))\n       then\n          return True;\n \n@@ -14159,12 +14196,6 @@ package body Sem_Ch13 is\n       then\n          return True;\n \n-      elsif Is_Entity_Name (Expr)\n-        and then Entity (Expr) = Standard_True\n-      then\n-         Error_Msg_N (\"predicate is redundant (always True)?\", Expr);\n-         return True;\n-\n       --  That's an exhaustive list of tests, all other cases are not\n       --  predicate-static, so we return False.\n "}]}