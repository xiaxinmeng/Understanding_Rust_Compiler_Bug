{"sha": "dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjYmVhYTU3NmE3ZmIzODc4NjNhOTRiZjFhZGVkMzc0ZWU1OWRmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-02-12T16:10:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-02-12T16:10:15Z"}, "message": "constraints.md: New file.\n\n        * config/alpha/constraints.md: New file.\n\t* config/alpha/alpha.c: Include tm-constrs.h.\n\t(alpha_const_ok_for_letter_p, alpha_const_double_ok_for_letter_p,\n\talpha_extra_constraint): Remove.\n\t(alpha_emit_conditional_branch): Use satisfies_constraint_*.\n\t* config/alpha/alpha-protos.h: Update.\n\t* config/alpha/alpha.h (REG_CLASS_FROM_LETTER): Remove.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Remove.\n\t(EXTRA_CONSTRAINT): Remove.\n\t* config/alpha/alpha.md: Include constraints.md.\n\t(adddi splitter): Use satisfies_constraint_*.\n\t* config/alpha/predicates.md (add_operand): Likewise.\n\t(sext_add_operand, addition_operation): Likewise.\n\nFrom-SVN: r121847", "tree": {"sha": "807a399123e2040d6d36f34bbad28e2866607b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/807a399123e2040d6d36f34bbad28e2866607b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/comments", "author": null, "committer": null, "parents": [{"sha": "cc297c1e035ee0769b4e726f70dc5b20f389f9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc297c1e035ee0769b4e726f70dc5b20f389f9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc297c1e035ee0769b4e726f70dc5b20f389f9e8"}], "stats": {"total": 327, "additions": 156, "deletions": 171}, "files": [{"sha": "68a81c7b2c06110da755d2e78512c381c593edb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -1,3 +1,19 @@\n+2007-02-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/constraints.md: New file.\n+\t* config/alpha/alpha.c: Include tm-constrs.h.\n+\t(alpha_const_ok_for_letter_p, alpha_const_double_ok_for_letter_p,\n+\talpha_extra_constraint): Remove.\n+\t(alpha_emit_conditional_branch): Use satisfies_constraint_*.\n+\t* config/alpha/alpha-protos.h: Update.\n+\t* config/alpha/alpha.h (REG_CLASS_FROM_LETTER): Remove.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Remove.\n+\t(EXTRA_CONSTRAINT): Remove.\n+\t* config/alpha/alpha.md: Include constraints.md.\n+\t(adddi splitter): Use satisfies_constraint_*.\n+\t* config/alpha/predicates.md (add_operand): Likewise.\n+\t(sext_add_operand, addition_operation): Likewise.\n+\n 2007-02-12  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/29145"}, {"sha": "9ce85c87008956f717f8a0b9bbb972f91ec833f1", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for alpha.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -35,10 +35,6 @@ extern void alpha_expand_prologue (void);\n extern void alpha_expand_epilogue (void);\n extern void alpha_output_filename (FILE *, const char *);\n \n-extern bool alpha_const_ok_for_letter_p (HOST_WIDE_INT, int);\n-extern bool alpha_const_double_ok_for_letter_p (rtx, int);\n-extern bool alpha_extra_constraint (rtx, int);\n-\n extern rtx alpha_tablejump_addr_vec (rtx);\n extern rtx alpha_tablejump_best_label (rtx);\n "}, {"sha": "1c5a1592bde6934cb7ab4df916caee77ab1d16d8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 98, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -55,6 +55,8 @@ Boston, MA 02110-1301, USA.  */\n #include \"tree-gimple.h\"\n #include \"tree-flow.h\"\n #include \"tree-stdarg.h\"\n+#include \"tm-constrs.h\"\n+\n \n /* Specify which cpu to schedule for.  */\n enum processor_type alpha_tune;\n@@ -588,96 +590,6 @@ resolve_reload_operand (rtx op)\n   return op;\n }\n \n-/* Implements CONST_OK_FOR_LETTER_P.  Return true if the value matches\n-   the range defined for C in [I-P].  */\n-\n-bool\n-alpha_const_ok_for_letter_p (HOST_WIDE_INT value, int c)\n-{\n-  switch (c)\n-    {\n-    case 'I':\n-      /* An unsigned 8 bit constant.  */\n-      return (unsigned HOST_WIDE_INT) value < 0x100;\n-    case 'J':\n-      /* The constant zero.  */\n-      return value == 0;\n-    case 'K':\n-      /* A signed 16 bit constant.  */\n-      return (unsigned HOST_WIDE_INT) (value + 0x8000) < 0x10000;\n-    case 'L':\n-      /* A shifted signed 16 bit constant appropriate for LDAH.  */\n-      return ((value & 0xffff) == 0\n-              && ((value) >> 31 == -1 || value >> 31 == 0));\n-    case 'M':\n-      /* A constant that can be AND'ed with using a ZAP insn.  */\n-      return zap_mask (value);\n-    case 'N':\n-      /* A complemented unsigned 8 bit constant.  */\n-      return (unsigned HOST_WIDE_INT) (~ value) < 0x100;\n-    case 'O':\n-      /* A negated unsigned 8 bit constant.  */\n-      return (unsigned HOST_WIDE_INT) (- value) < 0x100;\n-    case 'P':\n-      /* The constant 1, 2 or 3.  */\n-      return value == 1 || value == 2 || value == 3;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n-/* Implements CONST_DOUBLE_OK_FOR_LETTER_P.  Return true if VALUE\n-   matches for C in [GH].  */\n-\n-bool\n-alpha_const_double_ok_for_letter_p (rtx value, int c)\n-{\n-  switch (c)\n-    {\n-    case 'G':\n-      /* The floating point zero constant.  */\n-      return (GET_MODE_CLASS (GET_MODE (value)) == MODE_FLOAT\n-\t      && value == CONST0_RTX (GET_MODE (value)));\n-\n-    case 'H':\n-      /* A valid operand of a ZAP insn.  */\n-      return (GET_MODE (value) == VOIDmode\n-\t      && zap_mask (CONST_DOUBLE_LOW (value))\n-\t      && zap_mask (CONST_DOUBLE_HIGH (value)));\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n-/* Implements CONST_DOUBLE_OK_FOR_LETTER_P.  Return true if VALUE\n-   matches for C.  */\n-\n-bool\n-alpha_extra_constraint (rtx value, int c)\n-{\n-  switch (c)\n-    {\n-    case 'Q':\n-      return normal_memory_operand (value, VOIDmode);\n-    case 'R':\n-      return direct_call_operand (value, Pmode);\n-    case 'S':\n-      return (GET_CODE (value) == CONST_INT\n-\t      && (unsigned HOST_WIDE_INT) INTVAL (value) < 64);\n-    case 'T':\n-      return GET_CODE (value) == HIGH;\n-    case 'U':\n-      return TARGET_ABI_UNICOSMK && symbolic_operand (value, VOIDmode);\n-    case 'W':\n-      return (GET_CODE (value) == CONST_VECTOR\n-\t      && value == CONST0_RTX (GET_MODE (value)));\n-    default:\n-      return false;\n-    }\n-}\n-\n /* The scalar modes supported differs from the default check-what-c-supports\n    version in that sometimes TFmode is available even when long double\n    indicates only DFmode.  On unicosmk, we have the situation that HImode\n@@ -2580,15 +2492,12 @@ alpha_emit_conditional_branch (enum rtx_code code)\n \t\t   && !(symbolic_operand (op0, VOIDmode)\n \t\t\t|| (GET_CODE (op0) == REG && REG_POINTER (op0))))\n \t    {\n-\t      HOST_WIDE_INT v = INTVAL (op1), n = -v;\n+\t      rtx n_op1 = GEN_INT (-INTVAL (op1));\n \n-\t      if (! CONST_OK_FOR_LETTER_P (v, 'I')\n-\t\t  && (CONST_OK_FOR_LETTER_P (n, 'K')\n-\t\t      || CONST_OK_FOR_LETTER_P (n, 'L')))\n-\t\t{\n-\t\t  cmp_code = PLUS, branch_code = code;\n-\t\t  op1 = GEN_INT (n);\n-\t\t}\n+\t      if (! satisfies_constraint_I (op1)\n+\t\t  && (satisfies_constraint_K (n_op1)\n+\t\t      || satisfies_constraint_L (n_op1)))\n+\t\tcmp_code = PLUS, branch_code = code, op1 = n_op1;\n \t    }\n \t}\n "}, {"sha": "382fe12056508e4d3439c577af219446a817c2c1", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -600,63 +600,6 @@ enum reg_class {\n #define INDEX_REG_CLASS NO_REGS\n #define BASE_REG_CLASS GENERAL_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n-\n-#define REG_CLASS_FROM_LETTER(C)\t\\\n- ((C) == 'a' ? R24_REG\t\t\t\\\n-  : (C) == 'b' ? R25_REG\t\t\\\n-  : (C) == 'c' ? R27_REG\t\t\\\n-  : (C) == 'f' ? FLOAT_REGS\t\t\\\n-  : (C) == 'v' ? R0_REG\t\t\t\\\n-  : NO_REGS)\n-\n-/* Define this macro to change register usage conditional on target flags.  */\n-/* #define CONDITIONAL_REGISTER_USAGE  */\n-\n-/* The letters I, J, K, L, M, N, O, and P in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\n-   For Alpha:\n-   `I' is used for the range of constants most insns can contain.\n-   `J' is the constant zero.\n-   `K' is used for the constant in an LDA insn.\n-   `L' is used for the constant in a LDAH insn.\n-   `M' is used for the constants that can be AND'ed with using a ZAP insn.\n-   `N' is used for complemented 8-bit constants.\n-   `O' is used for negated 8-bit constants.\n-   `P' is used for the constants 1, 2 and 3.  */\n-\n-#define CONST_OK_FOR_LETTER_P   alpha_const_ok_for_letter_p\n-\n-/* Similar, but for floating or large integer constants, and defining letters\n-   G and H.   Here VALUE is the CONST_DOUBLE rtx itself.\n-\n-   For Alpha, `G' is the floating-point constant zero.  `H' is a CONST_DOUBLE\n-   that is the operand of a ZAP insn.  */\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P  alpha_const_double_ok_for_letter_p\n-\n-/* Optional extra constraints for this machine.\n-\n-   For the Alpha, `Q' means that this is a memory operand but not a\n-   reference to an unaligned location.\n-\n-   `R' is a SYMBOL_REF that has SYMBOL_REF_FLAG set or is the current\n-   function.\n-\n-   'S' is a 6-bit constant (valid for a shift insn).\n-\n-   'T' is a HIGH.\n-\n-   'U' is a symbolic operand.\n-\n-   'W' is a vector zero.  */\n-\n-#define EXTRA_CONSTRAINT  alpha_extra_constraint\n-\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "87871ccb2d745888924003eb92f08c175dc23fdc", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -1,6 +1,6 @@\n ;; Machine description for DEC Alpha for GNU C compiler\n ;; Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-;; 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+;; 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n ;;\n ;; This file is part of GCC.\n@@ -178,9 +178,10 @@\n (include \"ev6.md\")\n \n \f\n-;; Include predicate definitions\n+;; Operand and operator predicates and constraints\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n \f\n ;; First define the arithmetic insns.  Note that the 32-bit forms also\n@@ -489,10 +490,11 @@\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n   HOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n   HOST_WIDE_INT rest = val - low;\n+  rtx rest_rtx = GEN_INT (rest);\n \n   operands[4] = GEN_INT (low);\n-  if (CONST_OK_FOR_LETTER_P (rest, 'L'))\n-    operands[3] = GEN_INT (rest);\n+  if (satisfies_constraint_L (rest_rtx))\n+    operands[3] = rest_rtx;\n   else if (! no_new_pseudos)\n     {\n       operands[3] = gen_reg_rtx (DImode);"}, {"sha": "8ca0f28b9fc7e7641a38beffba87a8048e9a366a", "filename": "gcc/config/alpha/constraints.md", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fconstraints.md?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -0,0 +1,122 @@\n+;; Constraint definitions for DEC Alpha.\n+;; Copyright (C) 2007 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;;; Unused letters:\n+;;;    ABCDEF               V  YZ\n+;;;       de ghijklmnopq stu wxyz\n+\n+;; Integer register constraints.\n+\n+(define_register_constraint \"a\" \"R24_REG\"\n+ \"General register 24, input to division routine\")\n+\n+(define_register_constraint \"b\" \"R25_REG\"\n+ \"General register 24, input to division routine\")\n+\n+(define_register_constraint \"c\" \"R27_REG\"\n+ \"General register 27, function call address\")\n+\n+(define_register_constraint \"f\" \"FLOAT_REGS\"\n+ \"Any floating-point register\")\n+\n+(define_register_constraint \"v\" \"R0_REG\"\n+ \"General register 0, function value return address\")\n+\n+;; Integer constant constraints.\n+(define_constraint \"I\"\n+  \"An unsigned 8 bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 255\")))\n+\n+(define_constraint \"J\"\n+  \"The constant zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"K\"\n+  \"Signed 16-bit integer constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -32768 && ival < 32768 \")))\n+\n+(define_constraint \"L\"\n+  \"A shifted signed 16-bit constant appropriate for LDAH\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & 0xffff) == 0\n+\t\t    && (ival >> 31 == -1 || ival >> 31 == 0)\")))\n+\n+(define_constraint \"M\"\n+  \"A valid operand of a ZAP insn\"\n+  (and (match_code \"const_int\")\n+       (match_test \"zap_mask (ival) != 0\")))\n+\n+(define_constraint \"N\"\n+  \"A complemented unsigned 8-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"~ival >= 0 && ~ival <= 255\")))\n+\n+(define_constraint \"O\"\n+  \"A negated unsigned 8-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"-ival >= 0 && -ival <= 255\")))\n+\n+(define_constraint \"P\"\n+  \"The constant 1, 2 or 3\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 1 || ival == 2 || ival == 3\")))\n+\n+(define_constraint \"H\"\n+  \"A valid operand of a ZAP insn, when building with 32-bit HOST_WIDE_INT\"\n+  (and (match_code \"const_double\")\n+       (match_test \"mode == VOIDmode && zap_mask (hval) && zap_mask (lval)\")))\n+\n+;; Floating-point constant constraints.\n+(define_constraint \"G\"\n+  \"The floating point zero constant\"\n+  (and (match_code \"const_double\")\n+       (match_test \"GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t\t    && op == CONST0_RTX (mode)\")))\n+\n+;; \"Extra\" constraints.\n+(define_constraint \"Q\"\n+  \"@internal A normal_memory_operand\"\n+  (match_operand 0 \"normal_memory_operand\"))\n+\n+(define_constraint \"R\"\n+  \"@internal A direct_call_operand\"\n+  (match_operand:DI 0 \"direct_call_operand\"))\n+\n+(define_constraint \"S\"\n+  \"An unsigned 6-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 63\")))\n+\n+(define_constraint \"T\"\n+  \"@internal A high-part symbol\"\n+  (match_code \"high\"))\n+\n+(define_constraint \"U\"\n+  \"@internal A UNICOSMK symbol\"\n+  (and (match_test \"TARGET_ABI_UNICOSMK\")\n+       (match_operand 0 \"symbolic_operand\")))\n+\n+(define_constraint \"W\"\n+  \"A vector zero constant\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"op == CONST0_RTX (mode)\")))"}, {"sha": "0b2c22f16dd656154f2c10d5a46a91f69af68dcd", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbeaa576a7fb387863a94bf1aded374ee59dfd/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for DEC Alpha.\n-;; Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+;; Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -54,16 +54,14 @@\n ;; Return 1 if the operand is a valid second operand to an add insn.\n (define_predicate \"add_operand\"\n   (if_then_else (match_code \"const_int\")\n-    (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\n-\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\")\n+    (match_test \"satisfies_constraint_K (op) || satisfies_constraint_L (op)\")\n     (match_operand 0 \"register_operand\")))\n \n ;; Return 1 if the operand is a valid second operand to a\n ;; sign-extending add insn.\n (define_predicate \"sext_add_operand\"\n   (if_then_else (match_code \"const_int\")\n-    (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n-\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O')\")\n+    (match_test \"satisfies_constraint_I (op) || satisfies_constraint_O (op)\")\n     (match_operand 0 \"register_operand\")))\n \n ;; Return 1 if the operand is a non-symbolic constant operand that\n@@ -572,8 +570,7 @@\n (define_predicate \"addition_operation\"\n   (and (match_code \"plus\")\n        (match_test \"register_operand (XEXP (op, 0), mode)\n-\t\t    && GET_CODE (XEXP (op, 1)) == CONST_INT\n-\t\t    && CONST_OK_FOR_LETTER_P (INTVAL (XEXP (op, 1)), 'K')\")))\n+\t\t    && satisfies_constraint_K (XEXP (op, 1))\")))\n \n ;; For TARGET_EXPLICIT_RELOCS, we don't obfuscate a SYMBOL_REF to a\n ;; small symbolic operand until after reload.  At which point we need"}]}