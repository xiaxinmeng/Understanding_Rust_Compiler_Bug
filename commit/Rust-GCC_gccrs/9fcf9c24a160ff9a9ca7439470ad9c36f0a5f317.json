{"sha": "9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjZjljMjRhMTYwZmY5YTljYTc0Mzk0NzBhZDljMzZmMGE1ZjMxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-05-08T00:39:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-08T00:39:28Z"}, "message": "throw_allocator.h (throw_allocator_base): Avoid out of line member functions definitions.\n\n2009-05-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/throw_allocator.h (throw_allocator_base): Avoid\n\tout of line member functions definitions.\n\t(throw_allocator_base::_S_g, _S_map, _S_throw_prob, _S_label):\n\tRemove, use static locals instead.\n\t(throw_allocator_base::do_check_allocated, print_to_string): Declare.\n\t* src/throw_allocator.cc: New.\n\t* src/Makefile.am: Add.\n\t* config/abi/pre/gnu.ver: Add exports.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r147264", "tree": {"sha": "099093ca41c5120a81e9862ef591de41962a0204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099093ca41c5120a81e9862ef591de41962a0204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/comments", "author": null, "committer": null, "parents": [{"sha": "c704f737f0c31f111a240e660de54e966a4eed1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c704f737f0c31f111a240e660de54e966a4eed1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c704f737f0c31f111a240e660de54e966a4eed1a"}], "stats": {"total": 440, "additions": 233, "deletions": 207}, "files": [{"sha": "b65d37a4a6e6d9a387da845c8aea765ed8841ec9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -1,3 +1,15 @@\n+2009-05-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/throw_allocator.h (throw_allocator_base): Avoid\n+\tout of line member functions definitions.\n+\t(throw_allocator_base::_S_g, _S_map, _S_throw_prob, _S_label):\n+\tRemove, use static locals instead.\n+\t(throw_allocator_base::do_check_allocated, print_to_string): Declare.\n+\t* src/throw_allocator.cc: New.\n+\t* src/Makefile.am: Add.\n+\t* config/abi/pre/gnu.ver: Add exports.\n+\t* src/Makefile.in: Regenerate.\n+\n 2009-05-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* configure.ac: Bump libtool_VERSION to 6:12:0."}, {"sha": "f40fd97ef3821bfbfd62683e8233ba873e96ce12", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -964,6 +964,10 @@ GLIBCXX_3.4.12 {\n     _ZSt27__set_once_functor_lock_ptrPSt11unique_lockISt5mutexE;\n     _ZSt16__get_once_mutexv;\n \n+    # throw_allocator\n+    _ZN9__gnu_cxx20throw_allocator_base18do_check_allocated*;\n+    _ZN9__gnu_cxx20throw_allocator_base15print_to_string*;\n+\n } GLIBCXX_3.4.11;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "ecc5c8c0d02099df55015a9ab683fbadfcdab074", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 110, "deletions": 198, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -64,13 +64,24 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     std::tr1::mt19937 _M_generator;\n \n   public:\n-    twister_rand_gen(unsigned int s = static_cast<unsigned int>(std::time(0)));\n-    \n+    twister_rand_gen(unsigned int seed =\n+\t\t     static_cast<unsigned int>(std::time(0)))\n+    : _M_generator(seed) { }\n+\n     void\n-    init(unsigned int);\n-    \n+    init(unsigned int seed)\n+    { _M_generator.seed(seed); }\n+\n     double\n-    get_prob();\n+    get_prob()\n+    {\n+      const double min = _M_generator.min();\n+      const double res = static_cast<const double>(_M_generator() - min);\n+      const double range = static_cast<const double>(_M_generator.max() - min);\n+      const double ret = res / range;\n+      _GLIBCXX_DEBUG_ASSERT(ret >= 0 && ret <= 1);\n+      return ret;\n+    }\n   };\n \n   /** \n@@ -96,65 +107,97 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   {\n   public:\n     void\n-    init(unsigned long seed);\n+    init(unsigned long seed)\n+    { rand_gen().init(seed); }\n \n     static void\n-    set_throw_prob(double throw_prob);\n+    set_throw_prob(double t_p)\n+    { throw_prob() = t_p; }\n \n     static double\n-    get_throw_prob();\n+    get_throw_prob()\n+    { return throw_prob(); }\n \n     static void\n-    set_label(size_t l);\n+    set_label(size_t l)\n+    { label() = l; }\n+\n+    static size_t\n+    get_label()\n+    { return label(); }\n \n     static bool\n-    empty();\n+    empty()\n+    { return map().empty(); }\n \n     struct group_throw_prob_adjustor\n     {\n-      group_throw_prob_adjustor(size_t size) : _M_throw_prob_orig(_S_throw_prob)\n+      group_throw_prob_adjustor(size_t size)\n+      : _M_throw_prob_orig(get_throw_prob())\n       {\n-\t_S_throw_prob =\n-\t  1 - std::pow(double(1 - _S_throw_prob), double(0.5 / (size + 1)));\n+\tset_throw_prob(1 - std::pow(double(1 - get_throw_prob()),\n+\t\t\t\t    double(0.5 / (size + 1))));\n       }\n \n       ~group_throw_prob_adjustor()\n-      { _S_throw_prob = _M_throw_prob_orig; }\n+      { set_throw_prob(_M_throw_prob_orig); }\n \n     private:\n       const double _M_throw_prob_orig;\n     };\n \n     struct zero_throw_prob_adjustor\n     {\n-      zero_throw_prob_adjustor() : _M_throw_prob_orig(_S_throw_prob)\n-      { _S_throw_prob = 0; }\n+      zero_throw_prob_adjustor()\n+      : _M_throw_prob_orig(get_throw_prob())\n+      { set_throw_prob(0); }\n \n       ~zero_throw_prob_adjustor()\n-      { _S_throw_prob = _M_throw_prob_orig; }\n+      { set_throw_prob(_M_throw_prob_orig); }\n \n     private:\n       const double _M_throw_prob_orig;\n     };\n \n   protected:\n     static void\n-    insert(void*, size_t);\n+    insert(void* p, size_t size)\n+    {\n+      const_iterator found_it = map().find(p);\n+      if (found_it != map().end())\n+\t{\n+\t  std::string error(\"throw_allocator_base::insert double insert!\\n\");\n+\t  print_to_string(error, make_entry(p, size));\n+\t  print_to_string(error, *found_it);\n+\t  std::__throw_logic_error(error.c_str());\n+\t}\n+      map().insert(make_entry(p, size));\n+    }\n \n     static void\n-    erase(void*, size_t);\n+    erase(void* p, size_t size)\n+    {\n+      check_allocated(p, size);\n+      map().erase(p);\n+    } \n \n     static void\n-    throw_conditionally();\n+    throw_conditionally()\n+    {\n+      if (rand_gen().get_prob() < get_throw_prob())\n+\t__throw_forced_exception_error();\n+    }  \n \n     // See if a particular address and size has been allocated by this\n     // allocator.\n     static void\n-    check_allocated(void*, size_t);\n+    check_allocated(void* p, size_t size)\n+    { do_check_allocated(map().find(p), map().end(), p, size); }\n \n     // See if a given label has been allocated by this allocator.\n     static void\n-    check_allocated(size_t);\n+    check_allocated(size_t label)\n+    { do_check_allocated(map().begin(), map().end(), label); }\n \n   private:\n     typedef std::pair<size_t, size_t> \t\talloc_data_type;\n@@ -167,20 +210,59 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator<<(std::ostream&, const throw_allocator_base&);\n \n     static entry_type\n-    make_entry(void*, size_t);\n+    make_entry(void* p, size_t size)\n+    { return std::make_pair(p, alloc_data_type(get_label(), size)); }\n+\n+    static void\n+    do_check_allocated(const_iterator, const_iterator, void*, size_t);\n \n     static void\n-    print_to_string(std::string&);\n+    do_check_allocated(const_iterator, const_iterator, size_t);\n \n     static void\n     print_to_string(std::string&, const_reference);\n \n-    static twister_rand_gen \t_S_g;\n-    static map_type \t\t_S_map;\n-    static double \t\t_S_throw_prob;\n-    static size_t \t\t_S_label;\n+    static map_type&\n+    map()\n+    {\n+      static map_type mp;\n+      return mp;\n+    }\n+\n+    static twister_rand_gen&\n+    rand_gen()\n+    {\n+      static twister_rand_gen rg;\n+      return rg;\n+    }\n+\n+    static double&\n+    throw_prob()\n+    {\n+      static double tp;\n+      return tp;\n+    }\n+\n+    static size_t&\n+    label()\n+    {\n+      static size_t ll;\n+      return ll;\n+    }\n   };\n \n+  inline std::ostream& \n+  operator<<(std::ostream& os, const throw_allocator_base&)\n+  {\n+    std::string error;\n+    typedef throw_allocator_base alloc_type;\n+    alloc_type::const_iterator beg = alloc_type::map().begin();\n+    alloc_type::const_iterator end = alloc_type::map().end();\n+    for (; beg != end; ++beg)\n+      alloc_type::print_to_string(error, *beg);\n+    return os << error;\n+  }\n+\n   /** \n    *  @brief Allocator class with logging and exception control.\n    *  @ingroup allocators\n@@ -273,176 +355,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator!=(const throw_allocator<T>&, const throw_allocator<T>&)\n     { return false; }\n \n-  std::ostream& \n-  operator<<(std::ostream& os, const throw_allocator_base& alloc)\n-  {\n-    std::string error;\n-    throw_allocator_base::print_to_string(error);\n-    os << error;\n-    return os;\n-  }\n-\n-  // XXX Should be in .cc.\n-  twister_rand_gen::\n-  twister_rand_gen(unsigned int seed) : _M_generator(seed)  { }\n-\n-  void\n-  twister_rand_gen::\n-  init(unsigned int seed)\n-  { _M_generator.seed(seed); }\n-\n-  double\n-  twister_rand_gen::\n-  get_prob()\n-  {\n-    const double min = _M_generator.min();\n-    const double res = static_cast<const double>(_M_generator() - min);\n-    const double range = static_cast<const double>(_M_generator.max() - min);\n-    const double ret = res / range;\n-    _GLIBCXX_DEBUG_ASSERT(ret >= 0 && ret <= 1);\n-    return ret;\n-  }\n-\n-  twister_rand_gen throw_allocator_base::_S_g;\n-\n-  throw_allocator_base::map_type \n-  throw_allocator_base::_S_map;\n-\n-  double throw_allocator_base::_S_throw_prob;\n-\n-  size_t throw_allocator_base::_S_label = 0;\n-\n-  throw_allocator_base::entry_type\n-  throw_allocator_base::make_entry(void* p, size_t size)\n-  { return std::make_pair(p, alloc_data_type(_S_label, size)); }\n-\n-  void\n-  throw_allocator_base::init(unsigned long seed)\n-  { _S_g.init(seed); }\n-\n-  void\n-  throw_allocator_base::set_throw_prob(double throw_prob)\n-  { _S_throw_prob = throw_prob; }\n-\n-  double\n-  throw_allocator_base::get_throw_prob()\n-  { return _S_throw_prob; }\n-\n-  void\n-  throw_allocator_base::set_label(size_t l)\n-  { _S_label = l; }\n-\n-  void\n-  throw_allocator_base::insert(void* p, size_t size)\n-  {\n-    const_iterator found_it = _S_map.find(p);\n-    if (found_it != _S_map.end())\n-      {\n-\tstd::string error(\"throw_allocator_base::insert\");\n-\terror += \"double insert!\";\n-\terror += '\\n';\n-\tprint_to_string(error, make_entry(p, size));\n-\tprint_to_string(error, *found_it);\n-\tstd::__throw_logic_error(error.c_str());\n-      }\n-    _S_map.insert(make_entry(p, size));\n-  }\n-\n-  bool\n-  throw_allocator_base::empty()\n-  { return _S_map.empty(); }\n-\n-  void\n-  throw_allocator_base::erase(void* p, size_t size)\n-  {\n-    check_allocated(p, size);\n-    _S_map.erase(p);\n-  }\n-\n-  void\n-  throw_allocator_base::check_allocated(void* p, size_t size)\n-  {\n-    const_iterator found_it = _S_map.find(p);\n-    if (found_it == _S_map.end())\n-      {\n-\tstd::string error(\"throw_allocator_base::check_allocated by value \");\n-\terror += \"null erase!\";\n-\terror += '\\n';\n-\tprint_to_string(error, make_entry(p, size));\n-\tstd::__throw_logic_error(error.c_str());\n-      }\n-\n-    if (found_it->second.second != size)\n-      {\n-\tstd::string error(\"throw_allocator_base::check_allocated by value \");\n-\terror += \"wrong-size erase!\";\n-\terror += '\\n';\n-\tprint_to_string(error, make_entry(p, size));\n-\tprint_to_string(error, *found_it);\n-\tstd::__throw_logic_error(error.c_str());\n-      }\n-  }\n-\n-  void\n-  throw_allocator_base::check_allocated(size_t label)\n-  {\n-    std::string found;\n-    const_iterator it = _S_map.begin();\n-    while (it != _S_map.end())\n-      {\n-\tif (it->second.first == label)\n-\t  {\n-\t    print_to_string(found, *it);\n-\t  }\n-\t++it;\n-      }\n-\n-    if (!found.empty())\n-      {\n-\tstd::string error(\"throw_allocator_base::check_allocated by label \");\n-\terror += '\\n';\n-\terror += found;\n-\tstd::__throw_logic_error(error.c_str());\n-      }\t\n-  }\n-\n-  void\n-  throw_allocator_base::throw_conditionally()\n-  {\n-    if (_S_g.get_prob() < _S_throw_prob)\n-      __throw_forced_exception_error();\n-  }\n-\n-  void\n-  throw_allocator_base::print_to_string(std::string& s)\n-  {\n-    const_iterator begin = throw_allocator_base::_S_map.begin();\n-    const_iterator end = throw_allocator_base::_S_map.end();\n-    for (; begin != end; ++begin)\n-      print_to_string(s, *begin);\n-  }\n-\n-  void\n-  throw_allocator_base::print_to_string(std::string& s, const_reference ref)\n-  {\n-    char buf[40];\n-    const char tab('\\t');\n-    s += \"address: \";\n-    __builtin_sprintf(buf, \"%p\", ref.first);\n-    s += buf;\n-    s += tab;\n-    s += \"label: \";\n-    unsigned long l = static_cast<unsigned long>(ref.second.first);\n-    __builtin_sprintf(buf, \"%lu\", l);\n-    s += buf;\n-    s += tab;\n-    s += \"size: \";\n-    l = static_cast<unsigned long>(ref.second.second);\n-    __builtin_sprintf(buf, \"%lu\", l);\n-    s += buf;\n-    s += '\\n';\n-  }\n-\n _GLIBCXX_END_NAMESPACE\n \n #endif "}, {"sha": "288243aab26f4de37fa2a9461934b33a23759fca", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -182,6 +182,7 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n+\tthrow_allocator.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\"}, {"sha": "24187af1dae82022bc27b8e3c93e3e5799f7751d", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -85,12 +85,13 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n \tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n \tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n-\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n-\tthread.cc atomicity.cc codecvt_members.cc collate_members.cc \\\n-\tctype_members.cc messages_members.cc monetary_members.cc \\\n-\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n-\tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n+\tstring-inst.cc throw_allocator.cc valarray-inst.cc \\\n+\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n+\tchrono.cc thread.cc atomicity.cc codecvt_members.cc \\\n+\tcollate_members.cc ctype_members.cc messages_members.cc \\\n+\tmonetary_members.cc numeric_members.cc time_members.cc \\\n+\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n+\tparallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -111,9 +112,9 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n-\tthread.lo $(am__objects_1) $(am__objects_4)\n+\tstring-inst.lo throw_allocator.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n+\tchrono.lo thread.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -434,6 +435,7 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n+\tthrow_allocator.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\"}, {"sha": "a8247ad9782eb09594ed240f872da7a7cb5fa7dd", "filename": "libstdc++-v3/src/throw_allocator.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2Fthrow_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317/libstdc%2B%2B-v3%2Fsrc%2Fthrow_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthrow_allocator.cc?ref=9fcf9c24a160ff9a9ca7439470ad9c36f0a5f317", "patch": "@@ -0,0 +1,95 @@\n+// Throw Allocator. Out of line function definitions. -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/throw_allocator.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  void\n+  throw_allocator_base::do_check_allocated(const_iterator found,\n+\t\t\t\t\t   const_iterator end,\n+\t\t\t\t\t   void* p, size_t size)\n+  {\n+    if (found == end)\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated by value \"\n+\t\t\t  \"null erase!\\n\");\n+\tprint_to_string(error, make_entry(p, size));\n+\tstd::__throw_logic_error(error.c_str());\n+      }\n+\n+    if (found->second.second != size)\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated by value \"\n+\t\t\t  \"wrong-size erase!\\n\");\n+\tprint_to_string(error, make_entry(p, size));\n+\tprint_to_string(error, *found);\n+\tstd::__throw_logic_error(error.c_str());\n+      }\n+  }\n+\n+  void\n+  throw_allocator_base::do_check_allocated(const_iterator beg,\n+\t\t\t\t\t   const_iterator end,\n+\t\t\t\t\t   size_t label)\n+  {\n+    std::string found;\n+    while (beg != end)\n+      {\n+\tif (beg->second.first == label)\n+\t  print_to_string(found, *beg);\n+\t++beg;\n+      }\n+\n+    if (!found.empty())\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated by label \\n\");\n+\terror += found;\n+\tstd::__throw_logic_error(error.c_str());\n+      }\n+  }\n+\n+  void\n+  throw_allocator_base::print_to_string(std::string& s,\n+\t\t\t\t\tconst_reference ref)\n+  {\n+    char buf[40];\n+    const char tab('\\t');\n+    s += \"address: \";\n+    __builtin_sprintf(buf, \"%p\", ref.first);\n+    s += buf;\n+    s += tab;\n+    s += \"label: \";\n+    unsigned long l = static_cast<unsigned long>(ref.second.first);\n+    __builtin_sprintf(buf, \"%lu\", l);\n+    s += buf;\n+    s += tab;\n+    s += \"size: \";\n+    l = static_cast<unsigned long>(ref.second.second);\n+    __builtin_sprintf(buf, \"%lu\", l);\n+    s += buf;\n+    s += '\\n';\n+  }\n+\n+_GLIBCXX_END_NAMESPACE"}]}