{"sha": "393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZjlmZWRmMzVmMDA2ZWI5YzhjNWNhMTg1YWU5OWFhMmEwY2NlNg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-06-16T14:59:41Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-06-16T14:59:41Z"}, "message": "re PR rtl-optimization/57425 (RTL alias analysis unprepared to handle stack slot sharing)\n\ngcc:\n\tPR rtl-optimization/57425\n\tPR rtl-optimization/57569\n\t* alias.c (write_dependence_p): Add new parameters mem_size,\n\tcanon_mem_addr and mem_canonicalized.  Change type of writep to bool.\n\tChanged all callers.\n\t(canon_anti_dependence): New function.\n\t* cse.c (check_dependence): Use canon_anti_dependence.\n\t* cselib.c (cselib_invalidate_mem): Likewise.\n\t* rtl.h (canon_anti_dependence): Declare.\ngcc/testsuite:\n\tPR rtl-optimization/57425\n\tPR rtl-optimization/57569\n\t* gcc.dg/torture/pr57425-1.c, gcc.dg/torture/pr57425-2.c: New files.\n\t* gcc.dg/torture/pr57425-3.c, gcc.dg/torture/pr57569.c: Likewise.\nIndex: alias.c\n===================================================================\n--- alias.c\t(revision 200126)\n\nFrom-SVN: r200133", "tree": {"sha": "287eb151099ae1ad14535d80694e42ba6df3f9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/287eb151099ae1ad14535d80694e42ba6df3f9d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b259d352ca69bed852c775145cdcd5d48bb45d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b259d352ca69bed852c775145cdcd5d48bb45d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b259d352ca69bed852c775145cdcd5d48bb45d1e"}], "stats": {"total": 207, "additions": 196, "deletions": 11}, "files": [{"sha": "f6eee23285572fe1f3961278f50664e6006ff81d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -1,3 +1,15 @@\n+2013-06-16  Joern Rennecke <joern.rennecke@embecosm.com>\n+\n+\tPR rtl-optimization/57425\n+\tPR rtl-optimization/57569\n+\t* alias.c (write_dependence_p): Add new parameters mem_size,\n+\tcanon_mem_addr and mem_canonicalized.  Change type of writep to bool.\n+\tChanged all callers.\n+\t(canon_anti_dependence): New function.\n+\t* cse.c (check_dependence): Use canon_anti_dependence.\n+\t* cselib.c (cselib_invalidate_mem): Likewise.\n+\t* rtl.h (canon_anti_dependence): Declare.\n+\n 2013-06-16  J\u00fcrgen Urban  <JuergenUrban@gmx.de>\n \n \t* config/mips/mips.h (ISA_HAS_LL_SC): Exclude TARGET_MIPS5900."}, {"sha": "902ed334769b84c92b0b7e7dcf5c571f8c7ba729", "filename": "gcc/alias.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -156,7 +156,8 @@ static int insert_subset_children (splay_tree_node, void*);\n static alias_set_entry get_alias_set_entry (alias_set_type);\n static bool nonoverlapping_component_refs_p (const_rtx, const_rtx);\n static tree decl_for_component_ref (tree);\n-static int write_dependence_p (const_rtx, const_rtx, int);\n+static int write_dependence_p (const_rtx, enum machine_mode, rtx, const_rtx,\n+\t\t\t       bool, bool);\n \n static void memory_modified_1 (rtx, const_rtx, void *);\n \n@@ -2553,15 +2554,22 @@ canon_true_dependence (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n }\n \n /* Returns nonzero if a write to X might alias a previous read from\n-   (or, if WRITEP is nonzero, a write to) MEM.  */\n+   (or, if WRITEP is true, a write to) MEM.\n+   If MEM_CANONCALIZED is nonzero, CANON_MEM_ADDR is the canonicalized\n+   address of MEM, and MEM_MODE the mode for that access.  */\n \n static int\n-write_dependence_p (const_rtx mem, const_rtx x, int writep)\n+write_dependence_p (const_rtx mem, enum machine_mode mem_mode,\n+\t\t    rtx canon_mem_addr, const_rtx x,\n+\t\t    bool mem_canonicalized, bool writep)\n {\n   rtx x_addr, mem_addr;\n   rtx base;\n   int ret;\n \n+  gcc_checking_assert (mem_canonicalized ? (canon_mem_addr != NULL_RTX)\n+\t\t       : (canon_mem_addr == NULL_RTX && mem_mode == VOIDmode));\n+\n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n \n@@ -2612,9 +2620,15 @@ write_dependence_p (const_rtx mem, const_rtx x, int writep)\n     return 0;\n \n   x_addr = canon_rtx (x_addr);\n-  mem_addr = canon_rtx (mem_addr);\n+  if (mem_canonicalized)\n+    mem_addr = canon_mem_addr;\n+  else\n+    {\n+      mem_addr = canon_rtx (mem_addr);\n+      mem_mode = GET_MODE (mem);\n+    }\n \n-  if ((ret = memrefs_conflict_p (SIZE_FOR_MODE (mem), mem_addr,\n+  if ((ret = memrefs_conflict_p (GET_MODE_SIZE (mem_mode), mem_addr,\n \t\t\t\t SIZE_FOR_MODE (x), x_addr, 0)) != -1)\n     return ret;\n \n@@ -2629,15 +2643,29 @@ write_dependence_p (const_rtx mem, const_rtx x, int writep)\n int\n anti_dependence (const_rtx mem, const_rtx x)\n {\n-  return write_dependence_p (mem, x, /*writep=*/0);\n+  return write_dependence_p (mem, VOIDmode, NULL_RTX, x,\n+\t\t\t     /*mem_canonicalized=*/false, /*writep=*/false);\n+}\n+\n+/* Likewise, but we already have a canonicalized MEM_ADDR for MEM.\n+   Also, consider MEM in MEM_MODE (which might be from an enclosing\n+   STRICT_LOW_PART / ZERO_EXTRACT).  */\n+\n+int\n+canon_anti_dependence (const_rtx mem, enum machine_mode mem_mode,\n+\t\t       rtx mem_addr, const_rtx x)\n+{\n+  return write_dependence_p (mem, mem_mode, mem_addr, x,\n+\t\t\t     /*mem_canonicalized=*/true, /*writep=*/false);\n }\n \n /* Output dependence: X is written after store in MEM takes place.  */\n \n int\n output_dependence (const_rtx mem, const_rtx x)\n {\n-  return write_dependence_p (mem, x, /*writep=*/1);\n+  return write_dependence_p (mem, VOIDmode, NULL_RTX, x,\n+\t\t\t     /*mem_canonicalized=*/false, /*writep=*/true);\n }\n \f\n "}, {"sha": "7e6c5184a85b25631d3c4fbf0b56f2f326a1059b", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -1824,7 +1824,7 @@ flush_hash_table (void)\n       }\n }\n \f\n-/* Function called for each rtx to check whether true dependence exist.  */\n+/* Function called for each rtx to check whether an anti dependence exist.  */\n struct check_dependence_data\n {\n   enum machine_mode mode;\n@@ -1837,7 +1837,7 @@ check_dependence (rtx *x, void *data)\n {\n   struct check_dependence_data *d = (struct check_dependence_data *) data;\n   if (*x && MEM_P (*x))\n-    return canon_true_dependence (d->exp, d->mode, d->addr, *x, NULL_RTX);\n+    return canon_anti_dependence (d->exp, d->mode, d->addr, *x);\n   else\n     return 0;\n }"}, {"sha": "2c73535c12b4cd12a8002d89a84a8a2db508719c", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -2263,8 +2263,8 @@ cselib_invalidate_mem (rtx mem_rtx)\n \t      continue;\n \t    }\n \t  if (num_mems < PARAM_VALUE (PARAM_MAX_CSELIB_MEMORY_LOCATIONS)\n-\t      && ! canon_true_dependence (mem_rtx, GET_MODE (mem_rtx),\n-\t\t\t\t\t  mem_addr, x, NULL_RTX))\n+\t      && ! canon_anti_dependence (mem_rtx, GET_MODE (mem_rtx),\n+\t\t\t\t\t  mem_addr, x))\n \t    {\n \t      has_mem = true;\n \t      num_mems++;"}, {"sha": "a489aaca7542f875014f7a51504b62c4a0bdd77e", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -2705,6 +2705,8 @@ extern int canon_true_dependence (const_rtx, enum machine_mode, rtx,\n \t\t\t\t  const_rtx, rtx);\n extern int read_dependence (const_rtx, const_rtx);\n extern int anti_dependence (const_rtx, const_rtx);\n+extern int canon_anti_dependence (const_rtx, enum machine_mode, rtx,\n+\t\t\t\t  const_rtx);\n extern int output_dependence (const_rtx, const_rtx);\n extern int may_alias_p (const_rtx, const_rtx);\n extern void init_alias_target (void);"}, {"sha": "da5bb5b16c2a1b764d2449b5c0ae820103d708dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -1,3 +1,10 @@\n+2013-06-16  Joern Rennecke <joern.rennecke@embecosm.com>\n+\n+\tPR rtl-optimization/57425\n+\tPR rtl-optimization/57569\n+\t* gcc.dg/torture/pr57425-1.c, gcc.dg/torture/pr57425-2.c: New files.\n+\t* gcc.dg/torture/pr57425-3.c, gcc.dg/torture/pr57569.c: Likewise.\n+\n 2013-06-15  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/49074"}, {"sha": "8ca85cafe6de0b72841cff63abc4b0f253b4e7a1", "filename": "gcc/testsuite/gcc.dg/torture/pr57425-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-1.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+extern void abort (void) __attribute__((noreturn));\n+\n+union setconflict\n+{\n+  int a[20];\n+  long b[10];\n+};\n+\n+int\n+main ()\n+{\n+  int sum = 0;\n+  {\n+    union setconflict a;\n+    int *c;\n+    c = a.a;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 0;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+  {\n+    union setconflict a;\n+    long *c;\n+    c = a.b;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 1;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+\n+  if (sum != 1)\n+    abort();\n+  return 0;\n+}"}, {"sha": "ccb546e0ee78708e4ed7441cfa067e66c294d3a3", "filename": "gcc/testsuite/gcc.dg/torture/pr57425-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-2.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+extern void abort (void) __attribute__((noreturn));\n+\n+int\n+main ()\n+{\n+  int sum = 0;\n+  {\n+    int a[20];\n+    int *c;\n+    c = a;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 0;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+  {\n+    long b[10];\n+    long *c;\n+    c = b;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 1;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+\n+  if (sum != 1)\n+    abort();\n+  return 0;\n+}"}, {"sha": "8e0c7fe2dec05d0fc72b32de08c1a5dc3055edbe", "filename": "gcc/testsuite/gcc.dg/torture/pr57425-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57425-3.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+extern void abort (void) __attribute__((noreturn));\n+\n+int\n+main ()\n+{\n+  int sum = 0;\n+  {\n+    long a[20];\n+    long *c;\n+    c = a;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 0;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+  {\n+    long long b[10];\n+    long long *c;\n+    c = b;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    *c = 1;\n+    asm (\"\": \"=r\" (c):\"0\" (c));\n+    sum += *c;\n+  }\n+\n+  if (sum != 1)\n+    abort();\n+  return 0;\n+}"}, {"sha": "f036d559d6c7b1c6af0f0e78960d6577fc67f7a7", "filename": "gcc/testsuite/gcc.dg/torture/pr57569.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57569.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57569.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57569.c?ref=393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+extern void abort (void) __attribute__((noreturn));\n+\n+struct S { int f0; } a; \n+\n+int b, e, *d = &b, f;\n+\n+void \n+fn1 ()\n+{\n+  int **g[9][6];\n+  int ***h = &g[6][3];\n+  for (; e < 9; e++) {\n+    f = 0;\n+    for (; f < 6; f++)\n+      g[e][f] = &d;\n+  }\n+  ***h = 0;\n+}\n+\n+void\n+fn2 ()\n+{\n+  fn1 ();\n+  struct S c[4][10] = {};\n+  a = c[3][9];\n+}\n+\n+int\n+main ()\n+{\n+  fn2 ();\n+  if (a.f0 != 0)\n+    abort ();\n+  return 0;\n+}"}]}