{"sha": "343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzYjJlZmNkNzY2ZDdkNTYwMTZjMGFlODViNmViMTNkOTU5N2I5ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-02T17:00:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-02T17:00:09Z"}, "message": "re PR tree-optimization/46149 (26_numerics/valarray/27867.cc FAILs with -O2 -fno-tree-sra)\n\n2010-11-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46149\n\t* tree-ssa-structalias.c (get_constraint_for_1): Properly handle\n\tnon-indirect MEM_REF variants.\n\n\t* g++.dg/torture/pr46149.C: New testcase.\n\nFrom-SVN: r166204", "tree": {"sha": "118e06f401c39f90636e55426945c6793d29860a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118e06f401c39f90636e55426945c6793d29860a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f26aa48e06db4d1e6724bfbc52ba466965719668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26aa48e06db4d1e6724bfbc52ba466965719668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26aa48e06db4d1e6724bfbc52ba466965719668"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "796653212aedd5d39897249dd10e09d5d4ac3560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "patch": "@@ -1,3 +1,9 @@\n+2010-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46149\n+\t* tree-ssa-structalias.c (get_constraint_for_1): Properly handle\n+\tnon-indirect MEM_REF variants.\n+\n 2010-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46216"}, {"sha": "d7135d88c2dae8bd7834e5f38efbbea291c75ada", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "patch": "@@ -1,3 +1,8 @@\n+2010-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46149\n+\t* g++.dg/torture/pr46149.C: New testcase.\n+\n 2010-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46216"}, {"sha": "bdc3d77041211df88f28402c3c4d16556f756794", "filename": "gcc/testsuite/g++.dg/torture/pr46149.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46149.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46149.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46149.C?ref=343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do run }\n+// { dg-options \"-fno-tree-sra\" }\n+\n+struct S\n+{\n+  S ():p ((char *) __builtin_calloc (1, 1))\n+  {\n+  }\n+  char *p;\n+};\n+\n+template < class T > struct A\n+{\n+  A (const S & __m1, const T & __m2):m1 (__m1), m2 (__m2)\n+  {\n+  }\n+  const S & m1;\n+  const T & m2;\n+};\n+\n+struct B:A < S >\n+{\n+  B (const S & __v):A < S > (__v, __v)\n+  {\n+  }\n+};\n+\n+struct C:A < B >\n+{\n+  C (const S & __e1, const B & __e2):A < B > (__e1, __e2)\n+  {\n+  }\n+};\n+\n+struct D\n+{\n+  D (const C & __c):c (__c)\n+  {\n+  }\n+  const C c;\n+};\n+\n+int\n+main ()\n+{\n+  S s;\n+  B b (s);\n+  C c (s, b);\n+  D d (c);\n+  return d.c.m2.m2.p[0];\n+}"}, {"sha": "315bef6f0da077eace8bc0e3f1414adb30e1d99e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b2efcd766d7d56016c0ae85b6eb13d9597b9e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=343b2efcd766d7d56016c0ae85b6eb13d9597b9e", "patch": "@@ -3339,9 +3339,41 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t  {\n \t  case MEM_REF:\n \t    {\n+\t      struct constraint_expr *c;\n+\t      varinfo_t vi, curr;\n \t      tree off = double_int_to_tree (sizetype, mem_ref_offset (t));\n \t      get_constraint_for_ptr_offset (TREE_OPERAND (t, 0), off, results);\n \t      do_deref (results);\n+\n+\t      /* If we are not taking the address then make sure to process\n+\t\t all subvariables we might access.  */\n+\t      c = VEC_last (ce_s, *results);\n+\t      if (address_p\n+\t\t  || c->type != SCALAR)\n+\t\treturn;\n+\n+\t      vi = get_varinfo (c->var);\n+\t      curr = vi->next;\n+\t      if (!vi->is_full_var\n+\t\t  && curr)\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT size;\n+\t\t  if (host_integerp (TYPE_SIZE (TREE_TYPE (t)), 1))\n+\t\t    size = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (t)));\n+\t\t  else\n+\t\t    size = -1;\n+\t\t  for (; curr; curr = curr->next)\n+\t\t    {\n+\t\t      if (curr->offset - vi->offset < size)\n+\t\t\t{\n+\t\t\t  struct constraint_expr cs = *c;\n+\t\t\t  cs.var = curr->id;\n+\t\t\t  VEC_safe_push (ce_s, heap, *results, &cs);\n+\t\t\t}\n+\t\t      else\n+\t\t\tbreak;\n+\t\t    }\n+\t\t}\n \t      return;\n \t    }\n \t  case ARRAY_REF:"}]}