{"sha": "ea60341e32df03bcef5985ec908b1f38e9a7892a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2MDM0MWUzMmRmMDNiY2VmNTk4NWVjOTA4YjFmMzhlOWE3ODkyYQ==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2006-06-01T10:30:51Z"}, "committer": {"name": "Mark Shinwell", "email": "shinwell@gcc.gnu.org", "date": "2006-06-01T10:30:51Z"}, "message": "Patch to provide pex_run_in_environment.\n\n\t* include/libiberty.h: Declare pex_run_in_environment.\n\nlibiberty:\n\n\t* pex-common.c: New function pex_run_in_environment.\n\t* pex-common.h: Add environment parameter to exec_child.\n\t* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.\n\t* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.\n\t(pex_djgpp_exec_child): Pass environment to child process.\n\t* pex-unix.c: Add environment parameter to pex_unix_exec_child.\n\t(pex_unix_exec_child): Pass environment to child process.\n\t* pex-win32.c: Add environment parameter to pex_win32_exec_child.\n\tNew function env_compare for comparing VAR=VALUE pairs.\n\t(win32_spawn): Assemble environment block and pass to CreateProcess.\n\t(spawn_script): Pass environment through to win32_spawn.\n\t(pex_win32_exec_child): Pass environment through to spawn_script and\n\twin32_spawn.\n\t* functions.texi: Regenerate.\n\t* pexecute.txh: Document pex_run_in_environment.\n\nFrom-SVN: r114302", "tree": {"sha": "65214f176ae027d313b5e5f7a60900e75c43d3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65214f176ae027d313b5e5f7a60900e75c43d3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea60341e32df03bcef5985ec908b1f38e9a7892a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea60341e32df03bcef5985ec908b1f38e9a7892a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea60341e32df03bcef5985ec908b1f38e9a7892a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea60341e32df03bcef5985ec908b1f38e9a7892a/comments", "author": null, "committer": null, "parents": [{"sha": "7d6d782d02ed4320a81e7e1d9caf526d583aae0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6d782d02ed4320a81e7e1d9caf526d583aae0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6d782d02ed4320a81e7e1d9caf526d583aae0a"}], "stats": {"total": 258, "additions": 222, "deletions": 36}, "files": [{"sha": "31fb5eb3c6bbda4495c806f287a1507fc8e64685", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -1,3 +1,7 @@\n+2006-06-01  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* include/libiberty.h: Declare pex_run_in_environment.\n+\n 2006-05-31  Asher Langton  <langton2@llnl.gov>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "1328d3eb14c0340cb3641d73828b1b529a928e99", "filename": "include/libiberty.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -448,6 +448,23 @@ extern const char *pex_run (struct pex_obj *obj, int flags,\n \t\t\t    const char *outname, const char *errname,\n \t\t\t    int *err);\n \n+/* As for pex_run (), but takes an extra parameter to enable the\n+   environment for the child process to be specified.\n+\n+   ENV\t\tThe environment for the child process, specified as\n+\t\tan array of character pointers.  Each element of the\n+\t\tarray should point to a string of the form VAR=VALUE,\n+                with the exception of the last element which must be\n+                a null pointer.\n+*/\n+\n+extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,\n+\t\t\t                   const char *executable,\n+                                           char * const *argv,\n+                                           char * const *env,\n+              \t          \t\t   const char *outname,\n+\t\t\t\t\t   const char *errname, int *err);\n+\n /* Return a `FILE' pointer FP for the standard input of the first\n    program in the pipeline; FP is opened for writing.  You must have\n    passed `PEX_USE_PIPES' to the `pex_init' call that returned OBJ."}, {"sha": "e2899c0ae09e79284a44f1ed3c67e3521b429f17", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -1,3 +1,21 @@\n+2006-06-01  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* pex-common.c: New function pex_run_in_environment.\n+\t* pex-common.h: Add environment parameter to exec_child.\n+\t* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.\n+\t* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.\n+\t(pex_djgpp_exec_child): Pass environment to child process.\n+\t* pex-unix.c: Add environment parameter to pex_unix_exec_child.\n+\t(pex_unix_exec_child): Pass environment to child process.\n+\t* pex-win32.c: Add environment parameter to pex_win32_exec_child.\n+\tNew function env_compare for comparing VAR=VALUE pairs.\n+\t(win32_spawn): Assemble environment block and pass to CreateProcess.\n+\t(spawn_script): Pass environment through to win32_spawn.\n+\t(pex_win32_exec_child): Pass environment through to spawn_script and\n+\twin32_spawn.\n+\t* functions.texi: Regenerate.\n+\t* pexecute.txh: Document pex_run_in_environment.\n+\n 2006-05-28  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* mkstemps.c: Open temporary files in binary mode."}, {"sha": "68c064817db771192c5592c7724c39ccfbfc3e97", "filename": "libiberty/functions.texi", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -668,14 +668,14 @@ reading and writing.\n \n @end deftypefn\n \n-@c pexecute.txh:231\n+@c pexecute.txh:244\n @deftypefn Extension void pex_free (struct pex_obj @var{obj})\n \n Clean up and free all data associated with @var{obj}.\n \n @end deftypefn\n \n-@c pexecute.txh:206\n+@c pexecute.txh:219\n @deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}.\n@@ -685,7 +685,7 @@ to @code{pex_run}.  Returns 0 on error, 1 on success.\n \n @end deftypefn\n \n-@c pexecute.txh:215\n+@c pexecute.txh:228\n @deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, int @var{count}, struct pex_time *@var{vector})\n \n Returns the process execution times of all programs run using\n@@ -734,7 +734,7 @@ temporary files; it may be @code{NULL} to use a randomly chosen name.\n \n @end deftypefn\n \n-@c pexecute.txh:133\n+@c pexecute.txh:146\n @deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{in_name})\n \n Return a stream for a temporary file to pass to the first program in\n@@ -752,7 +752,7 @@ binary mode; otherwise, open it in the default mode.  Including\n @code{PEX_BINARY_OUTPUT} in @var{flags} has no effect on Unix.\n @end deftypefn\n \n-@c pexecute.txh:150\n+@c pexecute.txh:163\n @deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, int @var{binary})\n \n Return a stream @var{fp} for a pipe connected to the standard input of\n@@ -797,7 +797,7 @@ the output pipe is you, but you are blocked on the input pipe.\n \n @end deftypefn\n \n-@c pexecute.txh:237\n+@c pexecute.txh:250\n @deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n \n An interface to permit the easy execution of a\n@@ -810,7 +810,7 @@ be set to the exit status of the program.\n \n @end deftypefn\n \n-@c pexecute.txh:194\n+@c pexecute.txh:207\n @deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n@@ -924,7 +924,21 @@ value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n-@c pexecute.txh:249\n+@c pexecute.txh:133\n+@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, char * const *@var{env}, int @var{env_size}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+\n+Execute one program in a pipeline, permitting the environment for the\n+program to be specified.  Behaviour and parameters not listed below are\n+as for @code{pex_run}.\n+\n+@var{env} is the environment for the child process, specified as an array of\n+character pointers.  Each element of the array should point to a string of the\n+form @code{VAR=VALUE}, with the exception of the last element that must be\n+@code{NULL}.\n+\n+@end deftypefn\n+\n+@c pexecute.txh:262\n @deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int flags)\n \n This is the old interface to execute one or more programs.  It is\n@@ -952,7 +966,7 @@ name is unset/removed.\n \n @end deftypefn\n \n-@c pexecute.txh:257\n+@c pexecute.txh:270\n @deftypefn Extension int pwait (int @var{pid}, int *@var{status}, int @var{flags})\n \n Another part of the old execution interface."}, {"sha": "3daa638d402b4521a2d416f4a5ea76a85cc1c9ef", "filename": "libiberty/pex-common.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.c?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -142,12 +142,15 @@ temp_file (struct pex_obj *obj, int flags, char *name)\n   return name;\n }\n \n-/* Run a program.  */\n+\n+/* As for pex_run (), but permits the environment for the child process\n+   to be specified. */\n \n const char *\n-pex_run (struct pex_obj *obj, int flags, const char *executable,\n-\t char * const * argv, const char *orig_outname, const char *errname,\n-\t int *err)\n+pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n+       \t                char * const * argv, char * const * env,\n+                        const char *orig_outname, const char *errname,\n+                  \tint *err)\n {\n   const char *errmsg;\n   int in, out, errdes;\n@@ -296,8 +299,8 @@ pex_run (struct pex_obj *obj, int flags, const char *executable,\n \n   /* Run the program.  */\n \n-  pid = obj->funcs->exec_child (obj, flags, executable, argv, in, out, errdes,\n-\t\t\t\t&errmsg, err);\n+  pid = obj->funcs->exec_child (obj, flags, executable, argv, env,\n+                                in, out, errdes, &errmsg, err);\n   if (pid < 0)\n     goto error_exit;\n \n@@ -319,6 +322,17 @@ pex_run (struct pex_obj *obj, int flags, const char *executable,\n   return errmsg;\n }\n \n+/* Run a program.  */\n+\n+const char *\n+pex_run (struct pex_obj *obj, int flags, const char *executable,\n+       \t char * const * argv, const char *orig_outname, const char *errname,\n+         int *err)\n+{\n+  return pex_run_in_environment (obj, flags, executable, argv, NULL,\n+\t\t\t\t orig_outname, errname, err);\n+}\n+\n /* Return a FILE pointer for a temporary file to fill with input for\n    the pipeline.  */\n FILE *"}, {"sha": "520f26a260df5702a4c0d8bb29573fedae4ff3c1", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -104,6 +104,7 @@ struct pex_funcs\n      error and set *ERRMSG and *ERR.  */\n   long (*exec_child) (struct pex_obj *, int /* flags */,\n                       const char */* executable */, char * const * /* argv */,\n+                      char * const * /* env */,\n                       int /* in */, int /* out */, int /* errdes */,\n \t\t      const char **/* errmsg */, int */* err */);\n   /* Close a descriptor.  Return 0 on success, -1 on error.  */"}, {"sha": "acaa4c43fdbbe555f7d026c7993a4dc7263afe39", "filename": "libiberty/pex-djgpp.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-djgpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-djgpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-djgpp.c?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -45,7 +45,8 @@ extern int errno;\n static int pex_djgpp_open_read (struct pex_obj *, const char *, int);\n static int pex_djgpp_open_write (struct pex_obj *, const char *, int);\n static long pex_djgpp_exec_child (struct pex_obj *, int, const char *,\n-\t\t\t\t  char * const *, int, int, int,\n+\t\t\t\t  char * const *, char * const *,\n+                                  int, int, int,\n \t\t\t\t  const char **, int *);\n static int pex_djgpp_close (struct pex_obj *, int);\n static int pex_djgpp_wait (struct pex_obj *, long, int *, struct pex_time *,\n@@ -111,7 +112,8 @@ pex_djgpp_close (struct pex_obj *obj ATTRIBUTE_UNUSED, int fd)\n \n static long\n pex_djgpp_exec_child (struct pex_obj *obj, int flags, const char *executable,\n-\t\t      char * const * argv, int in, int out, int errdes,\n+\t\t      char * const * argv, char * const * env,\n+                      int in, int out, int errdes,\n \t\t      const char **errmsg, int *err)\n {\n   int org_in, org_out, org_errdes;\n@@ -196,8 +198,12 @@ pex_djgpp_exec_child (struct pex_obj *obj, int flags, const char *executable,\n \t}\n     }\n \n-  status = (((flags & PEX_SEARCH) != 0 ? spawnvp : spawnv)\n-\t    (P_WAIT, executable, (char * const *) argv));\n+  if (env)\n+    status = (((flags & PEX_SEARCH) != 0 ? spawnvpe : spawnve)\n+\t      (P_WAIT, executable, argv, env));\n+  else\n+    status = (((flags & PEX_SEARCH) != 0 ? spawnvp : spawnv)\n+  \t      (P_WAIT, executable, argv));\n \n   if (status == -1)\n     {"}, {"sha": "bcad93dbe263b3957dd2121d954fd2a5ac47e82e", "filename": "libiberty/pex-msdos.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-msdos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-msdos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-msdos.c?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -55,8 +55,8 @@ static int pex_msdos_open (struct pex_obj *, const char *, int);\n static int pex_msdos_open (struct pex_obj *, const char *, int);\n static int pex_msdos_fdindex (struct pex_msdos *, int);\n static long pex_msdos_exec_child (struct pex_obj *, int, const char *,\n-\t\t\t\t  char * const *, int, int, int,\n-\t\t\t\t  const char **, int *);\n+\t\t\t\t  char * const *, char * const *,\n+                                  int, int, int, const char **, int *);\n static int pex_msdos_close (struct pex_obj *, int);\n static int pex_msdos_wait (struct pex_obj *, long, int *, struct pex_time *,\n \t\t\t   int, const char **, int *);\n@@ -153,7 +153,7 @@ pex_msdos_close (struct pex_obj *obj, int fd)\n \n static long\n pex_msdos_exec_child (struct pex_obj *obj, int flags, const char *executable,\n-\t\t      char * const * argv, int in, int out,\n+\t\t      char * const * argv, char * const * env, int in, int out,\n \t\t      int errdes ATTRIBUTE_UNUSED, const char **errmsg,\n \t\t      int *err)\n {"}, {"sha": "91619af1e2cbc7404bdf868a9d88d7cfaa0ce864", "filename": "libiberty/pex-unix.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-unix.c?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -270,8 +270,8 @@ static void pex_child_error (struct pex_obj *, const char *, const char *, int)\n static int pex_unix_open_read (struct pex_obj *, const char *, int);\n static int pex_unix_open_write (struct pex_obj *, const char *, int);\n static long pex_unix_exec_child (struct pex_obj *, int, const char *,\n-\t\t\t\t char * const *, int, int, int,\n-\t\t\t\t const char **, int *);\n+\t\t\t\t char * const *, char * const *,\n+                                 int, int, int, const char **, int *);\n static int pex_unix_close (struct pex_obj *, int);\n static int pex_unix_wait (struct pex_obj *, long, int *, struct pex_time *,\n \t\t\t  int, const char **, int *);\n@@ -352,12 +352,16 @@ pex_child_error (struct pex_obj *obj, const char *executable,\n \n /* Execute a child.  */\n \n+extern char **environ;\n+\n static long\n pex_unix_exec_child (struct pex_obj *obj, int flags, const char *executable,\n-\t\t     char * const * argv, int in, int out, int errdes,\n+\t\t     char * const * argv, char * const * env,\n+                     int in, int out, int errdes,\n \t\t     const char **errmsg, int *err)\n {\n   pid_t pid;\n+\n   /* We declare these to be volatile to avoid warnings from gcc about\n      them being clobbered by vfork.  */\n   volatile int sleep_interval;\n@@ -409,6 +413,10 @@ pex_unix_exec_child (struct pex_obj *obj, int flags, const char *executable,\n \t  if (dup2 (STDOUT_FILE_NO, STDERR_FILE_NO) < 0)\n \t    pex_child_error (obj, executable, \"dup2\", errno);\n \t}\n+\n+      if (env)\n+        environ = env;\n+\n       if ((flags & PEX_SEARCH) != 0)\n \t{\n \t  execvp (executable, argv);"}, {"sha": "45725457b6af76ffb5060c93a13300a1114353b4", "filename": "libiberty/pex-win32.c", "status": "modified", "additions": 102, "deletions": 11, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpex-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-win32.c?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -36,12 +36,14 @@ Boston, MA 02110-1301, USA.  */\n #include <sys/wait.h>\n #endif\n \n+#include <assert.h>\n #include <process.h>\n #include <io.h>\n #include <fcntl.h>\n #include <signal.h>\n #include <sys/stat.h>\n #include <errno.h>\n+#include <ctype.h>\n \n /* mingw32 headers may not define the following.  */\n \n@@ -59,6 +61,8 @@ Boston, MA 02110-1301, USA.  */\n #define MINGW_NAME \"Minimalist GNU for Windows\"\n #define MINGW_NAME_LEN (sizeof(MINGW_NAME) - 1)\n \n+extern char *stpcpy (char *dst, const char *src);\n+\n /* Ensure that the executable pathname uses Win32 backslashes. This\n    is not necessary on NT, but on W9x, forward slashes causes\n    failure of spawn* and exec* functions (and probably any function\n@@ -76,7 +80,8 @@ backslashify (char *s)\n static int pex_win32_open_read (struct pex_obj *, const char *, int);\n static int pex_win32_open_write (struct pex_obj *, const char *, int);\n static long pex_win32_exec_child (struct pex_obj *, int, const char *,\n-\t\t\t\t  char * const *, int, int, int,\n+\t\t\t\t  char * const *, char * const *,\n+                                  int, int, int,\n \t\t\t\t  const char **, int *);\n static int pex_win32_close (struct pex_obj *, int);\n static int pex_win32_wait (struct pex_obj *, long, int *,\n@@ -478,22 +483,96 @@ find_executable (const char *program, BOOL search)\n   return full_executable;\n }\n \n-/* Low-level process creation function.  */\n+/* Low-level process creation function and helper.  */\n+\n+static int\n+env_compare (const void *a_ptr, const void *b_ptr)\n+{\n+  const char *a;\n+  const char *b;\n+  unsigned char c1;\n+  unsigned char c2;\n+\n+  a = *(const char **) a_ptr;\n+  b = *(const char **) b_ptr;\n+\n+  /* a and b will be of the form: VAR=VALUE\n+     We compare only the variable name part here using a case-insensitive\n+     comparison algorithm.  It might appear that in fact strcasecmp () can\n+     take the place of this whole function, and indeed it could, save for\n+     the fact that it would fail in cases such as comparing A1=foo and\n+     A=bar (because 1 is less than = in the ASCII character set).\n+     (Environment variables containing no numbers would work in such a\n+     scenario.)  */\n+\n+  do\n+    {\n+      c1 = (unsigned char) tolower (*a++);\n+      c2 = (unsigned char) tolower (*b++);\n+\n+      if (c1 == '=')\n+        c1 = '\\0';\n+\n+      if (c2 == '=')\n+        c2 = '\\0';\n+    }\n+  while (c1 == c2 && c1 != '\\0');\n+\n+  return c1 - c2;\n+}\n \n static long\n win32_spawn (const char *executable,\n \t     BOOL search,\n \t     char *const *argv,\n+             char *const *env, /* array of strings of the form: VAR=VALUE */\n \t     DWORD dwCreationFlags,\n \t     LPSTARTUPINFO si,\n \t     LPPROCESS_INFORMATION pi)\n {\n   char *full_executable;\n   char *cmdline;\n+  char **env_copy;\n+  char *env_block = NULL;\n \n   full_executable = NULL;\n   cmdline = NULL;\n \n+  if (env)\n+    {\n+      int env_size;\n+\n+      /* Count the number of environment bindings supplied.  */\n+      for (env_size = 0; env[env_size]; env_size++)\n+        continue;\n+    \n+      /* Assemble an environment block, if required.  This consists of\n+         VAR=VALUE strings juxtaposed (with one null character between each\n+         pair) and an additional null at the end.  */\n+      if (env_size > 0)\n+        {\n+          int var;\n+          int total_size = 1; /* 1 is for the final null.  */\n+          char *bufptr;\n+    \n+          /* Windows needs the members of the block to be sorted by variable\n+             name.  */\n+          env_copy = alloca (sizeof (char *) * env_size);\n+          memcpy (env_copy, env, sizeof (char *) * env_size);\n+          qsort (env_copy, env_size, sizeof (char *), env_compare);\n+    \n+          for (var = 0; var < env_size; var++)\n+            total_size += strlen (env[var]) + 1;\n+    \n+          env_block = malloc (total_size);\n+          bufptr = env_block;\n+          for (var = 0; var < env_size; var++)\n+            bufptr = stpcpy (bufptr, env_copy[var]) + 1;\n+    \n+          *bufptr = '\\0';\n+        }\n+    }\n+\n   full_executable = find_executable (executable, search);\n   if (!full_executable)\n     goto error;\n@@ -507,31 +586,41 @@ win32_spawn (const char *executable,\n \t\t      /*lpThreadAttributes=*/NULL,\n \t\t      /*bInheritHandles=*/TRUE,\n \t\t      dwCreationFlags,\n-\t\t      /*lpEnvironment=*/NULL,\n+\t\t      (LPVOID) env_block,\n \t\t      /*lpCurrentDirectory=*/NULL,\n \t\t      si,\n \t\t      pi))\n     {\n+      if (env_block)\n+        free (env_block);\n+\n       free (full_executable);\n+\n       return -1;\n     }\n \n   /* Clean up.  */\n   CloseHandle (pi->hThread);\n   free (full_executable);\n+  if (env_block)\n+    free (env_block);\n \n   return (long) pi->hProcess;\n \n  error:\n+  if (env_block)\n+    free (env_block);\n   if (cmdline)\n     free (cmdline);\n   if (full_executable)\n     free (full_executable);\n+\n   return -1;\n }\n \n static long\n spawn_script (const char *executable, char *const *argv,\n+              char* const *env,\n \t      DWORD dwCreationFlags,\n \t      LPSTARTUPINFO si,\n \t      LPPROCESS_INFORMATION pi)\n@@ -566,20 +655,20 @@ spawn_script (const char *executable, char *const *argv,\n \t      executable = strrchr (executable1, '\\\\') + 1;\n \t      if (!executable)\n \t\texecutable = executable1;\n-\t      pid = win32_spawn (executable, TRUE, argv, \n+\t      pid = win32_spawn (executable, TRUE, argv, env,\n \t\t\t\t dwCreationFlags, si, pi);\n #else\n \t      if (strchr (executable1, '\\\\') == NULL)\n-\t\tpid = win32_spawn (executable1, TRUE, argv, \n+\t\tpid = win32_spawn (executable1, TRUE, argv, env,\n \t\t\t\t   dwCreationFlags, si, pi);\n \t      else if (executable1[0] != '\\\\')\n-\t\tpid = win32_spawn (executable1, FALSE, argv, \n+\t\tpid = win32_spawn (executable1, FALSE, argv, env,\n \t\t\t\t   dwCreationFlags, si, pi);\n \t      else\n \t\t{\n \t\t  const char *newex = mingw_rootify (executable1);\n \t\t  *avhere = newex;\n-\t\t  pid = win32_spawn (newex, FALSE, argv, \n+\t\t  pid = win32_spawn (newex, FALSE, argv, env,\n \t\t\t\t     dwCreationFlags, si, pi);\n \t\t  if (executable1 != newex)\n \t\t    free ((char *) newex);\n@@ -589,7 +678,7 @@ spawn_script (const char *executable, char *const *argv,\n \t\t      if (newex != executable1)\n \t\t\t{\n \t\t\t  *avhere = newex;\n-\t\t\t  pid = win32_spawn (newex, FALSE, argv, \n+\t\t\t  pid = win32_spawn (newex, FALSE, argv, env,\n \t\t\t\t\t     dwCreationFlags, si, pi);\n \t\t\t  free ((char *) newex);\n \t\t\t}\n@@ -609,6 +698,7 @@ spawn_script (const char *executable, char *const *argv,\n static long\n pex_win32_exec_child (struct pex_obj *obj ATTRIBUTE_UNUSED, int flags,\n \t\t      const char *executable, char * const * argv,\n+                      char* const* env,\n \t\t      int in, int out, int errdes, const char **errmsg,\n \t\t      int *err)\n {\n@@ -686,9 +776,10 @@ pex_win32_exec_child (struct pex_obj *obj ATTRIBUTE_UNUSED, int flags,\n \n   /* Create the child process.  */  \n   pid = win32_spawn (executable, (flags & PEX_SEARCH) != 0,\n-\t\t     argv, dwCreationFlags, &si, &pi);\n+\t\t     argv, env, dwCreationFlags, &si, &pi);\n   if (pid == -1)\n-    pid = spawn_script (executable, argv, dwCreationFlags, &si, &pi);\n+    pid = spawn_script (executable, argv, env, dwCreationFlags,\n+                        &si, &pi);\n   if (pid == -1)\n     {\n       *err = ENOENT;\n@@ -789,7 +880,7 @@ main (int argc ATTRIBUTE_UNUSED, char **argv)\n   char const *errmsg;\n   int err;\n   argv++;\n-  printf (\"%ld\\n\", pex_win32_exec_child (NULL, PEX_SEARCH, argv[0], argv, 0, 1, 2, &errmsg, &err));\n+  printf (\"%ld\\n\", pex_win32_exec_child (NULL, PEX_SEARCH, argv[0], argv, NULL, 0, 0, 1, 2, &errmsg, &err));\n   exit (0);\n }\n #endif"}, {"sha": "d85ee59b0081aca61dc8ecc3f3f07aad01d2077f", "filename": "libiberty/pexecute.txh", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpexecute.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60341e32df03bcef5985ec908b1f38e9a7892a/libiberty%2Fpexecute.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.txh?ref=ea60341e32df03bcef5985ec908b1f38e9a7892a", "patch": "@@ -130,6 +130,19 @@ value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n+@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, char * const *@var{env}, int @var{env_size}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+\n+Execute one program in a pipeline, permitting the environment for the\n+program to be specified.  Behaviour and parameters not listed below are\n+as for @code{pex_run}.\n+\n+@var{env} is the environment for the child process, specified as an array of\n+character pointers.  Each element of the array should point to a string of the\n+form @code{VAR=VALUE}, with the exception of the last element that must be\n+@code{NULL}.\n+\n+@end deftypefn\n+\n @deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{in_name})\n \n Return a stream for a temporary file to pass to the first program in"}]}