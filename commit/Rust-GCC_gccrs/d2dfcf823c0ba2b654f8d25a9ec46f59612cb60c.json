{"sha": "d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkZmNmODIzYzBiYTJiNjU0ZjhkMjVhOWVjNDZmNTk2MTJjYjYwYw==", "commit": {"author": {"name": "Juraj Or\u0161uli\u0107", "email": "juraj.orsulic@fer.hr", "date": "2018-01-09T18:49:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-09T18:49:57Z"}, "message": "PR libstdc++/59253 Improve pretty printers for smart pointers\n\n\tPR libstdc++/59253 (partial)\n\t* python/libstdcxx/v6/printers.py (SmartPtrIterator): Common iterator\n\ttype for pointer stored by shared_ptr, weak_ptr and unique_ptr.\n\t(SharedPointerPrinter, UniquePointerPrinter): Treat stored values as\n\tchildren.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Update expected output\n\tof unique_ptr printer.\n\t* testsuite/libstdc++-prettyprinters/shared_ptr.cc: Update expected\n\toutput of shared_ptr printer.\n\nFrom-SVN: r256390", "tree": {"sha": "98dae7d9113fdd396fe5b7681fa6fc3c1e97b140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98dae7d9113fdd396fe5b7681fa6fc3c1e97b140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/comments", "author": {"login": "ojura", "id": 9062353, "node_id": "MDQ6VXNlcjkwNjIzNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/9062353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojura", "html_url": "https://github.com/ojura", "followers_url": "https://api.github.com/users/ojura/followers", "following_url": "https://api.github.com/users/ojura/following{/other_user}", "gists_url": "https://api.github.com/users/ojura/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojura/subscriptions", "organizations_url": "https://api.github.com/users/ojura/orgs", "repos_url": "https://api.github.com/users/ojura/repos", "events_url": "https://api.github.com/users/ojura/events{/privacy}", "received_events_url": "https://api.github.com/users/ojura/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eac10b39f164c3010fe8fee2fed3269fa832967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eac10b39f164c3010fe8fee2fed3269fa832967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eac10b39f164c3010fe8fee2fed3269fa832967"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "df96fcb394406c0db77347ea893725ef505c2925", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "patch": "@@ -1,3 +1,15 @@\n+2018-01-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59253 (partial)\n+\t* python/libstdcxx/v6/printers.py (SmartPtrIterator): Common iterator\n+\ttype for pointer stored by shared_ptr, weak_ptr and unique_ptr.\n+\t(SharedPointerPrinter, UniquePointerPrinter): Treat stored values as\n+\tchildren.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Update expected output\n+\tof unique_ptr printer.\n+\t* testsuite/libstdc++-prettyprinters/shared_ptr.cc: Update expected\n+\toutput of shared_ptr printer.\n+\n 2018-01-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/83626"}, {"sha": "e9f7359d63fd61876660360e4b92a63d271d3ba0", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "patch": "@@ -114,12 +114,31 @@ def strip_versioned_namespace(typename):\n         return typename.replace(_versioned_namespace, '')\n     return typename\n \n+class SmartPtrIterator(Iterator):\n+    \"An iterator for smart pointer types with a single 'child' value\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def __iter__(self):\n+        return self\n+\n+    def __next__(self):\n+        if self.val is None:\n+            raise StopIteration\n+        self.val, val = None, self.val\n+        return ('get()', val)\n+\n class SharedPointerPrinter:\n     \"Print a shared_ptr or weak_ptr\"\n \n     def __init__ (self, typename, val):\n         self.typename = strip_versioned_namespace(typename)\n         self.val = val\n+        self.pointer = val['_M_ptr']\n+\n+    def children (self):\n+        return SmartPtrIterator(self.pointer)\n \n     def to_string (self):\n         state = 'empty'\n@@ -128,27 +147,29 @@ def to_string (self):\n             usecount = refcounts['_M_use_count']\n             weakcount = refcounts['_M_weak_count']\n             if usecount == 0:\n-                state = 'expired, weak %d' % weakcount\n+                state = 'expired, weak count %d' % weakcount\n             else:\n-                state = 'count %d, weak %d' % (usecount, weakcount - 1)\n-        return '%s (%s) %s' % (self.typename, state, self.val['_M_ptr'])\n+                state = 'use count %d, weak count %d' % (usecount, weakcount - 1)\n+        return '%s<%s> (%s)' % (self.typename, str(self.pointer.type.target().strip_typedefs()), state)\n \n class UniquePointerPrinter:\n     \"Print a unique_ptr\"\n \n     def __init__ (self, typename, val):\n         self.val = val\n-\n-    def to_string (self):\n-        impl_type = self.val.type.fields()[0].type.tag\n+        impl_type = val.type.fields()[0].type.tag\n         if is_specialization_of(impl_type, '__uniq_ptr_impl'): # New implementation\n-            v = self.val['_M_t']['_M_t']['_M_head_impl']\n+            self.pointer = val['_M_t']['_M_t']['_M_head_impl']\n         elif is_specialization_of(impl_type, 'tuple'):\n-            v = self.val['_M_t']['_M_head_impl']\n+            self.pointer = val['_M_t']['_M_head_impl']\n         else:\n-            raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % self.val.type.fields()[0].type.tag)\n-        return 'std::unique_ptr<%s> containing %s' % (str(v.type.target()),\n-                                                      str(v))\n+            raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % impl_type)\n+\n+    def children (self):\n+        return SmartPtrIterator(self.pointer)\n+\n+    def to_string (self):\n+        return ('std::unique_ptr<%s>' % (str(self.pointer.type.target())))\n \n def get_value_from_aligned_membuf(buf, valtype):\n     \"\"\"Returns the value held in a __gnu_cxx::__aligned_membuf.\"\"\""}, {"sha": "3af564f2bf7b07fcddcb6ec46b0beb193f6ec0ca", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "patch": "@@ -127,14 +127,14 @@ main()\n   std::unique_ptr<datum> uptr (new datum);\n   uptr->s = \"hi bob\";\n   uptr->i = 23;\n-// { dg-final { regexp-test uptr {std::unique_ptr.datum. containing 0x.*} } }\n+// { dg-final { regexp-test uptr {std::unique_ptr.datum. = {get\\(\\) = 0x.*}} } }\n   std::unique_ptr<datum> &ruptr = uptr;\n-// { dg-final { regexp-test ruptr {std::unique_ptr.datum. containing 0x.*} } }\n+// { dg-final { regexp-test ruptr {std::unique_ptr.datum. = {get\\(\\) = 0x.*}} } }\n \n   ExTuple tpl(6,7);\n-// { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }  \n+// { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n   ExTuple &rtpl = tpl;\n-// { dg-final { note-test rtpl {std::tuple containing = {[1] = 6, [2] = 7}} } }   \n+// { dg-final { note-test rtpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n   placeholder(\"\"); // Mark SPOT\n   use(efl);\n   use(fl);"}, {"sha": "27c2e405fa477460eb101d03c0a52ff83e467b45", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/shared_ptr.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fshared_ptr.cc?ref=d2dfcf823c0ba2b654f8d25a9ec46f59612cb60c", "patch": "@@ -49,25 +49,25 @@ main()\n   typedef std::weak_ptr<int> weak;\n \n   shared esp;\n-// { dg-final { note-test esp \"std::shared_ptr (empty) 0x0\" } }\n+// { dg-final { note-test esp \"std::shared_ptr<int> (empty) = {get() = 0x0}\" } }\n   weak ewp1;\n-// { dg-final { note-test ewp1 \"std::weak_ptr (empty) 0x0\" } }\n+// { dg-final { note-test ewp1 \"std::weak_ptr<int> (empty) = {get() = 0x0}\" } }\n   weak ewp2 = esp;\n-// { dg-final { note-test ewp2 \"std::weak_ptr (empty) 0x0\" } }\n+// { dg-final { note-test ewp2 \"std::weak_ptr<int> (empty) = {get() = 0x0}\" } }\n \n   shared sp1 = make(0x12345678);\n   shared sp2 = sp1;\n-// { dg-final { note-test sp1 \"std::shared_ptr (count 2, weak 0) 0x12345678\" } }\n+// { dg-final { note-test sp1 \"std::shared_ptr<int> (use count 2, weak count 0) = {get() = 0x12345678}\" } }\n \n   shared sp3 = make(0x12344321);\n   weak sp4 = sp3;\n   weak wp1 = sp3;\n-// { dg-final { note-test wp1 \"std::weak_ptr (count 1, weak 2) 0x12344321\" } }\n+// { dg-final { note-test wp1 \"std::weak_ptr<int> (use count 1, weak count 2) = {get() = 0x12344321}\" } }\n \n   shared sp5 = make(0x56788765);\n   weak wp2 = sp5;\n   sp5.reset();\n-// { dg-final { note-test wp2 \"std::weak_ptr (expired, weak 1) 0x56788765\" } }\n+// { dg-final { note-test wp2 \"std::weak_ptr<int> (expired, weak count 1) = {get() = 0x56788765}\" } }\n \n   placeholder(\"\"); // Mark SPOT\n   use(esp);"}]}