{"sha": "84e777839cc458da2c24bda8e7be1665be1f709c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlNzc3ODM5Y2M0NThkYTJjMjRiZGE4ZTdiZTE2NjViZTFmNzA5Yw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-01-17T16:21:02Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-01-17T16:21:02Z"}, "message": "vsx.md (define_expand xl_len_r, [...]): Add match_dup argument.\n\ngcc/ChangeLog:\n\n2018-01-17 Carl Love  <cel@us.ibm.com>\n\t* config/rs6000/vsx.md (define_expand xl_len_r,\n\tdefine_expand stxvl, define_expand *stxvl): Add match_dup argument.\n\t(define_insn): Add, match_dup 1 argument to define_insn stxvll and\n\tlxvll.\n\t(define_expand, define_insn): Move the shift left from\tthe\n\tdefine_insn to the define_expand for lxvl and stxvl instructions.\n\t* config/rs6000/rs6000-builtin.def (BU_P9V_64BIT_VSX_2): Change LXVL\n\tand XL_LEN_R definitions to PURE.\n\ngcc/testsuite/ChangeLog:\n\n2018-01-17  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/powerpc/builtins-6-p9-runnable.c: Add additional tests.\n\tAdd debug print statements.\n\t* gcc.target/powerpc/builtins-5-p9-runnable.c: Add test to do\n\t16 byte vector load followed by a partial vector load.\n\nFrom-SVN: r256798", "tree": {"sha": "c13a7479b2f2336170c74b252d5a18e0ff65325b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c13a7479b2f2336170c74b252d5a18e0ff65325b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e777839cc458da2c24bda8e7be1665be1f709c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e777839cc458da2c24bda8e7be1665be1f709c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e777839cc458da2c24bda8e7be1665be1f709c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e777839cc458da2c24bda8e7be1665be1f709c/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6574dbe05a03e31766f1a4629960b0671a2c680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6574dbe05a03e31766f1a4629960b0671a2c680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6574dbe05a03e31766f1a4629960b0671a2c680"}], "stats": {"total": 1955, "additions": 1230, "deletions": 725}, "files": [{"sha": "53ed18decb76d8eb3e315e259227c35cd9c55326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -1,3 +1,13 @@\n+2018-01-17 Carl Love  <cel@us.ibm.com>\n+\t* config/rs6000/vsx.md (define_expand xl_len_r,\n+\tdefine_expand stxvl, define_expand *stxvl): Add match_dup argument.\n+\t(define_insn): Add, match_dup 1 argument to define_insn stxvll and\n+\tlxvll.\n+\t(define_expand, define_insn): Move the shift left from\tthe\n+\tdefine_insn to the define_expand for lxvl and stxvl instructions.\n+\t* config/rs6000/rs6000-builtin.def (BU_P9V_64BIT_VSX_2): Change LXVL\n+\tand XL_LEN_R definitions to PURE.\n+\n 2018-01-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (indirect_thunk_name): Declare regno"}, {"sha": "a4b93e6892df12e108fd08301b7e0991f42403c8", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -2212,8 +2212,8 @@ BU_P9V_OVERLOAD_2 (VIEDP,\t\"insert_exp_dp\")\n BU_P9V_OVERLOAD_2 (VIESP,\t\"insert_exp_sp\")\n \n /* 2 argument vector functions added in ISA 3.0 (power9).  */\n-BU_P9V_64BIT_VSX_2 (LXVL,\t\"lxvl\",\t\tCONST,\tlxvl)\n-BU_P9V_64BIT_VSX_2 (XL_LEN_R,\t\"xl_len_r\",\tCONST,  xl_len_r)\n+BU_P9V_64BIT_VSX_2 (LXVL,\t\"lxvl\",\t\tPURE,\tlxvl)\n+BU_P9V_64BIT_VSX_2 (XL_LEN_R,\t\"xl_len_r\",\tPURE,\txl_len_r)\n \n BU_P9V_AV_2 (VEXTUBLX, \"vextublx\",\t\tCONST,\tvextublx)\n BU_P9V_AV_2 (VEXTUBRX, \"vextubrx\",\t\tCONST,\tvextubrx)"}, {"sha": "5e5dd0eb772f0b30d5d0044bbddbd8078c2358bd", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -4859,10 +4859,12 @@\n ;; Load VSX Vector with Length\n (define_expand \"lxvl\"\n   [(set (match_dup 3)\n-        (match_operand:DI 2 \"register_operand\"))\n+        (ashift:DI (match_operand:DI 2 \"register_operand\")\n+                   (const_int 56)))\n    (set (match_operand:V16QI 0 \"vsx_register_operand\")\n \t(unspec:V16QI\n \t [(match_operand:DI 1 \"gpc_reg_operand\")\n+          (mem:V16QI (match_dup 1))\n \t  (match_dup 3)]\n \t UNSPEC_LXVL))]\n   \"TARGET_P9_VECTOR && TARGET_64BIT\"\n@@ -4874,16 +4876,17 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V16QI\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n-\t  (match_operand:DI 2 \"register_operand\" \"+r\")]\n+\t  (mem:V16QI (match_dup 1))\n+\t  (match_operand:DI 2 \"register_operand\" \"r\")]\n \t UNSPEC_LXVL))]\n   \"TARGET_P9_VECTOR && TARGET_64BIT\"\n-  \"sldi %2,%2, 56\\; lxvl %x0,%1,%2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"vecload\")])\n+  \"lxvl %x0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"lxvll\"\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V16QI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                       (mem:V16QI (match_dup 1))\n \t\t       (match_operand:DI 2 \"register_operand\" \"r\")]\n \t\t      UNSPEC_LXVLL))]\n   \"TARGET_P9_VECTOR\"\n@@ -4912,6 +4915,7 @@\n (define_insn \"stxvll\"\n   [(set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\" \"b\"))\n \t(unspec:V16QI [(match_operand:V16QI 0 \"vsx_register_operand\" \"wa\")\n+\t\t       (mem:V16QI (match_dup 1))\n \t\t       (match_operand:DI 2 \"register_operand\" \"r\")]\n \t              UNSPEC_STXVLL))]\n   \"TARGET_P9_VECTOR\"\n@@ -4921,10 +4925,12 @@\n ;; Store VSX Vector with Length\n (define_expand \"stxvl\"\n   [(set (match_dup 3)\n-\t(match_operand:DI 2 \"register_operand\"))\n+\t(ashift:DI (match_operand:DI 2 \"register_operand\")\n+\t\t   (const_int 56)))\n    (set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\"))\n \t(unspec:V16QI\n \t [(match_operand:V16QI 0 \"vsx_register_operand\")\n+\t  (mem:V16QI (match_dup 1))\n \t  (match_dup 3)]\n \t UNSPEC_STXVL))]\n   \"TARGET_P9_VECTOR && TARGET_64BIT\"\n@@ -4936,12 +4942,12 @@\n   [(set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\" \"b\"))\n \t(unspec:V16QI\n \t [(match_operand:V16QI 0 \"vsx_register_operand\" \"wa\")\n-\t  (match_operand:DI 2 \"register_operand\" \"+r\")]\n+\t  (mem:V16QI (match_dup 1))\n+\t  (match_operand:DI 2 \"register_operand\" \"r\")]\n \t UNSPEC_STXVL))]\n   \"TARGET_P9_VECTOR && TARGET_64BIT\"\n-  \"sldi %2,%2,56\\;stxvl %x0,%1,%2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"vecstore\")])\n+  \"stxvl %x0,%1,%2\"\n+  [(set_attr \"type\" \"vecstore\")])\n \n ;; Expand for builtin xst_len_r\n (define_expand \"xst_len_r\""}, {"sha": "42fc5ba96e4c481cc45bba8fdbd6529ccc3e75a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -1,3 +1,9 @@\n+2018-01-17  Carl Love  <cel@us.ibm.com>\n+\t* gcc.target/powerpc/builtins-6-p9-runnable.c: Add additional tests.\n+\tAdd debug print statements.\n+\t* gcc.target/powerpc/builtins-5-p9-runnable.c: Add test to do\n+\t16 byte vector load followed by a partial vector load.\n+\n 2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/83799"}, {"sha": "3bb46839a5f1d94ae6c763678292c52404170df6", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-5-p9-runnable.c", "status": "modified", "additions": 105, "deletions": 45, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -36,8 +36,7 @@ int main() {\n    unsigned char *address;\n    vector unsigned char *datap;\n    \n-   vector unsigned char vec_uc_expected1, vec_uc_expected2,\n-      vec_uc_result1, vec_uc_result2;\n+   vector unsigned char vec_uc_expected1, vec_uc_result1;\n    vector int data_int;\n    \n    for (i=0; i<100; i++)\n@@ -77,26 +76,26 @@ int main() {\n \n    /* VEC_XL_LEN_R */\n    size = 8;\n-   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+   vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n-   vec_uc_expected2 = (vector unsigned char){8, 7, 6, 5, 4, 3, 2, 1,\n+   vec_uc_expected1 = (vector unsigned char){8, 7, 6, 5, 4, 3, 2, 1,\n \t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,};\n    \n-   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n \t  size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n-       printf(\"\\nvec_xl_len_r(%d): vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+       printf(\"\\nvec_xl_len_r(%d): vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n \t      size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_result2[i]);\n+\t printf(\" %d,\", vec_uc_result1[i]);\n \n        printf(\"\\n\\n\");\n #else\n@@ -106,26 +105,26 @@ int main() {\n        \n \n    size = 4;\n-   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+   vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n-   vec_uc_expected2 = (vector unsigned char){ 4, 3, 2, 1, 0, 0, 0, 0,\n+   vec_uc_expected1 = (vector unsigned char){ 4, 3, 2, 1, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n    \n-   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n \t    size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n-       printf(\"\\nvec_xl_len_r(%d): vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+       printf(\"\\nvec_xl_len_r(%d): vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n \t      size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_result2[i]);\n+\t printf(\" %d,\", vec_uc_result1[i]);\n \n        printf(\"\\n\\n\");\n #else\n@@ -134,25 +133,25 @@ int main() {\n      }\n \n    size = 2;\n-   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+   vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n-   vec_uc_expected2 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n+   vec_uc_expected1 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n    \n-   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n \t      size);\n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n-       printf(\"\\nvec_xl_len_r(%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+       printf(\"\\nvec_xl_len_r(%d) vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n \t      size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_result2[i]);\n+\t printf(\" %d,\", vec_uc_result1[i]);\n \n        printf(\"\\n\\n\");\n #else\n@@ -162,68 +161,68 @@ int main() {\n \n \n    /* VEC_XST_LEN */\n-   vec_uc_expected2 = (vector unsigned char){ 1, 2, 0, 0, 0, 0, 0, 0,\n+   vec_uc_expected1 = (vector unsigned char){ 1, 2, 0, 0, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    size = 2;\n \n    for (i=0; i<16; i++)\n-     vec_uc_result2[i] = 0;\n+     vec_uc_result1[i] = 0;\n    \n-   address = &vec_uc_result2[0];\n+   address = &vec_uc_result1[0];\n    vec_xst_len (store_data_uc, address, size);\n \n-   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xst_len (%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+       printf(\"vec_xst_len (%d) vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n \t      size);\n \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n        printf(\"\\nvec_xst_len (%d) store_data_uc[0] to store_data_uc[15]\\n\",\n \t      size);\n \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_result2[i]);\n+\t printf(\" %d,\", vec_uc_result1[i]);\n \n        printf(\"\\n\\n\");\n #else\n        abort();\n #endif\n      }\n \n-   vec_uc_expected2 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+   vec_uc_expected1 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n                                               9, 10, 11, 12, 13, 14, 0, 0 };\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    size = 14;\n \n    for (i=0; i<16; i++)\n-     vec_uc_result2[i] = 0;\n+     vec_uc_result1[i] = 0;\n \n-   address = &vec_uc_result2[0];\n+   address = &vec_uc_result1[0];\n \n    vec_xst_len (store_data_uc, address, size);\n    \n-   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xst_len (%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+       printf(\"vec_xst_len (%d) vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n \t      size);\n \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n        printf(\"\\nvec_xst_len (%d) store_data_uc[0] to store_data_uc[15]\\n\",\n \t      size);\n \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_result2[i]);\n+\t printf(\" %d,\", vec_uc_result1[i]);\n \n        printf(\"\\n\\n\");\n #else\n@@ -232,6 +231,40 @@ int main() {\n      }\n \n    /* VEC_XST_LEN_R */\n+   vec_uc_expected1 = (vector unsigned char){ 16, 15, 14, 13, 12, 11, 10, 9,\n+\t\t\t\t\t      8, 7, 6, 5, 4, 3, 2, 1 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0, 0, 0, 0, 0 };\n+\n+   size = 16;\n+\n+   address = &vec_uc_result1[0];\n+\n+   vec_xst_len_r(store_data_uc, address, size);\n+\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len_r(%d) vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n+\n+       printf(\"\\nvec_xst_len_r(%d) result[0] to result[15]\\n\", size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result1[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n    vec_uc_expected1 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n@@ -241,9 +274,6 @@ int main() {\n \n    size = 2;\n \n-   for (i=0; i<16; i++)\n-     vec_uc_result1[i] = 0;\n-\n    address = &vec_uc_result1[0];\n \n    vec_xst_len_r(store_data_uc, address, size);\n@@ -269,6 +299,39 @@ int main() {\n #endif\n      }\n \n+   vec_uc_expected1 = (vector unsigned char){ 16, 15, 14, 13, 12, 11, 10, 9,\n+                                              8, 7, 6, 5, 4, 3, 2, 1 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, \n+\t\t\t\t\t    0, 0, 0, 0, 0, 0, 0, 0 };\n+\n+   size = 16;\n+\n+   address = &vec_uc_result1[0];\n+\n+   vec_xst_len_r(store_data_uc, address, size);\n+\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len_r(%d) vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n+\t  size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n+\n+       printf(\"\\nvec_xst_len_r(%d) result[0] to result[15]\\n\", size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result1[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n \n    vec_uc_expected1 = (vector unsigned char){ 14, 13, 12, 11, 10, 9, 8, 7,\n                                               6, 5, 4, 3, 2, 1, 0, 0 };\n@@ -279,9 +342,6 @@ int main() {\n \n    size = 14;\n \n-   for (i=0; i<16; i++)\n-     vec_uc_result1[i] = 0;\n-\n    address = &vec_uc_result1[0];\n \n    vec_xst_len_r(store_data_uc, address, size);\n@@ -290,11 +350,11 @@ int main() {\n      {\n #ifdef DEBUG\n        printf(\"Error: result does not match expected result\\n\");\n-       printf(\"vec_xst_len_r(%d) vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+       printf(\"vec_xst_len_r(%d) vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n \t  size);\n    \n        for (i=0; i<16; i++)\n-\t printf(\" %d,\", vec_uc_expected2[i]);\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n \n        printf(\"\\nvec_xst_len_r(%d) result[0] to result[15]\\n\", size);\n "}, {"sha": "be150b6018f4c99cd2c344e5ddd216baf2271049", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-6-p9-runnable.c", "status": "modified", "additions": 1090, "deletions": 667, "changes": 1757, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -7,1040 +7,1463 @@\n #include <inttypes.h>\n #include <altivec.h> // vector\n \n+#define TRUE 1\n+#define FALSE 0\n+\n #ifdef DEBUG\n #include <stdio.h>\n #endif\n \n void abort (void);\n \n-int main() {\n-   vector signed char char_src1, char_src2;\n-   vector unsigned char uchar_src1, uchar_src2;\n-   vector signed short int short_src1, short_src2;\n-   vector unsigned short int ushort_src1, ushort_src2;\n-   vector signed int int_src1, int_src2;\n-   vector unsigned int uint_src1, uint_src2;\n-   unsigned int result, expected_result;\n-\n-   /* Tests for: vec_first_match_index() */\n-   /* char */\n-   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 0;\n-\n-   result = vec_first_match_index (char_src1, char_src2);\n-\n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+int result_wrong_sc (vector signed char vec_expected,\n+\t\t     vector signed char vec_actual)\n+{\n+  int i;\n \n-   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, -2, -3, -4, -5, -6, -7, -8,\n-\t\t\t\t     -9, -10, -11, -12, -13, -14, -15, -16};\n-   expected_result = 16;\n+  for (i = 0; i < 16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   result = vec_first_match_index (char_src1, char_src2);\n+  return FALSE;\n+}\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+int result_wrong_uc (vector unsigned char vec_expected,\n+\t\t     vector unsigned char vec_actual)\n+{\n+  int i;\n \n-   uchar_src1 = (vector unsigned char) {0, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 2;\n+  for (i = 0; i < 16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   result = vec_first_match_index (uchar_src1, uchar_src2);\n+  return FALSE;\n+}\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uchar first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+int result_wrong_us (vector unsigned short vec_expected,\n+\t\t     vector unsigned short vec_actual)\n+{\n+  int i;\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n-   uchar_src2 = (vector unsigned char) {3, 4, 5, 6, 7, 8, 9, 10,\n-\t\t\t\t\t11, 12, 13, 14, 15, 16, 17, 18};\n-   expected_result = 16;\n+  for (i = 0; i < 8; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   result = vec_first_match_index (uchar_src1, uchar_src2);\n+  return FALSE;\n+}\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uchar first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+int result_wrong_ss (vector signed short vec_expected,\n+\t\t     vector signed short vec_actual)\n+{\n+  int i;\n \n-   /* short int */\n-   short_src1 = (vector short int) {10, -20, -30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+  for (i = 0; i < 8; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   expected_result = 3;\n+  return FALSE;\n+}\n \n-   result = vec_first_match_index (short_src1, short_src2);\n+int result_wrong_ui (vector unsigned int vec_expected,\n+\t\t     vector unsigned int vec_actual)\n+{\n+  int i;\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: short int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {0, 0, 0, 0, 0, 0, 0, 0};\n+  return FALSE;\n+}\n \n-   expected_result = 8;\n+int result_wrong_ull (vector unsigned long long vec_expected,\n+\t\t      vector unsigned long long vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_match_index (short_src1, short_src2);\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: short int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  return FALSE;\n+}\n \n-   ushort_src1 = (vector short unsigned int) {0, 0, 0, 0, 0, 60, 70, 0};\n-   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+int result_wrong_sll (vector signed long long vec_expected,\n+\t\t      vector signed long long vec_actual)\n+{\n+  int i;\n \n-   expected_result = 5;\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_expected[i] != vec_actual[i])\n+        return TRUE;\n+    }\n \n-   result = vec_first_match_index (ushort_src1, ushort_src2);\n+  return FALSE;\n+}\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: ushort int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+int result_wrong_si (vector signed int vec_expected,\n+\t\t     vector signed int vec_actual)\n+{\n+  int i;\n \n-   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n-\t\t\t\t\t      60, -70, 80, -90};\n-   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n-\t\t\t\t\t      -60, 70, -80, 90};\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   expected_result = 8;\n+  return FALSE;\n+}\n \n-   result = vec_first_match_index (ushort_src1, ushort_src2);\n+int result_wrong_u128 (vector __uint128_t vec_expected,\n+\t\t       vector __uint128_t vec_actual)\n+{\n+  int i;\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: ushort int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  if (vec_expected[0] != vec_actual[0])\n+    return TRUE;\n \n-   /* int */\n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {10, 20, 30, 4};\n+  return FALSE;\n+}\n \n-   expected_result = 3;\n+int result_wrong_s128 (vector __int128_t vec_expected,\n+\t\t       vector __int128_t vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_match_index (int_src1, int_src2);\n+  if (vec_expected[0] != vec_actual[0])\n+    return TRUE;\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  return FALSE;\n+}\n+\n+int result_wrong_d (vector double vec_expected,\n+\t\t    vector double vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n \n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {4, 3, 2, 1};\n+int result_wrong_f (vector float vec_expected,\n+\t\t    vector float vec_actual)\n+{\n+  int i;\n \n-   expected_result = 4;\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n \n-   result = vec_first_match_index (int_src1, int_src2);\n+  return FALSE;\n+}\n \n-   if (result != expected_result)\n #ifdef DEBUG\n-      printf(\"Error: int first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+void print_sc (vector signed char vec_expected,\n+\t       vector signed char vec_actual)\n+{\n+  int i;\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+  printf(\"expected signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   expected_result = 1;\n+  printf(\"\\nactual signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   result = vec_first_match_index (uint_src1, uint_src2);\n+void print_uc (vector unsigned char vec_expected,\n+\t       vector unsigned char vec_actual)\n+{\n+  int i;\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uint first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"expected signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+  printf(\"\\nactual signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   expected_result = 4;\n+void print_us (vector unsigned short vec_expected,\n+\t       vector unsigned short vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_match_index (uint_src1, uint_src2);\n+  printf(\"expected unsigned short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uint first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual unsigned short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   /* Tests for: vec_first_mismatch_index() */\n-   /* char */\n-   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 3;\n+void print_ss (vector signed short vec_expected,\n+\t       vector signed short vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_mismatch_index (char_src1, char_src2);\n+  printf(\"expected signed short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual signed short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 16;\n+void print_ui (vector unsigned int vec_expected,\n+\t       vector unsigned int vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_mismatch_index (char_src1, char_src2);\n+  printf(\"expected unsigned int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual unsigned int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 1;\n+void print_si (vector signed int vec_expected,\n+\t       vector signed int vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+  printf(\"expected signed int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual signed int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n-   expected_result = 8;\n+void print_ull (vector unsigned long long vec_expected,\n+\t\tvector unsigned long long vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+  printf(\"expected unsigned long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %llu,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual unsigned long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %llu,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 16;\n+void print_sll (vector signed long long vec_expected,\n+\t\tvector signed long long vec_actual)\n+{\n+  int i;\n \n-   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+  printf(\"expected signed long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_expected[i]);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n+  printf(\"\\nactual signed long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n \n-   /* short int */\n-   short_src1 = (vector short int) {-10, -20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+void print_u128 (vector __uint128_t vec_expected,\n+\t\t vector __uint128_t vec_actual)\n+{\n+  printf(\"expected uint128 data\\n\");\n+  printf(\" %llu%llu\\n\", (unsigned long long)(vec_expected[0] >> 64),\n+\t (unsigned long long)(vec_expected[0] & 0xFFFFFFFFFFFFFFFF));\n \n-   expected_result = 1;\n+  printf(\"\\nactual uint128 data\\n\");\n+  printf(\" %llu%llu\\n\", (unsigned long long)(vec_actual[0] >> 64),\n+\t (unsigned long long)(vec_actual[0] & 0xFFFFFFFFFFFFFFFF));\n+}\n \n-   result = vec_first_mismatch_index (short_src1, short_src2);\n+void print_s128 (vector __int128 vec_expected,\n+\t\t vector __int128 vec_actual)\n+{\n+  printf(\"expected int128 data\\n\");\n+  printf(\" %lld%llu\\n\", (signed long long)(vec_expected[0] >> 64),\n+\t (unsigned long long)(vec_expected[0] & 0xFFFFFFFFFFFFFFFF));\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: short int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n+  printf(\"\\nactual int128 data\\n\");\n+  printf(\" %lld%llu\\n\", (signed long long)(vec_actual[0] >> 64),\n+\t (unsigned long long)(vec_actual[0] & 0xFFFFFFFFFFFFFFFF));\n+}\n+\n+void print_d (vector double vec_expected,\n+\t      vector double vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected double data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %f,\", vec_expected[i]);\n+\n+  printf(\"\\nactual double data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %f,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+void print_f (vector float vec_expected,\n+\t      vector float vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected float data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %f,\", vec_expected[i]);\n+\n+  printf(\"\\nactual float data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %f,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n #endif\n \n-   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+int main() {\n+  int i, j;\n+  size_t len;\n+  signed char data_c[100];\n+  vector signed char input_c;\n+  unsigned char data_uc[100];\n+  vector unsigned char input_uc;\n+\n+  signed short int data_ssi[100];\n+  vector signed short int input_ssi;\n+  unsigned short int data_usi[100];\n+  vector unsigned short int input_usi;\n+\n+  signed int data_si[100];\n+  vector signed int input_si;\n+  unsigned int data_ui[100];\n+  vector unsigned int input_ui;\n+\n+  signed long long data_sll[100];\n+  vector signed long long  input_sll;\n+  unsigned long long data_ull[100];\n+  vector unsigned long long int input_ull;\n+\n+  float data_f[100];\n+  vector float input_f;\n+  double data_d[100];\n+  vector double input_d;\n+  __uint128_t data_u128[100];\n+  vector __uint128_t input_u128;\n+  __int128_t data_128[100];\n+  vector __int128_t input_128;\n+\n+  vector signed char store_data_sc;\n+  vector unsigned char store_data_uc;\n+  vector signed int store_data_si;\n+  vector unsigned int store_data_ui;\n+  vector __int128_t store_data_s128;\n+  vector __uint128_t store_data_u128;\n+  vector signed long long int store_data_sll;\n+  vector unsigned long long int store_data_ull;\n+  vector signed short store_data_ss;\n+  vector unsigned short store_data_us;\n+  vector double store_data_d;\n+  vector float store_data_f;\n+\n+  signed char *address_sc;\n+  unsigned char *address_uc;\n+  signed int *address_si;\n+  unsigned int *address_ui;\n+  __int128_t *address_s128;\n+  __uint128_t *address_u128;\n+  signed long long int *address_sll;\n+  unsigned long long int *address_ull;\n+  signed short int *address_ss;\n+  unsigned short int *address_us;\n+  double *address_d;\n+  float *address_f;\n+\n+  vector unsigned char *datap;\n+\n+  vector unsigned char vec_uc_expected1, vec_uc_result1;\n+  vector signed char vec_sc_expected1, vec_sc_result1;\n+  vector signed int vec_si_expected1, vec_si_result1;\n+  vector unsigned int vec_ui_expected1, vec_ui_result1;\n+  vector __int128_t vec_s128_expected1, vec_s128_result1;\n+  vector __uint128_t vec_u128_expected1, vec_u128_result1;\n+  vector signed long long int vec_sll_expected1, vec_sll_result1;\n+  vector unsigned long long int vec_ull_expected1, vec_ull_result1;\n+  vector signed short int vec_ss_expected1, vec_ss_result1;\n+  vector unsigned short int vec_us_expected1, vec_us_result1;\n+  vector double vec_d_expected1, vec_d_result1;\n+  vector float vec_f_expected1, vec_f_result1;\n+\n+  signed long long disp;\n+\n+  /* VEC_XST_LEN, ISA 3.0 */\n+  len = 16;\n+  vec_sc_expected1 = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t   1, 2, 3, 4, 5, 6, 7, 8 };\n+  store_data_sc = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t1, 2, 3, 4, 5, 6, 7, 8 };\n+  vec_sc_result1 = (vector signed char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+                                         0, 0, 0, 0, 0, 0, 0, 0 };\n \n-   expected_result = 8;\n+  address_sc = &vec_sc_result1[0];\n \n-   result = vec_first_mismatch_index (short_src1, short_src2);\n+  vec_xst_len (store_data_sc, address_sc, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: short int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, sc result does not match expected result\\n\", len);\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   ushort_src1 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 0};\n-   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+  len = 12;\n+  vec_sc_expected1 = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t   1, 2, 3, 4, 0, 0, 0, 0 };\n+  store_data_sc = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t1, 2, 3, 4, 5, 6, 7, 8 };\n+  vec_sc_result1 = (vector signed char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+                                         0, 0, 0, 0, 0, 0, 0, 0 };\n \n-   expected_result = 7;\n+  address_sc = &vec_sc_result1[0];\n \n-   result = vec_first_mismatch_index (ushort_src1, ushort_src2);\n+  vec_xst_len (store_data_sc, address_sc, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: ushort int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, sc result does not match expected result\\n\",\n+\t      len);\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n+\n+  len = 16;\n+  vec_uc_expected1 = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t     8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+  store_data_uc = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15 };\n \n-   ushort_src1 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n-   ushort_src2 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+  vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n \n-   expected_result = 8;\n+  address_uc = &vec_uc_result1[0];\n \n-   result = vec_first_mismatch_index (ushort_src1, ushort_src2);\n+  vec_xst_len (store_data_uc, address_uc, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_uc (vec_uc_expected1, vec_uc_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: ushort int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+      printf(\"Error: vec_xst_len, len = %d, uc result does not match expected result\\n\",\n+\t     len);\n+      print_uc (vec_uc_expected1, vec_uc_result1);\n #else\n       abort();\n #endif\n+    }\n \n-   /* int */\n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {1, 20, 3, 4};\n+  len = 4;\n+  vec_uc_expected1 = (vector unsigned char){ 0, 1, 2, 3, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 };\n+  store_data_uc = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15 };\n+  vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n \n-   expected_result = 1;\n+  address_uc = &vec_uc_result1[0];\n \n-   result = vec_first_mismatch_index (int_src1, int_src2);\n+  vec_xst_len (store_data_uc, address_uc, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_uc (vec_uc_expected1, vec_uc_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+      printf(\"Error: vec_xst_len, len = %d, uc result does not match expected result\\n\",\n+\t      len);\n+      print_uc (vec_uc_expected1, vec_uc_result1);\n #else\n       abort();\n #endif\n+    }\n \n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {1, 2, 3, 4};\n+  len = 16;\n+  vec_ss_expected1 = (vector signed short int){ 10, 20, 30, 40,\n+\t\t\t\t\t\t50, 60, 70, 80 };\n+  store_data_ss = (vector signed short int){ 10, 20, 30, 40,\n+\t\t\t\t\t     50, 60, 70, 80 };\n+  vec_ss_result1 = (vector signed short int){ 0, 0, 0, 0, 0, 0, 0, 0};\n \n-   expected_result = 4;\n+  address_ss = &vec_ss_result1[0];\n \n-   result = vec_first_mismatch_index (int_src1, int_src2);\n+  vec_xst_len (store_data_ss, address_ss, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_ss (vec_ss_expected1, vec_ss_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, ss result does not match expected result\\n\",\n+\t      len);\n+       print_ss (vec_ss_expected1, vec_ss_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   int_src1 = (vector int) {1, 0, 3, 4};\n-   int_src2 = (vector int) {1, 2, 3, 4};\n+  len = 14;\n+  vec_ss_expected1 = (vector signed short int){ 10, 20, 30, 40,\n+\t\t\t\t\t\t50, 60, 70, 0 };\n+  store_data_ss = (vector signed short int){ 10, 20, 30, 40,\n+\t\t\t\t\t     50, 60, 70, 80 };\n+  vec_ss_result1 = (vector signed short int){ 0, 0, 0, 0, 0, 0, 0, 0};\n \n-   expected_result = 1;\n+  address_ss = &vec_ss_result1[0];\n \n-   result = vec_first_mismatch_index (int_src1, int_src2);\n+  vec_xst_len (store_data_ss, address_ss, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_ss (vec_ss_expected1, vec_ss_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, ss result does not match expected result\\n\",\n+\t      len);\n+       print_ss (vec_ss_expected1, vec_ss_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+  len = 16;\n+  vec_us_expected1 = (vector unsigned short int){ 10, 20, 30, 40,\n+\t\t\t\t\t\t  50, 60, 70, 80 };\n+  store_data_us = (vector unsigned short int){ 10, 20, 30, 40,\n+\t\t\t\t\t       50, 60, 70, 80 };\n+  vec_us_result1 = (vector unsigned short int){ 0, 0, 0, 0, 0, 0, 0, 0};\n \n-   expected_result = 0;\n+  address_us = &vec_us_result1[0];\n \n-   result = vec_first_mismatch_index (uint_src1, uint_src2);\n+  vec_xst_len (store_data_us, address_us, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_us (vec_us_expected1, vec_us_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, us result does not match expected result\\n\",\n+\t      len);\n+       print_us (vec_us_expected1, vec_us_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {1, 2, 3, 4};\n+  len = 2;\n+  vec_us_expected1 = (vector unsigned short int){ 10, 0, 0, 0,\n+\t\t\t\t\t\t  0, 0, 0, 0 };\n+  store_data_us = (vector unsigned short int){ 10, 20, 30, 40,\n+\t\t\t\t\t       50, 60, 70, 80 };\n+  vec_us_result1 = (vector unsigned short int){ 0, 0, 0, 0, 0, 0, 0, 0};\n \n-   expected_result = 4;\n+  address_us = &vec_us_result1[0];\n \n-   result = vec_first_mismatch_index (uint_src1, uint_src2);\n+  vec_xst_len (store_data_us, address_us, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_us (vec_us_expected1, vec_us_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, us result does not match expected result\\n\",\n+\t      len);\n+       print_us (vec_us_expected1, vec_us_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   /* Tests for: vec_first_match_or_eos_index() */\n-   /* char */\n-   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 0;\n+  len = 16;\n+  vec_si_expected1 = (vector signed int){ -30, -10, 0, 10 };\n+  store_data_si = (vector signed int){ -30, -10, 0, 10 };\n+  vec_si_result1 = (vector signed int){ 0, 0, 0, 0};\n \n-   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+  address_si = &vec_si_result1[0];\n \n-   if (result != expected_result)\n+  vec_xst_len (store_data_si, address_si, len);\n+\n+  if (result_wrong_si (vec_si_expected1, vec_si_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, si result does not match expected result\\n\",\n+\t      len);\n+       print_si (vec_si_expected1, vec_si_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n+\n+  len = 8;\n+  vec_si_expected1 = (vector signed int){ -30, -10, 0, 0 };\n+  store_data_si = (vector signed int){ -30, -10, 0, 10 };\n+  vec_si_result1 = (vector signed int){ 0, 0, 0, 0};\n \n-   char_src1 = (vector signed char) {-1, 2, 3, 0, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {2, 3, 20, 0, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 3;\n+  address_si = &vec_si_result1[0];\n \n-   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+  vec_xst_len (store_data_si, address_si, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_si (vec_si_expected1, vec_si_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: char first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, si result does not match expected result\\n\",\n+\t      len);\n+       print_si (vec_si_expected1, vec_si_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n+\n+  len = 16;\n+  vec_sll_expected1 = (vector signed long long int){ -3000, 10000 };\n+  store_data_sll = (vector signed long long int){ -3000, 10000 };\n+  vec_sll_result1 = (vector signed long long int){ 0, 0};\n \n-  char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, -2, -3, -4, -5, -6, -7, -8,\n-\t\t\t\t     -9, -10, -11, -12, -13, -14, -15, -16};\n-   expected_result = 16;\n+  address_sll = (signed long long *)&vec_sll_result1[0];\n \n-   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+  vec_xst_len (store_data_sll, address_sll, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_sll (vec_sll_expected1, vec_sll_result1) == TRUE)\n+    {\n #ifdef DEBUG\n-      printf(\"Error: char first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, sll result does not match expected result\\n\",\n+\t      len);\n+       print_sll (vec_sll_expected1, vec_sll_result1);\n #else\n-      abort();\n-#endif\n+       abort();\n #endif\n+    }\n \n-   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {-1, 0, -3, -4, -5, -6, -7, -8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 1;\n+  len = 8;\n+  vec_sll_expected1 = (vector signed long long int){ -3000, 0 };\n+  store_data_sll = (vector signed long long int){ -3000, 10000 };\n+  vec_sll_result1 = (vector signed long long int){ 0, 0};\n \n-   result = vec_first_match_or_eos_index (uchar_src1, uchar_src2);\n+  address_sll = (signed long long *)&vec_sll_result1[0];\n \n-   if (result != expected_result)\n+  vec_xst_len (store_data_sll, address_sll, len);\n+\n+  if (result_wrong_sll (vec_sll_expected1, vec_sll_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: uchar first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, sll result does not match expected result\\n\",\n+\t      len);\n+       print_sll (vec_sll_expected1, vec_sll_result1);\n #else\n       abort();\n #endif\n+    }\n+\n+  len = 16;\n+  vec_ull_expected1 = (vector unsigned long long int){ 50000, 120000 };\n+  store_data_ull = (vector unsigned long long int){ 50000, 120000 };\n+  vec_ull_result1 = (vector unsigned long long int){ 0, 0};\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n-   uchar_src2 = (vector unsigned char) {3, 4, 5, 6, 7, 8, 9, 10,\n-\t\t\t\t\t11, 12, 13, 14, 15, 16, 17, 18};\n-   expected_result = 16;\n+  address_ull = (unsigned long long *) &vec_ull_result1[0];\n \n-   result = vec_first_match_or_eos_index (uchar_src1, uchar_src2);\n+  vec_xst_len (store_data_ull, address_ull, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_ull (vec_ull_expected1, vec_ull_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: uchar first match or EOS  result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, ull result does not match expected result\\n\",\n+\t      len);\n+       print_ull (vec_ull_expected1, vec_ull_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   /* short int */\n-   short_src1 = (vector short int) {10, -20, -30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+  len = 8;\n+  vec_ull_expected1 = (vector unsigned long long int){ 50000, 0 };\n+  store_data_ull = (vector unsigned long long int){ 50000, 120000 };\n+  vec_ull_result1 = (vector unsigned long long int){ 0, 0};\n \n-   expected_result = 3;\n+  address_ull = (unsigned long long *) &vec_ull_result1[0];\n \n-   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+  vec_xst_len (store_data_ull, address_ull, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_ull (vec_ull_expected1, vec_ull_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, ull result does not match expected result\\n\",\n+\t      len);\n+       print_ull (vec_ull_expected1, vec_ull_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   short_src1 = (vector short int) {1, 20, 30, 40, 50, 60, 70, 80};\n+  len = 16;\n+  vec_s128_expected1 = (vector __int128_t){ 12345 };\n+  store_data_s128 = (vector __int128_t){ 12345 };\n \n-   short_src2 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n+  vec_s128_result1[0] = 0;\n \n-   expected_result = 1;\n+  address_s128 = (__int128_t *)(&vec_s128_result1[0]);\n \n-   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+  vec_xst_len (store_data_s128, address_s128, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_s128 (vec_s128_expected1, vec_s128_result1))\n #ifdef DEBUG\n-      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+    {\n+       printf(\"Error: vec_xst_len, len = %d, s128, result does not match expected result\\n\",\n+\t      len);\n+       print_s128 (vec_s128_expected1, vec_s128_result1);\n+    }\n #else\n-      abort();\n+    abort();\n #endif\n \n-   short_src1 = (vector short int) {-10, -20, -30, -40, -50, -60, -70, -80};\n+  len = 16;\n+  vec_u128_expected1 = (vector __uint128_t){ 12345 };\n+  store_data_u128 = (vector __uint128_t){ 12345 };\n \n-   short_src2 = (vector short int) {10, 20, 30, 40, 50, 0, 70, 80};\n+  vec_u128_result1[0] = 0;\n \n-   expected_result = 5;\n+  address_u128 = (__int128_t *)(&vec_u128_result1[0]);\n \n-   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+  vec_xst_len (store_data_u128, address_u128, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_u128 (vec_u128_expected1, vec_u128_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+      printf(\"Error: vec_xst_len, len = %d, u128, result does not match expected result\\n\", len);\n+      print_u128 (vec_u128_expected1, vec_u128_result1);\n #else\n       abort();\n #endif\n+    }\n \n-   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {0, 0, 0, 0, 0, 0, 0, 0};\n+  len = 16;\n+  vec_d_expected1 = (vector double){ 1., 2. };\n+  store_data_d = (vector double){ 1., 2. };\n+  vec_d_result1 = (vector double){ 0., 0. };\n \n-   expected_result = 0;\n+  address_d = (double *)(&vec_d_result1[0]);\n \n-   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+  vec_xst_len (store_data_d, address_d, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_d (vec_d_expected1, vec_d_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, double, result does not match expected result\\n\",\n+\t      len);\n+       print_d (vec_d_expected1, vec_d_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   ushort_src1 = (vector short unsigned int) {1, 2, 0, 0, 60, 70, 0};\n-   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+  len = 8;\n+  vec_d_expected1 = (vector double){ 1., 0. };\n+  store_data_d = (vector double){ 1., 2. };\n+  vec_d_result1 = (vector double){ 0., 0. };\n \n-   expected_result = 2;\n+  address_d = (double *)(&vec_d_result1[0]);\n \n-   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+  vec_xst_len (store_data_d, address_d, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_d (vec_d_expected1, vec_d_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, double, result does not match expected result\\n\",\n+\t      len);\n+       print_d (vec_d_expected1, vec_d_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n-\t\t\t\t\t      60, -70, 80, -90};\n-   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n-\t\t\t\t\t      -60, 70, -80, 90};\n+  len = 16;\n+  vec_f_expected1 = (vector float){ 1., 2., 3., 4. };\n+  store_data_f = (vector float){ 1., 2., 3., 4. };\n+  vec_f_result1 = (vector float){ 0., 0., 0., 0. };\n \n-   expected_result = 8;\n+  address_f = (float *)(&vec_f_result1[0]);\n \n-   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+  vec_xst_len (store_data_f, address_f, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_f (vec_f_expected1, vec_f_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, float, result does not match expected result\\n\",\n+\t      len);\n+       print_f (vec_f_expected1, vec_f_result1);\n #else\n-      abort();\n+       abort();\n #endif\n-   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n-\t\t\t\t\t      60, -70, 80, 0};\n+    }\n \n-   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n-\t\t\t\t\t      -60, 70, -80, 90};\n+  len = 4;\n+  vec_f_expected1 = (vector float){ 1., 0., 0., 0. };\n+  store_data_f = (vector float){ 1., 2., 3., 4. };\n+  vec_f_result1 = (vector float){ 0., 0., 0., 0. };\n \n-   expected_result = 7;\n+  address_f = (float *)(&vec_f_result1[0]);\n \n-   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+  vec_xst_len (store_data_f, address_f, len);\n \n-   if (result != expected_result)\n+  if (result_wrong_f (vec_f_expected1, vec_f_result1))\n+    {\n #ifdef DEBUG\n-      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+       printf(\"Error: vec_xst_len, len = %d, float, result does not match expected result\\n\",\n+\t      len);\n+       print_f (vec_f_expected1, vec_f_result1);\n #else\n-      abort();\n+       abort();\n #endif\n+    }\n \n-   /* int */\n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {10, 20, 30, 4};\n-\n-   expected_result = 3;\n+  /* vec_xl_len() tests */\n+  for (i = 0; i < 100; i++)\n+    {\n+      data_c[i] = i;\n+      data_uc[i] = i+1;\n+      data_ssi[i] = i+10;\n+      data_usi[i] = i+11;\n+      data_si[i] = i+100;\n+      data_ui[i] = i+101;\n+      data_sll[i] = i+1000;\n+      data_ull[i] = i+1001;\n+      data_f[i] = i+100000.0;\n+      data_d[i] = i+1000000.0;\n+      data_128[i] = i + 12800000;\n+      data_u128[i] = i + 12800001;\n+    }\n \n-   result = vec_first_match_or_eos_index (int_src1, int_src2);\n+  len = 16;\n+  vec_sc_expected1 = (vector signed char){0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15};\n+  vec_sc_result1 = vec_xl_len (data_c, len);\n \n-   if (result != expected_result)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_sc_result1[i] != vec_sc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_sc_result1[%d] = %d; vec_sc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_sc_result1[i], i, vec_sc_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   int_src1 = (vector int) {0, 2, 3, 4};\n-   int_src2 = (vector int) {4, 3, 2, 1};\n+  len = 12;\n \n-   expected_result = 0;\n+  vec_sc_expected1 = (vector signed char){0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t  8, 9, 10, 11, 0, 0, 0, 0};\n+  vec_sc_result1 = vec_xl_len (data_c, len);\n \n-   result = vec_first_match_or_eos_index (int_src1, int_src2);\n-\n-   if (result != expected_result)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_sc_result1[i] != vec_sc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_sc_result1[%d] = %d; vec_sc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_sc_result1[i], i, vec_sc_expected1[i]);\n #else\n-      abort();\n+        abort ();\n #endif\n+    }\n \n+  len = 16;\n+  vec_uc_expected1 = (vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t    10, 11, 12, 13, 14, 15, 16};\n+  vec_uc_result1 = vec_xl_len (data_uc, len);\n \n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {4, 3, 2, 1};\n-\n-   expected_result = 4;\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_match_or_eos_index (int_src1, int_src2);\n+  len = 12;\n+  vec_uc_expected1 = (vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t    10, 11, 12, 0, 0, 0, 0};\n+  vec_uc_result1 = vec_xl_len (data_uc, len);\n \n-   if (result != expected_result)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+  len = 16;\n+  vec_ss_expected1 = (vector signed short){10, 11, 12, 13, 14, 15, 16, 17};\n \n-   expected_result = 1;\n+  vec_ss_result1 = vec_xl_len (data_ssi, len);\n \n-   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n-\n-   if (result != expected_result)\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_ss_result1[i] != vec_ss_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ss_result1[%d] = %d; vec_ss_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ss_result1[i], i, vec_ss_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uint_src1 = (vector unsigned int) {1, 2, 0, 4};\n-   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+  len = 8;\n+  vec_ss_expected1 = (vector signed short){10, 11, 12, 13, 0, 0, 0, 0};\n \n-   expected_result = 2;\n+  vec_ss_result1 = vec_xl_len (data_ssi, len);\n \n-   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n-\n-   if (result != expected_result)\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_ss_result1[i] != vec_ss_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ss_result1[%d] = %d; vec_ss_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ss_result1[i], i, vec_ss_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+  len = 16;\n+  vec_us_expected1 = (vector unsigned short){11, 12, 13, 14, 15, 16, 17, 18};\n+  vec_us_result1 = vec_xl_len (data_usi, len);\n \n-   expected_result = 4;\n-\n-   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n-\n-   if (result != expected_result)\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_us_result1[i] != vec_us_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_us_result1[%d] = %d; vec_us_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_us_result1[i], i, vec_us_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n \n-   /* Tests for: vec_first_mismatch_or_eos_index() */\n-   /* char */\n-   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 3;\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+  len = 8;\n+  vec_us_expected1 = (vector unsigned short){11, 12, 13, 14, 0, 0, 0, 0};\n+  vec_us_result1 = vec_xl_len (data_usi, len);\n \n-   if (result != expected_result)\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_us_result1[i] != vec_us_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_us_result1[%d] = %d; vec_us_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_us_result1[i], i, vec_us_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   char_src1 = (vector signed char) {1, 2, 0, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {1, 2, 0, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 2;\n-\n-   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+  len = 16;\n+  vec_si_result1 = vec_xl_len (data_si, len);\n+  vec_si_expected1 = (vector int){100, 101, 102, 103};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_si_result1[i] != vec_si_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_si_result1[%d] = %d; vec_si_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_si_result1[i], i, vec_si_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   char_src2 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 16;\n-\n-   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+  len = 8;\n+  vec_si_result1 = vec_xl_len (data_si, len);\n+  vec_si_expected1 = (vector int){100, 101, 0, 0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_si_result1[i] != vec_si_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_si_result1[%d] = %d; vec_si_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_si_result1[i], i, vec_si_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n-\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n-   expected_result = 1;\n-\n-   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+  len = 16;\n+  vec_ui_result1 = vec_xl_len (data_ui, len);\n+  vec_ui_expected1 = (vector unsigned int){101, 102, 103, 104};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_ui_result1[i] != vec_ui_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ui_result1[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ui_result1[i], i, vec_ui_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n-   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n-   expected_result = 8;\n-\n-   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+  len = 8;\n+  vec_ui_result1 = vec_xl_len (data_ui, len);\n+  vec_ui_expected1 = (vector unsigned int){101, 102, 0, 0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_ui_result1[i] != vec_ui_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ui_result1[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ui_result1[i], i, vec_ui_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n-   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 0, 16, 17};\n-   expected_result = 13;\n-\n-   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+  len = 16;\n+  vec_sll_result1 = vec_xl_len (data_sll, len);\n+  vec_sll_expected1 = (vector signed long long){1000, 1001};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_sll_result1[i] != vec_sll_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_sll_result1[%d] = %lld; vec_sll_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_sll_result1[i], i, vec_sll_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n-   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n-\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n-   expected_result = 16;\n-\n-   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+  len = 8;\n+  vec_sll_result1 = vec_xl_len (data_sll, len);\n+  vec_sll_expected1 = (vector signed long long){1000, 0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_sll_result1[i] != vec_sll_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_sll_result1[%d] = %lld; vec_sll_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_sll_result1[i], i, vec_sll_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   /* short int */\n-   short_src1 = (vector short int) {-10, -20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+  len = 16;\n+  vec_ull_result1 = vec_xl_len (data_ull, len);\n+  vec_ull_expected1 = (vector unsigned long long){1001, 1002};\n \n-   expected_result = 1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_ull_result1[i] != vec_ull_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ull_result1[%d] = %lld; vec_ull_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_ull_result1[i], i, vec_ull_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+  len = 8;\n+  vec_ull_result1 = vec_xl_len (data_ull, len);\n+  vec_ull_expected1 = (vector unsigned long long){1001, 0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_ull_result1[i] != vec_ull_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_ull_result1[%d] = %lld; vec_ull_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_ull_result1[i], i, vec_ull_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   short_src1 = (vector short int) {0, 20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {0, 20, 30, 40, 50, 60, 70, 80};\n+  len = 16;\n+  vec_f_result1 = vec_xl_len (data_f, len);\n+  vec_f_expected1 = (vector float){100000.0, 100001.0, 100002.0, 100003.0};\n \n-   expected_result = 0;\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_f_result1[i] != vec_f_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_f_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_f_result1[i], i, vec_f_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+  len = 8;\n+  vec_f_result1 = vec_xl_len (data_f, len);\n+  vec_f_expected1 = (vector float){100000.0, 100001.0, 0.0, 0.0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_f_result1[i] != vec_f_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_f_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_f_result1[i], i, vec_f_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+  len = 16;\n+  vec_d_result1 = vec_xl_len (data_d, len);\n+  vec_d_expected1 = (vector double){1000000.0, 1000001.0};\n \n-   expected_result = 8;\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_d_result1[i] != vec_d_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_d_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_d_result1[i], i, vec_d_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+  len = 8;\n+  vec_d_result1 = vec_xl_len (data_d, len);\n+  vec_d_expected1 = (vector double){1000000.0, 0.0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_d_result1[i] != vec_d_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: vec_xl_len(), len = %d, vec_d_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_d_result1[i], i, vec_d_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   short_src1 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n-   short_src2 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n-\n-   expected_result = 1;\n+  vec_s128_expected1 = (vector __int128_t){12800000};\n+  vec_s128_result1 = vec_xl_len (data_128, len);\n \n-   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+  if (vec_s128_expected1[0] != vec_s128_result1[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xl_len(), len = %d, vec_s128_result1[0] = %lld %llu; \",\n+\t      len, vec_s128_result1[0] >> 64,\n+\t      vec_s128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+       printf(\"vec_s128_expected1[0] = %lld %llu\\n\",\n+\t      vec_s128_expected1[0] >> 64,\n+\t      vec_s128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+#else\n+       abort ();\n+#endif\n+    }\n \n-   if (result != expected_result)\n+  vec_u128_result1 = vec_xl_len (data_u128, len);\n+  vec_u128_expected1 = (vector __uint128_t){12800001};\n+  if (vec_u128_expected1[0] != vec_u128_result1[0])\n #ifdef DEBUG\n-      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+    {\n+       printf(\"Error: vec_xl_len(), len = %d, vec_u128_result1[0] = %lld; \",\n+\t      len, vec_u128_result1[0] >> 64,\n+\t      vec_u128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+       printf(\"vec_u128_expected1[0] = %lld\\n\",\n+\t      vec_u128_expected1[0] >> 64,\n+\t      vec_u128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+    }\n #else\n-      abort();\n+    abort ();\n #endif\n \n-   ushort_src1 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 0};\n-   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+    /* Tests to ensure the vec_xl_len() is properly optimized with a pre\n+       and post data initialization is done.  */\n \n-   expected_result = 7;\n+  len = 16;\n \n-   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+  vec_sc_expected1 = (vector signed char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n \n-   if (result != expected_result)\n+  input_c = (vector signed char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 };\n+  vec_sc_result1 = vec_xl_len (&input_c[0], len);\n+  input_c = (vector signed char){ 9, 10, 11, 12, 13, 14, 15, 16,\n+\t\t\t\t  17, 18, 19, 20, 21, 22, 23, 24 };\n+  \n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_sc_result1[i] != vec_sc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_sc_result1[%d] = %d; vec_sc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_sc_result1[i], i, vec_sc_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   ushort_src1 = (vector short unsigned int) {20, 0, 40, 50, 60, 70, 80, 90};\n-   ushort_src2 = (vector short unsigned int) {20, 0, 40, 50, 60, 70, 80, 90};\n-\n-   expected_result = 1;\n-\n-   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+  len = 16;\n+  vec_uc_expected1 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t     10, 11, 12, 13, 14, 15, 16 };\n+  input_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t   10, 11, 12, 13, 14, 15, 16 };\n+  vec_uc_result1 = vec_xl_len (&input_uc[0], len);\n+  input_uc = (vector unsigned char){ 10, 11, 12, 13, 14, 15, 16,\n+\t\t\t\t     17, 18, 19, 20, 21, 22, 23, 24 };\n \n-   if (result != expected_result)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   ushort_src1 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n-   ushort_src2 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+  len = 16;\n+  vec_ss_expected1 = (vector signed short){ 10, 11, 12, 13, 14, 15, 16, 17 };\n+  input_ssi = (vector signed short){ 10, 11, 12, 13, 14, 15, 16, 17 };\n+  vec_ss_result1 = vec_xl_len (&input_ssi[0], len);\n+  input_ssi = (vector signed short){ 14, 15, 16, 17, 18, 19, 20, 21 };\n \n-   expected_result = 8;\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_ss_result1[i] != vec_ss_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_ss_result1[%d] = %d; vec_ss_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ss_result1[i], i, vec_ss_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+  len = 16;\n+  vec_us_expected1 = (vector unsigned short){ 11, 12, 13, 14, 15, 16, 17, 18 };\n+  input_usi = (vector unsigned short){ 11, 12, 13, 14, 15, 16, 17, 18 };\n+  vec_us_result1 = vec_xl_len (&input_usi[0], len);\n+  input_usi = (vector unsigned short){ 15, 16, 17, 18, 19, 20, 21, 22 };\n \n-   if (result != expected_result)\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_us_result1[i] != vec_us_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_us_result1[%d] = %d; vec_us_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_us_result1[i], i, vec_us_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   /* int */\n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {1, 20, 3, 4};\n+  len = 16;\n+  vec_si_expected1 = (vector int){ 100, 101, 102, 103 };\n+  input_si = (vector int){ 100, 101, 102, 103 };\n+  vec_si_result1 = vec_xl_len (&input_si[0], len);\n+  input_si = (vector int){ 102, 103, 104, 105 };\n \n-   expected_result = 1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_si_result1[i] != vec_si_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_si_result1[%d] = %d; vec_si_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_si_result1[i], i, vec_si_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+  len = 16;\n+  vec_ui_expected1 = (vector unsigned int){101, 102, 103, 104};\n+  input_ui = (vector unsigned int){101, 102, 103, 104};\n+  vec_ui_result1 = vec_xl_len (&input_ui[0], len);\n+  input_ui = (vector unsigned int){ 103, 104, 105, 106 };\n \n-   if (result != expected_result)\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_ui_result1[i] != vec_ui_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_ui_result1[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_ui_result1[i], i, vec_ui_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   int_src1 = (vector int) {1, 2, 3, 4};\n-   int_src2 = (vector int) {1, 2, 3, 4};\n+#if 1  \n+  len = 16;\n+  vec_sll_expected1 = (vector signed long long){1000, 1001};\n+  input_sll = (vector signed long long ){1000, 1001};\n+  vec_sll_result1 = vec_xl_len ((signed long long int *)&input_sll[0], len);\n+  input_sll = (vector signed long long){1001, 1002};\n \n-   expected_result = 4;\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_sll_result1[i] != vec_sll_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_sll_result1[%d] = %lld; vec_sll_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_sll_result1[i], i, vec_sll_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+  len = 16;\n+  vec_ull_expected1 = (vector unsigned long long int){1001, 1002};\n+  input_ull = (vector unsigned long long int){1001, 1002};\n+  vec_ull_result1 = vec_xl_len ((unsigned long long int *)&input_ull[0], len);\n+  input_ull = (vector unsigned long long int){1002, 1003};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_ull_result1[i] != vec_ull_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_ull_result1[%d] = %lld; vec_ull_expected1[%d] = %lld\\n\",\n+\t       len, i,  vec_ull_result1[i], i, vec_ull_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n+#endif\n+    }\n #endif\n \n-   int_src1 = (vector int) {1, 2, 0, 4};\n-   int_src2 = (vector int) {1, 2, 0, 4};\n+  \n+  len = 16;\n+  vec_f_expected1 = (vector float){100000.0, 100001.0, 100002.0, 100003.0};\n+  input_f = (vector float){100000.0, 100001.0, 100002.0, 100003.0};\n+  vec_f_result1 = vec_xl_len (&input_f[0], len);\n+  input_f = (vector float){100001.0, 100002.0, 100003.0, 100004.0};\n \n-   expected_result = 2;\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_f_result1[i] != vec_f_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_f_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_f_result1[i], i, vec_f_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+  len = 16;\n+  vec_d_expected1 = (vector double){1000000.0, 1000001.0};\n+  input_d = (vector double){1000000.0, 1000001.0};\n+  vec_d_result1 = vec_xl_len (&input_d[0], len);\n+  input_d = (vector double){1000001.0, 1000002.0};\n \n-   if (result != expected_result)\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_d_result1[i] != vec_d_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_d_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       len, i,  vec_d_result1[i], i, vec_d_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n \n-   int_src1 = (vector int) {1, 0, 3, 4};\n-   int_src2 = (vector int) {1, 2, 3, 4};\n+  len = 16;\n+  vec_s128_expected1 = (vector __int128_t){12800000};\n+  input_128 = (vector __int128_t){12800000};\n+  vec_s128_result1 = vec_xl_len (&input_128[0], len);\n+  input_128 = (vector __int128_t){12345678};\n \n-   expected_result = 1;\n+  if (vec_s128_expected1[0] != vec_s128_result1[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_s128_result1[0] = %lld %llu; \",\n+\t      len, vec_s128_result1[0] >> 64,\n+\t      vec_s128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+       printf(\"vec_s128_expected1[0] = %lld %llu\\n\",\n+\t      vec_s128_expected1[0] >> 64,\n+\t      vec_s128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+#else\n+       abort ();\n+#endif\n+    }\n \n-   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+  len = 16;\n+  vec_u128_expected1 = (vector __uint128_t){12800001};\n+  input_u128 = (vector __uint128_t){12800001};\n+  vec_u128_result1 = vec_xl_len (&input_u128[0], len);\n+  input_u128 = (vector __uint128_t){98765432};\n \n-   if (result != expected_result)\n+  if (vec_u128_expected1[0] != vec_u128_result1[0])\n #ifdef DEBUG\n-      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+    {\n+       printf(\"Error: pre/post initialzation vec_xl_len(), len = %d, vec_u128_result1[0] = %lld; \",\n+\t      len, vec_u128_result1[0] >> 64,\n+\t      vec_u128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+       printf(\"vec_u128_expected1[0] = %lld\\n\",\n+\t      vec_u128_expected1[0] >> 64,\n+\t      vec_u128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+    }\n #else\n-      abort();\n+    abort ();\n #endif\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+    /* Tests to ensure the vec_xl_len_r() is properly optimized with a pre\n+       and post data initialization is done.  */\n \n-   expected_result = 0;\n+  len = 16;\n+  vec_uc_expected1 = (vector unsigned char){ 16,15, 14, 13, 12, 11, 10, 9,\n+\t\t\t\t\t     8, 7, 6, 5, 4, 3, 2, 1 };\n+  input_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t   10, 11, 12, 13, 14, 15, 16 };\n+  vec_uc_result1 = vec_xl_len_r (&input_uc[0], len);\n+  input_uc = (vector unsigned char){ 10, 11, 12, 13, 14, 15, 16,\n+\t\t\t\t     17, 18, 19, 20, 21, 22, 23, 24 };\n \n-   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n-\n-   if (result != expected_result)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n #ifdef DEBUG\n-      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n+\tprintf(\"Error: pre/post initialzation vec_xl_len_r(), len = %d, vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       len, i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n #else\n-      abort();\n+\tabort ();\n #endif\n+    }\n+\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 0};\n-   uint_src2 = (vector unsigned int) {1, 2, 3, 0};\n \n-   expected_result = 3;\n \n-   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n \n-   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n-   uint_src2 = (vector unsigned int) {1, 2, 3, 4};\n \n-   expected_result = 4;\n \n-   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n \n-   if (result != expected_result)\n-#ifdef DEBUG\n-      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n-\t     result, expected_result);\n-#else\n-      abort();\n-#endif\n \n-}"}, {"sha": "a3e89cfaa74e17181028dad76077df18d81d92a8", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e777839cc458da2c24bda8e7be1665be1f709c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h?ref=84e777839cc458da2c24bda8e7be1665be1f709c", "patch": "@@ -135,7 +135,7 @@ void foo (vector double *out, vector double *in, vector long *p_l, vector bool l\n \n   *in++ = vec_andc (inbl0, in1);\n   *in++ = vec_andc (in0, inbl1);\n-}\n+\n \n int main()\n {"}]}