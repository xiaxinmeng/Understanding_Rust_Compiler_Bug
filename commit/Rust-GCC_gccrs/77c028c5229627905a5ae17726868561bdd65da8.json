{"sha": "77c028c5229627905a5ae17726868561bdd65da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjMDI4YzUyMjk2Mjc5MDVhNWFlMTc3MjY4Njg1NjFiZGQ2NWRhOA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-08-31T13:58:03Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-08-31T13:58:03Z"}, "message": "Move some complex simplifications to match.pd\n\n2015-08-31  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (SIN, COS, TAN, COSH): Reorder for consistency.\n\t(CEXPI): New operator list.\n\t(real (conj (x)), imag (conj (x)), real (x +- y), real (cexpi (x)),\n\timag (cexpi (x)), conj (conj (x)), conj (complex (x, y))):\n\tConverted from ...\n\t* fold-const.c (fold_unary_loc, fold_binary_loc): ... here. Remove.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/complex-7.c: New file.\n\nFrom-SVN: r227343", "tree": {"sha": "c26fa5f5145de35b67986eba639c14373a7fd516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26fa5f5145de35b67986eba639c14373a7fd516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77c028c5229627905a5ae17726868561bdd65da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c028c5229627905a5ae17726868561bdd65da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c028c5229627905a5ae17726868561bdd65da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c028c5229627905a5ae17726868561bdd65da8/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eaef98f3afdda197bc052c4a341d7a3529a77106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef98f3afdda197bc052c4a341d7a3529a77106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaef98f3afdda197bc052c4a341d7a3529a77106"}], "stats": {"total": 157, "additions": 63, "deletions": 94}, "files": [{"sha": "0e97a190a20a405b70b841a9cee1c9db5e414f6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c028c5229627905a5ae17726868561bdd65da8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c028c5229627905a5ae17726868561bdd65da8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77c028c5229627905a5ae17726868561bdd65da8", "patch": "@@ -1,3 +1,12 @@\n+2015-08-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (SIN, COS, TAN, COSH): Reorder for consistency.\n+\t(CEXPI): New operator list.\n+\t(real (conj (x)), imag (conj (x)), real (x +- y), real (cexpi (x)),\n+\timag (cexpi (x)), conj (conj (x)), conj (complex (x, y))):\n+\tConverted from ...\n+\t* fold-const.c (fold_unary_loc, fold_binary_loc): ... here. Remove.\n+\n 2015-08-31  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-loop-manip.c (find_uses_to_rename_stmt)"}, {"sha": "a5d58a86692762a695d23be63c8afa9de00fcc87", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=77c028c5229627905a5ae17726868561bdd65da8", "patch": "@@ -7732,21 +7732,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t}\n       return NULL_TREE;\n \n-    case CONJ_EXPR:\n-      if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn fold_convert_loc (loc, type, arg0);\n-      if (TREE_CODE (arg0) == COMPLEX_EXPR)\n-\t{\n-\t  tree itype = TREE_TYPE (type);\n-\t  tree rpart = fold_convert_loc (loc, itype, TREE_OPERAND (arg0, 0));\n-\t  tree ipart = fold_convert_loc (loc, itype, TREE_OPERAND (arg0, 1));\n-\t  return fold_build2_loc (loc, COMPLEX_EXPR, type, rpart,\n-\t\t\t      negate_expr (ipart));\n-\t}\n-      if (TREE_CODE (arg0) == CONJ_EXPR)\n-\treturn fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-      return NULL_TREE;\n-\n     case BIT_NOT_EXPR:\n       /* Convert ~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify.  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n@@ -7776,81 +7761,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \treturn NULL_TREE;\n       return fold_convert_loc (loc, type, tem);\n \n-    case REALPART_EXPR:\n-      if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn fold_convert_loc (loc, type, arg0);\n-      if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-\t{\n-\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n-\t  tem = fold_build2_loc (loc, TREE_CODE (arg0), itype,\n-\t\t\t     fold_build1_loc (loc, REALPART_EXPR, itype,\n-\t\t\t\t\t  TREE_OPERAND (arg0, 0)),\n-\t\t\t     fold_build1_loc (loc, REALPART_EXPR, itype,\n-\t\t\t\t\t  TREE_OPERAND (arg0, 1)));\n-\t  return fold_convert_loc (loc, type, tem);\n-\t}\n-      if (TREE_CODE (arg0) == CONJ_EXPR)\n-\t{\n-\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n-\t  tem = fold_build1_loc (loc, REALPART_EXPR, itype,\n-\t\t\t     TREE_OPERAND (arg0, 0));\n-\t  return fold_convert_loc (loc, type, tem);\n-\t}\n-      if (TREE_CODE (arg0) == CALL_EXPR)\n-\t{\n-\t  tree fn = get_callee_fndecl (arg0);\n-\t  if (fn && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL)\n-\t    switch (DECL_FUNCTION_CODE (fn))\n-\t      {\n-\t      CASE_FLT_FN (BUILT_IN_CEXPI):\n-\t        fn = mathfn_built_in (type, BUILT_IN_COS);\n-\t\tif (fn)\n-\t          return build_call_expr_loc (loc, fn, 1, CALL_EXPR_ARG (arg0, 0));\n-\t\tbreak;\n-\n-\t      default:\n-\t\tbreak;\n-\t      }\n-\t}\n-      return NULL_TREE;\n-\n-    case IMAGPART_EXPR:\n-      if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn build_zero_cst (type);\n-      if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-\t{\n-\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n-\t  tem = fold_build2_loc (loc, TREE_CODE (arg0), itype,\n-\t\t\t     fold_build1_loc (loc, IMAGPART_EXPR, itype,\n-\t\t\t\t\t  TREE_OPERAND (arg0, 0)),\n-\t\t\t     fold_build1_loc (loc, IMAGPART_EXPR, itype,\n-\t\t\t\t\t  TREE_OPERAND (arg0, 1)));\n-\t  return fold_convert_loc (loc, type, tem);\n-\t}\n-      if (TREE_CODE (arg0) == CONJ_EXPR)\n-\t{\n-\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n-\t  tem = fold_build1_loc (loc, IMAGPART_EXPR, itype, TREE_OPERAND (arg0, 0));\n-\t  return fold_convert_loc (loc, type, negate_expr (tem));\n-\t}\n-      if (TREE_CODE (arg0) == CALL_EXPR)\n-\t{\n-\t  tree fn = get_callee_fndecl (arg0);\n-\t  if (fn && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL)\n-\t    switch (DECL_FUNCTION_CODE (fn))\n-\t      {\n-\t      CASE_FLT_FN (BUILT_IN_CEXPI):\n-\t        fn = mathfn_built_in (type, BUILT_IN_SIN);\n-\t\tif (fn)\n-\t          return build_call_expr_loc (loc, fn, 1, CALL_EXPR_ARG (arg0, 0));\n-\t\tbreak;\n-\n-\t      default:\n-\t\tbreak;\n-\t      }\n-\t}\n-      return NULL_TREE;\n-\n     case INDIRECT_REF:\n       /* Fold *&X to X if X is an lvalue.  */\n       if (TREE_CODE (op0) == ADDR_EXPR)"}, {"sha": "50de7bbf8a63889cd80995c79c1f72b775708058", "filename": "gcc/match.pd", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=77c028c5229627905a5ae17726868561bdd65da8", "patch": "@@ -55,10 +55,11 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list POW10 BUILT_IN_POW10F BUILT_IN_POW10 BUILT_IN_POW10L)\n (define_operator_list SQRT BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n (define_operator_list CBRT BUILT_IN_CBRTF BUILT_IN_CBRT BUILT_IN_CBRTL)\n-(define_operator_list SIN BUILT_IN_SIN BUILT_IN_SINL BUILT_IN_SINF)\n-(define_operator_list COS BUILT_IN_COS BUILT_IN_COSL BUILT_IN_COSF)\n-(define_operator_list TAN BUILT_IN_TAN BUILT_IN_TANL BUILT_IN_TANF)\n-(define_operator_list COSH BUILT_IN_COSH BUILT_IN_COSHL BUILT_IN_COSHF)\n+(define_operator_list SIN BUILT_IN_SINF BUILT_IN_SIN BUILT_IN_SINL)\n+(define_operator_list COS BUILT_IN_COSF BUILT_IN_COS BUILT_IN_COSL)\n+(define_operator_list TAN BUILT_IN_TANF BUILT_IN_TAN BUILT_IN_TANL)\n+(define_operator_list COSH BUILT_IN_COSHF BUILT_IN_COSH BUILT_IN_COSHL)\n+(define_operator_list CEXPI BUILT_IN_CEXPIF BUILT_IN_CEXPI BUILT_IN_CEXPIL)\n \n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n@@ -1312,6 +1313,36 @@ along with GCC; see the file COPYING3.  If not see\n  (imagpart (complex @0 @1))\n  @1)\n \n+/* Sometimes we only care about half of a complex expression.  */\n+(simplify\n+ (realpart (convert?:s (conj:s @0)))\n+ (convert (realpart @0)))\n+(simplify\n+ (imagpart (convert?:s (conj:s @0)))\n+ (convert (negate (imagpart @0))))\n+(for part (realpart imagpart)\n+ (for op (plus minus)\n+  (simplify\n+   (part (convert?:s@2 (op:s @0 @1)))\n+   (convert (op (part @0) (part @1))))))\n+(simplify\n+ (realpart (convert?:s (CEXPI:s @0)))\n+ (convert (COS @0)))\n+(simplify\n+ (imagpart (convert?:s (CEXPI:s @0)))\n+ (convert (SIN @0)))\n+\n+/* conj(conj(x)) -> x  */\n+(simplify\n+ (conj (convert? (conj @0)))\n+ (if (tree_nop_conversion_p (TREE_TYPE (@0), type))\n+  (convert @0)))\n+\n+/* conj({x,y}) -> {x,-y}  */\n+(simplify\n+ (conj (convert?:s (complex:s @0 @1)))\n+ (with { tree itype = TREE_TYPE (type); }\n+  (complex (convert:itype @0) (negate (convert:itype @1)))))\n \n /* BSWAP simplifications, transforms checked by gcc.dg/builtin-bswap-8.c.  */\n (for bswap (BUILT_IN_BSWAP16 BUILT_IN_BSWAP32 BUILT_IN_BSWAP64)"}, {"sha": "24f93142db6cecc7a9d94793a18cb51c29f6a95f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77c028c5229627905a5ae17726868561bdd65da8", "patch": "@@ -1,3 +1,7 @@\n+2015-08-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/complex-7.c: New file.\n+\n 2015-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/swaps-p8-19.c: New test."}, {"sha": "20a2a3785f69ca15b221d09c3aab085c76ba6ac9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/complex-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c028c5229627905a5ae17726868561bdd65da8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-7.c?ref=77c028c5229627905a5ae17726868561bdd65da8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+float f(_Complex float x, _Complex float y){\n+  x += y;\n+  return __builtin_cimagf (x);\n+}\n+\n+double g(double x){\n+  _Complex double c = __builtin_cexpi (x);\n+  return __builtin_creal (c);\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_cos\" \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \"IMAGPART_EXPR\" 2 \"forwprop1\"} } */"}]}