{"sha": "07893d4fd98948870e6922570cea3f364a2b8e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4OTNkNGZkOTg5NDg4NzBlNjkyMjU3MGNlYTNmMzY0YTJiOGUxNg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-08-13T16:02:52Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-08-13T16:02:52Z"}, "message": "s390-modes.def [...]: Declare new condition code modes.\n\n\t* s390-modes.def [CCL1, CCL2, CCT1, CCT2, CCT3, CCUR, CCSR]: Declare\n\tnew condition code modes.\n\ts390.c (s390_match_ccmode_set): Handle those new CC modes.\n\t(s390_select_ccmode): Likewise.\n\t(s390_branch_condition_mask): Likewise.\n\n\t* s390-protos.h (s390_tm_ccmode): Declare.\n\ts390.c (s390_tm_ccmode): New function.\n\t(s390_match_ccmode): Allow VOIDmode as REQ_MODE.\n\n\t* s390.md (\"*cmpdi_tm2\"): Rename to \"*tmdi_ext\".\n\t(\"*cmpsi_tm2\"): Rename to \"*tmsi_ext\".\n\t(\"*cmpqi_tm2\"): Rename to \"*tmqi_ext\".\n\n\t(\"*cmpdi_tm_reg\", \"*cmpdi_tm_mem\", \"*cmpsi_tm_reg\", \"*cmpsi_tm_mem\",\n\t\"*cmphi_tm_sub\",\"*cmphi_cct_0\",  \"*cmpqi_tm\", \"*cmpqi_tm_sub\",\n\t\"*cmpqi_cct_0\", \"*tm_0\"): Remove, replace by ...\n\t(\"*tmdi_reg\", \"*tmsi_reg\", \"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\",\n\t\"*tmqi_mem\", \"*tmhi_full\", \"*tmqi_full\"): ... these new patterns.\n\n\t(\"*ltgr\", \"*cmpdi_ccs_0_64\", \"*cmpdi_ccs_0_31\", \"*ltr\", \"*icm15\",\n\t\"*icm15_cconly\", \"*cmpsi_ccs_0\", \"*icm3\", \"*cmphi_ccs_0\", \"*icm1\",\n\t\"*cmpqi_ccs_0\"): Remove, replace by ...\n\t(\"*tstdi_sign\", \"*tstdi\", \"*tstdi_cconly\", \"*tstdi_cconly_31\",\n\t\"*tstsi\", \"*tstsi_cconly\", \"*tstsi_cconly2\", \"*tsthi\", \"*tsthi_cconly\",\n\t\"*tstqi\", \"*tstqi_cconly\"): ... these new patterns.\n\n\t(\"*cmpsidi_ccs\"): Remove, replace by ...\n\t(\"*cmpsi_ccs_sign\"): ... this new pattern.\n\t(\"*cmpdi_ccs_sign\", \"*cmpdi_ccu_zero\"): New patterns.\n\n\t(\"*cmpqi_ccu_0\", \"*cmpqi_ccu_immed\"): Remove, replace by ...\n\t(\"*cli\"): ... this new pattern.\n\n\t(\"*adddi3_sign\", \"*adddi3_zero_cc\", \"*adddi3_zero_cconly\",\n\t\"*adddi3_zero\", \"*adddi3_cc\", \"*adddi3_cconly\", \"*adddi3_cconly2\"):\n\tNew patterns.\n\t(\"adddi3_64\"): Rename to \"*adddi3_64\".\n\t(\"adddi3_31\"): Replace by insn and splitter \"*adddi3_31\".\n\t(\"adddi3\"): Adapt expander.\n\n\t(\"*addsi3_cc\"): Allow \"general_operand\" for operand 2.\n\t(\"*addsi3_carry1_cc\", \"*addsi3_carry1_cconly\",\n\t\"*addsi3_carry2_cc\", \"*addsi3_carry2_cconly\"): New patterns.\n\n\t(\"addhi3\", \"addqi3\"): Remove, replace by ...\n\t(\"*addsi3_sign\", \"*addsi3_sub\"): ... these new patterns.\n\n\t(\"*subdi3_sign\", \"*subdi3_zero_cc\", \"*subdi3_zero_cconly\",\n\t\"*subdi3_zero\", \"*subdi3_cc\", \"*subdi3_cconly\"): New patterns.\n\t(\"subdi3\"): Replace by insn and splitter \"*subdi3_31\".\n\t(\"subdi3\"): New expander.\n\n\t(\"*subsi3_borrow_cc\", \"*subsi3_borrow_cconly\"): New patterns.\n\n\t(\"subhi3\", \"subqi3\"): Remove, replace by ...\n\t(\"*subsi3_sign\", \"*subsi3_sub\"): ... these new patterns.\n\n\t(\"*muldi3_sign\"): New pattern.\n\t(\"muldi3\"): Do not clobber CC.\n\t(\"mulsi3\"): Likewise.\n\t(\"mulsi_6432\"): Likewise.\n\nFrom-SVN: r56256", "tree": {"sha": "c4b92666bb51d8f255465ca61baaa409316c7f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b92666bb51d8f255465ca61baaa409316c7f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07893d4fd98948870e6922570cea3f364a2b8e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07893d4fd98948870e6922570cea3f364a2b8e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07893d4fd98948870e6922570cea3f364a2b8e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07893d4fd98948870e6922570cea3f364a2b8e16/comments", "author": null, "committer": null, "parents": [{"sha": "db62867bed8c2555454c4157df69648330300a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db62867bed8c2555454c4157df69648330300a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db62867bed8c2555454c4157df69648330300a40"}], "stats": {"total": 1414, "additions": 939, "deletions": 475}, "files": [{"sha": "97917790b130a2fc4d08a81b3eea1f154faf1e41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07893d4fd98948870e6922570cea3f364a2b8e16", "patch": "@@ -1,3 +1,68 @@\n+2002-08-13  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* s390-modes.def [CCL1, CCL2, CCT1, CCT2, CCT3, CCUR, CCSR]: Declare\n+\tnew condition code modes.\n+\ts390.c (s390_match_ccmode_set): Handle those new CC modes.\n+\t(s390_select_ccmode): Likewise.\n+\t(s390_branch_condition_mask): Likewise.\n+\n+\t* s390-protos.h (s390_tm_ccmode): Declare.\n+\ts390.c (s390_tm_ccmode): New function.\n+\t(s390_match_ccmode): Allow VOIDmode as REQ_MODE.\n+\n+\t* s390.md (\"*cmpdi_tm2\"): Rename to \"*tmdi_ext\".\n+\t(\"*cmpsi_tm2\"): Rename to \"*tmsi_ext\".\n+\t(\"*cmpqi_tm2\"): Rename to \"*tmqi_ext\".\n+\n+\t(\"*cmpdi_tm_reg\", \"*cmpdi_tm_mem\", \"*cmpsi_tm_reg\", \"*cmpsi_tm_mem\",\n+\t\"*cmphi_tm_sub\",\"*cmphi_cct_0\",  \"*cmpqi_tm\", \"*cmpqi_tm_sub\",\n+\t\"*cmpqi_cct_0\", \"*tm_0\"): Remove, replace by ...\n+\t(\"*tmdi_reg\", \"*tmsi_reg\", \"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\",\n+\t\"*tmqi_mem\", \"*tmhi_full\", \"*tmqi_full\"): ... these new patterns.\n+\n+\t(\"*ltgr\", \"*cmpdi_ccs_0_64\", \"*cmpdi_ccs_0_31\", \"*ltr\", \"*icm15\",\n+\t\"*icm15_cconly\", \"*cmpsi_ccs_0\", \"*icm3\", \"*cmphi_ccs_0\", \"*icm1\", \n+\t\"*cmpqi_ccs_0\"): Remove, replace by ...\n+\t(\"*tstdi_sign\", \"*tstdi\", \"*tstdi_cconly\", \"*tstdi_cconly_31\",\n+\t\"*tstsi\", \"*tstsi_cconly\", \"*tstsi_cconly2\", \"*tsthi\", \"*tsthi_cconly\", \n+\t\"*tstqi\", \"*tstqi_cconly\"): ... these new patterns.\n+\n+\t(\"*cmpsidi_ccs\"): Remove, replace by ...\n+\t(\"*cmpsi_ccs_sign\"): ... this new pattern.\n+\t(\"*cmpdi_ccs_sign\", \"*cmpdi_ccu_zero\"): New patterns.\n+\n+\t(\"*cmpqi_ccu_0\", \"*cmpqi_ccu_immed\"): Remove, replace by ...\n+\t(\"*cli\"): ... this new pattern.\n+\n+\t(\"*adddi3_sign\", \"*adddi3_zero_cc\", \"*adddi3_zero_cconly\",\n+\t\"*adddi3_zero\", \"*adddi3_cc\", \"*adddi3_cconly\", \"*adddi3_cconly2\"):\n+\tNew patterns.\n+\t(\"adddi3_64\"): Rename to \"*adddi3_64\".\n+\t(\"adddi3_31\"): Replace by insn and splitter \"*adddi3_31\".\n+\t(\"adddi3\"): Adapt expander.\n+\n+\t(\"*addsi3_cc\"): Allow \"general_operand\" for operand 2.\n+\t(\"*addsi3_carry1_cc\", \"*addsi3_carry1_cconly\", \n+\t\"*addsi3_carry2_cc\", \"*addsi3_carry2_cconly\"): New patterns.\n+\n+\t(\"addhi3\", \"addqi3\"): Remove, replace by ...\n+\t(\"*addsi3_sign\", \"*addsi3_sub\"): ... these new patterns.\n+\n+\t(\"*subdi3_sign\", \"*subdi3_zero_cc\", \"*subdi3_zero_cconly\",\n+\t\"*subdi3_zero\", \"*subdi3_cc\", \"*subdi3_cconly\"): New patterns.\n+\t(\"subdi3\"): Replace by insn and splitter \"*subdi3_31\".\n+\t(\"subdi3\"): New expander.\n+\n+\t(\"*subsi3_borrow_cc\", \"*subsi3_borrow_cconly\"): New patterns.\n+\n+\t(\"subhi3\", \"subqi3\"): Remove, replace by ...\n+\t(\"*subsi3_sign\", \"*subsi3_sub\"): ... these new patterns.\n+\n+\t(\"*muldi3_sign\"): New pattern.\n+\t(\"muldi3\"): Do not clobber CC.\n+\t(\"mulsi3\"): Likewise.\n+\t(\"mulsi_6432\"): Likewise.\n+\n 2002-08-13  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md: Call CC_STATUS_INIT in all peepnoles"}, {"sha": "db577aa90ae5602b40f7e2312f45e96419bbf230", "filename": "gcc/config/s390/s390-modes.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-modes.def?ref=07893d4fd98948870e6922570cea3f364a2b8e16", "patch": "@@ -24,6 +24,13 @@ Boston, MA 02111-1307, USA.  */\n CC (CCZ)\n CC (CCA)\n CC (CCL)\n+CC (CCL1)\n+CC (CCL2)\n CC (CCU)\n+CC (CCUR)\n CC (CCS)\n+CC (CCSR)\n CC (CCT)\n+CC (CCT1)\n+CC (CCT2)\n+CC (CCT3)"}, {"sha": "a85e350a4daaaf017cdba27ad92c45a4ed885950", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=07893d4fd98948870e6922570cea3f364a2b8e16", "patch": "@@ -46,6 +46,7 @@ extern int s390_single_qi PARAMS ((rtx, enum machine_mode, int));\n extern int s390_extract_qi PARAMS ((rtx, enum machine_mode, int));\n \n extern int s390_match_ccmode PARAMS ((rtx, enum machine_mode));\n+extern enum machine_mode s390_tm_ccmode PARAMS ((rtx, rtx, int));\n extern enum machine_mode s390_select_ccmode PARAMS ((enum rtx_code, rtx, rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n extern int legitimate_la_operand_p PARAMS ((rtx));"}, {"sha": "b43883b137561a0c400a40865ebe3644efa8d582", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 183, "deletions": 12, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=07893d4fd98948870e6922570cea3f364a2b8e16", "patch": "@@ -172,19 +172,22 @@ s390_match_ccmode_set (set, req_mode)\n   switch (set_mode)\n     {\n     case CCSmode:\n-      if (req_mode != CCSmode)\n-        return 0;\n-      break;\n+    case CCSRmode:\n     case CCUmode:\n-      if (req_mode != CCUmode)\n-        return 0;\n-      break;\n+    case CCURmode:\n     case CCLmode:\n-      if (req_mode != CCLmode)\n+    case CCL1mode:\n+    case CCL2mode:\n+    case CCT1mode:\n+    case CCT2mode:\n+    case CCT3mode:\n+      if (req_mode != set_mode)\n         return 0;\n       break;\n+\n     case CCZmode:\n-      if (req_mode != CCSmode && req_mode != CCUmode && req_mode != CCTmode)\n+      if (req_mode != CCSmode && req_mode != CCUmode && req_mode != CCTmode\n+\t  && req_mode != CCSRmode && req_mode != CCURmode)\n         return 0;\n       break;\n  \n@@ -197,7 +200,8 @@ s390_match_ccmode_set (set, req_mode)\n \n /* Return true if every SET in INSN that sets the CC register \n    has source and destination with matching CC modes and that \n-   CC mode is at least as constrained as REQ_MODE.  */\n+   CC mode is at least as constrained as REQ_MODE.  \n+   If REQ_MODE is VOIDmode, always return false.  */\n  \n int\n s390_match_ccmode (insn, req_mode)\n@@ -206,6 +210,10 @@ s390_match_ccmode (insn, req_mode)\n {\n   int i;\n \n+  /* s390_tm_ccmode returns VOIDmode to indicate failure.  */\n+  if (req_mode == VOIDmode)\n+    return 0;\n+\n   if (GET_CODE (PATTERN (insn)) == SET)\n     return s390_match_ccmode_set (PATTERN (insn), req_mode);\n \n@@ -221,6 +229,45 @@ s390_match_ccmode (insn, req_mode)\n   return 1;\n }\n \n+/* If a test-under-mask instruction can be used to implement \n+   (compare (and ... OP1) OP2), return the CC mode required\n+   to do that.  Otherwise, return VOIDmode.  \n+   MIXED is true if the instruction can distinguish between\n+   CC1 and CC2 for mixed selected bits (TMxx), it is false\n+   if the instruction cannot (TM).  */\n+\n+enum machine_mode\n+s390_tm_ccmode (op1, op2, mixed)\n+     rtx op1;\n+     rtx op2;\n+     int mixed;\n+{\n+  int bit0, bit1;\n+\n+  /* ??? Fixme: should work on CONST_DOUBLE as well.  */\n+  if (GET_CODE (op1) != CONST_INT || GET_CODE (op2) != CONST_INT)\n+    return VOIDmode;\n+\n+  /* Selected bits all zero: CC0.  */\n+  if (INTVAL (op2) == 0)\n+    return CCTmode;\n+\n+  /* Selected bits all one: CC3.  */\n+  if (INTVAL (op2) == INTVAL (op1))\n+    return CCT3mode;\n+\n+  /* Exactly two bits selected, mixed zeroes and ones: CC1 or CC2.  */\n+  if (mixed)\n+    {\n+      bit1 = exact_log2 (INTVAL (op2));\n+      bit0 = exact_log2 (INTVAL (op1) ^ INTVAL (op2));\n+      if (bit0 != -1 && bit1 != -1)\n+        return bit0 > bit1 ? CCT1mode : CCT2mode;\n+    }\n+\n+  return VOIDmode;\n+}\n+\n /* Given a comparison code OP (EQ, NE, etc.) and the operands \n    OP0 and OP1 of a COMPARE, return the mode to be used for the \n    comparison.  */\n@@ -239,6 +286,28 @@ s390_select_ccmode (code, op0, op1)\n \t    || GET_CODE (op1) == NEG)\n \t  return CCLmode;\n \n+\tif (GET_CODE (op0) == AND)\n+\t  {\n+\t    /* Check whether we can potentially do it via TM.  */\n+\t    enum machine_mode ccmode;\n+\t    ccmode = s390_tm_ccmode (XEXP (op0, 1), op1, 1);\n+\t    if (ccmode != VOIDmode)\n+\t      {\n+\t\t/* Relax CCTmode to CCZmode to allow fall-back to AND\n+\t\t   if that turns out to be beneficial.  */\n+\t        return ccmode == CCTmode ? CCZmode : ccmode;\n+\t      }\n+\t  }\n+\n+\tif (register_operand (op0, HImode) \n+\t    && GET_CODE (op1) == CONST_INT\n+\t    && (INTVAL (op1) == -1 || INTVAL (op1) == 65535))\n+\t  return CCT3mode;\n+\tif (register_operand (op0, QImode) \n+\t    && GET_CODE (op1) == CONST_INT\n+\t    && (INTVAL (op1) == -1 || INTVAL (op1) == 255))\n+\t  return CCT3mode;\n+\n \treturn CCZmode;\n \n       case LE:\n@@ -253,12 +322,29 @@ s390_select_ccmode (code, op0, op1)\n       case UNGE:\n       case UNGT:\n       case LTGT:\n+\tif ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND)\n+\t    && GET_CODE (op1) != CONST_INT)\n+\t  return CCSRmode;\n \treturn CCSmode;\n \n-      case LEU:\n       case LTU:\n       case GEU:\n+\tif (GET_CODE (op0) == PLUS)\n+\t  return CCL1mode;\n+\n+\tif ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND)\n+\t    && GET_CODE (op1) != CONST_INT)\n+\t  return CCURmode;\n+\treturn CCUmode;\n+\n+      case LEU:\n       case GTU:\n+\tif (GET_CODE (op0) == MINUS)\n+\t  return CCL2mode;\n+\n+\tif ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND)\n+\t    && GET_CODE (op1) != CONST_INT)\n+\t  return CCURmode;\n \treturn CCUmode;\n \n       default:\n@@ -295,13 +381,61 @@ s390_branch_condition_mask (code)\n         }\n       break;\n \n+    case CCT1mode:\n+      switch (GET_CODE (code))\n+        {\n+        case EQ:\treturn CC1;\n+\tcase NE:\treturn CC0 | CC2 | CC3;\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n+    case CCT2mode:\n+      switch (GET_CODE (code))\n+        {\n+        case EQ:\treturn CC2;\n+\tcase NE:\treturn CC0 | CC1 | CC3;\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n+    case CCT3mode:\n+      switch (GET_CODE (code))\n+        {\n+        case EQ:\treturn CC3;\n+\tcase NE:\treturn CC0 | CC1 | CC2;\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n     case CCLmode:\n       switch (GET_CODE (code))\n         {\n         case EQ:\treturn CC0 | CC2;\n \tcase NE:\treturn CC1 | CC3;\n-\tcase UNORDERED:\treturn CC2 | CC3;  /* carry */\n-\tcase ORDERED:\treturn CC0 | CC1;  /* no carry */\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n+    case CCL1mode:\n+      switch (GET_CODE (code))\n+        {\n+\tcase LTU:\treturn CC2 | CC3;  /* carry */\n+\tcase GEU:\treturn CC0 | CC1;  /* no carry */\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n+    case CCL2mode:\n+      switch (GET_CODE (code))\n+        {\n+\tcase GTU:\treturn CC0 | CC1;  /* borrow */\n+\tcase LEU:\treturn CC2 | CC3;  /* no borrow */\n \tdefault:\n \t  abort ();\n         }\n@@ -321,6 +455,20 @@ s390_branch_condition_mask (code)\n         }\n       break;\n \n+    case CCURmode:\n+      switch (GET_CODE (code))\n+        {\n+        case EQ:\treturn CC0;\n+        case NE:\treturn CC2 | CC1 | CC3;\n+        case LTU:\treturn CC2;\n+        case GTU:\treturn CC1;\n+        case LEU:\treturn CC0 | CC2;\n+        case GEU:\treturn CC0 | CC1;\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n+\n     case CCSmode:\n       switch (GET_CODE (code))\n         {\n@@ -341,6 +489,29 @@ s390_branch_condition_mask (code)\n \tdefault:\n \t  abort ();\n         }\n+      break;\n+\n+    case CCSRmode:\n+      switch (GET_CODE (code))\n+        {\n+        case EQ:\treturn CC0;\n+        case NE:\treturn CC2 | CC1 | CC3;\n+        case LT:\treturn CC2;\n+        case GT:\treturn CC1;\n+        case LE:\treturn CC0 | CC2;\n+        case GE:\treturn CC0 | CC1;\n+\tcase UNORDERED:\treturn CC3;\n+\tcase ORDERED:\treturn CC0 | CC2 | CC1;\n+\tcase UNEQ:\treturn CC0 | CC3;\n+        case UNLT:\treturn CC2 | CC3;\n+        case UNGT:\treturn CC1 | CC3;\n+        case UNLE:\treturn CC0 | CC2 | CC3;\n+        case UNGE:\treturn CC0 | CC1 | CC3;\n+\tcase LTGT:\treturn CC2 | CC1;\n+\tdefault:\n+\t  abort ();\n+        }\n+      break;\n \n     default:\n       abort ();"}, {"sha": "35e2d3edc4f5dc31dea8f6f05095959d077b858a", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 683, "deletions": 463, "changes": 1146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07893d4fd98948870e6922570cea3f364a2b8e16/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=07893d4fd98948870e6922570cea3f364a2b8e16", "patch": "@@ -191,30 +191,6 @@\n   DONE;\n }\")\n \n-;(define_expand \"cmphi\"\n-;  [(set (reg:CC 33)\n-;        (compare:CC (match_operand:HI 0 \"register_operand\" \"\")\n-;                    (match_operand:HI 1 \"general_operand\" \"\")))]\n-;  \"\"\n-;  \"\n-;{\n-;  s390_compare_op0 = operands[0];\n-;  s390_compare_op1 = operands[1];\n-;  DONE;\n-;}\")\n-\n-;(define_expand \"cmpqi\"\n-;  [(set (reg:CC 33)\n-;        (compare:CC (match_operand:QI 0 \"register_operand\" \"\")\n-;                    (match_operand:QI 1 \"general_operand\" \"\")))]\n-;  \"\"\n-;  \"\n-;{\n-;  s390_compare_op0 = operands[0];\n-;  s390_compare_op1 = operands[1];\n-;  DONE;\n-;}\")\n-\n (define_expand \"cmpdf\"\n   [(set (reg:CC 33)\n         (compare:CC (match_operand:DF 0 \"register_operand\" \"\")\n@@ -240,9 +216,9 @@\n }\")\n \n \n-; DI instructions\n+; Test-under-Mask (zero_extract) instructions\n \n-(define_insn \"*cmpdi_tm2\"\n+(define_insn \"*tmdi_ext\"\n   [(set (reg 33)\n         (compare (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"d\")\n \t                          (match_operand:DI 1 \"const_int_operand\" \"n\")\n@@ -272,142 +248,86 @@\n }\"\n   [(set_attr \"op_type\" \"RI\")])\n \n-(define_insn \"*cmpdi_tm_reg\"\n+(define_insn \"*tmsi_ext\"\n   [(set (reg 33)\n-        (compare (and:DI (match_operand:DI 0 \"register_operand\" \"%d\")\n-                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n+        (compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n+\t                          (match_operand:SI 1 \"const_int_operand\" \"n\")\n+                                  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n                  (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode) && TARGET_64BIT\n-   && s390_single_hi (operands[1], DImode, 0) >= 0\"\n+  \"s390_match_ccmode(insn, CCTmode)\n+   && INTVAL (operands[1]) >= 1 && INTVAL (operands[2]) >= 0 \n+   && INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n+   && (INTVAL (operands[1]) + INTVAL (operands[2]) - 1) >> 4\n+      == INTVAL (operands[2]) >> 4\"\n   \"*\n {\n-  int part = s390_single_hi (operands[1], DImode, 0);\n-  operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n+  int part = INTVAL (operands[2]) >> 4;\n+  int block = (1 << INTVAL (operands[1])) - 1;\n+  int shift = 16 - INTVAL (operands[1]) - (INTVAL (operands[2]) & 15);\n+\n+  operands[2] = GEN_INT (block << shift);\n \n   switch (part)\n     {\n-      case 0: return \\\"tmhh\\\\t%0,%x1\\\";\n-      case 1: return \\\"tmhl\\\\t%0,%x1\\\";\n-      case 2: return \\\"tmlh\\\\t%0,%x1\\\";\n-      case 3: return \\\"tmll\\\\t%0,%x1\\\";\n+      case 0: return \\\"tmh\\\\t%0,%x2\\\";\n+      case 1: return \\\"tml\\\\t%0,%x2\\\";\n       default: abort ();\n     }\n }\"\n   [(set_attr \"op_type\" \"RI\")])\n \n-(define_insn \"*cmpdi_tm_mem\"\n+(define_insn \"*tmqi_ext\"\n   [(set (reg 33)\n-        (compare (and:DI (match_operand:DI 0 \"s_operand\" \"%Qo\")\n-                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n+        (compare (zero_extract:SI (match_operand:QI 0 \"s_operand\" \"Qo\")\n+\t                          (match_operand:SI 1 \"const_int_operand\" \"n\")\n+                                  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n                  (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode) && TARGET_64BIT\n-   && s390_single_qi (operands[1], DImode, 0) >= 0\"\n+  \"s390_match_ccmode(insn, CCTmode)\n+   && INTVAL (operands[1]) >= 1 && INTVAL (operands[2]) >= 0 \n+   && INTVAL (operands[1]) + INTVAL (operands[2]) <= 8\"\n   \"*\n {\n-  int part = s390_single_qi (operands[1], DImode, 0);\n-  operands[1] = GEN_INT (s390_extract_qi (operands[1], DImode, part));\n+  int block = (1 << INTVAL (operands[1])) - 1;\n+  int shift = 8 - INTVAL (operands[1]) - INTVAL (operands[2]);\n \n-  operands[0] = gen_rtx_MEM (QImode, \n-\t\t\t     plus_constant (XEXP (operands[0], 0), part));\n-  return \\\"tm\\\\t%0,%b1\\\";\n+  operands[2] = GEN_INT (block << shift);\n+  return \\\"tm\\\\t%0,%b2\\\";\n }\"\n   [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*ltgr\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n-                 (match_operand:DI 1 \"const0_operand\" \"\")))\n-   (set (match_operand:DI 2 \"register_operand\" \"=d\")\n-        (match_dup 0))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"ltgr\\\\t%2,%0\"\n-  [(set_attr \"op_type\" \"RRE\")])\n-\n-(define_insn \"*cmpdi_ccs_0_64\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n-                 (match_operand:DI 1 \"const0_operand\" \"\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"ltgr\\\\t%0,%0\"\n-  [(set_attr \"op_type\" \"RRE\")])\n-\n-(define_insn \"*cmpdi_ccs_0_31\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n-                 (match_operand:DI 1 \"const0_operand\" \"\")))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"srda\\\\t%0,0\"\n-  [(set_attr \"op_type\" \"RS\")])\n-\n-(define_insn \"*cmpdi_ccs\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d,d,d\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,K,m\")))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"@\n-   cgr\\\\t%0,%1\n-   cghi\\\\t%0,%c1\n-   cg\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RI,RXE\")\n-   (set_attr \"atype\"    \"reg,reg,mem\")])\n-   \n-(define_insn \"*cmpdi_ccu\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d,d\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,m\")))]\n-  \"s390_match_ccmode(insn, CCUmode) && TARGET_64BIT\"\n-  \"@\n-   clgr\\\\t%0,%1\n-   clg\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXE\")\n-   (set_attr \"atype\"   \"reg,mem\")])\n-\n-(define_insn \"*cmpdi_ccu_mem\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"s_operand\" \"oQ\")\n-                 (match_operand:DI 1 \"s_imm_operand\" \"oQ\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")\n-   (set_attr \"atype\"   \"mem\")])\n-\n-; SI instructions\n+; Test-under-Mask instructions\n \n-(define_insn \"*cmpsi_tm2\"\n+(define_insn \"*tmdi_reg\"\n   [(set (reg 33)\n-        (compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n-\t                          (match_operand:SI 1 \"const_int_operand\" \"n\")\n-                                  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\n-   && INTVAL (operands[1]) >= 1 && INTVAL (operands[2]) >= 0 \n-   && INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n-   && (INTVAL (operands[1]) + INTVAL (operands[2]) - 1) >> 4\n-      == INTVAL (operands[2]) >> 4\"\n+        (compare (and:DI (match_operand:DI 0 \"register_operand\" \"%d\")\n+                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n+  \"TARGET_64BIT\n+   && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n+   && s390_single_hi (operands[1], DImode, 0) >= 0\"\n   \"*\n {\n-  int part = INTVAL (operands[2]) >> 4;\n-  int block = (1 << INTVAL (operands[1])) - 1;\n-  int shift = 16 - INTVAL (operands[1]) - (INTVAL (operands[2]) & 15);\n-\n-  operands[2] = GEN_INT (block << shift);\n+  int part = s390_single_hi (operands[1], DImode, 0);\n+  operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"tmh\\\\t%0,%x2\\\";\n-      case 1: return \\\"tml\\\\t%0,%x2\\\";\n+      case 0: return \\\"tmhh\\\\t%0,%x1\\\";\n+      case 1: return \\\"tmhl\\\\t%0,%x1\\\";\n+      case 2: return \\\"tmlh\\\\t%0,%x1\\\";\n+      case 3: return \\\"tmll\\\\t%0,%x1\\\";\n       default: abort ();\n     }\n }\"\n   [(set_attr \"op_type\" \"RI\")])\n \n-(define_insn \"*cmpsi_tm_reg\"\n+(define_insn \"*tmsi_reg\"\n   [(set (reg 33)\n         (compare (and:SI (match_operand:SI 0 \"register_operand\" \"%d\")\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\n+                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n    && s390_single_hi (operands[1], SImode, 0) >= 0\"\n   \"*\n {\n@@ -423,12 +343,32 @@\n }\"\n   [(set_attr \"op_type\" \"RI\")])\n \n-(define_insn \"*cmpsi_tm_mem\"\n+(define_insn \"*tmdi_mem\"\n+  [(set (reg 33)\n+        (compare (and:DI (match_operand:DI 0 \"s_operand\" \"%Qo\")\n+                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n+  \"TARGET_64BIT\n+   && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n+   && s390_single_qi (operands[1], DImode, 0) >= 0\"\n+  \"*\n+{\n+  int part = s390_single_qi (operands[1], DImode, 0);\n+  operands[1] = GEN_INT (s390_extract_qi (operands[1], DImode, part));\n+\n+  operands[0] = gen_rtx_MEM (QImode, \n+\t\t\t     plus_constant (XEXP (operands[0], 0), part));\n+  return \\\"tm\\\\t%0,%b1\\\";\n+}\"\n+  [(set_attr \"op_type\" \"SI\")\n+   (set_attr \"atype\"   \"mem\")])\n+\n+(define_insn \"*tmsi_mem\"\n   [(set (reg 33)\n         (compare (and:SI (match_operand:SI 0 \"s_operand\" \"%Qo\")\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\n+                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n    && s390_single_qi (operands[1], SImode, 0) >= 0\"\n   \"*\n {\n@@ -442,109 +382,125 @@\n   [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*ltr\"\n+(define_insn \"*tmhi_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d\")\n-                 (match_operand:SI 1 \"const0_operand\" \"\")))\n-   (set (match_operand:SI 2 \"register_operand\" \"=d\")\n-        (match_dup 0))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"ltr\\\\t%2,%0\"\n-  [(set_attr \"op_type\" \"RR\")])\n+        (compare (and:SI (subreg:SI (match_operand:HI 0 \"s_operand\" \"%Qo\") 0)\n+                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n+   && s390_single_qi (operands[1], HImode, 0) >= 0\"\n+  \"*\n+{\n+  int part = s390_single_qi (operands[1], HImode, 0);\n+  operands[1] = GEN_INT (s390_extract_qi (operands[1], HImode, part));\n \n-(define_insn \"*icm15\"\n-  [(set (reg 33)\n-        (compare (match_operand:SI 0 \"s_operand\" \"Qo\")\n-                 (match_operand:SI 1 \"const0_operand\" \"\")))\n-   (set (match_operand:SI 2 \"register_operand\" \"=d\")\n-        (match_dup 0))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"icm\\\\t%2,15,%0\"\n-  [(set_attr \"op_type\" \"RS\")\n+  operands[0] = gen_rtx_MEM (QImode, \n+\t\t\t     plus_constant (XEXP (operands[0], 0), part));\n+  return \\\"tm\\\\t%0,%b1\\\";\n+}\"\n+  [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*icm15_cconly\"\n+(define_insn \"*tmqi_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"s_operand\" \"Qo\")\n-                 (match_operand:SI 1 \"const0_operand\" \"\")))\n-   (clobber (match_scratch:SI 2 \"=d\"))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"icm\\\\t%2,15,%0\"\n-  [(set_attr \"op_type\" \"RS\")\n+        (compare (and:SI (subreg:SI (match_operand:QI 0 \"s_operand\" \"%Qo\") 0)\n+                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\"\n+  \"tm\\\\t%0,%b1\"\n+  [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*cmpsi_ccs_0\"\n+(define_insn \"*tmhi_full\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d\")\n-                 (match_operand:SI 1 \"const0_operand\" \"\")))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"ltr\\\\t%0,%0\"\n-  [(set_attr \"op_type\" \"RR\")])\n+        (compare (match_operand:HI 0 \"register_operand\" \"d\")\n+                 (match_operand:HI 1 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (GEN_INT (-1), operands[1], 1))\"\n+  \"tml\\\\t%0,65535\"\n+  [(set_attr \"op_type\" \"RX\")])\n \n-(define_insn \"*cmpsidi_ccs\"\n+(define_insn \"*tmqi_full\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d\")\n-                 (sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\"))))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"ch\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR\")\n-   (set_attr \"atype\"   \"mem\")])\n+        (compare (match_operand:QI 0 \"register_operand\" \"d\")\n+                 (match_operand:QI 1 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (GEN_INT (-1), operands[1], 1))\"\n+  \"tml\\\\t%0,255\"\n+  [(set_attr \"op_type\" \"RI\")])\n \n-(define_insn \"*cmpsi_ccs\"\n+\n+; Load-and-Test instructions\n+\n+(define_insn \"*tstdi_sign\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d,d,d\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,K,m\")))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"@\n-   cr\\\\t%0,%1\n-   chi\\\\t%0,%c1\n-   c\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR,RI,RX\")\n-   (set_attr \"atype\"   \"reg,reg,mem\")])\n-   \n-(define_insn \"*cmpsi_ccu\"\n+        (compare (ashiftrt:DI (ashift:DI (subreg:DI (match_operand:SI 0 \"register_operand\" \"d\") 0)\n+\t\t\t\t\t (const_int 32)) (const_int 32))\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:DI 2 \"register_operand\" \"=d\")\n+        (sign_extend:DI (match_dup 0)))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"ltgfr\\\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RRE\")])\n+\n+(define_insn \"*tstdi\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d,d\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,m\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"@\n-   clr\\\\t%0,%1\n-   cl\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR,RX\")\n-   (set_attr \"atype\"   \"reg,mem\")])\n+        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:DI 2 \"register_operand\" \"=d\")\n+        (match_dup 0))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"ltgr\\\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RRE\")])\n \n-(define_insn \"*cmpsi_ccu_mem\"\n+(define_insn \"*tstdi_cconly\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"s_operand\" \"oQ\")\n-                 (match_operand:SI 1 \"s_imm_operand\" \"oQ\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\\\t%O0(4,%R0),%1\"\n-   [(set_attr \"op_type\" \"SS\")\n-    (set_attr \"atype\"   \"mem\")])\n+        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"ltgr\\\\t%0,%0\"\n+  [(set_attr \"op_type\" \"RRE\")])\n \n+(define_insn \"*tstdi_cconly_31\"\n+  [(set (reg 33)\n+        (compare (match_operand:DI 0 \"register_operand\" \"d\")\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))]\n+  \"s390_match_ccmode(insn, CCSmode) && !TARGET_64BIT\"\n+  \"srda\\\\t%0,0\"\n+  [(set_attr \"op_type\" \"RS\")])\n \n-; HI instructions\n+(define_insn \"*tstsi\"\n+  [(set (reg 33)\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,Q\")\n+                 (match_operand:SI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:SI 2 \"register_operand\" \"=d,d\")\n+        (match_dup 0))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   ltr\\\\t%2,%0\n+   icm\\\\t%2,15,%0\"\n+  [(set_attr \"op_type\" \"RR,RS\")\n+   (set_attr \"atype\"   \"reg,mem\")])\n \n-(define_insn \"*cmphi_tm_sub\"\n+(define_insn \"*tstsi_cconly\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:HI 0 \"s_operand\" \"%Qo\") 0)\n-                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\n-   && s390_single_qi (operands[1], HImode, 0) >= 0\"\n-  \"*\n-{\n-  int part = s390_single_qi (operands[1], HImode, 0);\n-  operands[1] = GEN_INT (s390_extract_qi (operands[1], HImode, part));\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,Q\")\n+                 (match_operand:SI 1 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:SI 2 \"=X,d\"))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"@\n+   ltr\\\\t%0,%0\n+   icm\\\\t%2,15,%0\"\n+  [(set_attr \"op_type\" \"RR,RS\")\n+   (set_attr \"atype\"   \"reg,mem\")])\n \n-  operands[0] = gen_rtx_MEM (QImode, \n-\t\t\t     plus_constant (XEXP (operands[0], 0), part));\n-  return \\\"tm\\\\t%0,%b1\\\";\n-}\"\n-  [(set_attr \"op_type\" \"SI\")\n-   (set_attr \"atype\"   \"mem\")])\n+(define_insn \"*tstsi_cconly2\"\n+  [(set (reg 33)\n+        (compare (match_operand:SI 0 \"register_operand\" \"d\")\n+                 (match_operand:SI 1 \"const0_operand\" \"\")))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"ltr\\\\t%0,%0\"\n+  [(set_attr \"op_type\" \"RR\")])\n \n-(define_insn \"*icm3\"\n+(define_insn \"*tsthi\"\n   [(set (reg 33)\n         (compare (match_operand:HI 0 \"s_operand\" \"Qo\")\n                  (match_operand:HI 1 \"const0_operand\" \"\")))\n@@ -555,15 +511,7 @@\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*cmphi_cct_0\"\n-  [(set (reg 33)\n-        (compare (match_operand:HI 0 \"register_operand\" \"d\")\n-                 (match_operand:HI 1 \"const0_operand\"   \"\")))]\n-  \"s390_match_ccmode(insn, CCTmode)\"\n-  \"tml\\\\t%0,65535\"\n-  [(set_attr \"op_type\" \"RX\")])\n-\n-(define_insn \"*cmphi_ccs_0\"\n+(define_insn \"*tsthi_cconly\"\n   [(set (reg 33)\n         (compare (match_operand:HI 0 \"s_operand\" \"Qo\")\n                  (match_operand:HI 1 \"const0_operand\" \"\")))\n@@ -573,116 +521,117 @@\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*cmphi_ccu\"\n+(define_insn \"*tstqi\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"register_operand\" \"d\")\n-                 (match_operand:HI 1 \"s_imm_operand\" \"Qo\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clm\\\\t%0,3,%1\"\n+        (compare (match_operand:QI 0 \"s_operand\" \"Qo\")\n+                 (match_operand:QI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:QI 2 \"register_operand\" \"=d\")\n+        (match_dup 0))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"icm\\\\t%2,1,%0\"\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*cmphi_ccu_mem\"\n+(define_insn \"*tstqi_cconly\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"s_operand\" \"oQ\")\n-                 (match_operand:HI 1 \"s_imm_operand\" \"oQ\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")\n+        (compare (match_operand:QI 0 \"s_operand\" \"Qo\")\n+                 (match_operand:QI 1 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:QI 2 \"=d\"))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"icm\\\\t%2,1,%0\"\n+  [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n \n-; QI instructions\n+; Compare (signed) instructions\n \n-(define_insn \"*cmpqi_tm2\"\n+(define_insn \"*cmpdi_ccs_sign\"\n   [(set (reg 33)\n-        (compare (zero_extract:SI (match_operand:QI 0 \"s_operand\" \"Qo\")\n-\t                          (match_operand:SI 1 \"const_int_operand\" \"n\")\n-                                  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\n-   && INTVAL (operands[1]) >= 1 && INTVAL (operands[2]) >= 0 \n-   && INTVAL (operands[1]) + INTVAL (operands[2]) <= 8\"\n-  \"*\n-{\n-  int block = (1 << INTVAL (operands[1])) - 1;\n-  int shift = 8 - INTVAL (operands[1]) - INTVAL (operands[2]);\n-\n-  operands[2] = GEN_INT (block << shift);\n-  return \\\"tm\\\\t%0,%b2\\\";\n-}\"\n-  [(set_attr \"op_type\" \"SI\")\n-   (set_attr \"atype\"   \"mem\")])\n-\n-(define_insn \"*cmpqi_tm\"\n-  [(set (reg 33)\n-        (compare (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%d,Q\")\n-                         (match_operand:QI 1 \"immediate_operand\" \"n,n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\"\n+        (compare (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,m\"))\n+                 (match_operand:DI 0 \"register_operand\" \"d,d\")))]\n+  \"s390_match_ccmode(insn, CCSRmode) && TARGET_64BIT\"\n   \"@\n-   tml\\\\t%0,%b1\n-   tm\\\\t%0,%b1\"\n-  [(set_attr \"op_type\" \"RI,SI\")\n+   cgfr\\\\t%0,%1\n+   cgf\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXE\")\n    (set_attr \"atype\"   \"reg,mem\")])\n \n-(define_insn \"*cmpqi_tm_sub\"\n+(define_insn \"*cmpdi_ccs\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:QI 0 \"s_operand\" \"%Qo\") 0)\n-                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode)\"\n-  \"tm\\\\t%0,%b1\"\n-  [(set_attr \"op_type\" \"SI\")\n+        (compare (match_operand:DI 0 \"register_operand\" \"d,d,d\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,K,m\")))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"@\n+   cgr\\\\t%0,%1\n+   cghi\\\\t%0,%c1\n+   cg\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RI,RXE\")\n+   (set_attr \"atype\"    \"reg,reg,mem\")])\n+   \n+(define_insn \"*cmpsi_ccs_sign\"\n+  [(set (reg 33)\n+        (compare (sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\"))\n+                 (match_operand:SI 0 \"register_operand\" \"d\")))]\n+  \"s390_match_ccmode(insn, CCSRmode)\"\n+  \"ch\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RX\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*icm1\"\n+(define_insn \"*cmpsi_ccs\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_operand\" \"Qo\")\n-                 (match_operand:QI 1 \"const0_operand\" \"\")))\n-   (set (match_operand:QI 2 \"register_operand\" \"=d\")\n-        (match_dup 0))]\n+        (compare (match_operand:SI 0 \"register_operand\" \"d,d,d\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,K,m\")))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n-  \"icm\\\\t%2,1,%0\"\n-  [(set_attr \"op_type\" \"RS\")\n-   (set_attr \"atype\"   \"mem\")])\n+  \"@\n+   cr\\\\t%0,%1\n+   chi\\\\t%0,%c1\n+   c\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RR,RI,RX\")\n+   (set_attr \"atype\"   \"reg,reg,mem\")])\n+   \n \n-(define_insn \"*tm_0\"\n+; Compare (unsigned) instructions\n+\n+(define_insn \"*cmpdi_ccu_zero\"\n   [(set (reg 33)\n-        (compare (zero_extend:SI (and:QI (match_operand:QI 0 \"s_operand\" \"Qo\")\n-                                         (match_operand:QI 1 \"immediate_operand\" \"\")))\n-                 (const_int 0)))]\n-  \"s390_match_ccmode(insn, CCTmode) &&\n-   INTVAL(operands[1]) >= 0 && INTVAL(operands[1]) < 256\"\n-  \"tm\\\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RI\")\n-   (set_attr \"atype\"   \"mem\")])\n+        (compare (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,m\"))\n+                 (match_operand:DI 0 \"register_operand\" \"d,d\")))]\n+  \"s390_match_ccmode(insn, CCURmode) && TARGET_64BIT\"\n+  \"@\n+   clgfr\\\\t%0,%1\n+   clgf\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXE\")\n+   (set_attr \"atype\"   \"reg,mem\")])\n \n-(define_insn \"*cmpqi_cct_0\"\n+(define_insn \"*cmpdi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"register_operand\" \"d\")\n-                 (match_operand:QI 1 \"const0_operand\"   \"\")))]\n-  \"s390_match_ccmode(insn, CCTmode)\"\n-  \"tml\\\\t%0,255\"\n-  [(set_attr \"op_type\" \"RI\")])\n+        (compare (match_operand:DI 0 \"register_operand\" \"d,d\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,m\")))]\n+  \"s390_match_ccmode(insn, CCUmode) && TARGET_64BIT\"\n+  \"@\n+   clgr\\\\t%0,%1\n+   clg\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXE\")\n+   (set_attr \"atype\"   \"reg,mem\")])\n \n-(define_insn \"*cmpqi_ccs_0\"\n+(define_insn \"*cmpsi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_operand\" \"Qo\")\n-                 (match_operand:QI 1 \"const0_operand\" \"\")))\n-   (clobber (match_scratch:QI 2 \"=d\"))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"icm\\\\t%2,1,%0\"\n-  [(set_attr \"op_type\" \"RS\")\n-   (set_attr \"atype\"   \"mem\")])\n+        (compare (match_operand:SI 0 \"register_operand\" \"d,d\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,m\")))]\n+  \"s390_match_ccmode(insn, CCUmode)\"\n+  \"@\n+   clr\\\\t%0,%1\n+   cl\\\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RR,RX\")\n+   (set_attr \"atype\"   \"reg,mem\")])\n \n-(define_insn \"*cmpqi_ccu_0\"\n+(define_insn \"*cmphi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_operand\"      \"Qo\")\n-                 (match_operand:QI 1 \"const0_operand\" \"\")))]\n+        (compare (match_operand:HI 0 \"register_operand\" \"d\")\n+                 (match_operand:HI 1 \"s_imm_operand\" \"Qo\")))]\n   \"s390_match_ccmode(insn, CCUmode)\"\n-  \"cli\\\\t%0,0\"\n-  [(set_attr \"op_type\" \"SI\")\n+  \"clm\\\\t%0,3,%1\"\n+  [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n (define_insn \"*cmpqi_ccu\"\n@@ -694,16 +643,42 @@\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"mem\")])\n \n-(define_insn \"*cmpqi_ccu_immed\"\n+(define_insn \"*cli\"\n   [(set (reg 33)\n         (compare (match_operand:QI 0 \"s_operand\" \"Qo\")\n-                 (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n-  \"s390_match_ccmode(insn, CCUmode) &&\n-   INTVAL(operands[1]) >= 0 && INTVAL(operands[1]) < 256\"\n-  \"cli\\\\t%0,%1\"\n+                 (match_operand:QI 1 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, CCUmode)\"\n+  \"cli\\\\t%0,%b1\"\n   [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n+(define_insn \"*cmpdi_ccu_mem\"\n+  [(set (reg 33)\n+        (compare (match_operand:DI 0 \"s_operand\" \"oQ\")\n+                 (match_operand:DI 1 \"s_imm_operand\" \"oQ\")))]\n+  \"s390_match_ccmode(insn, CCUmode)\"\n+  \"clc\\\\t%O0(8,%R0),%1\"\n+  [(set_attr \"op_type\" \"SS\")\n+   (set_attr \"atype\"   \"mem\")])\n+\n+(define_insn \"*cmpsi_ccu_mem\"\n+  [(set (reg 33)\n+        (compare (match_operand:SI 0 \"s_operand\" \"oQ\")\n+                 (match_operand:SI 1 \"s_imm_operand\" \"oQ\")))]\n+  \"s390_match_ccmode(insn, CCUmode)\"\n+  \"clc\\\\t%O0(4,%R0),%1\"\n+   [(set_attr \"op_type\" \"SS\")\n+    (set_attr \"atype\"   \"mem\")])\n+\n+(define_insn \"*cmphi_ccu_mem\"\n+  [(set (reg 33)\n+        (compare (match_operand:HI 0 \"s_operand\" \"oQ\")\n+                 (match_operand:HI 1 \"s_imm_operand\" \"oQ\")))]\n+  \"s390_match_ccmode(insn, CCUmode)\"\n+  \"clc\\\\t%O0(2,%R0),%1\"\n+  [(set_attr \"op_type\" \"SS\")\n+   (set_attr \"atype\"   \"mem\")])\n+\n (define_insn \"*cmpqi_ccu_mem\"\n   [(set (reg 33)\n         (compare (match_operand:QI 0 \"s_operand\" \"oQ\")\n@@ -3069,22 +3044,112 @@\n ; adddi3 instruction pattern(s).\n ;\n \n-(define_insn \"addaddr_esame\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a,a\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"%a,a\")\n-                 (match_operand:DI 2 \"nonmemory_operand\" \"J,a\")))]\n-  \"TARGET_64BIT && (((REGNO (operands[1]) == STACK_POINTER_REGNUM ) ||\n-     (REGNO (operands[1]) == BASE_REGISTER)) && \n-\t(GET_CODE (operands[2]) == REG ||\n-\t CONST_OK_FOR_LETTER_P (INTVAL (operands[2]),'J')))\"\n+(define_insn \"addaddr_esame\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a,a\")\n+        (plus:DI (match_operand:DI 1 \"register_operand\" \"%a,a\")\n+                 (match_operand:DI 2 \"nonmemory_operand\" \"J,a\")))]\n+  \"TARGET_64BIT && (((REGNO (operands[1]) == STACK_POINTER_REGNUM ) ||\n+     (REGNO (operands[1]) == BASE_REGISTER)) && \n+\t(GET_CODE (operands[2]) == REG ||\n+\t CONST_OK_FOR_LETTER_P (INTVAL (operands[2]),'J')))\"\n+  \"@\n+   la\\\\t%0,%c2(,%1)\n+   la\\\\t%0,0(%1,%2)\"\n+  [(set_attr \"op_type\" \"RX\")\n+   (set_attr \"atype\"   \"mem\")\n+   (set_attr \"type\"    \"la\")])\n+\n+(define_insn \"*adddi3_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_operand:DI 1 \"register_operand\" \"0,0\")))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   agfr\\\\t%0,%2\n+   agf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*adddi3_zero_cc\"\n+  [(set (reg 33) \n+        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                          (match_operand:DI 1 \"register_operand\" \"0,0\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (zero_extend:DI (match_dup 2)) (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   algfr\\\\t%0,%2\n+   algf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*adddi3_zero_cconly\"\n+  [(set (reg 33) \n+        (compare (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                          (match_operand:DI 1 \"register_operand\" \"0,0\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   algfr\\\\t%0,%2\n+   algf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*adddi3_zero\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_operand:DI 1 \"register_operand\" \"0,0\")))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   algfr\\\\t%0,%2\n+   algf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*adddi3_cc\"\n+  [(set (reg 33) \n+        (compare (plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   algr\\\\t%0,%2\n+   alg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*adddi3_cconly\"\n+  [(set (reg 33) \n+        (compare (plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n   \"@\n-   la\\\\t%0,%c2(,%1)\n-   la\\\\t%0,0(%1,%2)\"\n-  [(set_attr \"op_type\" \"RX\")\n-   (set_attr \"atype\"   \"mem\")\n-   (set_attr \"type\"    \"la\")])\n+   algr\\\\t%0,%2\n+   alg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*adddi3_cconly2\"\n+  [(set (reg 33) \n+        (compare (match_operand:DI 1 \"register_operand\" \"%0,0\")\n+                 (neg:SI (match_operand:DI 2 \"general_operand\" \"d,m\"))))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode(insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   algr\\\\t%0,%2\n+   alg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n \n-(define_insn \"adddi3_64\"\n+(define_insn \"*adddi3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n         (plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0\")\n                  (match_operand:DI 2 \"general_operand\" \"d,K,m\") ) )\n@@ -3097,51 +3162,48 @@\n   [(set_attr \"op_type\"  \"RRE,RI,RXE\")\n    (set_attr \"atype\"    \"reg,reg,mem\")])\n \n-(define_insn \"adddi3_31\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                 (match_operand:DI 2 \"general_operand\" \"d,m\") ) )\n+(define_insn_and_split \"*adddi3_31\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n+        (plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+                 (match_operand:DI 2 \"general_operand\" \"dm\") ) )\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n-  \"*\n-{\n-   switch (which_alternative)\n-     {\n-     case 0: /* d <- d */\n-       output_asm_insn (\\\"ar\\\\t%0,%2\\\", operands);\n-       output_asm_insn (\\\"alr\\\\t%N0,%N2\\\", operands);\n-       break;\n-\n-     case 1: /* d <- m */\n-       output_asm_insn (\\\"a\\\\t%0,%2\\\", operands);\n-       output_asm_insn (\\\"al\\\\t%N0,%N2\\\", operands);\n-       break;\n-\n-     default:\n-       abort ();\n-     }\n-\n-   output_asm_insn (\\\"brc\\\\t12,.+8\\\", operands);\n-   return \\\"ahi\\\\t%0,1\\\";\n-}\"\n-  [(set_attr \"op_type\" \"NN,NN\")\n-   (set_attr \"atype\"   \"reg,mem\")\n-   (set_attr \"type\"    \"o2,o2\")\n-   (set_attr \"length\"  \"12,16\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 3) (plus:SI (match_dup 4) (match_dup 5)))\n+     (clobber (reg:CC 33))])\n+   (parallel\n+    [(set (reg:CCL1 33)\n+          (compare:CCL1 (plus:SI (match_dup 7) (match_dup 8))\n+                        (match_dup 7)))\n+     (set (match_dup 6) (plus:SI (match_dup 7) (match_dup 8)))])\n+   (set (pc)\n+        (if_then_else (ltu (reg:CCL1 33) (const_int 0))\n+                      (pc)\n+                      (label_ref (match_dup 9))))\n+   (parallel\n+    [(set (match_dup 3) (plus:SI (match_dup 3) (const_int 1)))\n+     (clobber (reg:CC 33))])\n+   (match_dup 9)]\n+  \"operands[3] = operand_subword (operands[0], 0, 1, DImode);\n+   operands[4] = operand_subword (operands[1], 0, 1, DImode);\n+   operands[5] = operand_subword (operands[2], 0, 1, DImode);\n+   operands[6] = operand_subword (operands[0], 1, 1, DImode);\n+   operands[7] = operand_subword (operands[1], 1, 1, DImode);\n+   operands[8] = operand_subword (operands[2], 1, 1, DImode);\n+   operands[9] = gen_label_rtx ();\"\n+  [(set_attr \"op_type\"  \"NN\")\n+   (set_attr \"type\"     \"o3\")])\n \n (define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                 (match_operand:DI 2 \"general_operand\" \"\")))]\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+          (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                   (match_operand:DI 2 \"general_operand\" \"\")))\n+     (clobber (reg:CC 33))])]\n   \"\"\n-  \"\n-{\n-  if (TARGET_64BIT)\n-    emit_insn(gen_adddi3_64 (operands[0],operands[1],operands[2]));\n-  else\n-    emit_insn(gen_adddi3_31 (operands[0],operands[1],operands[2]));\n-  DONE;\t\t\n-}\")\n+  \"\")\n \n (define_insn \"*la_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -3178,14 +3240,68 @@\n     (set_attr \"atype\"    \"mem\")\n     (set_attr \"type\"     \"la\")])\n \n+(define_insn \"*addsi3_carry1_cc\"\n+  [(set (reg 33) \n+        (compare (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 1)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (plus:SI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode (insn, CCL1mode)\" \n+  \"@\n+   alr\\\\t%0,%2\n+   al\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*addsi3_carry1_cconly\"\n+  [(set (reg 33) \n+        (compare (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 1)))\n+   (clobber (match_scratch:SI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCL1mode)\" \n+  \"@\n+   alr\\\\t%0,%2\n+   al\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*addsi3_carry2_cc\"\n+  [(set (reg 33) \n+        (compare (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 2)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (plus:SI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode (insn, CCL1mode)\" \n+  \"@\n+   alr\\\\t%0,%2\n+   al\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*addsi3_carry2_cconly\"\n+  [(set (reg 33) \n+        (compare (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 2)))\n+   (clobber (match_scratch:SI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCL1mode)\" \n+  \"@\n+   alr\\\\t%0,%2\n+   al\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n (define_insn \"*addsi3_cc\"\n   [(set (reg 33) \n         (compare (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n-                          (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                  (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (plus:SI (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode(insn, CCLmode)\"\n+  \"s390_match_ccmode (insn, CCLmode)\" \n   \"@\n    alr\\\\t%0,%2\n    al\\\\t%0,%2\"\n@@ -3198,7 +3314,7 @@\n                           (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=d,d\"))]\n-  \"s390_match_ccmode(insn, CCLmode)\"\n+  \"s390_match_ccmode (insn, CCLmode)\" \n   \"@\n    alr\\\\t%0,%2\n    al\\\\t%0,%2\"\n@@ -3217,6 +3333,26 @@\n   [(set_attr \"op_type\"  \"RR,RX\")\n    (set_attr \"atype\"    \"reg,mem\")])  \n \n+(define_insn \"*addsi3_sign\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                 (sign_extend:SI (match_operand:HI 2 \"memory_operand\" \"m\"))))\n+   (clobber (reg:CC 33))]\n+  \"\"\n+  \"ah\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")])\n+\n+(define_insn \"*addsi3_sub\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                 (subreg:SI (match_operand:HI 2 \"memory_operand\" \"m\") 0)))\n+   (clobber (reg:CC 33))]\n+  \"\"\n+  \"ah\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")])\n+\n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n         (plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0\")\n@@ -3251,41 +3387,6 @@\n }\")\n \n \n-;\n-; addhi3 instruction pattern(s).\n-;\n-\n-(define_insn \"addhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n-        (plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-                 (match_operand:HI 2 \"general_operand\" \"d,K,m\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"@\n-   ar\\\\t%0,%2\n-   ahi\\\\t%0,%h2\n-   ah\\\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RI,RX\")\n-   (set_attr \"atype\"    \"reg,reg,mem\")])\n-\n-\n-;\n-; addqi3 instruction pattern(s).\n-;\n-\n-(define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d,d\")\n-        (plus:QI (match_operand:QI 1 \"register_operand\" \"%0,0\")\n-                 (match_operand:QI 2 \"general_operand\" \"a,n\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"@\n-   ar\\\\t%0,%2\n-   ahi\\\\t%0,%h2\"\n-  [(set_attr \"op_type\"  \"RX,RX\")\n-   (set_attr \"atype\"    \"reg,mem\")])\n-\n-\n ;\n ; adddf3 instruction pattern(s).\n ;\n@@ -3369,6 +3470,84 @@\n ; subdi3 instruction pattern(s).\n ;\n \n+(define_insn \"*subdi3_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                  (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   sgfr\\\\t%0,%2\n+   sgf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*subdi3_zero_cc\"\n+  [(set (reg 33) \n+        (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\")))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (match_dup 1) (zero_extend:DI (match_dup 2))))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   slgfr\\\\t%0,%2\n+   slgf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*subdi3_zero_cconly\"\n+  [(set (reg 33) \n+        (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                           (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n+  \"@\n+   slgfr\\\\t%0,%2\n+   slgf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])  \n+\n+(define_insn \"*subdi3_zero\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                  (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"d,m\"))))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   slgfr\\\\t%0,%2\n+   slgf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*subdi3_cc\"\n+  [(set (reg 33)\n+        (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                           (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode (insn, CCLmode)\"\n+  \"@\n+   slgr\\\\t%0,%2\n+   slg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*subdi3_cconly\"\n+  [(set (reg 33)\n+        (compare (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                           (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+  \"s390_match_ccmode (insn, CCLmode)\"\n+  \"@\n+   slgr\\\\t%0,%2\n+   slg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n (define_insn \"*subdi3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n@@ -3381,41 +3560,80 @@\n   [(set_attr \"op_type\"  \"RRE,RRE\")\n    (set_attr \"atype\"    \"reg,mem\")])\n \n-(define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                  (match_operand:DI 2 \"general_operand\" \"d,m\")))\n+(define_insn_and_split \"*subdi3_31\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                  (match_operand:DI 2 \"general_operand\" \"dm\") ) )\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"*\n-{\n-   switch (which_alternative)\n-     {\n-     case 0: /* d <- d */\n-       output_asm_insn (\\\"sr\\\\t%0,%2\\\", operands);\n-       output_asm_insn (\\\"slr\\\\t%N0,%N2\\\", operands);\n-       break;\n-     case 1: /* d <- m */\n-       output_asm_insn (\\\"s\\\\t%0,%2\\\", operands);\n-       output_asm_insn (\\\"sl\\\\t%N0,%N2\\\", operands);\n-       break;\n-\n-     default:\n-       abort ();\n-     }\n+  \"!TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 3) (minus:SI (match_dup 4) (match_dup 5)))\n+     (clobber (reg:CC 33))])\n+   (parallel\n+    [(set (reg:CCL2 33)\n+          (compare:CCL2 (minus:SI (match_dup 7) (match_dup 8))\n+                        (match_dup 7)))\n+     (set (match_dup 6) (minus:SI (match_dup 7) (match_dup 8)))])\n+   (set (pc)\n+        (if_then_else (gtu (reg:CCL2 33) (const_int 0))\n+                      (pc)\n+                      (label_ref (match_dup 9))))\n+   (parallel\n+    [(set (match_dup 3) (plus:SI (match_dup 3) (const_int -1)))\n+     (clobber (reg:CC 33))])\n+   (match_dup 9)]\n+  \"operands[3] = operand_subword (operands[0], 0, 1, DImode);\n+   operands[4] = operand_subword (operands[1], 0, 1, DImode);\n+   operands[5] = operand_subword (operands[2], 0, 1, DImode);\n+   operands[6] = operand_subword (operands[0], 1, 1, DImode);\n+   operands[7] = operand_subword (operands[1], 1, 1, DImode);\n+   operands[8] = operand_subword (operands[2], 1, 1, DImode);\n+   operands[9] = gen_label_rtx ();\"\n+  [(set_attr \"op_type\"  \"NN\")\n+   (set_attr \"type\"     \"o3\")])\n \n-   output_asm_insn (\\\"brc\\\\t11,.+8\\\", operands);\n-   return \\\"ahi\\\\t%0,-1\\\";\n-}\"\n-  [(set_attr \"op_type\"  \"NN,NN\")\n-   (set_attr \"atype\"    \"reg,mem\")\n-   (set_attr \"type\"     \"other,other\")\n-   (set_attr \"length\"   \"12,16\")])\n+(define_expand \"subdi3\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+          (minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                    (match_operand:DI 2 \"general_operand\" \"\")))\n+     (clobber (reg:CC 33))])]\n+  \"\"\n+  \"\")\n \n ;\n ; subsi3 instruction pattern(s).\n ;\n \n+(define_insn \"*subsi3_borrow_cc\"\n+  [(set (reg 33)\n+        (compare (minus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                           (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 1)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (minus:SI (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode(insn, CCL2mode)\"\n+  \"@\n+   slr\\\\t%0,%2\n+   sl\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n+(define_insn \"*subsi3_borrow_cconly\"\n+  [(set (reg 33)\n+        (compare (minus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                           (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_dup 1)))\n+   (clobber (match_scratch:SI 0 \"=d,d\"))]\n+  \"s390_match_ccmode(insn, CCL2mode)\"\n+  \"@\n+   slr\\\\t%0,%2\n+   sl\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"atype\"    \"reg,mem\")])\n+\n (define_insn \"*subsi3_cc\"\n   [(set (reg 33)\n         (compare (minus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n@@ -3443,6 +3661,26 @@\n   [(set_attr \"op_type\"  \"RR,RX\")\n    (set_attr \"atype\"    \"reg,mem\")])\n \n+(define_insn \"*subsi3_sign\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                  (sign_extend:SI (match_operand:HI 2 \"memory_operand\" \"m\"))))\n+   (clobber (reg:CC 33))]\n+  \"\"\n+  \"sh\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")])\n+\n+(define_insn \"*subsi3_sub\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                  (subreg:SI (match_operand:HI 2 \"memory_operand\" \"m\") 0)))\n+   (clobber (reg:CC 33))]\n+  \"\"\n+  \"sh\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")])\n+\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (minus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n@@ -3455,34 +3693,6 @@\n   [(set_attr \"op_type\"  \"RR,RX\")\n    (set_attr \"atype\"    \"reg,mem\")])\n \n-;\n-; subhi3 instruction pattern(s).\n-;\n-\n-(define_insn \"subhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n-        (minus:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n-                  (match_operand:HI 2 \"general_operand\" \"d,m\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"@\n-   sr\\\\t%0,%2\n-   sh\\\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX\")\n-   (set_attr \"atype\"    \"reg,mem\")])\n-\n-;\n-; subqi3 instruction pattern(s).\n-;\n-\n-(define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-        (minus:QI (match_operand:QI 1 \"register_operand\" \"0\")\n-                  (match_operand:QI 2 \"register_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"sr\\\\t%0,%2\"\n-   [(set_attr \"op_type\"  \"RR\")])\n \n ;\n ; subdf3 instruction pattern(s).\n@@ -3567,17 +3777,29 @@\n ; muldi3 instruction pattern(s).\n ;\n \n+(define_insn \"*muldi3_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (mult:DI (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))\n+                 (match_operand:DI 1 \"register_operand\" \"0,0\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   msgfr\\\\t%0,%2\n+   msgf\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"atype\"    \"reg,mem\")\n+   (set_attr \"type\"     \"imul\")])\n+\n+\n (define_insn \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n         (mult:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0\")\n-                 (match_operand:DI 2 \"general_operand\" \"d,K,m\")))\n-   (clobber (reg:CC 33))]\n+                 (match_operand:DI 2 \"general_operand\" \"d,K,m\")))]\n   \"TARGET_64BIT\"\n   \"@\n    msgr\\\\t%0,%2\n    mghi\\\\t%0,%h2\n    msg\\\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RI,RX\")\n+  [(set_attr \"op_type\"  \"RRE,RI,RXE\")\n    (set_attr \"atype\"    \"reg,reg,mem\")\n    (set_attr \"type\"     \"imul\")])\n \n@@ -3588,8 +3810,7 @@\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n         (mult:SI  (match_operand:SI 1 \"register_operand\" \"%0,0,0\")\n-                  (match_operand:SI 2 \"general_operand\" \"d,K,m\")))\n-   (clobber (reg:CC 33))]\n+                  (match_operand:SI 2 \"general_operand\" \"d,K,m\")))]\n   \"\"\n   \"@\n    msr\\\\t%0,%2\n@@ -3629,8 +3850,7 @@\n          (mult:DI (sign_extend:DI \n \t            (truncate:SI (match_operand:DI 1 \"register_operand\" \"0,0\")))\n                   (sign_extend:DI\n-\t            (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))\n-    (clobber (reg:CC 33))]\n+\t            (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))]\n    \"!TARGET_64BIT\"\n    \"@\n     mr\\\\t%0,%2"}]}