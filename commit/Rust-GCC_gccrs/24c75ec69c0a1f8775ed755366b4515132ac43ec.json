{"sha": "24c75ec69c0a1f8775ed755366b4515132ac43ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjNzVlYzY5YzBhMWY4Nzc1ZWQ3NTUzNjZiNDUxNTEzMmFjNDNlYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-11-10T05:03:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-11-10T05:03:10Z"}, "message": "cfganal.c (flow_dfs_compute_reverse_execute): Accept new argument holding last unvisited block.\n\n        * cfganal.c (flow_dfs_compute_reverse_execute): Accept new\n        argument holding last unvisited block.  Start search for\n        unvisited blocks at LAST_UNVISITED rather than EXIT_BLOCK.\n        (connect_infinite_loops_to_exit): Supply last unvisited block\n        to flow_dfs_compute_reverse_execute.\n\nFrom-SVN: r90386", "tree": {"sha": "453eca69dcf97f570dc02871c4ed8a3afd01fbff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/453eca69dcf97f570dc02871c4ed8a3afd01fbff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c75ec69c0a1f8775ed755366b4515132ac43ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c75ec69c0a1f8775ed755366b4515132ac43ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c75ec69c0a1f8775ed755366b4515132ac43ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c75ec69c0a1f8775ed755366b4515132ac43ec/comments", "author": null, "committer": null, "parents": [{"sha": "9686c8110ed08079e0351ba83fef7eb06d711c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9686c8110ed08079e0351ba83fef7eb06d711c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9686c8110ed08079e0351ba83fef7eb06d711c2d"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "ecf861b7de0f521723fd4147a944b09f02c0b4dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c75ec69c0a1f8775ed755366b4515132ac43ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c75ec69c0a1f8775ed755366b4515132ac43ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24c75ec69c0a1f8775ed755366b4515132ac43ec", "patch": "@@ -1,3 +1,11 @@\n+2004-11-09  Jeff Law  <law@redhat.com>\n+\n+\t* cfganal.c (flow_dfs_compute_reverse_execute): Accept new\n+\targument holding last unvisited block.  Start search for\n+\tunvisited blocks at LAST_UNVISITED rather than EXIT_BLOCK.\n+\t(connect_infinite_loops_to_exit): Supply last unvisited block\n+\tto flow_dfs_compute_reverse_execute.\n+\n 2004-10-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.md (fix_truncdfsi2): Handle e500"}, {"sha": "b98459e2845e64763da2c4baa015c6581176d6c8", "filename": "gcc/cfganal.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c75ec69c0a1f8775ed755366b4515132ac43ec/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c75ec69c0a1f8775ed755366b4515132ac43ec/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=24c75ec69c0a1f8775ed755366b4515132ac43ec", "patch": "@@ -50,7 +50,8 @@ typedef struct depth_first_search_dsS *depth_first_search_ds;\n static void flow_dfs_compute_reverse_init (depth_first_search_ds);\n static void flow_dfs_compute_reverse_add_bb (depth_first_search_ds,\n \t\t\t\t\t     basic_block);\n-static basic_block flow_dfs_compute_reverse_execute (depth_first_search_ds);\n+static basic_block flow_dfs_compute_reverse_execute (depth_first_search_ds,\n+\t\t\t\t\t\t     basic_block);\n static void flow_dfs_compute_reverse_finish (depth_first_search_ds);\n static bool flow_active_insn_p (rtx);\n \f\n@@ -613,7 +614,7 @@ add_noreturn_fake_exit_edges (void)\n void\n connect_infinite_loops_to_exit (void)\n {\n-  basic_block unvisited_block;\n+  basic_block unvisited_block = EXIT_BLOCK_PTR;\n   struct depth_first_search_dsS dfs_ds;\n \n   /* Perform depth-first search in the reverse graph to find nodes\n@@ -624,7 +625,8 @@ connect_infinite_loops_to_exit (void)\n   /* Repeatedly add fake edges, updating the unreachable nodes.  */\n   while (1)\n     {\n-      unvisited_block = flow_dfs_compute_reverse_execute (&dfs_ds);\n+      unvisited_block = flow_dfs_compute_reverse_execute (&dfs_ds,\n+\t\t\t\t\t\t\t  unvisited_block);\n       if (!unvisited_block)\n \tbreak;\n \n@@ -847,7 +849,8 @@ flow_dfs_compute_reverse_add_bb (depth_first_search_ds data, basic_block bb)\n    available.  */\n \n static basic_block\n-flow_dfs_compute_reverse_execute (depth_first_search_ds data)\n+flow_dfs_compute_reverse_execute (depth_first_search_ds data,\n+\t\t\t\t  basic_block last_unvisited)\n {\n   basic_block bb;\n   edge e;\n@@ -865,7 +868,7 @@ flow_dfs_compute_reverse_execute (depth_first_search_ds data)\n     }\n \n   /* Determine if there are unvisited basic blocks.  */\n-  FOR_BB_BETWEEN (bb, EXIT_BLOCK_PTR, NULL, prev_bb)\n+  FOR_BB_BETWEEN (bb, last_unvisited, NULL, prev_bb)\n     if (!TEST_BIT (data->visited_blocks, bb->index - (INVALID_BLOCK + 1)))\n       return bb;\n "}]}