{"sha": "6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzOGMxMzcxZGVhODY4YjVmMmZmNDRkMjc5ZDM2MjBiZmJiNmQ5YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-01-07T11:10:53Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-01-07T11:10:53Z"}, "message": "re PR fortran/55852 (internal compiler error: in gfc_build_intrinsic_call, at fortran/expr.c:4647)\n\n2013-01-07  Tobias Burnus  <burnus@net-b.de>\n            Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n        PR fortran/55852\n        * expr.c (gfc_build_intrinsic_call): Avoid clashes\n        with user's procedures.\n        * gfortran.h (gfc_build_intrinsic_call): Update prototype.\n        * simplify.c (gfc_simplify_size): Update call.\n        * class.c (finalization_scalarizer, finalization_get_offset,\n        finalizer_insert_packed_call, generate_finalization_wrapper):\n        Clean up by using gfc_build_intrinsic_call.\n\n2013-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55852\n        * gfortran.dg/intrinsic_size_3.f90: New.\n\n\nCo-Authored-By: Thomas Koenig <tkoenig@gcc.gnu.org>\n\nFrom-SVN: r194966", "tree": {"sha": "ed809dda5007ff305c3a618bea6216aa7467a12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed809dda5007ff305c3a618bea6216aa7467a12f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8c4c75a4a5062687fa08d1d6273cef4a0ce22fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c4c75a4a5062687fa08d1d6273cef4a0ce22fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c4c75a4a5062687fa08d1d6273cef4a0ce22fe"}], "stats": {"total": 251, "additions": 108, "deletions": 143}, "files": [{"sha": "344407374e7e8978b44060323d98bf229c72d42e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -1,3 +1,15 @@\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55852\n+\t* expr.c (gfc_build_intrinsic_call): Avoid clashes\n+\twith user's procedures.\n+\t* gfortran.h (gfc_build_intrinsic_call): Update prototype.\n+\t* simplify.c (gfc_simplify_size): Update call.\n+\t* class.c (finalization_scalarizer, finalization_get_offset,\n+\tfinalizer_insert_packed_call, generate_finalization_wrapper):\n+\tClean up by using gfc_build_intrinsic_call.\n+\n 2012-01-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "5fdf0a30ce8c226fe2fe4c789d0ac3357b73b4d8", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 50, "deletions": 137, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -969,31 +969,6 @@ finalization_scalarizer (gfc_symbol *array, gfc_symbol *ptr,\n \n   /* The <addr> part: TRANSFER (C_LOC (array), c_intptr_t).  */\n \n-  /* TRANSFER.  */\n-  expr2 = gfc_get_expr ();\n-  expr2->expr_type = EXPR_FUNCTION;\n-  expr2->value.function.name = \"__transfer0\";\n-  expr2->value.function.isym\n-\t    = gfc_intrinsic_function_by_id (GFC_ISYM_TRANSFER);\n-  /* Set symtree for -fdump-parse-tree.  */\n-  gfc_get_sym_tree (\"transfer\", sub_ns, &expr2->symtree, false);\n-  expr2->symtree->n.sym->intmod_sym_id = GFC_ISYM_TRANSFER;\n-  expr2->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  expr2->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (expr2->symtree->n.sym);\n-  expr2->value.function.actual = gfc_get_actual_arglist ();\n-  expr2->value.function.actual->expr\n-\t    = gfc_lval_expr_from_sym (array);\n-  expr2->ts.type = BT_INTEGER;\n-  expr2->ts.kind = gfc_index_integer_kind;\n-\n-  /* TRANSFER's second argument: 0_c_intptr_t.  */\n-  expr2->value.function.actual = gfc_get_actual_arglist ();\n-  expr2->value.function.actual->next = gfc_get_actual_arglist ();\n-  expr2->value.function.actual->next->expr\n-\t\t= gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n-  expr2->value.function.actual->next->next = gfc_get_actual_arglist ();\n-\n   /* TRANSFER's first argument: C_LOC (array).  */\n   expr = gfc_get_expr ();\n   expr->expr_type = EXPR_FUNCTION;\n@@ -1010,7 +985,14 @@ finalization_scalarizer (gfc_symbol *array, gfc_symbol *ptr,\n   gfc_commit_symbol (expr->symtree->n.sym);\n   expr->ts.type = BT_INTEGER;\n   expr->ts.kind = gfc_index_integer_kind;\n-  expr2->value.function.actual->expr = expr;\n+\n+  /* TRANSFER.  */\n+  expr2 = gfc_build_intrinsic_call (sub_ns, GFC_ISYM_TRANSFER, \"transfer\",\n+\t\t\t\t    gfc_current_locus, 2, expr,\n+\t\t\t\t    gfc_get_int_expr (gfc_index_integer_kind,\n+\t\t\t\t\t\t      NULL, 0));\n+  expr2->ts.type = BT_INTEGER;\n+  expr2->ts.kind = gfc_index_integer_kind;\n \n   /* <array addr> + <offset>.  */\n   block->ext.actual->expr = gfc_get_expr ();\n@@ -1072,27 +1054,18 @@ finalization_get_offset (gfc_symbol *idx, gfc_symbol *idx2, gfc_symbol *offset,\n \t\t\t\t  * strides(idx2).  */\n \n   /* mod (idx, sizes(idx2)).  */\n-  expr = gfc_get_expr ();\n-  expr->expr_type = EXPR_FUNCTION;\n-  expr->value.function.isym = gfc_intrinsic_function_by_id (GFC_ISYM_MOD);\n-  gfc_get_sym_tree (\"mod\", sub_ns, &expr->symtree, false);\n-  expr->symtree->n.sym->intmod_sym_id = GFC_ISYM_MOD;\n-  expr->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  expr->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (expr->symtree->n.sym);\n-  expr->value.function.actual = gfc_get_actual_arglist ();\n-  expr->value.function.actual->expr = gfc_lval_expr_from_sym (idx);\n-  expr->value.function.actual->next = gfc_get_actual_arglist ();\n-  expr->value.function.actual->next->expr = gfc_lval_expr_from_sym (sizes);\n-  expr->value.function.actual->next->expr->ref = gfc_get_ref ();\n-  expr->value.function.actual->next->expr->ref->type = REF_ARRAY;\n-  expr->value.function.actual->next->expr->ref->u.ar.as = sizes->as;\n-  expr->value.function.actual->next->expr->ref->u.ar.type = AR_ELEMENT;\n-  expr->value.function.actual->next->expr->ref->u.ar.dimen = 1;\n-  expr->value.function.actual->next->expr->ref->u.ar.dimen_type[0]\n-\t= DIMEN_ELEMENT;\n-  expr->value.function.actual->next->expr->ref->u.ar.start[0]\n-\t= gfc_lval_expr_from_sym (idx2);\n+  expr = gfc_lval_expr_from_sym (sizes);\n+  expr->ref = gfc_get_ref ();\n+  expr->ref->type = REF_ARRAY;\n+  expr->ref->u.ar.as = sizes->as;\n+  expr->ref->u.ar.type = AR_ELEMENT;\n+  expr->ref->u.ar.dimen = 1;\n+  expr->ref->u.ar.dimen_type[0] = DIMEN_ELEMENT;\n+  expr->ref->u.ar.start[0] = gfc_lval_expr_from_sym (idx2);\n+\n+  expr = gfc_build_intrinsic_call (sub_ns, GFC_ISYM_MOD, \"mod\",\n+\t\t\t\t   gfc_current_locus, 2,\n+\t\t\t\t   gfc_lval_expr_from_sym (idx), expr);\n   expr->ts = idx->ts;\n \n   /* (...) / sizes(idx2-1).  */\n@@ -1195,7 +1168,7 @@ static void\n finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n \t\t\t      gfc_symbol *array, gfc_symbol *byte_stride,\n \t\t\t      gfc_symbol *idx, gfc_symbol *ptr,\n-\t\t\t      gfc_symbol *nelem, gfc_symtree *size_intr,\n+\t\t\t      gfc_symbol *nelem,\n \t\t\t      gfc_symbol *strides, gfc_symbol *sizes,\n \t\t\t      gfc_symbol *idx2, gfc_symbol *offset,\n \t\t\t      gfc_symbol *is_contiguous, gfc_expr *rank,\n@@ -1225,24 +1198,12 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   size_expr->value.op.op = INTRINSIC_DIVIDE;\n \n   /* STORAGE_SIZE (array,kind=c_intptr_t).  */\n-  size_expr->value.op.op1 = gfc_get_expr ();\n-  size_expr->value.op.op1->where = gfc_current_locus;\n-  size_expr->value.op.op1->expr_type = EXPR_FUNCTION;\n-  size_expr->value.op.op1->value.function.isym\n-               = gfc_intrinsic_function_by_id (GFC_ISYM_STORAGE_SIZE);\n-  gfc_get_sym_tree (\"storage_size\", sub_ns, &size_expr->value.op.op1->symtree,\n-\t\t    false);\n-  size_expr->value.op.op1->symtree->n.sym->intmod_sym_id\n-\t= GFC_ISYM_STORAGE_SIZE;\n-  size_expr->value.op.op1->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  size_expr->value.op.op1->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (size_expr->value.op.op1->symtree->n.sym);\n-  size_expr->value.op.op1->value.function.actual = gfc_get_actual_arglist ();\n-  size_expr->value.op.op1->value.function.actual->expr\n-               = gfc_lval_expr_from_sym (array);\n-  size_expr->value.op.op1->value.function.actual->next = gfc_get_actual_arglist ();\n-  size_expr->value.op.op1->value.function.actual->next->expr\n-               = gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n+  size_expr->value.op.op1\n+\t= gfc_build_intrinsic_call (sub_ns, GFC_ISYM_STORAGE_SIZE,\n+\t\t\t\t    \"storage_size\", gfc_current_locus, 2,\n+\t\t\t\t    gfc_lval_expr_from_sym (array));\n+\t\t\t\t    gfc_get_int_expr (gfc_index_integer_kind,\n+\t\t\t\t\t\t      NULL, 0);\n \n   /* NUMERIC_STORAGE_SIZE.  */\n   size_expr->value.op.op2 = gfc_get_int_expr (gfc_index_integer_kind, NULL,\n@@ -1356,21 +1317,14 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n       tmp_array->as->lower[i] = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t\t  NULL, 1);\n       /* SIZE (array, dim=i+1, kind=default_kind).  */\n-      shape_expr = gfc_get_expr ();\n-      shape_expr->expr_type = EXPR_FUNCTION;\n-      shape_expr->value.function.isym\n-\t\t\t\t= gfc_intrinsic_function_by_id (GFC_ISYM_SIZE);\n-      shape_expr->symtree = size_intr;\n-      shape_expr->value.function.actual = gfc_get_actual_arglist ();\n-      shape_expr->value.function.actual->expr = gfc_lval_expr_from_sym (array);\n-      shape_expr->value.function.actual->next = gfc_get_actual_arglist ();\n-      shape_expr->value.function.actual->next->expr\n-\t\t= gfc_get_int_expr (gfc_default_integer_kind, NULL, i+1);\n-      shape_expr->value.function.actual->next->next = gfc_get_actual_arglist ();\n-      shape_expr->value.function.actual->next->next->expr\n-\t\t= gfc_get_int_expr (gfc_default_integer_kind, NULL, 0);\n-      shape_expr->ts = shape_expr->value.function.isym->ts;\n-\n+      shape_expr\n+\t= gfc_build_intrinsic_call (sub_ns, GFC_ISYM_SIZE, \"size\",\n+\t\t\t\t    gfc_current_locus, 3,\n+\t\t\t\t    gfc_lval_expr_from_sym (array),\n+\t\t\t\t    gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t\t\t\t      NULL, i+1),\n+\t\t\t\t    gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t\t\t\t      NULL, 0));\n       tmp_array->as->upper[i] = shape_expr;\n     }\n   gfc_set_sym_referenced (tmp_array);\n@@ -1495,7 +1449,6 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n {\n   gfc_symbol *final, *array, *fini_coarray, *byte_stride, *sizes, *strides;\n   gfc_symbol *ptr = NULL, *idx, *idx2, *is_contiguous, *offset, *nelem;\n-  gfc_symtree *size_intr;\n   gfc_component *comp;\n   gfc_namespace *sub_ns;\n   gfc_code *last_code, *block;\n@@ -1678,17 +1631,9 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   gfc_commit_symbol (offset);\n \n   /* Create RANK expression.  */\n-  rank = gfc_get_expr ();\n-  rank->expr_type = EXPR_FUNCTION;\n-  rank->value.function.isym = gfc_intrinsic_function_by_id (GFC_ISYM_RANK);\n-  gfc_get_sym_tree (\"rank\", sub_ns, &rank->symtree, false);\n-  rank->symtree->n.sym->intmod_sym_id = GFC_ISYM_RANK;\n-  rank->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  rank->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (rank->symtree->n.sym);\n-  rank->value.function.actual = gfc_get_actual_arglist ();\n-  rank->value.function.actual->expr = gfc_lval_expr_from_sym (array);\n-  rank->ts = rank->value.function.isym->ts;\n+  rank = gfc_build_intrinsic_call (sub_ns, GFC_ISYM_RANK, \"rank\",\n+\t\t\t\t   gfc_current_locus, 1,\n+\t\t\t\t   gfc_lval_expr_from_sym (array));\n   gfc_convert_type (rank, &idx->ts, 2);\n \n   /* Create is_contiguous variable.  */\n@@ -1805,23 +1750,10 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   block->expr1->ref->u.ar.start[0] = gfc_lval_expr_from_sym (idx);\n   block->expr1->ref->u.ar.as = strides->as;\n \n-  block->expr2 = gfc_get_expr ();\n-  block->expr2->expr_type = EXPR_FUNCTION;\n-  block->expr2->value.function.isym\n-\t= gfc_intrinsic_function_by_id (GFC_ISYM_STRIDE);\n-  gfc_get_sym_tree (GFC_PREFIX (\"stride\"), sub_ns,\n-\t\t    &block->expr2->symtree, false);\n-  block->expr2->symtree->n.sym->intmod_sym_id = GFC_ISYM_STRIDE;\n-  block->expr2->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  block->expr2->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (block->expr2->symtree->n.sym);\n-  block->expr2->value.function.actual = gfc_get_actual_arglist ();\n-  block->expr2->value.function.actual->expr = gfc_lval_expr_from_sym (array);\n-  /* dim=idx. */\n-  block->expr2->value.function.actual->next = gfc_get_actual_arglist ();\n-  block->expr2->value.function.actual->next->expr\n-\t= gfc_lval_expr_from_sym (idx);\n-  block->expr2->ts = block->expr2->value.function.isym->ts;\n+  block->expr2 = gfc_build_intrinsic_call (sub_ns, GFC_ISYM_STRIDE, \"stride\",\n+\t\t\t\t\t   gfc_current_locus, 2,\n+\t\t\t\t\t   gfc_lval_expr_from_sym (array),\n+\t\t\t\t\t   gfc_lval_expr_from_sym (idx));\n \n   /* sizes(idx) = sizes(idx-1) * size(array,dim=idx, kind=index_kind). */\n   block->next = XCNEW (gfc_code);\n@@ -1862,32 +1794,13 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t= block->expr2->value.op.op1->ref->u.ar.start[0]->value.op.op1->ts;\n \n   /* size(array, dim=idx, kind=index_kind).  */\n-  block->expr2->value.op.op2 = gfc_get_expr ();\n-  block->expr2->value.op.op2->expr_type = EXPR_FUNCTION;\n-  block->expr2->value.op.op2->value.function.isym\n-\t= gfc_intrinsic_function_by_id (GFC_ISYM_SIZE);\n-  gfc_get_sym_tree (\"size\", sub_ns, &block->expr2->value.op.op2->symtree,\n-\t\t    false);\n-  size_intr = block->expr2->value.op.op2->symtree;\n-  block->expr2->value.op.op2->symtree->n.sym->intmod_sym_id = GFC_ISYM_SIZE;\n-  block->expr2->value.op.op2->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n-  block->expr2->value.op.op2->symtree->n.sym->attr.intrinsic = 1;\n-  gfc_commit_symbol (block->expr2->value.op.op2->symtree->n.sym);\n-  block->expr2->value.op.op2->value.function.actual\n-\t= gfc_get_actual_arglist ();\n-  block->expr2->value.op.op2->value.function.actual->expr\n-\t= gfc_lval_expr_from_sym (array);\n-  /* dim=idx. */\n-  block->expr2->value.op.op2->value.function.actual->next\n-\t= gfc_get_actual_arglist ();\n-  block->expr2->value.op.op2->value.function.actual->next->expr\n-\t= gfc_lval_expr_from_sym (idx);\n-  /* kind=c_intptr_t. */\n-  block->expr2->value.op.op2->value.function.actual->next->next\n-\t= gfc_get_actual_arglist ();\n-  block->expr2->value.op.op2->value.function.actual->next->next->expr\n-\t= gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n-  block->expr2->value.op.op2->ts = idx->ts;\n+  block->expr2->value.op.op2\n+\t= gfc_build_intrinsic_call (sub_ns, GFC_ISYM_SIZE, \"size\",\n+\t\t\t\t    gfc_current_locus, 3,\n+\t\t\t\t    gfc_lval_expr_from_sym (array),\n+\t\t\t\t    gfc_lval_expr_from_sym (idx),\n+\t\t\t\t    gfc_get_int_expr (gfc_index_integer_kind,\n+\t\t\t\t\t\t      NULL, 0));\n   block->expr2->ts = idx->ts;\n \n   /* if (strides(idx) /= sizes(idx-1)) is_contiguous = .false.  */\n@@ -2053,7 +1966,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t  /* CALL fini_rank (array) - possibly with packing.  */\n           if (fini->proc_tree->n.sym->formal->sym->attr.dimension)\n \t    finalizer_insert_packed_call (block, fini, array, byte_stride,\n-\t\t\t\t\t  idx, ptr, nelem, size_intr, strides,\n+\t\t\t\t\t  idx, ptr, nelem, strides,\n \t\t\t\t\t  sizes, idx2, offset, is_contiguous,\n \t\t\t\t\t  rank, sub_ns);\n \t  else"}, {"sha": "74a17eb93f390cf661967a18cc4e195bc026240d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -4622,28 +4622,34 @@ gfc_is_simply_contiguous (gfc_expr *expr, bool strict)\n    want to add arguments but with a NULL-expression.  */\n \n gfc_expr*\n-gfc_build_intrinsic_call (const char* name, locus where, unsigned numarg, ...)\n+gfc_build_intrinsic_call (gfc_namespace *ns, gfc_isym_id id, const char* name,\n+\t\t\t  locus where, unsigned numarg, ...)\n {\n   gfc_expr* result;\n   gfc_actual_arglist* atail;\n   gfc_intrinsic_sym* isym;\n   va_list ap;\n   unsigned i;\n+  const char *mangled_name = gfc_get_string (GFC_PREFIX (\"%s\"), name);\n \n-  isym = gfc_find_function (name);\n+  isym = gfc_intrinsic_function_by_id (id);\n   gcc_assert (isym);\n \n   result = gfc_get_expr ();\n   result->expr_type = EXPR_FUNCTION;\n   result->ts = isym->ts;\n   result->where = where;\n-  result->value.function.name = name;\n+  result->value.function.name = mangled_name;\n   result->value.function.isym = isym;\n \n-  result->symtree = gfc_find_symtree (gfc_current_ns->sym_root, name);\n+  gfc_get_sym_tree (mangled_name, ns, &result->symtree, false);\n+  gfc_commit_symbol (result->symtree->n.sym);\n   gcc_assert (result->symtree\n \t      && (result->symtree->n.sym->attr.flavor == FL_PROCEDURE\n \t\t  || result->symtree->n.sym->attr.flavor == FL_UNKNOWN));\n+  result->symtree->n.sym->intmod_sym_id = id;\n+  result->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n+  result->symtree->n.sym->attr.intrinsic = 1;\n \n   va_start (ap, numarg);\n   atail = NULL;"}, {"sha": "5a6887317522f85f9e3166ac5ca436de9024c8aa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -2798,7 +2798,8 @@ int gfc_get_corank (gfc_expr *);\n bool gfc_has_ultimate_allocatable (gfc_expr *);\n bool gfc_has_ultimate_pointer (gfc_expr *);\n \n-gfc_expr* gfc_build_intrinsic_call (const char*, locus, unsigned, ...);\n+gfc_expr* gfc_build_intrinsic_call (gfc_namespace *, gfc_isym_id, const char*,\n+\t\t\t\t    locus, unsigned, ...);\n gfc_try gfc_check_vardef_context (gfc_expr*, bool, bool, bool, const char*);\n \n "}, {"sha": "9f148ba36483ccf87f2ca0bba298c3335fbac601", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -5584,7 +5584,9 @@ gfc_simplify_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n       /* Otherwise, we build a new SIZE call.  This is hopefully at least\n \t simpler than the original one.  */\n       if (!simplified)\n-\tsimplified = gfc_build_intrinsic_call (\"size\", array->where, 3,\n+\tsimplified = gfc_build_intrinsic_call (gfc_current_ns,\n+\t\t\t\t\t       GFC_ISYM_SIZE, \"size\",\n+\t\t\t\t\t       array->where, 3,\n \t\t\t\t\t       gfc_copy_expr (replacement),\n \t\t\t\t\t       gfc_copy_expr (dim),\n \t\t\t\t\t       gfc_copy_expr (kind));"}, {"sha": "435e49ee09e0f95e1a26ff1954d1b7d822d50d9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -1,3 +1,8 @@\n+2013-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55852\n+\t* gfortran.dg/intrinsic_size_3.f90: New.\n+\n 2012-01-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "d5f4bd23d5501ef97154517c02af4bc0ed5978f5", "filename": "gcc/testsuite/gfortran.dg/intrinsic_size_3.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6838c1371dea868b5f2ff44d279d3620bfbb6d9a/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_size_3.f90?ref=6838c1371dea868b5f2ff44d279d3620bfbb6d9a", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/55852\n+!\n+! Contributed by A. Kasahara\n+!\n+program bug\n+  implicit none\n+\n+  Real, allocatable:: a(:)\n+  integer(2) :: iszs\n+\n+  allocate(a(1:3))\n+\n+  iszs = ubound((a), 1)! Was ICEing\n+!  print*, ubound((a), 1) ! Was ICEing\n+! print*, ubound(a, 1)   ! OK\n+! print*, lbound((a), 1) ! OK\n+! print*, lbound(a, 1)   ! OK\n+\n+  stop\n+end program bug\n+\n+! { dg-final { scan-tree-dump-times \"iszs = \\\\(integer\\\\(kind=2\\\\)\\\\) MAX_EXPR <\\\\(D.....->dim.0..ubound - D.....->dim.0..lbound\\\\) \\\\+ 1, 0>;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}