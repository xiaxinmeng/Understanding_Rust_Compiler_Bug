{"sha": "77f72c95fafee28af8a7cf46b3304b7f46e8c732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmNzJjOTVmYWZlZTI4YWY4YTdjZjQ2YjMzMDRiN2Y0NmU4YzczMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-06-21T22:38:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-06-21T22:38:55Z"}, "message": "re PR fortran/49630 ([OOP] ICE on obsolescent deferred-length type bound character function)\n\n2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/49630\n\t* resolve.c (resolve_contained_fntype): Change standard ref.\n\tfrom F95 to F2003: C418. Correct a spelling error in a comment.\n\tIt is an error for an abstract interface to have an assumed\n\tcharacter length result.\n\t* trans-expr.c (gfc_conv_procedure_call): Likewise change the\n\tstandard reference.\n\n2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/49630\n\t* gfortran.dg/assumed_charlen_function_7.f90: New test.\n\nFrom-SVN: r261868", "tree": {"sha": "b990b8c83858cd7f5838d195bdfd17e23e50fc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b990b8c83858cd7f5838d195bdfd17e23e50fc56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f72c95fafee28af8a7cf46b3304b7f46e8c732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f72c95fafee28af8a7cf46b3304b7f46e8c732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f72c95fafee28af8a7cf46b3304b7f46e8c732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f72c95fafee28af8a7cf46b3304b7f46e8c732/comments", "author": null, "committer": null, "parents": [{"sha": "fe5309c50d6b18379d7bc51a02553fb66b8fade5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5309c50d6b18379d7bc51a02553fb66b8fade5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5309c50d6b18379d7bc51a02553fb66b8fade5"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "2e665d95a0fe4bf1e5b4db6998f6fc6dda728e26", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=77f72c95fafee28af8a7cf46b3304b7f46e8c732", "patch": "@@ -1,3 +1,13 @@\n+2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/49630\n+\t* resolve.c (resolve_contained_fntype): Change standard ref.\n+\tfrom F95 to F2003: C418. Correct a spelling error in a comment.\n+\tIt is an error for an abstract interface to have an assumed\n+\tcharacter length result.\n+\t* trans-expr.c (gfc_conv_procedure_call): Likewise change the\n+\tstandard reference.\n+\n 2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83118"}, {"sha": "41040544ce5225e87d4b4e1b8f8b777aebfe2c98", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=77f72c95fafee28af8a7cf46b3304b7f46e8c732", "patch": "@@ -601,9 +601,10 @@ resolve_contained_fntype (gfc_symbol *sym, gfc_namespace *ns)\n \t}\n     }\n \n-  /* Fortran 95 Draft Standard, page 51, Section 5.1.1.5, on the Character\n+  /* Fortran 2003 Draft Standard, page 535, C418, on type-param-value\n      type, lists the only ways a character length value of * can be used:\n-     dummy arguments of procedures, named constants, and function results\n+     dummy arguments of procedures, named constants, function results and\n+     in allocate statements if the allocate_object is an assumed length dummy\n      in external functions.  Internal function results and results of module\n      procedures are not on this list, ergo, not permitted.  */\n \n@@ -3103,7 +3104,7 @@ resolve_function (gfc_expr *expr)\n       return false;\n     }\n \n-  /* If this ia a deferred TBP with an abstract interface (which may\n+  /* If this is a deferred TBP with an abstract interface (which may\n      of course be referenced), expr->value.function.esym will be set.  */\n   if (sym && sym->attr.abstract && !expr->value.function.esym)\n     {\n@@ -3112,6 +3113,17 @@ resolve_function (gfc_expr *expr)\n       return false;\n     }\n \n+  /* If this is a deferred TBP with an abstract interface, its result\n+     cannot be an assumed length character (F2003: C418).  */\n+  if (sym && sym->attr.abstract && sym->attr.function\n+      && sym->result->ts.u.cl->length == NULL)\n+    {\n+      gfc_error (\"ABSTRACT INTERFACE %qs at %L must not have an assumed \"\n+\t\t \"character length result (F2003: C418)\", sym->name,\n+\t\t &sym->declared_at);\n+      return false;\n+    }\n+\n   /* Switch off assumed size checking and do this again for certain kinds\n      of procedure, once the procedure itself is resolved.  */\n   need_full_assumed_size++;"}, {"sha": "dfc44f753e5b85bc08e437b635294c6db178ecb4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=77f72c95fafee28af8a7cf46b3304b7f46e8c732", "patch": "@@ -5941,7 +5941,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n     {\n       if (ts.u.cl->length == NULL)\n \t{\n-\t  /* Assumed character length results are not allowed by 5.1.1.5 of the\n+\t  /* Assumed character length results are not allowed by C418 of the 2003\n \t     standard and are trapped in resolve.c; except in the case of SPREAD\n \t     (and other intrinsics?) and dummy functions.  In the case of SPREAD,\n \t     we take the character length of the first argument for the result."}, {"sha": "e1aeb10f1543fbd352dd8aba5a0d750bbff81427", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77f72c95fafee28af8a7cf46b3304b7f46e8c732", "patch": "@@ -1,3 +1,8 @@\n+2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/49630\n+\t* gfortran.dg/assumed_charlen_function_7.f90: New test.\n+\n 2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83118"}, {"sha": "b36bb872e7b7ebfaade099a9e64c7f83164c2f97", "filename": "gcc/testsuite/gfortran.dg/assumed_charlen_function_7.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f72c95fafee28af8a7cf46b3304b7f46e8c732/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_7.f90?ref=77f72c95fafee28af8a7cf46b3304b7f46e8c732", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR49630, comment #11.\n+!\n+! Contributed by Vittorio Zecca  <zeccav@gmail.com>\n+!\n+module abc\n+  implicit none\n+  type,abstract::abc_abstract\n+  contains\n+    procedure(abc_interface),deferred::abc_function\n+  end type abc_abstract\n+  type,extends(abc_abstract)::abc_type\n+  contains\n+    procedure::abc_function\n+  end type abc_type\n+  abstract interface\n+    function abc_interface(this) ! { dg-error \"assumed character length result\" }\n+      import abc_abstract\n+      class(abc_abstract),intent(in)::this\n+      character(len=*)::abc_interface\n+    end function abc_interface\n+  end interface\n+contains\n+  function abc_function(this)\n+    class(abc_type),intent(in)::this\n+    character(len=5)::abc_function\n+    abc_function=\"hello\"\n+  end function abc_function\n+  subroutine do_something(this)\n+    class(abc_abstract),intent(in)::this\n+    print *,this%abc_function()\n+  end subroutine do_something\n+end module abc"}]}