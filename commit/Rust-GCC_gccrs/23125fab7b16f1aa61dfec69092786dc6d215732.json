{"sha": "23125fab7b16f1aa61dfec69092786dc6d215732", "node_id": "C_kwDOANBUbNoAKDIzMTI1ZmFiN2IxNmYxYWE2MWRmZWM2OTA5Mjc4NmRjNmQyMTU3MzI", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-16T09:44:54Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-16T09:45:46Z"}, "message": "Replace more DEBUG_EXPR_DECL creations with build_debug_expr_decl\n\nAs discussed on the mailing list, this patch replaces all but one\nremaining open coded constructions of DEBUG_EXPR_DECL with calls to\nbuild_debug_expr_decl, even if - in order not to introduce any\nfunctional change - the mode of the constructed decl is then\noverwritten.\n\nIt is not clear if changing the mode has any effect in practice and\ntherefore I have added a FIXME note to code which does it, as\nrequested.\n\nAfter this patch, DEBUG_EXPR_DECLs are created only by\nbuild_debug_expr_decl and make_debug_expr_from_rtl which looks like\nit should be left alone.\n\ngcc/ChangeLog:\n\n2021-11-11  Martin Jambor  <mjambor@suse.cz>\n\n\t* cfgexpand.c (expand_gimple_basic_block): Use build_debug_expr_decl,\n\tadd a fixme note about the mode assignment perhaps being unnecessary.\n\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call):\n\tLikewise.\n\t(ipa_param_body_adjustments::mark_dead_statements): Likewise.\n\t(ipa_param_body_adjustments::reset_debug_stmts): Likewise.\n\t* tree-inline.c (remap_ssa_name): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-into-ssa.c (rewrite_debug_stmt_uses): Likewise.\n\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n\t* tree-ssa.c (insert_debug_temp_for_var_def): Likewise.", "tree": {"sha": "f93ba740e6076e7d6e36a9cd77ffea93ceea0968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93ba740e6076e7d6e36a9cd77ffea93ceea0968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23125fab7b16f1aa61dfec69092786dc6d215732", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmGTfcoACgkQv2PBvD+k\nNUAAMA/+NgpBsksz35RQjpVMkoGvn9h4sowTi+Jv+JqeJp1cgPDUo703uKxuM+JF\n69T2QZk2dC5TKD/pQxjUW3JIB6L3wGbMx4rRQ8tNzTsA4zI/1RHJptfOLGidEX5a\nyF95DVQ2bxu+K0jwHMiUuatk7suc50X4ZnP9jxOTyU9REvtPr6/c4ABEhDe3gv+P\n89WwnsBEoTf6xitFzR2QCUDhanB9j4Olc1dQIUgJ1o6Z0DUjUODpkew/p8f4SYbl\nhlU/WpT2MYFTDunOI8U5JhIBT8cW6eoudO3tN+0XuGuvNv7660JFGBa0RTm1qWx7\njh7I3qAsFQx0F8vv1kJzZBJKvMAYv9G7Oqy78cQPqK50BsGwfF1TQHYDAgnobkf3\nN4cbWIkn+HEOSroFIID9qN/juXcdF97wXJL6MalaT8mr4aIwO0uakk4FFINpW/QQ\nmmm0jXKv/pvnrkxqRO43+hQk8omiL6R5+GmPa9MtjJ9YqDNOPb9qSuq4h7cw91HZ\n9+d+ZEKdHfI/KkQUTAqNeId2ksw9GFH2l2IWAWo4fIQvr9zreAdJ/6pzZgOk3TMu\nst7tymYoPkIvomcuQTJoiKh9qErs1RA9iczxs+1yScObf9hs6znjyRdmkmBEx0ZL\nt9Yp9t5DbqjqNSFDnf6tMXfCy2oPgDIN9x5k5VBAmN+b0JYsqiI=\n=sWXQ\n-----END PGP SIGNATURE-----", "payload": "tree f93ba740e6076e7d6e36a9cd77ffea93ceea0968\nparent 9f7fc82014626173bd2c9effa8d8dcb3abd9b06c\nauthor Martin Jambor <mjambor@suse.cz> 1637055894 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1637055946 +0100\n\nReplace more DEBUG_EXPR_DECL creations with build_debug_expr_decl\n\nAs discussed on the mailing list, this patch replaces all but one\nremaining open coded constructions of DEBUG_EXPR_DECL with calls to\nbuild_debug_expr_decl, even if - in order not to introduce any\nfunctional change - the mode of the constructed decl is then\noverwritten.\n\nIt is not clear if changing the mode has any effect in practice and\ntherefore I have added a FIXME note to code which does it, as\nrequested.\n\nAfter this patch, DEBUG_EXPR_DECLs are created only by\nbuild_debug_expr_decl and make_debug_expr_from_rtl which looks like\nit should be left alone.\n\ngcc/ChangeLog:\n\n2021-11-11  Martin Jambor  <mjambor@suse.cz>\n\n\t* cfgexpand.c (expand_gimple_basic_block): Use build_debug_expr_decl,\n\tadd a fixme note about the mode assignment perhaps being unnecessary.\n\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call):\n\tLikewise.\n\t(ipa_param_body_adjustments::mark_dead_statements): Likewise.\n\t(ipa_param_body_adjustments::reset_debug_stmts): Likewise.\n\t* tree-inline.c (remap_ssa_name): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-into-ssa.c (rewrite_debug_stmt_uses): Likewise.\n\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n\t* tree-ssa.c (insert_debug_temp_for_var_def): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23125fab7b16f1aa61dfec69092786dc6d215732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23125fab7b16f1aa61dfec69092786dc6d215732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23125fab7b16f1aa61dfec69092786dc6d215732/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7fc82014626173bd2c9effa8d8dcb3abd9b06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7fc82014626173bd2c9effa8d8dcb3abd9b06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7fc82014626173bd2c9effa8d8dcb3abd9b06c"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "eb6466f4be6f72f589abb1055f69d0d323af5c80", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -5898,18 +5898,17 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n \t\t       temporary.  */\n \t\t    gimple *debugstmt;\n \t\t    tree value = gimple_assign_rhs_to_tree (def);\n-\t\t    tree vexpr = make_node (DEBUG_EXPR_DECL);\n+\t\t    tree vexpr = build_debug_expr_decl (TREE_TYPE (value));\n \t\t    rtx val;\n \t\t    machine_mode mode;\n \n \t\t    set_curr_insn_location (gimple_location (def));\n \n-\t\t    DECL_ARTIFICIAL (vexpr) = 1;\n-\t\t    TREE_TYPE (vexpr) = TREE_TYPE (value);\n \t\t    if (DECL_P (value))\n \t\t      mode = DECL_MODE (value);\n \t\t    else\n \t\t      mode = TYPE_MODE (TREE_TYPE (value));\n+\t\t    /* FIXME: Is setting the mode really necessary? */\n \t\t    SET_DECL_MODE (vexpr, mode);\n \n \t\t    val = gen_rtx_VAR_LOCATION"}, {"sha": "cec1dba701f0d99bf5cf2b1bf592a2287c03a992", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -888,9 +888,8 @@ ipa_param_adjustments::modify_call (cgraph_edge *cs,\n \t      }\n \t  if (ddecl == NULL)\n \t    {\n-\t      ddecl = make_node (DEBUG_EXPR_DECL);\n-\t      DECL_ARTIFICIAL (ddecl) = 1;\n-\t      TREE_TYPE (ddecl) = TREE_TYPE (origin);\n+\t      ddecl = build_debug_expr_decl (TREE_TYPE (origin));\n+\t      /* FIXME: Is setting the mode really necessary? */\n \t      SET_DECL_MODE (ddecl, DECL_MODE (origin));\n \n \t      vec_safe_push (*debug_args, origin);\n@@ -1120,9 +1119,8 @@ ipa_param_body_adjustments::mark_dead_statements (tree dead_param,\n       return;\n     }\n \n-  tree dp_ddecl = make_node (DEBUG_EXPR_DECL);\n-  DECL_ARTIFICIAL (dp_ddecl) = 1;\n-  TREE_TYPE (dp_ddecl) = TREE_TYPE (dead_param);\n+  tree dp_ddecl = build_debug_expr_decl (TREE_TYPE (dead_param));\n+  /* FIXME: Is setting the mode really necessary? */\n   SET_DECL_MODE (dp_ddecl, DECL_MODE (dead_param));\n   m_dead_ssa_debug_equiv.put (parm_ddef, dp_ddecl);\n }\n@@ -2285,11 +2283,10 @@ ipa_param_body_adjustments::reset_debug_stmts ()\n \t    gcc_assert (is_gimple_debug (stmt));\n \t    if (vexpr == NULL && gsip != NULL)\n \t      {\n-\t\tvexpr = make_node (DEBUG_EXPR_DECL);\n-\t\tdef_temp = gimple_build_debug_source_bind (vexpr, decl, NULL);\n-\t\tDECL_ARTIFICIAL (vexpr) = 1;\n-\t\tTREE_TYPE (vexpr) = TREE_TYPE (name);\n+\t\tvexpr = build_debug_expr_decl (TREE_TYPE (name));\n+\t\t/* FIXME: Is setting the mode really necessary? */\n \t\tSET_DECL_MODE (vexpr, DECL_MODE (decl));\n+\t\tdef_temp = gimple_build_debug_source_bind (vexpr, decl, NULL);\n \t\tgsi_insert_before (gsip, def_temp, GSI_SAME_STMT);\n \t      }\n \t    if (vexpr)"}, {"sha": "8c108d8e4e701fa0ef1cbd0a831ef1f9f05b4bcb", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -193,7 +193,6 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t  && id->entry_bb == NULL\n \t  && single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (cfun)))\n \t{\n-\t  tree vexpr = make_node (DEBUG_EXPR_DECL);\n \t  gimple *def_temp;\n \t  gimple_stmt_iterator gsi;\n \t  tree val = SSA_NAME_VAR (name);\n@@ -210,10 +209,10 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t  n = id->decl_map->get (val);\n \t  if (n && TREE_CODE (*n) == DEBUG_EXPR_DECL)\n \t    return *n;\n-\t  def_temp = gimple_build_debug_source_bind (vexpr, val, NULL);\n-\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t  TREE_TYPE (vexpr) = TREE_TYPE (name);\n+\t  tree vexpr = build_debug_expr_decl (TREE_TYPE (name));\n+\t  /* FIXME: Is setting the mode really necessary? */\n \t  SET_DECL_MODE (vexpr, DECL_MODE (SSA_NAME_VAR (name)));\n+\t  def_temp = gimple_build_debug_source_bind (vexpr, val, NULL);\n \t  gsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \t  gsi_insert_before (&gsi, def_temp, GSI_SAME_STMT);\n \t  insert_decl_map (id, val, vexpr);\n@@ -6450,9 +6449,8 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t      debug_args = decl_debug_args_insert (new_decl);\n \t      len = vec_safe_length (*debug_args);\n \t    }\n-\t  ddecl = make_node (DEBUG_EXPR_DECL);\n-\t  DECL_ARTIFICIAL (ddecl) = 1;\n-\t  TREE_TYPE (ddecl) = TREE_TYPE (parm);\n+\t  ddecl = build_debug_expr_decl (TREE_TYPE (parm));\n+\t  /* FIXME: Is setting the mode really necessary? */\n \t  SET_DECL_MODE (ddecl, DECL_MODE (parm));\n \t  vec_safe_push (*debug_args, DECL_ORIGIN (parm));\n \t  vec_safe_push (*debug_args, ddecl);\n@@ -6488,9 +6486,8 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t\t  vexpr = *d;\n \t      if (!vexpr)\n \t\t{\n-\t\t  vexpr = make_node (DEBUG_EXPR_DECL);\n-\t\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t\t  TREE_TYPE (vexpr) = TREE_TYPE (parm);\n+\t\t  vexpr = build_debug_expr_decl (TREE_TYPE (parm));\n+\t\t  /* FIXME: Is setting the mode really necessary? */\n \t\t  SET_DECL_MODE (vexpr, DECL_MODE (parm));\n \t\t}\n \t      def_temp = gimple_build_debug_bind (var, vexpr, NULL);"}, {"sha": "265dcc5d42fcda0f837e2ad0edb88e5d56e90e47", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -1284,11 +1284,10 @@ rewrite_debug_stmt_uses (gimple *stmt)\n \t      if (def == NULL_TREE)\n \t\t{\n \t\t  gimple *def_temp;\n-\t\t  def = make_node (DEBUG_EXPR_DECL);\n-\t\t  def_temp = gimple_build_debug_source_bind (def, var, NULL);\n-\t\t  DECL_ARTIFICIAL (def) = 1;\n-\t\t  TREE_TYPE (def) = TREE_TYPE (var);\n+\t\t  def = build_debug_expr_decl (TREE_TYPE (var));\n+\t\t  /* FIXME: Is setting the mode really necessary? */\n \t\t  SET_DECL_MODE (def, DECL_MODE (var));\n+\t\t  def_temp = gimple_build_debug_source_bind (def, var, NULL);\n \t\t  gsi =\n \t\t gsi_after_labels (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \t\t  gsi_insert_before (&gsi, def_temp, GSI_SAME_STMT);"}, {"sha": "5a7fd305d91da7bd66a7a2132b230fd55ba976a7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -7742,9 +7742,8 @@ remove_unused_ivs (struct ivopts_data *data, bitmap toremove)\n \t      comp = unshare_expr (comp);\n \t      if (count > 1)\n \t\t{\n-\t\t  tree vexpr = make_node (DEBUG_EXPR_DECL);\n-\t\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t\t  TREE_TYPE (vexpr) = TREE_TYPE (comp);\n+\t\t  tree vexpr = build_debug_expr_decl (TREE_TYPE (comp));\n+\t\t  /* FIXME: Is setting the mode really necessary? */\n \t\t  if (SSA_NAME_VAR (def))\n \t\t    SET_DECL_MODE (vexpr, DECL_MODE (SSA_NAME_VAR (def)));\n \t\t  else"}, {"sha": "1565e21d9832c8cb60909ce9cac5f525d9b8dd00", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23125fab7b16f1aa61dfec69092786dc6d215732/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=23125fab7b16f1aa61dfec69092786dc6d215732", "patch": "@@ -434,14 +434,13 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n       else\n \t{\n \t  gdebug *def_temp;\n-\t  tree vexpr = make_node (DEBUG_EXPR_DECL);\n+\t  tree vexpr = build_debug_expr_decl (TREE_TYPE (value));\n \n \t  def_temp = gimple_build_debug_bind (vexpr,\n \t\t\t\t\t      unshare_expr (value),\n \t\t\t\t\t      def_stmt);\n \n-\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t  TREE_TYPE (vexpr) = TREE_TYPE (value);\n+\t  /* FIXME: Is setting the mode really necessary? */\n \t  if (DECL_P (value))\n \t    SET_DECL_MODE (vexpr, DECL_MODE (value));\n \t  else"}]}