{"sha": "4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "node_id": "C_kwDOANBUbNoAKDRhNDZmNTljYjM2MDAxM2UxMTU5MWExZTBkNGNkYzA5ZjRiN2RlZTE", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-08-25T21:56:55Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:50Z"}, "message": "[Ada] Lock_Free aspect takes precedence over Ceiling_Locking locking policy\n\nAllow the Lock_Free aspect of a protected type to be True (but only by\nexplicit specification) if Ceiling_Locking locking policy has been specified.\nClarify that the Lock_Free aspect takes precedence over the Ceiling_Locking\npolicy in that case.\n\ngcc/ada/\n\n\t* sem_ch9.adb\n\t(Satisfies_Lock_Free_Requirements): If Ceiling_Locking locking\n\tpolicy has been specified, then either return False (if Lock_Free\n\twas not explicitly specified) or generate a warning that ceiling\n\tlocking will not be implemented for this protected unit (if\n\tLock_Free was explicitly specified). Generate an error message (in\n\taddition to returning False) if an explicit Lock_Free aspect\n\tspecification is rejected because atomic primitives are not\n\tsupported on the given target.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Clarify that the\n\tLock_Free aspect for a protected unit takes precedence over the\n\tCeiling_Locking locking policy in the case where both apply.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "61cdc0621ee774861853706fb397e7aafedfe103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61cdc0621ee774861853706fb397e7aafedfe103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de01e1b86a1095459883d15224aa195e6a3c71ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de01e1b86a1095459883d15224aa195e6a3c71ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de01e1b86a1095459883d15224aa195e6a3c71ff"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "1d3a99d9f72690139f29ba74decb28b00be1aa41", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "patch": "@@ -3752,7 +3752,12 @@ In addition, each protected subprogram body must satisfy:\n * May not dereferenced access values\n * Function calls and attribute references must be static\n \n-\n+If the Lock_Free aspect is specified to be True for a protected unit\n+and the Ceiling_Locking locking policy is in effect, then the run-time\n+actions associated with the Ceiling_Locking locking policy (described in\n+Ada RM D.3) are not performed when a protected operation of the protected\n+unit is executed.\n+  \n Pragma Loop_Invariant\n =====================\n "}, {"sha": "4d9d1f03999971897acdfceab02ae51b92eaf8f6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Aug 25, 2022\n+GNAT Reference Manual , Sep 09, 2022\n \n AdaCore\n \n@@ -5273,6 +5273,12 @@ May not dereferenced access values\n Function calls and attribute references must be static\n @end itemize\n \n+If the Lock_Free aspect is specified to be True for a protected unit\n+and the Ceiling_Locking locking policy is in effect, then the run-time\n+actions associated with the Ceiling_Locking locking policy (described in\n+Ada RM D.3) are not performed when a protected operation of the protected\n+unit is executed.\n+\n @node Pragma Loop_Invariant,Pragma Loop_Optimize,Pragma Lock_Free,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-loop-invariant}@anchor{95}\n @section Pragma Loop_Invariant"}, {"sha": "cae0f233c52a4c50c56f58f8d261510f5ad3ab34", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46f59cb360013e11591a1e0d4cdc09f4b7dee1/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=4a46f59cb360013e11591a1e0d4cdc09f4b7dee1", "patch": "@@ -651,9 +651,34 @@ package body Sem_Ch9 is\n \n             begin\n                if not Support_Atomic_Primitives_On_Target then\n+                  if Lock_Free_Given then\n+                     Error_Msg_N\n+                       (\"Lock_Free aspect requires target support for \"\n+                          & \"atomic primitives\", N);\n+                  end if;\n                   return False;\n                end if;\n \n+               --  Deal with case where Ceiling_Locking locking policy is\n+               --  in effect.\n+\n+               if Locking_Policy = 'C' then\n+                  if Lock_Free_Given then\n+                     --  Explicit Lock_Free aspect spec overrides\n+                     --  Ceiling_Locking so we generate a warning.\n+\n+                     Error_Msg_N\n+                       (\"Lock_Free aspect specification overrides \"\n+                          & \"Ceiling_Locking locking policy??\", N);\n+                  else\n+                     --  If Ceiling_Locking locking policy is in effect, then\n+                     --  Lock_Free can be explicitly specified but it is\n+                     --  never the default.\n+\n+                     return False;\n+                  end if;\n+               end if;\n+\n                --  Get the number of errors detected by the compiler so far\n \n                if Lock_Free_Given then"}]}