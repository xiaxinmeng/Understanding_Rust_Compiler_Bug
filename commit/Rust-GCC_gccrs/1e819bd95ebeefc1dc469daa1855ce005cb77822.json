{"sha": "1e819bd95ebeefc1dc469daa1855ce005cb77822", "node_id": "C_kwDOANBUbNoAKDFlODE5YmQ5NWViZWVmYzFkYzQ2OWRhYTE4NTVjZTAwNWNiNzc4MjI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-15T19:23:17Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-15T19:23:17Z"}, "message": "Fortran: validate shape of arrays in constructors against declarations\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/102685\n\t* decl.c (match_clist_expr): Set rank/shape of clist initializer\n\tto match LHS.\n\t* resolve.c (resolve_structure_cons): In a structure constructor,\n\tcompare shapes of array components against declared shape.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/102685\n\t* gfortran.dg/derived_constructor_char_1.f90: Fix invalid code.\n\t* gfortran.dg/pr70931.f90: Likewise.\n\t* gfortran.dg/transfer_simplify_2.f90: Likewise.\n\t* gfortran.dg/pr102685.f90: New test.\n\nCo-authored-by: Tobias Burnus <tobias@codesourcery.com>", "tree": {"sha": "e92e1e5ba1f1abf39844b4c0e87c50145c49f75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e92e1e5ba1f1abf39844b4c0e87c50145c49f75e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e819bd95ebeefc1dc469daa1855ce005cb77822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e819bd95ebeefc1dc469daa1855ce005cb77822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e819bd95ebeefc1dc469daa1855ce005cb77822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e819bd95ebeefc1dc469daa1855ce005cb77822/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aef14b09557ce072f1269bd8a05fa2b1df0eda2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aef14b09557ce072f1269bd8a05fa2b1df0eda2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aef14b09557ce072f1269bd8a05fa2b1df0eda2"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "86adb81da32339605644497b070f1a029a7541b9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -896,9 +896,6 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n       expr->ts = *ts;\n       expr->value.constructor = array_head;\n \n-      expr->rank = as->rank;\n-      expr->shape = gfc_get_shape (expr->rank);\n-\n       /* Validate sizes.  We built expr ourselves, so cons_size will be\n \t constant (we fail above for non-constant expressions).\n \t We still need to verify that the sizes match.  */\n@@ -911,6 +908,12 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n       mpz_clear (cons_size);\n       if (cmp)\n \tgoto cleanup;\n+\n+      /* Set the rank/shape to match the LHS as auto-reshape is implied. */\n+      expr->rank = as->rank;\n+      expr->shape = gfc_get_shape (as->rank);\n+      for (int i = 0; i < as->rank; ++i)\n+\tspec_dimen_size (as, i, &expr->shape[i]);\n     }\n \n   /* Make sure scalar types match. */"}, {"sha": "5ccd9072c240d89b08db7423184f5b43a4092370", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -1454,6 +1454,34 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t    }\n \t}\n \n+      /* Validate shape, except for dynamic or PDT arrays.  */\n+      if (cons->expr->expr_type == EXPR_ARRAY && rank == cons->expr->rank\n+\t  && comp->as && !comp->attr.allocatable && !comp->attr.pointer\n+\t  && !comp->attr.pdt_array)\n+\t{\n+\t  mpz_t len;\n+\t  mpz_init (len);\n+\t  for (int n = 0; n < rank; n++)\n+\t    {\n+\t      gcc_assert (comp->as->upper[n]->expr_type == EXPR_CONSTANT\n+\t\t\t  && comp->as->lower[n]->expr_type == EXPR_CONSTANT);\n+\t      mpz_set_ui (len, 1);\n+\t      mpz_add (len, len, comp->as->upper[n]->value.integer);\n+\t      mpz_sub (len, len, comp->as->lower[n]->value.integer);\n+\t      if (mpz_cmp (cons->expr->shape[n], len) != 0)\n+\t\t{\n+\t\t  gfc_error (\"The shape of component %qs in the structure \"\n+\t\t\t     \"constructor at %L differs from the shape of the \"\n+\t\t\t     \"declared component for dimension %d (%ld/%ld)\",\n+\t\t\t     comp->name, &cons->expr->where, n+1,\n+\t\t\t     mpz_get_si (cons->expr->shape[n]),\n+\t\t\t     mpz_get_si (len));\n+\t\t  t = false;\n+\t\t}\n+\t    }\n+\t  mpz_clear (len);\n+\t}\n+\n       if (!comp->attr.pointer || comp->attr.proc_pointer\n \t  || cons->expr->expr_type == EXPR_NULL)\n \tcontinue;"}, {"sha": "91fc4c902d82352376db7cb3675f6d1e307815fb", "filename": "gcc/testsuite/gfortran.dg/derived_constructor_char_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_constructor_char_1.f90?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -5,7 +5,7 @@\n !\n !\n   Type :: t5\n-    character (len=5) :: txt(4)\n+    character (len=5) :: txt(2)\n   End Type t5\n \n   character (len=3), parameter :: str3(2) = [ \"ABC\", \"ZYX\" ]"}, {"sha": "d325c27b32ac0881414e803799a64740eb2f8be5", "filename": "gcc/testsuite/gfortran.dg/pr102685.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102685.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102685.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102685.f90?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! PR fortran/102685\n+\n+program p\n+  type t\n+     integer :: a(2)\n+  end type\n+  type(t), parameter :: x0    = t([2])         ! { dg-error \"shape of component\" }\n+  type(t), parameter :: x1(2) = t([2])         ! { dg-error \"shape of component\" }\n+  type(t), parameter :: x(2)  = t([integer::]) ! { dg-error \"shape of component\" }\n+\n+  type u\n+     integer :: a\n+     integer :: b(0)\n+  end type\n+  type(u), parameter :: z0(2) = u(1, [integer::]) ! valid\n+  type(u), parameter :: z1    = u(1,  2 )         ! valid\n+  type(u), parameter :: z2(2) = u(1,  2 )         ! valid\n+  type(u), parameter :: z3    = u(1, [2])         ! { dg-error \"shape of component\" }\n+  type(u), parameter :: z4(2) = u(1, [2])         ! { dg-error \"shape of component\" }\n+\n+  type v\n+     integer :: a(2,1)\n+  end type\n+  type(v), parameter :: y0   = v(reshape([1,2],[2,1])) ! valid\n+  type(v), parameter :: y1   = v(reshape([1,2],[1,2])) ! { dg-error \"shape of component\" }\n+  type(v), parameter :: y(1) = v(reshape([1,2],[1,2])) ! { dg-error \"shape of component\" }\n+\n+  print *, x0,x,x1,y0,y1,y,z0,z1,z2,z3,z4\n+end"}, {"sha": "4444b5eec3b7f08b196f385d62253525fd1bee11", "filename": "gcc/testsuite/gfortran.dg/pr70931.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70931.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70931.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70931.f90?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -5,6 +5,7 @@ program p\n       integer :: a\n       integer :: b(0)\n    end type\n-   type(t), parameter :: z = t(1, [2])\n+!  type(t), parameter :: z = t(1, [2])         ! original invalid code\n+   type(t), parameter :: z = t(1, [integer::])\n    print *, z\n end"}, {"sha": "b428fa64b5660fa957566d7c790b7090257bbb08", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e819bd95ebeefc1dc469daa1855ce005cb77822/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90?ref=1e819bd95ebeefc1dc469daa1855ce005cb77822", "patch": "@@ -145,7 +145,7 @@ subroutine character16_to_dt\n       real(4) :: x(2)\n     end type mytype\n \n-    type (mytype), parameter :: dt1(2) = transfer (c1, mytype ((/1.0,2.0,3.0,4.0/)), 2)\n+    type (mytype), parameter :: dt1(2) = transfer (c1, mytype ((/1.0,2.0/)), 2)\n     type (mytype)            :: dt2(2)\n \n     dt2 = transfer (c2, dt2);"}]}