{"sha": "e2dd12ab66d14ac76a92b4538af81f8361132ba0", "node_id": "C_kwDOANBUbNoAKGUyZGQxMmFiNjZkMTRhYzc2YTkyYjQ1MzhhZjgxZjgzNjExMzJiYTA", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-13T14:20:00Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-13T14:20:00Z"}, "message": "Remember fnspec based EAF flags in modref summary.\n\ngcc/ChangeLog:\n\n\t* attr-fnspec.h (attr_fnspec::arg_eaf_flags): Break out from ...\n\t* gimple.c (gimple_call_arg_flags): ... here.\n\t* ipa-modref.c (analyze_parms): Record flags known from fnspec.\n\t(modref_merge_call_site_flags): Use arg_eaf_flags.", "tree": {"sha": "cee2ae844d596479c28b09dfa893bd4828ed2aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee2ae844d596479c28b09dfa893bd4828ed2aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2dd12ab66d14ac76a92b4538af81f8361132ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2dd12ab66d14ac76a92b4538af81f8361132ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2dd12ab66d14ac76a92b4538af81f8361132ba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2dd12ab66d14ac76a92b4538af81f8361132ba0/comments", "author": null, "committer": null, "parents": [{"sha": "b7a23949b0dcc4205fcc2be6b84b91441faa384d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a23949b0dcc4205fcc2be6b84b91441faa384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a23949b0dcc4205fcc2be6b84b91441faa384d"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "cd618cb342bf739b4a1f2d73ff500e8a83f8a430", "filename": "gcc/attr-fnspec.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fattr-fnspec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fattr-fnspec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattr-fnspec.h?ref=e2dd12ab66d14ac76a92b4538af81f8361132ba0", "patch": "@@ -264,6 +264,29 @@ class attr_fnspec\n     return str[1] == 'C' || str[1] == 'P';\n   }\n \n+  /* Return EAF flags for arg I.  */\n+  int\n+  arg_eaf_flags (unsigned int i)\n+  {\n+    int flags = 0;\n+\n+    if (!arg_specified_p (i))\n+      ;\n+    else if (!arg_used_p (i))\n+      flags = EAF_UNUSED;\n+    else\n+      {\n+\tif (arg_direct_p (i))\n+\t  flags |= EAF_NO_INDIRECT_READ | EAF_NO_INDIRECT_ESCAPE\n+\t\t   | EAF_NOT_RETURNED_INDIRECTLY | EAF_NO_INDIRECT_CLOBBER;\n+\tif (arg_noescape_p (i))\n+\t  flags |= EAF_NO_DIRECT_ESCAPE | EAF_NO_INDIRECT_ESCAPE;\n+\tif (arg_readonly_p (i))\n+\t  flags |= EAF_NO_DIRECT_CLOBBER | EAF_NO_INDIRECT_CLOBBER;\n+      }\n+    return flags;\n+  }\n+\n   /* Check validity of the string.  */\n   void verify ();\n "}, {"sha": "037c6e4c8275fa219b953766446cd03950fc6ca0", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=e2dd12ab66d14ac76a92b4538af81f8361132ba0", "patch": "@@ -1567,22 +1567,7 @@ gimple_call_arg_flags (const gcall *stmt, unsigned arg)\n   int flags = 0;\n \n   if (fnspec.known_p ())\n-    {\n-      if (!fnspec.arg_specified_p (arg))\n-\t;\n-      else if (!fnspec.arg_used_p (arg))\n-\tflags = EAF_UNUSED;\n-      else\n-\t{\n-\t  if (fnspec.arg_direct_p (arg))\n-\t    flags |= EAF_NO_INDIRECT_READ | EAF_NO_INDIRECT_ESCAPE\n-\t\t     | EAF_NOT_RETURNED_INDIRECTLY | EAF_NO_INDIRECT_CLOBBER;\n-\t  if (fnspec.arg_noescape_p (arg))\n-\t    flags |= EAF_NO_DIRECT_ESCAPE | EAF_NO_INDIRECT_ESCAPE;\n-\t  if (fnspec.arg_readonly_p (arg))\n-\t    flags |= EAF_NO_DIRECT_CLOBBER | EAF_NO_INDIRECT_CLOBBER;\n-\t}\n-    }\n+    flags = fnspec.arg_eaf_flags (arg);\n   tree callee = gimple_call_fndecl (stmt);\n   if (callee)\n     {"}, {"sha": "669dbe45a3d0700a3198340c290a71eae87c0672", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dd12ab66d14ac76a92b4538af81f8361132ba0/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=e2dd12ab66d14ac76a92b4538af81f8361132ba0", "patch": "@@ -2476,6 +2476,14 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n   /* Do the dataflow.  */\n   eaf_analysis.propagate ();\n \n+  tree attr = lookup_attribute (\"fn spec\",\n+\t\t\t\tTYPE_ATTRIBUTES\n+\t\t\t\t  (TREE_TYPE (current_function_decl)));\n+  attr_fnspec fnspec (attr\n+\t\t      ? TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)))\n+\t\t      : \"\");\n+\n+\n   /* Store results to summaries.  */\n   for (tree parm = DECL_ARGUMENTS (current_function_decl); parm; parm_index++,\n        parm = TREE_CHAIN (parm))\n@@ -2502,6 +2510,18 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n \t  continue;\n \t}\n       int flags = eaf_analysis.get_ssa_name_flags (name);\n+      int attr_flags = fnspec.arg_eaf_flags (parm_index);\n+\n+      if (dump_file && (flags | attr_flags) != flags && !(flags & EAF_UNUSED))\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"  Flags for param %i combined with fnspec flags:\",\n+\t\t   (int)parm_index);\n+\t  dump_eaf_flags (dump_file, attr_flags, false);\n+\t  fprintf (dump_file, \" determined: \");\n+\t  dump_eaf_flags (dump_file, flags, true);\n+\t}\n+      flags |= attr_flags;\n \n       /* Eliminate useless flags so we do not end up storing unnecessary\n \t summaries.  */\n@@ -2522,8 +2542,8 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n \t\t       \"  Flags for param %i combined with IPA pass:\",\n \t\t       (int)parm_index);\n \t      dump_eaf_flags (dump_file, past, false);\n-\t      fprintf (dump_file, \" local \");\n-\t      dump_eaf_flags (dump_file, flags | past, true);\n+\t      fprintf (dump_file, \" determined: \");\n+\t      dump_eaf_flags (dump_file, flags, true);\n \t    }\n \t  if (!(flags & EAF_UNUSED))\n \t    flags |= past;\n@@ -2561,7 +2581,7 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n \t  fprintf (dump_file,\n \t\t   \"  Retslot flags combined with IPA pass:\");\n \t  dump_eaf_flags (dump_file, past, false);\n-\t  fprintf (dump_file, \" local \");\n+\t  fprintf (dump_file, \" determined: \");\n \t  dump_eaf_flags (dump_file, flags, true);\n \t}\n       if (!(flags & EAF_UNUSED))\n@@ -2591,7 +2611,7 @@ analyze_parms (modref_summary *summary, modref_summary_lto *summary_lto,\n \t  fprintf (dump_file,\n \t\t   \"  Static chain flags combined with IPA pass:\");\n \t  dump_eaf_flags (dump_file, past, false);\n-\t  fprintf (dump_file, \" local \");\n+\t  fprintf (dump_file, \" determined: \");\n \t  dump_eaf_flags (dump_file, flags, true);\n \t}\n       if (!(flags & EAF_UNUSED))\n@@ -4503,27 +4523,7 @@ modref_merge_call_site_flags (escape_summary *sum,\n       if (fnspec_sum)\n \t{\n \t  attr_fnspec fnspec (fnspec_sum->fnspec);\n-\t  int fnspec_flags = 0;\n-\n-\t  if (fnspec.arg_specified_p (ee->arg))\n-\t    {\n-\t      if (!fnspec.arg_used_p (ee->arg))\n-\t\tfnspec_flags = EAF_UNUSED;\n-\t      else\n-\t\t{\n-\t\t  if (fnspec.arg_direct_p (ee->arg))\n-\t\t    fnspec_flags |= EAF_NO_INDIRECT_READ\n-\t\t\t     | EAF_NO_INDIRECT_ESCAPE\n-\t\t\t     | EAF_NOT_RETURNED_INDIRECTLY\n-\t\t\t     | EAF_NO_INDIRECT_CLOBBER;\n-\t\t  if (fnspec.arg_noescape_p (ee->arg))\n-\t\t    fnspec_flags |= EAF_NO_DIRECT_ESCAPE\n-\t\t\t\t    | EAF_NO_INDIRECT_ESCAPE;\n-\t\t  if (fnspec.arg_readonly_p (ee->arg))\n-\t\t    flags |= EAF_NO_DIRECT_CLOBBER | EAF_NO_INDIRECT_CLOBBER;\n-\t\t}\n-\t    }\n-\t  implicit_flags |= fnspec_flags;\n+\t  implicit_flags |= fnspec.arg_eaf_flags (ee->arg);\n \t}\n       if (!ee->direct)\n \timplicit_flags = deref_flags (implicit_flags, ignore_stores);"}]}