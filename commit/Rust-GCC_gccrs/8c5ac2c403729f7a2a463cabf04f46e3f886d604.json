{"sha": "8c5ac2c403729f7a2a463cabf04f46e3f886d604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1YWMyYzQwMzcyOWY3YTJhNDYzY2FiZjA0ZjQ2ZTNmODg2ZDYwNA==", "commit": {"author": {"name": "Randolph Chung", "email": "tausq@debian.org", "date": "2004-07-09T03:39:35Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-07-09T03:39:35Z"}, "message": "pa32-linux.h (MD_FALLBACK_FRAME_STATE_FOR): Define.\n\n\t* gcc/config/pa/pa32-linux.h (MD_FALLBACK_FRAME_STATE_FOR): Define.\n\t* libjava/configure.in (SIGNAL_HANDLER): Use pa-signal.h for hppa.\n\t* libjava/configure: Regenerate.\n\t* libjava/configure.host: Set can_unwind_signal for hppa*-linux.\n\t* libjava/pa-signal.h: New file.\n\nFrom-SVN: r84344", "tree": {"sha": "2882e9fa20bf7d913df5c34eeec6e334a5b1f795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2882e9fa20bf7d913df5c34eeec6e334a5b1f795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5ac2c403729f7a2a463cabf04f46e3f886d604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5ac2c403729f7a2a463cabf04f46e3f886d604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5ac2c403729f7a2a463cabf04f46e3f886d604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5ac2c403729f7a2a463cabf04f46e3f886d604/comments", "author": null, "committer": null, "parents": [{"sha": "691e2db8999df2267f332360bb2603cb7244d7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691e2db8999df2267f332360bb2603cb7244d7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691e2db8999df2267f332360bb2603cb7244d7e6"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "fb2205c3d3013e68c80316405c91db52deea2049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -1,3 +1,7 @@\n+2004-07-08  Randolph Chung  <tausq@debian.org>\n+\n+\t* pa32-linux.h (MD_FALLBACK_FRAME_STATE_FOR): Define.\n+\n 2004-07-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* builtins.c (fold_builtin_strncpy): Make sure len is a constant"}, {"sha": "14cc2cf9159a8fad911ce55af76ce5f5cb253cec", "filename": "gcc/config/pa/pa32-linux.h", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-linux.h?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -35,3 +35,97 @@ Boston, MA 02111-1307, USA.  */\n     __attribute__ ((__unused__, section(\".ctors\"),\t\t\t\\\n \t\t    aligned(sizeof(func_ptr))))\t\t\t\t\\\n     = { (func_ptr) (-1) }\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#ifdef IN_LIBGCC2\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+\n+/* Unfortunately, because of various bugs and changes to the kernel,\n+   we have several cases to deal with.\n+\n+   In 2.4, the signal trampoline is 4 words, and (CONTEXT)->ra should\n+   point directly at the beginning of the trampoline and struct rt_sigframe.\n+\n+   In <= 2.6.5-rc2-pa3, the signal trampoline is 9 words, and \n+   (CONTEXT)->ra points at the 4th word in the trampoline structure.  This \n+   is wrong, it should point at the 5th word.  This is fixed in 2.6.5-rc2-pa4.\n+\n+   To detect these cases, we first take (CONTEXT)->ra, align it to 64-bytes\n+   to get the beginning of the signal frame, and then check offsets 0, 4\n+   and 5 to see if we found the beginning of the trampoline.  This will\n+   tell us how to locate the sigcontext structure.\n+\n+   Note that with a 2.4 64-bit kernel, the signal context is not properly\n+   passed back to userspace so the unwind will not work correctly.  */\n+#define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    unsigned long sp = (unsigned long)(CONTEXT)->ra & ~63;\t\t\\\n+    unsigned int *pc = (unsigned int *)sp;\t\t\t\t\\\n+    unsigned long off;\t\t\t\t\t\t\t\\\n+    _Unwind_Ptr new_cfa;\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    struct sigcontext *sc;\t\t\t\t\t\t\\\n+    struct rt_sigframe {\t\t\t\t\t\t\\\n+      struct siginfo info;\t\t\t\t\t\t\\\n+      struct ucontext uc;\t\t\t\t\t\t\\\n+    } *frame;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* rt_sigreturn trampoline: \t\t\t\t\t\\\n+       3419000x ldi 0, %r25 or ldi 1, %r25   (x = 0 or 2)  \t\t\\\n+       3414015a ldi __NR_rt_sigreturn, %r20 \t\t\t\t\\\n+       e4008200 be,l 0x100(%sr2, %r0), %sr0, %r31 \t\t\t\\\n+       08000240 nop  */\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    if (pc[0] == 0x34190000 || pc[0] == 0x34190002)\t\t\t\\\n+      off = 4*4;\t\t\t\t\t\t\t\\\n+    else if (pc[4] == 0x34190000 || pc[4] == 0x34190002)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tpc += 4;\t\t\t\t\t\t\t\\\n+\toff = 10 * 4;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else if (pc[5] == 0x34190000 || pc[5] == 0x34190002)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tpc += 5;\t\t\t\t\t\t\t\\\n+\toff = 10 * 4;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    if (pc[1] != 0x3414015a \t\t\t\t\t\t\\\n+\t|| pc[2] != 0xe4008200 \t\t\t\t\t\t\\\n+\t|| pc[3] != 0x08000240)\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    frame = (struct rt_sigframe *)(sp + off);\t\t\t\t\\\n+    sc = &frame->uc.uc_mcontext;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    new_cfa = sc->sc_gr[30];\t\t\t\t\t\t\\\n+    (FS)->cfa_how = CFA_REG_OFFSET;\t\t\t\t\t\\\n+    (FS)->cfa_reg = 30;\t\t\t\t\t\t\t\\\n+    (FS)->cfa_offset = new_cfa - (long) (CONTEXT)->cfa;\t\t\t\\\n+    for (i = 1; i <= 31; i++)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t(FS)->regs.reg[i].how = REG_SAVED_OFFSET;\t\t\t\\\n+\t(FS)->regs.reg[i].loc.offset = (long)&sc->sc_gr[i] - new_cfa;\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    for (i = 4; i <= 31; i++)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* FP regs have left and right halves */\t\t\t\\\n+\t(FS)->regs.reg[2*i+24].how = REG_SAVED_OFFSET;\t\t\t\\\n+\t(FS)->regs.reg[2*i+24].loc.offset\t\t\t\t\\\n+\t  = (long)&sc->sc_fr[i] - new_cfa;\t\t\t\t\\\n+\t(FS)->regs.reg[2*i+24+1].how = REG_SAVED_OFFSET;\t\t\\\n+\t(FS)->regs.reg[2*i+24+1].loc.offset\t\t\t\t\\\n+\t  = (long)&sc->sc_fr[i] + 4 - new_cfa;\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    (FS)->regs.reg[88].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+    (FS)->regs.reg[88].loc.offset = (long) &sc->sc_sar - new_cfa;\t\\\n+    (FS)->regs.reg[2].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+    (FS)->regs.reg[2].loc.offset = (long) &sc->sc_iaoq[0] - new_cfa;\t\\\n+    (FS)->retaddr_column = 2;\t\t\t\t\t\t\\\n+    goto SUCCESS;\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#endif /* IN_LIBGCC2 */"}, {"sha": "8c6cb64e6c608567335effe9f24ddf55f658987d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -1,3 +1,10 @@\n+2004-07-08  Randolph Chung  <tausq@debian.org>\n+\n+\t* configure.in (SIGNAL_HANDLER): Use pa-signal.h for hppa.\n+\t* configure: Regenerate.\n+\t* configure.host: Set can_unwind_signal for hppa*-linux.\n+\t* include/pa-signal.h: New file.\n+\n 2004-07-07  Per Bothner  <per@bothner.com>\n \n \t* Makefile.am:  Add rules to build libgij from just gij.cc."}, {"sha": "bf829c1f267535dadfcc6f7d142277f46ac83ccb", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -8525,6 +8525,9 @@ case \"${host}\" in\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep\n #    ;;\n+ hppa*-*-linux*)\n+    SIGNAL_HANDLER=include/pa-signal.h\n+    ;;\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "947392766bffaa7bb623c3171aef6fc4a47f19d2", "filename": "libjava/configure.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -169,6 +169,7 @@ case \"${host}\" in\n   sparc*-linux* | \\\n   ia64-* | \\\n   x86_64*-linux* | \\\n+  hppa*-linux* | \\\n   sh-linux* | sh[34]*-linux*)\n   \tcan_unwind_signal=yes\n \tif test x$slow_pthread_self = xyes \\"}, {"sha": "142cffa7902b5bce2a55c630d7556cdeae77d7d9", "filename": "libjava/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -1177,6 +1177,9 @@ case \"${host}\" in\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep\n #    ;;\n+ hppa*-*-linux*)\n+    SIGNAL_HANDLER=include/pa-signal.h\n+    ;;\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "0f7c05427ab3424e0919fc4d12e75699282eb487", "filename": "libjava/include/pa-signal.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Finclude%2Fpa-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5ac2c403729f7a2a463cabf04f46e3f886d604/libjava%2Finclude%2Fpa-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fpa-signal.h?ref=8c5ac2c403729f7a2a463cabf04f46e3f886d604", "patch": "@@ -0,0 +1,61 @@\n+// pa-signal.h - Catch runtime signals and turn them into exceptions.\n+\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef JAVA_SIGNAL_H\n+#define JAVA_SIGNAL_H 1\n+\n+#include <signal.h>\n+#include <ucontext.h>\n+#include <sys/syscall.h>\n+\n+#define HANDLE_SEGV 1\n+#define HANDLE_FPE 1\n+\n+#define SIGNAL_HANDLER(_name) \t\t\t\t\t\\\n+static void _Jv_##_name (int _dummy, siginfo_t *_info, void *arg)\n+\n+#define MAKE_THROW_FRAME(_exception)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  struct ucontext *uc = (struct ucontext *)arg;\t\t\t\\\n+  struct sigcontext *sc = &uc->uc_mcontext;\t\t\t\\\n+  (void)_dummy;\t\t\t\t\t\t\t\\\n+  (void)_info;\t\t\t\t\t\t\t\\\n+  /* Advance the program counter so that it is after the start \t\\\n+     of the instruction:  the exception handler expects\t\t\\\n+     the PC to point to the instruction after a call. */\t\\\n+  sc->sc_iaoq[0] = sc->sc_iaoq[1];\t\t\t\t\\\n+  sc->sc_iaoq[1] += 4;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define INIT_SEGV\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = SA_SIGINFO;\t       \t\t\t\t\\\n+    syscall (SYS_rt_sigaction, SIGSEGV, &act, NULL, _NSIG / 8);\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#define INIT_FPE\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = SA_SIGINFO;\t\t       \t\t\t\\\n+    syscall (SYS_rt_sigaction, SIGFPE, &act, NULL, _NSIG / 8);\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#endif /* JAVA_SIGNAL_H */"}]}