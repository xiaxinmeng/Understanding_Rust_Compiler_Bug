{"sha": "2b757d51018107dce6402af3b3a69eedab3592d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3NTdkNTEwMTgxMDdkY2U2NDAyYWYzYjNhNjllZWRhYjM1OTJkMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-03-10T10:41:25Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-03-10T10:41:25Z"}, "message": "lbasename.c: New file.\n\n\t* libiberty/lbasename.c: New file.\n\t* libiberty/Makefile.in: Update for lbasename.\n\t* include/libiberty.h: Add lbasename.\n\nCo-Authored-By: John David Anglin <dave@hiauly1.hia.nrc.ca>\n\nFrom-SVN: r40363", "tree": {"sha": "b2d367fd65617495cf1e8e2beefffc382d0e8ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d367fd65617495cf1e8e2beefffc382d0e8ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b757d51018107dce6402af3b3a69eedab3592d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b757d51018107dce6402af3b3a69eedab3592d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b757d51018107dce6402af3b3a69eedab3592d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b757d51018107dce6402af3b3a69eedab3592d1/comments", "author": null, "committer": null, "parents": [{"sha": "5ed3d577ed5e3d3bd2c75d2a440ffe5076e4d9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed3d577ed5e3d3bd2c75d2a440ffe5076e4d9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed3d577ed5e3d3bd2c75d2a440ffe5076e4d9f9"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "57e64be08be583adae4308af9fa357c2baf733b1", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b757d51018107dce6402af3b3a69eedab3592d1/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b757d51018107dce6402af3b3a69eedab3592d1/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=2b757d51018107dce6402af3b3a69eedab3592d1", "patch": "@@ -1,3 +1,8 @@\n+2001-03-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\t    John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* include/libiberty.h: Add lbasename.\n+\n 2001-03-06  Zack Weinberg  <zackw@stanford.edu>\n \n \t* libiberty.h: Prototype C_alloca; define alloca to either"}, {"sha": "c61c1f012cb11063f33ab299e3f26e74bb9bf6ee", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b757d51018107dce6402af3b3a69eedab3592d1/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b757d51018107dce6402af3b3a69eedab3592d1/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=2b757d51018107dce6402af3b3a69eedab3592d1", "patch": "@@ -56,6 +56,10 @@ extern char *basename ();\n # endif\n #endif\n \n+/* A well-defined basename () that is always compiled in.  */\n+\n+extern char *lbasename PARAMS ((const char *));\n+\n /* Concatenate an arbitrary number of strings, up to (char *) NULL.\n    Allocates memory using xmalloc.  */\n "}, {"sha": "056373ed25cd13031c097cbeed67e2f5039b28b2", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2b757d51018107dce6402af3b3a69eedab3592d1", "patch": "@@ -1,3 +1,9 @@\n+2001-03-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\t    John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* libiberty/lbasename.c: New file.\n+\t* libiberty/Makefile.in: Update for lbasename.\n+\n 2001-03-06  Zack Weinberg  <zackw@stanford.edu>\n \n \t* aclocal.m4 (libiberty_AC_FUNC_C_ALLOCA): New."}, {"sha": "d0202188b392991ee06f2c2b9073b3180c9d1c84", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=2b757d51018107dce6402af3b3a69eedab3592d1", "patch": "@@ -124,7 +124,8 @@ CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c\t      \\\n \tbzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c\t      \\\n         cp-demangle.c dyn-string.c fdmatch.c fnmatch.c getcwd.c\t\t      \\\n \tgetpwd.c getopt.c getopt1.c getpagesize.c getruntime.c\t\t      \\\n-\tfloatformat.c hashtab.c hex.c index.c insque.c md5.c memchr.c         \\\n+\tfloatformat.c hashtab.c hex.c index.c insque.c lbasename.c            \\\n+\tmd5.c memchr.c\t\t\t\t\t\t\t      \\\n \tmemcmp.c memcpy.c memmove.c memset.c mkstemps.c objalloc.c obstack.c  \\\n \tpartition.c pexecute.c putenv.c random.c rename.c rindex.c setenv.c   \\\n \tsigsetmask.c safe-ctype.c sort.c spaces.c splay-tree.c strcasecmp.c   \\\n@@ -134,11 +135,12 @@ CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c\t      \\\n \txmalloc.c xmemdup.c xstrdup.c xstrerror.c\n \n # These are always included in the library.\n-REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o           \\\n-\tcp-demangle.o dyn-string.o fdmatch.o fnmatch.o getopt.o getopt1.o      \\\n-\tgetpwd.o getruntime.o hashtab.o hex.o floatformat.o md5.o objalloc.o   \\\n-\tobstack.o partition.o pexecute.o safe-ctype.o sort.o spaces.o          \\\n-\tsplay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o        \\\n+REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o          \\\n+\tcp-demangle.o dyn-string.o fdmatch.o fnmatch.o getopt.o getopt1.o     \\\n+\tgetpwd.o getruntime.o hashtab.o hex.o floatformat.o lbasename.o       \\\n+        md5.o objalloc.o\t\t\t\t\t\t      \\\n+\tobstack.o partition.o pexecute.o safe-ctype.o sort.o spaces.o         \\\n+\tsplay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o       \\\n \txmemdup.o xstrdup.o xstrerror.o\n \n $(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n@@ -271,6 +273,7 @@ getpwd.o: config.h $(INCDIR)/libiberty.h\n getruntime.o: config.h $(INCDIR)/libiberty.h\n hex.o: $(INCDIR)/libiberty.h\n floatformat.o: $(INCDIR)/floatformat.h\n+lbasename.o: $(INCDIR)/libiberty.h\n mkstemps.o: config.h\n md5.o: config.h\n objalloc.o: config.h $(INCDIR)/objalloc.h"}, {"sha": "7f870497c4fbe76e6644f0675dec0b5052763612", "filename": "libiberty/lbasename.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2Flbasename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b757d51018107dce6402af3b3a69eedab3592d1/libiberty%2Flbasename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flbasename.c?ref=2b757d51018107dce6402af3b3a69eedab3592d1", "patch": "@@ -0,0 +1,89 @@\n+/* Libiberty basename.  Like basename, but is not overridden by the\n+   system C library.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/*\n+NAME\n+\tlbasename -- return pointer to last component of a pathname\n+\n+SYNOPSIS\n+\tchar *lbasename (const char *name)\n+\n+DESCRIPTION\n+\tGiven a pointer to a string containing a typical pathname\n+\t(/usr/src/cmd/ls/ls.c for example), returns a pointer to the\n+\tlast component of the pathname (\"ls.c\" in this case).  The\n+\treturned pointer is guaranteed to lie within the original\n+\tstring.  This latter fact is not true of many vendor C\n+\tlibraries, which return special strings or modify the passed\n+\tstrings for particular input.\n+\n+\tIn particular, the empty string returns the same empty string,\n+\tand a path ending in '/' returns the empty string after it.\n+*/\n+\n+#include \"ansidecl.h\"\n+#include \"libiberty.h\"\n+#include \"safe-ctype.h\"\n+\n+#ifndef DIR_SEPARATOR\n+#  define DIR_SEPARATOR '/'\n+#endif\n+\n+#if defined (_WIN32) || defined (__MSDOS__) \\\n+    || defined (__DJGPP__) || defined (__OS2__)\n+#  define HAVE_DOS_BASED_FILE_SYSTEM\n+#  ifndef DIR_SEPARATOR_2 \n+#    define DIR_SEPARATOR_2 '\\\\'\n+#  endif\n+#endif\n+\n+/* Define IS_DIR_SEPARATOR. VMS uses '::', ':', '[...]' and '<...>' to\n+   separate the different components of a file specification.  It's a\n+   bit of a stretch to call ':', ']' and '>' directory separators, so\n+   just define the test to find the file name component.  */\n+#ifdef VMS\n+#  define IS_DIR_SEPARATOR(ch) ((ch) == ':' || (ch) == ']' || (ch) == '>')\n+#else\n+#  ifndef DIR_SEPARATOR_2\n+#    define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n+#  else\n+#    define IS_DIR_SEPARATOR(ch) \\\n+\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n+#  endif\n+#endif\n+\n+char *\n+lbasename (name)\n+     const char *name;\n+{\n+  const char *base;\n+\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n+  /* Skip over a possible disk name.  */\n+  if (ISALPHA (name[0]) && name[1] == ':') \n+    name += 2;\n+#endif\n+\n+  for (base = name; *name; name++)\n+    if (IS_DIR_SEPARATOR (*name))\n+      base = name + 1;\n+\n+  return (char *) base;\n+}"}]}