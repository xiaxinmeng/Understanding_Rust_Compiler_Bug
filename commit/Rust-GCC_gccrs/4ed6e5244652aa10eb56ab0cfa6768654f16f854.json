{"sha": "4ed6e5244652aa10eb56ab0cfa6768654f16f854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkNmU1MjQ0NjUyYWExMGViNTZhYjBjZmE2NzY4NjU0ZjE2Zjg1NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-18T15:44:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-18T15:44:25Z"}, "message": "Make use of extensions more explicit in libstdc++ tests\n\n\t* testsuite/18_support/bad_exception/23591_thread-1.c: Add\n\t-Wno-pedantic to dg-options.\n\t* testsuite/20_util/align/2.cc: Use type as operand of alignof.\n\t* testsuite/20_util/is_floating_point/value.cc: Add -Wno-pedantic\n\tto dg-options.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/32158.cc:\n\tRemove extra semi-colon.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n\tAlways supply second argument to static_assert.\n\t* testsuite/25_algorithms/lower_bound/no_operator_ne.cc: Remove extra\n\tsemi-colon.\n\t* testsuite/26_numerics/complex/c99.cc: Add -Wno-pedantic to\n\tdg-options.\n\t* testsuite/26_numerics/complex/literals/values.cc: Likewise.\n\t* testsuite/29_atomics/atomic/60695.cc: Likewise.\n\t* testsuite/29_atomics/atomic/62259.cc: use __alignof__ instead of\n\talignof when operand is an object not a type.\n\t* testsuite/decimal/ctor.cc: Add -Wno-pedantic to dg-options.\n\t* testsuite/decimal/make-decimal.cc: Likewise.\n\t* testsuite/experimental/type_traits/value.cc: Always supply second\n\targument to static_assert.\n\t* testsuite/util/testsuite_common_types.h: Use __extension__ for\n\t__int128 types.\n\nFrom-SVN: r235154", "tree": {"sha": "69435987560cf11b100937794aaf4e9c898e86fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69435987560cf11b100937794aaf4e9c898e86fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ed6e5244652aa10eb56ab0cfa6768654f16f854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed6e5244652aa10eb56ab0cfa6768654f16f854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed6e5244652aa10eb56ab0cfa6768654f16f854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed6e5244652aa10eb56ab0cfa6768654f16f854/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb6e0a19db16b185d218256d34be6a8e7045689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb6e0a19db16b185d218256d34be6a8e7045689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb6e0a19db16b185d218256d34be6a8e7045689"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "385363bda881f3bdd5ae21bf927bc869e5e06289", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,5 +1,29 @@\n 2016-04-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/18_support/bad_exception/23591_thread-1.c: Add\n+\t-Wno-pedantic to dg-options.\n+\t* testsuite/20_util/align/2.cc: Use type as operand of alignof.\n+\t* testsuite/20_util/is_floating_point/value.cc: Add -Wno-pedantic\n+\tto dg-options.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/32158.cc:\n+\tRemove extra semi-colon.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n+\tAlways supply second argument to static_assert.\n+\t* testsuite/25_algorithms/lower_bound/no_operator_ne.cc: Remove extra\n+\tsemi-colon.\n+\t* testsuite/26_numerics/complex/c99.cc: Add -Wno-pedantic to\n+\tdg-options.\n+\t* testsuite/26_numerics/complex/literals/values.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/60695.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/62259.cc: use __alignof__ instead of\n+\talignof when operand is an object not a type.\n+\t* testsuite/decimal/ctor.cc: Add -Wno-pedantic to dg-options.\n+\t* testsuite/decimal/make-decimal.cc: Likewise.\n+\t* testsuite/experimental/type_traits/value.cc: Always supply second\n+\targument to static_assert.\n+\t* testsuite/util/testsuite_common_types.h: Use __extension__ for\n+\t__int128 types.\n+\n \t* testsuite/experimental/type_erased_allocator/1.cc: Don't include\n \tinternal header.\n \t* testsuite/experimental/type_erased_allocator/1_neg.cc: Likewise."}, {"sha": "fd1a76cbd31797ed0ea1116515f63847bd317efc", "filename": "libstdc++-v3/testsuite/18_support/bad_exception/23591_thread-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F23591_thread-1.c?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,5 +1,5 @@\n // { dg-require-sharedlib \"\" }\n-// { dg-options \"-g -O2 -pthread -ldl -x c -fvtable-verify=none\" { target *-*-linux* *-*-gnu* *-*-solaris2.1[2-9]* } }\n+// { dg-options \"-g -O2 -pthread -ldl -x c -fvtable-verify=none -Wno-pedantic\" { target *-*-linux* *-*-gnu* *-*-solaris2.1[2-9]* } }\n \n // Copyright (C) 2005-2016 Free Software Foundation, Inc.\n //"}, {"sha": "e2d1907a460ee99e68fd58f922f8fd7a9a6def56", "filename": "libstdc++-v3/testsuite/20_util/align/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F2.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -32,7 +32,7 @@ test01()\n   int i = 0;\n   void* ptr = &i;\n   auto space = sizeof(i);\n-  auto p2 = std::align(alignof(i), space, ptr, space);\n+  auto p2 = std::align(alignof(int), space, ptr, space);\n   VERIFY( ptr == &i );\n   VERIFY( p2 == &i );\n   VERIFY(space == sizeof(i));"}, {"sha": "8ed73fcce2a86750160e640df1639f7b71ac6d60", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -Wno-pedantic\" }\n // { dg-do compile }\n //\n // Copyright (C) 2011-2016 Free Software Foundation, Inc."}, {"sha": "fc0542680a65859e33053db9d96574b4a88f3dcc", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/32158.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F32158.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F32158.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F32158.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -31,4 +31,4 @@ Alpha(MyPair* start, MyPair* end)\n {\n   MyPair my_pair(1, 2);\n   std::uninitialized_fill(start, end, my_pair);\n-};\n+}"}, {"sha": "96e0bfbe72b5942d6e6792875714dbd7003651f9", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -47,7 +47,7 @@ test01()\n   static_assert(is_same<tuple_element<1, volatile array_type>::type,\n                 volatile int>::value, \"\");\n   static_assert( (is_same<tuple_element<2, volatile array_type>::type,\n-           volatile int>::value == true) );\n+           volatile int>::value == true), \"\" );\n \n   static_assert(is_same<tuple_element<0, const volatile array_type>::type,\n                 const volatile int>::value, \"\");"}, {"sha": "219e0934b10a5a2e4dab550fa55e81657e7a5a82", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/no_operator_ne.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -22,8 +22,8 @@\n // http://gcc.gnu.org/ml/libstdc++/2000-06/msg00316.html\n struct foo { };\n \n-bool operator== (const foo&, const foo&) { return true; };\n-bool operator< (const foo&, const foo&) { return true; };\n+bool operator== (const foo&, const foo&) { return true; }\n+bool operator< (const foo&, const foo&) { return true; }\n \n void bar(foo* a, foo* b, foo& x)\n {"}, {"sha": "c550520657e577149aeecc8adfaf8c3d96f30830", "filename": "libstdc++-v3/testsuite/26_numerics/complex/c99.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fc99.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fc99.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fc99.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -Wno-pedantic\" }\n \n // Copyright (C) 2012-2016 Free Software Foundation, Inc.\n //"}, {"sha": "1353112297c7a780c2f2f3dc743b7895f5213131", "filename": "libstdc++-v3/testsuite/26_numerics/complex/literals/values.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++14\" }\n+// { dg-options \"-std=gnu++14 -Wno-pedantic\" }\n // { dg-do run }\n \n // Copyright (C) 2013-2016 Free Software Foundation, Inc."}, {"sha": "ddd1b2ca051788eef5d5776e79e2f648fe18955f", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60695.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -1,5 +1,5 @@\n // { dg-require-atomic-builtins \"\" }\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++11 -Wno-pedantic\" }\n // { dg-do compile }\n \n // Copyright (C) 2014-2016 Free Software Foundation, Inc."}, {"sha": "458194a3bd147042aa11caac88d13b67853f60b7", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/62259.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F62259.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F62259.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F62259.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -44,7 +44,7 @@ struct power_of_two_obj {\n \n std::atomic<power_of_two_obj> obj1;\n \n-static_assert( alignof(obj1) >= alignof(int64_t),\n+static_assert( __alignof__(obj1) >= alignof(int64_t),\n                \"std::atomic not suitably aligned\" );\n \n struct container_struct {\n@@ -54,5 +54,5 @@ struct container_struct {\n \n container_struct obj2;\n \n-static_assert( alignof(obj2.ao) >= alignof(int64_t),\n+static_assert( __alignof__(obj2.ao) >= alignof(int64_t),\n                \"std::atomic not suitably aligned\" );"}, {"sha": "b289ed04e06508506946652268bee643f86c8b29", "filename": "libstdc++-v3/testsuite/decimal/ctor.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-require-effective-target dfp }\n+// { dg-options \"-Wno-pedantic\" }\n \n // ISO/IEC TR 24733  3.2.2.1  Construct/copy/destroy (decimal32).\n // ISO/IEC TR 24733  3.2.3.1  Construct/copy/destroy (decimal64)."}, {"sha": "b5aafa25e6667d864f1c3612e066362051e5d2c9", "filename": "libstdc++-v3/testsuite/decimal/make-decimal.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-require-effective-target dfp }\n+// { dg-options \"-Wno-pedantic\" }\n \n // ISO/IEC TR 24733  3.2.5  Initialization from coefficient and exponent.\n "}, {"sha": "16b63cbf47ba8e2a5b049b51b89d813653aafc34", "filename": "libstdc++-v3/testsuite/experimental/type_traits/value.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -323,23 +323,23 @@ static_assert(is_convertible_v<int&, const int&>\n static_assert(!is_convertible_v<const int&, int&>\n \t      && !is_convertible<const int&, int&>::value, \"\");\n \n-static_assert(negation_v<false_type>);\n-static_assert(!negation_v<true_type>);\n-static_assert(conjunction_v<>);\n-static_assert(!disjunction_v<>);\n-static_assert(conjunction_v<true_type>);\n-static_assert(!conjunction_v<false_type>);\n-static_assert(disjunction_v<true_type>);\n-static_assert(!disjunction_v<false_type>);\n-static_assert(conjunction_v<true_type, true_type>);\n-static_assert(!conjunction_v<true_type, false_type>);\n-static_assert(disjunction_v<false_type, true_type>);\n-static_assert(!disjunction_v<false_type, false_type>);\n+static_assert(negation_v<false_type>, \"\");\n+static_assert(!negation_v<true_type>, \"\");\n+static_assert(conjunction_v<>, \"\");\n+static_assert(!disjunction_v<>, \"\");\n+static_assert(conjunction_v<true_type>, \"\");\n+static_assert(!conjunction_v<false_type>, \"\");\n+static_assert(disjunction_v<true_type>, \"\");\n+static_assert(!disjunction_v<false_type>, \"\");\n+static_assert(conjunction_v<true_type, true_type>, \"\");\n+static_assert(!conjunction_v<true_type, false_type>, \"\");\n+static_assert(disjunction_v<false_type, true_type>, \"\");\n+static_assert(!disjunction_v<false_type, false_type>, \"\");\n static_assert(conjunction_v<true_type, true_type,\n-              true_type>);\n+              true_type>, \"\");\n static_assert(!conjunction_v<true_type, true_type,\n-              false_type>);\n+              false_type>, \"\");\n static_assert(disjunction_v<false_type, false_type,\n-              true_type>);\n+              true_type>, \"\");\n static_assert(!disjunction_v<false_type, false_type,\n-              false_type>);\n+              false_type>, \"\");"}, {"sha": "d6a766d3c19570ee08f50c4855e1b2815dfdaaeb", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed6e5244652aa10eb56ab0cfa6768654f16f854/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=4ed6e5244652aa10eb56ab0cfa6768654f16f854", "patch": "@@ -304,8 +304,8 @@ namespace __gnu_test\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    typedef __int128            a16;\n-    typedef unsigned __int128   a17;\n+    __extension__ typedef __int128            a16;\n+    __extension__ typedef unsigned __int128   a17;\n \n     typedef node<_GLIBCXX_TYPELIST_CHAIN17(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n \t\t\t\t\t   a10, a11, a12, a13, a14, a15,\n@@ -316,8 +316,8 @@ namespace __gnu_test\n # endif\n #else\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    typedef __int128            a14;\n-    typedef unsigned __int128   a15;\n+    __extension__ typedef __int128            a14;\n+    __extension__ typedef unsigned __int128   a15;\n \n     typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n \t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;"}]}