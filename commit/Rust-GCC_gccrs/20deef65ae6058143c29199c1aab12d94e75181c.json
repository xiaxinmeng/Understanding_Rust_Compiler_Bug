{"sha": "20deef65ae6058143c29199c1aab12d94e75181c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkZWVmNjVhZTYwNTgxNDNjMjkxOTljMWFhYjEyZDk0ZTc1MTgxYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-19T12:01:18Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-19T12:01:18Z"}, "message": "tree.h (TYPE_MINVAL, [...]): Rename to ...\n\n\tgcc/\n\t* tree.h (TYPE_MINVAL, TYPE_MAXVAL): Rename to ...\n\t(TYPE_MIN_VALUE_RAW, TYPE_MAX_VALUE_RAW): ... these.\n\t* tree.c (find_decls_types_r, verify_type): Use\n\tTYPE_{MIN,MAX}_VALUE_RAW.\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Likewise.\n\t(hash_tree): Likewise.\n\t* tree-streamer-in.c (lto_input_ts_type_non_common_tree_pointers):\n\tLikewise.\n\t* tree-streamer-out.c (write_ts_type_non_common_tree_pointers):\n\tLikewise.\n\n\tgcc/cp/\n\t* cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS,\n\tPACK_EXPANSION_EXTRA_ARGS): Use TYPE_{MIN,MAX}_VALUE_RAW.\n\n\tgcc/lto/\n\t* lto.c (mentions_vars_p_type): Use TYPE_{MIN,MAX}_VALUE_RAW.\n\t(compare_tree_sccs_1, lto_fixup_prevailing_decls): Likewise.\n\n\tgcc/objc/\n\t* objc-act.h (CLASS_NST_METHODS, CLASS_CLS_METHODS): Use\n\tTYPE_{MIN,MAX}_VALUE_RAW.\n\nFrom-SVN: r250337", "tree": {"sha": "b6dcbebf79db91f5571b47a27f8b9a743b188ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6dcbebf79db91f5571b47a27f8b9a743b188ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20deef65ae6058143c29199c1aab12d94e75181c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20deef65ae6058143c29199c1aab12d94e75181c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20deef65ae6058143c29199c1aab12d94e75181c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20deef65ae6058143c29199c1aab12d94e75181c/comments", "author": null, "committer": null, "parents": [{"sha": "4d6ababc620d19dfe258c493a549981723fe0e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6ababc620d19dfe258c493a549981723fe0e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6ababc620d19dfe258c493a549981723fe0e42"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "be964c6ab9edd5e596ffc10c3e43d5745db27bbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -1,8 +1,21 @@\n+2017-07-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (TYPE_MINVAL, TYPE_MAXVAL): Rename to ...\n+\t(TYPE_MIN_VALUE_RAW, TYPE_MAX_VALUE_RAW): ... these.\n+\t* tree.c (find_decls_types_r, verify_type): Use\n+\tTYPE_{MIN,MAX}_VALUE_RAW.\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Likewise.\n+\t(hash_tree): Likewise.\n+\t* tree-streamer-in.c (lto_input_ts_type_non_common_tree_pointers):\n+\tLikewise.\n+\t* tree-streamer-out.c (write_ts_type_non_common_tree_pointers):\n+\tLikewise.\n+\n 2017-07-18  Tom de Vries  <tom@codesourcery.com>\n \n \tPR middle-end/81464\n-\t* omp-expand.c (expand_omp_for_static_chunk): Handle equal-argument loop\n-\texit phi.\n+\t* omp-expand.c (expand_omp_for_static_chunk): Handle\n+\tequal-argument loop exit phi.\n \n 2017-07-18  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "6a87cfc268301b6f4570024c330934c4480b8914", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS,\n+\tPACK_EXPANSION_EXTRA_ARGS): Use TYPE_{MIN,MAX}_VALUE_RAW.\n+\n 2017-07-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-array-notation.c (build_array_notation_ref): Use"}, {"sha": "c7bf4c70d7e4f40dd58b91b9d3aa35e61f80e3a4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -3522,13 +3522,13 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define PACK_EXPANSION_PARAMETER_PACKS(NODE)\t\t\\\n   *(TREE_CODE (NODE) == EXPR_PACK_EXPANSION\t\t\\\n     ? &TREE_OPERAND (NODE, 1)\t\t\t\t\\\n-    : &TYPE_MINVAL (TYPE_PACK_EXPANSION_CHECK (NODE)))\n+    : &TYPE_MIN_VALUE_RAW (TYPE_PACK_EXPANSION_CHECK (NODE)))\n \n /* Any additional template args to be applied when substituting into\n    the pattern, set by tsubst_pack_expansion for partial instantiations.  */\n #define PACK_EXPANSION_EXTRA_ARGS(NODE)\t\t\\\n   *(TREE_CODE (NODE) == TYPE_PACK_EXPANSION\t\\\n-    ? &TYPE_MAXVAL (NODE)\t\t\t\\\n+    ? &TYPE_MAX_VALUE_RAW (NODE)\t\t\t\\\n     : &TREE_OPERAND ((NODE), 2))\n \n /* True iff this pack expansion is within a function context.  */"}, {"sha": "41fba318cb5b2018844f0cf94067aaa9200e9959", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -835,8 +835,8 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n \tDFS_follow_tree_edge (TYPE_ARG_TYPES (expr));\n \n       if (!POINTER_TYPE_P (expr))\n-\tDFS_follow_tree_edge (TYPE_MINVAL (expr));\n-      DFS_follow_tree_edge (TYPE_MAXVAL (expr));\n+\tDFS_follow_tree_edge (TYPE_MIN_VALUE_RAW (expr));\n+      DFS_follow_tree_edge (TYPE_MAX_VALUE_RAW (expr));\n       if (RECORD_OR_UNION_TYPE_P (expr))\n \tDFS_follow_tree_edge (TYPE_BINFO (expr));\n     }\n@@ -1271,8 +1271,8 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t       || code == METHOD_TYPE)\n \tvisit (TYPE_ARG_TYPES (t));\n       if (!POINTER_TYPE_P (t))\n-\tvisit (TYPE_MINVAL (t));\n-      visit (TYPE_MAXVAL (t));\n+\tvisit (TYPE_MIN_VALUE_RAW (t));\n+      visit (TYPE_MAX_VALUE_RAW (t));\n       if (RECORD_OR_UNION_TYPE_P (t))\n \tvisit (TYPE_BINFO (t));\n     }"}, {"sha": "c8e6e4b08fe4145849a95d5b226061da2d284ef4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lto.c (mentions_vars_p_type): Use TYPE_{MIN,MAX}_VALUE_RAW.\n+\t(compare_tree_sccs_1, lto_fixup_prevailing_decls): Likewise.\n+\n 2017-07-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.c (lto_balanced_map): Do not check"}, {"sha": "a3b4d13d27dbc06652c3824eddf4b8e633e48f17", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -646,8 +646,8 @@ mentions_vars_p_type (tree t)\n   CHECK_NO_VAR (TYPE_ATTRIBUTES (t));\n   CHECK_NO_VAR (TYPE_NAME (t));\n \n-  CHECK_VAR (TYPE_MINVAL (t));\n-  CHECK_VAR (TYPE_MAXVAL (t));\n+  CHECK_VAR (TYPE_MIN_VALUE_RAW (t));\n+  CHECK_VAR (TYPE_MAX_VALUE_RAW (t));\n \n   /* Accessor is for derived node types only. */\n   CHECK_NO_VAR (t->type_non_common.binfo);\n@@ -1414,9 +1414,10 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       else if (code == FUNCTION_TYPE\n \t       || code == METHOD_TYPE)\n \tcompare_tree_edges (TYPE_ARG_TYPES (t1), TYPE_ARG_TYPES (t2));\n+\n       if (!POINTER_TYPE_P (t1))\n-\tcompare_tree_edges (TYPE_MINVAL (t1), TYPE_MINVAL (t2));\n-      compare_tree_edges (TYPE_MAXVAL (t1), TYPE_MAXVAL (t2));\n+\tcompare_tree_edges (TYPE_MIN_VALUE_RAW (t1), TYPE_MIN_VALUE_RAW (t2));\n+      compare_tree_edges (TYPE_MAX_VALUE_RAW (t1), TYPE_MAX_VALUE_RAW (t2));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_LIST))\n@@ -2580,8 +2581,8 @@ lto_fixup_prevailing_decls (tree t)\n       LTO_NO_PREVAIL (TYPE_ATTRIBUTES (t));\n       LTO_NO_PREVAIL (TYPE_NAME (t));\n \n-      LTO_SET_PREVAIL (TYPE_MINVAL (t));\n-      LTO_SET_PREVAIL (TYPE_MAXVAL (t));\n+      LTO_SET_PREVAIL (TYPE_MIN_VALUE_RAW (t));\n+      LTO_SET_PREVAIL (TYPE_MAX_VALUE_RAW (t));\n       LTO_NO_PREVAIL (t->type_non_common.binfo);\n \n       LTO_SET_PREVAIL (TYPE_CONTEXT (t));"}, {"sha": "053e4d4a543a58bffb8d719636dd527302334266", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* objc-act.h (CLASS_NST_METHODS, CLASS_CLS_METHODS): Use\n+\tTYPE_{MIN,MAX}_VALUE_RAW.\n+\n 2017-05-16  Sylvestre Ledru  <sylvestre@debian.org>\n \n \t* objc-runtime-shared-support.c (build_module_descriptor):"}, {"sha": "92efd9ee45fa662c56370cd8c829b536bf60328c", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -179,8 +179,8 @@ enum objc_property_assign_semantics {\n #define CLASS_SUPER_NAME(CLASS) (TYPE_CONTEXT (CLASS))\n #define CLASS_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 0)\n #define CLASS_RAW_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n-#define CLASS_NST_METHODS(CLASS) (TYPE_MINVAL (CLASS))\n-#define CLASS_CLS_METHODS(CLASS) (TYPE_MAXVAL (CLASS))\n+#define CLASS_NST_METHODS(CLASS) (TYPE_MIN_VALUE_RAW (CLASS))\n+#define CLASS_CLS_METHODS(CLASS) (TYPE_MAX_VALUE_RAW (CLASS))\n #define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)\n #define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 3)\n #define CLASS_PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 4)\n@@ -189,8 +189,8 @@ enum objc_property_assign_semantics {\n \n #define PROTOCOL_NAME(CLASS) (TYPE_NAME (CLASS))\n #define PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 0)\n-#define PROTOCOL_NST_METHODS(CLASS) (TYPE_MINVAL (CLASS))\n-#define PROTOCOL_CLS_METHODS(CLASS) (TYPE_MAXVAL (CLASS))\n+#define PROTOCOL_NST_METHODS(CLASS) (TYPE_MIN_VALUE_RAW (CLASS))\n+#define PROTOCOL_CLS_METHODS(CLASS) (TYPE_MAX_VALUE_RAW (CLASS))\n #define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n #define PROTOCOL_DEFINED(CLASS) TREE_USED (CLASS)\n #define PROTOCOL_OPTIONAL_CLS_METHODS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)"}, {"sha": "d7b6d224ab55dfef60b9651100a619a535e3c3c0", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -821,8 +821,8 @@ lto_input_ts_type_non_common_tree_pointers (struct lto_input_block *ib,\n     TYPE_ARG_TYPES (expr) = stream_read_tree (ib, data_in);\n \n   if (!POINTER_TYPE_P (expr))\n-    TYPE_MINVAL (expr) = stream_read_tree (ib, data_in);\n-  TYPE_MAXVAL (expr) = stream_read_tree (ib, data_in);\n+    TYPE_MIN_VALUE_RAW (expr) = stream_read_tree (ib, data_in);\n+  TYPE_MAX_VALUE_RAW (expr) = stream_read_tree (ib, data_in);\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     TYPE_BINFO (expr) = stream_read_tree (ib, data_in);\n }"}, {"sha": "ec47a9b804013525df8c4f58abad7db8e537ed1c", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -704,8 +704,8 @@ write_ts_type_non_common_tree_pointers (struct output_block *ob, tree expr,\n     stream_write_tree (ob, TYPE_ARG_TYPES (expr), ref_p);\n \n   if (!POINTER_TYPE_P (expr))\n-    stream_write_tree (ob, TYPE_MINVAL (expr), ref_p);\n-  stream_write_tree (ob, TYPE_MAXVAL (expr), ref_p);\n+    stream_write_tree (ob, TYPE_MIN_VALUE_RAW (expr), ref_p);\n+  stream_write_tree (ob, TYPE_MAX_VALUE_RAW (expr), ref_p);\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     stream_write_tree (ob, TYPE_BINFO (expr), ref_p);\n }"}, {"sha": "70da8d2ee2dcae582cb8226302d3cfe0ce354eee", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -5633,9 +5633,9 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t them and thus do not and want not to reach unused pointer types\n \t this way.  */\n       if (!POINTER_TYPE_P (t))\n-\tfld_worklist_push (TYPE_MINVAL (t), fld);\n+\tfld_worklist_push (TYPE_MIN_VALUE_RAW (t), fld);\n       if (!RECORD_OR_UNION_TYPE_P (t))\n-\tfld_worklist_push (TYPE_MAXVAL (t), fld);\n+\tfld_worklist_push (TYPE_MAX_VALUE_RAW (t), fld);\n       fld_worklist_push (TYPE_MAIN_VARIANT (t), fld);\n       /* Do not walk TYPE_NEXT_VARIANT.  We do not stream it and thus\n          do not and want not to reach unused variants this way.  */\n@@ -13974,7 +13974,7 @@ verify_type (const_tree t)\n    }\n \n \n-  /* Check various uses of TYPE_MINVAL.  */\n+  /* Check various uses of TYPE_MIN_VALUE_RAW.  */\n   if (RECORD_OR_UNION_TYPE_P (t))\n     {\n       /* FIXME: C FE uses TYPE_VFIELD to record C_TYPE_INCOMPLETE_VARS\n@@ -14069,10 +14069,10 @@ verify_type (const_tree t)\n \t  error_found = true;\n         } \n     }\n-  else if (TYPE_MAXVAL (t))\n+  else if (TYPE_MAX_VALUE_RAW (t))\n     {\n-      error (\"TYPE_MAXVAL non-NULL\");\n-      debug_tree (TYPE_MAXVAL (t));\n+      error (\"TYPE_MAX_VALUE_RAW non-NULL\");\n+      debug_tree (TYPE_MAX_VALUE_RAW (t));\n       error_found = true;\n     }\n "}, {"sha": "6ab42244df5d0a98154a5f4eea35a9db2356d9ae", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20deef65ae6058143c29199c1aab12d94e75181c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=20deef65ae6058143c29199c1aab12d94e75181c", "patch": "@@ -2103,37 +2103,37 @@ extern machine_mode element_mode (const_tree t);\n \n #define TYPE_VALUES(NODE) (ENUMERAL_TYPE_CHECK (NODE)->type_non_common.values)\n #define TYPE_DOMAIN(NODE) (ARRAY_TYPE_CHECK (NODE)->type_non_common.values)\n-#define TYPE_FIELDS(NODE) \\\n+#define TYPE_FIELDS(NODE)\t\t\t\t\\\n   (RECORD_OR_UNION_CHECK (NODE)->type_non_common.values)\n #define TYPE_CACHED_VALUES(NODE) (TYPE_CHECK (NODE)->type_non_common.values)\n-#define TYPE_ARG_TYPES(NODE) \\\n+#define TYPE_ARG_TYPES(NODE)\t\t\t\t\\\n   (FUNC_OR_METHOD_CHECK (NODE)->type_non_common.values)\n #define TYPE_VALUES_RAW(NODE) (TYPE_CHECK (NODE)->type_non_common.values)\n \n-#define TYPE_METHODS(NODE) \\\n-  (RECORD_OR_UNION_CHECK (NODE)->type_non_common.maxval)\n-#define TYPE_VFIELD(NODE) \\\n-  (RECORD_OR_UNION_CHECK (NODE)->type_non_common.minval)\n-#define TYPE_METHOD_BASETYPE(NODE) \\\n-  (FUNC_OR_METHOD_CHECK (NODE)->type_non_common.maxval)\n-#define TYPE_OFFSET_BASETYPE(NODE) \\\n-  (OFFSET_TYPE_CHECK (NODE)->type_non_common.maxval)\n-#define TYPE_MAXVAL(NODE) (TYPE_CHECK (NODE)->type_non_common.maxval)\n-#define TYPE_MINVAL(NODE) (TYPE_CHECK (NODE)->type_non_common.minval)\n-#define TYPE_NEXT_PTR_TO(NODE) \\\n+#define TYPE_MIN_VALUE(NODE)\t\t\t\t\\\n+  (NUMERICAL_TYPE_CHECK (NODE)->type_non_common.minval)\n+#define TYPE_NEXT_PTR_TO(NODE)\t\t\t\t\\\n   (POINTER_TYPE_CHECK (NODE)->type_non_common.minval)\n-#define TYPE_NEXT_REF_TO(NODE) \\\n+#define TYPE_NEXT_REF_TO(NODE)\t\t\t\t\\\n   (REFERENCE_TYPE_CHECK (NODE)->type_non_common.minval)\n-#define TYPE_MIN_VALUE(NODE) \\\n-  (NUMERICAL_TYPE_CHECK (NODE)->type_non_common.minval)\n+#define TYPE_VFIELD(NODE)\t\t\t\t\\\n+  (RECORD_OR_UNION_CHECK (NODE)->type_non_common.minval)\n+#define TYPE_MIN_VALUE_RAW(NODE) (TYPE_CHECK (NODE)->type_non_common.minval)\n+\n #define TYPE_MAX_VALUE(NODE) \\\n   (NUMERICAL_TYPE_CHECK (NODE)->type_non_common.maxval)\n-\n+#define TYPE_METHODS(NODE)\t\t\t\t\\\n+  (RECORD_OR_UNION_CHECK (NODE)->type_non_common.maxval)\n+#define TYPE_METHOD_BASETYPE(NODE)\t\t\t\\\n+  (FUNC_OR_METHOD_CHECK (NODE)->type_non_common.maxval)\n+#define TYPE_OFFSET_BASETYPE(NODE)\t\t\t\\\n+  (OFFSET_TYPE_CHECK (NODE)->type_non_common.maxval)\n /* If non-NULL, this is an upper bound of the size (in bytes) of an\n    object of the given ARRAY_TYPE_NON_COMMON.  This allows temporaries to be\n    allocated.  */\n #define TYPE_ARRAY_MAX_SIZE(ARRAY_TYPE) \\\n   (ARRAY_TYPE_CHECK (ARRAY_TYPE)->type_non_common.maxval)\n+#define TYPE_MAX_VALUE_RAW(NODE) (TYPE_CHECK (NODE)->type_non_common.maxval)\n \n /* For record and union types, information about this type, as a base type\n    for itself.  */"}]}