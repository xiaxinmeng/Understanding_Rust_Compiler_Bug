{"sha": "23ffbafe3a3940964487fc9860ac710232ec6474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmZmJhZmUzYTM5NDA5NjQ0ODdmYzk4NjBhYzcxMDIzMmVjNjQ3NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-12-05T15:42:58Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-12-05T15:42:58Z"}, "message": "tree-ssa-dce.c (simple_dce_from_worklist): Move and rename from tree-ssa-pre.c::remove_dead_inserted_code.\n\n\t* tree-ssa-dce.c (simple_dce_from_worklist): Move and rename from\n\ttree-ssa-pre.c::remove_dead_inserted_code.\n\t* tree-ssa-dce.h: New file.\n\t* tree-ssa-pre.c (tree-ssa-dce.h): Include new header file.\n\t(remove_dead_inserted_code): Move and rename to function\n\ttree-ssa-dce.c::simple_dce_from_worklist.\n\t(pass_pre::execute): Update use.\n\nFrom-SVN: r255426", "tree": {"sha": "6897332765c4bedaa55f4c6e1529d9fe50eafe9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6897332765c4bedaa55f4c6e1529d9fe50eafe9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ffbafe3a3940964487fc9860ac710232ec6474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ffbafe3a3940964487fc9860ac710232ec6474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ffbafe3a3940964487fc9860ac710232ec6474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ffbafe3a3940964487fc9860ac710232ec6474/comments", "author": null, "committer": null, "parents": [{"sha": "0382bcfcda056493544fc1bfa25030e19f465498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0382bcfcda056493544fc1bfa25030e19f465498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0382bcfcda056493544fc1bfa25030e19f465498"}], "stats": {"total": 149, "additions": 90, "deletions": 59}, "files": [{"sha": "4d58c0f9aec01f9bc4ed15edca1bf6b6ff28bbb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23ffbafe3a3940964487fc9860ac710232ec6474", "patch": "@@ -1,3 +1,13 @@\n+2017-12-05  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-dce.c (simple_dce_from_worklist): Move and rename from\n+\ttree-ssa-pre.c::remove_dead_inserted_code.\n+\t* tree-ssa-dce.h: New file.\n+\t* tree-ssa-pre.c (tree-ssa-dce.h): Include new header file.\n+\t(remove_dead_inserted_code): Move and rename to function\n+\ttree-ssa-dce.c::simple_dce_from_worklist.\n+\t(pass_pre::execute): Update use.\n+\n 2017-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83277"}, {"sha": "8595decc7023316603709e52e868f368418f3e3a", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=23ffbafe3a3940964487fc9860ac710232ec6474", "patch": "@@ -1723,3 +1723,55 @@ make_pass_cd_dce (gcc::context *ctxt)\n {\n   return new pass_cd_dce (ctxt);\n }\n+\n+\n+/* A cheap DCE interface.  WORKLIST is a list of possibly dead stmts and\n+   is consumed by this function.  The function has linear complexity in\n+   the number of dead stmts with a constant factor like the average SSA\n+   use operands number.  */\n+\n+void\n+simple_dce_from_worklist (bitmap worklist)\n+{\n+  while (! bitmap_empty_p (worklist))\n+    {\n+      /* Pop item.  */\n+      unsigned i = bitmap_first_set_bit (worklist);\n+      bitmap_clear_bit (worklist, i);\n+\n+      tree def = ssa_name (i);\n+      /* Removed by somebody else or still in use.  */\n+      if (! def || ! has_zero_uses (def))\n+\tcontinue;\n+\n+      gimple *t = SSA_NAME_DEF_STMT (def);\n+      if (gimple_has_side_effects (t))\n+\tcontinue;\n+\n+      /* Add uses to the worklist.  */\n+      ssa_op_iter iter;\n+      use_operand_p use_p;\n+      FOR_EACH_PHI_OR_STMT_USE (use_p, t, iter, SSA_OP_USE)\n+\t{\n+\t  tree use = USE_FROM_PTR (use_p);\n+\t  if (TREE_CODE (use) == SSA_NAME\n+\t      && ! SSA_NAME_IS_DEFAULT_DEF (use))\n+\t    bitmap_set_bit (worklist, SSA_NAME_VERSION (use));\n+\t}\n+\n+      /* Remove stmt.  */\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Removing dead stmt:\");\n+\t  print_gimple_stmt (dump_file, t, 0);\n+\t}\n+      gimple_stmt_iterator gsi = gsi_for_stmt (t);\n+      if (gimple_code (t) == GIMPLE_PHI)\n+\tremove_phi_node (&gsi, true);\n+      else\n+\t{\n+\t  gsi_remove (&gsi, true);\n+\t  release_defs (t);\n+\t}\n+    }\n+}"}, {"sha": "2adb0860ab0d6fce6ab8f220c6cf0eda82f92c36", "filename": "gcc/tree-ssa-dce.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-dce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-dce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.h?ref=23ffbafe3a3940964487fc9860ac710232ec6474", "patch": "@@ -0,0 +1,22 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TREE_SSA_DCE_H\n+#define TREE_SSA_DCE_H\n+extern void simple_dce_from_worklist (bitmap);\n+#endif"}, {"sha": "999b881becd8963a3bdc222d48c1b580b927ea88", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 59, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ffbafe3a3940964487fc9860ac710232ec6474/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=23ffbafe3a3940964487fc9860ac710232ec6474", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"domwalk.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-ssa-dce.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"alias.h\"\n \n@@ -3995,64 +3996,6 @@ compute_avail (void)\n   free (worklist);\n }\n \n-/* Cheap DCE of a known set of possibly dead stmts.\n-\n-   Because we don't follow exactly the standard PRE algorithm, and decide not\n-   to insert PHI nodes sometimes, and because value numbering of casts isn't\n-   perfect, we sometimes end up inserting dead code.   This simple DCE-like\n-   pass removes any insertions we made that weren't actually used.  */\n-\n-static void\n-remove_dead_inserted_code (void)\n-{\n-  /* ???  Re-use inserted_exprs as worklist not only as initial set.\n-     This may end up removing non-inserted code as well.  If we\n-     keep inserted_exprs unchanged we could restrict new worklist\n-     elements to members of inserted_exprs.  */\n-  bitmap worklist = inserted_exprs;\n-  while (! bitmap_empty_p (worklist))\n-    {\n-      /* Pop item.  */\n-      unsigned i = bitmap_first_set_bit (worklist);\n-      bitmap_clear_bit (worklist, i);\n-\n-      tree def = ssa_name (i);\n-      /* Removed by somebody else or still in use.  */\n-      if (! def || ! has_zero_uses (def))\n-\tcontinue;\n-\n-      gimple *t = SSA_NAME_DEF_STMT (def);\n-      if (gimple_has_side_effects (t))\n-\tcontinue;\n-\n-      /* Add uses to the worklist.  */\n-      ssa_op_iter iter;\n-      use_operand_p use_p;\n-      FOR_EACH_PHI_OR_STMT_USE (use_p, t, iter, SSA_OP_USE)\n-\t{\n-\t  tree use = USE_FROM_PTR (use_p);\n-\t  if (TREE_CODE (use) == SSA_NAME\n-\t      && ! SSA_NAME_IS_DEFAULT_DEF (use))\n-\t    bitmap_set_bit (worklist, SSA_NAME_VERSION (use));\n-\t}\n-\n-      /* Remove stmt.  */\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Removing unnecessary insertion:\");\n-\t  print_gimple_stmt (dump_file, t, 0);\n-\t}\n-      gimple_stmt_iterator gsi = gsi_for_stmt (t);\n-      if (gimple_code (t) == GIMPLE_PHI)\n-\tremove_phi_node (&gsi, true);\n-      else\n-\t{\n-\t  gsi_remove (&gsi, true);\n-\t  release_defs (t);\n-\t}\n-    }\n-}\n-\n \n /* Initialize data structures used by PRE.  */\n \n@@ -4188,7 +4131,11 @@ pass_pre::execute (function *fun)\n   /* Remove all the redundant expressions.  */\n   todo |= vn_eliminate (inserted_exprs);\n \n-  remove_dead_inserted_code ();\n+  /* Because we don't follow exactly the standard PRE algorithm, and decide not\n+     to insert PHI nodes sometimes, and because value numbering of casts isn't\n+     perfect, we sometimes end up inserting dead code.   This simple DCE-like\n+     pass removes any insertions we made that weren't actually used.  */\n+  simple_dce_from_worklist (inserted_exprs);\n \n   fini_pre ();\n "}]}