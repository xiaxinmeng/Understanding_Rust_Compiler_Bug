{"sha": "ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1N2Q2ZjRkMWFlYWQ0Y2E5YjRiZDJmZjZkYzZmNTEzMGYyN2UwZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-17T19:00:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-17T19:00:17Z"}, "message": "(mips_split_addresses, mips_check_split, move_operand):\n\nNew declarations\n(GO_IF_LEGITIMATE_ADDRESS): Reject constant addresses when\nmips_split_addresses is TRUE.  Add LO_SUM support.\n(LEGITIMIZE_ADDRESS): Add LO_SUM support.\n(PREDICATE_CODES): Modify call_insn_operand support.  Add\nmove_operand.\n\nFrom-SVN: r12286", "tree": {"sha": "2b0e453fd547d92d544c4f7b8a4864e78c5644ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0e453fd547d92d544c4f7b8a4864e78c5644ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f/comments", "author": null, "committer": null, "parents": [{"sha": "910628b87e6ba31e1e28813593991a03a4a125e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910628b87e6ba31e1e28813593991a03a4a125e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910628b87e6ba31e1e28813593991a03a4a125e5"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "9db54b4b860e8b39c411d4be6272ce8f7ef16efd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ce57d6f4d1aead4ca9b4bd2ff6dc6f5130f27e0f", "patch": "@@ -138,6 +138,7 @@ extern int mips_isa;\t\t\t/* architectural level */\n extern char *mips_cpu_string;\t\t/* for -mcpu=<xxx> */\n extern char *mips_isa_string;\t\t/* for -mips{1,2,3,4} */\n extern char *mips_abi_string;\t\t/* for -misa={32,n32,64} */\n+extern int mips_split_addresses;\t/* perform high/lo_sum support */\n extern int dslots_load_total;\t\t/* total # load related delay slots */\n extern int dslots_load_filled;\t\t/* # filled load delay slots */\n extern int dslots_jump_total;\t\t/* total # jump related delay slots */\n@@ -180,6 +181,7 @@ extern void\t\tmips_declare_object ();\n extern int\t\tmips_epilogue_delay_slots ();\n extern void\t\tmips_expand_epilogue ();\n extern void\t\tmips_expand_prologue ();\n+extern int\t\tmips_check_split ();\n extern char\t       *mips_fill_delay_slot ();\n extern char\t       *mips_move_1word ();\n extern char\t       *mips_move_2words ();\n@@ -214,6 +216,7 @@ extern int\t\tnonimmediate_operand ();\n extern int\t\tnonmemory_operand ();\n extern int\t\tregister_operand ();\n extern int\t\tscratch_operand ();\n+extern int\t\tmove_operand ();\n \n /* Functions to change what output section we are using.  */\n extern void\t\tdata_section ();\n@@ -2350,9 +2353,20 @@ typedef struct mips_args {\n   if (GET_CODE (xinsn) == REG && REG_OK_FOR_BASE_P (xinsn))\t\t\\\n     goto ADDR;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (xinsn))\t\t\t\t\t\\\n+  if (CONSTANT_ADDRESS_P (xinsn)\t\t\t\t\t\\\n+      && ! (mips_split_addresses && mips_check_split (xinsn, MODE)))\t\\\n     goto ADDR;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (xinsn) == LO_SUM && mips_split_addresses)\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      register rtx xlow0 = XEXP (xinsn, 0);\t\t\t\t\\\n+      register rtx xlow1 = XEXP (xinsn, 1);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (xlow0) == REG && REG_OK_FOR_BASE_P (xlow0)\t\t\\\n+\t  && mips_check_split (xlow1, MODE))\t\t\t\t\\\n+\tgoto ADDR;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (GET_CODE (xinsn) == PLUS)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       register rtx xplus0 = XEXP (xinsn, 0);\t\t\t\t\\\n@@ -2396,6 +2410,7 @@ typedef struct mips_args {\n \t  if (!TARGET_DEBUG_A_MODE\t\t\t\t\t\\\n \t      && mips_abi == ABI_32\t\t\t\t\t\\\n \t      && CONSTANT_ADDRESS_P (xplus1)\t\t\t\t\\\n+\t      && ! mips_split_addresses\t\t\t\t\t\\\n \t      && (!TARGET_EMBEDDED_PIC\t\t\t\t\t\\\n \t\t  || code1 != CONST\t\t\t\t\t\\\n \t\t  || GET_CODE (XEXP (xplus1, 0)) != MINUS))\t\t\\\n@@ -2493,6 +2508,14 @@ typedef struct mips_args {\n       GO_DEBUG_RTX (xinsn);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (mips_split_addresses && mips_check_split (X, MODE))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* ??? Is this ever executed?  */\t\t\t\t\t\\\n+      X = gen_rtx (LO_SUM, Pmode,\t\t\t\t\t\\\n+\t\t   copy_to_mode_reg (Pmode, gen_rtx (HIGH, Pmode, X)), X); \\\n+      goto WIN;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (GET_CODE (xinsn) == CONST\t\t\t\t\t\t\\\n       && ((flag_pic && pic_address_needs_scratch (xinsn))\t\t\\\n \t  /* ??? SGI's Irix 6 assembler can't handle CONST.  */\t\t\\\n@@ -3034,7 +3057,10 @@ while (0)\n   {\"cmp_op\",\t\t\t{ EQ, NE, GT, GE, GTU, GEU, LT, LE,\t\\\n \t\t\t\t  LTU, LEU }},\t\t\t\t\\\n   {\"pc_or_label_operand\",\t{ PC, LABEL_REF }},\t\t\t\\\n-  {\"call_insn_operand\",\t\t{ MEM }},\t\t\t\t\\\n+  {\"call_insn_operand\",\t\t{ CONST_INT, CONST, SYMBOL_REF, REG}},\t\\\n+  {\"move_operand\", \t\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG,\t\\\n+\t\t\t\t  REG, MEM}},\t\t\t\t\\\n \n \f\n /* If defined, a C statement to be executed just prior to the"}]}