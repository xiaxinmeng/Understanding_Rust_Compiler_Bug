{"sha": "0c8ac746d1ccfaa429693c4869b08222e447ceed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4YWM3NDZkMWNjZmFhNDI5NjkzYzQ4NjliMDgyMjJlNDQ3Y2VlZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-20T00:11:34Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-20T00:11:34Z"}, "message": "rs6000: Delete \"wJ\" and \"wK\" constraints\n\nThis replaces \"wJ\" by \"wI\", and \"wK by \"wH\", both with isa \"p9v\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wJ\"):\n\tDelete.\n\t(define_register_constraint \"wK\"): Delete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wJ and RS6000_CONSTRAINT_wK.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wJ\" constraint by \"wI\" with \"p9v\".\n\tReplace \"wK\" constraint by \"wH\" with \"p9v\".\n\t* config/rs6000/vsx.md: Ditto.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271387", "tree": {"sha": "a5c3b8ae9d4288b01736ad222a79311a0323dd1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5c3b8ae9d4288b01736ad222a79311a0323dd1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8ac746d1ccfaa429693c4869b08222e447ceed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ac746d1ccfaa429693c4869b08222e447ceed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8ac746d1ccfaa429693c4869b08222e447ceed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ac746d1ccfaa429693c4869b08222e447ceed/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d17fbef89f753c171ab29c8a2c484fa2be8271b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17fbef89f753c171ab29c8a2c484fa2be8271b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17fbef89f753c171ab29c8a2c484fa2be8271b2"}], "stats": {"total": 208, "additions": 109, "deletions": 99}, "files": [{"sha": "ae997cb23ff552aff5fb6c3195c3b823b2fe6a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -1,3 +1,17 @@\n+2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wJ\"):\n+\tDelete.\n+\t(define_register_constraint \"wK\"): Delete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wJ and RS6000_CONSTRAINT_wK.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wJ\" constraint by \"wI\" with \"p9v\".\n+\tReplace \"wK\" constraint by \"wH\" with \"p9v\".\n+\t* config/rs6000/vsx.md: Ditto.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wb\"):"}, {"sha": "38a4307c29205a7e5c8ea1da529bb82617f37eca", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -157,12 +157,6 @@\n (define_register_constraint \"wI\" \"rs6000_constraints[RS6000_CONSTRAINT_wI]\"\n   \"FPR register to hold 32-bit integers or NO_REGS.\")\n \n-(define_register_constraint \"wJ\" \"rs6000_constraints[RS6000_CONSTRAINT_wJ]\"\n-  \"FPR register to hold 8/16-bit integers or NO_REGS.\")\n-\n-(define_register_constraint \"wK\" \"rs6000_constraints[RS6000_CONSTRAINT_wK]\"\n-  \"Altivec register to hold 8/16-bit integers or NO_REGS.\")\n-\n (define_constraint \"wL\"\n   \"Int constant that is the element number mfvsrld accesses in a vector.\"\n   (and (match_code \"const_int\")"}, {"sha": "1a43a8d0c2828dab8e243adcf2b5c2f6c8e5b0c2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -2532,8 +2532,6 @@ rs6000_debug_reg_global (void)\n \t   \"wA reg_class = %s\\n\"\n \t   \"wH reg_class = %s\\n\"\n \t   \"wI reg_class = %s\\n\"\n-\t   \"wJ reg_class = %s\\n\"\n-\t   \"wK reg_class = %s\\n\"\n \t   \"\\n\",\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_d]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_f]],\n@@ -2562,9 +2560,7 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wz]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wH]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wI]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wJ]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wK]]);\n+\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wI]]);\n \n   nl = \"\\n\";\n   for (m = 0; m < NUM_MACHINE_MODES; ++m)\n@@ -3192,9 +3188,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twy - Register class to do ISA 2.07 SF operations.\n \twz - Float register if we can do 32-bit unsigned int loads.\n \twH - Altivec register if SImode is allowed in VSX registers.\n-\twI - Float register if SImode is allowed in VSX registers.\n-\twJ - Float register if QImode/HImode are allowed in VSX registers.\n-\twK - Altivec register if QImode/HImode are allowed in VSX registers.  */\n+\twI - Float register if SImode is allowed in VSX registers.  */\n \n   if (TARGET_HARD_FLOAT)\n     {\n@@ -3271,11 +3265,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wH] = ALTIVEC_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wI] = FLOAT_REGS;\n-      if (TARGET_P9_VECTOR)\n-\t{\n-\t  rs6000_constraints[RS6000_CONSTRAINT_wJ] = FLOAT_REGS;\n-\t  rs6000_constraints[RS6000_CONSTRAINT_wK] = ALTIVEC_REGS;\n-\t}\n     }\n \n   /* Set up the reload helper and direct move functions.  */"}, {"sha": "85dd8411d5b7a24125e03ee0f9c288cdc4461b0b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -1273,8 +1273,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */\n   RS6000_CONSTRAINT_wH,\t\t/* Altivec register for 32-bit integers.  */\n   RS6000_CONSTRAINT_wI,\t\t/* VSX register for 32-bit integers.  */\n-  RS6000_CONSTRAINT_wJ,\t\t/* VSX register for 8/16-bit integers.  */\n-  RS6000_CONSTRAINT_wK,\t\t/* Altivec register for 16/32-bit integers.  */\n   RS6000_CONSTRAINT_MAX\n };\n "}, {"sha": "b5ccb03ba4376bb4e94abd4a8511a0a8b876b24d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 70, "deletions": 56, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -726,15 +726,16 @@\n ;; complex forms.  Basic data transfer is done later.\n \n (define_insn \"zero_extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wJwK,^wK\")\n-\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wIwH,^wH\")\n+\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n    rlwinm %0,%1,0,0xff\n    lxsibzx %x0,%y1\n    vextractub %0,%1,7\"\n-  [(set_attr \"type\" \"load,shift,fpload,vecperm\")])\n+  [(set_attr \"type\" \"load,shift,fpload,vecperm\")\n+   (set_attr \"isa\" \"*,*,p9v,p9v\")])\n \n (define_insn_and_split \"*zero_extendqi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -779,15 +780,16 @@\n \n \n (define_insn \"zero_extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wJwK,^wK\")\n-\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wIwH,^wH\")\n+\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n   \"\"\n   \"@\n    lhz%U1%X1 %0,%1\n    rlwinm %0,%1,0,0xffff\n    lxsihzx %x0,%y1\n    vextractuh %0,%1,6\"\n-  [(set_attr \"type\" \"load,shift,fpload,vecperm\")])\n+  [(set_attr \"type\" \"load,shift,fpload,vecperm\")\n+   (set_attr \"isa\" \"*,*,p9v,p9v\")])\n \n (define_insn_and_split \"*zero_extendhi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -832,8 +834,8 @@\n \n \n (define_insn \"zero_extendsi<mode>2\"\n-  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wu,wj,r,wJwK\")\n-\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wIwH,wJwK\")))]\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wu,wj,r,wIwH\")\n+\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wIwH,wIwH\")))]\n   \"\"\n   \"@\n    lwz%U1%X1 %0,%1\n@@ -843,7 +845,8 @@\n    mtvsrwz %x0,%1\n    mfvsrwz %0,%x1\n    xxextractuw %x0,%x1,4\"\n-  [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")])\n+  [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")\n+   (set_attr \"isa\" \"*,*,*,*,*,*,p9v\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -888,13 +891,14 @@\n \n \n (define_insn \"extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,?*wK\")\n-\t(sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,?*wK\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,?*wH\")\n+\t(sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,?*wH\")))]\n   \"\"\n   \"@\n    extsb %0,%1\n    vextsb2d %0,%1\"\n-  [(set_attr \"type\" \"exts,vecperm\")])\n+  [(set_attr \"type\" \"exts,vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_insn_and_split \"*extendqi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -945,8 +949,8 @@\n   \"\")\n \n (define_insn \"*extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*wK,?*wK\")\n-\t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*wH,?*wH\")\n+\t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wH\")))]\n   \"\"\n   \"@\n    lha%U1%X1 %0,%1\n@@ -955,7 +959,8 @@\n    vextsh2d %0,%1\"\n   [(set_attr \"type\" \"load,exts,fpload,vecperm\")\n    (set_attr \"sign_extend\" \"yes\")\n-   (set_attr \"length\" \"4,4,8,4\")])\n+   (set_attr \"length\" \"4,4,8,4\")\n+   (set_attr \"isa\" \"*,*,p9v,p9v\")])\n \n (define_split\n   [(set (match_operand:EXTHI 0 \"altivec_register_operand\")\n@@ -1014,10 +1019,10 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   wl,    wu,    wj,    wK,     wH,    wr\")\n+\t\t     \"=r, r,   wl,    wu,    wj,    wH,     wH,    wr\")\n \n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n-\t\t     \"YZ, r,   Z,     Z,     r,     wK,     wH,    ?wIwH\")))]\n+\t\t     \"YZ, r,   Z,     Z,     r,     wH,     wH,    ?wIwH\")))]\n   \"\"\n   \"@\n    lwa%U1%X1 %0,%1\n@@ -1030,7 +1035,8 @@\n    #\"\n   [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n    (set_attr \"sign_extend\" \"yes\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,8,8\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,8,8\")\n+   (set_attr \"isa\" \"*,*,*,*,*,p9v,*,*\")])\n \n (define_split\n   [(set (match_operand:EXTSI 0 \"int_reg_operand\")\n@@ -5218,16 +5224,17 @@\n ; We don't define lfiwax/lfiwzx with the normal definition, because we\n ; don't want to support putting SImode in FPR registers.\n (define_insn \"lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wK\")\n-\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wK\")]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wH\")\n+\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wH\")]\n \t\t   UNSPEC_LFIWAX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX\"\n   \"@\n    lfiwax %0,%y1\n    lxsiwax %x0,%y1\n    mtvsrwa %x0,%1\n    vextsw2d %0,%1\"\n-  [(set_attr \"type\" \"fpload,fpload,mffgpr,vecexts\")])\n+  [(set_attr \"type\" \"fpload,fpload,mffgpr,vecexts\")\n+   (set_attr \"isa\" \"*,*,*,p9v\")])\n \n ; This split must be run before register allocation because it allocates the\n ; memory slot that is needed to move values to/from the FPR.  We don't allocate\n@@ -5299,16 +5306,17 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_insn \"lfiwzx\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wJwK\")\n-\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wJwK\")]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wIwH\")\n+\t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wIwH\")]\n \t\t   UNSPEC_LFIWZX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX\"\n   \"@\n    lfiwzx %0,%y1\n    lxsiwzx %x0,%y1\n    mtvsrwz %x0,%1\n    xxextractuw %x0,%x1,4\"\n-  [(set_attr \"type\" \"fpload,fpload,mftgpr,vecexts\")])\n+  [(set_attr \"type\" \"fpload,fpload,mftgpr,vecexts\")\n+   (set_attr \"isa\" \"*,*,*,p9v\")])\n \n (define_insn_and_split \"floatunssi<mode>2_lfiwzx\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Fv>\")\n@@ -5552,10 +5560,10 @@\n (define_insn_and_split \"*float<QHI:mode><FP_ISA3:mode>2_internal\"\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(float:FP_ISA3\n-\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wK,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=wK,wi,wK\"))\n+\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wH,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=wH,wi,wH\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))\n-   (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,wK\"))]\n+   (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,wH\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -5587,7 +5595,8 @@\n \n   emit_insn (gen_floatdi<FP_ISA3:mode>2 (result, di));\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"p9v,*,p9v\")])\n \n (define_expand \"floatuns<QHI:mode><FP_ISA3:mode>2\"\n   [(parallel [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\")\n@@ -5604,8 +5613,8 @@\n (define_insn_and_split \"*floatuns<QHI:mode><FP_ISA3:mode>2_internal\"\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(unsigned_float:FP_ISA3\n-\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wK,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=wK,wi,wJwK\"))\n+\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wH,r,Z\")))\n+   (clobber (match_scratch:DI 2 \"=wH,wi,wIwH\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n@@ -5632,7 +5641,8 @@\n \n   emit_insn (gen_floatdi<FP_ISA3:mode>2 (result, di));\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"p9v,*,p9v\")])\n \n (define_expand \"fix_trunc<mode>si2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\")\n@@ -5745,8 +5755,8 @@\n ;; register allocation prevents the register allocator from doing a direct move\n ;; of the SImode value to a GPR, and then a store/load.\n (define_insn_and_split \"fix<uns>_trunc<SFDF:mode><QHI:mode>2\"\n-  [(set (match_operand:<QHI:MODE> 0 \"gpc_reg_operand\" \"=wJ,wJwK,r\")\n-\t(any_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\" \"wJ,wJwK,wa\")))\n+  [(set (match_operand:<QHI:MODE> 0 \"gpc_reg_operand\" \"=wI,wIwH,r\")\n+\t(any_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\" \"wI,wIwH,wa\")))\n    (clobber (match_scratch:SI 2 \"=X,X,wi\"))]\n   \"TARGET_DIRECT_MOVE\"\n   \"@\n@@ -5761,8 +5771,9 @@\n {\n   operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]));\n }\n-  [(set_attr \"length\" \"4,4,8\")\n-   (set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"length\" \"4,4,8\")\n+   (set_attr \"isa\" \"p9v,p9v,*\")])\n \n (define_insn \"*fix<uns>_trunc<SFDF:mode>si2_p8\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=d,wa\")\n@@ -6871,17 +6882,15 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t\"=r,         r,           r,           wI,          wH,\n \t\t m,          Z,           Z,           r,           r,\n-\t\t r,          wIwH,        wJwK,        wJwK,        wu,\n-\t\t wJwK,       wH,          wK,          wIwH,        r,\n+\t\t r,          wIwH,        wIwH,        wIwH,        wu,\n+\t\t wIwH,       wH,          wH,          wIwH,        r,\n \t\t r,          *h,          *h\")\n-\n \t(match_operand:SI 1 \"input_operand\"\n \t\t\"r,          U,           m,           Z,           Z,\n \t\t r,          wI,          wH,          I,           L,\n \t\t n,          wIwH,        O,           wM,          wB,\n \t\t O,          wM,          wS,          r,           wIwH,\n \t\t *h,         r,           0\"))]\n-\n   \"gpc_reg_operand (operands[0], SImode)\n    || gpc_reg_operand (operands[1], SImode)\"\n   \"@\n@@ -6914,13 +6923,18 @@\n \t\t *,          veclogical,  vecsimple,   vecsimple,   vecsimple,\n \t\t veclogical, veclogical,  vecsimple,   mffgpr,      mftgpr,\n \t\t *,          *,           *\")\n-\n    (set_attr \"length\"\n \t\t\"4,          4,           4,           4,           4,\n \t\t 4,          4,           4,           4,           4,\n \t\t 8,          4,           4,           4,           4,\n \t\t 4,          4,           8,           4,           4,\n-\t\t 4,          4,           4\")])\n+\t\t 4,          4,           4\")\n+   (set_attr \"isa\"\n+\t\t\"*,          *,           *,           *,           *,\n+\t\t *,          *,           *,           *,           *,\n+\t\t *,          *,           p9v,         p9v,         *,\n+\t\t p9v,        *,           p9v,         *,           *,\n+\t\t *,          *,           *\")])\n \n ;; Like movsi, but adjust a SF value to be used in a SI context, i.e.\n ;; (set (reg:SI ...) (subreg:SI (reg:SF ...) 0))\n@@ -7006,18 +7020,15 @@\n (define_insn_and_split \"*movdi_from_sf_zero_ext\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\"\n \t\t\"=r,         r,           ?*wI,        ?*wH,     r,\n-\t\t ?wK,        wIwH\")\n-\n+\t\t ?wH,        wIwH\")\n \t(zero_extend:DI\n \t (unspec:SI [(match_operand:SF 1 \"input_operand\"\n \t\t\"r,          m,           Z,           Z,        wIwH,\n \t\t wIwH,       r\")]\n \t\t    UNSPEC_SI_FROM_SF)))\n-\n    (clobber (match_scratch:V4SF 2\n \t\t\"=X,         X,           X,           X,        wa,\n \t\t wIwH,       X\"))]\n-\n   \"TARGET_DIRECT_MOVE_64BIT\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], SImode))\"\n@@ -7046,10 +7057,12 @@\n   [(set_attr \"type\"\n \t\t\"*,          load,        fpload,      fpload,   two,\n \t\t two,        mffgpr\")\n-\n    (set_attr \"length\"\n \t\t\"4,          4,           4,           4,        8,\n-\t\t 8,          4\")])\n+\t\t 8,          4\")\n+   (set_attr \"isa\"\n+\t\t\"*,          *,           *,           *,        *,\n+\t\t p9v,        *\")])\n \n ;; Like movsi_from_sf, but combine a convert from DFmode to SFmode before\n ;; moving it to SImode.  We cannot do a SFmode store without having to do the\n@@ -7143,15 +7156,13 @@\n ;;\t\tMTVSRWZ     MF%1       MT%1       NOP\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:QHI 0 \"nonimmediate_operand\"\n-\t\t\"=r,        r,         wJwK,      m,         Z,         r,\n-\t\t wJwK,      wJwK,      wJwK,      wK,        ?wK,       r,\n-\t\t wJwK,      r,         *c*l,      *h\")\n-\n+\t\t\"=r,        r,         wIwH,      m,         Z,         r,\n+\t\t wIwH,      wIwH,      wIwH,      wH,        ?wH,       r,\n+\t\t wIwH,      r,         *c*l,      *h\")\n \t(match_operand:QHI 1 \"input_operand\"\n-\t\t\"r,         m,         Z,         r,         wJwK,      i,\n-\t\t wJwK,      O,         wM,        wB,        wS,        wJwK,\n+\t\t\"r,         m,         Z,         r,         wIwH,      i,\n+\t\t wIwH,      O,         wM,        wB,        wS,        wIwH,\n \t\t r,         *h,        r,         0\"))]\n-\n   \"gpc_reg_operand (operands[0], <MODE>mode)\n    || gpc_reg_operand (operands[1], <MODE>mode)\"\n   \"@\n@@ -7175,11 +7186,14 @@\n \t\t\"*,         load,      fpload,    store,     fpstore,   *,\n \t\t vecsimple, vecperm,   vecperm,   vecperm,   vecperm,   mftgpr,\n \t\t mffgpr,    mfjmpr,    mtjmpr,    *\")\n-\n    (set_attr \"length\"\n \t\t\"4,         4,         4,         4,         4,         4,\n \t\t 4,         4,         4,         4,         8,         4,\n-\t\t 4,         4,         4,         4\")])\n+\t\t 4,         4,         4,         4\")\n+   (set_attr \"isa\"\n+\t\t\"*,         *,         p9v,       *,         p9v,       *,\n+\t\t p9v,       p9v,       p9v,       p9v,       p9v,       p9v,\n+\t\t p9v,       *,         *,         *\")])\n \n \f\n ;; Here is how to move condition codes around.  When we store CC data in"}, {"sha": "7c89ad8ad3a086af9dadfb100c1f0afc0a8aa28f", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -3525,7 +3525,7 @@\n (define_insn \"vsx_extract_<mode>_p9\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,<VSX_EX>\")\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wK,<VSX_EX>\")\n+\t (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wH,<VSX_EX>\")\n \t (parallel [(match_operand:QI 2 \"<VSX_EXTRACT_PREDICATE>\" \"n,n\")])))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n@@ -3550,7 +3550,8 @@\n \treturn \"vextractu<wd> %0,%1,%2\";\n     }\n }\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"isa\" \"p9v,*\")])\n \n (define_split\n   [(set (match_operand:<VS_scalar> 0 \"int_reg_operand\")\n@@ -3580,7 +3581,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,<VSX_EX>\")\n \t(zero_extend:DI\n \t (vec_select:<VS_scalar>\n-\t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wK,<VSX_EX>\")\n+\t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wH,<VSX_EX>\")\n \t  (parallel [(match_operand:QI 2 \"const_int_operand\" \"n,n\")]))))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n@@ -3593,7 +3594,8 @@\n \t      (clobber (match_dup 3))])]\n {\n   operands[4] = gen_rtx_REG (<VS_scalar>mode, REGNO (operands[0]));\n-})\n+}\n+  [(set_attr \"isa\" \"p9v,*\")])\n \n ;; Optimize stores to use the ISA 3.0 scalar store instructions\n (define_insn_and_split \"*vsx_extract_<mode>_store_p9\"\n@@ -3617,9 +3619,9 @@\n (define_insn_and_split  \"*vsx_extract_si\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,wHwI,Z\")\n \t(vec_select:SI\n-\t (match_operand:V4SI 1 \"gpc_reg_operand\" \"wJv,wJv,wJv\")\n+\t (match_operand:V4SI 1 \"gpc_reg_operand\" \"v,v,v\")\n \t (parallel [(match_operand:QI 2 \"const_0_to_3_operand\" \"n,n,n\")])))\n-   (clobber (match_scratch:V4SI 3 \"=wJv,wJv,wJv\"))]\n+   (clobber (match_scratch:V4SI 3 \"=v,v,v\"))]\n   \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3733,7 +3735,7 @@\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(unspec:<VS_scalar>\n-\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wK,v,m\")\n+\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wH,v,m\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t UNSPEC_VSX_EXTRACT))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n@@ -3746,13 +3748,14 @@\n   rs6000_split_vec_extract_var (operands[0], operands[1], operands[2],\n \t\t\t\toperands[3], operands[4]);\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"p9v,*,*\")])\n \n (define_insn_and_split \"*vsx_extract_<mode>_<VS_scalar>mode_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(zero_extend:<VS_scalar>\n \t (unspec:<VSX_EXTRACT_I:VS_scalar>\n-\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wK,v,m\")\n+\t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wH,v,m\")\n \t   (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t  UNSPEC_VSX_EXTRACT)))\n    (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n@@ -3767,7 +3770,8 @@\n \t\t\t\toperands[1], operands[2],\n \t\t\t\toperands[3], operands[4]);\n   DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"p9v,*,*\")])\n \n ;; VSX_EXTRACT optimizations\n ;; Optimize double d = (double) vec_extract (vi, <n>)\n@@ -3951,7 +3955,7 @@\n \t  (match_operand:SF 2 \"gpc_reg_operand\" \"ww\")\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n+   (clobber (match_scratch:SI 4 \"=&wIwH\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3976,7 +3980,8 @@\n   operands[8] = gen_rtx_REG (V4SImode, reg_or_subregno (operands[0]));\n }\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"isa\" \"p9v\")])\n \n ;; Special case setting 0.0f to a V4SF element\n (define_insn_and_split \"*vsx_set_v4sf_p9_zero\"\n@@ -3986,7 +3991,7 @@\n \t  (match_operand:SF 2 \"zero_fp_constant\" \"j\")\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n+   (clobber (match_scratch:SI 4 \"=&wIwH\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -4001,7 +4006,8 @@\n   operands[5] = gen_rtx_REG (V4SImode, reg_or_subregno (operands[0]));\n }\n   [(set_attr \"type\" \"vecperm\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"isa\" \"p9v\")])\n \n ;; Optimize x = vec_insert (vec_extract (v2, n), v1, m) if n is the element\n ;; that is in the default scalar position (1 for big endian, 2 for little\n@@ -4043,7 +4049,7 @@\n \t\t\t  [(match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]))\n \t  (match_operand:QI 4 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n-   (clobber (match_scratch:SI 5 \"=&wJwK\"))]\n+   (clobber (match_scratch:SI 5 \"=&wIwH\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && VECTOR_MEM_VSX_P (V4SImode)\n    && TARGET_P9_VECTOR && TARGET_POWERPC64\n    && (INTVAL (operands[3]) != (BYTES_BIG_ENDIAN ? 1 : 2))\"\n@@ -4066,7 +4072,8 @@\n   operands[7] = gen_lowpart (V4SImode, operands[0]);\n   operands[8] = gen_lowpart (V4SImode, operands[1]);\n }\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"p9v\")])\n \n ;; Expanders for builtins\n (define_expand \"vsx_mergel_<mode>\""}, {"sha": "b96d24eb1538df69a6a392888ccb0bc20cb529cb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ac746d1ccfaa429693c4869b08222e447ceed/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=0c8ac746d1ccfaa429693c4869b08222e447ceed", "patch": "@@ -3337,12 +3337,6 @@ Altivec register if @option{-mvsx-small-integer}.\n @item wI\n Floating point register if @option{-mvsx-small-integer}.\n \n-@item wJ\n-FP register if @option{-mvsx-small-integer} and @option{-mpower9-vector}.\n-\n-@item wK\n-Altivec register if @option{-mvsx-small-integer} and @option{-mpower9-vector}.\n-\n @item wL\n Int constant that is the element number that the MFVSRLD instruction.\n targets."}]}