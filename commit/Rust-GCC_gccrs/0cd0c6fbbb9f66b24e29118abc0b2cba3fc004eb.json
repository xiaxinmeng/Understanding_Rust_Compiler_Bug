{"sha": "0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkMGM2ZmJiYjlmNjZiMjRlMjkxMThhYmMwYjJjYmEzZmMwMDRlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-12-02T22:55:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-12-02T22:55:35Z"}, "message": "re PR target/25199 (crashing code output from -mtune=pentium4 but not -mtune=pentiumpro)\n\n\tPR target/25199\n\t* config/i386/i386.md (movqi_1): Only force imovx for alternative\n\t5 if operand 1 is not aligned.  Undo previous constraint change.\n\t* config/i386/predicates.md (aligned_operand): Use MEM_ALIGN.\ntestsuite/\n\t* gcc.target/i386/movq-2.c: New test.\n\t* gcc.target/i386/movq.c: Remove target i?86, instead add\n\tdg-require-effective-target ilp32.\n\nFrom-SVN: r107955", "tree": {"sha": "d27875c429f0708eae93f539bfb6f2a55ce27ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d27875c429f0708eae93f539bfb6f2a55ce27ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d5c039ff9929b55fc6ba6bef216137508105006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5c039ff9929b55fc6ba6bef216137508105006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5c039ff9929b55fc6ba6bef216137508105006"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "299eb4c0caff713dafdef36c26a46210f530ff41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -1,3 +1,10 @@\n+2005-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25199\n+\t* config/i386/i386.md (movqi_1): Only force imovx for alternative\n+\t5 if operand 1 is not aligned.  Undo previous constraint change.\n+\t* config/i386/predicates.md (aligned_operand): Use MEM_ALIGN.\n+\n 2005-12-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (build): Remove prototype."}, {"sha": "afcecdea930d20ee123dcf738b17b753d5b1f165", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -1469,7 +1469,7 @@\n ;; partial register stall can be caused there.  Then we use movzx.\n (define_insn \"*movqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,q ,q ,r,r ,?r,m\")\n-\t(match_operand:QI 1 \"general_operand\"      \" q,qn,qm,q,rn,m ,qn\"))]\n+\t(match_operand:QI 1 \"general_operand\"      \" q,qn,qm,q,rn,qm,qn\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n {\n   switch (get_attr_type (insn))\n@@ -1485,7 +1485,8 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"5\")\n+     (cond [(and (eq_attr \"alternative\" \"5\")\n+\t\t (not (match_operand:QI 1 \"aligned_operand\" \"\")))\n \t      (const_string \"imovx\")\n \t    (ne (symbol_ref \"optimize_size\") (const_int 0))\n \t      (const_string \"imov\")\n@@ -1495,7 +1496,7 @@\n \t\t      (eq (symbol_ref \"TARGET_QIMODE_MATH\")\n \t\t\t  (const_int 0))))\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"3\")\n+\t    (eq_attr \"alternative\" \"3,5\")\n \t      (const_string \"imovx\")\n \t    (and (ne (symbol_ref \"TARGET_MOVX\")\n \t\t     (const_int 0))"}, {"sha": "bc16628439bc5e86b44ab220d8d9801a0715e7b3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -687,7 +687,7 @@\n   return parts.seg == SEG_DEFAULT;\n })\n \n-;; Return nonzero if the rtx is known aligned.\n+;; Return nonzero if the rtx is known to be at least 32 bits aligned.\n (define_predicate \"aligned_operand\"\n   (match_operand 0 \"general_operand\")\n {\n@@ -701,6 +701,10 @@\n   /* Don't even try to do any aligned optimizations with volatiles.  */\n   if (MEM_VOLATILE_P (op))\n     return 0;\n+\n+  if (MEM_ALIGN (op) >= 32)\n+    return 1;\n+\n   op = XEXP (op, 0);\n \n   /* Pushes and pops are only valid on the stack pointer.  */"}, {"sha": "41888c827e0fb36663f64092b1705708d93505cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -1,3 +1,10 @@\n+2005-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25199\n+\t* gcc.target/i386/movq-2.c: New test.\n+\t* gcc.target/i386/movq.c: Remove target i?86, instead add\n+\tdg-require-effective-target ilp32.\n+\n 2005-12-02  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/24103"}, {"sha": "472f2a6621ed3f060255d5e57521d875f495999f", "filename": "gcc/testsuite/gcc.target/i386/movq-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/25199 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+struct S\n+{\n+  void *p[30];\n+  unsigned char c[4];\n+};\n+\n+unsigned char d;\n+\n+void\n+foo (struct S *x)\n+{\n+  register unsigned char e __asm (\"esi\");\n+  e = x->c[3];\n+  __asm __volatile (\"\" : : \"r\" (e));\n+  e = x->c[0];\n+  __asm __volatile (\"\" : : \"r\" (e));\n+}\n+\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]*123\" } } */\n+/* { dg-final { scan-assembler \"movzbl\\[ \\t\\]*123\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*120\" } } */"}, {"sha": "ac0dfa2d94d163c119e955cfe4cb69b201cfa8f6", "filename": "gcc/testsuite/gcc.target/i386/movq.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq.c?ref=0cd0c6fbbb9f66b24e29118abc0b2cba3fc004eb", "patch": "@@ -1,5 +1,7 @@\n-/* { dg-do compile { target \"i?86*-*-*\" } }\n+/* { dg-do compile }\n /* { dg-options \"-Os -march=pentium4 -mtune=prescott\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n register char foo asm(\"edi\");\n char x;\n int bar() {"}]}