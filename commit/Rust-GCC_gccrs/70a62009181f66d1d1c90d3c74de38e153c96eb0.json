{"sha": "70a62009181f66d1d1c90d3c74de38e153c96eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhNjIwMDkxODFmNjZkMWQxYzkwZDNjNzRkZTM4ZTE1M2M5NmViMA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-06-03T18:55:20Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-12-03T00:21:10Z"}, "message": "tree-ssa-threadbackward.c (profitable_jump_thread_path): Do not allow __builtin_constant_p.\n\nLinux Kernel (specifically, drivers/leds/trigger/ledtrig-cpu.c) build\nwith GCC 10 fails on s390 with \"impossible constraint\".\n\nExplanation by Jeff Law:\n\n```\nSo what we have is a b_c_p at the start of an if-else chain.  Subsequent\ntests on the \"true\" arm of the the b_c_p test may throw us off the\nconstant path (because the constants are out of range).  Once all the\ntests are passed (it's constant and the constant is in range) the true\narm's terminal block has a special asm that requires a constant\nargument.   In the case where we get to the terminal block on the true\narm, the argument to the b_c_p is used as the constant argument to the\nspecial asm.\n\nAt first glace jump threading seems to be doing the right thing.  Except\nthat we end up with two paths to that terminal block with the special\nasm, one for each of the two constant arguments to the b_c_p call.\nNaturally since that same value is used in the asm, we have to introduce\na PHI to select between them at the head of the terminal block.   Now\nthe argument in the asm is no longer constant and boom we fail.\n```\n\nFix by disallowing __builtin_constant_p on threading paths.\n\ngcc/ChangeLog:\n\n2020-06-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* tree-ssa-threadbackward.c (thread_jumps::profitable_jump_thread_path):\n\tDo not allow __builtin_constant_p on a threading path.\n\ngcc/testsuite/ChangeLog:\n\n2020-06-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/builtin-constant-p-threading.c: New test.", "tree": {"sha": "36d39627f52e3b33fa3c3833ae7f6025219a66be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d39627f52e3b33fa3c3833ae7f6025219a66be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a62009181f66d1d1c90d3c74de38e153c96eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a62009181f66d1d1c90d3c74de38e153c96eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a62009181f66d1d1c90d3c74de38e153c96eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a62009181f66d1d1c90d3c74de38e153c96eb0/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11860cf440198a9023135a93d781f45bc8cccc4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11860cf440198a9023135a93d781f45bc8cccc4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11860cf440198a9023135a93d781f45bc8cccc4d"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "5f0acdce0b004a824a4ee6d5ed68305a7eff0516", "filename": "gcc/testsuite/gcc.target/s390/builtin-constant-p-threading.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a62009181f66d1d1c90d3c74de38e153c96eb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbuiltin-constant-p-threading.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a62009181f66d1d1c90d3c74de38e153c96eb0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbuiltin-constant-p-threading.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fbuiltin-constant-p-threading.c?ref=70a62009181f66d1d1c90d3c74de38e153c96eb0", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=z196 -mzarch\" } */\n+\n+typedef struct\n+{\n+  int counter;\n+} atomic_t;\n+\n+static inline __attribute__ ((__gnu_inline__)) int\n+__atomic_add (int val, int *ptr)\n+{\n+  int old;\n+  asm volatile(\"laa %[old],%[val],%[ptr]\\n\"\n+\t       : [old] \"=d\" (old), [ptr] \"+Q\"(*ptr)\n+\t       : [val] \"d\" (val)\n+\t       : \"cc\", \"memory\");\n+  return old;\n+}\n+\n+static inline __attribute__ ((__gnu_inline__)) void\n+__atomic_add_const (int val, int *ptr)\n+{\n+  asm volatile(\"asi %[ptr],%[val]\\n\"\n+\t       : [ptr] \"+Q\" (*ptr)\n+\t       : [val] \"i\" (val)\n+\t       : \"cc\", \"memory\");\n+}\n+\n+static inline __attribute__ ((__gnu_inline__)) void\n+atomic_add (int i, atomic_t *v)\n+{\n+  if (__builtin_constant_p (i) && (i > -129) && (i < 128))\n+    {\n+      __atomic_add_const (i, &v->counter);\n+      return;\n+    }\n+  __atomic_add (i, &v->counter);\n+}\n+\n+static atomic_t num_active_cpus = { (0) };\n+\n+void\n+ledtrig_cpu (_Bool is_active)\n+{\n+  atomic_add (is_active ? 1 : -1, &num_active_cpus);\n+}"}, {"sha": "30f692672d965ef251f9e43a29e618a454a2d3d7", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a62009181f66d1d1c90d3c74de38e153c96eb0/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a62009181f66d1d1c90d3c74de38e153c96eb0/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=70a62009181f66d1d1c90d3c74de38e153c96eb0", "patch": "@@ -259,8 +259,13 @@ thread_jumps::profitable_jump_thread_path (basic_block bbi, tree name,\n \t       !gsi_end_p (gsi);\n \t       gsi_next_nondebug (&gsi))\n \t    {\n+\t      /* Do not allow OpenACC loop markers and __builtin_constant_p on\n+\t\t threading paths.  The latter is disallowed, because an\n+\t\t expression might be constant on two threading paths, and\n+\t\t become non-constant (i.e.: phi) when they merge.  */\n \t      gimple *stmt = gsi_stmt (gsi);\n-\t      if (gimple_call_internal_p (stmt, IFN_UNIQUE))\n+\t      if (gimple_call_internal_p (stmt, IFN_UNIQUE)\n+\t\t  || gimple_call_builtin_p (stmt, BUILT_IN_CONSTANT_P))\n \t\t{\n \t\t  m_path.pop ();\n \t\t  return NULL;"}]}