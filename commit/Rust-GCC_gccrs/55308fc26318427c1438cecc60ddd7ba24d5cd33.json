{"sha": "55308fc26318427c1438cecc60ddd7ba24d5cd33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzMDhmYzI2MzE4NDI3YzE0MzhjZWNjNjBkZGQ3YmEyNGQ1Y2QzMw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-03-17T14:13:10Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-03-18T17:38:51Z"}, "message": "amdgcn: Silence warnings in gcn.c\n\nThis fixes a few cases of \"unquoted identifier or keyword\", one \"spurious\ntrailing punctuation sequence\", and a \"may be used uninitialized\".\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.c (gcn_parse_amdgpu_hsa_kernel_attribute): Add %< and\n\t  %> quote markers to error messages.\n\t(gcn_goacc_validate_dims): Likewise.\n\t(gcn_conditional_register_usage): Remove exclaimation mark from error\n\tmessage.\n\t(gcn_vectorize_vec_perm_const): Ensure perm is fully uninitialized.", "tree": {"sha": "ff1e07a77bb09887824d633c90ea70ac84f276e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff1e07a77bb09887824d633c90ea70ac84f276e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55308fc26318427c1438cecc60ddd7ba24d5cd33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55308fc26318427c1438cecc60ddd7ba24d5cd33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55308fc26318427c1438cecc60ddd7ba24d5cd33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55308fc26318427c1438cecc60ddd7ba24d5cd33/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab03c0d5753549f1a78eeb706510b55fb97c8651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab03c0d5753549f1a78eeb706510b55fb97c8651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab03c0d5753549f1a78eeb706510b55fb97c8651"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "22da37e253290e0e9fa4e62a7ab6157db44580eb", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55308fc26318427c1438cecc60ddd7ba24d5cd33/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55308fc26318427c1438cecc60ddd7ba24d5cd33/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=55308fc26318427c1438cecc60ddd7ba24d5cd33", "patch": "@@ -228,7 +228,7 @@ gcn_parse_amdgpu_hsa_kernel_attribute (struct gcn_kernel_args *args,\n       const char *str;\n       if (TREE_CODE (TREE_VALUE (list)) != STRING_CST)\n \t{\n-\t  error (\"amdgpu_hsa_kernel attribute requires string constant \"\n+\t  error (\"%<amdgpu_hsa_kernel%> attribute requires string constant \"\n \t\t \"arguments\");\n \t  break;\n \t}\n@@ -241,13 +241,14 @@ gcn_parse_amdgpu_hsa_kernel_attribute (struct gcn_kernel_args *args,\n \t}\n       if (a == GCN_KERNEL_ARG_TYPES)\n \t{\n-\t  error (\"unknown specifier %s in amdgpu_hsa_kernel attribute\", str);\n+\t  error (\"unknown specifier %qs in %<amdgpu_hsa_kernel attribute%>\",\n+\t\t str);\n \t  err = true;\n \t  break;\n \t}\n       if (args->requested & (1 << a))\n \t{\n-\t  error (\"duplicated parameter specifier %s in amdgpu_hsa_kernel \"\n+\t  error (\"duplicated parameter specifier %qs in %<amdgpu_hsa_kernel%> \"\n \t\t \"attribute\", str);\n \t  err = true;\n \t  break;\n@@ -2102,7 +2103,7 @@ gcn_conditional_register_usage (void)\n   /* Requesting a set of args different from the default violates the ABI.  */\n   if (!leaf_function_p ())\n     warning (0, \"A non-default set of initial values has been requested, \"\n-\t\t\"which violates the ABI!\");\n+\t\t\"which violates the ABI\");\n \n   for (int i = SGPR_REGNO (0); i < SGPR_REGNO (14); i++)\n     fixed_regs[i] = 0;\n@@ -3983,6 +3984,8 @@ gcn_vectorize_vec_perm_const (machine_mode vmode, rtx dst,\n   unsigned int perm[64];\n   for (unsigned int i = 0; i < nelt; ++i)\n     perm[i] = sel[i] & (2 * nelt - 1);\n+  for (unsigned int i = nelt; i < 64; ++i)\n+    perm[i] = 0;\n \n   src0 = force_reg (vmode, src0);\n   src1 = force_reg (vmode, src1);\n@@ -4882,8 +4885,8 @@ gcn_goacc_validate_dims (tree decl, int dims[], int fn_level,\n \twarning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION,\n \t\t    OPT_Wopenacc_dims,\n \t\t    (dims[GOMP_DIM_VECTOR]\n-\t\t     ? G_(\"using vector_length (64), ignoring %d\")\n-\t\t     : G_(\"using vector_length (64), \"\n+\t\t     ? G_(\"using %<vector_length (64)%>, ignoring %d\")\n+\t\t     : G_(\"using %<vector_length (64)%>, \"\n \t\t\t  \"ignoring runtime setting\")),\n \t\t    dims[GOMP_DIM_VECTOR]);\n       dims[GOMP_DIM_VECTOR] = 1;\n@@ -4895,7 +4898,7 @@ gcn_goacc_validate_dims (tree decl, int dims[], int fn_level,\n     {\n       warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION,\n \t\t  OPT_Wopenacc_dims,\n-\t\t  \"using num_workers (%d), ignoring %d\",\n+\t\t  \"using %<num_workers (%d)%>, ignoring %d\",\n \t\t  max_workers, dims[GOMP_DIM_WORKER]);\n       dims[GOMP_DIM_WORKER] = max_workers;\n       changed = true;"}]}