{"sha": "6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkMzAxNDhlMjdlZDJmMTNiNGY1YjI4MjUzMDI0Y2YwYzBmZDI0Ng==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-06-19T05:34:51Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-06-19T05:34:51Z"}, "message": "arm.h (CONDITIONAL_REGISTER_USAGE): If flag_pic, never use PIC_OFFSET_TABLE_REGNUM for general alloaction.\n\n* arm.h (CONDITIONAL_REGISTER_USAGE): If flag_pic, never use\nPIC_OFFSET_TABLE_REGNUM for general alloaction.\n(INITIAL_ELIMINATION_OFFSET): Count the fact that the PIC register\nmust be stacked if it is used for PIC accesses.\n* arm.c (use_return_insn): Handle PIC register specially.\n(output_return_instruction): Likewise.\n(output_func_{prologue,epilogue}): Likewise.\n(output_expand_prologue): Likewise.\n\nFrom-SVN: r27605", "tree": {"sha": "dfeece89614ada313b967c87380a91168a4af2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfeece89614ada313b967c87380a91168a4af2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/comments", "author": null, "committer": null, "parents": [{"sha": "62cc72ac04a1448ff54486cc914419a0251493db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62cc72ac04a1448ff54486cc914419a0251493db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62cc72ac04a1448ff54486cc914419a0251493db"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "6d092293b40b38600065f88f8ed66611cba69a9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "patch": "@@ -1,3 +1,14 @@\n+Sat Jun 19 05:25:05 1999  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.h (CONDITIONAL_REGISTER_USAGE): If flag_pic, never use\n+\tPIC_OFFSET_TABLE_REGNUM for general alloaction.\n+\t(INITIAL_ELIMINATION_OFFSET): Count the fact that the PIC register\n+\tmust be stacked if it is used for PIC accesses.\n+\t* arm.c (use_return_insn): Handle PIC register specially.\n+\t(output_return_instruction): Likewise.\n+\t(output_func_{prologue,epilogue}): Likewise.\n+\t(output_expand_prologue): Likewise.\n+\n Fri Jun 18 23:47:06 1999  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.c (find_addr_reg): New function."}, {"sha": "e214993635f3027c96fd949853fc911f43d0cf06", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "patch": "@@ -585,9 +585,14 @@ use_return_insn (iscond)\n     return 0;\n   if ((iscond && arm_is_strong)\n       || TARGET_THUMB_INTERWORK)\n-    for (regno = 0; regno < 16; regno++)\n-      if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    {\n+      for (regno = 0; regno < 16; regno++)\n+\tif (regs_ever_live[regno] && ! call_used_regs[regno])\n+\t  return 0;\n+\n+      if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n \treturn 0;\n+    }\n       \n   /* Can't be done if any of the FPU regs are pushed, since this also\n      requires an insn */\n@@ -5321,6 +5326,9 @@ output_return_instruction (operand, really_return, reverse)\n     if (regs_ever_live[reg] && ! call_used_regs[reg])\n       live_regs++;\n \n+  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+    live_regs++;\n+\n   if (live_regs || (regs_ever_live[14] && ! lr_save_eliminated))\n     live_regs++;\n \n@@ -5340,7 +5348,9 @@ output_return_instruction (operand, really_return, reverse)\n \t\treverse ? \"ldm%?%D0fd\\t%|sp!, {\" : \"ldm%?%d0fd\\t%|sp!, {\");\n \n       for (reg = 0; reg <= 10; reg++)\n-        if (regs_ever_live[reg] && ! call_used_regs[reg])\n+        if (regs_ever_live[reg] \n+\t    && (! call_used_regs[reg]\n+\t\t|| (flag_pic && reg == PIC_OFFSET_TABLE_REGNUM)))\n           {\n \t    strcat (instr, \"%|\");\n             strcat (instr, reg_names[reg]);\n@@ -5500,6 +5510,9 @@ output_func_prologue (f, frame_size)\n     if (regs_ever_live[reg] && ! call_used_regs[reg])\n       live_regs_mask |= (1 << reg);\n \n+  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+    live_regs_mask |= (1 << PIC_OFFSET_TABLE_REGNUM);\n+\n   if (frame_pointer_needed)\n     live_regs_mask |= 0xD800;\n   else if (regs_ever_live[14])\n@@ -5576,6 +5589,12 @@ output_func_epilogue (f, frame_size)\n \tfloats_offset += 4;\n       }\n \n+  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+    {\n+      live_regs_mask |= (1 << PIC_OFFSET_TABLE_REGNUM);\n+      floats_offset += 4;\n+    }\n+\n   if (frame_pointer_needed)\n     {\n       if (arm_fpu_arch == FP_SOFT2)\n@@ -5836,12 +5855,17 @@ arm_expand_prologue ()\n     store_arg_regs = 1;\n \n   if (! volatile_func)\n-    for (reg = 0; reg <= 10; reg++)\n-      if (regs_ever_live[reg] && ! call_used_regs[reg])\n-\tlive_regs_mask |= 1 << reg;\n+    {\n+      for (reg = 0; reg <= 10; reg++)\n+\tif (regs_ever_live[reg] && ! call_used_regs[reg])\n+\t  live_regs_mask |= 1 << reg;\n+\n+      if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+\tlive_regs_mask |= 1 << PIC_OFFSET_TABLE_REGNUM;\n \n-  if (! volatile_func && regs_ever_live[14])\n-    live_regs_mask |= 0x4000;\n+      if (regs_ever_live[14])\n+\tlive_regs_mask |= 0x4000;\n+    }\n \n   if (frame_pointer_needed)\n     {"}, {"sha": "807340f9799a67b14d9ec5bf369995daaf6e670d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed30148e27ed2f13b4f5b28253024cf0c0fd246/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6ed30148e27ed2f13b4f5b28253024cf0c0fd246", "patch": "@@ -725,7 +725,7 @@ extern const char * structure_size_string;\n   if (flag_pic)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 0;\t\\\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n     }\t\t\t\t\t\t\t\\\n   else if (TARGET_APCS_STACK)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n@@ -1262,6 +1262,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n           for (regno = 0; regno <= 10; regno++)\t\t\t\t\\\n \t    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n \t      saved_hard_reg = 1, offset += 4;\t\t\t\t\\\n+\t  /* PIC register is a fixed reg, so call_used_regs set.  */\t\\\n+\t  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\t\\\n+\t    saved_hard_reg = 1, offset += 4;\t\t\t\t\\\n           for (regno = 16; regno <=23; regno++)\t\t\t\t\\\n \t    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n \t      offset += 12;\t\t\t\t\t\t\\"}]}