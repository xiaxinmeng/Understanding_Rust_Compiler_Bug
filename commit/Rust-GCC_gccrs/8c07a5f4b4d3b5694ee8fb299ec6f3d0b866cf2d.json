{"sha": "8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwN2E1ZjRiNGQzYjU2OTRlZThmYjI5OWVjNmYzZDBiODY2Y2YyZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-16T19:47:02Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-16T19:47:02Z"}, "message": "re PR fortran/54656 (ICE with software REAL(16) for NORM2)\n\n\tPR fortran/54656\n\n\t* trans-intrinsic.c (gfc_build_intrinsic_lib_fndecls): Add decl\n\tfor quadruple precision BUILT_IN_SQRT.\n\n\t* gfortran.dg/norm_4.f90: Rename to...\n\t* gfortran.dg/norm2_4.f90: this.\n\t* gfortran.dg/norm2_5.f90: New test.\n\nFrom-SVN: r226929", "tree": {"sha": "0716788970dbc7122ed5e1f510ac16dacf243fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0716788970dbc7122ed5e1f510ac16dacf243fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c541d5217e6571a0a5d8bf56db831c1ad63756ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c541d5217e6571a0a5d8bf56db831c1ad63756ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c541d5217e6571a0a5d8bf56db831c1ad63756ff"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "3a6387517478b226d9b8397235b888546fdb8fdc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "patch": "@@ -1,3 +1,9 @@\n+2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/54656\n+\t* trans-intrinsic.c (gfc_build_intrinsic_lib_fndecls): Add decl\n+\tfor quadruple precision BUILT_IN_SQRT.\n+\n 2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-intrinsic.c (conv_intrinsic_ieee_is_negative): Use type"}, {"sha": "f5b270f4bf75414af1a03347f6452dc8acc8d51f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "patch": "@@ -676,6 +676,11 @@ gfc_build_intrinsic_lib_fndecls (void)\n #undef DEFINE_MATH_BUILTIN\n #undef DEFINE_MATH_BUILTIN_C\n \n+    /* There is one built-in we defined manually, because it gets called\n+       with builtin_decl_for_precision() or builtin_decl_for_float_type()\n+       even though it is not an OTHER_BUILTIN: it is SQRT.  */\n+    quad_decls[BUILT_IN_SQRT] = define_quad_builtin (\"sqrtq\", func_1, true);\n+\n   }\n \n   /* Add GCC builtin functions.  */"}, {"sha": "28a231cc93540e015088f6fea50f35a01cab5552", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "patch": "@@ -1,3 +1,10 @@\n+2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/54656\n+\t* gfortran.dg/norm_4.f90: Rename to...\n+\t* gfortran.dg/norm2_4.f90: this.\n+\t* gfortran.dg/norm2_5.f90: New test.\n+\n 2015-08-14  Alexandre Oliva <aoliva@redhat.com>\n \n \t* gcc.dg/guality/pr54200.c: Add -fno-tree-coalesce-vars."}, {"sha": "276b1743f001764254082494978c82899cfe0824", "filename": "gcc/testsuite/gfortran.dg/norm2_4.f90", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_4.f90?ref=8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "previous_filename": "gcc/testsuite/gfortran.dg/norm_4.f90"}, {"sha": "0416fd67b69b308a4c1f7199a20de2602174a946", "filename": "gcc/testsuite/gfortran.dg/norm2_5.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_5.f90?ref=8c07a5f4b4d3b5694ee8fb299ec6f3d0b866cf2d", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! Testcase from PR 54656\n+! Checking for NORM2 for large float kinds\n+!\n+program test\n+  implicit none\n+\n+  ! k1 and k2 will be large real kinds, if supported, and single/double\n+  ! otherwise\n+  integer, parameter :: k1 = &\n+    max(selected_real_kind(precision(0.d0) + 1), kind(0.))\n+  integer, parameter :: k2 = &\n+    max(selected_real_kind(precision(0._k1) + 1), kind(0.d0))\n+\n+  real(kind=k1) :: d1(10), z1\n+  real(kind=k2) :: d2(10), z2\n+  d1 = 1 ; d2 = 1\n+  z1 = norm2 (d1)\n+  z2 = norm2 (d2)\n+\n+  print *, z1, z2\n+end program test"}]}