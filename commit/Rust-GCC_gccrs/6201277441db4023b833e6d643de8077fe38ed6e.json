{"sha": "6201277441db4023b833e6d643de8077fe38ed6e", "node_id": "C_kwDOANBUbNoAKDYyMDEyNzc0NDFkYjQwMjNiODMzZTZkNjQzZGU4MDc3ZmUzOGVkNmU", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-25T13:06:43Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-28T17:05:42Z"}, "message": "d: Add `@simd` and `@simd_clones` attributes to compiler and library\n\nThe `@simd` attribute is equivalent to `__attribute__((simd))`, and\n`@simd_clones` is a convenience alias to allow specifying whether the\ncompiler should generated masked or non-masked simd clones.\n\ngcc/d/ChangeLog:\n\n\t* d-attribs.cc (handle_omp_declare_simd_attribute): New function.\n\t(d_handle_simd_attribute): New function.\n\t(d_langhook_common_attribute_table): Add 'omp declare simd' attribute.\n\t(d_langhook_attribute_table): Add simd attribute.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/gcc/attributes.d (simd): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/attr_simd1.d: New test.\n\t* gdc.dg/attr_simd2.d: New test.", "tree": {"sha": "f352e3cda43ffefe86c022ec52655ebee1dc9f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f352e3cda43ffefe86c022ec52655ebee1dc9f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6201277441db4023b833e6d643de8077fe38ed6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6201277441db4023b833e6d643de8077fe38ed6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6201277441db4023b833e6d643de8077fe38ed6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6201277441db4023b833e6d643de8077fe38ed6e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed06274eacc17a224b87f23111d7ca874ea53b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed06274eacc17a224b87f23111d7ca874ea53b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed06274eacc17a224b87f23111d7ca874ea53b7c"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "04f7f1686a2923e95e614c58b2f340351204e504", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=6201277441db4023b833e6d643de8077fe38ed6e", "patch": "@@ -58,6 +58,7 @@ static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree handle_transaction_pure_attribute (tree *, tree, tree, int, bool *);\n static tree handle_returns_twice_attribute (tree *, tree, tree, int, bool *);\n static tree handle_fnspec_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_omp_declare_simd_attribute (tree *, tree, tree, int, bool *);\n \n /* D attribute handlers for user defined attributes.  */\n static tree d_handle_noinline_attribute (tree *, tree, tree, int, bool *);\n@@ -80,6 +81,7 @@ static tree d_handle_restrict_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_visibility_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_no_sanitize_attribute (tree *, tree, tree, int, bool *);\n+static tree d_handle_simd_attribute (tree *, tree, tree, int, bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -186,6 +188,8 @@ const attribute_spec d_langhook_common_attribute_table[] =\n \t     handle_type_generic_attribute, NULL),\n   ATTR_SPEC (\"fn spec\", 1, 1, false, true, true, false,\n \t     handle_fnspec_attribute, NULL),\n+  ATTR_SPEC (\"omp declare simd\", 0, -1, true,  false, false, false,\n+\t     handle_omp_declare_simd_attribute, NULL),\n   ATTR_SPEC (NULL, 0, 0, false, false, false, false, NULL, NULL),\n };\n \n@@ -228,6 +232,8 @@ const attribute_spec d_langhook_attribute_table[] =\n \t     d_handle_register_attribute, NULL),\n   ATTR_SPEC (\"restrict\", 0, 0, true, false, false, false,\n \t     d_handle_restrict_attribute, NULL),\n+  ATTR_SPEC (\"simd\", 0, 1, true,  false, false, false,\n+\t     d_handle_simd_attribute, NULL),\n   ATTR_SPEC (\"used\", 0, 0, true, false, false, false,\n \t     d_handle_used_attribute, NULL),\n   ATTR_SPEC (\"visibility\", 1, 1, false, false, false, false,\n@@ -664,6 +670,16 @@ handle_fnspec_attribute (tree *, tree, tree args, int, bool *)\n   return NULL_TREE;\n }\n \n+/* Handle an \"omp declare simd\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+tree\n+handle_omp_declare_simd_attribute (tree *node, tree, tree, int, bool *)\n+{\n+  gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n+  return NULL_TREE;\n+}\n+\n /* Language specific attribute handlers.\n    These functions take the arguments:\n    (tree *node, tree name, tree args, int flags, bool *no_add_attrs)  */\n@@ -1474,6 +1490,55 @@ d_handle_restrict_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"simd\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+d_handle_simd_attribute (tree *node, tree name, tree args, int,\n+\t\t\t bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  tree omp_attr = get_identifier (\"omp declare simd\");\n+  tree omp_flags = NULL_TREE;\n+  if (args)\n+    {\n+      tree id = TREE_VALUE (args);\n+\n+      if (TREE_CODE (id) != STRING_CST)\n+\t{\n+\t  error (\"%qE attribute argument not a string constant\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (strcmp (TREE_STRING_POINTER (id), \"notinbranch\") == 0)\n+\tomp_flags = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t      OMP_CLAUSE_NOTINBRANCH);\n+      else if (strcmp (TREE_STRING_POINTER (id), \"inbranch\") == 0)\n+\tomp_flags = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t      OMP_CLAUSE_INBRANCH);\n+      else\n+\t{\n+\t  error (\"only %<inbranch%> and %<notinbranch%> flags are \"\n+\t\t \"allowed for %<simd%> attribute\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n+  DECL_ATTRIBUTES (*node) =\n+    tree_cons (omp_attr, build_tree_list (NULL_TREE, omp_flags),\n+\t       DECL_ATTRIBUTES (*node));\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"used\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "8e83d80b3e05c09bdfc0cae6e30f9cda3403eee5", "filename": "gcc/testsuite/gdc.dg/attr_simd1.d", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd1.d?ref=6201277441db4023b833e6d643de8077fe38ed6e", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-fdump-tree-optimized\" }\n+\n+import gcc.attributes;\n+\n+extern(C) @simd int simd_attr() { return 0; }\n+\n+// { dg-final { scan-tree-dump \"simd_attr\\[ \\\\t\\]simdclone|vector\" \"optimized\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVbN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVbM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVcN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVcM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVdN8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVdM8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+\n+extern(C) @simd_clones(\"notinbranch\") int simd_notinbranch() { return 0; }\n+\n+// { dg-final { scan-tree-dump \"simd_notinbranch\\[ \\\\t\\]simdclone|vector\" \"optimized\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVbN4_simd_notinbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVcN4_simd_notinbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVdN8_simd_notinbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16_simd_notinbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVbM4_simd_notinbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVcM4_simd_notinbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVdM8_simd_notinbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVeM16_simd_notinbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+\n+extern(C) @simd_clones(\"inbranch\") int simd_inbranch() { return 0; }\n+\n+// { dg-final { scan-tree-dump \"simd_inbranch\\[ \\\\t\\]simdclone|vector\" \"optimized\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVbN4_simd_inbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVcN4_simd_inbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVdN8_simd_inbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-not \"_ZGVeN16_simd_inbranch:\" { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVbM4_simd_inbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVcM4_simd_inbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVdM8_simd_inbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16_simd_inbranch:\" 1 { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "49cb6421fab3508a2a76243a8bb204a3e1b1d6f2", "filename": "gcc/testsuite/gdc.dg/attr_simd2.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6201277441db4023b833e6d643de8077fe38ed6e/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fattr_simd2.d?ref=6201277441db4023b833e6d643de8077fe38ed6e", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-options \"-fdump-tree-optimized\" }\n+\n+import gcc.attributes;\n+\n+@attribute(\"simd\")\n+int simd_ignored; // { dg-warning \".simd. attribute ignored\" }\n+\n+@attribute(\"simd\", 123)\n+int simd_string() { return 0; } // { dg-error \".simd. attribute argument not a string constant\" }\n+\n+@attribute(\"simd\", \"invalid\")\n+int simd_invalid() { return 0; } // { dg-error \"only .inbranch. and .notinbranch. flags are allowed for .simd. attribute\" }\n+\n+@attribute(\"simd\", \"notinbranch\", \"inbranch\")\n+int simd_wrong_args() { return 0; } // { dg-error \"wrong number of arguments specified for .simd. attribute\" }"}, {"sha": "9d7f2e1d861810aa429b0a0d66272ae2c7bd8b09", "filename": "libphobos/libdruntime/gcc/attributes.d", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6201277441db4023b833e6d643de8077fe38ed6e/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6201277441db4023b833e6d643de8077fe38ed6e/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d?ref=6201277441db4023b833e6d643de8077fe38ed6e", "patch": "@@ -371,6 +371,46 @@ auto section(A...)(A arguments)\n     assert(false, \"section attribute argument not a string constant\");\n }\n \n+/**\n+ * The `@simd` attribute enables creation of one or more function versions that\n+ * can process multiple arguments using SIMD instructions from a single\n+ * invocation. Specifying this attribute allows compiler to assume that such\n+ * versions are available at link time (provided in the same or another module).\n+ * Generated versions are target-dependent and described in the corresponding\n+ * Vector ABI document. For x86_64 target this document can be found here.\n+ * https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt\n+ * \n+ * The `@simd_clones` attribute is the same as `@simd`, but also includes a\n+ * `mask` argument.  Valid masks values are `notinbranch` or `inbranch`, and\n+ * instructs the compiler to generate non-masked or masked clones\n+ * correspondingly.\n+ *\n+ * Example:\n+ * ---\n+ * import gcc.attributes;\n+ *\n+ * @simd double sqrt(double x);\n+ * @simd(\"notinbranch\") double atan2(double y, double x);\n+ * ---\n+ */\n+enum simd = attribute(\"simd\");\n+\n+auto simd_clones(string mask)\n+{\n+    if (mask == \"notinbranch\" || mask == \"inbranch\")\n+        return attribute(\"simd\", mask);\n+    else\n+    {\n+        assert(false, \"unrecognized parameter `\" ~ mask\n+               ~ \"` for `gcc.attribute.simd_clones`\");\n+    }\n+}\n+\n+auto simd_clones(A...)(A arguments)\n+{\n+    assert(false, \"simd_clones attribute argument not a string constant\");\n+}\n+\n /**\n  * The `@symver` attribute creates a symbol version on ELF targets.  The syntax\n  * of the string parameter is `name@nodename`.  The `name` part of the parameter"}]}