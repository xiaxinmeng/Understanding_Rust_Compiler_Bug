{"sha": "ef2d3ec325b1b720df5da20784eba46249af2294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyZDNlYzMyNWIxYjcyMGRmNWRhMjA3ODRlYmE0NjI0OWFmMjI5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-22T07:34:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-22T07:36:25Z"}, "message": "phiopt: Optimize x ? __builtin_clz (x) : 32 in GIMPLE fallout [PR97503]\n\n> this broke sparc-sun-solaris2.11 bootstrap\n>\n> /vol/gcc/src/hg/master/local/gcc/tree-ssa-phiopt.c: In function 'bool cond_removal_in_popcount_clz_ctz_pattern(basic_block, basic_block, edge, edge, gimple*, tree, tree)':\n> /vol/gcc/src/hg/master/local/gcc/tree-ssa-phiopt.c:1858:27: error: variable 'mode' set but not used [-Werror=unused-but-set-variable]\n>  1858 |           scalar_int_mode mode = SCALAR_INT_TYPE_MODE (TREE_TYPE (arg));\n>       |                           ^~~~\n>\n>\n> and doubtlessly several other targets that use the defaults.h definition of\n>\n> #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\n\nUgh, seems many of those macros do not evaluate the first argument.\nThis got broken by the change to direct_internal_fn_supported_p, previously\nit used mode also in the optab test.\n\n2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree-ssa-phiopt.c (cond_removal_in_popcount_clz_ctz_pattern):\n\tFor CLZ and CTZ tests, use type temporary instead of mode.", "tree": {"sha": "10832291605a7ebfeb0bb730f5a8b5851bb72f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10832291605a7ebfeb0bb730f5a8b5851bb72f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2d3ec325b1b720df5da20784eba46249af2294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2d3ec325b1b720df5da20784eba46249af2294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2d3ec325b1b720df5da20784eba46249af2294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2d3ec325b1b720df5da20784eba46249af2294/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c5b7e1dc47bab6e6cedbf4b2d88cef3283533e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c5b7e1dc47bab6e6cedbf4b2d88cef3283533e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c5b7e1dc47bab6e6cedbf4b2d88cef3283533e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "aa6bb88848b92c7434752d971ef590133f572aa4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2d3ec325b1b720df5da20784eba46249af2294/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2d3ec325b1b720df5da20784eba46249af2294/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=ef2d3ec325b1b720df5da20784eba46249af2294", "patch": "@@ -1842,10 +1842,10 @@ cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n     CASE_CFN_CLZ:\n       if (INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t{\n-\t  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (TREE_TYPE (arg));\n-\t  if (direct_internal_fn_supported_p (IFN_CLZ, TREE_TYPE (arg),\n-\t\t\t\t\t      OPTIMIZE_FOR_BOTH)\n-\t      && CLZ_DEFINED_VALUE_AT_ZERO (mode, val) == 2)\n+\t  tree type = TREE_TYPE (arg);\n+\t  if (direct_internal_fn_supported_p (IFN_CLZ, type, OPTIMIZE_FOR_BOTH)\n+\t      && CLZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (type),\n+\t\t\t\t\t    val) == 2)\n \t    {\n \t      ifn = IFN_CLZ;\n \t      break;\n@@ -1855,10 +1855,10 @@ cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n     CASE_CFN_CTZ:\n       if (INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t{\n-\t  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (TREE_TYPE (arg));\n-\t  if (direct_internal_fn_supported_p (IFN_CTZ, TREE_TYPE (arg),\n-\t\t\t\t\t      OPTIMIZE_FOR_BOTH)\n-\t      && CTZ_DEFINED_VALUE_AT_ZERO (mode, val) == 2)\n+\t  tree type = TREE_TYPE (arg);\n+\t  if (direct_internal_fn_supported_p (IFN_CTZ, type, OPTIMIZE_FOR_BOTH)\n+\t      && CTZ_DEFINED_VALUE_AT_ZERO (SCALAR_INT_TYPE_MODE (type),\n+\t\t\t\t\t    val) == 2)\n \t    {\n \t      ifn = IFN_CTZ;\n \t      break;"}]}