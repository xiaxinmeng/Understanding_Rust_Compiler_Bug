{"sha": "57ec4709990925b193319480f1dd4d44ec37e903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlYzQ3MDk5OTA5MjViMTkzMzE5NDgwZjFkZDRkNDRlYzM3ZTkwMw==", "commit": {"author": {"name": "Chandrakala Chavva", "email": "cchavva@redhat.com", "date": "2000-12-28T01:51:55Z"}, "committer": {"name": "Chandra Chavva", "email": "cchavva@gcc.gnu.org", "date": "2000-12-28T01:51:55Z"}, "message": "calls.c (store_one_arg): If parm is passed both in stack and in register and offset is greater than...\n\n\t * calls.c (store_one_arg):  If parm is passed both in stack and in\n        register and offset is greater than reg_parm_stack_space, split\n        the offset and call emit_push_insn().\n\nFrom-SVN: r38503", "tree": {"sha": "7bf4b9fa1674c595e43561ebd1c5af02c3875042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf4b9fa1674c595e43561ebd1c5af02c3875042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ec4709990925b193319480f1dd4d44ec37e903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ec4709990925b193319480f1dd4d44ec37e903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ec4709990925b193319480f1dd4d44ec37e903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ec4709990925b193319480f1dd4d44ec37e903/comments", "author": null, "committer": null, "parents": [{"sha": "bc53668ead944505e9474544ed35d1abb6e5fceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc53668ead944505e9474544ed35d1abb6e5fceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc53668ead944505e9474544ed35d1abb6e5fceb"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "b315295d741f6ec605be86240d72cfe331fc9bb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ec4709990925b193319480f1dd4d44ec37e903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ec4709990925b193319480f1dd4d44ec37e903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ec4709990925b193319480f1dd4d44ec37e903", "patch": "@@ -1,3 +1,9 @@\n+2000-12-27  Chandrakala Chavva  <cchavva@redhat.com>\n+\n+\t* calls.c (store_one_arg):  If parm is passed both in stack and in\n+        register and offset is greater than reg_parm_stack_space, split\n+        the offset and call emit_push_insn(). \n+\n 2000-12-27  Nick Clifton  <nickc@redhat.com>\n \n \t* ifcvt.c (noce_emit_store_flag): Handle jump insns that are"}, {"sha": "51d5566d3746f64b2f4b21fa02057138e1d8df6e", "filename": "gcc/calls.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ec4709990925b193319480f1dd4d44ec37e903/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ec4709990925b193319480f1dd4d44ec37e903/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=57ec4709990925b193319480f1dd4d44ec37e903", "patch": "@@ -4535,6 +4535,30 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t    }\n \t}\n \n+      /*  If parm is passed both in stack and in register and offset is \n+\t  greater than reg_parm_stack_space, split the offset. */\n+      if (arg->reg && arg->pass_on_stack)\n+\t{\n+\t  if (arg->offset.constant < reg_parm_stack_space && arg->offset.var)\n+\t    error (\"variable offset is passed paritially in stack and in reg\");\n+\t  else if (arg->offset.constant < reg_parm_stack_space && arg->size.var)\n+\t    error (\"variable size is passed partially in stack and in reg\");\n+\t  else if (arg->offset.constant < reg_parm_stack_space \n+\t      && ((arg->offset.constant + arg->size.constant) \n+\t\t   > reg_parm_stack_space))\n+          {\n+\t    rtx size_rtx1 = GEN_INT (reg_parm_stack_space - arg->offset.constant);\n+\t    emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx1,\n+\t\t            TYPE_ALIGN (TREE_TYPE (pval)) / BITS_PER_UNIT, \n+\t\t\t    partial, reg, excess, argblock, \n+\t\t\t    ARGS_SIZE_RTX (arg->offset), reg_parm_stack_space,\n+\t\t            ARGS_SIZE_RTX (arg->alignment_pad));\n+\n+\t    size_rtx = GEN_INT (INTVAL(size_rtx) - reg_parm_stack_space);\n+\t  }\n+\t}\n+\t\n+\n       emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx,\n \t\t      TYPE_ALIGN (TREE_TYPE (pval)), partial, reg, excess,\n \t\t      argblock, ARGS_SIZE_RTX (arg->offset),"}]}