{"sha": "1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjYmZmZmIwZmI2MTRmMDljZjJiN2I3MGYxNTJkNmU0ODljZmQxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-28T12:18:12Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-28T12:18:12Z"}, "message": "aarch64: Fix segfault in aarch64_expand_epilogue [PR95361]\n\nThe stack frame for the function in the testcase consisted of two\nSVE save slots.  Both saves had been shrink-wrapped, but for different\nblocks, meaning that the stack allocation and deallocation were\nseparate from the saves themselves.  Before emitting the deallocation,\nwe tried to attach a REG_CFA_DEF_CFA note to the preceding instruction,\nto redefine the CFA in terms of the stack pointer.  But in this case\nthere was no preceding instruction.\n\nThis in practice only happens for SVE because:\n\n(a) We don't try to shrink-wrap wb_candidate* registers even when\n    we've decided to treat them as normal saves and restores.\n    I have a fix for that.\n\n(b) Even with (a) fixed, we're (almost?) guaranteed to emit\n    a stack tie for frames that are 64k or larger, so we end\n    up hanging the REG_CFA_DEF_CFA note on that instead.\n\nWe should only need to redefine the CFA if it was previously\ndefined in terms of the frame pointer.  In other cases the CFA\nshould already be defined in terms of the stack pointer,\nso redefining it is unnecessary but usually harmless.\n\n2020-05-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR testsuite/95361\n\t* config/aarch64/aarch64.c (aarch64_expand_epilogue): Assert that\n\twe have at least some CFI operations when using a frame pointer.\n\tOnly redefine the CFA if we have CFI operations.\n\ngcc/testsuite/\n\tPR testsuite/95361\n\t* gcc.target/aarch64/sve/pr95361.c: New test.", "tree": {"sha": "9d3620397c9cb49d14f759fd69946001d2c90e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3620397c9cb49d14f759fd69946001d2c90e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cd57389767b9a81125f999d33d509cba0ebaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cd57389767b9a81125f999d33d509cba0ebaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cd57389767b9a81125f999d33d509cba0ebaaf"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "cffb945d7dde0181c8c9f0a0d0eccbd008ebf407", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "patch": "@@ -8180,7 +8180,11 @@ aarch64_expand_epilogue (bool for_sibcall)\n   if (callee_adjust != 0)\n     aarch64_pop_regs (reg1, reg2, callee_adjust, &cfi_ops);\n \n-  if (callee_adjust != 0 || maybe_gt (initial_adjust, 65536))\n+  /* If we have no register restore information, the CFA must have been\n+     defined in terms of the stack pointer since the end of the prologue.  */\n+  gcc_assert (cfi_ops || !frame_pointer_needed);\n+\n+  if (cfi_ops && (callee_adjust != 0 || maybe_gt (initial_adjust, 65536)))\n     {\n       /* Emit delayed restores and set the CFA to be SP + initial_adjust.  */\n       insn = get_last_insn ();"}, {"sha": "ce70d0d5cdf4426b1cd20e9b49773c523a897730", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr95361.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr95361.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr95361.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr95361.c?ref=1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O2\" } */\n+\n+__SVInt8_t\n+f (__SVInt8_t x, int y)\n+{\n+  if (y == 1)\n+    asm volatile (\"\" ::: \"z8\");\n+  if (y == 2)\n+    asm volatile (\"\" ::: \"z9\");\n+  return x;\n+}"}]}