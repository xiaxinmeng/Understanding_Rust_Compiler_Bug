{"sha": "3950b229a5ed6710f30241c2ddc3c74909bf4740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1MGIyMjlhNWVkNjcxMGYzMDI0MWMyZGRjM2M3NDkwOWJmNDc0MA==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-09-19T14:36:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-09-19T14:36:43Z"}, "message": "aarch64: Implement -moutline-atomics\n\n\t* config/aarch64/aarch64.opt (-moutline-atomics): New.\n\t* config/aarch64/aarch64.c (aarch64_atomic_ool_func): New.\n\t(aarch64_ool_cas_names, aarch64_ool_swp_names): New.\n\t(aarch64_ool_ldadd_names, aarch64_ool_ldset_names): New.\n\t(aarch64_ool_ldclr_names, aarch64_ool_ldeor_names): New.\n\t(aarch64_expand_compare_and_swap): Honor TARGET_OUTLINE_ATOMICS.\n\t* config/aarch64/atomics.md (atomic_exchange<ALLI>): Likewise.\n\t(atomic_<atomic_op><ALLI>): Likewise.\n\t(atomic_fetch_<atomic_op><ALLI>): Likewise.\n\t(atomic_<atomic_op>_fetch<ALLI>): Likewise.\n\t* doc/invoke.texi: Document -moutline-atomics.\ntestsuite/\n\t* gcc.target/aarch64/atomic-op-acq_rel.c: Use -mno-outline-atomics.\n\t* gcc.target/aarch64/atomic-comp-swap-release-acquire.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-acquire.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-char.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-consume.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-imm.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-int.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-long.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-relaxed.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-release.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-seq_cst.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-short.c: Likewise.\n\t* gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: Likewise.\n\t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: Likewise.\n\t* gcc.target/aarch64/sync-comp-swap.c: Likewise.\n\t* gcc.target/aarch64/sync-op-acquire.c: Likewise.\n\t* gcc.target/aarch64/sync-op-full.c: Likewise.\n\nFrom-SVN: r275968", "tree": {"sha": "349942f7ab7fe93138f405bd62a0fe79f1886731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349942f7ab7fe93138f405bd62a0fe79f1886731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3950b229a5ed6710f30241c2ddc3c74909bf4740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3950b229a5ed6710f30241c2ddc3c74909bf4740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3950b229a5ed6710f30241c2ddc3c74909bf4740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3950b229a5ed6710f30241c2ddc3c74909bf4740/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33befddcb849235353dc263db1c7d07dc15c9faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33befddcb849235353dc263db1c7d07dc15c9faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33befddcb849235353dc263db1c7d07dc15c9faa"}], "stats": {"total": 280, "additions": 253, "deletions": 27}, "files": [{"sha": "06faf82e0552acc4387252a5a002fa9e0a379947", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -20,6 +20,18 @@\n \tstrong_zero_p for aarch64_track_speculation; unify some code paths;\n \tuse aarch64_gen_compare_reg instead of open-coding.\n \n+\t* config/aarch64/aarch64.opt (-moutline-atomics): New.\n+\t* config/aarch64/aarch64.c (aarch64_atomic_ool_func): New.\n+\t(aarch64_ool_cas_names, aarch64_ool_swp_names): New.\n+\t(aarch64_ool_ldadd_names, aarch64_ool_ldset_names): New.\n+\t(aarch64_ool_ldclr_names, aarch64_ool_ldeor_names): New.\n+\t(aarch64_expand_compare_and_swap): Honor TARGET_OUTLINE_ATOMICS.\n+\t* config/aarch64/atomics.md (atomic_exchange<ALLI>): Likewise.\n+\t(atomic_<atomic_op><ALLI>): Likewise.\n+\t(atomic_fetch_<atomic_op><ALLI>): Likewise.\n+\t(atomic_<atomic_op>_fetch<ALLI>): Likewise.\n+\t* doc/invoke.texi: Document -moutline-atomics.\n+\n 2019-09-19  Feng Xue  <fxue@os.amperecomputing.com>\n \n \t* ipa-fnsummary.c (set_cond_stmt_execution_predicate): Do not compute"}, {"sha": "1c1aac7201abfe87443c6bd39545ec9867a5d996", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -696,4 +696,17 @@ poly_uint64 aarch64_regmode_natural_size (machine_mode);\n \n bool aarch64_high_bits_all_ones_p (HOST_WIDE_INT);\n \n+struct atomic_ool_names\n+{\n+    const char *str[5][4];\n+};\n+\n+rtx aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,\n+\t\t\t    const atomic_ool_names *names);\n+extern const atomic_ool_names aarch64_ool_swp_names;\n+extern const atomic_ool_names aarch64_ool_ldadd_names;\n+extern const atomic_ool_names aarch64_ool_ldset_names;\n+extern const atomic_ool_names aarch64_ool_ldclr_names;\n+extern const atomic_ool_names aarch64_ool_ldeor_names;\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "56a4a47db73e16f9a2ebcf60aca0e0b543183350", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -16867,6 +16867,82 @@ aarch64_emit_unlikely_jump (rtx insn)\n   add_reg_br_prob_note (jump, profile_probability::very_unlikely ());\n }\n \n+/* We store the names of the various atomic helpers in a 5x4 array.\n+   Return the libcall function given MODE, MODEL and NAMES.  */\n+\n+rtx\n+aarch64_atomic_ool_func(machine_mode mode, rtx model_rtx,\n+\t\t\tconst atomic_ool_names *names)\n+{\n+  memmodel model = memmodel_base (INTVAL (model_rtx));\n+  int mode_idx, model_idx;\n+\n+  switch (mode)\n+    {\n+    case E_QImode:\n+      mode_idx = 0;\n+      break;\n+    case E_HImode:\n+      mode_idx = 1;\n+      break;\n+    case E_SImode:\n+      mode_idx = 2;\n+      break;\n+    case E_DImode:\n+      mode_idx = 3;\n+      break;\n+    case E_TImode:\n+      mode_idx = 4;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  switch (model)\n+    {\n+    case MEMMODEL_RELAXED:\n+      model_idx = 0;\n+      break;\n+    case MEMMODEL_CONSUME:\n+    case MEMMODEL_ACQUIRE:\n+      model_idx = 1;\n+      break;\n+    case MEMMODEL_RELEASE:\n+      model_idx = 2;\n+      break;\n+    case MEMMODEL_ACQ_REL:\n+    case MEMMODEL_SEQ_CST:\n+      model_idx = 3;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return init_one_libfunc_visibility (names->str[mode_idx][model_idx],\n+\t\t\t\t      VISIBILITY_HIDDEN);\n+}\n+\n+#define DEF0(B, N) \\\n+  { \"__aarch64_\" #B #N \"_relax\", \\\n+    \"__aarch64_\" #B #N \"_acq\", \\\n+    \"__aarch64_\" #B #N \"_rel\", \\\n+    \"__aarch64_\" #B #N \"_acq_rel\" }\n+\n+#define DEF4(B)  DEF0(B, 1), DEF0(B, 2), DEF0(B, 4), DEF0(B, 8), \\\n+\t\t { NULL, NULL, NULL, NULL }\n+#define DEF5(B)  DEF0(B, 1), DEF0(B, 2), DEF0(B, 4), DEF0(B, 8), DEF0(B, 16)\n+\n+static const atomic_ool_names aarch64_ool_cas_names = { { DEF5(cas) } };\n+const atomic_ool_names aarch64_ool_swp_names = { { DEF4(swp) } };\n+const atomic_ool_names aarch64_ool_ldadd_names = { { DEF4(ldadd) } };\n+const atomic_ool_names aarch64_ool_ldset_names = { { DEF4(ldset) } };\n+const atomic_ool_names aarch64_ool_ldclr_names = { { DEF4(ldclr) } };\n+const atomic_ool_names aarch64_ool_ldeor_names = { { DEF4(ldeor) } };\n+\n+#undef DEF0\n+#undef DEF4\n+#undef DEF5\n+\n /* Expand a compare and swap pattern.  */\n \n void\n@@ -16913,6 +16989,17 @@ aarch64_expand_compare_and_swap (rtx operands[])\n \t\t\t\t\t\t   newval, mod_s));\n       cc_reg = aarch64_gen_compare_reg_maybe_ze (NE, rval, oldval, mode);\n     }\n+  else if (TARGET_OUTLINE_ATOMICS)\n+    {\n+      /* Oldval must satisfy compare afterward.  */\n+      if (!aarch64_plus_operand (oldval, mode))\n+\toldval = force_reg (mode, oldval);\n+      rtx func = aarch64_atomic_ool_func (mode, mod_s, &aarch64_ool_cas_names);\n+      rval = emit_library_call_value (func, NULL_RTX, LCT_NORMAL, r_mode,\n+\t\t\t\t      oldval, mode, newval, mode,\n+\t\t\t\t      XEXP (mem, 0), Pmode);\n+      cc_reg = aarch64_gen_compare_reg_maybe_ze (NE, rval, oldval, mode);\n+    }\n   else\n     {\n       /* The oldval predicate varies by mode.  Test it and force to reg.  */"}, {"sha": "865b6a6d8ca14a57386bc64edd32bc1556834c30", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -255,3 +255,6 @@ user-land code.\n TargetVariable\n long aarch64_stack_protector_guard_offset = 0\n \n+moutline-atomics\n+Target Report Mask(OUTLINE_ATOMICS) Save\n+Generate local calls to out-of-line atomic operations."}, {"sha": "2e59b8684201ee2fc6bb748ff5d4b030c04dd227", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 86, "deletions": 8, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -186,16 +186,27 @@\n   (match_operand:SI 3 \"const_int_operand\")]\n   \"\"\n   {\n-    rtx (*gen) (rtx, rtx, rtx, rtx);\n-\n     /* Use an atomic SWP when available.  */\n     if (TARGET_LSE)\n-      gen = gen_aarch64_atomic_exchange<mode>_lse;\n+      {\n+\temit_insn (gen_aarch64_atomic_exchange<mode>_lse\n+\t\t   (operands[0], operands[1], operands[2], operands[3]));\n+      }\n+    else if (TARGET_OUTLINE_ATOMICS)\n+      {\n+\tmachine_mode mode = <MODE>mode;\n+\trtx func = aarch64_atomic_ool_func (mode, operands[3],\n+\t\t\t\t\t    &aarch64_ool_swp_names);\n+\trtx rval = emit_library_call_value (func, operands[0], LCT_NORMAL,\n+\t\t\t\t\t    mode, operands[2], mode,\n+\t\t\t\t\t    XEXP (operands[1], 0), Pmode);\n+        emit_move_insn (operands[0], rval);\n+      }\n     else\n-      gen = gen_aarch64_atomic_exchange<mode>;\n-\n-    emit_insn (gen (operands[0], operands[1], operands[2], operands[3]));\n-\n+      {\n+\temit_insn (gen_aarch64_atomic_exchange<mode>\n+\t\t   (operands[0], operands[1], operands[2], operands[3]));\n+      }\n     DONE;\n   }\n )\n@@ -280,6 +291,39 @@\n \t  }\n \toperands[1] = force_reg (<MODE>mode, operands[1]);\n       }\n+    else if (TARGET_OUTLINE_ATOMICS)\n+      {\n+        const atomic_ool_names *names;\n+\tswitch (<CODE>)\n+\t  {\n+\t  case MINUS:\n+\t    operands[1] = expand_simple_unop (<MODE>mode, NEG, operands[1],\n+\t\t\t\t\t      NULL, 1);\n+\t    /* fallthru */\n+\t  case PLUS:\n+\t    names = &aarch64_ool_ldadd_names;\n+\t    break;\n+\t  case IOR:\n+\t    names = &aarch64_ool_ldset_names;\n+\t    break;\n+\t  case XOR:\n+\t    names = &aarch64_ool_ldeor_names;\n+\t    break;\n+\t  case AND:\n+\t    operands[1] = expand_simple_unop (<MODE>mode, NOT, operands[1],\n+\t\t\t\t\t      NULL, 1);\n+\t    names = &aarch64_ool_ldclr_names;\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+        machine_mode mode = <MODE>mode;\n+\trtx func = aarch64_atomic_ool_func (mode, operands[2], names);\n+\temit_library_call_value (func, NULL_RTX, LCT_NORMAL, mode,\n+\t\t\t\t operands[1], mode,\n+\t\t\t\t XEXP (operands[0], 0), Pmode);\n+        DONE;\n+      }\n     else\n       gen = gen_aarch64_atomic_<atomic_optab><mode>;\n \n@@ -405,6 +449,40 @@\n \t}\n       operands[2] = force_reg (<MODE>mode, operands[2]);\n     }\n+  else if (TARGET_OUTLINE_ATOMICS)\n+    {\n+      const atomic_ool_names *names;\n+      switch (<CODE>)\n+\t{\n+\tcase MINUS:\n+\t  operands[2] = expand_simple_unop (<MODE>mode, NEG, operands[2],\n+\t\t\t\t\t    NULL, 1);\n+\t  /* fallthru */\n+\tcase PLUS:\n+\t  names = &aarch64_ool_ldadd_names;\n+\t  break;\n+\tcase IOR:\n+\t  names = &aarch64_ool_ldset_names;\n+\t  break;\n+\tcase XOR:\n+\t  names = &aarch64_ool_ldeor_names;\n+\t  break;\n+\tcase AND:\n+\t  operands[2] = expand_simple_unop (<MODE>mode, NOT, operands[2],\n+\t\t\t\t\t    NULL, 1);\n+\t  names = &aarch64_ool_ldclr_names;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      machine_mode mode = <MODE>mode;\n+      rtx func = aarch64_atomic_ool_func (mode, operands[3], names);\n+      rtx rval = emit_library_call_value (func, operands[0], LCT_NORMAL, mode,\n+\t\t\t\t\t  operands[2], mode,\n+\t\t\t\t\t  XEXP (operands[1], 0), Pmode);\n+      emit_move_insn (operands[0], rval);\n+      DONE;\n+    }\n   else\n     gen = gen_aarch64_atomic_fetch_<atomic_optab><mode>;\n \n@@ -494,7 +572,7 @@\n {\n   /* Use an atomic load-operate instruction when possible.  In this case\n      we will re-compute the result from the original mem value. */\n-  if (TARGET_LSE)\n+  if (TARGET_LSE || TARGET_OUTLINE_ATOMICS)\n     {\n       rtx tmp = gen_reg_rtx (<MODE>mode);\n       operands[2] = force_reg (<MODE>mode, operands[2]);"}, {"sha": "6d67c121be027f555b948cd7a20a956095581117", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -643,7 +643,8 @@ Objective-C and Objective-C++ Dialects}.\n -march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}  @gol\n -moverride=@var{string}  -mverbose-cost-dump @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{sysreg} @gol\n--mstack-protector-guard-offset=@var{offset} -mtrack-speculation }\n+-mstack-protector-guard-offset=@var{offset} -mtrack-speculation @gol\n+-moutline-atomics }\n \n @emph{Adapteva Epiphany Options}\n @gccoptlist{-mhalf-reg-file  -mprefer-short-insn-regs @gol\n@@ -15874,6 +15875,19 @@ be used by the compiler when expanding calls to\n @code{__builtin_speculation_safe_copy} to permit a more efficient code\n sequence to be generated.\n \n+@item -moutline-atomics\n+@itemx -mno-outline-atomics\n+Enable or disable calls to out-of-line helpers to implement atomic operations.\n+These helpers will, at runtime, determine if the LSE instructions from\n+ARMv8.1-A can be used; if not, they will use the load/store-exclusive\n+instructions that are present in the base ARMv8.0 ISA.\n+\n+This option is only applicable when compiling for the base ARMv8.0\n+instruction set.  If using a later revision, e.g. @option{-march=armv8.1-a}\n+or @option{-march=armv8-a+lse}, the ARMv8.1-Atomics instructions will be\n+used directly.  The same applies when using @option{-mcpu=} when the\n+selected cpu supports the @samp{lse} feature.\n+\n @item -march=@var{name}\n @opindex march\n Specify the name of the target architecture and, optionally, one or"}, {"sha": "9d6d9830010aeccb0b1413aefd12e3492be47c9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,3 +1,23 @@\n+2019-09-19  Richard Henderson  <richard.henderson@linaro.org>\n+\n+\t* gcc.target/aarch64/atomic-op-acq_rel.c: Use -mno-outline-atomics.\n+\t* gcc.target/aarch64/atomic-comp-swap-release-acquire.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-acquire.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-char.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-consume.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-imm.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-int.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-long.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-relaxed.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-release.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-seq_cst.c: Likewise.\n+\t* gcc.target/aarch64/atomic-op-short.c: Likewise.\n+\t* gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: Likewise.\n+\t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: Likewise.\n+\t* gcc.target/aarch64/sync-comp-swap.c: Likewise.\n+\t* gcc.target/aarch64/sync-op-acquire.c: Likewise.\n+\t* gcc.target/aarch64/sync-op-full.c: Likewise.\n+\n 2019-09-19  Feng Xue  <fxue@os.amperecomputing.com>\n \n \t* gcc.dg/ipa/pr91089.c: Add a new function and pattern.\n@@ -7,7 +27,6 @@\n \tPR tree-optimization/91812\n \t* gcc.dg/torture/pr91812.c: New testcase.\n \n->>>>>>> .r275960\n 2019-09-19  Tom Tromey  <tromey@adacore.com>\n \n \t* gnat.dg/bias1.adb: New testcase."}, {"sha": "a828a72aa75af7bce6da76a2456296ea177dd865", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-comp-swap-release-acquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2 -fno-ipa-icf\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -fno-ipa-icf -mno-outline-atomics\" } */\n \n #include \"atomic-comp-swap-release-acquire.x\"\n "}, {"sha": "6823ce381b2c1b74d61fe98c04904884bb2d87ae", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-acq_rel.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-acq_rel.x\"\n "}, {"sha": "87937de378ab02f284a3378c2315ed70e43fa27f", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-acquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-acquire.x\"\n "}, {"sha": "60955e57da348642cbbf540d1f10e3cb4ebc177f", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-char.x\"\n "}, {"sha": "16cb11aeeaf43c903771278ae06c9382d8a1a74c", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-consume.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-consume.x\"\n "}, {"sha": "bcab4e481e3bc0762ea46a9513e3e4937ee18209", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-imm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n int v = 0;\n "}, {"sha": "040e4a8d1684b87de605276999603417da1371fc", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-int.x\"\n "}, {"sha": "fc88b92cd3ea22854ee47b9009c08dbcd255f273", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-long.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n long v = 0;\n "}, {"sha": "503d62b02809f9547b304606ab47581b8176e7a2", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-relaxed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-relaxed.x\"\n "}, {"sha": "efe14aea7e4b40daf13457582b066e9314206bf4", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-release.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-release.x\"\n "}, {"sha": "09973bf82ba0c6149d2fdf677bd915604dad3131", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-seq_cst.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-seq_cst.x\"\n "}, {"sha": "e1dcebb0f89643d108bfb54e6d7104e94585fe85", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-short.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"atomic-op-short.x\"\n "}, {"sha": "29246979bfba1a71a0464f345c2ca87793d69f02", "filename": "gcc/testsuite/gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=armv8-a+nolse\" } */\n+/* { dg-options \"-O2 -march=armv8-a+nolse -mno-outline-atomics\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" } { \"\" } } */\n \n int"}, {"sha": "6daf9b08f5ace91aa357b85ea9c6a51e7ca812f3", "filename": "gcc/testsuite/gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_strong_1.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=armv8-a+nolse\" } */\n+/* { dg-options \"-O2 -march=armv8-a+nolse -mno-outline-atomics\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" } { \"\" } } */\n \n int"}, {"sha": "f56415f3354be520c13113043c6b031ef0f8a257", "filename": "gcc/testsuite/gcc.target/aarch64/sync-comp-swap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-comp-swap.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2 -fno-ipa-icf\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -fno-ipa-icf -mno-outline-atomics\" } */\n \n #include \"sync-comp-swap.x\"\n "}, {"sha": "39b3144aa3691a5c8ffeeb86d90d1e4369ee9e33", "filename": "gcc/testsuite/gcc.target/aarch64/sync-op-acquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-acquire.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"sync-op-acquire.x\"\n "}, {"sha": "6b8b2043f40a1d7bfcbd1504af3e9b717481209b", "filename": "gcc/testsuite/gcc.target/aarch64/sync-op-full.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950b229a5ed6710f30241c2ddc3c74909bf4740/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsync-op-full.c?ref=3950b229a5ed6710f30241c2ddc3c74909bf4740", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv8-a+nolse -O2\" } */\n+/* { dg-options \"-march=armv8-a+nolse -O2 -mno-outline-atomics\" } */\n \n #include \"sync-op-full.x\"\n "}]}