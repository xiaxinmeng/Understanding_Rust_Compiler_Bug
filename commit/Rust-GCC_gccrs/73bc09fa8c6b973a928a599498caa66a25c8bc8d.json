{"sha": "73bc09fa8c6b973a928a599498caa66a25c8bc8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNiYzA5ZmE4YzZiOTczYTkyOGE1OTk0OThjYWE2NmEyNWM4YmM4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-19T09:15:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-19T09:18:01Z"}, "message": "middle-end/94216 fix another build_fold_addr_expr use\n\n2020-03-19  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/94216\n\t* fold-const.c (fold_binary_loc): Avoid using\n\tbuild_fold_addr_expr when we really want an ADDR_EXPR.\n\n\t* g++.dg/torture/pr94216.C: New testcase.", "tree": {"sha": "b05b87310a0bca42f13f0e8d6949193424a819d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05b87310a0bca42f13f0e8d6949193424a819d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73bc09fa8c6b973a928a599498caa66a25c8bc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bc09fa8c6b973a928a599498caa66a25c8bc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bc09fa8c6b973a928a599498caa66a25c8bc8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bc09fa8c6b973a928a599498caa66a25c8bc8d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5562f1187d47b0e8a20687a8d31d00c187aada9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5562f1187d47b0e8a20687a8d31d00c187aada9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5562f1187d47b0e8a20687a8d31d00c187aada9"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "f015a55a87000043d9ab8dd8dbb746829c05b7f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73bc09fa8c6b973a928a599498caa66a25c8bc8d", "patch": "@@ -1,3 +1,9 @@\n+2020-03-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94216\n+\t* fold-const.c (fold_binary_loc): Avoid using\n+\tbuild_fold_addr_expr when we really want an ADDR_EXPR.\n+\n 2020-03-18  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (wd, wf, wi, ws, ww): New undocumented"}, {"sha": "92679142f0472a46191e85b6fafed1c755a1b412", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=73bc09fa8c6b973a928a599498caa66a25c8bc8d", "patch": "@@ -10284,7 +10284,7 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t  if (!base)\n \t    return NULL_TREE;\n \t  return fold_build2 (MEM_REF, type,\n-\t\t\t      build_fold_addr_expr (base),\n+\t\t\t      build1 (ADDR_EXPR, TREE_TYPE (arg0), base),\n \t\t\t      int_const_binop (PLUS_EXPR, arg1,\n \t\t\t\t\t       size_int (coffset)));\n \t}"}, {"sha": "e828b7f9c9ae7c977c4d5c4d9c077e49056cbbe0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73bc09fa8c6b973a928a599498caa66a25c8bc8d", "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94216\n+\t* g++.dg/torture/pr94216.C: New testcase.\n+\n 2020-03-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR ipa/92799"}, {"sha": "e67239de98dc007d5dd77ac0c2e791a1852a0843", "filename": "gcc/testsuite/g++.dg/torture/pr94216.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94216.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bc09fa8c6b973a928a599498caa66a25c8bc8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94216.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94216.C?ref=73bc09fa8c6b973a928a599498caa66a25c8bc8d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-g\" }\n+\n+template <int _Nm> struct A { typedef int _Type[_Nm]; };\n+template <int _Nm> struct B {\n+    typename A<_Nm>::_Type _M_elems;\n+    void operator[](int) { int a = *_M_elems; }\n+};\n+class C {\n+    struct D {\n+\tusing type = int *;\n+    };\n+\n+public:\n+    using pointer = D::type;\n+};\n+class F {\n+public:\n+    using pointer = C::pointer;\n+    F(pointer);\n+};\n+struct G {\n+    int data;\n+};\n+template <int MaxDimensions> struct H {\n+    using dimensions_t = B<MaxDimensions>;\n+    dimensions_t dimensions;\n+    G mem;\n+};\n+template <int MaxDimensions, typename Allocator, typename DimT, typename AlignT>\n+H<MaxDimensions> alloc_view(int, DimT, AlignT, Allocator) {\n+    H<MaxDimensions> b;\n+    b.dimensions[0];\n+    return b;\n+}\n+namespace memory {\n+    template <typename> using DynMdView = H<6>;\n+}\n+class I {\n+    I();\n+    memory::DynMdView<void> m_view;\n+    F m_memory;\n+};\n+int c, d, e;\n+I::I() : m_view(alloc_view<6>(c, d, e, [] {})), m_memory(&m_view.mem.data) {}"}]}