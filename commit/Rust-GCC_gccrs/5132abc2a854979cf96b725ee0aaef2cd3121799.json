{"sha": "5132abc2a854979cf96b725ee0aaef2cd3121799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzMmFiYzJhODU0OTc5Y2Y5NmI3MjVlZTBhYWVmMmNkMzEyMTc5OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-25T21:46:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-25T21:46:18Z"}, "message": "cfgloopmanip.c (loopify): Take two more arguments true_edge and false_edge.\n\n\t* cfgloopmanip.c (loopify): Take two more arguments true_edge\n\tand false_edge.\n\t* cfgloop.h: Adjust the corresponding prototype.\n\t* loop-unswitch.c (unswitch_loop): Adjust a call to loopify.\n\t* tree-ssa-loop-manip.c (tree_ssa_loop_version): Likewise.\n\nFrom-SVN: r89555", "tree": {"sha": "bae5635c52da0ceca84728ad777ac4425db8d162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bae5635c52da0ceca84728ad777ac4425db8d162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5132abc2a854979cf96b725ee0aaef2cd3121799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5132abc2a854979cf96b725ee0aaef2cd3121799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5132abc2a854979cf96b725ee0aaef2cd3121799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5132abc2a854979cf96b725ee0aaef2cd3121799/comments", "author": null, "committer": null, "parents": [{"sha": "3401a17fcbee4b9524111a94ddd5208661ad39ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3401a17fcbee4b9524111a94ddd5208661ad39ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3401a17fcbee4b9524111a94ddd5208661ad39ce"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "86c001e2f39a363ff890f4502191b6c495999f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5132abc2a854979cf96b725ee0aaef2cd3121799", "patch": "@@ -1,3 +1,11 @@\n+2004-10-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfgloopmanip.c (loopify): Take two more arguments true_edge\n+\tand false_edge.\n+\t* cfgloop.h: Adjust the corresponding prototype.\n+\t* loop-unswitch.c (unswitch_loop): Adjust a call to loopify.\n+\t* tree-ssa-loop-manip.c (tree_ssa_loop_version): Likewise.\n+\n 2004-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (rtl_for_decl_location): Avoid segfault if"}, {"sha": "96d865f1af694d2a36ce72f9f5ba8aa7d0b13622", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=5132abc2a854979cf96b725ee0aaef2cd3121799", "patch": "@@ -339,7 +339,8 @@ extern struct loop * duplicate_loop (struct loops *, struct loop *,\n extern int duplicate_loop_to_header_edge (struct loop *, edge, struct loops *,\n \t\t\t\t\t  unsigned, sbitmap, edge, edge *,\n \t\t\t\t\t  unsigned *, int);\n-extern struct loop *loopify (struct loops *, edge, edge, basic_block, bool);\n+extern struct loop *loopify (struct loops *, edge, edge,\n+\t\t\t     basic_block, edge, edge, bool);\n extern void unloop (struct loops *, struct loop *);\n extern bool remove_path (struct loops *, edge);\n extern edge split_loop_bb (basic_block, void *);"}, {"sha": "f3e8f183373a0d5c723dc44633487da480e3bf31", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=5132abc2a854979cf96b725ee0aaef2cd3121799", "patch": "@@ -482,13 +482,14 @@ scale_loop_frequencies (struct loop *loop, int num, int den)\n    accordingly. Everything between them plus LATCH_EDGE destination must\n    be dominated by HEADER_EDGE destination, and back-reachable from\n    LATCH_EDGE source.  HEADER_EDGE is redirected to basic block SWITCH_BB,\n-   FALLTHRU_EDGE (SWITCH_BB) to original destination of HEADER_EDGE and\n-   BRANCH_EDGE (SWITCH_BB) to original destination of LATCH_EDGE.\n+   FALSE_EDGE of SWITCH_BB to original destination of HEADER_EDGE and\n+   TRUE_EDGE of SWITCH_BB to original destination of LATCH_EDGE.\n    Returns newly created loop.  */\n \n struct loop *\n loopify (struct loops *loops, edge latch_edge, edge header_edge, \n-\t basic_block switch_bb, bool redirect_all_edges)\n+\t basic_block switch_bb, edge true_edge, edge false_edge,\n+\t bool redirect_all_edges)\n {\n   basic_block succ_bb = latch_edge->dest;\n   basic_block pred_bb = header_edge->src;\n@@ -514,14 +515,14 @@ loopify (struct loops *loops, edge latch_edge, edge header_edge,\n \n   /* Redirect edges.  */\n   loop_redirect_edge (latch_edge, loop->header);\n-  loop_redirect_edge (BRANCH_EDGE (switch_bb), succ_bb);\n+  loop_redirect_edge (true_edge, succ_bb);\n \n   /* During loop versioning, one of the switch_bb edge is already properly\n      set. Do not redirect it again unless redirect_all_edges is true.  */\n   if (redirect_all_edges)\n     {\n       loop_redirect_edge (header_edge, switch_bb);\n-      loop_redirect_edge (FALLTHRU_EDGE (switch_bb), loop->header); \n+      loop_redirect_edge (false_edge, loop->header); \n      \n       /* Update dominators.  */\n       set_immediate_dominator (CDI_DOMINATORS, switch_bb, pred_bb);"}, {"sha": "d1d49b2a38f6455fe2b6f73df39cde5adf4cec3e", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=5132abc2a854979cf96b725ee0aaef2cd3121799", "patch": "@@ -474,7 +474,8 @@ unswitch_loop (struct loops *loops, struct loop *loop, basic_block unswitch_on,\n \n   /* Loopify from the copy of LOOP body, constructing the new loop.  */\n   nloop = loopify (loops, latch_edge,\n-\t\t   EDGE_PRED (loop->header->rbi->copy, 0), switch_bb, true);\n+\t\t   EDGE_PRED (loop->header->rbi->copy, 0), switch_bb,\n+\t\t   BRANCH_EDGE (switch_bb), FALLTHRU_EDGE (switch_bb), true);\n \n   /* Remove branches that are now unreachable in new loops.  */\n   remove_path (loops, true_edge);"}, {"sha": "dc4b1747ade7a83aa4d514a9ce60b0a5f52d5358", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5132abc2a854979cf96b725ee0aaef2cd3121799/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=5132abc2a854979cf96b725ee0aaef2cd3121799", "patch": "@@ -785,7 +785,7 @@ struct loop *\n tree_ssa_loop_version (struct loops *loops, struct loop * loop, \n \t\t       tree cond_expr, basic_block *condition_bb)\n {\n-  edge entry, latch_edge, exit;\n+  edge entry, latch_edge, exit, true_edge, false_edge;\n   basic_block first_head, second_head;\n   int irred_flag;\n   struct loop *nloop;\n@@ -819,10 +819,12 @@ tree_ssa_loop_version (struct loops *loops, struct loop * loop,\n \t\t\t\t\t    cond_expr); \n \n   latch_edge = EDGE_SUCC (loop->latch->rbi->copy, 0);\n+  \n+  extract_true_false_edges_from_block (*condition_bb, &true_edge, &false_edge);\n   nloop = loopify (loops, \n \t\t   latch_edge,\n \t\t   EDGE_PRED (loop->header->rbi->copy, 0),\n-\t\t   *condition_bb,\n+\t\t   *condition_bb, true_edge, false_edge,\n \t\t   false /* Do not redirect all edges.  */);\n \n   exit = loop->single_exit;\n@@ -833,7 +835,8 @@ tree_ssa_loop_version (struct loops *loops, struct loop * loop,\n   lv_update_pending_stmts (latch_edge);\n \n   /* loopify redirected condition_bb's succ edge. Update its PENDING_STMTS.  */ \n-  lv_update_pending_stmts (FALLTHRU_EDGE (*condition_bb));\n+  extract_true_false_edges_from_block (*condition_bb, &true_edge, &false_edge);\n+  lv_update_pending_stmts (false_edge);\n \n   /* Adjust irreducible flag.  */\n   if (irred_flag)"}]}