{"sha": "8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1ZDUxM2YxNzg0ODJiYThiYzY1NWQyYjVmNDJhYzFiZjcwMzZhNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "2000-03-14T18:28:45Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "2000-03-14T18:28:45Z"}, "message": "Some cleanups/additions for hashtables\n\nFrom-SVN: r32536", "tree": {"sha": "60489c4e417b408a51b10fe79aaf66b0b4796d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60489c4e417b408a51b10fe79aaf66b0b4796d7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/comments", "author": null, "committer": null, "parents": [{"sha": "3ac63d94884330d66adb4448f557bf06460b4293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac63d94884330d66adb4448f557bf06460b4293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac63d94884330d66adb4448f557bf06460b4293"}], "stats": {"total": 102, "additions": 90, "deletions": 12}, "files": [{"sha": "e36ba7070a36675882298b466ba0e3282b3ad286", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "patch": "@@ -1,3 +1,10 @@\n+2000-03-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* hashtab.h (htab_trav): Modify type so that first arg is of type\n+\tvoid **.\n+\t(htab_find_with_hash, htab_find_slot_with_hash): Declare new\n+\tfunctions.\n+\n 2000-03-09  Alex Samuel  <samuel@codesourcery.com>\n \n \t* partition.h: New file."}, {"sha": "5fe239391ffb284f3d4efc966799bd834b5f87c3", "filename": "include/hashtab.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "patch": "@@ -44,17 +44,21 @@ extern \"C\" {\n typedef unsigned int (*htab_hash) PARAMS ((const void *));\n \n /* Compare a table entry with a possible entry.  The entry already in\n-   the table always comes first.  */\n+   the table always comes first, so the second element can be of a\n+   different type (but in this case htab_find and htab_find_slot\n+   cannot be used; instead the variants that accept a hash value\n+   must be used).  */\n typedef int (*htab_eq) PARAMS ((const void *, const void *));\n \n /* Cleanup function called whenever a live element is removed from\n    the hash table.  */\n typedef void (*htab_del) PARAMS ((void *));\n   \n /* Function called by htab_traverse for each live element.  The first\n-   arg is the element, the second arg is the auxiliary pointer handed\n-   to htab_traverse.  Return 1 to continue scan, 0 to stop.  */\n-typedef int (*htab_trav) PARAMS ((void *, void *));\n+   arg is the slot of the element (which can be passed to htab_clear_slot\n+   if desired), the second arg is the auxiliary pointer handed to\n+   htab_traverse.  Return 1 to continue scan, 0 to stop.  */\n+typedef int (*htab_trav) PARAMS ((void **, void *));\n \n /* Hash tables are of the following type.  The structure\n    (implementation) of this type is not needed for using the hash\n@@ -104,6 +108,10 @@ extern void\thtab_empty\tPARAMS ((htab_t));\n \n extern void    *htab_find\tPARAMS ((htab_t, const void *));\n extern void   **htab_find_slot\tPARAMS ((htab_t, const void *, int));\n+extern void    *htab_find_with_hash\t\tPARAMS ((htab_t, const void *,\n+\t\t\t\t\t\t\t unsigned int));\n+extern void   **htab_find_slot_with_hash\tPARAMS ((htab_t, const void *,\n+\t\t\t\t\t\t\t unsigned int, int));\n extern void\thtab_clear_slot\tPARAMS ((htab_t, void **));\n extern void\thtab_remove_elt\tPARAMS ((htab_t, void *));\n "}, {"sha": "7557f62ef27a484fbe43d0d0e32300cc1438318a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "patch": "@@ -1,3 +1,14 @@\n+2000-03-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* hashtab.c (find_empty_slot_for_expand): New function.\n+\t(htab_expand): Use it instead of htab_find_slot.\n+\t(htab_find_with_hash): Renamed from htab_find; now accepts extra\n+\targument HASH.\n+\t(htab_find_slot_with_hash): Likewise for htab_find_slot.\n+\t(htab_find): New wrapper function.\n+\t(htab_find_slot): Likewise.\n+\t(htab_traverse): Pass slot, not entry, to called function.\n+\n 2000-03-09  Alex Samuel  <samuel@codesourcery.com>\n \n \t* Makefile.in (CFILES): Add partition.c."}, {"sha": "16c5d3e4b12eb08569ad745f20cfaba701db8ba3", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5d513f178482ba8bc655d2b5f42ac1bf7036a4/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=8c5d513f178482ba8bc655d2b5f42ac1bf7036a4", "patch": "@@ -144,6 +144,36 @@ htab_empty (htab)\n   memset (htab->entries, 0, htab->size * sizeof (void *));\n }\n \n+/* Similar to htab_find_slot, but without several unwanted side effects:\n+    - Does not call htab->eq_f when it finds an existing entry.\n+    - Does not change the count of elements/searches/collisions in the\n+      hash table.\n+   This function also assumes there are no deleted entries in the table.\n+   HASH is the hash value for the element to be inserted.  */\n+static void **\n+find_empty_slot_for_expand (htab, hash)\n+     htab_t htab;\n+     unsigned int hash;\n+{\n+  size_t size = htab->size;\n+  unsigned int hash2 = 1 + hash % (size - 2);\n+  unsigned int index = hash % size;\n+\n+  for (;;)\n+    {\n+      void **slot = htab->entries + index;\n+      if (*slot == EMPTY_ENTRY)\n+\treturn slot;\n+\n+      if (*slot == DELETED_ENTRY)\n+\tabort ();\n+\n+      index += hash2;\n+      if (index >= size)\n+\tindex -= size;\n+    }\n+}\n+\n /* The following function changes size of memory allocated for the\n    entries and repeatedly inserts the table elements.  The occupancy\n    of the table after the call will be about 50%.  Naturally the hash\n@@ -173,7 +203,7 @@ htab_expand (htab)\n       void *x = *p;\n       if (x != EMPTY_ENTRY && x != DELETED_ENTRY)\n \t{\n-\t  void **q = htab_find_slot (htab, x, 1);\n+\t  void **q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));\n \t  *q = x;\n \t}\n       p++;\n@@ -186,16 +216,16 @@ htab_expand (htab)\n    element.  It cannot be used to insert or delete an element.  */\n \n void *\n-htab_find (htab, element)\n+htab_find_with_hash (htab, element, hash)\n      htab_t htab;\n      const void *element;\n+     unsigned int hash;\n {\n-  unsigned int index, hash, hash2;\n+  unsigned int index, hash2;\n   size_t size;\n \n   htab->searches++;\n   size = htab->size;\n-  hash = (*htab->hash_f) (element);\n   hash2 = 1 + hash % (size - 2);\n   index = hash % size;\n \n@@ -214,27 +244,37 @@ htab_find (htab, element)\n     }\n }\n \n+/* Like htab_find_slot_with_hash, but compute the hash value from the\n+   element.  */\n+void *\n+htab_find (htab, element)\n+     htab_t htab;\n+     const void *element;\n+{\n+  return htab_find_with_hash (htab, element, (*htab->hash_f) (element));\n+}\n+\n /* This function searches for a hash table slot containing an entry\n    equal to the given element.  To delete an entry, call this with\n    INSERT = 0, then call htab_clear_slot on the slot returned (possibly\n    after doing some checks).  To insert an entry, call this with\n    INSERT = 1, then write the value you want into the returned slot.  */\n \n void **\n-htab_find_slot (htab, element, insert)\n+htab_find_slot_with_hash (htab, element, hash, insert)\n      htab_t htab;\n      const void *element;\n+     unsigned int hash;\n      int insert;\n {\n   void **first_deleted_slot;\n-  unsigned int index, hash, hash2;\n+  unsigned int index, hash2;\n   size_t size;\n \n   if (insert && htab->size * 3 <= htab->n_elements * 4)\n     htab_expand (htab);\n \n   size = htab->size;\n-  hash = (*htab->hash_f) (element);\n   hash2 = 1 + hash % (size - 2);\n   index = hash % size;\n \n@@ -278,6 +318,18 @@ htab_find_slot (htab, element, insert)\n     }\n }\n \n+/* Like htab_find_slot_with_hash, but compute the hash value from the\n+   element.  */\n+void **\n+htab_find_slot (htab, element, insert)\n+     htab_t htab;\n+     const void *element;\n+     int insert;\n+{\n+  return htab_find_slot_with_hash (htab, element, (*htab->hash_f) (element),\n+\t\t\t\t   insert);\n+}\n+\n /* This function deletes an element with the given value from hash\n    table.  If there is no matching element in the hash table, this\n    function does nothing.  */\n@@ -336,7 +388,7 @@ htab_traverse (htab, callback, info)\n     {\n       void *x = *slot;\n       if (x != EMPTY_ENTRY && x != DELETED_ENTRY)\n-\tif (!(*callback) (x, info))\n+\tif (!(*callback) (slot, info))\n \t  break;\n     }\n   while (++slot < limit);"}]}