{"sha": "aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyMTU5NTljNWY2YzZlYzJlODc3ZDk3NmYzMDVlYjhjOWUwOGYyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-14T11:01:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-14T11:01:17Z"}, "message": "re PR tree-optimization/83198 (ICE in format_floating, at gimple-ssa-sprintf.c:1900)\n\n\tPR tree-optimization/83198\n\t* gimple-ssa-sprintf.c (format_floating): Set type solely based on\n\tdir.modifier, regardless of TREE_TYPE (arg).  Assume non-REAL_CST\n\tvalue if arg is a REAL_CST with incompatible type.\n\n\t* gcc.dg/pr83198.c: New test.\n\t* gcc.dg/tree-ssa/pr83198.c: New test.\n\nFrom-SVN: r255626", "tree": {"sha": "43598faf2cd837cd2eac5bdcc2a1bd2d9092b792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43598faf2cd837cd2eac5bdcc2a1bd2d9092b792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8332c5ee8c5f3bf91eb97666793e9589f2578a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332c5ee8c5f3bf91eb97666793e9589f2578a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8332c5ee8c5f3bf91eb97666793e9589f2578a05"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "f4b61eb6b1c9fab09bf7d2bf1f1cdddd538addc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83198\n+\t* gimple-ssa-sprintf.c (format_floating): Set type solely based on\n+\tdir.modifier, regardless of TREE_TYPE (arg).  Assume non-REAL_CST\n+\tvalue if arg is a REAL_CST with incompatible type.\n+\n 2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n \t    Bin Cheng  <bin.cheng@arm.com>\n "}, {"sha": "75935bef5e8e0bd76355b5fa4bf8712c5c48bfa3", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "patch": "@@ -1885,17 +1885,15 @@ static fmtresult\n format_floating (const directive &dir, tree arg)\n {\n   HOST_WIDE_INT prec[] = { dir.prec[0], dir.prec[1] };\n+  tree type = (dir.modifier == FMT_LEN_L || dir.modifier == FMT_LEN_ll\n+\t       ? long_double_type_node : double_type_node);\n \n   /* For an indeterminate precision the lower bound must be assumed\n      to be zero.  */\n   if (TOUPPER (dir.specifier) == 'A')\n     {\n       /* Get the number of fractional decimal digits needed to represent\n \t the argument without a loss of accuracy.  */\n-      tree type = arg ? TREE_TYPE (arg) :\n-\t(dir.modifier == FMT_LEN_L || dir.modifier == FMT_LEN_ll\n-\t ? long_double_type_node : double_type_node);\n-\n       unsigned fmtprec\n \t= REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n \n@@ -1946,7 +1944,9 @@ format_floating (const directive &dir, tree arg)\n \t}\n     }\n \n-  if (!arg || TREE_CODE (arg) != REAL_CST)\n+  if (!arg\n+      || TREE_CODE (arg) != REAL_CST\n+      || !useless_type_conversion_p (type, TREE_TYPE (arg)))\n     return format_floating (dir, prec);\n \n   /* The minimum and maximum number of bytes produced by the directive.  */"}, {"sha": "939e4a9a149a6ec81cf8f498975bedbd95896f67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "patch": "@@ -1,3 +1,9 @@\n+2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83198\n+\t* gcc.dg/pr83198.c: New test.\n+\t* gcc.dg/tree-ssa/pr83198.c: New test.\n+\n 2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n \n \tPR target/81228"}, {"sha": "856f2be07d5e989f41c978f44c2c3fdc0b48a6c8", "filename": "gcc/testsuite/gcc.dg/pr83198.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83198.c?ref=aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/83198 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wno-format\" } */\n+\n+int\n+foo (char *d[6], int x)\n+{\n+  int r = 0;\n+  r += __builtin_sprintf (d[0], \"%f\", x);\n+  r += __builtin_sprintf (d[1], \"%a\", x);\n+  r += __builtin_sprintf (d[2], \"%f\", \"foo\");\n+  r += __builtin_sprintf (d[3], \"%a\", \"bar\");\n+#ifdef __SIZEOF_FLOAT128__\n+  r += __builtin_sprintf (d[4], \"%a\", 1.0Q);\n+  r += __builtin_sprintf (d[5], \"%Lf\", 1.0Q);\n+#endif\n+  return r;\n+}"}, {"sha": "f9dba2acc68cd74d1b89aff1fc5492c6b622104f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83198.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa215959c5f6c6ec2e877d976f305eb8c9e08f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83198.c?ref=aa215959c5f6c6ec2e877d976f305eb8c9e08f2c", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/83198 */\n+/* { dg-do compile { target __float128 } } */\n+/* { dg-options \"-O2 -fprintf-return-value -Wno-format -fdump-tree-optimized\" } */\n+/* { dg-add-options __float128 } */\n+\n+void bar (void);\n+void link_error (void);\n+\n+void\n+foo (char *x)\n+{\n+  int a = __builtin_sprintf (x, \"%f\", 1.0Q);\n+  if (a < 8)\n+    link_error ();\n+  if (a > 13)\n+    bar ();\n+  if (a > 322)\n+    link_error ();\n+}\n+\n+/* Verify we don't optimize return value to [8, 13].  */\n+/* { dg-final { scan-tree-dump-not \"link_error \\\\(\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"bar \\\\(\\\\);\" \"optimized\" } } */"}]}