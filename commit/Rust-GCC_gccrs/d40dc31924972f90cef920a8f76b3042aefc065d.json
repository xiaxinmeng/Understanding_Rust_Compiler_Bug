{"sha": "d40dc31924972f90cef920a8f76b3042aefc065d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwZGMzMTkyNDk3MmY5MGNlZjkyMGE4Zjc2YjMwNDJhZWZjMDY1ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-17T09:27:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:16Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #5\n\ngcc/ada/\n\n\t* raise-gcc.c (__gnat_others_value): Remove const qualifier.\n\t(__gnat_all_others_value): Likewise.\n\t(__gnat_unhandled_others_value): Likewise.\n\t(GNAT_OTHERS): Cast to Exception_Id instead of _Unwind_Ptr.\n\t(GNAT_ALL_OTHERS): Likewise.\n\t(GNAT_UNHANDLED_OTHERS): Likewise.\n\t(Is_Handled_By_Others): Change parameter type to Exception_Id.\n\t(Language_For): Likewise.\n\t(Foreign_Data_For): Likewise.\n\t(is_handled_by): Likewise.  Adjust throughout, remove redundant\n\tline and fix indentation.\n\t* libgnat/a-exexpr.adb (Is_Handled_By_Others): Remove pragma and\n\tuseless qualification from parameter type.\n\t(Foreign_Data_For): Likewise.\n\t(Language_For): Likewise.", "tree": {"sha": "beee94959a474e5a30bcfd7be062f95634c4828b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beee94959a474e5a30bcfd7be062f95634c4828b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40dc31924972f90cef920a8f76b3042aefc065d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40dc31924972f90cef920a8f76b3042aefc065d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40dc31924972f90cef920a8f76b3042aefc065d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40dc31924972f90cef920a8f76b3042aefc065d/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ab01f64a7db48239e41eea6740892cb3167dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab01f64a7db48239e41eea6740892cb3167dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ab01f64a7db48239e41eea6740892cb3167dfd"}], "stats": {"total": 67, "additions": 30, "deletions": 37}, "files": [{"sha": "ff85bc550d6125e0708eb478505419956e0d8543", "filename": "gcc/ada/libgnat/a-exexpr.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40dc31924972f90cef920a8f76b3042aefc065d/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40dc31924972f90cef920a8f76b3042aefc065d/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb?ref=d40dc31924972f90cef920a8f76b3042aefc065d", "patch": "@@ -282,7 +282,6 @@ package body Exception_Propagation is\n \n    function Is_Handled_By_Others (E : Exception_Data_Ptr) return bool;\n    pragma Export (C, Is_Handled_By_Others, \"__gnat_is_handled_by_others\");\n-   pragma Warnings (Off, Is_Handled_By_Others);\n \n    function Language_For (E : Exception_Data_Ptr) return Character;\n    pragma Export (C, Language_For, \"__gnat_language_for\");\n@@ -688,7 +687,7 @@ package body Exception_Propagation is\n    -- Foreign_Data_For --\n    ----------------------\n \n-   function Foreign_Data_For (E : SSL.Exception_Data_Ptr) return Address is\n+   function Foreign_Data_For (E : Exception_Data_Ptr) return Address is\n    begin\n       return E.Foreign_Data;\n    end Foreign_Data_For;\n@@ -697,7 +696,7 @@ package body Exception_Propagation is\n    -- Is_Handled_By_Others --\n    --------------------------\n \n-   function Is_Handled_By_Others (E : SSL.Exception_Data_Ptr) return bool is\n+   function Is_Handled_By_Others (E : Exception_Data_Ptr) return bool is\n    begin\n       return not bool (E.all.Not_Handled_By_Others);\n    end Is_Handled_By_Others;\n@@ -706,7 +705,7 @@ package body Exception_Propagation is\n    -- Language_For --\n    ------------------\n \n-   function Language_For (E : SSL.Exception_Data_Ptr) return Character is\n+   function Language_For (E : Exception_Data_Ptr) return Character is\n    begin\n       return E.all.Lang;\n    end Language_For;"}, {"sha": "bbedee50960242e41d0af0592c7d332242e47b17", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40dc31924972f90cef920a8f76b3042aefc065d/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40dc31924972f90cef920a8f76b3042aefc065d/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=d40dc31924972f90cef920a8f76b3042aefc065d", "patch": "@@ -545,14 +545,14 @@ typedef struct\n /* The three constants below are specific ttype identifiers for special\n    exception ids.  Their type should match what a-exexpr exports.  */\n \n-extern const char __gnat_others_value;\n-#define GNAT_OTHERS ((_Unwind_Ptr) &__gnat_others_value)\n+extern char __gnat_others_value;\n+#define GNAT_OTHERS ((Exception_Id) &__gnat_others_value)\n \n-extern const char __gnat_all_others_value;\n-#define GNAT_ALL_OTHERS ((_Unwind_Ptr) &__gnat_all_others_value)\n+extern char __gnat_all_others_value;\n+#define GNAT_ALL_OTHERS ((Exception_Id) &__gnat_all_others_value)\n \n-extern const char __gnat_unhandled_others_value;\n-#define GNAT_UNHANDLED_OTHERS ((_Unwind_Ptr) &__gnat_unhandled_others_value)\n+extern char __gnat_unhandled_others_value;\n+#define GNAT_UNHANDLED_OTHERS ((Exception_Id) &__gnat_unhandled_others_value)\n \n /* Describe the useful region data associated with an unwind context.  */\n \n@@ -902,12 +902,10 @@ get_call_site_action_for (_Unwind_Ptr ip,\n #define Foreign_Data_For      __gnat_foreign_data_for\n #define EID_For               __gnat_eid_for\n \n-extern bool Is_Handled_By_Others (_Unwind_Ptr eid);\n-extern char Language_For (_Unwind_Ptr eid);\n-\n-extern void *Foreign_Data_For (_Unwind_Ptr eid);\n-\n-extern Exception_Id EID_For (_GNAT_Exception * e);\n+extern bool Is_Handled_By_Others (Exception_Id eid);\n+extern char Language_For         (Exception_Id eid);\n+extern void *Foreign_Data_For    (Exception_Id eid);\n+extern Exception_Id EID_For      (_GNAT_Exception *e);\n \n #define Foreign_Exception system__exceptions__foreign_exception\n extern struct Exception_Data Foreign_Exception;\n@@ -928,7 +926,7 @@ exception_class_eq (const _GNAT_Exception *except,\n /* Return how CHOICE matches PROPAGATED_EXCEPTION.  */\n \n static enum action_kind\n-is_handled_by (_Unwind_Ptr choice, _GNAT_Exception *propagated_exception)\n+is_handled_by (Exception_Id choice, _GNAT_Exception *propagated_exception)\n {\n   /* All others choice match everything.  */\n   if (choice == GNAT_ALL_OTHERS)\n@@ -937,14 +935,10 @@ is_handled_by (_Unwind_Ptr choice, _GNAT_Exception *propagated_exception)\n   /* GNAT exception occurrence.  */\n   if (exception_class_eq (propagated_exception, GNAT_EXCEPTION_CLASS))\n     {\n-      /* Pointer to the GNAT exception data corresponding to the propagated\n-         occurrence.  */\n-      _Unwind_Ptr E = (_Unwind_Ptr) EID_For (propagated_exception);\n-\n       if (choice == GNAT_UNHANDLED_OTHERS)\n \treturn unhandler;\n \n-      E = (_Unwind_Ptr) EID_For (propagated_exception);\n+      Exception_Id E = EID_For (propagated_exception);\n \n       /* Base matching rules: An exception data (id) matches itself, \"when\n          all_others\" matches anything and \"when others\" matches anything\n@@ -960,7 +954,7 @@ is_handled_by (_Unwind_Ptr choice, _GNAT_Exception *propagated_exception)\n   if (choice == GNAT_ALL_OTHERS\n       || choice == GNAT_OTHERS\n #ifndef CERT\n-      || choice == (_Unwind_Ptr) &Foreign_Exception\n+      || choice == &Foreign_Exception\n #endif\n       )\n     return handler;\n@@ -1057,25 +1051,25 @@ get_action_description_for (_Unwind_Ptr ip,\n \t  /* Positive filters are for regular handlers.  */\n \t  else if (ar_filter > 0)\n \t    {\n-              /* Do not catch an exception if the _UA_FORCE_UNWIND flag is\n-                 passed (to follow the ABI).  */\n-              if (!(uw_phase & _UA_FORCE_UNWIND))\n-                {\n+\t      /* Do not catch an exception if the _UA_FORCE_UNWIND flag is\n+\t\t passed (to follow the ABI).  */\n+\t      if (!(uw_phase & _UA_FORCE_UNWIND))\n+\t\t{\n \t\t  enum action_kind act;\n \n-                  /* See if the filter we have is for an exception which\n-                     matches the one we are propagating.  */\n-                  _Unwind_Ptr choice =\n-\t\t    get_ttype_entry_for (region, ar_filter);\n+\t\t  /* See if the filter we have is for an exception which\n+\t\t     matches the one we are propagating.  */\n+\t\t  Exception_Id choice\n+\t\t    = (Exception_Id) get_ttype_entry_for (region, ar_filter);\n \n \t\t  act = is_handled_by (choice, gnat_exception);\n-                  if (act != nothing)\n-                    {\n+\t\t  if (act != nothing)\n+\t\t    {\n \t\t      action->kind = act;\n-                      action->ttype_filter = ar_filter;\n-                      return;\n-                    }\n-                }\n+\t\t      action->ttype_filter = ar_filter;\n+\t\t      return;\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  /* Negative filter values are for C++ exception specifications."}]}