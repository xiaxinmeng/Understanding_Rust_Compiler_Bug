{"sha": "7f327e8765c25552a1a6ae7d8747f74786f243dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzMjdlODc2NWMyNTU1MmExYTZhZTdkODc0N2Y3NDc4NmYyNDNkZA==", "commit": {"author": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-02-11T08:01:08Z"}, "committer": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-03-04T01:08:37Z"}, "message": "coroutines: Handle component_ref in captures_temporary\n\ngcc/cp\n        * coroutines.cc (captures_temporary): Strip component_ref\n        to its base object.\n\ngcc/testsuite\n        * g++.dg/coroutines/torture/co-await-15-capture-comp-ref.C: New test.", "tree": {"sha": "ab2c915a426775274fcd03f91a690721d686fdb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2c915a426775274fcd03f91a690721d686fdb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f327e8765c25552a1a6ae7d8747f74786f243dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f327e8765c25552a1a6ae7d8747f74786f243dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f327e8765c25552a1a6ae7d8747f74786f243dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f327e8765c25552a1a6ae7d8747f74786f243dd/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46da87b9d35f709dea8d569cdb9a23dec8a4c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46da87b9d35f709dea8d569cdb9a23dec8a4c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46da87b9d35f709dea8d569cdb9a23dec8a4c04"}], "stats": {"total": 128, "additions": 123, "deletions": 5}, "files": [{"sha": "7c22aeaaedc75a3d9dcf63e0636fe6b566875589", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f327e8765c25552a1a6ae7d8747f74786f243dd", "patch": "@@ -7,6 +7,11 @@\n \n 2020-03-03  Jun Ma  <JunMa@linux.alibaba.com>\n \n+\t* coroutines.cc (captures_temporary): Strip component_ref\n+\tto its base object.\n+\n+2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n+\n \t* coroutines.cc (finish_co_await_expr): Build co_await_expr\n \twith unknown_type_node.\n \t(finish_co_yield_expr): Ditto."}, {"sha": "bca4f1eeeae31bcb8ce819cc3012ce2a37d0c847", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=7f327e8765c25552a1a6ae7d8747f74786f243dd", "patch": "@@ -2613,12 +2613,22 @@ captures_temporary (tree *stmt, int *do_subtree, void *d)\n \tcontinue;\n \n       parm = TREE_OPERAND (parm, 0);\n-      if (TREE_CODE (parm) == VAR_DECL && !DECL_ARTIFICIAL (parm))\n-\t/* This isn't a temporary... */\n-\tcontinue;\n \n-      if (TREE_CODE (parm) == PARM_DECL)\n-\t/* .. nor is this... */\n+      /* In case of component_ref, we need to capture the object of base\n+\t class as if it is temporary object.  There are two possibilities:\n+\t (*base).field and base->field.  */\n+      while (TREE_CODE (parm) == COMPONENT_REF)\n+\t{\n+\t  parm = TREE_OPERAND (parm, 0);\n+\t  if (TREE_CODE (parm) == INDIRECT_REF)\n+\t    parm = TREE_OPERAND (parm, 0);\n+\t  parm = STRIP_NOPS (parm);\n+\t}\n+\n+      /* This isn't a temporary.  */\n+      if ((TREE_CODE (parm) == VAR_DECL && !DECL_ARTIFICIAL (parm))\n+\t  || TREE_CODE (parm) == PARM_DECL\n+\t  || TREE_CODE (parm) == NON_LVALUE_EXPR)\n \tcontinue;\n \n       if (TREE_CODE (parm) == TARGET_EXPR)"}, {"sha": "fdc7768f93ecf1c61b38c8a459452453592e1aed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f327e8765c25552a1a6ae7d8747f74786f243dd", "patch": "@@ -29,6 +29,10 @@\n \t* gcc.c-torture/compile/pr93927-1.c: New test.\n \t* gcc.c-torture/compile/pr93927-2.c: New test.\n \n+2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/torture/co-await-15-capture-comp-ref.C: New test.\n+\n 2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n \n \t* g++.dg/coroutines/torture/co-await-14-template-traits.C: New test."}, {"sha": "93a43fbd2987e1a798cbd3689c66bc7e665165a4", "filename": "gcc/testsuite/g++.dg/coroutines/torture/co-await-15-capture-comp-ref.C", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-capture-comp-ref.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f327e8765c25552a1a6ae7d8747f74786f243dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-capture-comp-ref.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-capture-comp-ref.C?ref=7f327e8765c25552a1a6ae7d8747f74786f243dd", "patch": "@@ -0,0 +1,99 @@\n+//  { dg-do run }\n+\n+#include \"../coro.h\"\n+\n+class resumable {\n+public:\n+  struct promise_type;\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  resumable(coro_handle handle) : handle_(handle) { }\n+  resumable(resumable&) = delete;\n+  resumable(resumable&&) = delete;\n+  ~resumable() { handle_.destroy(); }\n+  coro_handle handle_;\n+};\n+\n+struct resumable::promise_type {\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  int used;\n+  auto get_return_object() {\n+    return coro_handle::from_promise(*this);\n+  }\n+  auto initial_suspend() { return std::suspend_never(); }\n+  auto final_suspend() { return std::suspend_always(); }\n+  void return_value(int x) {used = x;}\n+  void unhandled_exception() {}\n+\n+  struct TestAwaiter {\n+    int recent_test;\n+    TestAwaiter(int test) : recent_test{test} {}\n+    bool await_ready() { return false; }\n+    void await_suspend(std::coroutine_handle<promise_type>) {}\n+    int await_resume() {\n+      return recent_test;\n+    }\n+    auto operator co_await() {\n+      return *this;\n+    }\n+  };\n+\n+  struct TestAwaiterCH :TestAwaiter { \n+    TestAwaiterCH(int test) : TestAwaiter(test) {};\n+  };\n+\n+  struct TestAwaiterCHCH :TestAwaiterCH {\n+    TestAwaiterCHCH(int test) : TestAwaiterCH(test) {};\n+\n+    resumable foo(){\n+    int x = co_await *this;\n+    co_return x;\n+    }\n+  };\n+};\n+\n+struct TestP {\n+ resumable::promise_type::TestAwaiterCHCH  tp = resumable::promise_type::TestAwaiterCHCH(6);\n+};\n+\n+resumable foo1(int t){\n+  int x = co_await resumable::promise_type::TestAwaiterCH(t);\n+  co_return x;\n+}\n+\n+resumable foo2(){\n+  struct TestP  TP;\n+  int x = co_await TP.tp;\n+  co_return x;\n+}\n+\n+resumable foo3(){\n+  int x = co_await TestP{}.tp;\n+  co_return x;\n+}\n+\n+int main(){\n+  auto t = resumable::promise_type::TestAwaiterCHCH(4);\n+  resumable res = t.foo();\n+  while (!res.handle_.done())\n+    res.handle_.resume();\n+  if (res.handle_.promise().used != 4)\n+    abort();\n+\n+  resumable res1 = foo1(5);\n+  while (!res1.handle_.done())\n+    res1.handle_.resume();\n+  if (res1.handle_.promise().used != 5)\n+    abort();\n+\n+  resumable res2 = foo2();\n+  while (!res2.handle_.done())\n+    res2.handle_.resume();\n+  if (res2.handle_.promise().used != 6)\n+    abort();\n+  \n+  resumable res3 = foo2();\n+  while (!res3.handle_.done())\n+    res3.handle_.resume();\n+  if (res3.handle_.promise().used != 6)\n+    abort();\n+}"}]}