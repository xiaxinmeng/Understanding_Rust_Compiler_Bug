{"sha": "458c00ff6587568fcaade1ce1fe0722af465a5e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4YzAwZmY2NTg3NTY4ZmNhYWRlMWNlMWZlMDcyMmFmNDY1YTVlOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-06T18:23:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-06T18:23:06Z"}, "message": "i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2): Use explicit gen_truncxfsf2 and gen_truncxfdf2 references to avoid reference to...\n\n\t* config/i386/i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2):\n\tUse explicit gen_truncxfsf2 and gen_truncxfdf2 references to avoid\n\treference to nonexistent gen_truncxfxf2 function.\n\nFrom-SVN: r152497", "tree": {"sha": "4e335598f622617b7d6503e24d885a065c66de26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e335598f622617b7d6503e24d885a065c66de26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/458c00ff6587568fcaade1ce1fe0722af465a5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458c00ff6587568fcaade1ce1fe0722af465a5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458c00ff6587568fcaade1ce1fe0722af465a5e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458c00ff6587568fcaade1ce1fe0722af465a5e9/comments", "author": null, "committer": null, "parents": [{"sha": "d2407a7aca3b4db2234d5c27ff1ce43074a84246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2407a7aca3b4db2234d5c27ff1ce43074a84246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2407a7aca3b4db2234d5c27ff1ce43074a84246"}], "stats": {"total": 164, "additions": 90, "deletions": 74}, "files": [{"sha": "684352fbb60cc85f51f92864d9f3c9e5b859b954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c00ff6587568fcaade1ce1fe0722af465a5e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c00ff6587568fcaade1ce1fe0722af465a5e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=458c00ff6587568fcaade1ce1fe0722af465a5e9", "patch": "@@ -1,13 +1,19 @@\n 2009-10-06  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/i386.md (SWI48, SDWI, DWI): New mode iterators.\n+\t* config/i386/i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2):\n+\tUse explicit gen_truncxfsf2 and gen_truncxfdf2 references to avoid\n+\treference to nonexistent gen_truncxfxf2 function.\n+\n+2009-10-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (SWI48, SDWIM, DWI): New mode iterators.\n \t(DWIH, g, di, doubleint_general_operand): New mode attributes.\n \t(general_operand): Handle TI mode.\n \t(add<mode>3): Macroize expander from add{qi,hi,si,di,ti}3 patterns\n-\tusing SDWI mode iterator.\n+\tusing SDWIM mode iterator.\n \t(*add<mode>3_doubleword): New insn_and_split pattern.  Macroize\n \tpattern from *add{di,ti}3_1 patterns and corresponding splitters\n-\tusing SDWI mode iterator.\n+\tusing DWI mode iterator.\n \t(add<mode>3_carry): Macroize insn from add{qi,hi,si,di}3_carry\n \tpatterns using SWI mode iterator.\n \t(*add<mode>3_cc): Macroize insn from add{si,di}3_cc patterns\n@@ -17,10 +23,10 @@\n \t(*add<mode>_3): Ditto from add{si,di}_3 patterns.\n \t(*add<mode>_5): Ditto from add{si,di}_5 patterns.\n \t(sub<mode>3): Macroize expander from sub{qi,hi,si,di,ti}3 patterns\n-\tusing SDWI mode iterator.\n+\tusing SDWIM mode iterator.\n \t(*sub<mode>3_doubleword): New insn_and_split pattern.  Macroize\n \tpattern from *sub{di,ti}3_1 patterns and corresponding splitters\n-\tusing SDWI mode iterator.\n+\tusing DWI mode iterator.\n \t(sub<mode>3_carry): Macroize insn from sub{qi,hi,si,di}3_carry\n \tpatterns using SWI mode iterator.\n \t(*sub<mode>_1): Ditto from from sub{qi,hi,si,di}_1 patterns.\n@@ -268,7 +274,7 @@\n \t    Richard Guenther  <rguenther@suse.de>\n \t    Jan Hubicka  <jh@suse.cz>\n \t    Doug Kwan <dougkwan@google.com>\n-\t    H.J. Lu  <hongjiu.lu@intel.com> \n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n \t    Bill Maddox  <maddox@google.com>\n \t    Ryan Mansfield  <rmansfield@qnx.com>\n \t    Diego Novillo  <dnovillo@google.com>\n@@ -804,23 +810,24 @@\n \n 2009-10-02  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/i386.md (divmod<mode>4) Macroize expander from\n-\tdivmoddi4, divmodsi4 and divmodhi4 patterns using SWI248 macro.\n+\t* config/i386/i386.md (SWIM248): New mode iterator.\n+\t(divmod<mode>4) Macroize expander from divmoddi4, divmodsi4 and\n+\tdivmodhi4 patterns using SWIM248 macro.\n \t(*divmod<mode>4): Macroize insn_and_split pattern from\n \t*divmoddi4_cltd_rex64, *divmodsi4_cltd and divmodhi4 insn patterns\n-\tand their corresponding splitters usign SWI248 macro.  Split SImode\n+\tand their corresponding splitters usign SWIM248 macro.  Split SImode\n \tinsn to generate cltd and DImode insn to generate cqto instead of\n \tmove+shift when optimizing for size or TARGET_USE_CLTD is in effect.\n \t(*divmoddi4_nocltd_rex64, *divmodsi4_nocltd): Remove insn patterns.\n \t(*divmod<mode>4_noext): Macroize insn from *divmoddi_noext_rex64 and\n-\t*divmodsi_noext patterns using SWI248 macro.\n+\t*divmodsi_noext patterns using SWIM248 macro.\n \t(udivmod<mode>4): Macroize expander from udivmoddi4, udivmodsi4 and\n-\tudivmodhi4 patterns using SWI248 macro.\n+\tudivmodhi4 patterns using SWIM248 macro.\n \t(*udivmod<mode>4): Macroize insn_and_split pattern from\n \t*udivmoddi4, udivmodsi4 and udivmodhi4 patterns and their\n-\tcorresponding splitters using SWI248 macro.\n+\tcorresponding splitters using SWIM248 macro.\n \t(*udivmod<mode>4_noext): Macroize insn from *udivmoddi4_noext,\n-\t*udivmodsi4_noext and *udivmodhi_noext patterns using SWI248 macro.\n+\t*udivmodsi4_noext and *udivmodhi_noext patterns using SWIM248 macro.\n \n 2009-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "d6816ce7ec74ce5d8b2af829ca276eae8ef7a3cf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 70, "deletions": 61, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458c00ff6587568fcaade1ce1fe0722af465a5e9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458c00ff6587568fcaade1ce1fe0722af465a5e9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=458c00ff6587568fcaade1ce1fe0722af465a5e9", "patch": "@@ -711,12 +711,14 @@\n ;; Single word integer modes without QImode and HImode.\n (define_mode_iterator SWI48 [SI (DI \"TARGET_64BIT\")])\n \n-;; All single and double word integer modes.\n-(define_mode_iterator SDWI [(QI \"TARGET_QIMODE_MATH\")\n-\t\t\t    (HI \"TARGET_HIMODE_MATH\")\n-\t\t\t    SI\n-\t\t\t    DI\n-\t\t\t    (TI \"TARGET_64BIT\")])\n+;; All math-dependant single and double word integer modes.\n+(define_mode_iterator SDWIM [(QI \"TARGET_QIMODE_MATH\")\n+\t\t\t     (HI \"TARGET_HIMODE_MATH\")\n+\t\t\t     SI DI (TI \"TARGET_64BIT\")])\n+\n+;; Math-dependant single word integer modes without QImode.\n+(define_mode_iterator SWIM248 [(HI \"TARGET_HIMODE_MATH\")\n+\t\t      \t       SI (DI \"TARGET_64BIT\")])\n \n ;; Double word integer modes.\n (define_mode_iterator DWI [(DI \"!TARGET_64BIT\")\n@@ -5454,11 +5456,18 @@\n       && !X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode))\n     {\n       rtx reg = gen_reg_rtx (XFmode);\n+      rtx insn;\n+\n       emit_insn (gen_float<SSEMODEI24:mode>xf2 (reg, operands[1]));\n-/* Avoid references to nonexistent function in dead code in XFmode case.  */\n-#define gen_truncxfxf2 gen_truncxfdf2\n-      emit_insn (gen_truncxf<X87MODEF:mode>2 (operands[0], reg));\n-#undef gen_truncxfxf2\n+\n+      if (<X87MODEF:MODE>mode == SFmode)\n+\tinsn = gen_truncxfsf2 (operands[0], reg);\n+      else if (<X87MODEF:MODE>mode == DFmode)\n+\tinsn = gen_truncxfdf2 (operands[0], reg);\n+      else\n+\tgcc_unreachable ();\n+\n+      emit_insn (insn);\n       DONE;\n     }\n }\")\n@@ -6075,9 +6084,9 @@\n ;; Add instructions\n \n (define_expand \"add<mode>3\"\n-  [(set (match_operand:SDWI 0 \"nonimmediate_operand\" \"\")\n-\t(plus:SDWI (match_operand:SDWI 1 \"nonimmediate_operand\" \"\")\n-\t\t   (match_operand:SDWI 2 \"<general_operand>\" \"\")))]\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\" \"\")\n+\t(plus:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\" \"\")\n+\t\t    (match_operand:SDWIM 2 \"<general_operand>\" \"\")))]\n   \"\"\n   \"ix86_expand_binary_operator (PLUS, <MODE>mode, operands); DONE;\")\n \n@@ -7609,9 +7618,9 @@\n ;; Subtract instructions\n \n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:SDWI 0 \"nonimmediate_operand\" \"\")\n-\t(minus:SDWI (match_operand:SDWI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:SDWI 2 \"<general_operand>\" \"\")))]\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\" \"\")\n+\t(minus:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\" \"\")\n+\t\t     (match_operand:SDWIM 2 \"<general_operand>\" \"\")))]\n   \"\"\n   \"ix86_expand_binary_operator (MINUS, <MODE>mode, operands); DONE;\")\n \n@@ -8431,33 +8440,33 @@\n ;; Divmod instructions.\n \n (define_expand \"divmod<mode>4\"\n-  [(parallel [(set (match_operand:SWI248 0 \"register_operand\" \"\")\n-\t\t   (div:SWI248\n-\t\t     (match_operand:SWI248 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SWI248 2 \"nonimmediate_operand\" \"\")))\n-\t      (set (match_operand:SWI248 3 \"register_operand\" \"\")\n-\t\t   (mod:SWI248 (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (match_operand:SWIM248 0 \"register_operand\" \"\")\n+\t\t   (div:SWIM248\n+\t\t     (match_operand:SWIM248 1 \"register_operand\" \"\")\n+\t\t     (match_operand:SWIM248 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:SWIM248 3 \"register_operand\" \"\")\n+\t\t   (mod:SWIM248 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"\"\n   \"\")\n \n (define_insn_and_split \"*divmod<mode>4\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n-\t(div:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SWI248 1 \"register_operand\" \"=&d\")\n-\t(mod:SWI248 (match_dup 2) (match_dup 3)))\n+  [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n+\t(div:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SWIM248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWIM248 1 \"register_operand\" \"=&d\")\n+\t(mod:SWIM248 (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 1)\n-\t\t   (ashiftrt:SWI248 (match_dup 4) (match_dup 5)))\n+\t\t   (ashiftrt:SWIM248 (match_dup 4) (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 0)\n-\t           (div:SWI248 (match_dup 2) (match_dup 3)))\n+\t           (div:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (set (match_dup 1)\n-\t\t   (mod:SWI248 (match_dup 2) (match_dup 3)))\n+\t\t   (mod:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (use (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n@@ -8477,59 +8486,59 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*divmod<mode>4_noext\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n-\t(div:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SWI248 1 \"register_operand\" \"=d\")\n-\t(mod:SWI248 (match_dup 2) (match_dup 3)))\n-   (use (match_operand:SWI248 4 \"register_operand\" \"1\"))\n+  [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n+\t(div:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SWIM248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWIM248 1 \"register_operand\" \"=d\")\n+\t(mod:SWIM248 (match_dup 2) (match_dup 3)))\n+   (use (match_operand:SWIM248 4 \"register_operand\" \"1\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"idiv{<imodesuffix>}\\t%3\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"udivmod<mode>4\"\n-  [(parallel [(set (match_operand:SWI248 0 \"register_operand\" \"\")\n-\t\t   (udiv:SWI248\n-\t\t     (match_operand:SWI248 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SWI248 2 \"nonimmediate_operand\" \"\")))\n-\t      (set (match_operand:SWI248 3 \"register_operand\" \"\")\n-\t\t   (umod:SWI248 (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (match_operand:SWIM248 0 \"register_operand\" \"\")\n+\t\t   (udiv:SWIM248\n+\t\t     (match_operand:SWIM248 1 \"register_operand\" \"\")\n+\t\t     (match_operand:SWIM248 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:SWIM248 3 \"register_operand\" \"\")\n+\t\t   (umod:SWIM248 (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"\"\n   \"\")\n \n (define_insn_and_split \"*udivmod<mode>4\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n-\t(udiv:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n-\t\t     (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SWI248 1 \"register_operand\" \"=&d\")\n-\t(umod:SWI248 (match_dup 2) (match_dup 3)))\n+  [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n+\t(udiv:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n+\t\t      (match_operand:SWIM248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWIM248 1 \"register_operand\" \"=&d\")\n+\t(umod:SWIM248 (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  \"\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 1) (const_int 0))\n    (parallel [(set (match_dup 0)\n-\t\t   (udiv:SWI248 (match_dup 2) (match_dup 3)))\n+\t\t   (udiv:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (set (match_dup 1)\n-\t\t   (umod:SWI248 (match_dup 2) (match_dup 3)))\n+\t\t   (umod:SWIM248 (match_dup 2) (match_dup 3)))\n \t      (use (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*udivmod<mode>4_noext\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=a\")\n-\t(udiv:SWI248 (match_operand:SWI248 2 \"register_operand\" \"0\")\n-\t\t     (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n-   (set (match_operand:SWI248 1 \"register_operand\" \"=d\")\n-\t(umod:SWI248 (match_dup 2) (match_dup 3)))\n-   (use (match_operand:SWI248 4 \"register_operand\" \"1\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(<MODE>mode != HImode) || TARGET_HIMODE_MATH\"\n+  [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n+\t(udiv:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n+\t\t      (match_operand:SWIM248 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWIM248 1 \"register_operand\" \"=d\")\n+\t(umod:SWIM248 (match_dup 2) (match_dup 3)))\n+   (use (match_operand:SWIM248 4 \"register_operand\" \"1\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n   \"div{<imodesuffix>}\\t%3\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"<MODE>\")])"}]}