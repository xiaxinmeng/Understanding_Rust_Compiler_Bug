{"sha": "926253eecabc64f87a0c8601e7a3949dc56979c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2MjUzZWVjYWJjNjRmODdhMGM4NjAxZTdhMzk0OWRjNTY5NzljNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-11-21T20:19:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-11-21T20:19:59Z"}, "message": "2004-11-21  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(read): Only return 0 when no bytes for reading available in\n\tnon-blocking mode.\n\t* java/nio/channels/SocketChannel.java:\n\tAdded some missing @return tags.\n\nFrom-SVN: r90986", "tree": {"sha": "69ae908e3cfa7e43ca0339f19214f064e8560d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69ae908e3cfa7e43ca0339f19214f064e8560d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926253eecabc64f87a0c8601e7a3949dc56979c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926253eecabc64f87a0c8601e7a3949dc56979c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926253eecabc64f87a0c8601e7a3949dc56979c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926253eecabc64f87a0c8601e7a3949dc56979c4/comments", "author": null, "committer": null, "parents": [{"sha": "7fe16580f0d58b8527f6bf078d5ba7279a2ddb45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe16580f0d58b8527f6bf078d5ba7279a2ddb45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe16580f0d58b8527f6bf078d5ba7279a2ddb45"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "e3ae8ec75c5a7f7729b90954f17394088ae39e28", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=926253eecabc64f87a0c8601e7a3949dc56979c4", "patch": "@@ -1,3 +1,11 @@\n+2004-11-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(read): Only return 0 when no bytes for reading available in\n+\tnon-blocking mode.\n+\t* java/nio/channels/SocketChannel.java:\n+\tAdded some missing @return tags.\n+\n 2004-11-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/beans/PropertyChangeSupport.java"}, {"sha": "23db8922687b4a80694264eff483116eafc71fa9", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=926253eecabc64f87a0c8601e7a3949dc56979c4", "patch": "@@ -182,7 +182,7 @@ public boolean finishConnect ()\n     // FIXME: Handle blocking/non-blocking mode.\n \n     Selector selector = provider().openSelector();\n-    register (selector, SelectionKey.OP_CONNECT);\n+    register(selector, SelectionKey.OP_CONNECT);\n \n     if (isBlocking())\n       {\n@@ -216,7 +216,7 @@ public Socket socket ()\n     return socket;\n   }\n \n-  public int read (ByteBuffer dst) throws IOException\n+  public int read(ByteBuffer dst) throws IOException\n   {\n     if (!isConnected())\n       throw new NotYetConnectedException();\n@@ -227,7 +227,7 @@ public int read (ByteBuffer dst) throws IOException\n     int available = input.available();\n     int len = dst.capacity() - dst.position();\n \t\n-    if (available == 0)\n+    if (! isBlocking() && available == 0)\n       return 0;\n     \n     if (len > available)"}, {"sha": "650df036605e91ae0a0452aa79fb074c98c63253", "filename": "libjava/java/nio/channels/SocketChannel.java", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926253eecabc64f87a0c8601e7a3949dc56979c4/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java?ref=926253eecabc64f87a0c8601e7a3949dc56979c4", "patch": "@@ -1,5 +1,5 @@\n /* SocketChannel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.nio.channels;\n \n import java.io.IOException;\n@@ -44,16 +45,15 @@\n import java.nio.channels.spi.AbstractSelectableChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n-\n /**\n- * @author Michael Koch\n+ * @author Michael Koch (konqueror@gmx.de)\n  * @since 1.4\n  */\n public abstract class SocketChannel extends AbstractSelectableChannel\n   implements ByteChannel, ScatteringByteChannel, GatheringByteChannel\n {\n   /**\n-   * Initializes this socket.\n+   * Initializes this socket channel.\n    */\n   protected SocketChannel(SelectorProvider provider)\n   {\n@@ -63,6 +63,8 @@ protected SocketChannel(SelectorProvider provider)\n   /**\n    * Opens a socket channel.\n    *\n+   * @return the new <code>SocketChannel</code> object\n+   * \n    * @exception IOException If an error occurs\n    */\n   public static SocketChannel open() throws IOException\n@@ -73,6 +75,8 @@ public static SocketChannel open() throws IOException\n   /**\n    * Opens a channel and connects it to a remote address.\n    *\n+   * @return the new <code>SocketChannel</code> object\n+   * \n    * @exception AsynchronousCloseException If this channel is already connected.\n    * @exception ClosedByInterruptException If another thread interrupts the\n    * current thread while the connect operation is in progress, thereby closing\n@@ -96,6 +100,9 @@ public static SocketChannel open(SocketAddress remote)\n   /**\n    * Reads data from the channel.\n    *\n+   * @return the number of bytes read, zero is valid too, -1 if end of stream\n+   * is reached\n+   *\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n@@ -112,6 +119,8 @@ public final long read(ByteBuffer[] dsts) throws IOException\n   /**\n    * Writes data to the channel.\n    *\n+   * @return the number of bytes written, zero is valid too\n+   * \n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n@@ -127,6 +136,8 @@ public final long write(ByteBuffer[] dsts) throws IOException\n \n   /**\n    * Retrieves the valid operations for this channel.\n+   *\n+   * @return the valid operations\n    */\n   public final int validOps()\n   {\n@@ -137,6 +148,9 @@ public final int validOps()\n   /**\n    * Reads data from the channel.\n    *\n+   * @return the number of bytes read, zero is valid too, -1 if end of stream\n+   * is reached\n+   * \n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n@@ -145,6 +159,10 @@ public final int validOps()\n   /**\n    * Connects the channel's socket to the remote address.\n    *\n+   * @return <code>true</code> if the channel got successfully connected,\n+   * <code>false</code> if the channel is in non-blocking mode and connection\n+   * operation is still in progress.\n+   * \n    * @exception AlreadyConnectedException If this channel is already connected.\n    * @exception AsynchronousCloseException If this channel is already connected.\n    * @exception ClosedByInterruptException If another thread interrupts the\n@@ -191,6 +209,9 @@ public abstract boolean connect(SocketAddress remote)\n   /**\n    * Reads data from the channel.\n    *\n+   * @return the number of bytes read, zero is valid too, -1 if end of stream\n+   * is reached\n+   * \n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n@@ -199,12 +220,16 @@ public abstract long read(ByteBuffer[] dsts, int offset, int length)\n \n   /**\n    * Retrieves the channel's socket.\n+   *\n+   * @return the socket\n    */\n   public abstract Socket socket();\n \n   /**\n    * Writes data to the channel.\n    *\n+   * @return the number of bytes written, zero is valid too\n+   * \n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n@@ -213,6 +238,8 @@ public abstract long read(ByteBuffer[] dsts, int offset, int length)\n   /**\n    * Writes data to the channel.\n    *\n+   * @return the number of bytes written, zero is valid too\n+   * \n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */"}]}