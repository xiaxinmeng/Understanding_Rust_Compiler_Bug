{"sha": "7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2MWNmNmYwOWQwYTA4ZGU3MGQxZjE1ZjA4OWE3OWNiZWMxYWIxZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2009-07-06T13:55:09Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2009-07-06T13:55:09Z"}, "message": "lib1funcs.h (FMOVD_WORKS): Only define if __FMOVD_ENABLED__ is defined.\n\n        * config.sh/lib1funcs.h (FMOVD_WORKS): Only define if\n        __FMOVD_ENABLED__ is defined.\n        * config/sh/sh.h\n        (TARGET_FMOVD): Provide a default definition.\n        (MASK_FMOVD): Likewise.\n        (TARGET_CPU_CPP_BUILTINS): Define\n        __FMOVD_ENABLED__ if TARGET_FMOVD is true.\n        * config/sh/sh.md (movdf_i4): For alternative 0 use either one or\n        two fmov instructions depending upon whether TARGET_FMOVD is\n        enabled.\n        (split for DF load from memory into register): Also handle\n        MEMs which consist of REG+DISP addressing.\n        (split for DF store from register to memory): Likewise.\n        (movsf_ie): Always use single fp_mode.\n        * config/sh/sh.c (sh_override_options): Do not automatically\n        enable TARGET_MOVD for the SH2A when supporting doubles - leave\n        that to the -mfmovd command line switch.\n        (broken_move): Do not restrict fldi test to only the SH4 and SH4A.\n        (fldi_ok): Always allow.\n        * config/sh/sh.opt (mfmovd): Remove this switch.\n        * doc/invoke.texi (-mfmovd): Remove documentation of this switch.\n\nCo-Authored-By: DJ Delorie <dj@redhat.com>\n\nFrom-SVN: r149283", "tree": {"sha": "f2b4569c011e34c11f7d7c4e6539913dbbd5f507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b4569c011e34c11f7d7c4e6539913dbbd5f507"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83f63251d92b61d083e7801e762089b372cbcf8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f63251d92b61d083e7801e762089b372cbcf8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f63251d92b61d083e7801e762089b372cbcf8e"}], "stats": {"total": 414, "additions": 263, "deletions": 151}, "files": [{"sha": "7a035f6f0b9861a5720ea8448f854aaab3bf4312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -1,3 +1,28 @@\n+2009-07-06  Nick Clifton  <nickc@redhat.com>\n+\t    DJ Delorie  <dj@redhat.com>\n+\n+\t* config.sh/lib1funcs.h (FMOVD_WORKS): Only define if\n+\t__FMOVD_ENABLED__ is defined.\n+\t* config/sh/sh.h\n+\t(TARGET_FMOVD): Provide a default definition.\n+\t(MASK_FMOVD): Likewise.\n+\t(TARGET_CPU_CPP_BUILTINS): Define\n+\t__FMOVD_ENABLED__ if TARGET_FMOVD is true.\n+\t* config/sh/sh.md (movdf_i4): For alternative 0 use either one or\n+\ttwo fmov instructions depending upon whether TARGET_FMOVD is\n+\tenabled.\n+\t(split for DF load from memory into register): Also handle\n+\tMEMs which consist of REG+DISP addressing.\n+\t(split for DF store from register to memory): Likewise.\n+\t(movsf_ie): Always use single fp_mode.\n+\t* config/sh/sh.c (sh_override_options): Do not automatically\n+\tenable TARGET_MOVD for the SH2A when supporting doubles - leave\n+\tthat to the -mfmovd command line switch.\n+\t(broken_move): Do not restrict fldi test to only the SH4 and SH4A.\n+\t(fldi_ok): Always allow.\n+\t* config/sh/sh.opt (mfmovd): Remove this switch.\n+\t* doc/invoke.texi (-mfmovd): Remove documentation of this switch.\n+\n 2009-07-06  J\"orn Rennecke  <joern.rennecke@arc.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n \n@@ -372,6 +397,33 @@\n \t* config/i386/i386.c (memory_address_length): Check existence of base\n \tregister before using it.\n \n+2009-06-30  Nick Clifton  <nickc@redhat.com>\n+\t    DJ Delorie  <dj@redhat.com>\n+\n+\t* config.sh/lib1funcs.h (FMOVD_WORKS): Only define if\n+\t__FMOVD_ENABLED__ is defined.\n+\t* config/sh/sh.h\n+\t(TARGET_FMOVD): Provide a default definition.\n+\t(MASK_FMOVD): Likewise.\n+\t(TARGET_CPU_CPP_BUILTINS): Define\n+\t__FMOVD_ENABLED__ if TARGET_FMOVD is true.\n+\t* config/sh/sh.md (movdf_i4): For alternative 0 use either one or\n+\ttwo fmov instructions depending upon whether TARGET_FMOVD is\n+\tenabled.\n+\t(split for DF load from memory into register): Also handle\n+\tMEMs which consist of REG+DISP addressing.\n+\t(split for DF store from register to memory): Likewise.\n+\t* config/sh/sh.opt (mfmovd): Remove this switch.\n+\t* doc/invoke.texi (-mfmovd): Remove documentation of this switch.\n+\t* config/sh/sh.c (sh_override_options): Do not automatically\n+\tenable TARGET_MOVD for the SH2A when supporting doubles - leave\n+\tthat to the -mfmovd command line switch.\n+\n+\t* config/sh/sh.c (broken_move): Do not restrict fldi test to only\n+\tthe SH4 and SH4A.\n+\t(fldi_ok): Always allow.\n+\t* config/sh/sh.md (movsf_ie): Always use single fp_mode.\n+\n 2009-06-29  DJ Delorie  <dj@redhat.com>\n \n \t* doc/install.texi (mep-x-elf): Correct chip's full name."}, {"sha": "af4b41cc31412d4336e9b3833dcf5673221d72da", "filename": "gcc/config/sh/lib1funcs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Flib1funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.h?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -42,8 +42,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define ALIAS(X,Y)\t.global GLOBAL(X); .set GLOBAL(X),GLOBAL(Y)\n \n-#ifdef __SH2A__\n-#undef FMOVD_WORKS\n+#if defined __SH2A__ && defined __FMOVD_ENABLED__\n+#undef  FMOVD_WORKS\n #define FMOVD_WORKS\n #endif\n "}, {"sha": "18123c34cdeea4082a4cbcc34967aa3b11d7eef1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -694,11 +694,7 @@ sh_override_options (void)\n   if (TARGET_SH2E)\n     sh_cpu = PROCESSOR_SH2E;\n   if (TARGET_SH2A)\n-    {\n-      sh_cpu = PROCESSOR_SH2A;\n-      if (TARGET_SH2A_DOUBLE)\n-        target_flags |= MASK_FMOVD;\n-    }\n+    sh_cpu = PROCESSOR_SH2A;\n   if (TARGET_SH3)\n     sh_cpu = PROCESSOR_SH3;\n   if (TARGET_SH3E)\n@@ -4208,14 +4204,13 @@ broken_move (rtx insn)\n \t\t&& GET_CODE (SET_SRC (pat)) == CONST_DOUBLE\n \t\t&& (fp_zero_operand (SET_SRC (pat))\n \t\t    || fp_one_operand (SET_SRC (pat)))\n-\t\t/* ??? If this is a -m4 or -m4-single compilation, in general\n-\t\t   we don't know the current setting of fpscr, so disable fldi.\n+\t\t/* In general we don't know the current setting of fpscr, so disable fldi.\n \t\t   There is an exception if this was a register-register move\n \t\t   before reload - and hence it was ascertained that we have\n \t\t   single precision setting - and in a post-reload optimization\n \t\t   we changed this to do a constant load.  In that case\n \t\t   we don't have an r0 clobber, hence we must use fldi.  */\n-\t\t&& (! TARGET_SH4 || TARGET_FMOVD\n+\t\t&& (TARGET_FMOVD\n \t\t    || (GET_CODE (XEXP (XVECEXP (PATTERN (insn), 0, 2), 0))\n \t\t\t== SCRATCH))\n \t\t&& REG_P (SET_DEST (pat))\n@@ -8876,7 +8871,7 @@ fp_one_operand (rtx op)\n   return REAL_VALUES_EQUAL (r, dconst1);\n }\n \n-/* For -m4 and -m4-single-only, mode switching is used.  If we are\n+/* In general mode switching is used.  If we are\n    compiling without -mfmovd, movsf_ie isn't taken into account for\n    mode switching.  We could check in machine_dependent_reorg for\n    cases where we know we are in single precision mode, but there is\n@@ -8886,7 +8881,7 @@ fp_one_operand (rtx op)\n int\n fldi_ok (void)\n {\n-  return ! TARGET_SH4 || TARGET_FMOVD || reload_completed;\n+  return 1;\n }\n \n int"}, {"sha": "d9a4c5f25cc6ec01bd6c7dd86ce03b260d1f471d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -28,6 +28,11 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_VERSION \\\n   fputs (\" (Hitachi SH)\", stderr);\n \n+#ifndef TARGET_FMOVD\n+#define TARGET_FMOVD 0\n+#define MASK_FMOVD   0\n+#endif\n+\n /* Unfortunately, insn-attrtab.c doesn't include insn-codes.h.  We can't\n    include it here, because bconfig.h is also included by gencodes.c .  */\n /* ??? No longer true.  */\n@@ -91,6 +96,8 @@ do { \\\n     builtin_define (\"__SH_FPU_DOUBLE__\"); \\\n   if (TARGET_HITACHI) \\\n     builtin_define (\"__HITACHI__\"); \\\n+  if (TARGET_FMOVD) \\\n+    builtin_define (\"__FMOVD_ENABLED__\"); \\\n   builtin_define (TARGET_LITTLE_ENDIAN \\\n \t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\"); \\\n } while (0)"}, {"sha": "30084c2d0f81da9f464e4b2aa46b76c5c5c6255d", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 126, "deletions": 59, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -5780,25 +5780,31 @@ label:\n ;; up pcloads, so we need usable length information for that.\n (define_insn \"movdf_i4\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=d,r,d,d,m,r,r,m,!??r,!???d\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"d,r,F,m,d,FQ,m,r,d,r\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c,c,c,c,c,c,c,c,c,c\"))\n-   (clobber (match_scratch:SI 3 \"=X,X,&z,X,X,X,X,X,X,X\"))]\n+\t(match_operand:DF 1 \"general_movsrc_operand\"  \"d,r,F,m,d,FQ,m,r,d,r\"))\n+   (use (match_operand:PSI 2 \"fpscr_operand\"          \"c,c,c,c,c,c,c,c,c,c\"))\n+   (clobber (match_scratch:SI 3                      \"=X,X,&z,X,X,X,X,X,X,X\"))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n    && (arith_reg_operand (operands[0], DFmode)\n        || arith_reg_operand (operands[1], DFmode))\"\n-  \"@\n-\tfmov\t%1,%0\n-\t#\n-\t#\n-\tfmov.d\t%1,%0\n-\tfmov.d\t%1,%0\n-\t#\n-\t#\n-\t#\n-\t#\n-\t#\"\n+  {\n+    switch (which_alternative)\n+    {\n+    case 0:\n+      if (TARGET_FMOVD)\n+\treturn \"fmov\t%1,%0\";\n+      else if (REGNO (operands[0]) != REGNO (operands[1]) + 1)\n+\treturn \"fmov\t%R1,%R0\\n\\tfmov\t%S1,%S0\";\n+      else\n+\treturn \"fmov\t%S1,%S0\\n\\tfmov\t%R1,%R0\";\n+    case 3:\n+    case 4:\n+      return \"fmov.d\t%1,%0\";\n+    default:\n+      return \"#\";\n+    }\n+  }\n   [(set_attr_alternative \"length\"\n-     [(if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 2) (const_int 4))\n+     [(if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 8))\n       (const_int 4)\n       (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 6))\n       (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 6))\n@@ -6032,37 +6038,63 @@ label:\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n-  \"\n {\n   int regno = true_regnum (operands[0]);\n-  rtx addr, insn, adjust = NULL_RTX;\n+  rtx addr, insn;\n   rtx mem2 = change_address (operands[1], SFmode, NULL_RTX);\n-  rtx reg0 = gen_rtx_REG (SFmode, regno + !! TARGET_LITTLE_ENDIAN);\n-  rtx reg1 = gen_rtx_REG (SFmode, regno + ! TARGET_LITTLE_ENDIAN);\n+  rtx reg0 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n+  rtx reg1 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 0 : 1));\n \n   operands[1] = copy_rtx (mem2);\n   addr = XEXP (mem2, 0);\n-  if (GET_CODE (addr) != POST_INC)\n+\n+  switch (GET_CODE (addr))\n     {\n-      /* If we have to modify the stack pointer, the value that we have\n-\t read with post-increment might be modified by an interrupt,\n-\t so write it back.  */\n-      if (REGNO (addr) == STACK_POINTER_REGNUM)\n-\tadjust = gen_push_e (reg0);\n-      else\n-\tadjust = gen_addsi3 (addr, addr, GEN_INT (-4));\n-      XEXP (mem2, 0) = addr = gen_rtx_POST_INC (SImode, addr);\n-    }\n-  addr = XEXP (addr, 0);\n-  insn = emit_insn (gen_movsf_ie (reg0, mem2, operands[2]));\n-  add_reg_note (insn, REG_INC, addr);\n-  insn = emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n-  if (adjust)\n-    emit_insn (adjust);\n-  else\n-    add_reg_note (insn, REG_INC, addr);\n+    case REG:\n+      /* This is complicated.  If the register is an arithmetic register\n+         we can just fall through to the REG+DISP case below.  Otherwise\n+\t we have to use a combination of POST_INC and REG addressing...  */\n+      if (! arith_reg_operand (operands[1], SFmode))\n+        {\n+          XEXP (mem2, 0) = addr = gen_rtx_POST_INC (SImode, addr);\n+          insn = emit_insn (gen_movsf_ie (reg0, mem2, operands[2]));\n+          add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+\t  \n+\t  emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+\n+          /* If we have modified the stack pointer, the value that we have\n+  \t     read with post-increment might be modified by an interrupt,\n+\t     so write it back.  */\n+          if (REGNO (addr) == STACK_POINTER_REGNUM)\n+\t    emit_insn (gen_push_e (reg0));\n+          else\n+\t    emit_insn (gen_addsi3 (XEXP (operands[1], 0), XEXP (operands[1], 0), GEN_INT (-4)));\n+\t  break;\n+        }\n+      /* Fall through.  */\n+\t \n+    case PLUS:\n+      emit_insn (gen_movsf_ie (reg0, operands[1], operands[2]));\n+      operands[1] = copy_rtx (operands[1]);\n+      XEXP (operands[1], 0) = plus_constant (addr, 4);\n+      emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+      break;\n+      \n+    case POST_INC:\n+      insn = emit_insn (gen_movsf_ie (reg0, operands[1], operands[2]));\n+      add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+    \n+      insn = emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+      add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+      break;\n+\n+    default:\n+      debug_rtx (addr);\n+      gcc_unreachable ();\n+    }\n+\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n@@ -6072,35 +6104,70 @@ label:\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n-  \"\n {\n   int regno = true_regnum (operands[1]);\n-  rtx insn, addr, adjust = NULL_RTX;\n+  rtx insn, addr;\n+  rtx reg0 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n+  rtx reg1 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 0 : 1));\n \n   operands[0] = copy_rtx (operands[0]);\n   PUT_MODE (operands[0], SFmode);\n-  insn = emit_insn (gen_movsf_ie (operands[0],\n-\t\t\t\t  gen_rtx_REG (SFmode,\n-\t\t\t\t\t   regno + ! TARGET_LITTLE_ENDIAN),\n-\t\t\t\t  operands[2]));\n-  operands[0] = copy_rtx (operands[0]);\n   addr = XEXP (operands[0], 0);\n-  if (GET_CODE (addr) != PRE_DEC)\n+\n+  switch (GET_CODE (addr))\n     {\n-      adjust = gen_addsi3 (addr, addr, GEN_INT (4));\n-      emit_insn_before (adjust, insn);\n-      XEXP (operands[0], 0) = addr = gen_rtx_PRE_DEC (SImode, addr);\n+    case REG:\n+      /* This is complicated.  If the register is an arithmetic register\n+         we can just fall through to the REG+DISP case below.  Otherwise\n+\t we have to use a combination of REG and PRE_DEC addressing...  */\n+      if (! arith_reg_operand (operands[0], SFmode))\n+        {\n+\t  emit_insn (gen_addsi3 (addr, addr, GEN_INT (4)));\n+          emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\n+\n+\t  operands[0] = copy_rtx (operands[0]);\n+          XEXP (operands[0], 0) = addr = gen_rtx_PRE_DEC (SImode, addr);\n+\t  \n+          insn = emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+          add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+\t  break;\n+        }\n+      /* Fall through.  */\n+      \n+    case PLUS:\n+      /* Since REG+DISP addressing has already been decided upon by gcc\n+         we can rely upon it having chosen an arithmetic register as the\n+\t register component of the address.  Just emit the lower numbered\n+\t register first, to the lower address, then the higher numbered\n+\t register to the higher address.  */\n+      emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+\n+      operands[0] = copy_rtx (operands[0]);\n+      XEXP (operands[0], 0) = plus_constant (addr, 4);\n+\n+      emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\t \n+      break;\n+      \n+    case PRE_DEC:\n+      /* This is easy.  Output the word to go to the higher address\n+         first (ie the word in the higher numbered register) then the\n+\t word to go to the lower address.  */\n+\n+      insn = emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\n+      add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+\n+      insn = emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+      add_reg_note (insn, REG_INC, XEXP (addr, 0));\n+      break;\n+      \n+    default:\n+      /* FAIL; */\n+      debug_rtx (addr);\n+      gcc_unreachable ();\n     }\n-  addr = XEXP (addr, 0);\n-  if (! adjust)\n-    add_reg_note (insn, REG_INC, addr);\n-  insn = emit_insn (gen_movsf_ie (operands[0],\n-\t\t\t\t  gen_rtx_REG (SFmode,\n-\t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n-\t\t\t\t  operands[2]));\n-  add_reg_note (insn, REG_INC, addr);\n+\n   DONE;\n-}\")\n+})\n \n ;; If the output is a register and the input is memory or a register, we have\n ;; to be careful and see which word needs to be loaded first.\n@@ -6562,7 +6629,7 @@ label:\n       (const_int 0)])\n    (set (attr \"fp_mode\") (if_then_else (eq_attr \"fmovd\" \"yes\")\n \t\t\t\t\t   (const_string \"single\")\n-\t\t\t\t\t   (const_string \"none\")))])\n+\t\t\t\t\t   (const_string \"single\")))])\n \n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")"}, {"sha": "b2e7c6de77fe5759e7b1b294ecdc47f435ec7886", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -248,9 +248,6 @@ mfixed-range=\n Target RejectNegative Joined Var(sh_fixed_range_str)\n Specify range of registers to make fixed\n \n-mfmovd\n-Target RejectNegative Mask(FMOVD) Undocumented\n-\n mfused-madd\n Target Var(TARGET_FMAC)\n Enable the use of the fused floating point multiply-accumulate operation"}, {"sha": "7742623b5b55c7c3ee6e5e60a278fc721b3e8a67", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 71, "deletions": 77, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7a61cf6f09d0a08de70d1f15f089a79cbec1ab1e", "patch": "@@ -339,7 +339,7 @@ Objective-C and Objective-C++ Dialects}.\n -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm @gol\n -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining @gol\n -finline-functions -finline-functions-called-once -finline-limit=@var{n} @gol\n--finline-small-functions -fipa-cp -fipa-cp-clone -fipa-matrix-reorg -fipa-pta @gol \n+-finline-small-functions -fipa-cp -fipa-cp-clone -fipa-matrix-reorg -fipa-pta @gol\n -fipa-pure-const -fipa-reference -fipa-struct-reorg @gol\n -fipa-type-escape -fira-algorithm=@var{algorithm} @gol\n -fira-region=@var{region} -fira-coalesce -fno-ira-share-save-slots @gol\n@@ -795,7 +795,7 @@ See RS/6000 and PowerPC Options.\n -m5-32media  -m5-32media-nofpu @gol\n -m5-compact  -m5-compact-nofpu @gol\n -mb  -ml  -mdalign  -mrelax @gol\n--mbigtable  -mfmovd  -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n+-mbigtable  -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n -mieee  -mbitops  -misize  -minline-ic_invalidate -mpadstruct  -mspace @gol\n -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n -mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n@@ -1210,8 +1210,8 @@ This will display the values recognized by the @option{--param}\n option.\n \n @item @var{language}\n-This will display the options supported for @var{language}, where \n-@var{language} is the name of one of the languages supported in this \n+This will display the options supported for @var{language}, where\n+@var{language} is the name of one of the languages supported in this\n version of GCC.\n \n @item @samp{common}\n@@ -1424,7 +1424,7 @@ affected.\n @opindex std\n Determine the language standard. @xref{Standards,,Language Standards\n Supported by GCC}, for details of these standard versions.  This option\n-is currently only supported when compiling C or C++. \n+is currently only supported when compiling C or C++.\n \n The compiler can accept several base standards, such as @samp{c89} or\n @samp{c++98}, and GNU dialects of those standards, such as\n@@ -2843,21 +2843,21 @@ following cases:\n A pointer is compared against integer zero with @samp{<}, @samp{<=},\n @samp{>}, or @samp{>=}.\n \n-@item \n+@item\n (C++ only) An enumerator and a non-enumerator both appear in a\n conditional expression.\n \n-@item \n+@item\n (C++ only) Ambiguous virtual bases.\n \n-@item \n+@item\n (C++ only) Subscripting an array which has been declared @samp{register}.\n \n-@item \n+@item\n (C++ only) Taking the address of a variable which has been declared\n @samp{register}.\n \n-@item \n+@item\n (C++ only) A base class is not initialized in a derived class' copy\n constructor.\n \n@@ -3411,9 +3411,9 @@ with n=3.\n \n Level 1: Most aggressive, quick, least accurate.\n Possibly useful when higher levels\n-do not warn but -fstrict-aliasing still breaks the code, as it has very few \n+do not warn but -fstrict-aliasing still breaks the code, as it has very few\n false negatives.  However, it has many false positives.\n-Warns for all pointer conversions between possibly incompatible types, \n+Warns for all pointer conversions between possibly incompatible types,\n even if never dereferenced.  Runs in the frontend only.\n \n Level 2: Aggressive, quick, not too precise.\n@@ -3422,12 +3422,12 @@ and few false negatives (but possibly more than level 1).\n Unlike level 1, it only warns when an address is taken.  Warns about\n incomplete types.  Runs in the frontend only.\n \n-Level 3 (default for @option{-Wstrict-aliasing}): \n-Should have very few false positives and few false \n+Level 3 (default for @option{-Wstrict-aliasing}):\n+Should have very few false positives and few false\n negatives.  Slightly slower than levels 1 or 2 when optimization is enabled.\n Takes care of the common punn+dereference pattern in the frontend:\n @code{*(int*)&some_float}.\n-If optimization is enabled, it also runs in the backend, where it deals \n+If optimization is enabled, it also runs in the backend, where it deals\n with multiple statement cases using flow-sensitive points-to information.\n Only warns when the converted pointer is dereferenced.\n Does not warn about incomplete types.\n@@ -4686,7 +4686,7 @@ Print the name and the counter upperbound for all debug counters.\n \n @item -fdbg-cnt=@var{counter-value-list}\n @opindex fdbg-cnt\n-Set the internal debug counter upperbound. @var{counter-value-list} \n+Set the internal debug counter upperbound. @var{counter-value-list}\n is a comma-separated list of @var{name}:@var{value} pairs\n which sets the upperbound of each debug counter @var{name} to @var{value}.\n All debug counters have the initial upperbound of @var{UINT_MAX},\n@@ -4767,7 +4767,7 @@ Dump after duplicating the computed gotos.\n @opindex fdump-rtl-ce3\n @option{-fdump-rtl-ce1}, @option{-fdump-rtl-ce2}, and\n @option{-fdump-rtl-ce3} enable dumping after the three\n-if conversion passes. \n+if conversion passes.\n \n @itemx -fdump-rtl-cprop_hardreg\n @opindex fdump-rtl-cprop_hardreg\n@@ -4896,7 +4896,7 @@ Dump after sign extension elimination.\n \n @item -fdump-rtl-seqabstr\n @opindex fdump-rtl-seqabstr\n-Dump after common sequence discovery. \n+Dump after common sequence discovery.\n \n @item -fdump-rtl-shorten\n @opindex fdump-rtl-shorten\n@@ -5538,9 +5538,9 @@ each of them.\n Not all optimizations are controlled directly by a flag.  Only\n optimizations that have a flag are listed in this section.\n \n-Depending on the target and how GCC was configured, a slightly different \n-set of optimizations may be enabled at each @option{-O} level than \n-those listed here.  You can invoke GCC with @samp{-Q --help=optimizers} \n+Depending on the target and how GCC was configured, a slightly different\n+set of optimizations may be enabled at each @option{-O} level than\n+those listed here.  You can invoke GCC with @samp{-Q --help=optimizers}\n to find out the exact set of optimizations that are enabled at each level.\n @xref{Overall Options}, for examples.\n \n@@ -6253,8 +6253,8 @@ scheduling runs instead of the second scheduler pass.\n \n @item -fsel-sched-pipelining\n @opindex fsel-sched-pipelining\n-Enable software pipelining of innermost loops during selective scheduling.  \n-This option has no effect until one of @option{-fselective-scheduling} or \n+Enable software pipelining of innermost loops during selective scheduling.\n+This option has no effect until one of @option{-fselective-scheduling} or\n @option{-fselective-scheduling2} is turned on.\n \n @item -fsel-sched-pipelining-outer-loops\n@@ -6328,9 +6328,9 @@ Enabled by default at @option{-O} and higher.\n \n @item -fipa-struct-reorg\n @opindex fipa-struct-reorg\n-Perform structure reorganization optimization, that change C-like structures \n-layout in order to better utilize spatial locality.  This transformation is \n-affective for programs containing arrays of structures.  Available in two \n+Perform structure reorganization optimization, that change C-like structures\n+layout in order to better utilize spatial locality.  This transformation is\n+affective for programs containing arrays of structures.  Available in two\n compilation modes: profile-based (enabled with @option{-fprofile-generate})\n or static (which uses built-in heuristics).  Require @option{-fipa-type-escape}\n to provide the safety of this transformation.  It works only in whole program\n@@ -6349,7 +6349,7 @@ and does not affect generated code.\n @opindex fipa-cp\n Perform interprocedural constant propagation.\n This optimization analyzes the program to determine when values passed\n-to functions are constants and then optimizes accordingly.  \n+to functions are constants and then optimizes accordingly.\n This optimization can substantially increase performance\n if the application has constants passed to functions.\n This flag is enabled by default at @option{-O2}, @option{-Os} and @option{-O3}.\n@@ -6373,10 +6373,9 @@ This reduces the level of indirection needed for accessing the elements\n of the matrix. The second optimization is matrix transposing that\n attempts to change the order of the matrix's dimensions in order to\n improve cache locality.\n-Both optimizations need the @option{-fwhole-program} flag. \n+Both optimizations need the @option{-fwhole-program} flag.\n Transposing is enabled only if profiling information is available.\n \n-\n @item -ftree-sink\n @opindex ftree-sink\n Perform forward store motion  on trees.  This flag is\n@@ -6400,9 +6399,9 @@ default at @option{-O} and higher.\n \n @item -ftree-builtin-call-dce\n @opindex ftree-builtin-call-dce\n-Perform conditional dead code elimination (DCE) for calls to builtin functions \n-that may set @code{errno} but are otherwise side-effect free.  This flag is \n-enabled by default at @option{-O2} and higher if @option{-Os} is not also \n+Perform conditional dead code elimination (DCE) for calls to builtin functions\n+that may set @code{errno} but are otherwise side-effect free.  This flag is\n+enabled by default at @option{-O2} and higher if @option{-Os} is not also\n specified.\n \n @item -ftree-dominator-opts\n@@ -6467,8 +6466,8 @@ Graphite loop transformation infrastructure.\n \n @item -floop-strip-mine\n Perform loop strip mining transformations on loops.  Strip mining\n-splits a loop into two nested loops.  The outer loop has strides \n-equal to the strip size and the inner loop has strides of the \n+splits a loop into two nested loops.  The outer loop has strides\n+equal to the strip size and the inner loop has strides of the\n original loop within a strip.  For example, given a loop like:\n @smallexample\n DO I = 1, N\n@@ -6970,7 +6969,7 @@ default, GCC will emit an error message when an inconsistent profile is detected\n Set the directory to search the profile data files in to @var{path}.\n This option affects only the profile data generated by\n @option{-fprofile-generate}, @option{-ftest-coverage}, @option{-fprofile-arcs}\n-and used by @option{-fprofile-use} and @option{-fbranch-probabilities} \n+and used by @option{-fprofile-use} and @option{-fbranch-probabilities}\n and its related options.\n By default, GCC will use the current directory as @var{path}\n thus the profile data file will appear in the same directory as the object file.\n@@ -7437,8 +7436,8 @@ In each case, the @var{value} is an integer.  The allowable choices for\n The threshold ratio (as a percentage) between a structure frequency\n and the frequency of the hottest structure in the program.  This parameter\n is used by struct-reorg optimization enabled by @option{-fipa-struct-reorg}.\n-We say that if the ratio of a structure frequency, calculated by profiling, \n-to the hottest structure frequency in the program is less than this \n+We say that if the ratio of a structure frequency, calculated by profiling,\n+to the hottest structure frequency in the program is less than this\n parameter, then structure reorganization is not applied to this structure.\n The default is 10.\n \n@@ -7880,8 +7879,8 @@ depth of search for available instructions.\n The default value is 50.\n \n @item selsched-max-sched-times\n-The maximum number of times that an instruction will be scheduled during \n-selective scheduling.  This is the limit on the number of iterations \n+The maximum number of times that an instruction will be scheduled during\n+selective scheduling.  This is the limit on the number of iterations\n through which the instruction may be pipelined.  The default value is 2.\n \n @item selsched-max-insns-to-rename\n@@ -7942,12 +7941,12 @@ The size of L1 cache, in kilobytes.\n The size of L2 cache, in kilobytes.\n \n @item min-insn-to-prefetch-ratio\n-The minimum ratio between the number of instructions and the \n-number of prefetches to enable prefetching in a loop with an \n+The minimum ratio between the number of instructions and the\n+number of prefetches to enable prefetching in a loop with an\n unknown trip count.\n \n @item prefetch-min-insn-to-mem-ratio\n-The minimum ratio between the number of instructions and the \n+The minimum ratio between the number of instructions and the\n number of memory references to enable prefetching in a loop.\n \n @item use-canonical-types\n@@ -8278,7 +8277,7 @@ this option.\n @cindex linker script\n Use @var{script} as the linker script.  This option is supported by most\n systems using the GNU linker.  On some targets, such as bare-board\n-targets without an operating system, the @option{-T} option may be required \n+targets without an operating system, the @option{-T} option may be required\n when linking to avoid references to undefined symbols.\n \n @item -Xlinker @var{option}\n@@ -8294,7 +8293,7 @@ For example, to pass @option{-assert definitions}, you must write\n @option{-Xlinker \"-assert definitions\"}, because this passes the entire\n string as a single argument, which is not what the linker expects.\n \n-When using the GNU linker, it is usually more convenient to pass \n+When using the GNU linker, it is usually more convenient to pass\n arguments to linker options using the @option{@var{option}=@var{value}}\n syntax than as separate arguments.  For example, you can specify\n @samp{-Xlinker -Map=output.map} rather than\n@@ -8305,7 +8304,7 @@ this syntax for command-line options.\n @opindex Wl\n Pass @var{option} as an option to the linker.  If @var{option} contains\n commas, it is split into multiple options at the commas.  You can use this\n-syntax to pass an argument to the option.  \n+syntax to pass an argument to the option.\n For example, @samp{-Wl,-Map,output.map} passes @samp{-Map output.map} to the\n linker.  When using the GNU linker, you can also get the same effect with\n @samp{-Wl,-Map=output.map}.\n@@ -9226,11 +9225,11 @@ default is @option{-msched-prolog}.\n Specifies which floating-point ABI to use.  Permissible values\n are: @samp{soft}, @samp{softfp} and @samp{hard}.\n \n-Specifying @samp{soft} causes GCC to generate output containing \n+Specifying @samp{soft} causes GCC to generate output containing\n library calls for floating-point operations.\n-@samp{softfp} allows the generation of code using hardware floating-point \n-instructions, but still uses the soft-float calling conventions.  \n-@samp{hard} allows generation of floating-point instructions \n+@samp{softfp} allows the generation of code using hardware floating-point\n+instructions, but still uses the soft-float calling conventions.\n+@samp{hard} allows generation of floating-point instructions\n and uses FPU-specific calling conventions.\n \n Using @option{-mfloat-abi=hard} with VFP coprocessors is not supported.\n@@ -9340,8 +9339,8 @@ floating point values.\n @item -mfp16-format=@var{name}\n @opindex mfp16-format\n Specify the format of the @code{__fp16} half-precision floating-point type.\n-Permissible names are @samp{none}, @samp{ieee}, and @samp{alternative}; \n-the default is @samp{none}, in which case the @code{__fp16} type is not \n+Permissible names are @samp{none}, @samp{ieee}, and @samp{alternative};\n+the default is @samp{none}, in which case the @code{__fp16} type is not\n defined.  @xref{Half-Precision}, for more information.\n \n @item -mstructure-size-boundary=@var{n}\n@@ -9445,9 +9444,9 @@ Generate code for the Thumb instruction set.  The default is to\n use the 32-bit ARM instruction set.\n This option automatically enables either 16-bit Thumb-1 or\n mixed 16/32-bit Thumb-2 instructions based on the @option{-mcpu=@var{name}}\n-and @option{-march=@var{name}} options. This option is not passed to the \n+and @option{-march=@var{name}} options.  This option is not passed to the\n assembler. If you want to force assembler files to be interpreted as Thumb code,\n-either add a @samp{.thumb} directive to the source or pass the @option{-mthumb} \n+either add a @samp{.thumb} directive to the source or pass the @option{-mthumb}\n option directly to the assembler by prefixing it with @option{-Wa}.\n \n @item -mtpcs-frame\n@@ -9467,15 +9466,15 @@ not call any other functions.)  The default is @option{-mno-apcs-leaf-frame}.\n Gives all externally visible functions in the file being compiled an ARM\n instruction set header which switches to Thumb mode before executing the\n rest of the function.  This allows these functions to be called from\n-non-interworking code. This option is not valid in AAPCS configurations\n+non-interworking code.  This option is not valid in AAPCS configurations\n because interworking is enabled by default.\n \n @item -mcaller-super-interworking\n @opindex mcaller-super-interworking\n Allows calls via function pointers (including virtual functions) to\n execute correctly regardless of whether the target code has been\n compiled for interworking or not.  There is a small overhead in the cost\n-of executing a function pointer if this option is enabled. This option \n+of executing a function pointer if this option is enabled.  This option\n is not valid in AAPCS configurations because interworking is enabled\n by default.\n \n@@ -9740,7 +9739,7 @@ one application per core programming model. Proper start files\n and link scripts will be used to support Core B. This option\n defines @code{__BFIN_COREB}. When this option is used, coreb_main\n should be used instead of main. It must be used with\n-@option{-mmulticore}. \n+@option{-mmulticore}.\n \n @item -msdram\n @opindex msdram\n@@ -11477,7 +11476,7 @@ Setting the rounding of floating-point operations to less than the default\n libraries assume that extended precision (80 bit) floating-point operations\n are enabled by default; routines in such libraries could suffer significant\n loss of accuracy, typically through so-called \"catastrophic cancellation\",\n-when this option is used to set the precision to less than extended precision. \n+when this option is used to set the precision to less than extended precision.\n \n @item -mstackrealign\n @opindex mstackrealign\n@@ -12925,7 +12924,6 @@ register.  The default for this option is 4, but note that there's a\n \n @end table\n \n-\n @node MIPS Options\n @subsection MIPS Options\n @cindex MIPS options\n@@ -13063,7 +13061,7 @@ Generate (do not generate) MIPS16 code.  If GCC is targetting a\n MIPS32 or MIPS64 architecture, it will make use of the MIPS16e ASE@.\n \n MIPS16 code generation can also be controlled on a per-function basis\n-by means of @code{mips16} and @code{nomips16} attributes.  \n+by means of @code{mips16} and @code{nomips16} attributes.\n @xref{Function Attributes}, for more information.\n \n @item -mflip-mips16\n@@ -14407,16 +14405,16 @@ Software floating point emulation is provided if you use the\n @itemx -mdouble-float\n @opindex msingle-float\n @opindex mdouble-float\n-Generate code for single or double-precision floating point operations. \n-@option{-mdouble-float} implies @option{-msingle-float}. \n+Generate code for single or double-precision floating point operations.\n+@option{-mdouble-float} implies @option{-msingle-float}.\n \n @item -msimple-fpu\n @opindex msimple-fpu\n Do not generate sqrt and div instructions for hardware floating point unit.\n \n @item -mfpu\n @opindex mfpu\n-Specify type of floating point unit.  Valid values are @var{sp_lite} \n+Specify type of floating point unit.  Valid values are @var{sp_lite}\n (equivalent to -msingle-float -msimple-fpu), @var{dp_lite} (equivalent\n to -mdouble-float -msimple-fpu), @var{sp_full} (equivalent to -msingle-float),\n and @var{dp_full} (equivalent to -mdouble-float).\n@@ -15074,7 +15072,7 @@ Compile code for big endian mode.  This is the default.\n \n @item -mel\n @opindex mel\n-Compile code for little endian mode. \n+Compile code for little endian mode.\n \n @item -mnhwloop\n @opindex mnhwloop\n@@ -15086,7 +15084,7 @@ Enable generate unaligned load and store instruction.\n \n @item -mmac\n @opindex mmac\n-Enable the use of multiply-accumulate instructions. Disabled by default. \n+Enable the use of multiply-accumulate instructions. Disabled by default.\n \n @item -mscore5\n @opindex mscore5\n@@ -15221,10 +15219,6 @@ Use 32-bit offsets in @code{switch} tables.  The default is to use\n @opindex mbitops\n Enable the use of bit manipulation instructions on SH2A.\n \n-@item -mfmovd\n-@opindex mfmovd\n-Enable the use of the instruction @code{fmovd}.\n-\n @item -mhitachi\n @opindex mhitachi\n Comply with the calling conventions defined by Renesas.\n@@ -15759,7 +15753,7 @@ generate the branch hint.\n @opindex mhint-max-distance\n The encoding of the branch hint instruction limits the hint to be within\n 256 instructions of the branch it is effecting.  By default, GCC makes\n-sure it is within 125. \n+sure it is within 125.\n \n @item -msafe-hints\n @opindex msafe-hints\n@@ -16045,7 +16039,7 @@ appropriately.\n @item -mpe-aligned-commons\n @opindex mpe-aligned-commons\n This option is available for Cygwin and MinGW targets.  It\n-specifies that the GNU extension to the PE file format that \n+specifies that the GNU extension to the PE file format that\n permits the correct alignment of COMMON variables should be\n used when generating code.  It will be enabled by default if\n GCC detects that the target assembler found during configuration\n@@ -16306,19 +16300,19 @@ Use it to conform to a non-default application binary interface.\n In C code, controls the placement of uninitialized global variables.\n Unix C compilers have traditionally permitted multiple definitions of\n such variables in different compilation units by placing the variables\n-in a common block.  \n-This is the behavior specified by @option{-fcommon}, and is the default \n-for GCC on most targets.  \n+in a common block.\n+This is the behavior specified by @option{-fcommon}, and is the default\n+for GCC on most targets.\n On the other hand, this behavior is not required by ISO C, and on some\n targets may carry a speed or code size penalty on variable references.\n-The @option{-fno-common} option specifies that the compiler should place \n+The @option{-fno-common} option specifies that the compiler should place\n uninitialized global variables in the data section of the object file,\n rather than generating them as common blocks.\n-This has the effect that if the same variable is declared \n+This has the effect that if the same variable is declared\n (without @code{extern}) in two different compilations,\n you will get a multiple-definition error when you link them.\n-In this case, you must compile with @option{-fcommon} instead.  \n-Compiling with @option{-fno-common} is useful on targets for which \n+In this case, you must compile with @option{-fcommon} instead.\n+Compiling with @option{-fno-common} is useful on targets for which\n it provides better performance, or if you wish to verify that the\n program will work on other systems which always treat uninitialized\n variable declarations this way."}]}