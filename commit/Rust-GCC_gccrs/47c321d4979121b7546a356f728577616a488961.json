{"sha": "47c321d4979121b7546a356f728577616a488961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjMzIxZDQ5NzkxMjFiNzU0NmEzNTZmNzI4NTc3NjE2YTQ4ODk2MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-24T15:26:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-24T15:26:17Z"}, "message": "bitmap.c (INLINE): Do not define.\n\n\t* bitmap.c (INLINE): Do not define.\n\t(bitmap_elem_to_freelist, bitmap_element_free,\n\tbitmap_element_allocate, bitmap_clear, bitmap_element_zerop,\n\tbitmap_element_link, bitmap_find_bit): Use inline keyword/macro.\n\nFrom-SVN: r91168", "tree": {"sha": "c4fd754f1be6e9ac3538f5a0f8d7f5b28b3d40a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4fd754f1be6e9ac3538f5a0f8d7f5b28b3d40a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c321d4979121b7546a356f728577616a488961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c321d4979121b7546a356f728577616a488961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c321d4979121b7546a356f728577616a488961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c321d4979121b7546a356f728577616a488961/comments", "author": null, "committer": null, "parents": [{"sha": "9c4eeb5db4757cc9a83ca97e75c75ae66699d165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4eeb5db4757cc9a83ca97e75c75ae66699d165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4eeb5db4757cc9a83ca97e75c75ae66699d165"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "a17df97c521c1bd4bf0371e8ac3dfdf665016edc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c321d4979121b7546a356f728577616a488961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c321d4979121b7546a356f728577616a488961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c321d4979121b7546a356f728577616a488961", "patch": "@@ -1,3 +1,10 @@\n+2004-11-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* bitmap.c (INLINE): Do not define.\n+\t(bitmap_elem_to_freelist, bitmap_element_free,\n+\tbitmap_element_allocate, bitmap_clear, bitmap_element_zerop,\n+\tbitmap_element_link, bitmap_find_bit): Use inline keyword/macro.\n+\n 2004-11-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-dom.c (cprop_into_successor_phis): Remove code to"}, {"sha": "cbedf2c7b1adf688daa580207d0b94e7a59de75b", "filename": "gcc/bitmap.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c321d4979121b7546a356f728577616a488961/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c321d4979121b7546a356f728577616a488961/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=47c321d4979121b7546a356f728577616a488961", "patch": "@@ -29,16 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"bitmap.h\"\n \n-/* Obstack to allocate bitmap elements from.  */\n-\f\n-#ifndef INLINE\n-#ifndef __GNUC__\n-#define INLINE\n-#else\n-#define INLINE __inline__\n-#endif\n-#endif\n-\n /* Global data */\n bitmap_element bitmap_zero_bits;  /* An element of all zero bits.  */\n bitmap_obstack bitmap_default_obstack;    /* The default bitmap obstack.  */\n@@ -56,7 +46,7 @@ static bitmap_element *bitmap_find_bit (bitmap, unsigned int);\n \f\n \n /* Add ELEM to the appropriate freelist.  */\n-static INLINE void\n+static inline void\n bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n {\n   bitmap_obstack *bit_obstack = head->obstack;\n@@ -76,7 +66,7 @@ bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n /* Free a bitmap element.  Since these are allocated off the\n    bitmap_obstack, \"free\" actually means \"put onto the freelist\".  */\n \n-static INLINE void\n+static inline void\n bitmap_element_free (bitmap head, bitmap_element *elt)\n {\n   bitmap_element *next = elt->next;\n@@ -104,7 +94,7 @@ bitmap_element_free (bitmap head, bitmap_element *elt)\n \f\n /* Allocate a bitmap element.  The bits are cleared, but nothing else is.  */\n \n-static INLINE bitmap_element *\n+static inline bitmap_element *\n bitmap_element_allocate (bitmap head)\n {\n   bitmap_element *element;\n@@ -150,7 +140,7 @@ bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n \n /* Clear a bitmap by freeing the linked list.  */\n \n-INLINE void\n+inline void\n bitmap_clear (bitmap head)\n {\n   bitmap_element *element, *next;\n@@ -268,7 +258,7 @@ bitmap_malloc_free (bitmap map)\n \f\n /* Return nonzero if all bits in an element are zero.  */\n \n-static INLINE int\n+static inline int\n bitmap_element_zerop (bitmap_element *element)\n {\n #if BITMAP_ELEMENT_WORDS == 2\n@@ -286,7 +276,7 @@ bitmap_element_zerop (bitmap_element *element)\n \f\n /* Link the bitmap element into the current bitmap linked list.  */\n \n-static INLINE void\n+static inline void\n bitmap_element_link (bitmap head, bitmap_element *element)\n {\n   unsigned int indx = element->indx;\n@@ -421,7 +411,7 @@ bitmap_copy (bitmap to, bitmap from)\n    would hold the bitmap's bit to make eventual allocation\n    faster.  */\n \n-static INLINE bitmap_element *\n+static inline bitmap_element *\n bitmap_find_bit (bitmap head, unsigned int bit)\n {\n   bitmap_element *element;"}]}