{"sha": "a6363ed30ea916a6cc1058cffce907c25aadcf8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzNjNlZDMwZWE5MTZhNmNjMTA1OGNmZmNlOTA3YzI1YWFkY2Y4ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:29:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:29:53Z"}, "message": "[multiple changes]\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Selected_Component, Has_Dereference):\n\tRefine check on illegal calls to entities within a task body,\n\twhen the entity is declared in an object of the same type. In\n\ta generic context there might be no explicit dereference but if\n\tthe prefix includes an access type the construct is legal.\n\n2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* rtsfind.ads, rtsfind.adb (RE_Id, RE_Unit_Table): add\n\tRE_Default_Priority.\n\n2016-04-18  Bob Duff  <duff@adacore.com>\n\n\t* sem_prag.adb (Check_Arg_Is_Local_Name): Don't do the check\n\tif the pragma came from an aspect specification.\n\n2016-04-18  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat1drv.adb, contracts.adb: Minor reformatting and wording fixes.\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): To suppress\n\tsuperfluous conformance check on an inlined body with a previous\n\tspec, use the fact that the generated declaration does not come\n\tfrom source. We must treat the entity as coming from source to\n\tenable some back-end inlining when pragma appears after the body.\n\nFrom-SVN: r235136", "tree": {"sha": "253f1b50bcf0bf51e78aa33de2b3f24e047d7b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/253f1b50bcf0bf51e78aa33de2b3f24e047d7b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6363ed30ea916a6cc1058cffce907c25aadcf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6363ed30ea916a6cc1058cffce907c25aadcf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6363ed30ea916a6cc1058cffce907c25aadcf8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6363ed30ea916a6cc1058cffce907c25aadcf8d/comments", "author": null, "committer": null, "parents": [{"sha": "4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9"}], "stats": {"total": 146, "additions": 138, "deletions": 8}, "files": [{"sha": "c1be18cec01a39c10233ab47e6b9fb35cdcf1860", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -1,3 +1,33 @@\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component, Has_Dereference):\n+\tRefine check on illegal calls to entities within a task body,\n+\twhen the entity is declared in an object of the same type. In\n+\ta generic context there might be no explicit dereference but if\n+\tthe prefix includes an access type the construct is legal.\n+\n+2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* rtsfind.ads, rtsfind.adb (RE_Id, RE_Unit_Table): add\n+\tRE_Default_Priority.\n+\n+2016-04-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Check_Arg_Is_Local_Name): Don't do the check\n+\tif the pragma came from an aspect specification.\n+\n+2016-04-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat1drv.adb, contracts.adb: Minor reformatting and wording fixes.\n+\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): To suppress\n+\tsuperfluous conformance check on an inlined body with a previous\n+\tspec, use the fact that the generated declaration does not come\n+\tfrom source. We must treat the entity as coming from source to\n+\tenable some back-end inlining when pragma appears after the body.\n+\n 2016-04-18  Gary Dismukes  <dismukes@adacore.com>\n \n \t* lib-xref-spark_specific.adb, par-ch2.adb, errout.ads,"}, {"sha": "4a2121f72ca8f063899674155f0bb1257a71668b", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 74, "deletions": 5, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -2010,6 +2010,10 @@ package body Contracts is\n          --  The insertion node after which all pragma Check equivalents are\n          --  inserted.\n \n+         function Is_Prologue_Renaming (Decl : Node_Id) return Boolean;\n+         --  Determine whether arbitrary declaration Decl denotes a renaming of\n+         --  a discriminant or protection field _object.\n+\n          procedure Merge_Preconditions (From : Node_Id; Into : Node_Id);\n          --  Merge two class-wide preconditions by \"or else\"-ing them. The\n          --  changes are accumulated in parameter Into. Update the error\n@@ -2030,6 +2034,52 @@ package body Contracts is\n          --  Collect all preconditions of subprogram Subp_Id and prepend their\n          --  pragma Check equivalents to the declarations of the body.\n \n+         --------------------------\n+         -- Is_Prologue_Renaming --\n+         --------------------------\n+\n+         function Is_Prologue_Renaming (Decl : Node_Id) return Boolean is\n+            Nam  : Node_Id;\n+            Obj  : Entity_Id;\n+            Pref : Node_Id;\n+            Sel  : Node_Id;\n+\n+         begin\n+            if Nkind (Decl) = N_Object_Renaming_Declaration then\n+               Obj := Defining_Entity (Decl);\n+               Nam := Name (Decl);\n+\n+               if Nkind (Nam) = N_Selected_Component then\n+                  Pref := Prefix (Nam);\n+                  Sel  := Selector_Name (Nam);\n+\n+                  --  A discriminant renaming appears as\n+                  --    Discr : constant ... := Prefix.Discr;\n+\n+                  if Ekind (Obj) = E_Constant\n+                    and then Is_Entity_Name (Sel)\n+                    and then Present (Entity (Sel))\n+                    and then Ekind (Entity (Sel)) = E_Discriminant\n+                  then\n+                     return True;\n+\n+                  --  A protection field renaming appears as\n+                  --    Prot : ... := _object._object;\n+\n+                  elsif Ekind (Obj) = E_Variable\n+                    and then Nkind (Pref) = N_Identifier\n+                    and then Chars (Pref) = Name_uObject\n+                    and then Nkind (Sel) = N_Identifier\n+                    and then Chars (Sel) = Name_uObject\n+                  then\n+                     return True;\n+                  end if;\n+               end if;\n+            end if;\n+\n+            return False;\n+         end Is_Prologue_Renaming;\n+\n          -------------------------\n          -- Merge_Preconditions --\n          -------------------------\n@@ -2278,15 +2328,34 @@ package body Contracts is\n       --  Start of processing for Process_Preconditions\n \n       begin\n-         --  Find the last internally generated declaration, starting from the\n-         --  top of the body declarations. This ensures that discriminals and\n-         --  subtypes are properly visible to the pragma Check equivalents.\n+         --  Find the proper insertion point for all pragma Check equivalents\n \n          if Present (Decls) then\n             Decl := First (Decls);\n             while Present (Decl) loop\n-               exit when Comes_From_Source (Decl);\n-               Insert_Node := Decl;\n+\n+               --  First source declaration terminates the search, because all\n+               --  preconditions must be evaluated prior to it, by definition.\n+\n+               if Comes_From_Source (Decl) then\n+                  exit;\n+\n+               --  Certain internally generated object renamings such as those\n+               --  for discriminants and protection fields must be elaborated\n+               --  before the preconditions are evaluated, as their expressions\n+               --  may mention the discriminants.\n+\n+               elsif Is_Prologue_Renaming (Decl) then\n+                  Insert_Node := Decl;\n+\n+               --  Otherwise the declaration does not come from source. This\n+               --  also terminates the search, because internal code may raise\n+               --  exceptions which should not preempt the preconditions.\n+\n+               else\n+                  exit;\n+               end if;\n+\n                Next (Decl);\n             end loop;\n          end if;"}, {"sha": "220ad93f12946844abca491226c0ff753fd20ce5", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -1047,7 +1047,7 @@ begin\n \n       --  In GNATprove mode, force loading of System unit to ensure that\n       --  System.Interrupt_Priority is available to GNATprove for the\n-      --  generation of VCs for related to Ceiling Priority.\n+      --  generation of VCs related to ceiling priority.\n \n       if GNATprove_Mode then\n          declare"}, {"sha": "842c65bc7610e9bfb1db68b5a1b54835c29591fa", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -725,6 +725,7 @@ package Rtsfind is\n      RE_Address,                         -- System\n      RE_Any_Priority,                    -- System\n      RE_Bit_Order,                       -- System\n+     RE_Default_Priority,                -- System\n      RE_High_Order_First,                -- System\n      RE_Interrupt_Priority,              -- System\n      RE_Lib_Stop,                        -- System\n@@ -1957,6 +1958,7 @@ package Rtsfind is\n      RE_Address                          => System,\n      RE_Any_Priority                     => System,\n      RE_Bit_Order                        => System,\n+     RE_Default_Priority                 => System,\n      RE_High_Order_First                 => System,\n      RE_Interrupt_Priority               => System,\n      RE_Lib_Stop                         => System,"}, {"sha": "80e94319adb84e016abd5418156b379342ffe438", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -4221,6 +4221,13 @@ package body Sem_Ch4 is\n          if Nkind (Nod) = N_Explicit_Dereference then\n             return True;\n \n+         --  When expansion is disabled an explicit dereference may not have\n+         --  been inserted, but if this is an access type the indirection makes\n+         --  the call safe.\n+\n+         elsif Is_Access_Type (Etype (Nod)) then\n+            return True;\n+\n          elsif Nkind_In (Nod, N_Indexed_Component, N_Selected_Component) then\n             return Has_Dereference (Prefix (Nod));\n "}, {"sha": "86ff88175d1dbbb43b201fd391093d795a214bb0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -3378,10 +3378,13 @@ package body Sem_Ch6 is\n                Conformant := True;\n \n             --  Conversely, the spec may have been generated for specless body\n-            --  with an inline pragma.\n+            --  with an inline pragma. The entity comes from source, which is\n+            --  both semantically correct and necessary for proper inlining.\n+            --  The subprogram declaration itself is not in the source.\n \n             elsif Comes_From_Source (N)\n-              and then not Comes_From_Source (Spec_Id)\n+              and then Present (Spec_Decl)\n+              and then not Comes_From_Source (Spec_Decl)\n               and then Has_Pragma_Inline (Spec_Id)\n             then\n                Conformant := True;"}, {"sha": "b9c3c8bfe7b6784de6cbc6354fe5b5016ad70e45", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6363ed30ea916a6cc1058cffce907c25aadcf8d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a6363ed30ea916a6cc1058cffce907c25aadcf8d", "patch": "@@ -4539,6 +4539,25 @@ package body Sem_Prag is\n          Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n \n       begin\n+         --  If this pragma came from an aspect specification, we don't want to\n+         --  check for this error, because that would cause spurious errors, in\n+         --  case a type is frozen in a scope more nested than the type. The\n+         --  aspect itself of course can't be anywhere but on the declaration\n+         --  itself.\n+\n+         if Nkind (Arg) = N_Pragma_Argument_Association then\n+            if From_Aspect_Specification (Parent (Arg)) then\n+               return;\n+            end if;\n+\n+         --  Arg is the Expression of an N_Pragma_Argument_Association\n+\n+         else\n+            if From_Aspect_Specification (Parent (Parent (Arg))) then\n+               return;\n+            end if;\n+         end if;\n+\n          Analyze (Argx);\n \n          if Nkind (Argx) not in N_Direct_Name"}]}