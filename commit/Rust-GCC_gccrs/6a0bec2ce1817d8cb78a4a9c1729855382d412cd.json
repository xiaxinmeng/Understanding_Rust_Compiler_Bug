{"sha": "6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwYmVjMmNlMTgxN2Q4Y2I3OGE0YTljMTcyOTg1NTM4MmQ0MTJjZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T00:38:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T00:38:38Z"}, "message": "tree.h (immediate_size_expand): Delete.\n\n        * tree.h (immediate_size_expand): Delete.\n        * stor-layout.c (immediate_size_expand): Delete.\n        (variable_size): Don't look at it.\n        * c-decl.c (push_parm_decl): Don't frob immediate_size_expand.\n        (start_function): Likewise.\n        * cfgexpand.c (construct_exit_block): Likewise.\n        * function.c (init_function_start, expand_function_end): Likewise.\n        * tree-optimize.c (tree_rest_of_compilation): Likewise.\ncp/\n        * decl.c (start_preparsed_function): Don't set immediate_size_expand.\n        * method.c (use_thunk): Likewise.\nfortran/\n        * trans-decl.c (gfc_generate_function_code): Don't set\n        immediate_size_expand.\n        (gfc_generate_constructors): Likewise.\n\nFrom-SVN: r83946", "tree": {"sha": "11be711913612228df3a6979d2909f5aa10224d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11be711913612228df3a6979d2909f5aa10224d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/comments", "author": null, "committer": null, "parents": [{"sha": "1730c8f5a7e5dfdbb208ce8ae60b7630d1bb5bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1730c8f5a7e5dfdbb208ce8ae60b7630d1bb5bc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1730c8f5a7e5dfdbb208ce8ae60b7630d1bb5bc4"}], "stats": {"total": 79, "additions": 25, "deletions": 54}, "files": [{"sha": "bcf1b222730f160dd642e63e280a564c6c201a87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -1,3 +1,14 @@\n+2004-06-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.h (immediate_size_expand): Delete.\n+\t* stor-layout.c (immediate_size_expand): Delete.\n+\t(variable_size): Don't look at it.\n+\t* c-decl.c (push_parm_decl): Don't frob immediate_size_expand.\n+\t(start_function): Likewise.\n+\t* cfgexpand.c (construct_exit_block): Likewise.\n+\t* function.c (init_function_start, expand_function_end): Likewise.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\n 2004-06-30  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (gimplify_compound_lval): Take fallback argument"}, {"sha": "16eb49d26e5066917bf62bd8b88352e8559ca4d8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -3028,11 +3028,6 @@ push_parm_decl (tree parm)\n {\n   tree decl;\n \n-  /* Don't attempt to expand sizes while parsing this decl.\n-     (We can get here with i_s_e 1 somehow from Objective-C.)  */\n-  int save_immediate_size_expand = immediate_size_expand;\n-  immediate_size_expand = 0;\n-\n   decl = grokdeclarator (TREE_VALUE (TREE_PURPOSE (parm)),\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)),\n \t\t\t PARM, 0, NULL);\n@@ -3041,8 +3036,6 @@ push_parm_decl (tree parm)\n   decl = pushdecl (decl);\n \n   finish_decl (decl, NULL_TREE, NULL_TREE);\n-\n-  immediate_size_expand = save_immediate_size_expand;\n }\n \n /* Mark all the parameter declarations to date as forward decls.\n@@ -5589,7 +5582,6 @@ start_function (tree declspecs, tree declarator, tree attributes)\n {\n   tree decl1, old_decl;\n   tree restype;\n-  int old_immediate_size_expand = immediate_size_expand;\n \n   current_function_returns_value = 0;  /* Assume, until we see it does.  */\n   current_function_returns_null = 0;\n@@ -5603,18 +5595,12 @@ start_function (tree declspecs, tree declarator, tree attributes)\n      error message in c_finish_bc_stmt.  */\n   c_break_label = c_cont_label = size_zero_node;\n \n-  /* Don't expand any sizes in the return type of the function.  */\n-  immediate_size_expand = 0;\n-\n   decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, NULL);\n \n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */\n   if (decl1 == 0)\n-    {\n-      immediate_size_expand = old_immediate_size_expand;\n-      return 0;\n-    }\n+    return 0;\n \n   decl_attributes (&decl1, attributes, 0);\n \n@@ -5793,8 +5779,6 @@ start_function (tree declspecs, tree declarator, tree attributes)\n   DECL_RESULT (current_function_decl)\n     = build_decl (RESULT_DECL, NULL_TREE, restype);\n \n-  immediate_size_expand = old_immediate_size_expand;\n-\n   start_fname_decls ();\n \n   return 1;\n@@ -6174,7 +6158,6 @@ store_parm_decls (void)\n      call expand_expr to calculate the size of a variable-sized array.\n      We haven't necessarily assigned RTL to all variables yet, so it's\n      not safe to try to expand expressions involving them.  */\n-  immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n }\n \f"}, {"sha": "c6505767c66106ba3b9a465e1264a1f874557233", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -311,12 +311,6 @@ construct_exit_block (void)\n   basic_block exit_block;\n   edge e, e2, next;\n \n-  /* We hard-wired immediate_size_expand to zero above.\n-     expand_function_end will decrement this variable.  So, we set the\n-     variable to one here, so that after the decrement it will remain\n-     zero.  */\n-  immediate_size_expand = 1;\n-\n   /* Make sure the locus is set to the end of the function, so that \n      epilogue line numbers and warnings are set properly.  */\n #ifdef USE_MAPPED_LOCATION"}, {"sha": "2e89bcc0ff8a06e764a635c97d25ad6fd1ed734b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -1,3 +1,8 @@\n+2004-06-30  Richard Henderson  (rth@redhat.com>\n+\n+\t* decl.c (start_preparsed_function): Don't set immediate_size_expand.\n+\t* method.c (use_thunk): Likewise.\n+\n 2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* call.c (build_over_call), typeck.c (build_function_call): Call"}, {"sha": "ee7d76f380285475a39a03b44cc9e87e2d3083b8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -9733,7 +9733,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      call expand_expr to calculate the size of a variable-sized array.\n      We haven't necessarily assigned RTL to all variables yet, so it's\n      not safe to try to expand expressions involving them.  */\n-  immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n \n   /* Start the statement-tree, start the tree now.  */"}, {"sha": "327adc5e803ebad52bf0c957cd332aa6cdc18928", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -430,9 +430,6 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n       cfun = 0;\n-      /* Because init_function_start increments this, we must\n-\t decrement it.  */\n-      immediate_size_expand--;\n       TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n     }\n   else"}, {"sha": "d19b4f5083d82857f3082cd60f74ea8ae05986da", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -1,3 +1,9 @@\n+2004-06-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans-decl.c (gfc_generate_function_code): Don't set\n+\timmediate_size_expand.\n+\t(gfc_generate_constructors): Likewise.\n+\n 2004-06-30  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/16161"}, {"sha": "0b09555e6113392f8abde74397cb407055f48c38", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -2035,7 +2035,6 @@ gfc_generate_function_code (gfc_namespace * ns)\n      call expand_expr to calculate the size of a variable-sized array.\n      We haven't necessarily assigned RTL to all variables yet, so it's\n      not safe to try to expand expressions involving them.  */\n-  immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n \n   /* Will be created as needed.  */\n@@ -2191,8 +2190,6 @@ gfc_generate_constructors (void)\n \n   cfun->x_whole_function_mode_p = 1;\n \n-  immediate_size_expand = 0;\n-\n   pushlevel (0);\n \n   for (; gfc_static_ctors; gfc_static_ctors = TREE_CHAIN (gfc_static_ctors))"}, {"sha": "f6c73a64a19b4312b7afcd3706cff30289e08a36", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -6288,9 +6288,6 @@ init_function_start (tree subr)\n {\n   prepare_function_start (subr);\n \n-  /* Within function body, compute a type's size as soon it is laid out.  */\n-  immediate_size_expand++;\n-\n   /* Prevent ever trying to delete the first instruction of a\n      function.  Also tell final how to output a linenum before the\n      function prologue.  Note linenums could be missing, e.g. when\n@@ -6709,10 +6706,6 @@ expand_function_end (void)\n   while (in_sequence_p ())\n     end_sequence ();\n \n-  /* Outside function body, can't compute type's actual size\n-     until next function's body starts.  */\n-  immediate_size_expand--;\n-\n   clear_pending_stack_adjust ();\n   do_pending_stack_adjust ();\n "}, {"sha": "94bc46fb564b8614156a5ab4f08ee7f49e4534dc", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -73,11 +73,6 @@ extern void debug_rli (record_layout_info);\n \n static GTY(()) tree pending_sizes;\n \n-/* Nonzero means cannot safely call expand_expr now,\n-   so put variable sizes onto `pending_sizes' instead.  */\n-\n-int immediate_size_expand;\n-\n /* Show that REFERENCE_TYPES are internal and should be Pmode.  Called only\n    by front end.  */\n \n@@ -154,7 +149,7 @@ variable_size (tree size)\n   if (TREE_CODE (save) == SAVE_EXPR)\n     SAVE_EXPR_PERSISTENT_P (save) = 1;\n \n-  if (!immediate_size_expand && cfun && cfun->x_dont_save_pending_sizes_p)\n+  if (cfun && cfun->x_dont_save_pending_sizes_p)\n     /* The front-end doesn't want us to keep a list of the expressions\n        that determine sizes for variable size objects.  Trust it.  */\n     return size;\n@@ -169,10 +164,7 @@ variable_size (tree size)\n       return size_one_node;\n     }\n \n-  if (immediate_size_expand)\n-    expand_expr (save, const0_rtx, VOIDmode, 0);\n-  else\n-    put_pending_size (save);\n+  put_pending_size (save);\n \n   return size;\n }"}, {"sha": "a4ee979d45f9af0b1bfa6d0814c09a5ec249f1e5", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -474,7 +474,6 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n      call expand_expr to calculate the size of a variable-sized array.\n      We haven't necessarily assigned RTL to all variables yet, so it's\n      not safe to try to expand expressions involving them.  */\n-  immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n \n   node = cgraph_node (fndecl);"}, {"sha": "9890bf8268f56a291f3715d5f0cdde54fc6835de", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0bec2ce1817d8cb78a4a9c1729855382d412cd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6a0bec2ce1817d8cb78a4a9c1729855382d412cd", "patch": "@@ -3295,11 +3295,6 @@ extern int real_zerop (tree);\n \n extern int pedantic_lvalues;\n \n-/* Nonzero means can safely call expand_expr now;\n-   otherwise layout_type puts variable sizes onto `pending_sizes' instead.  */\n-\n-extern int immediate_size_expand;\n-\n /* Points to the FUNCTION_DECL of the function whose body we are reading.  */\n \n extern GTY(()) tree current_function_decl;"}]}