{"sha": "bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyZjdiYjg2NGU4ZTc1ZGI4MTE0Yzc2YzM2ZGI3NjFlMGQ2NWY3ZQ==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2004-07-15T21:18:10Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2004-07-15T21:18:10Z"}, "message": "m68k.c (output_move_qimode): Abort on an attempt to generate code which is generated by pushqi1 now\n\n2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n\n        * config/m68k/m68k.c (output_move_qimode): Abort on an attempt to\n        generate code which is generated by pushqi1 now\n        * config/m68k/m68k.h (MOVE_BY_PIECES_P): Remove.\n\nFrom-SVN: r84780", "tree": {"sha": "99e1d7df624d5b3524f1636139b24e76fafec23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99e1d7df624d5b3524f1636139b24e76fafec23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/comments", "author": null, "committer": null, "parents": [{"sha": "8abcb0f705f34e873fe2c2301f643af2b7f7f176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abcb0f705f34e873fe2c2301f643af2b7f7f176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8abcb0f705f34e873fe2c2301f643af2b7f7f176"}], "stats": {"total": 33, "additions": 8, "deletions": 25}, "files": [{"sha": "f0eb71fe793b213de36c50b3253369db557eeac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "patch": "@@ -1,3 +1,9 @@\n+2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\t* config/m68k/m68k.c (output_move_qimode): Abort on an attempt to \n+\tgenerate code which is generated by pushqi1 now\n+\t* config/m68k/m68k.h (MOVE_BY_PIECES_P): Remove.\n+\n 2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n \n \t* combine.c (simplify_set): match the mode of the constant 0 with "}, {"sha": "174c3a6a33533a0215f8dd66617c2b5c023551c1", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "patch": "@@ -1780,33 +1780,15 @@ output_move_himode (rtx *operands)\n const char *\n output_move_qimode (rtx *operands)\n {\n-  rtx xoperands[4];\n-\n-  /* This is probably useless, since it loses for pushing a struct\n-     of several bytes a byte at a time.\t */\n   /* 68k family always modifies the stack pointer by at least 2, even for\n      byte pushes.  The 5200 (ColdFire) does not do this.  */\n   if (GET_CODE (operands[0]) == MEM\n       && GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n       && XEXP (XEXP (operands[0], 0), 0) == stack_pointer_rtx\n       && ! ADDRESS_REG_P (operands[1])\n       && ! TARGET_COLDFIRE)\n-    {\n-      xoperands[1] = operands[1];\n-      xoperands[2]\n-\t= gen_rtx_MEM (QImode,\n-\t\t       gen_rtx_PLUS (VOIDmode, stack_pointer_rtx, const1_rtx));\n-      /* Just pushing a byte puts it in the high byte of the halfword.\t*/\n-      /* We must put it in the low-order, high-numbered byte.  */\n-      if (!reg_mentioned_p (stack_pointer_rtx, operands[1]))\n-\t{\n-\t  xoperands[3] = stack_pointer_rtx;\n-\t  output_asm_insn (\"subq%.l #2,%3\\n\\tmove%.b %1,%2\", xoperands);\n-\t}\n-      else\n-\toutput_asm_insn (\"move%.b %1,%-\\n\\tmove%.b %@,%2\", xoperands);\n-      return \"\";\n-    }\n+    /* generated by pushqi1 pattern now */\n+    abort ();\n \n   /* clr and st insns on 68000 read before writing.\n      This isn't so on the 68010, but we have no TARGET_68010.  */"}, {"sha": "bcfa68ebd8e745a6277af5e84e5779d4b4f83719", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2f7bb864e8e75db8114c76c36db761e0d65f7e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=bc2f7bb864e8e75db8114c76c36db761e0d65f7e", "patch": "@@ -675,11 +675,6 @@ extern enum reg_class regno_reg_class[];\n    On the ColdFire, sp@- in a byte insn pushes just a byte.  */\n #define PUSH_ROUNDING(BYTES) (TARGET_COLDFIRE ? BYTES : ((BYTES) + 1) & ~1)\n \n-/* We want to avoid trying to push bytes.  */\n-#define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (move_by_pieces_ninsns (SIZE, ALIGN) < MOVE_RATIO \\\n-    && (((SIZE) >=16 && (ALIGN) >= 16) || (TARGET_COLDFIRE)))\n-\n #define FIRST_PARM_OFFSET(FNDECL) 8\n \n /* On the 68000, the RTS insn cannot pop anything."}]}