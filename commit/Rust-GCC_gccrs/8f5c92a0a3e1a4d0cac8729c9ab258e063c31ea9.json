{"sha": "8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1YzkyYTBhM2UxYTRkMGNhYzg3MjljOWFiMjU4ZTA2M2MzMWVhOQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-08-09T04:29:59Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-08-09T04:29:59Z"}, "message": "More AWT/Swing merge from GNU Classpath.\n\nFrom-SVN: r56148", "tree": {"sha": "0e16402e5ed865c72af6ae2d570d59bb0835b991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e16402e5ed865c72af6ae2d570d59bb0835b991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/comments", "author": null, "committer": null, "parents": [{"sha": "7bde45b2eb84502b62e77e46d947e46dcbd333d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bde45b2eb84502b62e77e46d947e46dcbd333d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bde45b2eb84502b62e77e46d947e46dcbd333d6"}], "stats": {"total": 1332, "additions": 1332, "deletions": 0}, "files": [{"sha": "7e689bb93048a7bfba54fc5de99b228c9c352ff2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -393,6 +393,18 @@\n \tjava/awt/Shape.java, java/awt/SystemColor.java, java/awt/Toolkit.java,\n \tjava/awt/Transparency.java, java/awt/Window.java: Merge from classpath.\n \n+\t* java/awt/im/spi/InputMethod.java,\n+\tjava/awt/im/spi/InputMethodContext.java,\n+\tjava/awt/im/spi/InputMethodDescriptor.java,\n+\tjava/awt/image/renderable/ContextualRenderedImageFactory.java,\n+\tjava/awt/image/renderable/ParameterBlock.java,\n+\tjava/awt/image/renderable/RenderContext.java,\n+\tjava/awt/image/renderable/RenderableImage.java,\n+\tjava/awt/image/renderable/RenderableImageOp.java,\n+\tjava/awt/image/renderable/RenderableImageProducer.java,\n+\tjava/awt/image/renderable/RenderedImageFactory.java: New files from\n+\tclasspath.\n+\n \t* Makefile.am: Add new files.\n \t* Makefile.in: Rebuilt.\n "}, {"sha": "8e7e0bccb3f58e1651cea125c0b35069041012d9", "filename": "libjava/java/awt/im/spi/InputMethod.java", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethod.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethod.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethod.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,240 @@\n+/* InputMethod.java -- defines an interface for complex text input\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.im.spi;\n+\n+import java.awt.AWTEvent;\n+import java.awt.Rectangle;\n+import java.util.Locale;\n+\n+/**\n+ * This interface supports complex text input, often for situations where\n+ * the text is more complex than a keyboard will accomodate. For example,\n+ * this can be used for Chinese, Japanese, and Korean, where multiple\n+ * keystrokes are necessary to compose text. This could also support things\n+ * like phonetic English, or reordering Thai.\n+ *\n+ * <p>These contexts can be loaded by the input method framework, using\n+ * {@link InputContext#selectInputMethod(Locale)}.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.3\n+ * @status updated to 1.4\n+ */\n+public interface InputMethod\n+{\n+  /**\n+   * Set the input method context, which ties the input method to a client\n+   * component. This is called once automatically when creating the input\n+   * method.\n+   *\n+   * @param context the context for this input method\n+   * @throws NullPointerException if context is null\n+   */\n+  void setInputMethodContext(InputMethodContext context);\n+\n+  /**\n+   * Sets the input locale. If the input method supports that locale, it\n+   * changes its behavior to be consistent with the locale and returns true.\n+   * Otherwise, it returns false. This is called by\n+   * {@link InputContext#selectInputMethod(Locale)} when the user specifies\n+   * a locale, or when the previously selected input method had a locale.\n+   *\n+   * @param locale the locale to use for input\n+   * @return true if the change is successful\n+   * @throws NullPointerException if locale is null\n+   */\n+  boolean setLocale(Locale locale);\n+\n+  /**\n+   * Returns the current input locale, or null if none is defined. This is\n+   * called by {@link InputContext#getLocale()}, or before switching input\n+   * methods.\n+   *\n+   * @return the current input locale, or null\n+   */\n+  Locale getLocale();\n+\n+  /**\n+   * Sets the allowed Unicode subsets that this input method can use. Null\n+   * indicates that all characters are allowed. This is called after creation,\n+   * or when switching to this input method, by\n+   * {@link InputContext#setCharacterSubsets(Character.Subset[])}.\n+   *\n+   * @param subsets the accepted subsets for this input method, or null for all\n+   */\n+  void setCharacterSubsets(Character.Subset[] subsets);\n+\n+  /**\n+   * Changes the enabled status of this input method. An enabled input method\n+   * accepts incoming events for composition and control purposes, while a\n+   * disabled input method ignores events (except for control purposes). This\n+   * is called by {@link InputContext#setCompositionEnabled(boolean)} or when\n+   * switching from an input method if the previous input method returned\n+   * without exception on {@link #isCompositionEnabled()}.\n+   *\n+   * @param enable whether to enable this input method\n+   * @throws UnsupportedOperationException if enabling/disabling is unsupported\n+   * @see #isCompositionEnabled()\n+   */\n+  void setCompositionEnabled(boolean enable);\n+\n+  /**\n+   * Find out if this input method is enabled. This is called by\n+   * {@link InputContext#isCompositionEnabled()}, or when switching input\n+   * methods via {@link InputContext#selectInputMethod(Locale)}.\n+   *\n+   * @return true if this input method is enabled\n+   * @throws UnsupportedOperationException if enabling/disabling is unsupported\n+   * @see #setCompositionEnabled(boolean)\n+   */\n+  boolean isCompositionEnabled();\n+\n+  /**\n+   * Starts a reconversion operation. The input method gets its text from the\n+   * client, using {@link InputMethodRequests#getSelectedText(Attribute[])}.\n+   * Then the composed and committed text produced by the operation is sent\n+   * back to the client using a sequence of InputMethodEvents. This is called\n+   * by {@link InputContext#reconvert()}.\n+   *\n+   * @throws UnsupportedOperationException if reconversion is unsupported\n+   */\n+  void reconvert();\n+\n+  /**\n+   * Dispatch an event to the input method. If input method support is enabled,\n+   * certain events are dispatched to the input method before the client\n+   * component or event listeners. The input method must either consume the\n+   * event or pass it on to the component. Instances of InputEvent, including\n+   * KeyEvent and MouseEvent, are given to this input method. This method is\n+   * called by {@link InputContext#dispatchEvent(AWTEvent)}.\n+   *\n+   * @param event the event to dispatch\n+   * @throws NullPointerException if event is null\n+   */\n+  void dispatchEvent(AWTEvent event);\n+\n+  /**\n+   * Notify this input method of changes in the client window. This is called\n+   * when notifications are enabled (see {@link\n+   * InputMethodContext#enableClientWindowNotification(InputMethod, boolean)},\n+   * if {@link #removeNotify(Component)} has not been called. The following\n+   * situations trigger a notification:<ul>\n+   * <li>The client window changes in location, size, visibility,\n+   * iconification, or is closed.</li>\n+   * <li>When enabling client notification (or on the first activation after\n+   * enabling if no client existed at the time).</li>\n+   * <li>When activating a new client after <code>removeNotify</code> was\n+   * called on a previous client.</li>\n+   * </ul>\n+   *\n+   * @param the client window's current bounds, or null\n+   */\n+  void notifyClientWindowChange(Rectangle bounds);\n+\n+  /**\n+   * Activate this input method for input processing. If the input method\n+   * provides its own windows, it should make them open and visible at this\n+   * time. This method is called when a client component receives a\n+   * FOCUS_GAINED event, or when switching to this input method from another\n+   * one. It is only called when the input method is inactive, assuming that\n+   * new instances begin in an inactive state.\n+   */\n+  void activate();\n+\n+  /**\n+   * Deactivate this input method, either temporarily or permanently for the\n+   * given client. If the input method provides its own windows, it should\n+   * only close those related to the current composition (such as a lookup\n+   * choice panel), while leaving more persistant windows (like a control\n+   * panel) open to avoid screen flicker. Before control is given to another\n+   * input method, {@link #hideWindows()} will be called on this instance.\n+   * This method is called when a client component receives a\n+   * FOCUS_LOST event, when switching to another input method, or before\n+   * {@link #removeNotify()} when the client is removed.\n+   *\n+   * @param isTemporary true if the focus change is temporary\n+   */\n+  void deactivate(boolean isTemporary);\n+\n+  /**\n+   * Close or hide all windows opened by this input method. This is called\n+   * before activating a different input method, and before calling\n+   * {@link #dispose()} on this instance. It is only called when the input\n+   * method is inactive.\n+   */\n+  void hideWindows();\n+\n+  /**\n+   * Notify the input method that a client component has been removed from its\n+   * hierarchy, or that input method support has been disabled. This is\n+   * called by {@link InputContext#removeNotify()}, and only when the input\n+   * method is inactive.\n+   */\n+  void removeNotify();\n+\n+  /**\n+   * End any input composition currently taking place. Depending on the\n+   * platform and user preferences, this may commit or delete uncommitted text,\n+   * using input method events. This may be called for a variety of reasons,\n+   * such as when the user moves the insertion point in the client text outside\n+   * the range of the composed text, or when text is saved to file. This is\n+   * called by {@link InputContext#endComposition()}, when switching to a\n+   * new input method, or by {@link InputContext#selectInputMethod(Locale)}.\n+   */\n+  void endComposition();\n+\n+  /**\n+   * Disposes the input method and release any resources it is using. In\n+   * particular, the input method should dispose windows and close files. This\n+   * is called by {@link InputContext#dispose()}, when the input method is\n+   * inactive; and nothing will be called on this instance afterwards.\n+   */\n+  void dispose();\n+\n+  /**\n+   * Returns a control object from this input method, or null. A control object\n+   * provides method to control the behavior of this input method, as well as\n+   * query information about it. The object is implementation dependent, so\n+   * clients must compare the result against known input method control\n+   * object types. This is called by\n+   * {@link InputContext#getInputMethodControlObject()}.\n+   *\n+   * @return the control object, or null\n+   */\n+  Object getControlObject();\n+} // interface InputMethod"}, {"sha": "6243ffa34d0e3e9034985385813244056be28188", "filename": "libjava/java/awt/im/spi/InputMethodContext.java", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodContext.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,122 @@\n+/* InputMethodContext.java -- communication between an input method and client\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.im.spi;\n+\n+import java.awt.HeadlessException;\n+import java.awt.Window;\n+import java.awt.font.TextHitInfo;\n+import java.awt.im.InputMethodRequests;\n+import java.text.AttributedCharacterIterator;\n+import javax.swing.JFrame;\n+\n+/**\n+ * Provides methods for the communication context between an input method\n+ * and the client component. This should be passed to\n+ * {@link InputMethod#setInputMethodContext(InputMethodContext)}.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.3\n+ * @status updated to 1.4\n+ */\n+public interface InputMethodContext extends InputMethodRequests\n+{\n+  /**\n+   * Create an input method event and dispatch it to the client.\n+   *\n+   * @param id the event type\n+   * @param text an iterator over the text to be committed\n+   * @param count the count of characters to be committed\n+   * @param caret the insertion point of the commit, or null\n+   * @param visiblePosition the best location to make visible, or null\n+   */\n+  void dispatchInputMethodEvent(int id, AttributedCharacterIterator text,\n+                                int count, TextHitInfo caret,\n+                                TextHitInfo visiblePosition);\n+\n+  /**\n+   * Creates a top-level window for use by the input method. This window should\n+   * float above all document windows and dialogs, not receive focus, and have\n+   * lightweight decorations (such as no title, reduced drag regions). But\n+   * this behavior may be modified to meet the platform style. The title may\n+   * or may not be displayed, depending on the platform.\n+   *\n+   * <p>If attachToInputContext is true, the new window will share the input\n+   * context of the input method, so that events in the new window are\n+   * dispatched to the input method. Also, this supresses deactivate and\n+   * activate calls to the input method caused by setVisible.\n+   *\n+   * @param title the window title, if one is displayed; null becomes \"\"\n+   * @param attachToInputContext true for the window to share context with\n+   *        the input method\n+   * @return the new window for use by the input method\n+   * @throws HeadlessException if GraphicsEnvironment.isHeadless is true\n+   */\n+  Window createInputMethodWindow(String title, boolean attachToInputContext);\n+\n+  /**\n+   * Creates a top-level Swing JFrame for use by the input method. This frame\n+   * should float above all document windows and dialogs, not receive focus,\n+   * and have lightweight decorations (such as no title, reduced drag\n+   * regions). But this behavior may be modified to meet the platform style.\n+   * The title may or may not be displayed, depending on the platform.\n+   *\n+   * <p>If attachToInputContext is true, the new window will share the input\n+   * context of the input method, so that events in the new window are\n+   * dispatched to the input method. Also, this supresses deactivate and\n+   * activate calls to the input method caused by setVisible.\n+   *\n+   * @param title the window title, if one is displayed; null becomes \"\"\n+   * @param attachToInputContext true for the window to share context with\n+   *        the input method\n+   * @return the new window for use by the input method\n+   * @throws HeadlessException if GraphicsEnvironment.isHeadless is true\n+   * @since 1.4\n+   */\n+  JFrame createInputMethodJFrame(String title, boolean attachToInputContext);\n+\n+  /**\n+   * Sets whether notification of the client window's location and state should\n+   * be enabled for the input method. When enabled, the input method's\n+   * {@link #notifyClientWindowChange(Rectangle)} method is called.\n+   * Notification is automatically disabled when the input method is disposed.\n+   *\n+   * @param inputMethod the method to change status of\n+   * @param enable true to enable notification\n+   */\n+  void enableClientWindowNotification(InputMethod inputMethod, boolean enable);\n+} // interface InputMethodContext"}, {"sha": "aeb91289e9d447b041e0fb89f409b935fd01f586", "filename": "libjava/java/awt/im/spi/InputMethodDescriptor.java", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,111 @@\n+/* InputMethodDescriptor.java -- enables loading and use of an input method\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.im.spi;\n+\n+import java.awt.AWTException;\n+import java.awt.Image;\n+import java.util.Locale;\n+\n+/**\n+ * This interface provides information about an InputMethod before it is\n+ * loaded.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.3\n+ * @status updated to 1.4\n+ */\n+public interface InputMethodDescriptor\n+{\n+  /**\n+   * Returns the locales supported by the input method this describes. This\n+   * allows the selection of input methods by locale (by language only, or\n+   * also by country and variant), via\n+   * {@link InputContext#selectInputMethod(Locale)}. The returned list should\n+   * ignore pass-through locales, so it is usually a subset of locales for\n+   * which {@link InputMethod#setContext(Locale)} returns true. If\n+   * {@link #hasDynamicLocaleList()} returns true, this is called each time\n+   * information is needed, allowing dynamic addition or removal of supported\n+   * locales.\n+   *\n+   * @return the list of supported locales\n+   * @throws AWTException if the input method is not available\n+   */\n+  Locale[] getAvailableLocales() throws AWTException;\n+\n+  /**\n+   * Test whether the input method this describes has a static or dynamic\n+   * locale list. For example, this would return true if the list of supported\n+   * locales depends on adapters currently loaded over a network.\n+   *\n+   * @return true if the locale list is dynamic\n+   */\n+  boolean hasDynamicLocaleList();\n+\n+  /**\n+   * Returns a user visible name of the input locale, displayed in the\n+   * specified locale. The inputLocale parameter must be one obtained from\n+   * the list in {@link #getAvailableLocales()}, or null for a\n+   * locale-independent description of the input method. If a translation to\n+   * the desired display language is not available, another language may be\n+   * used.\n+   *\n+   * @param inputLocale the locale of the input method, or null\n+   * @param displayLanguage the language of the result\n+   * @return the name of the input method when using the given inputLocale\n+   */\n+  public String getInputMethodDisplayName(Locale inputLocale,\n+                                          Locale displayLanguage);\n+\n+  /**\n+   * Returns a 16x16 icon for the input locale. The inputLocale parameter\n+   * must be one obtained from the list in {@link #getAvailableLocales()}, or\n+   * null for a locale-independent icon for the input method.\n+   *\n+   * @param inputLocale the locale of the input method, or null\n+   * @return a 16x16 icon for the input method when using the given inputLocale\n+   */\n+  public Image getInputMethodIcon(Locale inputLocale);\n+\n+  /**\n+   * Creates a new instance of the input method.\n+   *\n+   * @return the newly created input method\n+   * @throws Exception if anything goes wrong\n+   */\n+  public InputMethod createInputMethod() throws Exception;\n+} // interface InputMethodDescriptor"}, {"sha": "41f07714a8677d32bce78a499e5e9896ca2f04d3", "filename": "libjava/java/awt/image/renderable/ContextualRenderedImageFactory.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FContextualRenderedImageFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FContextualRenderedImageFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FContextualRenderedImageFactory.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,56 @@\n+/* ContextualRenderedImageFactory.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.RenderedImage;\n+\n+/**\n+ * STUBBED\n+ */\n+public interface ContextualRenderedImageFactory extends RenderedImageFactory\n+{\n+  RenderContext mapRenderContext(int i, RenderContext context,\n+                                 ParameterBlock block, RenderableImage image);\n+  RenderedImage create(RenderContext context, ParameterBlock block);\n+  Rectangle2D getBounds2D(ParameterBlock block);\n+  Object getProperty(ParameterBlock block, String name);\n+  String[] getPropertyNames();\n+  boolean isDynamic();\n+} // interface ContextualRenderedImageFactory"}, {"sha": "a54209d32d5b4d904c4cf083b12bca44fe508ba9", "filename": "libjava/java/awt/image/renderable/ParameterBlock.java", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FParameterBlock.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FParameterBlock.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FParameterBlock.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,308 @@\n+/* ParameterBlock.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.image.RenderedImage;\n+import java.io.Serializable;\n+import java.util.Vector;\n+\n+public class ParameterBlock implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = -7577115551785240750L;\n+  protected Vector sources;\n+  protected Vector parameters;\n+\n+  public ParameterBlock()\n+  {\n+    this(new Vector(), new Vector());\n+  }\n+\n+  public ParameterBlock(Vector sources)\n+  {\n+    this(sources, new Vector());\n+  }\n+\n+  public ParameterBlock(Vector sources, Vector parameters)\n+  {\n+    this.sources = sources;\n+    this.parameters = parameters;\n+  }\n+\n+  public Object shallowClone()\n+  {\n+    try\n+      {\n+        return super.clone();\n+      }\n+    catch (CloneNotSupportedException e)\n+      {\n+        throw (Error) new InternalError().initCause(e); // impossible\n+      }\n+  }\n+\n+  public Object clone()\n+  {\n+    ParameterBlock pb = (ParameterBlock) shallowClone();\n+    if (sources != null)\n+      pb.sources = (Vector) sources.clone();\n+    if (parameters != null)\n+      pb.parameters = (Vector) parameters.clone();\n+    return pb;\n+  }\n+\n+  public ParameterBlock addSource(Object source)\n+  {\n+    sources.add(source);\n+    return this;\n+  }\n+\n+  public Object getSource(int index)\n+  {\n+    return sources.get(index);\n+  }\n+\n+  public ParameterBlock setSource(Object source, int index)\n+  {\n+    sources.ensureCapacity(index);\n+    sources.set(index, source);\n+    return this;\n+  }\n+\n+  public RenderedImage getRenderedSource(int index)\n+  {\n+    return (RenderedImage) sources.get(index);\n+  }\n+\n+  public RenderableImage getRenderableSource(int index)\n+  {\n+    return (RenderableImage) sources.get(index);\n+  }\n+\n+  public int getNumSources()\n+  {\n+    return sources.size();\n+  }\n+\n+  public Vector getSources()\n+  {\n+    return sources;\n+  }\n+\n+  public void setSources(Vector sources)\n+  {\n+    this.sources = sources;\n+  }\n+\n+  public void removeSources()\n+  {\n+    if (sources != null)\n+      sources.clear();\n+  }\n+\n+  public int getNumParameters()\n+  {\n+    return parameters.size();\n+  }\n+\n+  public Vector getParameters()\n+  {\n+    return parameters;\n+  }\n+\n+  public void setParameters(Vector parameters)\n+  {\n+    this.parameters = parameters;\n+  }\n+\n+  public void removeParameters()\n+  {\n+    if (parameters != null)\n+      parameters.clear();\n+  }\n+\n+  public ParameterBlock add(Object o)\n+  {\n+    parameters.add(o);\n+    return this;\n+  }\n+\n+  public ParameterBlock add(byte b)\n+  {\n+    return add(new Byte(b));\n+  }\n+\n+  public ParameterBlock add(char c)\n+  {\n+    return add(new Character(c));\n+  }\n+\n+  public ParameterBlock add(short s)\n+  {\n+    return add(new Short(s));\n+  }\n+\n+  public ParameterBlock add(int i)\n+  {\n+    return add(new Integer(i));\n+  }\n+\n+  public ParameterBlock add(long l)\n+  {\n+    return add(new Long(l));\n+  }\n+\n+  public ParameterBlock add(float f)\n+  {\n+    return add(new Float(f));\n+  }\n+\n+  public ParameterBlock add(double d)\n+  {\n+    return add(new Double(d));\n+  }\n+\n+  public ParameterBlock set(Object o, int index)\n+  {\n+    parameters.ensureCapacity(index);\n+    parameters.set(index, o);\n+    return this;\n+  }\n+\n+  public ParameterBlock set(byte b, int index)\n+  {\n+    return set(new Byte(b), index);\n+  }\n+\n+  public ParameterBlock set(char c, int index)\n+  {\n+    return set(new Character(c), index);\n+  }\n+\n+  public ParameterBlock set(short s, int index)\n+  {\n+    return set(new Short(s), index);\n+  }\n+\n+  public ParameterBlock set(int i, int index)\n+  {\n+    return set(new Integer(i), index);\n+  }\n+\n+  public ParameterBlock set(long l, int index)\n+  {\n+    return set(new Long(l), index);\n+  }\n+\n+  public ParameterBlock set(float f, int index)\n+  {\n+    return set(new Float(f), index);\n+  }\n+\n+  public ParameterBlock set(double d, int index)\n+  {\n+    return set(new Double(d), index);\n+  }\n+\n+  public Object getObjectParameter(int index)\n+  {\n+    return parameters.get(index);\n+  }\n+\n+  public byte getByteParameter(int index)\n+  {\n+    return ((Byte) parameters.get(index)).byteValue();\n+  }\n+\n+  public char getCharParameter(int index)\n+  {\n+    return ((Character) parameters.get(index)).charValue();\n+  }\n+\n+  public short getShortParameter(int index)\n+  {\n+    return ((Short) parameters.get(index)).shortValue();\n+  }\n+\n+  public int getIntParameter(int index)\n+  {\n+    return ((Integer) parameters.get(index)).intValue();\n+  }\n+\n+  public long getLongParameter(int index)\n+  {\n+    return ((Long) parameters.get(index)).longValue();\n+  }\n+\n+  public float getFloatParameter(int index)\n+  {\n+    return ((Float) parameters.get(index)).floatValue();\n+  }\n+\n+  public double getDoubleParameter(int index)\n+  {\n+    return ((Double) parameters.get(index)).doubleValue();\n+  }\n+\n+  public Class[] getParamClasses()\n+  {\n+    int i = parameters.size();\n+    Class[] result = new Class[i];\n+    while (--i >= 0)\n+      {\n+        Class c = parameters.get(i).getClass();\n+        if (c == Byte.class)\n+          result[i] = byte.class;\n+        else if (c == Character.class)\n+          result[i] = char.class;\n+        else if (c == Short.class)\n+          result[i] = short.class;\n+        else if (c == Integer.class)\n+          result[i] = int.class;\n+        else if (c == Long.class)\n+          result[i] = long.class;\n+        else if (c == Float.class)\n+          result[i] = float.class;\n+        else if (c == Double.class)\n+          result[i] = double.class;\n+        else\n+          result[i] = c;\n+      }\n+    return result;\n+  }\n+} // class ParameterBlock"}, {"sha": "eca35ed66ac74ba8d965f2c9b50e4376491589c2", "filename": "libjava/java/awt/image/renderable/RenderContext.java", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,141 @@\n+/* RenderContext.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.RenderingHints;\n+import java.awt.Shape;\n+import java.awt.geom.AffineTransform;\n+\n+public class RenderContext implements Cloneable\n+{\n+  private AffineTransform xform;\n+  private Shape aoi;\n+  private RenderingHints hints;\n+\n+  public RenderContext(AffineTransform xform, Shape aoi, RenderingHints hints)\n+  {\n+    this.xform = xform;\n+    this.aoi = aoi;\n+    this.hints = hints;\n+  }\n+\n+  public RenderContext(AffineTransform xform)\n+  {\n+    this(xform, null, null);\n+  }\n+\n+  public RenderContext(AffineTransform xform, RenderingHints hints)\n+  {\n+    this(xform, null, hints);\n+  }\n+\n+  public RenderContext(AffineTransform xform, Shape aoi)\n+  {\n+    this(xform, aoi, null);\n+  }\n+\n+  public RenderingHints getRenderingHints()\n+  {\n+    return hints;\n+  }\n+\n+  public void setRenderingHints(RenderingHints hints)\n+  {\n+    this.hints = hints;\n+  }\n+\n+  public void setTransform(AffineTransform xform)\n+  {\n+    this.xform = xform;\n+  }\n+\n+  public void preConcatenateTransform(AffineTransform pre)\n+  {\n+    xform.preConcatenate(pre);\n+  }\n+\n+  /** @deprecated Sun can't spell concatenate */\n+  public void preConcetenateTransform(AffineTransform pre)\n+  {\n+    preConcetenateTransform(pre);\n+  }\n+\n+  public void concatenateTransform(AffineTransform post)\n+  {\n+    xform.concatenate(post);\n+  }\n+\n+  /** @deprecated Sun can't spell concatenate */\n+  public void concetenateTransform(AffineTransform post)\n+  {\n+    concatenateTransform(post);\n+  }\n+\n+  public AffineTransform getTransform()\n+  {\n+    return xform;\n+  }\n+\n+  public void setAreaOfInterest(Shape aoi)\n+  {\n+    this.aoi = aoi;\n+  }\n+\n+  public Shape getAreaOfInterest()\n+  {\n+    return aoi;\n+  }\n+\n+  public Object clone()\n+  {\n+    try\n+      {\n+        RenderContext copy = (RenderContext) super.clone();\n+        if (xform != null)\n+          copy.xform = (AffineTransform) xform.clone();\n+        if (hints != null)\n+          copy.hints = (RenderingHints) hints.clone();\n+        return copy;\n+      }\n+    catch (CloneNotSupportedException e)\n+      {\n+        throw (Error) new InternalError().initCause(e); // impossible\n+      }\n+  }\n+} // class RenderContext"}, {"sha": "0fd4fe5f823e548872be7f18cb7c793a43ec6e18", "filename": "libjava/java/awt/image/renderable/RenderableImage.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,59 @@\n+/* RenderableImage.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.RenderingHints;\n+import java.awt.image.RenderedImage;\n+import java.util.Vector;\n+\n+public interface RenderableImage\n+{\n+  String HINTS_OBSERVED = \"HINTS_OBSERVED\";\n+  Vector getSources();\n+  Object getProperty(String name);\n+  String[] getPropertyNames();\n+  boolean isDynamic();\n+  float getWidth();\n+  float getHeight();\n+  float getMinX();\n+  float getMinY();\n+  RenderedImage createScaledRendering(int w, int h, RenderingHints hints);\n+  RenderedImage createDefaultRendering();\n+  RenderedImage createRendering(RenderContext context);\n+} // interface RenderableImage"}, {"sha": "ac7cadfeb5a0c54eaeb5bdb09634e0e178e6a088", "filename": "libjava/java/awt/image/renderable/RenderableImageOp.java", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageOp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageOp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageOp.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,157 @@\n+/* RenderableImageOp.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.RenderingHints;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.RenderedImage;\n+import java.util.Vector;\n+\n+public class RenderableImageOp implements RenderableImage\n+{\n+  private final ContextualRenderedImageFactory crif;\n+  private ParameterBlock block;\n+\n+  public RenderableImageOp(ContextualRenderedImageFactory crif,\n+                           ParameterBlock block)\n+  {\n+    this.crif = crif;\n+    this.block = (ParameterBlock) block.clone();\n+  }\n+\n+  public Vector getSources()\n+  {\n+    if (block.sources == null)\n+      return null;\n+    int size = block.sources.size();\n+    Vector v = new Vector();\n+    for (int i = 0; i < size; i++)\n+      {\n+        Object o = block.sources.get(i);\n+        if (o instanceof RenderableImage)\n+          v.add(o);\n+      }\n+    return v;\n+  }\n+\n+  public Object getProperty(String name)\n+  {\n+    return crif.getProperty(block, name);\n+  }\n+\n+  public String[] getPropertyNames()\n+  {\n+    return crif.getPropertyNames();\n+  }\n+\n+  public boolean isDynamic()\n+  {\n+    return crif.isDynamic();\n+  }\n+\n+  public float getWidth()\n+  {\n+    return (float) crif.getBounds2D(block).getWidth();\n+  }\n+\n+  public float getHeight()\n+  {\n+    return (float) crif.getBounds2D(block).getHeight();\n+  }\n+\n+  public float getMinX()\n+  {\n+    return (float) crif.getBounds2D(block).getX();\n+  }\n+\n+  public float getMinY()\n+  {\n+    return (float) crif.getBounds2D(block).getY();\n+  }\n+\n+  public ParameterBlock setParameterBlock(ParameterBlock block)\n+  {\n+    ParameterBlock result = this.block;\n+    this.block = (ParameterBlock) block.clone();\n+    return result;\n+  }\n+\n+  public ParameterBlock getParameterBlock()\n+  {\n+    return block;\n+  }\n+\n+  public RenderedImage createScaledRendering(int w, int h,\n+                                             RenderingHints hints)\n+  {\n+    if (w == 0)\n+      if (h == 0)\n+        throw new IllegalArgumentException();\n+      else\n+        w = Math.round(h * getWidth() / getHeight());\n+    if (h == 0)\n+      h = Math.round(w * getHeight() / getWidth());\n+    AffineTransform xform = AffineTransform.getScaleInstance(w * getWidth(),\n+                                                             h * getHeight());\n+    return createRendering(new RenderContext(xform, hints));\n+  }\n+\n+  public RenderedImage createDefaultRendering()\n+  {\n+    return createRendering(new RenderContext(new AffineTransform()));\n+  }\n+\n+  public RenderedImage createRendering(RenderContext context)\n+  {\n+    ParameterBlock copy = (ParameterBlock) block.clone();\n+    int i = block.sources.size();\n+    while (--i >= 0)\n+      {\n+        Object o = block.sources.get(i);\n+        if (o instanceof RenderableImage)\n+          {\n+            RenderableImage ri = (RenderableImage) o;\n+            RenderContext rc = crif.mapRenderContext(i, context, block, ri);\n+            copy.sources.set(i, ri.createRendering(rc));\n+          }\n+      }\n+    // Now copy.sources should be only RenderedImages.\n+    return crif.create(context, copy);\n+  }\n+} // class RenderableImageOp"}, {"sha": "15ec571bc0ff66f98d94612b3b28e8140e1d31bb", "filename": "libjava/java/awt/image/renderable/RenderableImageProducer.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageProducer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageProducer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImageProducer.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,79 @@\n+/* RenderableImageProducer.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.image.ImageConsumer;\n+import java.awt.image.ImageProducer;\n+\n+public class RenderableImageProducer implements ImageProducer, Runnable\n+{\n+  public RenderableImageProducer(RenderableImage image, RenderContext context)\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  public void setRenderContext(RenderContext context)\n+  {\n+  }\n+\n+  public void addConsumer(ImageConsumer consumer)\n+  {\n+  }\n+\n+  public boolean isConsumer(ImageConsumer consumer)\n+  {\n+    return false;\n+  }\n+\n+  public void removeConsumer(ImageConsumer consumer)\n+  {\n+  }\n+\n+  public void startProduction(ImageConsumer consumer)\n+  {\n+  }\n+\n+  public void requestTopDownLeftRightResend(ImageConsumer consumer)\n+  {\n+  }\n+\n+  public void run()\n+  {\n+  }\n+} // class RenderableImageProducer"}, {"sha": "0d5627739cc14f3fcd248b4f34bd12c4eec2c8fe", "filename": "libjava/java/awt/image/renderable/RenderedImageFactory.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderedImageFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderedImageFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderedImageFactory.java?ref=8f5c92a0a3e1a4d0cac8729c9ab258e063c31ea9", "patch": "@@ -0,0 +1,47 @@\n+/* RenderedImageFactory.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.image.renderable;\n+\n+import java.awt.RenderingHints;\n+import java.awt.image.RenderedImage;\n+\n+public interface RenderedImageFactory\n+{\n+  RenderedImage create(ParameterBlock block, RenderingHints hints);\n+} // interface RenderedImageFactory"}]}