{"sha": "d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmZjdhZTU1NDEwYjY1NjZmMmU2NTg0M2Y2OWRjNDFlOGM5Yzg3ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-06-09T20:33:51Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-09T20:33:51Z"}, "message": "re PR c/36446 (unexplained warning in struct initialization)\n\n\tPR c/36446\n\t* c-typeck.c (error_init): Call inform instead of error_at.\n\t(pedwarn_init): Call inform instead of pedwarn.\n\t(warning_init): Call inform instead of warning_at.\n\n\t* gcc.dg/Wcxx-compat-6.c: Change dg-warning to dg-message.\n\t* gcc.dg/array-2.c: Likewise.\n\t* gcc.dg/array-const-2.c: Likewise.\n\t* gcc.dg/ucnid-8.c: Likewise.\n\t* gcc.dg/vla-init-1.c: Likewise.\n\t* gcc.dg/array-const-3.c: Change dg-error to dg-message.\n\t* gcc.dg/c99-flex-array-7.c: Likewise.\n\t* gcc.dg/init-bad-1.c: Likewise.\n\t* gcc.dg/init-bad-3.c: Likewise.\n\t* gcc.dg/init-bad-2.c: Change dg-error and dg-warning to dg-message.\n\t* gcc.dg/pedwarn-init.c: Add dg-warning.\n\t* gcc.dg/pr53119.c: Remove dg-excess-errors.\n\nFrom-SVN: r211388", "tree": {"sha": "92fa4e29eb5d8ccef0c7ca0f2d1bbf5232779d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92fa4e29eb5d8ccef0c7ca0f2d1bbf5232779d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23646391f243274745cf31e66d914061570a4c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23646391f243274745cf31e66d914061570a4c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23646391f243274745cf31e66d914061570a4c45"}], "stats": {"total": 105, "additions": 64, "deletions": 41}, "files": [{"sha": "86372fa303509416454ca892adc91d12d8ce2147", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -1,3 +1,10 @@\n+2014-06-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/36446\n+\t* c-typeck.c (error_init): Call inform instead of error_at.\n+\t(pedwarn_init): Call inform instead of pedwarn.\n+\t(warning_init): Call inform instead of warning_at.\n+\n 2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* c-decl.c (merge_decls): Use set_decl_section_name."}, {"sha": "63bd65ee0be6dafbd9440ebdde2d416863b6b07c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -5567,7 +5567,7 @@ error_init (location_t loc, const char *gmsgid)\n   error_at (loc, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n-    error_at (loc, \"(near initialization for %qs)\", ofwhat);\n+    inform (loc, \"(near initialization for %qs)\", ofwhat);\n }\n \n /* Issue a pedantic warning for a bad initializer component.  OPT is\n@@ -5579,12 +5579,13 @@ static void\n pedwarn_init (location_t location, int opt, const char *gmsgid)\n {\n   char *ofwhat;\n+  bool warned;\n \n   /* The gmsgid may be a format string with %< and %>. */\n-  pedwarn (location, opt, gmsgid);\n+  warned = pedwarn (location, opt, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n-    pedwarn (location, opt, \"(near initialization for %qs)\", ofwhat);\n+  if (*ofwhat && warned)\n+    inform (location, \"(near initialization for %qs)\", ofwhat);\n }\n \n /* Issue a warning for a bad initializer component.\n@@ -5597,12 +5598,13 @@ static void\n warning_init (location_t loc, int opt, const char *gmsgid)\n {\n   char *ofwhat;\n+  bool warned;\n \n   /* The gmsgid may be a format string with %< and %>. */\n-  warning_at (loc, opt, gmsgid);\n+  warned = warning_at (loc, opt, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n-    warning_at (loc, opt, \"(near initialization for %qs)\", ofwhat);\n+  if (*ofwhat && warned)\n+    inform (loc, \"(near initialization for %qs)\", ofwhat);\n }\n \f\n /* If TYPE is an array type and EXPR is a parenthesized string"}, {"sha": "b307bd33215daf1ab6ff13ede52840324d2b9e09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -1,3 +1,19 @@\n+2014-06-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/36446\n+\t* gcc.dg/Wcxx-compat-6.c: Change dg-warning to dg-message.\n+\t* gcc.dg/array-2.c: Likewise.\n+\t* gcc.dg/array-const-2.c: Likewise.\n+\t* gcc.dg/ucnid-8.c: Likewise.\n+\t* gcc.dg/vla-init-1.c: Likewise.\n+\t* gcc.dg/array-const-3.c: Change dg-error to dg-message.\n+\t* gcc.dg/c99-flex-array-7.c: Likewise.\n+\t* gcc.dg/init-bad-1.c: Likewise.\n+\t* gcc.dg/init-bad-3.c: Likewise.\n+\t* gcc.dg/init-bad-2.c: Change dg-error and dg-warning to dg-message.\n+\t* gcc.dg/pedwarn-init.c: Add dg-warning.\n+\t* gcc.dg/pr53119.c: Remove dg-excess-errors.\n+\n 2014-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/22556"}, {"sha": "eee6768f0b69c15f05c142b411b2087115ed85e4", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -109,4 +109,4 @@ f(enum E1 e1, enum E2 e2, struct s1 vs1, struct s1 *vp1)\n }\n \n /* Match all extra informative notes.  */\n-/* { dg-warning \"near initialization for\" \"expected\" { target *-*-* } 0 } */\n+/* { dg-message \"near initialization for\" \"expected\" { target *-*-* } 0 } */"}, {"sha": "6187500e37a7d0da422b6d1a8f36aecb8ed4f0a1", "filename": "gcc/testsuite/gcc.dg/array-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -8,7 +8,7 @@ struct f { int w; int x[]; };\n struct g { struct f f; };\n struct g g1 = { { 0, { } } };\n struct g g2 = { { 0, { 1 } } }; /* { dg-error \"nested context\" \"nested\" } */\n-\t\t\t\t/* { dg-error \"near init\" \"near\" { target *-*-* } 10 } */\n+\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } 10 } */\n struct h { int x[0]; int y; };\n struct h h1 = { { 0 }, 1 }; /* { dg-warning \"excess elements\" \"excess\" } */\n-\t\t\t    /* { dg-warning \"near init\" \"before end\" { target *-*-* } 13 } */\n+\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } 13 } */"}, {"sha": "6f76955f20a7d0c4989e40d6ddac011f91546e93", "filename": "gcc/testsuite/gcc.dg/array-const-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-2.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -6,4 +6,4 @@\n \n extern int i;\n int a[] = { [1 ? 1 : i] = 0 }; /* { dg-warning \"array index in initializer is not an integer constant expression\" } */\n-/* { dg-warning \"near initialization\" \"near init\" { target *-*-* } 8 } */\n+/* { dg-message \"near initialization\" \"near init\" { target *-*-* } 8 } */"}, {"sha": "036b0eae7bc089e1eb18fc6239f0f32fc6307d22", "filename": "gcc/testsuite/gcc.dg/array-const-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-const-3.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -6,4 +6,4 @@\n \n extern int i;\n int a[] = { [1 ? 1 : i] = 0 }; /* { dg-error \"array index in initializer is not an integer constant expression\" } */\n-/* { dg-error \"near initialization\" \"near init\" { target *-*-* } 8 } */\n+/* { dg-message \"near initialization\" \"near init\" { target *-*-* } 8 } */"}, {"sha": "88018b03d7f0ef14feb3cd051407efe1fae44d62", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-7.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -6,12 +6,12 @@\n struct s { int a; char b[]; };\n \n struct s a = { 0, \"\" }; /* { dg-error \"initialization of a flexible array member\" } */\n-/* { dg-error \"near init\" \"near init\" { target *-*-* } 8 } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 8 } */\n struct s b = { 0, { 0 } }; /* { dg-error \"initialization of a flexible array member\" } */\n-/* { dg-error \"near init\" \"near init\" { target *-*-* } 10 } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 10 } */\n struct s c = { 0, { } }; /* { dg-error \"ISO C forbids empty initializer braces\" } */\n struct s d = { .b = \"\" }; /* { dg-error \"initialization of a flexible array member\" } */\n-/* { dg-error \"near init\" \"near init\" { target *-*-* } 13 } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 13 } */\n struct s e = { .b = { 0 } }; /* { dg-error \"initialization of a flexible array member\" } */\n-/* { dg-error \"near init\" \"near init\" { target *-*-* } 15 } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 15 } */\n struct s f = { .b = { } }; /* { dg-error \"ISO C forbids empty initializer braces\" } */"}, {"sha": "6599de097dbe08e59eee7d4b59835bca9c0d799c", "filename": "gcc/testsuite/gcc.dg/init-bad-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -19,27 +19,27 @@ char s1[1] = { \"x\" };\n char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 21 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 21 } */\n \n int i = { }; /* { dg-error \"empty scalar initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 24 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 24 } */\n \n int j = { 1 };\n \n int k = { 1, 2 }; /* { dg-warning \"excess elements in scalar initializer\" } */\n-/* { dg-warning \"near init\" \"near\" { target *-*-* } 29 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 29 } */\n \n int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 32 } */\n int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 34 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 34 } */\n int a3[1] = { [0 ... 1] = 0 }; /* { dg-error \"array index range in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 36 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 36 } */\n int a4[2] = { [1 ... 0] = 0 }; /* { dg-error \"empty index range in initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 38 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 38 } */\n int a5[2] = { [0 ... 2] = 0 }; /* { dg-error \"array index range in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 40 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 40 } */\n int a6[2] = { [-1 ... 1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 42 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 42 } */\n int a7[] = { [-1 ... 1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 44 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 44 } */"}, {"sha": "e151709308c8fa71afa15e8bb3bc18972720ffc2", "filename": "gcc/testsuite/gcc.dg/init-bad-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -11,7 +11,7 @@ void h(a)\n      int a = 1; /* { dg-error \"parameter 'a' is initialized\" } */\n {\n   struct s x = { 0 }; /* { dg-error \"variable 'x' has initializer but incomplete type\" } */\n-  /* { dg-warning \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n+  /* { dg-message \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n   /* { dg-error \"storage size\" \"size\" { target *-*-* } 13 } */\n }\n \n@@ -20,14 +20,14 @@ char s1[1] = { \"x\" };\n char t[1] = \"xy\"; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n char t1[1] = { \"xy\" }; /* { dg-warning \"initializer-string for array of chars is too long\" } */\n char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 22 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 22 } */\n \n int j = { 1 };\n \n int k = { 1, 2 }; /* { dg-warning \"excess elements in scalar initializer\" } */\n-/* { dg-warning \"near init\" \"near\" { target *-*-* } 27 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 27 } */\n \n int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 30 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 30 } */\n int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 32 } */"}, {"sha": "82a632a02bc01dfbc06e1cc43ff459ed682a4ae6", "filename": "gcc/testsuite/gcc.dg/init-bad-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -11,7 +11,7 @@ void h(a)\n      int a = 1; /* { dg-error \"parameter 'a' is initialized\" } */\n {\n   struct s x = { 0 }; /* { dg-error \"variable 'x' has initializer but incomplete type\" } */\n-  /* { dg-error \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n+  /* { dg-message \"excess elements|near init\" \"near\" { target *-*-* } 13 } */\n   /* { dg-error \"storage size\" \"size\" { target *-*-* } 13 } */\n }\n \n@@ -20,14 +20,14 @@ char s1[1] = { \"x\" };\n char t[1] = \"xy\"; /* { dg-error \"initializer-string for array of chars is too long\" } */\n char t1[1] = { \"xy\" }; /* { dg-error \"initializer-string for array of chars is too long\" } */\n char u[1] = { \"x\", \"x\" }; /* { dg-error \"excess elements in char array initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 22 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 22 } */\n \n int j = { 1 };\n \n int k = { 1, 2 }; /* { dg-error \"excess elements in scalar initializer\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 27 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 27 } */\n \n int a1[1] = { [1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 30 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 30 } */\n int a2[1] = { [-1] = 0 }; /* { dg-error \"array index in initializer exceeds array bounds\" } */\n-/* { dg-error \"near init\" \"near\" { target *-*-* } 32 } */\n+/* { dg-message \"near init\" \"near\" { target *-*-* } 32 } */"}, {"sha": "e3181d62157c950056cf86912d76e8f12902ea29", "filename": "gcc/testsuite/gcc.dg/pedwarn-init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -12,6 +12,7 @@ int a1 = { 1, 2 }; /* { dg-warning \"15:excess elements in scalar initializer\" }\n int a2[2] = { 1, 2, 3 }; /* { dg-warning \"21:excess elements in array initializer\" } */\n int a3[] = { [1 ? 1 : i] = 0 }; /* { dg-warning \"15:array index in initializer is not an integer constant expression\" } */\n int a4[] = { [1 ... 1 ? 2 : i] = 0 }; /* { dg-warning \"15:array index in initializer is not an integer constant expression\" } */\n+/* { dg-warning \"ISO C forbids\" \"ISO C\" { target *-*-* } 14 } */\n char a5[] = (\"lol\"); /* { dg-warning \"13:array initialized from parenthesized string constant\" } */\n char a6[] = { (\"foo\") }; /* { dg-warning \"13:array initialized from parenthesized string constant\" } */\n char *a7 = (char []) { (\"bar\") }; /* { dg-warning \"12:array initialized from parenthesized string constant\" } */"}, {"sha": "93cd3fd8a5e44980a9edced92bae044a302ef560", "filename": "gcc/testsuite/gcc.dg/pr53119.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-\n /* { dg-options \"-Wmissing-braces -Wmissing-field-initializers\" } */\n \n struct a {\n@@ -21,5 +20,3 @@ int main (void)\n \n   return 0;\n }\n-\n-/* { dg-excess-errors \"note\" } */"}, {"sha": "da72e2d8e9148436d11e18abca6c5c52067dd782", "filename": "gcc/testsuite/gcc.dg/ucnid-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -13,4 +13,4 @@ void f (int b) { int \\u00e9[b]; } /* { dg-warning \"variable length array '\\\\\\\\U0\n void g (static int \\u00e9); /* { dg-error \"storage class specified for parameter '\\\\\\\\U000000e9'\" } */\n \n struct s2 { int \\u00e1; } \\u00e9 = { { 0 } }; /* { dg-warning \"braces around scalar initializer\" } */\n-/* { dg-warning \"near initialization for '\\\\\\\\U000000e9\\\\.\\\\\\\\U000000e1'\" \"UCN diag\" { target *-*-* } 15 } */\n+/* { dg-message \"near initialization for '\\\\\\\\U000000e9\\\\.\\\\\\\\U000000e1'\" \"UCN diag\" { target *-*-* } 15 } */"}, {"sha": "5e20530ab98c65aeada2e63aae815ac83b97ad25", "filename": "gcc/testsuite/gcc.dg/vla-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ff7ae55410b6566f2e65843f69dc41e8c9c87e/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c?ref=d7ff7ae55410b6566f2e65843f69dc41e8c9c87e", "patch": "@@ -11,5 +11,5 @@ foo (void)\n {\n   int x[a] = { 1 }; /* { dg-error \"variable-sized object may not be initialized\" \"VLA init\" } */\n   /* { dg-warning \"excess elements in array initializer\" \"excess\" { target *-*-* } 12 } */\n-  /* { dg-warning \"near initialization\" \"near\" { target *-*-* } 12 } */\n+  /* { dg-message \"near initialization\" \"near\" { target *-*-* } 12 } */\n }"}]}