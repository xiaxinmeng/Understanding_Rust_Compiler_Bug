{"sha": "5a56869d6e339187da4a91697f1185227c8a03ba", "node_id": "C_kwDOANBUbNoAKDVhNTY4NjlkNmUzMzkxODdkYTRhOTE2OTdmMTE4NTIyN2M4YTAzYmE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:02:25Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:03Z"}, "message": "gccrs: Add execution test cases\n\nThis is similar to the compile/torture/*.rs test cases, but all of these are\ndg-execute testcases. They are compiled, linked and executed by default. These\ntestcases are also compiled with the matrix of torture options.\n\nThe only caveat here is that gccrs does not currently support the main shim,\nso we have a C-style main function here returning zero which is not proper Rust\ncode.\n\n\tgcc/testsuite/\n\t* rust/execute/torture/block_expr1.rs: New.\n\t* rust/execute/torture/builtin_macro_cfg.rs: New.\n\t* rust/execute/torture/builtin_macro_concat.rs: New.\n\t* rust/execute/torture/builtin_macro_env.rs: New.\n\t* rust/execute/torture/builtin_macro_include_bytes.rs: New.\n\t* rust/execute/torture/builtin_macro_include_str.rs: New.\n\t* rust/execute/torture/builtin_macro_line.rs: New.\n\t* rust/execute/torture/builtin_macros1.rs: New.\n\t* rust/execute/torture/builtin_macros3.rs: New.\n\t* rust/execute/torture/cfg1.rs: New.\n\t* rust/execute/torture/cfg2.rs: New.\n\t* rust/execute/torture/cfg3.rs: New.\n\t* rust/execute/torture/cfg4.rs: New.\n\t* rust/execute/torture/cfg5.rs: New.\n\t* rust/execute/torture/coercion1.rs: New.\n\t* rust/execute/torture/coercion2.rs: New.\n\t* rust/execute/torture/const_fold1.rs: New.\n\t* rust/execute/torture/const_fold2.rs: New.\n\t* rust/execute/torture/copy_nonoverlapping1.rs: New.\n\t* rust/execute/torture/empty_main.rs: New.\n\t* rust/execute/torture/execute.exp: New.\n\t* rust/execute/torture/exit_error.rs: New.\n\t* rust/execute/torture/extern_mod4.rs: New.\n\t* rust/execute/torture/func1.rs: New.\n\t* rust/execute/torture/helloworld1.rs: New.\n\t* rust/execute/torture/helloworld2.rs: New.\n\t* rust/execute/torture/include.txt: New.\n\t* rust/execute/torture/index1.rs: New.\n\t* rust/execute/torture/issue-1120.rs: New.\n\t* rust/execute/torture/issue-1133.rs: New.\n\t* rust/execute/torture/issue-1198.rs: New.\n\t* rust/execute/torture/issue-1231.rs: New.\n\t* rust/execute/torture/issue-1232.rs: New.\n\t* rust/execute/torture/issue-1249.rs: New.\n\t* rust/execute/torture/issue-1436.rs: New.\n\t* rust/execute/torture/issue-1496.rs: New.\n\t* rust/execute/torture/issue-647.rs: New.\n\t* rust/execute/torture/issue-845.rs: New.\n\t* rust/execute/torture/issue-851.rs: New.\n\t* rust/execute/torture/issue-858.rs: New.\n\t* rust/execute/torture/issue-976.rs: New.\n\t* rust/execute/torture/issue-995.rs: New.\n\t* rust/execute/torture/macros1.rs: New.\n\t* rust/execute/torture/macros10.rs: New.\n\t* rust/execute/torture/macros11.rs: New.\n\t* rust/execute/torture/macros12.rs: New.\n\t* rust/execute/torture/macros13.rs: New.\n\t* rust/execute/torture/macros14.rs: New.\n\t* rust/execute/torture/macros16.rs: New.\n\t* rust/execute/torture/macros17.rs: New.\n\t* rust/execute/torture/macros18.rs: New.\n\t* rust/execute/torture/macros19.rs: New.\n\t* rust/execute/torture/macros2.rs: New.\n\t* rust/execute/torture/macros20.rs: New.\n\t* rust/execute/torture/macros21.rs: New.\n\t* rust/execute/torture/macros22.rs: New.\n\t* rust/execute/torture/macros23.rs: New.\n\t* rust/execute/torture/macros24.rs: New.\n\t* rust/execute/torture/macros25.rs: New.\n\t* rust/execute/torture/macros26.rs: New.\n\t* rust/execute/torture/macros27.rs: New.\n\t* rust/execute/torture/macros28.rs: New.\n\t* rust/execute/torture/macros29.rs: New.\n\t* rust/execute/torture/macros3.rs: New.\n\t* rust/execute/torture/macros30.rs: New.\n\t* rust/execute/torture/macros31.rs: New.\n\t* rust/execute/torture/macros4.rs: New.\n\t* rust/execute/torture/macros5.rs: New.\n\t* rust/execute/torture/macros6.rs: New.\n\t* rust/execute/torture/macros7.rs: New.\n\t* rust/execute/torture/macros8.rs: New.\n\t* rust/execute/torture/macros9.rs: New.\n\t* rust/execute/torture/match1.rs: New.\n\t* rust/execute/torture/match2.rs: New.\n\t* rust/execute/torture/match3.rs: New.\n\t* rust/execute/torture/match_bool1.rs: New.\n\t* rust/execute/torture/match_byte1.rs: New.\n\t* rust/execute/torture/match_char1.rs: New.\n\t* rust/execute/torture/match_int1.rs: New.\n\t* rust/execute/torture/match_loop1.rs: New.\n\t* rust/execute/torture/match_range1.rs: New.\n\t* rust/execute/torture/match_range2.rs: New.\n\t* rust/execute/torture/match_tuple1.rs: New.\n\t* rust/execute/torture/method1.rs: New.\n\t* rust/execute/torture/method2.rs: New.\n\t* rust/execute/torture/method3.rs: New.\n\t* rust/execute/torture/method4.rs: New.\n\t* rust/execute/torture/mod1.rs: New.\n\t* rust/execute/torture/modules/mod.rs: New.\n\t* rust/execute/torture/operator_overload_1.rs: New.\n\t* rust/execute/torture/operator_overload_10.rs: New.\n\t* rust/execute/torture/operator_overload_11.rs: New.\n\t* rust/execute/torture/operator_overload_12.rs: New.\n\t* rust/execute/torture/operator_overload_2.rs: New.\n\t* rust/execute/torture/operator_overload_3.rs: New.\n\t* rust/execute/torture/operator_overload_4.rs: New.\n\t* rust/execute/torture/operator_overload_5.rs: New.\n\t* rust/execute/torture/operator_overload_6.rs: New.\n\t* rust/execute/torture/operator_overload_7.rs: New.\n\t* rust/execute/torture/operator_overload_8.rs: New.\n\t* rust/execute/torture/operator_overload_9.rs: New.\n\t* rust/execute/torture/slice-magic.rs: New.\n\t* rust/execute/torture/slice-magic2.rs: New.\n\t* rust/execute/torture/slice1.rs: New.\n\t* rust/execute/torture/str-layout1.rs: New.\n\t* rust/execute/torture/str-zero.rs: New.\n\t* rust/execute/torture/trait1.rs: New.\n\t* rust/execute/torture/trait10.rs: New.\n\t* rust/execute/torture/trait11.rs: New.\n\t* rust/execute/torture/trait12.rs: New.\n\t* rust/execute/torture/trait13.rs: New.\n\t* rust/execute/torture/trait2.rs: New.\n\t* rust/execute/torture/trait3.rs: New.\n\t* rust/execute/torture/trait4.rs: New.\n\t* rust/execute/torture/trait5.rs: New.\n\t* rust/execute/torture/trait6.rs: New.\n\t* rust/execute/torture/trait7.rs: New.\n\t* rust/execute/torture/trait8.rs: New.\n\t* rust/execute/torture/trait9.rs: New.\n\t* rust/execute/torture/transmute1.rs: New.\n\t* rust/execute/torture/wrapping_op1.rs: New.\n\t* rust/execute/torture/wrapping_op2.rs: New.\n\t* rust/execute/xfail/macro1.rs: New.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "9478a3bd68c9869ddddd84f6a77ee94fb92a4f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9478a3bd68c9869ddddd84f6a77ee94fb92a4f4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a56869d6e339187da4a91697f1185227c8a03ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a56869d6e339187da4a91697f1185227c8a03ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a56869d6e339187da4a91697f1185227c8a03ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a56869d6e339187da4a91697f1185227c8a03ba/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97705b4459b645770ffb6c01ff6177de6774ef3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97705b4459b645770ffb6c01ff6177de6774ef3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97705b4459b645770ffb6c01ff6177de6774ef3c"}], "stats": {"total": 4631, "additions": 4631, "deletions": 0}, "files": [{"sha": "d561f8cab593403deab46e453e87d9e225408b10", "filename": "gcc/testsuite/rust/execute/torture/block_expr1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fblock_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fblock_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fblock_expr1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,8 @@\n+fn main() -> i32 {\n+    let ret = {\n+        1;\n+        2;\n+        0\n+    };\n+    ret\n+}"}, {"sha": "fad2daef6bc0ccdb91e6643949a1424d427da63f", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_cfg.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"A\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let cfg = cfg!(A);\n+    if cfg {\n+        print(\"A\");\n+    }\n+    let cfg = cfg!(B);\n+    if cfg {\n+        print(\"B\");\n+    }\n+\n+    0\n+}"}, {"sha": "9b33924f5a19efcfb89aba5e35e411b70653a279", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_concat.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,29 @@\n+// { dg-output \"\\ntest10btrue2.15\\ntest10bfalse2.151\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = concat!();\n+    let b = concat!(\"test\", 10, 'b', true, 2.15);\n+    let c = concat!(\"test\", 10, 'b', false, 2.15, 1u64);\n+    print(a);\n+    print(b);\n+    print(c);\n+\n+    0\n+}"}, {"sha": "a5c80b257288655837575f06b9cc891493c3a4c3", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_env.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,31 @@\n+// { dg-output \"VALUE\\nVALUE\\n\" }\n+// { dg-set-compiler-env-var ENV_MACRO_TEST \"VALUE\" }\n+#[rustc_builtin_macro]\n+macro_rules! env {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let val0 = env!(\"ENV_MACRO_TEST\");\n+\n+    print(val0);\n+\n+    let val1 = env!(\"ENV_MACRO_TEST\",);\n+\n+    print(val1);\n+\n+    0\n+}"}, {"sha": "087f0220de518d1b5d8df6bf1081c5e2d3930ca7", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_bytes.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,46 @@\n+// { dg-output \"104\\n33\\n1\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! include_bytes {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(s, value);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let bytes = include_bytes!(\"include.txt\");\n+\n+    print_int(bytes[0] as i32);\n+    print_int(bytes[14] as i32);\n+\n+    let the_bytes = b\"hello, include!\\n\";\n+\n+    let x = bytes[0] == the_bytes[0]\n+        && bytes[1] == the_bytes[1]\n+        && bytes[2] == the_bytes[2]\n+        && bytes[3] == the_bytes[3]\n+        && bytes[4] == the_bytes[4]\n+        && bytes[5] == the_bytes[5]\n+        && bytes[6] == the_bytes[6]\n+        && bytes[7] == the_bytes[7]\n+        && bytes[8] == the_bytes[8]\n+        && bytes[9] == the_bytes[9]\n+        && bytes[10] == the_bytes[10]\n+        && bytes[11] == the_bytes[11]\n+        && bytes[12] == the_bytes[12]\n+        && bytes[13] == the_bytes[13]\n+        && bytes[14] == the_bytes[14]\n+        && bytes[15] == the_bytes[15];\n+\n+    print_int(x as i32);\n+\n+    0\n+}"}, {"sha": "6f9871d379c665037b116a47eaa4dae5f17432d8", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_str.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,27 @@\n+// { dg-output \"hello, include!\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! include_str {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    // include_str! (and include_bytes!) allow for an optional trailing comma.\n+    let my_str = include_str!(\"include.txt\",);\n+\n+    print(my_str);\n+\n+    0\n+}"}, {"sha": "02541ed52e2e4b3b6dfd5a71242d38feae2f7914", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_line.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,25 @@\n+// { dg-output \"18\\n21\\n\" }\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! line {\n+    () => {{}};\n+}\n+\n+fn main() -> i32 {\n+    let a = line!();\n+    print(a);\n+\n+    let b = line!();\n+    print(b);\n+\n+    0\n+}"}, {"sha": "5976478e42615c563d03368cbef72d3edcd0d5e9", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,21 @@\n+// { dg-output \"rust/execute/torture/builtin_macros1.rs\" }\n+#[rustc_builtin_macro]\n+macro_rules! file {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\"%s\\n\\0\" as *const str as *const i8, s);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    print(file!());\n+\n+    0\n+}"}, {"sha": "24555cbdb8acec06398b62bcf1e7bd443340fd52", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,28 @@\n+// { dg-output \"14\\n42\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! column {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let c0 = column!();\n+\n+    print(c0);\n+\n+    let c1 =                             column!();\n+\n+    print(c1);\n+\n+    0\n+}\n+"}, {"sha": "d3c56295503f804f51b5cf231194a5fdf09cc859", "filename": "gcc/testsuite/rust/execute/torture/cfg1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[cfg(A)]\n+fn test() {\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+#[cfg(B)]\n+fn test() {\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    test();\n+    0\n+}"}, {"sha": "5048bcb2791d76c6e166c1eeffde663efa754b58", "filename": "gcc/testsuite/rust/execute/torture/cfg2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,31 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn test() {\n+    #[cfg(A)]\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+\n+    #[cfg(B)]\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    test();\n+\n+    0\n+}"}, {"sha": "89312344b2338308c3c3cf69cddc0e6e1c40fd8a", "filename": "gcc/testsuite/rust/execute/torture/cfg3.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,37 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+impl Foo {\n+    #[cfg(A)]\n+    fn test(&self) {\n+        unsafe {\n+            let a = \"test1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+\n+    #[cfg(B)]\n+    fn test(&self) {\n+        unsafe {\n+            let a = \"test2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(123);\n+    a.test();\n+\n+    0\n+}"}, {"sha": "d1c2a22a0ffc0c58e4e8cdcb60e1cf6e1982057b", "filename": "gcc/testsuite/rust/execute/torture/cfg4.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,38 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\ntest2\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+impl Foo {\n+    #[cfg(A)]\n+    fn test(&self) {\n+        unsafe {\n+            let a = \"test1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+\n+    #[cfg(not(B))]\n+    fn test2(&self) {\n+        unsafe {\n+            let a = \"test2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(123);\n+    a.test();\n+    a.test2();\n+\n+    0\n+}"}, {"sha": "581a29bb89d092227874737d7bc255f39ee47950", "filename": "gcc/testsuite/rust/execute/torture/cfg5.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+\n+fn main() -> i32 {\n+    let mut a = 0;\n+\n+    #[cfg(A)]\n+    a = 3;\n+\n+    #[cfg(B)]\n+    a = 40;\n+\n+    a - 3\n+}"}, {"sha": "2cdb9bbca3821ffd6b229e077417a37059984f5b", "filename": "gcc/testsuite/rust/execute/torture/coercion1.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-output \"123\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn static_dispatch<T: Bar>(t: &T) {\n+    t.baz();\n+}\n+\n+fn dynamic_dispatch(t: &dyn Bar) {\n+    t.baz();\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Foo(123);\n+    static_dispatch(&a);\n+\n+    let b: &dyn Bar;\n+    b = &a;\n+    dynamic_dispatch(b);\n+\n+    0\n+}"}, {"sha": "12dd68ff5f7415e90bed1707a373d66a328b5083", "filename": "gcc/testsuite/rust/execute/torture/coercion2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-output \"123\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn static_dispatch<T: Bar>(t: &T) {\n+    t.baz();\n+}\n+\n+fn dynamic_dispatch(t: &dyn Bar) {\n+    t.baz();\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = &Foo(123);\n+\n+    static_dispatch(a);\n+    dynamic_dispatch(a);\n+\n+    0\n+}"}, {"sha": "3cd6c0c77b5126056d35b411485705d7317ab4d8", "filename": "gcc/testsuite/rust/execute/torture/const_fold1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w\" }\n+const fn const_fn() -> usize {\n+    4\n+}\n+\n+const FN_TEST: usize = const_fn();\n+\n+const TEST: usize = 2 + FN_TEST;\n+\n+fn main() -> i32 {\n+    let a: [_; 12] = [5; TEST * 2];\n+    a[6] - 5\n+}"}, {"sha": "c525648fe0bc6e2964c802cf5212bed975ba89c1", "filename": "gcc/testsuite/rust/execute/torture/const_fold2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fconst_fold2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,16 @@\n+// { dg-additional-options \"-w\" }\n+const A: i32 = 1;\n+const B: i32 = { A + 2 };\n+\n+const fn test() -> i32 {\n+    B\n+}\n+\n+const C: i32 = {\n+    const a: i32 = 4;\n+    test() + a\n+};\n+\n+fn main() -> i32 {\n+    C - 7\n+}"}, {"sha": "2ae7a0869e3331043f10349240292bc38d0ea825", "filename": "gcc/testsuite/rust/execute/torture/copy_nonoverlapping1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,17 @@\n+extern \"rust-intrinsic\" {\n+    pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+fn main() -> i32 {\n+    let i = 15;\n+    let mut i_copy = 16;\n+\n+    let i = &i as *const i32;\n+    let i_copy = &mut i_copy as *mut i32;\n+\n+    unsafe {\n+        copy_nonoverlapping(i, i_copy, 1);\n+\n+        *i_copy - *i\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "6442e1e4e83622821b3e0938065978692520d6de", "filename": "gcc/testsuite/rust/execute/torture/empty_main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fempty_main.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fempty_main.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fempty_main.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,3 @@\n+fn main() -> i32 {\n+    0\n+}"}, {"sha": "6dfb6d2b446572f4c48e760bb6d5e59f1be7e624", "filename": "gcc/testsuite/rust/execute/torture/execute.exp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexecute.exp?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,33 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Execute tests, torture testing.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"run\"\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.rs]] \"\" \"\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "c3d0d9f2480f05727449717969bbaf5c5f9a9d52", "filename": "gcc/testsuite/rust/execute/torture/exit_error.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexit_error.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexit_error.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fexit_error.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,5 @@\n+// { dg-xfail-run-if \"\" { *-*-* } }\n+\n+fn main() -> i32 {\n+    1\n+}"}, {"sha": "99b6fb5c9ba0e3ee2acc781bc55819c135614e4b", "filename": "gcc/testsuite/rust/execute/torture/extern_mod4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fextern_mod4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,19 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"12\" }\n+mod modules;\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let fmt_s = \"%d\\n\\0\";\n+        let fmt_p = fmt_s as *const str;\n+        let fmt_i8 = fmt_p as *const i8;\n+\n+        printf(fmt_i8, modules::return_12());\n+    }\n+\n+    return 0;\n+}"}, {"sha": "0a093d8858777a96e23bb5220095af7de1d5fc9e", "filename": "gcc/testsuite/rust/execute/torture/func1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ffunc1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,5 @@\n+fn main() -> i32 {\n+    1;\n+    2;\n+    0\n+}"}, {"sha": "d416efa33af66cf99be3f9d9a1b394d90d37274b", "filename": "gcc/testsuite/rust/execute/torture/helloworld1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World\" }*/\n+extern \"C\" {\n+    fn puts(s: *const i8);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        puts(c);\n+    }\n+    0\n+}"}, {"sha": "cc05f3798fac51fadeaac4b0fa276024263c5370", "filename": "gcc/testsuite/rust/execute/torture/helloworld2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World 123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World %i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, 123);\n+    }\n+    0\n+}"}, {"sha": "12c368778e1503c8099e7dc96a4d74b0de0ee386", "filename": "gcc/testsuite/rust/execute/torture/include.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Finclude.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Finclude.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Finclude.txt?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1 @@\n+hello, include!"}, {"sha": "4682978bdd0f83702276443eab5ba022e6a06928", "filename": "gcc/testsuite/rust/execute/torture/index1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,28 @@\n+// { dg-additional-options \"-w\" }\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+struct Foo(i32, i32);\n+impl Index<isize> for Foo {\n+    type Output = i32;\n+\n+    fn index(&self, index: isize) -> &i32 {\n+        if index == 0 {\n+            &self.0\n+        } else {\n+            &self.1\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(1, 2);\n+    let b = a[0];\n+    let c = a[1];\n+\n+    c - b - 1\n+}"}, {"sha": "242c94b5cb63384300692311c8c1e396539b1743", "filename": "gcc/testsuite/rust/execute/torture/issue-1120.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,123 @@\n+// { dg-additional-options \"-w\" }\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub unsafe trait SliceIndex<T> {\n+    type Output;\n+\n+    fn get(self, slice: &T) -> Option<&Self::Output>;\n+\n+    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n+\n+    fn index(self, slice: &T) -> &Self::Output;\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for Range<usize> {\n+    type Output = [T];\n+\n+    fn get(self, slice: &[T]) -> Option<&[T]> {\n+        if self.start > self.end\n+        /* || self.end > slice.len() */\n+        {\n+            Option::None\n+        } else {\n+            unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+        }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n+        unsafe {\n+            let a: *const T = slice.as_ptr();\n+            let b: *const T = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &[T] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4, 5];\n+    let b = &a[1..3];\n+\n+    0\n+}"}, {"sha": "f2080a6e072ac4cf6705071fc88f36589ae8a8bf", "filename": "gcc/testsuite/rust/execute/torture/issue-1133.rs", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,146 @@\n+// { dg-additional-options \"-w\" }\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub unsafe trait SliceIndex<T> {\n+    type Output;\n+\n+    fn get(self, slice: &T) -> Option<&Self::Output>;\n+\n+    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n+\n+    fn index(self, slice: &T) -> &Self::Output;\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for usize {\n+    type Output = T;\n+\n+    fn get(self, slice: &[T]) -> Option<&T> {\n+        unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\n+        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n+        // cannot be longer than `isize::MAX`. They also guarantee that\n+        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n+        // so the call to `add` is safe.\n+        unsafe { slice.as_ptr().add(self) }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &T {\n+        // N.B., use intrinsic indexing\n+        // &(*slice)[self]\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for Range<usize> {\n+    type Output = [T];\n+\n+    fn get(self, slice: &[T]) -> Option<&[T]> {\n+        if self.start > self.end\n+        /* || self.end > slice.len() */\n+        {\n+            Option::None\n+        } else {\n+            unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+        }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n+        unsafe {\n+            let a: *const T = slice.as_ptr();\n+            let b: *const T = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &[T] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4, 5];\n+    let b = &a[1..3];\n+    let c = b[1];\n+\n+    0\n+}"}, {"sha": "fce44ad19940958c931c05e273c307bd6a255c81", "filename": "gcc/testsuite/rust/execute/torture/issue-1198.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-output \"foo_deref\\nimm_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo: Foo<i32> = Foo(123);\n+    let bar: &i32 = &foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *bar);\n+    }\n+\n+    0\n+}"}, {"sha": "970e86f917a28d35e4ccb3521be7e327d86f73b0", "filename": "gcc/testsuite/rust/execute/torture/issue-1231.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1231.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1231.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1231.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,36 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"outer\\ninner\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn machin() {\n+    unsafe {\n+        let a = \"outer\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, 123);\n+    }\n+}\n+\n+fn bidule() {\n+    fn machin() {\n+        unsafe {\n+            let a = \"inner\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, 123);\n+        }\n+    }\n+\n+    self::machin();\n+    machin();\n+}\n+\n+fn main() -> i32 {\n+    bidule();\n+\n+    0\n+}"}, {"sha": "c56d5c186956ba326f8c3fff7b0c043f68c38539", "filename": "gcc/testsuite/rust/execute/torture/issue-1232.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,159 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"slice_access=3\\n\" }\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub unsafe trait SliceIndex<T> {\n+    type Output;\n+\n+    fn get(self, slice: &T) -> Option<&Self::Output>;\n+\n+    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n+\n+    fn index(self, slice: &T) -> &Self::Output;\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for usize {\n+    type Output = T;\n+\n+    fn get(self, slice: &[T]) -> Option<&T> {\n+        unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\n+        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n+        // cannot be longer than `isize::MAX`. They also guarantee that\n+        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n+        // so the call to `add` is safe.\n+        unsafe { slice.as_ptr().add(self) }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &T {\n+        // N.B., use intrinsic indexing\n+        // &(*slice)[self]\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for Range<usize> {\n+    type Output = [T];\n+\n+    fn get(self, slice: &[T]) -> Option<&[T]> {\n+        if self.start > self.end\n+        /* || self.end > slice.len() */\n+        {\n+            Option::None\n+        } else {\n+            unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+        }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n+        unsafe {\n+            let a: *const T = slice.as_ptr();\n+            let b: *const T = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &[T] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let array = [1, 2, 3, 4, 5];\n+    let slice = &array[1..3];\n+    let slice_access = slice[1];\n+\n+    unsafe {\n+        let a = \"slice_access=%i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, slice_access);\n+    }\n+\n+    0\n+}"}, {"sha": "072204ea877c255e18fefdcfca8e5e5f318cc6a6", "filename": "gcc/testsuite/rust/execute/torture/issue-1249.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-w\" }\n+// { dg-output \"1\\n2\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait T {\n+    fn foo(&self);\n+}\n+\n+impl dyn T {\n+    fn bar(&self) {\n+        unsafe {\n+            let a = \"1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+        self.foo()\n+    }\n+}\n+\n+struct S;\n+impl T for S {\n+    fn foo(&self) {\n+        unsafe {\n+            let a = \"2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    <dyn T>::bar(&S);\n+    0\n+}"}, {"sha": "5c079a61f07eb469db1de122740fdbb7686997cd", "filename": "gcc/testsuite/rust/execute/torture/issue-1436.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,172 @@\n+// { dg-options \"-w\" }\n+// { dg-output \"\" }\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+    }\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { intrinsics::offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+impl<T> [T] {\n+    pub const fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    pub const fn len(&self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+}\n+\n+pub unsafe trait SliceIndex<T> {\n+    type Output;\n+\n+    fn get(self, slice: &T) -> Option<&Self::Output>;\n+\n+    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n+\n+    fn index(self, slice: &T) -> &Self::Output;\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for usize {\n+    type Output = T;\n+\n+    fn get(self, slice: &[T]) -> Option<&T> {\n+        unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {\n+        // SAFETY: the caller guarantees that `slice` is not dangling, so it\n+        // cannot be longer than `isize::MAX`. They also guarantee that\n+        // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n+        // so the call to `add` is safe.\n+        unsafe { slice.as_ptr().add(self) }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &T {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for Range<usize> {\n+    type Output = [T];\n+\n+    fn get(self, slice: &[T]) -> Option<&[T]> {\n+        if self.start > self.end || self.end > slice.len() {\n+            Option::None\n+        } else {\n+            unsafe { Option::Some(&*self.get_unchecked(slice)) }\n+        }\n+    }\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n+        unsafe {\n+            let a: *const T = slice.as_ptr();\n+            let b: *const T = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &[T] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        unsafe {\n+            let a = \"slice-index\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4, 5];\n+    let b = a[1];\n+\n+    b - 2\n+}"}, {"sha": "9f08b2ae98acd43b84c7697f7206eca1e5acbee6", "filename": "gcc/testsuite/rust/execute/torture/issue-1496.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1496.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1496.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1496.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-output \"foo_deref\\nimm_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo = Foo(123);\n+    let bar = &foo as &i32;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *bar);\n+    }\n+\n+    0\n+}"}, {"sha": "3f427ccb785974d4df50e9a8315ee44de2f3e619", "filename": "gcc/testsuite/rust/execute/torture/issue-647.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-647.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-output \"Hello World 123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo<T>(T);\n+\n+struct Bar<T> {\n+    a: Foo<T>,\n+    b: bool,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn test<T>(a: Bar<T>) -> Foo<T> {\n+    a.a\n+}\n+\n+fn main() -> i32 {\n+    let a: Bar<i32> = Bar::<i32> {\n+        a: Foo::<i32>(123),\n+        b: true,\n+    };\n+    let result: Foo<i32> = test(a);\n+\n+    unsafe {\n+        let a = \"Hello World %i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, result.0);\n+    }\n+    0\n+}"}, {"sha": "4c689e3b6c8efbadd8b324cb3631ba40f24ea7e9", "filename": "gcc/testsuite/rust/execute/torture/issue-845.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,47 @@\n+// { dg-output \"Foo::bar\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo {}\n+\n+trait Bar {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"Bar::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"Foo::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"<Bar as Foo>::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let mut f = Foo {};\n+    f.bar();\n+\n+    0\n+}"}, {"sha": "3881c7a2ada1ce080e65e7d413102d884fd34aa9", "filename": "gcc/testsuite/rust/execute/torture/issue-851.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn inspect(a: Foo<i32>) {\n+    match a {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::B(123);\n+    inspect(a);\n+\n+    0\n+}"}, {"sha": "5a43f3e1b1aa8122d489d5287559f2727a6e3df8", "filename": "gcc/testsuite/rust/execute/torture/issue-858.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn main() -> i32 {\n+    let result = Foo::B(123);\n+\n+    match result {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+\n+    0\n+}"}, {"sha": "42cf596fb7d6a947289e0a76b7220c7fb783b4b0", "filename": "gcc/testsuite/rust/execute/torture/issue-976.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-976.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-output \"hi\" } */\n+fn main() -> i32 {\n+    {\n+        extern \"C\" {\n+            fn puts(s: *const i8);\n+        }\n+\n+        unsafe {\n+            puts(\"hi\\0\" as *const str as *const i8);\n+        }\n+    }\n+\n+    0\n+}"}, {"sha": "42570e33f7492902d8c9b8f6d1ee82bbf0bacfb7", "filename": "gcc/testsuite/rust/execute/torture/issue-995.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-995.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,9 @@\n+struct Pattern(i32);\n+\n+fn pattern_as_arg(Pattern(value): Pattern) -> i32 {\n+    value\n+}\n+\n+fn main() -> i32 {\n+    pattern_as_arg(Pattern(15)) - 15\n+}"}, {"sha": "652d2d8fe5bf722a80e84ab54c525151cf5ee580", "filename": "gcc/testsuite/rust/execute/torture/macros1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! add {\n+    ($a:expr,$b:expr) => {\n+        $a + $b\n+    };\n+}\n+\n+fn test() -> i32 {\n+    add!(1 + 2, 3)\n+}\n+\n+fn main() -> i32 {\n+    test() - 6\n+}"}, {"sha": "155a440ee04c7e225803b39e4aa5875937688894", "filename": "gcc/testsuite/rust/execute/torture/macros10.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,22 @@\n+// { dg-output \"18\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(s, value);\n+    }\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)*) => (0 $(+ $e)*)\n+}\n+\n+fn main() -> i32 {\n+    // 1 + 2 + 15 => 18\n+    print_int(add_exprs!(1 2 15));\n+\n+    0\n+}"}, {"sha": "5bde97d3dd4d8407517583648c118a3cf197db5e", "filename": "gcc/testsuite/rust/execute/torture/macros11.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros11.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,25 @@\n+// { dg-output \"2\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\";\n+    let s_p = s as *const str;\n+    let c_p = s_p as *const i8;\n+    unsafe {\n+        printf(c_p, value);\n+    }\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)?) => (0 $(+ $e)?)\n+}\n+\n+fn main() -> i32 {\n+    // 2\n+    let a = add_exprs!(2);\n+    print_int(a);\n+\n+    0\n+}"}, {"sha": "d310dff9ba85dbf2c43370942a3c5d45f5533a5b", "filename": "gcc/testsuite/rust/execute/torture/macros12.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,22 @@\n+// { dg-output \"0\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(s, value);\n+    }\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)?) => (0 $(+ $e)?)\n+}\n+\n+fn main() -> i32 {\n+    // 0\n+    print_int(add_exprs!());\n+\n+    0\n+}"}, {"sha": "afb20264625e953b4f875e59d4cf7277e242acef", "filename": "gcc/testsuite/rust/execute/torture/macros13.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,22 @@\n+// { dg-output \"18\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(s, value);\n+    }\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)+) => (0 $(+ $e)+)\n+}\n+\n+fn main() -> i32 {\n+    // 1 + 2 + 15 => 18\n+    print_int(add_exprs!(1 2 15));\n+\n+    0\n+}"}, {"sha": "00656546d4c5254fa1856f7d296e0d8536c8881a", "filename": "gcc/testsuite/rust/execute/torture/macros14.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,22 @@\n+// { dg-output \"15\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(s, value);\n+    }\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)*) => (15 $(+ $e)*)\n+}\n+\n+fn main() -> i32 {\n+    // 15\n+    print_int(add_exprs!());\n+\n+    0\n+}"}, {"sha": "47ab2411c0d9885a7b42f75766822c27dc48c6cd", "filename": "gcc/testsuite/rust/execute/torture/macros16.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros16.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros16.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros16.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:literal) => {\n+        0 + $e\n+    };\n+    ($e:literal $($es:literal)*) => {\n+        $e + add!($($es)*)\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(1 2 3 10); // 16\n+\n+    a - 16\n+}"}, {"sha": "390352ec47fc716619e5a830b62aa49af4870175", "filename": "gcc/testsuite/rust/execute/torture/macros17.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros17.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros17.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros17.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! two {\n+    (2) => {\n+        3\n+    };\n+}\n+\n+macro_rules! one {\n+    (1) => {{\n+        two!(2)\n+    }};\n+}\n+\n+fn main() -> i32 {\n+    let a = one!(1);\n+\n+    a - 3\n+}"}, {"sha": "61df17e9da597bf2045168b65f0486b12e08867f", "filename": "gcc/testsuite/rust/execute/torture/macros18.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros18.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:literal) => {\n+        0 + $e\n+    };\n+    ($e:literal $($es:literal)*) => {\n+        $e + add!($($es)*)\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(3 4); // 7\n+\n+    a - 7\n+}"}, {"sha": "4732545410eebdc651c8727c4c904061fc3b64b9", "filename": "gcc/testsuite/rust/execute/torture/macros19.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15, 2, 9); // 26\n+\n+    a - 26\n+}"}, {"sha": "ba5098710ea084bcdd103d274738a81d0d489cdb", "filename": "gcc/testsuite/rust/execute/torture/macros2.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,40 @@\n+// { dg-output \"arg\\narg\\narg\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    unsafe {\n+        let r_s = \"arg\\n\\0\";\n+        let s_p = r_s as *const str;\n+        let c_p = s_p as *const i8;\n+\n+        printf(c_p);\n+    }\n+}\n+\n+macro_rules! kw0 {\n+    (keyword) => {\n+        f();\n+    };\n+}\n+\n+macro_rules! kw1 {\n+    (fn) => {\n+        f();\n+    };\n+}\n+\n+macro_rules! kw2 {\n+    (kw0 kw1 kw3) => {\n+        f();\n+    };\n+}\n+\n+fn main() -> i32 {\n+    kw0!(keyword);\n+    kw1!(fn);\n+    kw2!(kw0 kw1 kw3);\n+\n+    0\n+}"}, {"sha": "97317a0879ea72fc02662641db671d4d84f73bb1", "filename": "gcc/testsuite/rust/execute/torture/macros20.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr , $($es:expr) , *) => {\n+        $e + add!($($es) , *)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15, 2, 9); // 26\n+\n+    a - 26\n+}"}, {"sha": "2508be1a6fdca6c0241fbcc7cda8f2cba7613f33", "filename": "gcc/testsuite/rust/execute/torture/macros21.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,15 @@\n+macro_rules! add_parens {\n+    ($($rep:ident ( ) )*) => {\n+        { 0 $(+ $rep ( ))* }\n+    };\n+}\n+\n+fn f() -> i32 {\n+    1\n+}\n+\n+fn main() -> i32 {\n+    let a = add_parens!(f() f() f());\n+\n+    a - 3\n+}"}, {"sha": "3f291ace98ed77703b9ffa1a8a678f0583cd21e2", "filename": "gcc/testsuite/rust/execute/torture/macros22.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,27 @@\n+// { dg-output \"1\\n2\\nNaN\\n3\\n\" }\n+\n+macro_rules! print_num {\n+    ($l:literal) => {{\n+        unsafe {\n+            printf(\"%d\\n\\0\" as *const str as *const i8, $l);\n+        }\n+    }};\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+// Check to make sure that expanding macros does not break the flow of calls\n+fn main() -> i32 {\n+    print_num!(1);\n+    print_num!(2);\n+\n+    unsafe {\n+        printf(\"NaN\\n\\0\" as *const str as *const i8);\n+    }\n+\n+    print_num!(3);\n+\n+    0\n+}"}, {"sha": "846352d048742a802b71ba47613dafdf04022d57", "filename": "gcc/testsuite/rust/execute/torture/macros23.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,19 @@\n+trait Valuable {\n+    const VALUE: i32;\n+}\n+\n+struct Something;\n+\n+macro_rules! implement {\n+    () => {\n+        const VALUE: i32 = 18;\n+    };\n+}\n+\n+impl Valuable for Something {\n+    implement!();\n+}\n+\n+fn main() -> i32 {\n+    Something::VALUE - 18\n+}"}, {"sha": "f838a83af6672a57fc2df99366ed19c4ec1bef8a", "filename": "gcc/testsuite/rust/execute/torture/macros24.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros24.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros24.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros24.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! repeat {\n+    ( $( $i:literal ),* ; $( $j:literal ),* ) => (( $( ($i,$j) ),* ))\n+}\n+\n+fn main() -> i32 {\n+    let t = repeat!(1, 1; 2, 2);\n+\n+    t.0 .0 + t.0 .1 + t.1 .0 + t.1 .1 - 6\n+}"}, {"sha": "c2658721bdfc2e83e69984c19eb8a8ac18bb7f15", "filename": "gcc/testsuite/rust/execute/torture/macros25.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros25.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! t {\n+    ($t:tt) => {\n+        $t\n+    };\n+}\n+\n+fn frob() -> i32 {\n+    t!(15) + t!((14))\n+}\n+\n+fn main() -> i32 {\n+    frob() - 29\n+}"}, {"sha": "30f0beef0d969879a45c915123831422b3d92b61", "filename": "gcc/testsuite/rust/execute/torture/macros26.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros26.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros26.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros26.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! count_tt {\n+    ($t:tt) => { 1 };\n+    ($t:tt $($ts:tt)*) => { 1 + count_tt!($($ts)*) };\n+}\n+\n+fn main() -> i32 {\n+    let count = count_tt!(1 2 let a = 15) + count_tt!(1 2 (let a = 15));\n+    //                    ^ ^ ^^^ ^ ^ ^^              ^ ^ ^^^^^^^^^^^^\n+    //                    6 token-trees               3 token-trees\n+\n+    count - 9\n+}"}, {"sha": "d515bb278a0bc6505ef7dd05764da83cf7d0c509", "filename": "gcc/testsuite/rust/execute/torture/macros27.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,24 @@\n+// { dg-additional-options \"-frust-cfg=A\" }\n+\n+macro_rules! attr {\n+    (#[$attr:meta] $s:stmt) => {\n+        #[$attr]\n+        $s;\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let mut a = 0;\n+\n+    attr! {\n+    #[cfg(A)]\n+        a = 3\n+    };\n+\n+    attr! {\n+    #[cfg(B)]\n+        a = 40\n+    };\n+\n+    a - 3\n+}"}, {"sha": "b011f92414945671f377740648dce6058de58ebf", "filename": "gcc/testsuite/rust/execute/torture/macros28.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros28.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros28.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros28.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! t {\n+    () => {\n+        i32\n+    };\n+}\n+\n+fn id<T>(arg: T) -> T {\n+    arg\n+}\n+\n+fn main() -> i32 {\n+    id::<t!()>(15) - 15\n+}"}, {"sha": "306979b9b5b03ed913e66bb55f9e08563e2be82d", "filename": "gcc/testsuite/rust/execute/torture/macros29.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,24 @@\n+// { dg-output \"1\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let res = concat!(\"test2\") == \"test3\";\n+    if !res {\n+        print(1);\n+    }\n+\n+    0\n+}"}, {"sha": "00f6d253f5039f40ba9822dab6b9ad3e9e6cfbfb", "filename": "gcc/testsuite/rust/execute/torture/macros3.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,61 @@\n+// { dg-output \"invok\\ninvok\\ninvok\\ninvok\\ninvok\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    unsafe {\n+        let r_s = \"invok\\n\\0\";\n+        let s_p = r_s as *const str;\n+        let c_p = s_p as *const i8;\n+\n+        printf(c_p);\n+    }\n+}\n+\n+macro_rules! invocation0 {\n+    (valid) => {\n+        f();\n+    };\n+    () => {};\n+}\n+\n+macro_rules! invocation1 {\n+    (valid) => {};\n+    () => {\n+        f();\n+    };\n+}\n+\n+macro_rules! invocation2 {\n+    (valid) => {\n+        f();\n+    };\n+    (invalid) => {};\n+}\n+\n+macro_rules! invocation3 {\n+    (this is a valid invocation) => {\n+        f();\n+    };\n+    (not this one) => {};\n+}\n+\n+macro_rules! invocation4 {\n+    (fn f() {}) => {\n+        f();\n+    };\n+    (not a keyword) => {};\n+}\n+\n+fn main() -> i32 {\n+    invocation0!(valid);\n+    invocation1!();\n+    invocation2!(valid);\n+    invocation3!(this is a valid invocation);\n+    invocation4!(\n+        fn f() {}\n+    );\n+\n+    0\n+}"}, {"sha": "ab36f5e78af644ab076205938639429aaa25b29b", "filename": "gcc/testsuite/rust/execute/torture/macros30.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,25 @@\n+// { dg-output \"1\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let mut x = concat!(\"x\");\n+    x = concat!(\"y\");\n+    if x == \"y\" {\n+        print(1);\n+    }\n+\n+    0\n+}"}, {"sha": "483f897a92bc6a6189d55532e9f7f34913d51bf6", "filename": "gcc/testsuite/rust/execute/torture/macros31.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"A\\nB\\n\" }\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let cfg = cfg!(A) || cfg!(B);\n+    if cfg {\n+        print(\"A\");\n+    }\n+    let cfg = cfg!(A) && cfg!(B);\n+    if !cfg {\n+        print(\"B\");\n+    }\n+\n+    0\n+}"}, {"sha": "3303bfa58aa6d711746b0c1aaf669966aebc93b5", "filename": "gcc/testsuite/rust/execute/torture/macros4.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,15 @@\n+macro_rules! add {\n+    ($a:expr,$b:expr) => {\n+        $a + $b\n+    };\n+    ($a:expr) => {\n+        $a\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let mut x = add!(1);\n+    x += add!(2, 3);\n+\n+    x - 6\n+}"}, {"sha": "822665494a4519a883a957f935528d9b926a8103", "filename": "gcc/testsuite/rust/execute/torture/macros5.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros5.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! add {\n+    ($a:expr,$b:expr) => {{\n+        $a + $b\n+    }};\n+}\n+\n+fn test() -> i32 {\n+    add!(1, 2)\n+}\n+\n+fn main() -> i32 {\n+    test() - 3\n+}"}, {"sha": "652a765d5a881b7bc0ce80bcc420cfee71220e72", "filename": "gcc/testsuite/rust/execute/torture/macros6.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros6.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! Test {\n+    ($a:ident, $b:ty) => {\n+        struct $a($b);\n+    };\n+}\n+\n+Test!(Foo, i32);\n+\n+fn main() -> i32 {\n+    let a = Foo(123);\n+    a.0 - 123\n+}"}, {"sha": "ed1f922f581b24538ba5ad39e64521b4a04a0753", "filename": "gcc/testsuite/rust/execute/torture/macros7.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros7.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,28 @@\n+// { dg-output \"any\\nany\\nany\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"any\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    unsafe {\n+        printf(c_p);\n+    }\n+}\n+\n+macro_rules! any {\n+    ($($a:expr)*) => {\n+        f();\n+    };\n+}\n+\n+fn main() -> i32 {\n+    any!();\n+    any!(a + b);\n+    any!(a + b    14 \"gcc\");\n+\n+    0\n+}"}, {"sha": "a12aca4910e2534809d25aeaacde96137ff2f363", "filename": "gcc/testsuite/rust/execute/torture/macros8.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros8.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,27 @@\n+// { dg-output \"zo1\\nzo1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"zo1\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    unsafe {\n+        printf(c_p);\n+    }\n+}\n+\n+macro_rules! zero_or_one {\n+    ($($a:expr)?) => {\n+        f();\n+    };\n+}\n+\n+fn main() -> i32 {\n+    zero_or_one!();\n+    zero_or_one!(f());\n+\n+    0\n+}"}, {"sha": "0e3fd24e8a91a7ff80f17355e36ae280be7bac6d", "filename": "gcc/testsuite/rust/execute/torture/macros9.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros9.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,28 @@\n+// { dg-output \"oom\\noom\\noom\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"oom\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    unsafe {\n+        printf(c_p);\n+    }\n+}\n+\n+macro_rules! one_or_more {\n+    ($($a:expr)+) => {\n+        f();\n+    };\n+}\n+\n+fn main() -> i32 {\n+    one_or_more!(f());\n+    one_or_more!(f() f());\n+    one_or_more!(f() f() 15 + 12);\n+\n+    0\n+}"}, {"sha": "e5af512f15d813aaa96b74a67d3d1cc64d93eb2a", "filename": "gcc/testsuite/rust/execute/torture/match1.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,58 @@\n+// { dg-output \"Foo::A\\nFoo::B\\nFoo::C x\\nFoo::D 20 80\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i32, y: i32 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => unsafe {\n+            let a = \"Foo::A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B => unsafe {\n+            let a = \"Foo::B\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::C(x) => unsafe {\n+            let a = \"Foo::C %c\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+        Foo::D { x, y } => unsafe {\n+            let a = \"Foo::D %i %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x, y);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::A;\n+    let b = Foo::B;\n+    let c = Foo::C('x');\n+    let d = Foo::D { x: 20, y: 80 };\n+\n+    inspect(a);\n+    inspect(b);\n+    inspect(c);\n+    inspect(d);\n+\n+    0\n+}"}, {"sha": "02cedf29b3c89be8f496d9d1db8159a2302d8739", "filename": "gcc/testsuite/rust/execute/torture/match2.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,41 @@\n+// { dg-output \"123\\n80\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo {\n+    C(i32),\n+    D { x: i32, y: i32 },\n+}\n+\n+fn inspect(f: Foo) -> i32 {\n+    match f {\n+        Foo::C(x) => x,\n+        Foo::D { x, y } => y,\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::C(123);\n+    let b = Foo::D { x: 20, y: 80 };\n+\n+    let result = inspect(a);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, result);\n+    }\n+\n+    let result = inspect(b);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, result);\n+    }\n+\n+    0\n+}"}, {"sha": "8cded3044df046457589e7140003655efbe466d5", "filename": "gcc/testsuite/rust/execute/torture/match3.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,51 @@\n+// { dg-output \"Foo::A\\nwildcard\\nwildcard\\nFoo::D 20 80\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i32, y: i32 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => unsafe {\n+            let a = \"Foo::A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::D { x, y } => unsafe {\n+            let a = \"Foo::D %i %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x, y);\n+        },\n+        _ => unsafe {\n+            let a = \"wildcard\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::A;\n+    let b = Foo::B;\n+    let c = Foo::C('x');\n+    let d = Foo::D { x: 20, y: 80 };\n+\n+    inspect(a);\n+    inspect(b);\n+    inspect(c);\n+    inspect(d);\n+\n+    0\n+}"}, {"sha": "101dbb5857141d3a675c342a601264bbcf3cbd24", "filename": "gcc/testsuite/rust/execute/torture/match_bool1.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,49 @@\n+// { dg-output \"182 is more than 100\\n55 is less than 100\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo(x: bool) -> i32 {\n+    match x {\n+        true => {\n+            return 182;\n+        }\n+        false => {\n+            return 55;\n+        }\n+    }\n+}\n+\n+fn bar(y: i32) {\n+    match y < 100 {\n+        true => {\n+            let a = \"%i is less than 100\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            unsafe {\n+                printf(c, y);\n+            }\n+        }\n+        _ => {\n+            let a = \"%i is more than 100\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            unsafe {\n+                printf(c, y);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = foo(true);\n+    let b = foo(false);\n+\n+    bar(a);\n+    bar(b);\n+\n+    0\n+}"}, {"sha": "3546cfb9d8b203bd5265b7ae9ff8674d37d1c044", "filename": "gcc/testsuite/rust/execute/torture/match_byte1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,56 @@\n+// { dg-output \"a\\nseven\\nquote\\nelse\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo(x: u8) {\n+    match x {\n+        b'a' => {\n+            let a = \"a\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        b'\\x07' => {\n+            let a = \"seven\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        b'\\'' => {\n+            let a = \"quote\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"else\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let x: u8 = 7;\n+\n+    foo(b'a');\n+    foo(x);\n+    foo(b'\\'');\n+    foo(b'\\\\');\n+\n+    0\n+}"}, {"sha": "fa65876a9077af2723f4d5df0384118d86ddc7e0", "filename": "gcc/testsuite/rust/execute/torture/match_char1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,56 @@\n+// { dg-output \"amazing\\nwildcard\\ncompiler\\nproductivity\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo(x: char) {\n+    match x {\n+        'a' => {\n+            let a = \"amazing\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        'c' => {\n+            let a = \"compiler\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        'p' => {\n+            let a = \"productivity\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"wildcard\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let p = 'p';\n+\n+    foo('a');\n+    foo('b');\n+    foo('c');\n+    foo(p);\n+\n+    0\n+}"}, {"sha": "209429added14d06cf297a2fd1a3521f81c2e720", "filename": "gcc/testsuite/rust/execute/torture/match_int1.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,109 @@\n+// { dg-output \"other!\\nother!\\nother!\\nfifteen!\\nfifteen!\\nother!\\nother!\\nfifteen!\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo_i32(x: i32) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn foo_isize(x: isize) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn foo_u32(x: u32) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn foo_usize(x: usize) {\n+    match x {\n+        15 => {\n+            let a = \"fifteen!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"other!\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let x = -2;\n+    foo_i32(x);\n+    foo_i32(334);\n+    foo_isize(-4768);\n+    foo_isize(15);\n+\n+    let y = 127;\n+    foo_u32(15);\n+    foo_u32(y);\n+    foo_usize(2394);\n+    foo_usize(15);\n+\n+    0\n+}"}, {"sha": "bb6aee946f6fefce0ba92ac16233e35cb5b51c62", "filename": "gcc/testsuite/rust/execute/torture/match_loop1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,56 @@\n+// { dg-output \"E::One\\nE::Two\\nbreak!\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum E {\n+    One,\n+    Two,\n+    Other,\n+}\n+\n+fn foo() {\n+    let mut x = E::One;\n+\n+    loop {\n+        match x {\n+            E::One => {\n+                let a = \"E::One\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                unsafe {\n+                    printf(c);\n+                }\n+\n+                x = E::Two;\n+            }\n+            E::Two => {\n+                let a = \"E::Two\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                unsafe {\n+                    printf(c);\n+                }\n+\n+                x = E::Other;\n+            }\n+            _ => {\n+                let a = \"break!\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                unsafe {\n+                    printf(c);\n+                }\n+\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    foo();\n+\n+    0\n+}"}, {"sha": "82e9e34a989c7ecdafbb300c8053b835a86a8bec", "filename": "gcc/testsuite/rust/execute/torture/match_range1.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,37 @@\n+// { dg-output \"zero to END_RANGE\\nzero to END_RANGE\\nelse\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const END_RANGE: i32 = 15;\n+\n+fn foo(x: i32) {\n+    match x {\n+        0..=END_RANGE => {\n+            let a = \"zero to END_RANGE\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+\n+        _ => {\n+            let a = \"else\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    foo(11);\n+    foo(15);\n+    foo(21);\n+\n+    0\n+}"}, {"sha": "8153f9e1c7ecc171d1ef456801dbd8148019d583", "filename": "gcc/testsuite/rust/execute/torture/match_range2.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,45 @@\n+// { dg-output \"lowercase\\nuppercase\\nother\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const BIG_A: char = 'A';\n+const BIG_Z: char = 'Z';\n+\n+fn bar(x: char) {\n+    match x {\n+        'a'..='z' => {\n+            let a = \"lowercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+        BIG_A..=BIG_Z => {\n+            let a = \"uppercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+        _ => {\n+            let a = \"other\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            unsafe {\n+                printf(c);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    bar('b');\n+    bar('X');\n+    bar('!');\n+\n+    0\n+}"}, {"sha": "cb61cc0847c05e10bcbab3a3b90617ff9a3a5c29", "filename": "gcc/testsuite/rust/execute/torture/match_tuple1.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,45 @@\n+// { dg-output \"x:15\\ny:20\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo {\n+    A,\n+    B,\n+}\n+\n+fn inspect(f: Foo, g: u8) -> i32 {\n+    match (f, g) {\n+        (Foo::A, 1) => {\n+            return 5;\n+        }\n+\n+        (Foo::A, 2) => {\n+            return 10;\n+        }\n+\n+        (Foo::B, 2) => {\n+            return 15;\n+        }\n+\n+        _ => {\n+            return 20;\n+        }\n+    }\n+    return 25;\n+}\n+\n+fn main() -> i32 {\n+    let x = inspect(Foo::B, 2);\n+    let y = inspect(Foo::B, 1);\n+\n+    unsafe {\n+        printf(\"x:%d\\n\" as *const str as *const i8, x);\n+    }\n+    unsafe {\n+        printf(\"y:%d\\n\" as *const str as *const i8, y);\n+    }\n+\n+    y - x - 5\n+}"}, {"sha": "6af6133939b37f7ae5d8a913682b036cb31adaf9", "filename": "gcc/testsuite/rust/execute/torture/method1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-output \"124\\n458\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+impl Foo {\n+    fn bar(&self, i: i32) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0 + i);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(123);\n+    a.bar(1);\n+\n+    let b = &Foo(456);\n+    b.bar(2);\n+\n+    0\n+}"}, {"sha": "f532b4488c6d0c1b223f0380edc94eff93f309c9", "filename": "gcc/testsuite/rust/execute/torture/method2.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,76 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"foo_deref\\nimm_deref\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Bar(i32);\n+impl Bar {\n+    fn foobar(self) -> i32 {\n+        self.0\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let bar = Bar(123);\n+    let foo: Foo<&Bar> = Foo(&bar);\n+    let foobar: i32 = foo.foobar();\n+\n+    foobar - 123\n+}"}, {"sha": "0e9e8ff42a0d3811bca63fdde095a61add19eab8", "filename": "gcc/testsuite/rust/execute/torture/method3.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,78 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"mut_deref\\nfoobar: 123\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[lang = \"deref_mut\"]\n+pub trait DerefMut: Deref {\n+    fn deref_mut(&mut self) -> &mut Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        *self\n+    }\n+}\n+\n+pub struct Bar(i32);\n+impl Bar {\n+    pub fn foobar(&mut self) -> i32 {\n+        self.0\n+    }\n+}\n+\n+pub struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+impl<T> DerefMut for Foo<T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &mut self.0\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let bar = Bar(123);\n+    let mut foo: Foo<Bar> = Foo(bar);\n+    let foobar = foo.foobar();\n+\n+    unsafe {\n+        let a = \"foobar: %i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, foobar);\n+    }\n+\n+    foobar - 123\n+}"}, {"sha": "5c6fdfe02c3b89d02d1b3fbc46c3a4c0ab634f9c", "filename": "gcc/testsuite/rust/execute/torture/method4.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmethod4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,78 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"mut_deref\\nfoobar: 123\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[lang = \"deref_mut\"]\n+pub trait DerefMut: Deref {\n+    fn deref_mut(&mut self) -> &mut Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        *self\n+    }\n+}\n+\n+pub struct Bar(i32);\n+impl Bar {\n+    pub fn foobar(&mut self) -> i32 {\n+        self.0\n+    }\n+}\n+\n+pub struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+impl<T> DerefMut for Foo<T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &mut self.0\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let mut bar = Bar(123);\n+    let mut foo: Foo<&mut Bar> = Foo(&mut bar);\n+    let foobar = foo.foobar();\n+\n+    unsafe {\n+        let a = \"foobar: %i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, foobar);\n+    }\n+\n+    foobar - 123\n+}"}, {"sha": "700393850afed3cc5b5bb6163accb3ed3bba481b", "filename": "gcc/testsuite/rust/execute/torture/mod1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,21 @@\n+mod A {\n+    pub mod B {\n+        pub mod C {\n+            pub struct Foo {\n+                pub f: i32,\n+            }\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    Foo { f: 23i32 }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = A::B::C::Foo::new();\n+    let b = A::B::C::Foo { f: -23i32 };\n+\n+    a.f + b.f\n+}"}, {"sha": "9020aaf4bb8dfd2705fe59578a1664e6dacce93b", "filename": "gcc/testsuite/rust/execute/torture/modules/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmodules%2Fmod.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,3 @@\n+fn return_12() -> i32 {\n+    12\n+}"}, {"sha": "5a28c5f4e9383539ba09827124ed8a9eb40674e2", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_1.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-output \"3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"add\"]\n+pub trait Add<Rhs = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+impl Add for i32 {\n+    type Output = i32;\n+\n+    fn add(self, other: i32) -> i32 {\n+        let res = self + other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res);\n+        }\n+\n+        res\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = 1 + 2;\n+\n+    0\n+}"}, {"sha": "f5d45db5338bd1e59406341d12a4d1196474d329", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_10.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-output \"foo_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo: Foo<i32> = Foo(123);\n+    let bar: i32 = *foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, bar);\n+    }\n+\n+    0\n+}"}, {"sha": "1919941c48612b07534583d1de9daf488be6463f", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_11.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_11.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,37 @@\n+// { dg-output \"1\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"bitand\"]\n+pub trait BitAnd<Rhs = Self> {\n+    type Output;\n+\n+    fn bitand(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+impl BitAnd for i32 {\n+    type Output = i32;\n+\n+    fn bitand(self, other: i32) -> i32 {\n+        let res = self & other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res);\n+        }\n+\n+        res\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = 1 & 1;\n+\n+    0\n+}"}, {"sha": "7433330fa313ae8c5b57fc8f8c620965d3bb9605", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_12.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_12.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,31 @@\n+// { dg-output \"1\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"bitand_assign\"]\n+pub trait BitAndAssign<Rhs = Self> {\n+    fn bitand_assign(&mut self, rhs: Rhs);\n+}\n+\n+impl BitAndAssign for i32 {\n+    fn bitand_assign(&mut self, other: i32) {\n+        *self &= other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, *self);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let mut a = 1;\n+    a &= 1;\n+\n+    0\n+}"}, {"sha": "a577718451d07f7714e4bd5d4b5e029bd2bedced", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-output \"3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"add\"]\n+pub trait Add<Rhs = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+struct Foo(i32);\n+\n+impl Add for Foo {\n+    type Output = Foo;\n+\n+    fn add(self, other: Foo) -> Foo {\n+        let res = Foo(self.0 + other.0);\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res.0);\n+        }\n+\n+        res\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Foo(1) + Foo(2);\n+\n+    0\n+}"}, {"sha": "57f58076c3eb8748249789475c4ad25ffc568ca4", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_3.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-output \"3\\n3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"add\"]\n+pub trait Add<Rhs = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: Rhs) -> Self::Output;\n+}\n+\n+impl Add for i32 {\n+    type Output = i32;\n+\n+    fn add(self, other: i32) -> i32 {\n+        let res = self + other;\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res);\n+        }\n+\n+        res\n+    }\n+}\n+\n+struct Foo(i32);\n+impl Add for Foo {\n+    type Output = Foo;\n+\n+    fn add(self, other: Foo) -> Foo {\n+        let res = Foo(self.0 + other.0);\n+\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, res.0);\n+        }\n+\n+        res\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Foo(1) + Foo(2);\n+\n+    0\n+}"}, {"sha": "ce9887b2ead10e3514ed795e95b20f24824bb9cd", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_4.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-output \"neg\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"neg\"]\n+pub trait Neg {\n+    type Output;\n+\n+    fn neg(self) -> Self::Output;\n+}\n+\n+impl Neg for i32 {\n+    type Output = i32;\n+\n+    fn neg(self) -> i32 {\n+        unsafe {\n+            let a = \"neg\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+        -self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: i32 = 1;\n+    let _b = -a;\n+\n+    0\n+}"}, {"sha": "a525f743680f009d6c2e34d4a065499053f50200", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_5.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-output \"not\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"not\"]\n+pub trait Not {\n+    type Output;\n+\n+    fn not(self) -> Self::Output;\n+}\n+\n+impl Not for i32 {\n+    type Output = i32;\n+\n+    fn not(self) -> i32 {\n+        unsafe {\n+            let a = \"not\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+        !self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: i32 = 1;\n+    let _b = !a;\n+\n+    0\n+}"}, {"sha": "fbd2a8fa9d39d9cdad6e8b388e34b42b776078a0", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_6.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-output \"add_assign\\n3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"add_assign\"]\n+pub trait AddAssign<Rhs = Self> {\n+    fn add_assign(&mut self, rhs: Rhs);\n+}\n+\n+impl AddAssign for i32 {\n+    fn add_assign(&mut self, other: i32) {\n+        unsafe {\n+            let a = \"add_assign\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+        *self += other\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let mut res = 1;\n+    res += 2;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, res);\n+    }\n+\n+    0\n+}"}, {"sha": "886a7010efc693f48f3df0ddc10ddd32670d7914", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_7.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-output \"imm_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo: &i32 = &123;\n+    let res: i32 = *foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, res);\n+    }\n+\n+    0\n+}"}, {"sha": "862e29a4bc64b599f566fa10ed833e3dbed46951", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_8.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-output \"imm_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo: &i32 = &123;\n+    let res: i32 = *foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, res);\n+    }\n+\n+    0\n+}"}, {"sha": "fd972e28ab35fb08558f0a13b3ebebc347446a22", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_9.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-output \"mut_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo = &mut 123;\n+    let res: i32 = *foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, res);\n+    }\n+\n+    0\n+}"}, {"sha": "d1132989ddbd5477412146594fde69bb5724188b", "filename": "gcc/testsuite/rust/execute/torture/slice-magic.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,106 @@\n+// { dg-additional-options \"-w\" }\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<A> *const [A] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const A {\n+        self as *const A\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<B> *const B {\n+    pub const unsafe fn offset(self, count: isize) -> *const B {\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const B {\n+        self as *const B\n+    }\n+}\n+\n+const fn slice_from_raw_parts<C>(data: *const C, len: usize) -> *const [C] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub unsafe trait SliceIndex<X> {\n+    type Output;\n+\n+    unsafe fn get_unchecked(self, slice: *const X) -> *const Self::Output;\n+\n+    fn index(self, slice: &X) -> &Self::Output;\n+}\n+\n+unsafe impl<Y> SliceIndex<[Y]> for Range<usize> {\n+    type Output = [Y];\n+\n+    unsafe fn get_unchecked(self, slice: *const [Y]) -> *const [Y] {\n+        unsafe {\n+            let a: *const Y = slice.as_ptr();\n+            let b: *const Y = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[Y]) -> &[Y] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4, 5];\n+    let b = &a[1..3];\n+\n+    0\n+}"}, {"sha": "64a566185fac57055a4f7d9722cf906bbd28129a", "filename": "gcc/testsuite/rust/execute/torture/slice-magic2.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,106 @@\n+// { dg-additional-options \"-w\" }\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+\n+    pub const fn as_ptr(self) -> *const T {\n+        self as *const T\n+    }\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        Repr {\n+            raw: FatPtr { data, len },\n+        }\n+        .rust\n+    }\n+}\n+\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+pub unsafe trait SliceIndex<T> {\n+    type Output;\n+\n+    unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n+\n+    fn index(self, slice: &T) -> &Self::Output;\n+}\n+\n+unsafe impl<T> SliceIndex<[T]> for Range<usize> {\n+    type Output = [T];\n+\n+    unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {\n+        unsafe {\n+            let a: *const T = slice.as_ptr();\n+            let b: *const T = a.add(self.start);\n+            slice_from_raw_parts(b, self.end - self.start)\n+        }\n+    }\n+\n+    fn index(self, slice: &[T]) -> &[T] {\n+        unsafe { &*self.get_unchecked(slice) }\n+    }\n+}\n+\n+impl<T, I> Index<I> for [T]\n+where\n+    I: SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n+\n+    fn index(&self, index: I) -> &I::Output {\n+        index.index(self)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4, 5];\n+    let b = &a[1..3];\n+\n+    0\n+}"}, {"sha": "a0488b3912c57fad9ef155b153648a64fe7a9e3c", "filename": "gcc/testsuite/rust/execute/torture/slice1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,27 @@\n+// { dg-additional-options \"-w\" }\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe {\n+        let a = FatPtr { data, len };\n+        let b = Repr { raw: a };\n+        b.rust\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = 123;\n+    let b: *const i32 = &a;\n+    let c = slice_from_raw_parts(b, 1);\n+\n+    0\n+}"}, {"sha": "80bdc2a9c9f44f52232b582032688bf03ca91408", "filename": "gcc/testsuite/rust/execute/torture/str-layout1.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,57 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"t1sz=5 t2sz=10\" }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+        fn transmute<T, U>(_: T) -> U;\n+    }\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+impl<T> [T] {\n+    pub const fn len(&self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+}\n+\n+impl str {\n+    pub const fn len(&self) -> usize {\n+        self.as_bytes().len()\n+    }\n+\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        unsafe { mem::transmute(self) }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let t1: &str = \"TEST1\";\n+    let t2: &str = &\"TEST_12345\";\n+\n+    let t1sz = t1.len();\n+    let t2sz = t2.len();\n+\n+    unsafe {\n+        let a = \"t1sz=%i t2sz=%i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, t1sz as i32, t2sz as i32);\n+    }\n+\n+    0\n+}"}, {"sha": "e7fba0d1372a37a99719cefdacc17539dddea8de", "filename": "gcc/testsuite/rust/execute/torture/str-zero.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-zero.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-output \"bar foo baz foobar\\n\" } */\n+extern \"C\"\n+{\n+  fn printf(s: *const i8, ...);\n+  fn memchr(s: *const i8, c: u8, n: usize) -> *const i8;\n+}\n+\n+pub fn main () -> i32\n+{\n+  let f = \"%s %s %s %s\\n\\0\";\n+  let s = \"bar\\0\\\n+           foo\\\n+           \\x00\\\n+           baz\\u{0000}\\\n+           foobar\\0\";\n+  let cf = f as *const str as *const i8;\n+  let cs = s as *const str as *const i8;\n+  unsafe\n+    {\n+      let cs2 = memchr (cs, b'f', 5);\n+      let cs3 = memchr (cs2, b'b', 5);\n+      let cs4 = memchr (cs3, b'f', 5);\n+      printf (cf, cs, cs2, cs3, cs4);\n+    }\n+  0\n+}"}, {"sha": "dc3cc471c3321b69aff96bc9bba626ebdfdb8416", "filename": "gcc/testsuite/rust/execute/torture/trait1.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-output \"S::f\\nT1::f\\nT2::f\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct S;\n+\n+impl S {\n+    fn f() {\n+        unsafe {\n+            let a = \"S::f\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+\n+trait T1 {\n+    fn f() {\n+        unsafe {\n+            let a = \"T1::f\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+impl T1 for S {}\n+\n+trait T2 {\n+    fn f() {\n+        unsafe {\n+            let a = \"T2::f\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+impl T2 for S {}\n+\n+fn main() -> i32 {\n+    S::f();\n+    <S as T1>::f();\n+    <S as T2>::f();\n+\n+    0\n+}"}, {"sha": "e581e324bbf7b67f73e3558dcc848801eb11faf7", "filename": "gcc/testsuite/rust/execute/torture/trait10.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+struct S;\n+impl S {\n+    fn dynamic_dispatch(self, t: &dyn Bar) {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        t.baz();\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let a;\n+    a = &Foo(123);\n+\n+    let b;\n+    b = S;\n+\n+    b.dynamic_dispatch(a);\n+\n+    0\n+}"}, {"sha": "283c9ecd0ede503344f7dd69959ba29448bc832e", "filename": "gcc/testsuite/rust/execute/torture/trait11.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-output \"3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait FnLike<A, R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+struct S;\n+impl<'a, T> FnLike<&'a T, &'a T> for S {\n+    fn call(&self, arg: &'a T) -> &'a T {\n+        // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+        arg\n+    }\n+}\n+\n+fn indirect<F>(f: F)\n+where\n+    F: for<'a> FnLike<&'a isize, &'a isize>,\n+{\n+    let x = 3;\n+    let y = f.call(&x);\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *y);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    indirect(S);\n+\n+    0\n+}"}, {"sha": "68b0a4014ad8d99a3857681ba7c5d35bdbcf2bb2", "filename": "gcc/testsuite/rust/execute/torture/trait12.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-output \"3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait FnLike<A, R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n+\n+struct Identity;\n+\n+impl<'a, T> FnLike<&'a T, &'a T> for Identity {\n+    fn call(&self, arg: &'a T) -> &'a T {\n+        // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+        arg\n+    }\n+}\n+\n+fn call_repeatedly(f: &FnObject) {\n+    let x = 3;\n+    let y = f.call(&x);\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *y);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    call_repeatedly(&Identity);\n+\n+    0\n+}"}, {"sha": "3071da27a6a84f83bd6c49a5a7258bf064462c4e", "filename": "gcc/testsuite/rust/execute/torture/trait13.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-output \"123\\n456\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+\n+    fn qux(&self) {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, 456);\n+        }\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn dynamic_dispatch(t: &dyn Bar) {\n+    t.baz();\n+    t.qux();\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Foo(123);\n+\n+    let b: &dyn Bar;\n+    b = &a;\n+    dynamic_dispatch(b);\n+\n+    0\n+}"}, {"sha": "c96615fa891fc0a6c4f5dd6f5dc82fc8d507a460", "filename": "gcc/testsuite/rust/execute/torture/trait2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-output \"Bar::A = 456\\n<Foo as Bar>::A = 456\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait Foo {\n+    const A: i32 = 123;\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    const A: i32 = 456;\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Bar::A;\n+\n+    unsafe {\n+        let _a = \"Bar::A = %i\\n\\0\";\n+        let _b = _a as *const str;\n+        let _c = _b as *const i8;\n+        printf(_c, a);\n+    }\n+\n+    let b;\n+    b = <Bar as Foo>::A;\n+\n+    unsafe {\n+        let _a = \"<Foo as Bar>::A = %i\\n\\0\";\n+        let _b = _a as *const str;\n+        let _c = _b as *const i8;\n+        printf(_c, b);\n+    }\n+\n+    0\n+}"}, {"sha": "accfa9d0a36b628f7156802bc866f1cb1bfb76b8", "filename": "gcc/testsuite/rust/execute/torture/trait3.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-output \"123, 777\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait A {\n+    fn a() -> i32 {\n+        123\n+    }\n+}\n+\n+trait B: A {\n+    fn b() -> i32 {\n+        <T as A>::a() + 456\n+    }\n+}\n+\n+struct T;\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+\n+impl A for T {\n+    fn a() -> i32 {\n+        321\n+    }\n+}\n+\n+struct S;\n+impl A for S {}\n+impl B for S {}\n+\n+fn main() -> i32 {\n+    let aa = S::a();\n+    let bb = S::b();\n+\n+    unsafe {\n+        let a = \"%i, %i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, aa, bb);\n+    }\n+    0\n+}"}, {"sha": "8c0d257cd7e9f4762f1fad71a6cd34eea3b1e816", "filename": "gcc/testsuite/rust/execute/torture/trait4.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-output \"123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn type_bound<T: Bar>(t: &T) {\n+    t.baz();\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+\n+    a = &Foo(123);\n+    type_bound(a);\n+\n+    0\n+}"}, {"sha": "49f11a6085a4bcad296b5c8e560a5359d7c8c5f6", "filename": "gcc/testsuite/rust/execute/torture/trait5.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-output \"123\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn static_dispatch<T: Bar>(t: &T) {\n+    t.baz();\n+}\n+\n+fn dynamic_dispatch(t: &dyn Bar) {\n+    t.baz();\n+}\n+\n+fn main() -> i32 {\n+    let a = &Foo(123);\n+    static_dispatch(a);\n+\n+    let b: &dyn Bar = a;\n+    dynamic_dispatch(b);\n+\n+    0\n+}"}, {"sha": "c83d6666c878c07cf47f8f5cf9a66d4480742aa9", "filename": "gcc/testsuite/rust/execute/torture/trait6.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub trait Foo {\n+    type A;\n+\n+    fn bar(self) -> Self::A;\n+}\n+\n+struct S(i32);\n+impl Foo for S {\n+    type A = i32;\n+\n+    fn bar(self) -> Self::A {\n+        self.0\n+    }\n+}\n+\n+fn test_bar<T: Foo>(x: T) -> T::A {\n+    x.bar()\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = S(123);\n+\n+    let bar: i32 = test_bar::<S>(a);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, bar);\n+    }\n+\n+    0\n+}"}, {"sha": "064f88d5de947033b5927c51d5210fda40ca4529", "filename": "gcc/testsuite/rust/execute/torture/trait7.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub trait Foo {\n+    type A;\n+\n+    fn bar(self) -> Self::A;\n+}\n+\n+struct S(i32);\n+impl Foo for S {\n+    type A = i32;\n+\n+    fn bar(self) -> Self::A {\n+        self.0\n+    }\n+}\n+\n+fn test_bar<T: Foo>(x: T) -> T::A {\n+    x.bar()\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = S(123);\n+\n+    let bar: i32 = test_bar(a);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, bar);\n+    }\n+\n+    0\n+}"}, {"sha": "14392ff0ccac2ad4e90d3deb2a51af1c1a3f1b98", "filename": "gcc/testsuite/rust/execute/torture/trait8.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub trait Foo {\n+    type A;\n+\n+    fn bar(&self) -> Self::A;\n+}\n+\n+struct S(i32);\n+impl Foo for S {\n+    type A = i32;\n+\n+    fn bar(&self) -> Self::A {\n+        self.0\n+    }\n+}\n+\n+fn test_bar<T: Foo>(x: T) -> T::A {\n+    x.bar()\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = S(123);\n+\n+    let bar: i32 = test_bar(a);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, bar);\n+    }\n+\n+    0\n+}"}, {"sha": "c0e6d36f183439820e27cf65628c996eee107129", "filename": "gcc/testsuite/rust/execute/torture/trait9.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-output \"3\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait FnLike<A, R> {\n+    fn call(&self, arg: A) -> R;\n+}\n+\n+struct S;\n+impl<T> FnLike<&T, &T> for S {\n+    fn call(&self, arg: &T) -> &T {\n+        // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n+        arg\n+    }\n+}\n+\n+fn indirect<F: FnLike<&isize, &isize>>(f: F) {\n+    let x = 3;\n+    let y = f.call(&x);\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *y);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    indirect(S);\n+\n+    0\n+}"}, {"sha": "b9ec38ca618375363d27545b1f08ff7596d369bb", "filename": "gcc/testsuite/rust/execute/torture/transmute1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,23 @@\n+// { dg-additional-options \"-w\" }\n+\n+extern \"rust-intrinsic\" {\n+    fn transmute<T, U>(value: T) -> U;\n+}\n+\n+struct WrapI {\n+    inner: i32,\n+}\n+\n+struct WrapF {\n+    inner: f32,\n+}\n+\n+fn main() -> i32 {\n+    let f = 15.4f32;\n+    let f_wrap = WrapF { inner: f };\n+\n+    let fst = unsafe { transmute::<f32, i32>(f) };\n+    let snd = unsafe { transmute::<WrapF, WrapI>(f_wrap) };\n+\n+    fst - snd.inner\n+}"}, {"sha": "64b37085ab75d51c1c144315643d8016d2ff2b03", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,14 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    unsafe { wrapping_add(l, r) - 4 }\n+}"}, {"sha": "f9990157894d19996665b96e97171a390a49bafd", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,20 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+    pub fn wrapping_sub<T>(l: T, r: T) -> T;\n+    pub fn wrapping_mul<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    let ret0 = unsafe { wrapping_add(l, r) - 4 }; // 4\n+    let ret1 = unsafe { wrapping_sub(r, l) - 6 }; // 6\n+    let ret2 = unsafe { wrapping_mul(r, l) - 251 }; // 251\n+\n+    ret0 + ret1 + ret2\n+}"}, {"sha": "eab5a0285cf453b103472b03809a2e871d4d3513", "filename": "gcc/testsuite/rust/execute/xfail/macro1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a56869d6e339187da4a91697f1185227c8a03ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Fxfail%2Fmacro1.rs?ref=5a56869d6e339187da4a91697f1185227c8a03ba", "patch": "@@ -0,0 +1,32 @@\n+// { dg-output \"macro\\nmacro\\nmacro\\nmacro\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn f() {\n+    let r_s = \"macro\\n\\0\";\n+    let s_p = r_s as *const str;\n+    let c_p = s_p as *const i8;\n+\n+    printf(c_p);\n+}\n+\n+macro_rules! empty0 {\n+    () => ( f() );\n+}\n+\n+macro_rules! empty1 {\n+    {} => { f() };\n+}\n+\n+macro_rules! empty2 {\n+    [] => [ f() ];\n+}\n+\n+// using multiple parens/brackets/curlies variants allows us to make sure we\n+// parse everything properly\n+fn main() {\n+    empty0!();\n+    empty1!{};\n+    empty2![];\n+}"}]}