{"sha": "c6f72a46146142e8d9689e160a7d7d9d9bd227de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmNzJhNDYxNDYxNDJlOGQ5Njg5ZTE2MGE3ZDdkOWQ5YmQyMjdkZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-13T04:17:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-13T04:17:36Z"}, "message": "[PATCH][PR tree-optimization/pr67755] Fix profile insanity adjustments\n\n\tPR tree-optimization/pr67755\n\t* tree-ssa-threadupdate.c (struct ssa_local_info_t): Add new field\n\t\"need_profile_correction\".\n\t(thread_block_1): Initialize new field to false by default.  If we\n\thave multiple thread paths through a common joiner to different\n\tfinal targets, then set new field to true.\n\t(compute_path_counts): Only do count adjustment when it's really\n\tneeded.\n\n\tPR tree-optimization/67755\n\t* gcc.dg/tree-ssa/pr67755.c: New test.\n\nFrom-SVN: r232313", "tree": {"sha": "758193d840df21e1ce09bb65de351fbb5fdf40b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/758193d840df21e1ce09bb65de351fbb5fdf40b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f72a46146142e8d9689e160a7d7d9d9bd227de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f72a46146142e8d9689e160a7d7d9d9bd227de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f72a46146142e8d9689e160a7d7d9d9bd227de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f72a46146142e8d9689e160a7d7d9d9bd227de/comments", "author": null, "committer": null, "parents": [{"sha": "5ee4820a1f12d7b36712d46aab7e57efc61e2537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee4820a1f12d7b36712d46aab7e57efc61e2537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee4820a1f12d7b36712d46aab7e57efc61e2537"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "f8f818bfb5d0be15969ce01242dce52134dc5d95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6f72a46146142e8d9689e160a7d7d9d9bd227de", "patch": "@@ -1,3 +1,14 @@\n+2016-01-12  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/pr67755\n+\t* tree-ssa-threadupdate.c (struct ssa_local_info_t): Add new field\n+\t\"need_profile_correction\".\n+\t(thread_block_1): Initialize new field to false by default.  If we\n+\thave multiple thread paths through a common joiner to different\n+\tfinal targets, then set new field to true.\n+\t(compute_path_counts): Only do count adjustment when it's really\n+\tneeded.\n+\n 2016-01-12  Sandra Loosemore <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Spec Files): Move section down in file, past"}, {"sha": "240fae713e41c0e7237a7bee24ebc13841224c5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6f72a46146142e8d9689e160a7d7d9d9bd227de", "patch": "@@ -1,4 +1,9 @@\n-2015-01-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+2016-01-13  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/67755\n+\t* gcc.dg/tree-ssa/pr67755.c: New test.\n+\n+2016-01-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.c-torture/unsorted/dump-noaddr.x (dump_compare): Replace static\n \tpass number in output by a star."}, {"sha": "64ffd0b349bb50715bc8d845ee88ee22c376fa38", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr67755.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67755.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67755.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67755.c?ref=c6f72a46146142e8d9689e160a7d7d9d9bd227de", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-dom2-details-blocks\" } */\n+/* We want to verify no outgoing edge from a conditional\n+   has a probability of 100%.  */\n+/* { dg-final { scan-tree-dump-not \"succ:\\[ \\]+. .100.0%.  .\\(TRUE|FALSE\\)_VALUE\" \"dom2\"} } */\n+\n+\n+void (*zend_block_interruptions) (void);\n+\n+int * _zend_mm_alloc_int (int * heap, long int size)\n+{\n+  int *best_fit;\n+  long int true_size = (size < 15 ? 32 : size);\n+\n+  if (zend_block_interruptions)\n+    zend_block_interruptions ();\n+\n+  if (__builtin_expect ((true_size < 543), 1))\n+    best_fit = heap + 2;\n+  else\n+    best_fit = heap;\n+\n+  return best_fit;\n+}\n+"}, {"sha": "4783c4b4ea3cd63415da31af2d0df68fe64e2d85", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f72a46146142e8d9689e160a7d7d9d9bd227de/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=c6f72a46146142e8d9689e160a7d7d9d9bd227de", "patch": "@@ -239,6 +239,11 @@ struct ssa_local_info_t\n \n   /* Blocks duplicated for the thread.  */\n   bitmap duplicate_blocks;\n+\n+  /* When we have multiple paths through a joiner which reach different\n+     final destinations, then we may need to correct for potential\n+     profile insanities.  */\n+  bool need_profile_correction;\n };\n \n /* Passes which use the jump threading code register jump threading\n@@ -826,7 +831,8 @@ compute_path_counts (struct redirection_data *rd,\n      So ensure that this path's path_out_count is at least the\n      difference between elast->count and nonpath_count.  Otherwise the edge\n      counts after threading will not be sane.  */\n-  if (has_joiner && path_out_count < elast->count - nonpath_count)\n+  if (local_info->need_profile_correction\n+      && has_joiner && path_out_count < elast->count - nonpath_count)\n     {\n       path_out_count = elast->count - nonpath_count;\n       /* But neither can we go above the minimum count along the path\n@@ -1492,6 +1498,7 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n   ssa_local_info_t local_info;\n \n   local_info.duplicate_blocks = BITMAP_ALLOC (NULL);\n+  local_info.need_profile_correction = false;\n \n   /* To avoid scanning a linear array for the element we need we instead\n      use a hash table.  For normal code there should be no noticeable\n@@ -1502,6 +1509,7 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n \n   /* Record each unique threaded destination into a hash table for\n      efficient lookups.  */\n+  edge last = NULL;\n   FOR_EACH_EDGE (e, ei, bb->preds)\n     {\n       if (e->aux == NULL)\n@@ -1555,6 +1563,17 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n       /* Insert the outgoing edge into the hash table if it is not\n \t already in the hash table.  */\n       lookup_redirection_data (e, INSERT);\n+\n+      /* When we have thread paths through a common joiner with different\n+\t final destinations, then we may need corrections to deal with\n+\t profile insanities.  See the big comment before compute_path_counts.  */\n+      if ((*path)[1]->type == EDGE_COPY_SRC_JOINER_BLOCK)\n+\t{\n+\t  if (!last)\n+\t    last = e2;\n+\t  else if (e2 != last)\n+\t    local_info.need_profile_correction = true;\n+\t}\n     }\n \n   /* We do not update dominance info.  */"}]}