{"sha": "73170f9e46783e03f96133d9ee96e96f8cd4fd38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxNzBmOWU0Njc4M2UwM2Y5NjEzM2Q5ZWU5NmU5NmY4Y2Q0ZmQzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:39:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:39:14Z"}, "message": "[multiple changes]\n\n2016-06-16  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.adb: Minor typo fix.\n\n2016-06-16  Emmanuel Briot  <briot@adacore.com>\n\n\t* s-regpat.adb: Further fix for invalid index in GNAT.Regexp.\n\n2016-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch13.adb (Validate_Address_Clauses): Use the same logic to\n\tissue the warning on the offset for the size as for the alignment\n\tand tweak the wording for the sake of consistency.\n\n2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Check_Class_Wide_COndition): New procedure,\n\tsubsidiary of Analyze_Pre_Post_ Condition_In_Decl_Part, to\n\tcheck legality rules that follow from the revised semantics of\n\tclass-wide pre/postconditions described in AI12-0113.\n\t(Build_Pragma_Check_Equivalent): Abstract subprogram declarations\n\tmust be included in list of overriding primitives of a derived\n\ttype.\n\nFrom-SVN: r237521", "tree": {"sha": "f589d1ef799383015296202e1cab74f2a0a81a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f589d1ef799383015296202e1cab74f2a0a81a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73170f9e46783e03f96133d9ee96e96f8cd4fd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73170f9e46783e03f96133d9ee96e96f8cd4fd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73170f9e46783e03f96133d9ee96e96f8cd4fd38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73170f9e46783e03f96133d9ee96e96f8cd4fd38/comments", "author": null, "committer": null, "parents": [{"sha": "08f599e80af65f0ec567e4e67de02d9f99def3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f599e80af65f0ec567e4e67de02d9f99def3e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f599e80af65f0ec567e4e67de02d9f99def3e2"}], "stats": {"total": 132, "additions": 122, "deletions": 10}, "files": [{"sha": "b661d38e5d45c24a9d9cabd6c137c5302285095d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73170f9e46783e03f96133d9ee96e96f8cd4fd38", "patch": "@@ -1,3 +1,27 @@\n+2016-06-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb: Minor typo fix.\n+\n+2016-06-16  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-regpat.adb: Further fix for invalid index in GNAT.Regexp.\n+\n+2016-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Address_Clauses): Use the same logic to\n+\tissue the warning on the offset for the size as for the alignment\n+\tand tweak the wording for the sake of consistency.\n+\n+2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Check_Class_Wide_COndition): New procedure,\n+\tsubsidiary of Analyze_Pre_Post_ Condition_In_Decl_Part, to\n+\tcheck legality rules that follow from the revised semantics of\n+\tclass-wide pre/postconditions described in AI12-0113.\n+\t(Build_Pragma_Check_Equivalent): Abstract subprogram declarations\n+\tmust be included in list of overriding primitives of a derived\n+\ttype.\n+\n 2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (May_Be_Lvalue): An actual in an unexpanded"}, {"sha": "7675f70b1aaa63351705e60988f7a0680a54a7ba", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=73170f9e46783e03f96133d9ee96e96f8cd4fd38", "patch": "@@ -2614,16 +2614,28 @@ package body System.Regpat is\n                   exit State_Machine when Input_Pos /= BOL_Pos;\n \n                when EOL =>\n-                  exit State_Machine when Input_Pos <= Last_In_Data\n-                    and then ((Self.Flags and Multiple_Lines) = 0\n-                               or else Data (Input_Pos) /= ASCII.LF);\n+                  --  A combination of MEOL and SEOL\n+                  if (Self.Flags and Multiple_Lines) = 0 then\n+                     --  single line mode\n+                     exit State_Machine when Input_Pos <= Data'Last;\n+                  elsif Input_Pos <= Last_In_Data then\n+                     exit State_Machine when Data (Input_Pos) /= ASCII.LF;\n+                  else\n+                     exit State_Machine when Last_In_Data /= Data'Last;\n+                  end if;\n \n                when MEOL =>\n-                  exit State_Machine when Input_Pos <= Last_In_Data\n-                    and then Data (Input_Pos) /= ASCII.LF;\n+                  if Input_Pos <= Last_In_Data then\n+                     exit State_Machine when Data (Input_Pos) /= ASCII.LF;\n+                  else\n+                     exit State_Machine when Last_In_Data /= Data'Last;\n+                  end if;\n \n                when SEOL =>\n-                  exit State_Machine when Input_Pos <= Last_In_Data;\n+                  --  If we have a character before Data'Last (even if\n+                  --  Last_In_Data stops before then), we can't have\n+                  --  the end of the line.\n+                  exit State_Machine when Input_Pos <= Data'Last;\n \n                when BOUND | NBOUND =>\n "}, {"sha": "28ccf5666b5a6dd909f425eb15addd33a05579ae", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=73170f9e46783e03f96133d9ee96e96f8cd4fd38", "patch": "@@ -13730,9 +13730,9 @@ package body Sem_Ch13 is\n                   Error_Msg_Uint_1 := Y_Size;\n                   Error_Msg_NE (\"\\??size of & is ^\", ACCR.N, ACCR.Y);\n \n-                  if X_Offs /= Uint_0 then\n+                  if Y_Size >= X_Size then\n                      Error_Msg_Uint_1 := X_Offs;\n-                     Error_Msg_NE (\"\\??and offset of & is ^\", ACCR.N, ACCR.X);\n+                     Error_Msg_NE (\"\\??but offset of & is ^\", ACCR.N, ACCR.X);\n                   end if;\n \n                --  Check for inadequate alignment, both of the base object"}, {"sha": "51f2e83822a30c6ddfdbd0418c2b24ba982a2952", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=73170f9e46783e03f96133d9ee96e96f8cd4fd38", "patch": "@@ -23279,6 +23279,74 @@ package body Sem_Prag is\n       Disp_Typ      : Entity_Id;\n       Restore_Scope : Boolean := False;\n \n+      function Check_References (N : Node_Id) return Traverse_Result;\n+      --  Check that the expression does not mention non-primitives of\n+      --  the type, global objects of the type, or other illegalities\n+      --  described and implied by AI12-0113.\n+\n+      ----------------------\n+      -- Check_References --\n+      ----------------------\n+\n+      function Check_References (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (N) = N_Function_Call\n+           and then Is_Entity_Name (Name (N))\n+         then\n+            declare\n+               Func : constant Entity_Id := Entity (Name (N));\n+               Form : Entity_Id;\n+            begin\n+\n+               --  An operation of the type must be a primitive.\n+\n+               if No (Find_Dispatching_Type (Func)) then\n+                  Form := First_Formal (Func);\n+                  while Present (Form) loop\n+                     if Etype (Form) = Disp_Typ then\n+                        Error_Msg_NE (\"operation in class-wide condition \"\n+                          & \"must be primitive of&\", N, Disp_Typ);\n+                     end if;\n+                     Next_Formal (Form);\n+                  end loop;\n+\n+                  --  A return object of the type is illegal as well.\n+\n+                  if Etype (Func) = Disp_Typ\n+                    or else Etype (Func) = Class_Wide_Type (Disp_Typ)\n+                  then\n+                     Error_Msg_NE (\"operation in class-wide condition \"\n+                       & \"must be primitive of&\", N, Disp_Typ);\n+                  end if;\n+               end if;\n+            end;\n+\n+         elsif Is_Entity_Name (N)\n+           and then\n+             (Etype (N) = Disp_Typ\n+               or else Etype (N) = Class_Wide_Type (Disp_Typ))\n+           and then Ekind_In (Entity (N),  E_Variable, E_Constant)\n+         then\n+            Error_Msg_NE\n+              (\"object in class-wide condition must be formal of type&\",\n+                N, Disp_Typ);\n+\n+         elsif Nkind (N) = N_Explicit_Dereference\n+           and then (Etype (N) = Disp_Typ\n+               or else Etype (N) = Class_Wide_Type (Disp_Typ))\n+           and then (not Is_Entity_Name (Prefix (N))\n+             or else not Is_Formal (Entity (Prefix (N))))\n+         then\n+            Error_Msg_NE (\"operation in class-wide condition \"\n+              & \"must be primitive of&\", N, Disp_Typ);\n+         end if;\n+\n+         return OK;\n+      end Check_References;\n+\n+      procedure Check_Class_Wide_Condition is new\n+        Traverse_Proc (Check_References);\n+\n    --  Start of processing for Analyze_Pre_Post_Condition_In_Decl_Part\n \n    begin\n@@ -23345,7 +23413,13 @@ package body Sem_Prag is\n                  (\"pragma % can only be specified for a primitive operation \"\n                   & \"of a tagged type\", N);\n             end if;\n+\n+         else\n+            --  Remaining semantic checks require a full tree traversal.\n+\n+            Check_Class_Wide_Condition (Expr);\n          end if;\n+\n       end if;\n \n       if Restore_Scope then\n@@ -26379,7 +26453,9 @@ package body Sem_Prag is\n             --  overridings between them.\n \n             while Present (Decl) loop\n-               if Nkind (Decl) = N_Subprogram_Declaration then\n+               if Nkind_In (Decl,\n+                  N_Subprogram_Declaration, N_Abstract_Subprogram_Declaration)\n+               then\n                   Prim := Defining_Entity (Decl);\n \n                   if Is_Subprogram (Prim)"}, {"sha": "936b814f96b86ef9e760ac48f3450880aefea43b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73170f9e46783e03f96133d9ee96e96f8cd4fd38/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=73170f9e46783e03f96133d9ee96e96f8cd4fd38", "patch": "@@ -1231,7 +1231,7 @@ package body Sem_Util is\n          pragma Assert (Has_Default_Init_Cond (Typ));\n          pragma Assert (Present (Prag));\n \n-         --  Nothing to do if the slec was not built. This occurs when the\n+         --  Nothing to do if the spec was not built. This occurs when the\n          --  expression of the Default_Initial_Condition is missing or is\n          --  null.\n "}]}