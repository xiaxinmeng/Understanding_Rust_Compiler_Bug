{"sha": "9d8b4d1ce91511ae92cd746c10a05e16215f1940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4YjRkMWNlOTE1MTFhZTkyY2Q3NDZjMTBhMDVlMTYyMTVmMTk0MA==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2014-04-22T10:05:48Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T10:05:48Z"}, "message": "[ARM] Allow any register for DImode values in Thumb2\n\nRamana commented in the submission email:\n\n    I noticed that for T32 we don't allow any old register for DImode\n    values. The restriction of an even register is true only for ARM state\n    because the ISA doesn't allow any old register in this place. In a few\n    large .i files that I had knocking about, noticed a nice drop in stack\n    usage and a generally improved register allocation strategy.\n\nFrom-SVN: r209615", "tree": {"sha": "922c651f349f67863242079c3a242cc17fd315a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/922c651f349f67863242079c3a242cc17fd315a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d8b4d1ce91511ae92cd746c10a05e16215f1940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8b4d1ce91511ae92cd746c10a05e16215f1940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8b4d1ce91511ae92cd746c10a05e16215f1940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8b4d1ce91511ae92cd746c10a05e16215f1940/comments", "author": null, "committer": null, "parents": [{"sha": "a01be1aeb2df00d1af7dfca6f3355db1a12a25c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01be1aeb2df00d1af7dfca6f3355db1a12a25c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01be1aeb2df00d1af7dfca6f3355db1a12a25c8"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "80ffa581870660ce3648e2d685c6842d4e398df5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8b4d1ce91511ae92cd746c10a05e16215f1940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8b4d1ce91511ae92cd746c10a05e16215f1940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d8b4d1ce91511ae92cd746c10a05e16215f1940", "patch": "@@ -1,3 +1,8 @@\n+2014-04-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Loosen\n+\trestrictions on core registers for DImode values in Thumb2.\n+\n 2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/arm/arm.md (*anddi_notdi_zesidi): New pattern."}, {"sha": "88d957a21f6df369eab795e506898a091457c1e8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8b4d1ce91511ae92cd746c10a05e16215f1940/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8b4d1ce91511ae92cd746c10a05e16215f1940/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9d8b4d1ce91511ae92cd746c10a05e16215f1940", "patch": "@@ -22646,12 +22646,19 @@ arm_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n     }\n \n   /* We allow almost any value to be stored in the general registers.\n-     Restrict doubleword quantities to even register pairs so that we can\n-     use ldrd.  Do not allow very large Neon structure opaque modes in\n-     general registers; they would use too many.  */\n+     Restrict doubleword quantities to even register pairs in ARM state\n+     so that we can use ldrd.  Do not allow very large Neon structure\n+     opaque modes in general registers; they would use too many.  */\n   if (regno <= LAST_ARM_REGNUM)\n-    return !(TARGET_LDRD && GET_MODE_SIZE (mode) > 4 && (regno & 1) != 0)\n-      && ARM_NUM_REGS (mode) <= 4;\n+    {\n+      if (ARM_NUM_REGS (mode) > 4)\n+\t  return FALSE;\n+\n+      if (TARGET_THUMB2)\n+\treturn TRUE;\n+\n+      return !(TARGET_LDRD && GET_MODE_SIZE (mode) > 4 && (regno & 1) != 0);\n+    }\n \n   if (regno == FRAME_POINTER_REGNUM\n       || regno == ARG_POINTER_REGNUM)"}]}