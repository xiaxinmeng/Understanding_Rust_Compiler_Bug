{"sha": "cc806126215c3f4dc187eff3bf923458d8cc6b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4MDYxMjYyMTVjM2Y0ZGMxODdlZmYzYmY5MjM0NThkOGNjNmI0Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-04-29T00:50:35Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-04-29T00:50:35Z"}, "message": "c: C2x changes to function type compatibility\n\nWG14 N2432, the C2x removal of old-style function definitions, also\nchanged the function type compatibility rules so that an unprototyped\ndeclaration can be compatible with a non-variadic prototyped\ndeclaration even if some function arguments are changed by the default\nargument promotions.  I missed that change in the initial\nimplementation for GCC of the rest of the N2432 changes, but\ndiscussion on the WG14 reflector in February suggests that this is\nindeed an intended change.  Implement this in the C front end.\n\nNote that while this may be of use in some cases for use of pointers\nto unprototyped function types as a kind of generic function pointer,\nit's *not* possible to call such a function without a prototype\nvisible, without getting runtime undefined behavior from the\n(promoted) type used in the call being incompatible with the\n(unpromoted) type in the prototype.\n\nNote also that GCC has a longstanding extension to allow compatibility\nof such a prototype with an old-style definition specifying the same\ntype as in the prototype (which is not valid in ISO C, before\nold-style definitions were removed in C2x).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-typeck.c (function_types_compatible_p): For C2X, treat\n\tunprototyped function as compatible with non-variadic prototyped\n\tfunction even if some argument types are changed by the default\n\targument promotions.\n\ngcc/testsuite/\n\t* gcc.dg/c11-unproto-1.c, gcc.dg/c11-unproto-2.c,\n\tgcc.dg/c2x-unproto-1.c, gcc.dg/c2x-unproto-2.c: New tests.", "tree": {"sha": "385f40e18a505a514b5cb9d3b074c6afc6e67d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385f40e18a505a514b5cb9d3b074c6afc6e67d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc806126215c3f4dc187eff3bf923458d8cc6b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc806126215c3f4dc187eff3bf923458d8cc6b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc806126215c3f4dc187eff3bf923458d8cc6b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc806126215c3f4dc187eff3bf923458d8cc6b4f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "3b45cfda0fff3399263fc60540fb034270ab973f", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=cc806126215c3f4dc187eff3bf923458d8cc6b4f", "patch": "@@ -1692,7 +1692,7 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n \n   if (args1 == NULL_TREE)\n     {\n-      if (!self_promoting_args_p (args2))\n+      if (flag_isoc2x ? stdarg_p (f2) : !self_promoting_args_p (args2))\n \treturn 0;\n       /* If one of these types comes from a non-prototype fn definition,\n \t compare that with the other type's arglist.\n@@ -1705,7 +1705,7 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n     }\n   if (args2 == NULL_TREE)\n     {\n-      if (!self_promoting_args_p (args1))\n+      if (flag_isoc2x ? stdarg_p (f1) : !self_promoting_args_p (args1))\n \treturn 0;\n       if (TYPE_ACTUAL_ARG_TYPES (f2)\n \t  && type_lists_compatible_p (args1, TYPE_ACTUAL_ARG_TYPES (f2),"}, {"sha": "ea9e807a68efd1a94c7f2ffe5d6b9b2c207d7e72", "filename": "gcc/testsuite/gcc.dg/c11-unproto-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-1.c?ref=cc806126215c3f4dc187eff3bf923458d8cc6b4f", "patch": "@@ -0,0 +1,24 @@\n+/* Test compatibility of unprototyped and prototyped function types (C2x makes\n+   the case of types affected by default argument promotions compatible).  Test\n+   valid-in-C2x usages are not accepted for C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+void f1 (); /* { dg-message \"previous declaration\" } */\n+void f1 (float); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n+\n+void f2 (float); /* { dg-message \"previous declaration\" } */\n+void f2 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n+\n+void f3 (); /* { dg-message \"previous declaration\" } */\n+void f3 (char); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n+\n+void f4 (char); /* { dg-message \"previous declaration\" } */\n+void f4 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n+\n+/* Built-in function case.  */\n+float sqrtf (); /* { dg-warning \"conflicting types for built-in function\" } */"}, {"sha": "0557ae3f5cbade88428d021860e88fa25c31628b", "filename": "gcc/testsuite/gcc.dg/c11-unproto-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-2.c?ref=cc806126215c3f4dc187eff3bf923458d8cc6b4f", "patch": "@@ -0,0 +1,21 @@\n+/* Test compatibility of unprototyped and prototyped function types (C2x makes\n+   the case of types affected by default argument promotions compatible).  Test\n+   invalid-in-C2x usages, in C11 mode.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+void f1 (); /* { dg-message \"previous declaration\" } */\n+void f1 (int, ...); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f2 (int, ...); /* { dg-message \"previous declaration\" } */\n+void f2 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f3 (); /* { dg-message \"previous declaration\" } */\n+void f3 (char, ...); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f4 (char, ...); /* { dg-message \"previous declaration\" } */\n+void f4 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */"}, {"sha": "45d68f2c2927951328d6de55dd869a94723c3070", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c?ref=cc806126215c3f4dc187eff3bf923458d8cc6b4f", "patch": "@@ -0,0 +1,20 @@\n+/* Test compatibility of unprototyped and prototyped function types (C2x makes\n+   the case of types affected by default argument promotions compatible).  Test\n+   valid-in-C2x usages.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+void f1 ();\n+void f1 (float);\n+\n+void f2 (float);\n+void f2 ();\n+\n+void f3 ();\n+void f3 (char);\n+\n+void f4 (char);\n+void f4 ();\n+\n+/* Built-in function case.  */\n+float sqrtf ();"}, {"sha": "f826b7c3ac878bd11f76927f38bb41ced88afbb3", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc806126215c3f4dc187eff3bf923458d8cc6b4f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c?ref=cc806126215c3f4dc187eff3bf923458d8cc6b4f", "patch": "@@ -0,0 +1,21 @@\n+/* Test compatibility of unprototyped and prototyped function types (C2x makes\n+   the case of types affected by default argument promotions compatible).  Test\n+   invalid-in-C2x usages.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+void f1 (); /* { dg-message \"previous declaration\" } */\n+void f1 (int, ...); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f2 (int, ...); /* { dg-message \"previous declaration\" } */\n+void f2 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f3 (); /* { dg-message \"previous declaration\" } */\n+void f3 (char, ...); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n+\n+void f4 (char, ...); /* { dg-message \"previous declaration\" } */\n+void f4 (); /* { dg-error \"conflicting types\" } */\n+/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */"}]}