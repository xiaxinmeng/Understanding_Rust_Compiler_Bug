{"sha": "72628c61b811e275b36776e8d7b044812f0908cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2MjhjNjFiODExZTI3NWIzNjc3NmU4ZDdiMDQ0ODEyZjA5MDhjYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T10:31:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T10:31:01Z"}, "message": "sparc.c (sparc_encode_section_info): Remove.\n\n        * config/sparc/sparc.c (sparc_encode_section_info): Remove.\n        (data_segment_operand): Use SYMBOL_REF_FUNCTION_P.\n        (text_segment_operand): Likewise.\n\nFrom-SVN: r65736", "tree": {"sha": "6511f8788f4f5028316852aa161b34d1f474fa2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6511f8788f4f5028316852aa161b34d1f474fa2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72628c61b811e275b36776e8d7b044812f0908cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72628c61b811e275b36776e8d7b044812f0908cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72628c61b811e275b36776e8d7b044812f0908cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72628c61b811e275b36776e8d7b044812f0908cc/comments", "author": null, "committer": null, "parents": [{"sha": "675ff4c7643263e605889ff424c2c9cc595b06ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675ff4c7643263e605889ff424c2c9cc595b06ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675ff4c7643263e605889ff424c2c9cc595b06ac"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "0da0c4cd0b7366e11f14d104c76d5c89a97a8a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72628c61b811e275b36776e8d7b044812f0908cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72628c61b811e275b36776e8d7b044812f0908cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72628c61b811e275b36776e8d7b044812f0908cc", "patch": "@@ -1,3 +1,9 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.c (sparc_encode_section_info): Remove.\n+\t(data_segment_operand): Use SYMBOL_REF_FUNCTION_P.\n+\t(text_segment_operand): Likewise.\n+\n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/sh/sh.c (gen_datalabel_ref): Don't add SH_DATALABEL_ENCODING."}, {"sha": "2ac680629fa954e4bea576ebcc354981f7d4af5a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72628c61b811e275b36776e8d7b044812f0908cc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72628c61b811e275b36776e8d7b044812f0908cc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=72628c61b811e275b36776e8d7b044812f0908cc", "patch": "@@ -177,7 +177,6 @@ static void emit_soft_tfmode_unop PARAMS ((enum rtx_code, rtx *));\n static void emit_soft_tfmode_cvt PARAMS ((enum rtx_code, rtx *));\n static void emit_hard_tfmode_operation PARAMS ((enum rtx_code, rtx *));\n \n-static void sparc_encode_section_info PARAMS ((tree, int));\n static bool sparc_function_ok_for_sibcall PARAMS ((tree, tree));\n static void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t   HOST_WIDE_INT, tree));\n@@ -242,9 +241,6 @@ enum processor_type sparc_cpu;\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD sparc_use_sched_lookahead\n \n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO sparc_encode_section_info\n-\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL sparc_function_ok_for_sibcall\n \n@@ -820,7 +816,7 @@ data_segment_operand (op, mode)\n   switch (GET_CODE (op))\n     {\n     case SYMBOL_REF :\n-      return ! SYMBOL_REF_FLAG (op);\n+      return ! SYMBOL_REF_FUNCTION_P (op);\n     case PLUS :\n       /* Assume canonical format of symbol + constant.\n \t Fall through.  */\n@@ -844,7 +840,7 @@ text_segment_operand (op, mode)\n     case LABEL_REF :\n       return 1;\n     case SYMBOL_REF :\n-      return SYMBOL_REF_FLAG (op);\n+      return SYMBOL_REF_FUNCTION_P (op);\n     case PLUS :\n       /* Assume canonical format of symbol + constant.\n \t Fall through.  */\n@@ -8529,19 +8525,6 @@ sparc_rtx_costs (x, code, outer_code, total)\n     }\n }\n \n-/* If we are referencing a function make the SYMBOL_REF special.  In\n-   the Embedded Medium/Anywhere code model, %g4 points to the data\n-   segment so we must not add it to function addresses.  */\n-\n-static void\n-sparc_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  if (TARGET_CM_EMBMEDANY && TREE_CODE (decl) == FUNCTION_DECL)\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-}\n-\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n "}]}