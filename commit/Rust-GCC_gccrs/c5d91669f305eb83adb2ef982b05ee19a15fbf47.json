{"sha": "c5d91669f305eb83adb2ef982b05ee19a15fbf47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkOTE2NjlmMzA1ZWI4M2FkYjJlZjk4MmIwNWVlMTlhMTVmYmY0Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T13:31:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T13:31:42Z"}, "message": "[multiple changes]\n\n2009-04-17  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting\n\tMinor code reorganization (use Nkind_In)\n\n\t* prepcomp.adb: Minor reformatting\n\n\t* sem_ch3.adb: Minor reformatting\n\n\t* sem_res.adb: Minor comment addition\n\n\t* exp_ch5.adb (Expand_Assign_Array): Use Has_Address_Clause to test\n\tfor address clause\n\n\t* lib-xref.adb (Generate_Reference): Exclude recursive calls from\n\tsetting Is_Referenced\n\n\t* types.ads: Minor reformatting\n\n2009-04-17  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Initial documentation on binding generator.\n\nFrom-SVN: r146266", "tree": {"sha": "d8fc5b05422c518bb486d7b26cdb24c2dcf90224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8fc5b05422c518bb486d7b26cdb24c2dcf90224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5d91669f305eb83adb2ef982b05ee19a15fbf47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d91669f305eb83adb2ef982b05ee19a15fbf47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d91669f305eb83adb2ef982b05ee19a15fbf47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d91669f305eb83adb2ef982b05ee19a15fbf47/comments", "author": null, "committer": null, "parents": [{"sha": "c4edb5791a28deb8bc93737089840d4c989418f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4edb5791a28deb8bc93737089840d4c989418f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4edb5791a28deb8bc93737089840d4c989418f1"}], "stats": {"total": 223, "additions": 200, "deletions": 23}, "files": [{"sha": "44f54c6769a5deb9ae943787359e04564ae4958d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -1,3 +1,26 @@\n+2009-04-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting\n+\tMinor code reorganization (use Nkind_In)\n+\n+\t* prepcomp.adb: Minor reformatting\n+\n+\t* sem_ch3.adb: Minor reformatting\n+\n+\t* sem_res.adb: Minor comment addition\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): Use Has_Address_Clause to test\n+\tfor address clause\n+\n+\t* lib-xref.adb (Generate_Reference): Exclude recursive calls from\n+\tsetting Is_Referenced\n+\n+\t* types.ads: Minor reformatting\n+\n+2009-04-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Initial documentation on binding generator.\n+\n 2009-04-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* einfo.ads, einfo.adb: New attribute Underlying_Record_View, to handle"}, {"sha": "5008f4c1eed37bf4b540577cd46a51d03d071ea2", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -311,12 +311,7 @@ package body Exp_Ch5 is\n       --  If either operand has an address clause clear Backwards_OK and\n       --  Forwards_OK, since we cannot tell if the operands overlap.\n \n-      if (Is_Entity_Name (Lhs)\n-           and then Present (Address_Clause (Entity (Lhs))))\n-        or else\n-         (Is_Entity_Name (Lhs)\n-          and then Present (Address_Clause (Entity (Lhs))))\n-      then\n+      if Has_Address_Clause (Lhs) or else Has_Address_Clause (Rhs) then\n          Set_Forwards_OK  (N, False);\n          Set_Backwards_OK (N, False);\n       end if;"}, {"sha": "d0903200a59f1cee71d0a6e72200fb035e4e7f77", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -164,13 +164,12 @@ package body Exp_Disp is\n             --  Handle full type declarations and derivations of library\n             --  level tagged types\n \n-            elsif (Nkind (D) = N_Full_Type_Declaration\n-                     or else Nkind (D) = N_Derived_Type_Definition)\n+            elsif Nkind_In (D, N_Full_Type_Declaration,\n+                               N_Derived_Type_Definition)\n               and then Is_Library_Level_Tagged_Type (Defining_Entity (D))\n               and then Ekind (Defining_Entity (D)) /= E_Record_Subtype\n               and then not Is_Private_Type (Defining_Entity (D))\n             then\n-\n                --  We do not generate dispatch tables for the internal type\n                --  created for a type extension with unknown discriminants\n                --  The needed information is shared with the source type,\n@@ -180,7 +179,7 @@ package body Exp_Disp is\n                  and then\n                    Has_Unknown_Discriminants (Etype (Defining_Entity (D)))\n                  and then\n-                    not Comes_From_Source (First_Subtype (Defining_Entity (D)))\n+                   not Comes_From_Source (First_Subtype (Defining_Entity (D)))\n                then\n                   null;\n "}, {"sha": "771aff7b6d516fd759e01463170dc024f6eaffdb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -187,6 +187,7 @@ AdaCore@*\n * Stack Related Facilities::\n * Verifying Properties Using gnatcheck::\n * Creating Sample Bodies Using gnatstub::\n+* Generating Ada Bindings for C and C++ headers::\n * Other Utility Programs::\n * Running and Debugging Ada Programs::\n @ifclear vms\n@@ -845,6 +846,10 @@ a utility that checks Ada code against a set of rules.\n @ref{Creating Sample Bodies Using gnatstub}, discusses @code{gnatstub},\n a utility that generates empty but compilable bodies for library units.\n \n+@item\n+@ref{Generating Ada Bindings for C and C++ headers}, describes how to\n+generate automatically Ada bindings from C and C++ headers.\n+\n @item\n @ref{Other Utility Programs}, discusses several other GNAT utilities,\n including @code{gnathtml}.\n@@ -22247,6 +22252,148 @@ Verbose mode: generate version information.\n \n @end table\n \n+@c *********************************\n+@node Generating Ada Bindings for C and C++ headers\n+@chapter Generating Ada Bindings for C and C++ headers\n+@findex binding\n+\n+@noindent\n+GNAT now comes with a new experimental binding generator for C and C++\n+headers which is intended to do 95% of the tedious work of generating\n+Ada specs from C or C++ header files. Note that this still is a work in\n+progress, not designed to generate 100% correct Ada specs.\n+\n+Note that the code generated is using the Ada 2005 syntax, which makes it\n+easier to inteface with other languages than previous versions of Ada.\n+\n+@menu\n+* Running the binding generator::\n+* Generating bindings for C++ headers::\n+* Switches::\n+@end menu\n+\n+@node Running the binding generator\n+@section Running the binding generator\n+\n+@noindent\n+The binding generator is part of the @command{gcc} compiler and can be\n+invoked via the @option{-fdump-ada-spec} switch, which will generate Ada\n+spec files for the header files specified on the command line, and all\n+header files needed by these files transitivitely. For example:\n+\n+@smallexample\n+$ g++ -c -fdump-ada-spec -C /usr/include/time.h\n+$ gcc -c -gnat05 *.ads\n+@end smallexample\n+\n+will generate, under GNU/Linux, the following files: @file{bits_time_h.ads},\n+@code{bits_types_h.ads}, @code{stddef_h.ads}, @code{time_h.ads} which\n+correspond to the files @file{/usr/include/time.h},\n+@file{/usr/include/bits/time.h}, etc@dots{}, and will then compile in Ada 2005\n+mode these Ada specs.\n+\n+The @code{-C} switch tells @command{gcc} to extract comments from headers,\n+and will attempt to generate corresponding Ada comments.\n+\n+If you want to generate a single Ada file and not the transitive closure, you\n+can use instead the @option{-fdump-ada-spec-slim} switch.\n+\n+Note that we recommend when possible to use the @command{g++} driver to\n+generate bindings, even for most C headers, since this will in general\n+generate better Ada specs. For generating bindings for C++ headers, it is\n+mandatory to use the @command{g++} command, or @command{gcc -x c++} which\n+is equivalent in this case. If @command{g++} cannot work on your C headers\n+because of incompatibilities between C and C++, then you can fallback to\n+@command{gcc} instead.\n+\n+For an example of better bindings generated from the C++ front-end,\n+the name of the parameters (when available) are actually ignored by the C\n+front-end. Consider the following C header:\n+\n+@smallexample\n+extern void foo (int variable);\n+@end smallexample\n+\n+with the C front-end, @code{variable} is ignored, and the above is handled as:\n+\n+@smallexample\n+extern void foo (int);\n+@end smallexample\n+\n+generating a generic:\n+\n+@smallexample\n+procedure foo (param1 : int);\n+@end smallexample\n+\n+with the C++ front-end, the name is available, and we generate:\n+\n+@smallexample\n+procedure foo (variable : int);\n+@end smallexample\n+\n+In some cases, the generated bindings will be more complete or more meaningful\n+when defining some macros, which you can do via the @option{-D} switch. this\n+is for example the case with @file{Xlib.h} under GNU/Linux:\n+\n+@smallexample\n+g++ -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n+@end smallexample\n+\n+The above will generate more complete bindings than a straight call without\n+the @option{-DXLIB_ILLEGAL_ACCESS} switch.\n+\n+In other cases, it is not possible to parse a header file in a stand alone\n+manner, because other include files need to be included first. In this\n+case, the solution is to create a small header file including the needed\n+@code{#include} and possible @code{#define} directives. For example, to\n+generate Ada bindings for @file{readline/readlin.h}, you need to first\n+include @file{stdio.h}, so you can create a file with the following two\n+lines in e.g. @file{readline1.h}:\n+\n+@smallexample\n+#include <stdio.h>\n+#include <readline/readline.h>\n+@end smallexample\n+\n+and then generate Ada bindings from this file:\n+\n+@smallexample\n+$ g++ -c -fdump-ada-spec readline1.h\n+@end smallexample\n+\n+@node Generating bindings for C++ headers\n+@section Generating bindings for C++ headers\n+\n+@noindent\n+Generating bindings for C++ headers is done using the same options, always\n+with the @command{g++} compiler.\n+\n+In this mode, C++ classes will be mapped to Ada tagged types, constructors\n+will be mapped using the @code{CPP_Constructor} pragma, and when possible,\n+multiple inheritance of abstract classes will be mapped to Ada interfaces\n+(@xref{Interfacing to C++,,,gnat_rm, GNAT Reference Manual}, for additional\n+information on interfacing to C++).\n+\n+@node Switches\n+@section Switches\n+\n+@table @option\n+@item -fdump-ada-spec\n+@cindex @option{-fdump-ada-spec} (@command{gcc})\n+Generate Ada spec files for the given header files transitively (including\n+all header files that these headers depend upon).\n+\n+@item -fdump-ada-spec-slim\n+@cindex @option{-fdump-ada-spec-slim} (@command{gcc})\n+Generate Ada spec files for the header files specified on the command line\n+only.\n+\n+@item -C\n+@item @option{-C} (@command{gcc})\n+Extract comments from headers and generate Ada comments in the Ada spec files.\n+@end table\n+\n @node Other Utility Programs\n @chapter Other Utility Programs\n "}, {"sha": "fac486425698a696831e105fdf6fde437446a2f7", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -564,6 +564,15 @@ package body Lib.Xref is\n                   Set_Referenced_As_LHS (E, False);\n                end if;\n \n+            --  Don't count a recursive reference within a subprogram as a\n+            --  reference (that allows detection of a recursive subprogram\n+            --  whose only references are recursive calls as unreferenced).\n+\n+            elsif Is_Subprogram (E)\n+              and then E = Nearest_Dynamic_Scope (Current_Scope)\n+            then\n+               null;\n+\n             --  Any other occurrence counts as referencing the entity\n \n             elsif OK_To_Set_Referenced then"}, {"sha": "18c2686e491bf15e87ce776659512ab7a02c00f4", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -47,9 +47,9 @@ package body Prepcomp is\n \n    --  The following variable should be a constant, but this is not possible\n    --  because its type GNAT.Dynamic_Tables.Instance has a component P of\n-   --  unitialized private type GNAT.Dynamic_Tables.Table_Private and there are\n-   --  no exported values for this private type.\n-   --  Warnings are Off because it is never assigned a value.\n+   --  unitialized private type GNAT.Dynamic_Tables.Table_Private and there\n+   --  are no exported values for this private type. Warnings are Off because\n+   --  it is never assigned a value.\n \n    pragma Warnings (Off);\n    No_Mapping : Prep.Symbol_Table.Instance;"}, {"sha": "e6be49e35688247abeb380783e7ab7e00b05cfb2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -5522,11 +5522,12 @@ package body Sem_Ch3 is\n          then\n             declare\n                Full_Der : constant Entity_Id :=\n-                 Make_Defining_Identifier (Loc, New_Internal_Name ('T'));\n-               Decl : Node_Id;\n-               New_Ext : constant Node_Id :=\n-                           Copy_Separate_Tree\n-                             (Record_Extension_Part (Type_Definition (N)));\n+                            Make_Defining_Identifier (Loc,\n+                              Chars => New_Internal_Name ('T'));\n+               Decl     : Node_Id;\n+               New_Ext  : constant Node_Id :=\n+                            Copy_Separate_Tree\n+                              (Record_Extension_Part (Type_Definition (N)));\n \n             begin\n                Build_Derived_Record_Type\n@@ -5561,7 +5562,7 @@ package body Sem_Ch3 is\n                Set_Underlying_Record_View (Derived_Type, Full_Der);\n             end;\n \n-         --  if discriminants are known, build derived record.\n+         --  if discriminants are known, build derived record\n \n          else\n             Build_Derived_Record_Type\n@@ -5600,8 +5601,8 @@ package body Sem_Ch3 is\n                      Build_Underlying_Full_View (N, Derived_Type, Parent_Type);\n \n                   elsif Is_Constrained (Full_View (Parent_Type)) then\n-                     Set_Underlying_Full_View (Derived_Type,\n-                       Full_View (Parent_Type));\n+                     Set_Underlying_Full_View\n+                       (Derived_Type, Full_View (Parent_Type));\n                   end if;\n \n                else"}, {"sha": "676cbc2bf42453e463473c86cae0409a1613896b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -5231,6 +5231,9 @@ package body Sem_Res is\n         and then Present (Controlling_Argument (N))\n       then\n          Generate_Reference (Nam, Subp, 'R');\n+\n+      --  Normal case, not a dispatching call\n+\n       else\n          Generate_Reference (Nam, Subp);\n       end if;"}, {"sha": "96b60b579de60f4e258ef6f959c78ae8cfb64b9b", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d91669f305eb83adb2ef982b05ee19a15fbf47/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=c5d91669f305eb83adb2ef982b05ee19a15fbf47", "patch": "@@ -192,8 +192,8 @@ package Types is\n    subtype Source_Buffer is Text_Buffer;\n    --  Type used to store text of a source file . The buffer for the main\n    --  source (the source specified on the command line) has a lower bound\n-   --  starting at zero. Subsequent subsidiary sources have lower bounds which\n-   --  are one greater than the previous upper bound.\n+   --  starting at zero. Subsequent subsidiary sources have lower bounds\n+   --  which are one greater than the previous upper bound.\n \n    subtype Big_Source_Buffer is Text_Buffer (0 .. Text_Ptr'Last);\n    --  This is a virtual type used as the designated type of the access"}]}