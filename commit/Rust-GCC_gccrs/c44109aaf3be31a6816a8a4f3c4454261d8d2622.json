{"sha": "c44109aaf3be31a6816a8a4f3c4454261d8d2622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0MTA5YWFmM2JlMzFhNjgxNmE4YTRmM2M0NDU0MjYxZDhkMjYyMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-21T10:05:32Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-21T10:05:32Z"}, "message": "re PR libfortran/36773 (zero-sized arrays with cshift and eoshift)\n\n2008-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/36773\n\t* intrinsics/cshift0.c (cshift0):  Return early if size of array\n\tis zero.\n\t* intrinsics/eoshift0.c (eoshift0):  Return early if size of\n\treturn array is zero.\n\t* intrinsics/eoshift2.c (eoshift2):  Likewise.\n\t* m4/eoshift1.m4 (eoshift1):  Return early if size of array\n\tis zero.\n\t* m4/eoshift3.m4 (eoshift3):  Likewise.\n\t* m4/eoshift2.m4 (eoshift2):  Return early if size of return\n\tarray is zero.\n\t* m4/eoshift4.m4 (eoshift2):  Return early if size of return\n\tarray is zero.\n\t* generated/cshift1_16.c: Regenerated.\n\t* generated/cshift1_4.c: Regenerated.\n\t* generated/cshift1_8.c: Regenerated.\n\t* generated/eoshift1_16.c: Regenerated.\n\t* generated/eoshift1_4.c: Regenerated.\n\t* generated/eoshift1_8.c: Regenerated.\n\t* generated/eoshift3_16.c: Regenerated.\n\t* generated/eoshift3_4.c: Regenerated.\n\t* generated/eoshift3_8.c: Regenerated.\n\n2008-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/36773\n\t* gfortran.dg/zero_sized_5.f90:  New test case.\n\nFrom-SVN: r138027", "tree": {"sha": "9f53b6a50b64cf1ac4935ade62445629885b9613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f53b6a50b64cf1ac4935ade62445629885b9613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c44109aaf3be31a6816a8a4f3c4454261d8d2622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44109aaf3be31a6816a8a4f3c4454261d8d2622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44109aaf3be31a6816a8a4f3c4454261d8d2622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44109aaf3be31a6816a8a4f3c4454261d8d2622/comments", "author": null, "committer": null, "parents": [{"sha": "1bb64668d0fbb2abfa3583918a256420028eea30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb64668d0fbb2abfa3583918a256420028eea30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb64668d0fbb2abfa3583918a256420028eea30"}], "stats": {"total": 196, "additions": 163, "deletions": 33}, "files": [{"sha": "d02787b284afc7a5010efe3a8b42ae0e059cdc9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -1,3 +1,8 @@\n+2008-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/36773\n+\t* gfortran.dg/zero_sized_5.f90:  New test case.\n+\n 2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/36870"}, {"sha": "30ca8bf81992c49b72e01c325d1ef9ed65166166", "filename": "gcc/testsuite/gfortran.dg/zero_sized_5.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! These used to segfault.\n+program main\n+  real, dimension(1,0) :: a, b, c\n+  integer, dimension(0) :: j\n+  a = 0\n+  c = 0\n+  b = cshift (a,1)\n+  b = cshift (a,j)\n+  b = eoshift (a,1)\n+  b = eoshift (a,(/1/))\n+  b = eoshift (a,1,boundary=c(1,:))\n+  b = eoshift (a, j, boundary=c(1,:))\n+\n+end program main"}, {"sha": "b485123cb7b1645dbdf8fc434336ba45696d4e66", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -1,3 +1,28 @@\n+2008-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/36773\n+\t* intrinsics/cshift0.c (cshift0):  Return early if size of array\n+\tis zero.\n+\t* intrinsics/eoshift0.c (eoshift0):  Return early if size of\n+\treturn array is zero.\n+\t* intrinsics/eoshift2.c (eoshift2):  Likewise.\n+\t* m4/eoshift1.m4 (eoshift1):  Return early if size of array\n+\tis zero.\n+\t* m4/eoshift3.m4 (eoshift3):  Likewise.\n+\t* m4/eoshift2.m4 (eoshift2):  Return early if size of return\n+\tarray is zero.\n+\t* m4/eoshift4.m4 (eoshift2):  Return early if size of return\n+\tarray is zero.\n+\t* generated/cshift1_16.c: Regenerated.\n+\t* generated/cshift1_4.c: Regenerated.\n+\t* generated/cshift1_8.c: Regenerated.\n+\t* generated/eoshift1_16.c: Regenerated.\n+\t* generated/eoshift1_4.c: Regenerated.\n+\t* generated/eoshift1_8.c: Regenerated.\n+\t* generated/eoshift3_16.c: Regenerated.\n+\t* generated/eoshift3_4.c: Regenerated.\n+\t* generated/eoshift3_8.c: Regenerated.\n+\n 2008-07-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/36857"}, {"sha": "06e27468e855d4644ce73dfde5d355450f1e48b8", "filename": "libgfortran/generated/cshift1_16.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_16.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -67,6 +67,7 @@ cshift1 (gfc_array_char * const restrict ret,\n   index_type n;\n   int which;\n   GFC_INTEGER_16 sh;\n+  index_type arraysize;\n \n   if (pwhich)\n     which = *pwhich - 1;\n@@ -76,11 +77,13 @@ cshift1 (gfc_array_char * const restrict ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n+  arraysize = size0 ((array_t *)array);\n+\n   if (ret->data == NULL)\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -95,6 +98,9 @@ cshift1 (gfc_array_char * const restrict ret,\n         }\n     }\n \n+  if (arraysize == 0)\n+    return;\n+\n   extent[0] = 1;\n   count[0] = 0;\n   n = 0;"}, {"sha": "3be3c3c15a67bd1e97620ef308879236710b6662", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -67,6 +67,7 @@ cshift1 (gfc_array_char * const restrict ret,\n   index_type n;\n   int which;\n   GFC_INTEGER_4 sh;\n+  index_type arraysize;\n \n   if (pwhich)\n     which = *pwhich - 1;\n@@ -76,11 +77,13 @@ cshift1 (gfc_array_char * const restrict ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n+  arraysize = size0 ((array_t *)array);\n+\n   if (ret->data == NULL)\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -95,6 +98,9 @@ cshift1 (gfc_array_char * const restrict ret,\n         }\n     }\n \n+  if (arraysize == 0)\n+    return;\n+\n   extent[0] = 1;\n   count[0] = 0;\n   n = 0;"}, {"sha": "b444a691acc129c4ac2bb3345b014db99a47b2cd", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -67,6 +67,7 @@ cshift1 (gfc_array_char * const restrict ret,\n   index_type n;\n   int which;\n   GFC_INTEGER_8 sh;\n+  index_type arraysize;\n \n   if (pwhich)\n     which = *pwhich - 1;\n@@ -76,11 +77,13 @@ cshift1 (gfc_array_char * const restrict ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n+  arraysize = size0 ((array_t *)array);\n+\n   if (ret->data == NULL)\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -95,6 +98,9 @@ cshift1 (gfc_array_char * const restrict ret,\n         }\n     }\n \n+  if (arraysize == 0)\n+    return;\n+\n   extent[0] = 1;\n   count[0] = 0;\n   n = 0;"}, {"sha": "fd145c12e6e6181702daffc29d39fc06601c4ff7", "filename": "libgfortran/generated/eoshift1_16.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_16.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -102,6 +102,11 @@ eoshift1 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)"}, {"sha": "d78c40a1113f4591f3ed5da2ad80aac11cf588c2", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -102,6 +102,11 @@ eoshift1 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)"}, {"sha": "06d55323369de14d7eb59d72864ebf9d80532187", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -102,6 +102,11 @@ eoshift1 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)"}, {"sha": "66a507773ace2de4e5d289e6e07f7a76248d9a6d", "filename": "libgfortran/generated/eoshift3_16.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_16.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -103,6 +103,11 @@ eoshift3 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n \n   extent[0] = 1;"}, {"sha": "3579cffd483ec49c2b3357e3cad77c265fed6aa0", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -103,6 +103,11 @@ eoshift3 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n \n   extent[0] = 1;"}, {"sha": "de969a0c92b592e06b5dae416134d75c9d64434b", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -103,6 +103,11 @@ eoshift3 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n \n   extent[0] = 1;"}, {"sha": "ac26e86cf5f20e2b4ea53e45d96b31febd137559", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -97,10 +97,43 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   index_type len;\n   index_type n;\n   int whichloop;\n+  index_type arraysize;\n \n   if (which < 1 || which > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n+  arraysize = size0 ((array_t *) array);\n+\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->offset = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1)\n+\t\t\t\t * ret->dim[i-1].stride;\n+        }\n+\n+      if (arraysize > 0)\n+\tret->data = internal_malloc_size (size * arraysize);\n+      else\n+\t{\n+\t  ret->data = internal_malloc_size (1);\n+\t  return;\n+\t}\n+    }\n+  \n+  if (arraysize == 0)\n+    return;\n+\n   which = which - 1;\n   sstride[0] = 0;\n   rstride[0] = 0;\n@@ -142,34 +175,6 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   soffset = size;\n   len = 0;\n \n-  if (ret->data == NULL)\n-    {\n-      int i;\n-      index_type arraysize = size0 ((array_t *)array);\n-\n-      ret->offset = 0;\n-      ret->dtype = array->dtype;\n-      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n-        {\n-          ret->dim[i].lbound = 0;\n-          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n-\n-          if (i == 0)\n-            ret->dim[i].stride = 1;\n-          else\n-            ret->dim[i].stride = (ret->dim[i-1].ubound + 1)\n-\t\t\t\t * ret->dim[i-1].stride;\n-        }\n-\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n-    }\n-\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n       if (dim == which)"}, {"sha": "fd216b1084bf3f95238fb49645d1931c96bd662b", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -84,6 +84,11 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n   which = which - 1;\n "}, {"sha": "aa66a8dfe009358febe43ad0ee295250f6c4ab44", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -63,18 +63,21 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n   index_type dim;\n   index_type len;\n   index_type n;\n+  index_type arraysize;\n \n   /* The compiler cannot figure out that these are set, initialize\n      them to avoid warnings.  */\n   len = 0;\n   soffset = 0;\n   roffset = 0;\n \n+  arraysize = size0 ((array_t *) array);\n+\n   if (ret->data == NULL)\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -88,6 +91,14 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n+\n+  if (arraysize == 0 && filler == NULL)\n+    return;\n \n   which = which - 1;\n "}, {"sha": "861debeed2c5a0e58ec067d198f2dfe788155b0c", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -68,6 +68,7 @@ cshift1 (gfc_array_char * const restrict ret,\n   index_type n;\n   int which;\n   'atype_name` sh;\n+  index_type arraysize;\n \n   if (pwhich)\n     which = *pwhich - 1;\n@@ -77,11 +78,13 @@ cshift1 (gfc_array_char * const restrict ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument ''`DIM''` is out of range in call to ''`CSHIFT''`\");\n \n+  arraysize = size0 ((array_t *)array);\n+\n   if (ret->data == NULL)\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -96,6 +99,9 @@ cshift1 (gfc_array_char * const restrict ret,\n         }\n     }\n \n+  if (arraysize == 0)\n+    return;\n+\n   extent[0] = 1;\n   count[0] = 0;\n   n = 0;"}, {"sha": "01ca57ec68ded957d5f36f3259de1418b7d108be", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -103,6 +103,11 @@ eoshift1 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)"}, {"sha": "6a6929ca0c70bbbd73337184b2c676fb60b36c11", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44109aaf3be31a6816a8a4f3c4454261d8d2622/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=c44109aaf3be31a6816a8a4f3c4454261d8d2622", "patch": "@@ -104,6 +104,11 @@ eoshift3 (gfc_array_char * const restrict ret,\n             ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n         }\n     }\n+  else\n+    {\n+      if (size0 ((array_t *) ret) == 0)\n+\treturn;\n+    }\n \n \n   extent[0] = 1;"}]}