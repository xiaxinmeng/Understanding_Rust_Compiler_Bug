{"sha": "fa4e13e0355e5e50f96bde424b27555aa2630527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0ZTEzZTAzNTVlNWU1MGY5NmJkZTQyNGIyNzU1NWFhMjYzMDUyNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-28T00:59:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-28T00:59:33Z"}, "message": "combine.c (combine_simplify_rtx): Don't reverse condition if there is no reverse for the condition.\n\n        * combine.c (combine_simplify_rtx): Don't reverse condition\n        if there is no reverse for the condition.\n        (simplify_comparison): Don't simplify subregs from INT to FP.\n\n        * gcc.c-torture/execute/ieee/fp-cmp-4.c (main): Make \"data\" static.\n        * gcc.c-torture/execute/ieee/fp-cmp-5.c: New.\n\nFrom-SVN: r45220", "tree": {"sha": "6b8a104dc4b6fdee45fd6b600c6123feb302b391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b8a104dc4b6fdee45fd6b600c6123feb302b391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa4e13e0355e5e50f96bde424b27555aa2630527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4e13e0355e5e50f96bde424b27555aa2630527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4e13e0355e5e50f96bde424b27555aa2630527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4e13e0355e5e50f96bde424b27555aa2630527/comments", "author": null, "committer": null, "parents": [{"sha": "c05148e8416eb843208a5866ee02f3287a29685c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05148e8416eb843208a5866ee02f3287a29685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05148e8416eb843208a5866ee02f3287a29685c"}], "stats": {"total": 147, "additions": 145, "deletions": 2}, "files": [{"sha": "8b6260462c93734ee8844db88dbc7b94d3aeec63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa4e13e0355e5e50f96bde424b27555aa2630527", "patch": "@@ -1,5 +1,9 @@\n 2001-08-27  Richard Henderson  <rth@redhat.com>\n \n+\t* combine.c (combine_simplify_rtx): Don't reverse condition\n+\tif there is no reverse for the condition.\n+\t(simplify_comparison): Don't simplify subregs from INT to FP.\n+\n \t* config/m68k/m68k.md (sordered, sordered_1, sunordered, sunordered_1,\n \tsuneq, suneq_1, sunge, sunge_1, sungt, sungt_1, sunle, sunle_1,\n \tsunlt, sunlt_1, sltgt, sltgt_1, fsogt_1, fsoge_1, fsolt_1, fsole_1,"}, {"sha": "78bf6ceb91efc57579959a388f782d7f9f99cfdb", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fa4e13e0355e5e50f96bde424b27555aa2630527", "patch": "@@ -3636,7 +3636,8 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t\t just make the comparison operation.  */\n \t      if (true_rtx == const_true_rtx && false_rtx == const0_rtx)\n \t\tx = gen_binary (cond_code, mode, cond, cop1);\n-\t      else if (true_rtx == const0_rtx && false_rtx == const_true_rtx)\n+\t      else if (true_rtx == const0_rtx && false_rtx == const_true_rtx\n+\t\t       && reverse_condition (cond_code) != UNKNOWN)\n \t\tx = gen_binary (reverse_condition (cond_code),\n \t\t\t\tmode, cond, cop1);\n \n@@ -10828,6 +10829,7 @@ simplify_comparison (code, pop0, pop1)\n \n   if (GET_CODE (op0) == SUBREG && subreg_lowpart_p (op0)\n       && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n+      && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op0))) == MODE_INT\n       && (code == NE || code == EQ)\n       && ((GET_MODE_SIZE (GET_MODE (op0))\n \t   > GET_MODE_SIZE (GET_MODE (SUBREG_REG (op0))))))\n@@ -10838,6 +10840,7 @@ simplify_comparison (code, pop0, pop1)\n \n   else if (GET_CODE (op0) == SUBREG && subreg_lowpart_p (op0)\n \t   && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n+\t   && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op0))) == MODE_INT\n \t   && (code == NE || code == EQ)\n \t   && (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n \t       <= HOST_BITS_PER_WIDE_INT)"}, {"sha": "31844aaffce49060a503e204c8e6b544fca8e7a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa4e13e0355e5e50f96bde424b27555aa2630527", "patch": "@@ -1,3 +1,8 @@\n+2001-08-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/ieee/fp-cmp-4.c (main): Make \"data\" static.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-5.c: New.\n+\n 2001-08-25  Aldy Hernandez  <aldyh@redhat.com>\n \n         * gcc.dg/asm-names.c (ymain): New."}, {"sha": "45527a23aff6ce6836a75bd70cb189f282f05a74", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4.c?ref=fa4e13e0355e5e50f96bde424b27555aa2630527", "patch": "@@ -104,7 +104,7 @@ main()\n     unsigned lg : 1;\n   };\n \n-  const struct try data[] =\n+  static struct try const data[] =\n   {\n     { NAN, NAN, 1, 0, 0, 0, 0, 0 },\n     { 0.0, NAN, 1, 0, 0, 0, 0, 0 },"}, {"sha": "9c70072f4e00eef48c59b3a323ff84dc6931d735", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-5.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4e13e0355e5e50f96bde424b27555aa2630527/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-5.c?ref=fa4e13e0355e5e50f96bde424b27555aa2630527", "patch": "@@ -0,0 +1,131 @@\n+/* Like fp-cmp-4.c, but test that the setcc patterns are correct.  */\n+\n+static int\n+test_isunordered(double x, double y)\n+{\n+  return __builtin_isunordered(x, y);\n+}\n+\n+static int\n+test_not_isunordered(double x, double y)\n+{\n+  return !__builtin_isunordered(x, y);\n+}\n+\n+static int\n+test_isless(double x, double y)\n+{\n+  return __builtin_isless(x, y);\n+}\n+\n+static int\n+test_not_isless(double x, double y)\n+{\n+  return !__builtin_isless(x, y);\n+}\n+\n+static int\n+test_islessequal(double x, double y)\n+{\n+  return __builtin_islessequal(x, y);\n+}\n+\n+static int\n+test_not_islessequal(double x, double y)\n+{\n+  return !__builtin_islessequal(x, y);\n+}\n+\n+static int\n+test_isgreater(double x, double y)\n+{\n+  return __builtin_isgreater(x, y);\n+}\n+\n+static int\n+test_not_isgreater(double x, double y)\n+{\n+  return !__builtin_isgreater(x, y);\n+}\n+\n+static int\n+test_isgreaterequal(double x, double y)\n+{\n+  return __builtin_isgreaterequal(x, y);\n+}\n+\n+static int\n+test_not_isgreaterequal(double x, double y)\n+{\n+  return !__builtin_isgreaterequal(x, y);\n+}\n+\n+static int\n+test_islessgreater(double x, double y)\n+{\n+  return __builtin_islessgreater(x, y);\n+}\n+\n+static int\n+test_not_islessgreater(double x, double y)\n+{\n+  return !__builtin_islessgreater(x, y);\n+}\n+\n+static void\n+one_test(double x, double y, int expected,\n+         int (*pos) (double, double), int (*neg) (double, double))\n+{\n+  if ((*pos)(x, y) != expected)\n+    abort ();\n+  if ((*neg)(x, y) != !expected)\n+    abort ();\n+}\n+\n+#define NAN (0.0 / 0.0)\n+\n+int\n+main()\n+{\n+  struct try\n+  {\n+    double x, y;\n+    int result[6];\n+  };\n+\n+  static struct try const data[] =\n+  {\n+    { NAN, NAN, { 1, 0, 0, 0, 0, 0 } },\n+    { 0.0, NAN, { 1, 0, 0, 0, 0, 0 } },\n+    { NAN, 0.0, { 1, 0, 0, 0, 0, 0 } },\n+    { 0.0, 0.0, { 0, 0, 1, 0, 1, 0 } },\n+    { 1.0, 2.0, { 0, 1, 1, 0, 0, 1 } },\n+    { 2.0, 1.0, { 0, 0, 0, 1, 1, 1 } },\n+  };\n+\n+  struct test\n+  {\n+    int (*pos)(double, double);\n+    int (*neg)(double, double);\n+  };\n+\n+  static struct test const tests[] =\n+  {\n+    { test_isunordered, test_not_isunordered },\n+    { test_isless, test_not_isless },\n+    { test_islessequal, test_not_islessequal },\n+    { test_isgreater, test_not_isgreater },\n+    { test_isgreaterequal, test_not_isgreaterequal },\n+    { test_islessgreater, test_not_islessgreater }\n+  };\n+\n+  const int n = sizeof(data) / sizeof(data[0]);\n+  int i, j;\n+\n+  for (i = 0; i < n; ++i)\n+    for (j = 0; j < 6; ++j)\n+      one_test (data[i].x, data[i].y, data[i].result[j],\n+\t\ttests[j].pos, tests[j].neg);\n+\n+  exit (0);\n+}"}]}