{"sha": "ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "node_id": "C_kwDOANBUbNoAKGZmNWMyNDgxNDA0OTUzZGNlN2VmN2NjZmRhODU2YmE2YTFlZTIzMjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-20T14:53:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T09:13:05Z"}, "message": "Constify the Backend resolve compile interface\n\nThis is a bad name for this class, but it will compile a TyTy type into a\nGCC Backend::Btype* node. The class also tries to determine if we have\nalready compiled this node for monomorphization and canonicalization of\ntypes which will avoid unnessecary conversion code based on type equality.\n\nThis patch simply makes this a const visitor to enforce pointer ownership\nrules.", "tree": {"sha": "4cf9a9d2c6ada17407790ad4824bf909fa38a65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cf9a9d2c6ada17407790ad4824bf909fa38a65b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5c2481404953dce7ef7ccfda856ba6a1ee2323/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649e3e074bf8306bf0eb042f10483dbd61cd040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e3e074bf8306bf0eb042f10483dbd61cd040b"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "fd2c0b52773af24f677c5160a8b237b53bf7f5b2", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c2481404953dce7ef7ccfda856ba6a1ee2323/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c2481404953dce7ef7ccfda856ba6a1ee2323/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "patch": "@@ -340,37 +340,36 @@ class Context\n   std::vector<::Bfunction *> func_decls;\n };\n \n-class TyTyResolveCompile : public TyTy::TyVisitor\n+class TyTyResolveCompile : public TyTy::TyConstVisitor\n {\n public:\n-  static ::Btype *compile (Context *ctx, TyTy::BaseType *ty,\n+  static ::Btype *compile (Context *ctx, const TyTy::BaseType *ty,\n \t\t\t   bool trait_object_mode = false)\n   {\n     TyTyResolveCompile compiler (ctx, trait_object_mode);\n     ty->accept_vis (compiler);\n     return compiler.translated;\n   }\n \n-  void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n+  void visit (const TyTy::ErrorType &) override { gcc_unreachable (); }\n+  void visit (const TyTy::InferType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::ProjectionType &type) override\n+  void visit (const TyTy::ProjectionType &type) override\n   {\n     type.get ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::PlaceholderType &type) override\n+  void visit (const TyTy::PlaceholderType &type) override\n   {\n     type.resolve ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::ParamType &param) override\n+  void visit (const TyTy::ParamType &param) override\n   {\n     param.resolve ()->accept_vis (*this);\n   }\n \n-  void visit (TyTy::FnType &type) override\n+  void visit (const TyTy::FnType &type) override\n   {\n     Backend::Btyped_identifier receiver;\n     std::vector<Backend::Btyped_identifier> parameters;\n@@ -409,7 +408,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \tctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::FnPtr &type) override\n+  void visit (const TyTy::FnPtr &type) override\n   {\n     Btype *result_type\n       = TyTyResolveCompile::compile (ctx, type.get_return_type ());\n@@ -426,15 +425,15 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       ctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::ADTType &type) override\n+  void visit (const TyTy::ADTType &type) override\n   {\n     if (ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type))\n       return;\n \n     std::vector<Backend::Btyped_identifier> fields;\n     for (size_t i = 0; i < type.num_fields (); i++)\n       {\n-\tTyTy::StructFieldType *field = type.get_field (i);\n+\tconst TyTy::StructFieldType *field = type.get_field (i);\n \tBtype *compiled_field_ty\n \t  = TyTyResolveCompile::compile (ctx, field->get_field_type ());\n \n@@ -460,7 +459,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n   }\n \n-  void visit (TyTy::TupleType &type) override\n+  void visit (const TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)\n       {\n@@ -504,71 +503,71 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = named_struct;\n   }\n \n-  void visit (TyTy::ArrayType &type) override\n+  void visit (const TyTy::ArrayType &type) override\n   {\n     Btype *element_type\n       = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n     translated\n       = ctx->get_backend ()->array_type (element_type, type.get_capacity ());\n   }\n \n-  void visit (TyTy::BoolType &type) override\n+  void visit (const TyTy::BoolType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::IntType &type) override\n+  void visit (const TyTy::IntType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::UintType &type) override\n+  void visit (const TyTy::UintType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::FloatType &type) override\n+  void visit (const TyTy::FloatType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::USizeType &type) override\n+  void visit (const TyTy::USizeType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::ISizeType &type) override\n+  void visit (const TyTy::ISizeType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::CharType &type) override\n+  void visit (const TyTy::CharType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::ReferenceType &type) override\n+  void visit (const TyTy::ReferenceType &type) override\n   {\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -583,7 +582,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       }\n   }\n \n-  void visit (TyTy::PointerType &type) override\n+  void visit (const TyTy::PointerType &type) override\n   {\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -598,20 +597,20 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       }\n   }\n \n-  void visit (TyTy::StrType &type) override\n+  void visit (const TyTy::StrType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n-  void visit (TyTy::NeverType &) override\n+  void visit (const TyTy::NeverType &) override\n   {\n     translated = ctx->get_backend ()->unit_type ();\n   }\n \n-  void visit (TyTy::DynamicObjectType &type) override\n+  void visit (const TyTy::DynamicObjectType &type) override\n   {\n     if (trait_object_mode)\n       {\n@@ -661,7 +660,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n   }\n \n-  void visit (TyTy::ClosureType &type) override { gcc_unreachable (); }\n+  void visit (const TyTy::ClosureType &type) override { gcc_unreachable (); }\n \n private:\n   TyTyResolveCompile (Context *ctx, bool trait_object_mode)"}, {"sha": "364be5014df801fbe73c0bfd2e3738f025f44fb8", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c2481404953dce7ef7ccfda856ba6a1ee2323/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c2481404953dce7ef7ccfda856ba6a1ee2323/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=ff5c2481404953dce7ef7ccfda856ba6a1ee2323", "patch": "@@ -1893,6 +1893,7 @@ class ProjectionType : public BaseType, public SubstitutionRef\n     return has_substitutions ();\n   }\n \n+  const BaseType *get () const { return base; }\n   BaseType *get () { return base; }\n \n   bool contains_type_parameters () const override"}]}