{"sha": "3a4a92598014d33ef2c8b8ec38d8ad917812921a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0YTkyNTk4MDE0ZDMzZWYyYzhiOGVjMzhkOGFkOTE3ODEyOTIxYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-07-30T09:42:06Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-07-31T17:12:25Z"}, "message": "nvptx: Define TARGET_TRULY_NOOP_TRUNCATION to false\n\nMany thanks to Richard Biener for approving the midde-end\npatch that cleared the way for this one.  This nvptx patch\ndefines the target hook TARGET_TRULY_NOOP_TRUNCATION to\nfalse, indicating that integer truncations require explicit\ninstructions.  nvptx.c already defines TARGET_MODES_TIEABLE_P\nand TARGET_CAN_CHANGE_MODE_CLASS to false, and as (previously)\ndocumented that may require TARGET_TRULY_NOOP_TRUNCATION to\nbe defined likewise.\n\nThis patch decreases the number of unexpected failures in\nthe testsuite by 10, and increases the number of expected\npasses by 4, including these previous FAILs/ICEs:\ngcc.c-torture/compile/opout.c\ngcc.dg/torture/pr79125.c\ngcc.dg/tree-ssa/pr92085-1.c\n\nUnfortunately there is one testsuite failure that used to\npass gcc.target/nvptx/v2si-cvt.c, but this isn't an ICE or\nincorrect code.  This regression has been filed as PR96403,\nand the failing scan-assembler directives have been replaced\nby a reference to the PR.\n\nThis patch has been tested on nvptx-none hosted on\nx86_64-pc-linux-gnu with \"make\" and \"make check\" with\nfewer ICEs and no wrong code regressions.\n\n2020-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\ngcc/ChangeLog:\n\n\tPR target/90928\n\t* config/nvptx/nvptx.c (nvptx_truly_noop_truncation): Implement.\n\t(TARGET_TRULY_NOOP_TRUNCATION): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/v2si-cvt.c: Simplify source.  Remove\n\tscan-assembler directives.  Mention PR96403.", "tree": {"sha": "cee5ca4454a44d5906ff9570bda7f87c62b5bbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee5ca4454a44d5906ff9570bda7f87c62b5bbab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4a92598014d33ef2c8b8ec38d8ad917812921a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4a92598014d33ef2c8b8ec38d8ad917812921a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4a92598014d33ef2c8b8ec38d8ad917812921a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4a92598014d33ef2c8b8ec38d8ad917812921a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed0b4bb29a50d6be0e4b6411b3cc9f22967f1313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0b4bb29a50d6be0e4b6411b3cc9f22967f1313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0b4bb29a50d6be0e4b6411b3cc9f22967f1313"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "d8a8fb2d55b6920002e7835581b5bc0aadca3ce0", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4a92598014d33ef2c8b8ec38d8ad917812921a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4a92598014d33ef2c8b8ec38d8ad917812921a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=3a4a92598014d33ef2c8b8ec38d8ad917812921a", "patch": "@@ -6463,6 +6463,14 @@ nvptx_can_change_mode_class (machine_mode, machine_mode, reg_class_t)\n   return false;\n }\n \n+/* Implement TARGET_TRULY_NOOP_TRUNCATION.  */\n+\n+static bool\n+nvptx_truly_noop_truncation (poly_uint64, poly_uint64)\n+{\n+  return false;\n+}\n+\n static GTY(()) tree nvptx_previous_fndecl;\n \n static void\n@@ -6612,6 +6620,9 @@ nvptx_set_current_function (tree fndecl)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS nvptx_can_change_mode_class\n \n+#undef TARGET_TRULY_NOOP_TRUNCATION\n+#define TARGET_TRULY_NOOP_TRUNCATION nvptx_truly_noop_truncation\n+\n #undef TARGET_HAVE_SPECULATION_SAFE_VALUE\n #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed\n "}, {"sha": "35b9fc3ce26b080e684a46dc18994c6e93976582", "filename": "gcc/testsuite/gcc.target/nvptx/v2si-cvt.c", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4a92598014d33ef2c8b8ec38d8ad917812921a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4a92598014d33ef2c8b8ec38d8ad917812921a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c?ref=3a4a92598014d33ef2c8b8ec38d8ad917812921a", "patch": "@@ -3,37 +3,25 @@\n \n typedef int __v2si __attribute__((__vector_size__(8)));\n \n-int __attribute__((unused))\n+__v2si __attribute__((unused))\n vector_cvt (__v2si arg)\n {\n-  __v2si val4 = arg;\n-  char *p = (char*)&val4;\n+  unsigned short *p = (unsigned short*)&arg;\n \n-  if (p[0] != 1)\n-    return 1;\n-  if (p[1] != 2)\n-    return 1;\n-  if (p[2] != 3)\n-    return 1;\n+  volatile unsigned short s = p[0];\n \n-  return 0;\n+  return arg;\n }\n \n-int\n-vector_cvt_2 (__v2si val, __v2si val2)\n+__v2si __attribute__((unused))\n+vector_cvt_2 (__v2si arg)\n {\n-  char *p = (char*)&val;\n-  char *p2 = (char*)&val2;\n+  unsigned char *p = (unsigned char*)&arg;\n \n-  if (p[0] != p2[0])\n-    return 1;\n-  if (p[4] != p2[4])\n-    return 1;\n+  volatile unsigned char s = p[0];\n \n-  return 0;\n+  return arg;\n }\n \n-/* We want to test for 'mov.t' here, but given PR80845 we test for cvt.t.t\n-   instead.\n-   { dg-final { scan-assembler \"(?n)cvt\\\\.u32\\\\.u32.*\\\\.x\" } } */\n-/* { dg-final { scan-assembler \"(?n)cvt\\\\.u16\\\\.u32.*\\\\.x\" } } */\n+/* Todo: We'd like to generate insns with .x operands to access the v2si\n+   operands, but that's currently not done, see PR96403.  */"}]}