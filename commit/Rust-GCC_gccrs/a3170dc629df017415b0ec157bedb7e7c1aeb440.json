{"sha": "a3170dc629df017415b0ec157bedb7e7c1aeb440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxNzBkYzYyOWRmMDE3NDE1YjBlYzE1N2JlZGI3ZTdjMWFlYjQ0MA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-25T02:22:47Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-25T02:22:47Z"}, "message": "eabi.h: Define TARGET_SPE_ABI, TARGET_SPE, TARGET_ISEL, and TARGET_FPRS.\n\n2002-07-24  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/rs6000/eabi.h: Define TARGET_SPE_ABI, TARGET_SPE,\n\tTARGET_ISEL, and TARGET_FPRS.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n\t-mabi=spe, -mabi=no-spe, and -misel=.\n\n\t* config/rs6000/rs6000-protos.h: Add output_isel.\n\tMove vrsave_operation prototype here.\n\n\t* config/rs6000/rs6000.md (sminsi3): Allow pattern for TARGET_ISEL.\n\t(smaxsi3): Same.\n\t(uminsi3): Same.\n\t(umaxsi3): Same.\n\t(abssi2_nopower): Disallow when TARGET_ISEL.\n\t(*ne0): Same.\n\t(negsf2): Change to expand and rename old pattern to *negsf2.\n\t(abssf2): Change to expand and rename old pattern to *abssf2.\n\n\tNew expanders: fix_truncsfsi2, floatunssisf2, floatsisf2,\n\tfixunssfsi2.\n\n\tChange patterns that check for TARGET_HARD_FLOAT or\n\tTARGET_SOFT_FLOAT to also check TARGET_FPRS.\n\n\t* config/rs6000/rs6000.c: New globals: rs6000_spe_abi,\n\trs6000_isel, rs6000_fprs, rs6000_isel_string.\n\t(rs6000_override_options): Add 8540 case to\n\tprocessor_target_table.\n\tSet rs6000_isel for the 8540.\n\tCall rs6000_parse_isel_option.\n\t(enable_mask_for_builtins): New.\n\t(rs6000_parse_isel_option): New.\n\t(rs6000_parse_abi_options): Add spe and no-spe.\n\t(easy_fp_constant): Treat !TARGET_FPRS as soft-float.\n\t(rs6000_legitimize_address): Check for TARGET_FPRS when checking\n\tfor TARGET_HARD_FLOAT.\n\tAdd case for SPE_VECTOR_MODE.\n\t(rs6000_legitimize_reload_address): Handle SPE vector modes.\n\t(rs6000_legitimate_address): Disallow PRE_INC/PRE_DEC for SPE\n\tvector modes.\n\tCheck for TARGET_FPRS when checking for TARGET_HARD_FLOAT.\n\t(rs6000_emit_move): Check for TARGET_FPRS.\n\tAdd cases for SPE vector modes.\n\t(function_arg_boundary): Return 64 for SPE vector modes.\n\t(function_arg_advance): Check for TARGET_FPRS and\n\tHandle SPE vectors.\n\t(function_arg): Same.\n\t(setup_incoming_varargs): Check for TARGET_FPRS.\n\t(rs6000_va_arg): Same.\n\t(struct builtin_description): Un-constify mask field.  Move up in\n\tfile.\n\t(bdesc_2arg): Un-constify and add SPE builtins.\n\t(bdesc_1arg): Same.\n\t(bdesc_spe_predicates): New.\n\t(bdesc_spe_evsel): New.\n\t(rs6000_expand_unop_builtin): Add SPE 5-bit literal builtins.\n\t(rs6000_expand_binop_builtin): Same.\n\t(bdesc_2arg_spe): New.\n\t(spe_expand_builtin): New.\n\t(spe_expand_predicate_builtin): New.\n\t(spe_expand_evsel_builtin): New.\n\t(rs6000_expand_builtin): Call spe_expand_builtin for SPE.\n\t(rs6000_init_builtins): Initialize SPE builtins.  Call\n\trs6000_common_init_builtins.\n\t(altivec_init_builtins): Move all non-altivec builtin code to...\n\t(rs6000_common_init_builtins): ...here.  New function.\n\t(branch_positive_comparison_operator): Allow NE code for SPE.\n\t(ccr_bit): Return correct ccr bit for SPE fp.\n\t(print_operand): Emit crnor in 'D' case for SPE.\n\tNew case 't'.\n\tAdd SPE code for 'y' case.\n\t(rs6000_generate_compare): Generate rtl for SPE fp.\n\t(output_cbranch): Handle SPE hard floats.\n\t(rs6000_emit_cmove): Handle isel.\n\t(rs6000_emit_int_cmove): New.\n\t(output_isel): New.\n\t(rs6000_stack_info): Adjust stack frame so GPRs are saved in\n\t64-bits for SPE.\n\t(debug_stack_info): Add SPE info.\n\t(gen_frame_mem_offset): New.\n\t(rs6000_emit_prologue): Save GPRs in 64-bits for SPE abi.\n\tChange mode of frame pointer, when saving it, to Pmode.\n\t(rs6000_emit_epilogue): Restore GPRs in 64-bits for SPE abi.\n\tMisc cleanups and use gen_frame_mem_offset when appropriate.\n\n\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_PPC8540.\n\t(TARGET_SPE_ABI): New.\n\t(TARGET_SPE): New.\n\t(TARGET_ISEL): New.\n\t(TARGET_FPRS): New.\n\t(FIXED_SCRATCH): New.\n\t(RTX_COSTS): Add PROCESSOR_PPC8540.\n\t(ASM_CPU_SPEC): Add case for 8540.\n\t(TARGET_OPTIONS): Add isel= case.\n\t(rs6000_spe_abi): New.\n\t(rs6000_isel): New.\n\t(rs6000_fprs): New.\n\t(rs6000_isel_string): New.\n\t(UNITS_PER_SPE_WORD): New.\n\t(LOCAL_ALIGNMENT): Adjust for SPE.\n\t(HARD_REGNO_MODE_OK): Same.\n\t(DATA_ALIGNMENT): Same.\n\t(MEMBER_TYPE_FORCES_BLK): New.\n\t(FIRST_PSEUDO_REGISTER): Set to 113.\n\t(FIXED_REGISTERS): Add SPE registers.\n\t(reg_class): Same.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(REGISTER_NAMES): Same.\n\t(DEBUG_REGISTER_NAMES): Same.\n\t(ADDITIONAL_REGISTER_NAMES): Same.\n\t(CALL_USED_REGISTERS): Same.\n\t(CALL_REALLY_USED_REGISTERS): Same.\n\t(SPE_ACC_REGNO): New.\n\t(SPEFSCR_REGNO): New.\n\t(SPE_SIMD_REGNO_P): New.\n\t(HARD_REGNO_NREGS): Adjust for SPE.\n\t(VECTOR_MODE_SUPPORTED_P): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(FUNCTION_VALUE): Same.\n\t(LIBCALL_VALUE): Same.\n\t(LEGITIMATE_OFFSET_ADDRESS_P): Same.\n\t(SPE_VECTOR_MODE): New.\n\t(CONDITIONAL_REGISTER_USAGE): Disable FPRs when target does FP on\n\tthe GPRs.  Set FIXED_SCRATCH fixed in SPE case.\n\t(rs6000_stack): Add spe_gp_size, spe_padding_size,\n\tspe_gp_save_offset.\n\t(USE_FP_FOR_ARG_P): Check for TARGET_FPRS.\n\t(LEGITIMATE_LO_SUM_ADDRESS_P): Same.\n\t(SPE_CONST_OFFSET_OK): New.\n\t(rs6000_builtins): Add SPE builtins.\n\n\t* testsuite/gcc.dg/ppc-spe.c: New.\n\n\t* config/rs6000/eabispe.h: New.\n\n\t* config/rs6000/spe.h: New.\n\n\t* config/rs600/spe.md: New.\n\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n\t__SIMD__ for TARGET_SPE.\n\n\t* config.gcc: Add powerpc-*-eabispe* case.\n\tAdd spe.h to user headers for powerpc.\n\nFrom-SVN: r55731", "tree": {"sha": "b3f65ba411bdbbb0640ca3fb4529474a863b4f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f65ba411bdbbb0640ca3fb4529474a863b4f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3170dc629df017415b0ec157bedb7e7c1aeb440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3170dc629df017415b0ec157bedb7e7c1aeb440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3170dc629df017415b0ec157bedb7e7c1aeb440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3170dc629df017415b0ec157bedb7e7c1aeb440/comments", "author": null, "committer": null, "parents": [{"sha": "9a56333e555ee0001d568b3d1c91bee2ad825578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a56333e555ee0001d568b3d1c91bee2ad825578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a56333e555ee0001d568b3d1c91bee2ad825578"}], "stats": {"total": 6331, "additions": 5968, "deletions": 363}, "files": [{"sha": "373dd2b6fc702b575150d06f1026faa9f960ecb8", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -42,3 +42,13 @@ Boston, MA 02111-1307, USA.  */\n       builtin_assert (\"machine=powerpc\"); \\\n     }                                     \\\n   while (0)\n+\n+#undef TARGET_SPE_ABI\n+#undef TARGET_SPE\n+#undef TARGET_ISEL\n+#undef TARGET_FPRS\n+\n+#define TARGET_SPE_ABI rs6000_spe_abi\n+#define TARGET_SPE (rs6000_cpu == PROCESSOR_PPC8540)\n+#define TARGET_ISEL rs6000_isel\n+#define TARGET_FPRS rs6000_fprs"}, {"sha": "b0047cd0c8a22989c00c2e8df4d3939806c3c60f", "filename": "gcc/config/rs6000/eabispe.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -0,0 +1,51 @@\n+/* Core target definitions for GNU compiler\n+   for PowerPC embedded targeted systems with SPE support.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_EABI)\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (PowerPC Embedded SPE)\");\n+\n+#undef SUBSUBTARGET_OVERRIDE_OPTIONS\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n+  rs6000_cpu = PROCESSOR_PPC8540; \\\n+  rs6000_spe_abi = 1; \\\n+  rs6000_fprs = 0; \\\n+  /* See note below.  */ \\\n+  /*rs6000_long_double_type_size = 128;*/ \\\n+  rs6000_isel = 1\n+\n+/*\n+  The e500 ABI says that either long doubles are 128 bits, or if\n+  implemented in any other size, the compiler/linker should error out.\n+  We have no emulation libraries for 128 bit long doubles, and I hate\n+  the dozens of failures on the regression suite.  So I'm breaking ABI\n+  specifications, until I properly fix the emulation.\n+\n+  Enable these later.\n+#undef CPP_LONGDOUBLE_DEFAULT_SPEC\n+#define CPP_LONGDOUBLE_DEFAULT_SPEC \"-D__LONG_DOUBLE_128__=1\"\n+*/\n+\n+#undef ASM_DEFAULT_SPEC\n+#define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "14132ca68ad2ef6a9352ac09841b31a943a53256", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -93,6 +93,8 @@ rs6000_cpu_cpp_builtins (pfile)\n     builtin_define (\"_ARCH_COM\");\n   if (TARGET_ALTIVEC)\n     builtin_define (\"__ALTIVEC__\");\n+  if (TARGET_SPE)\n+    builtin_define (\"__SPE__\");\n   if (TARGET_SOFT_FLOAT)\n     builtin_define (\"_SOFT_FLOAT\");\n   if (BYTES_BIG_ENDIAN)"}, {"sha": "42563d30378cb8b43d5bdd4723b564835b97e3ee", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -186,6 +186,8 @@ extern void rs6000_emit_load_toc_table PARAMS ((int));\n extern void rs6000_aix_emit_builtin_unwind_init PARAMS ((void));\n extern void rs6000_emit_epilogue PARAMS ((int));\n extern void debug_stack_info PARAMS ((rs6000_stack_t *));\n+extern const char *output_isel PARAMS ((rtx *));\n+extern int vrsave_operation PARAMS ((rtx, enum machine_mode));\n \n extern void machopic_output_stub PARAMS ((FILE *, const char *, const char *));\n "}, {"sha": "aaaccc87283553e578f3771dbce41ac61bf624e0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1630, "deletions": 242, "changes": 1872, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -80,6 +80,18 @@ int rs6000_altivec_vrsave;\n /* String from -mvrsave= option.  */\n const char *rs6000_altivec_vrsave_string;\n \n+/* Nonzero if we want SPE ABI extensions.  */\n+int rs6000_spe_abi;\n+\n+/* Whether isel instructions should be generated.  */\n+int rs6000_isel;\n+\n+/* Nonzero if we have FPRs.  */\n+int rs6000_fprs = 1;\n+\n+/* String from -misel=.  */\n+const char *rs6000_isel_string;\n+\n /* Set to non-zero once AIX common-mode calls have been defined.  */\n static int common_mode_defined;\n \n@@ -131,6 +143,17 @@ static int rs6000_sr_alias_set;\n int rs6000_default_long_calls;\n const char *rs6000_longcall_switch;\n \n+struct builtin_description\n+{\n+  /* mask is not const because we're going to alter it below.  This\n+     nonsense will go away when we rewrite the -march infrastructure\n+     to give us more target flag bits.  */\n+  unsigned int mask;\n+  const enum insn_code icode;\n+  const char *const name;\n+  const enum rs6000_builtins code;\n+};\n+\n static void rs6000_add_gc_roots PARAMS ((void));\n static int num_insns_constant_wide PARAMS ((HOST_WIDE_INT));\n static rtx expand_block_move_mem PARAMS ((enum machine_mode, rtx, rtx));\n@@ -142,6 +165,7 @@ static void rs6000_emit_stack_tie PARAMS ((void));\n static void rs6000_frame_related PARAMS ((rtx, rtx, HOST_WIDE_INT, rtx, rtx));\n static void emit_frame_save PARAMS ((rtx, rtx, enum machine_mode,\n \t\t\t\t     unsigned int, int, int));\n+static rtx gen_frame_mem_offset PARAMS ((enum machine_mode, rtx, int));\n static void rs6000_emit_allocate_stack PARAMS ((HOST_WIDE_INT, int));\n static unsigned rs6000_hash_constant PARAMS ((rtx));\n static unsigned toc_hash_function PARAMS ((const void *));\n@@ -193,6 +217,17 @@ static rtx rs6000_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx rs6000_expand_ternop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static void altivec_init_builtins PARAMS ((void));\n+static void rs6000_common_init_builtins PARAMS ((void));\n+\n+static void enable_mask_for_builtins PARAMS ((struct builtin_description *,\n+\t\t\t\t\t      int, enum rs6000_builtins,\n+\t\t\t\t\t      enum rs6000_builtins));\n+static void spe_init_builtins PARAMS ((void));\n+static rtx spe_expand_builtin PARAMS ((tree, rtx, bool *));\n+static rtx spe_expand_predicate_builtin PARAMS ((enum insn_code, tree, rtx));\n+static rtx spe_expand_evsel_builtin PARAMS ((enum insn_code, tree, rtx));\n+static int rs6000_emit_int_cmove PARAMS ((rtx, rtx, rtx, rtx));\n+\n static rtx altivec_expand_builtin PARAMS ((tree, rtx, bool *));\n static rtx altivec_expand_ld_builtin PARAMS ((tree, rtx, bool *));\n static rtx altivec_expand_st_builtin PARAMS ((tree, rtx, bool *));\n@@ -202,10 +237,10 @@ static rtx altivec_expand_predicate_builtin PARAMS ((enum insn_code, const char\n static rtx altivec_expand_stv_builtin PARAMS ((enum insn_code, tree));\n static void rs6000_parse_abi_options PARAMS ((void));\n static void rs6000_parse_vrsave_option PARAMS ((void));\n+static void rs6000_parse_isel_option PARAMS ((void));\n static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n static void is_altivec_return_reg PARAMS ((rtx, void *));\n-int vrsave_operation PARAMS ((rtx, enum machine_mode));\n static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *, int));\n static void altivec_frame_fixup PARAMS ((rtx, rtx, HOST_WIDE_INT));\n static int easy_vector_constant PARAMS ((rtx));\n@@ -436,6 +471,9 @@ rs6000_override_options (default_cpu)\n \t {\"7450\", PROCESSOR_PPC7450,\n             MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n             POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n+\t {\"8540\", PROCESSOR_PPC8540,\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"801\", PROCESSOR_MPCCORE,\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n@@ -484,6 +522,9 @@ rs6000_override_options (default_cpu)\n \t}\n     }\n \n+  if (rs6000_cpu == PROCESSOR_PPC8540)\n+    rs6000_isel = 1;\n+\n   /* If we are optimizing big endian systems for space, use the store\n      multiple instructions.  */\n   if (BYTES_BIG_ENDIAN && optimize_size)\n@@ -578,6 +619,9 @@ rs6000_override_options (default_cpu)\n   /* Handle -mvrsave= option.  */\n   rs6000_parse_vrsave_option ();\n \n+  /* Handle -misel= option.  */\n+  rs6000_parse_isel_option ();\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n@@ -640,6 +684,21 @@ rs6000_override_options (default_cpu)\n   init_machine_status = rs6000_init_machine_status;\n }\n \n+/* Handle -misel= option.  */\n+static void\n+rs6000_parse_isel_option ()\n+{\n+  if (rs6000_isel_string == 0)\n+    return;\n+  else if (! strcmp (rs6000_isel_string, \"yes\"))\n+    rs6000_isel = 1;\n+  else if (! strcmp (rs6000_isel_string, \"no\"))\n+    rs6000_isel = 0;\n+  else\n+    error (\"unknown -misel= option specified: '%s'\",\n+         rs6000_isel_string);\n+}\n+\n /* Handle -mvrsave= options.  */\n static void\n rs6000_parse_vrsave_option ()\n@@ -665,6 +724,10 @@ rs6000_parse_abi_options ()\n     rs6000_altivec_abi = 1;\n   else if (! strcmp (rs6000_abi_string, \"no-altivec\"))\n     rs6000_altivec_abi = 0;\n+  else if (! strcmp (rs6000_abi_string, \"spe\"))\n+    rs6000_spe_abi = 1;\n+  else if (! strcmp (rs6000_abi_string, \"no-spe\"))\n+    rs6000_spe_abi = 0;\n   else\n     error (\"unknown ABI specified: '%s'\", rs6000_abi_string);\n }\n@@ -1208,7 +1271,8 @@ easy_fp_constant (op, mode)\n     return 0;\n \n   /* Consider all constants with -msoft-float to be easy.  */\n-  if (TARGET_SOFT_FLOAT && mode != DImode)\n+  if ((TARGET_SOFT_FLOAT || !TARGET_FPRS)\n+      && mode != DImode)\n     return 1;\n \n   /* If we are using V.4 style PIC, consider all constants to be hard.  */\n@@ -2007,7 +2071,9 @@ rs6000_legitimize_address (x, oldx, mode)\n \t   && GET_CODE (XEXP (x, 0)) == REG\n \t   && GET_CODE (XEXP (x, 1)) != CONST_INT\n \t   && GET_MODE_NUNITS (mode) == 1\n-\t   && (TARGET_HARD_FLOAT || TARGET_POWERPC64 || mode != DFmode)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t       || TARGET_POWERPC64\n+\t       || mode != DFmode)\n \t   && (TARGET_POWERPC64 || mode != DImode)\n \t   && mode != TImode)\n     {\n@@ -2026,13 +2092,34 @@ rs6000_legitimize_address (x, oldx, mode)\n       reg = force_reg (Pmode, x);\n       return reg;\n     }\n+  else if (SPE_VECTOR_MODE (mode))\n+    {\n+      /* We accept [reg + reg] and [reg + OFFSET].  */\n+\n+      if (GET_CODE (x) == PLUS)\n+      {\n+        rtx op1 = XEXP (x, 0);\n+        rtx op2 = XEXP (x, 1);\n+\n+        op1 = force_reg (Pmode, op1);\n+\n+        if (GET_CODE (op2) != REG\n+            && (GET_CODE (op2) != CONST_INT\n+                || !SPE_CONST_OFFSET_OK (INTVAL (op2))))\n+          op2 = force_reg (Pmode, op2);\n+\n+        return gen_rtx_PLUS (Pmode, op1, op2);\n+      }\n+\n+      return force_reg (Pmode, x);\n+    }\n   else if (TARGET_ELF && TARGET_32BIT && TARGET_NO_TOC && ! flag_pic\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE \n \t   && CONSTANT_P (x)\n \t   && GET_MODE_NUNITS (mode) == 1\n \t   && (GET_MODE_BITSIZE (mode) <= 32\n-\t       || (TARGET_HARD_FLOAT && mode == DFmode)))\n+\t       || ((TARGET_HARD_FLOAT && TARGET_FPRS) && mode == DFmode)))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n       emit_insn (gen_elf_high (reg, (x)));\n@@ -2043,7 +2130,7 @@ rs6000_legitimize_address (x, oldx, mode)\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE \n \t   && CONSTANT_P (x)\n-\t   && (TARGET_HARD_FLOAT || mode != DFmode)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS) || mode != DFmode)\n \t   && mode != DImode \n \t   && mode != TImode)\n     {\n@@ -2130,6 +2217,7 @@ rs6000_legitimize_reload_address (x, mode, opnum, type, ind_levels, win)\n       && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n       && REG_MODE_OK_FOR_BASE_P (XEXP (x, 0), mode)\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n+       && !SPE_VECTOR_MODE (mode)\n       && !ALTIVEC_VECTOR_MODE (mode))\n     {\n       HOST_WIDE_INT val = INTVAL (XEXP (x, 1));\n@@ -2218,6 +2306,7 @@ rs6000_legitimate_address (mode, x, reg_ok_strict)\n     return 1;\n   if ((GET_CODE (x) == PRE_INC || GET_CODE (x) == PRE_DEC)\n       && !ALTIVEC_VECTOR_MODE (mode)\n+      && !SPE_VECTOR_MODE (mode)\n       && TARGET_UPDATE\n       && LEGITIMATE_INDIRECT_ADDRESS_P (XEXP (x, 0), reg_ok_strict))\n     return 1;\n@@ -2235,7 +2324,9 @@ rs6000_legitimate_address (mode, x, reg_ok_strict)\n   if (LEGITIMATE_OFFSET_ADDRESS_P (mode, x, reg_ok_strict))\n     return 1;\n   if (mode != TImode\n-      && (TARGET_HARD_FLOAT || TARGET_POWERPC64 || mode != DFmode)\n+      && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t  || TARGET_POWERPC64\n+\t  || mode != DFmode)\n       && (TARGET_POWERPC64 || mode != DImode)\n       && LEGITIMATE_INDEXED_ADDRESS_P (x, reg_ok_strict))\n     return 1;\n@@ -2430,7 +2521,8 @@ rs6000_emit_move (dest, source, mode)\n   if (! no_new_pseudos && GET_CODE (operands[0]) != REG)\n     operands[1] = force_reg (mode, operands[1]);\n \n-  if (mode == SFmode && ! TARGET_POWERPC && TARGET_HARD_FLOAT\n+  if (mode == SFmode && ! TARGET_POWERPC\n+      && TARGET_HARD_FLOAT && TARGET_FPRS\n       && GET_CODE (operands[0]) == MEM)\n     {\n       int regnum;\n@@ -2489,6 +2581,9 @@ rs6000_emit_move (dest, source, mode)\n     case V8HImode:\n     case V4SFmode:\n     case V4SImode:\n+    case V4HImode:\n+    case V2SFmode:\n+    case V2SImode:\n       if (CONSTANT_P (operands[1])\n \t  && !easy_vector_constant (operands[1]))\n \toperands[1] = force_const_mem (mode, operands[1]);\n@@ -2774,6 +2869,8 @@ function_arg_boundary (mode, type)\n {\n   if (DEFAULT_ABI == ABI_V4 && (mode == DImode || mode == DFmode))\n     return 64;\n+   else if (SPE_VECTOR_MODE (mode))\n+     return 64;\n   else if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n     return 128;\n   else\n@@ -2800,9 +2897,14 @@ function_arg_advance (cum, mode, type, named)\n       else\n \tcum->words += RS6000_ARG_SIZE (mode, type);\n     }\n+  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+    {\n+      cum->words += RS6000_ARG_SIZE (mode, type);\n+      cum->sysv_gregno++;\n+    }\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n-      if (TARGET_HARD_FLOAT\n+      if (TARGET_HARD_FLOAT && TARGET_FPRS\n \t  && (mode == SFmode || mode == DFmode))\n \t{\n \t  if (cum->fregno <= FP_ARG_V4_MAX_REG)\n@@ -2862,7 +2964,8 @@ function_arg_advance (cum, mode, type, named)\n \n       cum->words += align + RS6000_ARG_SIZE (mode, type);\n \n-      if (GET_MODE_CLASS (mode) == MODE_FLOAT && TARGET_HARD_FLOAT)\n+      if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t  && TARGET_HARD_FLOAT && TARGET_FPRS)\n \tcum->fregno++;\n \n       if (TARGET_DEBUG_ARG)\n@@ -2915,14 +3018,17 @@ function_arg (cum, mode, type, named)\n   if (mode == VOIDmode)\n     {\n       if (abi == ABI_V4\n-\t  && TARGET_HARD_FLOAT\n \t  && cum->nargs_prototype < 0\n \t  && type && (cum->prototype || TARGET_NO_PROTOTYPE))\n \t{\n-\t  return GEN_INT (cum->call_cookie\n-\t\t\t  | ((cum->fregno == FP_ARG_MIN_REG)\n-\t\t\t     ? CALL_V4_SET_FP_ARGS\n-\t\t\t     : CALL_V4_CLEAR_FP_ARGS));\n+\t  /* For the SPE, we need to crxor CR6 always.  */\n+\t  if (TARGET_SPE_ABI)\n+\t    return GEN_INT (cum->call_cookie | CALL_V4_SET_FP_ARGS);\n+\t  else if (TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t    return GEN_INT (cum->call_cookie\n+\t\t\t    | ((cum->fregno == FP_ARG_MIN_REG)\n+\t\t\t       ? CALL_V4_SET_FP_ARGS\n+\t\t\t       : CALL_V4_CLEAR_FP_ARGS));\n \t}\n \n       return GEN_INT (cum->call_cookie);\n@@ -2935,9 +3041,16 @@ function_arg (cum, mode, type, named)\n       else\n \treturn NULL;\n     }\n+  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+    {\n+      if (cum->sysv_gregno - 1 <= GP_ARG_MAX_REG)\n+\treturn gen_rtx_REG (mode, cum->sysv_gregno);\n+      else\n+\treturn NULL;\n+    }\n   else if (abi == ABI_V4)\n     {\n-      if (TARGET_HARD_FLOAT\n+      if (TARGET_HARD_FLOAT && TARGET_FPRS\n \t  && (mode == SFmode || mode == DFmode))\n \t{\n \t  if (cum->fregno <= FP_ARG_V4_MAX_REG)\n@@ -3159,7 +3272,8 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \n   /* Save FP registers if needed.  */\n   if (DEFAULT_ABI == ABI_V4\n-      && TARGET_HARD_FLOAT && ! no_rtl\n+      && TARGET_HARD_FLOAT && TARGET_FPRS\n+      && ! no_rtl\n       && next_cum.fregno <= FP_ARG_V4_MAX_REG)\n     {\n       int fregno = next_cum.fregno;\n@@ -3340,7 +3454,7 @@ rs6000_va_arg (valist, type)\n       size = UNITS_PER_WORD;\n       rsize = 1;\n     }\n-  else if (FLOAT_TYPE_P (type) && ! TARGET_SOFT_FLOAT)\n+  else if (FLOAT_TYPE_P (type) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     {\n       /* FP args go in FP registers, if present.  */\n       indirect_p = 0;\n@@ -3476,14 +3590,6 @@ do {\t\t\t\t\t\t\t\t\\\n \t\t      NULL, NULL_TREE);\t\t\t\t\\\n } while (0)\n \n-struct builtin_description\n-{\n-  const unsigned int mask;\n-  const enum insn_code icode;\n-  const char *const name;\n-  const enum rs6000_builtins code;\n-};\n-\n /* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */\n \n static const struct builtin_description bdesc_3arg[] =\n@@ -3525,7 +3631,7 @@ static const struct builtin_description bdesc_dst[] =\n \n /* Simple binary operations: VECc = foo (VECa, VECb).  */\n \n-static const struct builtin_description bdesc_2arg[] =\n+static struct builtin_description bdesc_2arg[] =\n {\n   { MASK_ALTIVEC, CODE_FOR_addv16qi3, \"__builtin_altivec_vaddubm\", ALTIVEC_BUILTIN_VADDUBM },\n   { MASK_ALTIVEC, CODE_FOR_addv8hi3, \"__builtin_altivec_vadduhm\", ALTIVEC_BUILTIN_VADDUHM },\n@@ -3640,6 +3746,158 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsum2sws, \"__builtin_altivec_vsum2sws\", ALTIVEC_BUILTIN_VSUM2SWS },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n   { MASK_ALTIVEC, CODE_FOR_xorv4si3, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n+\n+  /* Place holder, leave as first spe builtin.  */\n+  { 0, CODE_FOR_spe_evaddw, \"__builtin_spe_evaddw\", SPE_BUILTIN_EVADDW },\n+  { 0, CODE_FOR_spe_evand, \"__builtin_spe_evand\", SPE_BUILTIN_EVAND },\n+  { 0, CODE_FOR_spe_evandc, \"__builtin_spe_evandc\", SPE_BUILTIN_EVANDC },\n+  { 0, CODE_FOR_spe_evdivws, \"__builtin_spe_evdivws\", SPE_BUILTIN_EVDIVWS },\n+  { 0, CODE_FOR_spe_evdivwu, \"__builtin_spe_evdivwu\", SPE_BUILTIN_EVDIVWU },\n+  { 0, CODE_FOR_spe_eveqv, \"__builtin_spe_eveqv\", SPE_BUILTIN_EVEQV },\n+  { 0, CODE_FOR_spe_evfsadd, \"__builtin_spe_evfsadd\", SPE_BUILTIN_EVFSADD },\n+  { 0, CODE_FOR_spe_evfsdiv, \"__builtin_spe_evfsdiv\", SPE_BUILTIN_EVFSDIV },\n+  { 0, CODE_FOR_spe_evfsmul, \"__builtin_spe_evfsmul\", SPE_BUILTIN_EVFSMUL },\n+  { 0, CODE_FOR_spe_evfssub, \"__builtin_spe_evfssub\", SPE_BUILTIN_EVFSSUB },\n+  { 0, CODE_FOR_spe_evmergehi, \"__builtin_spe_evmergehi\", SPE_BUILTIN_EVMERGEHI },\n+  { 0, CODE_FOR_spe_evmergehilo, \"__builtin_spe_evmergehilo\", SPE_BUILTIN_EVMERGEHILO },\n+  { 0, CODE_FOR_spe_evmergelo, \"__builtin_spe_evmergelo\", SPE_BUILTIN_EVMERGELO },\n+  { 0, CODE_FOR_spe_evmergelohi, \"__builtin_spe_evmergelohi\", SPE_BUILTIN_EVMERGELOHI },\n+  { 0, CODE_FOR_spe_evmhegsmfaa, \"__builtin_spe_evmhegsmfaa\", SPE_BUILTIN_EVMHEGSMFAA },\n+  { 0, CODE_FOR_spe_evmhegsmfan, \"__builtin_spe_evmhegsmfan\", SPE_BUILTIN_EVMHEGSMFAN },\n+  { 0, CODE_FOR_spe_evmhegsmiaa, \"__builtin_spe_evmhegsmiaa\", SPE_BUILTIN_EVMHEGSMIAA },\n+  { 0, CODE_FOR_spe_evmhegsmian, \"__builtin_spe_evmhegsmian\", SPE_BUILTIN_EVMHEGSMIAN },\n+  { 0, CODE_FOR_spe_evmhegumiaa, \"__builtin_spe_evmhegumiaa\", SPE_BUILTIN_EVMHEGUMIAA },\n+  { 0, CODE_FOR_spe_evmhegumian, \"__builtin_spe_evmhegumian\", SPE_BUILTIN_EVMHEGUMIAN },\n+  { 0, CODE_FOR_spe_evmhesmf, \"__builtin_spe_evmhesmf\", SPE_BUILTIN_EVMHESMF },\n+  { 0, CODE_FOR_spe_evmhesmfa, \"__builtin_spe_evmhesmfa\", SPE_BUILTIN_EVMHESMFA },\n+  { 0, CODE_FOR_spe_evmhesmfaaw, \"__builtin_spe_evmhesmfaaw\", SPE_BUILTIN_EVMHESMFAAW },\n+  { 0, CODE_FOR_spe_evmhesmfanw, \"__builtin_spe_evmhesmfanw\", SPE_BUILTIN_EVMHESMFANW },\n+  { 0, CODE_FOR_spe_evmhesmi, \"__builtin_spe_evmhesmi\", SPE_BUILTIN_EVMHESMI },\n+  { 0, CODE_FOR_spe_evmhesmia, \"__builtin_spe_evmhesmia\", SPE_BUILTIN_EVMHESMIA },\n+  { 0, CODE_FOR_spe_evmhesmiaaw, \"__builtin_spe_evmhesmiaaw\", SPE_BUILTIN_EVMHESMIAAW },\n+  { 0, CODE_FOR_spe_evmhesmianw, \"__builtin_spe_evmhesmianw\", SPE_BUILTIN_EVMHESMIANW },\n+  { 0, CODE_FOR_spe_evmhessf, \"__builtin_spe_evmhessf\", SPE_BUILTIN_EVMHESSF },\n+  { 0, CODE_FOR_spe_evmhessfa, \"__builtin_spe_evmhessfa\", SPE_BUILTIN_EVMHESSFA },\n+  { 0, CODE_FOR_spe_evmhessfaaw, \"__builtin_spe_evmhessfaaw\", SPE_BUILTIN_EVMHESSFAAW },\n+  { 0, CODE_FOR_spe_evmhessfanw, \"__builtin_spe_evmhessfanw\", SPE_BUILTIN_EVMHESSFANW },\n+  { 0, CODE_FOR_spe_evmhessiaaw, \"__builtin_spe_evmhessiaaw\", SPE_BUILTIN_EVMHESSIAAW },\n+  { 0, CODE_FOR_spe_evmhessianw, \"__builtin_spe_evmhessianw\", SPE_BUILTIN_EVMHESSIANW },\n+  { 0, CODE_FOR_spe_evmheumi, \"__builtin_spe_evmheumi\", SPE_BUILTIN_EVMHEUMI },\n+  { 0, CODE_FOR_spe_evmheumia, \"__builtin_spe_evmheumia\", SPE_BUILTIN_EVMHEUMIA },\n+  { 0, CODE_FOR_spe_evmheumiaaw, \"__builtin_spe_evmheumiaaw\", SPE_BUILTIN_EVMHEUMIAAW },\n+  { 0, CODE_FOR_spe_evmheumianw, \"__builtin_spe_evmheumianw\", SPE_BUILTIN_EVMHEUMIANW },\n+  { 0, CODE_FOR_spe_evmheusiaaw, \"__builtin_spe_evmheusiaaw\", SPE_BUILTIN_EVMHEUSIAAW },\n+  { 0, CODE_FOR_spe_evmheusianw, \"__builtin_spe_evmheusianw\", SPE_BUILTIN_EVMHEUSIANW },\n+  { 0, CODE_FOR_spe_evmhogsmfaa, \"__builtin_spe_evmhogsmfaa\", SPE_BUILTIN_EVMHOGSMFAA },\n+  { 0, CODE_FOR_spe_evmhogsmfan, \"__builtin_spe_evmhogsmfan\", SPE_BUILTIN_EVMHOGSMFAN },\n+  { 0, CODE_FOR_spe_evmhogsmiaa, \"__builtin_spe_evmhogsmiaa\", SPE_BUILTIN_EVMHOGSMIAA },\n+  { 0, CODE_FOR_spe_evmhogsmian, \"__builtin_spe_evmhogsmian\", SPE_BUILTIN_EVMHOGSMIAN },\n+  { 0, CODE_FOR_spe_evmhogumiaa, \"__builtin_spe_evmhogumiaa\", SPE_BUILTIN_EVMHOGUMIAA },\n+  { 0, CODE_FOR_spe_evmhogumian, \"__builtin_spe_evmhogumian\", SPE_BUILTIN_EVMHOGUMIAN },\n+  { 0, CODE_FOR_spe_evmhosmf, \"__builtin_spe_evmhosmf\", SPE_BUILTIN_EVMHOSMF },\n+  { 0, CODE_FOR_spe_evmhosmfa, \"__builtin_spe_evmhosmfa\", SPE_BUILTIN_EVMHOSMFA },\n+  { 0, CODE_FOR_spe_evmhosmfaaw, \"__builtin_spe_evmhosmfaaw\", SPE_BUILTIN_EVMHOSMFAAW },\n+  { 0, CODE_FOR_spe_evmhosmfanw, \"__builtin_spe_evmhosmfanw\", SPE_BUILTIN_EVMHOSMFANW },\n+  { 0, CODE_FOR_spe_evmhosmi, \"__builtin_spe_evmhosmi\", SPE_BUILTIN_EVMHOSMI },\n+  { 0, CODE_FOR_spe_evmhosmia, \"__builtin_spe_evmhosmia\", SPE_BUILTIN_EVMHOSMIA },\n+  { 0, CODE_FOR_spe_evmhosmiaaw, \"__builtin_spe_evmhosmiaaw\", SPE_BUILTIN_EVMHOSMIAAW },\n+  { 0, CODE_FOR_spe_evmhosmianw, \"__builtin_spe_evmhosmianw\", SPE_BUILTIN_EVMHOSMIANW },\n+  { 0, CODE_FOR_spe_evmhossf, \"__builtin_spe_evmhossf\", SPE_BUILTIN_EVMHOSSF },\n+  { 0, CODE_FOR_spe_evmhossfa, \"__builtin_spe_evmhossfa\", SPE_BUILTIN_EVMHOSSFA },\n+  { 0, CODE_FOR_spe_evmhossfaaw, \"__builtin_spe_evmhossfaaw\", SPE_BUILTIN_EVMHOSSFAAW },\n+  { 0, CODE_FOR_spe_evmhossfanw, \"__builtin_spe_evmhossfanw\", SPE_BUILTIN_EVMHOSSFANW },\n+  { 0, CODE_FOR_spe_evmhossiaaw, \"__builtin_spe_evmhossiaaw\", SPE_BUILTIN_EVMHOSSIAAW },\n+  { 0, CODE_FOR_spe_evmhossianw, \"__builtin_spe_evmhossianw\", SPE_BUILTIN_EVMHOSSIANW },\n+  { 0, CODE_FOR_spe_evmhoumi, \"__builtin_spe_evmhoumi\", SPE_BUILTIN_EVMHOUMI },\n+  { 0, CODE_FOR_spe_evmhoumia, \"__builtin_spe_evmhoumia\", SPE_BUILTIN_EVMHOUMIA },\n+  { 0, CODE_FOR_spe_evmhoumiaaw, \"__builtin_spe_evmhoumiaaw\", SPE_BUILTIN_EVMHOUMIAAW },\n+  { 0, CODE_FOR_spe_evmhoumianw, \"__builtin_spe_evmhoumianw\", SPE_BUILTIN_EVMHOUMIANW },\n+  { 0, CODE_FOR_spe_evmhousiaaw, \"__builtin_spe_evmhousiaaw\", SPE_BUILTIN_EVMHOUSIAAW },\n+  { 0, CODE_FOR_spe_evmhousianw, \"__builtin_spe_evmhousianw\", SPE_BUILTIN_EVMHOUSIANW },\n+  { 0, CODE_FOR_spe_evmwhsmf, \"__builtin_spe_evmwhsmf\", SPE_BUILTIN_EVMWHSMF },\n+  { 0, CODE_FOR_spe_evmwhsmfa, \"__builtin_spe_evmwhsmfa\", SPE_BUILTIN_EVMWHSMFA },\n+  { 0, CODE_FOR_spe_evmwhsmi, \"__builtin_spe_evmwhsmi\", SPE_BUILTIN_EVMWHSMI },\n+  { 0, CODE_FOR_spe_evmwhsmia, \"__builtin_spe_evmwhsmia\", SPE_BUILTIN_EVMWHSMIA },\n+  { 0, CODE_FOR_spe_evmwhssf, \"__builtin_spe_evmwhssf\", SPE_BUILTIN_EVMWHSSF },\n+  { 0, CODE_FOR_spe_evmwhssfa, \"__builtin_spe_evmwhssfa\", SPE_BUILTIN_EVMWHSSFA },\n+  { 0, CODE_FOR_spe_evmwhumi, \"__builtin_spe_evmwhumi\", SPE_BUILTIN_EVMWHUMI },\n+  { 0, CODE_FOR_spe_evmwhumia, \"__builtin_spe_evmwhumia\", SPE_BUILTIN_EVMWHUMIA },\n+  { 0, CODE_FOR_spe_evmwlsmf, \"__builtin_spe_evmwlsmf\", SPE_BUILTIN_EVMWLSMF },\n+  { 0, CODE_FOR_spe_evmwlsmfa, \"__builtin_spe_evmwlsmfa\", SPE_BUILTIN_EVMWLSMFA },\n+  { 0, CODE_FOR_spe_evmwlsmfaaw, \"__builtin_spe_evmwlsmfaaw\", SPE_BUILTIN_EVMWLSMFAAW },\n+  { 0, CODE_FOR_spe_evmwlsmfanw, \"__builtin_spe_evmwlsmfanw\", SPE_BUILTIN_EVMWLSMFANW },\n+  { 0, CODE_FOR_spe_evmwlsmiaaw, \"__builtin_spe_evmwlsmiaaw\", SPE_BUILTIN_EVMWLSMIAAW },\n+  { 0, CODE_FOR_spe_evmwlsmianw, \"__builtin_spe_evmwlsmianw\", SPE_BUILTIN_EVMWLSMIANW },\n+  { 0, CODE_FOR_spe_evmwlssf, \"__builtin_spe_evmwlssf\", SPE_BUILTIN_EVMWLSSF },\n+  { 0, CODE_FOR_spe_evmwlssfa, \"__builtin_spe_evmwlssfa\", SPE_BUILTIN_EVMWLSSFA },\n+  { 0, CODE_FOR_spe_evmwlssfaaw, \"__builtin_spe_evmwlssfaaw\", SPE_BUILTIN_EVMWLSSFAAW },\n+  { 0, CODE_FOR_spe_evmwlssfanw, \"__builtin_spe_evmwlssfanw\", SPE_BUILTIN_EVMWLSSFANW },\n+  { 0, CODE_FOR_spe_evmwlssiaaw, \"__builtin_spe_evmwlssiaaw\", SPE_BUILTIN_EVMWLSSIAAW },\n+  { 0, CODE_FOR_spe_evmwlssianw, \"__builtin_spe_evmwlssianw\", SPE_BUILTIN_EVMWLSSIANW },\n+  { 0, CODE_FOR_spe_evmwlumi, \"__builtin_spe_evmwlumi\", SPE_BUILTIN_EVMWLUMI },\n+  { 0, CODE_FOR_spe_evmwlumia, \"__builtin_spe_evmwlumia\", SPE_BUILTIN_EVMWLUMIA },\n+  { 0, CODE_FOR_spe_evmwlumiaaw, \"__builtin_spe_evmwlumiaaw\", SPE_BUILTIN_EVMWLUMIAAW },\n+  { 0, CODE_FOR_spe_evmwlumianw, \"__builtin_spe_evmwlumianw\", SPE_BUILTIN_EVMWLUMIANW },\n+  { 0, CODE_FOR_spe_evmwlusiaaw, \"__builtin_spe_evmwlusiaaw\", SPE_BUILTIN_EVMWLUSIAAW },\n+  { 0, CODE_FOR_spe_evmwlusianw, \"__builtin_spe_evmwlusianw\", SPE_BUILTIN_EVMWLUSIANW },\n+  { 0, CODE_FOR_spe_evmwsmf, \"__builtin_spe_evmwsmf\", SPE_BUILTIN_EVMWSMF },\n+  { 0, CODE_FOR_spe_evmwsmfa, \"__builtin_spe_evmwsmfa\", SPE_BUILTIN_EVMWSMFA },\n+  { 0, CODE_FOR_spe_evmwsmfaa, \"__builtin_spe_evmwsmfaa\", SPE_BUILTIN_EVMWSMFAA },\n+  { 0, CODE_FOR_spe_evmwsmfan, \"__builtin_spe_evmwsmfan\", SPE_BUILTIN_EVMWSMFAN },\n+  { 0, CODE_FOR_spe_evmwsmi, \"__builtin_spe_evmwsmi\", SPE_BUILTIN_EVMWSMI },\n+  { 0, CODE_FOR_spe_evmwsmia, \"__builtin_spe_evmwsmia\", SPE_BUILTIN_EVMWSMIA },\n+  { 0, CODE_FOR_spe_evmwsmiaa, \"__builtin_spe_evmwsmiaa\", SPE_BUILTIN_EVMWSMIAA },\n+  { 0, CODE_FOR_spe_evmwsmian, \"__builtin_spe_evmwsmian\", SPE_BUILTIN_EVMWSMIAN },\n+  { 0, CODE_FOR_spe_evmwssf, \"__builtin_spe_evmwssf\", SPE_BUILTIN_EVMWSSF },\n+  { 0, CODE_FOR_spe_evmwssfa, \"__builtin_spe_evmwssfa\", SPE_BUILTIN_EVMWSSFA },\n+  { 0, CODE_FOR_spe_evmwssfaa, \"__builtin_spe_evmwssfaa\", SPE_BUILTIN_EVMWSSFAA },\n+  { 0, CODE_FOR_spe_evmwssfan, \"__builtin_spe_evmwssfan\", SPE_BUILTIN_EVMWSSFAN },\n+  { 0, CODE_FOR_spe_evmwumi, \"__builtin_spe_evmwumi\", SPE_BUILTIN_EVMWUMI },\n+  { 0, CODE_FOR_spe_evmwumia, \"__builtin_spe_evmwumia\", SPE_BUILTIN_EVMWUMIA },\n+  { 0, CODE_FOR_spe_evmwumiaa, \"__builtin_spe_evmwumiaa\", SPE_BUILTIN_EVMWUMIAA },\n+  { 0, CODE_FOR_spe_evmwumian, \"__builtin_spe_evmwumian\", SPE_BUILTIN_EVMWUMIAN },\n+  { 0, CODE_FOR_spe_evnand, \"__builtin_spe_evnand\", SPE_BUILTIN_EVNAND },\n+  { 0, CODE_FOR_spe_evnor, \"__builtin_spe_evnor\", SPE_BUILTIN_EVNOR },\n+  { 0, CODE_FOR_spe_evor, \"__builtin_spe_evor\", SPE_BUILTIN_EVOR },\n+  { 0, CODE_FOR_spe_evorc, \"__builtin_spe_evorc\", SPE_BUILTIN_EVORC },\n+  { 0, CODE_FOR_spe_evrlw, \"__builtin_spe_evrlw\", SPE_BUILTIN_EVRLW },\n+  { 0, CODE_FOR_spe_evslw, \"__builtin_spe_evslw\", SPE_BUILTIN_EVSLW },\n+  { 0, CODE_FOR_spe_evsrws, \"__builtin_spe_evsrws\", SPE_BUILTIN_EVSRWS },\n+  { 0, CODE_FOR_spe_evsrwu, \"__builtin_spe_evsrwu\", SPE_BUILTIN_EVSRWU },\n+  { 0, CODE_FOR_spe_evsubfw, \"__builtin_spe_evsubfw\", SPE_BUILTIN_EVSUBFW },\n+\n+  /* SPE binary operations expecting a 5-bit unsigned literal.  */\n+  { 0, CODE_FOR_spe_evaddiw, \"__builtin_spe_evaddiw\", SPE_BUILTIN_EVADDIW },\n+\n+  { 0, CODE_FOR_spe_evrlwi, \"__builtin_spe_evrlwi\", SPE_BUILTIN_EVRLWI },\n+  { 0, CODE_FOR_spe_evslwi, \"__builtin_spe_evslwi\", SPE_BUILTIN_EVSLWI },\n+  { 0, CODE_FOR_spe_evsrwis, \"__builtin_spe_evsrwis\", SPE_BUILTIN_EVSRWIS },\n+  { 0, CODE_FOR_spe_evsrwiu, \"__builtin_spe_evsrwiu\", SPE_BUILTIN_EVSRWIU },\n+  { 0, CODE_FOR_spe_evsubifw, \"__builtin_spe_evsubifw\", SPE_BUILTIN_EVSUBIFW },\n+  { 0, CODE_FOR_spe_evmwhssfaa, \"__builtin_spe_evmwhssfaa\", SPE_BUILTIN_EVMWHSSFAA },\n+  { 0, CODE_FOR_spe_evmwhssmaa, \"__builtin_spe_evmwhssmaa\", SPE_BUILTIN_EVMWHSSMAA },\n+  { 0, CODE_FOR_spe_evmwhsmfaa, \"__builtin_spe_evmwhsmfaa\", SPE_BUILTIN_EVMWHSMFAA },\n+  { 0, CODE_FOR_spe_evmwhsmiaa, \"__builtin_spe_evmwhsmiaa\", SPE_BUILTIN_EVMWHSMIAA },\n+  { 0, CODE_FOR_spe_evmwhusiaa, \"__builtin_spe_evmwhusiaa\", SPE_BUILTIN_EVMWHUSIAA },\n+  { 0, CODE_FOR_spe_evmwhumiaa, \"__builtin_spe_evmwhumiaa\", SPE_BUILTIN_EVMWHUMIAA },\n+  { 0, CODE_FOR_spe_evmwhssfan, \"__builtin_spe_evmwhssfan\", SPE_BUILTIN_EVMWHSSFAN },\n+  { 0, CODE_FOR_spe_evmwhssian, \"__builtin_spe_evmwhssian\", SPE_BUILTIN_EVMWHSSIAN },\n+  { 0, CODE_FOR_spe_evmwhsmfan, \"__builtin_spe_evmwhsmfan\", SPE_BUILTIN_EVMWHSMFAN },\n+  { 0, CODE_FOR_spe_evmwhsmian, \"__builtin_spe_evmwhsmian\", SPE_BUILTIN_EVMWHSMIAN },\n+  { 0, CODE_FOR_spe_evmwhusian, \"__builtin_spe_evmwhusian\", SPE_BUILTIN_EVMWHUSIAN },\n+  { 0, CODE_FOR_spe_evmwhumian, \"__builtin_spe_evmwhumian\", SPE_BUILTIN_EVMWHUMIAN },\n+  { 0, CODE_FOR_spe_evmwhgssfaa, \"__builtin_spe_evmwhgssfaa\", SPE_BUILTIN_EVMWHGSSFAA },\n+  { 0, CODE_FOR_spe_evmwhgsmfaa, \"__builtin_spe_evmwhgsmfaa\", SPE_BUILTIN_EVMWHGSMFAA },\n+  { 0, CODE_FOR_spe_evmwhgsmiaa, \"__builtin_spe_evmwhgsmiaa\", SPE_BUILTIN_EVMWHGSMIAA },\n+  { 0, CODE_FOR_spe_evmwhgumiaa, \"__builtin_spe_evmwhgumiaa\", SPE_BUILTIN_EVMWHGUMIAA },\n+  { 0, CODE_FOR_spe_evmwhgssfan, \"__builtin_spe_evmwhgssfan\", SPE_BUILTIN_EVMWHGSSFAN },\n+  { 0, CODE_FOR_spe_evmwhgsmfan, \"__builtin_spe_evmwhgsmfan\", SPE_BUILTIN_EVMWHGSMFAN },\n+  { 0, CODE_FOR_spe_evmwhgsmian, \"__builtin_spe_evmwhgsmian\", SPE_BUILTIN_EVMWHGSMIAN },\n+  { 0, CODE_FOR_spe_evmwhgumian, \"__builtin_spe_evmwhgumian\", SPE_BUILTIN_EVMWHGUMIAN },\n+  { 0, CODE_FOR_spe_brinc, \"__builtin_spe_brinc\", SPE_BUILTIN_BRINC },\n+\n+  /* Place-holder.  Leave as last binary SPE builtin.  */\n+  { 0, CODE_FOR_spe_evxor, \"__builtin_spe_evxor\", SPE_BUILTIN_EVXOR },\n };\n \n /* AltiVec predicates.  */\n@@ -3670,6 +3928,42 @@ static const struct builtin_description_predicates bdesc_altivec_preds[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P }\n };\n \n+/* SPE predicates.  */\n+static struct builtin_description bdesc_spe_predicates[] =\n+{\n+  /* Place-holder.  Leave as first.  */\n+  { 0, CODE_FOR_spe_evcmpeq, \"__builtin_spe_evcmpeq\", SPE_BUILTIN_EVCMPEQ },\n+  { 0, CODE_FOR_spe_evcmpgts, \"__builtin_spe_evcmpgts\", SPE_BUILTIN_EVCMPGTS },\n+  { 0, CODE_FOR_spe_evcmpgtu, \"__builtin_spe_evcmpgtu\", SPE_BUILTIN_EVCMPGTU },\n+  { 0, CODE_FOR_spe_evcmplts, \"__builtin_spe_evcmplts\", SPE_BUILTIN_EVCMPLTS },\n+  { 0, CODE_FOR_spe_evcmpltu, \"__builtin_spe_evcmpltu\", SPE_BUILTIN_EVCMPLTU },\n+  { 0, CODE_FOR_spe_evfscmpeq, \"__builtin_spe_evfscmpeq\", SPE_BUILTIN_EVFSCMPEQ },\n+  { 0, CODE_FOR_spe_evfscmpgt, \"__builtin_spe_evfscmpgt\", SPE_BUILTIN_EVFSCMPGT },\n+  { 0, CODE_FOR_spe_evfscmplt, \"__builtin_spe_evfscmplt\", SPE_BUILTIN_EVFSCMPLT },\n+  { 0, CODE_FOR_spe_evfststeq, \"__builtin_spe_evfststeq\", SPE_BUILTIN_EVFSTSTEQ },\n+  { 0, CODE_FOR_spe_evfststgt, \"__builtin_spe_evfststgt\", SPE_BUILTIN_EVFSTSTGT },\n+  /* Place-holder.  Leave as last.  */\n+  { 0, CODE_FOR_spe_evfststlt, \"__builtin_spe_evfststlt\", SPE_BUILTIN_EVFSTSTLT },\n+};\n+\n+/* SPE evsel predicates.  */\n+static struct builtin_description bdesc_spe_evsel[] =\n+{\n+  /* Place-holder.  Leave as first.  */\n+  { 0, CODE_FOR_spe_evcmpgts, \"__builtin_spe_evsel_gts\", SPE_BUILTIN_EVSEL_CMPGTS },\n+  { 0, CODE_FOR_spe_evcmpgtu, \"__builtin_spe_evsel_gtu\", SPE_BUILTIN_EVSEL_CMPGTU },\n+  { 0, CODE_FOR_spe_evcmplts, \"__builtin_spe_evsel_lts\", SPE_BUILTIN_EVSEL_CMPLTS },\n+  { 0, CODE_FOR_spe_evcmpltu, \"__builtin_spe_evsel_ltu\", SPE_BUILTIN_EVSEL_CMPLTU },\n+  { 0, CODE_FOR_spe_evcmpeq, \"__builtin_spe_evsel_eq\", SPE_BUILTIN_EVSEL_CMPEQ },\n+  { 0, CODE_FOR_spe_evfscmpgt, \"__builtin_spe_evsel_fsgt\", SPE_BUILTIN_EVSEL_FSCMPGT },\n+  { 0, CODE_FOR_spe_evfscmplt, \"__builtin_spe_evsel_fslt\", SPE_BUILTIN_EVSEL_FSCMPLT },\n+  { 0, CODE_FOR_spe_evfscmpeq, \"__builtin_spe_evsel_fseq\", SPE_BUILTIN_EVSEL_FSCMPEQ },\n+  { 0, CODE_FOR_spe_evfststgt, \"__builtin_spe_evsel_fststgt\", SPE_BUILTIN_EVSEL_FSTSTGT },\n+  { 0, CODE_FOR_spe_evfststlt, \"__builtin_spe_evsel_fststlt\", SPE_BUILTIN_EVSEL_FSTSTLT },\n+  /* Place-holder.  Leave as last.  */\n+  { 0, CODE_FOR_spe_evfststeq, \"__builtin_spe_evsel_fststeq\", SPE_BUILTIN_EVSEL_FSTSTEQ },\n+};\n+\n /* ABS* opreations.  */\n \n static const struct builtin_description bdesc_abs[] =\n@@ -3686,7 +3980,7 @@ static const struct builtin_description bdesc_abs[] =\n /* Simple unary operations: VECb = foo (unsigned literal) or VECb =\n    foo (VECa).  */\n \n-static const struct builtin_description bdesc_1arg[] =\n+static struct builtin_description bdesc_1arg[] =\n {\n   { MASK_ALTIVEC, CODE_FOR_altivec_vexptefp, \"__builtin_altivec_vexptefp\", ALTIVEC_BUILTIN_VEXPTEFP },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vlogefp, \"__builtin_altivec_vlogefp\", ALTIVEC_BUILTIN_VLOGEFP },\n@@ -3705,6 +3999,42 @@ static const struct builtin_description bdesc_1arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vupklsb, \"__builtin_altivec_vupklsb\", ALTIVEC_BUILTIN_VUPKLSB },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vupklpx, \"__builtin_altivec_vupklpx\", ALTIVEC_BUILTIN_VUPKLPX },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vupklsh, \"__builtin_altivec_vupklsh\", ALTIVEC_BUILTIN_VUPKLSH },\n+\n+  /* The SPE unary builtins must start with SPE_BUILTIN_EVABS and\n+     end with SPE_BUILTIN_EVSUBFUSIAAW.  */\n+  { 0, CODE_FOR_spe_evabs, \"__builtin_spe_evabs\", SPE_BUILTIN_EVABS },\n+  { 0, CODE_FOR_spe_evaddsmiaaw, \"__builtin_spe_evaddsmiaaw\", SPE_BUILTIN_EVADDSMIAAW },\n+  { 0, CODE_FOR_spe_evaddssiaaw, \"__builtin_spe_evaddssiaaw\", SPE_BUILTIN_EVADDSSIAAW },\n+  { 0, CODE_FOR_spe_evaddumiaaw, \"__builtin_spe_evaddumiaaw\", SPE_BUILTIN_EVADDUMIAAW },\n+  { 0, CODE_FOR_spe_evaddusiaaw, \"__builtin_spe_evaddusiaaw\", SPE_BUILTIN_EVADDUSIAAW },\n+  { 0, CODE_FOR_spe_evcntlsw, \"__builtin_spe_evcntlsw\", SPE_BUILTIN_EVCNTLSW },\n+  { 0, CODE_FOR_spe_evcntlzw, \"__builtin_spe_evcntlzw\", SPE_BUILTIN_EVCNTLZW },\n+  { 0, CODE_FOR_spe_evextsb, \"__builtin_spe_evextsb\", SPE_BUILTIN_EVEXTSB },\n+  { 0, CODE_FOR_spe_evextsh, \"__builtin_spe_evextsh\", SPE_BUILTIN_EVEXTSH },\n+  { 0, CODE_FOR_spe_evfsabs, \"__builtin_spe_evfsabs\", SPE_BUILTIN_EVFSABS },\n+  { 0, CODE_FOR_spe_evfscfsf, \"__builtin_spe_evfscfsf\", SPE_BUILTIN_EVFSCFSF },\n+  { 0, CODE_FOR_spe_evfscfsi, \"__builtin_spe_evfscfsi\", SPE_BUILTIN_EVFSCFSI },\n+  { 0, CODE_FOR_spe_evfscfuf, \"__builtin_spe_evfscfuf\", SPE_BUILTIN_EVFSCFUF },\n+  { 0, CODE_FOR_spe_evfscfui, \"__builtin_spe_evfscfui\", SPE_BUILTIN_EVFSCFUI },\n+  { 0, CODE_FOR_spe_evfsctsf, \"__builtin_spe_evfsctsf\", SPE_BUILTIN_EVFSCTSF },\n+  { 0, CODE_FOR_spe_evfsctsi, \"__builtin_spe_evfsctsi\", SPE_BUILTIN_EVFSCTSI },\n+  { 0, CODE_FOR_spe_evfsctsiz, \"__builtin_spe_evfsctsiz\", SPE_BUILTIN_EVFSCTSIZ },\n+  { 0, CODE_FOR_spe_evfsctuf, \"__builtin_spe_evfsctuf\", SPE_BUILTIN_EVFSCTUF },\n+  { 0, CODE_FOR_spe_evfsctui, \"__builtin_spe_evfsctui\", SPE_BUILTIN_EVFSCTUI },\n+  { 0, CODE_FOR_spe_evfsctuiz, \"__builtin_spe_evfsctuiz\", SPE_BUILTIN_EVFSCTUIZ },\n+  { 0, CODE_FOR_spe_evfsnabs, \"__builtin_spe_evfsnabs\", SPE_BUILTIN_EVFSNABS },\n+  { 0, CODE_FOR_spe_evfsneg, \"__builtin_spe_evfsneg\", SPE_BUILTIN_EVFSNEG },\n+  { 0, CODE_FOR_spe_evmra, \"__builtin_spe_evmra\", SPE_BUILTIN_EVMRA },\n+  { 0, CODE_FOR_spe_evneg, \"__builtin_spe_evneg\", SPE_BUILTIN_EVNEG },\n+  { 0, CODE_FOR_spe_evrndw, \"__builtin_spe_evrndw\", SPE_BUILTIN_EVRNDW },\n+  { 0, CODE_FOR_spe_evsubfsmiaaw, \"__builtin_spe_evsubfsmiaaw\", SPE_BUILTIN_EVSUBFSMIAAW },\n+  { 0, CODE_FOR_spe_evsubfssiaaw, \"__builtin_spe_evsubfssiaaw\", SPE_BUILTIN_EVSUBFSSIAAW },\n+  { 0, CODE_FOR_spe_evsubfumiaaw, \"__builtin_spe_evsubfumiaaw\", SPE_BUILTIN_EVSUBFUMIAAW },\n+  { 0, CODE_FOR_spe_evsplatfi, \"__builtin_spe_evsplatfi\", SPE_BUILTIN_EVSPLATFI },\n+  { 0, CODE_FOR_spe_evsplati, \"__builtin_spe_evsplati\", SPE_BUILTIN_EVSPLATI },\n+\n+  /* Place-holder.  Leave as last unary SPE builtin.  */\n+  { 0, CODE_FOR_spe_evsubfusiaaw, \"__builtin_spe_evsubfusiaaw\", SPE_BUILTIN_EVSUBFUSIAAW },\n };\n \n static rtx\n@@ -3729,6 +4059,8 @@ rs6000_expand_unop_builtin (icode, arglist, target)\n     case CODE_FOR_altivec_vspltisb:\n     case CODE_FOR_altivec_vspltish:\n     case CODE_FOR_altivec_vspltisw:\n+    case CODE_FOR_spe_evsplatfi:\n+    case CODE_FOR_spe_evsplati:\n       if (GET_CODE (op0) != CONST_INT\n \t  || INTVAL (op0) > 0x1f\n \t  || INTVAL (op0) < -0x1f)\n@@ -3821,6 +4153,22 @@ rs6000_expand_binop_builtin (icode, arglist, target)\n     case CODE_FOR_altivec_vspltb:\n     case CODE_FOR_altivec_vsplth:\n     case CODE_FOR_altivec_vspltw:\n+    case CODE_FOR_spe_evaddiw:\n+    case CODE_FOR_spe_evldd:\n+    case CODE_FOR_spe_evldh:\n+    case CODE_FOR_spe_evldw:\n+    case CODE_FOR_spe_evlhhesplat:\n+    case CODE_FOR_spe_evlhhossplat:\n+    case CODE_FOR_spe_evlhhousplat:\n+    case CODE_FOR_spe_evlwhe:\n+    case CODE_FOR_spe_evlwhos:\n+    case CODE_FOR_spe_evlwhou:\n+    case CODE_FOR_spe_evlwhsplat:\n+    case CODE_FOR_spe_evlwwsplat:\n+    case CODE_FOR_spe_evrlwi:\n+    case CODE_FOR_spe_evslwi:\n+    case CODE_FOR_spe_evsrwis:\n+    case CODE_FOR_spe_evsrwiu:\n       if (TREE_CODE (arg1) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n \t{\n@@ -4152,7 +4500,7 @@ altivec_expand_dst_builtin (exp, target, expandedp)\n   enum machine_mode mode0, mode1, mode2;\n   rtx pat, op0, op1, op2;\n   struct builtin_description *d;\n-  int i;\n+  size_t i;\n \n   *expandedp = false;\n \n@@ -4352,6 +4700,328 @@ altivec_expand_builtin (exp, target, expandedp)\n   return NULL_RTX;\n }\n \n+/* Binops that need to be initialized manually, but can be expanded\n+   automagically by rs6000_expand_binop_builtin.  */\n+static struct builtin_description bdesc_2arg_spe[] =\n+{\n+  { 0, CODE_FOR_spe_evlddx, \"__builtin_spe_evlddx\", SPE_BUILTIN_EVLDDX },\n+  { 0, CODE_FOR_spe_evldwx, \"__builtin_spe_evldwx\", SPE_BUILTIN_EVLDWX },\n+  { 0, CODE_FOR_spe_evldhx, \"__builtin_spe_evldhx\", SPE_BUILTIN_EVLDHX },\n+  { 0, CODE_FOR_spe_evlwhex, \"__builtin_spe_evlwhex\", SPE_BUILTIN_EVLWHEX },\n+  { 0, CODE_FOR_spe_evlwhoux, \"__builtin_spe_evlwhoux\", SPE_BUILTIN_EVLWHOUX },\n+  { 0, CODE_FOR_spe_evlwhosx, \"__builtin_spe_evlwhosx\", SPE_BUILTIN_EVLWHOSX },\n+  { 0, CODE_FOR_spe_evlwwsplatx, \"__builtin_spe_evlwwsplatx\", SPE_BUILTIN_EVLWWSPLATX },\n+  { 0, CODE_FOR_spe_evlwhsplatx, \"__builtin_spe_evlwhsplatx\", SPE_BUILTIN_EVLWHSPLATX },\n+  { 0, CODE_FOR_spe_evlhhesplatx, \"__builtin_spe_evlhhesplatx\", SPE_BUILTIN_EVLHHESPLATX },\n+  { 0, CODE_FOR_spe_evlhhousplatx, \"__builtin_spe_evlhhousplatx\", SPE_BUILTIN_EVLHHOUSPLATX },\n+  { 0, CODE_FOR_spe_evlhhossplatx, \"__builtin_spe_evlhhossplatx\", SPE_BUILTIN_EVLHHOSSPLATX },\n+  { 0, CODE_FOR_spe_evldd, \"__builtin_spe_evldd\", SPE_BUILTIN_EVLDD },\n+  { 0, CODE_FOR_spe_evldw, \"__builtin_spe_evldw\", SPE_BUILTIN_EVLDW },\n+  { 0, CODE_FOR_spe_evldh, \"__builtin_spe_evldh\", SPE_BUILTIN_EVLDH },\n+  { 0, CODE_FOR_spe_evlwhe, \"__builtin_spe_evlwhe\", SPE_BUILTIN_EVLWHE },\n+  { 0, CODE_FOR_spe_evlwhou, \"__builtin_spe_evlwhou\", SPE_BUILTIN_EVLWHOU },\n+  { 0, CODE_FOR_spe_evlwhos, \"__builtin_spe_evlwhos\", SPE_BUILTIN_EVLWHOS },\n+  { 0, CODE_FOR_spe_evlwwsplat, \"__builtin_spe_evlwwsplat\", SPE_BUILTIN_EVLWWSPLAT },\n+  { 0, CODE_FOR_spe_evlwhsplat, \"__builtin_spe_evlwhsplat\", SPE_BUILTIN_EVLWHSPLAT },\n+  { 0, CODE_FOR_spe_evlhhesplat, \"__builtin_spe_evlhhesplat\", SPE_BUILTIN_EVLHHESPLAT },\n+  { 0, CODE_FOR_spe_evlhhousplat, \"__builtin_spe_evlhhousplat\", SPE_BUILTIN_EVLHHOUSPLAT },\n+  { 0, CODE_FOR_spe_evlhhossplat, \"__builtin_spe_evlhhossplat\", SPE_BUILTIN_EVLHHOSSPLAT }\n+};\n+\n+/* Expand the builtin in EXP and store the result in TARGET.  Store\n+   true in *EXPANDEDP if we found a builtin to expand.\n+\n+   This expands the SPE builtins that are not simple unary and binary\n+   operations.  */\n+static rtx\n+spe_expand_builtin (exp, target, expandedp)\n+     tree exp;\n+     rtx target;\n+     bool *expandedp;\n+{\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg1, arg0;\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum insn_code icode;\n+  enum machine_mode tmode, mode0;\n+  rtx pat, op0;\n+  struct builtin_description *d;\n+  size_t i;\n+\n+  *expandedp = true;\n+\n+  /* Syntax check for a 5-bit unsigned immediate.  */\n+  switch (fcode)\n+    {\n+    case SPE_BUILTIN_EVSTDD:\n+    case SPE_BUILTIN_EVSTDH:\n+    case SPE_BUILTIN_EVSTDW:\n+    case SPE_BUILTIN_EVSTWHE:\n+    case SPE_BUILTIN_EVSTWHO:\n+    case SPE_BUILTIN_EVSTWWE:\n+    case SPE_BUILTIN_EVSTWWO:\n+      arg1 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n+\t{\n+\t  error (\"argument 2 must be a 5-bit unsigned literal\");\n+\t  return const0_rtx;\n+\t}\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  d = (struct builtin_description *) bdesc_2arg_spe;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_2arg_spe); ++i, ++d)\n+    if (d->code == fcode)\n+      return rs6000_expand_binop_builtin (d->icode, arglist, target);\n+\n+  d = (struct builtin_description *) bdesc_spe_predicates;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_spe_predicates); ++i, ++d)\n+    if (d->code == fcode)\n+      return spe_expand_predicate_builtin (d->icode, arglist, target);\n+\n+  d = (struct builtin_description *) bdesc_spe_evsel;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_spe_evsel); ++i, ++d)\n+    if (d->code == fcode)\n+      return spe_expand_evsel_builtin (d->icode, arglist, target);\n+\n+  switch (fcode)\n+    {\n+    case SPE_BUILTIN_EVSTDDX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstddx, arglist);\n+    case SPE_BUILTIN_EVSTDHX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstdhx, arglist);\n+    case SPE_BUILTIN_EVSTDWX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstdwx, arglist);\n+    case SPE_BUILTIN_EVSTWHEX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwhex, arglist);\n+    case SPE_BUILTIN_EVSTWHOX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwhox, arglist);\n+    case SPE_BUILTIN_EVSTWWEX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwwex, arglist);\n+    case SPE_BUILTIN_EVSTWWOX:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwwox, arglist);\n+    case SPE_BUILTIN_EVSTDD:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstdd, arglist);\n+    case SPE_BUILTIN_EVSTDH:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstdh, arglist);\n+    case SPE_BUILTIN_EVSTDW:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstdw, arglist);\n+    case SPE_BUILTIN_EVSTWHE:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwhe, arglist);\n+    case SPE_BUILTIN_EVSTWHO:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwho, arglist);\n+    case SPE_BUILTIN_EVSTWWE:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwwe, arglist);\n+    case SPE_BUILTIN_EVSTWWO:\n+      return altivec_expand_stv_builtin (CODE_FOR_spe_evstwwo, arglist);\n+    case SPE_BUILTIN_MFSPEFSCR:\n+      icode = CODE_FOR_spe_mfspefscr;\n+      tmode = insn_data[icode].operand[0].mode;\n+\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+      \n+      pat = GEN_FCN (icode) (target);\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+    case SPE_BUILTIN_MTSPEFSCR:\n+      icode = CODE_FOR_spe_mtspefscr;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+\n+      if (arg0 == error_mark_node)\n+\treturn const0_rtx;\n+\n+      if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+\n+      pat = GEN_FCN (icode) (op0);\n+      if (pat)\n+\temit_insn (pat);\n+      return NULL_RTX;\n+    default:\n+      break;\n+    }\n+\n+  *expandedp = false;\n+  return NULL_RTX;\n+}\n+\n+static rtx\n+spe_expand_predicate_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat, scratch, tmp;\n+  tree form = TREE_VALUE (arglist);\n+  tree arg0 = TREE_VALUE (TREE_CHAIN (arglist));\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+  int form_int;\n+  enum rtx_code code;\n+\n+  if (TREE_CODE (form) != INTEGER_CST)\n+    {\n+      error (\"argument 1 of __builtin_spe_predicate must be a constant\");\n+      return const0_rtx;\n+    }\n+  else\n+    form_int = TREE_INT_CST_LOW (form);\n+\n+  if (mode0 != mode1)\n+    abort ();\n+\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != SImode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, SImode))\n+    target = gen_reg_rtx (SImode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  scratch = gen_reg_rtx (CCmode);\n+\n+  pat = GEN_FCN (icode) (scratch, op0, op1);\n+  if (! pat)\n+    return const0_rtx;\n+  emit_insn (pat);\n+\n+  /* There are 4 variants for each predicate: _any_, _all_, _upper_,\n+     _lower_.  We use one compare, but look in different bits of the\n+     CR for each variant.\n+\n+     There are 2 elements in each SPE simd type (upper/lower).  The CR\n+     bits are set as follows:\n+\n+     BIT0  | BIT 1  | BIT 2   | BIT 3\n+     U     |   L    | (U | L) | (U & L)\n+\n+     So, for an \"all\" relationship, BIT 3 would be set.\n+     For an \"any\" relationship, BIT 2 would be set.  Etc.\n+\n+     Following traditional nomenclature, these bits map to:\n+\n+     BIT0  | BIT 1  | BIT 2   | BIT 3\n+     LT    | GT     | EQ      | OV\n+\n+     Later, we will generate rtl to look in the LT/EQ/EQ/OV bits.\n+  */\n+\n+  switch (form_int)\n+    {\n+      /* All variant.  OV bit.  */\n+    case 0:\n+      /* We need to get to the OV bit, which is the ORDERED bit.  We\n+\t could generate (ordered:SI (reg:CC xx) (const_int 0)), but\n+\t that's ugly and will trigger a validate_condition_mode abort.\n+\t So let's just use another pattern.  */\n+      emit_insn (gen_move_from_CR_ov_bit (target, scratch));\n+      return target;\n+      /* Any variant.  EQ bit.  */\n+    case 1:\n+      code = EQ;\n+      break;\n+      /* Upper variant.  LT bit.  */\n+    case 2:\n+      code = LT;\n+      break;\n+      /* Lower variant.  GT bit.  */\n+    case 3:\n+      code = GT;\n+      break;\n+    default:\n+      error (\"argument 1 of __builtin_spe_predicate is out of range\");\n+      return const0_rtx;\n+    }\n+\n+  tmp = gen_rtx_fmt_ee (code, SImode, scratch, const0_rtx);\n+  emit_move_insn (target, tmp);\n+\n+  return target;\n+}\n+\n+/* The evsel builtins look like this:\n+\n+     e = __builtin_spe_evsel_OP (a, b, c, d);\n+\n+   and work like this:\n+\n+     e[upper] = a[upper] *OP* b[upper] ? c[upper] : d[upper];\n+     e[lower] = a[lower] *OP* b[lower] ? c[lower] : d[lower];\n+*/\n+\n+static rtx\n+spe_expand_evsel_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat, scratch;\n+  tree arg0 = TREE_VALUE (arglist);\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  tree arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  rtx op3 = expand_expr (arg3, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+\n+  if (mode0 != mode1)\n+    abort ();\n+\n+  if (arg0 == error_mark_node || arg1 == error_mark_node\n+      || arg2 == error_mark_node || arg3 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != mode0\n+      || ! (*insn_data[icode].operand[0].predicate) (target, mode0))\n+    target = gen_reg_rtx (mode0);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode0, op1);\n+  if (! (*insn_data[icode].operand[1].predicate) (op2, mode1))\n+    op2 = copy_to_mode_reg (mode0, op2);\n+  if (! (*insn_data[icode].operand[1].predicate) (op3, mode1))\n+    op3 = copy_to_mode_reg (mode0, op3);\n+\n+  /* Generate the compare.  */\n+  scratch = gen_reg_rtx (CCmode);\n+  pat = GEN_FCN (icode) (scratch, op0, op1);\n+  if (! pat)\n+    return const0_rtx;\n+  emit_insn (pat);\n+\n+  if (mode0 == V2SImode)\n+    emit_insn (gen_spe_evsel (target, op2, op3, scratch));\n+  else\n+    emit_insn (gen_spe_evsel_fs (target, op2, op3, scratch));\n+\n+  return target;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -4378,6 +5048,13 @@ rs6000_expand_builtin (exp, target, subtarget, mode, ignore)\n     {\n       ret = altivec_expand_builtin (exp, target, &success);\n \n+      if (success)\n+\treturn ret;\n+    }\n+  if (TARGET_SPE)\n+    {\n+      ret = spe_expand_builtin (exp, target, &success);\n+\n       if (success)\n \treturn ret;\n     }\n@@ -4407,80 +5084,309 @@ rs6000_expand_builtin (exp, target, subtarget, mode, ignore)\n static void\n rs6000_init_builtins ()\n {\n+  if (TARGET_SPE)\n+    spe_init_builtins ();\n   if (TARGET_ALTIVEC)\n     altivec_init_builtins ();\n+  rs6000_common_init_builtins ();\n }\n \n+/* Search through a set of builtins and enable the mask bits.\n+   DESC is an array of builtins.\n+   SIZE is the totaly number of builtins.\n+   START is the builtin enum at which to start.\n+   END is the builtin enum at which to end.  */\n static void\n-altivec_init_builtins (void)\n+enable_mask_for_builtins (desc, size, start, end)\n+     struct builtin_description *desc;\n+     int size;\n+     enum rs6000_builtins start, end;\n+{\n+  int i;\n+\n+  for (i = 0; i < size; ++i)\n+    if (desc[i].code == start)\n+      break;\n+\n+  if (i == size)\n+    return;\n+\n+  for (; i < size; ++i)\n+    {\n+      /* Flip all the bits on.  */\n+      desc[i].mask = target_flags;\n+      if (desc[i].code == end)\n+\tbreak;\n+    }\n+}\n+\n+static void\n+spe_init_builtins (void)\n {\n+  tree endlink = void_list_node;\n+  tree puint_type_node = build_pointer_type (unsigned_type_node);\n+  tree pushort_type_node = build_pointer_type (short_unsigned_type_node);\n+  tree pv2si_type_node = build_pointer_type (V2SI_type_node);\n   struct builtin_description *d;\n-  struct builtin_description_predicates *dp;\n   size_t i;\n \n-  tree pint_type_node = build_pointer_type (integer_type_node);\n-  tree pvoid_type_node = build_pointer_type (void_type_node);\n-  tree pshort_type_node = build_pointer_type (short_integer_type_node);\n-  tree pchar_type_node = build_pointer_type (char_type_node);\n-  tree pfloat_type_node = build_pointer_type (float_type_node);\n+  tree v2si_ftype_4_v2si\n+    = build_function_type\n+    (V2SI_type_node,\n+     tree_cons (NULL_TREE, V2SI_type_node,\n+\t\ttree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t\t\t endlink)))));\n+\n+  tree v2sf_ftype_4_v2sf\n+    = build_function_type\n+    (V2SF_type_node,\n+     tree_cons (NULL_TREE, V2SF_type_node,\n+\t\ttree_cons (NULL_TREE, V2SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2SF_type_node,\n+\t\t\t\t\t\t endlink)))));\n+\n+  tree int_ftype_int_v2si_v2si\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\ttree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      endlink))));\n+\n+  tree int_ftype_int_v2sf_v2sf\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\ttree_cons (NULL_TREE, V2SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SF_type_node,\n+\t\t\t\t      endlink))));\n+\n+  tree void_ftype_v2si_puint_int\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, puint_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree void_ftype_v2si_puint_char\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, puint_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree void_ftype_v2si_pv2si_int\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, pv2si_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree void_ftype_v2si_pv2si_char\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, pv2si_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  tree void_ftype_int\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, integer_type_node, endlink));\n+\n+  tree int_ftype_void\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, void_type_node, endlink));\n+\n+  tree v2si_ftype_pv2si_int\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pv2si_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v2si_ftype_puint_int\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, puint_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  tree v2si_ftype_pushort_int\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pushort_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  /* The initialization of the simple binary and unary builtins is\n+     done in rs6000_common_init_builtins, but we have to enable the\n+     mask bits here manually because we have run out of `target_flags'\n+     bits.  We really need to redesign this mask business.  */\n+\n+  enable_mask_for_builtins ((struct builtin_description *) bdesc_2arg,\n+\t\t\t    ARRAY_SIZE (bdesc_2arg),\n+\t\t\t    SPE_BUILTIN_EVADDW,\n+\t\t\t    SPE_BUILTIN_EVXOR);\n+  enable_mask_for_builtins ((struct builtin_description *) bdesc_1arg,\n+\t\t\t    ARRAY_SIZE (bdesc_1arg),\n+\t\t\t    SPE_BUILTIN_EVABS,\n+\t\t\t    SPE_BUILTIN_EVSUBFUSIAAW);\n+  enable_mask_for_builtins ((struct builtin_description *) bdesc_spe_predicates,\n+\t\t\t    ARRAY_SIZE (bdesc_spe_predicates),\n+\t\t\t    SPE_BUILTIN_EVCMPEQ,\n+\t\t\t    SPE_BUILTIN_EVFSTSTLT);\n+  enable_mask_for_builtins ((struct builtin_description *) bdesc_spe_evsel,\n+\t\t\t    ARRAY_SIZE (bdesc_spe_evsel),\n+\t\t\t    SPE_BUILTIN_EVSEL_CMPGTS,\n+\t\t\t    SPE_BUILTIN_EVSEL_FSTSTEQ);\n+\n+  /* Initialize irregular SPE builtins.  */\n+  \n+  def_builtin (target_flags, \"__builtin_spe_mtspefscr\", void_ftype_int, SPE_BUILTIN_MTSPEFSCR);\n+  def_builtin (target_flags, \"__builtin_spe_mfspefscr\", int_ftype_void, SPE_BUILTIN_MFSPEFSCR);\n+  def_builtin (target_flags, \"__builtin_spe_evstddx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDDX);\n+  def_builtin (target_flags, \"__builtin_spe_evstdhx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDHX);\n+  def_builtin (target_flags, \"__builtin_spe_evstdwx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDWX);\n+  def_builtin (target_flags, \"__builtin_spe_evstwhex\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWHEX);\n+  def_builtin (target_flags, \"__builtin_spe_evstwhox\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWHOX);\n+  def_builtin (target_flags, \"__builtin_spe_evstwwex\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWWEX);\n+  def_builtin (target_flags, \"__builtin_spe_evstwwox\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWWOX);\n+  def_builtin (target_flags, \"__builtin_spe_evstdd\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDD);\n+  def_builtin (target_flags, \"__builtin_spe_evstdh\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDH);\n+  def_builtin (target_flags, \"__builtin_spe_evstdw\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDW);\n+  def_builtin (target_flags, \"__builtin_spe_evstwhe\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWHE);\n+  def_builtin (target_flags, \"__builtin_spe_evstwho\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWHO);\n+  def_builtin (target_flags, \"__builtin_spe_evstwwe\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWWE);\n+  def_builtin (target_flags, \"__builtin_spe_evstwwo\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWWO);\n+\n+  /* Loads.  */\n+  def_builtin (target_flags, \"__builtin_spe_evlddx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDDX);\n+  def_builtin (target_flags, \"__builtin_spe_evldwx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDWX);\n+  def_builtin (target_flags, \"__builtin_spe_evldhx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDHX);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhex\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHEX);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhoux\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOUX);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhosx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOSX);\n+  def_builtin (target_flags, \"__builtin_spe_evlwwsplatx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWWSPLATX);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhsplatx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHSPLATX);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhesplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHESPLATX);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhousplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOUSPLATX);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhossplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOSSPLATX);\n+  def_builtin (target_flags, \"__builtin_spe_evldd\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDD);\n+  def_builtin (target_flags, \"__builtin_spe_evldw\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDW);\n+  def_builtin (target_flags, \"__builtin_spe_evldh\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDH);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhesplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHESPLAT);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhossplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOSSPLAT);\n+  def_builtin (target_flags, \"__builtin_spe_evlhhousplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOUSPLAT);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhe\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHE);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhos\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOS);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhou\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOU);\n+  def_builtin (target_flags, \"__builtin_spe_evlwhsplat\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHSPLAT);\n+  def_builtin (target_flags, \"__builtin_spe_evlwwsplat\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWWSPLAT);\n+\n+  /* Predicates.  */\n+  d = (struct builtin_description *) bdesc_spe_predicates;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_spe_predicates); ++i, d++)\n+    {\n+      tree type;\n \n-  tree v4sf_ftype_v4sf_v4sf_v16qi\n-    = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4SF_type_node, V4SF_type_node,\n-\t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v4si_ftype_v4si_v4si_v16qi\n-    = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SI_type_node, V4SI_type_node,\n-\t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v8hi_ftype_v8hi_v8hi_v16qi\n-    = build_function_type_list (V8HI_type_node,\n-\t\t\t\tV8HI_type_node, V8HI_type_node,\n-\t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v16qi_ftype_v16qi_v16qi_v16qi\n-    = build_function_type_list (V16QI_type_node,\n-\t\t\t\tV16QI_type_node, V16QI_type_node,\n-\t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v4si_ftype_char\n-    = build_function_type_list (V4SI_type_node, char_type_node, NULL_TREE);\n-  tree v8hi_ftype_char\n-    = build_function_type_list (V8HI_type_node, char_type_node, NULL_TREE);\n-  tree v16qi_ftype_char\n-    = build_function_type_list (V16QI_type_node, char_type_node, NULL_TREE);\n-  tree v4sf_ftype_v4sf\n-    = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n-  tree v4si_ftype_pint\n-    = build_function_type_list (V4SI_type_node, pint_type_node, NULL_TREE);\n-  tree v8hi_ftype_pshort\n-    = build_function_type_list (V8HI_type_node, pshort_type_node, NULL_TREE);\n-  tree v16qi_ftype_pchar\n-    = build_function_type_list (V16QI_type_node, pchar_type_node, NULL_TREE);\n+      switch (insn_data[d->icode].operand[1].mode)\n+\t{\n+\tcase V2SImode:\n+\t  type = int_ftype_int_v2si_v2si;\n+\t  break;\n+\tcase V2SFmode:\n+\t  type = int_ftype_int_v2sf_v2sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+\n+  /* Evsel predicates.  */\n+  d = (struct builtin_description *) bdesc_spe_evsel;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_spe_evsel); ++i, d++)\n+    {\n+      tree type;\n+\n+      switch (insn_data[d->icode].operand[1].mode)\n+\t{\n+\tcase V2SImode:\n+\t  type = v2si_ftype_4_v2si;\n+\t  break;\n+\tcase V2SFmode:\n+\t  type = v2sf_ftype_4_v2sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+}\n+\n+static void\n+altivec_init_builtins (void)\n+{\n+  struct builtin_description *d;\n+  struct builtin_description_predicates *dp;\n+  size_t i;\n+  tree pfloat_type_node = build_pointer_type (float_type_node);\n+  tree pint_type_node = build_pointer_type (integer_type_node);\n+  tree pshort_type_node = build_pointer_type (short_integer_type_node);\n+  tree pchar_type_node = build_pointer_type (char_type_node);\n+\n+  tree pvoid_type_node = build_pointer_type (void_type_node);\n+\n+  tree int_ftype_int_v4si_v4si\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, V4SI_type_node,\n+\t\t\t\tV4SI_type_node, NULL_TREE);\n   tree v4sf_ftype_pfloat\n     = build_function_type_list (V4SF_type_node, pfloat_type_node, NULL_TREE);\n-  tree v8hi_ftype_v16qi\n-    = build_function_type_list (V8HI_type_node, V16QI_type_node, NULL_TREE);\n-  tree void_ftype_pvoid_int_char\n+  tree void_ftype_pfloat_v4sf\n     = build_function_type_list (void_type_node,\n-\t\t\t\tpvoid_type_node, integer_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n-  tree void_ftype_pint_v4si\n+\t\t\t\tpfloat_type_node, V4SF_type_node, NULL_TREE);\n+  tree v4si_ftype_pint\n+    = build_function_type_list (V4SI_type_node, pint_type_node, NULL_TREE);  tree void_ftype_pint_v4si\n     = build_function_type_list (void_type_node,\n \t\t\t\tpint_type_node, V4SI_type_node, NULL_TREE);\n+  tree v8hi_ftype_pshort\n+    = build_function_type_list (V8HI_type_node, pshort_type_node, NULL_TREE);\n   tree void_ftype_pshort_v8hi\n     = build_function_type_list (void_type_node,\n \t\t\t\tpshort_type_node, V8HI_type_node, NULL_TREE);\n+  tree v16qi_ftype_pchar\n+    = build_function_type_list (V16QI_type_node, pchar_type_node, NULL_TREE);\n   tree void_ftype_pchar_v16qi\n     = build_function_type_list (void_type_node,\n \t\t\t\tpchar_type_node, V16QI_type_node, NULL_TREE);\n-  tree void_ftype_pfloat_v4sf\n-    = build_function_type_list (void_type_node,\n-\t\t\t\tpfloat_type_node, V4SF_type_node, NULL_TREE);\n   tree void_ftype_v4si\n     = build_function_type_list (void_type_node, V4SI_type_node, NULL_TREE);\n+  tree v8hi_ftype_void\n+    = build_function_type (V8HI_type_node, void_list_node);\n+  tree void_ftype_void\n+    = build_function_type (void_type_node, void_list_node);\n+  tree void_ftype_qi\n+    = build_function_type_list (void_type_node, char_type_node, NULL_TREE);\n+  tree v16qi_ftype_int_pvoid\n+    = build_function_type_list (V16QI_type_node,\n+\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n+  tree v8hi_ftype_int_pvoid\n+    = build_function_type_list (V8HI_type_node,\n+\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n+  tree v4si_ftype_int_pvoid\n+    = build_function_type_list (V4SI_type_node,\n+\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n   tree void_ftype_v4si_int_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV4SI_type_node, integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n-\n   tree void_ftype_v16qi_int_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV16QI_type_node, integer_type_node,\n@@ -4489,12 +5395,198 @@ altivec_init_builtins (void)\n     = build_function_type_list (void_type_node,\n \t\t\t\tV8HI_type_node, integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n-  tree void_ftype_qi\n-    = build_function_type_list (void_type_node, char_type_node, NULL_TREE);\n-  tree void_ftype_void\n-    = build_function_type (void_type_node, void_list_node);\n-  tree v8hi_ftype_void\n-    = build_function_type (V8HI_type_node, void_list_node);\n+  tree int_ftype_int_v8hi_v8hi\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, V8HI_type_node,\n+\t\t\t\tV8HI_type_node, NULL_TREE);\n+  tree int_ftype_int_v16qi_v16qi\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, V16QI_type_node,\n+\t\t\t\tV16QI_type_node, NULL_TREE);\n+  tree int_ftype_int_v4sf_v4sf\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, V4SF_type_node,\n+\t\t\t\tV4SF_type_node, NULL_TREE);\n+  tree v4si_ftype_v4si\n+    = build_function_type_list (V4SI_type_node, V4SI_type_node, NULL_TREE);\n+  tree v8hi_ftype_v8hi\n+    = build_function_type_list (V8HI_type_node, V8HI_type_node, NULL_TREE);\n+  tree v16qi_ftype_v16qi\n+    = build_function_type_list (V16QI_type_node, V16QI_type_node, NULL_TREE);\n+  tree v4sf_ftype_v4sf\n+    = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n+  tree void_ftype_pvoid_int_char\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tpvoid_type_node, integer_type_node,\n+\t\t\t\tchar_type_node, NULL_TREE);\n+\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pfloat, ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4sf\", void_ftype_pfloat_v4sf, ALTIVEC_BUILTIN_ST_INTERNAL_4sf);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4si\", v4si_ftype_pint, ALTIVEC_BUILTIN_LD_INTERNAL_4si);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4si\", void_ftype_pint_v4si, ALTIVEC_BUILTIN_ST_INTERNAL_4si);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_8hi\", v8hi_ftype_pshort, ALTIVEC_BUILTIN_LD_INTERNAL_8hi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_8hi\", void_ftype_pshort_v8hi, ALTIVEC_BUILTIN_ST_INTERNAL_8hi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mtvscr\", void_ftype_v4si, ALTIVEC_BUILTIN_MTVSCR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mfvscr\", v8hi_ftype_void, ALTIVEC_BUILTIN_MFVSCR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dssall\", void_ftype_void, ALTIVEC_BUILTIN_DSSALL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dss\", void_ftype_qi, ALTIVEC_BUILTIN_DSS);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEHX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVXL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVXL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_int_pvoid, ALTIVEC_BUILTIN_STVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_int_pvoid, ALTIVEC_BUILTIN_STVEHX);\n+\n+  /* Add the DST variants.  */\n+  d = (struct builtin_description *) bdesc_dst;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n+    def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n+\n+  /* Initialize the predicates.  */\n+  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n+    {\n+      enum machine_mode mode1;\n+      tree type;\n+\n+      mode1 = insn_data[dp->icode].operand[1].mode;\n+\n+      switch (mode1)\n+\t{\n+\tcase V4SImode:\n+\t  type = int_ftype_int_v4si_v4si;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = int_ftype_int_v8hi_v8hi;\n+\t  break;\n+\tcase V16QImode:\n+\t  type = int_ftype_int_v16qi_v16qi;\n+\t  break;\n+\tcase V4SFmode:\n+\t  type = int_ftype_int_v4sf_v4sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      \n+      def_builtin (dp->mask, dp->name, type, dp->code);\n+    }\n+\n+  /* Initialize the abs* operators.  */\n+  d = (struct builtin_description *) bdesc_abs;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n+    {\n+      enum machine_mode mode0;\n+      tree type;\n+\n+      mode0 = insn_data[d->icode].operand[0].mode;\n+\n+      switch (mode0)\n+\t{\n+\tcase V4SImode:\n+\t  type = v4si_ftype_v4si;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = v8hi_ftype_v8hi;\n+\t  break;\n+\tcase V16QImode:\n+\t  type = v16qi_ftype_v16qi;\n+\t  break;\n+\tcase V4SFmode:\n+\t  type = v4sf_ftype_v4sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      \n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+}\n+\n+static void\n+rs6000_common_init_builtins (void)\n+{\n+  struct builtin_description *d;\n+  size_t i;\n+\n+  tree v4sf_ftype_v4sf_v4sf_v16qi\n+    = build_function_type_list (V4SF_type_node,\n+\t\t\t\tV4SF_type_node, V4SF_type_node,\n+\t\t\t\tV16QI_type_node, NULL_TREE);\n+  tree v4si_ftype_v4si_v4si_v16qi\n+    = build_function_type_list (V4SI_type_node,\n+\t\t\t\tV4SI_type_node, V4SI_type_node,\n+\t\t\t\tV16QI_type_node, NULL_TREE);\n+  tree v8hi_ftype_v8hi_v8hi_v16qi\n+    = build_function_type_list (V8HI_type_node,\n+\t\t\t\tV8HI_type_node, V8HI_type_node,\n+\t\t\t\tV16QI_type_node, NULL_TREE);\n+  tree v16qi_ftype_v16qi_v16qi_v16qi\n+    = build_function_type_list (V16QI_type_node,\n+\t\t\t\tV16QI_type_node, V16QI_type_node,\n+\t\t\t\tV16QI_type_node, NULL_TREE);\n+  tree v4si_ftype_char\n+    = build_function_type_list (V4SI_type_node, char_type_node, NULL_TREE);\n+  tree v8hi_ftype_char\n+    = build_function_type_list (V8HI_type_node, char_type_node, NULL_TREE);\n+  tree v16qi_ftype_char\n+    = build_function_type_list (V16QI_type_node, char_type_node, NULL_TREE);\n+  tree v8hi_ftype_v16qi\n+    = build_function_type_list (V8HI_type_node, V16QI_type_node, NULL_TREE);\n+  tree v4sf_ftype_v4sf\n+    = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_v2si_v2si\n+    = build_function_type_list (V2SI_type_node,\n+\t\t\t\tV2SI_type_node, V2SI_type_node, NULL_TREE);\n+\n+  tree v2sf_ftype_v2sf_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_int_int\n+    = build_function_type_list (V2SI_type_node,\n+\t\t\t\tinteger_type_node, integer_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree v2si_ftype_v2si\n+    = build_function_type_list (V2SI_type_node, V2SI_type_node, NULL_TREE);\n+\n+  tree v2sf_ftype_v2sf\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SF_type_node, NULL_TREE);\n+  \n+  tree v2sf_ftype_v2si\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SI_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_v2sf\n+    = build_function_type_list (V2SI_type_node,\n+\t\t\t\tV2SF_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_v2si_char\n+    = build_function_type_list (V2SI_type_node,\n+\t\t\t\tV2SI_type_node, char_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_int_char\n+    = build_function_type_list (V2SI_type_node,\n+\t\t\t\tinteger_type_node, char_type_node, NULL_TREE);\n+\n+  tree v2si_ftype_char\n+    = build_function_type_list (V2SI_type_node, char_type_node, NULL_TREE);\n+\n+  tree int_ftype_int_int\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, integer_type_node,\n+\t\t\t\tNULL_TREE);\n \n   tree v4si_ftype_v4si_v4si\n     = build_function_type_list (V4SI_type_node,\n@@ -4566,12 +5658,6 @@ altivec_init_builtins (void)\n   tree v4si_ftype_v4sf_v4sf\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node, NULL_TREE);\n-  tree v4si_ftype_v4si\n-    = build_function_type_list (V4SI_type_node, V4SI_type_node, NULL_TREE);\n-  tree v8hi_ftype_v8hi\n-    = build_function_type_list (V8HI_type_node, V8HI_type_node, NULL_TREE);\n-  tree v16qi_ftype_v16qi\n-    = build_function_type_list (V16QI_type_node, V16QI_type_node, NULL_TREE);\n   tree v8hi_ftype_v16qi_v16qi\n     = build_function_type_list (V8HI_type_node,\n \t\t\t\tV16QI_type_node, V16QI_type_node, NULL_TREE);\n@@ -4593,71 +5679,21 @@ altivec_init_builtins (void)\n   tree v4si_ftype_v8hi_v4si\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV8HI_type_node, V4SI_type_node, NULL_TREE);\n-  tree v4si_ftype_v8hi\n-    = build_function_type_list (V4SI_type_node, V8HI_type_node, NULL_TREE);\n-  tree int_ftype_v4si_v4si\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tV4SI_type_node, V4SI_type_node, NULL_TREE);\n-  tree int_ftype_v4sf_v4sf\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tV4SF_type_node, V4SF_type_node, NULL_TREE);\n-  tree int_ftype_v16qi_v16qi\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tV16QI_type_node, V16QI_type_node, NULL_TREE);\n-  tree int_ftype_int_v4si_v4si\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tinteger_type_node, V4SI_type_node,\n-\t\t\t\tV4SI_type_node, NULL_TREE);\n-  tree int_ftype_int_v4sf_v4sf\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tinteger_type_node, V4SF_type_node,\n-\t\t\t\tV4SF_type_node, NULL_TREE);\n-  tree int_ftype_int_v8hi_v8hi\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tinteger_type_node, V8HI_type_node,\n-\t\t\t\tV8HI_type_node, NULL_TREE);\n-  tree int_ftype_int_v16qi_v16qi\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tinteger_type_node, V16QI_type_node,\n-\t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v16qi_ftype_int_pvoid\n-    = build_function_type_list (V16QI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n-  tree v4si_ftype_int_pvoid\n-    = build_function_type_list (V4SI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n-  tree v8hi_ftype_int_pvoid\n-    = build_function_type_list (V8HI_type_node,\n-\t\t\t\tinteger_type_node, pvoid_type_node, NULL_TREE);\n+  tree v4si_ftype_v8hi\n+    = build_function_type_list (V4SI_type_node, V8HI_type_node, NULL_TREE);\n+  tree int_ftype_v4si_v4si\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tV4SI_type_node, V4SI_type_node, NULL_TREE);\n+  tree int_ftype_v4sf_v4sf\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tV4SF_type_node, V4SF_type_node, NULL_TREE);\n+  tree int_ftype_v16qi_v16qi\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tV16QI_type_node, V16QI_type_node, NULL_TREE);\n   tree int_ftype_v8hi_v8hi\n     = build_function_type_list (integer_type_node,\n \t\t\t\tV8HI_type_node, V8HI_type_node, NULL_TREE);\n \n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pfloat, ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4sf\", void_ftype_pfloat_v4sf, ALTIVEC_BUILTIN_ST_INTERNAL_4sf);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4si\", v4si_ftype_pint, ALTIVEC_BUILTIN_LD_INTERNAL_4si);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4si\", void_ftype_pint_v4si, ALTIVEC_BUILTIN_ST_INTERNAL_4si);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_8hi\", v8hi_ftype_pshort, ALTIVEC_BUILTIN_LD_INTERNAL_8hi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_8hi\", void_ftype_pshort_v8hi, ALTIVEC_BUILTIN_ST_INTERNAL_8hi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mtvscr\", void_ftype_v4si, ALTIVEC_BUILTIN_MTVSCR);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mfvscr\", v8hi_ftype_void, ALTIVEC_BUILTIN_MFVSCR);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dssall\", void_ftype_void, ALTIVEC_BUILTIN_DSSALL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dss\", void_ftype_qi, ALTIVEC_BUILTIN_DSS);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSR);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEBX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEHX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVEWX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVXL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_int_pvoid, ALTIVEC_BUILTIN_LVX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_int_pvoid, ALTIVEC_BUILTIN_STVEBX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_int_pvoid, ALTIVEC_BUILTIN_STVEHX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVEWX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVXL);\n-\n   /* Add the simple ternary operators.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n@@ -4751,41 +5787,6 @@ altivec_init_builtins (void)\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n-  /* Add the DST variants.  */\n-  d = (struct builtin_description *) bdesc_dst;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n-    def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n-\n-  /* Initialize the predicates.  */\n-  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n-    {\n-      enum machine_mode mode1;\n-      tree type;\n-\n-      mode1 = insn_data[dp->icode].operand[1].mode;\n-\n-      switch (mode1)\n-\t{\n-\tcase V4SImode:\n-\t  type = int_ftype_int_v4si_v4si;\n-\t  break;\n-\tcase V8HImode:\n-\t  type = int_ftype_int_v8hi_v8hi;\n-\t  break;\n-\tcase V16QImode:\n-\t  type = int_ftype_int_v16qi_v16qi;\n-\t  break;\n-\tcase V4SFmode:\n-\t  type = int_ftype_int_v4sf_v4sf;\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      \n-      def_builtin (dp->mask, dp->name, type, dp->code);\n-    }\n-\n   /* Add the simple binary operators.  */\n   d = (struct builtin_description *) bdesc_2arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n@@ -4817,6 +5818,15 @@ altivec_init_builtins (void)\n \t    case V8HImode:\n \t      type = v8hi_ftype_v8hi_v8hi;\n \t      break;\n+\t    case V2SImode:\n+\t      type = v2si_ftype_v2si_v2si;\n+\t      break;\n+\t    case V2SFmode:\n+\t      type = v2sf_ftype_v2sf_v2sf;\n+\t      break;\n+\t    case SImode:\n+\t      type = int_ftype_int_int;\n+\t      break;\n \t    default:\n \t      abort ();\n \t    }\n@@ -4876,6 +5886,15 @@ altivec_init_builtins (void)\n       else if (mode0 == V4SImode && mode1 == V4SFmode && mode2 == QImode)\n \ttype = v4si_ftype_v4sf_char;\n \n+      else if (mode0 == V2SImode && mode1 == SImode && mode2 == SImode)\n+\ttype = v2si_ftype_int_int;\n+\n+      else if (mode0 == V2SImode && mode1 == V2SImode && mode2 == QImode)\n+\ttype = v2si_ftype_v2si_char;\n+\n+      else if (mode0 == V2SImode && mode1 == SImode && mode2 == QImode)\n+\ttype = v2si_ftype_int_char;\n+\n       /* int, x, x.  */\n       else if (mode0 == SImode)\n \t{\n@@ -4904,36 +5923,6 @@ altivec_init_builtins (void)\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n-  /* Initialize the abs* operators.  */\n-  d = (struct builtin_description *) bdesc_abs;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n-    {\n-      enum machine_mode mode0;\n-      tree type;\n-\n-      mode0 = insn_data[d->icode].operand[0].mode;\n-\n-      switch (mode0)\n-\t{\n-\tcase V4SImode:\n-\t  type = v4si_ftype_v4si;\n-\t  break;\n-\tcase V8HImode:\n-\t  type = v8hi_ftype_v8hi;\n-\t  break;\n-\tcase V16QImode:\n-\t  type = v16qi_ftype_v16qi;\n-\t  break;\n-\tcase V4SFmode:\n-\t  type = v4sf_ftype_v4sf;\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      \n-      def_builtin (d->mask, d->name, type, d->code);\n-    }\n-\n   /* Add the simple unary operators.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n@@ -4959,14 +5948,23 @@ altivec_init_builtins (void)\n \ttype = v8hi_ftype_v16qi;\n       else if (mode0 == V4SImode && mode1 == V8HImode)\n \ttype = v4si_ftype_v8hi;\n+      else if (mode0 == V2SImode && mode1 == V2SImode)\n+\ttype = v2si_ftype_v2si;\n+      else if (mode0 == V2SFmode && mode1 == V2SFmode)\n+\ttype = v2sf_ftype_v2sf;\n+      else if (mode0 == V2SFmode && mode1 == V2SImode)\n+\ttype = v2sf_ftype_v2si;\n+      else if (mode0 == V2SImode && mode1 == V2SFmode)\n+\ttype = v2si_ftype_v2sf;\n+      else if (mode0 == V2SImode && mode1 == QImode)\n+\ttype = v2si_ftype_char;\n       else\n \tabort ();\n \n       def_builtin (d->mask, d->name, type, d->code);\n     }\n }\n \n-\f\n /* Generate a memory reference for expand_block_move, copying volatile,\n    and other bits from an original memory reference.  */\n \n@@ -5689,6 +6687,7 @@ branch_positive_comparison_operator (op, mode)\n \n   code = GET_CODE (op);\n   return (code == EQ || code == LT || code == GT\n+\t  || (TARGET_SPE && TARGET_HARD_FLOAT && !TARGET_FPRS && code == NE)\n \t  || code == LTU || code == GTU\n \t  || code == UNORDERED);\n }\n@@ -6140,8 +7139,12 @@ ccr_bit (op, scc_p)\n   switch (code)\n     {\n     case NE:\n+      if (TARGET_SPE && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n+\treturn base_bit + 1;\n       return scc_p ? base_bit + 3 : base_bit + 2;\n     case EQ:\n+      if (TARGET_SPE && TARGET_HARD_FLOAT && cc_mode == CCFPmode)\n+\treturn base_bit + 1;\n       return base_bit + 2;\n     case GT:  case GTU:  case UNLE:\n       return base_bit + 1;\n@@ -6352,6 +7355,15 @@ print_operand (file, x, code)\n \t  fprintf (file, \"crnor %d,%d,%d\\n\\t\", base_bit + 3,\n \t\t   base_bit + 2, base_bit + 2);\n \t}\n+      else if (TARGET_SPE && TARGET_HARD_FLOAT\n+\t       && GET_CODE (x) == EQ\n+\t       && GET_MODE (XEXP (x, 0)) == CCFPmode)\n+\t{\n+\t  int base_bit = 4 * (REGNO (XEXP (x, 0)) - CR0_REGNO);\n+\n+\t  fprintf (file, \"crnor %d,%d,%d\\n\\t\", base_bit + 1,\n+\t\t   base_bit + 1, base_bit + 1);\n+\t}\n       return;\n \n     case 'E':\n@@ -6632,6 +7644,18 @@ print_operand (file, x, code)\n       fprintf (file, \"%d\", i);\n       return;\n \n+    case 't':\n+      /* Like 'J' but get to the OVERFLOW/UNORDERED bit.  */\n+      if (GET_CODE (x) != REG || GET_MODE (x) != CCmode)\n+\tabort ();\n+\n+      /* Bit 3 is OV bit.  */\n+      i = 4 * (REGNO (x) - CR0_REGNO) + 3;\n+\n+      /* If we want bit 31, write a shift count of zero, not 32.  */\n+      fprintf (file, \"%d\", i == 31 ? 0 : i + 1);\n+      return;\n+\n     case 'T':\n       /* Print the symbolic name of a branch target register.  */\n       if (GET_CODE (x) != REG || (REGNO (x) != LINK_REGISTER_REGNUM\n@@ -6824,7 +7848,7 @@ print_operand (file, x, code)\n \t}\n       return;\n \n-      /* Print AltiVec memory operand.  */\n+      /* Print AltiVec or SPE memory operand.  */\n     case 'y':\n       {\n \trtx tmp;\n@@ -6834,6 +7858,30 @@ print_operand (file, x, code)\n \n \ttmp = XEXP (x, 0);\n \n+\tif (TARGET_SPE)\n+\t  {\n+\t    /* Handle [reg].  */\n+\t    if (GET_CODE (tmp) == REG)\n+\t      {\n+\t\tfprintf (file, \"0(%s)\", reg_names[REGNO (tmp)]);\n+\t\tbreak;\n+\t      }\n+\t    /* Handle [reg+UIMM].  */\n+\t    else if (GET_CODE (tmp) == PLUS &&\n+\t\t     GET_CODE (XEXP (tmp, 1)) == CONST_INT)\n+\t      {\n+\t\tint x;\n+\n+\t\tif (GET_CODE (XEXP (tmp, 0)) != REG)\n+\t\t  abort ();\n+\n+\t\tx = INTVAL (XEXP (tmp, 1));\n+\t\tfprintf (file, \"%d(%s)\", x, reg_names[REGNO (XEXP (tmp, 0))]);\n+\t\tbreak;\n+\t      }\n+\n+\t    /* Fall through.  Must be [reg+reg].  */\n+\t  }\n \tif (GET_CODE (tmp) == REG)\n \t  fprintf (file, \"0,%s\", reg_names[REGNO (tmp)]);\n \telse if (GET_CODE (tmp) == PLUS && GET_CODE (XEXP (tmp, 1)) == REG)\n@@ -7062,15 +8110,134 @@ rs6000_generate_compare (code)\n \n   /* First, the compare.  */\n   compare_result = gen_reg_rtx (comp_mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, compare_result,\n-\t\t\t  gen_rtx_COMPARE (comp_mode,\n-\t\t\t\t\t   rs6000_compare_op0, \n-\t\t\t\t\t   rs6000_compare_op1)));\n+\n+  /* SPE FP compare instructions on the GPRs.  Yuck!  */\n+  if ((TARGET_SPE && TARGET_HARD_FLOAT) && rs6000_compare_fp_p)\n+    {\n+      rtx cmp, or1, or2, or_result, compare_result2;\n+\n+      switch (code)\n+\t{\n+\tcase EQ:\n+\tcase UNEQ:\n+\tcase NE:\n+\tcase LTGT:\n+\t  cmp = flag_unsafe_math_optimizations\n+\t    ? gen_tstsfeq_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1)\n+\t    : gen_cmpsfeq_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1);\n+\t  break;\n+\tcase GT:\n+\tcase GTU:\n+\tcase UNGT:\n+\tcase UNGE:\n+\tcase GE:\n+\tcase GEU:\n+\t  cmp = flag_unsafe_math_optimizations\n+\t    ? gen_tstsfgt_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1)\n+\t    : gen_cmpsfgt_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1);\n+\t  break;\n+\tcase LT:\n+\tcase LTU:\n+\tcase UNLT:\n+\tcase UNLE:\n+\tcase LE:\n+\tcase LEU:\n+\t  cmp = flag_unsafe_math_optimizations\n+\t    ? gen_tstsflt_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1)\n+\t    : gen_cmpsflt_gpr (compare_result, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1);\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      /* Synthesize LE and GE from LT/GT || EQ.  */\n+      if (code == LE || code == GE || code == LEU || code == GEU)\n+\t{\n+\t  /* Synthesize GE/LE frome GT/LT || EQ.  */\n+\n+\t  emit_insn (cmp);\n+\n+\t  switch (code)\n+\t    {\n+\t    case LE: code = LT; break;\n+\t    case GE: code = GT; break;\n+\t    case LEU: code = LT; break;\n+\t    case GEU: code = GT; break;\n+\t    default: abort ();\n+\t    }\n+\n+\t  or1 = gen_reg_rtx (SImode);\n+\t  or2 = gen_reg_rtx (SImode);\n+\t  or_result = gen_reg_rtx (CCEQmode);\n+\t  compare_result2 = gen_reg_rtx (CCFPmode);\n+\n+\t  /* Do the EQ.  */\n+\t  cmp = flag_unsafe_math_optimizations\n+\t    ? gen_tstsfeq_gpr (compare_result2, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1)\n+\t    : gen_cmpsfeq_gpr (compare_result2, rs6000_compare_op0,\n+\t\t\t       rs6000_compare_op1);\n+\t  emit_insn (cmp);\n+\n+\t  /* The MC8540 FP compare instructions set the CR bits\n+\t     differently than other PPC compare instructions.  For\n+\t     that matter, there is no generic test instruction, but a\n+\t     testgt, testlt, and testeq.  For a true condition, bit 2\n+\t     is set (x1xx) in the CR.  Following the traditional CR\n+\t     values:\n+\n+\t     LT    GT    EQ    OV\n+\t     bit3  bit2  bit1  bit0\n+\n+\t     ... bit 2 would be a GT CR alias, so later on we\n+\t     look in the GT bits for the branch instructins.\n+\t     However, we must be careful to emit correct RTL in\n+\t     the meantime, so optimizations don't get confused.  */\n+\n+\t  or1 = gen_rtx (NE, SImode, compare_result, const0_rtx);\n+\t  or2 = gen_rtx (NE, SImode, compare_result2, const0_rtx);\n+\n+\t  /* OR them together.  */\n+\t  cmp = gen_rtx_SET (VOIDmode, or_result,\n+\t\t\t     gen_rtx_COMPARE (CCEQmode,\n+\t\t\t\t\t      gen_rtx_IOR (SImode, or1, or2),\n+\t\t\t\t\t      const_true_rtx));\n+\t  compare_result = or_result;\n+\t  code = EQ;\n+\t}\n+      else\n+\t{\n+\t  /* We only care about 1 bit (x1xx), so map everything to NE to\n+\t     maintain rtl sanity.  We'll get to the right bit (x1xx) at\n+\t     code output time.  */\n+\t  if (code == NE || code == LTGT)\n+\t    /* Do the inverse here because we have no cmpne\n+\t       instruction.  We use the cmpeq instruction and expect\n+\t       to get a 0 instead.  */\n+\t    code = EQ;\n+\t  else\n+\t    code = NE;\n+\t}\n+\n+      emit_insn (cmp);\n+    }\n+  else\n+    emit_insn (gen_rtx_SET (VOIDmode, compare_result,\n+\t\t\t    gen_rtx_COMPARE (comp_mode,\n+\t\t\t\t\t     rs6000_compare_op0, \n+\t\t\t\t\t     rs6000_compare_op1)));\n   \n   /* Some kinds of FP comparisons need an OR operation;\n      except for flag_unsafe_math_optimizations we don't bother.  */\n   if (rs6000_compare_fp_p\n       && ! flag_unsafe_math_optimizations\n+      && ! (TARGET_HARD_FLOAT && TARGET_SPE)\n       && (code == LE || code == GE\n \t  || code == UNEQ || code == LTGT\n \t  || code == UNGT || code == UNLT))\n@@ -7191,6 +8358,19 @@ output_cbranch (op, label, reversed, insn)\n   if (really_reversed)\n     code = rs6000_reverse_condition (mode, code);\n \n+  if ((TARGET_SPE && TARGET_HARD_FLOAT) && mode == CCFPmode)\n+    {\n+      /* The efscmp/tst* instructions twiddle bit 2, which maps nicely\n+\t to the GT bit.  */\n+      if (code == EQ)\n+\t/* Opposite of GT.  */\n+\tcode = UNLE;\n+      else if (code == NE)\n+\tcode = GT;\n+      else\n+\tabort ();\n+    }\n+\n   switch (code)\n     {\n       /* Not all of these are actually distinct opcodes, but\n@@ -7277,7 +8457,10 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n   rtx temp;\n \n   /* These modes should always match. */\n-  if (GET_MODE (op1) != compare_mode)\n+  if (GET_MODE (op1) != compare_mode\n+      /* In the isel case however, we can use a compare immediate, so\n+\t op1 may be a small constant.  */\n+      && (!TARGET_ISEL || !short_cint_operand (op1, VOIDmode)))\n     return 0;\n   if (GET_MODE (true_cond) != result_mode)\n     return 0;\n@@ -7286,10 +8469,12 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n \n   /* First, work out if the hardware can do this at all, or\n      if it's too slow...  */\n-  /* If the comparison is an integer one, since we only have fsel\n-     it'll be cheaper to use a branch.  */\n   if (! rs6000_compare_fp_p)\n-    return 0;\n+    {\n+      if (TARGET_ISEL)\n+\treturn rs6000_emit_int_cmove (dest, op, true_cond, false_cond);\n+      return 0;\n+    }\n \n   /* Eliminate half of the comparisons by switching operands, this\n      makes the remaining code simpler.  */\n@@ -7421,6 +8606,53 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n   return 1;\n }\n \n+/* Same as above, but for ints (isel).  */\n+\n+static int\n+rs6000_emit_int_cmove (dest, op, true_cond, false_cond)\n+     rtx dest;\n+     rtx op;\n+     rtx true_cond;\n+     rtx false_cond;\n+{\n+  rtx condition_rtx, cr;\n+\n+  /* All isel implementations thus far are 32-bits.  */\n+  if (GET_MODE (rs6000_compare_op0) != SImode)\n+    return 0;\n+\n+  /* We still have to do the compare, because isel doesn't do a\n+     compare, it just looks at the CRx bits set by a previous compare\n+     instruction.  */\n+  condition_rtx = rs6000_generate_compare (GET_CODE (op));\n+  cr = XEXP (condition_rtx, 0);\n+\n+  if (GET_MODE (cr) == CCmode)\n+    emit_insn (gen_isel_signed (dest, condition_rtx,\n+\t\t\t\ttrue_cond, false_cond, cr));\n+  else\n+    emit_insn (gen_isel_unsigned (dest, condition_rtx,\n+\t\t\t\t  true_cond, false_cond, cr));\n+\n+  return 1;\n+}\n+\n+const char *\n+output_isel (operands)\n+     rtx *operands;\n+{\n+  enum rtx_code code;\n+\n+  code = GET_CODE (operands[1]);\n+  if (code == GE || code == GEU || code == LE || code == LEU || code == NE)\n+    {\n+      PUT_CODE (operands[1], reverse_condition (code));\n+      return \"isel %0,%3,%2,%j1\";\n+    }\n+  else\n+    return \"isel %0,%2,%3,%j1\";\n+}\n+\n void\n rs6000_emit_minmax (dest, code, op0, op1)\n      rtx dest;\n@@ -7639,6 +8871,10 @@ is_altivec_return_reg (reg, xyes)\n \t\t+---------------------------------------+\n \t\t| Save area for VRSAVE register (Z)\t| 8+P+A+V+L+X+W+Y\n \t\t+---------------------------------------+\n+                | SPE: area for 64-bit GP registers     |\n+                +---------------------------------------+\n+                | SPE alignment padding                 |\n+                +---------------------------------------+\n \t\t| saved CR (C)\t\t\t\t| 8+P+A+V+L+X+W+Y+Z\n \t\t+---------------------------------------+    \n \t\t| Save area for GP registers (G)\t| 8+P+A+V+L+X+W+Y+Z+C\n@@ -7694,6 +8930,20 @@ rs6000_stack_info ()\n   else\n     info_ptr->gp_size = reg_size * (32 - info_ptr->first_gp_reg_save);\n \n+  /* For the SPE, we have an additional upper 32-bits on each GPR.\n+     Ideally we should save the entire 64-bits only when the upper\n+     half is used in SIMD instructions.  Since we only record\n+     registers live (not the size they are used in), this proves\n+     difficult because we'd have to traverse the instruction chain at\n+     the right time, taking reload into account.  This is a real pain,\n+     so we opt to save the GPRs in 64-bits always.  Anyone overly\n+     concerned with frame size can fix this.  ;-).\n+\n+     So... since we save all GPRs (except the SP) in 64-bits, the\n+     traditional GP save area will be empty.  */\n+  if (TARGET_SPE_ABI)\n+    info_ptr->gp_size = 0;\n+\n   info_ptr->first_fp_reg_save = first_fp_reg_to_save ();\n   info_ptr->fp_size = 8 * (64 - info_ptr->first_fp_reg_save);\n \n@@ -7742,7 +8992,9 @@ rs6000_stack_info ()\n       unsigned int i;\n       for (i = 0; EH_RETURN_DATA_REGNO (i) != INVALID_REGNUM; ++i)\n \tcontinue;\n-      ehrd_size = i * UNITS_PER_WORD;\n+\n+      /* SPE saves EH registers in 64-bits.  */\n+      ehrd_size = i * (TARGET_SPE_ABI ? UNITS_PER_SPE_WORD : UNITS_PER_WORD);\n     }\n   else\n     ehrd_size = 0;\n@@ -7755,6 +9007,11 @@ rs6000_stack_info ()\n   info_ptr->parm_size    = RS6000_ALIGN (current_function_outgoing_args_size,\n \t\t\t\t\t 8);\n \n+  if (TARGET_SPE_ABI)\n+    info_ptr->spe_gp_size = 8 * (32 - info_ptr->first_gp_reg_save);\n+  else\n+    info_ptr->spe_gp_size = 0;\n+\n   if (TARGET_ALTIVEC_ABI && TARGET_ALTIVEC_VRSAVE)\n     {\n       info_ptr->vrsave_mask = compute_vrsave_mask ();\n@@ -7810,7 +9067,26 @@ rs6000_stack_info ()\n       info_ptr->gp_save_offset   = info_ptr->fp_save_offset - info_ptr->gp_size;\n       info_ptr->cr_save_offset   = info_ptr->gp_save_offset - info_ptr->cr_size;\n \n-      if (TARGET_ALTIVEC_ABI)\n+      if (TARGET_SPE_ABI)\n+      {\n+        /* Align stack so SPE GPR save area is aligned on a\n+           double-word boundary.  */\n+        if (info_ptr->spe_gp_size != 0)\n+          info_ptr->spe_padding_size\n+            = 8 - (-info_ptr->cr_save_offset % 8);\n+        else\n+          info_ptr->spe_padding_size = 0;\n+\n+        info_ptr->spe_gp_save_offset\n+          = info_ptr->cr_save_offset\n+          - info_ptr->spe_padding_size\n+          - info_ptr->spe_gp_size;\n+\n+        /* Adjust for SPE case.  */\n+        info_ptr->toc_save_offset\n+          = info_ptr->spe_gp_save_offset - info_ptr->toc_size;\n+      }\n+      else if (TARGET_ALTIVEC_ABI)\n \t{\n \t  info_ptr->vrsave_save_offset\n \t    = info_ptr->cr_save_offset - info_ptr->vrsave_size;\n@@ -7843,6 +9119,8 @@ rs6000_stack_info ()\n \t\t\t\t\t + info_ptr->altivec_size\n \t\t\t\t\t + info_ptr->altivec_padding_size\n \t\t\t\t\t + info_ptr->vrsave_size\n+\t\t\t\t\t + info_ptr->spe_gp_size\n+\t\t\t\t\t + info_ptr->spe_padding_size\n \t\t\t\t\t + ehrd_size\n \t\t\t\t\t + info_ptr->cr_size\n \t\t\t\t\t + info_ptr->lr_size\n@@ -7897,6 +9175,9 @@ rs6000_stack_info ()\n   if (! TARGET_ALTIVEC_ABI || info_ptr->vrsave_mask == 0)\n     info_ptr->vrsave_save_offset = 0;\n \n+  if (! TARGET_SPE_ABI || info_ptr->spe_gp_size == 0)\n+    info_ptr->spe_gp_save_offset = 0;\n+\n   if (! info_ptr->lr_save_p)\n     info_ptr->lr_save_offset = 0;\n \n@@ -7938,6 +9219,9 @@ debug_stack_info (info)\n   if (TARGET_ALTIVEC_ABI)\n     fprintf (stderr, \"\\tALTIVEC ABI extensions enabled.\\n\");\n \n+  if (TARGET_SPE_ABI)\n+    fprintf (stderr, \"\\tSPE ABI extensions enabled.\\n\");\n+\n   if (info->first_gp_reg_save != 32)\n     fprintf (stderr, \"\\tfirst_gp_reg_save   = %5d\\n\", info->first_gp_reg_save);\n \n@@ -7976,6 +9260,10 @@ debug_stack_info (info)\n     fprintf (stderr, \"\\taltivec_save_offset = %5d\\n\",\n \t     info->altivec_save_offset);\n \n+  if (info->spe_gp_save_offset)\n+    fprintf (stderr, \"\\tspe_gp_save_offset  = %5d\\n\",\n+\t     info->spe_gp_save_offset);\n+\n   if (info->vrsave_save_offset)\n     fprintf (stderr, \"\\tvrsave_save_offset  = %5d\\n\",\n \t     info->vrsave_save_offset);\n@@ -8010,6 +9298,9 @@ debug_stack_info (info)\n   if (info->gp_size)\n     fprintf (stderr, \"\\tgp_size             = %5d\\n\", info->gp_size);\n \n+  if (info->spe_gp_size)\n+    fprintf (stderr, \"\\tspe_gp_size         = %5d\\n\", info->spe_gp_size);\n+\n   if (info->fp_size)\n     fprintf (stderr, \"\\tfp_size             = %5d\\n\", info->fp_size);\n \n@@ -8023,6 +9314,10 @@ debug_stack_info (info)\n     fprintf (stderr, \"\\taltivec_padding_size= %5d\\n\",\n \t     info->altivec_padding_size);\n \n+  if (info->spe_padding_size)\n+    fprintf (stderr, \"\\tspe_padding_size    = %5d\\n\",\n+\t     info->spe_padding_size);\n+\n   if (info->lr_size)\n     fprintf (stderr, \"\\tlr_size             = %5d\\n\", info->lr_size);\n \n@@ -8666,8 +9961,9 @@ emit_frame_save (frame_reg, frame_ptr, mode, regno, offset, total_size)\n \n   /* Some cases that need register indexed addressing.  */\n   if ((TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n-      /* Add more cases here.  */\n-      )\n+      || (TARGET_SPE_ABI\n+\t  && SPE_VECTOR_MODE (mode)\n+\t  && !SPE_CONST_OFFSET_OK (offset)))\n     {\n       /* Whomever calls us must make sure r11 is available in the\n          flow path of instructions in the prologue.  */\n@@ -8694,6 +9990,30 @@ emit_frame_save (frame_reg, frame_ptr, mode, regno, offset, total_size)\n   rs6000_frame_related (insn, frame_ptr, total_size, replacea, replaceb);\n }\n \n+/* Emit an offset memory reference suitable for a frame store, while\n+   converting to a valid addressing mode.  */\n+\n+static rtx\n+gen_frame_mem_offset (mode, reg, offset)\n+     enum machine_mode mode;\n+     rtx reg;\n+     int offset;\n+{\n+  rtx int_rtx, offset_rtx;\n+\n+  int_rtx = GEN_INT (offset);\n+\n+  if (TARGET_SPE_ABI && SPE_VECTOR_MODE (mode))\n+    {\n+      offset_rtx = gen_rtx_REG (Pmode, FIXED_SCRATCH);\n+      emit_move_insn (offset_rtx, int_rtx);\n+    }\n+  else\n+    offset_rtx = int_rtx;\n+\n+  return gen_rtx_MEM (mode, gen_rtx_PLUS (Pmode, reg, offset_rtx));\n+}\n+\n /* Emit function prologue as insns.  */\n \n void\n@@ -8711,7 +10031,14 @@ rs6000_emit_prologue ()\n   int using_store_multiple;\n   HOST_WIDE_INT sp_offset = 0;\n   \n+   if (TARGET_SPE_ABI)\n+     {\n+       reg_mode = V2SImode;\n+       reg_size = 8;\n+     }\n+\n   using_store_multiple = (TARGET_MULTIPLE && ! TARGET_POWERPC64\n+\t\t\t  && !TARGET_SPE_ABI\n \t\t\t  && info->first_gp_reg_save < 31);\n   saving_FPRs_inline = (info->first_fp_reg_save == 64\n \t\t\t|| FP_SAVE_INLINE (info->first_fp_reg_save));\n@@ -8894,10 +10221,49 @@ rs6000_emit_prologue ()\n \t    || (i+info->first_gp_reg_save == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t\t&& ((DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n \t\t    || (DEFAULT_ABI == ABI_DARWIN && flag_pic))))\n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, reg_mode,\n-\t\t\t   info->first_gp_reg_save + i,\n-\t\t\t   info->gp_save_offset + sp_offset + reg_size * i,\n-\t\t\t   info->total_size);\n+\t  {\n+\t    rtx addr, reg, mem;\n+\t    reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n+\n+\t    if (TARGET_SPE_ABI)\n+\t      {\n+\t\tint offset = info->spe_gp_save_offset + sp_offset + 8 * i;\n+\t\trtx b;\n+\n+\t\tif (!SPE_CONST_OFFSET_OK (offset))\n+\t\t  {\n+\t\t    b = gen_rtx_REG (Pmode, FIXED_SCRATCH);\n+\t\t    emit_move_insn (b, GEN_INT (offset));\n+\t\t  }\n+\t\telse\n+\t\t  b = GEN_INT (offset);\n+\n+\t\taddr = gen_rtx_PLUS (Pmode, frame_reg_rtx, b);\n+\t\tmem = gen_rtx_MEM (V2SImode, addr);\n+\t\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t\tinsn = emit_move_insn (mem, reg);\n+\n+\t\tif (GET_CODE (b) == CONST_INT)\n+\t\t  rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t\t\t\t\tNULL_RTX, NULL_RTX);\n+\t\telse\n+\t\t  rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t\t\t\t\tb, GEN_INT (offset));\n+\t      }\n+\t    else\n+\t      {\n+\t\taddr = gen_rtx_PLUS (Pmode, frame_reg_rtx, \n+\t\t\t\t     GEN_INT (info->gp_save_offset \n+\t\t\t\t\t      + sp_offset \n+\t\t\t\t\t      + reg_size * i));\n+\t\tmem = gen_rtx_MEM (reg_mode, addr);\n+\t\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\n+\t\tinsn = emit_move_insn (mem, reg);\n+\t\trs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n+\t\t\t\t      NULL_RTX, NULL_RTX);\n+\t      }\n+\t  }\n     }\n \n   /* ??? There's no need to emit actual instructions here, but it's the\n@@ -8970,7 +10336,7 @@ rs6000_emit_prologue ()\n   /* Set frame pointer, if needed.  */\n   if (frame_pointer_needed)\n     {\n-      insn = emit_move_insn (gen_rtx_REG (reg_mode, FRAME_POINTER_REGNUM), \n+      insn = emit_move_insn (gen_rtx_REG (Pmode, FRAME_POINTER_REGNUM), \n \t\t\t     sp_reg_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -9097,8 +10463,15 @@ rs6000_emit_epilogue (sibcall)\n   int reg_size = TARGET_POWERPC64 ? 8 : 4;\n   int i;\n \n+  if (TARGET_SPE_ABI)\n+    {\n+      reg_mode = V2SImode;\n+      reg_size = 8;\n+    }\n+\n   info = rs6000_stack_info ();\n   using_load_multiple = (TARGET_MULTIPLE && ! TARGET_POWERPC64\n+\t\t\t && !TARGET_SPE_ABI\n \t\t\t && info->first_gp_reg_save < 31);\n   restoring_FPRs_inline = (sibcall\n \t\t\t   || current_function_calls_eh_return\n@@ -9183,9 +10556,8 @@ rs6000_emit_epilogue (sibcall)\n   /* Get the old lr if we saved it.  */\n   if (info->lr_save_p)\n     {\n-      rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t       GEN_INT (info->lr_save_offset + sp_offset));\n-      rtx mem = gen_rtx_MEM (Pmode, addr);\n+      rtx mem = gen_frame_mem_offset (Pmode, frame_reg_rtx,\n+\t\t\t\t      info->lr_save_offset + sp_offset);\n \n       set_mem_alias_set (mem, rs6000_sr_alias_set);\n \n@@ -9216,16 +10588,15 @@ rs6000_emit_epilogue (sibcall)\n \n       for (i = 0; ; ++i)\n \t{\n-\t  rtx addr, mem;\n+\t  rtx mem;\n \n \t  regno = EH_RETURN_DATA_REGNO (i);\n \t  if (regno == INVALID_REGNUM)\n \t    break;\n \n-\t  addr = plus_constant (frame_reg_rtx,\n-\t\t\t\tinfo->ehrd_offset + sp_offset\n-\t\t\t\t+ reg_size * (int) i);\n-\t  mem = gen_rtx_MEM (reg_mode, addr);\n+\t  mem = gen_frame_mem_offset (reg_mode, frame_reg_rtx,\n+\t\t\t\t      info->ehrd_offset + sp_offset\n+\t\t\t\t      + reg_size * (int) i);\n \t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, regno), mem);\n@@ -9269,11 +10640,28 @@ rs6000_emit_epilogue (sibcall)\n \t\t\t\t\t    + reg_size * i));\n \t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n \n+\t  /* Restore 64-bit quantities for SPE.  */\n+\t  if (TARGET_SPE_ABI)\n+\t    {\n+\t      int offset = info->spe_gp_save_offset + sp_offset + 8 * i;\n+\t      rtx b;\n+\n+\t      if (!SPE_CONST_OFFSET_OK (offset))\n+\t\t{\n+\t\t  b = gen_rtx_REG (Pmode, FIXED_SCRATCH);\n+\t\t  emit_move_insn (b, GEN_INT (offset));\n+\t\t}\n+\t      else\n+\t\tb = GEN_INT (offset);\n+\n+\t      addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, b);\n+\t      mem = gen_rtx_MEM (V2SImode, addr);\n+\t    }\n+\n \t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, \n-\t\t\t\t       info->first_gp_reg_save + i),\n-\t\t\t  mem);\n+\t\t\t\t       info->first_gp_reg_save + i), mem);\n \t}\n \n   /* Restore fpr's if we need to do it without calling a function.  */"}, {"sha": "402490b68b58874725462cc985f793525f10a48f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 351, "deletions": 10, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -87,6 +87,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=821: -mppc} \\\n %{mcpu=823: -mppc} \\\n %{mcpu=860: -mppc} \\\n+%{mcpu=8540: -me500} \\\n %{maltivec: -maltivec}\"\n \n #define CPP_DEFAULT_SPEC \"\"\n@@ -358,6 +359,7 @@ enum processor_type\n    PROCESSOR_PPC750,\n    PROCESSOR_PPC7400,\n    PROCESSOR_PPC7450,\n+   PROCESSOR_PPC8540,\n    PROCESSOR_POWER4\n };\n \n@@ -393,6 +395,8 @@ extern enum processor_type rs6000_cpu;\n    {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\") },\t\t\\\n    {\"long-double-\", &rs6000_long_double_size_string,\t\t\t\\\n     N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n+   {\"isel=\", &rs6000_isel_string,                                       \\\n+    N_(\"Specify yes/no if isel instructions should be generated\") },    \\\n    {\"vrsave=\", &rs6000_altivec_vrsave_string,                         \\\n     N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\") }, \\\n    {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n@@ -426,6 +430,10 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n extern const char *rs6000_long_double_size_string;\n extern int rs6000_long_double_type_size;\n extern int rs6000_altivec_abi;\n+extern int rs6000_spe_abi;\n+extern int rs6000_isel;\n+extern int rs6000_fprs;\n+extern const char *rs6000_isel_string;\n extern const char *rs6000_altivec_vrsave_string;\n extern int rs6000_altivec_vrsave;\n extern const char *rs6000_longcall_switch;\n@@ -435,6 +443,11 @@ extern int rs6000_default_long_calls;\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n #define TARGET_ALTIVEC_VRSAVE rs6000_altivec_vrsave\n \n+#define TARGET_SPE_ABI 0\n+#define TARGET_SPE 0\n+#define TARGET_ISEL 0\n+#define TARGET_FPRS 1\n+\n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -508,6 +521,7 @@ extern int rs6000_default_long_calls;\n #define MIN_UNITS_PER_WORD 4\n #define UNITS_PER_FP_WORD 8\n #define UNITS_PER_ALTIVEC_WORD 16\n+#define UNITS_PER_SPE_WORD 8\n \n /* Type used for ptrdiff_t, as a string used in a declaration.  */\n #define PTRDIFF_TYPE \"int\"\n@@ -589,14 +603,27 @@ extern int rs6000_default_long_calls;\n    local store.  TYPE is the data type, and ALIGN is the alignment\n    that the object would ordinarily have.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\\\n-  ((TARGET_ALTIVEC && TREE_CODE (TYPE) == VECTOR_TYPE) ? 128 : ALIGN)\n+  ((TARGET_ALTIVEC && TREE_CODE (TYPE) == VECTOR_TYPE) ? 128 :\t\\\n+    (TARGET_SPE && TREE_CODE (TYPE) == VECTOR_TYPE) ? 64 : ALIGN)\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32\n \n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n+/* Return 1 if a structure or array containing FIELD should be\n+   accessed using `BLKMODE'.\n+\n+   For the SPE, simd types are V2SI, and gcc can be tempted to put the\n+   entire thing in a DI and use subregs to access the internals.\n+   store_bit_field() will force (subreg:DI (reg:V2SI x))'s to the\n+   back-end.  Because a single GPR can hold a V2SI, but not a DI, the\n+   best thing to do is set structs to BLKmode and avoid Severe Tire\n+   Damage.  */\n+#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n+  (TARGET_SPE && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)\n+\n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n@@ -611,7 +638,7 @@ extern int rs6000_default_long_calls;\n /* Make arrays of chars word-aligned for the same reasons.\n    Align vectors to 128 bits.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n-  (TREE_CODE (TYPE) == VECTOR_TYPE ? 128\t\\\n+  (TREE_CODE (TYPE) == VECTOR_TYPE ? (TARGET_SPE_ABI ? 64 : 128)\t\\\n    : TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n@@ -650,7 +677,7 @@ extern int rs6000_default_long_calls;\n    a register, in order to work around problems in allocating stack storage\n    in inline functions.  */\n \n-#define FIRST_PSEUDO_REGISTER 111\n+#define FIRST_PSEUDO_REGISTER 113\n \n /* This must be included for pre gcc 3.0 glibc compatibility.  */\n #define PRE_GCC3_DWARF_FRAME_REGISTERS 77\n@@ -675,6 +702,7 @@ extern int rs6000_default_long_calls;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n+   , 1, 1                                          \\\n }\n \n /* 1 for registers not available across function calls.\n@@ -694,6 +722,7 @@ extern int rs6000_default_long_calls;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n+   , 1, 1                                          \\\n }\n \n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n@@ -712,6 +741,7 @@ extern int rs6000_default_long_calls;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0\t\t\t\t\t\t   \\\n+   , 0, 0                                          \\\n }\n \n #define MQ_REGNO     64\n@@ -727,6 +757,8 @@ extern int rs6000_default_long_calls;\n #define TOTAL_ALTIVEC_REGS\t(LAST_ALTIVEC_REGNO - FIRST_ALTIVEC_REGNO + 1)\n #define VRSAVE_REGNO\t\t109\n #define VSCR_REGNO\t\t110\n+#define SPE_ACC_REGNO\t\t111\n+#define SPEFSCR_REGNO\t\t112\n \n /* List the order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.\n@@ -750,6 +782,7 @@ extern int rs6000_default_long_calls;\n \tctr\t\t(not saved; when we have the choice ctr is better)\n \tlr\t\t(saved)\n         cr5, r1, r2, ap, xer, vrsave, vscr (fixed)\n+\tspe_acc, spefscr (fixed)\n \n \tAltiVec registers:\n \tv0 - v1         (not saved or used for anything)\n@@ -781,6 +814,7 @@ extern int rs6000_default_long_calls;\n    96, 95, 94, 93, 92, 91,\t\t\t\t\\\n    108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98,\t\\\n    97, 109, 110\t\t\t\t\t\t\\\n+   , 111, 112                                              \\\n }\n \n /* True if register is floating-point.  */\n@@ -795,6 +829,9 @@ extern int rs6000_default_long_calls;\n /* True if register is an integer register.  */\n #define INT_REGNO_P(N) ((N) <= 31 || (N) == ARG_POINTER_REGNUM)\n \n+/* SPE SIMD registers are just the GPRs.  */\n+#define SPE_SIMD_REGNO_P(N) ((N) <= 31)\n+\n /* True if register is the XER register.  */\n #define XER_REGNO_P(N) ((N) == XER_REGNO)\n \n@@ -806,12 +843,18 @@ extern int rs6000_default_long_calls;\n    This is ordinarily the length in words of a value of mode MODE\n    but can be less for certain modes in special long registers.\n \n+   For the SPE, GPRs are 64 bits but only 32 bits are visible in\n+   scalar instructions.  The upper 32 bits are only available to the\n+   SIMD instructions.\n+\n    POWER and PowerPC GPRs hold 32 bits worth;\n    PowerPC64 GPRs and FPRs point register holds 64 bits worth.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n   (FP_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD) \\\n+   : (SPE_SIMD_REGNO_P (REGNO) && TARGET_SPE && SPE_VECTOR_MODE (MODE))   \\\n+   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_SPE_WORD - 1) / UNITS_PER_SPE_WORD) \\\n    : ALTIVEC_REGNO_P (REGNO)\t\t\t\t\t\t\\\n    ? ((GET_MODE_SIZE (MODE) + UNITS_PER_ALTIVEC_WORD - 1) / UNITS_PER_ALTIVEC_WORD) \\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n@@ -822,12 +865,18 @@ extern int rs6000_default_long_calls;\n \t  || (MODE) == V4SFmode\t\t\\\n \t  || (MODE) == V4SImode)\n \n+#define SPE_VECTOR_MODE(MODE)\t\t\\\n+\t((MODE) == V4HImode          \t\\\n+         || (MODE) == V2SFmode          \\\n+         || (MODE) == V2SImode)\n+\n /* Define this macro to be nonzero if the port is prepared to handle\n    insns involving vector mode MODE.  At the very least, it must have\n    move patterns for this mode.  */\n \n-#define VECTOR_MODE_SUPPORTED_P(MODE)\t\\\n-\t(TARGET_ALTIVEC && ALTIVEC_VECTOR_MODE (MODE))\n+#define VECTOR_MODE_SUPPORTED_P(MODE)\t\t\t\\\n+        ((TARGET_SPE && SPE_VECTOR_MODE (MODE))\t\t\\\n+\t || (TARGET_ALTIVEC && ALTIVEC_VECTOR_MODE (MODE)))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    For POWER and PowerPC, the GPRs can hold any mode, but the float\n@@ -841,6 +890,7 @@ extern int rs6000_default_long_calls;\n     || (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n \t&& GET_MODE_SIZE (MODE) == UNITS_PER_FP_WORD))\t\t\t\\\n    : ALTIVEC_REGNO_P (REGNO) ? ALTIVEC_VECTOR_MODE (MODE)\t\t\\\n+   : SPE_SIMD_REGNO_P (REGNO) && TARGET_SPE && SPE_VECTOR_MODE (MODE) ? 1 \\\n    : CR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_CC\t\t\\\n    : XER_REGNO_P (REGNO) ? (MODE) == PSImode\t\t\t\t\\\n    : ! INT_REGNO_P (REGNO) ? (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n@@ -905,6 +955,20 @@ extern int rs6000_default_long_calls;\n \n #define BRANCH_COST 3\n \n+\n+/* A fixed register used at prologue and epilogue generation to fix\n+   addressing modes.  The SPE needs heavy addressing fixes at the last\n+   minute, and it's best to save a register for it.\n+\n+   AltiVec also needs fixes, but we've gotten around using r11, which\n+   is actually wrong because when use_backchain_to_restore_sp is true,\n+   we end up clobbering r11.\n+\n+   The AltiVec case needs to be fixed.  Dunno if we should break ABI\n+   compatability and reserve a register for it as well..  */\n+\n+#define FIXED_SCRATCH (TARGET_SPE ? 14 : 11)\n+\n /* Define this macro to change register usage conditional on target flags.\n    Set MQ register fixed (already call_used) if not POWER architecture\n    (RIOS1, RIOS2, RSC, and PPC601) so that it will not be allocated.\n@@ -919,7 +983,7 @@ extern int rs6000_default_long_calls;\n   if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n     fixed_regs[13] = call_used_regs[13]\t\t\t\t\t\\\n       = call_really_used_regs[13] = 1; \t\t\t\t\t\\\n-  if (TARGET_SOFT_FLOAT)\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\t\t\t\t\\\n     for (i = 32; i < 64; i++)\t\t\t\t\t\t\\\n       fixed_regs[i] = call_used_regs[i]\t\t\t\t\t\\\n         = call_really_used_regs[i] = 1;\t\t\t\t\t\\\n@@ -937,6 +1001,13 @@ extern int rs6000_default_long_calls;\n       = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n   if (TARGET_ALTIVEC)                                                   \\\n     global_regs[VSCR_REGNO] = 1;                                        \\\n+  if (TARGET_SPE)\t\t\t\t\t\t\t\\\n+    {                                                                   \\\n+      global_regs[SPEFSCR_REGNO] = 1;\t\t\t\t\t\\\n+      fixed_regs[FIXED_SCRATCH]\t\t\t\t\t\t\\\n+        = call_used_regs[FIXED_SCRATCH]\t\t\t\t\t\\\n+\t= call_really_used_regs[FIXED_SCRATCH] = 1; \t\t\t\\\n+    }                                                                   \\\n   if (! TARGET_ALTIVEC)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\t\\\n@@ -1022,6 +1093,8 @@ enum reg_class\n   ALTIVEC_REGS,\n   VRSAVE_REGS,\n   VSCR_REGS,\n+  SPE_ACC_REGS,\n+  SPEFSCR_REGS,\n   NON_SPECIAL_REGS,\n   MQ_REGS,\n   LINK_REGS,\n@@ -1050,6 +1123,8 @@ enum reg_class\n   \"ALTIVEC_REGS\",\t\t\t\t\t\t\t\\\n   \"VRSAVE_REGS\",\t\t\t\t\t\t\t\\\n   \"VSCR_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"SPE_ACC_REGS\",                                                       \\\n+  \"SPEFSCR_REGS\",                                                       \\\n   \"NON_SPECIAL_REGS\",\t\t\t\t\t\t\t\\\n   \"MQ_REGS\",\t\t\t\t\t\t\t\t\\\n   \"LINK_REGS\",\t\t\t\t\t\t\t\t\\\n@@ -1077,6 +1152,8 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0xffffe000, 0x00001fff }, /* ALTIVEC_REGS */     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00002000 }, /* VRSAVE_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00004000 }, /* VSCR_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00008000 }, /* SPE_ACC_REGS */     \\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00010000 }, /* SPEFSCR_REGS */     \\\n   { 0xffffffff, 0xffffffff, 0x00000008, 0x00000000 }, /* NON_SPECIAL_REGS */ \\\n   { 0x00000000, 0x00000000, 0x00000001, 0x00000000 }, /* MQ_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000002, 0x00000000 }, /* LINK_REGS */\t     \\\n@@ -1110,6 +1187,8 @@ enum reg_class\n   : (REGNO) == XER_REGNO ? XER_REGS\t\t\\\n   : (REGNO) == VRSAVE_REGNO ? VRSAVE_REGS\t\\\n   : (REGNO) == VSCR_REGNO ? VRSAVE_REGS\t\\\n+  : (REGNO) == SPE_ACC_REGNO ? SPE_ACC_REGS\t\\\n+  : (REGNO) == SPEFSCR_REGNO ? SPEFSCR_REGS\t\\\n   : NO_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n@@ -1289,6 +1368,7 @@ typedef struct rs6000_stack {\n   int lr_save_offset;\t\t/* offset to save LR from initial SP */\n   int cr_save_offset;\t\t/* offset to save CR from initial SP */\n   int vrsave_save_offset;\t/* offset to save VRSAVE from initial SP */\n+  int spe_gp_save_offset;\t/* offset to save spe 64-bit gprs  */\n   int toc_save_offset;\t\t/* offset to save the TOC pointer */\n   int varargs_save_offset;\t/* offset to save the varargs registers */\n   int ehrd_offset;\t\t/* offset to EH return data */\n@@ -1306,6 +1386,8 @@ typedef struct rs6000_stack {\n   int vrsave_size;\t\t/* size to hold VRSAVE if not in save_size */\n   int altivec_padding_size;\t/* size of altivec alignment padding if\n \t\t\t\t   not in save_size */\n+  int spe_gp_size;\t\t/* size of 64-bit GPR save size for SPE */\n+  int spe_padding_size;\n   int toc_size;\t\t\t/* size to hold TOC if not in save_size */\n   int total_size;\t\t/* total bytes allocated for stack */\n } rs6000_stack_t;\n@@ -1424,6 +1506,8 @@ typedef struct rs6000_stack {\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0.\n \n+   On the SPE, both FPs and vectors are returned in r3.\n+\n    On RS/6000 an integer value is in r3 and a floating-point value is in\n    fp1, unless -msoft-float.  */\n \n@@ -1434,7 +1518,11 @@ typedef struct rs6000_stack {\n \t       ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n \t       TREE_CODE (VALTYPE) == VECTOR_TYPE\t\t\\\n \t       && TARGET_ALTIVEC ? ALTIVEC_ARG_RETURN\t\t\\\n-\t       : TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_HARD_FLOAT \\\n+\t       : TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n+\t         && TARGET_SPE_ABI && !TARGET_FPRS\t\t\\\n+\t       ? GP_ARG_RETURN\t\t\t\t\t\\\n+\t       : TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n+\t\t && TARGET_HARD_FLOAT && TARGET_FPRS\t        \\\n                ? FP_ARG_RETURN : GP_ARG_RETURN)\n \n /* Define how to find the value returned by a library function\n@@ -1443,7 +1531,7 @@ typedef struct rs6000_stack {\n #define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n   gen_rtx_REG (MODE, ALTIVEC_VECTOR_MODE (MODE) ? ALTIVEC_ARG_RETURN\t\\\n \t\t     : GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n-\t\t     && TARGET_HARD_FLOAT\t\t\t\t\\\n+\t\t     && TARGET_HARD_FLOAT && TARGET_FPRS\t\t\\\n \t\t     ? FP_ARG_RETURN : GP_ARG_RETURN)\n \n /* The AIX ABI for the RS/6000 specifies that all structures are\n@@ -1601,7 +1689,7 @@ typedef struct rs6000_args\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE) \\\n   (GET_MODE_CLASS (MODE) == MODE_FLOAT  \\\n    && (CUM).fregno <= FP_ARG_MAX_REG    \\\n-   && TARGET_HARD_FLOAT)\n+   && TARGET_HARD_FLOAT && TARGET_FPRS)\n \n /* Non-zero if we can use an AltiVec register to pass this arg.  */\n #define USE_ALTIVEC_FOR_ARG_P(CUM,MODE,TYPE)\t\\\n@@ -1937,6 +2025,9 @@ typedef struct rs6000_args\n \n #define TOC_RELATIVE_EXPR_P(X) (toc_relative_expr_p (X))\n \n+/* SPE offset addressing is limited to 5-bits.  */\n+#define SPE_CONST_OFFSET_OK(x) (((x) & ~0x1f) == 0)\n+\n #define LEGITIMATE_CONSTANT_POOL_ADDRESS_P(X)\t\t\t\t\\\n   (TARGET_TOC\t\t\t\t\t\t\t\t\\\n   && GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n@@ -1961,6 +2052,9 @@ typedef struct rs6000_args\n   && LEGITIMATE_ADDRESS_INTEGER_P (XEXP (X, 1), 0)\t\t\\\n   && (! ALTIVEC_VECTOR_MODE (MODE)                            \\\n       || (GET_CODE (XEXP (X,1)) == CONST_INT && INTVAL (XEXP (X,1)) == 0)) \\\n+  && (! SPE_VECTOR_MODE (MODE)\t\t\t\t\t\\\n+      || (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n+\t  && SPE_CONST_OFFSET_OK (INTVAL (XEXP (X, 1)))))\t\\\n   && (((MODE) != DFmode && (MODE) != DImode)\t\t\t\\\n       || (TARGET_32BIT\t\t\t\t\t\t\\\n \t  ? LEGITIMATE_ADDRESS_INTEGER_P (XEXP (X, 1), 4) \t\\\n@@ -1988,7 +2082,7 @@ typedef struct rs6000_args\n    && ! flag_pic && ! TARGET_TOC\t\t\t\\\n    && GET_MODE_NUNITS (MODE) == 1\t\t\t\\\n    && (GET_MODE_BITSIZE (MODE) <= 32 \t\t\t\\\n-       || (TARGET_HARD_FLOAT && (MODE) == DFmode))\t\\\n+       || (TARGET_HARD_FLOAT && TARGET_FPRS && (MODE) == DFmode))\t\\\n    && GET_CODE (X) == LO_SUM\t\t\t\t\\\n    && GET_CODE (XEXP (X, 0)) == REG\t\t\t\\\n    && INT_REG_OK_FOR_BASE_P (XEXP (X, 0), (STRICT))\t\\\n@@ -2315,6 +2409,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \t\t? COSTS_N_INSNS (21)\t\t\t\t\t\\\n \t\t: COSTS_N_INSNS (37));\t\t\t\t\t\\\n       case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n+      case PROCESSOR_PPC8540:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC7400:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (19);\t\t\t\t\t\\\n       case PROCESSOR_PPC7450:\t\t\t\t\t\t\\\n@@ -2600,6 +2695,8 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   &rs6000_reg_names[108][0],\t/* v31  */\t\t\t\t\\\n   &rs6000_reg_names[109][0],\t/* vrsave  */\t\t\t\t\\\n   &rs6000_reg_names[110][0],\t/* vscr  */\t\t\t\t\\\n+  &rs6000_reg_names[111][0],\t/* spe_acc */\t\t\t\t\\\n+  &rs6000_reg_names[112][0],\t/* spefscr */\t\t\t\t\\\n }\n \n /* print-rtl can't handle the above REGISTER_NAMES, so define the\n@@ -2624,6 +2721,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n     \"v16\", \"v17\", \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\",             \\\n     \"v24\", \"v25\", \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\",             \\\n     \"vrsave\", \"vscr\"\t\t\t\t\t\t\t\\\n+    , \"spe_acc\", \"spefscr\"                                              \\\n }\n \n /* Table of additional register names to use in user input.  */\n@@ -2654,6 +2752,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"v24\",  101},{\"v25\",  102},{\"v26\",  103},{\"v27\",  104},      \\\n   {\"v28\",  105},{\"v29\",  106},{\"v30\",  107},{\"v31\",  108},      \\\n   {\"vrsave\", 109}, {\"vscr\", 110},\t\t\t\t\\\n+  {\"spe_acc\", 111}, {\"spefscr\", 112},\t\t\t\t\\\n   /* no additional names for: mq, lr, ctr, ap */\t\t\\\n   {\"cr0\",  68}, {\"cr1\",  69}, {\"cr2\",  70}, {\"cr3\",  71},\t\\\n   {\"cr4\",  72}, {\"cr5\",  73}, {\"cr6\",  74}, {\"cr7\",  75},\t\\\n@@ -3003,4 +3102,246 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_ABS_V4SF,\n   ALTIVEC_BUILTIN_ABS_V8HI,\n   ALTIVEC_BUILTIN_ABS_V16QI\n+  /* SPE builtins.  */\n+  , SPE_BUILTIN_EVADDW,\n+  SPE_BUILTIN_EVAND,\n+  SPE_BUILTIN_EVANDC,\n+  SPE_BUILTIN_EVDIVWS,\n+  SPE_BUILTIN_EVDIVWU,\n+  SPE_BUILTIN_EVEQV,\n+  SPE_BUILTIN_EVFSADD,\n+  SPE_BUILTIN_EVFSDIV,\n+  SPE_BUILTIN_EVFSMUL,\n+  SPE_BUILTIN_EVFSSUB,\n+  SPE_BUILTIN_EVLDDX,\n+  SPE_BUILTIN_EVLDHX,\n+  SPE_BUILTIN_EVLDWX,\n+  SPE_BUILTIN_EVLHHESPLATX,\n+  SPE_BUILTIN_EVLHHOSSPLATX,\n+  SPE_BUILTIN_EVLHHOUSPLATX,\n+  SPE_BUILTIN_EVLWHEX,\n+  SPE_BUILTIN_EVLWHOSX,\n+  SPE_BUILTIN_EVLWHOUX,\n+  SPE_BUILTIN_EVLWHSPLATX,\n+  SPE_BUILTIN_EVLWWSPLATX,\n+  SPE_BUILTIN_EVMERGEHI,\n+  SPE_BUILTIN_EVMERGEHILO,\n+  SPE_BUILTIN_EVMERGELO,\n+  SPE_BUILTIN_EVMERGELOHI,\n+  SPE_BUILTIN_EVMHEGSMFAA,\n+  SPE_BUILTIN_EVMHEGSMFAN,\n+  SPE_BUILTIN_EVMHEGSMIAA,\n+  SPE_BUILTIN_EVMHEGSMIAN,\n+  SPE_BUILTIN_EVMHEGUMIAA,\n+  SPE_BUILTIN_EVMHEGUMIAN,\n+  SPE_BUILTIN_EVMHESMF,\n+  SPE_BUILTIN_EVMHESMFA,\n+  SPE_BUILTIN_EVMHESMFAAW,\n+  SPE_BUILTIN_EVMHESMFANW,\n+  SPE_BUILTIN_EVMHESMI,\n+  SPE_BUILTIN_EVMHESMIA,\n+  SPE_BUILTIN_EVMHESMIAAW,\n+  SPE_BUILTIN_EVMHESMIANW,\n+  SPE_BUILTIN_EVMHESSF,\n+  SPE_BUILTIN_EVMHESSFA,\n+  SPE_BUILTIN_EVMHESSFAAW,\n+  SPE_BUILTIN_EVMHESSFANW,\n+  SPE_BUILTIN_EVMHESSIAAW,\n+  SPE_BUILTIN_EVMHESSIANW,\n+  SPE_BUILTIN_EVMHEUMI,\n+  SPE_BUILTIN_EVMHEUMIA,\n+  SPE_BUILTIN_EVMHEUMIAAW,\n+  SPE_BUILTIN_EVMHEUMIANW,\n+  SPE_BUILTIN_EVMHEUSIAAW,\n+  SPE_BUILTIN_EVMHEUSIANW,\n+  SPE_BUILTIN_EVMHOGSMFAA,\n+  SPE_BUILTIN_EVMHOGSMFAN,\n+  SPE_BUILTIN_EVMHOGSMIAA,\n+  SPE_BUILTIN_EVMHOGSMIAN,\n+  SPE_BUILTIN_EVMHOGUMIAA,\n+  SPE_BUILTIN_EVMHOGUMIAN,\n+  SPE_BUILTIN_EVMHOSMF,\n+  SPE_BUILTIN_EVMHOSMFA,\n+  SPE_BUILTIN_EVMHOSMFAAW,\n+  SPE_BUILTIN_EVMHOSMFANW,\n+  SPE_BUILTIN_EVMHOSMI,\n+  SPE_BUILTIN_EVMHOSMIA,\n+  SPE_BUILTIN_EVMHOSMIAAW,\n+  SPE_BUILTIN_EVMHOSMIANW,\n+  SPE_BUILTIN_EVMHOSSF,\n+  SPE_BUILTIN_EVMHOSSFA,\n+  SPE_BUILTIN_EVMHOSSFAAW,\n+  SPE_BUILTIN_EVMHOSSFANW,\n+  SPE_BUILTIN_EVMHOSSIAAW,\n+  SPE_BUILTIN_EVMHOSSIANW,\n+  SPE_BUILTIN_EVMHOUMI,\n+  SPE_BUILTIN_EVMHOUMIA,\n+  SPE_BUILTIN_EVMHOUMIAAW,\n+  SPE_BUILTIN_EVMHOUMIANW,\n+  SPE_BUILTIN_EVMHOUSIAAW,\n+  SPE_BUILTIN_EVMHOUSIANW,\n+  SPE_BUILTIN_EVMWHSMF,\n+  SPE_BUILTIN_EVMWHSMFA,\n+  SPE_BUILTIN_EVMWHSMI,\n+  SPE_BUILTIN_EVMWHSMIA,\n+  SPE_BUILTIN_EVMWHSSF,\n+  SPE_BUILTIN_EVMWHSSFA,\n+  SPE_BUILTIN_EVMWHUMI,\n+  SPE_BUILTIN_EVMWHUMIA,\n+  SPE_BUILTIN_EVMWLSMF,\n+  SPE_BUILTIN_EVMWLSMFA,\n+  SPE_BUILTIN_EVMWLSMFAAW,\n+  SPE_BUILTIN_EVMWLSMFANW,\n+  SPE_BUILTIN_EVMWLSMIAAW,\n+  SPE_BUILTIN_EVMWLSMIANW,\n+  SPE_BUILTIN_EVMWLSSF,\n+  SPE_BUILTIN_EVMWLSSFA,\n+  SPE_BUILTIN_EVMWLSSFAAW,\n+  SPE_BUILTIN_EVMWLSSFANW,\n+  SPE_BUILTIN_EVMWLSSIAAW,\n+  SPE_BUILTIN_EVMWLSSIANW,\n+  SPE_BUILTIN_EVMWLUMI,\n+  SPE_BUILTIN_EVMWLUMIA,\n+  SPE_BUILTIN_EVMWLUMIAAW,\n+  SPE_BUILTIN_EVMWLUMIANW,\n+  SPE_BUILTIN_EVMWLUSIAAW,\n+  SPE_BUILTIN_EVMWLUSIANW,\n+  SPE_BUILTIN_EVMWSMF,\n+  SPE_BUILTIN_EVMWSMFA,\n+  SPE_BUILTIN_EVMWSMFAA,\n+  SPE_BUILTIN_EVMWSMFAN,\n+  SPE_BUILTIN_EVMWSMI,\n+  SPE_BUILTIN_EVMWSMIA,\n+  SPE_BUILTIN_EVMWSMIAA,\n+  SPE_BUILTIN_EVMWSMIAN,\n+  SPE_BUILTIN_EVMWHSSFAA,\n+  SPE_BUILTIN_EVMWSSF,\n+  SPE_BUILTIN_EVMWSSFA,\n+  SPE_BUILTIN_EVMWSSFAA,\n+  SPE_BUILTIN_EVMWSSFAN,\n+  SPE_BUILTIN_EVMWUMI,\n+  SPE_BUILTIN_EVMWUMIA,\n+  SPE_BUILTIN_EVMWUMIAA,\n+  SPE_BUILTIN_EVMWUMIAN,\n+  SPE_BUILTIN_EVNAND,\n+  SPE_BUILTIN_EVNOR,\n+  SPE_BUILTIN_EVOR,\n+  SPE_BUILTIN_EVORC,\n+  SPE_BUILTIN_EVRLW,\n+  SPE_BUILTIN_EVSLW,\n+  SPE_BUILTIN_EVSRWS,\n+  SPE_BUILTIN_EVSRWU,\n+  SPE_BUILTIN_EVSTDDX,\n+  SPE_BUILTIN_EVSTDHX,\n+  SPE_BUILTIN_EVSTDWX,\n+  SPE_BUILTIN_EVSTWHEX,\n+  SPE_BUILTIN_EVSTWHOX,\n+  SPE_BUILTIN_EVSTWWEX,\n+  SPE_BUILTIN_EVSTWWOX,\n+  SPE_BUILTIN_EVSUBFW,\n+  SPE_BUILTIN_EVXOR,\n+  SPE_BUILTIN_EVABS,\n+  SPE_BUILTIN_EVADDSMIAAW,\n+  SPE_BUILTIN_EVADDSSIAAW,\n+  SPE_BUILTIN_EVADDUMIAAW,\n+  SPE_BUILTIN_EVADDUSIAAW,\n+  SPE_BUILTIN_EVCNTLSW,\n+  SPE_BUILTIN_EVCNTLZW,\n+  SPE_BUILTIN_EVEXTSB,\n+  SPE_BUILTIN_EVEXTSH,\n+  SPE_BUILTIN_EVFSABS,\n+  SPE_BUILTIN_EVFSCFSF,\n+  SPE_BUILTIN_EVFSCFSI,\n+  SPE_BUILTIN_EVFSCFUF,\n+  SPE_BUILTIN_EVFSCFUI,\n+  SPE_BUILTIN_EVFSCTSF,\n+  SPE_BUILTIN_EVFSCTSI,\n+  SPE_BUILTIN_EVFSCTSIZ,\n+  SPE_BUILTIN_EVFSCTUF,\n+  SPE_BUILTIN_EVFSCTUI,\n+  SPE_BUILTIN_EVFSCTUIZ,\n+  SPE_BUILTIN_EVFSNABS,\n+  SPE_BUILTIN_EVFSNEG,\n+  SPE_BUILTIN_EVMRA,\n+  SPE_BUILTIN_EVNEG,\n+  SPE_BUILTIN_EVRNDW,\n+  SPE_BUILTIN_EVSUBFSMIAAW,\n+  SPE_BUILTIN_EVSUBFSSIAAW,\n+  SPE_BUILTIN_EVSUBFUMIAAW,\n+  SPE_BUILTIN_EVSUBFUSIAAW,\n+  SPE_BUILTIN_EVADDIW,\n+  SPE_BUILTIN_EVLDD,\n+  SPE_BUILTIN_EVLDH,\n+  SPE_BUILTIN_EVLDW,\n+  SPE_BUILTIN_EVLHHESPLAT,\n+  SPE_BUILTIN_EVLHHOSSPLAT,\n+  SPE_BUILTIN_EVLHHOUSPLAT,\n+  SPE_BUILTIN_EVLWHE,\n+  SPE_BUILTIN_EVLWHOS,\n+  SPE_BUILTIN_EVLWHOU,\n+  SPE_BUILTIN_EVLWHSPLAT,\n+  SPE_BUILTIN_EVLWWSPLAT,\n+  SPE_BUILTIN_EVRLWI,\n+  SPE_BUILTIN_EVSLWI,\n+  SPE_BUILTIN_EVSRWIS,\n+  SPE_BUILTIN_EVSRWIU,\n+  SPE_BUILTIN_EVSTDD,\n+  SPE_BUILTIN_EVSTDH,\n+  SPE_BUILTIN_EVSTDW,\n+  SPE_BUILTIN_EVSTWHE,\n+  SPE_BUILTIN_EVSTWHO,\n+  SPE_BUILTIN_EVSTWWE,\n+  SPE_BUILTIN_EVSTWWO,\n+  SPE_BUILTIN_EVSUBIFW,\n+\n+  /* Compares.  */\n+  SPE_BUILTIN_EVCMPEQ,\n+  SPE_BUILTIN_EVCMPGTS,\n+  SPE_BUILTIN_EVCMPGTU,\n+  SPE_BUILTIN_EVCMPLTS,\n+  SPE_BUILTIN_EVCMPLTU,\n+  SPE_BUILTIN_EVFSCMPEQ,\n+  SPE_BUILTIN_EVFSCMPGT,\n+  SPE_BUILTIN_EVFSCMPLT,\n+  SPE_BUILTIN_EVFSTSTEQ,\n+  SPE_BUILTIN_EVFSTSTGT,\n+  SPE_BUILTIN_EVFSTSTLT,\n+\n+  /* EVSEL compares.  */\n+  SPE_BUILTIN_EVSEL_CMPEQ,\n+  SPE_BUILTIN_EVSEL_CMPGTS,\n+  SPE_BUILTIN_EVSEL_CMPGTU,\n+  SPE_BUILTIN_EVSEL_CMPLTS,\n+  SPE_BUILTIN_EVSEL_CMPLTU,\n+  SPE_BUILTIN_EVSEL_FSCMPEQ,\n+  SPE_BUILTIN_EVSEL_FSCMPGT,\n+  SPE_BUILTIN_EVSEL_FSCMPLT,\n+  SPE_BUILTIN_EVSEL_FSTSTEQ,\n+  SPE_BUILTIN_EVSEL_FSTSTGT,\n+  SPE_BUILTIN_EVSEL_FSTSTLT,\n+\n+  SPE_BUILTIN_EVSPLATFI,\n+  SPE_BUILTIN_EVSPLATI,\n+  SPE_BUILTIN_EVMWHSSMAA,\n+  SPE_BUILTIN_EVMWHSMFAA,\n+  SPE_BUILTIN_EVMWHSMIAA,\n+  SPE_BUILTIN_EVMWHUSIAA,\n+  SPE_BUILTIN_EVMWHUMIAA,\n+  SPE_BUILTIN_EVMWHSSFAN,\n+  SPE_BUILTIN_EVMWHSSIAN,\n+  SPE_BUILTIN_EVMWHSMFAN,\n+  SPE_BUILTIN_EVMWHSMIAN,\n+  SPE_BUILTIN_EVMWHUSIAN,\n+  SPE_BUILTIN_EVMWHUMIAN,\n+  SPE_BUILTIN_EVMWHGSSFAA,\n+  SPE_BUILTIN_EVMWHGSMFAA,\n+  SPE_BUILTIN_EVMWHGSMIAA,\n+  SPE_BUILTIN_EVMWHGUMIAA,\n+  SPE_BUILTIN_EVMWHGSSFAN,\n+  SPE_BUILTIN_EVMWHGSMFAN,\n+  SPE_BUILTIN_EVMWHGSMIAN,\n+  SPE_BUILTIN_EVMWHGUMIAN,\n+  SPE_BUILTIN_MTSPEFSCR,\n+  SPE_BUILTIN_MFSPEFSCR,\n+  SPE_BUILTIN_BRINC\n };"}, {"sha": "52c86079cb6d3f0158577e11784640f48b026787", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 273, "deletions": 111, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -2039,9 +2039,18 @@\n \t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(minus:SI (match_dup 2) (match_dup 3)))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER || TARGET_ISEL\"\n   \"\n-{ operands[3] = gen_reg_rtx (SImode); }\")\n+{\n+  if (TARGET_ISEL)\n+    {\n+      operands[2] = force_reg (SImode, operands[2]);\n+      rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]);\n+      DONE;\n+    }\n+\n+  operands[3] = gen_reg_rtx (SImode);\n+}\")\n \n (define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -2064,9 +2073,17 @@\n \t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (match_dup 3) (match_dup 1)))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER || TARGET_ISEL\"\n   \"\n-{ operands[3] = gen_reg_rtx (SImode); }\")\n+{\n+  if (TARGET_ISEL)\n+    {\n+      operands[2] = force_reg (SImode, operands[2]);\n+      rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]);\n+      DONE;\n+    }\n+  operands[3] = gen_reg_rtx (SImode);\n+}\")\n \n (define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -2091,9 +2108,14 @@\n \t\t\t\t       (minus:SI (match_dup 4) (match_dup 3))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(minus:SI (match_dup 2) (match_dup 3)))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER || TARGET_ISEL\"\n   \"\n {\n+  if (TARGET_ISEL)\n+    {\n+      rs6000_emit_minmax (operands[0], UMIN, operands[1], operands[2]);\n+      DONE;\n+    }\n   operands[3] = gen_reg_rtx (SImode);\n   operands[4] = gen_reg_rtx (SImode);\n   operands[5] = GEN_INT (-2147483647 - 1);\n@@ -2109,9 +2131,14 @@\n \t\t\t\t       (minus:SI (match_dup 4) (match_dup 3))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (match_dup 3) (match_dup 1)))]\n-  \"TARGET_POWER\"\n+  \"TARGET_POWER || TARGET_ISEL\"\n   \"\n {\n+  if (TARGET_ISEL)\n+    {\n+      rs6000_emit_minmax (operands[0], UMAX, operands[1], operands[2]);\n+      DONE;\n+    }\n   operands[3] = gen_reg_rtx (SImode);\n   operands[4] = gen_reg_rtx (SImode);\n   operands[5] = GEN_INT (-2147483647 - 1);\n@@ -2210,7 +2237,12 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_POWER)\n+  if (TARGET_ISEL)\n+    {\n+      emit_insn (gen_abssi2_isel (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else if (! TARGET_POWER)\n     {\n       emit_insn (gen_abssi2_nopower (operands[0], operands[1]));\n       DONE;\n@@ -2223,11 +2255,30 @@\n   \"TARGET_POWER\"\n   \"abs %0,%1\")\n \n+(define_insn_and_split \"abssi2_isel\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n+   (clobber (match_scratch:SI 2 \"=b\"))\n+   (clobber (match_scratch:CC 3 \"=y\"))]\n+  \"TARGET_ISEL\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (neg:SI (match_dup 1)))\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 1)\n+\t\t    (const_int 0)))\n+   (set (match_dup 0)\n+\t(if_then_else:SI (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"\")\n+\n (define_insn_and_split \"abssi2_nopower\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n         (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_ISEL\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n@@ -5035,7 +5086,7 @@\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"*\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n@@ -5048,35 +5099,47 @@\n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"aux_truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] 0))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"negsf2\"\n+(define_expand \"negsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"\")\n+\n+(define_insn \"*negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"abssf2\"\n+(define_expand \"abssf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"\")\n+\n+(define_insn \"*abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5091,15 +5154,15 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fadds %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5114,15 +5177,15 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsubs %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5137,15 +5200,15 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fmuls %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5160,15 +5223,15 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fdivs %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5177,7 +5240,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5186,7 +5249,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5195,7 +5258,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5204,7 +5267,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5213,7 +5276,7 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5222,7 +5285,7 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5231,7 +5294,7 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5240,27 +5303,27 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWER2 && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5274,7 +5337,7 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"minsf3\"\n@@ -5283,28 +5346,76 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:SF 3 \"min_max_operator\"\n \t [(match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]), \n \t\t      operands[1], operands[2]);\n   DONE;\n }\")\n \n+(define_expand \"movsicc\"\n+   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t (if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")\n+\t\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_ISEL\"\n+  \"\n+{\n+  if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n+    DONE;\n+  else\n+    FAIL;\n+}\")\n+\n+;; We use the BASE_REGS for the isel input operands because, if rA is\n+;; 0, the value of 0 is placed in rD upon truth.  Similarly for rB\n+;; because we may switch the operands and rB may end up being rA.\n+;;\n+;; We need 2 patterns: an unsigned and a signed pattern.  We could\n+;; leave out the mode in operand 4 and use one pattern, but reload can\n+;; change the mode underneath our feet and then gets confused trying\n+;; to reload the value.\n+(define_insn \"isel_signed\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(if_then_else:SI\n+\t (match_operator 1 \"comparison_operator\"\n+\t\t\t [(match_operand:CC 4 \"cc_reg_operand\" \"y\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:SI 2 \"gpc_reg_operand\" \"b\")\n+\t (match_operand:SI 3 \"gpc_reg_operand\" \"b\")))]\n+  \"TARGET_ISEL\"\n+  \"*\n+{ return output_isel (operands); }\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"isel_unsigned\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(if_then_else:SI\n+\t (match_operator 1 \"comparison_operator\"\n+\t\t\t [(match_operand:CCUNS 4 \"cc_reg_operand\" \"y\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:SI 2 \"gpc_reg_operand\" \"b\")\n+\t (match_operand:SI 3 \"gpc_reg_operand\" \"b\")))]\n+  \"TARGET_ISEL\"\n+  \"*\n+{ return output_isel (operands); }\"\n+  [(set_attr \"length\" \"4\")])\n+\n (define_expand \"movsfcc\"\n    [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5319,7 +5430,7 @@\n \t\t\t     (match_operand:SF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5329,60 +5440,60 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5391,7 +5502,7 @@\n \t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5400,7 +5511,7 @@\n \t(minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5409,7 +5520,7 @@\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5418,14 +5529,14 @@\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5438,7 +5549,7 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"mindf3\"\n@@ -5447,15 +5558,15 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:DF 3 \"min_max_operator\"\n \t [(match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]), \n@@ -5468,7 +5579,7 @@\n \t (if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5483,7 +5594,7 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5499,6 +5610,18 @@\n \f\n ;; Conversions to and from floating-point.\n \n+(define_expand \"fixunssfsi2\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(unsigned_fix:SI (fix:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\"))))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"\")\n+\n+(define_expand \"fix_truncsfsi2\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"\")\n+\n ; For each of these conversions, there is a define_expand, a define_insn\n ; with a '#' template, and a define_split (with C code).  The idea is\n ; to allow constant folding with the template of the define_insn,\n@@ -5512,7 +5635,7 @@\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (match_dup 6))])]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (TARGET_POWERPC64)\n@@ -5539,7 +5662,7 @@\n    (clobber (match_operand:DF 4 \"memory_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"=r\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   [(set_attr \"length\" \"24\")])\n \n@@ -5551,7 +5674,7 @@\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n    (use (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n@@ -5581,14 +5704,20 @@\n   DONE;\n }\")\n \n+(define_expand \"floatunssisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+        (unsigned_float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"\")\n+\n (define_expand \"floatunssidf2\"\n   [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t\t   (unsigned_float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (TARGET_POWERPC64)\n@@ -5614,7 +5743,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n    (clobber (match_operand:DF 4 \"memory_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=f\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   [(set_attr \"length\" \"20\")])\n \n@@ -5625,7 +5754,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(unsigned_float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n    (use (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n@@ -5657,7 +5786,7 @@\n \t\t   (fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DImode);\n@@ -5669,7 +5798,7 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"memory_operand\" \"=o\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   [(set_attr \"length\" \"16\")])\n \n@@ -5678,7 +5807,7 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n@@ -5705,14 +5834,20 @@\n (define_insn \"fctiwz\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n \t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))] 10))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_expand \"floatsisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+        (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"\")\n+\n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5722,7 +5857,7 @@\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"\"\n   [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n@@ -5737,7 +5872,7 @@\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"\"\n   [(set (match_dup 3) (zero_extend:DI (match_dup 1)))\n@@ -5749,7 +5884,7 @@\n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5758,7 +5893,8 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && flag_unsafe_math_optimizations\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && flag_unsafe_math_optimizations\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -7981,7 +8117,7 @@\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n         (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"*\n {\n   switch (which_alternative)\n@@ -8012,7 +8148,7 @@\n   [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n                            (match_operand 2 \"\" \"\")))\n \t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"stfd %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -8021,7 +8157,7 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n         (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"@\n    lfs %0,lo16(%2)(%1)\n    {l|lwz} %0,lo16(%2)(%1)\"\n@@ -8032,7 +8168,7 @@\n   [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\")))\n \t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"@\n    stfs %0,lo16(%2)(%1)\n    {st|stw} %0,lo16(%2)(%1)\"\n@@ -8214,7 +8350,8 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=!r,!r,m,f,f,m,!r,!r\")\n \t(match_operand:SF 1 \"input_operand\" \"r,m,r,f,m,f,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n-   || gpc_reg_operand (operands[1], SFmode)) && TARGET_HARD_FLOAT\"\n+   || gpc_reg_operand (operands[1], SFmode))\n+   && (TARGET_HARD_FLOAT && TARGET_FPRS)\"\n   \"@\n    mr %0,%1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n@@ -8231,7 +8368,8 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,r\")\n \t(match_operand:SF 1 \"input_operand\" \"r,m,r,I,L,R,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n-   || gpc_reg_operand (operands[1], SFmode)) && TARGET_SOFT_FLOAT\"\n+   || gpc_reg_operand (operands[1], SFmode))\n+   && (TARGET_SOFT_FLOAT || !TARGET_FPRS)\"\n   \"@\n    mr %0,%1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n@@ -8341,7 +8479,7 @@\n (define_insn \"*movdf_hardfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,!r,!r,!r,f,f,m\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F,f,m,f\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8434,7 +8572,7 @@\n (define_insn \"*movdf_softfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n-  \"! TARGET_POWERPC64 && TARGET_SOFT_FLOAT\n+  \"! TARGET_POWERPC64 && (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8475,7 +8613,7 @@\n (define_insn \"*movdf_hardfloat64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,!r,!r,!r,f,f,m\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F,f,m,f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8494,7 +8632,7 @@\n (define_insn \"*movdf_softfloat64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n-  \"TARGET_POWERPC64 && TARGET_SOFT_FLOAT\n+  \"TARGET_POWERPC64 && (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8510,13 +8648,15 @@\n (define_expand \"movtf\"\n   [(set (match_operand:TF 0 \"general_operand\" \"\")\n \t(match_operand:TF 1 \"any_operand\" \"\"))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"{ rs6000_emit_move (operands[0], operands[1], TFmode); DONE; }\")\n \n (define_insn \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f,f,m,!r,!r,!r\")\n \t(match_operand:TF 1 \"input_operand\" \"f,m,f,G,H,F\"))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\n    && (gpc_reg_operand (operands[0], TFmode)\n        || gpc_reg_operand (operands[1], TFmode))\"\n   \"*\n@@ -8549,7 +8689,8 @@\n (define_split\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:TF 1 \"const_double_operand\" \"\"))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 0)\n \t(float_extend:TF (match_dup 3)))]\n@@ -8562,7 +8703,8 @@\n (define_insn_and_split \"extenddftf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:TF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"\"\n   [(set (match_dup 2) (match_dup 3))]\n@@ -8575,7 +8717,8 @@\n (define_insn_and_split \"extendsftf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"\"\n   [(set (match_dup 2) (match_dup 3))]\n@@ -8588,7 +8731,8 @@\n (define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"8\")])\n@@ -8597,7 +8741,8 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT\n+   && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8611,7 +8756,7 @@\n         (float:TF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n-   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8624,7 +8769,8 @@\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n         (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8637,7 +8783,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n         (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n-   && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8649,7 +8795,8 @@\n (define_insn_and_split \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8661,7 +8808,8 @@\n (define_insn \"negtf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:TF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"*\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]) + 1)\n@@ -8675,7 +8823,8 @@\n (define_insn \"abstf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:TF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"*\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]) + 1)\n@@ -8689,7 +8838,8 @@\n (define_insn \"\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:TF (abs:TF (match_operand:TF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"*\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]) + 1)\n@@ -9726,7 +9876,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n@@ -9738,7 +9888,7 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n@@ -9750,7 +9900,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_SOFT_FLOAT && TARGET_UPDATE\"\n+  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\"\n   \"@\n    {lux|lwzux} %3,%0,%2\n    {lu|lwzu} %3,%2(%0)\"\n@@ -9762,7 +9912,7 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_SOFT_FLOAT && TARGET_UPDATE\"\n+  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\"\n   \"@\n    {stux|stwux} %3,%0,%2\n    {stu|stwu} %3,%2(%0)\"\n@@ -9774,7 +9924,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n@@ -9786,7 +9936,7 @@\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\"\n@@ -9800,7 +9950,7 @@\n    (set (match_operand:DF 2 \"gpc_reg_operand\" \"=f\")\n \t(match_operand:DF 3 \"memory_operand\" \"\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT\n+   && TARGET_HARD_FLOAT && TARGET_FPRS\n    && registers_ok_for_quad_peep (operands[0], operands[2])\n    && ! MEM_VOLATILE_P (operands[1]) && ! MEM_VOLATILE_P (operands[3])\n    && addrs_ok_for_quad_peep (XEXP (operands[1], 0), XEXP (operands[3], 0))\"\n@@ -9812,7 +9962,7 @@\n    (set (match_operand:DF 2 \"memory_operand\" \"\")\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT\n+   && TARGET_HARD_FLOAT && TARGET_FPRS\n    && registers_ok_for_quad_peep (operands[1], operands[3])\n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_quad_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n@@ -10623,7 +10773,7 @@\n (define_expand \"cmpdf\"\n   [(set (cc0) (compare (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t\t       (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   rs6000_compare_op0 = operands[0];\n@@ -10635,7 +10785,8 @@\n (define_expand \"cmptf\"\n   [(set (cc0) (compare (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n \t\t       (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT\n+   && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n   rs6000_compare_op0 = operands[0];\n@@ -10942,15 +11093,15 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n (define_insn \"*cmpdf_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n@@ -10959,7 +11110,8 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:TF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:TF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n+  \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_LONG_DOUBLE_128\"\n   \"fcmpu %0,%1,%2\\;bne %0,$+4\\;fcmpu %0,%L1,%L2\"\n   [(set_attr \"type\" \"fpcompare\")\n    (set_attr \"length\" \"12\")])\n@@ -10981,6 +11133,14 @@\n   [(set_attr \"type\" \"cr_logical\")\n    (set_attr \"length\" \"12\")])\n \n+;; Same as above, but get the OV/ORDERED bit.\n+(define_insn \"move_from_CR_ov_bit\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] 724))]\n+  \"TARGET_ISEL\"\n+  \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%t1,1\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:DI 1 \"scc_comparison_operator\"\n@@ -11395,7 +11555,7 @@\n \t(lshiftrt:SI (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 31)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64 && !TARGET_ISEL\"\n   \"{ai|addic} %2,%1,-1\\;{sfe|subfe} %0,%2,%1\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -16131,3 +16291,5 @@\n   \"vspltisb %2,0\\;vsubsws %3,%2,%1\\;vmaxsw %0,%1,%3\"\n   [(set_attr \"type\" \"altivec\")\n    (set_attr \"length\" \"12\")])\n+\n+(include \"spe.md\")"}, {"sha": "bac1c386300e0bc50db9da24fcf428f00897333b", "filename": "gcc/config/rs6000/spe.h", "status": "added", "additions": 1099, "deletions": 0, "changes": 1099, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Fspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Fspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.h?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -0,0 +1,1099 @@\n+/* PowerPC E500 user include file.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+#ifndef _SPE_H\n+#define _SPE_H\n+\n+#define __vector __attribute__((vector_size(8)))\n+\n+typedef int \t \t\tint32_t;\n+typedef unsigned \t\tuint32_t;\n+typedef short    \t\tint16_t;\n+typedef unsigned short  \tuint16_t;\n+typedef long long \t\tint64_t;\n+typedef unsigned long long\tuint64_t;\n+\n+typedef short \t\t\t__vector __ev64_s16__;\n+typedef unsigned short  \t__vector __ev64_u16__;\n+typedef int \t\t\t__vector __ev64_s32__;\n+typedef unsigned \t\t__vector __ev64_u32__;\n+typedef long long \t\t__ev64_s64__;\n+typedef unsigned long long \t__ev64_u64__;\n+typedef float \t\t\t__vector __ev64_fs__;\n+\n+typedef int \t\t\t__vector __ev64_opaque__;\n+\n+#define __v2si __ev64_opaque__\n+#define __v2sf __ev64_fs__\n+\n+#define __ev_addw(a,b) __builtin_spe_evaddw((__v2si) (a), (__v2si) (b))\n+#define __ev_addiw(a,b) __builtin_spe_evaddiw ((__v2si) (a), (b))\n+#define __ev_subfw(a,b) __builtin_spe_evsubfw ((__v2si) (a), (__v2si) (b))\n+#define __ev_subifw(a,b) __builtin_spe_evsubifw ((__v2si) (a), (b))\n+#define __ev_abs(a) __builtin_spe_evabs ((__v2si) (a))\n+#define __ev_neg(a) __builtin_spe_evneg ((__v2si) (a))\n+#define __ev_extsb(a) __builtin_spe_evextsb ((__v2si) (a))\n+#define __ev_extsh(a) __builtin_spe_evextsh ((__v2si) (a))\n+#define __ev_and(a,b) __builtin_spe_evand ((__v2si) (a), (__v2si) (b))\n+#define __ev_or(a,b) __builtin_spe_evor ((__v2si) (a), (__v2si) (b))\n+#define __ev_xor(a,b) __builtin_spe_evxor ((__v2si) (a), (__v2si) (b))\n+#define __ev_nand(a,b) __builtin_spe_evnand ((__v2si) (a), (__v2si) (b))\n+#define __ev_nor(a,b) __builtin_spe_evnor ((__v2si) (a), (__v2si) (b))\n+#define __ev_eqv(a,b) __builtin_spe_eveqv ((__v2si) (a), (__v2si) (b))\n+#define __ev_andc(a,b) __builtin_spe_evandc ((__v2si) (a), (__v2si) (b))\n+#define __ev_orc(a,b) __builtin_spe_evorc ((__v2si) (a), (__v2si) (b))\n+#define __ev_rlw(a,b) __builtin_spe_evrlw ((__v2si) (a), (__v2si) (b))\n+#define __ev_rlwi(a,b) __builtin_spe_evrlwi ((__v2si) (a), (b))\n+#define __ev_slw(a,b) __builtin_spe_evslw ((__v2si) (a), (__v2si) (b))\n+#define __ev_slwi(a,b) __builtin_spe_evslwi ((__v2si) (a), (b))\n+#define __ev_srws(a,b) __builtin_spe_evsrws ((__v2si) (a), (__v2si) (b))\n+#define __ev_srwu(a,b) __builtin_spe_evsrwu ((__v2si) (a), (__v2si) (b))\n+#define __ev_srwis(a,b) __builtin_spe_evsrwis ((__v2si) (a), (b))\n+#define __ev_srwiu(a,b) __builtin_spe_evsrwiu ((__v2si) (a), (b))\n+#define __ev_cntlzw(a) __builtin_spe_evcntlzw ((__v2si) (a))\n+#define __ev_cntlsw(a) __builtin_spe_evcntlsw ((__v2si) (a))\n+#define __ev_rndw(a) __builtin_spe_evrndw ((__v2si) (a))\n+#define __ev_mergehi(a,b) __builtin_spe_evmergehi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mergelo(a,b) __builtin_spe_evmergelo ((__v2si) (a), (__v2si) (b))\n+#define __ev_mergelohi(a,b) __builtin_spe_evmergelohi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mergehilo(a,b) __builtin_spe_evmergehilo ((__v2si) (a), (__v2si) (b))\n+#define __ev_splati(a) __builtin_spe_evsplati ((a))\n+#define __ev_splatfi(a) __builtin_spe_evsplatfi ((a))\n+#define __ev_divws(a,b) __builtin_spe_evdivws ((__v2si) (a), (__v2si) (b))\n+#define __ev_divwu(a,b) __builtin_spe_evdivwu ((__v2si) (a), (__v2si) (b))\n+#define __ev_mra(a) __builtin_spe_evmra ((__v2si) (a))\n+\n+#define __brinc __builtin_spe_brinc\n+\n+/* Loads.  */\n+\n+#define __ev_lddx(a,b) __builtin_spe_evlddx ((void *)(a), (b))\n+#define __ev_ldwx(a,b) __builtin_spe_evldwx ((void *)(a), (b))\n+#define __ev_ldhx(a,b) __builtin_spe_evldhx ((void *)(a), (b))\n+#define __ev_lwhex(a,b) __builtin_spe_evlwhex ((a), (b))\n+#define __ev_lwhoux(a,b) __builtin_spe_evlwhoux ((a), (b))\n+#define __ev_lwhosx(a,b) __builtin_spe_evlwhosx ((a), (b))\n+#define __ev_lwwsplatx(a,b) __builtin_spe_evlwwsplatx ((a), (b))\n+#define __ev_lwhsplatx(a,b) __builtin_spe_evlwhsplatx ((a), (b))\n+#define __ev_lhhesplatx(a,b) __builtin_spe_evlhhesplatx ((a), (b))\n+#define __ev_lhhousplatx(a,b) __builtin_spe_evlhhousplatx ((a), (b))\n+#define __ev_lhhossplatx(a,b) __builtin_spe_evlhhossplatx ((a), (b))\n+#define __ev_ldd(a,b) __builtin_spe_evldd ((void *)(a), (b))\n+#define __ev_ldw(a,b) __builtin_spe_evldw ((void *)(a), (b))\n+#define __ev_ldh(a,b) __builtin_spe_evldh ((void *)(a), (b))\n+#define __ev_lwhe(a,b) __builtin_spe_evlwhe ((a), (b))\n+#define __ev_lwhou(a,b) __builtin_spe_evlwhou ((a), (b))\n+#define __ev_lwhos(a,b) __builtin_spe_evlwhos ((a), (b))\n+#define __ev_lwwsplat(a,b) __builtin_spe_evlwwsplat ((a), (b))\n+#define __ev_lwhsplat(a,b) __builtin_spe_evlwhsplat ((a), (b))\n+#define __ev_lhhesplat(a,b) __builtin_spe_evlhhesplat ((a), (b))\n+#define __ev_lhhousplat(a,b) __builtin_spe_evlhhousplat ((a), (b))\n+#define __ev_lhhossplat(a,b) __builtin_spe_evlhhossplat ((a), (b))\n+\n+/* Stores.  */\n+\n+#define __ev_stddx(a,b,c) __builtin_spe_evstddx ((__v2si)(a), (void *)(b), (c))\n+#define __ev_stdwx(a,b,c) __builtin_spe_evstdwx ((__v2si)(a), (void *)(b), (c))\n+#define __ev_stdhx(a,b,c) __builtin_spe_evstdhx ((__v2si)(a), (void *)(b), (c))\n+#define __ev_stwwex(a,b,c) __builtin_spe_evstwwex ((__v2si)(a), (b), (c))\n+#define __ev_stwwox(a,b,c) __builtin_spe_evstwwox ((__v2si)(a), (b), (c))\n+#define __ev_stwhex(a,b,c) __builtin_spe_evstwhex ((__v2si)(a), (b), (c))\n+#define __ev_stwhox(a,b,c) __builtin_spe_evstwhox ((__v2si)(a), (b), (c))\n+#define __ev_stdd(a,b,c) __builtin_spe_evstdd ((__v2si)(a), (b), (c))\n+#define __ev_stdw(a,b,c) __builtin_spe_evstdw ((__v2si)(a), (b), (c))\n+#define __ev_stdh(a,b,c) __builtin_spe_evstdh ((__v2si)(a), (b), (c))\n+#define __ev_stwwe(a,b,c) __builtin_spe_evstwwe ((__v2si)(a), (b), (c))\n+#define __ev_stwwo(a,b,c) __builtin_spe_evstwwo ((__v2si)(a), (b), (c))\n+#define __ev_stwhe(a,b,c) __builtin_spe_evstwhe ((__v2si)(a), (b), (c))\n+#define __ev_stwho(a,b,c) __builtin_spe_evstwho ((__v2si)(a), (b), (c))\n+\n+/* Fixed point complex.  */\n+\n+#define __ev_mhossf(a, b) __builtin_spe_evmhossf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmf(a, b) __builtin_spe_evmhosmf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmi(a, b) __builtin_spe_evmhosmi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhoumi(a, b) __builtin_spe_evmhoumi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessf(a, b) __builtin_spe_evmhessf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmf(a, b) __builtin_spe_evmhesmf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmi(a, b) __builtin_spe_evmhesmi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheumi(a, b) __builtin_spe_evmheumi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhossfa(a, b) __builtin_spe_evmhossfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmfa(a, b) __builtin_spe_evmhosmfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmia(a, b) __builtin_spe_evmhosmia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhoumia(a, b) __builtin_spe_evmhoumia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessfa(a, b) __builtin_spe_evmhessfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmfa(a, b) __builtin_spe_evmhesmfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmia(a, b) __builtin_spe_evmhesmia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheumia(a, b) __builtin_spe_evmheumia ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mhoumf __ev_mhoumi\n+#define __ev_mheumf __ev_mheumi\n+#define __ev_mhoumfa __ev_mhoumia\n+#define __ev_mheumfa __ev_mheumia\n+\n+#define __ev_mhossfaaw(a, b) __builtin_spe_evmhossfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhossiaaw(a, b) __builtin_spe_evmhossiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmfaaw(a, b) __builtin_spe_evmhosmfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmiaaw(a, b) __builtin_spe_evmhosmiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhousiaaw(a, b) __builtin_spe_evmhousiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhoumiaaw(a, b) __builtin_spe_evmhoumiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessfaaw(a, b) __builtin_spe_evmhessfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessiaaw(a, b) __builtin_spe_evmhessiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmfaaw(a, b) __builtin_spe_evmhesmfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmiaaw(a, b) __builtin_spe_evmhesmiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheusiaaw(a, b) __builtin_spe_evmheusiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheumiaaw(a, b) __builtin_spe_evmheumiaaw ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mhousfaaw __ev_mhousiaaw\n+#define __ev_mhoumfaaw __ev_mhoumiaaw\n+#define __ev_mheusfaaw __ev_mheusiaaw\n+#define __ev_mheumfaaw __ev_mheumiaaw\n+\n+#define __ev_mhossfanw(a, b) __builtin_spe_evmhossfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhossianw(a, b) __builtin_spe_evmhossianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmfanw(a, b) __builtin_spe_evmhosmfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhosmianw(a, b) __builtin_spe_evmhosmianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhousianw(a, b) __builtin_spe_evmhousianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhoumianw(a, b) __builtin_spe_evmhoumianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessfanw(a, b) __builtin_spe_evmhessfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhessianw(a, b) __builtin_spe_evmhessianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmfanw(a, b) __builtin_spe_evmhesmfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhesmianw(a, b) __builtin_spe_evmhesmianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheusianw(a, b) __builtin_spe_evmheusianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mheumianw(a, b) __builtin_spe_evmheumianw ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mhousfanw __ev_mhousianw\n+#define __ev_mhoumfanw __ev_mhoumianw\n+#define __ev_mheusfanw __ev_mheusianw\n+#define __ev_mheumfanw __ev_mheumianw\n+\n+#define __ev_mhogsmfaa(a, b) __builtin_spe_evmhogsmfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhogsmiaa(a, b) __builtin_spe_evmhogsmiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhogumiaa(a, b) __builtin_spe_evmhogumiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegsmfaa(a, b) __builtin_spe_evmhegsmfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegsmiaa(a, b) __builtin_spe_evmhegsmiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegumiaa(a, b) __builtin_spe_evmhegumiaa ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mhogumfaa __ev_mhogumiaa\n+#define __ev_mhegumfaa __ev_mhegumiaa\n+\n+#define __ev_mhogsmfan(a, b) __builtin_spe_evmhogsmfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhogsmian(a, b) __builtin_spe_evmhogsmian ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhogumian(a, b) __builtin_spe_evmhogumian ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegsmfan(a, b) __builtin_spe_evmhegsmfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegsmian(a, b) __builtin_spe_evmhegsmian ((__v2si) (a), (__v2si) (b))\n+#define __ev_mhegumian(a, b) __builtin_spe_evmhegumian ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mhogumfan __ev_mhogumian\n+#define __ev_mhegumfan __ev_mhegumian\n+\n+#define __ev_mwhssf(a, b) __builtin_spe_evmwhssf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmf(a, b) __builtin_spe_evmwhsmf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmi(a, b) __builtin_spe_evmwhsmi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhumi(a, b) __builtin_spe_evmwhumi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhssfa(a, b) __builtin_spe_evmwhssfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmfa(a, b) __builtin_spe_evmwhsmfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmia(a, b) __builtin_spe_evmwhsmia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhumia(a, b) __builtin_spe_evmwhumia ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwhumf __ev_mwhumi\n+#define __ev_mwhumfa __ev_mwhumia\n+\n+#define __ev_mwlssf(a, b) __builtin_spe_evmwlssf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmf(a, b) __builtin_spe_evmwlsmf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlumi(a, b) __builtin_spe_evmwlumi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlssfa(a, b) __builtin_spe_evmwlssfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmfa(a, b) __builtin_spe_evmwlsmfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlumia(a, b) __builtin_spe_evmwlumia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlumiaaw(a, b) __builtin_spe_evmwlumiaaw ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwlufi __ev_mwlumi\n+#define __ev_mwlufia __ev_mwlumia\n+\n+#define __ev_mwlssfaaw(a, b) __builtin_spe_evmwlssfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlssiaaw(a, b) __builtin_spe_evmwlssiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmfaaw(a, b) __builtin_spe_evmwlsmfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmiaaw(a, b) __builtin_spe_evmwlsmiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlusiaaw(a, b) __builtin_spe_evmwlusiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlusiaaw(a, b) __builtin_spe_evmwlusiaaw ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwlumfaaw __ev_mwlumiaaw\n+#define __ev_mwlusfaaw __ev_mwlusiaaw\n+\n+#define __ev_mwlssfanw(a, b) __builtin_spe_evmwlssfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlssianw(a, b) __builtin_spe_evmwlssianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmfanw(a, b) __builtin_spe_evmwlsmfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlsmianw(a, b) __builtin_spe_evmwlsmianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlusianw(a, b) __builtin_spe_evmwlusianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwlumianw(a, b) __builtin_spe_evmwlumianw ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwlumfanw __ev_mwlumianw\n+#define __ev_mwlusfanw __ev_mwlusianw\n+\n+#define __ev_mwssf(a, b) __builtin_spe_evmwssf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmf(a, b) __builtin_spe_evmwsmf ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmi(a, b) __builtin_spe_evmwsmi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwumi(a, b) __builtin_spe_evmwumi ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwssfa(a, b) __builtin_spe_evmwssfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmfa(a, b) __builtin_spe_evmwsmfa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmia(a, b) __builtin_spe_evmwsmia ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwumia(a, b) __builtin_spe_evmwumia ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwumf __ev_mwumi\n+#define __ev_mwumfa __ev_mwumia\n+\n+#define __ev_mwssfaa(a, b) __builtin_spe_evmwssfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmfaa(a, b) __builtin_spe_evmwsmfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmiaa(a, b) __builtin_spe_evmwsmiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwumiaa(a, b) __builtin_spe_evmwumiaa ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwumfaa __ev_mwumiaa\n+\n+#define __ev_mwssfan(a, b) __builtin_spe_evmwssfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmfan(a, b) __builtin_spe_evmwsmfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwsmian(a, b) __builtin_spe_evmwsmian ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwumian(a, b) __builtin_spe_evmwumian ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwumfan __ev_mwumian\n+\n+#define __ev_addssiaaw(a) __builtin_spe_evaddssiaaw ((__v2si) (a))\n+#define __ev_addsmiaaw(a) __builtin_spe_evaddsmiaaw ((__v2si) (a))\n+#define __ev_addusiaaw(a) __builtin_spe_evaddusiaaw ((__v2si) (a))\n+#define __ev_addumiaaw(a) __builtin_spe_evaddumiaaw ((__v2si) (a))\n+\n+#define __ev_addusfaaw __ev_addusiaaw\n+#define __ev_addumfaaw __ev_addumiaaw\n+#define __ev_addsmfaaw __ev_addsmiaaw\n+#define __ev_addssfaaw __ev_addssiaaw\n+\n+#define __ev_subfssiaaw(a) __builtin_spe_evsubfssiaaw ((__v2si) (a))\n+#define __ev_subfsmiaaw(a) __builtin_spe_evsubfsmiaaw ((__v2si) (a))\n+#define __ev_subfusiaaw(a) __builtin_spe_evsubfusiaaw ((__v2si) (a))\n+#define __ev_subfumiaaw(a) __builtin_spe_evsubfumiaaw ((__v2si) (a))\n+\n+#define __ev_subfusfaaw __ev_subfusiaaw\n+#define __ev_subfumfaaw __ev_subfumiaaw\n+#define __ev_subfsmfaaw __ev_subfsmiaaw\n+#define __ev_subfssfaaw __ev_subfssiaaw\n+\n+/* Floating Point SIMD Instructions  */\n+\n+/* These all return V2SF, but we need to cast them to V2SI because the SPE\n+   expect all functions to be __ev64_opaque__.  */\n+\n+#define __ev_fsabs(a) ((__v2si) __builtin_spe_evfsabs ((__v2sf) a))\n+#define __ev_fsnabs(a) ((__v2si) __builtin_spe_evfsnabs ((__v2sf) a))\n+#define __ev_fsneg(a) ((__v2si) __builtin_spe_evfsneg ((__v2sf) a))\n+#define __ev_fsadd(a, b) ((__v2si) __builtin_spe_evfsadd ((__v2sf) a, (__v2sf) b))\n+#define __ev_fssub(a, b) ((__v2si) __builtin_spe_evfssub ((__v2sf) a, (__v2sf) b))\n+#define __ev_fsmul(a, b) ((__v2si) __builtin_spe_evfsmul ((__v2sf) a, (__v2sf) b))\n+#define __ev_fsdiv(a, b) ((__v2si) __builtin_spe_evfsdiv ((__v2sf) a, (__v2sf) b))\n+#define __ev_fscfui(a) ((__v2si) __builtin_spe_evfscfui ((__v2si) a))\n+#define __ev_fscfsi(a) ((__v2si) __builtin_spe_evfscfsi ((__v2sf) a))\n+#define __ev_fscfuf(a) ((__v2si) __builtin_spe_evfscfuf ((__v2sf) a))\n+#define __ev_fscfsf(a) ((__v2si) __builtin_spe_evfscfsf ((__v2sf) a))\n+#define __ev_fsctui(a) ((__v2si) __builtin_spe_evfsctui ((__v2sf) a))\n+#define __ev_fsctsi(a) ((__v2si) __builtin_spe_evfsctsi ((__v2sf) a))\n+#define __ev_fsctuf(a) ((__v2si) __builtin_spe_evfsctuf ((__v2sf) a))\n+#define __ev_fsctsf(a) ((__v2si) __builtin_spe_evfsctsf ((__v2sf) a))\n+#define __ev_fsctuiz(a) ((__v2si) __builtin_spe_evfsctuiz ((__v2sf) a))\n+#define __ev_fsctsiz(a) ((__v2si) __builtin_spe_evfsctsiz ((__v2sf) a))\n+\n+/* NOT SUPPORTED IN FIRST e500, support via two instructions:  */\n+\n+#define __ev_mwhusfaaw  __ev_mwhusiaaw\n+#define __ev_mwhumfaaw  __ev_mwhumiaaw\n+#define __ev_mwhusfanw  __ev_mwhusianw\n+#define __ev_mwhumfanw  __ev_mwhumianw\n+#define __ev_mwhgumfaa  __ev_mwhgumiaa\n+#define __ev_mwhgumfan  __ev_mwhgumian\n+\n+#define __ev_mwhgssfaa(a, b) __internal_ev_mwhgssfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgsmfaa(a, b) __internal_ev_mwhgsmfaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgsmiaa(a, b) __internal_ev_mwhgsmiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgumiaa(a, b) __internal_ev_mwhgumiaa ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgssfan(a, b) __internal_ev_mwhgssfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgsmfan(a, b) __internal_ev_mwhgsmfan ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgsmian(a, b) __internal_ev_mwhgsmian ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhgumian(a, b) __internal_ev_mwhgumian ((__v2si) (a), (__v2si) (b))\n+\n+#define __ev_mwhssiaaw(a, b) __internal_ev_mwhssiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhssfaaw(a, b) __internal_ev_mwhssfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmfaaw(a, b) __internal_ev_mwhsmfaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmiaaw(a, b) __internal_ev_mwhsmiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhusiaaw(a, b) __internal_ev_mwhusiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhumiaaw(a, b) __internal_ev_mwhumiaaw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhssfanw(a, b) __internal_ev_mwhssfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhssianw(a, b) __internal_ev_mwhssianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmfanw(a, b) __internal_ev_mwhsmfanw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhsmianw(a, b) __internal_ev_mwhsmianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhusianw(a, b) __internal_ev_mwhusianw ((__v2si) (a), (__v2si) (b))\n+#define __ev_mwhumianw(a, b) __internal_ev_mwhumianw ((__v2si) (a), (__v2si) (b))\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhssfaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhssf (a, b);\n+  return __ev_addssiaaw(t);\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhssiaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+  \n+  t = __ev_mwhsmi (a,b);\n+  return __ev_addssiaaw (t);\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhsmfaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmf (a,b);\n+  return __ev_addsmiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhsmiaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmi (a,b);\n+  return __ev_addsmiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhusiaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a,b);\n+  return __ev_addusiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhumiaaw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a,b);\n+  return __ev_addumiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhssfanw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhssf (a,b);\n+  return __ev_subfssiaaw (t);\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhssianw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmi (a,b);\n+  return __ev_subfssiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhsmfanw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmf (a,b);\n+  return __ev_subfsmiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhsmianw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmi (a,b);\n+  return __ev_subfsmiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhusianw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a,b);\n+  return __ev_subfusiaaw (t);\n+}\n+ \n+static inline __ev64_opaque__\n+__internal_ev_mwhumianw (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a,b);\n+  return __ev_subfumiaaw (t);\n+}\n+\n+/* ** */\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgssfaa (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhssf (a, b);\n+  return __ev_mwsmiaa (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgsmfaa (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmf (a, b);\n+  return __ev_mwsmiaa (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgsmiaa (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmi (a, b);\n+  return __ev_mwsmiaa (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgumiaa (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a, b);\n+  return __ev_mwumiaa (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgssfan (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhssf (a, b);\n+  return __ev_mwsmian (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgsmfan (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmf (a, b);\n+  return __ev_mwsmian (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgsmian (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhsmi (a, b);\n+  return __ev_mwsmian (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+static inline __ev64_opaque__\n+__internal_ev_mwhgumian (__ev64_opaque__ a, __ev64_opaque__ b)\n+{\n+  __ev64_opaque__ t;\n+\n+  t = __ev_mwhumi (a, b);\n+  return __ev_mwumian (t, ((__ev64_opaque__){1, 1}));\n+}\n+\n+/* END OF NOT SUPPORTED */\n+\n+/* __ev_create* functions.  */\n+\n+#define __ev_create_ufix32_u32 __ev_create_u32\n+#define __ev_create_sfix32_s32 __ev_create_s32\n+#define __ev_create_sfix32_fs __ev_create_fs\n+#define __ev_create_ufix32_fs __ev_create_fs\n+\n+static inline __ev64_opaque__\n+__ev_create_s16 (int16_t a, int16_t b, int16_t c, int16_t d)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int16_t i[4];\n+  } u;\n+\n+  u.i[0] = a;\n+  u.i[1] = b;\n+  u.i[2] = c;\n+  u.i[3] = d;\n+\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_u16 (uint16_t a, uint16_t b, uint16_t c, uint16_t d)\n+\t\t\t\t  \n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint16_t i[4];\n+  } u;\n+\n+  u.i[0] = a;\n+  u.i[1] = b;\n+  u.i[2] = c;\n+  u.i[3] = d;\n+\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_s32 (int32_t a, int32_t b)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+   int32_t i[2];\n+  } u;\n+\n+  u.i[0] = a;\n+  u.i[1] = b;\n+\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_u32 (uint32_t a, uint32_t b)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint32_t i[2];\n+  } u;\n+\n+  u.i[0] = a;\n+  u.i[1] = b;\n+\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_fs (float a, float b)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    float f[2];\n+  } u;\n+\n+  u.f[0] = a;\n+  u.f[1] = b;\n+  \n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_s64 (int64_t a)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int64_t i;\n+  } u;\n+\n+  u.i = a;\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_create_u64 (uint64_t a)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint64_t i;\n+  } u;\n+\n+  u.i = a;\n+  return u.v;\n+}\n+\n+#define __ev_convert_u64(a) ((uint64_t) (a))\n+#define __ev_convert_s64(a) ((int64_t) (a))\n+\n+/* __ev_get_* functions.  */\n+\n+#define __ev_get_upper_u32(a) __ev_get_u32_internal ((__ev64_opaque__) a, 0)\n+#define __ev_get_lower_u32(a) __ev_get_u32_internal ((__ev64_opaque__) a, 1)\n+#define __ev_get_upper_s32(a) __ev_get_s32_internal ((__ev64_opaque__) a, 0)\n+#define __ev_get_lower_s32(a) __ev_get_s32_internal ((__ev64_opaque__) a, 1)\n+#define __ev_get_upper_fs(a) __ev_get_fs_internal ((__ev64_opaque__) a, 0)\n+#define __ev_get_lower_fs(a) __ev_get_fs_internal ((__ev64_opaque__) a, 1)\n+#define __ev_get_upper_ufix32_u32(a) __ev_get_upper_u32(a)\n+#define __ev_get_lower_ufix32_u32(a) __ev_get_lower_u32(a)\n+#define __ev_get_upper_sfix32_s32(a) __ev_get_upper_s32(a)\n+#define __ev_get_lower_sfix32_s32(a) __ev_get_lower_s32(a)\n+#define __ev_get_upper_sfix32_fs(a) __ev_get_upper_fs(a)\n+#define __ev_get_lower_sfix32_fs(a) __ev_get_lower_fs(a)\n+#define __ev_get_upper_ufix32_fs(a) __ev_get_upper_fs(a)\n+#define __ev_get_lower_ufix32_fs(a) __ev_get_lower_fs(a)\n+\n+#define __ev_get_u32(a, b) __ev_get_u32_internal ((__ev64_opaque__) a, b)\n+#define __ev_get_s32(a, b) __ev_get_s32_internal ((__ev64_opaque__) a, b)\n+#define __ev_get_fs(a, b) __ev_get_fs_internal ((__ev64_opaque__) a, b)\n+#define __ev_get_u16(a, b) __ev_get_u16_internal ((__ev64_opaque__) a, b)\n+#define __ev_get_s16(a, b) __ev_get_s16_internal ((__ev64_opaque__) a, b)\n+\n+#define __ev_get_ufix32_u32(a, b) __ev_get_u32 (a, b)\n+#define __ev_get_sfix32_s32(a, b) __ev_get_s32 (a, b)\n+#define __ev_get_ufix32_fs(a, b) __ev_get_fs (a, b)\n+#define __ev_get_sfix32_fs(a, b) __ev_get_fs (a, b)\n+\n+static inline uint32_t\n+__ev_get_u32_internal (__ev64_opaque__ a, uint32_t pos)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint32_t i[2];\n+  } u;\n+\n+  u.v = a;\n+  return u.i[pos];\n+}\n+\n+static inline int32_t\n+__ev_get_s32_internal (__ev64_opaque__ a, uint32_t pos)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int32_t i[2];\n+  } u;\n+\n+  u.v = a;\n+  return u.i[pos];\n+}\n+\n+static inline float\n+__ev_get_fs_internal (__ev64_opaque__ a, uint32_t pos)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    float f[2];\n+  } u;\n+\n+  u.v = a;\n+  return u.f[pos];\n+}\n+\n+static inline uint16_t\n+__ev_get_u16_internal (__ev64_opaque__ a, uint32_t pos)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint16_t i[4];\n+  } u;\n+\n+  u.v = a;\n+  return u.i[pos];\n+}\n+\n+static inline int16_t\n+__ev_get_s16_internal (__ev64_opaque__ a, uint32_t pos)\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int16_t i[4];\n+  } u;\n+\n+  u.v = a;\n+  return u.i[pos];\n+}\n+\n+/* __ev_set_* functions.  */\n+\n+#define __ev_set_u32(a, b, c) __ev_set_u32_internal ((__ev64_opaque__) a, b, c)\n+#define __ev_set_s32(a, b, c) __ev_set_s32_internal ((__ev64_opaque__) a, b, c)\n+#define __ev_set_fs(a, b, c) __ev_set_fs_internal ((__ev64_opaque__) a, b, c)\n+#define __ev_set_u16(a, b, c) __ev_set_u16_internal ((__ev64_opaque__) a, b, c)\n+#define __ev_set_s16(a, b, c) __ev_set_s16_internal ((__ev64_opaque__) a, b, c)\n+\n+#define __ev_set_ufix32_u32 __ev_set_u32\n+#define __ev_set_sfix32_s32 __ev_set_s32\n+#define __ev_set_ufix32_fs __ev_set_fs\n+#define __ev_set_sfix32_fs __ev_set_fs\n+\n+#define __ev_set_upper_u32(a, b) __ev_set_u32(a, b, 0)\n+#define __ev_set_lower_u32(a, b) __ev_set_u32 (a, b, 1)\n+#define __ev_set_upper_s32(a, b) __ev_set_s32 (a, b, 0)\n+#define __ev_set_lower_s32(a, b) __ev_set_s32 (a, b, 1)\n+#define __ev_set_upper_fs(a, b) __ev_set_fs (a, b, 0)\n+#define __ev_set_lower_fs(a, b) __ev_set_fs (a, b, 1)\n+#define __ev_set_upper_ufix32_u32 __ev_set_upper_u32\n+#define __ev_set_lower_ufix32_u32 __ev_set_lower_u32\n+#define __ev_set_upper_sfix32_s32 __ev_set_upper_s32\n+#define __ev_set_lower_sfix32_s32 __ev_set_lower_s32\n+#define __ev_set_upper_sfix32_fs __ev_set_upper_fs\n+#define __ev_set_lower_sfix32_fs __ev_set_lower_fs\n+#define __ev_set_upper_ufix32_fs __ev_set_upper_fs\n+#define __ev_set_lower_ufix32_fs __ev_set_lower_fs\n+\n+#define __ev_set_acc_vec64(a) __builtin_spe_evmra ((__ev64_opaque__)(a))\n+\n+static inline __ev64_opaque__\n+__ev_set_acc_u64 (uint64_t a)\n+{\n+  __ev_mra (a);\n+  return (__ev64_opaque__) a;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_acc_s64 (int64_t a)\n+{\n+  __ev_mra (a);\n+  return (__ev64_opaque__) a;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_u32_internal (__ev64_opaque__ a, uint32_t b, uint32_t pos )\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint32_t i[2];\n+  } u;\n+\n+  u.v = a;\n+  u.i[pos] = b;\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_s32_internal (__ev64_opaque__ a, int32_t b, uint32_t pos )\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int32_t i[2];\n+  } u;\n+\n+  u.v = a;\n+  u.i[pos] = b;\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_fs_internal (__ev64_opaque__ a, float b, uint32_t pos )\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    float f[2];\n+  } u;\n+\n+  u.v = a;\n+  u.f[pos] = b;\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_u16_internal (__ev64_opaque__ a, uint16_t b, uint32_t pos )\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    uint16_t i[4];\n+  } u;\n+\n+  u.v = a;\n+  u.i[pos] = b;\n+  return u.v;\n+}\n+\n+static inline __ev64_opaque__\n+__ev_set_s16_internal (__ev64_opaque__ a, int16_t b, uint32_t pos )\n+{\n+  union\n+  {\n+    __ev64_opaque__ v;\n+    int16_t i[4];\n+  } u;\n+\n+  u.v = a;\n+  u.i[pos] = b;\n+  return u.v;\n+}\n+\n+/* Predicates.  */\n+\n+#define __pred_all\t0\n+#define __pred_any\t1\n+#define __pred_upper\t2\n+#define __pred_lower\t3\n+\n+#define __ev_any_gts(a, b) \\\n+\t__builtin_spe_evcmpgts (__pred_any, (__v2si)(a), (__v2si)(b))\n+#define __ev_all_gts(a, b) \\\n+\t__builtin_spe_evcmpgts (__pred_all, (__v2si)(a), (__v2si)(b))\n+#define __ev_upper_gts(a, b) \\\n+\t__builtin_spe_evcmpgts (__pred_upper, (__v2si)(a), (__v2si)(b))\n+#define __ev_lower_gts(a, b) \\\n+\t__builtin_spe_evcmpgts (__pred_lower, (__v2si)(a), (__v2si)(b))\n+#define __ev_select_gts(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_gts ((__v2si)(a), (__v2si)(b), \\\n+\t\t\t\t\t   (__v2si)(c), (__v2si)(d)))\n+\n+#define __ev_any_gtu(a, b) \\\n+\t__builtin_spe_evcmpgtu (__pred_any, (__v2si)(a), (__v2si)(b))\n+#define __ev_all_gtu(a, b) \\\n+\t__builtin_spe_evcmpgtu (__pred_all, (__v2si)(a), (__v2si)(b))\n+#define __ev_upper_gtu(a, b) \\\n+\t__builtin_spe_evcmpgtu (__pred_upper, (__v2si)(a), (__v2si)(b))\n+#define __ev_lower_gtu(a, b) \\\n+\t__builtin_spe_evcmpgtu (__pred_lower, (__v2si)(a), (__v2si)(b))\n+#define __ev_select_gtu(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_gtu ((__v2si)(a), (__v2si)(b), \\\n+\t\t\t\t\t   (__v2si)(c), (__v2si)(d)))\n+\n+#define __ev_any_lts(a, b) \\\n+\t__builtin_spe_evcmplts (__pred_any, (__v2si)(a), (__v2si)(b))\n+#define __ev_all_lts(a, b) \\\n+\t__builtin_spe_evcmplts (__pred_all, (__v2si)(a), (__v2si)(b))\n+#define __ev_upper_lts(a, b) \\\n+\t__builtin_spe_evcmplts (__pred_upper, (__v2si)(a), (__v2si)(b))\n+#define __ev_lower_lts(a, b) \\\n+\t__builtin_spe_evcmplts (__pred_lower, (__v2si)(a), (__v2si)(b))\n+#define __ev_select_lts(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_lts ((__v2si)(a), (__v2si)(b), \\\n+\t\t\t\t\t   (__v2si)(c), (__v2si)(d)))\n+\n+#define __ev_any_ltu(a, b) \\\n+\t__builtin_spe_evcmpltu (__pred_any, (__v2si)(a), (__v2si)(b))\n+#define __ev_all_ltu(a, b) \\\n+\t__builtin_spe_evcmpltu (__pred_all, (__v2si)(a), (__v2si)(b))\n+#define __ev_upper_ltu(a, b) \\\n+\t__builtin_spe_evcmpltu (__pred_upper, (__v2si)(a), (__v2si)(b))\n+#define __ev_lower_ltu(a, b) \\\n+\t__builtin_spe_evcmpltu (__pred_lower, (__v2si)(a), (__v2si)(b))\n+#define __ev_select_ltu(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_ltu ((__v2si)(a), (__v2si)(b), \\\n+\t\t\t\t\t   (__v2si)(c), (__v2si)(d)))\n+#define __ev_any_eq(a, b) \\\n+\t__builtin_spe_evcmpeq (__pred_any, (__v2si)(a), (__v2si)(b))\n+#define __ev_all_eq(a, b) \\\n+\t__builtin_spe_evcmpeq (__pred_all, (__v2si)(a), (__v2si)(b))\n+#define __ev_upper_eq(a, b) \\\n+\t__builtin_spe_evcmpeq (__pred_upper, (__v2si)(a), (__v2si)(b))\n+#define __ev_lower_eq(a, b) \\\n+\t__builtin_spe_evcmpeq (__pred_lower, (__v2si)(a), (__v2si)(b))\n+#define __ev_select_eq(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_eq ((__v2si)(a), (__v2si)(b), \\\n+\t\t\t\t\t  (__v2si)(c), (__v2si)(d)))\n+\n+#define __ev_any_fs_gt(a, b) \\\n+\t__builtin_spe_evfscmpgt (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_gt(a, b) \\\n+\t__builtin_spe_evfscmpgt (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_gt(a, b) \\\n+\t__builtin_spe_evfscmpgt (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_gt(a, b) \\\n+\t__builtin_spe_evfscmpgt (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_gt(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fsgt ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t    (__v2sf)(c), (__v2sf)(d)))\n+\n+#define __ev_any_fs_lt(a, b) \\\n+\t__builtin_spe_evfscmplt (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_lt(a, b) \\\n+\t__builtin_spe_evfscmplt (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_lt(a, b) \\\n+\t__builtin_spe_evfscmplt (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_lt(a, b) \\\n+\t__builtin_spe_evfscmplt (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_lt(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fslt ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t    (__v2sf)(c), (__v2sf)(d)))\n+\n+#define __ev_any_fs_eq(a, b) \\\n+\t__builtin_spe_evfscmpeq (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_eq(a, b) \\\n+\t__builtin_spe_evfscmpeq (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_eq(a, b) \\\n+\t__builtin_spe_evfscmpeq (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_eq(a, b) \\\n+\t__builtin_spe_evfscmpeq (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_eq(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fseq ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t    (__v2sf)(c), (__v2sf)(d)))\n+\n+#define __ev_any_fs_tst_gt(a, b) \\\n+\t__builtin_spe_evfststgt (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_tst_gt(a, b) \\\n+\t__builtin_spe_evfststgt (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_tst_gt(a, b) \\\n+\t__builtin_spe_evfststgt (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_tst_gt(a, b) \\\n+\t__builtin_spe_evfststgt (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_tst_gt(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fststgt ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t       (__v2sf)(c), (__v2sf)(d)))\n+\n+#define __ev_any_fs_tst_lt(a, b) \\\n+\t__builtin_spe_evfststlt (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_tst_lt(a, b) \\\n+\t__builtin_spe_evfststlt (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_tst_lt(a, b) \\\n+\t__builtin_spe_evfststlt (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_tst_lt(a, b) \\\n+\t__builtin_spe_evfststlt (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_tst_lt(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fststlt ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t       (__v2sf)(c), (__v2sf)(d)))\n+\n+#define __ev_any_fs_tst_eq(a, b) \\\n+\t__builtin_spe_evfststeq (__pred_any, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_all_fs_tst_eq(a, b) \\\n+\t__builtin_spe_evfststeq (__pred_all, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_upper_fs_tst_eq(a, b) \\\n+\t__builtin_spe_evfststeq (__pred_upper, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_lower_fs_tst_eq(a, b) \\\n+\t__builtin_spe_evfststeq (__pred_lower, (__v2sf)(a), (__v2sf)(b))\n+#define __ev_select_fs_tst_eq(a, b, c, d) \\\n+\t((__v2si) __builtin_spe_evsel_fststeq ((__v2sf)(a), (__v2sf)(b), \\\n+\t\t\t\t\t       (__v2sf)(c), (__v2sf)(d)))\n+\n+/* SPEFSCR accesor functions.  */\n+\n+#define __SPEFSCR_SOVH\t\t0x80000000\n+#define __SPEFSCR_OVH\t\t0x40000000\n+#define __SPEFSCR_FGH\t\t0x20000000\n+#define __SPEFSCR_FXH\t\t0x10000000\n+#define __SPEFSCR_FINVH\t\t0x08000000\n+#define __SPEFSCR_FDBZH\t\t0x04000000\n+#define __SPEFSCR_FUNFH\t\t0x02000000\n+#define __SPEFSCR_FOVFH\t\t0x01000000\n+/* 2 unused bits */\n+#define __SPEFSCR_FINXS\t\t0x00200000\n+#define __SPEFSCR_FINVS\t\t0x00100000\n+#define __SPEFSCR_FDBZS\t\t0x00080000\n+#define __SPEFSCR_FUNFS\t\t0x00040000\n+#define __SPEFSCR_FOVFS\t\t0x00020000\n+#define __SPEFSCR_MODE\t\t0x00010000\n+#define __SPEFSCR_SOV\t\t0x00008000\n+#define __SPEFSCR_OV\t\t0x00004000\n+#define __SPEFSCR_FG\t\t0x00002000\n+#define __SPEFSCR_FX\t\t0x00001000\n+#define __SPEFSCR_FINV\t\t0x00000800\n+#define __SPEFSCR_FDBZ\t\t0x00000400\n+#define __SPEFSCR_FUNF\t\t0x00000200\n+#define __SPEFSCR_FOVF\t\t0x00000100\n+/* 1 unused bit */\n+#define __SPEFSCR_FINXE\t\t0x00000040\n+#define __SPEFSCR_FINVE\t\t0x00000020\n+#define __SPEFSCR_FDBZE\t\t0x00000010\n+#define __SPEFSCR_FUNFE\t\t0x00000008\n+#define __SPEFSCR_FOVFE\t\t0x00000004\n+#define __SPEFSCR_FRMC\t\t0x00000003\n+\n+#define __ev_get_spefscr_sovh() (__builtin_spe_mfspefscr () & __SPEFSCR_SOVH)\n+#define __ev_get_spefscr_ovh() (__builtin_spe_mfspefscr () & __SPEFSCR_OVH)\n+#define __ev_get_spefscr_fgh() (__builtin_spe_mfspefscr () & __SPEFSCR_FGH)\n+#define __ev_get_spefscr_fxh() (__builtin_spe_mfspefscr () & __SPEFSCR_FXH)\n+#define __ev_get_spefscr_finvh() (__builtin_spe_mfspefscr () & __SPEFSCR_FINVH)\n+#define __ev_get_spefscr_fdbzh() (__builtin_spe_mfspefscr () & __SPEFSCR_FDBZH)\n+#define __ev_get_spefscr_funfh() (__builtin_spe_mfspefscr () & __SPEFSCR_FUNFH)\n+#define __ev_get_spefscr_fovfh() (__builtin_spe_mfspefscr () & __SPEFSCR_FOVFH)\n+#define __ev_get_spefscr_finxs() (__builtin_spe_mfspefscr () & __SPEFSCR_FINXS)\n+#define __ev_get_spefscr_finvs() (__builtin_spe_mfspefscr () & __SPEFSCR_FINVS)\n+#define __ev_get_spefscr_fdbzs() (__builtin_spe_mfspefscr () & __SPEFSCR_FDBZS)\n+#define __ev_get_spefscr_funfs() (__builtin_spe_mfspefscr () & __SPEFSCR_FUNFS)\n+#define __ev_get_spefscr_fovfs() (__builtin_spe_mfspefscr () & __SPEFSCR_FOVFS)\n+#define __ev_get_spefscr_mode() (__builtin_spe_mfspefscr () & __SPEFSCR_MODE)\n+#define __ev_get_spefscr_sov() (__builtin_spe_mfspefscr () & __SPEFSCR_SOV)\n+#define __ev_get_spefscr_ov() (__builtin_spe_mfspefscr () & __SPEFSCR_OV)\n+#define __ev_get_spefscr_fg() (__builtin_spe_mfspefscr () & __SPEFSCR_FG)\n+#define __ev_get_spefscr_fx() (__builtin_spe_mfspefscr () & __SPEFSCR_FX)\n+#define __ev_get_spefscr_finv() (__builtin_spe_mfspefscr () & __SPEFSCR_FINV)\n+#define __ev_get_spefscr_fdbz() (__builtin_spe_mfspefscr () & __SPEFSCR_FDBZ)\n+#define __ev_get_spefscr_funf() (__builtin_spe_mfspefscr () & __SPEFSCR_FUNF)\n+#define __ev_get_spefscr_fovf() (__builtin_spe_mfspefscr () & __SPEFSCR_FOVF)\n+#define __ev_get_spefscr_finxe() (__builtin_spe_mfspefscr () & __SPEFSCR_FINXE)\n+#define __ev_get_spefscr_finve() (__builtin_spe_mfspefscr () & __SPEFSCR_FINVE)\n+#define __ev_get_spefscr_fdbze() (__builtin_spe_mfspefscr () & __SPEFSCR_FDBZE)\n+#define __ev_get_spefscr_funfe() (__builtin_spe_mfspefscr () & __SPEFSCR_FUNFE)\n+#define __ev_get_spefscr_fovfe() (__builtin_spe_mfspefscr () & __SPEFSCR_FOVFE)\n+#define __ev_get_spefscr_frmc() (__builtin_spe_mfspefscr () & __SPEFSCR_FRMC)\n+\n+static inline void\n+__ev_clr_spefscr_field (int mask)\n+{\n+  int i;\n+\n+  i = __builtin_spe_mfspefscr ();\n+  i &= ~mask;\n+  __builtin_spe_mtspefscr (i);\n+}\n+\n+#define __ev_clr_spefscr_sovh() __ev_clr_spefscr_field (__SPEFSCR_SOVH)\n+#define __ev_clr_spefscr_sov() __ev_clr_spefscr_field (__SPEFSCR_SOV)\n+#define __ev_clr_spefscr_finxs() __ev_clr_spefscr_field (__SPEFSCR_FINXS)\n+#define __ev_clr_spefscr_finvs() __ev_clr_spefscr_field (__SPEFSCR_FINVS)\n+#define __ev_clr_spefscr_fdbzs() __ev_clr_spefscr_field (__SPEFSCR_FDBZS)\n+#define __ev_clr_spefscr_funfs() __ev_clr_spefscr_field (__SPEFSCR_FUNFS)\n+#define __ev_clr_spefscr_fovfs() __ev_clr_spefscr_field (__SPEFSCR_FOVFS)\n+\n+/* Set rounding mode:\n+     rnd = 0 (nearest)\n+     rnd = 1 (zero)\n+     rnd = 2 (+inf)\n+     rnd = 3 (-inf)\n+*/\n+static inline void\n+__ev_set_spefscr_frmc (int rnd)\n+{\n+  int i;\n+\n+  i = __builtin_spe_mfspefscr ();\n+  i &= ~__SPEFSCR_FRMC;\n+  i |= rnd;\n+}\n+\n+#endif /* _SPE_H */"}, {"sha": "250209e6dceb402db763e186cf0deb46712794f4", "filename": "gcc/config/rs6000/spe.md", "status": "added", "additions": 2550, "deletions": 0, "changes": 2550, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3170dc629df017415b0ec157bedb7e7c1aeb440/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=a3170dc629df017415b0ec157bedb7e7c1aeb440", "patch": "@@ -0,0 +1,2550 @@\n+;; e500 SPE description\n+;; Copyright (C) 2002 Free Software Foundation, Inc.\n+;; Contributed by Aldy Hernandez (aldy@quesejoda.com)\n+\n+;; This file is part of GNU CC.\n+\n+;; GNU CC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+\n+;; GNU CC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GNU CC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+(define_constants\n+  [(SPE_ACC_REGNO\t111)\n+   (SPEFSCR_REGNO\t112)])\n+\n+(define_insn \"*negsf2_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+        (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsneg %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*abssf2_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsabs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*addsf3_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsadd %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*subsf3_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efssub %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*mulsf3_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%r\")\n+                 (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsmul %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*divsf3_gpr\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+        (div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+                (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsdiv %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"spe_efsctuiz\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SF 1 \"gpc_reg_operand\" \"r\")] 700))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsctuiz %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"spe_fixunssfsi2\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unsigned_fix:SI (fix:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsctui %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"spe_fix_truncsfsi2\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efsctsi %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"spe_floatunssisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+        (unsigned_float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efscfui %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"spe_floatsisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n+        (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"efscfsi %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+\n+;; SPE SIMD instructions\n+\n+(define_insn \"spe_evabs\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(abs:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evabs %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evandc\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (not:V2SI (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_SPE\"\n+  \"evandc %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evand\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evand %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+;; Vector compare instructions\n+\n+(define_insn \"spe_evcmpeq\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t(unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 500))]\n+  \"TARGET_SPE\"\n+  \"evcmpeq %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evcmpgts\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 501))]\n+  \"TARGET_SPE\"\n+  \"evcmpgts %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evcmpgtu\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 502))]\n+  \"TARGET_SPE\"\n+  \"evcmpgtu %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evcmplts\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 503))]\n+  \"TARGET_SPE\"\n+  \"evcmplts %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evcmpltu\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 504))]\n+  \"TARGET_SPE\"\n+  \"evcmpltu %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+;; Floating point vector compare instructions\n+\n+(define_insn \"spe_evfscmpeq\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 538))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfscmpeq %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscmpgt\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 539))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfscmpgt %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscmplt\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 540))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfscmplt %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfststeq\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 541))]\n+  \"TARGET_SPE\"\n+  \"evfststeq %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfststgt\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 542))]\n+  \"TARGET_SPE\"\n+  \"evfststgt %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfststlt\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 543))]\n+  \"TARGET_SPE\"\n+  \"evfststlt %0,%1,%2\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr  \"length\" \"4\")])\n+\n+;; End of vector compare instructions\n+\n+(define_insn \"spe_evcntlsw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 505))]\n+  \"TARGET_SPE\"\n+  \"evcntlsw %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evcntlzw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 506))]\n+  \"TARGET_SPE\"\n+  \"evcntlzw %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_eveqv\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (not:V2SI (xor:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_SPE\"\n+  \"eveqv %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evextsb\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 507))]\n+  \"TARGET_SPE\"\n+  \"evextsb %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evextsh\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 508))]\n+  \"TARGET_SPE\"\n+  \"evextsh %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhesplat\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 509)]\n+  \"TARGET_SPE\"\n+  \"evlhhesplat %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhesplatx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 510)]\n+  \"TARGET_SPE\"\n+  \"evlhhesplatx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhossplat\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 511)]\n+  \"TARGET_SPE\"\n+  \"evlhhossplat %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhossplatx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 512)]\n+  \"TARGET_SPE\"\n+  \"evlhhossplatx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhousplat\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 513)]\n+  \"TARGET_SPE\"\n+  \"evlhhousplat %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlhhousplatx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 514)]\n+  \"TARGET_SPE\"\n+  \"evlhhousplatx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhsplat\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 515)]\n+  \"TARGET_SPE\"\n+  \"evlwhsplat %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhsplatx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 516)]\n+  \"TARGET_SPE\"\n+  \"evlwhsplatx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwwsplat\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 517)]\n+  \"TARGET_SPE\"\n+  \"evlwwsplat %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwwsplatx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 518)]\n+  \"TARGET_SPE\"\n+  \"evlwwsplatx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmergehi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(vec_merge:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t(vec_select:V2SI\n+\t\t\t (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t\t (parallel [(const_int 1)\n+\t\t\t\t    (const_int 0)]))\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SPE\"\n+  \"evmergehi %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmergehilo\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(vec_merge:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SPE\"\n+  \"evmergehilo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmergelo\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(vec_merge:V2SI (vec_select:V2SI\n+\t\t\t (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t (parallel [(const_int 1)\n+\t\t\t\t    (const_int 0)]))\n+\t\t\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SPE\"\n+  \"evmergelo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmergelohi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(vec_merge:V2SI (vec_select:V2SI\n+\t\t\t (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t (parallel [(const_int 1)\n+\t\t\t\t    (const_int 0)]))\n+\t\t\t(vec_select:V2SI\n+\t\t\t (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t\t (parallel [(const_int 1)\n+\t\t\t\t    (const_int 0)]))\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SPE\"\n+  \"evmergelohi %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evnand\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (not:V2SI (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                            (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_SPE\"\n+  \"evnand %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evneg\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (neg:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evneg %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evnor\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (not:V2SI  (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                             (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_SPE\"\n+  \"evnor %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evorc\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (not:V2SI (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_SPE\"\n+  \"evorc %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evor\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evor %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evrlwi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 519))]\n+  \"TARGET_SPE\"\n+  \"evrlwi %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evrlw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 520))]\n+  \"TARGET_SPE\"\n+  \"evrlw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evrndw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 521))]\n+  \"TARGET_SPE\"\n+  \"evrndw %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsel\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:CC 3 \"cc_reg_operand\" \"y\")] 522))]\n+  \"TARGET_SPE\"\n+  \"evsel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"spe_evsel_fs\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:CC 3 \"cc_reg_operand\" \"y\")] 725))]\n+  \"TARGET_SPE\"\n+  \"evsel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"spe_evslwi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n+\t\t     523))]\n+  \"TARGET_SPE\"\n+  \"evslwi %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evslw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 524))]\n+  \"TARGET_SPE\"\n+  \"evslw %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsrwis\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n+\t\t     525))]\n+  \"TARGET_SPE\"\n+  \"evsrwis %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsrwiu\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n+\t\t     526))]\n+  \"TARGET_SPE\"\n+  \"evsrwiu %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsrws\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 527))]\n+  \"TARGET_SPE\"\n+  \"evsrws %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsrwu\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 528))]\n+  \"TARGET_SPE\"\n+  \"evsrwu %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evxor\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (xor:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evxor %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsabs\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evfsabs %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsadd\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfsadd %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscfsf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 529))]\n+  \"TARGET_SPE\"\n+  \"evfscfsf %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscfsi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (fix:V2SI (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evfscfsi %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscfuf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 530))]\n+  \"TARGET_SPE\"\n+  \"evfscfuf %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfscfui\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SF [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 701))]\n+  \"TARGET_SPE\"\n+  \"evfscfui %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctsf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 531))]\n+  \"TARGET_SPE\"\n+  \"evfsctsf %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctsi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 532))]\n+  \"TARGET_SPE\"\n+  \"evfsctsi %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctsiz\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 533))]\n+  \"TARGET_SPE\"\n+  \"evfsctsiz %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctuf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 534))]\n+  \"TARGET_SPE\"\n+  \"evfsctuf %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctui\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 535))]\n+  \"TARGET_SPE\"\n+  \"evfsctui %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsctuiz\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 536))]\n+  \"TARGET_SPE\"\n+  \"evfsctuiz %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsdiv\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfsdiv %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsmul\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfsmul %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsnabs\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 537))]\n+  \"TARGET_SPE\"\n+  \"evfsnabs %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfsneg\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evfsneg %0,%1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evfssub\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evfssub %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr  \"length\" \"4\")])\n+\n+;; SPE SIMD load instructions.\n+\n+;; Only the hardware engineer who designed the SPE inderstands the\n+;; plethora of load and store instructions ;-).  We have no way of\n+;; differentiating between them with RTL so use an unspec of const_int 0 \n+;; to avoid identical RTL.\n+\n+(define_insn \"spe_evldd\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 544)]\n+  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n+  \"evldd %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlddx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 545)]\n+  \"TARGET_SPE\"\n+  \"evlddx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evldh\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 546)]\n+  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n+  \"evldh %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evldhx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 547)]\n+  \"TARGET_SPE\"\n+  \"evldhx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evldw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 548)]\n+  \"TARGET_SPE\"\n+  \"evldw %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evldwx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 549)]\n+  \"TARGET_SPE\"\n+  \"evldwx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhe\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 550)]\n+  \"TARGET_SPE\"\n+  \"evlwhe %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhex\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 551)]\n+  \"TARGET_SPE\"\n+  \"evlwhex %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhos\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 552)]\n+  \"TARGET_SPE\"\n+  \"evlwhos %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhosx\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 553)]\n+  \"TARGET_SPE\"\n+  \"evlwhosx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhou\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n+   (unspec [(const_int 0)] 554)]\n+  \"TARGET_SPE\"\n+  \"evlwhou %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evlwhoux\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n+   (unspec [(const_int 0)] 555)]\n+  \"TARGET_SPE\"\n+  \"evlwhoux %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_brinc\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\")] 556))]\n+  \"TARGET_SPE\"\n+  \"brinc %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegsmfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 557))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegsmfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegsmfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 558))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegsmfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegsmiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 559))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegsmiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegsmian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 560))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegsmian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegumiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 561))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegumiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhegumian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 562))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhegumian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 563))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 564))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 565))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 566))]\n+  \"TARGET_SPE\"\n+  \"evmhesmf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 567))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 568))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 569))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhesmia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhesmi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 570))]\n+  \"TARGET_SPE\"\n+  \"evmhesmi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 571))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 572))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 573))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 574))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 575))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhessianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 576))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhessianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheumiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 577))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmheumiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheumianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 578))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmheumianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheumia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 579))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmheumia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheumi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 580))]\n+  \"TARGET_SPE\"\n+  \"evmheumi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheusiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 581))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmheusiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmheusianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 582))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmheusianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogsmfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 583))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogsmfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogsmfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 584))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogsmfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogsmiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 585))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogsmiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogsmian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 586))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogsmian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogumiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 587))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogumiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhogumian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 588))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhogumian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 589))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 590))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 591))]\n+  \"TARGET_SPE\"\n+  \"evmhosmfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 592))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 593))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 594))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 595))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhosmia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhosmi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 596))]\n+  \"TARGET_SPE\"\n+  \"evmhosmi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 597))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 598))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 599))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 600))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 601))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhossianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 602))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhossianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhoumiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 603))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhoumiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhoumianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 604))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhoumianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhoumia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 605))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhoumia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhoumi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 606))]\n+  \"TARGET_SPE\"\n+  \"evmhoumi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhousiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 607))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhousiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmhousianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 608))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmhousianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmmlssfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 609))]\n+  \"TARGET_SPE\"\n+  \"evmmlssfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmmlssf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 610))]\n+  \"TARGET_SPE\"\n+  \"evmmlssf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 611))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 612))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 613))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 614))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhssfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 615))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhusian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 626))]\n+  \"TARGET_SPE\"\n+  \"evmwhusian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhssf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 628))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhumia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 629))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhumia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhumi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 630))]\n+  \"TARGET_SPE\"\n+  \"evmwhumi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 631))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 632))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 633))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 634))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 635))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlsmianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 636))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlsmianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 637))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 638))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssfaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 639))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssfaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssfanw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 640))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssfanw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 641))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlssianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 642))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlssianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlumiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 643))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlumiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlumianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 644))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlumianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlumia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 645))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlumia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlumi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 646))]\n+  \"TARGET_SPE\"\n+  \"evmwlumi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlusiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 647))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlusiaaw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwlusianw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 648))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwlusianw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 649))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 650))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 651))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 652))]\n+  \"TARGET_SPE\"\n+  \"evmwsmf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 653))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 654))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 655))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwsmia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwsmi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 656))]\n+  \"TARGET_SPE\"\n+  \"evmwsmi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwssfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 657))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwssfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwssfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 658))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwssfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwssfa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 659))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwssfa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwssf\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 660))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwssf %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwumiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 661))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwumiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwumian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 662))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwumian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwumia\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 663))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwumia %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwumi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 664))]\n+  \"TARGET_SPE\"\n+  \"evmwumi %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evaddw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddusiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 673))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evaddusiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddumiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 674))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evaddumiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddssiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 675))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evaddssiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddsmiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 676))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evaddsmiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evaddiw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 677))]\n+  \"TARGET_SPE\"\n+  \"evaddiw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubifw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 678))]\n+  \"TARGET_SPE\"\n+  \"evsubifw %0,%2,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubfw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_SPE\"\n+  \"evsubfw %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubfusiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 679))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evsubfusiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubfumiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 680))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evsubfumiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubfssiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 681))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evsubfssiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsubfsmiaaw\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (reg:V2SI SPE_ACC_REGNO)] 682))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evsubfsmiaaw %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmra\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\"))\n+   (set (reg:V2SI SPE_ACC_REGNO) (match_dup 1))]\n+  \"TARGET_SPE\"\n+  \"evmra %0,%1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evdivws\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (div:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evdivws %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evdivwu\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (udiv:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))\n+      (clobber (reg:SI SPEFSCR_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evdivwu %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsplatfi\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 684))]\n+  \"TARGET_SPE\"\n+  \"evsplatfi %1,%0\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evsplati\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 685))]\n+  \"TARGET_SPE\"\n+  \"evsplati %1,%0\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstdd\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 686)]\n+  \"TARGET_SPE\"\n+  \"evstdd %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstddx\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 687)]\n+  \"TARGET_SPE\"\n+  \"evstddx %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstdh\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 688)]\n+  \"TARGET_SPE\"\n+  \"evstdh %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstdhx\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 689)]\n+  \"TARGET_SPE\"\n+  \"evstdhx %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstdw\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 690)]\n+  \"TARGET_SPE\"\n+  \"evstdw %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstdwx\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 691)]\n+  \"TARGET_SPE\"\n+  \"evstdwx %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwhe\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 692)]\n+  \"TARGET_SPE\"\n+  \"evstwhe %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwhex\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 693)]\n+  \"TARGET_SPE\"\n+  \"evstwhex %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwho\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 694)]\n+  \"TARGET_SPE\"\n+  \"evstwho %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwhox\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 695)]\n+  \"TARGET_SPE\"\n+  \"evstwhox %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwwe\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 696)]\n+  \"TARGET_SPE\"\n+  \"evstwwe %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwwex\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 697)]\n+  \"TARGET_SPE\"\n+  \"evstwwex %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwwo\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 698)]\n+  \"TARGET_SPE\"\n+  \"evstwwo %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evstwwox\"\n+  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n+\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+   (unspec [(const_int 0)] 699)]\n+  \"TARGET_SPE\"\n+  \"evstwwox %2,%0,%1\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr  \"length\" \"4\")])\n+\n+;; SPE vector clears\n+\n+(define_insn \"*movv2si_const0\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operand:V2SI 1 \"zero_constant\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"evxor %0,%0,%0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"*movv2sf_const0\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operand:V2SF 1 \"zero_constant\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"evxor %0,%0,%0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"*movv4hi_const0\"\n+  [(set (match_operand:V4HI 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operand:V4HI 1 \"zero_constant\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"evxor %0,%0,%0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; Vector move instructions.\n+\n+(define_expand \"movv2si\"\n+  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SI 1 \"any_operand\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V2SImode); DONE; }\")\n+\n+\n+(define_insn \"*movv2si_internal\"\n+  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=m,r,r\")\n+\t(match_operand:V2SI 1 \"input_operand\" \"r,m,r\"))]\n+  \"TARGET_SPE\"\n+  \"@\n+   evstdd%X0 %1,%y0\n+   evldd%X1 %0,%y1\n+   evor %0,%1,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_expand \"movv4hi\"\n+  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4HI 1 \"any_operand\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V4HImode); DONE; }\")\n+\n+(define_insn \"*movv4hi_internal\"\n+  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=m,r,r\")\n+\t(match_operand:V4HI 1 \"input_operand\" \"r,m,r\"))]\n+  \"TARGET_SPE\"\n+  \"@\n+   evstdd%X0 %1,%y0\n+   evldd%X1 %0,%y1\n+   evor %0,%1,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_expand \"movv2sf\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SF 1 \"any_operand\" \"\"))]\n+  \"TARGET_SPE\"\n+  \"{ rs6000_emit_move (operands[0], operands[1], V2SFmode); DONE; }\")\n+\n+(define_insn \"*movv2sf_internal\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=m,r,r\")\n+\t(match_operand:V2SF 1 \"input_operand\" \"r,m,r\"))]\n+  \"TARGET_SPE\"\n+  \"@\n+   evstdd%X0 %1,%y0\n+   evldd%X1 %0,%y1\n+   evor %0,%1,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"spe_evmwhssfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 702))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhssmaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 703))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssmaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 704))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 705))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhusiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 706))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhusiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhumiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 707))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhumiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhssfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 708))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhssian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 709))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhssian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 710))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhsmian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 711))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhsmian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhumian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 713))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhumian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgssfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 714))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgssfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgsmfaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 715))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgsmfaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgsmiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 716))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgsmiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgumiaa\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 717))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgumiaa %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgssfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 718))\n+   (clobber (reg:SI SPEFSCR_REGNO))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgssfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgsmfan\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 719))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgsmfan %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgsmian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 720))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgsmian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_evmwhgumian\"\n+  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 721))\n+   (clobber (reg:V2SI SPE_ACC_REGNO))]\n+  \"TARGET_SPE\"\n+  \"evmwhgumian %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr  \"length\" \"4\")])\n+\n+(define_insn \"spe_mtspefscr\"\n+  [(set (reg:SI SPEFSCR_REGNO)\n+\t(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")]\n+\t\t\t    722))]\n+  \"TARGET_SPE\"\n+  \"mtspefscr %0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"spe_mfspefscr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(reg:SI SPEFSCR_REGNO)] 723))]\n+  \"TARGET_SPE\"\n+  \"mfspefscr %0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; MPC8540 single-precision FP instructions on GPRs.\n+;; We have 2 variants for each.  One for IEEE compliant math and one\n+;; for non IEEE compliant math.\n+\n+(define_insn \"cmpsfeq_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(eq:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && !flag_unsafe_math_optimizations\"\n+  \"efscmpeq %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"tstsfeq_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(eq:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && flag_unsafe_math_optimizations\"\n+  \"efststeq %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"cmpsfgt_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(gt:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && !flag_unsafe_math_optimizations\"\n+  \"efscmpgt %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"tstsfgt_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(gt:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && flag_unsafe_math_optimizations\"\n+  \"efststgt %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"cmpsflt_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(lt:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && !flag_unsafe_math_optimizations\"\n+  \"efscmplt %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"tstsflt_gpr\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(lt:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && flag_unsafe_math_optimizations\"\n+  \"efststlt %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+"}]}