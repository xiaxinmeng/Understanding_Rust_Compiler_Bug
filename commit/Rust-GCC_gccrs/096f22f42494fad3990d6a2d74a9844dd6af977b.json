{"sha": "096f22f42494fad3990d6a2d74a9844dd6af977b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2ZjIyZjQyNDk0ZmFkMzk5MGQ2YTJkNzRhOTg0NGRkNmFmOTc3Yg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-06-15T12:46:07Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-06-15T12:46:07Z"}, "message": "function.h (struct function): Remove cannot_inline field.\n\ngcc/ChangeLog:\n2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* function.h (struct function): Remove cannot_inline field.\n\t(current_function_cannot_inline): Remove.\n\t* passes.c (rest_of_compilation): Reset DECL_DEFER_OUTPUT.\n\tSimplify conditionals to ignore warn_return_type.\n\t* tree-optimize.c (tree_rest_of_compilation): Do not reset\n\tDECL_DEFER_OUTPUT.\n\t* objc/objc-act.c (build_module_descriptor, finish_method_def):\n\tDo not set current_function_cannot_inline.\n\ngcc/java/ChangeLog:\n2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* class.c (emit_register_classes): Make the function uninlinable,\n\tdo not set current_function_cannot_inline.\n\t* resource.c (write_resource_constructor): Do not reset\n\tflag_inline_functions around rest_of_compilation.\n\ngcc/cp/ChangeLog:\n2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* cp-tree.h (struct language_function): Remove cannot_inline.\n\t* decl.c (save_function_data): cannot_inline is no more.\n\t(cxx_push_function_context): Likewise.\n\t* decl2.c (start_objects, start_static_storage_duration_function):\n\tReset DECL_INLINE, set DECL_UNINLINABLE.\n\nFrom-SVN: r83181", "tree": {"sha": "af8f6b819cf8320c57100f0ded0f5d0bdbae5c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af8f6b819cf8320c57100f0ded0f5d0bdbae5c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096f22f42494fad3990d6a2d74a9844dd6af977b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f22f42494fad3990d6a2d74a9844dd6af977b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f22f42494fad3990d6a2d74a9844dd6af977b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f22f42494fad3990d6a2d74a9844dd6af977b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cff2a9522fcd7b7af3181f73aa91a2fce666722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cff2a9522fcd7b7af3181f73aa91a2fce666722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cff2a9522fcd7b7af3181f73aa91a2fce666722"}], "stats": {"total": 100, "additions": 43, "deletions": 57}, "files": [{"sha": "e22b8002408d7dd3ae8bbe6ba65d30c50e407d9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1,3 +1,14 @@\n+2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* function.h (struct function): Remove cannot_inline field.\n+\t(current_function_cannot_inline): Remove.\n+\t* passes.c (rest_of_compilation): Reset DECL_DEFER_OUTPUT.\n+\tSimplify conditionals to ignore warn_return_type.\n+\t* tree-optimize.c (tree_rest_of_compilation): Do not reset\n+\tDECL_DEFER_OUTPUT.\n+\t* objc/objc-act.c (build_module_descriptor, finish_method_def):\n+\tDo not set current_function_cannot_inline.\n+\n 2004-06-15  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* cfglayout.c (fixup_reorder_chain): Handle case where the"}, {"sha": "518d73a17eb50990c623e15bc6f4f804bd216801", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1,3 +1,11 @@\n+2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* cp-tree.h (struct language_function): Remove cannot_inline.\n+\t* decl.c (save_function_data): cannot_inline is no more.\n+\t(cxx_push_function_context): Likewise.\n+\t* decl2.c (start_objects, start_static_storage_duration_function):\n+\tReset DECL_INLINE, set DECL_UNINLINABLE.\n+\n 2004-06-14  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/15967"}, {"sha": "db6b750ed8e78002b1213215ce6054ff81e02260", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -773,8 +773,6 @@ struct language_function GTY(())\n   struct named_label_list *x_named_labels;\n   struct cp_binding_level *bindings;\n   varray_type x_local_names;\n-\n-  const char *cannot_inline;\n };\n \n /* The current C++-specific per-function global variables.  */"}, {"sha": "44a83d4345cc84c1a98804ab35db7b2f24c3788b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -10491,15 +10491,6 @@ save_function_data (tree decl)\n   f->x_named_label_uses = NULL;\n   f->bindings = NULL;\n   f->x_local_names = NULL;\n-\n-  /* If we've already decided that we cannot inline this function, we\n-     must remember that fact when we actually go to expand the\n-     function.  */\n-  if (current_function_cannot_inline)\n-    {\n-      f->cannot_inline = current_function_cannot_inline;\n-      DECL_INLINE (decl) = 0;\n-    }\n }\n \n /* Add a note to mark the beginning of the main body of the constructor.\n@@ -11156,11 +11147,6 @@ cxx_push_function_context (struct function * f)\n \t     now, restore saved state.  */\n \t  *cp_function_chain = *DECL_SAVED_FUNCTION_DATA (fn);\n \n-\t  /* If we decided that we didn't want to inline this function,\n-\t     make sure the back-end knows that.  */\n-\t  if (!current_function_cannot_inline)\n-\t    current_function_cannot_inline = cp_function_chain->cannot_inline;\n-\n \t  /* We don't need the saved data anymore.  Unless this is an inline\n \t     function; we need the named return value info for\n \t     cp_copy_res_decl_for_inlining.  */"}, {"sha": "57e3224e91f0f5c2addcaa50d94099c638d545c8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1976,8 +1976,8 @@ start_objects (int method_type, int initp)\n      have external linkage.  And, there's no point in deferring\n      compilation of thes functions; they're all going to have to be\n      out anyhow.  */\n-  current_function_cannot_inline\n-    = \"static constructors and destructors cannot be inlined\";\n+  DECL_INLINE (current_function_decl) = 0;\n+  DECL_UNINLINABLE (current_function_decl) = 1;\n \n   return body;\n }\n@@ -2131,8 +2131,8 @@ start_static_storage_duration_function (unsigned count)\n \n   /* This function must not be deferred because we are depending on\n      its compilation to tell us what is TREE_SYMBOL_REFERENCED.  */\n-  current_function_cannot_inline \n-    = \"static storage duration functions cannot be inlined\";\n+  DECL_INLINE (ssdf_decl) = 0;\n+  DECL_UNINLINABLE (ssdf_decl) = 1;\n \n   return body;\n }"}, {"sha": "19e3400eee9907003239af27920c03177d9eef63", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -232,10 +232,6 @@ struct function GTY(())\n   /* The arg pointer hard register, or the pseudo into which it was copied.  */\n   rtx internal_arg_pointer;\n \n-  /* Language-specific reason why the current function cannot be made\n-     inline.  */\n-  const char *cannot_inline;\n-\n   /* Opaque pointer used by get_hard_reg_initial_val and\n      has_hard_reg_initial_val (see integrate.[hc]).  */\n   struct initial_value_struct *hard_reg_initial_vals;\n@@ -542,7 +538,6 @@ extern int trampolines_created;\n #define current_function_limit_stack (cfun->limit_stack)\n #define current_function_uses_pic_offset_table (cfun->uses_pic_offset_table)\n #define current_function_uses_const_pool (cfun->uses_const_pool)\n-#define current_function_cannot_inline (cfun->cannot_inline)\n #define current_function_epilogue_delay_list (cfun->epilogue_delay_list)\n #define current_function_has_nonlocal_label (cfun->has_nonlocal_label)\n #define current_function_has_nonlocal_goto (cfun->has_nonlocal_goto)"}, {"sha": "b1427523068fb9cda0177c1e0b0a3d187e5cc1bd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1,3 +1,10 @@\n+2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* class.c (emit_register_classes): Make the function uninlinable,\n+\tdo not set current_function_cannot_inline.\n+\t* resource.c (write_resource_constructor): Do not reset\n+\tflag_inline_functions around rest_of_compilation.\n+\t\n 2004-06-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR java/15769"}, {"sha": "57107dd4577c751102fc0a2d1e44961f034043db", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -2293,6 +2293,8 @@ emit_register_classes (void)\n       DECL_SOURCE_LINE (init_decl) = 0;\n       TREE_STATIC (init_decl) = 1;\n       current_function_decl = init_decl;\n+      DECL_INLINE (init_decl) = 0;\n+      DECL_UNINLINABLE (init_decl) = 1;\n       DECL_RESULT (init_decl) = build_decl (RESULT_DECL, NULL_TREE,\n \t\t\t\t\t    void_type_node);\n \n@@ -2308,10 +2310,6 @@ emit_register_classes (void)\n       init_function_start (init_decl);\n       expand_function_start (init_decl, 0);\n \n-      /* Do not allow the function to be deferred.  */\n-      current_function_cannot_inline\n-\t= \"static constructors and destructors cannot be inlined\";\n-\n       for ( t = registered_class; t; t = TREE_CHAIN (t))\n \temit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n \t\t\t   XEXP (DECL_RTL (t), 0), Pmode);"}, {"sha": "5ebbf5e100a175f6169346c8a3108dfe0e2c7674", "filename": "gcc/java/resource.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -151,14 +151,10 @@ write_resource_constructor (void)\n   input_location = DECL_SOURCE_LOCATION (init_decl);\n   expand_function_end ();\n   poplevel (1, 0, 1);\n-  { \n-    /* Force generation, even with -O3 or deeper.  Gross hack.\n-       FIXME.  */\n-    int saved_flag = flag_inline_functions;\n-    flag_inline_functions = 0;\t\n-    rest_of_compilation (init_decl);\n-    flag_inline_functions = saved_flag;\n-  }\n+\n+  /* rest_of_compilation forces generation even if -finline-functions.  */\n+  rest_of_compilation (init_decl);\n+\n   current_function_decl = NULL_TREE;\n   if (targetm.have_ctors_dtors)\n     targetm.asm_out.constructor (XEXP (DECL_RTL (init_decl), 0),"}, {"sha": "97a36a02b4e8d0b6679db21fbdc8022b5ec1b680", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1910,8 +1910,6 @@ build_module_descriptor (void)\n     /* Don't let this one be deferred.  */\n     DECL_INLINE (init_function_decl) = 0;\n     DECL_UNINLINABLE (init_function_decl) = 1;\n-    current_function_cannot_inline\n-      = \"static constructors and destructors cannot be inlined\";\n \n     parms\n       = build_tree_list (NULL_TREE,\n@@ -7981,7 +7979,6 @@ finish_method_def (void)\n      dispatched, so suppress all thoughts of doing so.  */\n   DECL_INLINE (current_function_decl) = 0;\n   DECL_UNINLINABLE (current_function_decl) = 1;\n-  current_function_cannot_inline = \"methods cannot be inlined\";\n \n   finish_function ();\n   lang_expand_function_end = NULL;"}, {"sha": "fb976a8015af201a0715e5c7fb5990bb64fc1190", "filename": "gcc/passes.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -1359,6 +1359,10 @@ rest_of_compilation (tree decl)\n \n   timevar_push (TV_REST_OF_COMPILATION);\n \n+  /* There's no need to defer outputting this function any more; we\n+     know we want to output it.  */\n+  DECL_DEFER_OUTPUT (current_function_decl) = 0;\n+\n   /* Register rtl specific functions for cfg.  */\n   rtl_register_cfg_hooks ();\n \n@@ -1425,8 +1429,7 @@ rest_of_compilation (tree decl)\n   /* Initialize some variables used by the optimizers.  */\n   init_function_for_compilation ();\n \n-  if (! DECL_DEFER_OUTPUT (decl))\n-    TREE_ASM_WRITTEN (decl) = 1;\n+  TREE_ASM_WRITTEN (decl) = 1;\n \n   /* Now that integrate will no longer see our rtl, we need not\n      distinguish between the return value of this function and the\n@@ -1438,10 +1441,8 @@ rest_of_compilation (tree decl)\n   purge_hard_subreg_sets (get_insns ());\n \n   /* Early return if there were errors.  We can run afoul of our\n-     consistency checks, and there's not really much point in fixing them.\n-     Don't return yet if -Wreturn-type; we need to do cleanup_cfg.  */\n-  if (((rtl_dump_and_exit || flag_syntax_only) && !warn_return_type)\n-      || errorcount || sorrycount)\n+     consistency checks, and there's not really much point in fixing them.  */\n+  if (rtl_dump_and_exit || flag_syntax_only || errorcount || sorrycount)\n     goto exit_rest_of_compilation;\n \n   timevar_push (TV_JUMP);\n@@ -1534,15 +1535,8 @@ rest_of_compilation (tree decl)\n \n   purge_line_number_notes (insns);\n \n-  timevar_pop (TV_JUMP);\n   close_dump_file (DFI_jump, print_rtl, insns);\n \n-  /* Now is when we stop if -fsyntax-only and -Wreturn-type.  */\n-  if (rtl_dump_and_exit || flag_syntax_only || DECL_DEFER_OUTPUT (decl))\n-    goto exit_rest_of_compilation;\n-\n-  timevar_push (TV_JUMP);\n-\n   if (optimize)\n     cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n "}, {"sha": "00618474f6b0762f51d97aaf286917b14bf41977", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f22f42494fad3990d6a2d74a9844dd6af977b/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=096f22f42494fad3990d6a2d74a9844dd6af977b", "patch": "@@ -582,10 +582,6 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n   if (nested_p)\n     ggc_push_context ();\n \n-  /* There's no need to defer outputting this function any more; we\n-     know we want to output it.  */\n-  DECL_DEFER_OUTPUT (fndecl) = 0;\n-\n   /* Run the optimizers and output the assembler code for this function.  */\n   rest_of_compilation (fndecl);\n "}]}