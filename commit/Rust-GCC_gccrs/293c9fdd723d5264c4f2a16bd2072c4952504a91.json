{"sha": "293c9fdd723d5264c4f2a16bd2072c4952504a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzYzlmZGQ3MjNkNTI2NGM0ZjJhMTZiZDIwNzJjNDk1MjUwNGE5MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-01T20:18:49Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-01T20:18:49Z"}, "message": "avoid spurious signed/unsigned comparison warnings.\n\nFrom-SVN: r9289", "tree": {"sha": "e98d34cf6a8f771ae0fbbf7c0b373135f456fb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98d34cf6a8f771ae0fbbf7c0b373135f456fb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/293c9fdd723d5264c4f2a16bd2072c4952504a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293c9fdd723d5264c4f2a16bd2072c4952504a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293c9fdd723d5264c4f2a16bd2072c4952504a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293c9fdd723d5264c4f2a16bd2072c4952504a91/comments", "author": null, "committer": null, "parents": [{"sha": "2a50a7927541aab0673b8f29757acb58711ffbf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a50a7927541aab0673b8f29757acb58711ffbf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a50a7927541aab0673b8f29757acb58711ffbf5"}], "stats": {"total": 84, "additions": 48, "deletions": 36}, "files": [{"sha": "20c653a2e52c9f57232d87796e390fbf2098a00c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293c9fdd723d5264c4f2a16bd2072c4952504a91/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293c9fdd723d5264c4f2a16bd2072c4952504a91/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=293c9fdd723d5264c4f2a16bd2072c4952504a91", "patch": "@@ -1897,8 +1897,12 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n      Zero means they need to be converted to RESULT_TYPE.  */\n   int converted = 0;\n \n+  /* Nonzero means create the expression with this type, rather than\n+     RESULT_TYPE.  */\n+  tree build_type = 0;\n+\n   /* Nonzero means after finally constructing the expression\n-     give it this type.  Otherwise, give it type RESULT_TYPE.  */\n+     convert it to this type.  */\n   tree final_type = 0;\n \n   /* Nonzero if this is an operation like MIN or MAX which can\n@@ -2169,8 +2173,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case NE_EXPR:\n       /* Result of comparison is always int,\n \t but don't convert the args to int!  */\n-      result_type = integer_type_node;\n-      converted = 1;\n+      build_type = integer_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == COMPLEX_TYPE)\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n@@ -2201,29 +2204,26 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    }\n \t  else\n \t    pedwarn (\"comparison of distinct pointer types lacks a cast\");\n+\t  result_type = common_type (type0, type1);\n \t}\n       else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n \t       && integer_zerop (op1))\n-\top1 = null_pointer_node;\n+\tresult_type = type0;\n       else if (code1 == POINTER_TYPE && TREE_CODE (op0) == INTEGER_CST\n \t       && integer_zerop (op0))\n-\top0 = null_pointer_node;\n+\tresult_type = type1;\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n+\t  result_type = type0;\n \t  if (! flag_traditional)\n \t    pedwarn (\"comparison between pointer and integer\");\n-\t  op1 = convert (TREE_TYPE (op0), op1);\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n+\t  result_type = type1;\n \t  if (! flag_traditional)\n \t    pedwarn (\"comparison between pointer and integer\");\n-\t  op0 = convert (TREE_TYPE (op1), op0);\n \t}\n-      else\n-\t/* If args are not valid, clear out RESULT_TYPE\n-\t   to cause an error message later.  */\n-\tresult_type = 0;\n       break;\n \n     case MAX_EXPR:\n@@ -2246,6 +2246,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case GE_EXPR:\n     case LT_EXPR:\n     case GT_EXPR:\n+      build_type = integer_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n \tshort_compare = 1;\n@@ -2259,39 +2260,34 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  else if (pedantic \n \t\t   && TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n \t    pedwarn (\"ANSI C forbids ordered comparisons of pointers to functions\");\n-\t  result_type = integer_type_node;\n+\t  result_type = common_type (type0, type1);\n \t}\n       else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n \t       && integer_zerop (op1))\n \t{\n-\t  result_type = integer_type_node;\n-\t  op1 = null_pointer_node;\n+\t  result_type = type0;\n \t  if (pedantic)\n \t    pedwarn (\"ordered comparison of pointer with integer zero\");\n \t}\n       else if (code1 == POINTER_TYPE && TREE_CODE (op0) == INTEGER_CST\n \t       && integer_zerop (op0))\n \t{\n-\t  result_type = integer_type_node;\n-\t  op0 = null_pointer_node;\n+\t  result_type = type1;\n \t  if (pedantic)\n \t    pedwarn (\"ordered comparison of pointer with integer zero\");\n \t}\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  result_type = integer_type_node;\n+\t  result_type = type0;\n \t  if (! flag_traditional)\n \t    pedwarn (\"comparison between pointer and integer\");\n-\t  op1 = convert (TREE_TYPE (op0), op1);\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n-\t  result_type = integer_type_node;\n+\t  result_type = type1;\n \t  if (! flag_traditional)\n \t    pedwarn (\"comparison between pointer and integer\");\n-\t  op0 = convert (TREE_TYPE (op1), op0);\n \t}\n-      converted = 1;\n       break;\n     }\n \n@@ -2433,16 +2429,15 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    = shorten_compare (&xop0, &xop1, &xresult_type, &xresultcode);\n \t  if (val != 0)\n \t    return val;\n-\t  op0 = xop0, op1 = xop1, result_type = xresult_type;\n+\t  op0 = xop0, op1 = xop1;\n+\t  converted = 1;\n \t  resultcode = xresultcode;\n \n \t  if (extra_warnings)\n \t    {\n \t      int op0_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op0));\n \t      int op1_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op1));\n \n-\t      tree comp_type = TREE_TYPE (op0);\n-\n \t      /* Avoid spurious warnings for comparison with enumerators.  */\n  \n \t      xop0 = orig_op0;\n@@ -2451,19 +2446,33 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      STRIP_TYPE_NOPS (xop1);\n \n \t      /* Give warnings for comparisons between signed and unsigned\n-\t\t quantities that may fail.  Do not warn if the signed quantity\n-\t\t is an unsuffixed integer literal (or some static constant\n-\t\t expression involving such literals) and it is positive.\n-\t\t Do not warn if the comparison is being done in a signed type,\n-\t\t since the signed type will only be chosen if it can represent\n-\t\t all the values of the unsigned type.  */\n+\t\t quantities that may fail.  */\n \t      /* Do the checking based on the original operand trees, so that\n \t\t casts will be considered, but default promotions won't be.  */\n-\t      if (TREE_UNSIGNED (comp_type)\n-\t\t  && ((op0_signed && (TREE_CODE (xop0) != INTEGER_CST\n-\t\t\t\t      || tree_int_cst_sgn (xop0) == -1))\n-\t\t      || (op1_signed && (TREE_CODE (xop1) != INTEGER_CST\n-\t\t\t\t       || tree_int_cst_sgn (xop1) == -1))))\n+\n+\t      /* Do not warn if the comparison is being done in a signed type,\n+\t\t since the signed type will only be chosen if it can represent\n+\t\t all the values of the unsigned type.  */\n+\t      if (! TREE_UNSIGNED (result_type))\n+\t\t/* OK */;\n+\t      /* Do not warn if the signed quantity is an unsuffixed\n+\t\t integer literal (or some static constant expression\n+\t\t involving such literals) and it is non-negative.  */\n+\t      else if ((op0_signed && TREE_CODE (xop0) == INTEGER_CST\n+\t\t\t&& tree_int_cst_sgn (xop0) >= 0)\n+\t\t       || (op1_signed && TREE_CODE (xop1) == INTEGER_CST\n+\t\t\t   && tree_int_cst_sgn (xop1) >= 0))\n+\t\t/* OK */;\n+\t      /* Do not warn if the comparison is an equality operation,\n+                 the unsigned quantity is an integral constant and it does\n+                 not use the most significant bit of result_type.  */\n+\t      else if ((resultcode == EQ_EXPR || resultcode == NE_EXPR)\n+\t\t       && ((op0_signed && TREE_CODE (xop1) == INTEGER_CST\n+\t\t\t    && int_fits_type_p (xop1, signed_type (result_type))\n+\t\t\t   || (op1_signed && TREE_CODE (xop0) == INTEGER_CST\n+\t\t\t       && int_fits_type_p (xop0, signed_type (result_type))))))\n+\t\t/* OK */;\n+\t      else\n \t\twarning (\"comparison between signed and unsigned\");\n \t    }\n \t}\n@@ -2489,8 +2498,11 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \top1 = convert (result_type, op1); \n     }\n \n+  if (build_type == NULL_TREE)\n+    build_type = result_type;\n+\n   {\n-    register tree result = build (resultcode, result_type, op0, op1);\n+    register tree result = build (resultcode, build_type, op0, op1);\n     register tree folded;\n \n     folded = fold (result);"}]}