{"sha": "08cc4d925f640c3cd0336bae4dc6004244a5c80a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjYzRkOTI1ZjY0MGMzY2QwMzM2YmFlNGRjNjAwNDI0NGE1YzgwYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-01T08:53:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-01T08:53:54Z"}, "message": "[AArch64] Make call insns record the callee's arm_pcs\n\nAt the moment we rely on SYMBOL_REF_DECL to get the ABI of the callee\nof a call insn, falling back to the default ABI if the decl isn't\navailable.  I think it'd be cleaner to attach the ABI directly to the\ncall instruction instead, which would also have the very minor benefit\nof handling indirect calls more efficiently.\n\n2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_expand_call): Take an\n\textra callee_abi argument.\n\t* config/aarch64/aarch64.c (aarch64_expand_call): Likewise.\n\tInsert a CALLEE_ABI unspec into the call pattern as the second\n\telement in the PARALLEL.\n\t(aarch64_simd_call_p): Delete.\n\t(aarch64_insn_callee_abi): Get the arm_pcs of the callee from\n\tthe new CALLEE_ABI element of the PARALLEL.\n\t(aarch64_init_cumulative_args): Get the arm_pcs of the callee\n\tfrom the function type, if given.\n\t(aarch64_function_arg_advance): Handle ARM_PCS_SIMD.\n\t(aarch64_function_arg): Likewise.  Return the arm_pcs of the callee\n\twhen passed the function_arg_info end marker.\n\t(aarch64_output_mi_thunk): Pass the arm_pcs of the callee as the\n\tfinal argument of gen_sibcall.\n\t* config/aarch64/aarch64.md (UNSPEC_CALLEE_ABI): New unspec.\n\t(call): Make operand 2 a const_int_operand and pass it to expand_call.\n\tWrap it in an UNSPEC_CALLEE_ABI unspec for the dummy define_expand\n\tpattern.\n\t(call_value): Likewise operand 3.\n\t(sibcall): Likewise operand 2.  Place the unspec before rather than\n\tafter the return.\n\t(sibcall_value): Likewise operand 3.\n\t(*call_insn, *call_value_insn): Include an UNSPEC_CALLEE_ABI.\n\t(tlsgd_small_<mode>, *tlsgd_small_<mode>): Likewise.\n\t(*sibcall_insn, *sibcall_value_insn): Likewise.  Remove empty\n\tconstraint strings.\n\t(untyped_call): Pass const0_rtx as the callee ABI to gen_call.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/torture/simd-abi-10.c: New test.\n\t* gcc.target/aarch64/torture/simd-abi-11.c: Likewise.\n\nFrom-SVN: r276391", "tree": {"sha": "10c043f7215b50e91217acf4fbe41956bf312b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c043f7215b50e91217acf4fbe41956bf312b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08cc4d925f640c3cd0336bae4dc6004244a5c80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cc4d925f640c3cd0336bae4dc6004244a5c80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cc4d925f640c3cd0336bae4dc6004244a5c80a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cc4d925f640c3cd0336bae4dc6004244a5c80a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "810f316dd62806d46ae7f242ba006b74d7b78446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810f316dd62806d46ae7f242ba006b74d7b78446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810f316dd62806d46ae7f242ba006b74d7b78446"}], "stats": {"total": 208, "additions": 144, "deletions": 64}, "files": [{"sha": "cfe5f841922a8aa215d55d76375ac5dd6453cc36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -1,3 +1,34 @@\n+2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_expand_call): Take an\n+\textra callee_abi argument.\n+\t* config/aarch64/aarch64.c (aarch64_expand_call): Likewise.\n+\tInsert a CALLEE_ABI unspec into the call pattern as the second\n+\telement in the PARALLEL.\n+\t(aarch64_simd_call_p): Delete.\n+\t(aarch64_insn_callee_abi): Get the arm_pcs of the callee from\n+\tthe new CALLEE_ABI element of the PARALLEL.\n+\t(aarch64_init_cumulative_args): Get the arm_pcs of the callee\n+\tfrom the function type, if given.\n+\t(aarch64_function_arg_advance): Handle ARM_PCS_SIMD.\n+\t(aarch64_function_arg): Likewise.  Return the arm_pcs of the callee\n+\twhen passed the function_arg_info end marker.\n+\t(aarch64_output_mi_thunk): Pass the arm_pcs of the callee as the\n+\tfinal argument of gen_sibcall.\n+\t* config/aarch64/aarch64.md (UNSPEC_CALLEE_ABI): New unspec.\n+\t(call): Make operand 2 a const_int_operand and pass it to expand_call.\n+\tWrap it in an UNSPEC_CALLEE_ABI unspec for the dummy define_expand\n+\tpattern.\n+\t(call_value): Likewise operand 3.\n+\t(sibcall): Likewise operand 2.  Place the unspec before rather than\n+\tafter the return.\n+\t(sibcall_value): Likewise operand 3.\n+\t(*call_insn, *call_value_insn): Include an UNSPEC_CALLEE_ABI.\n+\t(tlsgd_small_<mode>, *tlsgd_small_<mode>): Likewise.\n+\t(*sibcall_insn, *sibcall_value_insn): Likewise.  Remove empty\n+\tconstraint strings.\n+\t(untyped_call): Pass const0_rtx as the callee ABI to gen_call.\n+\n 2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* regs.h (HARD_REGNO_CALLER_SAVE_MODE): Update call to"}, {"sha": "919f2b1fd283b05b9cc5a46ac7edab2582bf2296", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -468,7 +468,7 @@ bool aarch64_const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT,\n bool aarch64_constant_address_p (rtx);\n bool aarch64_emit_approx_div (rtx, rtx, rtx);\n bool aarch64_emit_approx_sqrt (rtx, rtx, bool);\n-void aarch64_expand_call (rtx, rtx, bool);\n+void aarch64_expand_call (rtx, rtx, rtx, bool);\n bool aarch64_expand_cpymem (rtx *);\n bool aarch64_float_const_zero_rtx_p (rtx);\n bool aarch64_float_const_rtx_p (rtx);"}, {"sha": "85c87bb626b21d1c10b5d76ce5a6e8f9ebdacd14", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -1872,37 +1872,17 @@ aarch64_reg_save_mode (tree fndecl, unsigned regno)\n \t   : (aarch64_simd_decl_p (fndecl) ? E_TFmode : E_DFmode);\n }\n \n-/* Return true if the instruction is a call to a SIMD function, false\n-   if it is not a SIMD function or if we do not know anything about\n-   the function.  */\n-\n-static bool\n-aarch64_simd_call_p (const rtx_insn *insn)\n-{\n-  rtx symbol;\n-  rtx call;\n-  tree fndecl;\n-\n-  gcc_assert (CALL_P (insn));\n-  call = get_call_rtx_from (insn);\n-  symbol = XEXP (XEXP (call, 0), 0);\n-  if (GET_CODE (symbol) != SYMBOL_REF)\n-    return false;\n-  fndecl = SYMBOL_REF_DECL (symbol);\n-  if (!fndecl)\n-    return false;\n-\n-  return aarch64_simd_decl_p (fndecl);\n-}\n-\n /* Implement TARGET_INSN_CALLEE_ABI.  */\n \n const predefined_function_abi &\n aarch64_insn_callee_abi (const rtx_insn *insn)\n {\n-  if (aarch64_simd_call_p (insn))\n-    return aarch64_simd_abi ();\n-  return default_function_abi;\n+  rtx pat = PATTERN (insn);\n+  gcc_assert (GET_CODE (pat) == PARALLEL);\n+  rtx unspec = XVECEXP (pat, 0, 1);\n+  gcc_assert (GET_CODE (unspec) == UNSPEC\n+\t      && XINT (unspec, 1) == UNSPEC_CALLEE_ABI);\n+  return function_abis[INTVAL (XVECEXP (unspec, 0, 0))];\n }\n \n /* Implement TARGET_HARD_REGNO_CALL_PART_CLOBBERED.  The callee only saves\n@@ -4847,27 +4827,31 @@ static rtx\n aarch64_function_arg (cumulative_args_t pcum_v, const function_arg_info &arg)\n {\n   CUMULATIVE_ARGS *pcum = get_cumulative_args (pcum_v);\n-  gcc_assert (pcum->pcs_variant == ARM_PCS_AAPCS64);\n+  gcc_assert (pcum->pcs_variant == ARM_PCS_AAPCS64\n+\t      || pcum->pcs_variant == ARM_PCS_SIMD);\n \n   if (arg.end_marker_p ())\n-    return NULL_RTX;\n+    return gen_int_mode (pcum->pcs_variant, DImode);\n \n   aarch64_layout_arg (pcum_v, arg.mode, arg.type, arg.named);\n   return pcum->aapcs_reg;\n }\n \n void\n aarch64_init_cumulative_args (CUMULATIVE_ARGS *pcum,\n-\t\t\t   const_tree fntype ATTRIBUTE_UNUSED,\n-\t\t\t   rtx libname ATTRIBUTE_UNUSED,\n-\t\t\t   const_tree fndecl ATTRIBUTE_UNUSED,\n-\t\t\t   unsigned n_named ATTRIBUTE_UNUSED)\n+\t\t\t      const_tree fntype,\n+\t\t\t      rtx libname ATTRIBUTE_UNUSED,\n+\t\t\t      const_tree fndecl ATTRIBUTE_UNUSED,\n+\t\t\t      unsigned n_named ATTRIBUTE_UNUSED)\n {\n   pcum->aapcs_ncrn = 0;\n   pcum->aapcs_nvrn = 0;\n   pcum->aapcs_nextncrn = 0;\n   pcum->aapcs_nextnvrn = 0;\n-  pcum->pcs_variant = ARM_PCS_AAPCS64;\n+  if (fntype)\n+    pcum->pcs_variant = (arm_pcs) fntype_abi (fntype).id ();\n+  else\n+    pcum->pcs_variant = ARM_PCS_AAPCS64;\n   pcum->aapcs_reg = NULL_RTX;\n   pcum->aapcs_arg_processed = false;\n   pcum->aapcs_stack_words = 0;\n@@ -4892,7 +4876,8 @@ aarch64_function_arg_advance (cumulative_args_t pcum_v,\n \t\t\t      const function_arg_info &arg)\n {\n   CUMULATIVE_ARGS *pcum = get_cumulative_args (pcum_v);\n-  if (pcum->pcs_variant == ARM_PCS_AAPCS64)\n+  if (pcum->pcs_variant == ARM_PCS_AAPCS64\n+      || pcum->pcs_variant == ARM_PCS_SIMD)\n     {\n       aarch64_layout_arg (pcum_v, arg.mode, arg.type, arg.named);\n       gcc_assert ((pcum->aapcs_reg != NULL_RTX)\n@@ -6921,7 +6906,8 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     }\n   funexp = XEXP (DECL_RTL (function), 0);\n   funexp = gen_rtx_MEM (FUNCTION_MODE, funexp);\n-  insn = emit_call_insn (gen_sibcall (funexp, const0_rtx, NULL_RTX));\n+  rtx callee_abi = gen_int_mode (fndecl_abi (function).id (), DImode);\n+  insn = emit_call_insn (gen_sibcall (funexp, const0_rtx, callee_abi));\n   SIBLING_CALL_P (insn) = 1;\n \n   insn = get_insns ();\n@@ -7999,11 +7985,12 @@ aarch64_fixed_condition_code_regs (unsigned int *p1, unsigned int *p2)\n    RESULT is the register in which the result is returned.  It's NULL for\n    \"call\" and \"sibcall\".\n    MEM is the location of the function call.\n+   CALLEE_ABI is a const_int that gives the arm_pcs of the callee.\n    SIBCALL indicates whether this function call is normal call or sibling call.\n    It will generate different pattern accordingly.  */\n \n void\n-aarch64_expand_call (rtx result, rtx mem, bool sibcall)\n+aarch64_expand_call (rtx result, rtx mem, rtx callee_abi, bool sibcall)\n {\n   rtx call, callee, tmp;\n   rtvec vec;\n@@ -8033,7 +8020,11 @@ aarch64_expand_call (rtx result, rtx mem, bool sibcall)\n   else\n     tmp = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNUM));\n \n-  vec = gen_rtvec (2, call, tmp);\n+  gcc_assert (CONST_INT_P (callee_abi));\n+  callee_abi = gen_rtx_UNSPEC (DImode, gen_rtvec (1, callee_abi),\n+\t\t\t       UNSPEC_CALLEE_ABI);\n+\n+  vec = gen_rtvec (3, call, callee_abi, tmp);\n   call = gen_rtx_PARALLEL (VOIDmode, vec);\n \n   aarch64_emit_call_insn (call);"}, {"sha": "e483572820ccb3680846247b04319d5922114c4c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -130,6 +130,7 @@\n     UNSPEC_AUTIB1716\n     UNSPEC_AUTIASP\n     UNSPEC_AUTIBSP\n+    UNSPEC_CALLEE_ABI\n     UNSPEC_CASESI\n     UNSPEC_CRC32B\n     UNSPEC_CRC32CB\n@@ -913,21 +914,23 @@\n ;; -------------------------------------------------------------------\n \n (define_expand \"call\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\")\n-\t\t    (match_operand 1 \"general_operand\"))\n-\t      (use (match_operand 2 \"\" \"\"))\n-\t      (clobber (reg:DI LR_REGNUM))])]\n+  [(parallel\n+     [(call (match_operand 0 \"memory_operand\")\n+\t    (match_operand 1 \"general_operand\"))\n+      (unspec:DI [(match_operand 2 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n+      (clobber (reg:DI LR_REGNUM))])]\n   \"\"\n   \"\n   {\n-    aarch64_expand_call (NULL_RTX, operands[0], false);\n+    aarch64_expand_call (NULL_RTX, operands[0], operands[2], false);\n     DONE;\n   }\"\n )\n \n (define_insn \"*call_insn\"\n   [(call (mem:DI (match_operand:DI 0 \"aarch64_call_insn_operand\" \"r, Usf\"))\n \t (match_operand 1 \"\" \"\"))\n+   (unspec:DI [(match_operand:DI 2 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n    (clobber (reg:DI LR_REGNUM))]\n   \"\"\n   \"@\n@@ -937,15 +940,16 @@\n )\n \n (define_expand \"call_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\")\n-\t\t\t (match_operand 2 \"general_operand\")))\n-\t      (use (match_operand 3 \"\" \"\"))\n-\t      (clobber (reg:DI LR_REGNUM))])]\n+  [(parallel\n+     [(set (match_operand 0 \"\")\n+\t   (call (match_operand 1 \"memory_operand\")\n+\t\t (match_operand 2 \"general_operand\")))\n+     (unspec:DI [(match_operand 3 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n+     (clobber (reg:DI LR_REGNUM))])]\n   \"\"\n   \"\n   {\n-    aarch64_expand_call (operands[0], operands[1], false);\n+    aarch64_expand_call (operands[0], operands[1], operands[3], false);\n     DONE;\n   }\"\n )\n@@ -954,6 +958,7 @@\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"aarch64_call_insn_operand\" \"r, Usf\"))\n \t\t      (match_operand 2 \"\" \"\")))\n+   (unspec:DI [(match_operand:DI 3 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n    (clobber (reg:DI LR_REGNUM))]\n   \"\"\n   \"@\n@@ -963,33 +968,36 @@\n )\n \n (define_expand \"sibcall\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\")\n-\t\t    (match_operand 1 \"general_operand\"))\n-\t      (return)\n-\t      (use (match_operand 2 \"\" \"\"))])]\n+  [(parallel\n+     [(call (match_operand 0 \"memory_operand\")\n+\t    (match_operand 1 \"general_operand\"))\n+      (unspec:DI [(match_operand 2 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n+      (return)])]\n   \"\"\n   {\n-    aarch64_expand_call (NULL_RTX, operands[0], true);\n+    aarch64_expand_call (NULL_RTX, operands[0], operands[2], true);\n     DONE;\n   }\n )\n \n (define_expand \"sibcall_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\")\n-\t\t\t (match_operand 2 \"general_operand\")))\n-\t      (return)\n-\t      (use (match_operand 3 \"\" \"\"))])]\n+  [(parallel\n+     [(set (match_operand 0 \"\")\n+\t   (call (match_operand 1 \"memory_operand\")\n+\t\t (match_operand 2 \"general_operand\")))\n+      (unspec:DI [(match_operand 3 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n+      (return)])]\n   \"\"\n   {\n-    aarch64_expand_call (operands[0], operands[1], true);\n+    aarch64_expand_call (operands[0], operands[1], operands[3], true);\n     DONE;\n   }\n )\n \n (define_insn \"*sibcall_insn\"\n   [(call (mem:DI (match_operand:DI 0 \"aarch64_call_insn_operand\" \"Ucs, Usf\"))\n-\t (match_operand 1 \"\" \"\"))\n+\t (match_operand 1 \"\"))\n+   (unspec:DI [(match_operand:DI 2 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n    (return)]\n   \"SIBLING_CALL_P (insn)\"\n   \"@\n@@ -999,10 +1007,11 @@\n )\n \n (define_insn \"*sibcall_value_insn\"\n-  [(set (match_operand 0 \"\" \"\")\n+  [(set (match_operand 0 \"\")\n \t(call (mem:DI\n \t\t(match_operand:DI 1 \"aarch64_call_insn_operand\" \"Ucs, Usf\"))\n-\t      (match_operand 2 \"\" \"\")))\n+\t      (match_operand 2 \"\")))\n+   (unspec:DI [(match_operand:DI 3 \"const_int_operand\")] UNSPEC_CALLEE_ABI)\n    (return)]\n   \"SIBLING_CALL_P (insn)\"\n   \"@\n@@ -1022,7 +1031,9 @@\n {\n   int i;\n \n-  emit_call_insn (gen_call (operands[0], const0_rtx, NULL));\n+  /* Untyped calls always use the default ABI.  It's only possible to use\n+     ABI variants if we know the type of the target function.  */\n+  emit_call_insn (gen_call (operands[0], const0_rtx, const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {\n@@ -6682,6 +6693,7 @@\n (define_expand \"tlsgd_small_<mode>\"\n  [(parallel [(set (match_operand 0 \"register_operand\")\n                   (call (mem:DI (match_dup 2)) (const_int 1)))\n+\t     (unspec:DI [(const_int 0)] UNSPEC_CALLEE_ABI)\n \t     (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\")] UNSPEC_GOTSMALLTLS)\n \t     (clobber (reg:DI LR_REGNUM))])]\n  \"\"\n@@ -6692,6 +6704,7 @@\n (define_insn \"*tlsgd_small_<mode>\"\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(call (mem:DI (match_operand:DI 2 \"\" \"\")) (const_int 1)))\n+   (unspec:DI [(const_int 0)] UNSPEC_CALLEE_ABI)\n    (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\" \"S\")] UNSPEC_GOTSMALLTLS)\n    (clobber (reg:DI LR_REGNUM))\n   ]"}, {"sha": "2bf37cbbebdb48281517b853186fb7bb42b88457", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -1,3 +1,8 @@\n+2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/torture/simd-abi-10.c: New test.\n+\t* gcc.target/aarch64/torture/simd-abi-11.c: Likewise.\n+\n 2019-09-30  Yuliang Wang  <yuliang.wang@arm.com>\n \n \t* gcc.dg/vect/vect-sdiv-pow2-1.c: New test."}, {"sha": "3d6893ee020dc0cea6a17946fee69c319d9e94db", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-10.c?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+int __attribute__((aarch64_vector_pcs)) (*callee) (void);\n+\n+int __attribute__ ((aarch64_vector_pcs))\n+caller (int *x)\n+{\n+  return callee () + 1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tstp\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\tq} } } */\n+/* { dg-final { scan-assembler-not {\\tldr\\tq} } } */"}, {"sha": "de99bd701992cc1db4c2c7816a99cbdf81259e98", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-11.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc4d925f640c3cd0336bae4dc6004244a5c80a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-11.c?ref=08cc4d925f640c3cd0336bae4dc6004244a5c80a", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+int (*callee) (void);\n+\n+int __attribute__ ((aarch64_vector_pcs))\n+caller (int *x)\n+{\n+  return callee () + 1;\n+}\n+\n+/* { dg-final { scan-assembler {\\sstp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sstp\\tq22, q23} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq8, q9} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq10, q11} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq12, q13} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq14, q15} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq16, q17} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq18, q19} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq20, q21} } } */\n+/* { dg-final { scan-assembler {\\sldp\\tq22, q23} } } */"}]}