{"sha": "dd825b9b5d2705023cd3faa20684b881d154a9ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4MjViOWI1ZDI3MDUwMjNjZDNmYWEyMDY4NGI4ODFkMTU0YTliYQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-22T10:45:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-22T10:45:23Z"}, "message": "Merge #582\n\n582: unsafe blocks can be used in expressions r=philberty a=philberty\n\nThis fixes an issue to allow unsafe within an expression.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "d5cbdda134b380c2612ed3c2b8af10d014db0c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5cbdda134b380c2612ed3c2b8af10d014db0c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd825b9b5d2705023cd3faa20684b881d154a9ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+UxDCRBK7hj4Ov3rIwAAev4IAIHfbp3zlxgaVV+T4l5W0lZg\nn4nIlTmVY3butjhreiG44apuJR8jo+4XbMRgOQju5PyaGKO+15hs08bXZ2dBRWDX\nmMmpotWwElGNYtCmlppFLQ06G6PSxowdu/uHTotnkkEu4qse0f7I6sqC5Yom+9h4\nran+8EcUOIUjFhLag9nn4Gosnd7jht3bxtgzTPhVp0XW+KAJgpU3mJJIBuVIeJGK\nNLl3hvwYtBWccVZo6VWV2JylLqb7nJ6NWQp2Ub5B08Q8t3l0E0iqjzv4ijJ4eGtw\nFAxGvsnShQUByB4THpW/osjywXmXhXaYX8T0qsaMpk85RGt1dBjKNqxl95vUYPo=\n=KbvG\n-----END PGP SIGNATURE-----\n", "payload": "tree d5cbdda134b380c2612ed3c2b8af10d014db0c1d\nparent 6dfde8225f4184552aca9c614894ac13144c2298\nparent 1709592fbf4786eeb4ac86d19e9d8a0aea3692ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626950723 +0000\ncommitter GitHub <noreply@github.com> 1626950723 +0000\n\nMerge #582\n\n582: unsafe blocks can be used in expressions r=philberty a=philberty\n\nThis fixes an issue to allow unsafe within an expression.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd825b9b5d2705023cd3faa20684b881d154a9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd825b9b5d2705023cd3faa20684b881d154a9ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd825b9b5d2705023cd3faa20684b881d154a9ba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfde8225f4184552aca9c614894ac13144c2298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfde8225f4184552aca9c614894ac13144c2298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfde8225f4184552aca9c614894ac13144c2298"}, {"sha": "1709592fbf4786eeb4ac86d19e9d8a0aea3692ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1709592fbf4786eeb4ac86d19e9d8a0aea3692ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1709592fbf4786eeb4ac86d19e9d8a0aea3692ea"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "bdf1e09a029ed4ec6c544597f9aa1d34d9ae0be2", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd825b9b5d2705023cd3faa20684b881d154a9ba/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd825b9b5d2705023cd3faa20684b881d154a9ba/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=dd825b9b5d2705023cd3faa20684b881d154a9ba", "patch": "@@ -8704,10 +8704,17 @@ Parser<ManagedTokenSource>::parse_async_block_expr (AST::AttrVec outer_attrs)\n // Parses an unsafe block expression.\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::UnsafeBlockExpr>\n-Parser<ManagedTokenSource>::parse_unsafe_block_expr (AST::AttrVec outer_attrs)\n+Parser<ManagedTokenSource>::parse_unsafe_block_expr (AST::AttrVec outer_attrs,\n+\t\t\t\t\t\t     bool pratt_parse)\n {\n-  Location locus = lexer.peek_token ()->get_locus ();\n-  skip_token (UNSAFE);\n+  Location locus;\n+  if (!pratt_parse)\n+    {\n+      locus = lexer.peek_token ()->get_locus ();\n+      skip_token (UNSAFE);\n+    }\n+  else\n+    locus = lexer.peek_token ()->get_locus () - 1;\n \n   // parse block expression (required)\n   std::unique_ptr<AST::BlockExpr> block_expr = parse_block_expr ();\n@@ -12823,6 +12830,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n     case LEFT_SQUARE:\n       // array definition expr (not indexing)\n       return parse_array_expr (std::move (outer_attrs), true);\n+    case UNSAFE:\n+      return parse_unsafe_block_expr (std::move (outer_attrs), true);\n     default:\n       if (!restrictions.expr_can_be_null)\n \tadd_error (Error (tok->get_locus (),"}, {"sha": "1c7bd781b3ff1ca62b8b6d5769850cd30c330bc2", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd825b9b5d2705023cd3faa20684b881d154a9ba/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd825b9b5d2705023cd3faa20684b881d154a9ba/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=dd825b9b5d2705023cd3faa20684b881d154a9ba", "patch": "@@ -504,8 +504,6 @@ template <typename ManagedTokenSource> class Parser\n   AST::LoopLabel parse_loop_label ();\n   std::unique_ptr<AST::AsyncBlockExpr>\n   parse_async_block_expr (AST::AttrVec outer_attrs = AST::AttrVec ());\n-  std::unique_ptr<AST::UnsafeBlockExpr>\n-  parse_unsafe_block_expr (AST::AttrVec outer_attrs = AST::AttrVec ());\n   std::unique_ptr<AST::GroupedExpr> parse_grouped_expr (AST::AttrVec outer_attrs\n \t\t\t\t\t\t\t= AST::AttrVec ());\n   std::unique_ptr<AST::ClosureExpr> parse_closure_expr (AST::AttrVec outer_attrs\n@@ -522,6 +520,9 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::ContinueExpr>\n   parse_continue_expr (AST::AttrVec outer_attrs = AST::AttrVec (),\n \t\t       bool pratt_parse = false);\n+  std::unique_ptr<AST::UnsafeBlockExpr>\n+  parse_unsafe_block_expr (AST::AttrVec outer_attrs = AST::AttrVec (),\n+\t\t\t   bool pratt_parse = false);\n   std::unique_ptr<AST::ArrayExpr> parse_array_expr (AST::AttrVec outer_attrs\n \t\t\t\t\t\t    = AST::AttrVec (),\n \t\t\t\t\t\t    bool pratt_parse = false);"}]}