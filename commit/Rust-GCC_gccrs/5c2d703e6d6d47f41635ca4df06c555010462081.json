{"sha": "5c2d703e6d6d47f41635ca4df06c555010462081", "node_id": "C_kwDOANBUbNoAKDVjMmQ3MDNlNmQ2ZDQ3ZjQxNjM1Y2E0ZGYwNmM1NTUwMTA0NjIwODE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-17T14:14:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-17T19:51:04Z"}, "message": "libstdc++: Add attributes to functions in <memory_resource>\n\nAdd attributes to the accessors for the global memory resource objects,\nto allow the compiler to eliminate redundant calls to them. For example,\nmultiple calls to std::pmr::new_delete_resource() will always return the\nsame object, and so the compiler can replace them with a single call.\n\nIdeally we would like adjacent calls to std::pmr::get_default_resource()\nto be combined into a single call by the CSE pass. The 'pure' attribute\nwould permit that. However, the standard requires that calls to\nstd::pmr::set_default_resource() synchronize with subsequent calls to\nstd::pmr::get_default_resource().  With 'pure' the DCE pass might\neliminate seemingly redundant calls to std::pmr::get_default_resource().\nThat might be unsafe, because the caller might be relying on the\nassociated synchronization. We could use a hypothetical attribute that\nallows CSE but not DCE, but we don't have one. So it can't be 'pure'.\n\nAlso add [[nodiscard]] to equality operators.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/memory_resource (new_delete_resource): Add\n\tnodiscard, returns_nonnull and const attributes.\n\t(null_memory_resource): Likewise.\n\t(set_default_resource, get_default_resource): Add returns_nonnull\n\tattribute.\n\t(memory_resource::is_equal): Add nodiscard attribute.\n\t(operator==, operator!=): Likewise.", "tree": {"sha": "f48a78f7fff6b6350fb4fa804aa63578a9988c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48a78f7fff6b6350fb4fa804aa63578a9988c64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c2d703e6d6d47f41635ca4df06c555010462081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2d703e6d6d47f41635ca4df06c555010462081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2d703e6d6d47f41635ca4df06c555010462081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2d703e6d6d47f41635ca4df06c555010462081/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1ce85135a92481307f2eb4ad805bc53f6137a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1ce85135a92481307f2eb4ad805bc53f6137a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1ce85135a92481307f2eb4ad805bc53f6137a3"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "88e8abd60faddbb2cc7a9a95df0cae6fa47f30ff", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2d703e6d6d47f41635ca4df06c555010462081/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2d703e6d6d47f41635ca4df06c555010462081/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=5c2d703e6d6d47f41635ca4df06c555010462081", "patch": "@@ -74,11 +74,26 @@ namespace pmr\n #endif\n \n   // Global memory resources\n-  memory_resource* new_delete_resource() noexcept;\n-  memory_resource* null_memory_resource() noexcept;\n-  memory_resource* set_default_resource(memory_resource* __r) noexcept;\n-  memory_resource* get_default_resource() noexcept\n-    __attribute__((__returns_nonnull__));\n+\n+  /// A pmr::memory_resource that uses `new` to allocate memory\n+  [[nodiscard, __gnu__::__returns_nonnull__, __gnu__::__const__]]\n+  memory_resource*\n+  new_delete_resource() noexcept;\n+\n+  /// A pmr::memory_resource that always throws `bad_alloc`\n+  [[nodiscard, __gnu__::__returns_nonnull__, __gnu__::__const__]]\n+  memory_resource*\n+  null_memory_resource() noexcept;\n+\n+  /// Replace the default memory resource pointer\n+  [[__gnu__::__returns_nonnull__]]\n+  memory_resource*\n+  set_default_resource(memory_resource* __r) noexcept;\n+\n+  /// Get the current default memory resource pointer\n+  [[__gnu__::__returns_nonnull__]]\n+  memory_resource*\n+  get_default_resource() noexcept;\n \n   // Pool resource classes\n   struct pool_options;\n@@ -111,6 +126,7 @@ namespace pmr\n     __attribute__((__nonnull__))\n     { return do_deallocate(__p, __bytes, __alignment); }\n \n+    [[nodiscard]]\n     bool\n     is_equal(const memory_resource& __other) const noexcept\n     { return do_is_equal(__other); }\n@@ -126,11 +142,13 @@ namespace pmr\n     do_is_equal(const memory_resource& __other) const noexcept = 0;\n   };\n \n+  [[nodiscard]]\n   inline bool\n   operator==(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return &__a == &__b || __a.is_equal(__b); }\n \n #if __cpp_impl_three_way_comparison < 201907L\n+  [[nodiscard]]\n   inline bool\n   operator!=(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return !(__a == __b); }\n@@ -369,13 +387,15 @@ namespace pmr\n     };\n \n   template<typename _Tp1, typename _Tp2>\n+    [[nodiscard]]\n     inline bool\n     operator==(const polymorphic_allocator<_Tp1>& __a,\n \t       const polymorphic_allocator<_Tp2>& __b) noexcept\n     { return *__a.resource() == *__b.resource(); }\n \n #if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp1, typename _Tp2>\n+    [[nodiscard]]\n     inline bool\n     operator!=(const polymorphic_allocator<_Tp1>& __a,\n \t       const polymorphic_allocator<_Tp2>& __b) noexcept"}]}