{"sha": "0411210fddbd3ec27c8dc1183f40f662712a2232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxMTIxMGZkZGJkM2VjMjdjOGRjMTE4M2Y0MGY2NjI3MTJhMjIzMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:10:47Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:10:47Z"}, "message": "genmodes: Update GET_MODE_MASK when changing NUNITS [PR98214]\n\nThe static GET_MODE_MASKs for SVE vectors are based on the\nstatic precisions, which in turn are based on 128-bit SVE.\nThe precisions are later updated based on -msve-vector-bits\n(usually to become variable length), but the GET_MODE_MASK\nstayed the same.  This caused combine to fold:\n\n  (*_extract:DI (subreg:DI (reg:VNxMM R) 0) ...)\n\nto zero because the extracted bits appeared to be insignificant.\n\ngcc/\n\tPR rtl-optimization/98214\n\t* genmodes.c (emit_insn_modes_h): Emit a definition of CONST_MODE_MASK.\n\t(emit_mode_mask): Treat mode_mask_array as non-constant if adj_nunits.\n\t(emit_mode_adjustments): Update GET_MODE_MASK when updating\n\tGET_MODE_NUNITS.\n\t* machmode.h (mode_mask_array): Use CONST_MODE_MASK.", "tree": {"sha": "8e8148d489ca4378607eb44f5cc7f1da15d9343f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8148d489ca4378607eb44f5cc7f1da15d9343f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0411210fddbd3ec27c8dc1183f40f662712a2232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0411210fddbd3ec27c8dc1183f40f662712a2232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0411210fddbd3ec27c8dc1183f40f662712a2232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0411210fddbd3ec27c8dc1183f40f662712a2232/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2eb616a0f7bea78164912aa438c29fe1ef5774a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2eb616a0f7bea78164912aa438c29fe1ef5774a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2eb616a0f7bea78164912aa438c29fe1ef5774a"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "d053eb3ebadad2498e937ff82c5768a045c0df9a", "filename": "gcc/genmodes.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=0411210fddbd3ec27c8dc1183f40f662712a2232", "patch": "@@ -1324,6 +1324,7 @@ enum machine_mode\\n{\");\n #endif\n   printf (\"#define CONST_MODE_IBIT%s\\n\", adj_ibit ? \"\" : \" const\");\n   printf (\"#define CONST_MODE_FBIT%s\\n\", adj_fbit ? \"\" : \" const\");\n+  printf (\"#define CONST_MODE_MASK%s\\n\", adj_nunits ? \"\" : \" const\");\n   emit_max_int ();\n \n   for_all_modes (c, m)\n@@ -1561,8 +1562,8 @@ emit_mode_mask (void)\n   int c;\n   struct mode_data *m;\n \n-  print_decl (\"unsigned HOST_WIDE_INT\", \"mode_mask_array\",\n-\t      \"NUM_MACHINE_MODES\");\n+  print_maybe_const_decl (\"%sunsigned HOST_WIDE_INT\", \"mode_mask_array\",\n+\t\t\t  \"NUM_MACHINE_MODES\", adj_nunits);\n   puts (\"\\\n #define MODE_MASK(m)                          \\\\\\n\\\n   ((m) >= HOST_BITS_PER_WIDE_INT)             \\\\\\n\\\n@@ -1719,6 +1720,20 @@ emit_mode_adjustments (void)\n   struct mode_adjust *a;\n   struct mode_data *m;\n \n+  if (adj_nunits)\n+    printf (\"\\n\"\n+\t    \"void\\n\"\n+\t    \"adjust_mode_mask (machine_mode mode)\\n\"\n+\t    \"{\\n\"\n+\t    \"  unsigned int precision;\\n\"\n+\t    \"  if (GET_MODE_PRECISION (mode).is_constant (&precision)\\n\"\n+\t    \"      && precision < HOST_BITS_PER_WIDE_INT)\\n\"\n+\t    \"    mode_mask_array[mode] = (HOST_WIDE_INT_1U << precision) - 1;\"\n+\t    \"\\n\"\n+\t    \"  else\\n\"\n+\t    \"    mode_mask_array[mode] = HOST_WIDE_INT_M1U;\\n\"\n+\t    \"}\\n\");\n+\n   puts (\"\\\n \\nvoid\\\n \\ninit_adjust_machine_modes (void)\\\n@@ -1736,10 +1751,11 @@ emit_mode_adjustments (void)\n       printf (\"    int old_factor = vector_element_size\"\n \t      \" (mode_precision[E_%smode], mode_nunits[E_%smode]);\\n\",\n \t      m->name, m->name);\n-      printf (\"    mode_precision[E_%smode] = ps * old_factor;\\n\",  m->name);\n+      printf (\"    mode_precision[E_%smode] = ps * old_factor;\\n\", m->name);\n       printf (\"    mode_size[E_%smode] = exact_div (mode_precision[E_%smode],\"\n \t      \" BITS_PER_UNIT);\\n\", m->name, m->name);\n       printf (\"    mode_nunits[E_%smode] = ps;\\n\", m->name);\n+      printf (\"    adjust_mode_mask (E_%smode);\\n\", m->name);\n       printf (\"  }\\n\");\n     }\n "}, {"sha": "11247fc200678dc77ffda4a68ec2da2d3805dbac", "filename": "gcc/machmode.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=0411210fddbd3ec27c8dc1183f40f662712a2232", "patch": "@@ -712,7 +712,8 @@ extern CONST_MODE_FBIT unsigned char mode_fbit[NUM_MACHINE_MODES];\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n-extern const unsigned HOST_WIDE_INT mode_mask_array[NUM_MACHINE_MODES];\n+extern CONST_MODE_MASK unsigned HOST_WIDE_INT\n+  mode_mask_array[NUM_MACHINE_MODES];\n \n #define GET_MODE_MASK(MODE) mode_mask_array[MODE]\n "}, {"sha": "2de9625e98dc45b7d5c60d4b9effb3e481ea385c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr98214.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0411210fddbd3ec27c8dc1183f40f662712a2232/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98214.c?ref=0411210fddbd3ec27c8dc1183f40f662712a2232", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O3 -msve-vector-bits=512\" } */\n+\n+long c;\n+int a;\n+int e[14];\n+short b[14];\n+void d(long *f, long h) { *f ^= h + *f; }\n+void this_test_has_completed_successfully ();\n+int main() {\n+  e[2] = 1;\n+  for (int g = 0; g < 13; g++)\n+    a = b[g] = e[g];\n+  d(&c, a);\n+  for (int g = 0; g < 4; g++)\n+    d(&c, b[2]);\n+  if (c != 15)\n+    __builtin_abort();\n+  this_test_has_completed_successfully ();\n+}\n+\n+/* { dg-final { scan-assembler {this_test_has_completed_successfully} } } */"}]}