{"sha": "a3aaba68405751bae3f630669515b7ecdf77efa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhYWJhNjg0MDU3NTFiYWUzZjYzMDY2OTUxNWI3ZWNkZjc3ZWZhNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T08:35:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T10:31:21Z"}, "message": "tree-optimization/100778 - fix placement of trapping vectorized ops\n\nThis avoids placing possibly trapping vectorized operations where\nthe corresponding scalar operation was possibly not executed.\n\n2021-01-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100778\n\t* tree-vect-slp.c (vect_schedule_slp_node): Do not place trapping\n\tvectorized ops ahead of their scalar BB.\n\n\t* gcc.dg/torture/pr100778.c: New testcase.", "tree": {"sha": "35e469a3db7ff4960a247fd0b1ad7de13ca3a765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e469a3db7ff4960a247fd0b1ad7de13ca3a765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3aaba68405751bae3f630669515b7ecdf77efa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3aaba68405751bae3f630669515b7ecdf77efa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3aaba68405751bae3f630669515b7ecdf77efa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3aaba68405751bae3f630669515b7ecdf77efa6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6aeb85ee87c6b4e580b6b71e26cbe99e1dab70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6aeb85ee87c6b4e580b6b71e26cbe99e1dab70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6aeb85ee87c6b4e580b6b71e26cbe99e1dab70"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "7997f2f2bcd9ac990a5b2dbd3e75793e5d157f10", "filename": "gcc/testsuite/gcc.dg/torture/pr100778.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3aaba68405751bae3f630669515b7ecdf77efa6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100778.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3aaba68405751bae3f630669515b7ecdf77efa6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100778.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100778.c?ref=a3aaba68405751bae3f630669515b7ecdf77efa6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target *-*-*gnu* } } */\n+/* { dg-additional-options \"-fno-tree-sink -fno-math-errno -ftree-vectorize -D_GNU_SOURCE\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+double a[2];\n+void __attribute__((noipa)) foo ()\n+{\n+  double x = a[0];\n+  double y = a[1];\n+  double norm = __builtin_sqrt (x*x + y*y);\n+  if (norm > 1.)\n+    {\n+      x = x / norm;\n+      y = y / norm;\n+    }\n+  a[0] = x;\n+  a[1] = y;\n+}\n+\n+int main()\n+{\n+  feenableexcept (FE_INVALID);\n+  a[0] = 0.;\n+  a[1] = 0.;\n+  foo ();\n+  if (a[0] != 0. || a[1] != 0.)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f08797c2bc0c4d74074e951faea9cc19504ae631", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3aaba68405751bae3f630669515b7ecdf77efa6/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3aaba68405751bae3f630669515b7ecdf77efa6/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a3aaba68405751bae3f630669515b7ecdf77efa6", "patch": "@@ -7100,6 +7100,21 @@ vect_schedule_slp_node (vec_info *vinfo,\n \t  gcc_assert (seen_vector_def);\n \t  si = gsi_after_labels (as_a <bb_vec_info> (vinfo)->bbs[0]);\n \t}\n+      else if (is_a <bb_vec_info> (vinfo)\n+\t       && gimple_bb (last_stmt) != gimple_bb (stmt_info->stmt)\n+\t       && gimple_could_trap_p (stmt_info->stmt))\n+\t{\n+\t  /* We've constrained possibly trapping operations to all come\n+\t     from the same basic-block, if vectorized defs would allow earlier\n+\t     scheduling still force vectorized stmts to the original block.\n+\t     This is only necessary for BB vectorization since for loop vect\n+\t     all operations are in a single BB and scalar stmt based\n+\t     placement doesn't play well with epilogue vectorization.  */\n+\t  gcc_assert (dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t      gimple_bb (stmt_info->stmt),\n+\t\t\t\t      gimple_bb (last_stmt)));\n+\t  si = gsi_after_labels (gimple_bb (stmt_info->stmt));\n+\t}\n       else if (is_a <gphi *> (last_stmt))\n \tsi = gsi_after_labels (gimple_bb (last_stmt));\n       else"}]}