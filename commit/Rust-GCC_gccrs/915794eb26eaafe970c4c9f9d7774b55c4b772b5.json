{"sha": "915794eb26eaafe970c4c9f9d7774b55c4b772b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1Nzk0ZWIyNmVhYWZlOTcwYzRjOWY5ZDc3NzRiNTVjNGI3NzJiNQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-13T11:07:35Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-13T11:07:35Z"}, "message": "re PR tree-optimization/71416 (ICE at -O3 in 32-bit and 64-bit modes on x86_64-linux-gnu (vectorizable_live_operation))\n\n2016-06-13  Alan Hayward  <alan.hayward@arm.com>\n\ngcc/\n\tPR tree-optimization/71416\n\t* tree-vect-loop.c (vectorizable_live_operation): Let worklist have\n\tmultiple entries\n\nFrom-SVN: r237375", "tree": {"sha": "c5dbb766623b0e59baf27db30407570219722e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5dbb766623b0e59baf27db30407570219722e31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/915794eb26eaafe970c4c9f9d7774b55c4b772b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915794eb26eaafe970c4c9f9d7774b55c4b772b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/915794eb26eaafe970c4c9f9d7774b55c4b772b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915794eb26eaafe970c4c9f9d7774b55c4b772b5/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46c1cff63f942e715c53739610951ea58ab8c228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c1cff63f942e715c53739610951ea58ab8c228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c1cff63f942e715c53739610951ea58ab8c228"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "e8ad4c85a2dbfc0f53b72a6f5f455d1f58610a31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915794eb26eaafe970c4c9f9d7774b55c4b772b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915794eb26eaafe970c4c9f9d7774b55c4b772b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=915794eb26eaafe970c4c9f9d7774b55c4b772b5", "patch": "@@ -1,3 +1,9 @@\n+2016-06-13  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71416\n+\t* tree-vect-loop.c (vectorizable_live_operation): Let worklist have\n+\tmultiple entries\n+\n 2016-06-13  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (enum predictor_reason): Prefix enum with REASON_."}, {"sha": "91d0608e59cd93577061f9ed87662f5ad63c7d9f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915794eb26eaafe970c4c9f9d7774b55c4b772b5/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915794eb26eaafe970c4c9f9d7774b55c4b772b5/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=915794eb26eaafe970c4c9f9d7774b55c4b772b5", "patch": "@@ -6351,7 +6351,7 @@ vectorizable_live_operation (gimple *stmt,\n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, lhs)\n     if (!flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n \tworklist.safe_push (use_stmt);\n-  gcc_assert (worklist.length () == 1);\n+  gcc_assert (worklist.length () >= 1);\n \n   bitsize = TYPE_SIZE (TREE_TYPE (vectype));\n   vec_bitsize = TYPE_SIZE (vectype);\n@@ -6409,9 +6409,12 @@ vectorizable_live_operation (gimple *stmt,\n \n   /* Replace all uses of the USE_STMT in the worklist with the newly inserted\n      statement.  */\n-  use_stmt = worklist.pop ();\n-  replace_uses_by (gimple_phi_result (use_stmt), new_tree);\n-  update_stmt (use_stmt);\n+  while (!worklist.is_empty ())\n+    {\n+      use_stmt = worklist.pop ();\n+      replace_uses_by (gimple_phi_result (use_stmt), new_tree);\n+      update_stmt (use_stmt);\n+    }\n \n   return true;\n }"}]}