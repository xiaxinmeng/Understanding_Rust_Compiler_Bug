{"sha": "1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1MWVjZDYxOWNkNTY0ZDFlMWIwYzIwM2M5YWU2NWM3NWM3YzIxNg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-09-09T10:56:23Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-09T10:56:23Z"}, "message": "function.h (struct function): Add function_start_locus.\n\n        * function.h (struct function): Add function_start_locus.\n        * cfgexpand.c (gimple_expand_cfg): Use it.\n        * c-parser.c (c_parser_declaration_or_fndef): Set it.\ntestsuite/\n        * gcc.dg/always_inline.c: Place error message on function\n        name line.\n        * gcc.dg/winline-6.c: Same.\n        * gcc.dg/noreturn-1.c: Same.\n        * gcc.dg/noreturn-7.c: Same.\n        * gcc.dg/inline-14.c: Same.\n        * gcc.dg/always_inline3.c: Same.\n        * gcc.dg/winline-3.c: Same.\n        * gcc.dg/wtr-func-def-1.c: Same.\n        * gcc.dg/winline-5.c: Same.\n        * gcc.dg/winline-7.c: Same.\n        * gcc.dg/winline-9.c: Same.\n        * gcc.dg/noreturn-4.c: Same.\n        * gcc.dg/20041213-1.c: Use column numbers.\n\nFrom-SVN: r140144", "tree": {"sha": "166fffc125acbefeaadfe937a4ae5c5e18d0c996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/166fffc125acbefeaadfe937a4ae5c5e18d0c996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a135b1c41c63e75ad1b8d74345eca520e973e2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a135b1c41c63e75ad1b8d74345eca520e973e2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a135b1c41c63e75ad1b8d74345eca520e973e2f9"}], "stats": {"total": 193, "additions": 113, "deletions": 80}, "files": [{"sha": "d5d07197e85476fa56828627df573d2947aa59e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -1,3 +1,9 @@\n+2008-09-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* function.h (struct function): Add function_start_locus.\n+\t* cfgexpand.c (gimple_expand_cfg): Use it.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Set it.\n+\n 2008-09-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37433"}, {"sha": "43ef655495e4d165c6cb1f094094695179d38f62", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -1301,9 +1301,9 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok, bool empty_ok,\n       while (c_parser_next_token_is_not (parser, CPP_EOF)\n \t     && c_parser_next_token_is_not (parser, CPP_OPEN_BRACE))\n \tc_parser_declaration_or_fndef (parser, false, false, true, false);\n-      DECL_SOURCE_LOCATION (current_function_decl)\n-\t= c_parser_peek_token (parser)->location;\n       store_parm_decls ();\n+      DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n+\t= c_parser_peek_token (parser)->location;\n       fnbody = c_parser_compound_statement (parser);\n       if (nested)\n \t{"}, {"sha": "d9e9835643b05c36f2a58909b314e37140db9ece", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2261,7 +2261,14 @@ gimple_expand_cfg (void)\n \n   insn_locators_alloc ();\n   if (!DECL_BUILT_IN (current_function_decl))\n-    set_curr_insn_source_location (DECL_SOURCE_LOCATION (current_function_decl));\n+    {\n+      /* Eventually, all FEs should explicitly set function_start_locus.  */\n+      if (cfun->function_start_locus == UNKNOWN_LOCATION)\n+       set_curr_insn_source_location\n+         (DECL_SOURCE_LOCATION (current_function_decl));\n+      else\n+       set_curr_insn_source_location (cfun->function_start_locus);\n+    }\n   set_curr_insn_block (DECL_INITIAL (current_function_decl));\n   prologue_locator = curr_insn_locator ();\n "}, {"sha": "e6214b3ae6f6830d18617964c733ef30ab14a175", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -527,6 +527,9 @@ struct function GTY(())\n   /* Last statement uid.  */\n   int last_stmt_uid;\n \n+  /* Line number of the start of the function for debugging purposes.  */\n+  location_t function_start_locus;\n+\n   /* Line number of the end of the function.  */\n   location_t function_end_locus;\n "}, {"sha": "2d1822705e58d46cf505d7945cfb61699e301642", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -1,3 +1,20 @@\n+2008-09-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/always_inline.c: Place error message on function\n+\tname line.\n+\t* gcc.dg/winline-6.c: Same.\n+\t* gcc.dg/noreturn-1.c: Same.\n+\t* gcc.dg/noreturn-7.c: Same.\n+\t* gcc.dg/inline-14.c: Same.\n+\t* gcc.dg/always_inline3.c: Same.\n+\t* gcc.dg/winline-3.c: Same.\n+\t* gcc.dg/wtr-func-def-1.c: Same.\n+\t* gcc.dg/winline-5.c: Same.\n+\t* gcc.dg/winline-7.c: Same.\n+\t* gcc.dg/winline-9.c: Same.\n+\t* gcc.dg/noreturn-4.c: Same.\n+\t* gcc.dg/20041213-1.c: Use column numbers.\n+\n 2008-09-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37433"}, {"sha": "aeff7443ce2813912fc6869b97003ec3f0ee9545", "filename": "gcc/testsuite/gcc.dg/20041213-1.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -1,33 +1,33 @@\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-fshow-column\" } */\n /* test redeclarations with void and implicit int */\n-extern foo1(); /* { dg-message \"note: previous declaration\" } */\n-extern void foo1(); /* { dg-error \"conflicting types\" } */\n+extern foo1(); /* { dg-message \"8:note: previous declaration\" } */\n+extern void foo1(); /* { dg-error \"13:conflicting types\" } */\n \n-extern void foo2(); /* { dg-message \"note: previous declaration\" } */\n-extern foo2(); /* { dg-error \"conflicting types\" } */\n+extern void foo2(); /* { dg-message \"13:note: previous declaration\" } */\n+extern foo2(); /* { dg-error \"8:conflicting types\" } */\n \n-void foo3() {} /* { dg-message \"note: previous definition\" } */\n-extern foo3(); /* { dg-error \"conflicting types\" } */\n+void foo3() {} /* { dg-message \"6:note: previous definition\" } */\n+extern foo3(); /* { dg-error \"8:conflicting types\" } */\n \n-extern foo4(); /* { dg-message \"note: previous declaration\" } */\n-void foo4() {} /* { dg-error \"conflicting types\" } */\n+extern foo4(); /* { dg-message \"8:note: previous declaration\" } */\n+void foo4() {} /* { dg-error \"6:conflicting types\" } */\n \n-extern void foo5(); /* { dg-message \"note: previous declaration\" } */\n-foo5() {} /* { dg-warning \"conflicting types\" } */\n+extern void foo5(); /* { dg-message \"13:note: previous declaration\" } */\n+foo5() {} /* { dg-warning \"1:conflicting types\" } */\n \n-foo6() {} /* { dg-message \"note: previous definition\" } */\n-extern void foo6(); /* { dg-error \"conflicting types\" } */\n+foo6() {} /* { dg-message \"1:note: previous definition\" } */\n+extern void foo6(); /* { dg-error \"13:conflicting types\" } */\n \n-foo7() {} /* { dg-message \"note: previous definition\" } */\n-void foo7() {} /* { dg-error \"conflicting types\" } */\n+foo7() {} /* { dg-message \"1:note: previous definition\" } */\n+void foo7() {} /* { dg-error \"6:conflicting types\" } */\n \n-void foo8() {} /* { dg-message \"note: previous definition\" } */\n-foo8() {} /* { dg-error \"conflicting types\" } */\n+void foo8() {} /* { dg-message \"6:note: previous definition\" } */\n+foo8() {} /* { dg-error \"1:conflicting types\" } */\n \n int use9() { foo9(); } /* { dg-message \"note: previous implicit declaration\" } */\n-extern void foo9(); /* { dg-warning \"conflicting types\" } */\n+extern void foo9(); /* { dg-warning \"13:conflicting types\" } */\n \n int use10() { foo10(); } /* { dg-message \"note: previous implicit declaration\" } */\n-void foo10() {} /* { dg-warning \"conflicting types\" } */\n+void foo10() {} /* { dg-warning \"6:conflicting types\" } */\n "}, {"sha": "08119f1a254cef93b3a7d39f3b3f7946cecac3a4", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-Winline -O2\" } */\n #include <stdarg.h>\n inline __attribute__ ((always_inline)) void\n-e(int t, ...)\n-{\t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*variable argument\" \"\" } */\n+e(int t, ...) /* { dg-message \"sorry\\[^\\n\\]*variable argument\" \"\" } */\n+{\n   va_list q;\n   va_start (q, t);\n }"}, {"sha": "97c80aa521718375e201998408045220799734a5", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-Winline -O2\" } */\n int do_something_evil (void);\n inline __attribute__ ((always_inline)) void\n-q2(void)\n-{ \t\t\t\t/* { dg-message \"sorry\\[^\\n\\]*recursive\" \"\" } */\n+q2(void) /* { dg-message \"sorry\\[^\\n\\]*recursive\" \"\" } */\n+{\n   if (do_something_evil ())\n     return;\n   q2(); \t\t\t/* { dg-message \"sorry\\[^\\n\\]*called from here\" \"\" } */"}, {"sha": "b2bfb67c5bc08ae5bdef1f198ea69cca87eeda36", "filename": "gcc/testsuite/gcc.dg/inline-14.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=c99\" } */\n \n-extern inline int func1 (void)\n-{ /* { dg-message \"note: previous definition\" } */\n+extern inline int func1 (void) /* { dg-message \"note: previous definition\" } */\n+{\n   return 1;\n }\n \n@@ -12,8 +12,8 @@ inline int func1 (void) /* { dg-error \"redefinition\" } */\n   return 1;\n }\n \n-inline int func2 (void)\n-{ /* { dg-message \"note: previous definition\" } */\n+inline int func2 (void) /* { dg-message \"note: previous definition\" } */\n+{\n   return 2;\n }\n "}, {"sha": "1e7a778103e226ad597a4e3649ec11784a59b16f", "filename": "gcc/testsuite/gcc.dg/noreturn-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-1.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -25,8 +25,8 @@ foo3(void)\n \n extern void foo4(void);\n void\n-foo4(void)\n-{ /* { dg-warning \"candidate for attribute 'noreturn'\" \"detect noreturn candidate\" } */\n+foo4(void) /* { dg-warning \"candidate for attribute 'noreturn'\" \"detect noreturn candidate\" } */\n+{\n   exit(0);\n }\n "}, {"sha": "bcc29dac69ad8853db7f3229185ebb9dc080a340", "filename": "gcc/testsuite/gcc.dg/noreturn-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -4,7 +4,7 @@\n extern void exit (int) __attribute__ ((__noreturn__));\n \n int\n-main (void)\n-{ /* { dg-warning \"function might be possible candidate for attribute 'noreturn'\" \"warn for main\" } */\n+main (void) /* { dg-warning \"function might be possible candidate for attribute 'noreturn'\" \"warn for main\" } */\n+{\n   exit (0);\n }"}, {"sha": "1913be1fe1d311f757c1f3fe23e696d39187c554", "filename": "gcc/testsuite/gcc.dg/noreturn-7.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -13,8 +13,8 @@ void _exit(int status) __attribute__ ((__noreturn__));\n \n int z = 0;\n \n-void g()\n-{             /* { dg-warning \"possible candidate\" } */\n+void g() /* { dg-warning \"possible candidate\" } */\n+{\n   if (++z > 10)\n     _exit(0);\n   g();\n@@ -27,15 +27,15 @@ void f()\n   f();\n }             /* { dg-bogus \"does return\" } */\n \n-int h()\n-{             /* { dg-warning \"possible candidate\" } */\n+int h() /* { dg-warning \"possible candidate\" } */\n+{\n   if (++z > 10)\n     _exit(0);\n   return h();\n }             /* { dg-bogus \"end of non-void function\" } */\n \n-int k()\n-{             /* { dg-warning \"possible candidate\" } */\n+int k() /* { dg-warning \"possible candidate\" } */\n+{\n   if (++z > 10)\n     _exit(0);\n   k();"}, {"sha": "d586cba644a9fd5762d171522b6091240f5cfe31", "filename": "gcc/testsuite/gcc.dg/winline-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-3.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-Winline -O2 --param max-inline-insns-single=1\" } */\n \n void big (void);\n-inline int q(void)\t\t\n-{\t\t\t\t/* { dg-warning \"max-inline-insns-single\" \"\" } */\n+inline int q(void) /* { dg-warning \"max-inline-insns-single\" \"\" } */\n+{\n \tbig();\n \tbig();\n \tbig();"}, {"sha": "ad1fc4100bbd0b4b172973c8668d3c01a660cfef", "filename": "gcc/testsuite/gcc.dg/winline-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-5.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-Winline -O2 --param inline-unit-growth=0 --param large-unit-insns=0\" } */\n \n void big (void);\n-inline int q(void)\t\t \n-{\t\t\t\t/* { dg-warning \"inline-unit-growth\" } */\n+inline int q(void) /* { dg-warning \"inline-unit-growth\" } */\n+{\n \tbig();\n \tbig();\n \tbig();"}, {"sha": "4e22ce14455302ea4a5b0abe0810cc60e77003b0", "filename": "gcc/testsuite/gcc.dg/winline-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-6.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-Winline -O2 --param large-function-growth=0 --param large-function-insns=1\" } */\n \n void big (void);\n-inline int q(void)\n-{\t\t\t\t/* { dg-warning \"large-function-growth\" } */\n+inline int q(void) /* { dg-warning \"large-function-growth\" } */\n+{\n \tbig();\n \tbig();\n \tbig();"}, {"sha": "19262da7c5597615e64fdc7fd764f764e913f34f", "filename": "gcc/testsuite/gcc.dg/winline-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-7.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -4,8 +4,8 @@\n extern void *alloca (__SIZE_TYPE__);\n \n void big (void);\n-inline void *q (void)\n-{\t\t\t\t/* { dg-warning \"(function not inlinable|alloca)\" } */\n+inline void *q (void) /* { dg-warning \"(function not inlinable|alloca)\" } */\n+{\n \treturn alloca (10);\n }\n inline void *t (void)"}, {"sha": "fddf5c68f0c81cd1e8ffe35c2cff1ec606198acf", "filename": "gcc/testsuite/gcc.dg/winline-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwinline-9.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -10,8 +10,8 @@ int aa (void)\n   test(t);\n }\n static inline\n-int bb (void)\n-{ \t\t\t\t/* { dg-warning \"large-stack-frame\" \"\" } */\n+int bb (void) /* { dg-warning \"large-stack-frame\" \"\" } */\n+{\n   char t[100];\n   test(t);\n }"}, {"sha": "049e05b8551adb629195259290d38062fb5e8c42", "filename": "gcc/testsuite/gcc.dg/wtr-func-def-1.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1751ecd619cd564d1e1b0c203c9ae65c75c7c216/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c?ref=1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "patch": "@@ -6,8 +6,8 @@\n \n /* Test some simple cases.  */\n \n-void f_void1 (void)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_void1 (void) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n@@ -16,8 +16,8 @@ void f_void2 ()\n   return;\n }\n \n-void f_int1 (int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_int1 (int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n@@ -29,8 +29,8 @@ void f_int2 (f)\n \n /* Test that we don't ever warn about nested functions.  */\n \n-void f_int3 (int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_int3 (int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   void f3a (void) { return; }\n   void f3b () { return; }\n   void f3c (int f) { return; }\n@@ -39,8 +39,8 @@ void f_int3 (int f)\n   return;\n }\n \n-void f_int4 (int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_int4 (int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   void f4a (void) { return; }\n   void f4b () { return; }\n   void f4c (int f) { return; }\n@@ -77,14 +77,14 @@ void f_int6 (f)\n    are still warned about.  */\n \n extern void f_int_p1 (int);\n-void f_int_p1 (int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_int_p1 (int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n extern void f_int_p2 (int f);\n-void f_int_p2 (int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_int_p2 (int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n@@ -103,14 +103,14 @@ void f_int_p4 (f)\n }\n \n extern void f_void_p1 ();\n-void f_void_p1 (void)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_void_p1 (void) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n extern void f_void_p2 (void);\n-void f_void_p2 (void)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_void_p2 (void) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n@@ -133,39 +133,39 @@ f_impl1()\n   return 0;\n }\n \n-f_impl2(void)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+f_impl2(void) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return 0;\n }\n \n-f_impl3(int f)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+f_impl3(int f) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return 0;\n }\n \n /* Test stdarg functions.  */\n \n-f_stdarg1(const char *s, ...)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+f_stdarg1(const char *s, ...) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return 0;\n }\n \n-void f_stdarg2(const char *s, ...)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_stdarg2(const char *s, ...) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n extern void f_stdarg3(const char *, ...);\n-void f_stdarg3(const char *s, ...)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_stdarg3(const char *s, ...) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n /* Test handling function pointer parameters.  */\n \n void f_fnptr1 (int f, int (*fp)(int));\n-void f_fnptr1 (int f, int (*fp)(int))\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+void f_fnptr1 (int f, int (*fp)(int)) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return;\n }\n \n@@ -180,8 +180,8 @@ void f_fnptr2 (f, fp)\n /* Test for main.  */\n \n int\n-main (int argc, char **argv)\n-{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+main (int argc, char **argv) /* { dg-warning \"traditional C rejects ISO C style\" } */\n+{\n   return 0;\n }\n "}]}