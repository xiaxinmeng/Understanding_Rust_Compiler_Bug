{"sha": "48a32c49568d0f93edb0a904f5ac871e4e44c091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhMzJjNDk1NjhkMGY5M2VkYjBhOTA0ZjVhYzg3MWU0ZTQ0YzA5MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-07-23T20:07:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-23T20:07:30Z"}, "message": "re PR fortran/45030 (-fwhole-file: Bogus error message with ENTRY and different result types)\n\n2010-07-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/45030\n        * resolve.c (resolve_global_procedure): Properly handle ENTRY.\n\nFrom-SVN: r162486", "tree": {"sha": "6d6c8c6193eed494d24d6b1592cdd505e670d94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d6c8c6193eed494d24d6b1592cdd505e670d94d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48a32c49568d0f93edb0a904f5ac871e4e44c091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a32c49568d0f93edb0a904f5ac871e4e44c091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a32c49568d0f93edb0a904f5ac871e4e44c091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a32c49568d0f93edb0a904f5ac871e4e44c091/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96bba5e69b93ae01d7f49dd1c12c94ddb462c381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bba5e69b93ae01d7f49dd1c12c94ddb462c381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96bba5e69b93ae01d7f49dd1c12c94ddb462c381"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "0fac55c00024f076892e3e4fd42164cb54b68b70", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a32c49568d0f93edb0a904f5ac871e4e44c091/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a32c49568d0f93edb0a904f5ac871e4e44c091/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48a32c49568d0f93edb0a904f5ac871e4e44c091", "patch": "@@ -1,3 +1,8 @@\n+2010-07-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/45030\n+\t* resolve.c (resolve_global_procedure): Properly handle ENTRY.\n+\n 2010-07-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* trans-types.c (gfc_get_array_descriptor_base,"}, {"sha": "a938ab36025d65efabcdf224a0e74a841f7ba7ae", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a32c49568d0f93edb0a904f5ac871e4e44c091/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a32c49568d0f93edb0a904f5ac871e4e44c091/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=48a32c49568d0f93edb0a904f5ac871e4e44c091", "patch": "@@ -1824,6 +1824,8 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t&& not_in_recursive (sym, gsym->ns)\n \t&& not_entry_self_reference (sym, gsym->ns))\n     {\n+      gfc_symbol *def_sym;\n+\n       /* Resolve the gsymbol namespace if needed.  */\n       if (!gsym->ns->resolved)\n \t{\n@@ -1858,12 +1860,24 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t    }\n \t}\n \n+      def_sym = gsym->ns->proc_name;\n+      if (def_sym->attr.entry_master)\n+\t{\n+\t  gfc_entry_list *entry;\n+\t  for (entry = gsym->ns->entries; entry; entry = entry->next)\n+\t    if (strcmp (entry->sym->name, sym->name) == 0)\n+\t      {\n+\t\tdef_sym = entry->sym;\n+\t\tbreak;\n+\t      }\n+\t}\n+\n       /* Differences in constant character lengths.  */\n       if (sym->attr.function && sym->ts.type == BT_CHARACTER)\n \t{\n \t  long int l1 = 0, l2 = 0;\n \t  gfc_charlen *cl1 = sym->ts.u.cl;\n-\t  gfc_charlen *cl2 = gsym->ns->proc_name->ts.u.cl;\n+\t  gfc_charlen *cl2 = def_sym->ts.u.cl;\n \n \t  if (cl1 != NULL\n \t      && cl1->length != NULL\n@@ -1883,14 +1897,14 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \n      /* Type mismatch of function return type and expected type.  */\n      if (sym->attr.function\n-\t && !gfc_compare_types (&sym->ts, &gsym->ns->proc_name->ts))\n+\t && !gfc_compare_types (&sym->ts, &def_sym->ts))\n \tgfc_error (\"Return type mismatch of function '%s' at %L (%s/%s)\",\n \t\t   sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n-\t\t   gfc_typename (&gsym->ns->proc_name->ts));\n+\t\t   gfc_typename (&def_sym->ts));\n \n-      if (gsym->ns->proc_name->formal)\n+      if (def_sym->formal)\n \t{\n-\t  gfc_formal_arglist *arg = gsym->ns->proc_name->formal;\n+\t  gfc_formal_arglist *arg = def_sym->formal;\n \t  for ( ; arg; arg = arg->next)\n \t    if (!arg->sym)\n \t      continue;\n@@ -1945,26 +1959,25 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t      }\n \t}\n \n-      if (gsym->ns->proc_name->attr.function)\n+      if (def_sym->attr.function)\n \t{\n \t  /* F2003, 12.3.1.1 (3a); F2008, 12.4.2.2 (3a) */\n-\t  if (gsym->ns->proc_name->as\n-\t      && gsym->ns->proc_name->as->rank\n-\t      && (!sym->as || sym->as->rank != gsym->ns->proc_name->as->rank))\n+\t  if (def_sym->as && def_sym->as->rank\n+\t      && (!sym->as || sym->as->rank != def_sym->as->rank))\n \t    gfc_error (\"The reference to function '%s' at %L either needs an \"\n \t\t       \"explicit INTERFACE or the rank is incorrect\", sym->name,\n \t\t       where);\n \n \t  /* F2003, 12.3.1.1 (3b); F2008, 12.4.2.2 (3b) */\n-\t  if (gsym->ns->proc_name->result->attr.pointer\n-\t      || gsym->ns->proc_name->result->attr.allocatable)\n+\t  if (def_sym->result->attr.pointer\n+\t      || def_sym->result->attr.allocatable)\n \t    gfc_error (\"Function '%s' at %L with a POINTER or ALLOCATABLE \"\n \t\t       \"result must have an explicit interface\", sym->name,\n \t\t       where);\n \n \t  /* F2003, 12.3.1.1 (3c); F2008, 12.4.2.2 (3c)  */\n \t  if (sym->ts.type == BT_CHARACTER\n-\t      && gsym->ns->proc_name->ts.u.cl->length != NULL)\n+\t      && def_sym->ts.u.cl->length != NULL)\n \t    {\n \t      gfc_charlen *cl = sym->ts.u.cl;\n \n@@ -1979,14 +1992,14 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t}\n \n       /* F2003, 12.3.1.1 (4); F2008, 12.4.2.2 (4) */\n-      if (gsym->ns->proc_name->attr.elemental)\n+      if (def_sym->attr.elemental)\n \t{\n \t  gfc_error (\"ELEMENTAL procedure '%s' at %L must have an explicit \"\n \t\t     \"interface\", sym->name, &sym->declared_at);\n \t}\n \n       /* F2003, 12.3.1.1 (5); F2008, 12.4.2.2 (5) */\n-      if (gsym->ns->proc_name->attr.is_bind_c)\n+      if (def_sym->attr.is_bind_c)\n \t{\n \t  gfc_error (\"Procedure '%s' at %L with BIND(C) attribute must have \"\n \t\t     \"an explicit interface\", sym->name, &sym->declared_at);\n@@ -1997,7 +2010,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t      && !(gfc_option.warn_std & GFC_STD_GNU)))\n \tgfc_errors_to_warnings (1);\n \n-      gfc_procedure_use (gsym->ns->proc_name, actual, where);\n+      gfc_procedure_use (def_sym, actual, where);\n \n       gfc_errors_to_warnings (0);\n     }"}]}