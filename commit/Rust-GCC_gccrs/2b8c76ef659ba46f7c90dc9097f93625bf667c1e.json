{"sha": "2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4Yzc2ZWY2NTliYTQ2ZjdjOTBkYzkwOTdmOTM2MjViZjY2N2MxZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-21T23:54:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-21T23:54:19Z"}, "message": "configure.in: Change GLIBCPP_ENABLE_SHADOW to GLIBCPP_ENABLE_CHEADERS.\n\n\n2000-12-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.in: Change GLIBCPP_ENABLE_SHADOW to\n\tGLIBCPP_ENABLE_CHEADERS.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Change to\n\tENABLE_CHEADERS.  C_INCLUDE_DIR defaults to c_std from c.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* include/c: Move to ...\n\t* include/c_std: ...here.\n\t* include/c_std: Move to ...\n\t* include/c_shadow: ...here.\n\t* include/c: Repopulate, with simple headers.\n\t* docs/html/configopts.html: Adjust docs.\n\nFrom-SVN: r38436", "tree": {"sha": "796f40951405917082e732698ff3078383acbfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796f40951405917082e732698ff3078383acbfd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/comments", "author": null, "committer": null, "parents": [{"sha": "78abb7b151d7c2865f5bb9e30135cbdb6b238b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78abb7b151d7c2865f5bb9e30135cbdb6b238b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78abb7b151d7c2865f5bb9e30135cbdb6b238b01"}], "stats": {"total": 1061, "additions": 1044, "deletions": 17}, "files": [{"sha": "e06927493ab28d620c77a76cd4ccdcff3de9f9d6", "filename": "libstdc++-v3/include/c/bits/std_cassert.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cassert.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,3 +37,13 @@\n \n #pragma GCC system_header\n #include <assert.h>\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "a6a882bc8a2ed8313e1622934e1106b28dbdd075", "filename": "libstdc++-v3/include/c/bits/std_cctype.h", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cctype.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,55 @@\n #ifndef _CPP_CCTYPE\n #define _CPP_CCTYPE 1\n \n+#include <bits/c++config.h>\n+\n #pragma GCC system_header\n #include <ctype.h>\n \n+// Get rid of those macros defined in <ctype.h> in lieu of real functions.\n+#undef isalnum\n+#undef isalpha\n+#undef isblank\n+#undef iscntrl\n+#undef isdigit\n+#undef isgraph\n+#undef islower\n+#undef isprint\n+#undef ispunct\n+#undef isspace\n+#undef isupper\n+#undef isxdigit\n+#undef tolower\n+#undef toupper\n+\n+namespace std\n+{\n+  extern \"C\" int isalnum(int __c);\n+  extern \"C\" int isalpha(int __c);\n+  extern \"C\" int isblank(int __c);\n+  extern \"C\" int iscntrl(int __c);\n+  extern \"C\" int isdigit(int __c);\n+  extern \"C\" int isgraph(int __c);\n+  extern \"C\" int islower(int __c);\n+  extern \"C\" int isprint(int __c);\n+  extern \"C\" int ispunct(int __c);\n+  extern \"C\" int isspace(int __c);\n+  extern \"C\" int isupper(int __c);\n+  extern \"C\" int isxdigit(int __c);\n+  extern \"C\" int tolower(int __c);\n+  extern \"C\" int toupper(int __c);\n+}\n+\n #endif \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "682882768b30412d884f54e9020005abce1e3096", "filename": "libstdc++-v3/include/c/bits/std_cerrno.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cerrno.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // The -*- C++ -*- error number header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,13 @@\n #pragma GCC system_header\n #include <errno.h>\n \n+namespace std \n+{\n+  extern \"C\" int errno;\n+}\n+\n #endif\n+\n+\n+\n+"}, {"sha": "1444be1ecfbcbebf1b8e7636c191846093d9a801", "filename": "libstdc++-v3/include/c/bits/std_cfloat.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cfloat.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,3 +40,4 @@\n #include <float.h>\n \n #endif\n+"}, {"sha": "071dd0594f9eae0432be4aaadefee5d24e85732e", "filename": "libstdc++-v3/include/c/bits/std_climits.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_climits.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,3 +40,8 @@\n #include <limits.h>\n \n #endif\n+\n+\n+\n+\n+"}, {"sha": "18d73dd8cd44045a064c6f8aedfc1990cd26e932", "filename": "libstdc++-v3/include/c/bits/std_clocale.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_clocale.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,14 @@\n #pragma GCC system_header\n #include <locale.h>\n \n+namespace std\n+{\n+  using ::lconv;\n+  extern \"C\" char* setlocale(int, const char*); \n+  extern \"C\" struct lconv* localeconv(void);\n+}\n+\n #endif\n+\n+\n+"}, {"sha": "01cf652548d308d49d98c28deeb78201f78e24b8", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 551, "deletions": 1, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- C math library.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,558 @@\n \n #ifndef _CPP_CMATH\n #define _CPP_CMATH 1\n+\n+#include <bits/c++config.h>\n+#include <bits/std_cstdlib.h>\n  \n #pragma GCC system_header\n #include <math.h>\n \n+namespace std \n+{\n+  // Forward declaration of a helper function.  This really should be\n+  // an `exported' forward declaration.\n+  template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n+\n+  template<typename _Tp>\n+  inline _Tp\n+    __cmath_abs(_Tp __x)\n+    {\n+      return __x < _Tp() ? -__x : __x;\n+    }\n+\n+  inline long \n+  abs(long __i) { return ::labs(__i); }\n+\n+  inline ldiv_t\n+  div(long __i, long __j) { return ::ldiv(__i, __j); }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n+  inline float \n+  abs(float __x) { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+  inline float \n+  abs(float __x) { return ::fabsf(__x); }\n+#else\n+  inline float \n+  abs(float __x) { return __cmath_abs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ACOSF\n+  inline float \n+  acos(float __x) { return ::acosf(__x); }\n+#else\n+  inline float \n+  acos(float __x) { return ::acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ASINF\n+  inline float \n+  asin(float __x) { return ::asinf(__x); }\n+#else\n+  inline float \n+  asin(float __x) { return ::asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATANF\n+  inline float \n+  atan(float __x) { return ::atanf(__x); }\n+#else\n+  inline float \n+  atan(float __x) { return ::atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATAN2F\n+  inline float \n+  atan2(float __y, float __x) { return ::atan2f(__y, __x); }\n+#else\n+  inline float \n+  atan2(float __y, float __x)\n+  { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_CEILF\n+  inline float \n+  ceil(float __x) { return ::ceilf(__x); }\n+#else\n+  inline float \n+  ceil(float __x) { return ::ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COSF\n+  inline float \n+  cos(float __x) { return __builtin_cosf(__x); }\n+#elif _GLIBCPP_HAVE_COSF\n+  inline float \n+  cos(float __x) { return ::cosf(__x); }\n+#else\n+  inline float \n+  cos(float __x) { return ::cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_COSHF\n+  inline float \n+  cosh(float __x) { return ::coshf(__x); }\n+#else\n+  inline float \n+  cosh(float __x) { return ::cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_EXPF\n+  inline float \n+  exp(float __x) { return ::expf(__x); }\n+#else\n+  inline float \n+  exp(float __x) { return ::exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n+  inline float \n+  fabs(float __x) { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+  inline float \n+  fabs(float __x) { return ::fabsf(__x); }\n+#else\n+  inline float \n+  fabs(float __x) { return __cmath_abs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FLOORF\n+  inline float \n+  floor(float __x) { return ::floorf(__x); }\n+#else\n+  inline float \n+  floor(float __x) { return ::floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FMODF\n+  inline float \n+  fmod(float __x, float __y) { return ::fmodf(__x, __y); }\n+#else\n+  inline float \n+  fmod(float __x, float __y)\n+  { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FREXPF\n+  inline float \n+  frexp(float __x, int* __exp) { return ::frexpf(__x, __exp); }\n+#else\n+  inline float \n+  frexp(float __x, int* __exp) { return ::frexp(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LDEXPF\n+  inline float \n+  ldexp(float __x, int __exp) { return ::ldexpf(__x, __exp); }\n+#else\n+  inline float \n+  ldexp(float __x, int __exp)\n+  { return ::ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOGF\n+  inline float \n+  log(float __x) { return ::logf(__x); }\n+#else\n+  inline float log(float __x)\n+  { return ::log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOG10F\n+  inline float \n+  log10(float __x) { return ::log10f(__x); }\n+#else\n+  inline float \n+  log10(float __x) { return ::log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_MODFF\n+  inline float \n+  modf(float __x, float* __iptr) { return ::modff(__x, __iptr); }\n+#else\n+  inline float \n+  modf(float __x, float* __iptr)\n+  {\n+    double __tmp;\n+    double __res = ::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<float>(__tmp);\n+    return __res;\n+  }\n+#endif\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    __pow_helper(_Tp __x, int __n)\n+    {\n+      return __n < 0\n+        ? _Tp(1)/__cmath_power(__x, -__n)\n+        : __cmath_power(__x, __n);\n+    }\n+  \n+#if _GLIBCPP_HAVE_POWF\n+  inline float \n+  pow(float __x, float __y) { return ::powf(__x, __y); }\n+#else\n+  inline float \n+  pow(float __x, float __y)\n+  { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+  inline float \n+  pow(float __x, int __n)\n+  {\n+    return __pow_helper(__x, __n);\n+  }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SINF\n+  inline float \n+  sin(float __x) { return __builtin_sinf(__x); }\n+#elif _GLIBCPP_HAVE_SINF\n+  inline float \n+  sin(float __x) { return ::sinf(__x); }\n+#else\n+  inline float \n+  sin(float __x) { return ::sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_SINHF\n+  inline float \n+  sinh(float __x) { return ::sinhf(__x); }\n+#else\n+  inline float \n+  sinh(float __x) { return ::sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n+  inline float \n+  sqrt(float __x) { return __builtin_sqrtf(__x); }\n+#elif _GLIBCPP_HAVE_SQRTF\n+  inline float \n+  sqrt(float __x) { return ::sqrtf(__x); }\n+#else\n+  inline float \n+  sqrt(float __x) { return ::sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANF\n+  inline float \n+  tan(float __x) { return ::tanf(__x); }\n+#else\n+  inline float \n+  tan(float __x) { return ::tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANHF\n+  inline float \n+  tanh(float __x) { return ::tanhf(__x); }\n+#else\n+  inline float \n+  tanh(float __x) { return ::tanh(static_cast<double>(__x)); }\n+#endif\n+\n+\n+  extern \"C\" double acos(double __x);\n+\n+  extern \"C\" double asin(double __x);\n+\n+  extern \"C\" double atan(double __x);\n+\n+  extern \"C\" double atan2(double __y, double __x);\n+\n+  extern \"C\" double ceil(double __x);\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COS\n+  inline double \n+  cos(double __x) { return __builtin_cos(__x); }\n+#else\n+  extern \"C\" double cos(double __x);\n+#endif\n+\n+  extern \"C\" double cosh(double __x);\n+\n+  extern \"C\" double exp(double __x);\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n+  inline double \n+  fabs(double __x) { return __builtin_fabs(__x); }\n+#else\n+  extern \"C\" double fabs(double __x);\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n+  inline double \n+  abs(double __x) { return __builtin_fabs(__x); }\n+#else\n+  inline double\n+  abs(double __x) { return fabs(__x); }\n+#endif\n+\n+  extern \"C\" double floor(double __x);\n+\n+  extern \"C\" double fmod(double __x, double __y);\n+\n+  extern \"C\" double frexp(double __x, int* __exp);\n+\n+  extern \"C\" double ldexp(double __x, int __exp);\n+\n+  extern \"C\" double log(double __x);\n+\n+  extern \"C\" double log10(double __x);\n+\n+  extern \"C\" double modf(double __x, double* __iptr);\n+\n+  extern \"C\" double pow(double __x, double __y);\n+\n+  inline double \n+  pow(double __x, int __i)\n+  {\n+    return __pow_helper(__x, __i);\n+  }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SIN\n+  inline double \n+  sin(double __x) { return __builtin_sin(__x); }\n+#else\n+  extern \"C\" double sin(double __x);\n+#endif\n+\n+  extern \"C\" double sinh(double __x);\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRT\n+  inline double \n+  sqrt(double __x) { return __builtin_fsqrt(__x); }\n+#else\n+  extern \"C\" double sqrt(double __x);\n+#endif\n+\n+  extern \"C\" double tan(double __x);\n+\n+  extern \"C\" double tanh(double __x);\n+\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n+  inline long double \n+  abs(long double __x) { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+  inline long double \n+  abs(long double __x) { return ::fabsl(__x); }\n+#else\n+  inline long double \n+  abs(long double __x) { return __cmath_abs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ACOSL\n+  inline long double \n+  acos(long double __x) { return ::acosl(__x); }\n+#else\n+  inline long double \n+  acos(long double __x) { return ::acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ASINL\n+  inline long double \n+  asin(long double __x) { return ::asinl(__x); }\n+#else\n+  inline long double \n+  asin(long double __x) { return ::asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATANL\n+  inline long double \n+  atan(long double __x) { return ::atanl(__x); }\n+#else\n+  inline long double \n+  atan(long double __x) { return ::atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATAN2L\n+  inline long double \n+  atan2(long double __y, long double __x) { return ::atan2l(__y, __x); }\n+#else\n+  inline long double \n+  atan2(long double __y, long double __x) \n+  { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_CEILL\n+  inline long double \n+  ceil(long double __x) { return ::ceill(__x); }\n+#else\n+  inline long double \n+  ceil(long double __x) { return ::ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COSL\n+  inline long double \n+  cos(long double __x) { return __builtin_cosl(__x); }\n+#elif _GLIBCPP_HAVE_COSL\n+  inline long double \n+  cos(long double __x) { return ::cosl(__x); }\n+#else\n+  inline long double \n+  cos(long double __x) { return ::cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_COSHL\n+  inline long double \n+  cosh(long double __x) { return ::coshl(__x); }\n+#else\n+  inline long double \n+  cosh(long double __x) { return ::cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_EXPL\n+  inline long double \n+  exp(long double __x) { return ::expl(__x); }\n+#else\n+  inline long double \n+  exp(long double __x) { return ::exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n+  inline long double \n+  fabs(long double __x) { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+  inline long double \n+  fabs(long double __x) { return ::fabsl(__x); }\n+#else\n+  inline long double \n+  fabs(long double __x) { return __cmath_abs(__x); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FLOORL\n+  inline long double \n+  floor(long double __x) { return ::floorl(__x); }\n+#else\n+  inline long double \n+  floor(long double __x) { return ::floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FMODL\n+  inline long double \n+  fmod(long double __x, long double __y) { return ::fmodl(__x, __y); }\n+#else\n+  inline long double \n+  fmod(long double __x, long double __y) \n+  { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FREXPL\n+  inline long double \n+  frexp(long double __x, int* __exp) { return ::frexpl(__x, __exp); }\n+#else\n+  inline long double \n+  frexp(long double __x, int* __exp) \n+  { return ::frexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LDEXPL\n+  inline long double \n+  ldexp(long double __x, int __exp) { return ::ldexpl(__x, __exp); }\n+#else\n+  inline long double \n+  ldexp(long double __x, int __exp) \n+  { return ::ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOGL\n+  inline long double \n+  log(long double __x) { return ::logl(__x); }\n+#else\n+  inline long double \n+  log(long double __x) { return ::log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOG10L\n+  inline long double \n+  log10(long double __x) { return ::log10l(__x); }\n+#else\n+  inline long double \n+  log10(long double __x) { return ::log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_MODFL\n+  inline long double \n+  modf(long double __x, long double* __iptr) { return ::modfl(__x, __iptr); }\n+#else\n+  inline long double \n+  modf(long double __x, long double* __iptr) \n+  { \n+    double __tmp;\n+    double __res = ::modf(static_cast<double>(__x), &__tmp);\n+    * __iptr = static_cast<long double>(__tmp);\n+    return __res;\n+  }\n+#endif\n+\n+#if _GLIBCPP_HAVE_POWL\n+  inline long double \n+  pow(long double __x, long double __y) { return ::powl(__x, __y); }\n+#else\n+  inline long double \n+  pow(long double __x, long double __y) \n+  { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+  inline long double \n+  pow(long double __x, int __n)\n+  {\n+    return __pow_helper(__x, __n);\n+  }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SINL\n+  inline long double \n+  sin(long double __x) { return __builtin_sinl(__x); }\n+#elif _GLIBCPP_HAVE_SINL\n+  inline long double \n+  sin(long double __x) { return ::sinl(__x); }\n+#else\n+  inline long double \n+  sin(long double __x) { return ::sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_SINHL\n+  inline long double \n+  sinh(long double __x) { return ::sinhl(__x); }\n+#else\n+  inline long double \n+  sinh(long double __x) { return ::sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n+  inline long double \n+  sqrt(long double __x) { return __builtin_sqrtl(__x); }\n+#elif _GLIBCPP_HAVE_SQRTL\n+  inline long double \n+  sqrt(long double __x) { return ::sqrtl(__x); }\n+#else\n+  inline long double \n+  sqrt(long double __x) { return ::sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANL\n+  inline long double \n+  tan(long double __x) { return ::tanl(__x); }\n+#else\n+  inline long double \n+  tan(long double __x) { return ::tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANHL\n+  inline long double \n+  tanh(long double __x) { return ::tanhl(__x); }\n+#else\n+  inline long double \n+  tanh(long double __x) { return ::tanh(static_cast<double>(__x)); }\n+#endif\n+\n+\n+} // std\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#  define export\n+#  include <bits/cmath.tcc>\n+#endif\n+\n #endif"}, {"sha": "ea30d8d868d10a0a92546e7c9c5ffa18d538e9f1", "filename": "libstdc++-v3/include/c/bits/std_csetjmp.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csetjmp.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,10 @@\n #pragma GCC system_header\n #include <setjmp.h>\n \n+namespace std\n+{\n+  using ::jmp_buf;\n+  extern \"C\" void longjmp(jmp_buf, int);\n+}\n+\n #endif"}, {"sha": "e54db8aa8125a2618e888aac9dbf7bb0e7989490", "filename": "libstdc++-v3/include/c/bits/std_csignal.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_csignal.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,11 @@\n #pragma GCC system_header\n #include <signal.h>\n \n+namespace std\n+{\n+  using ::sig_atomic_t;\n+  extern \"C\" void (*signal(int, void (*__func)(int)))(int); \n+  extern \"C\" int raise(int);\n+}\n+\n #endif"}, {"sha": "817cee5e5794d0b0ad3066635d4db52b35238f97", "filename": "libstdc++-v3/include/c/bits/std_cstdarg.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdarg.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,9 @@\n #pragma GCC system_header\n #include <stdarg.h>\n \n+namespace std\n+{\n+  using ::va_list;\n+}\n+\n #endif"}, {"sha": "184a533cfe3048557380e7b4a498396527eae6f9", "filename": "libstdc++-v3/include/c/bits/std_cstddef.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,10 @@\n #pragma GCC system_header\n #include <stddef.h>\n \n+namespace std \n+{\n+  using ::ptrdiff_t;\n+  using ::size_t;\n+}\n+\n #endif"}, {"sha": "62a19aabf2b9d38a803d8a06a9a2da8acba860da", "filename": "libstdc++-v3/include/c/bits/std_cstdio.h", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdio.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,80 @@\n #ifndef _CPP_CSTDIO\n #define _CPP_CSTDIO 1\n \n+#include <bits/std_cstdarg.h>\n+\n #pragma GCC system_header\n #include <stdio.h>\n \n+// Get rid of those macros defined in <stdio.h> in lieu of real functions.\n+#undef clearerr\n+#undef feof\n+#undef ferror\n+#undef fileno\n+#undef getc\n+#undef getchar\n+#undef putc\n+#undef putchar\n+\n+namespace std \n+{\n+  using ::FILE;\n+  using ::fpos_t;\n+\n+  extern \"C\" int remove(const char*); \n+  extern \"C\" int rename(const char*, const char*); \n+  extern \"C\" FILE* tmpfile(void); \n+  extern \"C\" char* tmpnam(char*); \n+  extern \"C\" int fclose(FILE*); \n+  extern \"C\" int fflush(FILE*); \n+  extern \"C\" FILE* fopen(const char*, const char*); \n+  extern \"C\" FILE* freopen(const char*, const char*, FILE*); \n+  extern \"C\" void setbuf(FILE*, char*);\n+  extern \"C\" int setvbuf(FILE*, char*, int, size_t); \n+  extern \"C\" int fprintf(FILE*, const char*, ...); \n+  extern \"C\" int fscanf(FILE*, const char*, ...); \n+  extern \"C\" int printf(const char*, ...); \n+  extern \"C\" int scanf(const char*, ...); \n+  extern \"C\" int snprintf(char *, size_t, const char*, ...);\n+  extern \"C\" int sprintf(char *, const char*, ...); \n+  extern \"C\" int sscanf(const char*, const char*, ...); \n+  extern \"C\" int vfprintf(FILE*, const char*, va_list); \n+  extern \"C\" int vfscanf(FILE*, const char*, va_list); \n+  extern \"C\" int vprintf(const char*, va_list); \n+  extern \"C\" int vscanf(const char*, va_list); \n+  extern \"C\" int vsnprintf(char*, size_t, const char*, va_list); \n+  extern \"C\" int vsprintf(char*, const char*, va_list); \n+  extern \"C\" int vsscanf(const char*, const char*, va_list); \n+  extern \"C\" int fgetc(FILE *); \n+  extern \"C\" char *fgets(char*, int, FILE*); \n+  extern \"C\" int fputc(int, FILE*); \n+  extern \"C\" int fputs(const char*, FILE*); \n+  extern \"C\" int getc(FILE*); \n+  extern \"C\" int getchar(void); \n+  extern \"C\" char *gets(char*); \n+  extern \"C\" int putc(int, FILE*); \n+  extern \"C\" int putchar(int); \n+  extern \"C\" int puts(const char*); \n+  extern \"C\" int ungetc(int, FILE*);\n+  extern \"C\" size_t fread(void*, size_t, size_t, FILE*); \n+  extern \"C\" size_t fwrite(const void*, size_t, size_t, FILE*); \n+  extern \"C\" int fgetpos(FILE*, fpos_t*); \n+  extern \"C\" int fseek(FILE*, long int, int); \n+  extern \"C\" int fsetpos(FILE*, const fpos_t*); \n+  extern \"C\" long int ftell(FILE*); \n+  extern \"C\" void rewind(FILE*); \n+  extern \"C\" void clearerr(FILE*); \n+  extern \"C\" int feof(FILE*); \n+  extern \"C\" int ferror(FILE*); \n+  extern \"C\" void perror(const char*);\n+}\n+\n #endif\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "a43c1c58b909c51adace6cdfed2de7a76191db19", "filename": "libstdc++-v3/include/c/bits/std_cstdlib.h", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstdlib.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,91 @@\n #ifndef _CPP_CSTDLIB\n #define _CPP_CSTDLIB 1\n \n+#include <bits/c++config.h>\n+\n #pragma GCC system_header\n #include <stdlib.h>\n \n+namespace std \n+{\n+  using ::div_t;\n+  using ::ldiv_t;\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+# ifdef _GLIBCPP_HAVE_LLDIV_T\n+  using ::lldiv_t;\n+# else\n+  struct lldiv_t\n+  {\n+    long long quot;\n+    long long rem;\n+  };\n+# endif\n+#endif \n+\n+  extern \"C\" double atof(const char*); \n+  extern \"C\" int atoi(const char*); \n+  extern \"C\" long int atol(const char*); \n+  extern \"C\" double strtod(const char*, char**); \n+  extern \"C\" float strtof(const char*, char**); \n+  extern \"C\" long int strtol(const char*, char**, int); \n+  extern \"C\" unsigned long int strtoul(const char*, char**, int);\n+  extern \"C\" int rand(void); \n+  extern \"C\" void srand(unsigned int); \n+  extern \"C\" void* calloc(size_t, size_t); \n+  extern \"C\" void free(void*); \n+  extern \"C\" void* malloc(size_t); \n+  extern \"C\" void* realloc(void*, size_t); \n+  extern \"C\" void abort(void); \n+  extern \"C\" int atexit(void (*func)(void)); \n+  extern \"C\" void exit(int); \n+  extern \"C\" void _Exit(int); \n+  extern \"C\" char*getenv(const char*); \n+  extern \"C\" int system(const char*); \n+  extern \"C\" void* bsearch(const void*, const void*, size_t, size_t, \n+\t\t\t   int (*comp)(const void *, const void *)); \n+  extern \"C\" void qsort(void*, size_t, size_t, \n+\t\t\tint (*comp)(const void *, const void *)); \n+  extern \"C\" int abs(int); \n+  extern \"C\" long int labs(long int); \n+  extern \"C\" div_t div(int, int); \n+  extern \"C\" ldiv_t ldiv(long int, long int); \n+  extern \"C\" int mblen(const char*, size_t); \n+  extern \"C\" int mbtowc(wchar_t*, const char*, size_t); \n+  extern \"C\" int wctomb(char*, wchar_t); \n+  extern \"C\" size_t mbstowcs(wchar_t*, const char*, size_t); \n+  extern \"C\" size_t wcstombs(char*, const wchar_t*, size_t);\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  inline long long \n+  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long long \n+  llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline lldiv_t \n+  div(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline lldiv_t \n+  lldiv(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  extern \"C\" long long int atoll(const char*); \n+  extern \"C\" long long int strtoll(const char*, char**, int); \n+  extern \"C\" unsigned long long int strtoull(const char*, char**, int); \n+#endif\n+\n+#ifdef _GLIBCPP_HAVE_STRTOLD\n+  extern \"C\" long double strtold(const char*, char**); \n+#endif\n+}\n+\n #endif \n+\n+\n+\n+\n+\n+\n+"}, {"sha": "581c7a72863d5915464ece3374c82decb829cde4", "filename": "libstdc++-v3/include/c/bits/std_cstring.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstring.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,33 @@\n #pragma GCC system_header\n #include <string.h>\n \n+namespace std \n+{\n+  extern \"C\" void* memcpy(void*, const void*, size_t); \n+  extern \"C\" void* memmove(void*, const void*, size_t); \n+  extern \"C\" char* strcpy(char*, const char*); \n+  extern \"C\" char* strncpy(char*, const char*, size_t); \n+  extern \"C\" char* strcat(char*, const char*); \n+  extern \"C\" char* strncat(char*, const char*, size_t); \n+  extern \"C\" int memcmp(const void*, const void*, size_t); \n+  extern \"C\" int strcmp(const char*, const char*); \n+  extern \"C\" int strcoll(const char*, const char*); \n+  extern \"C\" int strncmp(const char*, const char*, size_t); \n+  extern \"C\" size_t strxfrm(char*, const char*, size_t); \n+  extern \"C\" void* memchr(const void*, int, size_t); \n+  extern \"C\" char* strchr(const char*, int); \n+  extern \"C\" size_t strcspn(const char*, const char*); \n+  extern \"C\" char* strpbrk(const char*, const char*); \n+  extern \"C\" char* strrchr(const char*, int); \n+  extern \"C\" size_t strspn(const char*, const char*); \n+  extern \"C\" char* strstr(const char*, const char*); \n+  extern \"C\" char* strtok(char*, const char*); \n+  extern \"C\" void* memset(void*, int, size_t); \n+  extern \"C\" char* strerror(int); \n+  extern \"C\" size_t strlen(const char*);\n+}\n+\n #endif\n+\n+\n+"}, {"sha": "f340c8e4b92c77096c6c5db0ff5818da975b457b", "filename": "libstdc++-v3/include/c/bits/std_ctime.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_ctime.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,21 @@\n #pragma GCC system_header\n #include <time.h>\n \n+namespace std\n+{\n+  using ::clock_t;\n+  using ::time_t;\n+  using ::tm;\n+\n+  extern \"C\" clock_t clock(void); \n+  extern \"C\" double difftime(time_t, time_t); \n+  extern \"C\" time_t mktime(struct tm*); \n+  extern \"C\" time_t time(time_t*); \n+  extern \"C\" char* asctime(const struct tm*); \n+  extern \"C\" char* ctime(const time_t*); \n+  extern \"C\" struct tm* gmtime(const time_t*); \n+  extern \"C\" struct tm* localtime(const time_t*); \n+  extern \"C\" size_t strftime(char*, size_t, const char*, const struct tm*);\n+}\n+\n #endif"}, {"sha": "c9ccc86b7c2d4e00d4e1b39246d05d22181de6bf", "filename": "libstdc++-v3/include/c/bits/std_cwchar.h", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwchar.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,122 @@\n #ifndef _CPP_CWCHAR\n #define _CPP_CWCHAR 1\n \n+#include <bits/c++config.h>\n+#include <bits/std_cstdio.h>\n+#include <bits/std_cstdarg.h>\n+\n+#if _GLIBCPP_USE_WCHAR_T\n #pragma GCC system_header\n #include <wchar.h>\n \n+// Get rid of those macros defined in <wchar.h> in lieu of real functions.\n+#undef getwchar\n+\n+namespace std\n+{\n+  using ::wint_t;\n+  using ::mbstate_t;\n+\n+  extern \"C\" wint_t btowc(int); \n+  extern \"C\" int wctob(wint_t); \n+  extern \"C\" wint_t fgetwc(FILE*); \n+  extern \"C\" wchar_t* fgetws(wchar_t*, int, FILE*); \n+  extern \"C\" wint_t fputwc(wchar_t, FILE*); \n+  extern \"C\" int fputws(const wchar_t*, FILE*); \n+  extern \"C\" int fwide(FILE*, int); \n+  extern \"C\" int fwprintf(FILE*, const wchar_t*, ...); \n+  extern \"C\" int fwscanf(FILE*, const wchar_t*, ...); \n+  extern \"C\" int swprintf(wchar_t*, size_t, const wchar_t*, ...); \n+  extern \"C\" int swscanf(const wchar_t*, const wchar_t*, ...); \n+  extern \"C\" int vfwprintf(FILE*, const wchar_t*, va_list); \n+  extern \"C\" int vfwscanf(FILE*, const wchar_t*, va_list); \n+  extern \"C\" int vswprintf(wchar_t*, size_t, const wchar_t*, va_list); \n+  extern \"C\" int vswscanf(const wchar_t*, const wchar_t*, va_list); \n+  extern \"C\" int vwprintf(const wchar_t*, va_list); \n+  extern \"C\" int vwscanf(const wchar_t*, va_list); \n+  extern \"C\" int wprintf(const wchar_t*, ...); \n+  extern \"C\" int wscanf(const wchar_t*, ...); \n+  extern \"C\" wint_t getwc(FILE* stream); \n+  extern \"C\" wint_t getwchar(void); \n+  extern \"C\" int mbsinit(const mbstate_t*); \n+  extern \"C\" size_t mbrlen(const char*, size_t, mbstate_t*); \n+  extern \"C\" size_t mbrtowc(wchar_t*, const char*, size_t, mbstate_t*); \n+  extern \"C\" size_t mbsrtowcs(wchar_t*, const char**, size_t, mbstate_t*); \n+  extern \"C\" size_t wcsrtombs(char*, const wchar_t **, size_t, mbstate_t*);\n+  extern \"C\" wint_t putwc(wchar_t, FILE*); \n+  extern \"C\" wint_t putwchar(wchar_t); \n+  extern \"C\" wint_t ungetwc(wint_t, FILE*);\n+  extern \"C\" size_t wcrtomb(char*, wchar_t, mbstate_t*); \n+  extern \"C\" double wcstod(const wchar_t*, wchar_t**); \n+  extern \"C\" float wcstof(const wchar_t*, wchar_t**); \n+  extern \"C\" long int wcstol(const wchar_t*, wchar_t**, int); \n+  extern \"C\" unsigned long int wcstoul(const wchar_t*, wchar_t**, int); \n+  extern \"C\" wchar_t* wcscpy(wchar_t* s1, const wchar_t*); \n+  extern \"C\" wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wcscat(wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsncat(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" int wcscmp(const wchar_t*, const wchar_t*); \n+  extern \"C\" int wcscoll(const wchar_t*, const wchar_t*); \n+  extern \"C\" int wcsncmp(const wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" size_t wcsxfrm(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wcschr(const wchar_t*, wchar_t); \n+  extern \"C\" size_t wcscspn(const wchar_t*, const wchar_t*); \n+  extern \"C\" size_t wcslen(const wchar_t*); \n+  extern \"C\" wchar_t* wcspbrk(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsrchr(const wchar_t*, wchar_t); \n+  extern \"C\" size_t wcsspn(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcsstr(const wchar_t*, const wchar_t*); \n+  extern \"C\" wchar_t* wcstok(wchar_t*, const wchar_t*, wchar_t**); \n+  extern \"C\" wchar_t* wmemchr(const wchar_t*, wchar_t, size_t);\n+  extern \"C\" int wmemcmp(const wchar_t*, const wchar_t*, size_t); \n+  //extern \"C\" int wmemcmp(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t); \n+  extern \"C\" wchar_t* wmemset(wchar_t*, wchar_t, size_t); \n+  extern \"C\" size_t wcsftime(wchar_t*, size_t, const wchar_t*, const struct tm*); \n+\n+#if 0\n+  // Full C99 listing\n+  extern \"C\" long double wcstold(const wchar_t*, wchar_t**); \n+  extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n+  extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); \n+#endif\n+}\n+\n+#else\n+extern \"C\" \n+{\n+  typedef struct \n+  {\n+    int __fill[6];\n+  } mbstate_t;\n+}\n+\n+namespace std \n+{\n+  using ::mbstate_t;\n+}\n+#endif //_GLIBCPP_USE_WCHAR_T\n+\n+\n #endif \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "fda9f45940278d6282d2e20021e13dfc688cf2c6", "filename": "libstdc++-v3/include/c/bits/std_cwctype.h", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8c76ef659ba46f7c90dc9097f93625bf667c1e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cwctype.h?ref=2b8c76ef659ba46f7c90dc9097f93625bf667c1e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,4 +39,56 @@\n #pragma GCC system_header\n #include <wctype.h>\n \n+// Get rid of those macros defined in <wctype.h> in lieu of real functions.\n+#undef iswalnum\n+#undef iswalpha\n+#undef iswblank\n+#undef iswcntrl\n+#undef iswdigit\n+#undef iswgraph\n+#undef iswlower\n+#undef iswprint\n+#undef iswprint\n+#undef iswpunct\n+#undef iswspace\n+#undef iswupper\n+#undef iswxdigit\n+#undef iswctype  \n+#undef towlower\n+#undef towupper\n+#undef towctrans\n+#undef wctrans\n+\n+namespace std\n+{\n+  using ::wctype_t;\n+  using ::wctrans_t;\n+\n+  extern \"C\" int iswalnum(wint_t); \n+  extern \"C\" int iswalpha(wint_t); \n+  extern \"C\" int iswblank(wint_t); \n+  extern \"C\" int iswcntrl(wint_t); \n+  extern \"C\" int iswdigit(wint_t); \n+  extern \"C\" int iswgraph(wint_t); \n+  extern \"C\" int iswlower(wint_t); \n+  extern \"C\" int iswprint(wint_t); \n+  extern \"C\" int iswpunct(wint_t); \n+  extern \"C\" int iswspace(wint_t); \n+  extern \"C\" int iswupper(wint_t); \n+  extern \"C\" int iswxdigit(wint_t);\n+  extern \"C\" int iswctype(wint_t, wctype_t); \n+  extern \"C\" wctype_t wctype(const char *); \n+  extern \"C\" wint_t towlower(wint_t); \n+  extern \"C\" wint_t towupper(wint_t); \n+  extern \"C\" wint_t towctrans(wint_t, wctrans_t); \n+  extern \"C\" wctrans_t wctrans(const char*);\n+}\n+\n #endif \n+\n+\n+\n+\n+\n+\n+"}]}