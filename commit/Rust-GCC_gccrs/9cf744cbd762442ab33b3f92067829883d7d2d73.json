{"sha": "9cf744cbd762442ab33b3f92067829883d7d2d73", "node_id": "C_kwDOANBUbNoAKDljZjc0NGNiZDc2MjQ0MmFiMzNiM2Y5MjA2NzgyOTg4M2Q3ZDJkNzM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-28T13:46:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T13:46:02Z"}, "message": "Merge #1172\n\n1172: Resolve visibility paths  r=CohenArthur a=CohenArthur\n\nThis tackles the remaining issues in #1158. ~~It also contains the commit from #1168 so you should wait for bors to merge that before reviewing it :D~~ done \r\n\r\nThe paths get resolved but their `NodeId`s are not used in the privacy visibility resolver yet.\r\n\r\nCloses #1158 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "40fb9a20b8432f0d0267683d04be36250e154ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40fb9a20b8432f0d0267683d04be36250e154ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf744cbd762442ab33b3f92067829883d7d2d73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiapqaCRBK7hj4Ov3rIwAA7X8IAHQ9HJaX6QS29hX4S4R3AbKn\nisLL5APBhfSP6K5AQH080eSjtzTyfzRLxlxVmDkKUPNwoCtTzpsknBEqewK0l+8V\nyWxpGnNorFaiDqe36ru80L8GNwqKsI9to5zTtGDBKzikvl8cgJWyzxd8bI0D8zQp\n9niGZG1he5c0sxMD02/0xdUdief5LUQoz+TOFQHfs7Lpcl+jQjNgPuYrdiyitsaS\nDCBgF3mXw2bnkY4wvHmXnDBzg6pQp3SEctYpdn8xPBA+cXV9tsq2sWyavZbLq9M/\n0eE+92tXyeZGCWGP0RllfNFle/z8q5fjju6nDqfRJ7+QzAb4eHYxeBu46vZN6yI=\n=9Jpk\n-----END PGP SIGNATURE-----\n", "payload": "tree 40fb9a20b8432f0d0267683d04be36250e154ac9\nparent 1ada076b9324982fd6f49aea6456e99613e394a8\nparent 1c56e969a647a4c8192ac8cb747f668acf22da7b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1651153562 +0000\ncommitter GitHub <noreply@github.com> 1651153562 +0000\n\nMerge #1172\n\n1172: Resolve visibility paths  r=CohenArthur a=CohenArthur\n\nThis tackles the remaining issues in #1158. ~~It also contains the commit from #1168 so you should wait for bors to merge that before reviewing it :D~~ done \r\n\r\nThe paths get resolved but their `NodeId`s are not used in the privacy visibility resolver yet.\r\n\r\nCloses #1158 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf744cbd762442ab33b3f92067829883d7d2d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf744cbd762442ab33b3f92067829883d7d2d73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf744cbd762442ab33b3f92067829883d7d2d73/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ada076b9324982fd6f49aea6456e99613e394a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ada076b9324982fd6f49aea6456e99613e394a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ada076b9324982fd6f49aea6456e99613e394a8"}, {"sha": "1c56e969a647a4c8192ac8cb747f668acf22da7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c56e969a647a4c8192ac8cb747f668acf22da7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c56e969a647a4c8192ac8cb747f668acf22da7b"}], "stats": {"total": 1152, "additions": 987, "deletions": 165}, "files": [{"sha": "ae385e0bec9cc8d605c585153857b0e26aa35d69", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -87,6 +87,7 @@ GRS_OBJS = \\\n     rust/rust-ast-lower-pattern.o \\\n     rust/rust-name-resolver.o \\\n     rust/rust-ast-resolve.o \\\n+    rust/rust-ast-resolve-base.o \\\n     rust/rust-ast-resolve-item.o \\\n     rust/rust-ast-resolve-pattern.o \\\n     rust/rust-ast-resolve-expr.o \\"}, {"sha": "fb8982a780fde574faf0e36939d7a03f6f1b8627", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -349,6 +349,7 @@ class SimplePathSegment : public PathSegment\n \n   Location get_locus () const { return locus; }\n   NodeId get_node_id () const { return node_id; }\n+  const std::string &get_segment_name () const { return segment_name; }\n \n   // TODO: visitor pattern?\n };\n@@ -404,6 +405,11 @@ class SimplePath\n       = {AST::SimplePathSegment (std::move (str), locus)};\n     return SimplePath (std::move (single_segments));\n   }\n+\n+  const std::vector<SimplePathSegment> &get_segments () const\n+  {\n+    return segments;\n+  }\n };\n \n // path-to-string inverse comparison operator"}, {"sha": "9dc61a881c895e81ecf46a22604b89bc3b0c4ce3", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -701,6 +701,7 @@ struct Visibility\n \n   std::string as_string () const;\n   const SimplePath &get_path () const { return in_path; }\n+  SimplePath &get_path () { return in_path; }\n \n protected:\n   // Clone function implementation - not currently virtual but may be if"}, {"sha": "3ab6085ce617c85e73c1f67cead161da6ea0607b", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -45,6 +45,17 @@ VisibilityResolver::go (HIR::Crate &crate)\n     }\n }\n \n+// FIXME: At this point in the pipeline, we should not be dealing with\n+// `AST::SimplePath`s anymore! We need to be dealing with their \"resolved\n+// counterpart\", so probably a NodeId/HirId/DefId.\n+\n+// static bool\n+// resolve_module_path (std::vector<HIR::Module> &module_stack,\n+// \t\t     const AST::SimplePath &restriction, DefId &id)\n+// {\n+//   return false;\n+// }\n+\n bool\n VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n \t\t\t\t\tModuleVisibility &to_resolve)"}, {"sha": "2a86618e04396a25e0719bd284b28c1990e8806f", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "added", "additions": 654, "deletions": 0, "changes": 654, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -0,0 +1,654 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-resolve-base.h\"\n+#include \"rust-ast-resolve-expr.h\"\n+#include \"rust-ast-resolve-path.h\"\n+#include \"rust-item.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+bool\n+ResolverBase::resolve_visibility (const AST::Visibility &vis)\n+{\n+  if (vis.has_path ())\n+    {\n+      auto path = vis.get_path ();\n+      ResolvePath::go (&path, parent);\n+\n+      // Do we need to lookup something here?\n+      // Is it just about resolving the names correctly so we can look them up\n+      // later?\n+    }\n+\n+  return true;\n+}\n+\n+// Default visitors implementations\n+\n+void\n+ResolverBase::visit (AST::Token &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::DelimTokenTree &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::AttrInputMetaItemContainer &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IdentifierExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Lifetime &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LifetimeParam &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::PathInExpression &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypePathSegment &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypePathSegmentGeneric &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypePathSegmentFunction &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypePath &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::QualifiedPathInExpression &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::QualifiedPathInType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LiteralExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::AttrInputLiteral &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaItemLitExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaItemPathLit &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::BorrowExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::DereferenceExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ErrorPropagationExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::NegationExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArithmeticOrLogicalExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ComparisonExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LazyBooleanExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypeCastExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::AssignmentExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::CompoundAssignmentExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::GroupedExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArrayElemsValues &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArrayElemsCopied &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArrayExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArrayIndexExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleIndexExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprStruct &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprFieldIdentifier &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprFieldIdentifierValue &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprFieldIndexValue &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprStructFields &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructExprStructBase &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::CallExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MethodCallExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::FieldAccessExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ClosureExprInner &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::BlockExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ClosureExprInnerTyped &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ContinueExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::BreakExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeFromToExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeFromExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeToExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeFullExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeFromToInclExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangeToInclExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ReturnExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::UnsafeBlockExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LoopExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::WhileLoopExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::WhileLetLoopExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ForLoopExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfExprConseqElse &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfExprConseqIf &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfExprConseqIfLet &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfLetExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfLetExprConseqElse &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfLetExprConseqIf &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IfLetExprConseqIfLet &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MatchExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::AwaitExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::AsyncBlockExpr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypeParam &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LifetimeWhereClauseItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypeBoundWhereClauseItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Method &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Module &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExternCrate &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::UseTreeGlob &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::UseTreeList &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::UseTreeRebind &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::UseDeclaration &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Function &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TypeAlias &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructStruct &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleStruct &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::EnumItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::EnumItemTuple &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::EnumItemStruct &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::EnumItemDiscriminant &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Enum &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Union &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ConstantItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StaticItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitItemFunc &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitItemMethod &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitItemConst &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitItemType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::Trait &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::InherentImpl &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitImpl &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExternalStaticItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExternalFunctionItem &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExternBlock &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MacroMatchFragment &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MacroMatchRepetition &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MacroMatcher &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MacroRulesDefinition &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MacroInvocation &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaItemPath &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaItemSeq &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaWord &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaNameValueStr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaListPaths &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::MetaListNameValueStr &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LiteralPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::IdentifierPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::WildcardPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangePatternBoundLiteral &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangePatternBoundPath &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangePatternBoundQualPath &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RangePattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ReferencePattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructPatternFieldTuplePat &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructPatternFieldIdentPat &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructPatternFieldIdent &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::StructPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleStructItemsNoRange &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleStructItemsRange &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleStructPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TuplePatternItemsMultiple &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TuplePatternItemsRanged &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TuplePattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::GroupedPattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::SlicePattern &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::EmptyStmt &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::LetStmt &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExprStmtWithoutBlock &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ExprStmtWithBlock &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitBound &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ImplTraitType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitObjectType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ParenthesisedType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ImplTraitTypeOneBound &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TraitObjectTypeOneBound &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::TupleType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::NeverType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::RawPointerType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ReferenceType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::ArrayType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::SliceType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::InferredType &)\n+{}\n+\n+void\n+ResolverBase::visit (AST::BareFunctionType &)\n+{}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "17d05c38cf2932c006134c00627d11eccac43443", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 170, "deletions": 165, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -32,171 +32,171 @@ class ResolverBase : public AST::ASTVisitor\n public:\n   virtual ~ResolverBase () {}\n \n-  void visit (AST::Token &) {}\n-  void visit (AST::DelimTokenTree &) {}\n-  void visit (AST::AttrInputMetaItemContainer &) {}\n-  void visit (AST::IdentifierExpr &) {}\n-  void visit (AST::Lifetime &) {}\n-  void visit (AST::LifetimeParam &) {}\n-  void visit (AST::PathInExpression &) {}\n-  void visit (AST::TypePathSegment &) {}\n-  void visit (AST::TypePathSegmentGeneric &) {}\n-  void visit (AST::TypePathSegmentFunction &) {}\n-  void visit (AST::TypePath &) {}\n-  void visit (AST::QualifiedPathInExpression &) {}\n-  void visit (AST::QualifiedPathInType &) {}\n-  void visit (AST::LiteralExpr &) {}\n-  void visit (AST::AttrInputLiteral &) {}\n-  void visit (AST::MetaItemLitExpr &) {}\n-  void visit (AST::MetaItemPathLit &) {}\n-  void visit (AST::BorrowExpr &) {}\n-  void visit (AST::DereferenceExpr &) {}\n-  void visit (AST::ErrorPropagationExpr &) {}\n-  void visit (AST::NegationExpr &) {}\n-  void visit (AST::ArithmeticOrLogicalExpr &) {}\n-  void visit (AST::ComparisonExpr &) {}\n-  void visit (AST::LazyBooleanExpr &) {}\n-  void visit (AST::TypeCastExpr &) {}\n-  void visit (AST::AssignmentExpr &) {}\n-  void visit (AST::CompoundAssignmentExpr &) {}\n-  void visit (AST::GroupedExpr &) {}\n-  void visit (AST::ArrayElemsValues &) {}\n-  void visit (AST::ArrayElemsCopied &) {}\n-  void visit (AST::ArrayExpr &) {}\n-  void visit (AST::ArrayIndexExpr &) {}\n-  void visit (AST::TupleExpr &) {}\n-  void visit (AST::TupleIndexExpr &) {}\n-  void visit (AST::StructExprStruct &) {}\n-  void visit (AST::StructExprFieldIdentifier &) {}\n-  void visit (AST::StructExprFieldIdentifierValue &) {}\n-  void visit (AST::StructExprFieldIndexValue &) {}\n-  void visit (AST::StructExprStructFields &) {}\n-  void visit (AST::StructExprStructBase &) {}\n-  void visit (AST::CallExpr &) {}\n-  void visit (AST::MethodCallExpr &) {}\n-  void visit (AST::FieldAccessExpr &) {}\n-  void visit (AST::ClosureExprInner &) {}\n-  void visit (AST::BlockExpr &) {}\n-  void visit (AST::ClosureExprInnerTyped &) {}\n-  void visit (AST::ContinueExpr &) {}\n-  void visit (AST::BreakExpr &) {}\n-  void visit (AST::RangeFromToExpr &) {}\n-  void visit (AST::RangeFromExpr &) {}\n-  void visit (AST::RangeToExpr &) {}\n-  void visit (AST::RangeFullExpr &) {}\n-  void visit (AST::RangeFromToInclExpr &) {}\n-  void visit (AST::RangeToInclExpr &) {}\n-  void visit (AST::ReturnExpr &) {}\n-  void visit (AST::UnsafeBlockExpr &) {}\n-  void visit (AST::LoopExpr &) {}\n-  void visit (AST::WhileLoopExpr &) {}\n-  void visit (AST::WhileLetLoopExpr &) {}\n-  void visit (AST::ForLoopExpr &) {}\n-  void visit (AST::IfExpr &) {}\n-  void visit (AST::IfExprConseqElse &) {}\n-  void visit (AST::IfExprConseqIf &) {}\n-  void visit (AST::IfExprConseqIfLet &) {}\n-  void visit (AST::IfLetExpr &) {}\n-  void visit (AST::IfLetExprConseqElse &) {}\n-  void visit (AST::IfLetExprConseqIf &) {}\n-  void visit (AST::IfLetExprConseqIfLet &) {}\n-\n-  void visit (AST::MatchExpr &) {}\n-  void visit (AST::AwaitExpr &) {}\n-  void visit (AST::AsyncBlockExpr &) {}\n-\n-  void visit (AST::TypeParam &) {}\n-\n-  void visit (AST::LifetimeWhereClauseItem &) {}\n-  void visit (AST::TypeBoundWhereClauseItem &) {}\n-  void visit (AST::Method &) {}\n-  void visit (AST::Module &) {}\n-  void visit (AST::ExternCrate &) {}\n-\n-  void visit (AST::UseTreeGlob &) {}\n-  void visit (AST::UseTreeList &) {}\n-  void visit (AST::UseTreeRebind &) {}\n-  void visit (AST::UseDeclaration &) {}\n-  void visit (AST::Function &) {}\n-  void visit (AST::TypeAlias &) {}\n-  void visit (AST::StructStruct &) {}\n-  void visit (AST::TupleStruct &) {}\n-  void visit (AST::EnumItem &) {}\n-  void visit (AST::EnumItemTuple &) {}\n-  void visit (AST::EnumItemStruct &) {}\n-  void visit (AST::EnumItemDiscriminant &) {}\n-  void visit (AST::Enum &) {}\n-  void visit (AST::Union &) {}\n-  void visit (AST::ConstantItem &) {}\n-  void visit (AST::StaticItem &) {}\n-  void visit (AST::TraitItemFunc &) {}\n-  void visit (AST::TraitItemMethod &) {}\n-  void visit (AST::TraitItemConst &) {}\n-  void visit (AST::TraitItemType &) {}\n-  void visit (AST::Trait &) {}\n-  void visit (AST::InherentImpl &) {}\n-  void visit (AST::TraitImpl &) {}\n-\n-  void visit (AST::ExternalStaticItem &) {}\n-  void visit (AST::ExternalFunctionItem &) {}\n-  void visit (AST::ExternBlock &) {}\n-\n-  void visit (AST::MacroMatchFragment &) {}\n-  void visit (AST::MacroMatchRepetition &) {}\n-  void visit (AST::MacroMatcher &) {}\n-  void visit (AST::MacroRulesDefinition &) {}\n-  void visit (AST::MacroInvocation &) {}\n-  void visit (AST::MetaItemPath &) {}\n-  void visit (AST::MetaItemSeq &) {}\n-  void visit (AST::MetaWord &) {}\n-  void visit (AST::MetaNameValueStr &) {}\n-  void visit (AST::MetaListPaths &) {}\n-  void visit (AST::MetaListNameValueStr &) {}\n-\n-  void visit (AST::LiteralPattern &) {}\n-  void visit (AST::IdentifierPattern &) {}\n-  void visit (AST::WildcardPattern &) {}\n-\n-  void visit (AST::RangePatternBoundLiteral &) {}\n-  void visit (AST::RangePatternBoundPath &) {}\n-  void visit (AST::RangePatternBoundQualPath &) {}\n-  void visit (AST::RangePattern &) {}\n-  void visit (AST::ReferencePattern &) {}\n-\n-  void visit (AST::StructPatternFieldTuplePat &) {}\n-  void visit (AST::StructPatternFieldIdentPat &) {}\n-  void visit (AST::StructPatternFieldIdent &) {}\n-  void visit (AST::StructPattern &) {}\n-\n-  void visit (AST::TupleStructItemsNoRange &) {}\n-  void visit (AST::TupleStructItemsRange &) {}\n-  void visit (AST::TupleStructPattern &) {}\n-\n-  void visit (AST::TuplePatternItemsMultiple &) {}\n-  void visit (AST::TuplePatternItemsRanged &) {}\n-  void visit (AST::TuplePattern &) {}\n-  void visit (AST::GroupedPattern &) {}\n-  void visit (AST::SlicePattern &) {}\n-\n-  void visit (AST::EmptyStmt &) {}\n-  void visit (AST::LetStmt &) {}\n-  void visit (AST::ExprStmtWithoutBlock &) {}\n-  void visit (AST::ExprStmtWithBlock &) {}\n-\n-  void visit (AST::TraitBound &) {}\n-  void visit (AST::ImplTraitType &) {}\n-  void visit (AST::TraitObjectType &) {}\n-  void visit (AST::ParenthesisedType &) {}\n-  void visit (AST::ImplTraitTypeOneBound &) {}\n-  void visit (AST::TraitObjectTypeOneBound &) {}\n-  void visit (AST::TupleType &) {}\n-  void visit (AST::NeverType &) {}\n-  void visit (AST::RawPointerType &) {}\n-  void visit (AST::ReferenceType &) {}\n-  void visit (AST::ArrayType &) {}\n-  void visit (AST::SliceType &) {}\n-  void visit (AST::InferredType &) {}\n-  void visit (AST::BareFunctionType &) {}\n+  void visit (AST::Token &);\n+  void visit (AST::DelimTokenTree &);\n+  void visit (AST::AttrInputMetaItemContainer &);\n+  void visit (AST::IdentifierExpr &);\n+  void visit (AST::Lifetime &);\n+  void visit (AST::LifetimeParam &);\n+  void visit (AST::PathInExpression &);\n+  void visit (AST::TypePathSegment &);\n+  void visit (AST::TypePathSegmentGeneric &);\n+  void visit (AST::TypePathSegmentFunction &);\n+  void visit (AST::TypePath &);\n+  void visit (AST::QualifiedPathInExpression &);\n+  void visit (AST::QualifiedPathInType &);\n+  void visit (AST::LiteralExpr &);\n+  void visit (AST::AttrInputLiteral &);\n+  void visit (AST::MetaItemLitExpr &);\n+  void visit (AST::MetaItemPathLit &);\n+  void visit (AST::BorrowExpr &);\n+  void visit (AST::DereferenceExpr &);\n+  void visit (AST::ErrorPropagationExpr &);\n+  void visit (AST::NegationExpr &);\n+  void visit (AST::ArithmeticOrLogicalExpr &);\n+  void visit (AST::ComparisonExpr &);\n+  void visit (AST::LazyBooleanExpr &);\n+  void visit (AST::TypeCastExpr &);\n+  void visit (AST::AssignmentExpr &);\n+  void visit (AST::CompoundAssignmentExpr &);\n+  void visit (AST::GroupedExpr &);\n+  void visit (AST::ArrayElemsValues &);\n+  void visit (AST::ArrayElemsCopied &);\n+  void visit (AST::ArrayExpr &);\n+  void visit (AST::ArrayIndexExpr &);\n+  void visit (AST::TupleExpr &);\n+  void visit (AST::TupleIndexExpr &);\n+  void visit (AST::StructExprStruct &);\n+  void visit (AST::StructExprFieldIdentifier &);\n+  void visit (AST::StructExprFieldIdentifierValue &);\n+  void visit (AST::StructExprFieldIndexValue &);\n+  void visit (AST::StructExprStructFields &);\n+  void visit (AST::StructExprStructBase &);\n+  void visit (AST::CallExpr &);\n+  void visit (AST::MethodCallExpr &);\n+  void visit (AST::FieldAccessExpr &);\n+  void visit (AST::ClosureExprInner &);\n+  void visit (AST::BlockExpr &);\n+  void visit (AST::ClosureExprInnerTyped &);\n+  void visit (AST::ContinueExpr &);\n+  void visit (AST::BreakExpr &);\n+  void visit (AST::RangeFromToExpr &);\n+  void visit (AST::RangeFromExpr &);\n+  void visit (AST::RangeToExpr &);\n+  void visit (AST::RangeFullExpr &);\n+  void visit (AST::RangeFromToInclExpr &);\n+  void visit (AST::RangeToInclExpr &);\n+  void visit (AST::ReturnExpr &);\n+  void visit (AST::UnsafeBlockExpr &);\n+  void visit (AST::LoopExpr &);\n+  void visit (AST::WhileLoopExpr &);\n+  void visit (AST::WhileLetLoopExpr &);\n+  void visit (AST::ForLoopExpr &);\n+  void visit (AST::IfExpr &);\n+  void visit (AST::IfExprConseqElse &);\n+  void visit (AST::IfExprConseqIf &);\n+  void visit (AST::IfExprConseqIfLet &);\n+  void visit (AST::IfLetExpr &);\n+  void visit (AST::IfLetExprConseqElse &);\n+  void visit (AST::IfLetExprConseqIf &);\n+  void visit (AST::IfLetExprConseqIfLet &);\n+\n+  void visit (AST::MatchExpr &);\n+  void visit (AST::AwaitExpr &);\n+  void visit (AST::AsyncBlockExpr &);\n+\n+  void visit (AST::TypeParam &);\n+\n+  void visit (AST::LifetimeWhereClauseItem &);\n+  void visit (AST::TypeBoundWhereClauseItem &);\n+  void visit (AST::Method &);\n+  void visit (AST::Module &);\n+  void visit (AST::ExternCrate &);\n+\n+  void visit (AST::UseTreeGlob &);\n+  void visit (AST::UseTreeList &);\n+  void visit (AST::UseTreeRebind &);\n+  void visit (AST::UseDeclaration &);\n+  void visit (AST::Function &);\n+  void visit (AST::TypeAlias &);\n+  void visit (AST::StructStruct &);\n+  void visit (AST::TupleStruct &);\n+  void visit (AST::EnumItem &);\n+  void visit (AST::EnumItemTuple &);\n+  void visit (AST::EnumItemStruct &);\n+  void visit (AST::EnumItemDiscriminant &);\n+  void visit (AST::Enum &);\n+  void visit (AST::Union &);\n+  void visit (AST::ConstantItem &);\n+  void visit (AST::StaticItem &);\n+  void visit (AST::TraitItemFunc &);\n+  void visit (AST::TraitItemMethod &);\n+  void visit (AST::TraitItemConst &);\n+  void visit (AST::TraitItemType &);\n+  void visit (AST::Trait &);\n+  void visit (AST::InherentImpl &);\n+  void visit (AST::TraitImpl &);\n+\n+  void visit (AST::ExternalStaticItem &);\n+  void visit (AST::ExternalFunctionItem &);\n+  void visit (AST::ExternBlock &);\n+\n+  void visit (AST::MacroMatchFragment &);\n+  void visit (AST::MacroMatchRepetition &);\n+  void visit (AST::MacroMatcher &);\n+  void visit (AST::MacroRulesDefinition &);\n+  void visit (AST::MacroInvocation &);\n+  void visit (AST::MetaItemPath &);\n+  void visit (AST::MetaItemSeq &);\n+  void visit (AST::MetaWord &);\n+  void visit (AST::MetaNameValueStr &);\n+  void visit (AST::MetaListPaths &);\n+  void visit (AST::MetaListNameValueStr &);\n+\n+  void visit (AST::LiteralPattern &);\n+  void visit (AST::IdentifierPattern &);\n+  void visit (AST::WildcardPattern &);\n+\n+  void visit (AST::RangePatternBoundLiteral &);\n+  void visit (AST::RangePatternBoundPath &);\n+  void visit (AST::RangePatternBoundQualPath &);\n+  void visit (AST::RangePattern &);\n+  void visit (AST::ReferencePattern &);\n+\n+  void visit (AST::StructPatternFieldTuplePat &);\n+  void visit (AST::StructPatternFieldIdentPat &);\n+  void visit (AST::StructPatternFieldIdent &);\n+  void visit (AST::StructPattern &);\n+\n+  void visit (AST::TupleStructItemsNoRange &);\n+  void visit (AST::TupleStructItemsRange &);\n+  void visit (AST::TupleStructPattern &);\n+\n+  void visit (AST::TuplePatternItemsMultiple &);\n+  void visit (AST::TuplePatternItemsRanged &);\n+  void visit (AST::TuplePattern &);\n+  void visit (AST::GroupedPattern &);\n+  void visit (AST::SlicePattern &);\n+\n+  void visit (AST::EmptyStmt &);\n+  void visit (AST::LetStmt &);\n+  void visit (AST::ExprStmtWithoutBlock &);\n+  void visit (AST::ExprStmtWithBlock &);\n+\n+  void visit (AST::TraitBound &);\n+  void visit (AST::ImplTraitType &);\n+  void visit (AST::TraitObjectType &);\n+  void visit (AST::ParenthesisedType &);\n+  void visit (AST::ImplTraitTypeOneBound &);\n+  void visit (AST::TraitObjectTypeOneBound &);\n+  void visit (AST::TupleType &);\n+  void visit (AST::NeverType &);\n+  void visit (AST::RawPointerType &);\n+  void visit (AST::ReferenceType &);\n+  void visit (AST::ArrayType &);\n+  void visit (AST::SliceType &);\n+  void visit (AST::InferredType &);\n+  void visit (AST::BareFunctionType &);\n \n protected:\n   ResolverBase (NodeId parent)\n@@ -206,6 +206,11 @@ class ResolverBase : public AST::ASTVisitor\n \n   bool resolved () const { return resolved_node != UNKNOWN_NODEID; }\n \n+  /**\n+   * Resolve a visibility's path through the name resolver\n+   */\n+  bool resolve_visibility (const AST::Visibility &vis);\n+\n   Resolver *resolver;\n   Analysis::Mappings *mappings;\n   NodeId resolved_node;"}, {"sha": "2c383c927fa60534586b645364fca1576d19b5e6", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -238,6 +238,8 @@ ResolveItem::visit (AST::Module &module)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   module.get_node_id (), cpath);\n \n+  resolve_visibility (module.get_visibility ());\n+\n   NodeId scope_node_id = module.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n@@ -267,6 +269,8 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   struct_decl.get_node_id (), cpath);\n \n+  resolve_visibility (struct_decl.get_visibility ());\n+\n   NodeId scope_node_id = struct_decl.get_node_id ();\n   resolver->get_type_scope ().push (scope_node_id);\n \n@@ -286,6 +290,8 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n       if (field.get_field_type ()->is_marked_for_strip ())\n \tcontinue;\n \n+      resolve_visibility (field.get_visibility ());\n+\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n     }\n@@ -303,6 +309,8 @@ ResolveItem::visit (AST::Enum &enum_decl)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   enum_decl.get_node_id (), cpath);\n \n+  resolve_visibility (enum_decl.get_visibility ());\n+\n   NodeId scope_node_id = enum_decl.get_node_id ();\n   resolver->get_type_scope ().push (scope_node_id);\n \n@@ -328,6 +336,9 @@ ResolveItem::visit (AST::Enum &enum_decl)\n void\n ResolveItem::visit (AST::EnumItem &item)\n {\n+  // Since at this point we cannot have visibilities on enum items anymore, we\n+  // can skip handling them\n+\n   auto decl\n     = CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ());\n   auto path = prefix.append (decl);\n@@ -396,6 +407,8 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   struct_decl.get_node_id (), cpath);\n \n+  resolve_visibility (struct_decl.get_visibility ());\n+\n   NodeId scope_node_id = struct_decl.get_node_id ();\n   resolver->get_type_scope ().push (scope_node_id);\n \n@@ -415,6 +428,8 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n       if (field.get_field_type ()->is_marked_for_strip ())\n \tcontinue;\n \n+      resolve_visibility (field.get_visibility ());\n+\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       struct_decl.get_node_id ());\n     }\n@@ -432,6 +447,8 @@ ResolveItem::visit (AST::Union &union_decl)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   union_decl.get_node_id (), cpath);\n \n+  resolve_visibility (union_decl.get_visibility ());\n+\n   NodeId scope_node_id = union_decl.get_node_id ();\n   resolver->get_type_scope ().push (scope_node_id);\n \n@@ -485,6 +502,8 @@ ResolveItem::visit (AST::ConstantItem &constant)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   constant.get_node_id (), cpath);\n \n+  resolve_visibility (constant.get_visibility ());\n+\n   ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n   ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id (), path,\n \t\t   cpath);\n@@ -505,6 +524,8 @@ ResolveItem::visit (AST::Function &function)\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t   function.get_node_id (), cpath);\n \n+  resolve_visibility (function.get_visibility ());\n+\n   NodeId scope_node_id = function.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n@@ -559,6 +580,8 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n   resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n \n+  resolve_visibility (impl_block.get_visibility ());\n+\n   if (impl_block.has_generics ())\n     {\n       for (auto &generic : impl_block.get_generic_params ())\n@@ -640,6 +663,9 @@ ResolveItem::visit (AST::Method &method)\n \t\t\t\t   method.get_node_id (), cpath);\n \n   NodeId scope_node_id = method.get_node_id ();\n+\n+  resolve_visibility (method.get_visibility ());\n+\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n   resolver->get_label_scope ().push (scope_node_id);\n@@ -711,6 +737,9 @@ void\n ResolveItem::visit (AST::TraitImpl &impl_block)\n {\n   NodeId scope_node_id = impl_block.get_node_id ();\n+\n+  resolve_visibility (impl_block.get_visibility ());\n+\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n   resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n@@ -812,6 +841,9 @@ void\n ResolveItem::visit (AST::Trait &trait)\n {\n   NodeId scope_node_id = trait.get_node_id ();\n+\n+  resolve_visibility (trait.get_visibility ());\n+\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n   resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n@@ -862,6 +894,8 @@ ResolveItem::visit (AST::Trait &trait)\n void\n ResolveItem::visit (AST::ExternBlock &extern_block)\n {\n+  resolve_visibility (extern_block.get_visibility ());\n+\n   for (auto &item : extern_block.get_extern_items ())\n     {\n       resolve_extern_item (item.get ());\n@@ -895,6 +929,8 @@ ResolveImplItems::visit (AST::TypeAlias &alias)\n {\n   ResolveItem::visit (alias);\n \n+  resolve_visibility (alias.get_visibility ());\n+\n   // FIXME this stops the erronious unused decls which will be fixed later on\n   resolver->get_type_scope ().append_reference_for_def (alias.get_node_id (),\n \t\t\t\t\t\t\talias.get_node_id ());\n@@ -911,6 +947,9 @@ void\n ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n {\n   NodeId scope_node_id = function.get_node_id ();\n+\n+  resolve_visibility (function.get_visibility ());\n+\n   resolver->get_name_scope ().push (scope_node_id);\n   resolver->get_type_scope ().push (scope_node_id);\n   resolver->get_label_scope ().push (scope_node_id);\n@@ -945,6 +984,8 @@ ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n void\n ResolveExternItem::visit (AST::ExternalStaticItem &item)\n {\n+  resolve_visibility (item.get_visibility ());\n+\n   ResolveType::go (item.get_type ().get (), item.get_node_id ());\n }\n "}, {"sha": "c7597a25070a3e7d2b5dcfe4ce0b9debf21d67ab", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -37,6 +37,13 @@ ResolvePath::go (AST::QualifiedPathInExpression *expr, NodeId parent)\n   resolver.resolve_path (expr);\n }\n \n+void\n+ResolvePath::go (AST::SimplePath *expr, NodeId parent)\n+{\n+  ResolvePath resolver (parent);\n+  resolver.resolve_path (expr);\n+}\n+\n void\n ResolvePath::resolve_path (AST::PathInExpression *expr)\n {\n@@ -272,5 +279,70 @@ ResolvePath::resolve_segments (CanonicalPath prefix, size_t offs,\n     }\n }\n \n+static bool\n+lookup_and_insert_segment (Resolver *resolver, CanonicalPath path,\n+\t\t\t   NodeId segment_id, NodeId *to_resolve, bool &is_type)\n+{\n+  if (resolver->get_name_scope ().lookup (path, to_resolve))\n+    {\n+      resolver->insert_resolved_name (segment_id, *to_resolve);\n+    }\n+  else if (resolver->get_type_scope ().lookup (path, to_resolve))\n+    {\n+      is_type = true;\n+      resolver->insert_resolved_type (segment_id, *to_resolve);\n+    }\n+  else\n+    {\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+void\n+ResolvePath::resolve_path (AST::SimplePath *simple_path)\n+{\n+  // resolve root segment first then apply segments in turn\n+  auto expr_node_id = simple_path->get_node_id ();\n+  auto is_type = false;\n+\n+  auto path = CanonicalPath::create_empty ();\n+  for (const auto &seg : simple_path->get_segments ())\n+    {\n+      auto s = ResolveSimplePathSegmentToCanonicalPath::resolve (seg);\n+      path = path.append (s);\n+\n+      // Reset state\n+      resolved_node = UNKNOWN_NODEID;\n+      is_type = false;\n+\n+      if (!lookup_and_insert_segment (resolver, path, seg.get_node_id (),\n+\t\t\t\t      &resolved_node, is_type))\n+\t{\n+\t  rust_error_at (seg.get_locus (),\n+\t\t\t \"cannot find simple path segment %qs\",\n+\t\t\t seg.as_string ().c_str ());\n+\t  return;\n+\t}\n+    }\n+\n+  if (resolved_node == UNKNOWN_NODEID)\n+    {\n+      rust_error_at (simple_path->get_locus (),\n+\t\t     \"could not resolve simple path %qs\",\n+\t\t     simple_path->as_string ().c_str ());\n+      return;\n+    }\n+\n+  if (is_type)\n+    resolver->insert_resolved_type (expr_node_id, resolved_node);\n+  else\n+    resolver->insert_resolved_name (expr_node_id, resolved_node);\n+\n+  resolver->insert_new_definition (expr_node_id,\n+\t\t\t\t   Definition{expr_node_id, parent});\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "cbfe967fdcc958d1a6d73ff8f59302b180ad52cb", "filename": "gcc/rust/resolve/rust-ast-resolve-path.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -31,16 +31,33 @@ class ResolvePath : public ResolverBase\n public:\n   static void go (AST::PathInExpression *expr, NodeId parent);\n   static void go (AST::QualifiedPathInExpression *expr, NodeId parent);\n+  static void go (AST::SimplePath *expr, NodeId parent);\n \n private:\n   ResolvePath (NodeId parent) : ResolverBase (parent) {}\n \n   void resolve_path (AST::PathInExpression *expr);\n   void resolve_path (AST::QualifiedPathInExpression *expr);\n+  void resolve_path (AST::SimplePath *expr);\n \n   void resolve_segments (CanonicalPath prefix, size_t offs,\n \t\t\t std::vector<AST::PathExprSegment> &segs,\n \t\t\t NodeId expr_node_id, Location expr_locus);\n+\n+  void\n+  resolve_simple_path_segments (CanonicalPath prefix, size_t offs,\n+\t\t\t\tconst std::vector<AST::SimplePathSegment> &segs,\n+\t\t\t\tNodeId expr_node_id, Location expr_locus);\n+};\n+\n+class ResolveSimplePathSegmentToCanonicalPath\n+{\n+public:\n+  static CanonicalPath resolve (const AST::SimplePathSegment &seg)\n+  {\n+    // FIXME: Since this is so simple, maybe it can simply be a tiny function?\n+    return CanonicalPath::new_seg (seg.get_node_id (), seg.get_segment_name ());\n+  }\n };\n \n } // namespace Resolver"}, {"sha": "01fb65ea61065195872837d5e971c34f392f01cd", "filename": "gcc/testsuite/rust/compile/pub_restricted_1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf744cbd762442ab33b3f92067829883d7d2d73/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs?ref=9cf744cbd762442ab33b3f92067829883d7d2d73", "patch": "@@ -0,0 +1,14 @@\n+pub mod foo {\n+    pub mod bar {\n+        pub fn baz() {}\n+    }\n+}\n+\n+// this is invalid Rust: We just want to make sure the paths get resolved properly\n+pub(in foo::bar::baz) struct A0;\n+\n+pub(in foo::fah::baz) struct A1; // { dg-error \"cannot find simple path segment .fah.\" }\n+pub(in fro::bulator::saindoux) struct A2; // { dg-error \"cannot find simple path segment .fro.\" }\n+pub(in foo::bar::saindoux) struct A3; // { dg-error \"cannot find simple path segment .saindoux.\" }\n+\n+fn main() {}"}]}