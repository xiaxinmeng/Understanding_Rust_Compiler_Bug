{"sha": "6c381d9d1cc159cccc577909e6e849e4ac4ac881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzODFkOWQxY2MxNTljY2NjNTc3OTA5ZTZlODQ5ZTRhYzRhYzg4MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-17T17:35:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-17T17:35:23Z"}, "message": "re PR target/53020 (__atomic_fetch_or doesn't generate `1 insn` variant)\n\n\tPR target/53020\n\t* config/i386/sync.md (atomic_<code><mode>): Rename to\n\tatomic_<logic><mode>.\n\nFrom-SVN: r186542", "tree": {"sha": "9db1a0681e9da2ac536a8334319d4bfd2eaee167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db1a0681e9da2ac536a8334319d4bfd2eaee167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c381d9d1cc159cccc577909e6e849e4ac4ac881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c381d9d1cc159cccc577909e6e849e4ac4ac881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c381d9d1cc159cccc577909e6e849e4ac4ac881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c381d9d1cc159cccc577909e6e849e4ac4ac881/comments", "author": null, "committer": null, "parents": [{"sha": "0fced8150b9bc8be3dd0ea2134002f4645428f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fced8150b9bc8be3dd0ea2134002f4645428f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fced8150b9bc8be3dd0ea2134002f4645428f6b"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "05a4925b2c3b1136d55c80cb3c37c75455721819", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c381d9d1cc159cccc577909e6e849e4ac4ac881/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c381d9d1cc159cccc577909e6e849e4ac4ac881/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c381d9d1cc159cccc577909e6e849e4ac4ac881", "patch": "@@ -1,3 +1,9 @@\n+2012-04-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53020\n+\t* config/i386/sync.md (atomic_<code><mode>): Rename to\n+\tatomic_<logic><mode>.\n+\n 2012-04-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.def (ADDRESS): Turn operand into a HOST_WIDE_INT.\n@@ -240,7 +246,7 @@\n \tPR tree-optimization/52975\n \t* tree-if-conv.c (predicate_bbs): Do not simplify inverted\n \tcondition but always mark it with TRUTH_NOT_EXPR.\n- \n+\n 2012-04-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52975\n@@ -1540,8 +1546,7 @@\n \n \tPR middle-end/50708\n \t* double-int.h (rshift_double): Remove.\n-\t* double-int.c (lshift_double): Use absu_hwi to make count\n-\tpositive.\n+\t* double-int.c (lshift_double): Use absu_hwi to make count positive.\n \t(rshift_double): Make static, take unsigned count argument,\n \tremove handling of negative count argument.\n \t(double_int_rshift): Dispatch to lshift_double.\n@@ -4168,8 +4173,7 @@\n \t2012-02-20  Richard Guenther  <rguenther@suse.de>\n \tPR tree-optimization/52298\n \t* tree-vect-stmts.c (vectorizable_load): Properly use\n-\tSTMT_VINFO_DR_STEP instead of DR_STEP when vectorizing\n-\touter loops.\n+\tSTMT_VINFO_DR_STEP instead of DR_STEP when vectorizing outer loops.\n \n 2012-02-28  Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "faf65ba8a2316b36d62d994e30a55f1b5d87ded1", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c381d9d1cc159cccc577909e6e849e4ac4ac881/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c381d9d1cc159cccc577909e6e849e4ac4ac881/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=6c381d9d1cc159cccc577909e6e849e4ac4ac881", "patch": "@@ -576,7 +576,7 @@\n   return \"lock{%;} sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n-(define_insn \"atomic_<code><mode>\"\n+(define_insn \"atomic_<logic><mode>\"\n   [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SWI\n \t  [(any_logic:SWI (match_dup 0)"}]}