{"sha": "0a1aa86740647f0f4c5092a7f8cdea7c01807827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExYWE4Njc0MDY0N2YwZjRjNTA5MmE3ZjhjZGVhN2MwMTgwNzgyNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-09-01T11:14:21Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-09-01T11:14:21Z"}, "message": "* arm/ieee754-df.S (aeabi_ul2d, aeabi_l2d, floatundidf)\n(floatdidf): New functions.\n* arm/ieee754-sf.S (aeabi_ul2f, aeabi_l2f, floatundisf)\n(floatdisf): New functions.\n* t-arm-elf: Use them.\n\nFrom-SVN: r86882", "tree": {"sha": "b641a245c64ecca1f8a28d8ec998afdcb7036299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b641a245c64ecca1f8a28d8ec998afdcb7036299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a1aa86740647f0f4c5092a7f8cdea7c01807827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1aa86740647f0f4c5092a7f8cdea7c01807827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1aa86740647f0f4c5092a7f8cdea7c01807827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1aa86740647f0f4c5092a7f8cdea7c01807827/comments", "author": null, "committer": null, "parents": [{"sha": "4eb104c16c811d4c895711bc9cb2f2c3c9602fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb104c16c811d4c895711bc9cb2f2c3c9602fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb104c16c811d4c895711bc9cb2f2c3c9602fe7"}], "stats": {"total": 195, "additions": 193, "deletions": 2}, "files": [{"sha": "f5c3ca6983a92f8683eebd776e8332c1276f98bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a1aa86740647f0f4c5092a7f8cdea7c01807827", "patch": "@@ -1,3 +1,11 @@\n+2004-09-01  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm/ieee754-df.S (aeabi_ul2d, aeabi_l2d, floatundidf)\n+\t(floatdidf): New functions.\n+\t* arm/ieee754-sf.S (aeabi_ul2f, aeabi_l2f, floatundisf)\n+\t(floatdisf): New functions.\n+\t* t-arm-elf: Use them.\n+\n 2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n \n \t* c-common.h (lookup_interface): Remove prototype."}, {"sha": "af32b9e2c082cc66f2fd108311b25483ddd8851d", "filename": "gcc/config/arm/ieee754-df.S", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-df.S?ref=0a1aa86740647f0f4c5092a7f8cdea7c01807827", "patch": "@@ -449,6 +449,83 @@ ARM_FUNC_ALIAS aeabi_f2d extendsfdf2\n \tFUNC_END aeabi_f2d\n \tFUNC_END extendsfdf2\n \n+ARM_FUNC_START floatundidf\n+ARM_FUNC_ALIAS aeabi_ul2d floatundidf\n+\t\n+\torrs\tr2, r0, r1\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\tmvfeqd\tf0, #0.0\n+#endif\n+\tRETc(eq)\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\t@ For hard FPA code we want to return via the tail below so that\n+\t@ we can return the result in f0 as well as in r0/r1 for backwards\n+\t@ compatibility.\n+\tadr\tip, 1f\n+\tstmfd\tsp!, {r4, r5, ip, lr}\n+#else\n+\tstmfd\tsp!, {r4, r5, lr}\n+#endif\n+\tmov\tr5, #0\n+\tb\t2f\n+\n+ARM_FUNC_START floatdidf\n+ARM_FUNC_ALIAS aeabi_l2d floatdidf\n+\torrs\tr2, r0, r1\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\tmvfeqd\tf0, #0.0\n+#endif\n+\tRETc(eq)\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\t@ For hard FPA code we want to return via the tail below so that\n+\t@ we can return the result in f0 as well as in r0/r1 for backwards\n+\t@ compatibility.\n+\tadr\tip, 1f\n+\tstmfd\tsp!, {r4, r5, ip, lr}\n+#else\n+\tstmfd\tsp!, {r4, r5, lr}\n+#endif\n+\tands\tr5, ah, #0x80000000\t@ sign bit in r5\n+\tbpl\t2f\n+\trsbs\tal, al, #0\n+\trsc\tah, ah, #0\n+2:\n+\tmov\tr4, #(0x400 << 20)\t@ initial exponent\n+\tadd\tr4, r4, #((52 - 1) << 20)\n+#if !defined (__VFP_FP__) && !defined(__ARMEB__)\n+\t@ FPA little-endian: must swap the word order.\n+\tmov\tip, al\n+\tmov\txh, ah\n+\tmov\txl, ip\n+#endif\n+\tmovs\tip, xh, lsr #23\n+\tbeq\tLSYM(Lad_p)\n+\t@ The value's too big.  Scale it down a bit...\n+\tmov\tr2, #3\n+\tmovs\tip, ip, lsr #3\n+\taddne\tr2, r2, #3\n+\tmovs\tip, ip, lsr #3\n+\taddne\tr2, r2, #3\n+\trsb\tr3, r2, #32\n+\tmov\tip, xl, lsl r3\n+\tmov\txl, xl, lsr r2\n+\torr\txl, xl, xh, lsl r3\n+\tmov\txh, xh, lsr r2\n+\tadd\tr4, r4, r2, lsl #20\n+\tb\tLSYM(Lad_p)\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+1:\n+\t@ Legacy code expects the result to be returned in f0.  Copy it\n+\t@ there as well.\n+\tstmfd\tsp!, {r0, r1}\n+\tldfd\tf0, [sp], #8\n+\tRETLDM\n+#endif\n+\tFUNC_END floatdidf\n+\tFUNC_END aeabi_l2d\n+\tFUNC_END floatundidf\n+\tFUNC_END aeabi_ul2d\n+\n #endif /* L_addsubdf3 */\n \n #ifdef L_muldivdf3"}, {"sha": "d82fa8c84f770909668d65bbf70e5477811ae47f", "filename": "gcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=0a1aa86740647f0f4c5092a7f8cdea7c01807827", "patch": "@@ -290,14 +290,16 @@ ARM_FUNC_ALIAS aeabi_i2f floatsisf\n 1:\tteq\tr0, #0\n \tRETc(eq)\n \n+3:\n \tmov\tr1, #0\n \tmov\tr2, #((127 + 23) << 23)\n \ttst\tr0, #0xfc000000\n \tbeq\tLSYM(Lad_p)\n \n \t@ We need to scale the value a little before branching to code above.\n \ttst\tr0, #0xf0000000\n-\tmovne\tr1, r0, lsl #28\n+4:\n+\torrne\tr1, r1, r0, lsl #28\n \tmovne\tr0, r0, lsr #4\n \taddne\tr2, r2, #(4 << 23)\n \ttst\tr0, #0x0c000000\n@@ -313,6 +315,110 @@ ARM_FUNC_ALIAS aeabi_i2f floatsisf\n \tFUNC_END aeabi_ui2f\n \tFUNC_END floatunsisf\n \n+ARM_FUNC_START floatundisf\n+ARM_FUNC_ALIAS aeabi_ul2f floatundisf\n+\torrs\tr2, r0, r1\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\tmvfeqs\tf0, #0.0\n+#endif\n+\tRETc(eq)\n+\t\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\t@ For hard FPA code we want to return via the tail below so that\n+\t@ we can return the result in f0 as well as in r0 for backwards\n+\t@ compatibility.\n+\tstr\tlr, [sp, #-4]!\n+\tadr\tlr, 4f\n+#endif\n+\n+\tmov\tr3, #0\n+\tb\t2f\n+\n+ARM_FUNC_START floatdisf\n+ARM_FUNC_ALIAS aeabi_l2f floatdisf\n+\n+\torrs\tr2, r0, r1\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\tmvfeqs\tf0, #0.0\n+#endif\n+\tRETc(eq)\n+\t\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+\t@ For hard FPA code we want to return via the tail below so that\n+\t@ we can return the result in f0 as well as in r0 for backwards\n+\t@ compatibility.\n+\tstr\tlr, [sp, #-4]!\n+\tadr\tlr, 4f\n+#endif\n+\tands\tr3, ah, #0x80000000\t@ sign bit in r3\n+\tbpl\t2f\n+\trsbs\tal, al, #0\n+\trsc\tah, ah, #0\n+2:\n+\tmovs\tip, ah\n+#ifdef __ARMEB__\n+\tmoveq\tr0, al\n+#endif\n+\tbeq\t3b\n+\tmov\tr2, #((127 + 23 + 32) << 23)\t@ initial exponent\n+#ifndef __ARMEB__\n+\tmov\tr1, al\n+\tmov\tr0, ip\n+#endif\n+\ttst\tr0, #0xfc000000\n+\tbne\t3f\n+\n+#if __ARM_ARCH__ < 5\n+\tcmp\tr0, #(1 << 13)\n+\tmovlo\tip, #13\n+\tmovlo\tr0, r0, lsl #13\n+\tmovhs\tip, #0\n+\ttst\tr0, #0x03fc0000\n+\taddeq\tip, ip, #8\n+\tmoveq\tr0, r0, lsl #8\n+\ttst\tr0, #0x03c00000\n+\taddeq\tip, ip, #4\n+\tmoveq\tr0, r0, lsl #4\n+\ttst\tr0, #0x03000000\n+\taddeq\tip, ip, #2\n+\tmoveq\tr0, r0, lsl #2\n+#else\n+\tclz\tip, r0\n+\tsub\tip, ip, #6\n+\tmov\tr0, r0, lsl ip\n+#endif\n+\tsub\tr2, r2, ip, lsl #23\n+\trsb\tip, ip, #32\n+\torr\tr0, r0, r1, lsr ip\n+\trsb\tip, ip, #32\n+\tmov\tr1, r1, asl ip\n+\t@ At this point we no-longer care about the precise value in r1, only\n+\t@ whether only the top bit is set, or if the top bit and some others\n+\t@ are set.\n+\tand\tip, r1, #0xff\n+\torr\tr1, r1, ip, lsl #8\n+\tb\tLSYM(Lad_p)\n+3:\n+\t@ We need to scale the value a little before branching to code above.\n+\t@ At this point we no-longer care about the precise value in r1, only\n+\t@ whether only the top bit is set, or if the top bit and some others\n+\t@ are set.\n+\tand\tip, r1, #0xff\n+\torr\tr1, r1, ip, lsl #8\n+\ttst\tr0, #0xf0000000\n+\tmovne\tr1, r1, lsr #4\n+\tb\t4b\n+#if !defined (__VFP_FP__) && !defined(__SOFTFP__)\n+4:\n+\tstr\tr0, [sp, #-4]!\n+\tldfs\tf0, [sp], #4\n+\tRETLDM\n+#endif\n+\tFUNC_END floatdisf\n+\tFUNC_END aeabi_l2f\n+\tFUNC_END floatundisf\n+\tFUNC_END aeabi_ul2f\n+\n #endif /* L_addsubsf3 */\n \n #ifdef L_muldivsf3"}, {"sha": "b4e19b0abb2d607ce79ea8113b903e424d2c8011", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1aa86740647f0f4c5092a7f8cdea7c01807827/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=0a1aa86740647f0f4c5092a7f8cdea7c01807827", "patch": "@@ -4,7 +4,7 @@ LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n \t_lshrdi3 _ashrdi3 _ashldi3 \\\n \t_negdf2 _addsubdf3 _muldivdf3 _cmpdf2 _unorddf2 _fixdfsi _fixunsdfsi \\\n \t_truncdfsf2 _negsf2 _addsubsf3 _muldivsf3 _cmpsf2 _unordsf2 \\\n-\t_fixsfsi _fixunssfsi\n+\t_fixsfsi _fixunssfsi _floatdidf _floatdisf\n \n MULTILIB_OPTIONS     = marm/mthumb\n MULTILIB_DIRNAMES    = arm thumb"}]}