{"sha": "fb54aa5915bcea13e23b34f54a5364e01c8185af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1NGFhNTkxNWJjZWExM2UyM2IzNGY1NGE1MzY0ZTAxYzgxODVhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-18T21:28:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-18T21:28:48Z"}, "message": "PR libstdc++/88782 avoid ODR problems in std::make_shared\n\nThe old version of _Sp_counted_ptr_inplace::_M_get_deleter (up to GCC\n8.2.0) expects to be passed a real std::typeinfo object, so mixing that\nwith the new definition of the __shared_ptr constructor (which always\npasses the fake tag) leads to accessing the fake object as a real\nstd::typeinfo. Instead of trying to make it safe to mix the old and new\ndefinitions, just stop using that function. By passing a reference to\n__shared_ptr::_M_ptr to the __shared_count constructor it can be set\ndirectly, without needing to obtain the pointer via the _M_get_deleter\nback-channel. This avoids a virtual dispatch (which fixes PR 87514).\n\nThis means that code built against new libstdc++ headers doesn't use\n_M_get_deleter at all, and so make_shared works the same whether RTTI is\nenabled or not.\n\nAlso change _M_get_deleter so that it checks for a real type_info object\neven when RTTI is disabled, by calling a library function. Unless\nlibstdc++ itself is built without RTTI that library function will be\nable to test if it's the right type_info. This means the new definition\nof _M_get_deleter can handle both the fake type_info tag and a real\ntype_info object, even if built without RTTI.\n\nIf linking to objects built against older versions of libstdc++ then if\nall objects use -frtti or all use -fno-rtti, then the caller of\n_M_get_deleter and the definition of _M_get_deleter will be consistent\nand it will work. If mixing -frtti with -fno-rtti it can still fail if\nthe linker picks an old definition of _M_get_deleter and an old\n__shared_ptr constructor that are incompatible. In that some or all\nobjects might need to be recompiled.\n\n\tPR libstdc++/87514\n\tPR libstdc++/87520\n\tPR libstdc++/88782\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export new symbol.\n\t* include/bits/shared_ptr.h\n\t(shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...))\n\t(allocate_shared): Change to use new tag type.\n\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_eq):\n\tDeclare new member function.\n\t(_Sp_alloc_shared_tag): Define new type.\n\t(_Sp_counted_ptr_inplace): Declare __shared_count<_Lp> as a friend.\n\t(_Sp_counted_ptr_inplace::_M_get_deleter) [!__cpp_rtti]: Use\n\t_Sp_make_shared_tag::_S_eq to check type_info.\n\t(__shared_count(Ptr, Deleter),__shared_count(Ptr, Deleter, Alloc)):\n\tConstrain to prevent being called with _Sp_alloc_shared_tag.\n\t(__shared_count(_Sp_make_shared_tag, const _Alloc&, Args&&...)):\n\tReplace constructor with ...\n\t(__shared_count(Tp*&, _Sp_alloc_shared_tag<_Alloc>, Args&&...)): Use\n\treference parameter so address of the new object can be returned to\n\tthe caller. Obtain the allocator from the tag type.\n\t(__shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...)): Replace\n\tconstructor with ...\n\t(__shared_ptr(_Sp_alloc_shared_tag<Alloc>, Args&&...)): Pass _M_ptr\n\tto the __shared_count constructor.\n\t(__allocate_shared): Change to use new tag type.\n\t* src/c++11/shared_ptr.cc (_Sp_make_shared_tag::_S_eq): Define.\n\nFrom-SVN: r268086", "tree": {"sha": "59213495b3b36387ea8e49c7cd7ccee5a4cd5b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59213495b3b36387ea8e49c7cd7ccee5a4cd5b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb54aa5915bcea13e23b34f54a5364e01c8185af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb54aa5915bcea13e23b34f54a5364e01c8185af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb54aa5915bcea13e23b34f54a5364e01c8185af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb54aa5915bcea13e23b34f54a5364e01c8185af/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea93fc60d293b08d137f08d9129de6f4fc772db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea93fc60d293b08d137f08d9129de6f4fc772db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea93fc60d293b08d137f08d9129de6f4fc772db"}], "stats": {"total": 125, "additions": 91, "deletions": 34}, "files": [{"sha": "4ca096d7b75e3a7ffcd40fce7e8ec827b0e6c4fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb54aa5915bcea13e23b34f54a5364e01c8185af", "patch": "@@ -1,3 +1,32 @@\n+2019-01-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87514\n+\tPR libstdc++/87520\n+\tPR libstdc++/88782\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export new symbol.\n+\t* include/bits/shared_ptr.h\n+\t(shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...))\n+\t(allocate_shared): Change to use new tag type.\n+\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_eq):\n+\tDeclare new member function.\n+\t(_Sp_alloc_shared_tag): Define new type.\n+\t(_Sp_counted_ptr_inplace): Declare __shared_count<_Lp> as a friend.\n+\t(_Sp_counted_ptr_inplace::_M_get_deleter) [!__cpp_rtti]: Use\n+\t_Sp_make_shared_tag::_S_eq to check type_info.\n+\t(__shared_count(Ptr, Deleter),__shared_count(Ptr, Deleter, Alloc)):\n+\tConstrain to prevent being called with _Sp_alloc_shared_tag.\n+\t(__shared_count(_Sp_make_shared_tag, const _Alloc&, Args&&...)):\n+\tReplace constructor with ...\n+\t(__shared_count(Tp*&, _Sp_alloc_shared_tag<_Alloc>, Args&&...)): Use\n+\treference parameter so address of the new object can be returned to\n+\tthe caller. Obtain the allocator from the tag type.\n+\t(__shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...)): Replace\n+\tconstructor with ...\n+\t(__shared_ptr(_Sp_alloc_shared_tag<Alloc>, Args&&...)): Pass _M_ptr\n+\tto the __shared_count constructor.\n+\t(__allocate_shared): Change to use new tag type.\n+\t* src/c++11/shared_ptr.cc (_Sp_make_shared_tag::_S_eq): Define.\n+\n 2019-01-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/fs_ops.cc"}, {"sha": "34c70b6cb8f1ecc5db1338ab605e6e8526cb7b9d", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=fb54aa5915bcea13e23b34f54a5364e01c8185af", "patch": "@@ -2235,6 +2235,9 @@ GLIBCXX_3.4.26 {\n     _ZNSolsEDn;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEElsEDn;\n \n+    # _Sp_make_shared_tag::_S_eq\n+    _ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "ee815f0d0a197b1d72ab78b333f388f6a909db8d", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=fb54aa5915bcea13e23b34f54a5364e01c8185af", "patch": "@@ -355,9 +355,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n-\tshared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n-\t\t   _Args&&... __args)\n-\t: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)\n+\tshared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)\n+\t: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)\n \t{ }\n \n       template<typename _Yp, typename _Alloc, typename... _Args>\n@@ -699,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline shared_ptr<_Tp>\n     allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n-      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,\n+      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},\n \t\t\t     std::forward<_Args>(__args)...);\n     }\n "}, {"sha": "0367c2d51a5de0629382059f4cb13b20d9b7ed31", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=fb54aa5915bcea13e23b34f54a5364e01c8185af", "patch": "@@ -501,8 +501,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct _Sp_make_shared_tag\n   {\n   private:\n-    template<typename _Tp, _Lock_policy _Lp>\n-      friend class __shared_ptr;\n     template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n       friend class _Sp_counted_ptr_inplace;\n \n@@ -512,8 +510,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };\n       return reinterpret_cast<const type_info&>(__tag);\n     }\n+\n+    static bool _S_eq(const type_info&) noexcept;\n   };\n \n+  template<typename _Alloc>\n+    struct _Sp_alloc_shared_tag\n+    {\n+      const _Alloc& _M_a;\n+    };\n+\n   template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n     class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>\n     {\n@@ -560,24 +566,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->~_Sp_counted_ptr_inplace();\n       }\n \n-      // Sneaky trick so __shared_ptr can get the managed pointer.\n+    private:\n+      friend class __shared_count<_Lp>; // To be able to call _M_ptr().\n+\n+      // No longer used, but code compiled against old libstdc++ headers\n+      // might still call it from __shared_ptr ctor to get the pointer out.\n       virtual void*\n       _M_get_deleter(const std::type_info& __ti) noexcept override\n       {\n+\tauto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n \t// Check for the fake type_info first, so we don't try to access it\n-\t// as a real type_info object.\n-\tif (&__ti == &_Sp_make_shared_tag::_S_ti())\n-\t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n+\t// as a real type_info object. Otherwise, check if it's the real\n+\t// type_info for this class. With RTTI enabled we can check directly,\n+\t// or call a library function to do it.\n+\tif (&__ti == &_Sp_make_shared_tag::_S_ti()\n+\t    ||\n #if __cpp_rtti\n-\t// Callers compiled with old libstdc++ headers and RTTI enabled\n-\t// might pass this instead:\n-\telse if (__ti == typeid(_Sp_make_shared_tag))\n-\t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n+\t    __ti == typeid(_Sp_make_shared_tag)\n+#else\n+\t    _Sp_make_shared_tag::_S_eq(__ti)\n #endif\n+\t   )\n+\t  return __ptr;\n \treturn nullptr;\n       }\n \n-    private:\n       _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }\n \n       _Impl _M_impl;\n@@ -593,6 +606,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<_Lock_policy _Lp>\n     class __shared_count\n     {\n+      template<typename _Tp>\n+\tstruct __not_alloc_shared_tag { using type = void; };\n+\n+      template<typename _Tp>\n+\tstruct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };\n+\n     public:\n       constexpr __shared_count() noexcept : _M_pi(0)\n       { }\n@@ -622,12 +641,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: __shared_count(__p, __sp_array_delete{}, allocator<void>())\n \t{ }\n \n-      template<typename _Ptr, typename _Deleter>\n+      template<typename _Ptr, typename _Deleter,\n+\t       typename = typename __not_alloc_shared_tag<_Deleter>::type>\n \t__shared_count(_Ptr __p, _Deleter __d)\n \t: __shared_count(__p, std::move(__d), allocator<void>())\n \t{ }\n \n-      template<typename _Ptr, typename _Deleter, typename _Alloc>\n+      template<typename _Ptr, typename _Deleter, typename _Alloc,\n+\t       typename = typename __not_alloc_shared_tag<_Deleter>::type>\n \t__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)\n \t{\n \t  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n@@ -648,17 +669,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp, typename _Alloc, typename... _Args>\n-\t__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,\n+\t__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,\n \t\t       _Args&&... __args)\n-\t: _M_pi(0)\n \t{\n \t  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;\n-\t  typename _Sp_cp_type::__allocator_type __a2(__a);\n+\t  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);\n \t  auto __guard = std::__allocate_guarded(__a2);\n \t  _Sp_cp_type* __mem = __guard.get();\n-\t  ::new (__mem) _Sp_cp_type(__a, std::forward<_Args>(__args)...);\n-\t  _M_pi = __mem;\n+\t  auto __pi = ::new (__mem)\n+\t    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);\n \t  __guard = nullptr;\n+\t  _M_pi = __pi;\n+\t  __p = __pi->_M_ptr();\n \t}\n \n #if _GLIBCXX_USE_DEPRECATED\n@@ -1318,17 +1340,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n-\t__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n-\t\t     _Args&&... __args)\n-\t: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,\n-\t\t\t\tstd::forward<_Args>(__args)...)\n-\t{\n-\t  // _M_ptr needs to point to the newly constructed object.\n-\t  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.\n-\t  void* __p = _M_refcount._M_get_deleter(_Sp_make_shared_tag::_S_ti());\n-\t  _M_ptr = static_cast<_Tp*>(__p);\n-\t  _M_enable_shared_from_this_with(_M_ptr);\n-\t}\n+\t__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)\n+\t: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)\n+\t{ _M_enable_shared_from_this_with(_M_ptr); }\n \n       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,\n \t       typename... _Args>\n@@ -1808,7 +1822,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline __shared_ptr<_Tp, _Lp>\n     __allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n-      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,\n+      return __shared_ptr<_Tp, _Lp>(_Sp_alloc_shared_tag<_Alloc>{__a},\n \t\t\t\t    std::forward<_Args>(__args)...);\n     }\n "}, {"sha": "1f1323ef89f57f0d605d8b8ef5c1fbfc4fac6113", "filename": "libstdc++-v3/src/c++11/shared_ptr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54aa5915bcea13e23b34f54a5364e01c8185af/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc?ref=fb54aa5915bcea13e23b34f54a5364e01c8185af", "patch": "@@ -94,5 +94,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n+  bool\n+  _Sp_make_shared_tag::_S_eq(const type_info& ti) noexcept\n+  {\n+#if __cpp_rtti\n+    return ti == typeid(_Sp_make_shared_tag);\n+#else\n+    // If libstdc++ itself is built with -fno-rtti then just assume that\n+    // make_shared and allocate_shared will never be used with -frtti.\n+    return false;\n+#endif\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}]}