{"sha": "e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmNTY5NDRmZDhhZjMxZWQwZDljZGVmMTM0ZDVmMGE2OGJjYjcxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:21:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:21:59Z"}, "message": "calls.c: Include rtl-iter.h.\n\ngcc/\n\t* calls.c: Include rtl-iter.h.\n\t(internal_arg_pointer_based_exp_1): Delete.\n\t(internal_arg_pointer_based_exp): Take a const_rtx.\n\tUse FOR_EACH_SUBRTX to iterate over subrtxes.\n\nFrom-SVN: r214622", "tree": {"sha": "59b5c14c0c8c73f2c6a3bcec541e55d63276edc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b5c14c0c8c73f2c6a3bcec541e55d63276edc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cb22a678b82b615b83780e683b4f002435a1349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb22a678b82b615b83780e683b4f002435a1349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb22a678b82b615b83780e683b4f002435a1349"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "b5ea9b491fb980d23a704f3054b33e8fdf2316f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* calls.c: Include rtl-iter.h.\n+\t(internal_arg_pointer_based_exp_1): Delete.\n+\t(internal_arg_pointer_based_exp): Take a const_rtx.\n+\tUse FOR_EACH_SUBRTX to iterate over subrtxes.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* caller-save.c: Include rtl-iter.h."}, {"sha": "03ed9c8e303a6337cf49d3ce575de109216bd45e", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f56944fd8af31ed0d9cdef134d5f0a68bcb719/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e9f56944fd8af31ed0d9cdef134d5f0a68bcb719", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"except.h\"\n #include \"dbgcnt.h\"\n+#include \"rtl-iter.h\"\n \n /* Like PREFERRED_STACK_BOUNDARY but in units of bytes, not bits.  */\n #define STACK_BYTES (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n@@ -1696,7 +1697,7 @@ static struct\n   vec<rtx> cache;\n } internal_arg_pointer_exp_state;\n \n-static rtx internal_arg_pointer_based_exp (rtx, bool);\n+static rtx internal_arg_pointer_based_exp (const_rtx, bool);\n \n /* Helper function for internal_arg_pointer_based_exp.  Scan insns in\n    the tail call sequence, starting with first insn that hasn't been\n@@ -1744,28 +1745,13 @@ internal_arg_pointer_based_exp_scan (void)\n   internal_arg_pointer_exp_state.scan_start = scan_start;\n }\n \n-/* Helper function for internal_arg_pointer_based_exp, called through\n-   for_each_rtx.  Return 1 if *LOC is a register based on\n-   crtl->args.internal_arg_pointer.  Return -1 if *LOC is not based on it\n-   and the subexpressions need not be examined.  Otherwise return 0.  */\n-\n-static int\n-internal_arg_pointer_based_exp_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n-{\n-  if (REG_P (*loc) && internal_arg_pointer_based_exp (*loc, false) != NULL_RTX)\n-    return 1;\n-  if (MEM_P (*loc))\n-    return -1;\n-  return 0;\n-}\n-\n /* Compute whether RTL is based on crtl->args.internal_arg_pointer.  Return\n    NULL_RTX if RTL isn't based on it, a CONST_INT offset if RTL is based on\n    it with fixed offset, or PC if this is with variable or unknown offset.\n    TOPLEVEL is true if the function is invoked at the topmost level.  */\n \n static rtx\n-internal_arg_pointer_based_exp (rtx rtl, bool toplevel)\n+internal_arg_pointer_based_exp (const_rtx rtl, bool toplevel)\n {\n   if (CONSTANT_P (rtl))\n     return NULL_RTX;\n@@ -1799,8 +1785,15 @@ internal_arg_pointer_based_exp (rtx rtl, bool toplevel)\n       return NULL_RTX;\n     }\n \n-  if (for_each_rtx (&rtl, internal_arg_pointer_based_exp_1, NULL))\n-    return pc_rtx;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, rtl, NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (REG_P (x) && internal_arg_pointer_based_exp (x, false) != NULL_RTX)\n+\treturn pc_rtx;\n+      if (MEM_P (x))\n+\titer.skip_subrtxes ();\n+    }\n \n   return NULL_RTX;\n }"}]}