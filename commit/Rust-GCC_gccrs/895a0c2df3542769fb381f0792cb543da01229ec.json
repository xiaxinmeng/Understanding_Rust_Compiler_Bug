{"sha": "895a0c2df3542769fb381f0792cb543da01229ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk1YTBjMmRmMzU0Mjc2OWZiMzgxZjA3OTJjYjU0M2RhMDEyMjllYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-07-15T08:17:24Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-07-15T08:17:24Z"}, "message": "re PR fortran/37336 ([F03] Finish derived-type finalization)\n\n2013-07-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * trans.c (gfc_add_comp_finalizer_call): New function.\n        * trans.h (gfc_add_comp_finalizer_call): New prototype.\n        * trans-array.c (structure_alloc_comps): Call it.\n\n2013-07-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * gfortran.dg/finalize_18.f90: New.\n\nFrom-SVN: r200954", "tree": {"sha": "c083b1ac33eb85ae9db96988ef88e86c54a5427d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c083b1ac33eb85ae9db96988ef88e86c54a5427d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/895a0c2df3542769fb381f0792cb543da01229ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895a0c2df3542769fb381f0792cb543da01229ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895a0c2df3542769fb381f0792cb543da01229ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895a0c2df3542769fb381f0792cb543da01229ec/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0768ca33ac7d3331413be79cbe06930ec3bab14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0768ca33ac7d3331413be79cbe06930ec3bab14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0768ca33ac7d3331413be79cbe06930ec3bab14c"}], "stats": {"total": 185, "additions": 179, "deletions": 6}, "files": [{"sha": "f103a6dc93b3ea53bcb5dd9dfde601992eb49cb5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -1,3 +1,10 @@\n+2013-07-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* trans.c (gfc_add_comp_finalizer_call): New function.\n+\t* trans.h (gfc_add_comp_finalizer_call): New prototype.\n+\t* trans-array.c (structure_alloc_comps): Call it.\n+\n 2013-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "513c073b3c4e767aa6aaf127b7386111174bf48a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -7584,19 +7584,34 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  called_dealloc_with_status = false;\n \t  gfc_init_block (&tmpblock);\n \n-\t  if (c->attr.allocatable && (c->attr.dimension || c->attr.codimension)\n-\t      && !c->attr.proc_pointer)\n+\t  if ((c->ts.type == BT_DERIVED && !c->attr.pointer)\n+\t      || (c->ts.type == BT_CLASS && !CLASS_DATA (c)->attr.class_pointer))\n \t    {\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n+\n+\t      /* The finalizer frees allocatable components.  */\n+\t      called_dealloc_with_status\n+\t\t= gfc_add_comp_finalizer_call (&tmpblock, comp, c, true);\n+\t    }\n+\t  else\n+\t    comp = NULL_TREE;\n+\n+\t  if (c->attr.allocatable && (c->attr.dimension || c->attr.codimension)\n+\t      && !c->attr.proc_pointer)\n+\t    {\n+\t      if (comp == NULL_TREE)\n+\t\tcomp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n+\t\t\t\t\tdecl, cdecl, NULL_TREE);\n \t      tmp = gfc_trans_dealloc_allocated (comp, c->attr.codimension, NULL);\n \t      gfc_add_expr_to_block (&tmpblock, tmp);\n \t    }\n \t  else if (c->attr.allocatable)\n \t    {\n \t      /* Allocatable scalar components.  */\n-\t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n-\t\t\t\t      decl, cdecl, NULL_TREE);\n+\t      if (comp == NULL_TREE)\n+\t\tcomp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n+\t\t\t\t\tdecl, cdecl, NULL_TREE);\n \n \t      tmp = gfc_deallocate_scalar_with_status (comp, NULL, true, NULL,\n \t\t\t\t\t\t       c->ts);\n@@ -7611,10 +7626,11 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  else if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n \t    {\n \t      /* Allocatable CLASS components.  */\n-\t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n-\t\t\t\t      decl, cdecl, NULL_TREE);\n \n \t      /* Add reference to '_data' component.  */\n+\t      if (comp == NULL_TREE)\n+\t\tcomp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n+\t\t\t\t\tdecl, cdecl, NULL_TREE);\n \t      tmp = CLASS_DATA (c)->backend_decl;\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t\t      TREE_TYPE (tmp), comp, tmp, NULL_TREE);"}, {"sha": "53a0669fc778c0d62b3967ffa1e1e189d02cdacb", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -948,6 +948,102 @@ gfc_build_final_call (gfc_typespec ts, gfc_expr *final_wrapper, gfc_expr *var,\n }\n \n \n+bool\n+gfc_add_comp_finalizer_call (stmtblock_t *block, tree decl, gfc_component *comp,\n+\t\t\t     bool fini_coarray)\n+{\n+  gfc_se se;\n+  stmtblock_t block2;\n+  tree final_fndecl, size, array, tmp, cond;\n+  symbol_attribute attr;\n+  gfc_expr *final_expr = NULL;\n+\n+  if (comp->ts.type != BT_DERIVED && comp->ts.type != BT_CLASS)\n+    return false;\n+\n+  gfc_init_block (&block2);\n+\n+  if (comp->ts.type == BT_DERIVED)\n+    {\n+      if (comp->attr.pointer)\n+\treturn false;\n+\n+      gfc_is_finalizable (comp->ts.u.derived, &final_expr);\n+      if (!final_expr)\n+        return false;\n+\n+      gfc_init_se (&se, NULL);\n+      gfc_conv_expr (&se, final_expr);\n+      final_fndecl = se.expr;\n+      size = gfc_typenode_for_spec (&comp->ts);\n+      size = TYPE_SIZE_UNIT (size);\n+      size = fold_convert (gfc_array_index_type, size);\n+\n+      array = decl;\n+    }\n+  else /* comp->ts.type == BT_CLASS.  */\n+    {\n+      if (CLASS_DATA (comp)->attr.class_pointer)\n+\treturn false;\n+\n+      gfc_is_finalizable (CLASS_DATA (comp)->ts.u.derived, &final_expr);\n+      final_fndecl = gfc_vtable_final_get (decl);\n+      size = gfc_vtable_size_get (decl);\n+      array = gfc_class_data_get (decl);\n+    }\n+\n+  if (comp->attr.allocatable\n+      || (comp->ts.type == BT_CLASS && CLASS_DATA (comp)->attr.allocatable))\n+    {\n+      tmp = GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (array))\n+\t    ?  gfc_conv_descriptor_data_get (array) : array;\n+      cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t    tmp, fold_convert (TREE_TYPE (tmp),\n+\t\t\t\t\t\t null_pointer_node));\n+    }\n+  else\n+    cond = boolean_true_node;\n+\n+  if (!GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (array)))\n+    {\n+      gfc_clear_attr (&attr);\n+      gfc_init_se (&se, NULL);\n+      array = gfc_conv_scalar_to_descriptor (&se, array, attr);\n+      gfc_add_block_to_block (&block2, &se.pre);\n+      gcc_assert (se.post.head == NULL_TREE);\n+    }\n+\n+  if (!POINTER_TYPE_P (TREE_TYPE (array)))\n+    array = gfc_build_addr_expr (NULL, array);\n+\n+  if (!final_expr)\n+    {\n+      tmp = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t     final_fndecl,\n+\t\t\t     fold_convert (TREE_TYPE (final_fndecl),\n+\t\t\t\t\t   null_pointer_node));\n+      cond = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n+\t\t\t      boolean_type_node, cond, tmp);\n+    }\n+\n+  if (POINTER_TYPE_P (TREE_TYPE (final_fndecl)))\n+    final_fndecl = build_fold_indirect_ref_loc (input_location, final_fndecl);\n+\n+  tmp = build_call_expr_loc (input_location,\n+\t\t\t     final_fndecl, 3, array,\n+\t\t\t     size, fini_coarray ? boolean_true_node\n+\t\t\t\t\t\t: boolean_false_node);\n+  gfc_add_expr_to_block (&block2, tmp);\n+  tmp = gfc_finish_block (&block2);\n+\n+  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond, tmp,\n+\t\t\t build_empty_stmt (input_location));\n+  gfc_add_expr_to_block (block, tmp);\n+\n+  return true;\n+}\n+\n+\n /* Add a call to the finalizer, using the passed *expr. Returns\n    true when a finalizer call has been inserted.  */\n "}, {"sha": "424ce7aa4897f28db273c8a571d7b33be4596daf", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -353,6 +353,8 @@ tree gfc_get_vptr_from_expr (tree);\n tree gfc_get_class_array_ref (tree, tree);\n tree gfc_copy_class_to_class (tree, tree, tree);\n bool gfc_add_finalizer_call (stmtblock_t *, gfc_expr *);\n+bool gfc_add_comp_finalizer_call (stmtblock_t *, tree, gfc_component *, bool);\n+\n void gfc_conv_derived_to_class (gfc_se *, gfc_expr *, gfc_typespec, tree, bool,\n \t\t\t\tbool);\n void gfc_conv_class_to_class (gfc_se *, gfc_expr *, gfc_typespec, bool, bool,"}, {"sha": "beececce51bfa80f778eb5b7aaaedebb5d782b68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -1,3 +1,8 @@\n+2013-07-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* gfortran.dg/finalize_18.f90: New.\n+\n 2013-07-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/52669"}, {"sha": "f018ae2e19500ea77277260b1a097e449ac6a433", "filename": "gcc/testsuite/gfortran.dg/finalize_18.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895a0c2df3542769fb381f0792cb543da01229ec/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_18.f90?ref=895a0c2df3542769fb381f0792cb543da01229ec", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/37336\n+!\n+module m\n+  type t\n+  contains\n+    final :: fini\n+  end type t\n+  type t2\n+    integer :: ii\n+    type(t), allocatable :: aa\n+    type(t), allocatable :: bb(:)\n+    class(t), allocatable :: cc\n+    class(t), allocatable :: dd(:)\n+  end type t2\n+  integer, save :: cnt = -1\n+contains\n+  subroutine fini(x)\n+     type(t) :: x\n+     if (cnt == -1) call abort ()\n+     cnt = cnt + 1\n+  end subroutine fini\n+end module m\n+\n+use m\n+block\n+  type(t2) :: y\n+  y%ii = 123\n+end block\n+end\n+\n+! { dg-final { scan-tree-dump-times \"if \\\\(y.aa != 0B\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"if \\\\(y.cc._data != 0B\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"if \\\\(\\\\(struct t\\\\\\[0:\\\\\\] . restrict\\\\) y.bb.data != 0B\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"if \\\\(\\\\(struct t\\\\\\[0:\\\\\\] . restrict\\\\) y.dd._data.data != 0B\\\\)\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"desc.\\[0-9\\]+.data = \\\\(void . restrict\\\\) y.aa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"desc.\\[0-9\\]+.data = \\\\(void . restrict\\\\) y.cc._data;\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"__final_m_T \\\\(&desc.\\[0-9\\]+, 0, 1\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__final_m_T \\\\(&y.bb, 0, 1\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump \"y.cc._vptr->_final \\\\(&desc.\\[0-9\\]+, (\\\\(integer\\\\(kind=8\\\\)\\\\) )?y.cc._vptr->_size, 1\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \"y.dd._vptr->_final \\\\(&y.dd._data, (\\\\(integer\\\\(kind=8\\\\)\\\\) )?y.dd._vptr->_size, 1\\\\);\" \"original\" } }\n+\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}