{"sha": "701ee067807b80957c65bd7ff94b6099a27181de", "node_id": "C_kwDOANBUbNoAKDcwMWVlMDY3ODA3YjgwOTU3YzY1YmQ3ZmY5NGI2MDk5YTI3MTgxZGU", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-10-21T12:26:45Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-10-21T12:55:14Z"}, "message": "sra: Fix corner case of total scalarization with virtual inheritance (PR 102505)\n\nPR 102505 is a situation where of SRA takes its initial top-level\naccess size from a get_ref_base_and_extent called on a COMPONENT_REF,\nand thus derived frm the FIELD_DECL, which however does not include a\nvirtual base.  Total scalarization then goes on traversing the type,\nwhich however has virtual base past the non-virtual bits, tricking SRA\nto create sub-accesses outside of the supposedly encompassing\naccesses, which in turn triggers the verifier within the pass.\n\nThe patch below fixes that by failing total scalarization when this\nsituation is detected.\n\ngcc/ChangeLog:\n\n2021-10-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/102505\n\t* tree-sra.c (totally_scalarize_subtree): Check that the\n\tencountered field fits within the acces we would like to put it\n\tin.\n\ngcc/testsuite/ChangeLog:\n\n2021-10-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/102505\n\t* g++.dg/torture/pr102505.C: New test.", "tree": {"sha": "ae76e3e3c9e53974d5a79a43dbad25e08a7d0839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae76e3e3c9e53974d5a79a43dbad25e08a7d0839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/701ee067807b80957c65bd7ff94b6099a27181de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmFxYzIACgkQv2PBvD+k\nNUAd9xAArYe4KiTqQnK5Ap2/q94cytjMPt4s3Wlg8gk+OU/07sUS13Bl12r7GFaK\nTZVLlAUY4Qw1rFGCDwmxG1niJWjbnLBH6NvwVUZ6Xz0Iz0z0p9gyAMwwnDo832mQ\nGLAuukmFWvFI09FtVDTzDOwSrfj0FLmnT+gkbLCol2Q70q+ah7UAgI8ZcKEHexsI\ncruADKBy9LSTGeDZZVDa0A2SEi2qJjah+0ePrWxYM9P0toX3xFA+OntnjGRgyipf\nLkoUoib6lttXQStbmfQL6KFJ7M7bRLwLNU5fqmXXqvHOrfXJSX7Wmo8tv2vJxT1h\npXst17yAL5WwdgzyK/oSWQ/nI2BIVNn9fxiY4HQpW0886e4DcxYHCUxon8U3OHOR\nsW4lHEwMb9FJVv/aI1wUsfZh3iE8HyZ3ZhHpsBnlUh48ot4wOsJwz4AVWpYzizXn\nSooF0nd6biIk3ElJAGBxACbKamhHA+4q0xnd8w2gdDeYyyo4OGYCG5GrZS1LJ4EQ\n8DXj1oOvLFbi1q9LAOgGxAfAj4ElY29XIkXWUcy9I3+B2XNqi2Cle9Bc9KTrEgUa\nYCztqcU1UwjriiJgIZvs9Hpuen0W4M4w++1U+soqNd/v8PRTtubz2r3pI8gflip9\nKWFG1yFieaIRC4AzuE2XBhP4Ye7Ycb/oVUDjOyapcSWw9ID0po8=\n=1AZi\n-----END PGP SIGNATURE-----", "payload": "tree ae76e3e3c9e53974d5a79a43dbad25e08a7d0839\nparent d6a3c0cfb852dbeee4255e3588e9a1f52e376042\nauthor Martin Jambor <mjambor@suse.cz> 1634819205 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1634820914 +0200\n\nsra: Fix corner case of total scalarization with virtual inheritance (PR 102505)\n\nPR 102505 is a situation where of SRA takes its initial top-level\naccess size from a get_ref_base_and_extent called on a COMPONENT_REF,\nand thus derived frm the FIELD_DECL, which however does not include a\nvirtual base.  Total scalarization then goes on traversing the type,\nwhich however has virtual base past the non-virtual bits, tricking SRA\nto create sub-accesses outside of the supposedly encompassing\naccesses, which in turn triggers the verifier within the pass.\n\nThe patch below fixes that by failing total scalarization when this\nsituation is detected.\n\ngcc/ChangeLog:\n\n2021-10-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/102505\n\t* tree-sra.c (totally_scalarize_subtree): Check that the\n\tencountered field fits within the acces we would like to put it\n\tin.\n\ngcc/testsuite/ChangeLog:\n\n2021-10-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/102505\n\t* g++.dg/torture/pr102505.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701ee067807b80957c65bd7ff94b6099a27181de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701ee067807b80957c65bd7ff94b6099a27181de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701ee067807b80957c65bd7ff94b6099a27181de/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a3c0cfb852dbeee4255e3588e9a1f52e376042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a3c0cfb852dbeee4255e3588e9a1f52e376042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a3c0cfb852dbeee4255e3588e9a1f52e376042"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "a846751a0d6cd9a5dfe92645439ec43383b394cc", "filename": "gcc/testsuite/g++.dg/torture/pr102505.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701ee067807b80957c65bd7ff94b6099a27181de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102505.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701ee067807b80957c65bd7ff94b6099a27181de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102505.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr102505.C?ref=701ee067807b80957c65bd7ff94b6099a27181de", "patch": "@@ -0,0 +1,15 @@\n+struct D  { int i;  int pad alignas(16); };\n+struct B : virtual D\n+{\n+  int j =84;\n+  int k =84;\n+};\n+\n+struct C: B { };\n+\n+int main()\n+{\n+  C c;\n+  if (c.j != 84 || c.k != 84)\n+    __builtin_abort();\n+}"}, {"sha": "f561e1a21332f0bd530b25a77abedd5bd7344fe7", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701ee067807b80957c65bd7ff94b6099a27181de/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701ee067807b80957c65bd7ff94b6099a27181de/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=701ee067807b80957c65bd7ff94b6099a27181de", "patch": "@@ -3288,6 +3288,8 @@ totally_scalarize_subtree (struct access *root)\n \t      continue;\n \n \t    HOST_WIDE_INT pos = root->offset + int_bit_position (fld);\n+\t    if (pos + fsize > root->size)\n+\t      return false;\n \t    enum total_sra_field_state\n \t      state = total_should_skip_creating_access (root,\n \t\t\t\t\t\t\t &last_seen_sibling,"}]}