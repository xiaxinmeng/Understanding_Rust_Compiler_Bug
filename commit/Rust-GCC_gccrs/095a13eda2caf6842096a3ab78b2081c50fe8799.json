{"sha": "095a13eda2caf6842096a3ab78b2081c50fe8799", "node_id": "C_kwDOANBUbNoAKDA5NWExM2VkYTJjYWY2ODQyMDk2YTNhYjc4YjIwODFjNTBmZTg3OTk", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-12-13T23:33:05Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-12-13T23:58:04Z"}, "message": "ipa-cp: Leave removal of unused parameters to IPA-SRA\n\nLooking at some benchmarks I have noticed many cases when IPA-CP\ncloned a function for all contexts just because it knew that some\nparameters were not used at all.  Then IPA-SRA looked at the function\nand cloned it again to split another parameter or two.  The latter\npass is better equipped to detect when parameters can be altogether\nremoved and so the IPA-CP cloning was for no good reason.\n\nThis patch simply alters the IPA-CP not to do that in the situations\nwhere IPA-SRA can (for nodes which can be made local) with additional\ndumping requested by Honza.\n\ngcc/ChangeLog:\n\n2022-12-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.cc (clone_for_param_removal_p): New function.\n\t(estimate_local_effects): Call it before considering cloning\n\tjust to remove unused parameters.", "tree": {"sha": "73a562808c17c1eead358c859b570fade212cae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a562808c17c1eead358c859b570fade212cae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/095a13eda2caf6842096a3ab78b2081c50fe8799", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmOZEYwACgkQv2PBvD+k\nNUCNAxAAh2PhfH8qEpbwrF/4t8xVas1Faa/gMLFA/D5PPTifxTvrjkeWoJjEDt1c\nsppqmO6NHmnoyPKvPBheolppZmgW2oKTej3Y794oLy6NUF9UW8qRad0pzeT0qb7O\nfe8ycVi+wYW3scVLXuHj3X1RLonMCAgcTAoRik4/CLP0y7vnhE4qtHp1f47O+WMX\n/yJbvFTZa6gNxh6Tgk7BQHCMqUhHq9e0aeJFa8olaL1zEIohgfVwowLXny4A9CNS\nqsL4QpwZ8/0+R7681/DPteMl/eiKv8bcM0/06HOATtbK+WGN/8atFtah6Nr0vJO3\nwSzE4uP65i9tn0fGPdNxBJPDHcA0yhPxYSrweesT7a/H14kt9ryK4v+xgt07QM8y\nE0M7FQKg0RtDLM/fhewmNajxXdBFUgtTHb7/l9jJDFMHyFhdEf5A5ETE3en3oJGA\nmegt/0lXW3hfCS0rpSe2vJ6yvDb4YkHWyyA1NU8IxTudsRGE4ETTYa7r48M4hHv6\nYq7JwrZJkpMxVtX88fULgmN9xcnY6iV/bLdi1I+5ABCDkxIRdWIhUklIiav7Ohaa\nxCC6l9yOMBN5Ffj2hV9GCbSib/zaZtZLmnRpaWxainIpMleDEr2xTtWwEuDtT0zR\nzmwncldGJTJAiHSFylf3RlobzH84UcsXGT2XQj9k8Ia6WK1Jcjw=\n=NxEr\n-----END PGP SIGNATURE-----", "payload": "tree 73a562808c17c1eead358c859b570fade212cae8\nparent 4834e9360f7bf42fbeabaa20de5619e67c9fee4e\nauthor Martin Jambor <mjambor@suse.cz> 1670974385 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1670975884 +0100\n\nipa-cp: Leave removal of unused parameters to IPA-SRA\n\nLooking at some benchmarks I have noticed many cases when IPA-CP\ncloned a function for all contexts just because it knew that some\nparameters were not used at all.  Then IPA-SRA looked at the function\nand cloned it again to split another parameter or two.  The latter\npass is better equipped to detect when parameters can be altogether\nremoved and so the IPA-CP cloning was for no good reason.\n\nThis patch simply alters the IPA-CP not to do that in the situations\nwhere IPA-SRA can (for nodes which can be made local) with additional\ndumping requested by Honza.\n\ngcc/ChangeLog:\n\n2022-12-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.cc (clone_for_param_removal_p): New function.\n\t(estimate_local_effects): Call it before considering cloning\n\tjust to remove unused parameters.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095a13eda2caf6842096a3ab78b2081c50fe8799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095a13eda2caf6842096a3ab78b2081c50fe8799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095a13eda2caf6842096a3ab78b2081c50fe8799/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4834e9360f7bf42fbeabaa20de5619e67c9fee4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4834e9360f7bf42fbeabaa20de5619e67c9fee4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4834e9360f7bf42fbeabaa20de5619e67c9fee4e"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "300bec54bbdee4a3876ef25901e34260949e1cb9", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/095a13eda2caf6842096a3ab78b2081c50fe8799/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/095a13eda2caf6842096a3ab78b2081c50fe8799/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=095a13eda2caf6842096a3ab78b2081c50fe8799", "patch": "@@ -3700,6 +3700,29 @@ get_max_overall_size (cgraph_node *node)\n   return max_new_size;\n }\n \n+/* Return true if NODE should be cloned just for a parameter removal, possibly\n+   dumping a reason if not.  */\n+\n+static bool\n+clone_for_param_removal_p (cgraph_node *node)\n+{\n+  if (!node->can_change_signature)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"  Not considering cloning to remove parameters, \"\n+\t\t \"function cannot change signature.\\n\");\n+      return false;\n+    }\n+  if (node->can_be_local_p ())\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"  Not considering cloning to remove parameters, \"\n+\t\t \"IPA-SRA can do it potentially better.\\n\");\n+      return false;\n+    }\n+  return true;\n+}\n+\n /* Iterate over known values of parameters of NODE and estimate the local\n    effects in terms of time and size they have.  */\n \n@@ -3722,7 +3745,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t\t\t\t\t    &removable_params_cost);\n   int devirt_bonus = devirtualization_time_bonus (node, &avals);\n   if (always_const || devirt_bonus\n-      || (removable_params_cost && node->can_change_signature))\n+      || (removable_params_cost && clone_for_param_removal_p (node)))\n     {\n       struct caller_statistics stats;\n       ipa_call_estimates estimates;"}]}