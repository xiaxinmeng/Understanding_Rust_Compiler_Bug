{"sha": "a916d97fc0c647034e9330b00349ad8145bf3157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxNmQ5N2ZjMGM2NDcwMzRlOTMzMGIwMDM0OWFkODE0NWJmMzE1Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-04-20T17:45:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-04-20T17:45:15Z"}, "message": "cp-tree.h (base_access): Change typedef to int.\n\n\t* cp-tree.h (base_access): Change typedef to int.\n\t* parser.c (cp_parser_omp_flush): Change 0 to OMP_CLAUSE_ERROR.\n\t(cp_parser_omp_threadprivate): Likewise.\n\t* pt.c (unify_pack_expansion): Add casts to enum type.\n\nFrom-SVN: r146448", "tree": {"sha": "acedc88c99992164ead5ec0d2e6eca33991eb7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acedc88c99992164ead5ec0d2e6eca33991eb7d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a916d97fc0c647034e9330b00349ad8145bf3157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a916d97fc0c647034e9330b00349ad8145bf3157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a916d97fc0c647034e9330b00349ad8145bf3157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a916d97fc0c647034e9330b00349ad8145bf3157/comments", "author": null, "committer": null, "parents": [{"sha": "77022fa8734fdd0b5ac892ba109b77e0ec7dd13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77022fa8734fdd0b5ac892ba109b77e0ec7dd13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77022fa8734fdd0b5ac892ba109b77e0ec7dd13b"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "dbbea2d8bca8f4d06521c910203d3c5cb56d36fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a916d97fc0c647034e9330b00349ad8145bf3157", "patch": "@@ -1,3 +1,10 @@\n+2009-04-20  Ian Lance Taylor  <iant@google.com>\n+\n+\t* cp-tree.h (base_access): Change typedef to int.\n+\t* parser.c (cp_parser_omp_flush): Change 0 to OMP_CLAUSE_ERROR.\n+\t(cp_parser_omp_threadprivate): Likewise.\n+\t* pt.c (unify_pack_expansion): Add casts to enum type.\n+\n 2009-04-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/32061"}, {"sha": "c96e5759502cb72565187bcf3430c54d5d8665e8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a916d97fc0c647034e9330b00349ad8145bf3157", "patch": "@@ -3592,15 +3592,19 @@ enum tsubst_flags {\n typedef int tsubst_flags_t;\n \n /* The kind of checking we can do looking in a class hierarchy.  */\n-typedef enum base_access {\n+enum base_access {\n   ba_any = 0,  /* Do not check access, allow an ambiguous base,\n \t\t      prefer a non-virtual base */\n   ba_unique = 1 << 0,  /* Must be a unique base.  */\n   ba_check_bit = 1 << 1,   /* Check access.  */\n   ba_check = ba_unique | ba_check_bit,\n   ba_ignore_scope = 1 << 2, /* Ignore access allowed by local scope.  */\n   ba_quiet = 1 << 3     /* Do not issue error messages.  */\n-} base_access;\n+};\n+\n+/* This type is used for parameters and variables which hold\n+   combinations of the flags in enum base_access.  */\n+typedef int base_access;\n \n /* The various kinds of access check during parsing.  */\n typedef enum deferring_kind {"}, {"sha": "b6400332245f91961bd852475d91148390880761", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a916d97fc0c647034e9330b00349ad8145bf3157", "patch": "@@ -21043,7 +21043,7 @@ static void\n cp_parser_omp_flush (cp_parser *parser, cp_token *pragma_tok)\n {\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n-    (void) cp_parser_omp_var_list (parser, 0, NULL);\n+    (void) cp_parser_omp_var_list (parser, OMP_CLAUSE_ERROR, NULL);\n   cp_parser_require_pragma_eol (parser, pragma_tok);\n \n   finish_omp_flush ();\n@@ -21884,7 +21884,7 @@ cp_parser_omp_threadprivate (cp_parser *parser, cp_token *pragma_tok)\n {\n   tree vars;\n \n-  vars = cp_parser_omp_var_list (parser, 0, NULL);\n+  vars = cp_parser_omp_var_list (parser, OMP_CLAUSE_ERROR, NULL);\n   cp_parser_require_pragma_eol (parser, pragma_tok);\n \n   finish_omp_threadprivate (vars);"}, {"sha": "2ee3d18c39bd4c90e85f55af641d2095c25f3f41", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916d97fc0c647034e9330b00349ad8145bf3157/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a916d97fc0c647034e9330b00349ad8145bf3157", "patch": "@@ -13131,7 +13131,9 @@ unify_pack_expansion (tree tparms, tree targs, tree packed_parms,\n                        match.  */\n \n                     if (resolve_overloaded_unification\n-                        (tparms, targs, parm, arg, strict, sub_strict)\n+                        (tparms, targs, parm, arg,\n+\t\t\t (unification_kind_t) strict,\n+\t\t\t sub_strict)\n                         != 0)\n                       return 1;\n                     skip_arg_p = true;\n@@ -13150,8 +13152,8 @@ unify_pack_expansion (tree tparms, tree targs, tree packed_parms,\n \n             if (!subr)\n               arg_strict |= \n-                maybe_adjust_types_for_deduction (strict, &parm, &arg, \n-\t\t\t\t\t\t  arg_expr);\n+                maybe_adjust_types_for_deduction ((unification_kind_t) strict,\n+\t\t\t\t\t\t  &parm, &arg, arg_expr);\n           }\n \n         if (!skip_arg_p)"}]}