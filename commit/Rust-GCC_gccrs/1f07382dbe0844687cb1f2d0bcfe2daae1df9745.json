{"sha": "1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwNzM4MmRiZTA4NDQ2ODdjYjFmMmQwYmNmZTJkYWFlMWRmOTc0NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:43:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:43:58Z"}, "message": "[multiple changes]\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatchop.adb (BOM_Length): New global variable\n\t(Write_Unit): Add new parameter Write_BOM\n\t(Write_Chopped_Files): Check for BOM and set Write_BOM for call\n\tto Write_Unit\n\n\t* gnat_ugn.texi: Add note on propagation of BOM by gnatchop\n\n2009-04-15  Geert Bosch  <bosch@adacore.com>\n\n\t* system-mingw-x86_64.ads, system-darwin-x86_64.ads\n\t(Backend_Overflow_Checks): Set to True.\n\n2009-04-15  Gary Dismukes  <dismukes@adacore.com>\n\n\t* par-ch3.adb (P_Type_Declaration): Issue an error if the synchronized\n\tkeyword is given in a record extension.\n\n2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Expand_Ctrl_Function_Call): Procede with the expansion\n\tof a controlled function call in the context of a record aggregate.\n\tThis does not apply to array aggregates since the call will be expanded\n\tinto assignments.\n\n2009-04-15  Ed Falis  <falis@adacore.com>\n\n\t* s-osinte-vxworks-kernel.adb, s-osinte-vxworks.adb,\n\ts-osinte-vxworks.ads s-vxwext.ads, s-vxwext-kernel.adb,\n\ts-vxwext-kernel.ads: Reorganize s-osinte-vxworks* and s-vxwext*.\n\nFrom-SVN: r146108", "tree": {"sha": "384f96baae68288a3efecddd80744a86175fa651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/384f96baae68288a3efecddd80744a86175fa651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/comments", "author": null, "committer": null, "parents": [{"sha": "6cc60200ce2b97d6ee4713b5924cffd09ce1cca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc60200ce2b97d6ee4713b5924cffd09ce1cca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc60200ce2b97d6ee4713b5924cffd09ce1cca6"}], "stats": {"total": 546, "additions": 235, "deletions": 311}, "files": [{"sha": "4a332504eb7e5aac809971447f1c73a52ceff920", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -1,3 +1,35 @@\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatchop.adb (BOM_Length): New global variable\n+\t(Write_Unit): Add new parameter Write_BOM\n+\t(Write_Chopped_Files): Check for BOM and set Write_BOM for call\n+\tto Write_Unit\n+\n+\t* gnat_ugn.texi: Add note on propagation of BOM by gnatchop\n+\n+2009-04-15  Geert Bosch  <bosch@adacore.com>\n+\n+\t* system-mingw-x86_64.ads, system-darwin-x86_64.ads\n+\t(Backend_Overflow_Checks): Set to True.\n+\n+2009-04-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* par-ch3.adb (P_Type_Declaration): Issue an error if the synchronized\n+\tkeyword is given in a record extension.\n+\n+2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_Ctrl_Function_Call): Procede with the expansion\n+\tof a controlled function call in the context of a record aggregate.\n+\tThis does not apply to array aggregates since the call will be expanded\n+\tinto assignments.\n+\n+2009-04-15  Ed Falis  <falis@adacore.com>\n+\n+\t* s-osinte-vxworks-kernel.adb, s-osinte-vxworks.adb,\n+\ts-osinte-vxworks.ads s-vxwext.ads, s-vxwext-kernel.adb,\n+\ts-vxwext-kernel.ads: Reorganize s-osinte-vxworks* and s-vxwext*.\n+\n 2009-04-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies."}, {"sha": "23170bc0e9e4f6cae769c8dc27a9885a2b10b131", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -1404,12 +1404,14 @@ package body Exp_Ch7 is\n \n       --    Attach_To_Final_List (_Lx, Resx (Resx'last)._controller, 3);\n \n-      --  If the context is an aggregate, the call will be expanded into an\n-      --  assignment, and the attachment will be done when the aggregate\n+      --  If the context is an array aggregate, the call will be expanded into\n+      --  an assignment, and the attachment will be done when the aggregate\n       --  expansion is complete. See body of Exp_Aggr for the treatment of\n       --  other controlled components.\n \n-      if Nkind (Parent (N)) = N_Aggregate then\n+      if Nkind (Parent (N)) = N_Aggregate\n+        and then Is_Array_Type (Etype (Parent (N)))\n+      then\n          return;\n       end if;\n \n@@ -1424,10 +1426,10 @@ package body Exp_Ch7 is\n             if Is_Array_Type (T2) then\n                Len_Ref :=\n                  Make_Attribute_Reference (Loc,\n-                 Prefix =>\n-                   Duplicate_Subexpr_Move_Checks\n-                     (Unchecked_Convert_To (T2, Ref)),\n-                 Attribute_Name => Name_Length);\n+                   Prefix =>\n+                     Duplicate_Subexpr_Move_Checks\n+                       (Unchecked_Convert_To (T2, Ref)),\n+                   Attribute_Name => Name_Length);\n             end if;\n \n             while Is_Array_Type (T2) loop"}, {"sha": "d45ee0fa858c9eea3c4287025b21023aa87781d8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -10702,6 +10702,11 @@ system, you can set up a procedure where you use @command{gnatchop} each\n time you compile, regarding the source files that it writes as temporary\n files that you throw away.\n \n+Note that if your file containing multiple units starts with a byte order\n+mark (BOM) specifying UTF-8 encoding, then the files generated by gnatchop\n+will each start with a copy of this BOM, meaning that they can be compiled\n+automatically in UTF-8 mode without needing to specify an explicit encoding.\n+\n @node Operating gnatchop in Compilation Mode\n @section Operating gnatchop in Compilation Mode\n "}, {"sha": "ec32c073d56cce87f72504968973a20d90c765c6", "filename": "gcc/ada/gnatchop.adb", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fgnatchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fgnatchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatchop.adb?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -30,13 +30,14 @@ with Ada.Streams.Stream_IO;      use Ada.Streams;\n with Ada.Text_IO;                use Ada.Text_IO;\n with System.CRTL;                use System; use System.CRTL;\n \n+with GNAT.Byte_Order_Mark;       use GNAT.Byte_Order_Mark;\n with GNAT.Command_Line;          use GNAT.Command_Line;\n with GNAT.OS_Lib;                use GNAT.OS_Lib;\n with GNAT.Heap_Sort_G;\n with GNAT.Table;\n \n with Hostparm;\n-with Switch;   use Switch;\n+with Switch;                     use Switch;\n with Types;\n \n procedure Gnatchop is\n@@ -67,6 +68,9 @@ procedure Gnatchop is\n    --  but properly treated if present. Not generated in output files except\n    --  as a result of copying input file.\n \n+   BOM_Length : Natural := 0;\n+   --  Reset to non-zero value if BOM detected at start of file\n+\n    --------------------\n    -- File arguments --\n    --------------------\n@@ -323,11 +327,15 @@ procedure Gnatchop is\n    --  of line sequence to be written at the end of the pragma.\n \n    procedure Write_Unit\n-     (Source  : not null access String;\n-      Num     : Unit_Num;\n-      TS_Time : OS_Time;\n-      Success : out Boolean);\n-   --  Write one compilation unit of the source to file\n+     (Source    : not null access String;\n+      Num       : Unit_Num;\n+      TS_Time   : OS_Time;\n+      Write_BOM : Boolean;\n+      Success   : out Boolean);\n+   --  Write one compilation unit of the source to file. Source is the pointer\n+   --  to the input string, Num is the unit number, TS_Time is the timestamp,\n+   --  Write_BOM is set True to write a UTF-8 BOM at the start of the file.\n+   --  Success is set True unless the write attempt fails.\n \n    ---------\n    -- dup --\n@@ -1426,6 +1434,10 @@ procedure Gnatchop is\n       Success : Boolean;\n       TS_Time : OS_Time;\n \n+      BOM_Present : Boolean;\n+      BOM         : BOM_Kind;\n+      --  Record presence of UTF8 BOM in input\n+\n    begin\n       FD := Open_Read (Name'Address, Binary);\n       TS_Time := File_Time_Stamp (FD);\n@@ -1447,11 +1459,21 @@ procedure Gnatchop is\n          Put_Line (\"splitting \" & File.Table (Input).Name.all & \" into:\");\n       end if;\n \n+      --  Test for presence of BOM\n+\n+      Read_BOM (Buffer.all, BOM_Length, BOM, False);\n+      BOM_Present := BOM /= Unknown;\n+\n       --  Only chop those units that come from this file\n \n-      for Num in 1 .. Unit.Last loop\n-         if Unit.Table (Num).Chop_File = Input then\n-            Write_Unit (Buffer, Num, TS_Time, Success);\n+      for Unit_Number in 1 .. Unit.Last loop\n+         if Unit.Table (Unit_Number).Chop_File = Input then\n+            Write_Unit\n+              (Source    => Buffer,\n+               Num       => Unit_Number,\n+               TS_Time   => TS_Time,\n+               Write_BOM => BOM_Present and then Unit_Number /= 1,\n+               Success   => Success);\n             exit when not Success;\n          end if;\n       end loop;\n@@ -1613,10 +1635,11 @@ procedure Gnatchop is\n    ----------------\n \n    procedure Write_Unit\n-     (Source  : not null access String;\n-      Num     : Unit_Num;\n-      TS_Time : OS_Time;\n-      Success : out Boolean)\n+     (Source    : not null access String;\n+      Num       : Unit_Num;\n+      TS_Time   : OS_Time;\n+      Write_BOM : Boolean;\n+      Success   : out Boolean)\n    is\n \n       procedure OS_Filename\n@@ -1695,6 +1718,14 @@ procedure Gnatchop is\n             Length := Info.Length;\n          end if;\n \n+         --  Write BOM if required\n+\n+         if Write_BOM then\n+            String'Write\n+              (Stream_IO.Stream (File),\n+               Source.all (Source'First .. Source'First + BOM_Length - 1));\n+         end if;\n+\n          --  Prepend configuration pragmas if necessary\n \n          if Success and then Info.Bufferg /= null then"}, {"sha": "b90e08406528f7c9634064a1b316c2ed5c096b0d", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -763,7 +763,16 @@ package body Ch3 is\n                      Typedef_Node := P_Derived_Type_Def_Or_Private_Ext_Decl;\n \n                      if Saved_Token = Tok_Synchronized then\n-                        Set_Synchronized_Present (Typedef_Node);\n+                        if Nkind (Typedef_Node) =\n+                          N_Derived_Type_Definition\n+                        then\n+                           Error_Msg_N\n+                             (\"SYNCHRONIZED not allowed for record extension\",\n+                              Typedef_Node);\n+                        else\n+                           Set_Synchronized_Present (Typedef_Node);\n+                        end if;\n+\n                      else\n                         Error_Msg_SC (\"invalid kind of private extension\");\n                      end if;"}, {"sha": "6512396aff75a5a94ee5d9486b8d4baabec66c9a", "filename": "gcc/ada/s-osinte-vxworks-kernel.adb", "status": "removed", "additions": 0, "deletions": 249, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc60200ce2b97d6ee4713b5924cffd09ce1cca6/gcc%2Fada%2Fs-osinte-vxworks-kernel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc60200ce2b97d6ee4713b5924cffd09ce1cca6/gcc%2Fada%2Fs-osinte-vxworks-kernel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks-kernel.adb?ref=6cc60200ce2b97d6ee4713b5924cffd09ce1cca6", "patch": "@@ -1,249 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n---                                                                          --\n---                   S Y S T E M . O S _ I N T E R F A C E                  --\n---                                                                          --\n---                                   B o d y                                --\n---                                                                          --\n---         Copyright (C) 1997-2009, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks version\n-\n---  This package encapsulates all direct interfaces to OS services that are\n---  needed by children of System.\n-\n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n-package body System.OS_Interface is\n-\n-   use type Interfaces.C.int;\n-\n-   Low_Priority : constant := 255;\n-   --  VxWorks native (default) lowest scheduling priority\n-\n-   ----------\n-   -- kill --\n-   ----------\n-\n-   function kill (pid : t_id; sig : Signal) return int is\n-   begin\n-      return System.VxWorks.Ext.kill (pid, int (sig));\n-   end kill;\n-\n-   -------------\n-   -- sigwait --\n-   -------------\n-\n-   function sigwait\n-     (set : access sigset_t;\n-      sig : access Signal) return int\n-   is\n-      Result : int;\n-\n-      function sigwaitinfo\n-        (set : access sigset_t; sigvalue : System.Address) return int;\n-      pragma Import (C, sigwaitinfo, \"sigwaitinfo\");\n-\n-   begin\n-      Result := sigwaitinfo (set, System.Null_Address);\n-\n-      if Result /= -1 then\n-         sig.all := Signal (Result);\n-         return 0;\n-      else\n-         sig.all := 0;\n-         return errno;\n-      end if;\n-   end sigwait;\n-\n-   -----------------\n-   -- To_Duration --\n-   -----------------\n-\n-   function To_Duration (TS : timespec) return Duration is\n-   begin\n-      return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;\n-   end To_Duration;\n-\n-   -----------------\n-   -- To_Timespec --\n-   -----------------\n-\n-   function To_Timespec (D : Duration) return timespec is\n-      S : time_t;\n-      F : Duration;\n-\n-   begin\n-      S := time_t (Long_Long_Integer (D));\n-      F := D - Duration (S);\n-\n-      --  If F is negative due to a round-up, adjust for positive F value\n-\n-      if F < 0.0 then\n-         S := S - 1;\n-         F := F + 1.0;\n-      end if;\n-\n-      return timespec'(ts_sec  => S,\n-                       ts_nsec => long (Long_Long_Integer (F * 10#1#E9)));\n-   end To_Timespec;\n-\n-   -------------------------\n-   -- To_VxWorks_Priority --\n-   -------------------------\n-\n-   function To_VxWorks_Priority (Priority : int) return int is\n-   begin\n-      return Low_Priority - Priority;\n-   end To_VxWorks_Priority;\n-\n-   --------------------\n-   -- To_Clock_Ticks --\n-   --------------------\n-\n-   --  ??? - For now, we'll always get the system clock rate since it is\n-   --  allowed to be changed during run-time in VxWorks. A better method would\n-   --  be to provide an operation to set it that so we can always know its\n-   --  value.\n-\n-   --  Another thing we should probably allow for is a resultant tick count\n-   --  greater than int'Last. This should probably be a procedure with two\n-   --  output parameters, one in the range 0 .. int'Last, and another\n-   --  representing the overflow count.\n-\n-   function To_Clock_Ticks (D : Duration) return int is\n-      Ticks          : Long_Long_Integer;\n-      Rate_Duration  : Duration;\n-      Ticks_Duration : Duration;\n-\n-   begin\n-      if D < 0.0 then\n-         return -1;\n-      end if;\n-\n-      --  Ensure that the duration can be converted to ticks\n-      --  at the current clock tick rate without overflowing.\n-\n-      Rate_Duration := Duration (sysClkRateGet);\n-\n-      if D > (Duration'Last / Rate_Duration) then\n-         Ticks := Long_Long_Integer (int'Last);\n-      else\n-         Ticks_Duration := D * Rate_Duration;\n-         Ticks := Long_Long_Integer (Ticks_Duration);\n-\n-         if Ticks_Duration > Duration (Ticks) then\n-            Ticks := Ticks + 1;\n-         end if;\n-\n-         if Ticks > Long_Long_Integer (int'Last) then\n-            Ticks := Long_Long_Integer (int'Last);\n-         end if;\n-      end if;\n-\n-      return int (Ticks);\n-   end To_Clock_Ticks;\n-\n-   -----------------------------\n-   -- Binary_Semaphore_Create --\n-   -----------------------------\n-\n-   function Binary_Semaphore_Create return Binary_Semaphore_Id is\n-   begin\n-      return Binary_Semaphore_Id (semBCreate (SEM_Q_FIFO, SEM_EMPTY));\n-   end Binary_Semaphore_Create;\n-\n-   -----------------------------\n-   -- Binary_Semaphore_Delete --\n-   -----------------------------\n-\n-   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id) return int is\n-   begin\n-      return semDelete (SEM_ID (ID));\n-   end Binary_Semaphore_Delete;\n-\n-   -----------------------------\n-   -- Binary_Semaphore_Obtain --\n-   -----------------------------\n-\n-   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id) return int is\n-   begin\n-      return semTake (SEM_ID (ID), WAIT_FOREVER);\n-   end Binary_Semaphore_Obtain;\n-\n-   ------------------------------\n-   -- Binary_Semaphore_Release --\n-   ------------------------------\n-\n-   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id) return int is\n-   begin\n-      return semGive (SEM_ID (ID));\n-   end Binary_Semaphore_Release;\n-\n-   ----------------------------\n-   -- Binary_Semaphore_Flush --\n-   ----------------------------\n-\n-   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return int is\n-   begin\n-      return semFlush (SEM_ID (ID));\n-   end Binary_Semaphore_Flush;\n-\n-   -----------------------\n-   -- Interrupt_Connect --\n-   -----------------------\n-\n-   function Interrupt_Connect\n-     (Vector    : Interrupt_Vector;\n-      Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int\n-   is\n-      function intConnect\n-        (vector    : Interrupt_Vector;\n-         handler   : Interrupt_Handler;\n-         parameter : System.Address) return int;\n-      pragma Import (C, intConnect, \"intConnect\");\n-\n-   begin\n-      return intConnect (Vector, Handler, Parameter);\n-   end Interrupt_Connect;\n-\n-   --------------------------------\n-   -- Interrupt_Number_To_Vector --\n-   --------------------------------\n-\n-   function Interrupt_Number_To_Vector\n-     (intNum : int) return Interrupt_Vector\n-   is\n-      function INUM_TO_IVEC (intNum : int) return Interrupt_Vector;\n-      pragma Import (C, INUM_TO_IVEC, \"__gnat_inum_to_ivec\");\n-\n-   begin\n-      return INUM_TO_IVEC (intNum);\n-   end Interrupt_Number_To_Vector;\n-\n-end System.OS_Interface;"}, {"sha": "c53cce259f7e3975354d7c80b39c0b899ca1c157", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -45,15 +45,6 @@ package body System.OS_Interface is\n    Low_Priority : constant := 255;\n    --  VxWorks native (default) lowest scheduling priority\n \n-   ----------\n-   -- kill --\n-   ----------\n-\n-   function kill (pid : t_id; sig : Signal) return int is\n-   begin\n-      return System.VxWorks.Ext.kill (pid, int (sig));\n-   end kill;\n-\n    -------------\n    -- sigwait --\n    -------------\n@@ -73,7 +64,7 @@ package body System.OS_Interface is\n \n       if Result /= -1 then\n          sig.all := Signal (Result);\n-         return 0;\n+         return OK;\n       else\n          sig.all := 0;\n          return errno;\n@@ -142,7 +133,7 @@ package body System.OS_Interface is\n \n    begin\n       if D < 0.0 then\n-         return -1;\n+         return ERROR;\n       end if;\n \n       --  Ensure that the duration can be converted to ticks\n@@ -213,18 +204,29 @@ package body System.OS_Interface is\n       return semFlush (SEM_ID (ID));\n    end Binary_Semaphore_Flush;\n \n+   ----------\n+   -- kill --\n+   ----------\n+\n+   function kill (pid : t_id; sig : Signal) return int is\n+   begin\n+      return System.VxWorks.Ext.kill (pid, int (sig));\n+   end kill;\n+\n    -----------------------\n    -- Interrupt_Connect --\n    -----------------------\n \n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int\n-   is\n-      pragma Unreferenced (Vector, Handler, Parameter);\n+      Parameter : System.Address := System.Null_Address) return int is\n    begin\n-      return 0;\n+      return\n+        System.VxWorks.Ext.Interrupt_Connect\n+        (System.VxWorks.Ext.Interrupt_Vector (Vector),\n+         System.VxWorks.Ext.Interrupt_Handler (Handler),\n+         Parameter);\n    end Interrupt_Connect;\n \n    --------------------------------\n@@ -234,7 +236,8 @@ package body System.OS_Interface is\n    function Interrupt_Number_To_Vector\n      (intNum : int) return Interrupt_Vector is\n    begin\n-      return Interrupt_Vector (intNum);\n+      return Interrupt_Vector\n+        (System.VxWorks.Ext.Interrupt_Number_To_Vector (intNum));\n    end Interrupt_Number_To_Vector;\n \n end System.OS_Interface;"}, {"sha": "c295b19b0b444d3a233519856392757023c5ed71", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the VxWorks 5.x and 6.x version of this package\n+--  This is the VxWorks version of this package\n \n --  This package encapsulates all direct interfaces to OS services\n --  that are needed by the tasking run-time (libgnarl).\n@@ -72,7 +72,7 @@ package System.OS_Interface is\n    FUNC_ERR  : constant := -1;\n \n    ----------------------------\n-   -- Signals and Interrupts --\n+   -- Signals and interrupts --\n    ----------------------------\n \n    NSIG : constant := 64;\n@@ -304,6 +304,8 @@ package System.OS_Interface is\n    pragma Import (C, sysClkRateGet, \"sysClkRateGet\");\n \n    --  VxWorks 5.x specific functions\n+   --  Must not be called from run-time for versions that do not support\n+   --  taskVarLib: eg VxWorks 6 RTPs\n \n    function taskVarAdd\n      (tid : t_id; pVar : access System.Address) return int;\n@@ -325,6 +327,8 @@ package System.OS_Interface is\n    pragma Import (C, taskVarGet, \"taskVarGet\");\n \n    --  VxWorks 6.x specific functions\n+   --  Can only be called from the VxWorks 6 run-time libary that supports\n+   --  tlsLib, and not by the VxWorks 6.6 SMP library\n \n    function tlsKeyCreate return int;\n    pragma Import (C, tlsKeyCreate, \"tlsKeyCreate\");\n@@ -364,8 +368,8 @@ package System.OS_Interface is\n \n    function Set_Time_Slice (ticks : int) return int\n      renames System.VxWorks.Ext.Set_Time_Slice;\n-   --  Calls kernelTimeSlice under VxWorks 5.x\n-   --  Do nothing under VxWorks 6.x\n+   --  Calls kernelTimeSlice under VxWorks 5.x, VxWorks 653, or in VxWorks 6\n+   --  kernel apps. Returns ERROR for RTPs, VxWorks 5 /CERT\n \n    function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n    pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n@@ -433,7 +437,7 @@ package System.OS_Interface is\n    --  Release all threads blocked on the semaphore\n \n    ------------------------------------------------------------\n-   --   Binary Semaphore Wrapper to Support Interrupt Tasks  --\n+   --   Binary Semaphore Wrapper to Support interrupt Tasks  --\n    ------------------------------------------------------------\n \n    type Binary_Semaphore_Id is new Long_Integer;\n@@ -468,7 +472,7 @@ package System.OS_Interface is\n       Parameter : System.Address := System.Null_Address) return int;\n    pragma Inline (Interrupt_Connect);\n    --  Use this to set up an user handler. The routine installs a\n-   --  a user handler which is invoked after RTEMS has saved enough\n+   --  a user handler which is invoked after the OS has saved enough\n    --  context for a high-level language routine to be safely invoked.\n \n    function Interrupt_Number_To_Vector (intNum : int) return Interrupt_Vector;"}, {"sha": "8f55c4d41a4d1fb56af68ddf28c4989494ac910c", "filename": "gcc/ada/s-vxwext-kernel.adb", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext-kernel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext-kernel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.adb?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                     S Y S T E M . V X W O R K S . E X T                  --\n+--                                                                          --\n+--                                   B o d y                                --\n+--                                                                          --\n+--            Copyright (C) 2008-2009, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNARL is free software;  you can redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides vxworks specific support functions needed\n+--  by System.OS_Interface.\n+\n+--  This is the VxWorks <= 6.5 kernel version of this package\n+--  Also works for 6.6 uniprocessor\n+\n+package body System.VxWorks.Ext is\n+\n+   ERROR : constant := -1;\n+\n+   --------------\n+   -- Int_Lock --\n+   --------------\n+\n+   function intLock return int;\n+   pragma Import (C, intLock, \"intLock\");\n+\n+   function Int_Lock return int renames intLock;\n+\n+   ----------------\n+   -- Int_Unlock --\n+   ----------------\n+\n+   function intUnlock return int;\n+   pragma Import (C, intUnlock, \"intUnlock\");\n+\n+   function Int_Unlock return int renames intUnlock;\n+\n+end System.VxWorks.Ext;"}, {"sha": "b0008e8e3e7b5597eafc35e0511f5b47e114ec83", "filename": "gcc/ada/s-vxwext-kernel.ads", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext-kernel.ads?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -39,25 +39,40 @@ package System.VxWorks.Ext is\n    type t_id is new Long_Integer;\n    subtype int is Interfaces.C.int;\n \n-   function Task_Cont (tid : t_id) return int;\n-   pragma Import (C, Task_Cont, \"taskCont\");\n+   type Interrupt_Handler is access procedure (parameter : System.Address);\n+   pragma Convention (C, Interrupt_Handler);\n \n-   function Task_Stop (tid : t_id) return int;\n-   pragma Import (C, Task_Stop, \"taskStop\");\n+   type Interrupt_Vector is new System.Address;\n \n    function Int_Lock return int;\n-   pragma Import (C, Int_Lock, \"intLock\");\n+   pragma Inline (Int_Lock);\n \n    function Int_Unlock return int;\n-   pragma Import (C, Int_Unlock, \"intUnlock\");\n+   pragma Inline (Int_Unlock);\n+\n+   function Interrupt_Connect\n+     (Vector    : Interrupt_Vector;\n+      Handler   : Interrupt_Handler;\n+      Parameter : System.Address := System.Null_Address) return int;\n+   pragma Import (C, Interrupt_Connect, \"intConnect\");\n+\n+   function Interrupt_Number_To_Vector\n+     (intNum : int) return Interrupt_Vector;\n+   pragma Import (C, Interrupt_Number_To_Vector, \"__gnat_inum_to_ivec\");\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Import (C, Task_Cont, \"taskCont\");\n+\n+   function Task_Stop (tid : t_id) return int;\n+   pragma Import (C, Task_Stop, \"taskStop\");\n \n    function kill (pid : t_id; sig : int) return int;\n    pragma Import (C, kill, \"kill\");\n \n-   function Set_Time_Slice (ticks : int) return int;\n-   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n-\n    function getpid return t_id;\n    pragma Import (C, getpid, \"taskIdSelf\");\n \n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n+\n end System.VxWorks.Ext;"}, {"sha": "dc23cd26d075ee32e35ea47a52f6dd13d4153f32", "filename": "gcc/ada/s-vxwext.ads", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fs-vxwext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwext.ads?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -39,25 +39,40 @@ package System.VxWorks.Ext is\n    type t_id is new Long_Integer;\n    subtype int is Interfaces.C.int;\n \n-   function Task_Cont (tid : t_id) return int;\n-   pragma Import (C, Task_Cont, \"taskResume\");\n+   type Interrupt_Handler is access procedure (parameter : System.Address);\n+   pragma Convention (C, Interrupt_Handler);\n \n-   function Task_Stop (tid : t_id) return int;\n-   pragma Import (C, Task_Stop, \"taskSuspend\");\n+   type Interrupt_Vector is new System.Address;\n \n    function Int_Lock return int;\n    pragma Import (C, Int_Lock, \"intLock\");\n \n    function Int_Unlock return int;\n    pragma Import (C, Int_Unlock, \"intUnlock\");\n \n+   function Interrupt_Connect\n+     (Vector    : Interrupt_Vector;\n+      Handler   : Interrupt_Handler;\n+      Parameter : System.Address := System.Null_Address) return int;\n+   pragma Import (C, Interrupt_Connect, \"intConnect\");\n+\n+   function Interrupt_Number_To_Vector\n+     (intNum : int) return Interrupt_Vector;\n+   pragma Import (C, Interrupt_Number_To_Vector, \"__gnat_inum_to_ivec\");\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Import (C, Task_Cont, \"taskResume\");\n+\n+   function Task_Stop (tid : t_id) return int;\n+   pragma Import (C, Task_Stop, \"taskSuspend\");\n+\n    function kill (pid : t_id; sig : int) return int;\n    pragma Import (C, kill, \"kill\");\n \n-   function Set_Time_Slice (ticks : int) return int;\n-   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n-\n    function getpid return t_id;\n    pragma Import (C, getpid, \"taskIdSelf\");\n \n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n+\n end System.VxWorks.Ext;"}, {"sha": "e7ab795216338b9f394668e077c2001d760422bf", "filename": "gcc/ada/system-darwin-x86_64.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fsystem-darwin-x86_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fsystem-darwin-x86_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-x86_64.ads?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -5,7 +5,7 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                        (Darwin/x86_64 Version)                           --\n+--                         (Darwin/x86_64 Version)                          --\n --                                                                          --\n --          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -142,7 +142,7 @@ private\n    --  of the individual switch values.\n \n    Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n    Command_Line_Args         : constant Boolean := True;\n    Configurable_Run_Time     : constant Boolean := False;\n    Denorm                    : constant Boolean := True;"}, {"sha": "587fd21163d490d00677c6f47808c4575c439a1f", "filename": "gcc/ada/system-mingw-x86_64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fsystem-mingw-x86_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07382dbe0844687cb1f2d0bcfe2daae1df9745/gcc%2Fada%2Fsystem-mingw-x86_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-mingw-x86_64.ads?ref=1f07382dbe0844687cb1f2d0bcfe2daae1df9745", "patch": "@@ -116,7 +116,7 @@ private\n    --  of the individual switch values.\n \n    Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n    Command_Line_Args         : constant Boolean := True;\n    Configurable_Run_Time     : constant Boolean := False;\n    Denorm                    : constant Boolean := True;"}]}