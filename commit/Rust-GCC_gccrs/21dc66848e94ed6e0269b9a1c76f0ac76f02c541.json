{"sha": "21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkYzY2ODQ4ZTk0ZWQ2ZTAyNjliOWExYzc2ZjBhYzc2ZjAyYzU0MQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2006-07-06T23:26:24Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2006-07-06T23:26:24Z"}, "message": "stacktrace.cc (ClassForFrame): Remove commented-out code.\n\n2006-07-06  Bryce McKinlay <mckinlay@redhat.com>\n\n        * stacktrace.cc (ClassForFrame): Remove commented-out code.\n        (UnwindTraceFn): Use _Unwind_GetIPInfo and adjust IP\n        only when needed.\n        (getLineNumberForFrame): Don't adjust IP here.\n        * testsuite/libjava.lang/StackTrace.java: New test case.\n        * testsuite/libjava.lang/StackTrace.out: Ditto.\n\nFrom-SVN: r115235", "tree": {"sha": "69d4b922ffd2f4030815c9177b5f466624841a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d4b922ffd2f4030815c9177b5f466624841a86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/comments", "author": null, "committer": null, "parents": [{"sha": "27b56ba6cc4d22c0407c0372ec8d6de20e9ac2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b56ba6cc4d22c0407c0372ec8d6de20e9ac2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b56ba6cc4d22c0407c0372ec8d6de20e9ac2a7"}], "stats": {"total": 109, "additions": 100, "deletions": 9}, "files": [{"sha": "498d7c48847a4f4ef35fc08deae91448b3fdda22", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "patch": "@@ -1,3 +1,12 @@\n+2006-07-06  Bryce McKinlay <mckinlay@redhat.com>\n+\n+\t* stacktrace.cc (ClassForFrame): Remove commented-out code.\n+\t(UnwindTraceFn): Use _Unwind_GetIPInfo and adjust IP\n+\tonly when needed.\n+\t(getLineNumberForFrame): Don't adjust IP here.\n+\t* testsuite/libjava.lang/StackTrace.java: New test case.\n+\t* testsuite/libjava.lang/StackTrace.out: Ditto.\n+\n 2006-07-06  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* Makefile.am (libgcj_tools_la_GCJFLAGS): Add"}, {"sha": "2ace9abc232e7212a5c4c6be51eaa8b48ec13a98", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "patch": "@@ -79,8 +79,6 @@ _Jv_StackTrace::ClassForFrame (_Jv_StackFrame *frame)\n {\n   JvAssert (frame->type == frame_native);\n   jclass klass = NULL;\n-  // use _Unwind_FindEnclosingFunction to find start of method\n-  //void *entryPoint = _Unwind_FindEnclosingFunction (ip);\n \n   // look it up in ncodeMap\n   if (frame->start_ip)\n@@ -124,13 +122,20 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n   else\n #endif\n     {\n+      _Unwind_Ptr ip;\n+      int ip_before_insn = 0;\n+      ip = _Unwind_GetIPInfo (context, &ip_before_insn);\n+\n+      // If the unwinder gave us a 'return' address, roll it back a little\n+      // to ensure we get the correct line number for the call itself.\n+      if (! ip_before_insn)\n+\t--ip;\n+\n       state->frames[pos].type = frame_native;\n-      state->frames[pos].ip = (void *) _Unwind_GetIP (context);\n+      state->frames[pos].ip = (void *) ip;\n       state->frames[pos].start_ip = func_addr;\n     }\n \n-  //printf (\"unwind ip: %p\\n\", _Unwind_GetIP (context));\n-\n   _Unwind_Reason_Code result = _URC_NO_REASON;\n   if (state->trace_function != NULL)\n     result = (state->trace_function) (state);\n@@ -207,10 +212,6 @@ _Jv_StackTrace::getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder,\n       else\n         offset = (_Unwind_Ptr) ip - (_Unwind_Ptr) info.base;\n \n-      // The unwinder gives us the return address. In order to get the right\n-      // line number for the stack trace, roll it back a little.\n-      offset -= 1;\n-\n       finder->lookup (binaryName, (jlong) offset);\n       *sourceFileName = finder->getSourceFile();\n       *lineNum = finder->getLineNum();"}, {"sha": "b16e297d90b7fd535b59f6330e69d1e5cb374c5a", "filename": "libjava/testsuite/libjava.lang/StackTrace.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.java?ref=21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "patch": "@@ -0,0 +1,76 @@\n+// Check that stack trace's work, and stack trace line numbers, if available,\n+// are correct.\n+\n+public class StackTrace\n+{\n+  public static void main(String[] args) \n+  { \n+    try\n+    {\n+      a();\n+    }\n+    catch (Exception x)\n+    {\n+      StackTraceElement[] trace = x.getStackTrace();\n+      checkTrace(trace);\n+    }\n+  }\n+\n+  static void a() \n+  { \n+    new Inner();\n+  }\n+  \n+  static class Inner\n+  {\n+    public Inner()\n+    {\n+      doCrash(null);\n+    }  \n+\n+    public void doCrash(Object o)\n+    {\n+      o.toString();\n+    }\n+  }  \n+  \n+  static void checkTrace(StackTraceElement[] trace)\n+  {\n+    System.out.println(\"Trace length = \" + trace.length);\n+    checkLine(trace[0], \"StackTrace$Inner\", \"doCrash\", 33);\n+    checkLine(trace[1], \"StackTrace$Inner\", \"<init>\", 28);\n+    checkLine(trace[2], \"StackTrace\", \"a\", 21);\n+    checkLine(trace[3], \"StackTrace\", \"main\", 10);\n+  }\n+  \n+  static void checkLine(StackTraceElement frame, String expected_cl, \n+                \tString expected_method, int expected_line)\n+  {\n+    if (frame.getClassName().equals(expected_cl))\n+      System.out.print(expected_cl);\n+    else\n+      System.out.print(\"FAIL - expected \" + expected_cl + \", got: \" + \n+\t\t       frame.getClassName());\n+    \n+    System.out.print(\".\");\n+\n+    if (frame.getMethodName().equals(expected_method))\n+      System.out.print(expected_method);\n+    else\n+      System.out.print(\"FAIL - expected \" + expected_method + \", got: \" +\n+\t\t       frame.getMethodName());\n+\n+    System.out.print(\":\");\n+    \n+    // Permit either the correct line number or no line number. This is so\n+    // we don't fail on platforms that don't yet support reading debug info \n+    // for stack traces, or when no debug info is available.\n+    if (frame.getLineNumber() < 0\n+        || (frame.getLineNumber() == expected_line\n+            && frame.getFileName().equals(\"StackTrace.java\")))\n+      System.out.println(\"OK\");\n+    else\n+      System.out.println(\"FAIL - expected \" + expected_line + \", got: \" +\n+\t\t\t frame.getLineNumber());\n+  }\n+}"}, {"sha": "417d471d16afe72e625ae1346a4ea46d39bf0ce4", "filename": "libjava/testsuite/libjava.lang/StackTrace.out", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21dc66848e94ed6e0269b9a1c76f0ac76f02c541/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FStackTrace.out?ref=21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "patch": "@@ -0,0 +1,5 @@\n+Trace length = 4\n+StackTrace$Inner.doCrash:OK\n+StackTrace$Inner.<init>:OK\n+StackTrace.a:OK\n+StackTrace.main:OK"}]}