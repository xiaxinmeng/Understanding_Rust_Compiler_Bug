{"sha": "8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0NDUxYWE4ZDU2M2E5YjNhYzRkZDhjNzA3MWFjODRlNzhlZGExOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-03-29T08:22:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-03-29T08:22:21Z"}, "message": "except.c (add_eh_table_entry): Mark type_info's as referenced.\n\ngcc:\n\t* except.c (add_eh_table_entry): Mark type_info's as referenced.\ngcc/cp:\n\t* rtti.c (get_tinfo_decl): Mark used.\n\t(emit_tinfo_decl): Don't optimize polymorphic type_info. Only\n\tmark as dealt with, if we output it.\n\nFrom-SVN: r32799", "tree": {"sha": "223207314f829c7e3af1daa12a5580da548c52d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223207314f829c7e3af1daa12a5580da548c52d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/comments", "author": null, "committer": null, "parents": [{"sha": "ca36f0577c014e672984e6185352ee028dd3b1f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca36f0577c014e672984e6185352ee028dd3b1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca36f0577c014e672984e6185352ee028dd3b1f6"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "f4e5f5623f7f9cffb206589c5317ec5143d4238f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "patch": "@@ -1,3 +1,7 @@\n+2000-03-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* except.c (add_eh_table_entry): Mark type_info's as referenced.\t\n+\n 2000-03-29  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* config/rs6000/aix41.h (CPP_SPEC): Define _ANSI_C_SOURCE if -ansi"}, {"sha": "2faca96ac391971a7c2147b8a8338a0f496d178a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "patch": "@@ -1,3 +1,9 @@\n+2000-03-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* rtti.c (get_tinfo_decl): Mark used.\n+\t(emit_tinfo_decl): Don't optimize polymorphic type_info. Only\n+\tmark as dealt with, if we output it.\n+\n 2000-03-28  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c: Reorganize to put virtual function table initialization"}, {"sha": "13f5b0950103f043c49e1daf635e4ea6f2949916", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "patch": "@@ -435,6 +435,7 @@ get_tinfo_decl (type)\n       pushdecl_top_level (d);\n       /* Remember the type it is for.  */\n       TREE_TYPE (name) = type;\n+      TREE_USED (name) = 1;\n     }\n   return d;\n }\n@@ -1933,16 +1934,11 @@ emit_tinfo_decl (decl_ptr, data)\n   tinfo_type = TREE_TYPE (DECL_NAME (tinfo_decl));\n   my_friendly_assert (tinfo_type != NULL_TREE, 20000120);\n   \n+  if (!DECL_NEEDED_P (tinfo_decl))\n+    return 0;\n   /* Say we've dealt with it.  */\n   TREE_TYPE (DECL_NAME (tinfo_decl)) = NULL_TREE;\n   \n-  if (!DECL_NEEDED_P (tinfo_decl))\n-    return 0;\n-  if (TREE_CODE (tinfo_type) == RECORD_TYPE && TYPE_POLYMORPHIC_P (tinfo_type)\n-      && !CLASSTYPE_VTABLE_NEEDS_WRITING (tinfo_type))\n-    /* A polymorphic type only needs its type_info emitted when the vtable\n-       is.  */\n-    return 0;\n   create_tinfo_types ();\n   decl = synthesize_tinfo_var (tinfo_type, DECL_ASSEMBLER_NAME (tinfo_decl));\n   "}, {"sha": "67bbc40c27244893a1b3a2ecfa99023214097c37", "filename": "gcc/except.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=8a4451aa8d563a9b3ac4dd8c7071ac84e78eda18", "patch": "@@ -2162,6 +2162,24 @@ add_eh_table_entry (n)\n \t}\n     }\n   eh_table[eh_table_size++] = n;\n+  \n+  if (flag_new_exceptions)\n+    {\n+      /* We will output the exception table late in the compilation. That\n+         references type_info objects which should have already been output\n+         by that time. We explicitly mark those objects as being\n+         referenced now so we know to emit them.  */\n+      struct handler_info *handler = get_first_handler (n);\n+      \n+      for (; handler; handler = handler->next)\n+        if (handler->type_info && handler->type_info != CATCH_ALL_TYPE)\n+          {\n+            tree tinfo = (tree)handler->type_info;\n+\n+            tinfo = TREE_OPERAND (tinfo, 0);\n+            TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (tinfo)) = 1;\n+          }\n+    }\n #endif\n }\n "}]}