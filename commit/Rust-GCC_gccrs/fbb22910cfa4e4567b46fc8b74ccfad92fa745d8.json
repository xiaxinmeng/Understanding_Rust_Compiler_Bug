{"sha": "fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiMjI5MTBjZmE0ZTQ1NjdiNDZmYzhiNzRjY2ZhZDkyZmE3NDVkOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-07-02T18:54:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-07-02T18:54:41Z"}, "message": "re PR preprocessor/53690 ([C++11] \\u0000 and \\U00000000 are wrongly encoded as U+0001.)\n\n/libcpp\n2015-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53690\n\t* charset.c (_cpp_valid_ucn): Add cppchar_t * parameter and change\n\treturn type to bool.  Fix encoding of \\u0000 and \\U00000000 in C++.\n\t(convert_ucn): Adjust call.\n\t* lex.c (forms_identifier_p): Likewise.\n\t* internal.h (_cpp_valid_ucn): Adjust declaration.\n\n/gcc/testsuite\n2015-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53690\n\t* g++.dg/cpp/pr53690.C: New.\n\nFrom-SVN: r225353", "tree": {"sha": "2aac293a422c002719640bf2767fde8c557ab77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aac293a422c002719640bf2767fde8c557ab77b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/comments", "author": null, "committer": null, "parents": [{"sha": "a05d02b293b299352b9523875e96bf697f96baf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05d02b293b299352b9523875e96bf697f96baf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05d02b293b299352b9523875e96bf697f96baf4"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "530f8fc0138a77fd5d5a78877f58ebf90745c12f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -1,3 +1,8 @@\n+2015-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53690\n+\t* g++.dg/cpp/pr53690.C: New.\n+\n 2015-07-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-cmp.c: New test."}, {"sha": "ea9135975137bae81bc5d388c3f19530e953d089", "filename": "gcc/testsuite/g++.dg/cpp/pr53690.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr53690.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr53690.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr53690.C?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/53690\n+// { dg-do compile { target c++11 } }\n+\n+int array1[U'\\U00000000' == 0 ? 1 : -1];\n+int array2[U'\\u0000' == 0 ? 1 : -1];\n+int array3[u'\\U00000000' == 0 ? 1 : -1];\n+int array4[u'\\u0000' == 0 ? 1 : -1];"}, {"sha": "ab259c583d71614484818ad977256137aecc04fd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -1,11 +1,20 @@\n+2015-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53690\n+\t* charset.c (_cpp_valid_ucn): Add cppchar_t * parameter and change\n+\treturn type to bool.  Fix encoding of \\u0000 and \\U00000000 in C++.\n+\t(convert_ucn): Adjust call.\n+\t* lex.c (forms_identifier_p): Likewise.\n+\t* internal.h (_cpp_valid_ucn): Adjust declaration.\n+\n 2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N4197 - Adding u8 character literals\n \t* include/cpplib.h (UTF8CHAR, UTF8CHAR_USERDEF): New cpp tokens;\n \t(struct cpp_options): Add utf8_char_literals.\n \t* init.c (struct lang_flags): Add utf8_char_literals;\n \t(struct lang_flags lang_defaults): Add column for utf8_char_literals.\n-\t* macro.c (stringify_arg()): Treat CPP_UTF8CHAR token; \n+\t* macro.c (stringify_arg()): Treat CPP_UTF8CHAR token;\n \t* expr.c (cpp_userdef_char_remove_type(), cpp_userdef_char_add_type()):\n \tTreat CPP_UTF8CHAR_USERDEF, CPP_UTF8CHAR tokens;\n \t(cpp_userdef_char_p()): Treat CPP_UTF8CHAR_USERDEF token;"}, {"sha": "5a1c929d83516f2c131a151a10ba7e1855b07fdd", "filename": "libcpp/charset.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -972,21 +972,20 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n    or 0060 (`), nor one in the range D800 through DFFF inclusive.\n \n    *PSTR must be preceded by \"\\u\" or \"\\U\"; it is assumed that the\n-   buffer end is delimited by a non-hex digit.  Returns zero if the\n-   UCN has not been consumed.\n+   buffer end is delimited by a non-hex digit.  Returns false if the\n+   UCN has not been consumed, true otherwise.\n \n-   Otherwise the nonzero value of the UCN, whether valid or invalid,\n-   is returned.  Diagnostics are emitted for invalid values.  PSTR\n-   is updated to point one beyond the UCN, or to the syntactically\n-   invalid character.\n+   The value of the UCN, whether valid or invalid, is returned in *CP.\n+   Diagnostics are emitted for invalid values.  PSTR is updated to point\n+   one beyond the UCN, or to the syntactically invalid character.\n \n    IDENTIFIER_POS is 0 when not in an identifier, 1 for the start of\n    an identifier, or 2 otherwise.  */\n \n-cppchar_t\n+bool\n _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \t\tconst uchar *limit, int identifier_pos,\n-\t\tstruct normalize_state *nst)\n+\t\tstruct normalize_state *nst, cppchar_t *cp)\n {\n   cppchar_t result, c;\n   unsigned int length;\n@@ -1030,8 +1029,11 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n      multiple tokens in identifiers, so we can't give a helpful\n      error message in that case.  */\n   if (length && identifier_pos)\n-    return 0;\n-  \n+    {\n+      *cp = 0;\n+      return false;\n+    }\n+\n   *pstr = str;\n   if (length)\n     {\n@@ -1079,10 +1081,8 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \t\t   (int) (str - base), base);\n     }\n \n-  if (result == 0)\n-    result = 1;\n-\n-  return result;\n+  *cp = result;\n+  return true;\n }\n \n /* Convert an UCN, pointed to by FROM, to UTF-8 encoding, then translate\n@@ -1100,7 +1100,7 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   struct normalize_state nst = INITIAL_NORMALIZE_STATE;\n \n   from++;  /* Skip u/U.  */\n-  ucn = _cpp_valid_ucn (pfile, &from, limit, 0, &nst);\n+  _cpp_valid_ucn (pfile, &from, limit, 0, &nst, &ucn);\n \n   rval = one_cppchar_to_utf8 (ucn, &bufp, &bytesleft);\n   if (rval)"}, {"sha": "abd464ff422c10cdb212810d89fbbd4f3cc9264d", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -744,9 +744,10 @@ struct normalize_state\n #define NORMALIZE_STATE_UPDATE_IDNUM(st, c)\t\\\n   ((st)->previous = (c), (st)->prev_class = 0)\n \n-extern cppchar_t _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n-\t\t\t\t const unsigned char *, int,\n-\t\t\t\t struct normalize_state *state);\n+extern bool _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n+\t\t\t    const unsigned char *, int,\n+\t\t\t    struct normalize_state *state,\n+\t\t\t    cppchar_t *);\n extern void _cpp_destroy_iconv (cpp_reader *);\n extern unsigned char *_cpp_convert_input (cpp_reader *, const char *,\n \t\t\t\t\t  unsigned char *, size_t, size_t,"}, {"sha": "0aa109057523be250d02ce4e4b95ff3ed816fd2d", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb22910cfa4e4567b46fc8b74ccfad92fa745d8/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=fbb22910cfa4e4567b46fc8b74ccfad92fa745d8", "patch": "@@ -1244,9 +1244,10 @@ forms_identifier_p (cpp_reader *pfile, int first,\n       && *buffer->cur == '\\\\'\n       && (buffer->cur[1] == 'u' || buffer->cur[1] == 'U'))\n     {\n+      cppchar_t s;\n       buffer->cur += 2;\n       if (_cpp_valid_ucn (pfile, &buffer->cur, buffer->rlimit, 1 + !first,\n-\t\t\t  state))\n+\t\t\t  state, &s))\n \treturn true;\n       buffer->cur -= 2;\n     }"}]}