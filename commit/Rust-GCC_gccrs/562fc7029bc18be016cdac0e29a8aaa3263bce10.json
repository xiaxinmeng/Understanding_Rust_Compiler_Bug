{"sha": "562fc7029bc18be016cdac0e29a8aaa3263bce10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyZmM3MDI5YmMxOGJlMDE2Y2RhYzBlMjlhOGFhYTMyNjNiY2UxMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-23T23:57:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-23T23:57:22Z"}, "message": "expmed.c (extract_bit_field): Use simplify_gen_subreg instead of hard-coding avoiding calls to gen_rtx_SUBREG.\n\n        * expmed.c (extract_bit_field): Use simplify_gen_subreg instead of\n        hard-coding avoiding calls to gen_rtx_SUBREG.  Split complex return\n        modes to CONCAT.\n\nFrom-SVN: r91124", "tree": {"sha": "e8f5801780a6bd9796154980722e5e14e25dbedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f5801780a6bd9796154980722e5e14e25dbedf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/562fc7029bc18be016cdac0e29a8aaa3263bce10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562fc7029bc18be016cdac0e29a8aaa3263bce10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562fc7029bc18be016cdac0e29a8aaa3263bce10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562fc7029bc18be016cdac0e29a8aaa3263bce10/comments", "author": null, "committer": null, "parents": [{"sha": "870faaf6ab21fe1f4b2809693730f0dacbf6b19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870faaf6ab21fe1f4b2809693730f0dacbf6b19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870faaf6ab21fe1f4b2809693730f0dacbf6b19b"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "8a31513ada1a06076cdaf92c590d2bcdfd0185b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562fc7029bc18be016cdac0e29a8aaa3263bce10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562fc7029bc18be016cdac0e29a8aaa3263bce10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=562fc7029bc18be016cdac0e29a8aaa3263bce10", "patch": "@@ -1,3 +1,9 @@\n+2004-11-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* expmed.c (extract_bit_field): Use simplify_gen_subreg instead of\n+\thard-coding avoiding calls to gen_rtx_SUBREG.  Split complex return\n+\tmodes to CONCAT.\n+\n 2004-11-23  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/18618"}, {"sha": "eeab02fadcfd9799d48c567e8c75b7776830a026", "filename": "gcc/expmed.c", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562fc7029bc18be016cdac0e29a8aaa3263bce10/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562fc7029bc18be016cdac0e29a8aaa3263bce10/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=562fc7029bc18be016cdac0e29a8aaa3263bce10", "patch": "@@ -1233,22 +1233,16 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n     {\n       if (mode1 != GET_MODE (op0))\n \t{\n-\t  if (GET_CODE (op0) == SUBREG)\n+\t  if (MEM_P (op0))\n+\t    op0 = adjust_address (op0, mode1, offset);\n+\t  else\n \t    {\n-\t      if (GET_MODE (SUBREG_REG (op0)) == mode1\n-\t\t  || GET_MODE_CLASS (mode1) == MODE_INT\n-\t\t  || GET_MODE_CLASS (mode1) == MODE_PARTIAL_INT)\n-\t\top0 = SUBREG_REG (op0);\n-\t      else\n-\t\t/* Else we've got some float mode source being extracted into\n-\t\t   a different float mode destination -- this combination of\n-\t\t   subregs results in Severe Tire Damage.  */\n+\t      rtx sub = simplify_gen_subreg (mode1, op0, GET_MODE (op0),\n+\t\t\t\t\t     byte_offset);\n+\t      if (sub == NULL)\n \t\tgoto no_subreg_mode_swap;\n+\t      op0 = sub;\n \t    }\n-\t  if (REG_P (op0))\n-\t    op0 = gen_rtx_SUBREG (mode1, op0, byte_offset);\n-\t  else\n-\t    op0 = adjust_address (op0, mode1, offset);\n \t}\n       if (mode1 != mode)\n \treturn convert_to_mode (tmode, op0, unsignedp);\n@@ -1628,19 +1622,41 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n     return spec_target;\n   if (GET_MODE (target) != tmode && GET_MODE (target) != mode)\n     {\n-      /* If the target mode is floating-point, first convert to the\n-\t integer mode of that size and then access it as a floating-point\n-\t value via a SUBREG.  */\n-      if (GET_MODE_CLASS (tmode) != MODE_INT\n-\t  && GET_MODE_CLASS (tmode) != MODE_PARTIAL_INT)\n+      /* If the target mode is complex, then extract the two scalar elements\n+\t from the value now.  Creating (subreg:SC (reg:DI) 0), as we would do\n+\t with the clause below, will cause gen_realpart or gen_imagpart to\n+\t fail, since those functions must return lvalues.  */\n+      if (COMPLEX_MODE_P (tmode))\n \t{\n+\t  rtx realpart, imagpart;\n+\t  enum machine_mode itmode = GET_MODE_INNER (tmode);\n+\n \t  target = convert_to_mode (mode_for_size (GET_MODE_BITSIZE (tmode),\n \t\t\t\t\t\t   MODE_INT, 0),\n \t\t\t\t    target, unsignedp);\n+\n+\t  realpart = extract_bit_field (target, GET_MODE_BITSIZE (itmode), 0,\n+\t\t\t\t\tunsignedp, NULL, itmode, itmode);\n+\t  imagpart = extract_bit_field (target, GET_MODE_BITSIZE (itmode),\n+\t\t\t\t\tGET_MODE_BITSIZE (itmode), unsignedp,\n+\t\t\t\t\tNULL, itmode, itmode);\n+\n+\t  return gen_rtx_CONCAT (tmode, realpart, imagpart);\n+\t}\n+\n+      /* If the target mode is not a scalar integral, first convert to the\n+\t integer mode of that size and then access it as a floating-point\n+\t value via a SUBREG.  */\n+      if (!SCALAR_INT_MODE_P (tmode))\n+\t{\n+\t  enum machine_mode smode\n+\t    = mode_for_size (GET_MODE_BITSIZE (tmode), MODE_INT, 0);\n+\t  target = convert_to_mode (smode, target, unsignedp);\n+\t  target = force_reg (smode, target);\n \t  return gen_lowpart (tmode, target);\n \t}\n-      else\n-\treturn convert_to_mode (tmode, target, unsignedp);\n+\n+      return convert_to_mode (tmode, target, unsignedp);\n     }\n   return target;\n }"}]}