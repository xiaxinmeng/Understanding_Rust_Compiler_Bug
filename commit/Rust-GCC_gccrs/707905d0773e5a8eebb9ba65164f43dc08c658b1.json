{"sha": "707905d0773e5a8eebb9ba65164f43dc08c658b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3OTA1ZDA3NzNlNWE4ZWViYjliYTY1MTY0ZjQzZGMwOGM2NThiMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-04T10:43:45Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-04T10:43:45Z"}, "message": "re PR fortran/60458 (Error message on associate: deferred type parameter and requires either the pointer or allocatable attribute)\n\n2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/60458\n\tPR fortran/77296\n\t* resolve.c (resolve_assoc_var): Deferred character type\n\tassociate names must not receive an integer conatant length.\n\t* symbol.c (gfc_is_associate_pointer): Deferred character\n\tlength functions also require an associate pointer.\n\t* trans-decl.c (gfc_get_symbol_decl): Deferred character\n\tlength functions or derived type components require the assoc\n\tname to have variable string length.\n\t* trans-stmt.c (trans_associate_var): Set the string length of\n\tdeferred string length associate names. The address expression\n\tis not needed for allocatable, pointer or dummy targets. Change\n\tthe comment about defered string length targets.\n\n2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77296\n\t* gfortran.dg/associate_32.f03 : New test.\n\nFrom-SVN: r253400", "tree": {"sha": "766b6c1e28ec2bb871c6783225573d614c75b16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766b6c1e28ec2bb871c6783225573d614c75b16a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707905d0773e5a8eebb9ba65164f43dc08c658b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707905d0773e5a8eebb9ba65164f43dc08c658b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707905d0773e5a8eebb9ba65164f43dc08c658b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707905d0773e5a8eebb9ba65164f43dc08c658b1/comments", "author": null, "committer": null, "parents": [{"sha": "3e3d1b2326f7c78279275c91b21de38c388ff8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3d1b2326f7c78279275c91b21de38c388ff8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3d1b2326f7c78279275c91b21de38c388ff8fe"}], "stats": {"total": 175, "additions": 171, "deletions": 4}, "files": [{"sha": "c38b34b944e66993d19940f8c58a4465dd592b16", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -1,3 +1,19 @@\n+2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/60458\n+\tPR fortran/77296\n+\t* resolve.c (resolve_assoc_var): Deferred character type\n+\tassociate names must not receive an integer conatant length.\n+\t* symbol.c (gfc_is_associate_pointer): Deferred character\n+\tlength functions also require an associate pointer.\n+\t* trans-decl.c (gfc_get_symbol_decl): Deferred character\n+\tlength functions or derived type components require the assoc\n+\tname to have variable string length.\n+\t* trans-stmt.c (trans_associate_var): Set the string length of\n+\tdeferred string length associate names. The address expression\n+\tis not needed for allocatable, pointer or dummy targets. Change\n+\tthe comment about defered string length targets.\n+\n 2017-10-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* io.c (match_wait_element): Correctly match END and EOR tags."}, {"sha": "e6f95d513d34d00407ec0699533530f8c9df7dae", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -8530,7 +8530,7 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       if (!sym->ts.u.cl)\n \tsym->ts.u.cl = target->ts.u.cl;\n \n-      if (!sym->ts.u.cl->length)\n+      if (!sym->ts.u.cl->length && !sym->ts.deferred)\n \tsym->ts.u.cl->length\n \t  = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t      NULL, target->value.character.length);"}, {"sha": "4c109fdfbad0d7cf526549e1125c7887fa5ed481", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -5054,6 +5054,12 @@ gfc_is_associate_pointer (gfc_symbol* sym)\n   if (sym->ts.type == BT_CLASS)\n     return true;\n \n+  if (sym->ts.type == BT_CHARACTER\n+      && sym->ts.deferred\n+      && sym->assoc->target\n+      && sym->assoc->target->expr_type == EXPR_FUNCTION)\n+    return true;\n+\n   if (!sym->assoc->variable)\n     return false;\n "}, {"sha": "b4f515f21d9551d833655a7fc8a2a563a8a8d5f4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -1694,6 +1694,14 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n      string length is a variable, it is not finished a second time.  */\n   if (sym->ts.type == BT_CHARACTER)\n     {\n+      if (sym->attr.associate_var\n+\t  && sym->ts.deferred\n+\t  && sym->assoc && sym->assoc->target\n+\t  && ((sym->assoc->target->expr_type == EXPR_VARIABLE\n+\t       && sym->assoc->target->symtree->n.sym->ts.type != BT_CHARACTER)\n+\t      || sym->assoc->target->expr_type == EXPR_FUNCTION))\n+\tsym->ts.u.cl->backend_decl = NULL_TREE;\n+\n       if (sym->attr.associate_var\n \t  && sym->ts.u.cl->backend_decl\n \t  && VAR_P (sym->ts.u.cl->backend_decl))"}, {"sha": "7a76b8ead3166dcc0062272ef01cd5d352513954", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -1533,6 +1533,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n   bool need_len_assign;\n   bool whole_array = true;\n   gfc_ref *ref;\n+  symbol_attribute attr;\n \n   gcc_assert (sym->assoc);\n   e = sym->assoc->target;\n@@ -1592,6 +1593,17 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \n       gfc_conv_expr_descriptor (&se, e);\n \n+      if (sym->ts.type == BT_CHARACTER\n+\t  && sym->ts.deferred\n+\t  && !sym->attr.select_type_temporary\n+\t  && VAR_P (sym->ts.u.cl->backend_decl)\n+\t  && se.string_length != sym->ts.u.cl->backend_decl)\n+\t{\n+\t  gfc_add_modify (&se.pre, sym->ts.u.cl->backend_decl,\n+\t\t\t  fold_convert (gfc_charlen_type_node,\n+\t\t\t\t\tse.string_length));\n+\t}\n+\n       /* If we didn't already do the pointer assignment, set associate-name\n \t descriptor to the one generated for the temporary.  */\n       if ((!sym->assoc->variable && !cst_array_ctor)\n@@ -1758,8 +1770,35 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t  need_len_assign = need_len_assign && sym->ts.type == BT_CHARACTER;\n \t}\n \n-      tmp = TREE_TYPE (sym->backend_decl);\n-      tmp = gfc_build_addr_expr (tmp, se.expr);\n+      if (sym->ts.type == BT_CHARACTER\n+\t  && sym->ts.deferred\n+\t  && !sym->attr.select_type_temporary\n+\t  && VAR_P (sym->ts.u.cl->backend_decl)\n+\t  && se.string_length != sym->ts.u.cl->backend_decl)\n+\t{\n+\t  gfc_add_modify (&se.pre, sym->ts.u.cl->backend_decl,\n+\t\t\t  fold_convert (gfc_charlen_type_node,\n+\t\t\t\t\tse.string_length));\n+\t  if (e->expr_type == EXPR_FUNCTION)\n+\t    {\n+\t      tmp = gfc_call_free (sym->backend_decl);\n+\t      gfc_add_expr_to_block (&se.post, tmp);\n+\t    }\n+\t}\n+\n+      attr = gfc_expr_attr (e);\n+      if (sym->ts.type == BT_CHARACTER && e->ts.type == BT_CHARACTER\n+\t  && (attr.allocatable || attr.pointer || attr.dummy))\n+\t{\n+\t  /* These are pointer types already.  */\n+\t  tmp = fold_convert (TREE_TYPE (sym->backend_decl), se.expr);\n+\t}\n+      else\n+\t{\n+          tmp = TREE_TYPE (sym->backend_decl);\n+          tmp = gfc_build_addr_expr (tmp, se.expr);\n+\t}\n+\n       gfc_add_modify (&se.pre, sym->backend_decl, tmp);\n \n       gfc_add_init_cleanup (block, gfc_finish_block( &se.pre),\n@@ -1784,7 +1823,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       gfc_init_se (&se, NULL);\n       if (e->symtree->n.sym->ts.type == BT_CHARACTER)\n \t{\n-\t  /* What about deferred strings?  */\n+\t  /* Deferred strings are dealt with in the preceeding.  */\n \t  gcc_assert (!e->symtree->n.sym->ts.deferred);\n \t  tmp = e->symtree->n.sym->ts.u.cl->backend_decl;\n \t}"}, {"sha": "883392f796cc6b8000854186197cd71b89fb9b8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -1,3 +1,8 @@\n+2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77296\n+\t* gfortran.dg/associate_32.f03 : New test.\n+\n 2017-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/78816"}, {"sha": "9a1f5983df040fb72af7ec1200ca5559be62db44", "filename": "gcc/testsuite/gfortran.dg/associate_32.f03", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707905d0773e5a8eebb9ba65164f43dc08c658b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03?ref=707905d0773e5a8eebb9ba65164f43dc08c658b1", "patch": "@@ -0,0 +1,93 @@\n+! { dg-do run }\n+!\n+! Tests fix for PR77296 and other bugs found on the way.\n+!\n+! Contributed by Matt Thompson  <matthew.thompson@nasa.gov>\n+!\n+program test\n+\n+   implicit none\n+   type :: str_type\n+     character(len=:), allocatable :: str\n+   end type\n+\n+   character(len=:), allocatable :: s, sd(:)\n+   character(len=2), allocatable :: sf, sfd(:)\n+   character(len=6) :: str\n+   type(str_type) :: string\n+\n+   s = 'ab'\n+   associate(ss => s)\n+     if (ss .ne. 'ab') call abort ! This is the original bug.\n+     ss = 'c'\n+   end associate\n+   if (s .ne. 'c ') call abort ! No reallocation within ASSOCIATE block!\n+\n+   sf = 'c'\n+   associate(ss => sf)\n+     if (ss .ne. 'c ') call abort ! This the bug in comment #2 of the PR.\n+     ss = 'cd'\n+   end associate\n+\n+   sd = [s, sf]\n+   associate(ss => sd)\n+     if (any (ss .ne. ['c ','cd'])) call abort\n+   end associate\n+\n+   sfd = [sd,'ef']\n+   associate(ss => sfd)\n+     if (any (ss .ne. ['c ','cd','ef'])) call abort\n+     ss = ['gh']\n+   end associate\n+     if (any (sfd .ne. ['gh','cd','ef'])) call abort ! No reallocation!\n+\n+   string%str = 'xyz'\n+   associate(ss => string%str)\n+     if (ss .ne. 'xyz') call abort\n+     ss = 'c'\n+   end associate\n+   if (string%str .ne. 'c  ') call abort ! No reallocation!\n+\n+   str = \"foobar\"\n+   call test_char (5 , str)\n+   IF (str /= \"abcder\") call abort\n+\n+   associate(ss => foo())\n+     if (ss .ne. 'pqrst') call abort\n+   end associate\n+\n+   associate(ss => bar())\n+     if (ss(2) .ne. 'uvwxy') call abort\n+   end associate\n+\n+! The deallocation is not strictly necessary but it does allow\n+! other memory leakage to be tested for.\n+   deallocate (s, sd, sf, sfd, string%str)\n+contains\n+\n+! This is a modified version of the subroutine in associate_1.f03.\n+! 'str' is now a dummy.\n+  SUBROUTINE test_char (n, str)\n+    INTEGER, INTENT(IN) :: n\n+\n+    CHARACTER(LEN=n) :: str\n+\n+    ASSOCIATE (my => str)\n+      IF (LEN (my) /= n) call abort\n+      IF (my /= \"fooba\") call abort\n+      my = \"abcde\"\n+    END ASSOCIATE\n+    IF (str /= \"abcde\") call abort\n+  END SUBROUTINE test_char\n+\n+   function foo() result(res)\n+     character (len=:), pointer :: res\n+     allocate (res, source = 'pqrst')\n+   end function\n+\n+   function bar() result(res)\n+     character (len=:), allocatable :: res(:)\n+     allocate (res, source = ['pqrst','uvwxy'])\n+   end function\n+\n+end program test"}]}