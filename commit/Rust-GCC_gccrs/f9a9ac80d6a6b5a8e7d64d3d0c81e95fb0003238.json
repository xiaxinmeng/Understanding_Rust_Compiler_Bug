{"sha": "f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhOWFjODBkNmE2YjVhOGU3ZDY0ZDNkMGM4MWU5NWZiMDAwMzIzOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-02T19:57:12Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-02T19:57:12Z"}, "message": "configure.ac (ac_libiberty_warn_cflags): Add -Wwrite-strings -Wstrict-prototypes.\n\n\t* configure.ac (ac_libiberty_warn_cflags): Add -Wwrite-strings\n\t-Wstrict-prototypes.\n\t* configure, config.in: Regenerate.\n\n\t* bsearch.c, index.c, rindex.c, strstr.c, strtol.c, waitpid.c: Fix\n\twarnings and reconcile interfaces with relevant standards.\n\nFrom-SVN: r97456", "tree": {"sha": "affa924d98f9c5b1f7c2ae042a32d290d2648be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affa924d98f9c5b1f7c2ae042a32d290d2648be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/comments", "author": null, "committer": null, "parents": [{"sha": "577e5d76f980c812f7f26f6aeded7cda5049c5d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577e5d76f980c812f7f26f6aeded7cda5049c5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577e5d76f980c812f7f26f6aeded7cda5049c5d7"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "3099668761251399ce396b2d1a60e79eb9a28c88", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -1,3 +1,12 @@\n+2005-04-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.ac (ac_libiberty_warn_cflags): Add -Wwrite-strings\n+\t-Wstrict-prototypes.\n+\t* configure, config.in: Regenerate.\n+\n+\t* bsearch.c, index.c, rindex.c, strstr.c, strtol.c, waitpid.c: Fix\n+\twarnings and reconcile interfaces with relevant standards.\n+\n 2005-04-02  Ian Lance Taylor  <ian@airs.com>\n \n \t* cp-demangle.c: Update copyright."}, {"sha": "771d5de7b12aa7c3222fae913ccf22b0fb9fcd5d", "filename": "libiberty/bsearch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fbsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fbsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbsearch.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -79,7 +79,7 @@ bsearch (register const void *key, const void *base0,\n \t\tp = base + (lim >> 1) * size;\n \t\tcmp = (*compar)(key, p);\n \t\tif (cmp == 0)\n-\t\t\treturn (p);\n+\t\t\treturn (void *)p;\n \t\tif (cmp > 0) {\t/* key > p: move right */\n \t\t\tbase = (const char *)p + size;\n \t\t\tlim--;"}, {"sha": "ad71e76c09a2137b5ae0d742b7ad01ee197d317a", "filename": "libiberty/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -301,6 +301,12 @@\n /* Define to 1 if you have the `vsprintf' function. */\n #undef HAVE_VSPRINTF\n \n+/* Define to 1 if you have the `wait3' function. */\n+#undef HAVE_WAIT3\n+\n+/* Define to 1 if you have the `wait4' function. */\n+#undef HAVE_WAIT4\n+\n /* Define to 1 if you have the `waitpid' function. */\n #undef HAVE_WAITPID\n "}, {"sha": "3aa3963ea198525894102862c92cb484c3b92e47", "filename": "libiberty/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -2930,7 +2930,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n ac_c_preproc_warn_flag=yes\n \n if test x$GCC = xyes; then\n-  ac_libiberty_warn_cflags='-W -Wall -pedantic'\n+  ac_libiberty_warn_cflags='-W -Wall -pedantic -Wwrite-strings -Wstrict-prototypes'\n fi\n \n \n@@ -4885,6 +4885,8 @@ if test \"x\" = \"y\"; then\n \n \n \n+\n+\n \n \n "}, {"sha": "9f4749139062bcdf4ceeab8955cec6b245911959", "filename": "libiberty/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -114,7 +114,7 @@ AC_PROG_CC\n AC_PROG_CPP_WERROR\n \n if test x$GCC = xyes; then\n-  ac_libiberty_warn_cflags='-W -Wall -pedantic'\n+  ac_libiberty_warn_cflags='-W -Wall -pedantic -Wwrite-strings -Wstrict-prototypes'\n fi\n AC_SUBST(ac_libiberty_warn_cflags)\n "}, {"sha": "acd0a45fc0295bcafd7baf3f114ff9a4f8a8761f", "filename": "libiberty/index.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Findex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Findex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Findex.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -15,7 +15,7 @@ deprecated in new programs in favor of @code{strchr}.\n extern char * strchr(const char *, int);\n \n char *\n-index (char *s, int c)\n+index (const char *s, int c)\n {\n   return strchr (s, c);\n }"}, {"sha": "194ef9fad7861a60e7789023318e4d59413293ff", "filename": "libiberty/rindex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Frindex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Frindex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frindex.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -12,10 +12,10 @@ deprecated in new programs in favor of @code{strrchr}.\n \n */\n \n-extern char *strrchr ();\n+extern char *strrchr (const char *, int);\n \n char *\n-rindex (char *s, int c)\n+rindex (const char *s, int c)\n {\n   return strrchr (s, c);\n }"}, {"sha": "60902ea40ee80b513a525f9403728398ea876d7e", "filename": "libiberty/strstr.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -20,23 +20,22 @@ length, the function returns @var{string}.\n /* FIXME:  The above description is ANSI compiliant.  This routine has not\n    been validated to comply with it.  -fnf */\n \n+#include <stddef.h>\n+\n+extern char *strchr (const char *, int);\n+extern int strncmp (const void *, const void *, size_t);\n+extern size_t strlen (const char *);\n+\n char *\n-strstr (char *s1, char *s2)\n+strstr (const char *s1, const char *s2)\n {\n-  register char *p = s1;\n-  extern char *strchr ();\n-  extern int strncmp ();\n-#if __GNUC__ >= 2\n-  extern __SIZE_TYPE__ strlen (const char *);\n-#endif\n-  register int len = strlen (s2);\n+  const char *p = s1;\n+  const size_t len = strlen (s2);\n \n   for (; (p = strchr (p, *s2)) != 0; p++)\n     {\n       if (strncmp (p, s2, len) == 0)\n-\t{\n-\t  return (p);\n-\t}\n+\treturn (char *)p;\n     }\n   return (0);\n }"}, {"sha": "acc7882192bb4e8bd114a0b34ef3ffe7645b03d9", "filename": "libiberty/strtol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fstrtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fstrtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtol.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -144,7 +144,7 @@ strtol(const char *nptr, char **endptr, register int base)\n \t\t\tbreak;\n \t\tif (c >= base)\n \t\t\tbreak;\n-\t\tif (any < 0 || acc > cutoff || acc == cutoff && c > cutlim)\n+\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))\n \t\t\tany = -1;\n \t\telse {\n \t\t\tany = 1;"}, {"sha": "fd519d7696e074573f37b204c0a8485d5a2b8d0f", "filename": "libiberty/waitpid.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fwaitpid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238/libiberty%2Fwaitpid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fwaitpid.c?ref=f9a9ac80d6a6b5a8e7d64d3d0c81e95fb0003238", "patch": "@@ -13,6 +13,7 @@ does the return value.  The third argument is unused in @libib{}.\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif\n+#include \"ansidecl.h\"\n \n /* On some systems (such as WindISS), you must include <sys/types.h>\n    to get the definition of \"pid_t\" before you include <sys/wait.h>.  */\n@@ -23,7 +24,7 @@ does the return value.  The third argument is unused in @libib{}.\n #endif\n \n pid_t\n-waitpid (pid_t pid, int *stat_loc, int options)\n+waitpid (pid_t pid, int *stat_loc, int options ATTRIBUTE_UNUSED)\n {\n   for (;;)\n     {"}]}