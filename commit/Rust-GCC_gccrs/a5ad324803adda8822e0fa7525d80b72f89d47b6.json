{"sha": "a5ad324803adda8822e0fa7525d80b72f89d47b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhZDMyNDgwM2FkZGE4ODIyZTBmYTc1MjVkODBiNzJmODlkNDdiNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T14:38:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T14:38:14Z"}, "message": "exp_ch3.adb (Build_Init_Statements): Transfer to the body of the init procedure all the expanded code associated...\n\n2008-08-22  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Build_Init_Statements): Transfer to the body of the\n\tinit procedure all the expanded code associated with the spec of\n\ttask types and protected types.\n\nFrom-SVN: r139477", "tree": {"sha": "33f01fc7837970c154dc7b6c6b154d43d0b3622b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33f01fc7837970c154dc7b6c6b154d43d0b3622b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5ad324803adda8822e0fa7525d80b72f89d47b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ad324803adda8822e0fa7525d80b72f89d47b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ad324803adda8822e0fa7525d80b72f89d47b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ad324803adda8822e0fa7525d80b72f89d47b6/comments", "author": null, "committer": null, "parents": [{"sha": "af90c55af0c744a660128a26cafee66b1408ca38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c55af0c744a660128a26cafee66b1408ca38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af90c55af0c744a660128a26cafee66b1408ca38"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "a14c6cd71c18a67c116c62f1b95956ab5c88361f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ad324803adda8822e0fa7525d80b72f89d47b6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ad324803adda8822e0fa7525d80b72f89d47b6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a5ad324803adda8822e0fa7525d80b72f89d47b6", "patch": "@@ -1,3 +1,14 @@\n+2008-08-22  Pascal Obry  <obry@adacore.com>\n+\n+\t* initialize.c, adaint.c: Use Lock_Task and Unlock_Task for non-blocking\n+\tspawn.\n+\n+2008-08-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Statements): Transfer to the body of the\n+\tinit procedure all the expanded code associated with the spec of\n+\ttask types and protected types.\n+\n 2008-08-22  Geert Bosch  <bosch@adacore.com>\n \n \t* gcc-interface/trans.c: Define FP_ARITH_MAY_WIDEN"}, {"sha": "7787a7bd498f55ffbbf37bc0d67451870966b8c9", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ad324803adda8822e0fa7525d80b72f89d47b6/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ad324803adda8822e0fa7525d80b72f89d47b6/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a5ad324803adda8822e0fa7525d80b72f89d47b6", "patch": "@@ -1694,11 +1694,11 @@ package body Exp_Ch3 is\n    ----------------------------\n \n    procedure Build_Record_Init_Proc (N : Node_Id; Pe : Entity_Id) is\n-      Loc         : Source_Ptr := Sloc (N);\n-      Discr_Map   : constant Elist_Id := New_Elmt_List;\n-      Proc_Id     : Entity_Id;\n-      Rec_Type    : Entity_Id;\n-      Set_Tag     : Entity_Id := Empty;\n+      Loc       : Source_Ptr := Sloc (N);\n+      Discr_Map : constant Elist_Id := New_Elmt_List;\n+      Proc_Id   : Entity_Id;\n+      Rec_Type  : Entity_Id;\n+      Set_Tag   : Entity_Id := Empty;\n \n       function Build_Assignment (Id : Entity_Id; N : Node_Id) return List_Id;\n       --  Build a assignment statement node which assigns to record component\n@@ -2515,6 +2515,45 @@ package body Exp_Ch3 is\n \n          Statement_List := New_List;\n \n+         --  Loop through visible declarations of task types and protected\n+         --  types moving any expanded code from the spec to the body of the\n+         --  init procedure\n+\n+         if Is_Task_Record_Type (Rec_Type)\n+           or else Is_Protected_Record_Type (Rec_Type)\n+         then\n+            declare\n+               Decl : constant Node_Id :=\n+                        Parent (Corresponding_Concurrent_Type (Rec_Type));\n+               Def  : Node_Id;\n+               N1   : Node_Id;\n+               N2   : Node_Id;\n+\n+            begin\n+               if Is_Task_Record_Type (Rec_Type) then\n+                  Def := Task_Definition (Decl);\n+               else\n+                  Def := Protected_Definition (Decl);\n+               end if;\n+\n+               N1 := First (Visible_Declarations (Def));\n+               while Present (N1) loop\n+                  N2 := N1;\n+                  N1 := Next (N1);\n+\n+                  if Nkind (N2) in N_Statement_Other_Than_Procedure_Call\n+                    or else Nkind (N2) in N_Raise_xxx_Error\n+                    or else Nkind (N2) = N_Procedure_Call_Statement\n+                  then\n+                     Append_To (Statement_List,\n+                       New_Copy_Tree (N2, New_Scope => Proc_Id));\n+                     Rewrite (N2, Make_Null_Statement (Sloc (N2)));\n+                     Analyze (N2);\n+                  end if;\n+               end loop;\n+            end;\n+         end if;\n+\n          --  Loop through components, skipping pragmas, in 2 steps. The first\n          --  step deals with regular components. The second step deals with\n          --  components have per object constraints, and no explicit initia-\n@@ -3079,7 +3118,7 @@ package body Exp_Ch3 is\n \n       --  If there are discriminants, build the discriminant map to replace\n       --  discriminants by their discriminals in complex bound expressions.\n-      --  These only arise for the corresponding records of protected types.\n+      --  These only arise for the corresponding records of synchronized types.\n \n       if Is_Concurrent_Record_Type (Rec_Type)\n         and then Has_Discriminants (Rec_Type)"}]}