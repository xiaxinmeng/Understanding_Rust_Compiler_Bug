{"sha": "c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4MzE1MjRiYzBiZjhkMTViYzk1ZTI2ODMyYTJhNWUwNzUyZjljYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T09:52:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T09:52:50Z"}, "message": "[multiple changes]\n\n2015-01-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* i-cpoint.adb (Copy_Terminated_Array): Use Copy_Array to\n\thandle overlap.\n\n2015-01-07  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Do not\n\tautomatically set No_Strict_Aliasing on access types.\n\t* fe.h (No_Strict_Aliasing_CP): Declare.\n\t* gcc-interface/trans.c (gigi): Force flag_strict_aliasing to 0 if\n\tNo_Strict_Aliasing_CP is set.\n\n2015-01-07  Johannes Kanig  <kanig@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming) do\n\tnot build function wrapper in gnatprove mode when the package\n\tis externally axiomatized.\n\n2015-01-07  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-reatim.adb (Time_Of): Reduce the number of spurious overflows in\n\tintermediate computations when the parameters have different signs.\n\n2015-01-07  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Build_Init_Procedure): For derived types,\n\timprove the code which takes care of identifying and moving to\n\tthe beginning of the init-proc the call to the init-proc of the\n\tparent type.\n\nFrom-SVN: r219287", "tree": {"sha": "24a17934b629bb46778ca5d90adbe1188eb86824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a17934b629bb46778ca5d90adbe1188eb86824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/comments", "author": null, "committer": null, "parents": [{"sha": "1a9ee22281e0902c673d3c2e4cb5b83e07786569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9ee22281e0902c673d3c2e4cb5b83e07786569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9ee22281e0902c673d3c2e4cb5b83e07786569"}], "stats": {"total": 176, "additions": 149, "deletions": 27}, "files": [{"sha": "3fb4b233c8c86753c21c060c713aa2f98c5cc047", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -1,3 +1,34 @@\n+2015-01-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* i-cpoint.adb (Copy_Terminated_Array): Use Copy_Array to\n+\thandle overlap.\n+\n+2015-01-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Do not\n+\tautomatically set No_Strict_Aliasing on access types.\n+\t* fe.h (No_Strict_Aliasing_CP): Declare.\n+\t* gcc-interface/trans.c (gigi): Force flag_strict_aliasing to 0 if\n+\tNo_Strict_Aliasing_CP is set.\n+\n+2015-01-07  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming) do\n+\tnot build function wrapper in gnatprove mode when the package\n+\tis externally axiomatized.\n+\n+2015-01-07  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-reatim.adb (Time_Of): Reduce the number of spurious overflows in\n+\tintermediate computations when the parameters have different signs.\n+\n+2015-01-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Procedure): For derived types,\n+\timprove the code which takes care of identifying and moving to\n+\tthe beginning of the init-proc the call to the init-proc of the\n+\tparent type.\n+\n 2015-01-07  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu, <N_Expression_With_Action>):"}, {"sha": "1a233c49481a35f17856637b898d5f77040554ae", "filename": "gcc/ada/a-reatim.adb", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fa-reatim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fa-reatim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.adb?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -218,7 +218,58 @@ package body Ada.Real_Time is\n \n    function Time_Of (SC : Seconds_Count; TS : Time_Span) return Time is\n    begin\n-      return Time (SC) + TS;\n+      --  We want to return Time (SC) + TS. To avoid spurious overflows in\n+      --  the intermediate result Time (SC) we take advantage of the different\n+      --  signs in SC and TS (when that is the case).\n+\n+      --  If signs of SC and TS are different then we avoid converting SC to\n+      --  Time (as we do in the else part). The reason for that is that SC\n+      --  converted to Time may overflow the range of Time, while the addition\n+      --  of SC plus TS does not overflow (because of their different signs).\n+      --  The approach is to add and remove the greatest value of time\n+      --  (greatest absolute value) to both SC and TS. SC and TS have different\n+      --  signs, so we add the positive constant to the negative value, and the\n+      --  negative constant to the positive value, to prevent overflows.\n+\n+      if (SC > 0 and then TS < 0.0)\n+        or else (SC < 0 and then TS > 0.0)\n+      then\n+         declare\n+            Closest_Boundary : constant Seconds_Count :=\n+              (if TS >= 0.0 then\n+                  Seconds_Count (Time_Span_Last  - Time_Span (0.5))\n+               else\n+                  Seconds_Count (Time_Span_First + Time_Span (0.5)));\n+            --  Value representing the integer part of the Time_Span boundary\n+            --  closest to TS (its number of seconds). Truncate towards zero\n+            --  to be sure that transforming this value back into Time cannot\n+            --  overflow (when SC is equal to 0). The sign of Closest_Boundary\n+            --  is always different from the sign of SC, hence avoiding\n+            --  overflow in the expression Time (SC + Closest_Boundary)\n+            --  which is part of the return statement.\n+\n+            Dist_To_Boundary : constant Time_Span :=\n+              TS - Time_Span (Closest_Boundary);\n+            --  Distance between TS and Closest_Boundary expressed in Time_Span\n+            --  Both operands in the substraction have the same sign, hence\n+            --  avoiding overflow.\n+\n+         begin\n+            --  Both operands in the inner addition have different signs,\n+            --  hence avoiding overflow. The Time () conversion and the outer\n+            --  addition can overflow only if SC + TC is not within Time'Range.\n+\n+            return Time (SC + Closest_Boundary) + Dist_To_Boundary;\n+         end;\n+\n+      --  Both operands have the same sign, so we can convert SC into Time\n+      --  right away; if this conversion overflows then the result of adding SC\n+      --  and TS would overflow anyway (so we would just be detecting the\n+      --  overflow a bit earlier).\n+\n+      else\n+         return Time (SC) + TS;\n+      end if;\n    end Time_Of;\n \n    -----------------"}, {"sha": "74afb6034c6e470a63c73b600b019063a123e96a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -2391,11 +2391,43 @@ package body Exp_Ch3 is\n                   --  such case the initialization of the _parent field was not\n                   --  generated.\n \n-                  if not Is_Interface (Etype (Rec_Ent))\n-                    and then Nkind (First (Stmts)) = N_Procedure_Call_Statement\n-                    and then Is_Init_Proc (Name (First (Stmts)))\n-                  then\n-                     Prepend_To (Body_Stmts, Remove_Head (Stmts));\n+                  if not Is_Interface (Etype (Rec_Ent)) then\n+                     declare\n+                        Parent_IP : constant Name_Id :=\n+                                      Make_Init_Proc_Name (Etype (Rec_Ent));\n+                        Stmt      : Node_Id := First (Stmts);\n+                        IP_Call   : Node_Id := Empty;\n+                        IP_Stmts  : List_Id;\n+\n+                     begin\n+                        --  Look for a call to the parent IP at the beginning\n+                        --  of Stmts associated with the record extension\n+\n+                        while Present (Stmt) loop\n+                           if Nkind (Stmt) = N_Procedure_Call_Statement\n+                             and then Chars (Name (Stmt)) = Parent_IP\n+                           then\n+                              IP_Call := Stmt;\n+                              exit;\n+                           end if;\n+\n+                           Next (Stmt);\n+                        end loop;\n+\n+                        --  If found then move it to the beginning of the\n+                        --  statements of this IP routine\n+\n+                        if Present (IP_Call) then\n+                           IP_Stmts := New_List;\n+                           loop\n+                              Stmt := Remove_Head (Stmts);\n+                              Append_To (IP_Stmts, Stmt);\n+                              exit when Stmt = IP_Call;\n+                           end loop;\n+\n+                           Prepend_List_To (Body_Stmts, IP_Stmts);\n+                        end if;\n+                     end;\n                   end if;\n \n                   Append_List_To (Body_Stmts, Stmts);"}, {"sha": "88686e8c44958970ffd8f399f762594a49f4a62d", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -176,6 +176,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n #define Generate_SCO_Instance_Table    opt__generate_sco_instance_table\n #define GNAT_Mode                      opt__gnat_mode\n #define List_Representation_Info       opt__list_representation_info\n+#define No_Strict_Aliasing_CP          opt__no_strict_aliasing\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n \n@@ -187,6 +188,7 @@ extern Char Float_Format;\n extern Boolean Generate_SCO_Instance_Table;\n extern Boolean GNAT_Mode;\n extern Int List_Representation_Info;\n+extern Boolean No_Strict_Aliasing_CP;\n \n /* restrict: */\n "}, {"sha": "a81467067b14da64b0545c5f6242ad0f08cf00db", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -667,6 +667,10 @@ gigi (Node_Id gnat_root,\n   /* Initialize the GCC support for FP operations.  */\n   gnat_init_gcc_fp ();\n \n+  /* Force -fno-strict-aliasing if the configuration pragma was seen.  */\n+  if (No_Strict_Aliasing_CP)\n+    flag_strict_aliasing = 0;\n+\n   /* Now translate the compilation unit proper.  */\n   Compilation_Unit_to_gnu (gnat_root);\n "}, {"sha": "6b3c84d2293288473dcdc72033e10ecaaff242f3", "filename": "gcc/ada/i-cpoint.adb", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fi-cpoint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fi-cpoint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpoint.adb?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -143,23 +143,21 @@ package body Interfaces.C.Pointers is\n       Limit      : ptrdiff_t := ptrdiff_t'Last;\n       Terminator : Element := Default_Terminator)\n    is\n-      S : Pointer   := Source;\n-      T : Pointer   := Target;\n-      L : ptrdiff_t := Limit;\n-\n+      L : ptrdiff_t;\n+      S : Pointer := Source;\n    begin\n-      if S = null or else T = null then\n+      if Source = null then\n          raise Dereference_Error;\n-\n-      else\n-         while L > 0 loop\n-            T.all := S.all;\n-            exit when T.all = Terminator;\n-            Increment (T);\n-            Increment (S);\n-            L := L - 1;\n-         end loop;\n       end if;\n+\n+      --  Compute array length (including the terminator)\n+      L := 1;\n+      while S.all /= Terminator and then L < Limit loop\n+         L := L + 1;\n+         Increment (S);\n+      end loop;\n+\n+      Copy_Array (Source, Target, L);\n    end Copy_Terminated_Array;\n \n    ---------------"}, {"sha": "2850afcdd2b10d90a7790c82ae7588768dd9100d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -2657,12 +2657,6 @@ package body Sem_Ch3 is\n                   Add_RACW_Features (Def_Id);\n                end if;\n \n-               --  Set no strict aliasing flag if config pragma seen\n-\n-               if Opt.No_Strict_Aliasing then\n-                  Set_No_Strict_Aliasing (Base_Type (Def_Id));\n-               end if;\n-\n             when N_Array_Type_Definition =>\n                Array_Type_Declaration (T, Def);\n "}, {"sha": "2b4f52830e16067f0f022b6ab5fad2586ce382f8", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3831524bc0bf8d15bc95e26832a2a5e0752f9cc/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c3831524bc0bf8d15bc95e26832a2a5e0752f9cc", "patch": "@@ -2710,7 +2710,17 @@ package body Sem_Ch8 is\n          --  Check whether the renaming is for a defaulted actual subprogram\n          --  with a class-wide actual.\n \n-         if CW_Actual and then Box_Present (Inst_Node) then\n+         --  The class-wide wrapper is not needed when we are in\n+         --  GNATprove_Mode and there is an external axiomatization on the\n+         --  package.\n+\n+         if CW_Actual\n+            and then Box_Present (Inst_Node)\n+            and then not (GNATprove_Mode\n+                          and then\n+                          Present (Containing_Package_With_Ext_Axioms\n+                                     (Formal_Spec)))\n+         then\n             Build_Class_Wide_Wrapper (New_S, Old_S);\n \n          elsif Is_Entity_Name (Nam)"}]}