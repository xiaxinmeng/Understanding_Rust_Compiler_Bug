{"sha": "4294c0935c186a724f044c36ca9693a7138853ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5NGMwOTM1YzE4NmE3MjRmMDQ0YzM2Y2E5NjkzYTcxMzg4NTNhZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2015-01-02T11:24:32Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2015-01-02T11:24:32Z"}, "message": "re PR fortran/60507 (Passing function call into procedure argument not caught)\n\n2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/60507\n\t* interface.c (is_procptr_result): New function to check if an\n\texpression is a procedure-pointer result.\n\t(compare_actual_formal): Use it.\n\n2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/60507\n\t* gfortran.dg/dummy_procedure_11: New.\n\nFrom-SVN: r219141", "tree": {"sha": "542766813f11cd3b0d5385996b80feeea40828ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/542766813f11cd3b0d5385996b80feeea40828ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4294c0935c186a724f044c36ca9693a7138853ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4294c0935c186a724f044c36ca9693a7138853ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4294c0935c186a724f044c36ca9693a7138853ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4294c0935c186a724f044c36ca9693a7138853ae/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007adc0d7920a6c8600ad039c1ddaae377cb61c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007adc0d7920a6c8600ad039c1ddaae377cb61c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007adc0d7920a6c8600ad039c1ddaae377cb61c8"}], "stats": {"total": 42759, "additions": 21415, "deletions": 21344}, "files": [{"sha": "e45269e0845d03e8f27395d456c3dc8e86f1839d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 2571, "changes": 2576, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4294c0935c186a724f044c36ca9693a7138853ae", "patch": "@@ -1,2576 +1,10 @@\n-2014-12-31  Tobias Burnus  <burnus@net-b.de>\n+2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n-\t* match.c (gfc_match_stopcode): Permit error stop in pure\n-\tprocedures with F2015.\n+\tPR fortran/60507\n+\t* interface.c (is_procptr_result): New function to check if an\n+\texpression is a procedure-pointer result.\n+\t(compare_actual_formal): Use it.\n \n-2014-12-31  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* trans-array.c (trans_array_bound_check): Use xasprintf instead\n-\tof unchecked asprintf.\n-\t(gfc_conv_array_ref): Ditto.\n-\t(gfc_conv_ss_startstride): Ditto.\n-\t(gfc_trans_dummy_array_bias): Ditto.\n-\t(gfc_conv_array_parameter): Ditto.\n-\t* trans-decl.c (gfc_generate_function_code): Ditto.\n-\t* trans-expr.c (gfc_conv_substring): Ditto.\n-\t(gfc_conv_procedure_call): Ditto.\n-\t* trans-io.c (gfc_trans_io_runtime_check): Ditto.\n-\t(set_string): Ditto.\n-\t* trans.c (trans-runtime_error_vararg): Ditto.\n-\n-2014-12-29  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60357\n-\t* array.c (check_constructor): Ignore empty expressions.\n-\t* expr.c (check_alloc_comp_init): Check if constructor expression\n-\texists.\n-\t* primary.c (build_actual_constructor): Warn for absent alloc-comp\n-\tinitializers in pre-2008 standards.\n-\n-2014-12-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/56867\n-\t* trans-array.c (gfc_conv_resolve_dependencies):  Also check\n-\tdependencies when there may be substrings of character arrays.\n-\n-2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/54756\n-\t* resolve.c (resolve_formal_arglist): Reject polymorphic INTENT(OUT)\n-\targuments of pure procedures.\n-\n-2014-12-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get, conv_caf_send):\n-\tFix vector handling.\n-\n-2014-12-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/63363\n-\t* check.c (gfc_check_kind): Reject polymorphic and non-data arguments.\n-\n-2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/64209\n-\t* trans-expr.c (gfc_trans_class_array_init_assign): Check if _def_init\n-\tcomponent is non-NULL.\n-\t(gfc_trans_class_init_assign): Ditto.\n-\n-2014-12-17  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/64173\n-\t* trans-array.c (structure_alloc_comps): Do not nullify procedure\n-\tpointer components.\n-\n-2014-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n-\n-\t* trans-types.c (gfc_get_array_descr_info): Describe all Fortran arrays\n-\twith column major ordering.\n-\n-2014-12-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/54687\n-\t* gfortran.h (gfc_option_t): Remove flags which now\n-\thave a Var().\n-\t(init_local_real, gfc_fcoarray): Moved to ../flag-types.h.\n-\t* libgfortran.h (unit_convert): Add comment.\n-\t* lang.opt (flag-convert, flag-init_real, flag-coarray):\n-\tAdd Var() and Enum().\n-\t* options.c (gfc_handle_coarray_option): Remove.\n-\t(gfc_init_options, gfc_post_options, gfc_handle_option):\n-\tUpdate for *.opt changes.\n-\t* array.c: Update for flag-variable name changes.\n-\t* check.c: Ditto.\n-\t* match.c: Ditto.\n-\t* resolve.c: Ditto.\n-\t* simplify.c: Ditto.\n-\t* trans-array.c: Ditto.\n-\t* trans-decl.c: Ditto.\n-\t* trans-expr.c: Ditto.\n-\t* trans-intrinsic.c: Ditto.\n-\t* trans-stmt.c: Ditto.\n-\t* trans-types.c: Ditto.\n-\t* trans.c: Ditto.\n-\n-2014-12-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/54687\n-\t* gfortran.h (gfc_option_t): Remove flags which now\n-\thave a Var().\n-\t* lang.opt (flag-aggressive_function_elimination,\n-\tflag-align_commons, flag-all_intrinsics,\n-\tflag-allow_leading_underscore, flag-automatic, flag-backslash,\n-\tflag-backtrace, flag-blas_matmul_limit, flag-cray_pointer,\n-\tflag-dollar_ok, flag-dump_fortran_original,\n-\tflag-dump_fortran_optimized, flag-external_blas, flag-f2c,\n-\tflag-implicit_none, flag-max_array_constructor,\n-\tflag-module_private, flag-pack_derived, flag-range_check,\n-\tflag-recursive, flag-repack_arrays, flag-sign_zero,\n-\tflag-underscoring): Add Var() and, where applicable, Enum().\n-\t* options.c (gfc_init_options, gfc_post_options,\n-\tgfc_handle_option): Update for *.opt changes.\n-\t* arith.c: Update for flag-variable name changes.\n-\t* array.c: Ditto.\n-\t* cpp.c: Ditto.\n-\t* decl.c: Ditto.\n-\t* expr.c: Ditto.\n-\t* f95-lang.c: Ditto.\n-\t* frontend-passes.c: Ditto.\n-\t* intrinsic.c: Ditto.\n-\t* io.c: Ditto.\n-\t* match.c: Ditto.\n-\t* module.c: Ditto.\n-\t* parse.c: Ditto.\n-\t* primary.c: Ditto.\n-\t* resolve.c: Ditto.\n-\t* scanner.c: Ditto.\n-\t* simplify.c: Ditto.\n-\t* symbol.c: Ditto.\n-\t* trans-array.c: Ditto.\n-\t* trans-common.c: Ditto.\n-\t* trans-decl.c: Ditto.\n-\t* trans-expr.c: Ditto.\n-\t* trans-intrinsic.c: Ditto.\n-\t* trans-openmp.c: Ditto.\n-\t* trans-types.c: Ditto.\n-\n-2014-12-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/54687\n-\t* lang.opt (fsecond-underscore, frecord-marker=8, frecord-marker=4,\n-\tfrealloc-lhs, freal-8-real-16, freal-8-real-10, freal-8-real-4,\n-\tfreal-4-real-16, freal-4-real-10, freal-4-real-8, fprotect-parens,\n-\tfstack-arrays, fmax-stack-var-size=, fmax-subrecord-length=,\n-\tffrontend-optimize, ffree-line-length-, ffixed-line-length-,\n-\tfinteger-4-integer-8, fdefault-real-8, fdefault-integer-8,\n-\tfdefault-double-8): Add Var() and Init().\n-\t* gfortran.h (gfc_option_t): Remove moved flags.\n-\t* options.c (gfc_init_options, gfc_handle_option): Ditto.\n-\t(gfc_post_options): Update for name change.\n-\t* decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Handle\n-\tflag-name change.\n-\t* frontend-passes.c (gfc_run_passes): Ditto.\n-\t* module.c (use_iso_fortran_env_module): Ditto.\n-\t* primary.c (match_integer_constant, match_real_constant): Ditto.\n-\t* resolve.c (resolve_ordinary_assign): Ditto.\n-\t* scanner.c (gfc_next_char_literal, load_line): Ditto.\n-\t* trans-array.c (gfc_trans_allocate_array_storage,\n-\tgfc_conv_resolve_dependencies, gfc_trans_auto_array_allocation,\n-\tgfc_conv_ss_startstride): Ditto.\n-\t* trans-common.c (gfc_sym_mangled_common_id): Ditto.\n-\t* trans-decl.c (gfc_sym_mangled_function_id,\n-\tcreate_main_function): Ditto.\n-\t* trans-expr.c (gfc_conv_expr_op, gfc_conv_procedure_call,\n-\tarrayfunc_assign_needs_temporary, gfc_trans_arrayfunc_assign,\n-\tgfc_trans_assignment_1): Ditto.\n-\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n-\t* trans-types.c (gfc_init_kinds): Ditto.\n-\n-2014-12-16  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/64244\n-\t* resolve.c (resolve_typebound_call): New argument to pass out the\n-\tnon-overridable attribute of the specific procedure.\n-\t(resolve_typebound_subroutine): Get overridable flag from\n-\tresolve_typebound_call.\n-\n-2014-12-15  Steven Bosscher  <steven@gcc.gnu.org>\n-\n-\tPR fortran/61669\n-\t* gfortran.h (struct gfc_namespace): Add OLD_DATA field.\n-\t* decl.c (gfc_reject_data): New function.\n-\t* parse.c *use_modules): Record roll-back point.\n-\t(next_statement): Likewise.\n-\t(reject_statement): Roll back to last accepted DATA.\n-\n-2014-12-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/63727\n-\t* resolve.c (resolve_actual_arglist): Check for elemental procedure\n-\tpointer components.\n-\n-2014-12-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/63674\n-\t* resolve.c (check_pure_function): Rewording in error message.\n-\n-2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/63674\n-\t* resolve.c (pure_function): Treat procedure-pointer components.\n-\t(check_pure_function): New function.\n-\t(resolve_function): Use it.\n-\t(pure_subroutine): Return a bool to indicate success and modify\n-\targuments.\n-\t(resolve_generic_s0,resolve_specific_s0,resolve_unknown_s): Use return\n-\tvalue of 'pure_subroutine'.\n-\t(resolve_ppc_call): Call 'pure_subroutine'.\n-\t(resolve_expr_ppc): Call 'check_pure_function'.\n-\n-2014-12-13  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* error.c (gfc_error): Add variant which takes a va_list.\n-\t(gfc_notify_std): Convert to common diagnostic.\n-\t* array.c: Use %qs, %<...%> in more gfc_error calls and\n-\tfor gfc_notify_std.\n-\t* check.c: Ditto.\n-\t* data.c: Ditto.\n-\t* decl.c: Ditto.\n-\t* expr.c: Ditto.\n-\t* interface.c: Ditto.\n-\t* intrinsic.c: Ditto.\n-\t* io.c: Ditto.\n-\t* match.c: Ditto.\n-\t* matchexp.c: Ditto.\n-\t* module.c: Ditto.\n-\t* openmp.c: Ditto.\n-\t* parse.c: Ditto.\n-\t* primary.c: Ditto.\n-\t* resolve.c: Ditto.\n-\t* simplify.c: Ditto.\n-\t* symbol.c: Ditto.\n-\t* trans-common.c: Ditto.\n-\t* trans-intrinsic.c: Ditto.\n-\n-2014-12-11  Richard Biener  <rguenther@suse.de>\n-\n-\tPR tree-optimization/42108\n-\t* trans-stmt.c (gfc_trans_do): Execute the division computing\n-\tcountm1 before the loop entry check.\n-\n-2014-12-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* error.c (pp_error_buffer): New static variable.\n-\t(pp_warning_buffer): Make it a pointer.\n-\t(gfc_output_buffer_empty_p): New.\n-\t(gfc_error_init_1): Call gfc_buffer_error.\n-\t(gfc_buffer_error): Do not use pp_warning_buffer.flush_p as the\n-\tbuffered_p flag.\n-\t(gfc_clear_warning): Likewise.\n-\t(gfc_warning_check): Call gfc_clear_warning. Only check the new\n-\tpp_warning_buffer if the old warning_buffer was empty. Call\n-\tdiagnostic_action_after_output.\n-\t(gfc_error_1): Renamed from gfc_error.\n-\t(gfc_error): New.\n-\t(gfc_clear_error): Clear also pp_error_buffer.\n-\t(gfc_error_flag_test): Check also pp_error_buffer.\n-\t(gfc_error_check): Likewise. Only check the new pp_error_buffer\n-\tif the old error_buffer was empty.\n-\t(gfc_move_output_buffer_from_to): New.\n-\t(gfc_push_error): Use it here. Take also an output_buffer as argument.\n-\t(gfc_pop_error): Likewise.\n-\t(gfc_free_error): Likewise.\n-\t(gfc_diagnostics_init): Use XNEW and placement-new to init\n-\tpp_error_buffer and pp_warning_buffer. Set flush_p to false for\n-\tboth pp_warning_buffer and pp_error_buffer.\n-\n-\t* Update gfc_push_error, gfc_pop_error and gfc_free_error calls\n-\taccording to the above changes.\n-\t* Use gfc_error_1 for all gfc_error calls that use multiple\n-\tlocations.\n-\t* Use %qs instead of '%s' for many gfc_error calls.\n-\n-2014-12-11  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* diagnostic.c (get_terminal_width): Renamed from getenv_columns,\n-\tremoved static, and additionally use ioctl to get width.\n-\t(diagnostic_set_caret_max_width): Update call.\n-\t* diagnostic.h (get_terminal_width): Add prototype.\n-\t* opts.c (print_specific_help): Use it for x_help_columns.\n-\t* doc/invoke.texi (fdiagnostics-show-caret): Document how the\n-\twidth is set.\n-\n-2014-12-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n-\n-\tPR fortran/60718\n-\t* trans-expr.c (gfc_conv_procedure_call): Fix a strict aliasing\n-\tviolation when passing a class object to a formal parameter which has\n-\tdifferent pointer or allocatable attributes.\n-\n-2014-12-06  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* error.c (gfc_error_check): Use bool not int.\n-\t* gfortran.h (gfc_error_check): Update prototype.\n-\t* match.c (gfc_match_if): Update call.\n-\t* parse.c (decode_statement, decode_omp_directive,\n-\tdecode_gcc_attribute): Ditto.\n-\n-2014-12-06  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* error.c (gfc_buffer_error, gfc_error_flag_test): Use bool not int.\n-\t(buffer_flag): Remove static variable.\n-\t(buffered_p): Add static variable.\n-\t(gfc_error_init_1): Call gfc_buffer_error.\n-\t(gfc_warning_1, gfc_warning, gfc_warning_now_1, gfc_error,\n-\tgfc_error_now_1): Update for static variable change.\n-\t* gfortran.h (gfc_buffer_error, gfc_error_flag_test): Update\n-\tprototype.\n-\t* parse.c (use_modules, decode_specification_statement,\n-\tnext_fixed, next_statement, match_deferred_characteristics):\n-\tUpdate calls.\n-\t* decl.c (gfc_match_data_decl): Ditto.\n-\t* match.c (gfc_match_name): Ditto.\n-\n-2014-12-05  Andre Vehreschild  <vehre@gmx.de>\n-\n-\tPR fortran/60414\n-\t* interface.c (compare_parameter): Remove class argument rank\n-\tcheck short circuit.\n-\n-2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* error.c (gfc_diagnostic_build_locus_prefix): Use\n-\tdiagnostic_expand_location.\n-\n-2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* scanner.c (gfc_next_char_literal): Use gfc_warning_now.\n-\t(load_file): Use the line length as the column hint for\n-\tlinemap_line_start. Reserve a location for the highest column of\n-\tthe line.\n-\n-2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* gfortran.h (gfc_warning): Now returns bool. Add overload that\n-\taccepts opt.\n-\t(gfc_warning_1): Declare.\n-\t* error.c\n-\t(pp_warning_buffer,warningcount_buffered,werrorcount_buffered):\tNew.\n-\t(gfc_buffer_error): Set pp_warning_buffer.flush_p.\n-\t(gfc_clear_pp_buffer): New.\n-\t(gfc_warning_1): Renamed from gfc_warning.\n-\t(gfc_warning): Add three new overloads. One that takes just a\n-\tformat string and ellipsis, another that takes also a warning\n-\toption, and another that takes also va_list instead of ellipsis.\n-\t(gfc_clear_warning): Clear pp_warning_buffer.\n-\t(gfc_warning_check): Flush pp_warning_buffer and update warning\n-\tand werror counters.\n-\t(gfc_diagnostics_init): Init pp_warning_buffer.\n-\n-\t* Update all gfc_warning calls that do not use multiple\n-\tlocations to use %qs and OPT_W*, otherwise use gfc_warning_1.\n-\n-2014-12-02  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* error.c (warnings_not_errors): Use bool.\n-\t(gfc_clear_error): Update.\n-\t(gfc_get_errors): Ditto. Use bool argument.\n-\t* gfortran.h (gfc_get_errors): Update prototype.\n-\t* resolve.c (resolve_global_procedure): Update call.\n-\n-2014-12-02  Richard Biener  <rguenther@suse.de>\n-\n-\tPR fortran/64137\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Check\n-\tproper expressions type, use proper type for computing\n-\t-Huge - 1.\n-\n-2014-11-29  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-openmp.c (gfc_omp_finish_clause,\n-\tgfc_trans_omp_array_reduction_or_udr, gfc_trans_omp_atomic): Remove\n-\tNULL last argument from create_tmp_var_raw and create_tmp_var calls.\n-\n-2014-11-29  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* scanner.c (skip_free_comments, gfc_gobble_whitespace): Use\n-\tgfc_warning_now instead of ..._now_1.\n-\n-2014-11-29  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* lang.opt (Wtabs): Combine duplicated item into a single\n-\tone using || for LangEnabledBy.\n-\n-2014-11-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* error.c (gfc_internal_error): Convert to common diagnostics.\n-\t* interface.c (gfc_find_sym_in_symtree): Use %qs.\n-\t* intrinsic.c (make_generic, gfc_check_intrinsic_standard,\n-\tgfc_convert_type_warn): Ditto.\n-\t* module.c (write_symbol): Ditto.\n-\t* symbol.c (gfc_get_default_type): Ditto; use fatal instead\n-\tof internal error.\n-\t* trans-array.c (gfc_walk_subexpr): Replace internal_error by\n-\tgfc_internal_error.\n-\t* trans-decl.c (gfc_get_symbol_decl,\n-\t(gfc_create_module_variable): Ditto. Use %qs.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Ditto.\n-\t* trans-io.c (transfer_expr): Ditto.\n-\t* trans-openmp.c (gfc_trans_omp_workshare): Ditto.\n-\t* trans.c (trans_code): Ditto.\n-\n-2014-11-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_option_t): Remove flags moved as Var to .opt.\n-\t(gfc_error_now_1): Renamed from gfc_error_now.\n-\t(gfc_error_now): Renamed from gfc_error_now_2.\n-\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n-\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n-\t* error.c (gfc_error_now_1): Renamed from gfc_error_now.\n-\t(gfc_error_now): Renamed from gfc_error_now_2.\n-\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n-\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n-\t(gfc_get_errors): Include common diagnostic in count.\n-\t* lang.opt (Wc-binding-type, Wconversion, Wconversion-extra,\n-\tWintrinsics-std): Create a Var for those warnings.\n-\t* check.c (gfc_check_cmplx): Pass warning flag to\n-\tdiagnostic function.\n-\t* decl.c (get_proc_name, gfc_verify_c_interop_param, build_sym\n-\tgfc_set_constant_character_len, verify_bind_c_sym): Ditto; use\n-\t_1 for old diagnostic, remove _2 for new diagnostic.\n-\t* expr.c (gfc_check_assign, gfc_check_vardef_context): Ditto.\n-\t* frontend-passes.c (doloop_code, do_function): Ditto.\n-\t* intrinsic.c (gfc_is_intrinsic, gfc_convert_type_warn): Ditto.\n-\t* match.c (gfc_match_common): Ditto.\n-\t* module.c (use_iso_fortran_env_module, gfc_use_module): Ditto.\n-\t* parse.c (decode_statement, decode_gcc_attribute, next_free,\n-\tnext_fixed, gfc_check_do_variable): Ditto.\n-\t* resolve.c (resolve_common_vars, resolve_ordinary_assign):\n-\tDitto.\n-\t* scanner.c (add_path_to_list, skip_free_comments,\n-\tgfc_next_char_literal, gfc_gobble_whitespace, load_line,\n-\tpreprocessor_line, load_file): Ditto.\n-\t* symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n-\tDitto.\n-\t* options.c (gfc_post_options): Ditto.\n-\t(gfc_init_options, set_Wall, gfc_handle_option): Ditto; remove\n-\tflags which now have a Var.\n-\t* invoke.texi (Wconversion-extra): Make clear that the flag\n-\tdoes not imply -Wconversion.\n-\n-2014-11-24  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/63938\n-\t* trans-openmp.c (gfc_trans_omp_atomic): Make sure lhsaddr is\n-\tsimple enough for goa_lhs_expr_p.\n-\n-2014-11-24  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* error.c (gfc_fatal_error_1): Remove.\n-\t* gfortran.h (gfc_fatal_error_1): Remove.\n-\t* check.c (check_co_collective): Change gfc_fatal_error_1 to\n-\tgfc_fatal_error.\n-\t* match.c (gfc_match_name): Ditto.\n-\t* trans-array.c (gfc_conv_array_initializer): Ditto.\n-\t* trans-stmt.c (gfc_trans_sync): Ditto.\n-\n-2014-11-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* decl.c (gfc_verify_c_interop_param): Use gfc_error_now_2.\n-\t(gfc_set_constant_character_len): Use gfc_warning_now_2.\n-\t* resolve.c (resolve_ordinary_assign): Likewise.\n-\t* gfortran.h (warn_character_truncation): Do not declare here.\n-\t* error.c (gfc_format_decoder): Handle %L.\n-\t* lang.opt (Wcharacter-truncation): Add Var and LangEnabledBy.\n-\t* options.c (gfc_init_options): Do not handle\n-\twarn_character_truncation explicitly.\n-\t(set_Wall): Likewise.\n-\t(gfc_handle_option): Likewise.\n-\n-2014-11-23  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* invoke.texi (-Wtabs): Swap -Wtabs/-Wno-tabs now that\n-\t-Wtabs enables the warning.\n-\n-2014-11-23  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* error.c (gfc_diagnostic_build_prefix): Correct coloring\n-\tof the colon of the prefix.\n-\n-2014-11-23  Tobias Burnus  <burnus@net-b.de>\n-\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_option_t): Remove warn_tabs.\n-\t* lang.opt (Wpedantic): Add.\n-\t(Wtabs): Use Var and LangEnabledBy.\n-\t* options.c (gfc_init_options, gfc_post_options,\n-\tset_Wall): Remove -Wtabs handling.\n-\t(gfc_handle_option): Update -std=, remove OPT_Wtabs.\n-\t* scanner.c (gfc_gobble_whitespace): Update for\n-\tflag-variable renaming.\n-\t(load_line): Ditto. Pass warn flag to diagnostic.\n-\n-2014-11-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-expr.c (gfc_caf_get_image_index): Fix image calculation.\n-\n-2014-11-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error.\n-\t(gfc_fatal_error): Add; uses common diagnostics.\n-\t* array.c (gfc_match_array_ref, gfc_match_array_spec): Use\n-\t%< %>.\n-\t* check.c (check_co_collective, gfc_check_lcobound,\n-\tgfc_check_image_index, gfc_check_num_images,\n-\tgfc_check_this_image, gfc_check_ucobound): Ditto.\n-\t* cpp.c (gfc_cpp_post_options): Ditto.\n-\t(gfc_cpp_init_0, gfc_cpp_done): Change %s to %qs.\n-\t* gfc-diagnostic.def (DK_FATAL): Capitalize first letter.\n-\t* gfortran.h (gfc_fatal_error_1): Add.\n-\t* match.c (gfc_match_name, gfc_match_critical,\n-\tlock_unlock_statement, sync_statement): Add %< %>.\n-\t* module.c (bad_module, gfc_dump_module, gfc_use_module): Change\n-\t%s to %qs.\n-\t* options.c (gfc_handle_module_path_options, gfc_handle_fpe_option,\n-\tgfc_handle_coarray_option, gfc_handle_runtime_check_option,\n-\tgfc_handle_option): Add %< %>.\n-\t* simplify.c (gfc_simplify_num_images): Ditto.\n-\t* trans-stmt.c (gfc_trans_sync): Use gfc_fatal_error_1.\n-\t* trans-array.c (gfc_conv_array_initializer): Ditto.\n-\t* trans-types.c (gfc_init_kinds): Use gfc_fatal_error instead\n-\tof fatal_error; add %< %> quotations.\n-\n-2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\t    Ilya Verbin  <ilya.verbin@intel.com>\n-\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n-\n-\t* Make-lang.in (fortran.install-common): Do not install for the offload\n-\tcompiler.\n-\n-2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* gfortran.h (warn_use_without_only): Remove.\n-\t(gfc_diagnostics_finish): Declare.\n-\t* error.c: Include tree-diagnostics.h\n-\t(gfc_format_decoder): New.\n-\t(gfc_diagnostics_init): Use gfc_format_decoder. Set default caret\n-\tchar.\n-\t(gfc_diagnostics_finish): Restore tree diagnostics defaults, but\n-\tkeep gfc_diagnostics_starter and finalizer. Restore default caret.\n-\t* options.c: Remove all uses of warn_use_without_only.\n-\t* lang.opt (Wuse-without-only): Add Var.\n-\t* f95-lang.c (gfc_be_parse_file): Call gfc_diagnostics_finish.\n-\t* module.c (gfc_use_module): Use gfc_warning_now_2.\n-\t* parse.c (decode_statement): Likewise.\n-\t(decode_gcc_attribute): Likewise.\n-\t(next_free): Likewise.\n-\t(next_fixed): Likewise.\n-\n-2014-11-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-\n-\tPR fortran/63701\n-\t* trans-expr.c (gfc_get_tree_for_caf_expr): Initialise found to false.\n-\n-2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/47007\n-\tPR libfortran/61847\n-\t* gfortran.texi: Add note about locale issues to thread-safety\n-\tsection.\n-\n-2014-11-04  Bernd Schmidt  <bernds@codesourcery.com>\n-\n-\t* f95-lang.c (gfc_init_builtin_functions): Use type index 2 for\n-\tscalbn, scalbnl and scalbnf.\n-\t* mathbuiltins.def (JN, YN): Use type index 5.\n-\n-2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n-\n-\t* trans-types.c, trans-types.h: Remove redundant enum from\n-\tmachine_mode.\n-\n-2014-10-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* gfortran.h (gfc_warning_cmdline): Rename as gfc_warning_now_2.\n-\t(gfc_error_cmdline): Rename as gfc_error_now_2.\n-\t* error.c (gfc_diagnostic_build_locus_prefix): Remove trailing space.\n-\t(gfc_diagnostic_starter): Add space between locus and prefix.\n-\t(gfc_warning_now_2): Renamed from gfc_warning_cmdline.\n-\t(gfc_error_now_2): Renamed from gfc_error_cmdline.\n-\t* scanner.c (add_path_to_list): Use gfc_warning_now_2.\n-\t(load_line): Likewise.\n-\t(load_file): Likewise.\n-\t* options.c (gfc_post_options): Update all renamed functions.\n-\n-2014-10-28  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* f95-lang.c: Adjust include files.\n-\t* trans-decl.c: Ditto.\n-\n-2014-10-24  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (check_co_collective): Reject coindexed A args.\n-\t(gfc_check_co_reduce): Add OPERATOR checks.\n-\t* gfortran.texi (_gfortran_caf_co_broadcast, _gfortran_caf_co_max,\n-\t_gfortran_caf_co_min, _gfortran_caf_co_sum,\n-\t_gfortran_caf_co_reduce): Add ABI documentation.\n-\t* intrinsic.texi (CO_REDUCE): Document intrinsic.\n-\t(DPROD): Returns double not single precision.\n-\t* trans-decl.c (gfor_fndecl_co_reduce): New global var.\n-\t(gfc_build_builtin_function_decls): Init it.\n-\t* trans.h (gfor_fndecl_co_reduce): Declare it.\n-\t* trans-intrinsic.c (conv_co_collective,\n-\tgfc_conv_intrinsic_subroutine): Handle CO_REDUCE.\n-\n-2014-10-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/48979\n-\t* trans-const.c (gfc_build_nan): New function.\n-\t* trans-const.h (gfc_build_nan): New prototype.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_exponent): Handle special\n-\tvalues.\n-\t(gfc_conv_intrinsic_minmaxval): Use gfc_build_nan.\n-\t(gfc_conv_intrinsic_fraction): Handle special values.\n-\t(gfc_conv_intrinsic_spacing): Likewise.\n-\t(gfc_conv_intrinsic_rrspacing): Likewise.\n-\t(gfc_conv_intrinsic_set_exponent): Likewise.\n-\n-2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/63553\n-\t* resolve.c (resolve_ordinary_assign): Add data component to\n-\trvalue expression for class to type assignment.\n-\n-2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* f95-lang.c: Adjust include files.\n-\t* trans-decl.c: Likewise.\n-\n-2014-10-12  Trevor Saunders  <tsaunders@mozilla.com>\n-\n-\t* trans-decl.c, trans.c, trans.h: Use hash_table instead of hashtab.\n-\n-2014-10-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/48979\n-\t* simplify.c (gfc_simplify_atan): Use mpfr_zero_p to check for zeros.\n-\t(gfc_simplify_log): Likewise.\n-\t(gfc_simplify_scale): Likewise.\n-\t(gfc_simplify_exponent): Handle infinities and NaNs.\n-\t(gfc_simplify_fraction): Handle infinities.\n-\t(gfc_simplify_rrspacing): Handle signed zeros and NaNs.\n-\t(gfc_simplify_set_exponent): Handle infinities and NaNs.\n-\t(gfc_simplify_spacing): Handle zeros, infinities and NaNs.\n-\n-2014-10-10  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/59488\n-\t* trans-openmp.c (gfc_omp_predetermined_sharing): Return\n-\tOMP_CLAUSE_DEFAULT_SHARED for parameters or vtables.\n-\n-2014-10-10  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_set_implicit_none): Update prototype.\n-\t* symbol.c (gfc_set_implicit_none): Take and\n-\tuse error location. Move diagnostic from here to ...\n-\t* decl.c (gfc_match_implicit_none): ... here. And\n-\tupdate call. Handle empty implicit-none-spec.\n-\t(gfc_match_implicit): Handle statement-separator \";\".\n-\n-2014-10-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* f95-lang.c (gfc_init_builtin_functions): Add more floating-point\n-\tbuilt-ins.\n-\t* mathbuiltins.def (OTHER_BUILTIN): Define built-ins for logb,\n-\tremainder, rint and signbit.\n-\t* trans-decl.c (save_fp_state, restore_fp_state): Move to\n-\ttrans-intrinsic.c\n-\t(gfc_generate_function_code): Use new names for these two functions.\n-\t* trans-expr.c (gfc_conv_function_expr): Catch IEEE functions to\n-\temit code from the front-end.\n-\t* trans-intrinsic.c (gfc_save_fp_state, gfc_restore_fp_state,\n-\tconv_ieee_function_args, conv_intrinsic_ieee_builtin,\n-\tconv_intrinsic_ieee_is_normal, conv_intrinsic_ieee_is_negative,\n-\tconv_intrinsic_ieee_logb_rint, conv_intrinsic_ieee_rem,\n-\tconv_intrinsic_ieee_next_after, conv_intrinsic_ieee_scalb,\n-\tconv_intrinsic_ieee_copy_sign, gfc_conv_ieee_arithmetic_function):\n-\tNew functions.\n-\t* trans.h (gfc_conv_ieee_arithmetic_function,\n-\tgfc_save_fp_state, gfc_restore_fp_state): New prototypes.\n-\n-2014-10-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\tPR fortran/54687\n-\t* gfortran.h (gfc_warning_cmdline): Add overload that takes an\n-\toption.\n-\t(gfc_error_cmdline): Declare.\n-\t* error.c (gfc_warning_cmdline): New overload that takes an option.\n-\t(gfc_error_cmdline): New.\n-\t* lang.opt (Wmissing-include-dirs): New.\n-\t* scanner.c (add_path_to_list): Use the new functions.\n-\t(load_file): Likewise.\n-\t* options.c (gfc_init_options): Wmissing-include-dirs is enabled\n-\tby default in Fortran.\n-\t(gfc_handle_option): Accept automatically handled options.\n-\n-2014-10-06  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* libgfortran.h (GFC_STD_F2015): Add.\n-\t* decl.c (gfc_match_implicit_none): Handle spec list.\n-\t(gfc_match_implicit): Move double intrinsic warning here.\n-\t* gfortran.h (gfc_namespace): Add has_implicit_none_export:1.\n-\t(gfc_set_implicit_none): Update interface.\n-\t* interface.c (gfc_procedure_use): Add implicit-none external\n-\terror check.\n-\t* parse.c (accept_statement): Remove call.\n-\t(verify_st_order): Permit that external-implict-none follows\n-\timplicit statement.\n-\t* symbol.c (gfc_set_implicit_none): Handle external/type\n-\timplicit none.\n-\n-2014-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/36534\n-\t* resolve.c (resolve_fl_procedure): Clean up obsolescence warning.\n-\n-2014-09-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (check_co_collective): Renamed from check_co_minmaxsum,\n-\thandle co_reduce.\n-\t(gfc_check_co_minmax, gfc_check_co_sum): Update call.\n-\t(gfc_check_co_broadcast, gfc_check_co_reduce): New.\n-\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_BROADCAST and\n-\tGFC_ISYM_CO_REDUCE.\n-\t* intrinsic.c (add_subroutines): Add co_reduce and co_broadcast.\n-\t* intrinsic.h (gfc_check_co_broadcast, gfc_check_co_reduce): Add\n-\tproto types.\n-\t* intrinsic.texi (CO_BROADCAST): Add.\n-\t* trans.h (gfor_fndecl_co_broadcast): New.\n-\t* trans-decl.c (gfor_fndecl_co_broadcast): Ditto.\n-\t(gfc_build_builtin_function_decls): Add decl for it,\n-\t* trans-intrinsic.c (conv_co_collective): Renamed from\n-\tconv_co_minmaxsum. Handle co_reduce.\n-\t(gfc_conv_intrinsic_subroutine): Handle co_reduce.\n-\n-2014-09-23  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/63331\n-\t* trans-types.c (gfc_get_array_descr_info): Build DEBUG_EXPR_DECL\n-\tinstead of VAR_DECL for base_decl.\n-\n-2014-09-21  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* openmp.c (omp_context): Rename to ...\n-\t(fortran_omp_context): ... this one.\n-\n-2014-09-21  Dominique d'Humieres <dominiq@lps.ens.fr>\n-\n-\t* resolve.c (resolve_fl_procedure): Remove duplicated lines.\n-\n-2014-09-20  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Fix issue with\n-\tgenerating temporary for value argument.\n-\n-2014-09-20  Joost VandeVondele  <vondele@gcc.gnu.org>\n-\n-\t* trans-expr.c (gfc_reset_vptr): Fix comment whitespace.\n-\t(gfc_conv_class_to_class): Likewise.\n-\t(gfc_conv_procedure_call): Likewise.\n-\t(arrayfunc_assign_needs_temporary): Likewise.\n-\t(realloc_lhs_loop_for_fcn_call): Likewise.\n-\t(gfc_trans_assignment_1): Likewise.\n-\t* trans-array.c (gfc_conv_array_ref): Likewise.\n-\t(gfc_array_allocate): Likewise.\n-\t(gfc_alloc_allocatable_for_assignment): Likewise.\n-\t* symbol.c (generate_isocbinding_symbol): Likewise.\n-\t* class.c (finalization_scalarizer): Likewise.\n-\t(finalizer_insert_packed_call): Likewise.\n-\t(generate_finalization_wrapper): Likewise.\n-\t(find_intrinsic_vtab): Likewise.\n-\t* decl.c (gfc_match_import): Likewise.\n-\t(match_procedure_decl): Likewise.\n-\t(gfc_match_subroutine): Likewise.\n-\t(gfc_match_bind_c): Likewise.\n-\t(gfc_match_volatile): Likewise.\n-\t* trans-common.c (create_common): Likewise.\n-\t* error.c (gfc_diagnostic_starter): Likewise.\n-\t* trans-stmt.c (gfc_trans_sync): Likewise.\n-\t(gfc_trans_critical): Likewise.\n-\t(gfc_trans_simple_do): Likewise.\n-\t(gfc_trans_do): Likewise.\n-\t(gfc_trans_where_assign): Likewise.\n-\t* expr.c (gfc_is_simply_contiguous): Likewise.\n-\t* module.c (unquote_string): Likewise.\n-\t* trans.c (gfc_add_finalizer_call): Likewise.\n-\t* trans-types.c (gfc_init_kinds): Likewise.\n-\t* scanner.c (preprocessor_line): Likewise.\n-\t* gfortranspec.c (lang_specific_driver): Likewise.\n-\t* frontend-passes.c (create_var): Likewise.\n-\t(cfe_expr_0): Likewise.\n-\t* resolve.c (check_host_association): Likewise.\n-\t(gfc_resolve_code): Likewise.\n-\t(resolve_fl_derived0): Likewise.\n-\t(resolve_symbol): Likewise.\n-\t* f95-lang.c (poplevel): Likewise.\n-\t* trans-decl.c (create_main_function): Likewise.\n-\t* trans-io.c (transfer_expr): Likewise.\n-\t* arith.c (gfc_arith_divide): Likewise.\n-\t* parse.c (resolve_all_program_units): Likewise.\n-\t* check.c (gfc_check_rank): Likewise.\n-\t(gfc_check_sizeof): Likewise.\n-\t(is_c_interoperable): Likewise.\n-\t* dependency.c (gfc_dep_difference): Likewise.\n-\t* primary.c (gfc_match_rvalue): Likewise.\n-\t* trans-intrinsic.c (conv_intrinsic_system_clock): Likewise.\n-\t(conv_isocbinding_subroutine): Likewise.\n-\t* options.c (gfc_post_options): Likewise.\n-\t(gfc_handle_fpe_option): Likewise.\n-\t(gfc_get_option_string): Likewise.\n-\t* simplify.c (simplify_transformation_to_scalar): Likewise.\n-\t(gfc_simplify_spread): Likewise.\n-\n-2014-09-19  Joost VandeVondele  <vondele@gcc.gnu.org>\n-\n-\tPR fortran/63152\n-\t* trans-array.c (gfc_trans_deferred_array): Only nullify allocatables.\n-\n-2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* Make-lang.in (check_gfortran_parallelize): Change to just an upper\n-\tbound number.\n-\n-2014-09-13  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/63252\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Fix\n-\tcaf_unlock declaration.\n-\n-2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n-\n-\t* trans-types.c (gfc_init_kinds): Check\n-\ttargetm.libgcc_floating_mode_supported_p for floating-point\n-\tmodes.  Check HAVE_TFmode instead of LIBGCC2_HAS_TF_MODE.\n-\n-2014-09-05  Joost VandeVondele  <vondele@gcc.gnu.org>\n-\n-\tPR fortran/62245\n-\t* intrinsic.texi (INT): clarify result.\n-\n-2014-09-03  Fritz Reese  <Reese-Fritz@zai.com>\n-\n-\tPR fortran/62174\n-\t* decl.c (variable_decl): Don't overwrite typespecs of Cray pointees\n-\twhen matching a component declaration.\n-\n-2014-09-02  Marek Polacek  <polacek@redhat.com>\n-\n-\tPR fortran/62270\n-\t* interface.c (compare_parameter): Fix condition.\n-\t* trans-expr.c (gfc_conv_procedure_call): Likewise.\n-\n-2014-08-31  Fritz Reese  <Reese-Fritz@zai.com>\n-\n-\tPR fortran/62309\n-\t* resolve.c (apply_default_init_local): Don't treat variables\n-\tin RECURSIVE procedures as saved.\n-\n-2014-08-31  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Add\n-\tmay_require_tmp dummy argument.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get,\n-\tconv_caf_send): Handle may_require_tmp argument.\n-\t(gfc_conv_intrinsic_function): Update call.\n-\t* gfortran.texi (_gfortran_caf_send, _gfortran_caf_get,\n-\t_gfortran_caf_sendget): Update interface description.\n-\n-2014-08-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans.h (gfc_caf_get_image_index,\n-\tgfc_get_caf_token_offset): New prototypes.\n-\t* trans-expr.c (gfc_caf_get_image_index): Moved from\n-\ttrans-intrinsic.c and renamed.\n-\t(gfc_get_caf_token_offset) Ditto; support offset = NULL\n-\twith early return.\n-\t* trans-intrinsic.c (get_caf_token_offset, caf_get_image_index):\n-\tMoved to trans-expr.\n-\t(gfc_conv_intrinsic_caf_get, conv_caf_send,\n-\tconv_intrinsic_atomic_op, conv_intrinsic_atomic_ref,\n-\tconv_intrinsic_atomic_cas): Update callers.\n-\n-2014-08-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/62278\n-\tPR fortran/44735\n-\tPR fortran/60593\n-\t* dependency.c (gfc_check_dependency): Allow for optimizations\n-\tin the pointer-alias check.\n-\n-2014-08-30  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* module.c (gfc_dump_module): Use ISO C remove() instead of POSIX\n-\tunlink().\n-\n-2014-08-29  Jeffrey Armstrong  <jeffrey.armstrong@approximatrix.com>\n-\n-\tPR fortran/62215\n-\t* module.c (gfc_dump_module): Unlink old module file before\n-\trenaming new one.\n-\n-2014-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* frontend_passes (expr_array):  Replace by vec template.\n-\t(expr_size):  Remove.\n-\t(expr_count):  Remove.\n-\t(doloop_list):  Replace by vec template.\n-\t(doloop_size):  Remove.\n-\t(gfc_run_passes):  Adjust to use of vec template.\n-\t(cfe_register_funcs):  Likewise.\n-\t(cfe_expr_0):  Likewise.\n-\t(doloop_code):  Likewise.\n-\n-2014-08-22  Steven Bosscher  <steven@gcc.gnu.org>\n-\n-\tPR fortran/62135\n-\t* resolve.c (resolve_select): Fix list traversal in case the\n-\tlast element of the CASE list was dropped as unreachable code.\n-\n-2014-08-22  Joost VandeVondele  <Joost.VandeVondele@mat.ethz.ch>\n-\n-\tPR fortran/61234\n-\t* lang.opt (Wuse-without-only): New flag.\n-\t* gfortran.h (gfc_option_t): Add it.\n-\t* invoke.texi: Document it.\n-\t* module.c (gfc_use_module): Warn if needed.\n-\t* options.c (gfc_init_options,gfc_handle_option): Init accordingly.\n-\n-2014-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/62214\n-\t* frontend-passes.c (optimize_binop_array_assignment):\n-\tDo not try to optimize the array assignment for string\n-\tconcatenation.\n-\n-2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* error.c (gfc_diagnostic_build_locus_prefix): New function.\n-\t(gfc_diagnostic_starter): Follow Fortran FE diagnostics.\n-\t(gfc_diagnostic_finalizer): Do not call default finalizer.\n-\n-2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* error.c (gfc_diagnostic_finalizer): Call default finalizer.\n-\n-2014-08-20  Joost VandeVondele  <Joost.VandeVondele@mat.ethz.ch>\n-\n-\t* options.c (gfc_init_options_struct): assert that the frontend sets\n-\tflag_errno_math and flag_associative_math.\n-\n-2014-08-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (gfc_resolve_finalizers): Ensure that parents are\n-\tresolved first.\n-\n-2014-08-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-io.c (gfc_build_io_library_fndecls): Fix decl of\n-\tIOCALL_SET_NML_VAL.\n-\t(transfer_namelist_element): Use proper int type as argument.\n-\n-2014-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/62142\n-\t* trans-expr.c (is_runtime_conformable):  Add NULL pointer checks.\n-\n-2014-08-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (resolve_critical): Fix name mangling.\n-\t* trans-stmt.c (gfc_trans_critical): Fix lock call.\n-\n-2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/44054\n-\t* gfortran.h: Define GCC_DIAG_STYLE.\n-\t(gfc_diagnostics_init,gfc_warning_cmdline): Declare.\n-\t* trans-array.c: Include gfortran.h before diagnostic-core.h.\n-\t* trans-expr.c: Likewise.\n-\t* trans-openmp.c: Likewise.\n-\t* trans-const.c: Likewise.\n-\t* trans.c: Likewise.\n-\t* trans-types.c: Likewise.\n-\t* f95-lang.c: Likewise.\n-\t* trans-decl.c: Likewise.\n-\t* trans-io.c: Likewise.\n-\t* trans-intrinsic.c: Likewise.\n-\t* error.c: Include diagnostic.h and diagnostic-color.h.\n-\t(gfc_diagnostic_build_prefix): New.\n-\t(gfc_diagnostic_starter): New.\n-\t(gfc_diagnostic_finalizer): New.\n-\t(gfc_warning_cmdline): New.\n-\t(gfc_diagnostics_init): New.\n-\t* gfc-diagnostic.def: New.\n-\t* options.c (gfc_init_options): Call gfc_diagnostics_init.\n-\t(gfc_post_options): Use gfc_warning_cmdline.\n-\n-2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/62131\n-\t* openmp.c (resolve_omp_atomic): Only complain if code->expr1's attr\n-\tis allocatable, rather than whenever var->attr.allocatable.\n-\n-2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/62107\n-\t* trans-openmp.c (gfc_omp_finish_clause): Handle scalar pointer\n-\tor allocatable passed by reference.\n-\t(gfc_trans_omp_clauses) <case OMP_LIST_MAP>: Likewise.\n-\n-2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/62106\n-\t* gfortran.h (symbol_attribute):  Add fe_temp flag.\n-\t* frontend-passes.c (is_fe_temp):  New function.\n-\t(create_var):  Don't add a temporary for an already\n-\tcreated variable or for a constant.\n-\t(combine_ARRAY_constructor):  Remove special handling\n-\tfor constants.\n-\n-2014-08-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (caf_register_t): Add CAF_REGTYPE_CRITICAL.\n-\t(_gfortran_caf_register): Update for locking/critical.\n-\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n-\t* resolve.c (resolve_critical): New.\n-\t(gfc_resolve_code): Call it.\n-\t* trans-decl.c (gfor_fndecl_caf_critical,\n-\tgfor_fndecl_caf_end_critical): Remove.\n-\t(gfor_fndecl_caf_lock, gfor_fndecl_caf_unlock): Add.\n-\t(gfc_build_builtin_function_decls): Remove critical,\n-\tassign locking declarations.\n-\t(generate_coarray_sym_init): Handle locking and\n-\tcritical variables.\n-\t* trans-stmt.c (gfc_trans_critical): Add calls to\n-\tlock/unlock libcaf functions.\n-\t* trans.h (gfc_coarray_type): Update locking, add\n-\tcritical enum values.\n-\t(gfor_fndecl_caf_critical, gfor_fndecl_caf_end_critical): Remove.\n-\t(gfor_fndecl_caf_lock, gfor_fndecl_caf_unlock): Add.\n-\n-2014-08-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (Coarray Programming): Add first ABI\n-\tdocumentation.\n-\n-2014-08-14  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/62076\n-\t* openmp.c (gfc_match_omp_clauses): When failed to match\n-\toperator name, defined op name or name, set buffer to\n-\tempty string.  Don't call gfc_find_omp_udr if buffer is empty\n-\tstring.\n-\t(gfc_match_omp_declare_reduction): Call gfc_undo_symbols ()\n-\tbefore calling gfc_free_omp_udr.\n-\n-2014-08-11  Richard Biener  <rguenther@suse.de>\n-\n-\tPR fortran/61950\n-\t* trans-expr.c (gfc_conv_structure): Initialize _size with\n-\ta value of proper type.\n-\n-2014-08-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/61999\n-\t* simplify.c (gfc_simplify_dot_product): Convert types of\n-\tvectors before calculating the result.\n-\n-2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n-\n-\t* openmp.c, trans-decl.c: Use hash_set instead of pointer_set.\n-\n-2014-07-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/61881\n-\tPR fortran/61888\n-\tPR fortran/57305\n-\t* intrinsic.texi (SIZEOF): Document changed behavior\n-\tfor polymorphic arrays.\n-\n-2014-07-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/61881\n-\tPR fortran/61888\n-\tPR fortran/57305\n-\t* check.c (gfc_check_sizeof): Permit for assumed type if and\n-\tonly if it has an array descriptor.\n-\t* intrinsic.c (do_ts29113_check): Permit SIZEOF.\n-\t(add_functions): SIZEOF is an Inquiry function.\n-\t* intrinsic.texi (SIZEOF): Add note that only contiguous\n-\tarrays are permitted.\n-\t* trans-expr.c (gfc_conv_intrinsic_to_class): Handle assumed\n-\trank.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof): Handle\n-\tassumed type + array descriptor, CLASS and assumed rank.\n-\t(gfc_conv_intrinsic_storage_size): Handle class arrays.\n-\n-2014-07-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* simplify.c (gfc_simplify_storage_size): Use proper\n-\tinteger kind for the returned value.\n-\n-2014-07-24  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* intrinsic.texi (Intrinsic Procedures) <ATOMIC_DEFINE>: Move to\n-\tcorrect menu position to match sectioning.\n-\n-2014-06-15  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* symbol.c (check_conflict): Add codimension conflict with\n-\tpointer; fix cray-pointee check.\n-\n-2014-06-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (conv_intrinsic_atomic_ref): Fix handling\n-\tfor kind mismatch with -fcoarray=lib.\n-\n-2014-07-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/61780\n-\t* dependency.c (gfc_dep_resolver): Index the 'reverse' array so\n-\tthat elements are skipped. This then correctly aligns 'reverse'\n-\twith the scalarizer loops.\n-\n-2014-07-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/61628\n-\t* trans-types.c (gfc_init_types): Fix data-type bug\n-\twith gfc_max_array_element_size.\n-\n-2014-07-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* libgfortran.h (libcaf_atomic_codes): Add.\n-\t* trans-decl.c (gfor_fndecl_caf_atomic_def,\n-\tgfor_fndecl_caf_atomic_ref, gfor_fndecl_caf_atomic_cas,\n-\tgfor_fndecl_caf_atomic_op): New variables.\n-\t(gfc_build_builtin_function_decls): Initialize them.\n-\t* trans.h (gfor_fndecl_caf_atomic_def,\n-\tgfor_fndecl_caf_atomic_ref, gfor_fndecl_caf_atomic_cas,\n-\tgfor_fndecl_caf_atomic_op): New variables.\n-\t* trans-intrinsic.c (conv_intrinsic_atomic_op,\n-\tconv_intrinsic_atomic_ref, conv_intrinsic_atomic_cas):\n-\tAdd library calls with -fcoarray=lib.\n-\n-2014-07-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (gfc_check_atomic): Update for STAT=.\n-\t(gfc_check_atomic_def, gfc_check_atomic_ref): Update call.\n-\t(gfc_check_atomic_op, gfc_check_atomic_cas,\n-\tgfc_check_atomic_fetch_op): New.\n-\t* gfortran.h (gfc_isym_id): GFC_ISYM_ATOMIC_CAS, GFC_ISYM_ATOMIC_ADD,\n-\tGFC_ISYM_ATOMIC_AND, GFC_ISYM_ATOMIC_OR, GFC_ISYM_ATOMIC_XOR,\n-\tGFC_ISYM_ATOMIC_FETCH_ADD, GFC_ISYM_ATOMIC_FETCH_AND,\n-\tGFC_ISYM_ATOMIC_FETCH_OR and GFC_ISYM_ATOMIC_FETCH_XOR.\n-\t* intrinsic.c (add_subroutines): Handle them.\n-\t* intrinsic.texi: Add documentation for them.\n-\t(ATOMIC_REF, ATOMIC_DEFINE): Add STAT=.\n-\t(ISO_FORTRAN_ENV): Add STAT_FAILED_IMAGE.\n-\t* intrinsic.h (gfc_check_atomic_op, gfc_check_atomic_cas,\n-\tgfc_check_atomic_fetch_op): New\n-\tprototypes.\n-\t* libgfortran.h (libgfortran_stat_codes): Add GFC_STAT_FAILED_IMAGE.\n-\t* iso-fortran-env.def: Add it.\n-\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Renamed from\n-\tconv_intrinsic_atomic_ref; handle more atomics.\n-\t(conv_intrinsic_atomic_def): Handle STAT=.\n-\t(conv_intrinsic_atomic_cas): New.\n-\t(gfc_conv_intrinsic_subroutine): Handle new atomics.\n-\n-2014-07-09  Bernd Schmidt  <bernds@codesourcery.com>\n-\n-\t* trans-array.c (gfc_build_constant_array_constructor): Build a\n-\tstatic decl manually.\n-\t* trans-decl.c (create_main_function): Likewise.\n-\n-2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/61459\n-\tPR fortran/58883\n-\t* trans-expr.c (fcncall_realloc_result): Use the natural type\n-\tfor the address expression of 'res_desc'.\n-\n-2014-07-07  Gerald Pfeifer  <gerald@pfeifer.com>\n-\n-\t* gfortran.texi (Fortran 2003 status): Fix grammar.\n-\n-2014-07-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (resolve_assoc_var): Fix corank setting.\n-\t* trans-array.c (gfc_conv_descriptor_token): Change assert.\n-\tfor select-type temporaries.\n-\t* trans-decl.c (generate_coarray_sym_init): Skip for\n-\tattr.select_type_temporary.\n-\t* trans-expr.c (gfc_conv_procedure_call): Fix for\n-\tselect-type temporaries.\n-\t* trans-intrinsic.c (get_caf_token_offset): Ditto.\n-\t(gfc_conv_intrinsic_caf_get, gfc_conv_intrinsic_caf_send): Set\n-\tthe correct dtype.\n-\t* trans-types.h (gfc_get_dtype_rank_type): New.\n-\t* trans-types.c (gfc_get_dtype_rank_type): Ditto.\n-\n-2014-07-03  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* scanner.c (skip_free_comments): Fix indentation.\n-\n-2014-07-02  Jakub Jelinek  <jakub@redhat.com>\n-\t    Fritz Reese  <Reese-Fritz@zai.com>\n-\n-\t* decl.c (variable_decl): Reject old style initialization\n-\tfor derived type components.\n-\n-2014-06-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/36275\n-\tPR fortran/38839\n-\t* decl.c (check_bind_name_identifier): New function.\n-\t(gfc_match_bind_c): Match any constant expression as binding\n-\tlabel.\n-\t* match.c (gfc_match_name_C): Remove.\n-\n-2014-06-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/29383\n-\t* gfortran.h (gfc_simplify_ieee_selected_real_kind): New prototype.\n-\t* libgfortran.h (GFC_FPE_*): Use simple integer values, valid in\n-\tboth C and Fortran.\n-\t* expr.c (gfc_check_init_expr): Simplify IEEE_SELECTED_REAL_KIND.\n-\t* simplify.c (gfc_simplify_ieee_selected_real_kind): New function.\n-\t* module.c (mio_symbol): Keep track of symbols which came from\n-\tintrinsic modules.\n-\t(gfc_use_module): Keep track of the IEEE modules.\n-\t* trans-decl.c (gfc_get_symbol_decl): Adjust code since\n-\twe have new intrinsic modules.\n-\t(gfc_build_builtin_function_decls): Build decls for\n-\tieee_procedure_entry and ieee_procedure_exit.\n-\t(is_from_ieee_module, is_ieee_module_used, save_fp_state,\n-\trestore_fp_state): New functions.\n-\t(gfc_generate_function_code): Save and restore floating-point\n-\tstate on procedure entry/exit, when IEEE modules are used.\n-\t* intrinsic.texi: Document the IEEE modules.\n-\n-2014-06-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* interface.c (check_intents): Fix diagnostic with\n-\tcoindexed coarrays.\n-\n-2014-06-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (resolve_ordinary_assign): Don't invoke caf_send\n-\twhen assigning a coindexed RHS scalar to a noncoindexed LHS\n-\tarray.\n-\t* trans-intrinsic.c (conv_caf_send): Do numeric type conversion\n-\tfor a noncoindexed scalar RHS.\n-\n-2014-06-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (check_co_minmaxsum): Add definable check.\n-\t* expr.c (gfc_check_vardef_context): Fix context == NULL case.\n-\t* trans-expr.c (get_scalar_to_descriptor_type): Handle pointer\n-\targuments.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fix generation of\n-\ttemporary strings.\n-\n-2014-06-25  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans.h (gfc_omp_clause_linear_ctor): New prototype.\n-\t* trans-openmp.c (gfc_omp_linear_clause_add_loop,\n-\tgfc_omp_clause_linear_ctor): New functions.\n-\t(gfc_trans_omp_clauses): Make sure OMP_CLAUSE_LINEAR_STEP has\n-\tcorrect type.  Set OMP_CLAUSE_LINEAR_ARRAY flag if needed.\n-\t* f95-lang.c (LANG_HOOKS_OMP_CLAUSE_LINEAR_CTOR): Redefine.\n-\n-2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* dump-parse-tree.c (show_omp_namelist): Use n->udr->udr instead\n-\tof n->udr.\n-\t* f95-lang.c (gfc_init_builtin_functions): Initialize\n-\tBUILT_IN_ASSUME_ALIGNED.\n-\t* gfortran.h (gfc_omp_namelist): Change udr field type to\n-\tstruct gfc_omp_namelist_udr.\n-\t(gfc_omp_namelist_udr): New type.\n-\t(gfc_get_omp_namelist_udr): Define.\n-\t(gfc_resolve_code): New prototype.\n-\t* match.c (gfc_free_omp_namelist): Free name->udr.\n-\t* module.c (intrinsics): Add INTRINSIC_USER.\n-\t(fix_mio_expr): Likewise.\n-\t(mio_expr): Handle INSTRINSIC_USER and non-resolved EXPR_FUNCTION.\n-\t* openmp.c (gfc_match_omp_clauses): Adjust initialization of n->udr.\n-\t(gfc_match_omp_declare_reduction): Treat len=: the same as len=*.\n-\tSet attr.flavor on omp_{out,in,priv,orig} artificial variables.\n-\t(struct resolve_omp_udr_callback_data): New type.\n-\t(resolve_omp_udr_callback, resolve_omp_udr_callback2,\n-\tresolve_omp_udr_clause): New functions.\n-\t(resolve_omp_clauses): Adjust for n->udr changes, resolve UDR clauses\n-\there.\n-\t(omp_udr_callback): Don't check for implicitly declared functions\n-\there.\n-\t(gfc_resolve_omp_udr): Don't call gfc_resolve.  Don't check for\n-\timplicitly declared subroutines here.\n-\t* resolve.c (resolve_function): If value.function.isym is non-NULL,\n-\tconsider it already resolved.\n-\t(resolve_code): Renamed to ...\n-\t(gfc_resolve_code): ... this.  No longer static.\n-\t(gfc_resolve_blocks, generate_component_assignments, resolve_codes):\n-\tAdjust callers.\n-\t* trans-openmp.c (gfc_omp_privatize_by_reference): Don't privatize\n-\tby reference type (C_PTR) variables.\n-\t(gfc_omp_finish_clause): Make sure OMP_CLAUSE_SIZE is non-NULL.\n-\t(gfc_trans_omp_udr_expr): Remove.\n-\t(gfc_trans_omp_array_reduction_or_udr): Adjust for n->udr changes.\n-\tDon't call gfc_trans_omp_udr_expr, even for sym->attr.dimension\n-\texpand it as assignment or subroutine call.  Don't initialize\n-\tvalue.function.isym.\n-\n-2014-06-23  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-decl.c (gfc_trans_deferred_vars): Fix handling of\n-\texplicit-size arrays with -fcoarray=lib.\n-\n-2014-06-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/33363\n-\t* invoke.texi: Don't mention nonexisting -fcase-lower option.\n-\n-2014-06-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/61454\n-\t* expr.c (scalarize_intrinsic_call): Take care of optional\n-\targuments.\n-\n-2014-06-19  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (conv_co_minmaxsum): Fix argument\n-\tpassing.\n-\n-2014-06-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (OpenMP): Update refs to OpenMP 4.0.\n-\t* intrinsic.texi (OpenMP Modules): Ditto.\n-\n-2014-06-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* cpp.c (cpp_define_builtins): Change _OPENMP macro to\n-\t201307.\n-\t* dump-parse-tree.c (show_omp_namelist): Add list_type\n-\targument.  Adjust for rop being u.reduction_op now,\n-\thandle depend_op or map_op.\n-\t(show_omp_node): Adjust callers.  Print some new\n-\tOpenMP 4.0 clauses, adjust for OMP_LIST_DEPEND_{IN,OUT}\n-\tbecoming a single OMP_LIST_DEPEND.\n-\t* f95-lang.c (gfc_handle_omp_declare_target_attribute): New\n-\tfunction.\n-\t(gfc_attribute_table): New variable.\n-\t(LANG_HOOKS_OMP_FINISH_CLAUSE, LANG_HOOKS_ATTRIBUTE_TABLE): Redefine.\n-\t* frontend-passes.c (gfc_code_walker): Handle new OpenMP target\n-\tEXEC_OMP_* codes and new clauses.\n-\t* gfortran.h (gfc_statement): Add ST_OMP_TARGET, ST_OMP_END_TARGET,\n-\tST_OMP_TARGET_DATA, ST_OMP_END_TARGET_DATA, ST_OMP_TARGET_UPDATE,\n-\tST_OMP_DECLARE_TARGET, ST_OMP_TEAMS, ST_OMP_END_TEAMS,\n-\tST_OMP_DISTRIBUTE, ST_OMP_END_DISTRIBUTE, ST_OMP_DISTRIBUTE_SIMD,\n-\tST_OMP_END_DISTRIBUTE_SIMD, ST_OMP_DISTRIBUTE_PARALLEL_DO,\n-\tST_OMP_END_DISTRIBUTE_PARALLEL_DO, ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD,\n-\tST_OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD, ST_OMP_TARGET_TEAMS,\n-\tST_OMP_END_TARGET_TEAMS, ST_OMP_TEAMS_DISTRIBUTE,\n-\tST_OMP_END_TEAMS_DISTRIBUTE, ST_OMP_TEAMS_DISTRIBUTE_SIMD,\n-\tST_OMP_END_TEAMS_DISTRIBUTE_SIMD, ST_OMP_TARGET_TEAMS_DISTRIBUTE,\n-\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE,\n-\tST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,\n-\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD,\n-\tST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n-\tST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n-\tST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD and\n-\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD.\n-\t(symbol_attribute): Add omp_declare_target field.\n-\t(gfc_omp_depend_op, gfc_omp_map_op): New enums.\n-\t(gfc_omp_namelist): Replace rop field with union\n-\tcontaining reduction_op, depend_op and map_op.\n-\t(OMP_LIST_DEPEND_IN, OMP_LIST_DEPEND_OUT): Remove.\n-\t(OMP_LIST_DEPEND, OMP_LIST_MAP, OMP_LIST_TO, OMP_LIST_FROM): New.\n-\t(gfc_omp_clauses): Add num_teams, device, thread_limit,\n-\tdist_sched_kind, dist_chunk_size fields.\n-\t(gfc_common_head): Add omp_declare_target field.\n-\t(gfc_exec_op): Add EXEC_OMP_TARGET, EXEC_OMP_TARGET_DATA,\n-\tEXEC_OMP_TEAMS, EXEC_OMP_DISTRIBUTE, EXEC_OMP_DISTRIBUTE_SIMD,\n-\tEXEC_OMP_DISTRIBUTE_PARALLEL_DO, EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD,\n-\tEXEC_OMP_TARGET_TEAMS, EXEC_OMP_TEAMS_DISTRIBUTE,\n-\tEXEC_OMP_TEAMS_DISTRIBUTE_SIMD, EXEC_OMP_TARGET_TEAMS_DISTRIBUTE,\n-\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,\n-\tEXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n-\tEXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n-\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD and\n-\tEXEC_OMP_TARGET_UPDATE.\n-\t(gfc_add_omp_declare_target): New prototype.\n-\t* match.h (gfc_match_omp_declare_target, gfc_match_omp_distribute,\n-\tgfc_match_omp_distribute_parallel_do,\n-\tgfc_match_omp_distribute_parallel_do_simd,\n-\tgfc_match_omp_distribute_simd, gfc_match_omp_target,\n-\tgfc_match_omp_target_data, gfc_match_omp_target_teams,\n-\tgfc_match_omp_target_teams_distribute,\n-\tgfc_match_omp_target_teams_distribute_parallel_do,\n-\tgfc_match_omp_target_teams_distribute_parallel_do_simd,\n-\tgfc_match_omp_target_teams_distribute_simd,\n-\tgfc_match_omp_target_update, gfc_match_omp_teams,\n-\tgfc_match_omp_teams_distribute,\n-\tgfc_match_omp_teams_distribute_parallel_do,\n-\tgfc_match_omp_teams_distribute_parallel_do_simd,\n-\tgfc_match_omp_teams_distribute_simd): New prototypes.\n-\t* module.c (ab_attribute): Add AB_OMP_DECLARE_TARGET.\n-\t(attr_bits): Likewise.\n-\t(mio_symbol_attribute): Handle omp_declare_target attribute.\n-\t(gfc_free_omp_clauses): Free num_teams, device, thread_limit\n-\tand dist_chunk_size expressions.\n-\t(OMP_CLAUSE_PRIVATE, OMP_CLAUSE_FIRSTPRIVATE, OMP_CLAUSE_LASTPRIVATE,\n-\tOMP_CLAUSE_COPYPRIVATE, OMP_CLAUSE_SHARED, OMP_CLAUSE_COPYIN,\n-\tOMP_CLAUSE_REDUCTION, OMP_CLAUSE_IF, OMP_CLAUSE_NUM_THREADS,\n-\tOMP_CLAUSE_SCHEDULE, OMP_CLAUSE_DEFAULT, OMP_CLAUSE_ORDERED,\n-\tOMP_CLAUSE_COLLAPSE, OMP_CLAUSE_UNTIED, OMP_CLAUSE_FINAL,\n-\tOMP_CLAUSE_MERGEABLE, OMP_CLAUSE_ALIGNED, OMP_CLAUSE_DEPEND,\n-\tOMP_CLAUSE_INBRANCH, OMP_CLAUSE_LINEAR, OMP_CLAUSE_NOTINBRANCH,\n-\tOMP_CLAUSE_PROC_BIND, OMP_CLAUSE_SAFELEN, OMP_CLAUSE_SIMDLEN,\n-\tOMP_CLAUSE_UNIFORM): Use 1U instead of 1.\n-\t(OMP_CLAUSE_DEVICE, OMP_CLAUSE_MAP, OMP_CLAUSE_TO, OMP_CLAUSE_FROM,\n-\tOMP_CLAUSE_NUM_TEAMS, OMP_CLAUSE_THREAD_LIMIT,\n-\tOMP_CLAUSE_DIST_SCHEDULE): Define.\n-\t(gfc_match_omp_clauses): Change mask parameter to unsigned int.\n-\tAdjust for rop becoming u.reduction_op.  Disallow inbranch with\n-\tnotinbranch.  For depend clause, always create OMP_LIST_DEPEND\n-\tand fill in u.depend_op.  Handle num_teams, device, map,\n-\tto, from, thread_limit and dist_schedule clauses.\n-\t(OMP_DECLARE_SIMD_CLAUSES): Or in OMP_CLAUSE_INBRANCH and\n-\tOMP_CLAUSE_NOTINBRANCH.\n-\t(OMP_TARGET_CLAUSES, OMP_TARGET_DATA_CLAUSES,\n-\tOMP_TARGET_UPDATE_CLAUSES, OMP_TEAMS_CLAUSES,\n-\tOMP_DISTRIBUTE_CLAUSES): Define.\n-\t(match_omp): New function.\n-\t(gfc_match_omp_do, gfc_match_omp_do_simd, gfc_match_omp_parallel,\n-\tgfc_match_omp_parallel_do, gfc_match_omp_parallel_do_simd,\n-\tgfc_match_omp_parallel_sections, gfc_match_omp_parallel_workshare,\n-\tgfc_match_omp_sections, gfc_match_omp_simd, gfc_match_omp_single,\n-\tgfc_match_omp_task): Rewritten using match_omp.\n-\t(gfc_match_omp_threadprivate, gfc_match_omp_declare_reduction):\n-\tDiagnose if the directives are followed by unexpected junk.\n-\t(gfc_match_omp_distribute, gfc_match_omp_distribute_parallel_do,\n-\tgfc_match_omp_distribute_parallel_do_simd,\n-\tgfc_match_omp_distrbute_simd, gfc_match_omp_declare_target,\n-\tgfc_match_omp_target, gfc_match_omp_target_data,\n-\tgfc_match_omp_target_teams, gfc_match_omp_target_teams_distribute,\n-\tgfc_match_omp_target_teams_distribute_parallel_do,\n-\tgfc_match_omp_target_teams_distribute_parallel_do_simd,\n-\tgfc_match_omp_target_teams_distrbute_simd, gfc_match_omp_target_update,\n-\tgfc_match_omp_teams, gfc_match_omp_teams_distribute,\n-\tgfc_match_omp_teams_distribute_parallel_do,\n-\tgfc_match_omp_teams_distribute_parallel_do_simd,\n-\tgfc_match_omp_teams_distrbute_simd): New functions.\n-\t* openmp.c (resolve_omp_clauses): Adjust for\n-\tOMP_LIST_DEPEND_{IN,OUT} being changed to OMP_LIST_DEPEND.  Handle\n-\tOMP_LIST_MAP, OMP_LIST_FROM, OMP_LIST_TO, num_teams, device,\n-\tdist_chunk_size and thread_limit.\n-\t(gfc_resolve_omp_parallel_blocks): Only put sharing clauses into\n-\tctx.sharing_clauses.  Call gfc_resolve_omp_do_blocks for various\n-\tnew EXEC_OMP_* codes.\n-\t(resolve_omp_do): Handle various new EXEC_OMP_* codes.\n-\t(gfc_resolve_omp_directive): Likewise.\n-\t(gfc_resolve_omp_declare_simd): Add missing space to diagnostics.\n-\t* parse.c (decode_omp_directive): Handle parsing of OpenMP 4.0\n-\toffloading related directives.\n-\t(case_executable): Add ST_OMP_TARGET_UPDATE.\n-\t(case_exec_markers): Add ST_OMP_TARGET*, ST_OMP_TEAMS*,\n-\tST_OMP_DISTRIBUTE*.\n-\t(case_decl): Add ST_OMP_DECLARE_TARGET.\n-\t(gfc_ascii_statement): Handle new ST_OMP_* codes.\n-\t(parse_omp_do): Handle various new ST_OMP_* codes.\n-\t(parse_executable): Likewise.\n-\t* resolve.c (gfc_resolve_blocks): Handle various new EXEC_OMP_*\n-\tcodes.\n-\t(resolve_code): Likewise.\n-\t(resolve_symbol): Change that !$OMP DECLARE TARGET variables\n-\tare saved.\n-\t* st.c (gfc_free_statement): Handle various new EXEC_OMP_* codes.\n-\t* symbol.c (check_conflict): Check omp_declare_target conflicts.\n-\t(gfc_add_omp_declare_target): New function.\n-\t(gfc_copy_attr): Copy omp_declare_target.\n-\t* trans.c (trans_code): Handle various new EXEC_OMP_* codes.\n-\t* trans-common.c (build_common_decl): Add \"omp declare target\"\n-\tattribute if needed.\n-\t* trans-decl.c (add_attributes_to_decl): Likewise.\n-\t* trans.h (gfc_omp_finish_clause): New prototype.\n-\t* trans-openmp.c (gfc_omp_finish_clause): New function.\n-\t(gfc_trans_omp_reduction_list): Adjust for rop being renamed\n-\tto u.reduction_op.\n-\t(gfc_trans_omp_clauses): Adjust for OMP_LIST_DEPEND_{IN,OUT}\n-\tchange to OMP_LIST_DEPEND and fix up depend handling.\n-\tHandle OMP_LIST_MAP, OMP_LIST_TO, OMP_LIST_FROM, num_teams,\n-\tthread_limit, device, dist_chunk_size and dist_sched_kind.\n-\t(gfc_trans_omp_do): Handle EXEC_OMP_DISTRIBUTE.\n-\t(GFC_OMP_SPLIT_DISTRIBUTE, GFC_OMP_SPLIT_TEAMS,\n-\tGFC_OMP_SPLIT_TARGET, GFC_OMP_SPLIT_NUM, GFC_OMP_MASK_DISTRIBUTE,\n-\tGFC_OMP_MASK_TEAMS, GFC_OMP_MASK_TARGET, GFC_OMP_MASK_NUM): New.\n-\t(gfc_split_omp_clauses): Handle splitting of clauses for new\n-\tEXEC_OMP_* codes.\n-\t(gfc_trans_omp_do_simd): Add pblock argument, adjust for being\n-\tcallable for combined constructs.\n-\t(gfc_trans_omp_parallel_do, gfc_trans_omp_parallel_do_simd): Likewise.\n-\t(gfc_trans_omp_distribute, gfc_trans_omp_teams,\n-\tgfc_trans_omp_target, gfc_trans_omp_target_data,\n-\tgfc_trans_omp_target_update): New functions.\n-\t(gfc_trans_omp_directive): Adjust gfc_trans_omp_* callers, handle\n-\tnew EXEC_OMP_* codes.\n-\n-2014-06-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/61126\n-\t* invoke.texi (-Wunused-parameter): Make clearer when\n-\t-Wextra implies this option.\n-\n-2014-06-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n-\n-\tPR fortran/61126\n-\t* options.c (gfc_handle_option): Remove call to\n-\thandle_generated_option.\n-\n-2014-06-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (gfc_check_atomic, gfc_check_atomic_def):\n-\tUse argument for GFC_ISYM_CAF_GET.\n-\t* resolve.c (resolve_variable): Enable CAF_GET insertion.\n-\t(resolve_lock_unlock): Remove GFC_ISYM_CAF_GET.\n-\t(resolve_ordinary_assign): Enable CAF_SEND insertion.\n-\t* trans-const.c (gfc_build_string_const,\n-\tgfc_build_wide_string_const): Set TYPE_STRING_FLAG.\n-\t* trans-decl.c (gfor_fndecl_caf_get, gfor_fndecl_caf_send,\n-\tgfor_fndecl_caf_sendget): New global variables.\n-\t(gfc_build_builtin_function_decls): Initialize them;\n-\tupdate co_min/max/sum initialization.\n-\t* trans-expr.c (gfc_get_tree_for_caf_expr): Renamed from\n-\tget_tree_for_caf_expr and removed static.\n-\t(gfc_conv_procedure_call): Update call.\n-\t* trans-intrinsic.c (caf_get_image_index,\n-\tconv_caf_vector_subscript_elem, conv_caf_vector_subscript,\n-\tget_caf_token_offset, gfc_conv_intrinsic_caf_get,\n-\tconv_caf_send): New.\n-\t(gfc_conv_intrinsic_function, gfc_conv_intrinsic_subroutine,\n-\tgfc_walk_intrinsic_function): Handle CAF_GET and CAF_SEND.\n-\t(conv_co_minmaxsum): Update call for remove unused vector\n-\tsubscript.\n-\t(conv_intrinsic_atomic_def, conv_intrinsic_atomic_ref):\n-\tSkip a CAF_GET of the argument.\n-\t* trans-types.c (gfc_get_caf_vector_type): New.\n-\t* trans-types.h (gfc_get_caf_vector_type): New.\n-\t* trans.h (gfor_fndecl_caf_get, gfor_fndecl_caf_send,\n-\tgfor_fndecl_caf_sendget): New global variables.\n-\t(gfc_get_tree_for_caf_expr): New prototypes.\n-\n-2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n-\n-\t* trans-common.c (build_common_decl): Use\n-\tset_decl_tls_model.\n-\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n-\t(get_proc_pointer_decl): Likewise.\n-\n-2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/28484\n-\tPR fortran/61429\n-\t* check.c (gfc_check_system_clock): Improve checking of arguments.\n-\t* intrinsic.texi: Update doc of SYSTEM_CLOCK.\n-\t* iresolve.c (gfc_resolve_system_clock): Choose library function\n-\tused depending on argument kinds.\n-\t* trans-decl.c (gfc_build_intrinsic_function_decls): Build\n-\tdecls for system_clock_4 and system_clock_8.\n-\t* trans-intrinsic.c (conv_intrinsic_system_clock): New function.\n-\t(gfc_conv_intrinsic_subroutine): Call conv_intrinsic_system_clock.\n-\t* trans.h (gfor_fndecl_system_clock4, gfor_fndecl_system_clock8):\n-\tNew variables.\n-\n-2014-06-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_copy_formal_args_intr): Update prototype.\n-\t* symbol.c (gfc_copy_formal_args_intr): Handle the case\n-\tthat absent optional arguments should be ignored.\n-\t* trans-intrinsic.c (gfc_get_symbol_for_expr): Ditto.\n-\t(gfc_conv_intrinsic_funcall,\n-\tconv_generic_with_optional_char_arg): Update call.\n-\t* resolve.c (gfc_resolve_intrinsic): Ditto.\n-\n-2014-06-10  Dominique d'Humieres <dominiq@lps.ens.fr>\n-\t    Mikael Morin <mikael@gcc.gnu.org>\n-\n-\tPR fortran/41936\n-\t* trans-expr.c (gfc_conv_expr_reference): Deallocate array\n-\tcomponents.\n-\n-2014-06-10  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/60928\n-\t* f95-lang.c (gfc_init_builtin_functions): Handle -fopenmp-simd\n-\tlike -fopenmp.\n-\t* openmp.c (resolve_omp_clauses): Remove allocatable components\n-\tdiagnostics.  Add associate-name and intent(in) pointer\n-\tdiagnostics for various clauses, diagnose procedure pointers in\n-\treduction clause.\n-\t* parse.c (match_word_omp_simd): New function.\n-\t(matchs, matcho): New macros.\n-\t(decode_omp_directive): Change match macros to either matchs\n-\tor matcho.  Handle -fopenmp-simd.\n-\t(next_free, next_fixed): Handle -fopenmp-simd like -fopenmp.\n-\t* scanner.c (skip_free_comments, skip_fixed_comments, include_line):\n-\tLikewise.\n-\t* trans-array.c (get_full_array_size): Rename to...\n-\t(gfc_full_array_size): ... this.  No longer static.\n-\t(duplicate_allocatable): Adjust caller.  Add NO_MEMCPY argument\n-\tand handle it.\n-\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Adjust\n-\tduplicate_allocatable callers.\n-\t(gfc_duplicate_allocatable_nocopy): New function.\n-\t(structure_alloc_comps): Adjust g*_full_array_size and\n-\tduplicate_allocatable caller.\n-\t* trans-array.h (gfc_full_array_size,\n-\tgfc_duplicate_allocatable_nocopy): New prototypes.\n-\t* trans-common.c (create_common): Call gfc_finish_decl_attrs.\n-\t* trans-decl.c (gfc_finish_decl_attrs): New function.\n-\t(gfc_finish_var_decl, create_function_arglist,\n-\tgfc_get_fake_result_decl): Call it.\n-\t(gfc_allocate_lang_decl): If DECL_LANG_SPECIFIC is already allocated,\n-\tdon't allocate it again.\n-\t(gfc_get_symbol_decl): Set GFC_DECL_ASSOCIATE_VAR_P on\n-\tassociate-names.\n-\t* trans.h (gfc_finish_decl_attrs): New prototype.\n-\t(struct lang_decl): Add scalar_allocatable and scalar_pointer\n-\tbitfields.\n-\t(GFC_DECL_SCALAR_ALLOCATABLE, GFC_DECL_SCALAR_POINTER,\n-\tGFC_DECL_GET_SCALAR_ALLOCATABLE, GFC_DECL_GET_SCALAR_POINTER,\n-\tGFC_DECL_ASSOCIATE_VAR_P): Define.\n-\t(GFC_POINTER_TYPE_P): Remove.\n-\t* trans-openmp.c (gfc_omp_privatize_by_reference): Don't check\n-\tGFC_POINTER_TYPE_P, instead test GFC_DECL_GET_SCALAR_ALLOCATABLE,\n-\tGFC_DECL_GET_SCALAR_POINTER or GFC_DECL_CRAY_POINTEE on decl.\n-\t(gfc_omp_predetermined_sharing): Associate-names are predetermined.\n-\t(enum walk_alloc_comps): New.\n-\t(gfc_has_alloc_comps, gfc_omp_unshare_expr_r, gfc_omp_unshare_expr,\n-\tgfc_walk_alloc_comps): New functions.\n-\t(gfc_omp_private_outer_ref): Return true for scalar allocatables or\n-\tdecls with allocatable components.\n-\t(gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,\n-\tgfc_omp_clause_assign_op, gfc_omp_clause_dtor): Fix up handling of\n-\tallocatables, handle also OMP_CLAUSE_REDUCTION, handle scalar\n-\tallocatables and decls with allocatable components.\n-\t(gfc_trans_omp_array_reduction_or_udr): Don't handle allocatable\n-\tarrays here.\n-\t(gfc_trans_omp_reduction_list): Call\n-\tgfc_trans_omp_array_reduction_or_udr even for allocatable scalars.\n-\t(gfc_trans_omp_do_simd): If -fno-openmp, just expand it as OMP_SIMD.\n-\t(gfc_trans_omp_parallel_do_simd): Likewise.\n-\t* trans-types.c (gfc_sym_type): Don't set GFC_POINTER_TYPE_P.\n-\t(gfc_get_derived_type): Call gfc_finish_decl_attrs.\n-\n-2014-06-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/61406\n-\t* trans-stmt.c (trans_associate_var): Check that array\n-\tconstructors are constant for direct reference.\n-\n-2014-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/36096\n-\t* intrinsic.texi: Fix documentation of BESSEL_J0, BESSEL_J1,\n-\tBESSEL_Y0, and BESSEL_Y1.\n-\n-2014-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/45187\n-\t* trans-decl.c (gfc_create_module_variable): Don't create\n-\tCray-pointee decls twice.\n-\n-2014-06-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* io.c (resolve_tag): Warn on non-default kind for NUMBER,\n-\tNEXTREC, RECL, NAMED, OPENED and PENDING I/O specifiers.\n-\n-2014-06-06  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* dump-parse-tree.c (show_omp_namelist): Dump reduction\n-\tid in each list item.\n-\t(show_omp_node): Only handle OMP_LIST_REDUCTION, not\n-\tOMP_LIST_REDUCTION_FIRST .. OMP_LIST_REDUCTION_LAST.  Don't\n-\tdump reduction id here.\n-\t* frontend-passes.c (dummy_code_callback): Renamed to...\n-\t(gfc_dummy_code_callback): ... this.  No longer static.\n-\t(optimize_reduction): Use gfc_dummy_code_callback instead of\n-\tdummy_code_callback.\n-\t* gfortran.h (gfc_statement): Add ST_OMP_DECLARE_REDUCTION.\n-\t(symbol_attribute): Add omp_udr_artificial_var bitfield.\n-\t(gfc_omp_reduction_op): New enum.\n-\t(gfc_omp_namelist): Add rop and udr fields.\n-\t(OMP_LIST_PLUS, OMP_LIST_REDUCTION_FIRST, OMP_LIST_MULT,\n-\tOMP_LIST_SUB, OMP_LIST_AND, OMP_LIST_OR, OMP_LIST_EQV,\n-\tOMP_LIST_NEQV, OMP_LIST_MAX, OMP_LIST_MIN, OMP_LIST_IAND,\n-\tOMP_LIST_IOR, OMP_LIST_IEOR, OMP_LIST_REDUCTION_LAST): Removed.\n-\t(OMP_LIST_REDUCTION): New.\n-\t(gfc_omp_udr): New type.\n-\t(gfc_get_omp_udr): Define.\n-\t(gfc_symtree): Add n.omp_udr field.\n-\t(gfc_namespace): Add omp_udr_root field, add omp_udr_ns bitfield.\n-\t(gfc_free_omp_udr, gfc_omp_udr_find, gfc_resolve_omp_udrs,\n-\tgfc_dummy_code_callback): New prototypes.\n-\t* match.h (gfc_match_omp_declare_reduction): New prototype.\n-\t* module.c (MOD_VERSION): Increase to 13.\n-\t(omp_declare_reduction_stmt): New array.\n-\t(mio_omp_udr_expr, write_omp_udr, write_omp_udrs, load_omp_udrs):\n-\tNew functions.\n-\t(read_module): Read OpenMP user defined reductions.\n-\t(write_module): Write OpenMP user defined reductions.\n-\t* openmp.c: Include arith.h.\n-\t(gfc_free_omp_udr, gfc_find_omp_udr): New functions.\n-\t(gfc_match_omp_clauses): Handle user defined reductions.\n-\tStore reduction kind into gfc_omp_namelist instead of using\n-\tseveral OMP_LIST_* entries.\n-\t(match_udr_expr, gfc_omp_udr_predef, gfc_omp_udr_find,\n-\tgfc_match_omp_declare_reduction): New functions.\n-\t(resolve_omp_clauses): Adjust for reduction clauses being only\n-\tin OMP_LIST_REDUCTION list.  Diagnose missing UDRs.\n-\t(struct omp_udr_callback_data): New type.\n-\t(omp_udr_callback, gfc_resolve_omp_udr, gfc_resolve_omp_udrs): New\n-\tfunctions.\n-\t* parse.c (decode_omp_directive): Handle !$omp declare reduction.\n-\t(case_decl): Add ST_OMP_DECLARE_REDUCTION.\n-\t(gfc_ascii_statement): Print ST_OMP_DECLARE_REDUCTION.\n-\t* resolve.c (resolve_fl_variable): Allow len=: or len=* on\n-\tsym->attr.omp_udr_artificial_var symbols.\n-\t(resolve_types): Call gfc_resolve_omp_udrs.\n-\t* symbol.c (gfc_get_uop): If gfc_current_ns->omp_udr_ns,\n-\tuse parent ns instead of gfc_current_ns.\n-\t(gfc_get_sym_tree): Don't insert symbols into\n-\tnamespaces with omp_udr_ns set.\n-\t(free_omp_udr_tree): New function.\n-\t(gfc_free_namespace): Call it.\n-\t* trans-openmp.c (struct omp_udr_find_orig_data): New type.\n-\t(omp_udr_find_orig, gfc_trans_omp_udr_expr): New functions.\n-\t(gfc_trans_omp_array_reduction): Renamed to...\n-\t(gfc_trans_omp_array_reduction_or_udr): ... this.  Remove SYM\n-\targument, instead pass gfc_omp_namelist pointer N.  Handle\n-\tuser defined reductions.\n-\t(gfc_trans_omp_reduction_list): Remove REDUCTION_CODE argument.\n-\tHandle user defined reductions and reduction ops in gfc_omp_namelist.\n-\t(gfc_trans_omp_clauses): Adjust for just a single OMP_LIST_REDUCTION\n-\tlist.\n-\t(gfc_split_omp_clauses): Likewise.\n-\n-2014-06-05  Richard Biener  <rguenther@suse.de>\n-\n-\tPR fortran/61418\n-\t* gfortranspec.c (spec_file): Remove.\n-\t(find_spec_file): Likewise.\n-\t(lang_specific_driver): Do not look for specs file in -L\n-\tor append -specs command line argument.\n-\t(lang_specific_pre_link): Always %:include libgfortran.spec.\n-\n-2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* fortran/trans.c (trans_runtime_error_vararg): Call\n-\tfold_build_call_array_loc instead of fold_builtin_call_array.\n-\n-2014-06-02  Bernd Schmidt  <bernds@codesourcery.com>\n-\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Correct number of\n-\targuments to caf_init.\n-\n-2014-05-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (Project Status): Fix broken link.\n-\n-2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/61310\n-\t* intrinsics.texi (CTIME): Remove mention of locale-dependent\n-\tbehavior.\n-\n-2014-05-26  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/55117\n-\t* trans-io.c (nml_full_name, transfer_namelist_element): Insert\n-\ta '+' rather then '%' to differentiate namelist variable names\n-\tthat are based on extended derived types.\n-\n-2014-05-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (gfc_check_num_images): New.\n-\t(gfc_check_this_image): Handle distance argument.\n-\t* intrinsic.c (add_functions): Update this_image and num_images\n-\tfor new distance and failed arguments.\n-\t* intrinsic.texi (THIS_IMAGE, NUM_IMAGES): Document the new\n-\targuments.\n-\t* intrinsic.h (gfc_check_num_images): New.\n-\t(gfc_check_this_image, gfc_simplify_num_images,\n-\tgfc_simplify_this_image, gfc_resolve_this_image): Update prototype.\n-\t* iresolve.c (gfc_resolve_this_image): Handle distance argument.\n-\t* simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n-\tHandle new arguments.\n-\t* trans-intrinsic.c (trans_this_image, trans_num_images): Ditto.\n-\t(gfc_conv_intrinsic_function): Update trans_num_images call.\n-\n-2014-05-23  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfc-internals.texi: Change URLs to HTTPS; fix broken links.\n-\t* gfortran.texi: Ditto.\n-\n-2014-05-22  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* f95-lang.c (DEF_FUNCTION_TYPE_0, DEF_FUNCTION_TYPE_6)\n-\t(DEF_FUNCTION_TYPE_7, DEF_FUNCTION_TYPE_8)\n-\t(DEF_FUNCTION_TYPE_VAR_5): Cosmetic fixes.\n-\t* types.def: Simplify examples for DEF_FUNCTION_TYPE_*.\n-\n-2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n-\n-\t* f95-lang.c (pushlevel): Adjust.\n-\t* trans-decl.c (gfc_allocate_lang_decl): Adjust.\n-\t(gfc_find_module): Likewise.\n-\t* trans-types.c (gfc_get_nodesc_array_type): Likewise.\n-\t(gfc_get_array_type_bounds): Likewise.\n-\t(gfc_nonrestricted_type): Likewise.\n-\t* trans.h: Don't use variable_size gty attribute.\n-\n-2014-05-17  Dominique d'Humieres <dominiq@lps.ens.fr>\n-\n-\t* check.c (gfc_check_fn_rc2008): move \"argument\" to the right\n-\tplace.\n-\n-2014-05-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60127\n-\t* openmp.c (resolve_omp_do): Reject do concurrent loops.\n-\n-2014-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/60834\n-\t* frontend-passes.c (in_assoc_list):  New variable.\n-\t(optimize_namespace):  Initialize in_assoc_list\n-\t(combine_array_constructor): Don't try to combine\n-\tassoc lists.\n-\t(gfc_code_walker):  Keep track of in_assoc_list.\n-\n-2014-05-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortran.h (gfc_statement): Add ST_OMP_CANCEL,\n-\tST_OMP_CANCELLATION_POINT, ST_OMP_TASKGROUP, ST_OMP_END_TASKGROUP,\n-\tST_OMP_SIMD, ST_OMP_END_SIMD, ST_OMP_DO_SIMD, ST_OMP_END_DO_SIMD,\n-\tST_OMP_PARALLEL_DO_SIMD, ST_OMP_END_PARALLEL_DO_SIMD and\n-\tST_OMP_DECLARE_SIMD.\n-\t(gfc_omp_namelist): New typedef.\n-\t(gfc_get_omp_namelist): Define.\n-\t(OMP_LIST_UNIFORM, OMP_LIST_ALIGNED, OMP_LIST_LINEAR,\n-\tOMP_LIST_DEPEND_IN, OMP_LIST_DEPEND_OUT): New clause list kinds.\n-\t(gfc_omp_proc_bind_kind, gfc_omp_cancel_kind): New enums.\n-\t(gfc_omp_clauses): Change type of lists to gfc_omp_namelist *.\n-\tAdd inbranch, notinbranch, cancel, proc_bind, safelen_expr and\n-\tsimdlen_expr fields.\n-\t(gfc_omp_declare_simd): New typedef.\n-\t(gfc_get_omp_declare_simd): Define.\n-\t(gfc_namespace): Add omp_declare_simd field.\n-\t(gfc_exec_op): Add EXEC_OMP_CANCEL, EXEC_OMP_CANCELLATION_POINT,\n-\tEXEC_OMP_TASKGROUP, EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD and\n-\tEXEC_OMP_PARALLEL_DO_SIMD.\n-\t(gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_MASK, GFC_OMP_ATOMIC_SEQ_CST\n-\tand GFC_OMP_ATOMIC_SWAP.\n-\t(gfc_code): Change type of omp_namelist field to gfc_omp_namelist *.\n-\t(gfc_free_omp_namelist, gfc_free_omp_declare_simd,\n-\tgfc_free_omp_declare_simd_list, gfc_resolve_omp_declare_simd): New\n-\tprototypes.\n-\t* trans-stmt.h (gfc_trans_omp_declare_simd): New prototype.\n-\t* symbol.c (gfc_free_namespace): Call gfc_free_omp_declare_simd.\n-\t* openmp.c (gfc_free_omp_clauses): Free safelen_expr and\n-\tsimdlen_expr.  Use gfc_free_omp_namelist instead of\n-\tgfc_free_namelist.\n-\t(gfc_free_omp_declare_simd, gfc_free_omp_declare_simd_list): New\n-\tfunctions.\n-\t(gfc_match_omp_variable_list): Add end_colon, headp and\n-\tallow_sections arguments.  Handle parsing of array sections.\n-\tUse *omp_namelist* instead of *namelist* data structure and\n-\tfunctions/macros.  Allow termination at : character.\n-\t(OMP_CLAUSE_ALIGNED, OMP_CLAUSE_DEPEND, OMP_CLAUSE_INBRANCH,\n-\tOMP_CLAUSE_LINEAR, OMP_CLAUSE_NOTINBRANCH, OMP_CLAUSE_PROC_BIND,\n-\tOMP_CLAUSE_SAFELEN, OMP_CLAUSE_SIMDLEN, OMP_CLAUSE_UNIFORM): Define.\n-\t(gfc_match_omp_clauses): Change first and needs_space variables\n-\tinto arguments with default values.  Parse inbranch, notinbranch,\n-\tproc_bind, safelen, simdlen, uniform, linear, aligned and\n-\tdepend clauses.\n-\t(OMP_PARALLEL_CLAUSES): Add OMP_CLAUSE_PROC_BIND.\n-\t(OMP_DECLARE_SIMD_CLAUSES, OMP_SIMD_CLAUSES): Define.\n-\t(OMP_TASK_CLAUSES): Add OMP_CLAUSE_DEPEND.\n-\t(gfc_match_omp_do_simd): New function.\n-\t(gfc_match_omp_flush): Use *omp_namelist* instead of *namelist*\n-\tdata structure and functions/macros.\n-\t(gfc_match_omp_simd, gfc_match_omp_declare_simd,\n-\tgfc_match_omp_parallel_do_simd): New functions.\n-\t(gfc_match_omp_atomic): Handle seq_cst clause.  Handle atomic swap.\n-\t(gfc_match_omp_taskgroup, gfc_match_omp_cancel_kind,\n-\tgfc_match_omp_cancel, gfc_match_omp_cancellation_point): New\n-\tfunctions.\n-\t(resolve_omp_clauses): Add where, omp_clauses and ns arguments.\n-\tUse *omp_namelist* instead of *namelist* data structure and\n-\tfunctions/macros.  Resolve uniform, aligned, linear, depend,\n-\tsafelen and simdlen clauses.\n-\t(resolve_omp_atomic): Adjust for GFC_OMP_ATOMIC_{MASK,SEQ_CST,SWAP}\n-\taddition, recognize atomic swap.\n-\t(gfc_resolve_omp_parallel_blocks): Use gfc_omp_namelist instead\n-\tof gfc_namelist.  Handle EXEC_OMP_PARALLEL_DO_SIMD the same as\n-\tEXEC_OMP_PARALLEL_DO.\n-\t(gfc_resolve_do_iterator): Use *omp_namelist* instead of *namelist*\n-\tdata structure and functions/macros.\n-\t(resolve_omp_do): Likewise.  Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD.\n-\t(gfc_resolve_omp_directive): Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD and EXEC_OMP_CANCEL.  Adjust\n-\tresolve_omp_clauses caller.\n-\t(gfc_resolve_omp_declare_simd): New function.\n-\t* parse.c (decode_omp_directive): Parse cancellation point, cancel,\n-\tdeclare simd, end do simd, end simd, end parallel do simd,\n-\tend taskgroup, parallel do simd, simd and taskgroup directives.\n-\t(case_executable): Add ST_OMP_CANCEL and ST_OMP_CANCELLATION_POINT.\n-\t(case_exec_markers): Add ST_OMP_TASKGROUP, case ST_OMP_SIMD,\n-\tST_OMP_DO_SIMD and ST_OMP_PARALLEL_DO_SIMD.\n-\t(case_decl): Add ST_OMP_DECLARE_SIMD.\n-\t(gfc_ascii_statement): Handle ST_OMP_CANCEL,\n-\tST_OMP_CANCELLATION_POINT, ST_OMP_TASKGROUP, ST_OMP_END_TASKGROUP,\n-\tST_OMP_SIMD, ST_OMP_END_SIMD, ST_OMP_DO_SIMD, ST_OMP_END_DO_SIMD,\n-\tST_OMP_PARALLEL_DO_SIMD, ST_OMP_END_PARALLEL_DO_SIMD and\n-\tST_OMP_DECLARE_SIMD.\n-\t(parse_omp_do): Handle ST_OMP_SIMD, ST_OMP_DO_SIMD and\n-\tST_OMP_PARALLEL_DO_SIMD.\n-\t(parse_omp_atomic): Adjust for GFC_OMP_ATOMIC_* additions.\n-\t(parse_omp_structured_block): Handle ST_OMP_TASKGROUP and\n-\tST_OMP_PARALLEL_DO_SIMD.\n-\t(parse_executable): Handle ST_OMP_SIMD, ST_OMP_DO_SIMD,\n-\tST_OMP_PARALLEL_DO_SIMD and ST_OMP_TASKGROUP.\n-\t* trans-decl.c (gfc_get_extern_function_decl,\n-\tgfc_create_function_decl): Call gfc_trans_omp_declare_simd if\n-\tneeded.\n-\t* frontend-passes.c (gfc_code_walker): Handle EXEC_OMP_SIMD,\n-\tEXEC_OMP_DO_SIMD and EXEC_OMP_PARALLEL_DO_SIMD.  Walk\n-\tsafelen_expr and simdlen_expr.  Walk expressions in gfc_omp_namelist\n-\tof depend, aligned and linear clauses.\n-\t* match.c (match_exit_cycle): Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD\n-\tand EXEC_OMP_PARALLEL_DO_SIMD.\n-\t(gfc_free_omp_namelist): New function.\n-\t* dump-parse-tree.c (show_namelist): Removed.\n-\t(show_omp_namelist): New function.\n-\t(show_omp_node): Handle OpenMP 4.0 additions.\n-\t(show_code_node): Handle EXEC_OMP_CANCEL, EXEC_OMP_CANCELLATION_POINT,\n-\tEXEC_OMP_DO_SIMD, EXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and\n-\tEXEC_OMP_TASKGROUP.\n-\t* match.h (gfc_match_omp_cancel, gfc_match_omp_cancellation_point,\n-\tgfc_match_omp_declare_simd, gfc_match_omp_do_simd,\n-\tgfc_match_omp_parallel_do_simd, gfc_match_omp_simd,\n-\tgfc_match_omp_taskgroup): New prototypes.\n-\t* trans-openmp.c (gfc_trans_omp_variable): Add declare_simd\n-\targument, handle it.  Allow current_function_decl to be NULL.\n-\t(gfc_trans_omp_variable_list): Add declare_simd argument, pass\n-\tit through to gfc_trans_omp_variable and disregard whether\n-\tsym is referenced if declare_simd is true.  Work on gfc_omp_namelist\n-\tinstead of gfc_namelist.\n-\t(gfc_trans_omp_reduction_list): Work on gfc_omp_namelist instead of\n-\tgfc_namelist.  Adjust gfc_trans_omp_variable caller.\n-\t(gfc_trans_omp_clauses): Add declare_simd argument, pass it through\n-\tto gfc_trans_omp_variable{,_list} callers.  Work on gfc_omp_namelist\n-\tinstead of gfc_namelist.  Handle inbranch, notinbranch, safelen,\n-\tsimdlen, depend, uniform, linear, proc_bind and aligned clauses.\n-\tHandle cancel kind.\n-\t(gfc_trans_omp_atomic): Handle seq_cst clause, handle atomic swap,\n-\tadjust for GFC_OMP_ATOMIC_* changes.\n-\t(gfc_trans_omp_cancel, gfc_trans_omp_cancellation_point): New\n-\tfunctions.\n-\t(gfc_trans_omp_do): Add op argument, handle simd translation into\n-\tgeneric.\n-\t(GFC_OMP_SPLIT_SIMD, GFC_OMP_SPLIT_DO, GFC_OMP_SPLIT_PARALLEL,\n-\tGFC_OMP_SPLIT_NUM, GFC_OMP_MASK_SIMD, GFC_OMP_MASK_DO,\n-\tGFC_OMP_MASK_PARALLEL): New.\n-\t(gfc_split_omp_clauses, gfc_trans_omp_do_simd): New functions.\n-\t(gfc_trans_omp_parallel_do): Rework to use gfc_split_omp_clauses.\n-\t(gfc_trans_omp_parallel_do_simd, gfc_trans_omp_taskgroup): New\n-\tfunctions.\n-\t(gfc_trans_omp_directive): Handle EXEC_OMP_CANCEL,\n-\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n-\tAdjust gfc_trans_omp_do caller.\n-\t(gfc_trans_omp_declare_simd): New function.\n-\t* st.c (gfc_free_statement): Handle EXEC_OMP_CANCEL,\n-\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n-\tFor EXEC_OMP_FLUSH call gfc_free_omp_namelist instead of\n-\tgfc_free_namelist.\n-\t* module.c (omp_declare_simd_clauses): New variable.\n-\t(mio_omp_declare_simd): New function.\n-\t(mio_symbol): Call it.\n-\t* trans.c (trans_code): Handle EXEC_OMP_CANCEL,\n-\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n-\t* resolve.c (gfc_resolve_blocks): Handle EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n-\t(resolve_code): Handle EXEC_OMP_CANCEL,\n-\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n-\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n-\t(resolve_types): Call gfc_resolve_omp_declare_simd.\n-\n-2014-05-11  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (gfc_build_builtin_function_decls):\n-\tChange type of second argument to int.\n-\n-2014-05-09  Mike Stump  <mikestump@comcast.net>\n-\n-\tPR fortran/61109\n-\t* trans-array.c (gfc_conv_array_initializer): Fix wide-int\n-\tconversion bug.\n-\n-2014-05-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CAF_GET\n-\tand GFC_ISYM_CAF_SEND.\n-\t* intrinsic.c (add_functions): Add only internally\n-\taccessible caf_get and caf_send functions.\n-\t* resolve.c (add_caf_get_intrinsic,\n-\tremove_caf_get_intrinsic): New functions.\n-\t(resolve_variable): Resolve expression rank and\n-\tprepare for add_caf_get_intrinsic call.\n-\t(gfc_resolve_expr): For variables, remove rank\n-\tresolution.\n-\t(resolve_ordinary_assign): Prepare call to\n-\tGFC_ISYM_CAF_SEND.\n-\t(resolve_code): Avoid call to GFC_ISYM_CAF_GET for\n-\tthe LHS of an assignment.\n-\n-2014-05-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-intrinsic.c (conv_co_minmaxsum): Change condition style.\n-\n-2014-05-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (check_co_minmaxsum, gfc_check_co_minmax,\n-\tgfc_check_co_sum): New.\n-\t* error.c (gfc_notify_std): Update -std=f2008ts.\n-\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_MAX,\n-\tGFC_ISYM_CO_MIN, GFC_ISYM_CO_SUM.\n-\t* intrinsic.h (gfc_check_co_minmax,\n-\tgfc_check_co_sum): Declare.\n-\t* intrinsic.c (add_subroutines): Add co_min, co_max\n-\tand co_sum.\n-\t(gfc_check_intrinsic_standard): Update text for\n-\t-std=f2008ts.\n-\t* intrinsic.texi (CO_MIN, CO_MAX, CO_SUM): Document\n-\tthem.\n-\t* invoke.texi (-std=f2008ts): Update wording.\n-\t* trans.h (gfor_fndecl_co_max,\n-\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n-\t* trans-decl.c (gfor_fndecl_co_max,\n-\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n-\t(gfc_build_builtin_function_decls): Assign to it.\n-\t* trans-intrinsic.c (conv_co_minmaxsum): New.\n-\t(gfc_conv_intrinsic_subroutine): Call it.\n-\n-2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n-\t    Mike Stump  <mikestump@comcast.net>\n-\t    Richard Sandiford  <rdsandiford@googlemail.com>\n-\n-\t* target-memory.c: Include wide-int.h.\n-\t(gfc_interpret_logical): Use wide-int interfaces.\n-\t* trans-array.c: Include wide-int.h.\n-\t(gfc_conv_array_initializer): Use wide-int interfaces.\n-\t* trans-const.c: Include wide-int.h.\n-\t(gfc_conv_string_init): Use wide-int interfaces.\n-\t(gfc_conv_mpz_to_tree): Likewise.\n-\t(gfc_conv_tree_to_mpz): Likewise.\n-\t* trans-decl.c (gfc_can_put_var_on_stack): Use tree_fits_uhwi_p.\n-\t* trans-expr.c: Include wide-int.h.\n-\t(gfc_conv_cst_int_power): Use wide-int interfaces.\n-\t(gfc_string_to_single_character): Likewise.\n-\t(gfc_optimize_len_trim): Likewise.\n-\t* trans-intrinsic.c: Include wide-int.h.\n-\t(trans_this_image): Use wide-int interfaces.\n-\t(gfc_conv_intrinsic_bound): Likewise.\n-\t(conv_intrinsic_cobound): Likewise.\n-\t* trans-types.c (gfc_init_types): Likewise.\n-\t(gfc_get_array_type_bounds): Pass an integer of the correct type\n-\tinstead of using integer_one_node.\n-\n-2014-04-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-decl.c (create_function_arglist): Add hidden coarray arguments\n-\talso for polymorphic coarrays.\n-\t* trans-expr.c (gfc_conv_procedure_call): Pass hidden coarray arguments\n-\talso for polymorphic coarrays.\n-\n-2014-04-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* resolve.c (resolve_function): Don't do\n-\tassumed-size check for lcobound/ucobound.\n-\t* trans-types.c (gfc_build_array_type): Only build an array\n-\tdescriptor with codimensions for allocatable coarrays.\n-\n-2014-04-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.h (gfc_init_coarray_decl): Remove.\n-\t* parse.c (translate_all_program_units): Remove call to it.\n-\t(gfc_parse_file): Update call.\n-\t* trans.h (gfor_fndecl_caf_this_image,\n-\tgfor_fndecl_caf_num_images): Add.\n-\t(gfort_gvar_caf_num_images,\n-\tgfort_gvar_caf_this_image): Remove.\n-\t* trans-decl.c (gfor_fndecl_caf_this_image,\n-\tgfor_fndecl_caf_num_images): Add.\n-\t(gfort_gvar_caf_num_images,\n-\tgfort_gvar_caf_this_image): Remove.\n-\t(gfc_build_builtin_function_decls): Init new decl.\n-\t(gfc_init_coarray_dec): Remove.\n-\t(create_main_function): Change calls.\n-\t* trans-intrinsic.c (trans_this_image, trans_image_index,\n-\tconv_intrinsic_cobound): Generate call to new library function\n-\tinstead of to a static variable.\n-\t* trans-stmt.c (gfc_trans_sync): Ditto.\n-\n-2014-04-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* trans-expr.c (get_tree_for_caf_expr): Fix handling of polymorphic\n-\tand derived-type coarrays.\n-\n-2014-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/59604\n-\tPR fortran/58003\n-\t* gfortran.h (gfc_convert_mpz_to_signed):  Add prototype.\n-\t* arith.c (gfc_int2int):  Convert number to signed if\n-\tarithmetic overflow is not checked.\n-\t* simplify.c (convert_mpz_to_unsigned): Only trigger assert for\n-\tsize if range checking is in force.\n-\t(convert_mpz_to_signed):  Make non-static, rename to\n-\t(gfc_convert_mpz_to_signed).\n-\t(simplify_dshift): Use gfc_convert_mpz_to_signed.\n-\t(gfc_simplify_ibclr):  Likewise.\n-\t(gfc_simplify_ibits):  Likewise.\n-\t(gfc_simplify_ibset):  Likewise.\n-\t(simplify_shift):  Likewise.\n-\t(gfc_simplify_ishiftc):  Likewise.\n-\t(gfc_simplify_maskr):  Likewise.\n-\t(gfc_simplify_maskl):  Likewise.\n-\n-2014-04-22  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60881\n-\t* trans-expr.c (gfc_trans_subcomponent_assign): Fix handling\n-\tof scalar coarrays.\n-\n-2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-types.c (gfc_init_kinds): Make sure GET_MODE_BITSIZE\n-\targument is enum machine_mode.\n-\n-2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58085\n-\tPR fortran/60717\n-\t* trans.h: Add 'use_offset' bitfield to gfc_se.\n-\t* trans-array.c (gfc_conv_expr_descriptor): Use 'use_offset'\n-\tas a trigger to unconditionally recalculate the offset for\n-\tarray slices and constant arrays.\n-\ttrans-expr.c (gfc_conv_intrinsic_to_class): Use it.\n-\ttrans-stmt.c (trans_associate_var): Ditto.\n-\t(gfc_conv_procedure_call): Ditto.\n-\n-2014-04-11  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58880\n-\tPR fortran/60495\n-\t* resolve.c (gfc_resolve_finalizers): Ensure that vtables\n-\tand finalization wrappers are generated.\n-\n-2014-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* intrinsic.texi (RANDOM_SEED): Improve example.\n-\n-2014-04-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n-\n-\t* class.c (gfc_build_class_symbol): Append \"_t\" to target class\n-\tnames to make the generated type names unique.\n-\n-2014-04-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n-\n-\tPR fortran/60191\n-\t* trans-types.c (gfc_get_function_type): In case of recursion\n-\tbuild a variadic function type with empty argument list instead of a\n-\tstdarg-like function type with incomplete argument list.\n-\n-2014-04-04  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* check.c (gfc_check_cmplx): Fix typo.\n-\n-2014-03-28  Mikael Morin  <mikael@gcc.gnu.org>\n-\t    Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60576\n-\t* trans-expr.c (gfc_conv_derived_to_class): Avoid\n-\tgeneration of out-of-bounds range expr.\n-\n-2014-03-28  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/60677\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Enlarge argument\n-\tlist buffer.\n-\n-2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/60522\n-\t* frontend-passes.c (cfe_code):  Do not walk subtrees\n-\tfor WHERE.\n-\n-2014-03-27  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/58880\n-\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Fix handling\n-\tof nonpointers.\n-\n-2014-03-26 Dominique d'Humieres <dominiq@lps.ens.fr>\n-\n-\tPR fortran/34928\n-\t* fortran.texi: Document Volatile COMMON as not supported.\n-\n-2014-03-22  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR debug/60603\n-\t* cpp.c (gfc_cpp_init): Restore cb_change_file call to\n-\t<built-in>.\n-\n-2014-03-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/60148\n-\t* gfortran.texi: Add description of namelist DELIM= behavior.\n-\n-2014-03-19  Tobias Burnus  <burnus@net-b.>\n-\n-\tPR fortran/60543\n-\t* io.c (check_io_constraints): Use gfc_unset_implicit_pure.\n-\t* resolve.c (resolve_ordinary_assign): Ditto.\n-\n-2014-03-19  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60543\n-\tPR fortran/60283\n-\t* gfortran.h (gfc_unset_implicit_pure): New prototype.\n-\t* resolve.c (gfc_unset_implicit_pure): New.\n-\t(resolve_structure_cons, resolve_function,\n-\tpure_subroutine): Use it.\n-\t* decl.c (match_old_style_init, gfc_match_data,\n-\tmatch_pointer_init, variable_decl): Ditto.\n-\t* expr.c (gfc_check_pointer_assign): Ditto.\n-\t* intrinsic.c (gfc_intrinsic_sub_interface): Ditto.\n-\t* io.c (match_vtag, gfc_match_open, gfc_match_close,\n-\tmatch_filepos, gfc_match_inquire, gfc_match_print,\n-\tgfc_match_wait): Ditto.\n-\t* match.c (gfc_match_critical, gfc_match_stopcode,\n-\tlock_unlock_statement, sync_statement, gfc_match_allocate,\n-\tgfc_match_deallocate): Ditto.\n-\t* parse.c (decode_omp_directive): Ditto.\n-\t* symbol.c (gfc_add_save): Ditto.\n-\n-2014-03-18  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55207\n-\tPR fortran/60549\n-\t* decl.c (match_attr_spec): Revert r208590.\n-\n-2014-03-18  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR ipa/58721\n-\t* trans.c (gfc_unlikely, gfc_likely): Don't add __builtin_expect\n-\tif !optimize.\n-\n-2014-03-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR ipa/58721\n-\t* trans.h (gfc_unlikely, gfc_likely): Add predictor as argument.\n-\t(gfc_trans_io_runtime_check): Remove.\n-\t* trans-io.c (gfc_trans_io_runtime_check): Make static; add has_iostat\n-\tas argument, add predictor to block.\n-\t(set_parameter_value, gfc_trans_open, gfc_trans_close, build_filepos,\n-\tgfc_trans_inquire, gfc_trans_wait, build_dt): Update calls.\n-\t* trans.c (gfc_unlikely, gfc_likely): Add predictor as argument.\n-\t(gfc_trans_runtime_check, gfc_allocate_using_malloc,\n-\tgfc_allocate_allocatable, gfc_deallocate_with_status): Set explicitly\n-\tbranch predictor.\n-\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n-\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n-\t* trans-array.c (gfc_array_init_size, gfc_array_allocate): Ditto.\n-\n-2014-03-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55207\n-\t* decl.c (match_attr_spec): Variables in the main program implicitly\n-\tget the SAVE attribute in Fortran 2008.\n-\n-2014-03-14  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/60392\n-\t* trans-array.c (gfc_conv_array_parameter): Don't reuse the descriptor\n-\tif it has transposed dimensions.\n-\n-2014-03-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60447\n-\t* f95-lang.c (gfc_init): Return false when only\n-\tpreprocessing.\n-\t* options.c (gfc_post_options): Ditto.\n-\n-2014-03-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortran.texi (Fortran 2003 Status): Mention finalization,\n-\tdeferred-length character support and input rounding.\n-\t(Fortran 2008 Status): Mention that at termination\n-\tsignalling exceptions are shown.\n-\n-2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n-\t    Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/51976\n-\t* gfortran.h (symbol_attribute): Add deferred_parameter attribute.\n-\t* primary.c (build_actual_constructor): It is not an error if\n-\ta missing component has the deferred_parameter attribute;\n-\tequally, if one is given a value, it is an error.\n-\t* resolve.c (resolve_fl_derived0): Remove error for deferred\n-\tcharacter length components.  Add the hidden string length\n-\tfield to the structure. Give it the deferred_parameter\n-\tattribute.\n-\t* trans-array.c (duplicate_allocatable): Add a strlen field\n-\twhich is used as the element size if it is non-null.\n-\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Pass a\n-\tNULL to the new argument in duplicate_allocatable.\n-\t(structure_alloc_comps): Set the hidden string length as\n-\tappropriate. Use it in calls to duplicate_allocatable.\n-\t(gfc_alloc_allocatable_for_assignment): When a deferred length\n-\tbackend declaration is variable, use that; otherwise use the\n-\tstring length from the expression evaluation.\n-\t* trans-expr.c (gfc_conv_component_ref): If this is a deferred\n-\tcharacter length component, the string length should have the\n-\tvalue of the hidden string length field.\n-\t(gfc_trans_subcomponent_assign): Set the hidden string length\n-\tfield for deferred character length components.  Allocate the\n-\tnecessary memory for the string.\n-\t(alloc_scalar_allocatable_for_assignment): Same change as in\n-\tgfc_alloc_allocatable_for_assignment above.\n-\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n-\t* trans-intrinsic (size_of_string_in_bytes): Make non-static.\n-\t* trans-types.c (gfc_get_derived_type): Set the tree type for\n-\ta deferred character length component.\n-\t* trans.c (gfc_deferred_strlen): New function.\n-\t* trans.h (size_of_string_in_bytes,gfc_deferred_strlen): New prototypes.\n-\n-2014-03-01  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/60341\n-\t* frontend-passes.c (optimize_comparison): Guard two union accesses\n-\twith the corresponding tag checks.\n-\n-2014-02-28  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60359\n-\t* class.c (find_intrinsic_vtab): Prevent duplicate creation of copy\n-\tprocedure for characters.\n-\n-2014-02-21  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60302\n-\t* check.c (gfc_check_c_f_pointer): Only clear 'size' if 'gfc_array_size'\n-\tis successful.\n-\n-2014-02-21  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60234\n-\t* gfortran.h (gfc_build_class_symbol): Removed argument.\n-\t* class.c (gfc_add_component_ref): Fix up missing vtype if necessary.\n-\t(gfc_build_class_symbol): Remove argument 'delayed_vtab'. vtab is always\n-\tdelayed now, except for unlimited polymorphics.\n-\t(comp_is_finalizable): Procedure pointer components are not finalizable.\n-\t* decl. (build_sym, build_struct, attr_decl1): Removed argument of\n-\t'gfc_build_class_symbol'.\n-\t* match.c (copy_ts_from_selector_to_associate, select_type_set_tmp):\n-\tDitto.\n-\t* symbol.c (gfc_set_default_type): Ditto.\n-\n-2014-02-19  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60232\n-\t* expr.c (gfc_get_variable_expr): Don't add REF_ARRAY for dimensionful\n-\tfunctions, which are used as procedure pointer target.\n-\n-2014-02-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/49397\n-\t* expr.c (gfc_check_pointer_assign): Add check for\n-\tF2008Cor2, C729.\n-\t* trans-decl.c (gfc_get_symbol_decl): Correctly generate external\n-\tdecl in a corner case.\n-\n-2014-02-18  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/60231\n-\t* resolve.c (check_generic_tbp_ambiguity): Check for presence of dummy\n-\targuments to prevent ICE.\n-\n-2014-02-17  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/55907\n-\t* resolve.c (build_default_init_expr): Don't initialize character\n-\tvariable if -fno-automatic is given.\n-\n-2014-02-15  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/59599\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Calculate the\n-\tnumber of arguments.\n-\n-2014-02-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/52370\n-\t* trans-decl.c (gfc_build_dummy_array_decl): Set TREE_NO_WARNING\n-\ton decl if sym->attr.optional.\n-\n-2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/57522\n-\t* resolve.c (resolve_assoc_var): Set the subref_array_pointer\n-\tattribute for the 'associate-name' if necessary.\n-\t* trans-stmt.c (trans_associate_var): If the 'associate-name'\n-\tis a subref_array_pointer, assign the element size of the\n-\tassociate variable to 'span'.\n-\n-2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/59026\n-\t* trans-expr.c (gfc_conv_procedure_call): Pass the value of the\n-\tactual argument to a formal argument with the value attribute\n-\tin an elemental procedure.\n-\n-2014-02-08  Janus Weil  <janus@gcc.gnu.org>\n-\t    Mikael Morin <mikael.morin@gcc.gnu.org>\n-\n-\tPR fortran/58470\n-\t* class.c (generate_finalization_wrapper): Assert that proc_tree has\n-\tbeen set in gfc_resolve_finalizers.\n-\t* resolve.c (resolve_fl_derived0): Remove unnecessary call to\n-\tgfc_is_finalizable.\n-\n-2014-02-07  Benno Schulenberg  <bensberg@justemail.net>\n-\n-\tPR translation/52289\n-\t* fortran/resolve.c (resolve_ordinary_assign): Fix typoed word\n-\tin an error message.\n-\n-2014-02-02  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/57033\n-\t* primary.c (gfc_convert_to_structure_constructor): Avoid null pointer\n-\tdereference.\n-\n-2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/59906\n-\t* trans-stmt.c (gfc_add_loop_ss_code): In the case of character\n-\tSS_REFERENCE, use gfc_conv_string_parameter to ensure that a\n-\tpointer to the string is stored.\n-\t* trans-expr.c (gfc_conv_expr_reference): Likewise, use\n-\tgfc_conv_string_parameter to ensure that a pointer to is passed\n-\tto the elemental function.\n-\n-2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/59414\n-\t* trans-stmt.c (gfc_trans_allocate): Before the pointer\n-\tassignment to transfer the source _vptr to a class allocate\n-\texpression, the final class reference should be exposed. The\n-\ttail that includes the _data and array references is stored.\n-\tThis reduced expression is transferred to 'lhs' and the _vptr\n-\tadded. Then the tail is restored to the allocate expression.\n-\n-2014-01-26  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/58007\n-\t* module.c (read_module): Assert for component name correctness.\n-\n-2014-01-18  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/58007\n-\t* module.c (MOD_VERSION): Bump.\n-\t(fp2, find_pointer2): Remove.\n-\t(mio_component_ref): Don't forcedfully set the containing derived type\n-\tsymbol for loading.  Remove unused argument.\n-\t(mio_ref): Update caller\n-\t(mio_symbol): Dump component list earlier.\n-\t(skip_list): New argument nest_level.  Initialize level with the new\n-\targument.\n-\t(read_module): Add forced pointer components association for derived\n-\ttype symbols.\n-\n-2014-01-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58026\n-\t* decl.c (gfc_match_data_decl): Improve error recovery.\n-\n-2014-01-09  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* cpp.c (gfc_cpp_handle_option): Add missing break.\n-\t* trans-io.c (transfer_expr): Silence unused value warning.\n-\n-2014-01-08  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/58182\n-\t* resolve.c (gfc_verify_binding_labels): Modify order of checks.\n-\n-2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59589\n-\t* class.c (comp_is_finalizable): New function to dermine if a given\n-\tcomponent is finalizable.\n-\t(finalize_component, generate_finalization_wrapper): Use it.\n-\n-2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59023\n-\tPR fortran/59662\n-\t* resolve.c (resolve_global_procedure): Don't apply to c-binding\n-\tprocedures.\n-\t(gfc_verify_binding_labels): Remove duplicate line.\n-\n-2014-01-04  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59547\n-\t* class.c (add_proc_comp): Copy pure attribute.\n-\n-2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n-\n-\tUpdate copyright years\n-\n-2014-01-02  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n-\t* gfc-internals.texi: Bump @copying's copyright year.\n-\t* gfortran.texi: Ditto.\n-\t* intrinsic.texi: Ditto.\n-\t* invoke.texi: Ditto.\n-\n-2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/59654\n-\t* resolve.c (resolve_typebound_procedures): No need to create the vtab\n-\there.\n-\f\n Copyright (C) 2014 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,"}, {"sha": "b102e312e98543a4b03222117cc644367b18f95f", "filename": "gcc/fortran/ChangeLog-2014", "status": "added", "additions": 2578, "deletions": 0, "changes": 2578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2FChangeLog-2014", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2FChangeLog-2014", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2014?ref=4294c0935c186a724f044c36ca9693a7138853ae", "patch": "@@ -0,0 +1,2578 @@\n+2014-12-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* match.c (gfc_match_stopcode): Permit error stop in pure\n+\tprocedures with F2015.\n+\n+2014-12-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* trans-array.c (trans_array_bound_check): Use xasprintf instead\n+\tof unchecked asprintf.\n+\t(gfc_conv_array_ref): Ditto.\n+\t(gfc_conv_ss_startstride): Ditto.\n+\t(gfc_trans_dummy_array_bias): Ditto.\n+\t(gfc_conv_array_parameter): Ditto.\n+\t* trans-decl.c (gfc_generate_function_code): Ditto.\n+\t* trans-expr.c (gfc_conv_substring): Ditto.\n+\t(gfc_conv_procedure_call): Ditto.\n+\t* trans-io.c (gfc_trans_io_runtime_check): Ditto.\n+\t(set_string): Ditto.\n+\t* trans.c (trans-runtime_error_vararg): Ditto.\n+\n+2014-12-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60357\n+\t* array.c (check_constructor): Ignore empty expressions.\n+\t* expr.c (check_alloc_comp_init): Check if constructor expression\n+\texists.\n+\t* primary.c (build_actual_constructor): Warn for absent alloc-comp\n+\tinitializers in pre-2008 standards.\n+\n+2014-12-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56867\n+\t* trans-array.c (gfc_conv_resolve_dependencies):  Also check\n+\tdependencies when there may be substrings of character arrays.\n+\n+2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54756\n+\t* resolve.c (resolve_formal_arglist): Reject polymorphic INTENT(OUT)\n+\targuments of pure procedures.\n+\n+2014-12-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get, conv_caf_send):\n+\tFix vector handling.\n+\n+2014-12-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63363\n+\t* check.c (gfc_check_kind): Reject polymorphic and non-data arguments.\n+\n+2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/64209\n+\t* trans-expr.c (gfc_trans_class_array_init_assign): Check if _def_init\n+\tcomponent is non-NULL.\n+\t(gfc_trans_class_init_assign): Ditto.\n+\n+2014-12-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/64173\n+\t* trans-array.c (structure_alloc_comps): Do not nullify procedure\n+\tpointer components.\n+\n+2014-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* trans-types.c (gfc_get_array_descr_info): Describe all Fortran arrays\n+\twith column major ordering.\n+\n+2014-12-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54687\n+\t* gfortran.h (gfc_option_t): Remove flags which now\n+\thave a Var().\n+\t(init_local_real, gfc_fcoarray): Moved to ../flag-types.h.\n+\t* libgfortran.h (unit_convert): Add comment.\n+\t* lang.opt (flag-convert, flag-init_real, flag-coarray):\n+\tAdd Var() and Enum().\n+\t* options.c (gfc_handle_coarray_option): Remove.\n+\t(gfc_init_options, gfc_post_options, gfc_handle_option):\n+\tUpdate for *.opt changes.\n+\t* array.c: Update for flag-variable name changes.\n+\t* check.c: Ditto.\n+\t* match.c: Ditto.\n+\t* resolve.c: Ditto.\n+\t* simplify.c: Ditto.\n+\t* trans-array.c: Ditto.\n+\t* trans-decl.c: Ditto.\n+\t* trans-expr.c: Ditto.\n+\t* trans-intrinsic.c: Ditto.\n+\t* trans-stmt.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\t* trans.c: Ditto.\n+\n+2014-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54687\n+\t* gfortran.h (gfc_option_t): Remove flags which now\n+\thave a Var().\n+\t* lang.opt (flag-aggressive_function_elimination,\n+\tflag-align_commons, flag-all_intrinsics,\n+\tflag-allow_leading_underscore, flag-automatic, flag-backslash,\n+\tflag-backtrace, flag-blas_matmul_limit, flag-cray_pointer,\n+\tflag-dollar_ok, flag-dump_fortran_original,\n+\tflag-dump_fortran_optimized, flag-external_blas, flag-f2c,\n+\tflag-implicit_none, flag-max_array_constructor,\n+\tflag-module_private, flag-pack_derived, flag-range_check,\n+\tflag-recursive, flag-repack_arrays, flag-sign_zero,\n+\tflag-underscoring): Add Var() and, where applicable, Enum().\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Update for *.opt changes.\n+\t* arith.c: Update for flag-variable name changes.\n+\t* array.c: Ditto.\n+\t* cpp.c: Ditto.\n+\t* decl.c: Ditto.\n+\t* expr.c: Ditto.\n+\t* f95-lang.c: Ditto.\n+\t* frontend-passes.c: Ditto.\n+\t* intrinsic.c: Ditto.\n+\t* io.c: Ditto.\n+\t* match.c: Ditto.\n+\t* module.c: Ditto.\n+\t* parse.c: Ditto.\n+\t* primary.c: Ditto.\n+\t* resolve.c: Ditto.\n+\t* scanner.c: Ditto.\n+\t* simplify.c: Ditto.\n+\t* symbol.c: Ditto.\n+\t* trans-array.c: Ditto.\n+\t* trans-common.c: Ditto.\n+\t* trans-decl.c: Ditto.\n+\t* trans-expr.c: Ditto.\n+\t* trans-intrinsic.c: Ditto.\n+\t* trans-openmp.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\n+2014-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54687\n+\t* lang.opt (fsecond-underscore, frecord-marker=8, frecord-marker=4,\n+\tfrealloc-lhs, freal-8-real-16, freal-8-real-10, freal-8-real-4,\n+\tfreal-4-real-16, freal-4-real-10, freal-4-real-8, fprotect-parens,\n+\tfstack-arrays, fmax-stack-var-size=, fmax-subrecord-length=,\n+\tffrontend-optimize, ffree-line-length-, ffixed-line-length-,\n+\tfinteger-4-integer-8, fdefault-real-8, fdefault-integer-8,\n+\tfdefault-double-8): Add Var() and Init().\n+\t* gfortran.h (gfc_option_t): Remove moved flags.\n+\t* options.c (gfc_init_options, gfc_handle_option): Ditto.\n+\t(gfc_post_options): Update for name change.\n+\t* decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Handle\n+\tflag-name change.\n+\t* frontend-passes.c (gfc_run_passes): Ditto.\n+\t* module.c (use_iso_fortran_env_module): Ditto.\n+\t* primary.c (match_integer_constant, match_real_constant): Ditto.\n+\t* resolve.c (resolve_ordinary_assign): Ditto.\n+\t* scanner.c (gfc_next_char_literal, load_line): Ditto.\n+\t* trans-array.c (gfc_trans_allocate_array_storage,\n+\tgfc_conv_resolve_dependencies, gfc_trans_auto_array_allocation,\n+\tgfc_conv_ss_startstride): Ditto.\n+\t* trans-common.c (gfc_sym_mangled_common_id): Ditto.\n+\t* trans-decl.c (gfc_sym_mangled_function_id,\n+\tcreate_main_function): Ditto.\n+\t* trans-expr.c (gfc_conv_expr_op, gfc_conv_procedure_call,\n+\tarrayfunc_assign_needs_temporary, gfc_trans_arrayfunc_assign,\n+\tgfc_trans_assignment_1): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\t* trans-types.c (gfc_init_kinds): Ditto.\n+\n+2014-12-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/64244\n+\t* resolve.c (resolve_typebound_call): New argument to pass out the\n+\tnon-overridable attribute of the specific procedure.\n+\t(resolve_typebound_subroutine): Get overridable flag from\n+\tresolve_typebound_call.\n+\n+2014-12-15  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR fortran/61669\n+\t* gfortran.h (struct gfc_namespace): Add OLD_DATA field.\n+\t* decl.c (gfc_reject_data): New function.\n+\t* parse.c *use_modules): Record roll-back point.\n+\t(next_statement): Likewise.\n+\t(reject_statement): Roll back to last accepted DATA.\n+\n+2014-12-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63727\n+\t* resolve.c (resolve_actual_arglist): Check for elemental procedure\n+\tpointer components.\n+\n+2014-12-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63674\n+\t* resolve.c (check_pure_function): Rewording in error message.\n+\n+2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63674\n+\t* resolve.c (pure_function): Treat procedure-pointer components.\n+\t(check_pure_function): New function.\n+\t(resolve_function): Use it.\n+\t(pure_subroutine): Return a bool to indicate success and modify\n+\targuments.\n+\t(resolve_generic_s0,resolve_specific_s0,resolve_unknown_s): Use return\n+\tvalue of 'pure_subroutine'.\n+\t(resolve_ppc_call): Call 'pure_subroutine'.\n+\t(resolve_expr_ppc): Call 'check_pure_function'.\n+\n+2014-12-13  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (gfc_error): Add variant which takes a va_list.\n+\t(gfc_notify_std): Convert to common diagnostic.\n+\t* array.c: Use %qs, %<...%> in more gfc_error calls and\n+\tfor gfc_notify_std.\n+\t* check.c: Ditto.\n+\t* data.c: Ditto.\n+\t* decl.c: Ditto.\n+\t* expr.c: Ditto.\n+\t* interface.c: Ditto.\n+\t* intrinsic.c: Ditto.\n+\t* io.c: Ditto.\n+\t* match.c: Ditto.\n+\t* matchexp.c: Ditto.\n+\t* module.c: Ditto.\n+\t* openmp.c: Ditto.\n+\t* parse.c: Ditto.\n+\t* primary.c: Ditto.\n+\t* resolve.c: Ditto.\n+\t* simplify.c: Ditto.\n+\t* symbol.c: Ditto.\n+\t* trans-common.c: Ditto.\n+\t* trans-intrinsic.c: Ditto.\n+\n+2014-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42108\n+\t* trans-stmt.c (gfc_trans_do): Execute the division computing\n+\tcountm1 before the loop entry check.\n+\n+2014-12-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* error.c (pp_error_buffer): New static variable.\n+\t(pp_warning_buffer): Make it a pointer.\n+\t(gfc_output_buffer_empty_p): New.\n+\t(gfc_error_init_1): Call gfc_buffer_error.\n+\t(gfc_buffer_error): Do not use pp_warning_buffer.flush_p as the\n+\tbuffered_p flag.\n+\t(gfc_clear_warning): Likewise.\n+\t(gfc_warning_check): Call gfc_clear_warning. Only check the new\n+\tpp_warning_buffer if the old warning_buffer was empty. Call\n+\tdiagnostic_action_after_output.\n+\t(gfc_error_1): Renamed from gfc_error.\n+\t(gfc_error): New.\n+\t(gfc_clear_error): Clear also pp_error_buffer.\n+\t(gfc_error_flag_test): Check also pp_error_buffer.\n+\t(gfc_error_check): Likewise. Only check the new pp_error_buffer\n+\tif the old error_buffer was empty.\n+\t(gfc_move_output_buffer_from_to): New.\n+\t(gfc_push_error): Use it here. Take also an output_buffer as argument.\n+\t(gfc_pop_error): Likewise.\n+\t(gfc_free_error): Likewise.\n+\t(gfc_diagnostics_init): Use XNEW and placement-new to init\n+\tpp_error_buffer and pp_warning_buffer. Set flush_p to false for\n+\tboth pp_warning_buffer and pp_error_buffer.\n+\n+\t* Update gfc_push_error, gfc_pop_error and gfc_free_error calls\n+\taccording to the above changes.\n+\t* Use gfc_error_1 for all gfc_error calls that use multiple\n+\tlocations.\n+\t* Use %qs instead of '%s' for many gfc_error calls.\n+\n+2014-12-11  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* diagnostic.c (get_terminal_width): Renamed from getenv_columns,\n+\tremoved static, and additionally use ioctl to get width.\n+\t(diagnostic_set_caret_max_width): Update call.\n+\t* diagnostic.h (get_terminal_width): Add prototype.\n+\t* opts.c (print_specific_help): Use it for x_help_columns.\n+\t* doc/invoke.texi (fdiagnostics-show-caret): Document how the\n+\twidth is set.\n+\n+2014-12-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR fortran/60718\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix a strict aliasing\n+\tviolation when passing a class object to a formal parameter which has\n+\tdifferent pointer or allocatable attributes.\n+\n+2014-12-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_error_check): Use bool not int.\n+\t* gfortran.h (gfc_error_check): Update prototype.\n+\t* match.c (gfc_match_if): Update call.\n+\t* parse.c (decode_statement, decode_omp_directive,\n+\tdecode_gcc_attribute): Ditto.\n+\n+2014-12-06  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (gfc_buffer_error, gfc_error_flag_test): Use bool not int.\n+\t(buffer_flag): Remove static variable.\n+\t(buffered_p): Add static variable.\n+\t(gfc_error_init_1): Call gfc_buffer_error.\n+\t(gfc_warning_1, gfc_warning, gfc_warning_now_1, gfc_error,\n+\tgfc_error_now_1): Update for static variable change.\n+\t* gfortran.h (gfc_buffer_error, gfc_error_flag_test): Update\n+\tprototype.\n+\t* parse.c (use_modules, decode_specification_statement,\n+\tnext_fixed, next_statement, match_deferred_characteristics):\n+\tUpdate calls.\n+\t* decl.c (gfc_match_data_decl): Ditto.\n+\t* match.c (gfc_match_name): Ditto.\n+\n+2014-12-05  Andre Vehreschild  <vehre@gmx.de>\n+\n+\tPR fortran/60414\n+\t* interface.c (compare_parameter): Remove class argument rank\n+\tcheck short circuit.\n+\n+2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (gfc_diagnostic_build_locus_prefix): Use\n+\tdiagnostic_expand_location.\n+\n+2014-12-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* scanner.c (gfc_next_char_literal): Use gfc_warning_now.\n+\t(load_file): Use the line length as the column hint for\n+\tlinemap_line_start. Reserve a location for the highest column of\n+\tthe line.\n+\n+2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h (gfc_warning): Now returns bool. Add overload that\n+\taccepts opt.\n+\t(gfc_warning_1): Declare.\n+\t* error.c\n+\t(pp_warning_buffer,warningcount_buffered,werrorcount_buffered):\tNew.\n+\t(gfc_buffer_error): Set pp_warning_buffer.flush_p.\n+\t(gfc_clear_pp_buffer): New.\n+\t(gfc_warning_1): Renamed from gfc_warning.\n+\t(gfc_warning): Add three new overloads. One that takes just a\n+\tformat string and ellipsis, another that takes also a warning\n+\toption, and another that takes also va_list instead of ellipsis.\n+\t(gfc_clear_warning): Clear pp_warning_buffer.\n+\t(gfc_warning_check): Flush pp_warning_buffer and update warning\n+\tand werror counters.\n+\t(gfc_diagnostics_init): Init pp_warning_buffer.\n+\n+\t* Update all gfc_warning calls that do not use multiple\n+\tlocations to use %qs and OPT_W*, otherwise use gfc_warning_1.\n+\n+2014-12-02  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* error.c (warnings_not_errors): Use bool.\n+\t(gfc_clear_error): Update.\n+\t(gfc_get_errors): Ditto. Use bool argument.\n+\t* gfortran.h (gfc_get_errors): Update prototype.\n+\t* resolve.c (resolve_global_procedure): Update call.\n+\n+2014-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR fortran/64137\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Check\n+\tproper expressions type, use proper type for computing\n+\t-Huge - 1.\n+\n+2014-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.c (gfc_omp_finish_clause,\n+\tgfc_trans_omp_array_reduction_or_udr, gfc_trans_omp_atomic): Remove\n+\tNULL last argument from create_tmp_var_raw and create_tmp_var calls.\n+\n+2014-11-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* scanner.c (skip_free_comments, gfc_gobble_whitespace): Use\n+\tgfc_warning_now instead of ..._now_1.\n+\n+2014-11-29  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* lang.opt (Wtabs): Combine duplicated item into a single\n+\tone using || for LangEnabledBy.\n+\n+2014-11-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_internal_error): Convert to common diagnostics.\n+\t* interface.c (gfc_find_sym_in_symtree): Use %qs.\n+\t* intrinsic.c (make_generic, gfc_check_intrinsic_standard,\n+\tgfc_convert_type_warn): Ditto.\n+\t* module.c (write_symbol): Ditto.\n+\t* symbol.c (gfc_get_default_type): Ditto; use fatal instead\n+\tof internal error.\n+\t* trans-array.c (gfc_walk_subexpr): Replace internal_error by\n+\tgfc_internal_error.\n+\t* trans-decl.c (gfc_get_symbol_decl,\n+\t(gfc_create_module_variable): Ditto. Use %qs.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Ditto.\n+\t* trans-io.c (transfer_expr): Ditto.\n+\t* trans-openmp.c (gfc_trans_omp_workshare): Ditto.\n+\t* trans.c (trans_code): Ditto.\n+\n+2014-11-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Remove flags moved as Var to .opt.\n+\t(gfc_error_now_1): Renamed from gfc_error_now.\n+\t(gfc_error_now): Renamed from gfc_error_now_2.\n+\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n+\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n+\t* error.c (gfc_error_now_1): Renamed from gfc_error_now.\n+\t(gfc_error_now): Renamed from gfc_error_now_2.\n+\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n+\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n+\t(gfc_get_errors): Include common diagnostic in count.\n+\t* lang.opt (Wc-binding-type, Wconversion, Wconversion-extra,\n+\tWintrinsics-std): Create a Var for those warnings.\n+\t* check.c (gfc_check_cmplx): Pass warning flag to\n+\tdiagnostic function.\n+\t* decl.c (get_proc_name, gfc_verify_c_interop_param, build_sym\n+\tgfc_set_constant_character_len, verify_bind_c_sym): Ditto; use\n+\t_1 for old diagnostic, remove _2 for new diagnostic.\n+\t* expr.c (gfc_check_assign, gfc_check_vardef_context): Ditto.\n+\t* frontend-passes.c (doloop_code, do_function): Ditto.\n+\t* intrinsic.c (gfc_is_intrinsic, gfc_convert_type_warn): Ditto.\n+\t* match.c (gfc_match_common): Ditto.\n+\t* module.c (use_iso_fortran_env_module, gfc_use_module): Ditto.\n+\t* parse.c (decode_statement, decode_gcc_attribute, next_free,\n+\tnext_fixed, gfc_check_do_variable): Ditto.\n+\t* resolve.c (resolve_common_vars, resolve_ordinary_assign):\n+\tDitto.\n+\t* scanner.c (add_path_to_list, skip_free_comments,\n+\tgfc_next_char_literal, gfc_gobble_whitespace, load_line,\n+\tpreprocessor_line, load_file): Ditto.\n+\t* symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n+\tDitto.\n+\t* options.c (gfc_post_options): Ditto.\n+\t(gfc_init_options, set_Wall, gfc_handle_option): Ditto; remove\n+\tflags which now have a Var.\n+\t* invoke.texi (Wconversion-extra): Make clear that the flag\n+\tdoes not imply -Wconversion.\n+\n+2014-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/63938\n+\t* trans-openmp.c (gfc_trans_omp_atomic): Make sure lhsaddr is\n+\tsimple enough for goa_lhs_expr_p.\n+\n+2014-11-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_fatal_error_1): Remove.\n+\t* gfortran.h (gfc_fatal_error_1): Remove.\n+\t* check.c (check_co_collective): Change gfc_fatal_error_1 to\n+\tgfc_fatal_error.\n+\t* match.c (gfc_match_name): Ditto.\n+\t* trans-array.c (gfc_conv_array_initializer): Ditto.\n+\t* trans-stmt.c (gfc_trans_sync): Ditto.\n+\n+2014-11-23  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* decl.c (gfc_verify_c_interop_param): Use gfc_error_now_2.\n+\t(gfc_set_constant_character_len): Use gfc_warning_now_2.\n+\t* resolve.c (resolve_ordinary_assign): Likewise.\n+\t* gfortran.h (warn_character_truncation): Do not declare here.\n+\t* error.c (gfc_format_decoder): Handle %L.\n+\t* lang.opt (Wcharacter-truncation): Add Var and LangEnabledBy.\n+\t* options.c (gfc_init_options): Do not handle\n+\twarn_character_truncation explicitly.\n+\t(set_Wall): Likewise.\n+\t(gfc_handle_option): Likewise.\n+\n+2014-11-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* invoke.texi (-Wtabs): Swap -Wtabs/-Wno-tabs now that\n+\t-Wtabs enables the warning.\n+\n+2014-11-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_diagnostic_build_prefix): Correct coloring\n+\tof the colon of the prefix.\n+\n+2014-11-23  Tobias Burnus  <burnus@net-b.de>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_option_t): Remove warn_tabs.\n+\t* lang.opt (Wpedantic): Add.\n+\t(Wtabs): Use Var and LangEnabledBy.\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tset_Wall): Remove -Wtabs handling.\n+\t(gfc_handle_option): Update -std=, remove OPT_Wtabs.\n+\t* scanner.c (gfc_gobble_whitespace): Update for\n+\tflag-variable renaming.\n+\t(load_line): Ditto. Pass warn flag to diagnostic.\n+\n+2014-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (gfc_caf_get_image_index): Fix image calculation.\n+\n+2014-11-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error.\n+\t(gfc_fatal_error): Add; uses common diagnostics.\n+\t* array.c (gfc_match_array_ref, gfc_match_array_spec): Use\n+\t%< %>.\n+\t* check.c (check_co_collective, gfc_check_lcobound,\n+\tgfc_check_image_index, gfc_check_num_images,\n+\tgfc_check_this_image, gfc_check_ucobound): Ditto.\n+\t* cpp.c (gfc_cpp_post_options): Ditto.\n+\t(gfc_cpp_init_0, gfc_cpp_done): Change %s to %qs.\n+\t* gfc-diagnostic.def (DK_FATAL): Capitalize first letter.\n+\t* gfortran.h (gfc_fatal_error_1): Add.\n+\t* match.c (gfc_match_name, gfc_match_critical,\n+\tlock_unlock_statement, sync_statement): Add %< %>.\n+\t* module.c (bad_module, gfc_dump_module, gfc_use_module): Change\n+\t%s to %qs.\n+\t* options.c (gfc_handle_module_path_options, gfc_handle_fpe_option,\n+\tgfc_handle_coarray_option, gfc_handle_runtime_check_option,\n+\tgfc_handle_option): Add %< %>.\n+\t* simplify.c (gfc_simplify_num_images): Ditto.\n+\t* trans-stmt.c (gfc_trans_sync): Use gfc_fatal_error_1.\n+\t* trans-array.c (gfc_conv_array_initializer): Ditto.\n+\t* trans-types.c (gfc_init_kinds): Use gfc_fatal_error instead\n+\tof fatal_error; add %< %> quotations.\n+\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Make-lang.in (fortran.install-common): Do not install for the offload\n+\tcompiler.\n+\n+2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h (warn_use_without_only): Remove.\n+\t(gfc_diagnostics_finish): Declare.\n+\t* error.c: Include tree-diagnostics.h\n+\t(gfc_format_decoder): New.\n+\t(gfc_diagnostics_init): Use gfc_format_decoder. Set default caret\n+\tchar.\n+\t(gfc_diagnostics_finish): Restore tree diagnostics defaults, but\n+\tkeep gfc_diagnostics_starter and finalizer. Restore default caret.\n+\t* options.c: Remove all uses of warn_use_without_only.\n+\t* lang.opt (Wuse-without-only): Add Var.\n+\t* f95-lang.c (gfc_be_parse_file): Call gfc_diagnostics_finish.\n+\t* module.c (gfc_use_module): Use gfc_warning_now_2.\n+\t* parse.c (decode_statement): Likewise.\n+\t(decode_gcc_attribute): Likewise.\n+\t(next_free): Likewise.\n+\t(next_fixed): Likewise.\n+\n+2014-11-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR fortran/63701\n+\t* trans-expr.c (gfc_get_tree_for_caf_expr): Initialise found to false.\n+\n+2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47007\n+\tPR libfortran/61847\n+\t* gfortran.texi: Add note about locale issues to thread-safety\n+\tsection.\n+\n+2014-11-04  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Use type index 2 for\n+\tscalbn, scalbnl and scalbnf.\n+\t* mathbuiltins.def (JN, YN): Use type index 5.\n+\n+2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* trans-types.c, trans-types.h: Remove redundant enum from\n+\tmachine_mode.\n+\n+2014-10-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h (gfc_warning_cmdline): Rename as gfc_warning_now_2.\n+\t(gfc_error_cmdline): Rename as gfc_error_now_2.\n+\t* error.c (gfc_diagnostic_build_locus_prefix): Remove trailing space.\n+\t(gfc_diagnostic_starter): Add space between locus and prefix.\n+\t(gfc_warning_now_2): Renamed from gfc_warning_cmdline.\n+\t(gfc_error_now_2): Renamed from gfc_error_cmdline.\n+\t* scanner.c (add_path_to_list): Use gfc_warning_now_2.\n+\t(load_line): Likewise.\n+\t(load_file): Likewise.\n+\t* options.c (gfc_post_options): Update all renamed functions.\n+\n+2014-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* f95-lang.c: Adjust include files.\n+\t* trans-decl.c: Ditto.\n+\n+2014-10-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_collective): Reject coindexed A args.\n+\t(gfc_check_co_reduce): Add OPERATOR checks.\n+\t* gfortran.texi (_gfortran_caf_co_broadcast, _gfortran_caf_co_max,\n+\t_gfortran_caf_co_min, _gfortran_caf_co_sum,\n+\t_gfortran_caf_co_reduce): Add ABI documentation.\n+\t* intrinsic.texi (CO_REDUCE): Document intrinsic.\n+\t(DPROD): Returns double not single precision.\n+\t* trans-decl.c (gfor_fndecl_co_reduce): New global var.\n+\t(gfc_build_builtin_function_decls): Init it.\n+\t* trans.h (gfor_fndecl_co_reduce): Declare it.\n+\t* trans-intrinsic.c (conv_co_collective,\n+\tgfc_conv_intrinsic_subroutine): Handle CO_REDUCE.\n+\n+2014-10-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/48979\n+\t* trans-const.c (gfc_build_nan): New function.\n+\t* trans-const.h (gfc_build_nan): New prototype.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_exponent): Handle special\n+\tvalues.\n+\t(gfc_conv_intrinsic_minmaxval): Use gfc_build_nan.\n+\t(gfc_conv_intrinsic_fraction): Handle special values.\n+\t(gfc_conv_intrinsic_spacing): Likewise.\n+\t(gfc_conv_intrinsic_rrspacing): Likewise.\n+\t(gfc_conv_intrinsic_set_exponent): Likewise.\n+\n+2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/63553\n+\t* resolve.c (resolve_ordinary_assign): Add data component to\n+\trvalue expression for class to type assignment.\n+\n+2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* f95-lang.c: Adjust include files.\n+\t* trans-decl.c: Likewise.\n+\n+2014-10-12  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* trans-decl.c, trans.c, trans.h: Use hash_table instead of hashtab.\n+\n+2014-10-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/48979\n+\t* simplify.c (gfc_simplify_atan): Use mpfr_zero_p to check for zeros.\n+\t(gfc_simplify_log): Likewise.\n+\t(gfc_simplify_scale): Likewise.\n+\t(gfc_simplify_exponent): Handle infinities and NaNs.\n+\t(gfc_simplify_fraction): Handle infinities.\n+\t(gfc_simplify_rrspacing): Handle signed zeros and NaNs.\n+\t(gfc_simplify_set_exponent): Handle infinities and NaNs.\n+\t(gfc_simplify_spacing): Handle zeros, infinities and NaNs.\n+\n+2014-10-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/59488\n+\t* trans-openmp.c (gfc_omp_predetermined_sharing): Return\n+\tOMP_CLAUSE_DEFAULT_SHARED for parameters or vtables.\n+\n+2014-10-10  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_set_implicit_none): Update prototype.\n+\t* symbol.c (gfc_set_implicit_none): Take and\n+\tuse error location. Move diagnostic from here to ...\n+\t* decl.c (gfc_match_implicit_none): ... here. And\n+\tupdate call. Handle empty implicit-none-spec.\n+\t(gfc_match_implicit): Handle statement-separator \";\".\n+\n+2014-10-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Add more floating-point\n+\tbuilt-ins.\n+\t* mathbuiltins.def (OTHER_BUILTIN): Define built-ins for logb,\n+\tremainder, rint and signbit.\n+\t* trans-decl.c (save_fp_state, restore_fp_state): Move to\n+\ttrans-intrinsic.c\n+\t(gfc_generate_function_code): Use new names for these two functions.\n+\t* trans-expr.c (gfc_conv_function_expr): Catch IEEE functions to\n+\temit code from the front-end.\n+\t* trans-intrinsic.c (gfc_save_fp_state, gfc_restore_fp_state,\n+\tconv_ieee_function_args, conv_intrinsic_ieee_builtin,\n+\tconv_intrinsic_ieee_is_normal, conv_intrinsic_ieee_is_negative,\n+\tconv_intrinsic_ieee_logb_rint, conv_intrinsic_ieee_rem,\n+\tconv_intrinsic_ieee_next_after, conv_intrinsic_ieee_scalb,\n+\tconv_intrinsic_ieee_copy_sign, gfc_conv_ieee_arithmetic_function):\n+\tNew functions.\n+\t* trans.h (gfc_conv_ieee_arithmetic_function,\n+\tgfc_save_fp_state, gfc_restore_fp_state): New prototypes.\n+\n+2014-10-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\tPR fortran/54687\n+\t* gfortran.h (gfc_warning_cmdline): Add overload that takes an\n+\toption.\n+\t(gfc_error_cmdline): Declare.\n+\t* error.c (gfc_warning_cmdline): New overload that takes an option.\n+\t(gfc_error_cmdline): New.\n+\t* lang.opt (Wmissing-include-dirs): New.\n+\t* scanner.c (add_path_to_list): Use the new functions.\n+\t(load_file): Likewise.\n+\t* options.c (gfc_init_options): Wmissing-include-dirs is enabled\n+\tby default in Fortran.\n+\t(gfc_handle_option): Accept automatically handled options.\n+\n+2014-10-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (GFC_STD_F2015): Add.\n+\t* decl.c (gfc_match_implicit_none): Handle spec list.\n+\t(gfc_match_implicit): Move double intrinsic warning here.\n+\t* gfortran.h (gfc_namespace): Add has_implicit_none_export:1.\n+\t(gfc_set_implicit_none): Update interface.\n+\t* interface.c (gfc_procedure_use): Add implicit-none external\n+\terror check.\n+\t* parse.c (accept_statement): Remove call.\n+\t(verify_st_order): Permit that external-implict-none follows\n+\timplicit statement.\n+\t* symbol.c (gfc_set_implicit_none): Handle external/type\n+\timplicit none.\n+\n+2014-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36534\n+\t* resolve.c (resolve_fl_procedure): Clean up obsolescence warning.\n+\n+2014-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_collective): Renamed from check_co_minmaxsum,\n+\thandle co_reduce.\n+\t(gfc_check_co_minmax, gfc_check_co_sum): Update call.\n+\t(gfc_check_co_broadcast, gfc_check_co_reduce): New.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_BROADCAST and\n+\tGFC_ISYM_CO_REDUCE.\n+\t* intrinsic.c (add_subroutines): Add co_reduce and co_broadcast.\n+\t* intrinsic.h (gfc_check_co_broadcast, gfc_check_co_reduce): Add\n+\tproto types.\n+\t* intrinsic.texi (CO_BROADCAST): Add.\n+\t* trans.h (gfor_fndecl_co_broadcast): New.\n+\t* trans-decl.c (gfor_fndecl_co_broadcast): Ditto.\n+\t(gfc_build_builtin_function_decls): Add decl for it,\n+\t* trans-intrinsic.c (conv_co_collective): Renamed from\n+\tconv_co_minmaxsum. Handle co_reduce.\n+\t(gfc_conv_intrinsic_subroutine): Handle co_reduce.\n+\n+2014-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/63331\n+\t* trans-types.c (gfc_get_array_descr_info): Build DEBUG_EXPR_DECL\n+\tinstead of VAR_DECL for base_decl.\n+\n+2014-09-21  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* openmp.c (omp_context): Rename to ...\n+\t(fortran_omp_context): ... this one.\n+\n+2014-09-21  Dominique d'Humieres <dominiq@lps.ens.fr>\n+\n+\t* resolve.c (resolve_fl_procedure): Remove duplicated lines.\n+\n+2014-09-20  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Fix issue with\n+\tgenerating temporary for value argument.\n+\n+2014-09-20  Joost VandeVondele  <vondele@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_reset_vptr): Fix comment whitespace.\n+\t(gfc_conv_class_to_class): Likewise.\n+\t(gfc_conv_procedure_call): Likewise.\n+\t(arrayfunc_assign_needs_temporary): Likewise.\n+\t(realloc_lhs_loop_for_fcn_call): Likewise.\n+\t(gfc_trans_assignment_1): Likewise.\n+\t* trans-array.c (gfc_conv_array_ref): Likewise.\n+\t(gfc_array_allocate): Likewise.\n+\t(gfc_alloc_allocatable_for_assignment): Likewise.\n+\t* symbol.c (generate_isocbinding_symbol): Likewise.\n+\t* class.c (finalization_scalarizer): Likewise.\n+\t(finalizer_insert_packed_call): Likewise.\n+\t(generate_finalization_wrapper): Likewise.\n+\t(find_intrinsic_vtab): Likewise.\n+\t* decl.c (gfc_match_import): Likewise.\n+\t(match_procedure_decl): Likewise.\n+\t(gfc_match_subroutine): Likewise.\n+\t(gfc_match_bind_c): Likewise.\n+\t(gfc_match_volatile): Likewise.\n+\t* trans-common.c (create_common): Likewise.\n+\t* error.c (gfc_diagnostic_starter): Likewise.\n+\t* trans-stmt.c (gfc_trans_sync): Likewise.\n+\t(gfc_trans_critical): Likewise.\n+\t(gfc_trans_simple_do): Likewise.\n+\t(gfc_trans_do): Likewise.\n+\t(gfc_trans_where_assign): Likewise.\n+\t* expr.c (gfc_is_simply_contiguous): Likewise.\n+\t* module.c (unquote_string): Likewise.\n+\t* trans.c (gfc_add_finalizer_call): Likewise.\n+\t* trans-types.c (gfc_init_kinds): Likewise.\n+\t* scanner.c (preprocessor_line): Likewise.\n+\t* gfortranspec.c (lang_specific_driver): Likewise.\n+\t* frontend-passes.c (create_var): Likewise.\n+\t(cfe_expr_0): Likewise.\n+\t* resolve.c (check_host_association): Likewise.\n+\t(gfc_resolve_code): Likewise.\n+\t(resolve_fl_derived0): Likewise.\n+\t(resolve_symbol): Likewise.\n+\t* f95-lang.c (poplevel): Likewise.\n+\t* trans-decl.c (create_main_function): Likewise.\n+\t* trans-io.c (transfer_expr): Likewise.\n+\t* arith.c (gfc_arith_divide): Likewise.\n+\t* parse.c (resolve_all_program_units): Likewise.\n+\t* check.c (gfc_check_rank): Likewise.\n+\t(gfc_check_sizeof): Likewise.\n+\t(is_c_interoperable): Likewise.\n+\t* dependency.c (gfc_dep_difference): Likewise.\n+\t* primary.c (gfc_match_rvalue): Likewise.\n+\t* trans-intrinsic.c (conv_intrinsic_system_clock): Likewise.\n+\t(conv_isocbinding_subroutine): Likewise.\n+\t* options.c (gfc_post_options): Likewise.\n+\t(gfc_handle_fpe_option): Likewise.\n+\t(gfc_get_option_string): Likewise.\n+\t* simplify.c (simplify_transformation_to_scalar): Likewise.\n+\t(gfc_simplify_spread): Likewise.\n+\n+2014-09-19  Joost VandeVondele  <vondele@gcc.gnu.org>\n+\n+\tPR fortran/63152\n+\t* trans-array.c (gfc_trans_deferred_array): Only nullify allocatables.\n+\n+2014-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check_gfortran_parallelize): Change to just an upper\n+\tbound number.\n+\n+2014-09-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/63252\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Fix\n+\tcaf_unlock declaration.\n+\n+2014-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Check\n+\ttargetm.libgcc_floating_mode_supported_p for floating-point\n+\tmodes.  Check HAVE_TFmode instead of LIBGCC2_HAS_TF_MODE.\n+\n+2014-09-05  Joost VandeVondele  <vondele@gcc.gnu.org>\n+\n+\tPR fortran/62245\n+\t* intrinsic.texi (INT): clarify result.\n+\n+2014-09-03  Fritz Reese  <Reese-Fritz@zai.com>\n+\n+\tPR fortran/62174\n+\t* decl.c (variable_decl): Don't overwrite typespecs of Cray pointees\n+\twhen matching a component declaration.\n+\n+2014-09-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR fortran/62270\n+\t* interface.c (compare_parameter): Fix condition.\n+\t* trans-expr.c (gfc_conv_procedure_call): Likewise.\n+\n+2014-08-31  Fritz Reese  <Reese-Fritz@zai.com>\n+\n+\tPR fortran/62309\n+\t* resolve.c (apply_default_init_local): Don't treat variables\n+\tin RECURSIVE procedures as saved.\n+\n+2014-08-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Add\n+\tmay_require_tmp dummy argument.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get,\n+\tconv_caf_send): Handle may_require_tmp argument.\n+\t(gfc_conv_intrinsic_function): Update call.\n+\t* gfortran.texi (_gfortran_caf_send, _gfortran_caf_get,\n+\t_gfortran_caf_sendget): Update interface description.\n+\n+2014-08-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans.h (gfc_caf_get_image_index,\n+\tgfc_get_caf_token_offset): New prototypes.\n+\t* trans-expr.c (gfc_caf_get_image_index): Moved from\n+\ttrans-intrinsic.c and renamed.\n+\t(gfc_get_caf_token_offset) Ditto; support offset = NULL\n+\twith early return.\n+\t* trans-intrinsic.c (get_caf_token_offset, caf_get_image_index):\n+\tMoved to trans-expr.\n+\t(gfc_conv_intrinsic_caf_get, conv_caf_send,\n+\tconv_intrinsic_atomic_op, conv_intrinsic_atomic_ref,\n+\tconv_intrinsic_atomic_cas): Update callers.\n+\n+2014-08-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/62278\n+\tPR fortran/44735\n+\tPR fortran/60593\n+\t* dependency.c (gfc_check_dependency): Allow for optimizations\n+\tin the pointer-alias check.\n+\n+2014-08-30  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* module.c (gfc_dump_module): Use ISO C remove() instead of POSIX\n+\tunlink().\n+\n+2014-08-29  Jeffrey Armstrong  <jeffrey.armstrong@approximatrix.com>\n+\n+\tPR fortran/62215\n+\t* module.c (gfc_dump_module): Unlink old module file before\n+\trenaming new one.\n+\n+2014-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend_passes (expr_array):  Replace by vec template.\n+\t(expr_size):  Remove.\n+\t(expr_count):  Remove.\n+\t(doloop_list):  Replace by vec template.\n+\t(doloop_size):  Remove.\n+\t(gfc_run_passes):  Adjust to use of vec template.\n+\t(cfe_register_funcs):  Likewise.\n+\t(cfe_expr_0):  Likewise.\n+\t(doloop_code):  Likewise.\n+\n+2014-08-22  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR fortran/62135\n+\t* resolve.c (resolve_select): Fix list traversal in case the\n+\tlast element of the CASE list was dropped as unreachable code.\n+\n+2014-08-22  Joost VandeVondele  <Joost.VandeVondele@mat.ethz.ch>\n+\n+\tPR fortran/61234\n+\t* lang.opt (Wuse-without-only): New flag.\n+\t* gfortran.h (gfc_option_t): Add it.\n+\t* invoke.texi: Document it.\n+\t* module.c (gfc_use_module): Warn if needed.\n+\t* options.c (gfc_init_options,gfc_handle_option): Init accordingly.\n+\n+2014-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/62214\n+\t* frontend-passes.c (optimize_binop_array_assignment):\n+\tDo not try to optimize the array assignment for string\n+\tconcatenation.\n+\n+2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* error.c (gfc_diagnostic_build_locus_prefix): New function.\n+\t(gfc_diagnostic_starter): Follow Fortran FE diagnostics.\n+\t(gfc_diagnostic_finalizer): Do not call default finalizer.\n+\n+2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* error.c (gfc_diagnostic_finalizer): Call default finalizer.\n+\n+2014-08-20  Joost VandeVondele  <Joost.VandeVondele@mat.ethz.ch>\n+\n+\t* options.c (gfc_init_options_struct): assert that the frontend sets\n+\tflag_errno_math and flag_associative_math.\n+\n+2014-08-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (gfc_resolve_finalizers): Ensure that parents are\n+\tresolved first.\n+\n+2014-08-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-io.c (gfc_build_io_library_fndecls): Fix decl of\n+\tIOCALL_SET_NML_VAL.\n+\t(transfer_namelist_element): Use proper int type as argument.\n+\n+2014-08-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/62142\n+\t* trans-expr.c (is_runtime_conformable):  Add NULL pointer checks.\n+\n+2014-08-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_critical): Fix name mangling.\n+\t* trans-stmt.c (gfc_trans_critical): Fix lock call.\n+\n+2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h: Define GCC_DIAG_STYLE.\n+\t(gfc_diagnostics_init,gfc_warning_cmdline): Declare.\n+\t* trans-array.c: Include gfortran.h before diagnostic-core.h.\n+\t* trans-expr.c: Likewise.\n+\t* trans-openmp.c: Likewise.\n+\t* trans-const.c: Likewise.\n+\t* trans.c: Likewise.\n+\t* trans-types.c: Likewise.\n+\t* f95-lang.c: Likewise.\n+\t* trans-decl.c: Likewise.\n+\t* trans-io.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\t* error.c: Include diagnostic.h and diagnostic-color.h.\n+\t(gfc_diagnostic_build_prefix): New.\n+\t(gfc_diagnostic_starter): New.\n+\t(gfc_diagnostic_finalizer): New.\n+\t(gfc_warning_cmdline): New.\n+\t(gfc_diagnostics_init): New.\n+\t* gfc-diagnostic.def: New.\n+\t* options.c (gfc_init_options): Call gfc_diagnostics_init.\n+\t(gfc_post_options): Use gfc_warning_cmdline.\n+\n+2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/62131\n+\t* openmp.c (resolve_omp_atomic): Only complain if code->expr1's attr\n+\tis allocatable, rather than whenever var->attr.allocatable.\n+\n+2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/62107\n+\t* trans-openmp.c (gfc_omp_finish_clause): Handle scalar pointer\n+\tor allocatable passed by reference.\n+\t(gfc_trans_omp_clauses) <case OMP_LIST_MAP>: Likewise.\n+\n+2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/62106\n+\t* gfortran.h (symbol_attribute):  Add fe_temp flag.\n+\t* frontend-passes.c (is_fe_temp):  New function.\n+\t(create_var):  Don't add a temporary for an already\n+\tcreated variable or for a constant.\n+\t(combine_ARRAY_constructor):  Remove special handling\n+\tfor constants.\n+\n+2014-08-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (caf_register_t): Add CAF_REGTYPE_CRITICAL.\n+\t(_gfortran_caf_register): Update for locking/critical.\n+\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n+\t* resolve.c (resolve_critical): New.\n+\t(gfc_resolve_code): Call it.\n+\t* trans-decl.c (gfor_fndecl_caf_critical,\n+\tgfor_fndecl_caf_end_critical): Remove.\n+\t(gfor_fndecl_caf_lock, gfor_fndecl_caf_unlock): Add.\n+\t(gfc_build_builtin_function_decls): Remove critical,\n+\tassign locking declarations.\n+\t(generate_coarray_sym_init): Handle locking and\n+\tcritical variables.\n+\t* trans-stmt.c (gfc_trans_critical): Add calls to\n+\tlock/unlock libcaf functions.\n+\t* trans.h (gfc_coarray_type): Update locking, add\n+\tcritical enum values.\n+\t(gfor_fndecl_caf_critical, gfor_fndecl_caf_end_critical): Remove.\n+\t(gfor_fndecl_caf_lock, gfor_fndecl_caf_unlock): Add.\n+\n+2014-08-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (Coarray Programming): Add first ABI\n+\tdocumentation.\n+\n+2014-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/62076\n+\t* openmp.c (gfc_match_omp_clauses): When failed to match\n+\toperator name, defined op name or name, set buffer to\n+\tempty string.  Don't call gfc_find_omp_udr if buffer is empty\n+\tstring.\n+\t(gfc_match_omp_declare_reduction): Call gfc_undo_symbols ()\n+\tbefore calling gfc_free_omp_udr.\n+\n+2014-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR fortran/61950\n+\t* trans-expr.c (gfc_conv_structure): Initialize _size with\n+\ta value of proper type.\n+\n+2014-08-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/61999\n+\t* simplify.c (gfc_simplify_dot_product): Convert types of\n+\tvectors before calculating the result.\n+\n+2014-08-02  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* openmp.c, trans-decl.c: Use hash_set instead of pointer_set.\n+\n+2014-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/61881\n+\tPR fortran/61888\n+\tPR fortran/57305\n+\t* intrinsic.texi (SIZEOF): Document changed behavior\n+\tfor polymorphic arrays.\n+\n+2014-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/61881\n+\tPR fortran/61888\n+\tPR fortran/57305\n+\t* check.c (gfc_check_sizeof): Permit for assumed type if and\n+\tonly if it has an array descriptor.\n+\t* intrinsic.c (do_ts29113_check): Permit SIZEOF.\n+\t(add_functions): SIZEOF is an Inquiry function.\n+\t* intrinsic.texi (SIZEOF): Add note that only contiguous\n+\tarrays are permitted.\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class): Handle assumed\n+\trank.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof): Handle\n+\tassumed type + array descriptor, CLASS and assumed rank.\n+\t(gfc_conv_intrinsic_storage_size): Handle class arrays.\n+\n+2014-07-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* simplify.c (gfc_simplify_storage_size): Use proper\n+\tinteger kind for the returned value.\n+\n+2014-07-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* intrinsic.texi (Intrinsic Procedures) <ATOMIC_DEFINE>: Move to\n+\tcorrect menu position to match sectioning.\n+\n+2014-06-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* symbol.c (check_conflict): Add codimension conflict with\n+\tpointer; fix cray-pointee check.\n+\n+2014-06-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_ref): Fix handling\n+\tfor kind mismatch with -fcoarray=lib.\n+\n+2014-07-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/61780\n+\t* dependency.c (gfc_dep_resolver): Index the 'reverse' array so\n+\tthat elements are skipped. This then correctly aligns 'reverse'\n+\twith the scalarizer loops.\n+\n+2014-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/61628\n+\t* trans-types.c (gfc_init_types): Fix data-type bug\n+\twith gfc_max_array_element_size.\n+\n+2014-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (libcaf_atomic_codes): Add.\n+\t* trans-decl.c (gfor_fndecl_caf_atomic_def,\n+\tgfor_fndecl_caf_atomic_ref, gfor_fndecl_caf_atomic_cas,\n+\tgfor_fndecl_caf_atomic_op): New variables.\n+\t(gfc_build_builtin_function_decls): Initialize them.\n+\t* trans.h (gfor_fndecl_caf_atomic_def,\n+\tgfor_fndecl_caf_atomic_ref, gfor_fndecl_caf_atomic_cas,\n+\tgfor_fndecl_caf_atomic_op): New variables.\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_op,\n+\tconv_intrinsic_atomic_ref, conv_intrinsic_atomic_cas):\n+\tAdd library calls with -fcoarray=lib.\n+\n+2014-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_atomic): Update for STAT=.\n+\t(gfc_check_atomic_def, gfc_check_atomic_ref): Update call.\n+\t(gfc_check_atomic_op, gfc_check_atomic_cas,\n+\tgfc_check_atomic_fetch_op): New.\n+\t* gfortran.h (gfc_isym_id): GFC_ISYM_ATOMIC_CAS, GFC_ISYM_ATOMIC_ADD,\n+\tGFC_ISYM_ATOMIC_AND, GFC_ISYM_ATOMIC_OR, GFC_ISYM_ATOMIC_XOR,\n+\tGFC_ISYM_ATOMIC_FETCH_ADD, GFC_ISYM_ATOMIC_FETCH_AND,\n+\tGFC_ISYM_ATOMIC_FETCH_OR and GFC_ISYM_ATOMIC_FETCH_XOR.\n+\t* intrinsic.c (add_subroutines): Handle them.\n+\t* intrinsic.texi: Add documentation for them.\n+\t(ATOMIC_REF, ATOMIC_DEFINE): Add STAT=.\n+\t(ISO_FORTRAN_ENV): Add STAT_FAILED_IMAGE.\n+\t* intrinsic.h (gfc_check_atomic_op, gfc_check_atomic_cas,\n+\tgfc_check_atomic_fetch_op): New\n+\tprototypes.\n+\t* libgfortran.h (libgfortran_stat_codes): Add GFC_STAT_FAILED_IMAGE.\n+\t* iso-fortran-env.def: Add it.\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Renamed from\n+\tconv_intrinsic_atomic_ref; handle more atomics.\n+\t(conv_intrinsic_atomic_def): Handle STAT=.\n+\t(conv_intrinsic_atomic_cas): New.\n+\t(gfc_conv_intrinsic_subroutine): Handle new atomics.\n+\n+2014-07-09  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* trans-array.c (gfc_build_constant_array_constructor): Build a\n+\tstatic decl manually.\n+\t* trans-decl.c (create_main_function): Likewise.\n+\n+2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/61459\n+\tPR fortran/58883\n+\t* trans-expr.c (fcncall_realloc_result): Use the natural type\n+\tfor the address expression of 'res_desc'.\n+\n+2014-07-07  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* gfortran.texi (Fortran 2003 status): Fix grammar.\n+\n+2014-07-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_assoc_var): Fix corank setting.\n+\t* trans-array.c (gfc_conv_descriptor_token): Change assert.\n+\tfor select-type temporaries.\n+\t* trans-decl.c (generate_coarray_sym_init): Skip for\n+\tattr.select_type_temporary.\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix for\n+\tselect-type temporaries.\n+\t* trans-intrinsic.c (get_caf_token_offset): Ditto.\n+\t(gfc_conv_intrinsic_caf_get, gfc_conv_intrinsic_caf_send): Set\n+\tthe correct dtype.\n+\t* trans-types.h (gfc_get_dtype_rank_type): New.\n+\t* trans-types.c (gfc_get_dtype_rank_type): Ditto.\n+\n+2014-07-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* scanner.c (skip_free_comments): Fix indentation.\n+\n+2014-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\t    Fritz Reese  <Reese-Fritz@zai.com>\n+\n+\t* decl.c (variable_decl): Reject old style initialization\n+\tfor derived type components.\n+\n+2014-06-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36275\n+\tPR fortran/38839\n+\t* decl.c (check_bind_name_identifier): New function.\n+\t(gfc_match_bind_c): Match any constant expression as binding\n+\tlabel.\n+\t* match.c (gfc_match_name_C): Remove.\n+\n+2014-06-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/29383\n+\t* gfortran.h (gfc_simplify_ieee_selected_real_kind): New prototype.\n+\t* libgfortran.h (GFC_FPE_*): Use simple integer values, valid in\n+\tboth C and Fortran.\n+\t* expr.c (gfc_check_init_expr): Simplify IEEE_SELECTED_REAL_KIND.\n+\t* simplify.c (gfc_simplify_ieee_selected_real_kind): New function.\n+\t* module.c (mio_symbol): Keep track of symbols which came from\n+\tintrinsic modules.\n+\t(gfc_use_module): Keep track of the IEEE modules.\n+\t* trans-decl.c (gfc_get_symbol_decl): Adjust code since\n+\twe have new intrinsic modules.\n+\t(gfc_build_builtin_function_decls): Build decls for\n+\tieee_procedure_entry and ieee_procedure_exit.\n+\t(is_from_ieee_module, is_ieee_module_used, save_fp_state,\n+\trestore_fp_state): New functions.\n+\t(gfc_generate_function_code): Save and restore floating-point\n+\tstate on procedure entry/exit, when IEEE modules are used.\n+\t* intrinsic.texi: Document the IEEE modules.\n+\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* interface.c (check_intents): Fix diagnostic with\n+\tcoindexed coarrays.\n+\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_ordinary_assign): Don't invoke caf_send\n+\twhen assigning a coindexed RHS scalar to a noncoindexed LHS\n+\tarray.\n+\t* trans-intrinsic.c (conv_caf_send): Do numeric type conversion\n+\tfor a noncoindexed scalar RHS.\n+\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_minmaxsum): Add definable check.\n+\t* expr.c (gfc_check_vardef_context): Fix context == NULL case.\n+\t* trans-expr.c (get_scalar_to_descriptor_type): Handle pointer\n+\targuments.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fix generation of\n+\ttemporary strings.\n+\n+2014-06-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans.h (gfc_omp_clause_linear_ctor): New prototype.\n+\t* trans-openmp.c (gfc_omp_linear_clause_add_loop,\n+\tgfc_omp_clause_linear_ctor): New functions.\n+\t(gfc_trans_omp_clauses): Make sure OMP_CLAUSE_LINEAR_STEP has\n+\tcorrect type.  Set OMP_CLAUSE_LINEAR_ARRAY flag if needed.\n+\t* f95-lang.c (LANG_HOOKS_OMP_CLAUSE_LINEAR_CTOR): Redefine.\n+\n+2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dump-parse-tree.c (show_omp_namelist): Use n->udr->udr instead\n+\tof n->udr.\n+\t* f95-lang.c (gfc_init_builtin_functions): Initialize\n+\tBUILT_IN_ASSUME_ALIGNED.\n+\t* gfortran.h (gfc_omp_namelist): Change udr field type to\n+\tstruct gfc_omp_namelist_udr.\n+\t(gfc_omp_namelist_udr): New type.\n+\t(gfc_get_omp_namelist_udr): Define.\n+\t(gfc_resolve_code): New prototype.\n+\t* match.c (gfc_free_omp_namelist): Free name->udr.\n+\t* module.c (intrinsics): Add INTRINSIC_USER.\n+\t(fix_mio_expr): Likewise.\n+\t(mio_expr): Handle INSTRINSIC_USER and non-resolved EXPR_FUNCTION.\n+\t* openmp.c (gfc_match_omp_clauses): Adjust initialization of n->udr.\n+\t(gfc_match_omp_declare_reduction): Treat len=: the same as len=*.\n+\tSet attr.flavor on omp_{out,in,priv,orig} artificial variables.\n+\t(struct resolve_omp_udr_callback_data): New type.\n+\t(resolve_omp_udr_callback, resolve_omp_udr_callback2,\n+\tresolve_omp_udr_clause): New functions.\n+\t(resolve_omp_clauses): Adjust for n->udr changes, resolve UDR clauses\n+\there.\n+\t(omp_udr_callback): Don't check for implicitly declared functions\n+\there.\n+\t(gfc_resolve_omp_udr): Don't call gfc_resolve.  Don't check for\n+\timplicitly declared subroutines here.\n+\t* resolve.c (resolve_function): If value.function.isym is non-NULL,\n+\tconsider it already resolved.\n+\t(resolve_code): Renamed to ...\n+\t(gfc_resolve_code): ... this.  No longer static.\n+\t(gfc_resolve_blocks, generate_component_assignments, resolve_codes):\n+\tAdjust callers.\n+\t* trans-openmp.c (gfc_omp_privatize_by_reference): Don't privatize\n+\tby reference type (C_PTR) variables.\n+\t(gfc_omp_finish_clause): Make sure OMP_CLAUSE_SIZE is non-NULL.\n+\t(gfc_trans_omp_udr_expr): Remove.\n+\t(gfc_trans_omp_array_reduction_or_udr): Adjust for n->udr changes.\n+\tDon't call gfc_trans_omp_udr_expr, even for sym->attr.dimension\n+\texpand it as assignment or subroutine call.  Don't initialize\n+\tvalue.function.isym.\n+\n+2014-06-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (gfc_trans_deferred_vars): Fix handling of\n+\texplicit-size arrays with -fcoarray=lib.\n+\n+2014-06-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33363\n+\t* invoke.texi: Don't mention nonexisting -fcase-lower option.\n+\n+2014-06-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/61454\n+\t* expr.c (scalarize_intrinsic_call): Take care of optional\n+\targuments.\n+\n+2014-06-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_co_minmaxsum): Fix argument\n+\tpassing.\n+\n+2014-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (OpenMP): Update refs to OpenMP 4.0.\n+\t* intrinsic.texi (OpenMP Modules): Ditto.\n+\n+2014-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cpp.c (cpp_define_builtins): Change _OPENMP macro to\n+\t201307.\n+\t* dump-parse-tree.c (show_omp_namelist): Add list_type\n+\targument.  Adjust for rop being u.reduction_op now,\n+\thandle depend_op or map_op.\n+\t(show_omp_node): Adjust callers.  Print some new\n+\tOpenMP 4.0 clauses, adjust for OMP_LIST_DEPEND_{IN,OUT}\n+\tbecoming a single OMP_LIST_DEPEND.\n+\t* f95-lang.c (gfc_handle_omp_declare_target_attribute): New\n+\tfunction.\n+\t(gfc_attribute_table): New variable.\n+\t(LANG_HOOKS_OMP_FINISH_CLAUSE, LANG_HOOKS_ATTRIBUTE_TABLE): Redefine.\n+\t* frontend-passes.c (gfc_code_walker): Handle new OpenMP target\n+\tEXEC_OMP_* codes and new clauses.\n+\t* gfortran.h (gfc_statement): Add ST_OMP_TARGET, ST_OMP_END_TARGET,\n+\tST_OMP_TARGET_DATA, ST_OMP_END_TARGET_DATA, ST_OMP_TARGET_UPDATE,\n+\tST_OMP_DECLARE_TARGET, ST_OMP_TEAMS, ST_OMP_END_TEAMS,\n+\tST_OMP_DISTRIBUTE, ST_OMP_END_DISTRIBUTE, ST_OMP_DISTRIBUTE_SIMD,\n+\tST_OMP_END_DISTRIBUTE_SIMD, ST_OMP_DISTRIBUTE_PARALLEL_DO,\n+\tST_OMP_END_DISTRIBUTE_PARALLEL_DO, ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD,\n+\tST_OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD, ST_OMP_TARGET_TEAMS,\n+\tST_OMP_END_TARGET_TEAMS, ST_OMP_TEAMS_DISTRIBUTE,\n+\tST_OMP_END_TEAMS_DISTRIBUTE, ST_OMP_TEAMS_DISTRIBUTE_SIMD,\n+\tST_OMP_END_TEAMS_DISTRIBUTE_SIMD, ST_OMP_TARGET_TEAMS_DISTRIBUTE,\n+\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE,\n+\tST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,\n+\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD,\n+\tST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n+\tST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n+\tST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD and\n+\tST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD.\n+\t(symbol_attribute): Add omp_declare_target field.\n+\t(gfc_omp_depend_op, gfc_omp_map_op): New enums.\n+\t(gfc_omp_namelist): Replace rop field with union\n+\tcontaining reduction_op, depend_op and map_op.\n+\t(OMP_LIST_DEPEND_IN, OMP_LIST_DEPEND_OUT): Remove.\n+\t(OMP_LIST_DEPEND, OMP_LIST_MAP, OMP_LIST_TO, OMP_LIST_FROM): New.\n+\t(gfc_omp_clauses): Add num_teams, device, thread_limit,\n+\tdist_sched_kind, dist_chunk_size fields.\n+\t(gfc_common_head): Add omp_declare_target field.\n+\t(gfc_exec_op): Add EXEC_OMP_TARGET, EXEC_OMP_TARGET_DATA,\n+\tEXEC_OMP_TEAMS, EXEC_OMP_DISTRIBUTE, EXEC_OMP_DISTRIBUTE_SIMD,\n+\tEXEC_OMP_DISTRIBUTE_PARALLEL_DO, EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD,\n+\tEXEC_OMP_TARGET_TEAMS, EXEC_OMP_TEAMS_DISTRIBUTE,\n+\tEXEC_OMP_TEAMS_DISTRIBUTE_SIMD, EXEC_OMP_TARGET_TEAMS_DISTRIBUTE,\n+\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,\n+\tEXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,\n+\tEXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n+\tEXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD and\n+\tEXEC_OMP_TARGET_UPDATE.\n+\t(gfc_add_omp_declare_target): New prototype.\n+\t* match.h (gfc_match_omp_declare_target, gfc_match_omp_distribute,\n+\tgfc_match_omp_distribute_parallel_do,\n+\tgfc_match_omp_distribute_parallel_do_simd,\n+\tgfc_match_omp_distribute_simd, gfc_match_omp_target,\n+\tgfc_match_omp_target_data, gfc_match_omp_target_teams,\n+\tgfc_match_omp_target_teams_distribute,\n+\tgfc_match_omp_target_teams_distribute_parallel_do,\n+\tgfc_match_omp_target_teams_distribute_parallel_do_simd,\n+\tgfc_match_omp_target_teams_distribute_simd,\n+\tgfc_match_omp_target_update, gfc_match_omp_teams,\n+\tgfc_match_omp_teams_distribute,\n+\tgfc_match_omp_teams_distribute_parallel_do,\n+\tgfc_match_omp_teams_distribute_parallel_do_simd,\n+\tgfc_match_omp_teams_distribute_simd): New prototypes.\n+\t* module.c (ab_attribute): Add AB_OMP_DECLARE_TARGET.\n+\t(attr_bits): Likewise.\n+\t(mio_symbol_attribute): Handle omp_declare_target attribute.\n+\t(gfc_free_omp_clauses): Free num_teams, device, thread_limit\n+\tand dist_chunk_size expressions.\n+\t(OMP_CLAUSE_PRIVATE, OMP_CLAUSE_FIRSTPRIVATE, OMP_CLAUSE_LASTPRIVATE,\n+\tOMP_CLAUSE_COPYPRIVATE, OMP_CLAUSE_SHARED, OMP_CLAUSE_COPYIN,\n+\tOMP_CLAUSE_REDUCTION, OMP_CLAUSE_IF, OMP_CLAUSE_NUM_THREADS,\n+\tOMP_CLAUSE_SCHEDULE, OMP_CLAUSE_DEFAULT, OMP_CLAUSE_ORDERED,\n+\tOMP_CLAUSE_COLLAPSE, OMP_CLAUSE_UNTIED, OMP_CLAUSE_FINAL,\n+\tOMP_CLAUSE_MERGEABLE, OMP_CLAUSE_ALIGNED, OMP_CLAUSE_DEPEND,\n+\tOMP_CLAUSE_INBRANCH, OMP_CLAUSE_LINEAR, OMP_CLAUSE_NOTINBRANCH,\n+\tOMP_CLAUSE_PROC_BIND, OMP_CLAUSE_SAFELEN, OMP_CLAUSE_SIMDLEN,\n+\tOMP_CLAUSE_UNIFORM): Use 1U instead of 1.\n+\t(OMP_CLAUSE_DEVICE, OMP_CLAUSE_MAP, OMP_CLAUSE_TO, OMP_CLAUSE_FROM,\n+\tOMP_CLAUSE_NUM_TEAMS, OMP_CLAUSE_THREAD_LIMIT,\n+\tOMP_CLAUSE_DIST_SCHEDULE): Define.\n+\t(gfc_match_omp_clauses): Change mask parameter to unsigned int.\n+\tAdjust for rop becoming u.reduction_op.  Disallow inbranch with\n+\tnotinbranch.  For depend clause, always create OMP_LIST_DEPEND\n+\tand fill in u.depend_op.  Handle num_teams, device, map,\n+\tto, from, thread_limit and dist_schedule clauses.\n+\t(OMP_DECLARE_SIMD_CLAUSES): Or in OMP_CLAUSE_INBRANCH and\n+\tOMP_CLAUSE_NOTINBRANCH.\n+\t(OMP_TARGET_CLAUSES, OMP_TARGET_DATA_CLAUSES,\n+\tOMP_TARGET_UPDATE_CLAUSES, OMP_TEAMS_CLAUSES,\n+\tOMP_DISTRIBUTE_CLAUSES): Define.\n+\t(match_omp): New function.\n+\t(gfc_match_omp_do, gfc_match_omp_do_simd, gfc_match_omp_parallel,\n+\tgfc_match_omp_parallel_do, gfc_match_omp_parallel_do_simd,\n+\tgfc_match_omp_parallel_sections, gfc_match_omp_parallel_workshare,\n+\tgfc_match_omp_sections, gfc_match_omp_simd, gfc_match_omp_single,\n+\tgfc_match_omp_task): Rewritten using match_omp.\n+\t(gfc_match_omp_threadprivate, gfc_match_omp_declare_reduction):\n+\tDiagnose if the directives are followed by unexpected junk.\n+\t(gfc_match_omp_distribute, gfc_match_omp_distribute_parallel_do,\n+\tgfc_match_omp_distribute_parallel_do_simd,\n+\tgfc_match_omp_distrbute_simd, gfc_match_omp_declare_target,\n+\tgfc_match_omp_target, gfc_match_omp_target_data,\n+\tgfc_match_omp_target_teams, gfc_match_omp_target_teams_distribute,\n+\tgfc_match_omp_target_teams_distribute_parallel_do,\n+\tgfc_match_omp_target_teams_distribute_parallel_do_simd,\n+\tgfc_match_omp_target_teams_distrbute_simd, gfc_match_omp_target_update,\n+\tgfc_match_omp_teams, gfc_match_omp_teams_distribute,\n+\tgfc_match_omp_teams_distribute_parallel_do,\n+\tgfc_match_omp_teams_distribute_parallel_do_simd,\n+\tgfc_match_omp_teams_distrbute_simd): New functions.\n+\t* openmp.c (resolve_omp_clauses): Adjust for\n+\tOMP_LIST_DEPEND_{IN,OUT} being changed to OMP_LIST_DEPEND.  Handle\n+\tOMP_LIST_MAP, OMP_LIST_FROM, OMP_LIST_TO, num_teams, device,\n+\tdist_chunk_size and thread_limit.\n+\t(gfc_resolve_omp_parallel_blocks): Only put sharing clauses into\n+\tctx.sharing_clauses.  Call gfc_resolve_omp_do_blocks for various\n+\tnew EXEC_OMP_* codes.\n+\t(resolve_omp_do): Handle various new EXEC_OMP_* codes.\n+\t(gfc_resolve_omp_directive): Likewise.\n+\t(gfc_resolve_omp_declare_simd): Add missing space to diagnostics.\n+\t* parse.c (decode_omp_directive): Handle parsing of OpenMP 4.0\n+\toffloading related directives.\n+\t(case_executable): Add ST_OMP_TARGET_UPDATE.\n+\t(case_exec_markers): Add ST_OMP_TARGET*, ST_OMP_TEAMS*,\n+\tST_OMP_DISTRIBUTE*.\n+\t(case_decl): Add ST_OMP_DECLARE_TARGET.\n+\t(gfc_ascii_statement): Handle new ST_OMP_* codes.\n+\t(parse_omp_do): Handle various new ST_OMP_* codes.\n+\t(parse_executable): Likewise.\n+\t* resolve.c (gfc_resolve_blocks): Handle various new EXEC_OMP_*\n+\tcodes.\n+\t(resolve_code): Likewise.\n+\t(resolve_symbol): Change that !$OMP DECLARE TARGET variables\n+\tare saved.\n+\t* st.c (gfc_free_statement): Handle various new EXEC_OMP_* codes.\n+\t* symbol.c (check_conflict): Check omp_declare_target conflicts.\n+\t(gfc_add_omp_declare_target): New function.\n+\t(gfc_copy_attr): Copy omp_declare_target.\n+\t* trans.c (trans_code): Handle various new EXEC_OMP_* codes.\n+\t* trans-common.c (build_common_decl): Add \"omp declare target\"\n+\tattribute if needed.\n+\t* trans-decl.c (add_attributes_to_decl): Likewise.\n+\t* trans.h (gfc_omp_finish_clause): New prototype.\n+\t* trans-openmp.c (gfc_omp_finish_clause): New function.\n+\t(gfc_trans_omp_reduction_list): Adjust for rop being renamed\n+\tto u.reduction_op.\n+\t(gfc_trans_omp_clauses): Adjust for OMP_LIST_DEPEND_{IN,OUT}\n+\tchange to OMP_LIST_DEPEND and fix up depend handling.\n+\tHandle OMP_LIST_MAP, OMP_LIST_TO, OMP_LIST_FROM, num_teams,\n+\tthread_limit, device, dist_chunk_size and dist_sched_kind.\n+\t(gfc_trans_omp_do): Handle EXEC_OMP_DISTRIBUTE.\n+\t(GFC_OMP_SPLIT_DISTRIBUTE, GFC_OMP_SPLIT_TEAMS,\n+\tGFC_OMP_SPLIT_TARGET, GFC_OMP_SPLIT_NUM, GFC_OMP_MASK_DISTRIBUTE,\n+\tGFC_OMP_MASK_TEAMS, GFC_OMP_MASK_TARGET, GFC_OMP_MASK_NUM): New.\n+\t(gfc_split_omp_clauses): Handle splitting of clauses for new\n+\tEXEC_OMP_* codes.\n+\t(gfc_trans_omp_do_simd): Add pblock argument, adjust for being\n+\tcallable for combined constructs.\n+\t(gfc_trans_omp_parallel_do, gfc_trans_omp_parallel_do_simd): Likewise.\n+\t(gfc_trans_omp_distribute, gfc_trans_omp_teams,\n+\tgfc_trans_omp_target, gfc_trans_omp_target_data,\n+\tgfc_trans_omp_target_update): New functions.\n+\t(gfc_trans_omp_directive): Adjust gfc_trans_omp_* callers, handle\n+\tnew EXEC_OMP_* codes.\n+\n+2014-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/61126\n+\t* invoke.texi (-Wunused-parameter): Make clearer when\n+\t-Wextra implies this option.\n+\n+2014-06-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/61126\n+\t* options.c (gfc_handle_option): Remove call to\n+\thandle_generated_option.\n+\n+2014-06-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_atomic, gfc_check_atomic_def):\n+\tUse argument for GFC_ISYM_CAF_GET.\n+\t* resolve.c (resolve_variable): Enable CAF_GET insertion.\n+\t(resolve_lock_unlock): Remove GFC_ISYM_CAF_GET.\n+\t(resolve_ordinary_assign): Enable CAF_SEND insertion.\n+\t* trans-const.c (gfc_build_string_const,\n+\tgfc_build_wide_string_const): Set TYPE_STRING_FLAG.\n+\t* trans-decl.c (gfor_fndecl_caf_get, gfor_fndecl_caf_send,\n+\tgfor_fndecl_caf_sendget): New global variables.\n+\t(gfc_build_builtin_function_decls): Initialize them;\n+\tupdate co_min/max/sum initialization.\n+\t* trans-expr.c (gfc_get_tree_for_caf_expr): Renamed from\n+\tget_tree_for_caf_expr and removed static.\n+\t(gfc_conv_procedure_call): Update call.\n+\t* trans-intrinsic.c (caf_get_image_index,\n+\tconv_caf_vector_subscript_elem, conv_caf_vector_subscript,\n+\tget_caf_token_offset, gfc_conv_intrinsic_caf_get,\n+\tconv_caf_send): New.\n+\t(gfc_conv_intrinsic_function, gfc_conv_intrinsic_subroutine,\n+\tgfc_walk_intrinsic_function): Handle CAF_GET and CAF_SEND.\n+\t(conv_co_minmaxsum): Update call for remove unused vector\n+\tsubscript.\n+\t(conv_intrinsic_atomic_def, conv_intrinsic_atomic_ref):\n+\tSkip a CAF_GET of the argument.\n+\t* trans-types.c (gfc_get_caf_vector_type): New.\n+\t* trans-types.h (gfc_get_caf_vector_type): New.\n+\t* trans.h (gfor_fndecl_caf_get, gfor_fndecl_caf_send,\n+\tgfor_fndecl_caf_sendget): New global variables.\n+\t(gfc_get_tree_for_caf_expr): New prototypes.\n+\n+2014-06-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* trans-common.c (build_common_decl): Use\n+\tset_decl_tls_model.\n+\t* trans-decl.c (gfc_finish_var_decl): Likewise.\n+\t(get_proc_pointer_decl): Likewise.\n+\n+2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/28484\n+\tPR fortran/61429\n+\t* check.c (gfc_check_system_clock): Improve checking of arguments.\n+\t* intrinsic.texi: Update doc of SYSTEM_CLOCK.\n+\t* iresolve.c (gfc_resolve_system_clock): Choose library function\n+\tused depending on argument kinds.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Build\n+\tdecls for system_clock_4 and system_clock_8.\n+\t* trans-intrinsic.c (conv_intrinsic_system_clock): New function.\n+\t(gfc_conv_intrinsic_subroutine): Call conv_intrinsic_system_clock.\n+\t* trans.h (gfor_fndecl_system_clock4, gfor_fndecl_system_clock8):\n+\tNew variables.\n+\n+2014-06-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_copy_formal_args_intr): Update prototype.\n+\t* symbol.c (gfc_copy_formal_args_intr): Handle the case\n+\tthat absent optional arguments should be ignored.\n+\t* trans-intrinsic.c (gfc_get_symbol_for_expr): Ditto.\n+\t(gfc_conv_intrinsic_funcall,\n+\tconv_generic_with_optional_char_arg): Update call.\n+\t* resolve.c (gfc_resolve_intrinsic): Ditto.\n+\n+2014-06-10  Dominique d'Humieres <dominiq@lps.ens.fr>\n+\t    Mikael Morin <mikael@gcc.gnu.org>\n+\n+\tPR fortran/41936\n+\t* trans-expr.c (gfc_conv_expr_reference): Deallocate array\n+\tcomponents.\n+\n+2014-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/60928\n+\t* f95-lang.c (gfc_init_builtin_functions): Handle -fopenmp-simd\n+\tlike -fopenmp.\n+\t* openmp.c (resolve_omp_clauses): Remove allocatable components\n+\tdiagnostics.  Add associate-name and intent(in) pointer\n+\tdiagnostics for various clauses, diagnose procedure pointers in\n+\treduction clause.\n+\t* parse.c (match_word_omp_simd): New function.\n+\t(matchs, matcho): New macros.\n+\t(decode_omp_directive): Change match macros to either matchs\n+\tor matcho.  Handle -fopenmp-simd.\n+\t(next_free, next_fixed): Handle -fopenmp-simd like -fopenmp.\n+\t* scanner.c (skip_free_comments, skip_fixed_comments, include_line):\n+\tLikewise.\n+\t* trans-array.c (get_full_array_size): Rename to...\n+\t(gfc_full_array_size): ... this.  No longer static.\n+\t(duplicate_allocatable): Adjust caller.  Add NO_MEMCPY argument\n+\tand handle it.\n+\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Adjust\n+\tduplicate_allocatable callers.\n+\t(gfc_duplicate_allocatable_nocopy): New function.\n+\t(structure_alloc_comps): Adjust g*_full_array_size and\n+\tduplicate_allocatable caller.\n+\t* trans-array.h (gfc_full_array_size,\n+\tgfc_duplicate_allocatable_nocopy): New prototypes.\n+\t* trans-common.c (create_common): Call gfc_finish_decl_attrs.\n+\t* trans-decl.c (gfc_finish_decl_attrs): New function.\n+\t(gfc_finish_var_decl, create_function_arglist,\n+\tgfc_get_fake_result_decl): Call it.\n+\t(gfc_allocate_lang_decl): If DECL_LANG_SPECIFIC is already allocated,\n+\tdon't allocate it again.\n+\t(gfc_get_symbol_decl): Set GFC_DECL_ASSOCIATE_VAR_P on\n+\tassociate-names.\n+\t* trans.h (gfc_finish_decl_attrs): New prototype.\n+\t(struct lang_decl): Add scalar_allocatable and scalar_pointer\n+\tbitfields.\n+\t(GFC_DECL_SCALAR_ALLOCATABLE, GFC_DECL_SCALAR_POINTER,\n+\tGFC_DECL_GET_SCALAR_ALLOCATABLE, GFC_DECL_GET_SCALAR_POINTER,\n+\tGFC_DECL_ASSOCIATE_VAR_P): Define.\n+\t(GFC_POINTER_TYPE_P): Remove.\n+\t* trans-openmp.c (gfc_omp_privatize_by_reference): Don't check\n+\tGFC_POINTER_TYPE_P, instead test GFC_DECL_GET_SCALAR_ALLOCATABLE,\n+\tGFC_DECL_GET_SCALAR_POINTER or GFC_DECL_CRAY_POINTEE on decl.\n+\t(gfc_omp_predetermined_sharing): Associate-names are predetermined.\n+\t(enum walk_alloc_comps): New.\n+\t(gfc_has_alloc_comps, gfc_omp_unshare_expr_r, gfc_omp_unshare_expr,\n+\tgfc_walk_alloc_comps): New functions.\n+\t(gfc_omp_private_outer_ref): Return true for scalar allocatables or\n+\tdecls with allocatable components.\n+\t(gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,\n+\tgfc_omp_clause_assign_op, gfc_omp_clause_dtor): Fix up handling of\n+\tallocatables, handle also OMP_CLAUSE_REDUCTION, handle scalar\n+\tallocatables and decls with allocatable components.\n+\t(gfc_trans_omp_array_reduction_or_udr): Don't handle allocatable\n+\tarrays here.\n+\t(gfc_trans_omp_reduction_list): Call\n+\tgfc_trans_omp_array_reduction_or_udr even for allocatable scalars.\n+\t(gfc_trans_omp_do_simd): If -fno-openmp, just expand it as OMP_SIMD.\n+\t(gfc_trans_omp_parallel_do_simd): Likewise.\n+\t* trans-types.c (gfc_sym_type): Don't set GFC_POINTER_TYPE_P.\n+\t(gfc_get_derived_type): Call gfc_finish_decl_attrs.\n+\n+2014-06-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/61406\n+\t* trans-stmt.c (trans_associate_var): Check that array\n+\tconstructors are constant for direct reference.\n+\n+2014-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36096\n+\t* intrinsic.texi: Fix documentation of BESSEL_J0, BESSEL_J1,\n+\tBESSEL_Y0, and BESSEL_Y1.\n+\n+2014-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/45187\n+\t* trans-decl.c (gfc_create_module_variable): Don't create\n+\tCray-pointee decls twice.\n+\n+2014-06-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* io.c (resolve_tag): Warn on non-default kind for NUMBER,\n+\tNEXTREC, RECL, NAMED, OPENED and PENDING I/O specifiers.\n+\n+2014-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dump-parse-tree.c (show_omp_namelist): Dump reduction\n+\tid in each list item.\n+\t(show_omp_node): Only handle OMP_LIST_REDUCTION, not\n+\tOMP_LIST_REDUCTION_FIRST .. OMP_LIST_REDUCTION_LAST.  Don't\n+\tdump reduction id here.\n+\t* frontend-passes.c (dummy_code_callback): Renamed to...\n+\t(gfc_dummy_code_callback): ... this.  No longer static.\n+\t(optimize_reduction): Use gfc_dummy_code_callback instead of\n+\tdummy_code_callback.\n+\t* gfortran.h (gfc_statement): Add ST_OMP_DECLARE_REDUCTION.\n+\t(symbol_attribute): Add omp_udr_artificial_var bitfield.\n+\t(gfc_omp_reduction_op): New enum.\n+\t(gfc_omp_namelist): Add rop and udr fields.\n+\t(OMP_LIST_PLUS, OMP_LIST_REDUCTION_FIRST, OMP_LIST_MULT,\n+\tOMP_LIST_SUB, OMP_LIST_AND, OMP_LIST_OR, OMP_LIST_EQV,\n+\tOMP_LIST_NEQV, OMP_LIST_MAX, OMP_LIST_MIN, OMP_LIST_IAND,\n+\tOMP_LIST_IOR, OMP_LIST_IEOR, OMP_LIST_REDUCTION_LAST): Removed.\n+\t(OMP_LIST_REDUCTION): New.\n+\t(gfc_omp_udr): New type.\n+\t(gfc_get_omp_udr): Define.\n+\t(gfc_symtree): Add n.omp_udr field.\n+\t(gfc_namespace): Add omp_udr_root field, add omp_udr_ns bitfield.\n+\t(gfc_free_omp_udr, gfc_omp_udr_find, gfc_resolve_omp_udrs,\n+\tgfc_dummy_code_callback): New prototypes.\n+\t* match.h (gfc_match_omp_declare_reduction): New prototype.\n+\t* module.c (MOD_VERSION): Increase to 13.\n+\t(omp_declare_reduction_stmt): New array.\n+\t(mio_omp_udr_expr, write_omp_udr, write_omp_udrs, load_omp_udrs):\n+\tNew functions.\n+\t(read_module): Read OpenMP user defined reductions.\n+\t(write_module): Write OpenMP user defined reductions.\n+\t* openmp.c: Include arith.h.\n+\t(gfc_free_omp_udr, gfc_find_omp_udr): New functions.\n+\t(gfc_match_omp_clauses): Handle user defined reductions.\n+\tStore reduction kind into gfc_omp_namelist instead of using\n+\tseveral OMP_LIST_* entries.\n+\t(match_udr_expr, gfc_omp_udr_predef, gfc_omp_udr_find,\n+\tgfc_match_omp_declare_reduction): New functions.\n+\t(resolve_omp_clauses): Adjust for reduction clauses being only\n+\tin OMP_LIST_REDUCTION list.  Diagnose missing UDRs.\n+\t(struct omp_udr_callback_data): New type.\n+\t(omp_udr_callback, gfc_resolve_omp_udr, gfc_resolve_omp_udrs): New\n+\tfunctions.\n+\t* parse.c (decode_omp_directive): Handle !$omp declare reduction.\n+\t(case_decl): Add ST_OMP_DECLARE_REDUCTION.\n+\t(gfc_ascii_statement): Print ST_OMP_DECLARE_REDUCTION.\n+\t* resolve.c (resolve_fl_variable): Allow len=: or len=* on\n+\tsym->attr.omp_udr_artificial_var symbols.\n+\t(resolve_types): Call gfc_resolve_omp_udrs.\n+\t* symbol.c (gfc_get_uop): If gfc_current_ns->omp_udr_ns,\n+\tuse parent ns instead of gfc_current_ns.\n+\t(gfc_get_sym_tree): Don't insert symbols into\n+\tnamespaces with omp_udr_ns set.\n+\t(free_omp_udr_tree): New function.\n+\t(gfc_free_namespace): Call it.\n+\t* trans-openmp.c (struct omp_udr_find_orig_data): New type.\n+\t(omp_udr_find_orig, gfc_trans_omp_udr_expr): New functions.\n+\t(gfc_trans_omp_array_reduction): Renamed to...\n+\t(gfc_trans_omp_array_reduction_or_udr): ... this.  Remove SYM\n+\targument, instead pass gfc_omp_namelist pointer N.  Handle\n+\tuser defined reductions.\n+\t(gfc_trans_omp_reduction_list): Remove REDUCTION_CODE argument.\n+\tHandle user defined reductions and reduction ops in gfc_omp_namelist.\n+\t(gfc_trans_omp_clauses): Adjust for just a single OMP_LIST_REDUCTION\n+\tlist.\n+\t(gfc_split_omp_clauses): Likewise.\n+\n+2014-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR fortran/61418\n+\t* gfortranspec.c (spec_file): Remove.\n+\t(find_spec_file): Likewise.\n+\t(lang_specific_driver): Do not look for specs file in -L\n+\tor append -specs command line argument.\n+\t(lang_specific_pre_link): Always %:include libgfortran.spec.\n+\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* fortran/trans.c (trans_runtime_error_vararg): Call\n+\tfold_build_call_array_loc instead of fold_builtin_call_array.\n+\n+2014-06-02  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Correct number of\n+\targuments to caf_init.\n+\n+2014-05-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (Project Status): Fix broken link.\n+\n+2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61310\n+\t* intrinsics.texi (CTIME): Remove mention of locale-dependent\n+\tbehavior.\n+\n+2014-05-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55117\n+\t* trans-io.c (nml_full_name, transfer_namelist_element): Insert\n+\ta '+' rather then '%' to differentiate namelist variable names\n+\tthat are based on extended derived types.\n+\n+2014-05-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_num_images): New.\n+\t(gfc_check_this_image): Handle distance argument.\n+\t* intrinsic.c (add_functions): Update this_image and num_images\n+\tfor new distance and failed arguments.\n+\t* intrinsic.texi (THIS_IMAGE, NUM_IMAGES): Document the new\n+\targuments.\n+\t* intrinsic.h (gfc_check_num_images): New.\n+\t(gfc_check_this_image, gfc_simplify_num_images,\n+\tgfc_simplify_this_image, gfc_resolve_this_image): Update prototype.\n+\t* iresolve.c (gfc_resolve_this_image): Handle distance argument.\n+\t* simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n+\tHandle new arguments.\n+\t* trans-intrinsic.c (trans_this_image, trans_num_images): Ditto.\n+\t(gfc_conv_intrinsic_function): Update trans_num_images call.\n+\n+2014-05-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfc-internals.texi: Change URLs to HTTPS; fix broken links.\n+\t* gfortran.texi: Ditto.\n+\n+2014-05-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* f95-lang.c (DEF_FUNCTION_TYPE_0, DEF_FUNCTION_TYPE_6)\n+\t(DEF_FUNCTION_TYPE_7, DEF_FUNCTION_TYPE_8)\n+\t(DEF_FUNCTION_TYPE_VAR_5): Cosmetic fixes.\n+\t* types.def: Simplify examples for DEF_FUNCTION_TYPE_*.\n+\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* f95-lang.c (pushlevel): Adjust.\n+\t* trans-decl.c (gfc_allocate_lang_decl): Adjust.\n+\t(gfc_find_module): Likewise.\n+\t* trans-types.c (gfc_get_nodesc_array_type): Likewise.\n+\t(gfc_get_array_type_bounds): Likewise.\n+\t(gfc_nonrestricted_type): Likewise.\n+\t* trans.h: Don't use variable_size gty attribute.\n+\n+2014-05-17  Dominique d'Humieres <dominiq@lps.ens.fr>\n+\n+\t* check.c (gfc_check_fn_rc2008): move \"argument\" to the right\n+\tplace.\n+\n+2014-05-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60127\n+\t* openmp.c (resolve_omp_do): Reject do concurrent loops.\n+\n+2014-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60834\n+\t* frontend-passes.c (in_assoc_list):  New variable.\n+\t(optimize_namespace):  Initialize in_assoc_list\n+\t(combine_array_constructor): Don't try to combine\n+\tassoc lists.\n+\t(gfc_code_walker):  Keep track of in_assoc_list.\n+\n+2014-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.h (gfc_statement): Add ST_OMP_CANCEL,\n+\tST_OMP_CANCELLATION_POINT, ST_OMP_TASKGROUP, ST_OMP_END_TASKGROUP,\n+\tST_OMP_SIMD, ST_OMP_END_SIMD, ST_OMP_DO_SIMD, ST_OMP_END_DO_SIMD,\n+\tST_OMP_PARALLEL_DO_SIMD, ST_OMP_END_PARALLEL_DO_SIMD and\n+\tST_OMP_DECLARE_SIMD.\n+\t(gfc_omp_namelist): New typedef.\n+\t(gfc_get_omp_namelist): Define.\n+\t(OMP_LIST_UNIFORM, OMP_LIST_ALIGNED, OMP_LIST_LINEAR,\n+\tOMP_LIST_DEPEND_IN, OMP_LIST_DEPEND_OUT): New clause list kinds.\n+\t(gfc_omp_proc_bind_kind, gfc_omp_cancel_kind): New enums.\n+\t(gfc_omp_clauses): Change type of lists to gfc_omp_namelist *.\n+\tAdd inbranch, notinbranch, cancel, proc_bind, safelen_expr and\n+\tsimdlen_expr fields.\n+\t(gfc_omp_declare_simd): New typedef.\n+\t(gfc_get_omp_declare_simd): Define.\n+\t(gfc_namespace): Add omp_declare_simd field.\n+\t(gfc_exec_op): Add EXEC_OMP_CANCEL, EXEC_OMP_CANCELLATION_POINT,\n+\tEXEC_OMP_TASKGROUP, EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD and\n+\tEXEC_OMP_PARALLEL_DO_SIMD.\n+\t(gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_MASK, GFC_OMP_ATOMIC_SEQ_CST\n+\tand GFC_OMP_ATOMIC_SWAP.\n+\t(gfc_code): Change type of omp_namelist field to gfc_omp_namelist *.\n+\t(gfc_free_omp_namelist, gfc_free_omp_declare_simd,\n+\tgfc_free_omp_declare_simd_list, gfc_resolve_omp_declare_simd): New\n+\tprototypes.\n+\t* trans-stmt.h (gfc_trans_omp_declare_simd): New prototype.\n+\t* symbol.c (gfc_free_namespace): Call gfc_free_omp_declare_simd.\n+\t* openmp.c (gfc_free_omp_clauses): Free safelen_expr and\n+\tsimdlen_expr.  Use gfc_free_omp_namelist instead of\n+\tgfc_free_namelist.\n+\t(gfc_free_omp_declare_simd, gfc_free_omp_declare_simd_list): New\n+\tfunctions.\n+\t(gfc_match_omp_variable_list): Add end_colon, headp and\n+\tallow_sections arguments.  Handle parsing of array sections.\n+\tUse *omp_namelist* instead of *namelist* data structure and\n+\tfunctions/macros.  Allow termination at : character.\n+\t(OMP_CLAUSE_ALIGNED, OMP_CLAUSE_DEPEND, OMP_CLAUSE_INBRANCH,\n+\tOMP_CLAUSE_LINEAR, OMP_CLAUSE_NOTINBRANCH, OMP_CLAUSE_PROC_BIND,\n+\tOMP_CLAUSE_SAFELEN, OMP_CLAUSE_SIMDLEN, OMP_CLAUSE_UNIFORM): Define.\n+\t(gfc_match_omp_clauses): Change first and needs_space variables\n+\tinto arguments with default values.  Parse inbranch, notinbranch,\n+\tproc_bind, safelen, simdlen, uniform, linear, aligned and\n+\tdepend clauses.\n+\t(OMP_PARALLEL_CLAUSES): Add OMP_CLAUSE_PROC_BIND.\n+\t(OMP_DECLARE_SIMD_CLAUSES, OMP_SIMD_CLAUSES): Define.\n+\t(OMP_TASK_CLAUSES): Add OMP_CLAUSE_DEPEND.\n+\t(gfc_match_omp_do_simd): New function.\n+\t(gfc_match_omp_flush): Use *omp_namelist* instead of *namelist*\n+\tdata structure and functions/macros.\n+\t(gfc_match_omp_simd, gfc_match_omp_declare_simd,\n+\tgfc_match_omp_parallel_do_simd): New functions.\n+\t(gfc_match_omp_atomic): Handle seq_cst clause.  Handle atomic swap.\n+\t(gfc_match_omp_taskgroup, gfc_match_omp_cancel_kind,\n+\tgfc_match_omp_cancel, gfc_match_omp_cancellation_point): New\n+\tfunctions.\n+\t(resolve_omp_clauses): Add where, omp_clauses and ns arguments.\n+\tUse *omp_namelist* instead of *namelist* data structure and\n+\tfunctions/macros.  Resolve uniform, aligned, linear, depend,\n+\tsafelen and simdlen clauses.\n+\t(resolve_omp_atomic): Adjust for GFC_OMP_ATOMIC_{MASK,SEQ_CST,SWAP}\n+\taddition, recognize atomic swap.\n+\t(gfc_resolve_omp_parallel_blocks): Use gfc_omp_namelist instead\n+\tof gfc_namelist.  Handle EXEC_OMP_PARALLEL_DO_SIMD the same as\n+\tEXEC_OMP_PARALLEL_DO.\n+\t(gfc_resolve_do_iterator): Use *omp_namelist* instead of *namelist*\n+\tdata structure and functions/macros.\n+\t(resolve_omp_do): Likewise.  Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD.\n+\t(gfc_resolve_omp_directive): Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD and EXEC_OMP_CANCEL.  Adjust\n+\tresolve_omp_clauses caller.\n+\t(gfc_resolve_omp_declare_simd): New function.\n+\t* parse.c (decode_omp_directive): Parse cancellation point, cancel,\n+\tdeclare simd, end do simd, end simd, end parallel do simd,\n+\tend taskgroup, parallel do simd, simd and taskgroup directives.\n+\t(case_executable): Add ST_OMP_CANCEL and ST_OMP_CANCELLATION_POINT.\n+\t(case_exec_markers): Add ST_OMP_TASKGROUP, case ST_OMP_SIMD,\n+\tST_OMP_DO_SIMD and ST_OMP_PARALLEL_DO_SIMD.\n+\t(case_decl): Add ST_OMP_DECLARE_SIMD.\n+\t(gfc_ascii_statement): Handle ST_OMP_CANCEL,\n+\tST_OMP_CANCELLATION_POINT, ST_OMP_TASKGROUP, ST_OMP_END_TASKGROUP,\n+\tST_OMP_SIMD, ST_OMP_END_SIMD, ST_OMP_DO_SIMD, ST_OMP_END_DO_SIMD,\n+\tST_OMP_PARALLEL_DO_SIMD, ST_OMP_END_PARALLEL_DO_SIMD and\n+\tST_OMP_DECLARE_SIMD.\n+\t(parse_omp_do): Handle ST_OMP_SIMD, ST_OMP_DO_SIMD and\n+\tST_OMP_PARALLEL_DO_SIMD.\n+\t(parse_omp_atomic): Adjust for GFC_OMP_ATOMIC_* additions.\n+\t(parse_omp_structured_block): Handle ST_OMP_TASKGROUP and\n+\tST_OMP_PARALLEL_DO_SIMD.\n+\t(parse_executable): Handle ST_OMP_SIMD, ST_OMP_DO_SIMD,\n+\tST_OMP_PARALLEL_DO_SIMD and ST_OMP_TASKGROUP.\n+\t* trans-decl.c (gfc_get_extern_function_decl,\n+\tgfc_create_function_decl): Call gfc_trans_omp_declare_simd if\n+\tneeded.\n+\t* frontend-passes.c (gfc_code_walker): Handle EXEC_OMP_SIMD,\n+\tEXEC_OMP_DO_SIMD and EXEC_OMP_PARALLEL_DO_SIMD.  Walk\n+\tsafelen_expr and simdlen_expr.  Walk expressions in gfc_omp_namelist\n+\tof depend, aligned and linear clauses.\n+\t* match.c (match_exit_cycle): Handle EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD\n+\tand EXEC_OMP_PARALLEL_DO_SIMD.\n+\t(gfc_free_omp_namelist): New function.\n+\t* dump-parse-tree.c (show_namelist): Removed.\n+\t(show_omp_namelist): New function.\n+\t(show_omp_node): Handle OpenMP 4.0 additions.\n+\t(show_code_node): Handle EXEC_OMP_CANCEL, EXEC_OMP_CANCELLATION_POINT,\n+\tEXEC_OMP_DO_SIMD, EXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and\n+\tEXEC_OMP_TASKGROUP.\n+\t* match.h (gfc_match_omp_cancel, gfc_match_omp_cancellation_point,\n+\tgfc_match_omp_declare_simd, gfc_match_omp_do_simd,\n+\tgfc_match_omp_parallel_do_simd, gfc_match_omp_simd,\n+\tgfc_match_omp_taskgroup): New prototypes.\n+\t* trans-openmp.c (gfc_trans_omp_variable): Add declare_simd\n+\targument, handle it.  Allow current_function_decl to be NULL.\n+\t(gfc_trans_omp_variable_list): Add declare_simd argument, pass\n+\tit through to gfc_trans_omp_variable and disregard whether\n+\tsym is referenced if declare_simd is true.  Work on gfc_omp_namelist\n+\tinstead of gfc_namelist.\n+\t(gfc_trans_omp_reduction_list): Work on gfc_omp_namelist instead of\n+\tgfc_namelist.  Adjust gfc_trans_omp_variable caller.\n+\t(gfc_trans_omp_clauses): Add declare_simd argument, pass it through\n+\tto gfc_trans_omp_variable{,_list} callers.  Work on gfc_omp_namelist\n+\tinstead of gfc_namelist.  Handle inbranch, notinbranch, safelen,\n+\tsimdlen, depend, uniform, linear, proc_bind and aligned clauses.\n+\tHandle cancel kind.\n+\t(gfc_trans_omp_atomic): Handle seq_cst clause, handle atomic swap,\n+\tadjust for GFC_OMP_ATOMIC_* changes.\n+\t(gfc_trans_omp_cancel, gfc_trans_omp_cancellation_point): New\n+\tfunctions.\n+\t(gfc_trans_omp_do): Add op argument, handle simd translation into\n+\tgeneric.\n+\t(GFC_OMP_SPLIT_SIMD, GFC_OMP_SPLIT_DO, GFC_OMP_SPLIT_PARALLEL,\n+\tGFC_OMP_SPLIT_NUM, GFC_OMP_MASK_SIMD, GFC_OMP_MASK_DO,\n+\tGFC_OMP_MASK_PARALLEL): New.\n+\t(gfc_split_omp_clauses, gfc_trans_omp_do_simd): New functions.\n+\t(gfc_trans_omp_parallel_do): Rework to use gfc_split_omp_clauses.\n+\t(gfc_trans_omp_parallel_do_simd, gfc_trans_omp_taskgroup): New\n+\tfunctions.\n+\t(gfc_trans_omp_directive): Handle EXEC_OMP_CANCEL,\n+\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n+\tAdjust gfc_trans_omp_do caller.\n+\t(gfc_trans_omp_declare_simd): New function.\n+\t* st.c (gfc_free_statement): Handle EXEC_OMP_CANCEL,\n+\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n+\tFor EXEC_OMP_FLUSH call gfc_free_omp_namelist instead of\n+\tgfc_free_namelist.\n+\t* module.c (omp_declare_simd_clauses): New variable.\n+\t(mio_omp_declare_simd): New function.\n+\t(mio_symbol): Call it.\n+\t* trans.c (trans_code): Handle EXEC_OMP_CANCEL,\n+\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n+\t* resolve.c (gfc_resolve_blocks): Handle EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n+\t(resolve_code): Handle EXEC_OMP_CANCEL,\n+\tEXEC_OMP_CANCELLATION_POINT, EXEC_OMP_DO_SIMD,\n+\tEXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_SIMD and EXEC_OMP_TASKGROUP.\n+\t(resolve_types): Call gfc_resolve_omp_declare_simd.\n+\n+2014-05-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (gfc_build_builtin_function_decls):\n+\tChange type of second argument to int.\n+\n+2014-05-09  Mike Stump  <mikestump@comcast.net>\n+\n+\tPR fortran/61109\n+\t* trans-array.c (gfc_conv_array_initializer): Fix wide-int\n+\tconversion bug.\n+\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CAF_GET\n+\tand GFC_ISYM_CAF_SEND.\n+\t* intrinsic.c (add_functions): Add only internally\n+\taccessible caf_get and caf_send functions.\n+\t* resolve.c (add_caf_get_intrinsic,\n+\tremove_caf_get_intrinsic): New functions.\n+\t(resolve_variable): Resolve expression rank and\n+\tprepare for add_caf_get_intrinsic call.\n+\t(gfc_resolve_expr): For variables, remove rank\n+\tresolution.\n+\t(resolve_ordinary_assign): Prepare call to\n+\tGFC_ISYM_CAF_SEND.\n+\t(resolve_code): Avoid call to GFC_ISYM_CAF_GET for\n+\tthe LHS of an assignment.\n+\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_co_minmaxsum): Change condition style.\n+\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_minmaxsum, gfc_check_co_minmax,\n+\tgfc_check_co_sum): New.\n+\t* error.c (gfc_notify_std): Update -std=f2008ts.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_MAX,\n+\tGFC_ISYM_CO_MIN, GFC_ISYM_CO_SUM.\n+\t* intrinsic.h (gfc_check_co_minmax,\n+\tgfc_check_co_sum): Declare.\n+\t* intrinsic.c (add_subroutines): Add co_min, co_max\n+\tand co_sum.\n+\t(gfc_check_intrinsic_standard): Update text for\n+\t-std=f2008ts.\n+\t* intrinsic.texi (CO_MIN, CO_MAX, CO_SUM): Document\n+\tthem.\n+\t* invoke.texi (-std=f2008ts): Update wording.\n+\t* trans.h (gfor_fndecl_co_max,\n+\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n+\t* trans-decl.c (gfor_fndecl_co_max,\n+\tgfor_fndecl_co_min, gfor_fndecl_co_sum): Define.\n+\t(gfc_build_builtin_function_decls): Assign to it.\n+\t* trans-intrinsic.c (conv_co_minmaxsum): New.\n+\t(gfc_conv_intrinsic_subroutine): Call it.\n+\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* target-memory.c: Include wide-int.h.\n+\t(gfc_interpret_logical): Use wide-int interfaces.\n+\t* trans-array.c: Include wide-int.h.\n+\t(gfc_conv_array_initializer): Use wide-int interfaces.\n+\t* trans-const.c: Include wide-int.h.\n+\t(gfc_conv_string_init): Use wide-int interfaces.\n+\t(gfc_conv_mpz_to_tree): Likewise.\n+\t(gfc_conv_tree_to_mpz): Likewise.\n+\t* trans-decl.c (gfc_can_put_var_on_stack): Use tree_fits_uhwi_p.\n+\t* trans-expr.c: Include wide-int.h.\n+\t(gfc_conv_cst_int_power): Use wide-int interfaces.\n+\t(gfc_string_to_single_character): Likewise.\n+\t(gfc_optimize_len_trim): Likewise.\n+\t* trans-intrinsic.c: Include wide-int.h.\n+\t(trans_this_image): Use wide-int interfaces.\n+\t(gfc_conv_intrinsic_bound): Likewise.\n+\t(conv_intrinsic_cobound): Likewise.\n+\t* trans-types.c (gfc_init_types): Likewise.\n+\t(gfc_get_array_type_bounds): Pass an integer of the correct type\n+\tinstead of using integer_one_node.\n+\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-decl.c (create_function_arglist): Add hidden coarray arguments\n+\talso for polymorphic coarrays.\n+\t* trans-expr.c (gfc_conv_procedure_call): Pass hidden coarray arguments\n+\talso for polymorphic coarrays.\n+\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_function): Don't do\n+\tassumed-size check for lcobound/ucobound.\n+\t* trans-types.c (gfc_build_array_type): Only build an array\n+\tdescriptor with codimensions for allocatable coarrays.\n+\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_init_coarray_decl): Remove.\n+\t* parse.c (translate_all_program_units): Remove call to it.\n+\t(gfc_parse_file): Update call.\n+\t* trans.h (gfor_fndecl_caf_this_image,\n+\tgfor_fndecl_caf_num_images): Add.\n+\t(gfort_gvar_caf_num_images,\n+\tgfort_gvar_caf_this_image): Remove.\n+\t* trans-decl.c (gfor_fndecl_caf_this_image,\n+\tgfor_fndecl_caf_num_images): Add.\n+\t(gfort_gvar_caf_num_images,\n+\tgfort_gvar_caf_this_image): Remove.\n+\t(gfc_build_builtin_function_decls): Init new decl.\n+\t(gfc_init_coarray_dec): Remove.\n+\t(create_main_function): Change calls.\n+\t* trans-intrinsic.c (trans_this_image, trans_image_index,\n+\tconv_intrinsic_cobound): Generate call to new library function\n+\tinstead of to a static variable.\n+\t* trans-stmt.c (gfc_trans_sync): Ditto.\n+\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (get_tree_for_caf_expr): Fix handling of polymorphic\n+\tand derived-type coarrays.\n+\n+2014-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/59604\n+\tPR fortran/58003\n+\t* gfortran.h (gfc_convert_mpz_to_signed):  Add prototype.\n+\t* arith.c (gfc_int2int):  Convert number to signed if\n+\tarithmetic overflow is not checked.\n+\t* simplify.c (convert_mpz_to_unsigned): Only trigger assert for\n+\tsize if range checking is in force.\n+\t(convert_mpz_to_signed):  Make non-static, rename to\n+\t(gfc_convert_mpz_to_signed).\n+\t(simplify_dshift): Use gfc_convert_mpz_to_signed.\n+\t(gfc_simplify_ibclr):  Likewise.\n+\t(gfc_simplify_ibits):  Likewise.\n+\t(gfc_simplify_ibset):  Likewise.\n+\t(simplify_shift):  Likewise.\n+\t(gfc_simplify_ishiftc):  Likewise.\n+\t(gfc_simplify_maskr):  Likewise.\n+\t(gfc_simplify_maskl):  Likewise.\n+\n+2014-04-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60881\n+\t* trans-expr.c (gfc_trans_subcomponent_assign): Fix handling\n+\tof scalar coarrays.\n+\n+2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-types.c (gfc_init_kinds): Make sure GET_MODE_BITSIZE\n+\targument is enum machine_mode.\n+\n+2014-04-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58085\n+\tPR fortran/60717\n+\t* trans.h: Add 'use_offset' bitfield to gfc_se.\n+\t* trans-array.c (gfc_conv_expr_descriptor): Use 'use_offset'\n+\tas a trigger to unconditionally recalculate the offset for\n+\tarray slices and constant arrays.\n+\ttrans-expr.c (gfc_conv_intrinsic_to_class): Use it.\n+\ttrans-stmt.c (trans_associate_var): Ditto.\n+\t(gfc_conv_procedure_call): Ditto.\n+\n+2014-04-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58880\n+\tPR fortran/60495\n+\t* resolve.c (gfc_resolve_finalizers): Ensure that vtables\n+\tand finalization wrappers are generated.\n+\n+2014-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsic.texi (RANDOM_SEED): Improve example.\n+\n+2014-04-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* class.c (gfc_build_class_symbol): Append \"_t\" to target class\n+\tnames to make the generated type names unique.\n+\n+2014-04-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR fortran/60191\n+\t* trans-types.c (gfc_get_function_type): In case of recursion\n+\tbuild a variadic function type with empty argument list instead of a\n+\tstdarg-like function type with incomplete argument list.\n+\n+2014-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_cmplx): Fix typo.\n+\n+2014-03-28  Mikael Morin  <mikael@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60576\n+\t* trans-expr.c (gfc_conv_derived_to_class): Avoid\n+\tgeneration of out-of-bounds range expr.\n+\n+2014-03-28  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/60677\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Enlarge argument\n+\tlist buffer.\n+\n+2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60522\n+\t* frontend-passes.c (cfe_code):  Do not walk subtrees\n+\tfor WHERE.\n+\n+2014-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58880\n+\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Fix handling\n+\tof nonpointers.\n+\n+2014-03-26 Dominique d'Humieres <dominiq@lps.ens.fr>\n+\n+\tPR fortran/34928\n+\t* fortran.texi: Document Volatile COMMON as not supported.\n+\n+2014-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/60603\n+\t* cpp.c (gfc_cpp_init): Restore cb_change_file call to\n+\t<built-in>.\n+\n+2014-03-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/60148\n+\t* gfortran.texi: Add description of namelist DELIM= behavior.\n+\n+2014-03-19  Tobias Burnus  <burnus@net-b.>\n+\n+\tPR fortran/60543\n+\t* io.c (check_io_constraints): Use gfc_unset_implicit_pure.\n+\t* resolve.c (resolve_ordinary_assign): Ditto.\n+\n+2014-03-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60543\n+\tPR fortran/60283\n+\t* gfortran.h (gfc_unset_implicit_pure): New prototype.\n+\t* resolve.c (gfc_unset_implicit_pure): New.\n+\t(resolve_structure_cons, resolve_function,\n+\tpure_subroutine): Use it.\n+\t* decl.c (match_old_style_init, gfc_match_data,\n+\tmatch_pointer_init, variable_decl): Ditto.\n+\t* expr.c (gfc_check_pointer_assign): Ditto.\n+\t* intrinsic.c (gfc_intrinsic_sub_interface): Ditto.\n+\t* io.c (match_vtag, gfc_match_open, gfc_match_close,\n+\tmatch_filepos, gfc_match_inquire, gfc_match_print,\n+\tgfc_match_wait): Ditto.\n+\t* match.c (gfc_match_critical, gfc_match_stopcode,\n+\tlock_unlock_statement, sync_statement, gfc_match_allocate,\n+\tgfc_match_deallocate): Ditto.\n+\t* parse.c (decode_omp_directive): Ditto.\n+\t* symbol.c (gfc_add_save): Ditto.\n+\n+2014-03-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55207\n+\tPR fortran/60549\n+\t* decl.c (match_attr_spec): Revert r208590.\n+\n+2014-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/58721\n+\t* trans.c (gfc_unlikely, gfc_likely): Don't add __builtin_expect\n+\tif !optimize.\n+\n+2014-03-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR ipa/58721\n+\t* trans.h (gfc_unlikely, gfc_likely): Add predictor as argument.\n+\t(gfc_trans_io_runtime_check): Remove.\n+\t* trans-io.c (gfc_trans_io_runtime_check): Make static; add has_iostat\n+\tas argument, add predictor to block.\n+\t(set_parameter_value, gfc_trans_open, gfc_trans_close, build_filepos,\n+\tgfc_trans_inquire, gfc_trans_wait, build_dt): Update calls.\n+\t* trans.c (gfc_unlikely, gfc_likely): Add predictor as argument.\n+\t(gfc_trans_runtime_check, gfc_allocate_using_malloc,\n+\tgfc_allocate_allocatable, gfc_deallocate_with_status): Set explicitly\n+\tbranch predictor.\n+\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\t* trans-array.c (gfc_array_init_size, gfc_array_allocate): Ditto.\n+\n+2014-03-15  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55207\n+\t* decl.c (match_attr_spec): Variables in the main program implicitly\n+\tget the SAVE attribute in Fortran 2008.\n+\n+2014-03-14  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/60392\n+\t* trans-array.c (gfc_conv_array_parameter): Don't reuse the descriptor\n+\tif it has transposed dimensions.\n+\n+2014-03-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60447\n+\t* f95-lang.c (gfc_init): Return false when only\n+\tpreprocessing.\n+\t* options.c (gfc_post_options): Ditto.\n+\n+2014-03-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi (Fortran 2003 Status): Mention finalization,\n+\tdeferred-length character support and input rounding.\n+\t(Fortran 2008 Status): Mention that at termination\n+\tsignalling exceptions are shown.\n+\n+2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/51976\n+\t* gfortran.h (symbol_attribute): Add deferred_parameter attribute.\n+\t* primary.c (build_actual_constructor): It is not an error if\n+\ta missing component has the deferred_parameter attribute;\n+\tequally, if one is given a value, it is an error.\n+\t* resolve.c (resolve_fl_derived0): Remove error for deferred\n+\tcharacter length components.  Add the hidden string length\n+\tfield to the structure. Give it the deferred_parameter\n+\tattribute.\n+\t* trans-array.c (duplicate_allocatable): Add a strlen field\n+\twhich is used as the element size if it is non-null.\n+\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Pass a\n+\tNULL to the new argument in duplicate_allocatable.\n+\t(structure_alloc_comps): Set the hidden string length as\n+\tappropriate. Use it in calls to duplicate_allocatable.\n+\t(gfc_alloc_allocatable_for_assignment): When a deferred length\n+\tbackend declaration is variable, use that; otherwise use the\n+\tstring length from the expression evaluation.\n+\t* trans-expr.c (gfc_conv_component_ref): If this is a deferred\n+\tcharacter length component, the string length should have the\n+\tvalue of the hidden string length field.\n+\t(gfc_trans_subcomponent_assign): Set the hidden string length\n+\tfield for deferred character length components.  Allocate the\n+\tnecessary memory for the string.\n+\t(alloc_scalar_allocatable_for_assignment): Same change as in\n+\tgfc_alloc_allocatable_for_assignment above.\n+\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n+\t* trans-intrinsic (size_of_string_in_bytes): Make non-static.\n+\t* trans-types.c (gfc_get_derived_type): Set the tree type for\n+\ta deferred character length component.\n+\t* trans.c (gfc_deferred_strlen): New function.\n+\t* trans.h (size_of_string_in_bytes,gfc_deferred_strlen): New prototypes.\n+\n+2014-03-01  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/60341\n+\t* frontend-passes.c (optimize_comparison): Guard two union accesses\n+\twith the corresponding tag checks.\n+\n+2014-02-28  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60359\n+\t* class.c (find_intrinsic_vtab): Prevent duplicate creation of copy\n+\tprocedure for characters.\n+\n+2014-02-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60302\n+\t* check.c (gfc_check_c_f_pointer): Only clear 'size' if 'gfc_array_size'\n+\tis successful.\n+\n+2014-02-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60234\n+\t* gfortran.h (gfc_build_class_symbol): Removed argument.\n+\t* class.c (gfc_add_component_ref): Fix up missing vtype if necessary.\n+\t(gfc_build_class_symbol): Remove argument 'delayed_vtab'. vtab is always\n+\tdelayed now, except for unlimited polymorphics.\n+\t(comp_is_finalizable): Procedure pointer components are not finalizable.\n+\t* decl. (build_sym, build_struct, attr_decl1): Removed argument of\n+\t'gfc_build_class_symbol'.\n+\t* match.c (copy_ts_from_selector_to_associate, select_type_set_tmp):\n+\tDitto.\n+\t* symbol.c (gfc_set_default_type): Ditto.\n+\n+2014-02-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60232\n+\t* expr.c (gfc_get_variable_expr): Don't add REF_ARRAY for dimensionful\n+\tfunctions, which are used as procedure pointer target.\n+\n+2014-02-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/49397\n+\t* expr.c (gfc_check_pointer_assign): Add check for\n+\tF2008Cor2, C729.\n+\t* trans-decl.c (gfc_get_symbol_decl): Correctly generate external\n+\tdecl in a corner case.\n+\n+2014-02-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60231\n+\t* resolve.c (check_generic_tbp_ambiguity): Check for presence of dummy\n+\targuments to prevent ICE.\n+\n+2014-02-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55907\n+\t* resolve.c (build_default_init_expr): Don't initialize character\n+\tvariable if -fno-automatic is given.\n+\n+2014-02-15  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/59599\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ichar): Calculate the\n+\tnumber of arguments.\n+\n+2014-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/52370\n+\t* trans-decl.c (gfc_build_dummy_array_decl): Set TREE_NO_WARNING\n+\ton decl if sym->attr.optional.\n+\n+2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57522\n+\t* resolve.c (resolve_assoc_var): Set the subref_array_pointer\n+\tattribute for the 'associate-name' if necessary.\n+\t* trans-stmt.c (trans_associate_var): If the 'associate-name'\n+\tis a subref_array_pointer, assign the element size of the\n+\tassociate variable to 'span'.\n+\n+2014-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59026\n+\t* trans-expr.c (gfc_conv_procedure_call): Pass the value of the\n+\tactual argument to a formal argument with the value attribute\n+\tin an elemental procedure.\n+\n+2014-02-08  Janus Weil  <janus@gcc.gnu.org>\n+\t    Mikael Morin <mikael.morin@gcc.gnu.org>\n+\n+\tPR fortran/58470\n+\t* class.c (generate_finalization_wrapper): Assert that proc_tree has\n+\tbeen set in gfc_resolve_finalizers.\n+\t* resolve.c (resolve_fl_derived0): Remove unnecessary call to\n+\tgfc_is_finalizable.\n+\n+2014-02-07  Benno Schulenberg  <bensberg@justemail.net>\n+\n+\tPR translation/52289\n+\t* fortran/resolve.c (resolve_ordinary_assign): Fix typoed word\n+\tin an error message.\n+\n+2014-02-02  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/57033\n+\t* primary.c (gfc_convert_to_structure_constructor): Avoid null pointer\n+\tdereference.\n+\n+2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59906\n+\t* trans-stmt.c (gfc_add_loop_ss_code): In the case of character\n+\tSS_REFERENCE, use gfc_conv_string_parameter to ensure that a\n+\tpointer to the string is stored.\n+\t* trans-expr.c (gfc_conv_expr_reference): Likewise, use\n+\tgfc_conv_string_parameter to ensure that a pointer to is passed\n+\tto the elemental function.\n+\n+2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59414\n+\t* trans-stmt.c (gfc_trans_allocate): Before the pointer\n+\tassignment to transfer the source _vptr to a class allocate\n+\texpression, the final class reference should be exposed. The\n+\ttail that includes the _data and array references is stored.\n+\tThis reduced expression is transferred to 'lhs' and the _vptr\n+\tadded. Then the tail is restored to the allocate expression.\n+\n+2014-01-26  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/58007\n+\t* module.c (read_module): Assert for component name correctness.\n+\n+2014-01-18  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/58007\n+\t* module.c (MOD_VERSION): Bump.\n+\t(fp2, find_pointer2): Remove.\n+\t(mio_component_ref): Don't forcedfully set the containing derived type\n+\tsymbol for loading.  Remove unused argument.\n+\t(mio_ref): Update caller\n+\t(mio_symbol): Dump component list earlier.\n+\t(skip_list): New argument nest_level.  Initialize level with the new\n+\targument.\n+\t(read_module): Add forced pointer components association for derived\n+\ttype symbols.\n+\n+2014-01-12  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58026\n+\t* decl.c (gfc_match_data_decl): Improve error recovery.\n+\n+2014-01-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* cpp.c (gfc_cpp_handle_option): Add missing break.\n+\t* trans-io.c (transfer_expr): Silence unused value warning.\n+\n+2014-01-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/58182\n+\t* resolve.c (gfc_verify_binding_labels): Modify order of checks.\n+\n+2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59589\n+\t* class.c (comp_is_finalizable): New function to dermine if a given\n+\tcomponent is finalizable.\n+\t(finalize_component, generate_finalization_wrapper): Use it.\n+\n+2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59023\n+\tPR fortran/59662\n+\t* resolve.c (resolve_global_procedure): Don't apply to c-binding\n+\tprocedures.\n+\t(gfc_verify_binding_labels): Remove duplicate line.\n+\n+2014-01-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59547\n+\t* class.c (add_proc_comp): Copy pure attribute.\n+\n+2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tUpdate copyright years\n+\n+2014-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n+\tdates.\n+\t* gfc-internals.texi: Bump @copying's copyright year.\n+\t* gfortran.texi: Ditto.\n+\t* intrinsic.texi: Ditto.\n+\t* invoke.texi: Ditto.\n+\n+2014-01-02  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59654\n+\t* resolve.c (resolve_typebound_procedures): No need to create the vtab\n+\there.\n+\f\n+Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "a797f1aace7879c8712db5d7b1e5dbfa1bae2ec8", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=4294c0935c186a724f044c36ca9693a7138853ae", "patch": "@@ -2503,6 +2503,18 @@ gfc_has_vector_subscript (gfc_expr *e)\n }\n \n \n+static bool\n+is_procptr_result (gfc_expr *expr)\n+{\n+  gfc_component *c = gfc_get_proc_ptr_comp (expr);\n+  if (c)\n+    return (c->ts.interface && (c->ts.interface->attr.proc_pointer == 1));\n+  else\n+    return ((expr->symtree->n.sym->result != expr->symtree->n.sym)\n+\t    && (expr->symtree->n.sym->result->attr.proc_pointer == 1));\n+}\n+\n+\n /* Given formal and actual argument lists, see if they are compatible.\n    If they are compatible, the actual argument list is sorted to\n    correspond with the formal list, and elements for missing optional\n@@ -2724,10 +2736,10 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n          argument is provided for a procedure pointer formal argument.  */\n       if (f->sym->attr.proc_pointer\n \t  && !((a->expr->expr_type == EXPR_VARIABLE\n-\t\t&& a->expr->symtree->n.sym->attr.proc_pointer)\n+\t\t&& (a->expr->symtree->n.sym->attr.proc_pointer\n+\t\t    || gfc_is_proc_ptr_comp (a->expr)))\n \t       || (a->expr->expr_type == EXPR_FUNCTION\n-\t\t   && a->expr->symtree->n.sym->result->attr.proc_pointer)\n-\t       || gfc_is_proc_ptr_comp (a->expr)))\n+\t\t   && is_procptr_result (a->expr))))\n \t{\n \t  if (where)\n \t    gfc_error (\"Expected a procedure pointer for argument %qs at %L\",\n@@ -2738,7 +2750,12 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n       /* Satisfy F03:12.4.1.3 by ensuring that a procedure actual argument is\n \t provided for a procedure formal argument.  */\n       if (f->sym->attr.flavor == FL_PROCEDURE\n-\t  && gfc_expr_attr (a->expr).flavor != FL_PROCEDURE)\n+\t  && !((a->expr->expr_type == EXPR_VARIABLE\n+\t\t&& (a->expr->symtree->n.sym->attr.flavor == FL_PROCEDURE\n+\t\t    || a->expr->symtree->n.sym->attr.proc_pointer\n+\t\t    || gfc_is_proc_ptr_comp (a->expr)))\n+\t       || (a->expr->expr_type == EXPR_FUNCTION\n+\t\t   && is_procptr_result (a->expr))))\n \t{\n \t  if (where)\n \t    gfc_error (\"Expected a procedure for argument %qs at %L\","}, {"sha": "44bc6f2dd3f1051bdbef3c8e8d4205950addae7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 18769, "changes": 18772, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4294c0935c186a724f044c36ca9693a7138853ae"}, {"sha": "3e8fdc2ea32405b2b403962b8518d7d28b1ee68a", "filename": "gcc/testsuite/ChangeLog-2014", "status": "added", "additions": 18776, "deletions": 0, "changes": 18776, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2FChangeLog-2014", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2FChangeLog-2014", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog-2014?ref=4294c0935c186a724f044c36ca9693a7138853ae"}, {"sha": "f51c5455c050d21a842a1307d976d0c6d605160b", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_11.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4294c0935c186a724f044c36ca9693a7138853ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_11.f90?ref=4294c0935c186a724f044c36ca9693a7138853ae", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR 60507: Passing function call into procedure argument not caught\n+!\n+! Contributed by Vladimir Fuka <vladimir.fuka@gmail.com>\n+\n+type :: t\n+  procedure(g), pointer, nopass :: ppc => g\n+end type\n+\n+procedure(g), pointer :: pp => g\n+type(t)::x\n+\n+print *, f(g)\n+print *, f(g())      ! { dg-error \"Expected a procedure for argument\" }\n+print *, f(pp)\n+print *, f(pp())     ! { dg-error \"Expected a procedure for argument\" }\n+print *, f(x%ppc)\n+print *, f(x%ppc())  ! { dg-error \"Expected a procedure for argument\" }\n+\n+contains\n+\n+  real function f(fun)\n+    procedure(g) :: fun\n+    f = fun()\n+  end function\n+\n+  real function g()\n+    g = 1.\n+  end function\n+\n+end"}]}