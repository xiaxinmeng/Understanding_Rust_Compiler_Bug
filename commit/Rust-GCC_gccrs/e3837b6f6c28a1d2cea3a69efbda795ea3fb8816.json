{"sha": "e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "node_id": "C_kwDOANBUbNoAKGUzODM3YjZmNmMyOGExZDJjZWEzYTY5ZWZiZGE3OTVlYTNmYjg4MTY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-28T14:34:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-01T07:37:34Z"}, "message": "tree-optimization/108950 - widen-sum reduction ICE\n\nWhen we end up with a widen-sum with an invariant smaller operand\nthe reduction code uses a wrong vector type for it, causing\nIL checking ICEs.  The following fixes that and the inefficiency\nof using a widen-sum with a widenend invariant operand as well\nby actually performing the check the following comment wants.\n\n\tPR tree-optimization/108950\n\t* tree-vect-patterns.cc (vect_recog_widen_sum_pattern):\n\tCheck oprnd0 is defined in the loop.\n\t* tree-vect-loop.cc (vectorizable_reduction): Record all\n\toperands vector types, compute that of invariants and\n\tproperly update their SLP nodes.\n\n\t* gcc.dg/vect/pr108950.c: New testcase.", "tree": {"sha": "e537856071b444cea9f477bc15a9ddffb768c62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e537856071b444cea9f477bc15a9ddffb768c62d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392f399ae0595e6b4433c18900cc67991fb140f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392f399ae0595e6b4433c18900cc67991fb140f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392f399ae0595e6b4433c18900cc67991fb140f4"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "2163866dfa7036886bf4135c040ffd6b1a2a5bc2", "filename": "gcc/testsuite/gcc.dg/vect/pr108950.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108950.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108950.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108950.c?ref=e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int m;\n+short int n;\n+\n+__attribute__ ((simd)) int\n+foo (void)\n+{\n+  m += n;\n+  m += n;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"widen_sum\" \"vect\" } } */"}, {"sha": "b17e8745d3fb5e18ad49c641ccbc83d149ca2aa4", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "patch": "@@ -6790,6 +6790,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t\t\tstmt_vector_for_cost *cost_vec)\n {\n   tree vectype_in = NULL_TREE;\n+  tree vectype_op[3] = { NULL_TREE, NULL_TREE, NULL_TREE };\n   class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   enum vect_def_type cond_reduc_dt = vect_unknown_def_type;\n   stmt_vec_info cond_stmt_vinfo = NULL;\n@@ -6799,7 +6800,6 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   bool nested_cycle = false;\n   bool double_reduc = false;\n   int vec_num;\n-  tree tem;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n   tree cond_reduc_val = NULL_TREE;\n \n@@ -7037,7 +7037,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n       enum vect_def_type dt;\n       if (!vect_is_simple_use (loop_vinfo, stmt_info, slp_for_stmt_info,\n \t\t\t       i + opno_adjust, &op.ops[i], &slp_op[i], &dt,\n-\t\t\t       &tem, &def_stmt_info))\n+\t\t\t       &vectype_op[i], &def_stmt_info))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -7052,15 +7052,20 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n       if (VECTORIZABLE_CYCLE_DEF (dt))\n \treturn false;\n \n+      if (!vectype_op[i])\n+\tvectype_op[i]\n+\t  = get_vectype_for_scalar_type (loop_vinfo,\n+\t\t\t\t\t TREE_TYPE (op.ops[i]), slp_op[i]);\n+\n       /* To properly compute ncopies we are interested in the widest\n \t non-reduction input type in case we're looking at a widening\n \t accumulation that we later handle in vect_transform_reduction.  */\n       if (lane_reduc_code_p\n-\t  && tem\n+\t  && vectype_op[i]\n \t  && (!vectype_in\n \t      || (GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (vectype_in)))\n-\t\t  < GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (tem))))))\n-\tvectype_in = tem;\n+\t\t  < GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (vectype_op[i]))))))\n+\tvectype_in = vectype_op[i];\n \n       if (op.code == COND_EXPR)\n \t{\n@@ -7581,7 +7586,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t   && !lane_reduc_code_p\n \t   && reduction_type != FOLD_LEFT_REDUCTION))\n     for (i = 0; i < (int) op.num_ops; i++)\n-      if (!vect_maybe_update_slp_op_vectype (slp_op[i], vectype_in))\n+      if (!vect_maybe_update_slp_op_vectype (slp_op[i], vectype_op[i]))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}, {"sha": "dd585e59bf7b4182aae22c13449da943f385791b", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3837b6f6c28a1d2cea3a69efbda795ea3fb8816/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=e3837b6f6c28a1d2cea3a69efbda795ea3fb8816", "patch": "@@ -1821,7 +1821,9 @@ vect_recog_widen_sum_pattern (vec_info *vinfo,\n      of the above pattern.  */\n \n   if (!vect_reassociating_reduction_p (vinfo, stmt_vinfo, PLUS_EXPR,\n-\t\t\t\t       &oprnd0, &oprnd1))\n+\t\t\t\t       &oprnd0, &oprnd1)\n+      || TREE_CODE (oprnd0) != SSA_NAME\n+      || !vinfo->lookup_def (oprnd0))\n     return NULL;\n \n   type = TREE_TYPE (gimple_get_lhs (last_stmt));"}]}