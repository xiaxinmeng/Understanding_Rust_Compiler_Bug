{"sha": "d9af4feaf09350974d2cefcc284ebc3716f6829f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhZjRmZWFmMDkzNTA5NzRkMmNlZmNjMjg0ZWJjMzcxNmY2ODI5Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-21T07:17:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-21T07:17:22Z"}, "message": "bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges): Put all BBs reachable only via paths crossing cold region to cold region.\n\n\n\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n\tPut all BBs reachable only via paths crossing cold region to cold\n\tregion.\n\t* cfgrtl.c (find_bbs_reachable_by_hot_paths): New function.\n\nFrom-SVN: r250417", "tree": {"sha": "bbcc41e64d2b3293e4771166e8e4862896583e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbcc41e64d2b3293e4771166e8e4862896583e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9af4feaf09350974d2cefcc284ebc3716f6829f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9af4feaf09350974d2cefcc284ebc3716f6829f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9af4feaf09350974d2cefcc284ebc3716f6829f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9af4feaf09350974d2cefcc284ebc3716f6829f/comments", "author": null, "committer": null, "parents": [{"sha": "1dae21ad9797ae5cb77db3f2d85e854f3ae121f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dae21ad9797ae5cb77db3f2d85e854f3ae121f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dae21ad9797ae5cb77db3f2d85e854f3ae121f4"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "7e87d432662000b88e6a99becd8b6b4e7be84a82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9af4feaf09350974d2cefcc284ebc3716f6829f", "patch": "@@ -1,3 +1,10 @@\n+2016-07-21  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n+\tPut all BBs reachable only via paths crossing cold region to cold\n+\tregion.\n+\t* cfgrtl.c (find_bbs_reachable_by_hot_paths): New function.\n+\n 2016-07-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81303"}, {"sha": "dc50546ab63d4d5531f8bddbe319f6491a9b07d9", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=d9af4feaf09350974d2cefcc284ebc3716f6829f", "patch": "@@ -1665,6 +1665,12 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n                                           &bbs_in_hot_partition);\n       if (cold_bb_count)\n         sanitize_hot_paths (false, cold_bb_count, &bbs_in_hot_partition);\n+\n+      hash_set <basic_block> set;\n+      find_bbs_reachable_by_hot_paths (&set);\n+      FOR_EACH_BB_FN (bb, cfun)\n+\tif (!set.contains (bb))\n+\t  BB_SET_PARTITION (bb, BB_COLD_PARTITION);\n     }\n \n   /* The format of .gcc_except_table does not allow landing pads to"}, {"sha": "58d87fe09aeec97cc5d0f34c7f7f2bc48018e20e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=d9af4feaf09350974d2cefcc284ebc3716f6829f", "patch": "@@ -2282,6 +2282,29 @@ get_last_bb_insn (basic_block bb)\n   return end;\n }\n \n+/* Add all BBs reachable from entry via hot paths into the SET.  */\n+\n+void\n+find_bbs_reachable_by_hot_paths (hash_set<basic_block> *set)\n+{\n+  auto_vec<basic_block, 64> worklist;\n+\n+  set->add (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  worklist.safe_push (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+\n+  while (worklist.length () > 0)\n+    {\n+      basic_block bb = worklist.pop ();\n+      edge_iterator ei;\n+      edge e;\n+\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+\tif (BB_PARTITION (e->dest) != BB_COLD_PARTITION\n+\t    && !set->add (e->dest))\n+\t  worklist.safe_push (e->dest);\n+    }\n+}\n+\n /* Sanity check partition hotness to ensure that basic blocks in\n  \u00a0 the cold partition don't dominate basic blocks in the hot partition.\n    If FLAG_ONLY is true, report violations as errors. Otherwise\n@@ -2295,49 +2318,25 @@ find_partition_fixes (bool flag_only)\n   basic_block bb;\n   vec<basic_block> bbs_in_cold_partition = vNULL;\n   vec<basic_block> bbs_to_fix = vNULL;\n+  hash_set<basic_block> set;\n \n   /* Callers check this.  */\n   gcc_checking_assert (crtl->has_bb_partition);\n \n-  FOR_EACH_BB_FN (bb, cfun)\n-    if ((BB_PARTITION (bb) == BB_COLD_PARTITION))\n-      bbs_in_cold_partition.safe_push (bb);\n-\n-  if (bbs_in_cold_partition.is_empty ())\n-    return vNULL;\n-\n-  bool dom_calculated_here = !dom_info_available_p (CDI_DOMINATORS);\n-\n-  if (dom_calculated_here)\n-    calculate_dominance_info (CDI_DOMINATORS);\n-\n-  while (! bbs_in_cold_partition.is_empty  ())\n-    {\n-      bb = bbs_in_cold_partition.pop ();\n-      /* Any blocks dominated by a block in the cold section\n-         must also be cold.  */\n-      basic_block son;\n-      for (son = first_dom_son (CDI_DOMINATORS, bb);\n-           son;\n-           son = next_dom_son (CDI_DOMINATORS, son))\n-        {\n-          /* If son is not yet cold, then mark it cold here and\n-             enqueue it for further processing.  */\n-          if ((BB_PARTITION (son) != BB_COLD_PARTITION))\n-            {\n-              if (flag_only)\n-                error (\"non-cold basic block %d dominated \"\n-                       \"by a block in the cold partition (%d)\", son->index, bb->index);\n-              else\n-                BB_SET_PARTITION (son, BB_COLD_PARTITION);\n-              bbs_to_fix.safe_push (son);\n-              bbs_in_cold_partition.safe_push (son);\n-            }\n-        }\n-    }\n+  find_bbs_reachable_by_hot_paths (&set);\n \n-  if (dom_calculated_here)\n-    free_dominance_info (CDI_DOMINATORS);\n+  FOR_EACH_BB_FN (bb, cfun)\n+    if (!set.contains (bb)\n+\t&& BB_PARTITION (bb) != BB_COLD_PARTITION)\n+      {\n+\tif (flag_only)\n+\t  error (\"non-cold basic block %d reachable only \"\n+\t\t \"by paths crossing the cold partition\", bb->index);\n+\telse\n+\t  BB_SET_PARTITION (bb, BB_COLD_PARTITION);\n+\tbbs_to_fix.safe_push (bb);\n+\tbbs_in_cold_partition.safe_push (bb);\n+      }\n \n   return bbs_to_fix;\n }"}, {"sha": "93cb75d041e0a4f3d66e839cf555237cde31ab5f", "filename": "gcc/cfgrtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9af4feaf09350974d2cefcc284ebc3716f6829f/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=d9af4feaf09350974d2cefcc284ebc3716f6829f", "patch": "@@ -54,5 +54,6 @@ extern void cfg_layout_initialize (int);\n extern void cfg_layout_finalize (void);\n extern void break_superblocks (void);\n extern void init_rtl_bb_info (basic_block);\n+extern void find_bbs_reachable_by_hot_paths (hash_set <basic_block> *);\n \n #endif /* GCC_CFGRTL_H */"}]}