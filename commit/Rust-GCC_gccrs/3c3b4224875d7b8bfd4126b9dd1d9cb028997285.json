{"sha": "3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzYjQyMjQ4NzVkN2I4YmZkNDEyNmI5ZGQxZDljYjAyODk5NzI4NQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-06-30T13:51:20Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-06-30T14:20:28Z"}, "message": "arm: Warn if IRQ handler is not compiled with -mgeneral-regs-only [PR target/94743]\n\nThe interrupt attribute does not guarantee that the FP registers are\nsaved, which can result in problems difficult to debug.\n\nSaving the FP registers and status registers can be a large penalty,\nso it's probably not desirable to do that all the time.\n\nIf the handler calls other functions, we'd likely need to save all of\nthem, for lack of knowledge of which registers they actually clobber.\n\nThis is even more obscure for the end-user when the compiler inserts\ncalls to helper functions such as memcpy (some multilibs do use FP\nregisters to speed it up).\n\nIn the PR, we discussed adding routines in libgcc to save the FP\ncontext and saving only locally-clobbered FP registers, but this seems\nto be too much work for the purpose, given that in general such\nhandlers try to avoid this kind of penalty.\nI suspect we would also want new attributes to instruct the compiler\nthat saving the FP context is not needed.\n\nIn the mean time, emit a warning to suggest re-compiling with\n-mgeneral-regs-only. Note that this can lead to errors if the code\nuses floating-point and -mfloat-abi=hard, eg:\nargument of type 'double' not permitted with -mgeneral-regs-only\n\nThis can be troublesome for the user, but at least this would make\nhim aware of the latent issue.\n\nThe patch adds several testcases:\n\n- pr94734-1-hard.c checks that a warning is emitted when using\n  -mfloat-abi=hard. Function IRQ_HDLR_Test can make implicit calls to\n  runtime floating-point routines (or direct use of FP instructions),\n  IRQ_HDLR_Test2 doesn't. We emit a warning in both cases, though.\n\n- pr94734-1-softfp.c: same as above wih -mfloat-abi=softfp.\n\n- pr94734-1-soft.c checks that no warning is emitted when using\n  -mfloat-abi=soft when the same code as above.\n\n- pr94734-2.c checks that no warning is emitted when using\n  -mgeneral-regs-only.\n\n- pr94734-3.c checks that no warning is emitted when using\n  -mgeneral-regs-only even using float-point data.\n\n2020-06-30  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tPR target/94743\n\tgcc/\n\t* config/arm/arm.c (arm_handle_isr_attribute): Warn if\n\t-mgeneral-regs-only is not used.\n\n\tgcc/testsuite/\n\t* gcc.misc-tests/arm-isr.c: Add -mgeneral-regs-only.\n\t* gcc.target/arm/empty_fiq_handler.c: Add -mgeneral-regs-only.\n\t* gcc.target/arm/interrupt-1.c: Add -mgeneral-regs-only.\n\t* gcc.target/arm/interrupt-2.c: Add -mgeneral-regs-only.\n\t* gcc.target/arm/pr70830.c: Add -mgeneral-regs-only.\n\t* gcc.target/arm/pr94743-1-hard.c: New test.\n\t* gcc.target/arm/pr94743-1-soft.c: New test.\n\t* gcc.target/arm/pr94743-1-softfp.c: New test.\n\t* gcc.target/arm/pr94743-2.c: New test.\n\t* gcc.target/arm/pr94743-3.c: New test.", "tree": {"sha": "82e55c881aeaec49e019d86692cbc32faff98c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e55c881aeaec49e019d86692cbc32faff98c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/comments", "author": null, "committer": null, "parents": [{"sha": "33d114f570b4a3583421c700396fd5945acebc28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d114f570b4a3583421c700396fd5945acebc28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d114f570b4a3583421c700396fd5945acebc28"}], "stats": {"total": 144, "additions": 141, "deletions": 3}, "files": [{"sha": "e15d28684352781eb5c5ab269506234cfe912eb4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -7257,6 +7257,11 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t\t   name);\n \t  *no_add_attrs = true;\n \t}\n+      else if (TARGET_VFP_BASE)\n+\t{\n+\t  warning (OPT_Wattributes, \"FP registers might be clobbered despite %qE attribute: compile with %<-mgeneral-regs-only%>\",\n+\t\t   name);\n+\t}\n       /* FIXME: the argument if any is checked for type attributes;\n \t should it be checked for decl ones?  */\n     }"}, {"sha": "9eff52c7914379414c57c458f0b38356b7a302bb", "filename": "gcc/testsuite/gcc.misc-tests/arm-isr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n extern void abort ();\n extern void exit (int);\n "}, {"sha": "6911ffce1c872edc7d2af540afbde31921840382", "filename": "gcc/testsuite/gcc.target/arm/empty_fiq_handler.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fempty_fiq_handler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fempty_fiq_handler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fempty_fiq_handler.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { ! arm_cortex_m } { \"-mthumb\" } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n \n /* Below code used to trigger an ICE due to missing constraints for\n    sp = fp + cst pattern.  */"}, {"sha": "de1ecc503c4f4cdf7addfffa353ae5c78677c237", "filename": "gcc/testsuite/gcc.target/arm/interrupt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -2,7 +2,7 @@\n    __attribute__ ((interrupt)).  */\n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_nothumb } */\n-/* { dg-options \"-O0 -marm -save-temps\" } */\n+/* { dg-options \"-mgeneral-regs-only -O0 -marm -save-temps\" } */\n \n /* This test is not valid when -mthumb.  */\n extern void bar (int);"}, {"sha": "c64b98b950202fcd3f6af6a2ca437d9844053861", "filename": "gcc/testsuite/gcc.target/arm/interrupt-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -2,7 +2,7 @@\n    __attribute__ ((interrupt)).  */\n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_nothumb } */\n-/* { dg-options \"-O1 -marm -save-temps\" } */\n+/* { dg-options \"-mgeneral-regs-only -O1 -marm -save-temps\" } */\n \n /* This test is not valid when -mthumb.  */\n extern void bar (int);"}, {"sha": "bca596c2d631d066fabeb26a876b22657820ba77", "filename": "gcc/testsuite/gcc.target/arm/pr70830.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70830.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -1,7 +1,7 @@\n /* PR target/70830.  */\n /* { dg-do assemble } */\n /* { dg-require-effective-target arm_arm_ok } */\n-/* { dg-options \"-Os -marm -save-temps\" } */\n+/* { dg-options \"-mgeneral-regs-only -Os -marm -save-temps\" } */\n \n /* This test is not valid when -mthumb.  */\n "}, {"sha": "928b79de3aad2f0e378dc0f70186d412cea19689", "filename": "gcc/testsuite/gcc.target/arm/pr94743-1-hard.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-hard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-hard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-hard.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/94743 */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } {\"-mfloat-abi=hard\" } } */\n+/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-add-options arm_vfp } */\n+/* Make sure with use -mfloat-abi=hard.  */\n+/* { dg-additional-options \"-mfloat-abi=hard\" } */\n+\n+/* Check that we emit a warning when compiling an IRQ handler without\n+   -mgeneral-regs-only.  */\n+typedef struct {\n+  double fpdata[32];\n+} dummy_t;\n+\n+dummy_t global_d;\n+dummy_t global_d1;\n+\n+/* This function may clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test(void)\n+{ /* { dg-warning { FP registers might be clobbered despite 'interrupt' attribute: compile with -mgeneral-regs-only} \"\" { target *-*-* } . } */\n+  global_d.fpdata[3] += global_d.fpdata[3] * global_d1.fpdata[3];\n+}\n+\n+/* This function does not need to clobber VFP registers.  */\n+/* Do we want to emit a (useless?) warning?  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test2(void)\n+{ /* { dg-warning { FP registers might be clobbered despite 'interrupt' attribute: compile with -mgeneral-regs-only} \"\" { target *-*-* } . } */\n+  global_d.fpdata[3] = 1.0;\n+}"}, {"sha": "e06a16d166cac7d71436b5f251ded4fd8057c987", "filename": "gcc/testsuite/gcc.target/arm/pr94743-1-soft.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-soft.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-soft.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-soft.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/94743 */\n+/* { dg-do compile } */\n+/* Thumb1 mode not supported for interrupt routines.  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } {\"-mfloat-abi=soft\" } } */\n+/* { dg-options \"-mfloat-abi=soft\" } */\n+\n+/* Check that we do not emit a warning when compiling an IRQ handler without\n+   -mgeneral-regs-only with -mfloat-abi=soft.  */\n+typedef struct {\n+  double fpdata[32];\n+} dummy_t;\n+\n+dummy_t global_d;\n+dummy_t global_d1;\n+\n+/* This function may clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test(void)\n+{\n+  global_d.fpdata[3] += global_d.fpdata[3] * global_d1.fpdata[3];\n+}\n+\n+/* This function does not need to clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test2(void)\n+{\n+  global_d.fpdata[3] = 1.0;\n+}"}, {"sha": "6113eb622e9b83f0c3e80ce0c7f53d4d64ef793b", "filename": "gcc/testsuite/gcc.target/arm/pr94743-1-softfp.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-softfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-softfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-1-softfp.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/94743 */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } {\"-mfloat-abi=softfp\" } } */\n+/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-add-options arm_vfp } */\n+/* Make sure with use -mfloat-abi=softfp.  */\n+/* { dg-additional-options \"-mfloat-abi=softfp\" } */\n+\n+/* Check that we emit a warning when compiling an IRQ handler without\n+   -mgeneral-regs-only.  */\n+typedef struct {\n+  double fpdata[32];\n+} dummy_t;\n+\n+dummy_t global_d;\n+dummy_t global_d1;\n+\n+/* This function may clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test(void)\n+{ /* { dg-warning { FP registers might be clobbered despite 'interrupt' attribute: compile with -mgeneral-regs-only} \"\" { target *-*-* } . } */\n+  global_d.fpdata[3] += global_d.fpdata[3] * global_d1.fpdata[3];\n+}\n+\n+/* This function does not need to clobber VFP registers.  */\n+/* Do we want to emit a (useless?) warning?  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test2(void)\n+{ /* { dg-warning { FP registers might be clobbered despite 'interrupt' attribute: compile with -mgeneral-regs-only} \"\" { target *-*-* } . } */\n+  global_d.fpdata[3] = 1.0;\n+}"}, {"sha": "50a97de69b84ec43498b775e6087a46b87fbdd2c", "filename": "gcc/testsuite/gcc.target/arm/pr94743-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-2.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/94743 */\n+/* { dg-do compile } */\n+/* Thumb1 mode not supported for interrupt routines.  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+/* Check that we do not emit a warning when compiling an IRQ handler\n+   with -mgeneral-regs-only.  */\n+typedef struct {\n+  /* Do not use floating-point types, which are not compatible with\n+     -mgeneral-regs-only under -mfloat-abi=hard */\n+  int fpdata[32];\n+} dummy_t;\n+\n+dummy_t global_d;\n+dummy_t global_d1;\n+\n+/* This function does not clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test(void)\n+{\n+  global_d.fpdata[3] += global_d.fpdata[3] * global_d1.fpdata[3];\n+}"}, {"sha": "6b8ed2b8dfacd3fe21d91b7b426a5f76757167ca", "filename": "gcc/testsuite/gcc.target/arm/pr94743-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c3b4224875d7b8bfd4126b9dd1d9cb028997285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr94743-3.c?ref=3c3b4224875d7b8bfd4126b9dd1d9cb028997285", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/94743 */\n+/* { dg-do compile } */\n+/* Thumb1 mode not supported for interrupt routines.  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } {\"-mfloat-abi=soft\" } } */\n+/* { dg-options \"-mgeneral-regs-only -mfloat-abi=soft\" } */\n+\n+/* Check that we do not emit a warning when compiling an IRQ handler\n+   with -mgeneral-regs-only even when using floating-point data.  */\n+typedef struct {\n+  /* Since we use -mfloat=abi=soft, this will generate calls to\n+     libgcc, but won't clobber VFP registers.  */\n+  double fpdata[32];\n+} dummy_t;\n+\n+dummy_t global_d;\n+dummy_t global_d1;\n+\n+/* This function does not clobber VFP registers.  */\n+__attribute__ ((interrupt(\"IRQ\"))) void IRQ_HDLR_Test(void)\n+{\n+  global_d.fpdata[3] += global_d.fpdata[3] * global_d1.fpdata[3];\n+}"}]}