{"sha": "ff08da301e9f6aa72059128e200a3a1220172bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwOGRhMzAxZTlmNmFhNzIwNTkxMjhlMjAwYTNhMTIyMDE3MmJiZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-12-07T01:47:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-12-07T01:47:31Z"}, "message": "machmode.def: Use correct definition for BITSIZE on targets where BITS_PER_UNIT != 8.\n\n\t* machmode.def: Use correct definition for BITSIZE on targets where\n\tBITS_PER_UNIT != 8.\n\nFrom-SVN: r38085", "tree": {"sha": "62f68899d0f63b086a8d9ba9092e475ddf92c88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62f68899d0f63b086a8d9ba9092e475ddf92c88a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff08da301e9f6aa72059128e200a3a1220172bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff08da301e9f6aa72059128e200a3a1220172bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff08da301e9f6aa72059128e200a3a1220172bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff08da301e9f6aa72059128e200a3a1220172bbd/comments", "author": null, "committer": null, "parents": [{"sha": "68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c9c61a015dd4f6a5c58986c8a9d6e3a96ce0e4"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "66fd20e4d399a3e91e27b34d193296562e49f1ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08da301e9f6aa72059128e200a3a1220172bbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08da301e9f6aa72059128e200a3a1220172bbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff08da301e9f6aa72059128e200a3a1220172bbd", "patch": "@@ -1,9 +1,14 @@\n+2000-12-06 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* machmode.def: Use correct definition for BITSIZE on targets where\n+\tBITS_PER_UNIT != 8.\n+\n 2000-12-06  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/Makefile.*: Reduce differences to (ultimately) reduce\n \tthe number of them.\n \n-2000-11-06  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n+2000-12-06  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c: Include expr.h before c-tree.h.\n \t(remove_useless_addtr_insns): Use reverse_condition_maybe_unordered"}, {"sha": "047030b59e8d137dee6d908a045714285e01a0f0", "filename": "gcc/machmode.def", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08da301e9f6aa72059128e200a3a1220172bbd/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08da301e9f6aa72059128e200a3a1220172bbd/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=ff08da301e9f6aa72059128e200a3a1220172bbd", "patch": "@@ -67,72 +67,72 @@ Boston, MA 02111-1307, USA.  */\n DEF_MACHMODE (VOIDmode, \"VOID\", MODE_RANDOM, 0, 0, 0, VOIDmode)\n \n DEF_MACHMODE (BImode, \"BI\", MODE_INT, 1, 1, 1, QImode)\n-DEF_MACHMODE (QImode, \"QI\", MODE_INT, 8, 1, 1, HImode)\n-DEF_MACHMODE (HImode, \"HI\", MODE_INT, 16, 2, 2, SImode)\n-DEF_MACHMODE (SImode, \"SI\", MODE_INT, 32, 4, 4, DImode)\n-DEF_MACHMODE (DImode, \"DI\", MODE_INT, 64, 8, 8, TImode)\n-DEF_MACHMODE (TImode, \"TI\", MODE_INT, 128, 16, 16, OImode)\n-DEF_MACHMODE (OImode, \"OI\", MODE_INT, 256, 32, 32, VOIDmode)\n+DEF_MACHMODE (QImode, \"QI\", MODE_INT, BITS_PER_UNIT, 1, 1, HImode)\n+DEF_MACHMODE (HImode, \"HI\", MODE_INT, BITS_PER_UNIT*2, 2, 2, SImode)\n+DEF_MACHMODE (SImode, \"SI\", MODE_INT, BITS_PER_UNIT*4, 4, 4, DImode)\n+DEF_MACHMODE (DImode, \"DI\", MODE_INT, BITS_PER_UNIT*8, 8, 8, TImode)\n+DEF_MACHMODE (TImode, \"TI\", MODE_INT, BITS_PER_UNIT*16, 16, 16, OImode)\n+DEF_MACHMODE (OImode, \"OI\", MODE_INT, BITS_PER_UNIT*32, 32, 32, VOIDmode)\n \n /* Pointers on some machines use these types to distinguish them from\n    ints.  Useful if a pointer is 4 bytes but has some bits that are\n    not significant, so it is really not quite as wide as an integer.  */\n-DEF_MACHMODE (PQImode, \"PQI\", MODE_PARTIAL_INT, 8, 1, 1, PHImode)\n-DEF_MACHMODE (PHImode, \"PHI\", MODE_PARTIAL_INT, 16, 2, 2, PSImode)\n-DEF_MACHMODE (PSImode, \"PSI\", MODE_PARTIAL_INT, 32, 4, 4, PDImode)\n-DEF_MACHMODE (PDImode, \"PDI\", MODE_PARTIAL_INT, 64, 8, 8, VOIDmode)\n-\n-DEF_MACHMODE (QFmode, \"QF\", MODE_FLOAT, 8, 1, 1, HFmode)\n-DEF_MACHMODE (HFmode, \"HF\", MODE_FLOAT, 16, 2, 2, TQFmode)\n-DEF_MACHMODE (TQFmode, \"TQF\", MODE_FLOAT, 24, 3, 3, SFmode) /* MIL-STD-1750A */\n-DEF_MACHMODE (SFmode, \"SF\", MODE_FLOAT, 32, 4, 4, DFmode)\n-DEF_MACHMODE (DFmode, \"DF\", MODE_FLOAT, 64, 8, 8, XFmode)\n-DEF_MACHMODE (XFmode, \"XF\", MODE_FLOAT, 96, 12, 12, TFmode) /* IEEE extended */\n-DEF_MACHMODE (TFmode, \"TF\", MODE_FLOAT, 128, 16, 16, VOIDmode)\n+DEF_MACHMODE (PQImode, \"PQI\", MODE_PARTIAL_INT, BITS_PER_UNIT, 1, 1, PHImode)\n+DEF_MACHMODE (PHImode, \"PHI\", MODE_PARTIAL_INT, BITS_PER_UNIT*2, 2, 2, PSImode)\n+DEF_MACHMODE (PSImode, \"PSI\", MODE_PARTIAL_INT, BITS_PER_UNIT*4, 4, 4, PDImode)\n+DEF_MACHMODE (PDImode, \"PDI\", MODE_PARTIAL_INT, BITS_PER_UNIT*8, 8, 8, VOIDmode)\n+\n+DEF_MACHMODE (QFmode, \"QF\", MODE_FLOAT, BITS_PER_UNIT, 1, 1, HFmode)\n+DEF_MACHMODE (HFmode, \"HF\", MODE_FLOAT, BITS_PER_UNIT*2, 2, 2, TQFmode)\n+DEF_MACHMODE (TQFmode, \"TQF\", MODE_FLOAT, BITS_PER_UNIT*3, 3, 3, SFmode) /* MIL-STD-1750A */\n+DEF_MACHMODE (SFmode, \"SF\", MODE_FLOAT, BITS_PER_UNIT*4, 4, 4, DFmode)\n+DEF_MACHMODE (DFmode, \"DF\", MODE_FLOAT, BITS_PER_UNIT*8, 8, 8, XFmode)\n+DEF_MACHMODE (XFmode, \"XF\", MODE_FLOAT, BITS_PER_UNIT*12, 12, 12, TFmode) /* IEEE extended */\n+DEF_MACHMODE (TFmode, \"TF\", MODE_FLOAT, BITS_PER_UNIT*16, 16, 16, VOIDmode)\n \n /* Complex modes.  */\n-DEF_MACHMODE (QCmode, \"QC\", MODE_COMPLEX_FLOAT, 16, 2, 1, HCmode)\n-DEF_MACHMODE (HCmode, \"HC\", MODE_COMPLEX_FLOAT, 32, 4, 2, SCmode)\n-DEF_MACHMODE (SCmode, \"SC\", MODE_COMPLEX_FLOAT, 64, 8, 4, DCmode)\n-DEF_MACHMODE (DCmode, \"DC\", MODE_COMPLEX_FLOAT, 128, 16, 8, XCmode)\n-DEF_MACHMODE (XCmode, \"XC\", MODE_COMPLEX_FLOAT, 192, 24, 12, TCmode)\n-DEF_MACHMODE (TCmode, \"TC\", MODE_COMPLEX_FLOAT, 256, 32, 16, VOIDmode)\n-\n-DEF_MACHMODE (CQImode, \"CQI\", MODE_COMPLEX_INT, 16, 2, 1, CHImode)\n-DEF_MACHMODE (CHImode, \"CHI\", MODE_COMPLEX_INT, 32, 4, 2, CSImode)\n-DEF_MACHMODE (CSImode, \"CSI\", MODE_COMPLEX_INT, 64, 8, 4, CDImode)\n-DEF_MACHMODE (CDImode, \"CDI\", MODE_COMPLEX_INT, 128, 16, 8, CTImode)\n-DEF_MACHMODE (CTImode, \"CTI\", MODE_COMPLEX_INT, 256, 32, 16, COImode)\n-DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, 512, 64, 32, VOIDmode)\n+DEF_MACHMODE (QCmode, \"QC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*2, 2, 1, HCmode)\n+DEF_MACHMODE (HCmode, \"HC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*4, 4, 2, SCmode)\n+DEF_MACHMODE (SCmode, \"SC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*8, 8, 4, DCmode)\n+DEF_MACHMODE (DCmode, \"DC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*16, 16, 8, XCmode)\n+DEF_MACHMODE (XCmode, \"XC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*24, 24, 12, TCmode)\n+DEF_MACHMODE (TCmode, \"TC\", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*32, 32, 16, VOIDmode)\n+\n+DEF_MACHMODE (CQImode, \"CQI\", MODE_COMPLEX_INT, BITS_PER_UNIT*2, 2, 1, CHImode)\n+DEF_MACHMODE (CHImode, \"CHI\", MODE_COMPLEX_INT, BITS_PER_UNIT*4, 4, 2, CSImode)\n+DEF_MACHMODE (CSImode, \"CSI\", MODE_COMPLEX_INT, BITS_PER_UNIT*8, 8, 4, CDImode)\n+DEF_MACHMODE (CDImode, \"CDI\", MODE_COMPLEX_INT, BITS_PER_UNIT*16, 16, 8, CTImode)\n+DEF_MACHMODE (CTImode, \"CTI\", MODE_COMPLEX_INT, BITS_PER_UNIT*32, 32, 16, COImode)\n+DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmode)\n \n /* Vector modes.  */\n /* There are no V1xx vector modes.  These are equivalent to normal\n    scalar modes.  */\n-DEF_MACHMODE (V2QImode, \"V2QI\", MODE_VECTOR_INT, 16, 2, 1, VOIDmode)\n-DEF_MACHMODE (V2HImode, \"V2HI\", MODE_VECTOR_INT, 32, 4, 2, VOIDmode)\n-DEF_MACHMODE (V2SImode, \"V2SI\", MODE_VECTOR_INT, 64, 8, 4, VOIDmode)\n-DEF_MACHMODE (V2DImode, \"V2DI\", MODE_VECTOR_INT, 128, 16, 8, VOIDmode)\n+DEF_MACHMODE (V2QImode, \"V2QI\", MODE_VECTOR_INT, BITS_PER_UNIT*2, 2, 1, VOIDmode)\n+DEF_MACHMODE (V2HImode, \"V2HI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 2, VOIDmode)\n+DEF_MACHMODE (V2SImode, \"V2SI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 4, VOIDmode)\n+DEF_MACHMODE (V2DImode, \"V2DI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 8, VOIDmode)\n \n-DEF_MACHMODE (V4QImode, \"V4QI\", MODE_VECTOR_INT, 32, 4, 1, VOIDmode)\n-DEF_MACHMODE (V4HImode, \"V4HI\", MODE_VECTOR_INT, 64, 8, 2, VOIDmode)\n-DEF_MACHMODE (V4SImode, \"V4SI\", MODE_VECTOR_INT, 128, 16, 4, VOIDmode)\n-DEF_MACHMODE (V4DImode, \"V4DI\", MODE_VECTOR_INT, 256, 32, 8, VOIDmode)\n+DEF_MACHMODE (V4QImode, \"V4QI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 1, VOIDmode)\n+DEF_MACHMODE (V4HImode, \"V4HI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 2, VOIDmode)\n+DEF_MACHMODE (V4SImode, \"V4SI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 4, VOIDmode)\n+DEF_MACHMODE (V4DImode, \"V4DI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 8, VOIDmode)\n \n-DEF_MACHMODE (V8QImode, \"V8QI\", MODE_VECTOR_INT, 64, 8, 1, VOIDmode)\n-DEF_MACHMODE (V8HImode, \"V8HI\", MODE_VECTOR_INT, 128, 16, 2, VOIDmode)\n-DEF_MACHMODE (V8SImode, \"V8SI\", MODE_VECTOR_INT, 256, 32, 4, VOIDmode)\n-DEF_MACHMODE (V8DImode, \"V8DI\", MODE_VECTOR_INT, 512, 64, 8, VOIDmode)\n+DEF_MACHMODE (V8QImode, \"V8QI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 1, VOIDmode)\n+DEF_MACHMODE (V8HImode, \"V8HI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 2, VOIDmode)\n+DEF_MACHMODE (V8SImode, \"V8SI\", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 4, VOIDmode)\n+DEF_MACHMODE (V8DImode, \"V8DI\", MODE_VECTOR_INT, BITS_PER_UNIT*64, 64, 8, VOIDmode)\n \n-DEF_MACHMODE (V16QImode, \"V16QI\", MODE_VECTOR_INT, 128, 16, 1, VOIDmode)\n+DEF_MACHMODE (V16QImode, \"V16QI\", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 1, VOIDmode)\n \n-DEF_MACHMODE (V2SFmode, \"V2SF\", MODE_VECTOR_FLOAT, 64, 8, 4, VOIDmode)\n-DEF_MACHMODE (V2DFmode, \"V2DF\", MODE_VECTOR_FLOAT, 128, 16, 8, VOIDmode)\n+DEF_MACHMODE (V2SFmode, \"V2SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*8, 8, 4, VOIDmode)\n+DEF_MACHMODE (V2DFmode, \"V2DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 8, VOIDmode)\n \n-DEF_MACHMODE (V4SFmode, \"V4SF\", MODE_VECTOR_FLOAT, 128, 16, 4, VOIDmode)\n-DEF_MACHMODE (V4DFmode, \"V4DF\", MODE_VECTOR_FLOAT, 256, 32, 8, VOIDmode)\n+DEF_MACHMODE (V4SFmode, \"V4SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 4, VOIDmode)\n+DEF_MACHMODE (V4DFmode, \"V4DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 8, VOIDmode)\n \n-DEF_MACHMODE (V8SFmode, \"V8SF\", MODE_VECTOR_FLOAT, 256, 32, 4, VOIDmode)\n-DEF_MACHMODE (V8DFmode, \"V8DF\", MODE_VECTOR_FLOAT, 512, 64, 8, VOIDmode)\n+DEF_MACHMODE (V8SFmode, \"V8SF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 4, VOIDmode)\n+DEF_MACHMODE (V8DFmode, \"V8DF\", MODE_VECTOR_FLOAT, BITS_PER_UNIT*64, 64, 8, VOIDmode)\n \n /* BLKmode is used for structures, arrays, etc.\n    that fit no more specific mode.  */\n@@ -143,7 +143,7 @@ DEF_MACHMODE (BLKmode, \"BLK\", MODE_RANDOM, 0, 0, 0, VOIDmode)\n    specified in the EXTRA_CC_MODES macro.  All MODE_CC modes are the\n    same width as SImode and have VOIDmode as their next wider mode.  */\n \n-#define CC(E, M)  DEF_MACHMODE (E, M, MODE_CC, 32, 4, 4, VOIDmode)\n+#define CC(E, M)  DEF_MACHMODE (E, M, MODE_CC, BITS_PER_UNIT*4, 4, 4, VOIDmode)\n \n CC (CCmode, \"CC\")\n "}]}