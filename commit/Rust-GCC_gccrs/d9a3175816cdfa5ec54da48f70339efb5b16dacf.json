{"sha": "d9a3175816cdfa5ec54da48f70339efb5b16dacf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhMzE3NTgxNmNkZmE1ZWM1NGRhNDhmNzAzMzllZmI1YjE2ZGFjZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T08:04:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T08:04:46Z"}, "message": "Delete questionable tests.\n\nFrom-SVN: r28448", "tree": {"sha": "590b1e4adf3f53e7bbdb12aade6bca5ea1d209e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590b1e4adf3f53e7bbdb12aade6bca5ea1d209e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a3175816cdfa5ec54da48f70339efb5b16dacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a3175816cdfa5ec54da48f70339efb5b16dacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a3175816cdfa5ec54da48f70339efb5b16dacf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a3175816cdfa5ec54da48f70339efb5b16dacf/comments", "author": null, "committer": null, "parents": [{"sha": "61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fb22b10a43a3ba600996e807f0e5085ab8d2f9"}], "stats": {"total": 253, "additions": 0, "deletions": 253}, "files": [{"sha": "395bfa6c3e2c607db25602519389f4949fbec02a", "filename": "gcc/testsuite/gcc.c-torture/unsorted/i386bug.c", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fb22b10a43a3ba600996e807f0e5085ab8d2f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fi386bug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fb22b10a43a3ba600996e807f0e5085ab8d2f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fi386bug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fi386bug.c?ref=61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "patch": "@@ -1,51 +0,0 @@\n-typedef union {\n-    struct {\n-\tlong RH, LH;\n-    } v;\n-    struct {\n-\tunsigned char B1;\n-    } u;\n-} twohalves;\n-\n-\n-typedef union {\n-    long cint;\n-    twohalves hhfield;\n-\n-} memoryword;\n-\n-\n-extern  memoryword mem[262];\n-\n-long znewstructure ( p )\n-long p;\n-{\n-  long q, r;\n-    {\n-      q = mem [ p + 2 ] .hhfield .v.RH;\n-      r = mem [ q + 1 ] .hhfield .v.LH;\n-      do {\n-\t  q = r;\n-\tr = mem [ r ] .hhfield .v.RH;\n-      } while ( ! ( r == p ) );\n-      r = foo((long) ( 3 ));\n-      mem [ q ] .hhfield .v.RH = r;\n-      mem [ r + 2 ] = mem [ p + 2 ];\n-      if ( mem [ p + 2 ] .hhfield .v.LH  == 0 )\n-      {\n-\tq = mem [ p + 2 ] .hhfield .v.RH + 1;\n-\twhile ( mem [ q ] .hhfield .v.RH != p ) q = mem [ q ] .hhfield .v.RH;\n-\tmem [ q ] .hhfield .v.RH = r;\n-      }\n-    }\n-  mem [ r ] .hhfield .u.B1  = mem [ p ] .hhfield .u.B1;\n-  mem [ r + 1 ] .hhfield .v.LH  = p;\n-\n-  q = foo((long) ( 3 ));\n-\n-  mem [ r + 1 ] .hhfield .v.RH = q;\n-  mem [ q + 2 ] .hhfield .v.RH = r;\n-\n-\n-  return(r);\n-}"}, {"sha": "1757f97600833e7e30bbbd96be83222c3fa6c1c3", "filename": "gcc/testsuite/gcc.c-torture/unsorted/xxs.c", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fb22b10a43a3ba600996e807f0e5085ab8d2f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fxxs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fb22b10a43a3ba600996e807f0e5085ab8d2f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fxxs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fxxs.c?ref=61fb22b10a43a3ba600996e807f0e5085ab8d2f9", "patch": "@@ -1,202 +0,0 @@\n-void *malloc ();\n-struct timeval {\n-\tlong\ttv_sec;\n-\tlong\ttv_usec;\n-};\n-struct timezone {\n-\tint\ttz_minuteswest;\n-\tint\ttz_dsttime;\n-};\n-struct\titimerval {\n-\tstruct\ttimeval it_interval;\n-\tstruct\ttimeval it_value;\n-};\n-typedef\tint\t\tsigset_t;\n-typedef\tunsigned int\tspeed_t;\n-typedef\tunsigned long\ttcflag_t;\n-typedef\tunsigned char\tcc_t;\n-typedef\tint\t\tpid_t;\n-typedef\tunsigned short\tmode_t;\n-typedef\tshort\t\tnlink_t;\n-typedef\tlong\t\tclock_t;\n-typedef\tlong\t\ttime_t;\n-typedef\tint\t\tsize_t;\n-typedef int\t\tptrdiff_t;\n-typedef\tunsigned short\twchar_t;\n-struct\ttm {\n-\tint\ttm_sec;\n-\tint\ttm_min;\n-\tint\ttm_hour;\n-\tint\ttm_mday;\n-\tint\ttm_mon;\n-\tint\ttm_year;\n-\tint\ttm_wday;\n-\tint\ttm_yday;\n-\tint\ttm_isdst;\n-\tchar\t*tm_zone;\n-\tlong\ttm_gmtoff;\n-};\n-extern\tstruct tm *gmtime(), *localtime();\n-extern\tchar *asctime(), *ctime();\n-extern\tvoid tzset(), tzsetwall();\n-extern  int dysize();\n-extern  time_t timelocal(), timegm();\n-struct\trusage {\n-\tstruct timeval ru_utime;\n-\tstruct timeval ru_stime;\n-\tlong\tru_maxrss;\n-\tlong\tru_ixrss;\n-\tlong\tru_idrss;\n-\tlong\tru_isrss;\n-\tlong\tru_minflt;\n-\tlong\tru_majflt;\n-\tlong\tru_nswap;\n-\tlong\tru_inblock;\n-\tlong\tru_oublock;\n-\tlong\tru_msgsnd;\n-\tlong\tru_msgrcv;\n-\tlong\tru_nsignals;\n-\tlong\tru_nvcsw;\n-\tlong\tru_nivcsw;\n-};\n-struct rlimit {\n-\tint\trlim_cur;\n-\tint\trlim_max;\n-};\n-unsigned long\n-cputime ()\n-{\n-    struct rusage rus;\n-    getrusage (0, &rus);\n-    return (((rus.ru_utime.tv_sec + rus.ru_stime.tv_sec) * 1000000) +\n-\t    rus.ru_utime.tv_usec + rus.ru_stime.tv_usec) / 1000;\n-}\n-int\n-do_assoc_test (mem, start, cc)\n-     register char *mem;\n-     register int start;\n-     register int cc;\n-{\n-  register int j;\n-  register int ind = start;\n-  register int x;\n-  for (j = 0x100000; --j >= 0; )\n-    {\n-      int x = ((volatile char *) mem)[ind];\n-      ind -= cc;\n-      if (ind < 0)\n-\tind = start;\n-    }\n-  return x;\n-}\n-int\n-determine_assoc (size)\n-{\n-  register char *mem = malloc (size * (1 << 5 ));\n-  int cc = size;\n-  int lbsets;\n-  int times[5  + 1];\n-  for (lbsets = 0; lbsets <= 5; lbsets++)\n-    {\n-      int t = cputime ();\n-      do_assoc_test (mem, (cc << lbsets) - cc, cc);\n-      t = cputime () - t;\n-      times[lbsets] = t;\n-      printf (\"sets = %2u: %u ms\\n\", 1 << lbsets, t);\n-    }\n-  free (mem);\n-  {\n-    int max = 1000 * times[1] / times[0];\n-    int maxindex = 0;\n-    int min = 1000 * times[1] / times[0];\n-    int minindex = 0;\n-    for (lbsets = 1; lbsets < 4; lbsets++)\n-      {\n-\tint x = 1000 * times[lbsets + 1] / times[lbsets];\n-\tif (x > max)\n-\t  {\n-\t    max = x;\n-\t    maxindex = lbsets;\n-\t  }\n-\tif (x < min)\n-\t  {\n-\t    min = x;\n-\t    minindex = lbsets;\n-\t  }\n-      }\n-    if (min * 100 > max * 75)\n-      return 0;\n-    return 1 << maxindex;\n-  }\n-}\n-do_size_test(mem, size, reps)\n-     register int *mem;\n-     register int size;\n-     register int reps;\n-{\n-  register int j, i, x;\n-  mem += size;\n-  for (j = reps; --j >= 0;)\n-    for (i = -size; i < 0; i++)\n-      x = ((volatile int *) mem)[i];\n-}\n-int\n-determine_size()\n-{\n-  register int *mem = malloc (1 << 20 );\n-  int lbsize;\n-  int times[20 ];\n-  for (lbsize = 12; lbsize < 20; lbsize++)\n-    {\n-      int t = cputime ();\n-      do_size_test (mem, (1 << lbsize) / sizeof (int) - 64,\n-\t\t    0x1000000  >> lbsize);\n-      t = cputime () - t;\n-      times[lbsize] = t;\n-      printf (\"size = %2u: %u ms\\n\", 1 << lbsize, t);\n-    }\n-  free (mem);\n-  {\n-    int max = 1000 * times[12  + 1] / times[12 ];\n-    int maxindex = 0;\n-    int min = 1000 * times[12  + 1] / times[12 ];\n-    int minindex = 0;\n-    for (lbsize = 12; lbsize < 20  - 1; lbsize++)\n-      {\n-\tint x = 1000 * times[lbsize + 1] / times[lbsize];\n-\tif (x > max)\n-\t  {\n-\t    max = x;\n-\t    maxindex = lbsize;\n-\t  }\n-\tif (x < min)\n-\t  {\n-\t    min = x;\n-\t    minindex = lbsize;\n-\t  }\n-      }\n-    if (min * 100 > max * 75)\n-      return 0;\n-    return 1 << maxindex;\n-  }\n-}\n-int\n-main()\n-{\n-  int size, assoc;\n-  size = determine_size();\n-  if (size)\n-    printf (\"I guess this cache is %d bytes.\\n\", size);\n-  else\n-    printf (\"I can't determine the size from this run.\\n\");\n-  if (size == 0)\n-    size = 65536;\n-  assoc = determine_assoc(size);\n-  if (assoc > 1)\n-    printf (\"I guess this cache is %d-way set associative.\\n\", assoc);\n-  else if (assoc == 1)\n-    printf (\"I guess this cache is direct mapped.\\n\");\n-  else\n-    printf (\"I can't determine the associativity from this run.\\n\");\n-  return 0;\n-}"}]}