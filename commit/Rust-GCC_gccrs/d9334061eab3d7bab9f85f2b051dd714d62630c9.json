{"sha": "d9334061eab3d7bab9f85f2b051dd714d62630c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzMzQwNjFlYWIzZDdiYWI5Zjg1ZjJiMDUxZGQ3MTRkNjI2MzBjOQ==", "commit": {"author": {"name": "Giuseppe Scrivano", "email": "gscrivano@gnu.org", "date": "2009-09-21T16:41:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-09-21T16:41:58Z"}, "message": "tree-tailcall.c (process_assignment): Don't check if a multiplication or an addition are already present.\n\n2009-09-21  Giuseppe Scrivano <gscrivano@gnu.org>\n\n\t* tree-tailcall.c (process_assignment): Don't check if a multiplication\n\tor an addition are already present.\n\t(find_tail_calls): Combine multiple additions and multiplications.\n\t(adjust_accumulator_values): Emit accumulators.\n\ntestsuite:\n2009-09-21  Giuseppe Scrivano <gscrivano@gnu.org>\n\n\t* gcc.dg/tree-ssa/tailrecursion-6.c: New file.\n\nFrom-SVN: r151935", "tree": {"sha": "d4a8058faf26a3a540090cddd356cfa068c5d8bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a8058faf26a3a540090cddd356cfa068c5d8bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9334061eab3d7bab9f85f2b051dd714d62630c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9334061eab3d7bab9f85f2b051dd714d62630c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9334061eab3d7bab9f85f2b051dd714d62630c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9334061eab3d7bab9f85f2b051dd714d62630c9/comments", "author": {"login": "giuseppe", "id": 67430, "node_id": "MDQ6VXNlcjY3NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/67430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giuseppe", "html_url": "https://github.com/giuseppe", "followers_url": "https://api.github.com/users/giuseppe/followers", "following_url": "https://api.github.com/users/giuseppe/following{/other_user}", "gists_url": "https://api.github.com/users/giuseppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/giuseppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giuseppe/subscriptions", "organizations_url": "https://api.github.com/users/giuseppe/orgs", "repos_url": "https://api.github.com/users/giuseppe/repos", "events_url": "https://api.github.com/users/giuseppe/events{/privacy}", "received_events_url": "https://api.github.com/users/giuseppe/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "334738b440a3f7eb2b1b488c2f4fbac88bd85ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334738b440a3f7eb2b1b488c2f4fbac88bd85ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334738b440a3f7eb2b1b488c2f4fbac88bd85ca9"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "f7d6ceefe4d5ce1ff0666f64e4b4d2df0e0f44a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9334061eab3d7bab9f85f2b051dd714d62630c9", "patch": "@@ -1,3 +1,10 @@\n+2009-09-21  Giuseppe Scrivano <gscrivano@gnu.org>\n+\n+\t* tree-tailcall.c (process_assignment): Don't check if a multiplication\n+\tor an addition are already present.\n+\t(find_tail_calls): Combine multiple additions and multiplications.\n+\t(adjust_accumulator_values): Emit accumulators.\n+\n 2009-09-21  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386.c (ix86_expand_epilogue): Adjust offset for"}, {"sha": "8bf9349fd7369e77732dcea150742dcf139d4829", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9334061eab3d7bab9f85f2b051dd714d62630c9", "patch": "@@ -1,3 +1,7 @@\n+2009-09-21  Giuseppe Scrivano <gscrivano@gnu.org>\n+\n+\t* gcc.dg/tree-ssa/tailrecursion-6.c: New file.\n+\n 2009-09-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41421"}, {"sha": "37942752aef65899adeb5dec109e0b56cf41782b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-6.c?ref=d9334061eab3d7bab9f85f2b051dd714d62630c9", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -foptimize-sibling-calls -fdump-tree-tailr-details\" } */\n+int\n+foo (int a)\n+{\n+\tif (a)\n+\t\treturn a * (2 * (foo (a - 1))) + a + 1;\n+\telse\n+\t\treturn 0;\n+}\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr1\"} } */\n+/* { dg-final { cleanup-tree-dump \"tailr\\[1-2\\]\" } } */"}, {"sha": "c29bfc304c5cfbb10b2d9cf677afe0a790065ecb", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9334061eab3d7bab9f85f2b051dd714d62630c9/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=d9334061eab3d7bab9f85f2b051dd714d62630c9", "patch": "@@ -326,22 +326,11 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n   switch (code)\n     {\n     case PLUS_EXPR:\n-      /* There should be no previous addition.  TODO -- it should be fairly\n-\t straightforward to lift this restriction -- just allow storing\n-\t more complicated expressions in *A, and gimplify it in\n-\t adjust_accumulator_values.  */\n-      if (*a)\n-\treturn false;\n       *a = non_ass_var;\n       *ass_var = dest;\n       return true;\n \n     case MULT_EXPR:\n-      /* Similar remark applies here.  Handling multiplication after addition\n-\t is just slightly more complicated -- we need to multiply both *A and\n-\t *M.  */\n-      if (*a || *m)\n-\treturn false;\n       *m = non_ass_var;\n       *ass_var = dest;\n       return true;\n@@ -484,6 +473,8 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   agsi = gsi;\n   while (1)\n     {\n+      tree tmp_a = NULL_TREE;\n+      tree tmp_m = NULL_TREE;\n       gsi_next (&agsi);\n \n       while (gsi_end_p (agsi))\n@@ -508,8 +499,26 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \treturn;\n \n       /* This is a gimple assign. */\n-      if (! process_assignment (stmt, gsi, &m, &a, &ass_var))\n+      if (! process_assignment (stmt, gsi, &tmp_m, &tmp_a, &ass_var))\n \treturn;\n+\n+      if (tmp_a)\n+\t{\n+\t  if (a)\n+\t    a = fold_build2 (PLUS_EXPR, TREE_TYPE (tmp_a), a, tmp_a);\n+\t  else\n+\t    a = tmp_a;\n+\t}\n+      if (tmp_m)\n+\t{\n+\t  if (m)\n+\t    m = fold_build2 (MULT_EXPR, TREE_TYPE (tmp_m), m, tmp_m);\n+\t  else\n+\t    m = tmp_m;\n+\n+\t  if (a)\n+\t    a = fold_build2 (MULT_EXPR, TREE_TYPE (tmp_m), a, tmp_m);\n+\t}\n     }\n \n   /* See if this is a tail call we can handle.  */\n@@ -605,8 +614,15 @@ update_accumulator_with_ops (enum tree_code code, tree acc, tree op1,\n static void\n adjust_accumulator_values (gimple_stmt_iterator gsi, tree m, tree a, edge back)\n {\n-  tree var, a_acc_arg = a_acc, m_acc_arg = m_acc;\n+  tree var, a_acc_arg, m_acc_arg;\n+\n+  if (m)\n+    m = force_gimple_operand_gsi (&gsi, m, true, NULL, true, GSI_SAME_STMT);\n+  if (a)\n+    a = force_gimple_operand_gsi (&gsi, a, true, NULL, true, GSI_SAME_STMT);\n \n+  a_acc_arg = a_acc;\n+  m_acc_arg = m_acc;\n   if (a)\n     {\n       if (m_acc)"}]}