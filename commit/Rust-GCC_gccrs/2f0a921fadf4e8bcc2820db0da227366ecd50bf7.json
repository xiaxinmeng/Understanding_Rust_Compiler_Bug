{"sha": "2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwYTkyMWZhZGY0ZThiY2MyODIwZGIwZGEyMjczNjZlY2Q1MGJmNw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-12-12T10:03:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:03:16Z"}, "message": "[Ada] Broken privacy on Controlled type extensions\n\n2019-12-12  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_One_Call): Add condition to check for\n\tincorrectly resolved hidden controlled primitives.\n\nFrom-SVN: r279297", "tree": {"sha": "db15241aa01ccb45b31015adf51b81c4cde81b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db15241aa01ccb45b31015adf51b81c4cde81b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0a921fadf4e8bcc2820db0da227366ecd50bf7/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bcf29692fd5ee57cc857157912e9ef492205075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcf29692fd5ee57cc857157912e9ef492205075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcf29692fd5ee57cc857157912e9ef492205075"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "7c7738229efd845e9f0291f2ff651bf0aa4c443c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0a921fadf4e8bcc2820db0da227366ecd50bf7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0a921fadf4e8bcc2820db0da227366ecd50bf7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "patch": "@@ -1,3 +1,8 @@\n+2019-12-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_One_Call): Add condition to check for\n+\tincorrectly resolved hidden controlled primitives.\n+\n 2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb: Fix processing of standard predefined operators."}, {"sha": "81c5bfd3a4634f72061c27354683a60ccefc6c68", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0a921fadf4e8bcc2820db0da227366ecd50bf7/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0a921fadf4e8bcc2820db0da227366ecd50bf7/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2f0a921fadf4e8bcc2820db0da227366ecd50bf7", "patch": "@@ -3249,6 +3249,7 @@ package body Sem_Ch4 is\n       --  is already known to be compatible, and because this may be an\n       --  indexing of a call with default parameters.\n \n+      First_Form  : Entity_Id;\n       Formal      : Entity_Id;\n       Actual      : Node_Id;\n       Is_Indexed  : Boolean := False;\n@@ -3581,8 +3582,9 @@ package body Sem_Ch4 is\n          --  Normalize_Actuals has chained the named associations in the\n          --  correct order of the formals.\n \n-         Actual := First_Actual (N);\n-         Formal := First_Formal (Nam);\n+         Actual     := First_Actual (N);\n+         Formal     := First_Formal (Nam);\n+         First_Form := Formal;\n \n          --  If we are analyzing a call rewritten from object notation, skip\n          --  first actual, which may be rewritten later as an explicit\n@@ -3742,6 +3744,54 @@ package body Sem_Ch4 is\n             end if;\n          end loop;\n \n+         --  Due to our current model of controlled type expansion we may\n+         --  have resolved a user call to a non-visible controlled primitive\n+         --  since these inherited subprograms may be generated in the current\n+         --  scope. This is a side-effect of the need for the expander to be\n+         --  able to resolve internally generated calls.\n+\n+         --  Specifically, the issue appears when predefined controlled\n+         --  operations get called on a type extension whose parent is a\n+         --  private extension completed with a controlled extension - see\n+         --  below:\n+\n+         --  package X is\n+         --     type Par_Typ is tagged private;\n+         --  private\n+         --     type Par_Typ is new Controlled with null record;\n+         --  end;\n+         --  ...\n+         --  procedure Main is\n+         --     type Ext_Typ is new Par_Typ with null record;\n+         --     Obj : Ext_Typ;\n+         --  begin\n+         --     Finalize (Obj); --  Will improperly resolve\n+         --  end;\n+\n+         --  To avoid breaking privacy, Is_Hidden gets set elsewhere on such\n+         --  primitives, but we still need to verify that Nam is indeed a\n+         --  controlled subprogram. So, we do that here and issue the\n+         --  appropriate error.\n+\n+         if Is_Hidden (Nam)\n+           and then not In_Instance\n+           and then not Comes_From_Source (Nam)\n+           and then Comes_From_Source (N)\n+\n+           --  Verify Nam is a controlled primitive\n+\n+           and then Nam_In (Chars (Nam), Name_Adjust,\n+                                         Name_Finalize,\n+                                         Name_Initialize)\n+           and then Ekind (Nam) = E_Procedure\n+           and then Is_Controlled (Etype (First_Form))\n+           and then No (Next_Formal (First_Form))\n+         then\n+            Error_Msg_Node_2 := Etype (First_Form);\n+            Error_Msg_NE (\"call to non-visible controlled primitive & on type\"\n+                            & \" &\", N, Nam);\n+         end if;\n+\n          --  On exit, all actuals match\n \n          Indicate_Name_And_Type;"}]}