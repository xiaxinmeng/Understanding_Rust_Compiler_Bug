{"sha": "00631022d83c44777b37f168831eb64142737cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2MzEwMjJkODNjNDQ3NzdiMzdmMTY4ODMxZWI2NDE0MjczN2NiZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-30T21:36:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-30T21:36:24Z"}, "message": "re PR c++/71349 (Combined async target clause parsing issues)\n\n\tPR c++/71349\n\t* c-parser.c (c_parser_omp_for): Don't disallow nowait clause\n\twhen combined with target construct.\n\n\t* parser.c (cp_parser_omp_for): Don't disallow nowait clause\n\twhen combined with target construct.\n\t(cp_parser_omp_parallel): Pass cclauses == NULL as last argument\n\tto cp_parser_omp_all_clauses.\n\n\t* c-omp.c (c_omp_split_clauses): Put OMP_CLAUSE_DEPEND to\n\tC_OMP_CLAUSE_SPLIT_TARGET.  Put OMP_CLAUSE_NOWAIT to\n\tC_OMP_CLAUSE_SPLIT_TARGET if combined with target construct,\n\tinstead of C_OMP_CLAUSE_SPLIT_FOR.\n\n\t* c-c++-common/gomp/clauses-1.c (bar): Add dd argument.  Add\n\tnowait depend(inout: dd[0]) clauses where permitted.\n\nFrom-SVN: r236900", "tree": {"sha": "b2bd7a6c98062669b723c17a2f37e5aaae9ab967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2bd7a6c98062669b723c17a2f37e5aaae9ab967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00631022d83c44777b37f168831eb64142737cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00631022d83c44777b37f168831eb64142737cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00631022d83c44777b37f168831eb64142737cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00631022d83c44777b37f168831eb64142737cbe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8743fc5e5d6959e82d0d5d3ef03c36987921423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8743fc5e5d6959e82d0d5d3ef03c36987921423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8743fc5e5d6959e82d0d5d3ef03c36987921423"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "f2f98c5c863e3e8af71cdb13f3cab41e095ba4d8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -1,3 +1,11 @@\n+2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71349\n+\t* c-omp.c (c_omp_split_clauses): Put OMP_CLAUSE_DEPEND to\n+\tC_OMP_CLAUSE_SPLIT_TARGET.  Put OMP_CLAUSE_NOWAIT to\n+\tC_OMP_CLAUSE_SPLIT_TARGET if combined with target construct,\n+\tinstead of C_OMP_CLAUSE_SPLIT_FOR.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70434"}, {"sha": "1691c40f11a661cafb8fbe53a4689be64d13ad60", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -983,6 +983,7 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \tcase OMP_CLAUSE_MAP:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_DEPEND:\n \t  s = C_OMP_CLAUSE_SPLIT_TARGET;\n \t  break;\n \tcase OMP_CLAUSE_NUM_TEAMS:\n@@ -998,7 +999,6 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t  s = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t  break;\n \tcase OMP_CLAUSE_ORDERED:\n-\tcase OMP_CLAUSE_NOWAIT:\n \t  s = C_OMP_CLAUSE_SPLIT_FOR;\n \t  break;\n \tcase OMP_CLAUSE_SCHEDULE:\n@@ -1333,6 +1333,18 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t  else\n \t    s = C_OMP_CLAUSE_SPLIT_FOR;\n \t  break;\n+\tcase OMP_CLAUSE_NOWAIT:\n+\t  /* Nowait clause is allowed on target, for and sections, but\n+\t     is not allowed on parallel for or parallel sections.  Therefore,\n+\t     put it on target construct if present, because that can only\n+\t     be combined with parallel for{, simd} and not with for{, simd},\n+\t     otherwise to the worksharing construct.  */\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP))\n+\t      != 0)\n+\t    s = C_OMP_CLAUSE_SPLIT_TARGET;\n+\t  else\n+\t    s = C_OMP_CLAUSE_SPLIT_FOR;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "d2a8947d1b39700801521792eb0d37b260659d77", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -1,3 +1,9 @@\n+2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71349\n+\t* c-parser.c (c_parser_omp_for): Don't disallow nowait clause\n+\twhen combined with target construct.\n+\n 2016-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_schedule): Warn if"}, {"sha": "bca8653f8d8500dc2564fdc94af5dc8f04b178aa", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -15113,7 +15113,9 @@ c_parser_omp_for (location_t loc, c_parser *parser,\n \n   strcat (p_name, \" for\");\n   mask |= OMP_FOR_CLAUSE_MASK;\n-  if (cclauses)\n+  /* parallel for{, simd} disallows nowait clause, but for\n+     target {teams distribute ,}parallel for{, simd} it should be accepted.  */\n+  if (cclauses && (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)) == 0)\n     mask &= ~(OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT);\n   /* Composite distribute parallel for{, simd} disallows ordered clause.  */\n   if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)"}, {"sha": "1e4ca0c347180b5acd3a30fb58e6273fc0d29f41", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -1,3 +1,11 @@\n+2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71349\n+\t* parser.c (cp_parser_omp_for): Don't disallow nowait clause\n+\twhen combined with target construct.\n+\t(cp_parser_omp_parallel): Pass cclauses == NULL as last argument\n+\tto cp_parser_omp_all_clauses.\n+\n 2016-05-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71238"}, {"sha": "29a1b804e73d7c3a623b5db52f6912f06907badf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -33919,7 +33919,9 @@ cp_parser_omp_for (cp_parser *parser, cp_token *pragma_tok,\n \n   strcat (p_name, \" for\");\n   mask |= OMP_FOR_CLAUSE_MASK;\n-  if (cclauses)\n+  /* parallel for{, simd} disallows nowait clause, but for\n+     target {teams distribute ,}parallel for{, simd} it should be accepted.  */\n+  if (cclauses && (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)) == 0)\n     mask &= ~(OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT);\n   /* Composite distribute parallel for{, simd} disallows ordered clause.  */\n   if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)\n@@ -34258,7 +34260,8 @@ cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok,\n \t}\n     }\n \n-  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok);\n+  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,\n+\t\t\t\t       cclauses == NULL);\n   if (cclauses)\n     {\n       cp_omp_split_clauses (loc, OMP_PARALLEL, mask, clauses, cclauses);"}, {"sha": "d9ef789ba1f53dd3a00954ceca3fbbc9c5bbbf87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -1,3 +1,9 @@\n+2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71349\n+\t* c-c++-common/gomp/clauses-1.c (bar): Add dd argument.  Add\n+\tnowait depend(inout: dd[0]) clauses where permitted.\n+\n 2016-05-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71238"}, {"sha": "fe90c2428e0447d8bf482cefdd6def52fee197c8", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-1.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00631022d83c44777b37f168831eb64142737cbe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00631022d83c44777b37f168831eb64142737cbe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c?ref=00631022d83c44777b37f168831eb64142737cbe", "patch": "@@ -34,7 +34,7 @@ foo (int d, int m, int i1, int i2, int p, int *idp, int s,\n \n void\n bar (int d, int m, int i1, int i2, int p, int *idp, int s,\n-     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q)\n+     int nte, int tl, int nth, int g, int nta, int fi, int pp, int *q, int *dd)\n {\n   #pragma omp for simd \\\n     private (p) firstprivate (f) lastprivate (l) linear (ll:1) reduction(+:r) schedule(static, 4) collapse(1) nowait \\\n@@ -63,37 +63,38 @@ bar (int d, int m, int i1, int i2, int p, int *idp, int s,\n   }\n   #pragma omp target parallel \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread)\n+    if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n+    nowait depend(inout: dd[0])\n     ;\n   #pragma omp target parallel for \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n-    lastprivate (l) linear (ll:1) ordered schedule(static, 4) collapse(1)\n+    lastprivate (l) linear (ll:1) ordered schedule(static, 4) collapse(1) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target parallel for simd \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) linear (ll:1) schedule(static, 4) collapse(1) \\\n-    safelen(8) simdlen(4) aligned(q: 32)\n+    safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0])\n     ;\n   #pragma omp target teams distribute \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n-    collapse(1) dist_schedule(static, 16)\n+    collapse(1) dist_schedule(static, 16) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ;\n   #pragma omp target teams distribute parallel for \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n-    lastprivate (l) schedule(static, 4)\n+    lastprivate (l) schedule(static, 4) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams distribute parallel for simd \\\n@@ -102,19 +103,20 @@ bar (int d, int m, int i1, int i2, int p, int *idp, int s,\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) \\\n-    safelen(8) simdlen(4) aligned(q: 32)\n+    safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams distribute simd \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) \\\n-    safelen(8) simdlen(4) aligned(q: 32)\n+    safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target simd \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    safelen(8) simdlen(4) lastprivate (l) linear(ll: 1) aligned(q: 32) reduction(+:r)\n+    safelen(8) simdlen(4) lastprivate (l) linear(ll: 1) aligned(q: 32) reduction(+:r) \\\n+     nowait depend(inout: dd[0])\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp taskloop simd \\\n@@ -128,7 +130,7 @@ bar (int d, int m, int i1, int i2, int p, int *idp, int s,\n     safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(+:r)\n   for (int i = 0; i < 64; i++)\n     ll++;\n-  #pragma omp target\n+  #pragma omp target nowait depend(inout: dd[0])\n   #pragma omp teams distribute \\\n     private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16)"}]}