{"sha": "24cb156d237c740c4e68ac5399efda6bae00482b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjYjE1NmQyMzdjNzQwYzRlNjhhYzUzOTllZmRhNmJhZTAwNDgyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T10:16:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T10:16:59Z"}, "message": "[multiple changes]\n\n2012-07-17  Vincent Pucci  <pucci@adacore.com>\n\n\t* gnat_ugn.texi: GNAT dimensionality checking\n\tdocumentation updated with System.Dim.Mks modifications.\n\n2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb: sloc of array init_proc is sloc of type declaration.\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (get_call_site_action_for): Remove useless init\n\texpression for p.\n\t(get_action_description_for): Do not overwrite action->kind.\n\n2012-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Add local variables Attr\n\tand Conversion_Added.  Add local constant Typ.\n\tRetrieve the original attribute after the arithmetic check\n\tmachinery has modified the node. Add a conversion to the target\n\ttype when the prefix of attribute Max_Size_In_Storage_Elements\n\tis a controlled type.\n\n2012-07-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch6.adb (Expand_Inlined_Call): For each actual parameter\n\tof mode 'out' or 'in out' that denotes an entity, reset\n\tLast_Assignment on the entity so that any assignments to the\n\tcorresponding formal in the inlining will not trigger spurious\n\twarnings about overwriting assignments.\n\nFrom-SVN: r189570", "tree": {"sha": "bb226c2fdd284b0e5fdb8ba483fd2147154cd2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb226c2fdd284b0e5fdb8ba483fd2147154cd2c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24cb156d237c740c4e68ac5399efda6bae00482b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cb156d237c740c4e68ac5399efda6bae00482b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24cb156d237c740c4e68ac5399efda6bae00482b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cb156d237c740c4e68ac5399efda6bae00482b/comments", "author": null, "committer": null, "parents": [{"sha": "79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56"}], "stats": {"total": 101, "additions": 77, "deletions": 24}, "files": [{"sha": "69c77a8b3840d182b962d16de6f4a0fe3924c02a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=24cb156d237c740c4e68ac5399efda6bae00482b", "patch": "@@ -3201,9 +3201,26 @@ package body Exp_Attr is\n       -- Max_Size_In_Storage_Elements --\n       ----------------------------------\n \n-      when Attribute_Max_Size_In_Storage_Elements =>\n+      when Attribute_Max_Size_In_Storage_Elements => declare\n+         Typ  : constant Entity_Id := Etype (N);\n+         Attr : Node_Id;\n+\n+         Conversion_Added : Boolean := False;\n+         --  A flag which tracks whether the original attribute has been\n+         --  wrapped inside a type conversion.\n+\n+      begin\n          Apply_Universal_Integer_Attribute_Checks (N);\n \n+         --  The universal integer check may sometimes add a type conversion,\n+         --  retrieve the original attribute reference from the expression.\n+\n+         Attr := N;\n+         if Nkind (Attr) = N_Type_Conversion then\n+            Attr := Expression (Attr);\n+            Conversion_Added := True;\n+         end if;\n+\n          --  Heap-allocated controlled objects contain two extra pointers which\n          --  are not part of the actual type. Transform the attribute reference\n          --  into a runtime expression to add the size of the hidden header.\n@@ -3212,20 +3229,20 @@ package body Exp_Attr is\n          --  two pointers are already present in the type.\n \n          if VM_Target = No_VM\n-           and then Nkind (N) = N_Attribute_Reference\n+           and then Nkind (Attr) = N_Attribute_Reference\n            and then Needs_Finalization (Ptyp)\n-           and then not Header_Size_Added (N)\n+           and then not Header_Size_Added (Attr)\n          then\n-            Set_Header_Size_Added (N);\n+            Set_Header_Size_Added (Attr);\n \n             --  Generate:\n             --    P'Max_Size_In_Storage_Elements +\n             --      Universal_Integer\n             --        (Header_Size_With_Padding (Ptyp'Alignment))\n \n-            Rewrite (N,\n+            Rewrite (Attr,\n               Make_Op_Add (Loc,\n-                Left_Opnd  => Relocate_Node (N),\n+                Left_Opnd  => Relocate_Node (Attr),\n                 Right_Opnd =>\n                   Convert_To (Universal_Integer,\n                     Make_Function_Call (Loc,\n@@ -3239,9 +3256,19 @@ package body Exp_Attr is\n                             New_Reference_To (Ptyp, Loc),\n                           Attribute_Name => Name_Alignment))))));\n \n-            Analyze (N);\n+            --  Add a conversion to the target type\n+\n+            if not Conversion_Added then\n+               Rewrite (Attr,\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark => New_Reference_To (Typ, Loc),\n+                   Expression   => Relocate_Node (Attr)));\n+            end if;\n+\n+            Analyze (Attr);\n             return;\n          end if;\n+      end;\n \n       --------------------\n       -- Mechanism_Code --"}, {"sha": "91c883322abe0b1b5d500310578f237fce73aa3c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=24cb156d237c740c4e68ac5399efda6bae00482b", "patch": "@@ -518,11 +518,11 @@ package body Exp_Ch3 is\n    ---------------------------\n \n    procedure Build_Array_Init_Proc (A_Type : Entity_Id; Nod : Node_Id) is\n-      Loc              : constant Source_Ptr := Sloc (Nod);\n       Comp_Type        : constant Entity_Id  := Component_Type (A_Type);\n       Body_Stmts       : List_Id;\n       Has_Default_Init : Boolean;\n       Index_List       : List_Id;\n+      Loc              : Source_Ptr;\n       Proc_Id          : Entity_Id;\n \n       function Init_Component return List_Id;\n@@ -631,6 +631,19 @@ package body Exp_Ch3 is\n    --  Start of processing for Build_Array_Init_Proc\n \n    begin\n+      --  The init proc is created when analyzing the freeze node for the type,\n+      --  but it properly belongs with the array type declaration. However, if\n+      --  the freeze node is for a subtype of a type declared in another unit\n+      --  it seems preferable to use the freeze node as the source location of\n+      --  of the init.proc. In any case this is preferable for gcov usage, and\n+      --  the Sloc is not otherwise used by the compiler.\n+\n+      if In_Open_Scopes (Scope (A_Type)) then\n+         Loc := Sloc (A_Type);\n+      else\n+         Loc := Sloc (Nod);\n+      end if;\n+\n       --  Nothing to generate in the following cases:\n \n       --    1. Initialization is suppressed for the type"}, {"sha": "bbf212698a7eac5e7d9877bb8ab54f26992cb03b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=24cb156d237c740c4e68ac5399efda6bae00482b", "patch": "@@ -4846,6 +4846,16 @@ package body Exp_Ch6 is\n             return;\n          end if;\n \n+         --  Reset Last_Assignment for any parameters of mode out or in out, to\n+         --  prevent spurious warnings about overwriting for assignments to the\n+         --  formal in the inlined code.\n+\n+         if Is_Entity_Name (A)\n+           and then Ekind (F) /= E_In_Parameter\n+         then\n+            Set_Last_Assignment (Entity (A), Empty);\n+         end if;\n+\n          --  If the argument may be a controlling argument in a call within\n          --  the inlined body, we must preserve its classwide nature to insure\n          --  that dynamic dispatching take place subsequently. If the formal"}, {"sha": "c1ea83b436b347de342daca57f5eb2aa6fa70503", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=24cb156d237c740c4e68ac5399efda6bae00482b", "patch": "@@ -18684,13 +18684,13 @@ package, in file s-dimmks.ads.\n    type Mks_Type is new Long_Long_Float\n      with\n       Dimension_System => (\n-        (Meter,    'm'),\n-        (Kilogram, \"kg\"),\n-        (Second,   's'),\n-        (Ampere,   'A'),\n-        (Kelvin,   'K'),\n-        (Mole,     \"mol\"),\n-        (Candela,  \"cd\"));\n+        (Unit_Name => Meter,    Unit_Symbol => 'm',   Dim_Symbol => 'L'),\n+        (Unit_Name => Kilogram, Unit_Symbol => \"kg\",  Dim_Symbol => 'M'),\n+        (Unit_Name => Second,   Unit_Symbol => 's',   Dim_Symbol => 'T'),\n+        (Unit_Name => Ampere,   Unit_Symbol => 'A',   Dim_Symbol => 'I'),\n+        (Unit_Name => Kelvin,   Unit_Symbol => 'K',   Dim_Symbol => \"Theta\"),\n+        (Unit_Name => Mole,     Unit_Symbol => \"mol\", Dim_Symbol => 'N'),\n+        (Unit_Name => Candela,  Unit_Symbol => \"cd\",  Dim_Symbol => 'J'));\n @end smallexample\n \n @noindent\n@@ -18699,8 +18699,8 @@ conventional units. For example:\n @smallexample @c ada\n    subtype Length is Mks_Type\n      with\n-      Dimension => ('m',\n-        Meter =>  1,\n+      Dimension => (Symbol => 'm',\n+        Meter  => 1,\n         others => 0);\n @end smallexample\n @noindent\n@@ -18712,10 +18712,10 @@ The package also defines conventional names for values of each unit, for\n example:\n \n @smallexample @c ada\n-   m   : constant Length                    := 1.0;\n-   kg  : constant Mass                      := 1.0;\n-   s   : constant Time                      := 1.0;\n-   A   : constant Electric_Current          := 1.0;\n+   m   : constant Length           := 1.0;\n+   kg  : constant Mass             := 1.0;\n+   s   : constant Time             := 1.0;\n+   A   : constant Electric_Current := 1.0;\n @end smallexample\n \n @noindent"}, {"sha": "4da4bd286e50cd79bbbd1c995a266355eae8c786", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24cb156d237c740c4e68ac5399efda6bae00482b/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=24cb156d237c740c4e68ac5399efda6bae00482b", "patch": "@@ -710,7 +710,7 @@ get_call_site_action_for (_Unwind_Ptr call_site,\n   else\n     {\n       _uleb128_t cs_lp, cs_action;\n-      const unsigned char *p = region->call_site_table;\n+      const unsigned char *p;\n \n       /* Let the caller know there may be an action to take, but let it\n \t determine the kind.  */\n@@ -947,13 +947,16 @@ get_action_description_for (_Unwind_Ptr ip,\n                  passed (to follow the ABI).  */\n               if (!(uw_phase & _UA_FORCE_UNWIND))\n                 {\n+\t\t  enum action_kind act;\n+\n                   /* See if the filter we have is for an exception which\n                      matches the one we are propagating.  */\n                   _Unwind_Ptr choice = get_ttype_entry_for (region, ar_filter);\n \n-\t\t  action->kind = is_handled_by (choice, gnat_exception);\n-                  if (action->kind != nothing)\n+\t\t  act = is_handled_by (choice, gnat_exception);\n+                  if (act != nothing)\n                     {\n+\t\t      action->kind = act;\n                       action->ttype_filter = ar_filter;\n                       return;\n                     }"}]}