{"sha": "ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkY2Q1NjA5NGNhZGM3YmQzYzE4YTBlZGQxOWYwMGQ2NzBlMGQ5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-04T14:47:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-04T14:47:40Z"}, "message": "Reduce accumulated garbage in constexpr evaluation.\n\nWe want to evaluate the arguments to a call before looking into the cache so\nthat we have constant values, but if we then find the call in the cache we\nend up with a TREE_LIST that we don't end up using; in highly recursive\nconstexpr evaluation this ends up being a large proportion of the garbage\ngenerated.\n\nThe cxx_eval_increment_expression hunk is less important, but it's an easy\ntweak; we only use the MODIFY_EXPR to evaluate it, so after that it's\ngarbage.\n\n\t* constexpr.c (cxx_eval_call_expression): ggc_free any bindings we\n\tdon't save.\n\t(cxx_eval_increment_expression): ggc_free the MODIFY_EXPR after\n\tevaluating it.\n\nFrom-SVN: r271909", "tree": {"sha": "6c44b508c28bc1e7f1f7141324f204af83dcb7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c44b508c28bc1e7f1f7141324f204af83dcb7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c790e3ece633d7e566f15b4df389ad8aefd9b78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c790e3ece633d7e566f15b4df389ad8aefd9b78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c790e3ece633d7e566f15b4df389ad8aefd9b78a"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "efa79f3ad35432047f6acf188b5534d7ec0e0f75", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "patch": "@@ -1,3 +1,11 @@\n+2019-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\tReduce accumulated garbage in constexpr evaluation.\n+\t* constexpr.c (cxx_eval_call_expression): ggc_free any bindings we\n+\tdon't save.\n+\t(cxx_eval_increment_expression): ggc_free the MODIFY_EXPR after\n+\tevaluating it.\n+\n 2019-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (CP_OMP_CLAUSE_INFO): Allow for any clauses up to _condvar_"}, {"sha": "84c983428357b25d5043972726c034b4458ea012", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ecdcd56094cadc7bd3c18a0edd19f00d670e0d9b", "patch": "@@ -1733,6 +1733,29 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   bool non_constant_args = false;\n   cxx_bind_parameters_in_call (ctx, t, &new_call,\n \t\t\t       non_constant_p, overflow_p, &non_constant_args);\n+\n+  /* We build up the bindings list before we know whether we already have this\n+     call cached.  If we don't end up saving these bindings, ggc_free them when\n+     this function exits.  */\n+  struct free_bindings\n+  {\n+    tree &bindings;\n+    bool do_free;\n+    free_bindings (tree &b): bindings (b), do_free(true) { }\n+    void preserve () { do_free = false; }\n+    ~free_bindings () {\n+      if (do_free)\n+\t{\n+\t  while (bindings)\n+\t    {\n+\t      tree b = bindings;\n+\t      bindings = TREE_CHAIN (bindings);\n+\t      ggc_free (b);\n+\t    }\n+\t}\n+    }\n+  } fb (new_call.bindings);\n+\n   if (*non_constant_p)\n     return t;\n \n@@ -1760,6 +1783,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t     slot can move in the call to cxx_eval_builtin_function_call.  */\n \t  *slot = entry = ggc_alloc<constexpr_call> ();\n \t  *entry = new_call;\n+\t  fb.preserve ();\n \t}\n       /* Calls that are in progress have their result set to NULL,\n \t so that we can detect circular dependencies.  */\n@@ -4002,6 +4026,7 @@ cxx_eval_increment_expression (const constexpr_ctx *ctx, tree t,\n   tree store = build2 (MODIFY_EXPR, type, op, mod);\n   cxx_eval_constant_expression (ctx, store,\n \t\t\t\ttrue, non_constant_p, overflow_p);\n+  ggc_free (store);\n \n   /* And the value of the expression.  */\n   if (code == PREINCREMENT_EXPR || code == PREDECREMENT_EXPR)"}]}