{"sha": "4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkY2VlNWIyYmY2Y2EyYzBmN2RjZjVlZGNiZTZkYWY3MTVmYzI2YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-03-19T07:54:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:52Z"}, "message": "[Ada] Premature freezing of types\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Quantified_Expression): Ensure the type\n\tof the name of a \"for of\" loop is frozen.\n\t* exp_disp.adb (Check_Premature_Freezing): Complete condition to\n\ttake into account a private type completed by another private\n\ttype now that the freezing rule are better implemented.\n\t* freeze.adb (Freeze_Entity.Freeze_Profile): Do not perform an\n\tearly freeze on types if not in the proper scope. Special case\n\texpression functions that requires access to the dispatch table.\n\t(Should_Freeze_Type): New.\n\t* sem_ch13.adb (Resolve_Aspect_Expressions): Prevent assert\n\tfailure in case of an invalid tree (previous errors detected).\n\t* sem_res.adb (Resolve): Remove kludge related to entities\n\tcausing incorrect premature freezing.\n\t* sem_util.adb (Ensure_Minimum_Decoration): Add protection\n\tagainst non base types.", "tree": {"sha": "48c0a2969337c977ad99871cd42d99880d2a2d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c0a2969337c977ad99871cd42d99880d2a2d0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a3b5f3a5034c3b41bd34fdf145da9a20743a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a3b5f3a5034c3b41bd34fdf145da9a20743a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a3b5f3a5034c3b41bd34fdf145da9a20743a28"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "9c585e74e508ecab73dfbe05e3952bcb5a9b009e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -10851,10 +10851,11 @@ package body Exp_Ch4 is\n       Var       : Entity_Id;\n \n    begin\n-      --  Ensure that the bound variable is properly frozen. We must do\n-      --  this before expansion because the expression is about to be\n-      --  converted into a loop, and resulting freeze nodes may end up\n-      --  in the wrong place in the tree.\n+      --  Ensure that the bound variable as well as the type of Name of the\n+      --  Iter_Spec if present are properly frozen. We must do this before\n+      --  expansion because the expression is about to be converted into a\n+      --  loop, and resulting freeze nodes may end up in the wrong place in the\n+      --  tree.\n \n       if Present (Iter_Spec) then\n          Var := Defining_Identifier (Iter_Spec);\n@@ -10869,6 +10870,10 @@ package body Exp_Ch4 is\n             P := Parent (P);\n          end loop;\n \n+         if Present (Iter_Spec) then\n+            Freeze_Before (P, Etype (Name (Iter_Spec)));\n+         end if;\n+\n          Freeze_Before (P, Etype (Var));\n       end;\n "}, {"sha": "a2ea7c6e88ac3696dd91c78a5d9eed38937f1f9f", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -4052,6 +4052,7 @@ package body Exp_Disp is\n          if Present (N)\n            and then Is_Private_Type (Typ)\n            and then No (Full_View (Typ))\n+           and then not Has_Private_Declaration (Typ)\n            and then not Is_Generic_Type (Typ)\n            and then not Is_Tagged_Type (Typ)\n            and then not Is_Frozen (Typ)\n@@ -4070,6 +4071,7 @@ package body Exp_Disp is\n             if not Is_Tagged_Type (Typ)\n               and then Present (Comp)\n               and then not Is_Frozen (Comp)\n+              and then not Has_Private_Declaration (Comp)\n               and then not Is_Actual_For_Formal_Incomplete_Type (Comp)\n             then\n                Error_Msg_Sloc := Sloc (Subp);"}, {"sha": "9bb273205732dee5bfc8851577dfb89196b670ee", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -186,6 +186,72 @@ package body Freeze is\n    --  the designated type. Otherwise freezing the access type does not freeze\n    --  the designated type.\n \n+   function Should_Freeze_Type (Typ : Entity_Id; E : Entity_Id) return Boolean;\n+   --  If Typ is in the current scope or in an instantiation, then return True.\n+   --  ???Expression functions (represented by E) shouldn't freeze types in\n+   --  general, but our current expansion and freezing model requires an early\n+   --  freezing when the dispatch table is needed or when building an aggregate\n+   --  with a subtype of Typ, so return True also in this case.\n+   --  Note that expression function completions do freeze and are\n+   --  handled in Sem_Ch6.Analyze_Expression_Function.\n+\n+   ------------------------\n+   -- Should_Freeze_Type --\n+   ------------------------\n+\n+   function Should_Freeze_Type\n+     (Typ : Entity_Id; E : Entity_Id) return Boolean\n+   is\n+      function Is_Dispatching_Call_Or_Aggregate\n+        (N : Node_Id) return Traverse_Result;\n+      --  Return Abandon if N is a dispatching call to a subprogram\n+      --  declared in the same scope as Typ or an aggregate whose type\n+      --  is Typ.\n+\n+      --------------------------------------\n+      -- Is_Dispatching_Call_Or_Aggregate --\n+      --------------------------------------\n+\n+      function Is_Dispatching_Call_Or_Aggregate\n+        (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (N) = N_Function_Call\n+           and then Present (Controlling_Argument (N))\n+           and then Scope (Entity (Original_Node (Name (N))))\n+                      = Scope (Typ)\n+         then\n+            return Abandon;\n+         elsif Nkind (N) = N_Aggregate\n+           and then Base_Type (Etype (N)) = Base_Type (Typ)\n+         then\n+            return Abandon;\n+         else\n+            return OK;\n+         end if;\n+      end Is_Dispatching_Call_Or_Aggregate;\n+\n+      -------------------------\n+      -- Need_Dispatch_Table --\n+      -------------------------\n+\n+      function Need_Dispatch_Table is new\n+        Traverse_Func (Is_Dispatching_Call_Or_Aggregate);\n+      --  Return Abandon if the input expression requires access to\n+      --  Typ's dispatch table.\n+\n+      Decl : constant Node_Id :=\n+        (if No (E) then E else Original_Node (Unit_Declaration_Node (E)));\n+\n+   --  Start of processing for Should_Freeze_Type\n+\n+   begin\n+      return Within_Scope (Typ, Current_Scope)\n+        or else In_Instance\n+        or else (Present (Decl)\n+                 and then Nkind (Decl) = N_Expression_Function\n+                 and then Need_Dispatch_Table (Expression (Decl)) = Abandon);\n+   end Should_Freeze_Type;\n+\n    procedure Process_Default_Expressions\n      (E     : Entity_Id;\n       After : in out Node_Id);\n@@ -4006,7 +4072,9 @@ package body Freeze is\n                Set_Etype (Formal, F_Type);\n             end if;\n \n-            if not From_Limited_With (F_Type) then\n+            if not From_Limited_With (F_Type)\n+              and then Should_Freeze_Type (F_Type, E)\n+            then\n                Freeze_And_Append (F_Type, N, Result);\n             end if;\n \n@@ -4183,7 +4251,9 @@ package body Freeze is\n                Set_Etype (E, R_Type);\n             end if;\n \n-            Freeze_And_Append (R_Type, N, Result);\n+            if Should_Freeze_Type (R_Type, E) then\n+               Freeze_And_Append (R_Type, N, Result);\n+            end if;\n \n             --  Check suspicious return type for C function\n \n@@ -5951,11 +6021,12 @@ package body Freeze is\n          --  Here for other than a subprogram or type\n \n          else\n-            --  If entity has a type, and it is not a generic unit, then freeze\n-            --  it first (RM 13.14(10)).\n+            --  If entity has a type declared in the current scope, and it is\n+            --  not a generic unit, then freeze it first.\n \n             if Present (Etype (E))\n               and then Ekind (E) /= E_Generic_Function\n+              and then Within_Scope (Etype (E), Current_Scope)\n             then\n                Freeze_And_Append (Etype (E), N, Result);\n \n@@ -7783,7 +7854,7 @@ package body Freeze is\n             --  tree. This is an unusual case, but there are some legitimate\n             --  situations in which this occurs, notably when the expressions\n             --  in the range of a type declaration are resolved. We simply\n-            --  ignore the freeze request in this case. Is this right ???\n+            --  ignore the freeze request in this case.\n \n             if No (Parent_P) then\n                return;\n@@ -8043,7 +8114,7 @@ package body Freeze is\n             end case;\n \n             --  We fall through the case if we did not yet find the proper\n-            --  place in the free for inserting the freeze node, so climb.\n+            --  place in the tree for inserting the freeze node, so climb.\n \n             P := Parent_P;\n          end loop;"}, {"sha": "062aa50017a41263fd47379a8d85784a83ff16c3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -15106,7 +15106,11 @@ package body Sem_Ch13 is\n                         begin\n                            Assoc := First (Component_Associations (Expr));\n                            while Present (Assoc) loop\n-                              Find_Direct_Name (Expression (Assoc));\n+                              if Nkind (Expression (Assoc)) in N_Has_Entity\n+                              then\n+                                 Find_Direct_Name (Expression (Assoc));\n+                              end if;\n+\n                               Next (Assoc);\n                            end loop;\n                         end;"}, {"sha": "be0945325fd5c59cb2667835c76c7c83eb7243bd", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -3391,12 +3391,9 @@ package body Sem_Res is\n          --  Here we are resolving the corresponding expanded body, so we do\n          --  need to perform normal freezing.\n \n-         --  As elsewhere we do not emit freeze node within a generic. We make\n-         --  an exception for entities that are expressions, only to detect\n-         --  misuses of deferred constants and preserve the output of various\n-         --  tests.\n+         --  As elsewhere we do not emit freeze node within a generic.\n \n-         if not Inside_A_Generic or else Is_Entity_Name (N) then\n+         if not Inside_A_Generic then\n             Freeze_Expression (N);\n          end if;\n "}, {"sha": "cfbbae0e2d5479979fddc653611f39b49296e3f7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4edcee5b2bf6ca2c0f7dcf5edcbe6daf715fc26a", "patch": "@@ -26744,6 +26744,7 @@ package body Sem_Util is\n \n          if Present (Typ)\n            and then not Is_Frozen (Typ)\n+           and then Is_Base_Type (Typ)\n            and then (Is_Record_Type (Typ)\n                        or else Is_Concurrent_Type (Typ)\n                        or else Is_Incomplete_Or_Private_Type (Typ))"}]}