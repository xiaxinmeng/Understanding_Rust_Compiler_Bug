{"sha": "ccdc170325f15c929a3b44688c1f223047e3e4e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkYzE3MDMyNWYxNWM5MjlhM2I0NDY4OGMxZjIyMzA0N2UzZTRlNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T23:08:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T23:08:52Z"}, "message": "genrecog.c (decision_type): Add DT_const_int.\n\n\t* genrecog.c (decision_type): Add DT_const_int.\n\t(write_cond) [DT_const_int]: Print a comparison against small\n\tconstant.\n\t(write_node): Simplify comparisons against small constants\n\tbefore printing tests.\n\nFrom-SVN: r77055", "tree": {"sha": "6dc3c19beea98cdd05aee44da8c777fac56cb779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc3c19beea98cdd05aee44da8c777fac56cb779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccdc170325f15c929a3b44688c1f223047e3e4e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdc170325f15c929a3b44688c1f223047e3e4e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdc170325f15c929a3b44688c1f223047e3e4e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdc170325f15c929a3b44688c1f223047e3e4e5/comments", "author": null, "committer": null, "parents": [{"sha": "aeba8f806ef08df3bdf554ad9403108d874f5ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeba8f806ef08df3bdf554ad9403108d874f5ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeba8f806ef08df3bdf554ad9403108d874f5ff1"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "710a1840e6d72d4ac7e23e979646b3a6927910d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc170325f15c929a3b44688c1f223047e3e4e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc170325f15c929a3b44688c1f223047e3e4e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccdc170325f15c929a3b44688c1f223047e3e4e5", "patch": "@@ -1,3 +1,11 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* genrecog.c (decision_type): Add DT_const_int.\n+\t(write_cond) [DT_const_int]: Print a comparison against small\n+\tconstant.\n+\t(write_node): Simplify comparisons against small constants\n+\tbefore printing tests.\n+\t\n 2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r.c (m32r_load_pic_register): Use GEN_INT"}, {"sha": "8673de39a3964c9455de31d3fbb73c09f120c19e", "filename": "gcc/genrecog.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc170325f15c929a3b44688c1f223047e3e4e5/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc170325f15c929a3b44688c1f223047e3e4e5/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=ccdc170325f15c929a3b44688c1f223047e3e4e5", "patch": "@@ -90,6 +90,7 @@ struct decision_test\n     {\n       DT_mode, DT_code, DT_veclen,\n       DT_elt_zero_int, DT_elt_one_int, DT_elt_zero_wide, DT_elt_zero_wide_safe,\n+      DT_const_int,\n       DT_veclen_ge, DT_dup, DT_pred, DT_c_test,\n       DT_accept_op, DT_accept_insn\n     } type;\n@@ -1981,6 +1982,11 @@ write_cond (struct decision_test *p, int depth,\n       print_host_wide_int (p->u.intval);\n       break;\n \n+    case DT_const_int:\n+      printf (\"x%d == const_int_rtx[MAX_SAVED_CONST_INT + (%d)]\",\n+\t      depth, (int) p->u.intval);\n+      break;\n+\n     case DT_veclen_ge:\n       printf (\"XVECLEN (x%d, 0) >= %d\", depth, p->u.veclen);\n       break;\n@@ -2143,6 +2149,23 @@ write_node (struct decision *p, int depth,\n   struct decision_test *test, *last_test;\n   int uncond;\n \n+  /* Scan the tests and simplify comparisons against small\n+     constants.  */\n+  for (test = p->tests; test; test = test->next)\n+    {\n+      if (test->type == DT_code\n+\t  && test->u.code == CONST_INT\n+\t  && test->next\n+\t  && test->next->type == DT_elt_zero_wide_safe\n+\t  && -MAX_SAVED_CONST_INT <= test->next->u.intval\n+\t  && test->next->u.intval <= MAX_SAVED_CONST_INT)\n+\t{\n+\t  test->type = DT_const_int;\n+\t  test->u.intval = test->next->u.intval;\n+\t  test->next = test->next->next;\n+\t}\n+    }\n+\n   last_test = test = p->tests;\n   uncond = is_unconditional (test, subroutine_type);\n   if (uncond == 0)"}]}