{"sha": "b29387eec60251cbfed25475892d5645c9c59caf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5Mzg3ZWVjNjAyNTFjYmZlZDI1NDc1ODkyZDU2NDVjOWM1OWNhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-01T08:16:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-01T08:16:47Z"}, "message": "recog.h (insn_data_d): Add n_generator_args.\n\ngcc/\n\t* recog.h (insn_data_d): Add n_generator_args.\n\t* genoutput.c (data): Likewise.\n\t(output_insn_data): Print it.\n\t(max_opno, num_dups): Delete.\n\t(scan_operands): Just fill in \"d->operand[...]\".\n\t(gen_insn, gen_peephole, gen_expand, gen_split): Use get_pattern_stats.\n\nFrom-SVN: r171822", "tree": {"sha": "00a468eaf00b3f8137d8112cf7254fe104b988c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a468eaf00b3f8137d8112cf7254fe104b988c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29387eec60251cbfed25475892d5645c9c59caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29387eec60251cbfed25475892d5645c9c59caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29387eec60251cbfed25475892d5645c9c59caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29387eec60251cbfed25475892d5645c9c59caf/comments", "author": null, "committer": null, "parents": [{"sha": "e792559ab3d6fdb933e91bb0a317554d5920d58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e792559ab3d6fdb933e91bb0a317554d5920d58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e792559ab3d6fdb933e91bb0a317554d5920d58a"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "32ad1daad55e5dacc1380fa517656628e96e528b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b29387eec60251cbfed25475892d5645c9c59caf", "patch": "@@ -1,3 +1,12 @@\n+2011-04-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* recog.h (insn_data_d): Add n_generator_args.\n+\t* genoutput.c (data): Likewise.\n+\t(output_insn_data): Print it.\n+\t(max_opno, num_dups): Delete.\n+\t(scan_operands): Just fill in \"d->operand[...]\".\n+\t(gen_insn, gen_peephole, gen_expand, gen_split): Use get_pattern_stats.\n+\n 2011-04-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gensupport.h (pattern_stats): New structure."}, {"sha": "3e89cfd6df160562cefa452be8d5dd3a4ad763b4", "filename": "gcc/genoutput.c", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=b29387eec60251cbfed25475892d5645c9c59caf", "patch": "@@ -160,6 +160,7 @@ struct data\n   int index_number;\n   const char *filename;\n   int lineno;\n+  int n_generator_args;\t\t/* Number of arguments passed to generator */\n   int n_operands;\t\t/* Number of operands this insn recognizes */\n   int n_dups;\t\t\t/* Number times match_dup appears in pattern */\n   int n_alternatives;\t\t/* Number of alternatives in each constraint */\n@@ -393,6 +394,7 @@ output_insn_data (void)\n \tprintf (\"    0,\\n\");\n \n       printf (\"    &operand_data[%d],\\n\", d->operand_number);\n+      printf (\"    %d,\\n\", d->n_generator_args);\n       printf (\"    %d,\\n\", d->n_operands);\n       printf (\"    %d,\\n\", d->n_dups);\n       printf (\"    %d,\\n\", d->n_alternatives);\n@@ -417,16 +419,11 @@ output_get_insn_name (void)\n }\n \n \f\n-/* Stores in max_opno the largest operand number present in `part', if\n-   that is larger than the previous value of max_opno, and the rest of\n-   the operand data into `d->operand[i]'.\n+/* Stores the operand data into `d->operand[i]'.\n \n    THIS_ADDRESS_P is nonzero if the containing rtx was an ADDRESS.\n    THIS_STRICT_LOW is nonzero if the containing rtx was a STRICT_LOW_PART.  */\n \n-static int max_opno;\n-static int num_dups;\n-\n static void\n scan_operands (struct data *d, rtx part, int this_address_p,\n \t       int this_strict_low)\n@@ -442,9 +439,7 @@ scan_operands (struct data *d, rtx part, int this_address_p,\n     {\n     case MATCH_OPERAND:\n       opno = XINT (part, 0);\n-      if (opno > max_opno)\n-\tmax_opno = opno;\n-      if (max_opno >= MAX_MAX_OPERANDS)\n+      if (opno >= MAX_MAX_OPERANDS)\n \t{\n \t  error_with_line (d->lineno, \"maximum number of operands exceeded\");\n \t  return;\n@@ -465,9 +460,7 @@ scan_operands (struct data *d, rtx part, int this_address_p,\n \n     case MATCH_SCRATCH:\n       opno = XINT (part, 0);\n-      if (opno > max_opno)\n-\tmax_opno = opno;\n-      if (max_opno >= MAX_MAX_OPERANDS)\n+      if (opno >= MAX_MAX_OPERANDS)\n \t{\n \t  error_with_line (d->lineno, \"maximum number of operands exceeded\");\n \t  return;\n@@ -489,9 +482,7 @@ scan_operands (struct data *d, rtx part, int this_address_p,\n     case MATCH_OPERATOR:\n     case MATCH_PARALLEL:\n       opno = XINT (part, 0);\n-      if (opno > max_opno)\n-\tmax_opno = opno;\n-      if (max_opno >= MAX_MAX_OPERANDS)\n+      if (opno >= MAX_MAX_OPERANDS)\n \t{\n \t  error_with_line (d->lineno, \"maximum number of operands exceeded\");\n \t  return;\n@@ -510,12 +501,6 @@ scan_operands (struct data *d, rtx part, int this_address_p,\n \tscan_operands (d, XVECEXP (part, 2, i), 0, 0);\n       return;\n \n-    case MATCH_DUP:\n-    case MATCH_OP_DUP:\n-    case MATCH_PAR_DUP:\n-      ++num_dups;\n-      break;\n-\n     case ADDRESS:\n       scan_operands (d, XEXP (part, 0), 1, 0);\n       return;\n@@ -830,6 +815,7 @@ validate_optab_operands (struct data *d)\n static void\n gen_insn (rtx insn, int lineno)\n {\n+  struct pattern_stats stats;\n   struct data *d = XNEW (struct data);\n   int i;\n \n@@ -848,15 +834,15 @@ gen_insn (rtx insn, int lineno)\n   *idata_end = d;\n   idata_end = &d->next;\n \n-  max_opno = -1;\n-  num_dups = 0;\n   memset (d->operand, 0, sizeof (d->operand));\n \n   for (i = 0; i < XVECLEN (insn, 1); i++)\n     scan_operands (d, XVECEXP (insn, 1, i), 0, 0);\n \n-  d->n_operands = max_opno + 1;\n-  d->n_dups = num_dups;\n+  get_pattern_stats (&stats, XVEC (insn, 1));\n+  d->n_generator_args = stats.num_generator_args;\n+  d->n_operands = stats.num_insn_operands;\n+  d->n_dups = stats.num_dups;\n \n #ifndef USE_MD_CONSTRAINTS\n   check_constraint_len ();\n@@ -875,6 +861,7 @@ gen_insn (rtx insn, int lineno)\n static void\n gen_peephole (rtx peep, int lineno)\n {\n+  struct pattern_stats stats;\n   struct data *d = XNEW (struct data);\n   int i;\n \n@@ -890,8 +877,6 @@ gen_peephole (rtx peep, int lineno)\n   *idata_end = d;\n   idata_end = &d->next;\n \n-  max_opno = -1;\n-  num_dups = 0;\n   memset (d->operand, 0, sizeof (d->operand));\n \n   /* Get the number of operands by scanning all the patterns of the\n@@ -900,7 +885,9 @@ gen_peephole (rtx peep, int lineno)\n   for (i = 0; i < XVECLEN (peep, 0); i++)\n     scan_operands (d, XVECEXP (peep, 0, i), 0, 0);\n \n-  d->n_operands = max_opno + 1;\n+  get_pattern_stats (&stats, XVEC (peep, 0));\n+  d->n_generator_args = 0;\n+  d->n_operands = stats.num_insn_operands;\n   d->n_dups = 0;\n \n   validate_insn_alternatives (d);\n@@ -914,6 +901,7 @@ gen_peephole (rtx peep, int lineno)\n static void\n gen_expand (rtx insn, int lineno)\n {\n+  struct pattern_stats stats;\n   struct data *d = XNEW (struct data);\n   int i;\n \n@@ -932,8 +920,6 @@ gen_expand (rtx insn, int lineno)\n   *idata_end = d;\n   idata_end = &d->next;\n \n-  max_opno = -1;\n-  num_dups = 0;\n   memset (d->operand, 0, sizeof (d->operand));\n \n   /* Scan the operands to get the specified predicates and modes,\n@@ -943,8 +929,10 @@ gen_expand (rtx insn, int lineno)\n     for (i = 0; i < XVECLEN (insn, 1); i++)\n       scan_operands (d, XVECEXP (insn, 1, i), 0, 0);\n \n-  d->n_operands = max_opno + 1;\n-  d->n_dups = num_dups;\n+  get_pattern_stats (&stats, XVEC (insn, 1));\n+  d->n_generator_args = stats.num_generator_args;\n+  d->n_operands = stats.num_insn_operands;\n+  d->n_dups = stats.num_dups;\n   d->template_code = 0;\n   d->output_format = INSN_OUTPUT_FORMAT_NONE;\n \n@@ -959,6 +947,7 @@ gen_expand (rtx insn, int lineno)\n static void\n gen_split (rtx split, int lineno)\n {\n+  struct pattern_stats stats;\n   struct data *d = XNEW (struct data);\n   int i;\n \n@@ -974,8 +963,6 @@ gen_split (rtx split, int lineno)\n   *idata_end = d;\n   idata_end = &d->next;\n \n-  max_opno = -1;\n-  num_dups = 0;\n   memset (d->operand, 0, sizeof (d->operand));\n \n   /* Get the number of operands by scanning all the patterns of the\n@@ -984,7 +971,9 @@ gen_split (rtx split, int lineno)\n   for (i = 0; i < XVECLEN (split, 0); i++)\n     scan_operands (d, XVECEXP (split, 0, i), 0, 0);\n \n-  d->n_operands = max_opno + 1;\n+  get_pattern_stats (&stats, XVEC (split, 0));\n+  d->n_generator_args = 0;\n+  d->n_operands = stats.num_insn_operands;\n   d->n_dups = 0;\n   d->n_alternatives = 0;\n   d->template_code = 0;"}, {"sha": "0261bc6072d7c37a803ffd86dd4b9ed776ba6836", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29387eec60251cbfed25475892d5645c9c59caf/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=b29387eec60251cbfed25475892d5645c9c59caf", "patch": "@@ -300,6 +300,7 @@ struct insn_data_d\n   const insn_gen_fn genfun;\n   const struct insn_operand_data *const operand;\n \n+  const char n_generator_args;\n   const char n_operands;\n   const char n_dups;\n   const char n_alternatives;"}]}