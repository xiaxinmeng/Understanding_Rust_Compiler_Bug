{"sha": "011134dc19dc78fc3780cfc1d79bfc128355608f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExMTM0ZGMxOWRjNzhmYzM3ODBjZmMxZDc5YmZjMTI4MzU1NjA4Zg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-27T11:27:33Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-30T10:54:05Z"}, "message": "d: Remove dead code from binary_op.\n\nThe front-end ensures that both sides have been casted to the same type\nbefore being given to the lowering pass.\n\ngcc/d/ChangeLog:\n\n\t* expr.cc (binary_op): Remove dead code.", "tree": {"sha": "10ab9659aeb88ea34968c392025a0568d822d9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ab9659aeb88ea34968c392025a0568d822d9e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/011134dc19dc78fc3780cfc1d79bfc128355608f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011134dc19dc78fc3780cfc1d79bfc128355608f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011134dc19dc78fc3780cfc1d79bfc128355608f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011134dc19dc78fc3780cfc1d79bfc128355608f/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa1226c379a41fa620d77fe5aeb0a0da8163501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baa1226c379a41fa620d77fe5aeb0a0da8163501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baa1226c379a41fa620d77fe5aeb0a0da8163501"}], "stats": {"total": 8, "additions": 0, "deletions": 8}, "files": [{"sha": "e293cf2a4cd2528183c31cfd2c3c4daa0524bc5f", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/011134dc19dc78fc3780cfc1d79bfc128355608f/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/011134dc19dc78fc3780cfc1d79bfc128355608f/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=011134dc19dc78fc3780cfc1d79bfc128355608f", "patch": "@@ -101,8 +101,6 @@ binary_op (tree_code code, tree type, tree arg0, tree arg1)\n   tree t1 = TREE_TYPE (arg1);\n   tree ret = NULL_TREE;\n \n-  bool unsignedp = TYPE_UNSIGNED (t0) || TYPE_UNSIGNED (t1);\n-\n   /* Deal with float mod expressions immediately.  */\n   if (code == FLOAT_MOD_EXPR)\n     return build_float_modulus (type, arg0, arg1);\n@@ -130,12 +128,6 @@ binary_op (tree_code code, tree type, tree arg0, tree arg1)\n       else\n \tret = fold_build2 (POINTER_DIFF_EXPR, ptrtype, arg0, arg1);\n     }\n-  else if (INTEGRAL_TYPE_P (type) && (TYPE_UNSIGNED (type) != unsignedp))\n-    {\n-      tree inttype = (unsignedp)\n-\t? d_unsigned_type (type) : d_signed_type (type);\n-      ret = fold_build2 (code, inttype, arg0, arg1);\n-    }\n   else\n     {\n       /* If the operation needs excess precision.  */"}]}