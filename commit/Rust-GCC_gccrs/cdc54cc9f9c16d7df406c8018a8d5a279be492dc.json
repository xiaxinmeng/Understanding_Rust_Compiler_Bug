{"sha": "cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjNTRjYzlmOWMxNmQ3ZGY0MDZjODAxOGE4ZDVhMjc5YmU0OTJkYw==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-04-12T14:34:57Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-04-12T14:34:57Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r729", "tree": {"sha": "a8a7666a06e69afbfee2c78c249976876057b885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a7666a06e69afbfee2c78c249976876057b885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/comments", "author": null, "committer": null, "parents": [{"sha": "f357808bc7f02b8254ab1c4fdce84925a150b458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f357808bc7f02b8254ab1c4fdce84925a150b458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f357808bc7f02b8254ab1c4fdce84925a150b458"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "3a1c828be4a4b587723bb36ef5ead1d35420b2fe", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "patch": "@@ -4461,7 +4461,7 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n     inside_init = TREE_OPERAND (init, 0);\n \n-  if (init && raw_constructor\n+  if (inside_init && raw_constructor\n       && CONSTRUCTOR_ELTS (inside_init) != 0\n       && TREE_CHAIN (CONSTRUCTOR_ELTS (inside_init)) == 0)\n     {\n@@ -4672,8 +4672,12 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n \t({\n \t  if (ofwhat)\n \t    push_string (ofwhat);\n-\t  inside_init = convert_for_assignment (type, default_conversion (init),\n-\t\t\t\t\t &initialization_message, NULL_TREE, 0);\n+\t  inside_init\n+\t    = convert_for_assignment (type,\n+\t\t\t\t      default_conversion (raw_constructor\n+\t\t\t\t\t\t\t  ? inside_init\n+\t\t\t\t\t\t\t  : init),\n+\t\t\t\t      &initialization_message, NULL_TREE, 0);\n \t});\n \n       if (require_constant && ! TREE_CONSTANT (inside_init))"}, {"sha": "80e329a37e18043e9fc05a7a34369ea565d1754a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "patch": "@@ -3667,7 +3667,7 @@ fold (expr)\n \t      case EQ_EXPR:\n \t\treturn fold (build1 (NEGATE_EXPR, type, arg1));\n \t      case NE_EXPR:\n-\t\treturn arg1;\n+\t\treturn convert (type, arg1);\n \t      case GE_EXPR:\n \t      case GT_EXPR:\n \t\treturn fold (build1 (ABS_EXPR, type, arg1));\n@@ -3683,7 +3683,7 @@ fold (expr)\n \t  if (integer_zerop (TREE_OPERAND (arg0, 1)) && integer_zerop (arg2))\n \t    {\n \t      if (comp_code == NE_EXPR)\n-\t\treturn arg1;\n+\t\treturn convert (type, arg1);\n \t      else if (comp_code == EQ_EXPR)\n \t\treturn convert (type, integer_zero_node);\n \t    }\n@@ -3696,9 +3696,9 @@ fold (expr)\n \t    switch (comp_code)\n \t      {\n \t      case EQ_EXPR:\n-\t\treturn arg2;\n+\t\treturn convert (type, arg2);\n \t      case NE_EXPR:\n-\t\treturn arg1;\n+\t\treturn convert (type, arg1);\n \t      case LE_EXPR:\n \t      case LT_EXPR:\n \t\treturn fold (build (MIN_EXPR, type, arg1, arg2));"}, {"sha": "526c6fd18e37b4ec06739b2a500d4425e234142b", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "patch": "@@ -3187,8 +3187,8 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t  && GET_CODE (PATTERN (insn)) != RETURN\n \t\t  && (! condjump_p (insn)\n \t\t      || (JUMP_LABEL (insn) != 0\n-\t\t\t  && (INSN_UID (JUMP_LABEL (insn)) > max_uid_for_loop\n-\t\t\t      || INSN_UID (insn) > max_uid_for_loop\n+\t\t\t  && (INSN_UID (JUMP_LABEL (insn)) >= max_uid_for_loop\n+\t\t\t      || INSN_UID (insn) >= max_uid_for_loop\n \t\t\t      || (INSN_LUID (JUMP_LABEL (insn))\n \t\t\t\t  < INSN_LUID (insn))))))\n \t      {"}, {"sha": "c2cdae5ddc9f6e8dd79f8f266c5fbc95d3ca267b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc54cc9f9c16d7df406c8018a8d5a279be492dc/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "patch": "@@ -304,7 +304,7 @@ layout_record (rec)\n       record_align = MAX (record_align, desired_align);\n #else\n       if (PCC_BITFIELD_TYPE_MATTERS && TREE_TYPE (field) != error_mark_node\n-\t  && DECL_BIT_FIELD (field)\n+\t  && DECL_BIT_FIELD_TYPE (field)\n \t  && ! integer_zerop (TYPE_SIZE (TREE_TYPE (field))))\n \t{\n \t  /* For these machines, a zero-length field does not\n@@ -354,7 +354,7 @@ layout_record (rec)\n       if (PCC_BITFIELD_TYPE_MATTERS\n \t  && TREE_CODE (field) == FIELD_DECL\n \t  && TREE_TYPE (field) != error_mark_node\n-\t  && DECL_BIT_FIELD (field)\n+\t  && DECL_BIT_FIELD_TYPE (field)\n \t  && !DECL_PACKED (field)\n \t  && !integer_zerop (DECL_SIZE (field)))\n \t{\n@@ -376,7 +376,7 @@ layout_record (rec)\n       if (BITFIELD_NBYTES_LIMITED\n \t  && TREE_CODE (field) == FIELD_DECL\n \t  && TREE_TYPE (field) != error_mark_node\n-\t  && DECL_BIT_FIELD (field)\n+\t  && DECL_BIT_FIELD_TYPE (field)\n \t  && !DECL_PACKED (field)\n \t  && !integer_zerop (DECL_SIZE (field)))\n \t{\n@@ -505,7 +505,7 @@ layout_union (rec)\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n       /* On the m88000, a bit field of declare type `int'\n \t forces the entire union to have `int' alignment.  */\n-      if (PCC_BITFIELD_TYPE_MATTERS && DECL_BIT_FIELD (field))\n+      if (PCC_BITFIELD_TYPE_MATTERS && DECL_BIT_FIELD_TYPE (field))\n \tunion_align = MAX (union_align, TYPE_ALIGN (TREE_TYPE (field)));\n #endif\n "}]}