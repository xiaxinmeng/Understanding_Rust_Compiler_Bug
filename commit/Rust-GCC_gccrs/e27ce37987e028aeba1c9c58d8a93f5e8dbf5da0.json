{"sha": "e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3Y2UzNzk4N2UwMjhhZWJhMWM5YzU4ZDhhOTNmNWU4ZGJmNWRhMA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-08-19T11:50:21Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-19T11:50:21Z"}, "message": "atomicity.h: Replace broken generic code with current copy of generic/atomicity.h .\n\n\t* config/cpu/sh/atomicity.h: Replace broken generic code with current\n\tcopy of generic/atomicity.h .\n\nFrom-SVN: r103274", "tree": {"sha": "cd131fa070364c965ab39ae64263636bd9ea684c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd131fa070364c965ab39ae64263636bd9ea684c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0/comments", "author": null, "committer": null, "parents": [{"sha": "a132dad65cb865aba22f2fae83a357977a19452f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a132dad65cb865aba22f2fae83a357977a19452f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a132dad65cb865aba22f2fae83a357977a19452f"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "7fdce4690accc22a8361c1b222207b03eb48ee1a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "patch": "@@ -1,3 +1,8 @@\n+2005-08-19  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* config/cpu/sh/atomicity.h: Replace broken generic code with current\n+\tcopy of generic/atomicity.h .\n+\n 2005-08-17  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* All files: Update FSF address."}, {"sha": "8760c8b39b300e3330ecc3c7abe396a0e6850925", "filename": "libstdc++-v3/config/cpu/sh/atomicity.h", "status": "modified", "additions": 28, "deletions": 44, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h?ref=e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -69,55 +70,38 @@ __atomic_add (volatile _Atomic_word* __mem, int __val)\n       : \"r0\");\n }\n \n-#else\n+#else /* !__SH4A__ */\n \n /* This is generic/atomicity.h */\n \n-#include <bits/gthr.h>\n+#include <bits/atomicity.h>\n+#include <bits/concurrence.h>\n \n-#define _GLIBCPP_NEED_GENERIC_MUTEX\n-\n-typedef int _Atomic_word;\n-\n-namespace __gnu_cxx\n+namespace __gnu_internal\n {\n-  extern __gthread_mutex_t _Atomic_add_mutex;\n-\n-#ifndef __GTHREAD_MUTEX_INIT\n-  extern __gthread_once_t _Atomic_add_mutex_once;\n-  extern void __gthread_atomic_add_mutex_once();\n-#endif\n-}\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n-{\n-#ifndef __GTHREAD_MUTEX_INIT\n-  __gthread_once (&__gnu_cxx::_Atomic_add_mutex_once,\n-                  __gnu_cxx::__gthread_atomic_add_mutex_once);\n-#endif\n-\n-  _Atomic_word __result;\n+  __glibcxx_mutex_define_initialized(atomic_mutex);\n+} // namespace __gnu_internal\n \n-  __gthread_mutex_lock (&__gnu_cxx::_Atomic_add_mutex);\n-\n-  __result = *__mem;\n-  *__mem += __val;\n-\n-  __gthread_mutex_unlock (&__gnu_cxx::_Atomic_add_mutex);\n-  return __result;\n-}\n-\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  (void) __exchange_and_add (__mem, __val);\n-}\n-\n-\n-#endif\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    __glibcxx_mutex_lock(__gnu_internal::atomic_mutex);\n+    _Atomic_word __result;\n+    __result = *__mem;\n+    *__mem += __val;\n+    __glibcxx_mutex_unlock(__gnu_internal::atomic_mutex);\n+    return __result;\n+  }\n+\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx\n+\n+#endif /* !__SH4A__ */\n \n #endif /* atomicity.h */"}]}