{"sha": "c83eecadfde96f31d483f70c043572cfb24d9575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzZWVjYWRmZGU5NmYzMWQ0ODNmNzBjMDQzNTcyY2ZiMjRkOTU3NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-11-05T20:24:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-11-05T20:24:18Z"}, "message": "c-typeck.c, [...]: Fix comment typos.\n\n\t* c-typeck.c, config/i386/netware.h, config/m32c/cond.md,\n\tconfig/ms1/ms1.h, config/rs6000/predicates.md,\n\tconfig/s390/s390.c, params.def, postreload-gcse.c,\n\ttree-flow-inline.h, tree-ssa-operands.c, tree-vectorizer.c,\n\ttree-vrp.c, tree.c: Fix comment typos.\n\t* doc/invoke.texi: Fix typos.\n\nFrom-SVN: r106532", "tree": {"sha": "5862299337bcb2adb6751447c1b727ed4555e24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5862299337bcb2adb6751447c1b727ed4555e24f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83eecadfde96f31d483f70c043572cfb24d9575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83eecadfde96f31d483f70c043572cfb24d9575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83eecadfde96f31d483f70c043572cfb24d9575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83eecadfde96f31d483f70c043572cfb24d9575/comments", "author": null, "committer": null, "parents": [{"sha": "d492addcd36c2fc92388b950b4e1159f7e941edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d492addcd36c2fc92388b950b4e1159f7e941edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d492addcd36c2fc92388b950b4e1159f7e941edb"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "826d89e97bcfa5382c4bdc1ed93dced131f224ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -1,3 +1,12 @@\n+2005-11-05  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* c-typeck.c, config/i386/netware.h, config/m32c/cond.md,\n+\tconfig/ms1/ms1.h, config/rs6000/predicates.md,\n+\tconfig/s390/s390.c, params.def, postreload-gcse.c,\n+\ttree-flow-inline.h, tree-ssa-operands.c, tree-vectorizer.c,\n+\ttree-vrp.c, tree.c: Fix comment typos.\n+\t* doc/invoke.texi: Fix typos.\n+\n 2005-11-05  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* lambda-code.c (lambda_transform_legal_p): Use DDR_NUM_DIST_VECTS"}, {"sha": "d32261546611277c51ccddd3acf15ff72cc2140b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -917,7 +917,7 @@ alloc_tagged_tu_seen_cache (tree t1, tree t2)\n        struct a *next;\n      };\n      If we are comparing this against a similar struct in another TU,\n-     and did not assume they were compatiable, we end up with an infinite\n+     and did not assume they were compatible, we end up with an infinite\n      loop.  */\n   tu->val = 1;\n   return tu;"}, {"sha": "197bdc5a6a27e727b0ca9dd206b190f0472a6ea0", "filename": "gcc/config/i386/netware.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -142,7 +142,7 @@ Boston, MA 02110-1301, USA.  */\n    differently depending on something about the variable or\n    function named by the symbol (such as what section it is in).\n \n-   On i386 running NetWare, modify the assembler name with an undercore (_)\n+   On i386 running NetWare, modify the assembler name with an underscore (_)\n    prefix and a suffix consisting of an atsign (@) followed by a string of\n    digits that represents the number of bytes of arguments passed to the\n    function, if it has the attribute STDCALL. Alternatively, if it has the "}, {"sha": "c6b42c797026efa94dc708a2bbc88266bd3ddbb5", "filename": "gcc/config/m32c/cond.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fm32c%2Fcond.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fm32c%2Fcond.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fcond.md?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -28,7 +28,7 @@\n ; so instead we invert the conditional and jump around a regular jump.\n \n ; Note that we can, at some point in the future, add code to omit the\n-; \"cmp\" portion of the insn if the preceeding insn happened to set the\n+; \"cmp\" portion of the insn if the preceding insn happened to set the\n ; right flags already.  For example, a mov followed by a \"cmp *,0\" is\n ; redundant; the move already set the Z flag.\n "}, {"sha": "cf24671a5965a0adcacb74fe7fcc7ba2ec44ba52", "filename": "gcc/config/ms1/ms1.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fms1%2Fms1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fms1%2Fms1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.h?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -42,7 +42,7 @@ extern enum processor_type ms1_cpu;\n #undef  ASM_SPEC\n #define ASM_SPEC \"%{march=ms1-16-002: -march=ms1-16-002} %{march=ms1-16-003: -march=ms1-16-003} %{!march=*: -march=ms1-16-002}\"\n \n-/* A string to pass to at the end of the comman given to the linker.  */\n+/* A string to pass to at the end of the command given to the linker.  */\n #undef  LIB_SPEC\n #define LIB_SPEC \"--start-group -lc -lsim --end-group \\\n %{msim: ; \\"}, {"sha": "da813dad5a73b1f21765a0d77a7a985d22dbba1b", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -55,7 +55,7 @@\n        (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 31\")))\n \n ;; Return 1 if op is a signed 8-bit constant integer.\n-;; Integer multiplcation complete more quickly\n+;; Integer multiplication complete more quickly\n (define_predicate \"s8bit_cint_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= -128 && INTVAL (op) <= 127\")))"}, {"sha": "cbb382d6dfb9206e98c8b350487c225698f45dcc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -3879,7 +3879,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n   int bitsize = INTVAL (op1);\n   int bitpos = INTVAL (op2);\n \n-  /* We need byte alignement.  */\n+  /* We need byte alignment.  */\n   if (bitsize % BITS_PER_UNIT)\n     return false;\n "}, {"sha": "3e25d390ae090eef27ba7020a4002efa53ea5fee", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -5939,8 +5939,8 @@ function given basic block needs to have to be considered hot\n The maximum number of loop iterations we predict statically.  This is useful\n in cases where function contain single loop with known bound and other loop\n with unknown.  We predict the known number of iterations correctly, while\n-the unknown nummber of iterations average to roughly 10.  This means that the\n-loop without bounds would appear artifically cold relative to the other one.\n+the unknown number of iterations average to roughly 10.  This means that the\n+loop without bounds would appear artificially cold relative to the other one.\n \n @item tracer-dynamic-coverage\n @itemx tracer-dynamic-coverage-feedback"}, {"sha": "af0fbdcb3c12211c8e8e72121dae3092ae88b661", "filename": "gcc/params.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -314,7 +314,7 @@ DEFPARAM(HOT_BB_FREQUENCY_FRACTION,\n    are predicted to iterate relatively few (10) times at average.\n    For functions containing one loop with large known number of iterations\n    and other loops having unbounded loops we would end up predicting all\n-   the other loops cold that is not usually the case.  So we need to artifically\n+   the other loops cold that is not usually the case.  So we need to artificially\n    flatten the profile.  \n \n    We need to cut the maximal predicted iterations to large enought iterations"}, {"sha": "191d7965eeb2a56eb253c8c79a740ea2a25ddb50", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -1095,7 +1095,7 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n \t}\n       else\n \t{\n-\t  /* Adding a load on a critical edge will cuase a split.  */\n+\t  /* Adding a load on a critical edge will cause a split.  */\n \t  if (EDGE_CRITICAL_P (pred))\n \t    critical_edge_split = true;\n \t  not_ok_count += pred->count;"}, {"sha": "e1c19fc6dd4686310e6296890987665b1ce2f37e", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -1036,7 +1036,7 @@ op_iter_next_tree (ssa_op_iter *ptr)\n \n \n /* This functions clears the iterator PTR, and marks it done.  This is normally\n-   used to prevent warnings in the compile about might be uninitailzied\n+   used to prevent warnings in the compile about might be uninitialized\n    components.  */\n \n static inline void"}, {"sha": "c902ff980f69bdf6a5f9bcef63297ae310a1ca25", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -156,7 +156,7 @@ static maydef_optype_p free_maydefs = NULL;\n static mustdef_optype_p free_mustdefs = NULL;\n \n \n-/* Return the DECL_UID of the base varaiable of T.  */\n+/* Return the DECL_UID of the base variable of T.  */\n \n static inline unsigned\n get_name_decl (tree t)"}, {"sha": "d096788fd207b29f5de7faf19d7497cbb5fe759c", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -1879,7 +1879,7 @@ vect_is_simple_reduction (struct loop *loop, tree phi)\n   /* CHECKME: check for !flag_finite_math_only too?  */\n   if (SCALAR_FLOAT_TYPE_P (type) && !flag_unsafe_math_optimizations)\n     {\n-      /* Changing the order of operations changes the sematics.  */\n+      /* Changing the order of operations changes the semantics.  */\n       if (vect_print_dump_info (REPORT_DETAILS))\n         {\n           fprintf (vect_dump, \"reduction: unsafe fp math optimization: \");\n@@ -1889,7 +1889,7 @@ vect_is_simple_reduction (struct loop *loop, tree phi)\n     }\n   else if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type) && flag_trapv)\n     {\n-      /* Changing the order of operations changes the sematics.  */\n+      /* Changing the order of operations changes the semantics.  */\n       if (vect_print_dump_info (REPORT_DETAILS))\n         {\n           fprintf (vect_dump, \"reduction: unsafe int math optimization: \");"}, {"sha": "7269fb5029a6ce77eace479b4790ccaaf437d7db", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -904,7 +904,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n      anything dominated by 'if (i_5 < 5)' will be optimized away.\n      Note, due to the wa in which simulation proceeds, the statement\n      i_7 = ASSERT_EXPR <...> we would never be visited because the\n-     conditiona 'if (i_5 < 5)' always evaluates to false.  However,\n+     conditional 'if (i_5 < 5)' always evaluates to false.  However,\n      this extra check does not hurt and may protect against future\n      changes to VRP that may get into a situation similar to the\n      NULL pointer dereference example."}, {"sha": "ccd6cf538ccb0334622f80b369371aa486523ae3", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83eecadfde96f31d483f70c043572cfb24d9575/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c83eecadfde96f31d483f70c043572cfb24d9575", "patch": "@@ -3584,7 +3584,7 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n      any damage.  */\n   if (is_attribute_p (\"dllimport\", name))\n     {\n-      /* Honor any target-specific overides. */ \n+      /* Honor any target-specific overrides. */ \n       if (!targetm.valid_dllimport_attribute_p (node))\n \t*no_add_attrs = true;\n "}]}