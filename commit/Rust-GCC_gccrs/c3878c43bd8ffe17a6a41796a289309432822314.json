{"sha": "c3878c43bd8ffe17a6a41796a289309432822314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4NzhjNDNiZDhmZmUxN2E2YTQxNzk2YTI4OTMwOTQzMjgyMjMxNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-08T03:47:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-08T03:47:02Z"}, "message": "Initial revision\n\nFrom-SVN: r292", "tree": {"sha": "01a4a1019f0cfb91af1fb7ec04f053c3e110a8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01a4a1019f0cfb91af1fb7ec04f053c3e110a8f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3878c43bd8ffe17a6a41796a289309432822314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3878c43bd8ffe17a6a41796a289309432822314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3878c43bd8ffe17a6a41796a289309432822314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3878c43bd8ffe17a6a41796a289309432822314/comments", "author": null, "committer": null, "parents": [{"sha": "2a4b5f3bf0cea5b5b36db724a05f850a2813b6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4b5f3bf0cea5b5b36db724a05f850a2813b6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4b5f3bf0cea5b5b36db724a05f850a2813b6a4"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "6a57ade77d60bbc98034bd5cfc3469c1f61d5743", "filename": "gcc/config/i386/gas.h", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3878c43bd8ffe17a6a41796a289309432822314/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3878c43bd8ffe17a6a41796a289309432822314/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=c3878c43bd8ffe17a6a41796a289309432822314", "patch": "@@ -0,0 +1,110 @@\n+/* Definitions for Intel 386 running system V with gnu tools\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#include \"i386.h\"\n+/* Use the bsd assembler syntax.  */\n+/* we need to do this because gas is really a bsd style assembler,\n+ * and so doesn't work well this these att-isms:\n+ *\n+ *  ASM_OUTPUT_SKIP is .set .,.+N, which isn't implemented in gas\n+ *  ASM_OUTPUT_LOCAL is done with .set .,.+N, but that can't be\n+ *   used to define bss static space\n+ *\n+ * Next is the question of whether to uses underscores.  RMS didn't\n+ * like this idea at first, but since it is now obvious that we\n+ * need this separate tm file for use with gas, at least to get\n+ * dbx debugging info, I think we should also switch to underscores.\n+ * We can keep i386v for real att style output, and the few\n+ * people who want both form will have to compile twice.\n+ */\n+\n+#include \"bsd386.h\"\n+\n+/* these come from bsd386.h, but are specific to sequent */\n+#undef DBX_NO_XREFS\n+#undef DBX_CONTIN_LENGTH\n+\n+/* By default, target has a 80387.  */\n+\n+#define TARGET_DEFAULT 1\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Di386\"\n+\n+/* Allow #sccs in preprocessor.  */\n+\n+#define SCCS_DIRECTIVE\n+\n+/* Output #ident as a .ident.  */\n+\n+#define ASM_OUTPUT_IDENT(FILE, NAME) fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME);\n+\n+/* We do not want to output SDB debugging information.  */\n+\n+#undef SDB_DEBUGGING_INFO\n+\n+/* We want to output DBX debugging information.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Implicit library calls should use memcpy, not bcopy, etc.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+#if 0  /* People say gas uses the log as the arg to .align.  */\n+/* When using gas, .align N aligns to an N-byte boundary.  */\n+\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+     if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n+#endif\n+\n+/* Align labels, etc. at 4-byte boundaries.\n+   For the 486, align to 16-byte boundary for sake of cache.  */\n+\n+#undef ASM_OUTPUT_ALIGN_CODE\n+#define ASM_OUTPUT_ALIGN_CODE(FILE)\t\t\t\\\n+     fprintf ((FILE), \"\\t.align %d,0x90\\n\",\t\t\\\n+\t      TARGET_486 ? 4 : 2);  /* Use log of 16 or log of 4 as arg.  */\n+\n+/* Align start of loop at 4-byte boundary.  */\n+\n+#undef ASM_OUTPUT_LOOP_ALIGN\n+#define ASM_OUTPUT_LOOP_ALIGN(FILE) \\\n+     fprintf ((FILE), \"\\t.align 2,0x90\\n\");  /* Use log of 4 as arg.  */\n+\f\n+/* Machines that use the AT&T assembler syntax\n+   also return floating point values in an FP register.  */\n+/* Define how to find the value returned by a function.\n+   VALTYPE is the data type of the value (as a tree).\n+   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n+   otherwise, FUNC is 0.  */\n+\n+#define VALUE_REGNO(MODE) \\\n+  (((MODE)==SFmode || (MODE)==DFmode) ? FIRST_FLOAT_REG : 0)\n+\n+/* 1 if N is a possible register number for a function value. */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N)== FIRST_FLOAT_REG)\n+\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE) \\\n+  fprintf (FILE, \"\\t.file\\t\\\"%s\\\"\\n\", dump_base_name);"}]}