{"sha": "45b999f642a531c083c982dda79fa6ad65730a7c", "node_id": "C_kwDOANBUbNoAKDQ1Yjk5OWY2NDJhNTMxYzA4M2M5ODJkZGE3OWZhNmFkNjU3MzBhN2M", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-21T14:56:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-22T15:26:22Z"}, "message": "analyzer: fix ICE on vector casts [PR104159]\n\nPR analyzer/104159 describes an ICE attempting to convert a vector_cst,\nwhich occurs when symbolically executing within a recursive call on:\n\n  _4 = BIT_FIELD_REF <w_3(D), 32, 0>;\n  _1 = VIEW_CONVERT_EXPR<T>(_4);\n\nwhere the BIT_FIELD_REF leads to a get_or_create_cast from\n  VEC<long, 8> to VEC<unsigned 4>\nwhich get_code_for_cast erroneously picks NOP_EXPR for the cast, leading\nto a bogus input to the VIEW_CONVERT_EXPR.\n\nThis patch fixes the issue by giving up on attempts to cast symbolic\nvalues of vector types, treating the result of such casts as unknowable.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104159\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_cast): Bail out if the types\n\tare the same.  Don't attempt to handle casts involving vector\n\ttypes.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104159\n\t* gcc.dg/analyzer/torture/pr104159.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "0551998d00aac3e773507d8b10959922686f51fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0551998d00aac3e773507d8b10959922686f51fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45b999f642a531c083c982dda79fa6ad65730a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b999f642a531c083c982dda79fa6ad65730a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b999f642a531c083c982dda79fa6ad65730a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b999f642a531c083c982dda79fa6ad65730a7c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1a93102b41a558f3ad49a7c66015257535c747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a93102b41a558f3ad49a7c66015257535c747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1a93102b41a558f3ad49a7c66015257535c747"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "e765e7f484f336b7c84e40e0634fd038de8bf314", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b999f642a531c083c982dda79fa6ad65730a7c/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b999f642a531c083c982dda79fa6ad65730a7c/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=45b999f642a531c083c982dda79fa6ad65730a7c", "patch": "@@ -497,6 +497,17 @@ const svalue *\n region_model_manager::get_or_create_cast (tree type, const svalue *arg)\n {\n   gcc_assert (type);\n+\n+  /* No-op if the types are the same.  */\n+  if (type == arg->get_type ())\n+    return arg;\n+\n+  /* Don't attempt to handle casts involving vector types for now.  */\n+  if (TREE_CODE (type) == VECTOR_TYPE\n+      || (arg->get_type ()\n+\t  && TREE_CODE (arg->get_type ()) == VECTOR_TYPE))\n+    return get_or_create_unknown_svalue (type);\n+\n   enum tree_code op = get_code_for_cast (type, arg->get_type ());\n   return get_or_create_unaryop (type, op, arg);\n }"}, {"sha": "1346b4b606399b1f01fc7563c5e13574283f84f5", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr104159.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b999f642a531c083c982dda79fa6ad65730a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr104159.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b999f642a531c083c982dda79fa6ad65730a7c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr104159.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr104159.c?ref=45b999f642a531c083c982dda79fa6ad65730a7c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-additional-options \"-Wno-analyzer-use-of-uninitialized-value\" } */\n+\n+typedef int __attribute__((__vector_size__(4))) T;\n+typedef unsigned __attribute__((__vector_size__(4))) U;\n+typedef unsigned __attribute__((__vector_size__(16))) V;\n+typedef unsigned long __attribute__((__vector_size__(16))) W;\n+\n+U u;\n+T t;\n+\n+void\n+foo(W w) {\n+  U u = __builtin_shufflevector((V)w, u, 0);\n+  t = (T){} + u + u;\n+  foo((W){});\n+  for (;;)\n+    ;\n+}"}]}