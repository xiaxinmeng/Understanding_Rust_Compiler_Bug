{"sha": "b2c3bcf47b9131455a7fccfaa699269ae108d76b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjM2JjZjQ3YjkxMzE0NTVhN2ZjY2ZhYTY5OTI2OWFlMTA4ZDc2Yg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-11-16T08:52:51Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2007-11-16T08:52:51Z"}, "message": "utils2.c (build_call_alloc_dealloc): Move the code retrieving an allocator return value from a super-aligned address...\n\n2007-11-16  Olivier Hainque  <hainque@adacore.com>\n\n        ada/\n        * utils2.c (build_call_alloc_dealloc) <if gnu_obj>: Move the code\n        retrieving an allocator return value from a super-aligned address from\n        here to ...\n        * trans.c (gnat_to_gnu) <case N_Free_Statement>: ... here, and don't\n        expect a super-aligned address for a fat or thin pointer.\n\n        testsuite/\n        * gnat.dg/release_unc_maxalign.adb: New test.\n\nFrom-SVN: r130221", "tree": {"sha": "40b460c86146bcdff53b9a8c9239404f72196fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b460c86146bcdff53b9a8c9239404f72196fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c3bcf47b9131455a7fccfaa699269ae108d76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3bcf47b9131455a7fccfaa699269ae108d76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c3bcf47b9131455a7fccfaa699269ae108d76b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3bcf47b9131455a7fccfaa699269ae108d76b/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "823e5f7f9fb52d8e6a9bb2c97164cc593ae18e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823e5f7f9fb52d8e6a9bb2c97164cc593ae18e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823e5f7f9fb52d8e6a9bb2c97164cc593ae18e11"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "0faaf57494685627e98794037b63796c8b6bf70d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b2c3bcf47b9131455a7fccfaa699269ae108d76b", "patch": "@@ -1,3 +1,11 @@\n+2007-11-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* utils2.c (build_call_alloc_dealloc) <if gnu_obj>: Move the code\n+\tretrieving an allocator return value from a super-aligned address from\n+\there to ...\n+\t* trans.c (gnat_to_gnu) <case N_Free_Statement>: ... here, and don't\n+\texpect a super-aligned address for a fat or thin pointer.\n+\t\n 2007-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans.c (call_to_gnu): Always set the source location on the call"}, {"sha": "449f0f7fc3a0168982653631c58bea7cd2ed07fa", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b2c3bcf47b9131455a7fccfaa699269ae108d76b", "patch": "@@ -4565,7 +4565,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  tree gnu_obj_type;\n \t  tree gnu_actual_obj_type = 0;\n \t  tree gnu_obj_size;\n-\t  int align;\n+\t  unsigned int align;\n+\t  unsigned int default_allocator_alignment\n+\t    = get_target_default_allocator_alignment () * BITS_PER_UNIT;\n \n \t  /* If this is a thin pointer, we must dereference it to create\n \t     a fat pointer, then go back below to a thin pointer.  The\n@@ -4621,6 +4623,35 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t gnu_ptr, gnu_byte_offset);\n \t    }\n \n+ \t  /* If the object was allocated from the default storage pool, the\n+ \t     alignement was greater than what the allocator provides, and this\n+ \t     is not a fat or thin pointer, what we have in gnu_ptr here is an\n+ \t     address dynamically adjusted to match the alignment requirement\n+ \t     (see build_allocator).  What we need to pass to free is the\n+ \t     initial allocator's return value, which has been stored just in\n+ \t     front of the block we have.  */\n+ \n+ \t  if (No (Procedure_To_Call (gnat_node)) && align > default_allocator_alignment\n+ \t      && ! TYPE_FAT_OR_THIN_POINTER_P (gnu_ptr_type))\n+ \t    {\n+ \t      /* We set GNU_PTR\n+ \t\t as * (void **)((void *)GNU_PTR - (void *)sizeof(void *))\n+ \t\t in two steps: */\n+ \t      \n+ \t      /* GNU_PTR (void *) = (void *)GNU_PTR - (void *)sizeof (void *))  */\n+ \t      gnu_ptr\n+ \t\t= build_binary_op (MINUS_EXPR, ptr_void_type_node,\n+ \t\t\t\t   convert (ptr_void_type_node, gnu_ptr),\n+ \t\t\t\t   convert (ptr_void_type_node,\n+ \t\t\t\t\t    TYPE_SIZE_UNIT (ptr_void_type_node)));\n+ \t      \n+ \t      /* GNU_PTR (void *) = *(void **)GNU_PTR  */\n+ \t      gnu_ptr\n+ \t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n+ \t\t\t\t  convert (build_pointer_type (ptr_void_type_node),\n+ \t\t\t\t\t   gnu_ptr));\n+ \t    }\n+ \n \t  gnu_result = build_call_alloc_dealloc (gnu_ptr, gnu_obj_size, align,\n \t\t\t\t\t\t Procedure_To_Call (gnat_node),\n \t\t\t\t\t\t Storage_Pool (gnat_node),"}, {"sha": "b8f59477af59a8afda3d251d39ef3322420138a9", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=b2c3bcf47b9131455a7fccfaa699269ae108d76b", "patch": "@@ -1873,39 +1873,7 @@ build_call_alloc_dealloc (tree gnu_obj, tree gnu_size, unsigned align,\n     }\n \n   else if (gnu_obj)\n-    {\n-      /* If the required alignement was greater than what the default\n-\t allocator guarantees, what we have in gnu_obj here is an address\n-\t dynamically adjusted to match the requirement (see build_allocator).\n-\t What we need to pass to free is the initial underlying allocator's\n-\t return value, which has been stored just in front of the block we\n-\t have.  */\n-\n-      unsigned int default_allocator_alignment\n-\t= get_target_default_allocator_alignment () * BITS_PER_UNIT;\n-\n-      if (align > default_allocator_alignment)\n-\t{\n-\t  /* We set GNU_OBJ\n-\t     as * (void **)((void *)GNU_OBJ - (void *)sizeof(void *))\n-\t     in two steps: */\n-\n-\t  /* GNU_OBJ (void *) = (void *)GNU_OBJ - (void *)sizeof (void *))  */\n-\t  gnu_obj\n-\t    = build_binary_op (MINUS_EXPR, ptr_void_type_node,\n-\t\t\t       convert (ptr_void_type_node, gnu_obj),\n-\t\t\t       convert (ptr_void_type_node,\n-\t\t\t\t\tTYPE_SIZE_UNIT (ptr_void_type_node)));\n-\n-\t  /* GNU_OBJ (void *) = *(void **)GNU_OBJ  */\n-\t  gnu_obj\n-\t    = build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t      convert (build_pointer_type (ptr_void_type_node),\n-\t\t\t\t       gnu_obj));\n-\t}\n-\n-      return build_call_1_expr (free_decl, gnu_obj);\n-    }\n+    return build_call_1_expr (free_decl, gnu_obj);\n \n   /* ??? For now, disable variable-sized allocators in the stack since\n      we can't yet gimplify an ALLOCATE_EXPR.  */"}, {"sha": "0ef30d2a02e47607b43a2acf6c487ee3fb61a9d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2c3bcf47b9131455a7fccfaa699269ae108d76b", "patch": "@@ -1,3 +1,7 @@\n+2007-11-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/release_unc_maxalign.adb: New test.\n+\n 2007-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34100"}, {"sha": "245ce2190fe9735c360f0b3976cac7186484b2a4", "filename": "gcc/testsuite/gnat.dg/release_unc_maxalign.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Ftestsuite%2Fgnat.dg%2Frelease_unc_maxalign.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3bcf47b9131455a7fccfaa699269ae108d76b/gcc%2Ftestsuite%2Fgnat.dg%2Frelease_unc_maxalign.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frelease_unc_maxalign.adb?ref=b2c3bcf47b9131455a7fccfaa699269ae108d76b", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do run }\n+\n+with Ada.Unchecked_Deallocation;\n+\n+procedure Release_UNC_Maxalign is\n+\n+   type List is array (Natural range <>) of Integer;\n+   for List'Alignment use Standard'Maximum_Alignment;\n+\n+   type List_Access is access all List;\n+\n+   procedure Release is new Ada.Unchecked_Deallocation\n+     (Object => List, Name => List_Access);\n+\n+   My_List : List_Access;\n+begin\n+   My_List := new List (1 .. 3);\n+   Release (My_List);\n+end;"}]}