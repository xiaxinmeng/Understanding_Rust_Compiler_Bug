{"sha": "e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjNGUyYmM1YmRjMzEwMDM5OTYwNGE0NjJjMmQ5NGFhZWU1YmE4ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:34:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:34:21Z"}, "message": "[multiple changes]\n\n2014-07-30  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-tarest.adb, s-tarest.ads: Fix comments.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb, checks.adb, sem_util.adb, sem_util.ads, sem_attr.adb:\n\tChange No_Scalar_Parts predicate to Scalar_Part_Present and\n\tinvert sense of test. This avoids the \"not No_xxx\" situation\n\twhich is always ugly.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): When generating code for\n\tan internal subprogram the expansion uses the location of the\n\tcall, so that gdb can skip over it. In GNATprove mode we want to\n\tpreserve slocs of original subprogram when expanding an inlined\n\tcall, to obtain better warnings, even though subprogram appears\n\tnot to come from source if it is the inlining of a subprogram\n\tbody without a previous spec.\n\n2014-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Reject array\n\ttypes with atomic components.\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* Make-generated.in: Remove now unnecessary targets after s-oscons\n\treorg.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): Use ultimate alias\n\tof callee when available.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): To check whether\n\tan expression function is a completion, use the specification of\n\tthe previous declaration, not its entity, which may be internally\n\tgenerated in an inlined context.\n\nFrom-SVN: r213254", "tree": {"sha": "6f1882ed654265e35e0b689a64530af966f9b2ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1882ed654265e35e0b689a64530af966f9b2ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/comments", "author": null, "committer": null, "parents": [{"sha": "f6bcdb5e058773874be9c63386cdbc3b9ff1581e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bcdb5e058773874be9c63386cdbc3b9ff1581e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bcdb5e058773874be9c63386cdbc3b9ff1581e"}], "stats": {"total": 193, "additions": 132, "deletions": 61}, "files": [{"sha": "4b379a2c8f9bd7fcfb151b6c1930d7487e0acc02", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -1,3 +1,46 @@\n+2014-07-30  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tarest.adb, s-tarest.ads: Fix comments.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb, checks.adb, sem_util.adb, sem_util.ads, sem_attr.adb:\n+\tChange No_Scalar_Parts predicate to Scalar_Part_Present and\n+\tinvert sense of test. This avoids the \"not No_xxx\" situation\n+\twhich is always ugly.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): When generating code for\n+\tan internal subprogram the expansion uses the location of the\n+\tcall, so that gdb can skip over it. In GNATprove mode we want to\n+\tpreserve slocs of original subprogram when expanding an inlined\n+\tcall, to obtain better warnings, even though subprogram appears\n+\tnot to come from source if it is the inlining of a subprogram\n+\tbody without a previous spec.\n+\n+2014-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Reject array\n+\ttypes with atomic components.\n+\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Make-generated.in: Remove now unnecessary targets after s-oscons\n+\treorg.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Use ultimate alias\n+\tof callee when available.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): To check whether\n+\tan expression function is a completion, use the specification of\n+\tthe previous declaration, not its entity, which may be internally\n+\tgenerated in an inlined context.\n+\n 2014-07-30  Doug Rupp  <rupp@adacore.com>\n \n \t* adaint.c (__gnat_tmp_name) [__ANDROID__]: Default to putting"}, {"sha": "c8482876f2e34e7404723a81712489a588389f3e", "filename": "gcc/ada/Make-generated.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2FMake-generated.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2FMake-generated.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-generated.in?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -66,12 +66,6 @@ $(ADA_GEN_SUBDIR)/stamp-nmake: $(ADA_GEN_SUBDIR)/sinfo.ads $(ADA_GEN_SUBDIR)/nma\n \t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/nmake/nmake.adb $(ADA_GEN_SUBDIR)/nmake.adb\n \ttouch $(ADA_GEN_SUBDIR)/stamp-nmake\n \n-$(ADA_GEN_SUBDIR)/bldtools/oscons/xoscons : $(ADA_GEN_SUBDIR)/xoscons.adb $(ADA_GEN_SUBDIR)/xutil.ads $(ADA_GEN_SUBDIR)/xutil.adb\n-\t-$(MKDIR) $(ADA_GEN_SUBDIR)/bldtools/oscons\n-\t$(RM) $(addprefix $(ADA_GEN_SUBDIR)/bldtools/oscons/,$(notdir $^))\n-\t$(CP) $^ $(ADA_GEN_SUBDIR)/bldtools/oscons\n-\tcd $(ADA_GEN_SUBDIR)/bldtools/oscons ; gnatmake -q xoscons\n-\n $(ADA_GEN_SUBDIR)/sdefault.adb: $(ADA_GEN_SUBDIR)/stamp-sdefault ; @true\n $(ADA_GEN_SUBDIR)/stamp-sdefault : $(srcdir)/version.c Makefile\n \t$(ECHO) \"pragma Style_Checks (Off);\" >tmp-sdefault.adb"}, {"sha": "d9a6c9d253729d0732d95327c7f7bfea160de00a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -2402,13 +2402,18 @@ package body Checks is\n          Nam   : Name_Id;\n \n       begin\n-         --  Pick the proper version of 'Valid depending on the type of the\n-         --  context. If the context is not eligible for such a check, return.\n+         --  For scalars, generate 'Valid test\n \n          if Is_Scalar_Type (Typ) then\n             Nam := Name_Valid;\n-         elsif not No_Scalar_Parts (Typ) then\n+\n+         --  For any non-scalar with scalar parts, generate 'Valid_Scalars test\n+\n+         elsif Scalar_Part_Present (Typ) then\n             Nam := Name_Valid_Scalars;\n+\n+         --  No test needed for other cases (no scalars to test)\n+\n          else\n             return;\n          end if;"}, {"sha": "22b5e26f77371823834541d9879feb0808014677", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -4006,11 +4006,13 @@ package body Exp_Aggr is\n \n       --    1. N consists of a single OTHERS choice, possibly recursively\n \n-      --    2. The component type is discrete\n+      --    2. The array type has no atomic components\n \n-      --    3. The component size is a multiple of Storage_Unit\n+      --    3. The component type is discrete\n \n-      --    4. The component size is exactly Storage_Unit or the expression is\n+      --    4. The component size is a multiple of Storage_Unit\n+\n+      --    5. The component size is exactly Storage_Unit or the expression is\n       --       an integer whose unsigned value is the binary concatenation of\n       --       K times its remainder modulo 2**Storage_Unit.\n \n@@ -4035,6 +4037,10 @@ package body Exp_Aggr is\n                return False;\n             end if;\n \n+            if Has_Atomic_Components (Ctyp) then\n+               return False;\n+            end if;\n+\n             Expr := Expression (First (Component_Associations (Expr)));\n \n             for J in 1 .. Number_Dimensions (Ctyp) - 1 loop\n@@ -4048,6 +4054,9 @@ package body Exp_Aggr is\n             end loop;\n \n             Ctyp := Component_Type (Ctyp);\n+            if Is_Atomic (Ctyp) then\n+               return False;\n+            end if;\n          end loop;\n \n          if not Is_Discrete_Type (Ctyp)"}, {"sha": "f8cfd4ca93a3bf06599197727a5cb9d04aa6a05d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -6358,7 +6358,7 @@ package body Exp_Attr is\n          --  We only do this for arrays whose component type needs checking\n \n          elsif Is_Array_Type (Ftyp)\n-           and then not No_Scalar_Parts (Component_Type (Ftyp))\n+           and then Scalar_Part_Present (Component_Type (Ftyp))\n          then\n             Rewrite (N,\n               Make_Function_Call (Loc,\n@@ -6372,7 +6372,7 @@ package body Exp_Attr is\n          --  Valid_Scalars as appropriate to all relevant components.\n \n          elsif (Is_Record_Type (Ptyp) or else Has_Discriminants (Ptyp))\n-           and then not No_Scalar_Parts (Ptyp)\n+           and then Scalar_Part_Present (Ptyp)\n          then\n             declare\n                C : Entity_Id;\n@@ -6383,7 +6383,7 @@ package body Exp_Attr is\n                X := New_Occurrence_Of (Standard_True, Loc);\n                C := First_Component_Or_Discriminant (Ptyp);\n                while Present (C) loop\n-                  if No_Scalar_Parts (Etype (C)) then\n+                  if not Scalar_Part_Present (Etype (C)) then\n                      goto Continue;\n                   elsif Is_Scalar_Type (Etype (C)) then\n                      A := Name_Valid;"}, {"sha": "57a663d60144ee04a501860b6b0120f4dae5d30e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -2955,7 +2955,8 @@ package body Inline is\n       --  expansion is skipped by the \"next\" command in gdb.\n       --  Same processing for a subprogram in a predefined file, e.g.\n       --  Ada.Tags. If Debug_Generated_Code is true, suppress this change to\n-      --  simplify our own development.\n+      --  simplify our own development. Same in in GNATprove mode, to ensure\n+      --  that warnings and diagnostics point to the proper location.\n \n       procedure Reset_Dispatching_Calls (N : Node_Id);\n       --  In subtree N search for occurrences of dispatching calls that use the\n@@ -3932,7 +3933,10 @@ package body Inline is\n       Replace_Formals (Blk);\n       Set_Parent (Blk, N);\n \n-      if not Comes_From_Source (Subp) or else Is_Predef then\n+      if GNATprove_Mode then\n+         null;\n+\n+      elsif not Comes_From_Source (Subp) or else Is_Predef then\n          Reset_Slocs (Blk);\n       end if;\n "}, {"sha": "c746ab9e17c57f7be4a3e285d84763860a2a7c34", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -126,7 +126,7 @@ package body System.Tasking.Restricted.Stages is\n       Elaborated    : Access_Boolean;\n       Task_Image    : String;\n       Created_Task  : Task_Id);\n-   --  Code shared between Create_Restricted_Task_Concurrent and\n+   --  Code shared between Create_Restricted_Task (the concurrent version) and\n    --  Create_Restricted_Task_Sequential. See comment of the former in the\n    --  specification of this package.\n "}, {"sha": "90c1f2cc13473b17ce310fdbeaa61de40b98881d", "filename": "gcc/ada/s-tarest.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -196,10 +196,9 @@ package System.Tasking.Restricted.Stages is\n    --  This must be called to create a new task, when the sequential partition\n    --  elaboration policy is used.\n    --\n-   --  The parameters are the same as Create_Restricted_Task_Concurrent,\n-   --  except there is no Chain parameter (for the activation chain), as there\n-   --  is only one global activation chain, which is declared in the body of\n-   --  this package.\n+   --  The parameters are the same as Create_Restricted_Task except there is\n+   --  no Chain parameter (for the activation chain), as there is only one\n+   --  global activation chain, which is declared in the body of this package.\n \n    procedure Activate_Restricted_Tasks\n      (Chain_Access : Activation_Chain_Access);"}, {"sha": "bc4f1e21aacb8f08cf35a3496efa30995d81c7e2", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -6590,7 +6590,7 @@ package body Sem_Attr is\n          Check_E0;\n          Check_Object_Reference (P);\n \n-         if No_Scalar_Parts (P_Type) then\n+         if not Scalar_Part_Present (P_Type) then\n             Error_Attr_P (\"??attribute % always True, no scalars to check\");\n          end if;\n "}, {"sha": "a7cfce25a7f0520655c6a1f82cfbdf94f3222a6b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -353,7 +353,12 @@ package body Sem_Ch6 is\n          Analyze (New_Body);\n          Set_Is_Inlined (Prev);\n \n-      elsif Present (Prev) and then Comes_From_Source (Prev) then\n+      --  If the expression function is a completion, the previous declaration\n+      --  must come from source. We know already that appears in the current\n+      --  scope. The entity itself may be internally created if within a body\n+      --  to be inlined.\n+\n+      elsif Present (Prev) and then Comes_From_Source (Parent (Prev)) then\n          Set_Has_Completion (Prev, False);\n \n          --  An expression function that is a completion freezes the"}, {"sha": "10edd1a77e9268017ccc57bbcd1a75f314507e15", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -6209,11 +6209,22 @@ package body Sem_Res is\n \n       if GNATprove_Mode\n         and then Is_Overloadable (Nam)\n-        and then Nkind (Unit_Declaration_Node (Nam)) = N_Subprogram_Declaration\n-        and then Present (Body_To_Inline (Unit_Declaration_Node (Nam)))\n         and then SPARK_Mode = On\n       then\n-         Expand_Inlined_Call (N, Nam, Nam);\n+         --  Retrieve the body to inline from the ultimate alias of Nam, if\n+         --  there is one, otherwise calls that should be inlined end up not\n+         --  being inlined.\n+\n+         declare\n+            Nam_Alias : constant Entity_Id := Ultimate_Alias (Nam);\n+            Decl : constant Node_Id := Unit_Declaration_Node (Nam_Alias);\n+         begin\n+            if Nkind (Decl) = N_Subprogram_Declaration\n+              and then Present (Body_To_Inline (Decl))\n+            then\n+               Expand_Inlined_Call (N, Nam_Alias, Nam);\n+            end if;\n+         end;\n       end if;\n \n       Warn_On_Overlapping_Actuals (Nam, N);"}, {"sha": "916942a6bd06df860ec04b6a6cc76a8e1cf50406", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -13818,34 +13818,6 @@ package body Sem_Util is\n       Actual_Id := Next_Actual (Actual_Id);\n    end Next_Actual;\n \n-   ---------------------\n-   -- No_Scalar_Parts --\n-   ---------------------\n-\n-   function No_Scalar_Parts (T : Entity_Id) return Boolean is\n-      C : Entity_Id;\n-\n-   begin\n-      if Is_Scalar_Type (T) then\n-         return False;\n-\n-      elsif Is_Array_Type (T) then\n-         return No_Scalar_Parts (Component_Type (T));\n-\n-      elsif Is_Record_Type (T) or else Has_Discriminants (T) then\n-         C := First_Component_Or_Discriminant (T);\n-         while Present (C) loop\n-            if not No_Scalar_Parts (Etype (C)) then\n-               return False;\n-            else\n-               Next_Component_Or_Discriminant (C);\n-            end if;\n-         end loop;\n-      end if;\n-\n-      return True;\n-   end No_Scalar_Parts;\n-\n    -----------------------\n    -- Normalize_Actuals --\n    -----------------------\n@@ -15805,6 +15777,34 @@ package body Sem_Util is\n       end if;\n    end Save_SPARK_Mode_And_Set;\n \n+   -------------------------\n+   -- Scalar_Part_Present --\n+   -------------------------\n+\n+   function Scalar_Part_Present (T : Entity_Id) return Boolean is\n+      C : Entity_Id;\n+\n+   begin\n+      if Is_Scalar_Type (T) then\n+         return True;\n+\n+      elsif Is_Array_Type (T) then\n+         return Scalar_Part_Present (Component_Type (T));\n+\n+      elsif Is_Record_Type (T) or else Has_Discriminants (T) then\n+         C := First_Component_Or_Discriminant (T);\n+         while Present (C) loop\n+            if Scalar_Part_Present (Etype (C)) then\n+               return True;\n+            else\n+               Next_Component_Or_Discriminant (C);\n+            end if;\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Scalar_Part_Present;\n+\n    ------------------------\n    -- Scope_Is_Transient --\n    ------------------------"}, {"sha": "d9bf0bc0b75f77ec9855da348ea0575f253558dc", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "patch": "@@ -1582,11 +1582,6 @@ package Sem_Util is\n    --  Note that the result produced is always an expression, not a parameter\n    --  association node, even if named notation was used.\n \n-   function No_Scalar_Parts (T : Entity_Id) return Boolean;\n-   --  Tests if type T can be determined at compile time to have no scalar\n-   --  parts in the sense of the Valid_Scalars attribute. Returns True if\n-   --  this is the case, meaning that the result of Valid_Scalars is True.\n-\n    procedure Normalize_Actuals\n      (N       : Node_Id;\n       S       : Entity_Id;\n@@ -1774,6 +1769,12 @@ package Sem_Util is\n    --  (if any) of a package or a subprogram denoted by Context. This routine\n    --  must be used in tandem with Restore_SPARK_Mode.\n \n+   function Scalar_Part_Present (T : Entity_Id) return Boolean;\n+   --  Tests if type T can be determined at compile time to have at least one\n+   --  scalar part in the sense of the Valid_Scalars attribute. Returns True if\n+   --  this is the case, and False if no scalar parts are present (meaning that\n+   --  the result of Valid_Scalars applied to T is always vacuously True).\n+\n    function Scope_Within_Or_Same (Scope1, Scope2 : Entity_Id) return Boolean;\n    --  Determines if the entity Scope1 is the same as Scope2, or if it is\n    --  inside it, where both entities represent scopes. Note that scopes"}]}