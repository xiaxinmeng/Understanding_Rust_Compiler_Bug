{"sha": "c7100843831147a034fe37d231c54ac53ceace45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxMDA4NDM4MzExNDdhMDM0ZmUzN2QyMzFjNTRhYzUzY2VhY2U0NQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-07T18:48:31Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-07T20:06:43Z"}, "message": "coroutines: Improve error recovery [PR94817, PR94829].\n\nWhen we have completely missing key information (e.g. the\ncoroutine_traits) or a partially transformed function body, we\nneed to try and balance returning useful information about\nfailures with the possibility that some part of the diagnostics\nmachinery or following code will not be able to handle the\nstate.\n\nThe PRs (and revised testcase) point to cases where that processing\nhas failed.\n\nThis revises the process to avoid special handling for the\nramp, and falls back on the same code used for regular function\nfails.\n\nThere are test-cases (in addition to the ones for the PRs) that now\ncover all early exit points [where the transforms are considered\nto have failed in a manner that does not allow compilation to\ncontinue].\n\ngcc/cp/ChangeLog:\n\n2020-05-07  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94817\n\tPR c++/94829\n\t* coroutines.cc (morph_fn_to_coro): Set unformed outline\n\tfunctions to error_mark_node.  For early error returns suppress\n\twarnings about missing ramp return values.  Fix reinstatement\n\tof the function body on pre-existing initial error.\n\t* decl.c (finish_function): Use the normal error path for fails\n\tin the ramp function, do not try to compile the helpers if the\n\ttransform fails.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-07  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94817\n\tPR c++/94829\n\t* g++.dg/coroutines/coro-missing-final-suspend.C: New test.\n\t* g++.dg/coroutines/coro-missing-initial-suspend.C: New test.\n\t* g++.dg/coroutines/coro-missing-promise-yield.C: Check for\n\tcontinuation of compilation.\n\t* g++.dg/coroutines/coro-missing-promise.C: Likewise.\n\t* g++.dg/coroutines/coro-missing-ret-value.C: Likewise\n\t* g++.dg/coroutines/coro-missing-ret-void.C: Likewise\n\t* g++.dg/coroutines/coro-missing-ueh-3.C: Likewise\n\t* g++.dg/coroutines/pr94817.C: New test.\n\t* g++.dg/coroutines/pr94829.C: New test.", "tree": {"sha": "cfd8d1b58df219af0386ac27e2e3dfabd17b7226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd8d1b58df219af0386ac27e2e3dfabd17b7226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7100843831147a034fe37d231c54ac53ceace45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7100843831147a034fe37d231c54ac53ceace45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7100843831147a034fe37d231c54ac53ceace45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7100843831147a034fe37d231c54ac53ceace45/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d9467714a6dfcb8791037e502f84df927d0084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d9467714a6dfcb8791037e502f84df927d0084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d9467714a6dfcb8791037e502f84df927d0084"}], "stats": {"total": 211, "additions": 195, "deletions": 16}, "files": [{"sha": "0c19a6fe47c6857f2b5f0e1d747651c33035cba6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -1,3 +1,15 @@\n+2020-05-07  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94817\n+\tPR c++/94829\n+\t* coroutines.cc (morph_fn_to_coro): Set unformed outline\n+\tfunctions to error_mark_node.  For early error returns suppress\n+\twarnings about missing ramp return values.  Fix reinstatement\n+\tof the function body on pre-existing initial error.\n+\t* decl.c (finish_function): Use the normal error path for fails\n+\tin the ramp function, do not try to compile the helpers if the\n+\ttransform fails.\n+\n 2020-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94590 - Detect long double -> double narrowing."}, {"sha": "8f0f2d5960d510cf43fd99d4c4b11606ccc097e6", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -3540,14 +3540,21 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n {\n   gcc_checking_assert (orig && TREE_CODE (orig) == FUNCTION_DECL);\n \n+  *resumer = error_mark_node;\n+  *destroyer = error_mark_node;\n   if (!coro_function_valid_p (orig))\n-    return false;\n+    {\n+      /* For early errors, we do not want a diagnostic about the missing\n+\t ramp return value, since the user cannot fix this - a 'return' is\n+\t not allowed in a coroutine.  */\n+      TREE_NO_WARNING (orig) = true;\n+      return false;\n+    }\n \n   /* We can't validly get here with an empty statement list, since there's no\n      way for the FE to decide it's a coroutine in the absence of any code.  */\n   tree fnbody = pop_stmt_list (DECL_SAVED_TREE (orig));\n-  if (fnbody == NULL_TREE)\n-    return false;\n+  gcc_checking_assert (fnbody != NULL_TREE);\n \n   /* We don't have the locus of the opening brace - it's filled in later (and\n      there doesn't really seem to be any easy way to get at it).\n@@ -3561,7 +3568,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   if (body_start == NULL_TREE || body_start == error_mark_node)\n     {\n       DECL_SAVED_TREE (orig) = push_stmt_list ();\n-      append_to_statement_list (DECL_SAVED_TREE (orig), &fnbody);\n+      append_to_statement_list (fnbody, &DECL_SAVED_TREE (orig));\n+      /* Suppress warnings about the missing return value.  */\n+      TREE_NO_WARNING (orig) = true;\n       return false;\n     }\n \n@@ -3630,13 +3639,21 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n      the coroutine promise.  */\n   tree initial_await = build_init_or_final_await (fn_start, false);\n   if (initial_await == error_mark_node)\n-    return false;\n+    {\n+      /* Suppress warnings about the missing return value.  */\n+      TREE_NO_WARNING (orig) = true;\n+      return false;\n+    }\n   /* The type of the frame var for this is the type of its temp proxy.  */\n   tree initial_suspend_type = TREE_TYPE (TREE_OPERAND (initial_await, 1));\n \n   tree final_await = build_init_or_final_await (fn_start, true);\n   if (final_await == error_mark_node)\n-    return false;\n+    {\n+      /* Suppress warnings about the missing return value.  */\n+      TREE_NO_WARNING (orig) = true;\n+      return false;\n+    }\n \n   /* The type of the frame var for this is the type of its temp proxy.  */\n   tree final_suspend_type = TREE_TYPE (TREE_OPERAND (final_await, 1));\n@@ -4219,6 +4236,8 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n     {\n       BIND_EXPR_BODY (ramp_bind) = pop_stmt_list (ramp_body);\n       DECL_SAVED_TREE (orig) = newbody;\n+      /* Suppress warnings about the missing return value.  */\n+      TREE_NO_WARNING (orig) = true;\n       return false;\n     }\n "}, {"sha": "73a06a60786e73b81fad14535c6b57fab8b00a77", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -16886,6 +16886,7 @@ finish_function (bool inline_p)\n   bool coro_p = flag_coroutines\n \t\t&& !processing_template_decl\n \t\t&& DECL_COROUTINE_P (fndecl);\n+  bool coro_emit_helpers = false;\n \n   /* When we get some parse errors, we can end up without a\n      current_function_decl, so cope.  */\n@@ -16914,18 +16915,16 @@ finish_function (bool inline_p)\n \n   if (coro_p)\n     {\n-      if (!morph_fn_to_coro (fndecl, &resumer, &destroyer))\n-\t{\n-\t  DECL_SAVED_TREE (fndecl) = pop_stmt_list (DECL_SAVED_TREE (fndecl));\n-\t  poplevel (1, 0, 1);\n-\t  DECL_SAVED_TREE (fndecl) = error_mark_node;\n-\t  return fndecl;\n-\t}\n+      /* Only try to emit the coroutine outlined helper functions if the\n+\t transforms succeeded.  Otherwise, treat errors in the same way as\n+\t a regular function.  */\n+      coro_emit_helpers = morph_fn_to_coro (fndecl, &resumer, &destroyer);\n \n       /* We should handle coroutine IFNs in middle end lowering.  */\n       cfun->coroutine_component = true;\n \n-      if (use_eh_spec_block (fndecl))\n+      /* Do not try to process the ramp's EH unless outlining succeeded.  */\n+      if (coro_emit_helpers && use_eh_spec_block (fndecl))\n \tfinish_eh_spec_block (TYPE_RAISES_EXCEPTIONS\n \t\t\t      (TREE_TYPE (fndecl)),\n \t\t\t      current_eh_spec_block);\n@@ -17174,8 +17173,9 @@ finish_function (bool inline_p)\n       && !DECL_OMP_DECLARE_REDUCTION_P (fndecl))\n     cp_genericize (fndecl);\n \n-  /* Emit the resumer and destroyer functions now.  */\n-  if (coro_p)\n+  /* Emit the resumer and destroyer functions now, providing that we have\n+     not encountered some fatal error.  */\n+  if (coro_emit_helpers)\n     {\n       emit_coro_helper (resumer);\n       emit_coro_helper (destroyer);"}, {"sha": "61670c97729124e1cb631fbfb2a442eca5869557", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -1,3 +1,18 @@\n+2020-05-07  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94817\n+\tPR c++/94829\n+\t* g++.dg/coroutines/coro-missing-final-suspend.C: New test.\n+\t* g++.dg/coroutines/coro-missing-initial-suspend.C: New test.\n+\t* g++.dg/coroutines/coro-missing-promise-yield.C: Check for\n+\tcontinuation of compilation.\n+\t* g++.dg/coroutines/coro-missing-promise.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-ret-value.C: Likewise\n+\t* g++.dg/coroutines/coro-missing-ret-void.C: Likewise\n+\t* g++.dg/coroutines/coro-missing-ueh-3.C: Likewise\n+\t* g++.dg/coroutines/pr94817.C: New test.\n+\t* g++.dg/coroutines/pr94829.C: New test.\n+\n 2020-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94590 - Detect long double -> double narrowing."}, {"sha": "6a0878c1269afd7616f1f60c26216888864a3c67", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-final-suspend.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-final-suspend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-final-suspend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-final-suspend.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -0,0 +1,19 @@\n+//  { dg-additional-options \"-fsyntax-only -w\" }\n+#include \"coro.h\"\n+\n+// Check diagnostic return from missing promise initial suspend entry.\n+\n+#define MISSING_FINAL_SUSPEND\n+#include \"coro1-ret-int-yield-int.h\"\n+\n+coro1\n+my_coro () // { dg-error {no member named 'final_suspend' in} }\n+{\n+  co_return 0;\n+}\n+\n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};"}, {"sha": "c5b88ff434a8fd4fe2dfc9246e08d649e4ef42e9", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-initial-suspend.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-initial-suspend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-initial-suspend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-initial-suspend.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -0,0 +1,19 @@\n+//  { dg-additional-options \"-fsyntax-only -w\" }\n+#include \"coro.h\"\n+\n+// Check diagnostic return from missing promise initial suspend entry.\n+\n+#define MISSING_INITIAL_SUSPEND\n+#include \"coro1-ret-int-yield-int.h\"\n+\n+coro1\n+my_coro () // { dg-error {no member named 'initial_suspend' in} }\n+{\n+  co_return 0;\n+}\n+\n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};"}, {"sha": "a85a4d54bbe9d6be649666c758ac9efb9e3771cd", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-promise-yield.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise-yield.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise-yield.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise-yield.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -27,6 +27,12 @@ bar ()\n   co_return 0;\n }\n \n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};\n+\n int main (int ac, char *av[]) {\n   MissingPromiseYield x = bar ();\n   return 0;"}, {"sha": "834cf1209cd5b0017305454b51a7da400b4758ee", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-promise.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -16,3 +16,9 @@ bar ()\n   co_yield 22; // { dg-error {unable to find the promise type for this coroutine} }\n   co_return 0;\n }\n+\n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};"}, {"sha": "f745fa9c852e6a633198d10397bfeebb8adc0c83", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-ret-value.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-value.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-value.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-value.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -28,6 +28,12 @@ bar ()\n   co_return 6174; // { dg-error {no member named 'return_value' in} }\n }\n \n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};\n+\n int main (int ac, char *av[]) {\n   MissingRetValue x = bar ();\n   return 0;"}, {"sha": "8639a9d4f769f9b43235142b9a1dbfd8cfcf95c3", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-ret-void.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-void.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-void.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ret-void.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -28,6 +28,12 @@ bar ()\n   co_return; // { dg-error \"no member named .return_void. in\" }\n }\n \n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};\n+\n int main (int ac, char *av[]) {\n   MissingRetVoid x = bar ();\n   return 0;"}, {"sha": "36bd7da499187e034f0eca4edc9c9aa2ffe97c70", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-ueh-3.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ueh-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ueh-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-ueh-3.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -12,6 +12,12 @@ bar ()\n   co_return;\n }\n \n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};\n+\n int main (int ac, char *av[]) {\n   MissingUEH x = bar ();\n   return 0;"}, {"sha": "7cf5052592453e161311b65a57763c66afdad3bd", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-ret-int-yield-int.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -99,14 +99,20 @@ struct coro1 {\n     return handle_type::from_promise (*this);\n   }\n \n+#ifdef MISSING_INITIAL_SUSPEND\n+#else\n   auto initial_suspend () {\n     PRINT (\"get initial_suspend (always)\");\n     return suspend_always_prt{};\n   }\n+#endif\n+#ifdef MISSING_FINAL_SUSPEND\n+#else\n   auto final_suspend () {\n     PRINT (\"get final_suspend (always)\");\n     return suspend_always_prt{};\n   }\n+#endif\n \n #ifdef USE_AWAIT_TRANSFORM\n "}, {"sha": "8f667bb942b48a60f19cd5c55a8ca239f90c98cb", "filename": "gcc/testsuite/g++.dg/coroutines/pr94817.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94817.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94817.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94817.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -0,0 +1,10 @@\n+\n+void no_coroutine_traits() {\n+  co_await 4; // { dg-error {coroutines require a traits template\\; cannot find 'std::coroutine_traits'} }\n+}\n+\n+// check we have not messed up continuation of the compilation.\n+template <class... Args>\n+struct void_t_imp {\n+  using type = void;\n+};"}, {"sha": "289c2802273fd8d0d8856678efe53d488c2a8725", "filename": "gcc/testsuite/g++.dg/coroutines/pr94829.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94829.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7100843831147a034fe37d231c54ac53ceace45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94829.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94829.C?ref=c7100843831147a034fe37d231c54ac53ceace45", "patch": "@@ -0,0 +1,49 @@\n+\n+namespace std::experimental {\n+template <typename R, typename... T> struct coroutine_traits {\n+  using promise_type = typename R::promise_type;\n+};\n+\n+template <class Promise = void> struct coroutine_handle;\n+template <> struct coroutine_handle<void> {\n+  static coroutine_handle from_address(void *) noexcept;\n+  coroutine_handle() = default;\n+  template <class PromiseType>\n+  coroutine_handle(coroutine_handle<PromiseType>) noexcept;\n+};\n+template <class Promise> struct coroutine_handle : coroutine_handle<void> {\n+  coroutine_handle() = default;\n+  static coroutine_handle from_address(void *) noexcept;\n+};\n+}\n+\n+struct suspend_always {\n+  bool await_ready() noexcept;\n+  void await_suspend(std::experimental::coroutine_handle<>) noexcept;\n+  void await_resume() noexcept;\n+};\n+\n+struct Task {\n+  struct promise_type {\n+    Task get_return_object();\n+    void return_void() {}\n+    suspend_always initial_suspend() noexcept;\n+    suspend_always final_suspend() noexcept;\n+    void unhandled_exception() noexcept;\n+  };\n+};\n+\n+template <typename _AwrT> auto SyncAwait(_AwrT &&A) {\n+  if (!A.await_ready()) {\n+    auto AwaitAsync = [&]() -> Task {\n+      try { (void)(co_await A); } catch (...) {} // { dg-error {coroutines require a traits template; cannot find 'std::coroutine_traits'} }\n+    };\n+    Task t = AwaitAsync();\n+  }\n+  return A.await_resume();\n+}\n+\n+void f() {\n+  suspend_always test;\n+  SyncAwait(test);\n+}"}]}