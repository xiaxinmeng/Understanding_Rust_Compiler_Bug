{"sha": "efdc5d916bbc8c31a1cd1027d38de2190278a41a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkYzVkOTE2YmJjOGMzMWExY2QxMDI3ZDM4ZGUyMTkwMjc4YTQxYQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-03-31T16:06:56Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-03-31T16:06:56Z"}, "message": "t-darwin (LIB2FUNCS_STATIC_EXTRA): Add darwin-fpsave.asm, darwin-vecsave.asm, and darwin-world.asm.\n\n2004-03-21  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA):\n        Add darwin-fpsave.asm, darwin-vecsave.asm,\n        and darwin-world.asm.\n        (TARGET_LIBGCC2_CFLAGS): Add -Wa,-force_cpusubtype_ALL\n        as the asm files contain altivec instructions.\n        * config/rs6000/darwin-fpsave.asm: New file.\n        * config/rs6000/darwin-vecsave.asm: New file.\n        * config/rs6000/darwin-world.asm: New file.\n\nFrom-SVN: r80251", "tree": {"sha": "f239ab86891f9bf96017bf9e40de453a194088ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f239ab86891f9bf96017bf9e40de453a194088ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efdc5d916bbc8c31a1cd1027d38de2190278a41a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdc5d916bbc8c31a1cd1027d38de2190278a41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdc5d916bbc8c31a1cd1027d38de2190278a41a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdc5d916bbc8c31a1cd1027d38de2190278a41a/comments", "author": null, "committer": null, "parents": [{"sha": "5fece1829e883e71ebad241cb72c01be943d698e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fece1829e883e71ebad241cb72c01be943d698e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fece1829e883e71ebad241cb72c01be943d698e"}], "stats": {"total": 547, "additions": 546, "deletions": 1}, "files": [{"sha": "cb497e589e203dc9c4673434eb7fbdb16424d172", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efdc5d916bbc8c31a1cd1027d38de2190278a41a", "patch": "@@ -1,3 +1,14 @@\n+2004-03-21  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA):\n+\tAdd darwin-fpsave.asm, darwin-vecsave.asm,\n+\tand darwin-world.asm.\n+\t(TARGET_LIBGCC2_CFLAGS): Add -Wa,-force_cpusubtype_ALL\n+\tas the asm files contain altivec instructions.\n+\t* config/rs6000/darwin-fpsave.asm: New file.\n+\t* config/rs6000/darwin-vecsave.asm: New file.\n+\t* config/rs6000/darwin-world.asm: New file.\n+\n 2004-03-31  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gengtype-yacc.y (option, stringseq): Add missing"}, {"sha": "c8c646b09dba07a576a8a57ecd29d1da3d1c829f", "filename": "gcc/config/rs6000/darwin-fpsave.asm", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm?ref=efdc5d916bbc8c31a1cd1027d38de2190278a41a", "patch": "@@ -0,0 +1,100 @@\n+/*  This file contains the floating-point save and restore routines.\n+ *\n+ *   Copyright (C) 2004 Free Software Foundation, Inc.\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *  As a special exception, if you link this library with files\n+ *  compiled with GCC to produce an executable, this does not cause the\n+ *  resulting executable to be covered by the GNU General Public License.\n+ *  This exception does not however invalidate any other reasons why the\n+ *  executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* THE SAVE AND RESTORE ROUTINES CAN HAVE ONLY ONE GLOBALLY VISIBLE\n+   ENTRY POINT - callers have to jump to \"saveFP+60\" to save f29..f31,\n+   for example.  For FP reg saves/restores, it takes one instruction\n+   (4 bytes) to do the operation; for Vector regs, 2 instructions are\n+   required (8 bytes.)\n+\n+   MORAL: DO NOT MESS AROUND WITH THESE FUNCTIONS!  */\n+\n+.text\n+\t.align 2\n+\n+/* saveFP saves R0 -- assumed to be the callers LR -- to 8(R1).  */\n+\n+.private_extern saveFP\n+saveFP:\n+\tstfd f14,-144(r1)\n+\tstfd f15,-136(r1)\n+\tstfd f16,-128(r1)\n+\tstfd f17,-120(r1)\n+\tstfd f18,-112(r1)\n+\tstfd f19,-104(r1)\n+\tstfd f20,-96(r1)\n+\tstfd f21,-88(r1)\n+\tstfd f22,-80(r1)\n+\tstfd f23,-72(r1)\n+\tstfd f24,-64(r1)\n+\tstfd f25,-56(r1)\n+\tstfd f26,-48(r1)\n+\tstfd f27,-40(r1)\n+\tstfd f28,-32(r1)\n+\tstfd f29,-24(r1)\n+\tstfd f30,-16(r1)\n+\tstfd f31,-8(r1)\n+\tstw  r0,8(r1)\n+\tblr\n+\n+/* restFP restores the caller`s LR from 8(R1).  Note that the code for\n+   this starts at the offset of F30 restoration, so calling this\n+   routine in an attempt to restore only F31 WILL NOT WORK (it would\n+   be a stupid thing to do, anyway.)  */\n+\n+.private_extern restFP\n+restFP:\n+\tlfd f14,-144(r1)\n+\tlfd f15,-136(r1)\n+\tlfd f16,-128(r1)\n+\tlfd f17,-120(r1)\n+\tlfd f18,-112(r1)\n+\tlfd f19,-104(r1)\n+\tlfd f20,-96(r1)\n+\tlfd f21,-88(r1)\n+\tlfd f22,-80(r1)\n+\tlfd f23,-72(r1)\n+\tlfd f24,-64(r1)\n+\tlfd f25,-56(r1)\n+\tlfd f26,-48(r1)\n+\tlfd f27,-40(r1)\n+\tlfd f28,-32(r1)\n+\tlfd f29,-24(r1)\n+\t\t\t/* <OFFSET OF F30 RESTORE> restore callers LR  */\n+\tlwz r0,8(r1)\n+\tlfd f30,-16(r1)\n+\t\t\t/* and prepare for return to caller  */\n+\tmtlr r0\t\n+\tlfd f31,-8(r1)\n+\tblr"}, {"sha": "58ec8eaa1a31c8e722e7bdb550605b93996bb818", "filename": "gcc/config/rs6000/darwin-vecsave.asm", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm?ref=efdc5d916bbc8c31a1cd1027d38de2190278a41a", "patch": "@@ -0,0 +1,164 @@\n+/*  This file contains the vector save and restore routines.\n+ *\n+ *   Copyright (C) 2004 Free Software Foundation, Inc.\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *  As a special exception, if you link this library with files\n+ *  compiled with GCC to produce an executable, this does not cause the\n+ *  resulting executable to be covered by the GNU General Public License.\n+ *  This exception does not however invalidate any other reasons why the\n+ *  executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* Vector save/restore routines for Darwin.  Note that each vector\n+   save/restore requires 2 instructions (8 bytes.)\n+\n+   THE SAVE AND RESTORE ROUTINES CAN HAVE ONLY ONE GLOBALLY VISIBLE\n+   ENTRY POINT - callers have to jump to \"saveFP+60\" to save f29..f31,\n+   for example.  For FP reg saves/restores, it takes one instruction\n+   (4 bytes) to do the operation; for Vector regs, 2 instructions are\n+   required (8 bytes.).   */\n+\n+.text\n+\t.align 2\n+\n+.private_extern saveVEC\n+saveVEC:\n+\tli r11,-192\n+\tstvx v20,r11,r0\n+\tli r11,-176\n+\tstvx v21,r11,r0\n+\tli r11,-160\n+\tstvx v22,r11,r0\n+\tli r11,-144\n+\tstvx v23,r11,r0\n+\tli r11,-128\n+\tstvx v24,r11,r0\n+\tli r11,-112\n+\tstvx v25,r11,r0\n+\tli r11,-96\n+\tstvx v26,r11,r0\n+\tli r11,-80\n+\tstvx v27,r11,r0\n+\tli r11,-64\n+\tstvx v28,r11,r0\n+\tli r11,-48\n+\tstvx v29,r11,r0\n+\tli r11,-32\n+\tstvx v30,r11,r0\n+\tli r11,-16\n+\tstvx v31,r11,r0\n+\tblr\n+\n+.private_extern restVEC\n+restVEC:\n+\tli r11,-192\n+\tlvx v20,r11,r0\n+\tli r11,-176\n+\tlvx v21,r11,r0\n+\tli r11,-160\n+\tlvx v22,r11,r0\n+\tli r11,-144\n+\tlvx v23,r11,r0\n+\tli r11,-128\n+\tlvx v24,r11,r0\n+\tli r11,-112\n+\tlvx v25,r11,r0\n+\tli r11,-96\n+\tlvx v26,r11,r0\n+\tli r11,-80\n+\tlvx v27,r11,r0\n+\tli r11,-64\n+\tlvx v28,r11,r0\n+\tli r11,-48\n+\tlvx v29,r11,r0\n+\tli r11,-32\n+\tlvx v30,r11,r0\n+\tli r11,-16\n+\tlvx v31,r11,r0\n+\tblr\n+\n+/* saveVEC_vr11 -- as saveVEC but VRsave is returned in R11.  */\n+\n+.private_extern saveVEC_vr11\n+saveVEC_vr11:\n+\tli r11,-192\n+\tstvx v20,r11,r0\n+\tli r11,-176\n+\tstvx v21,r11,r0\n+\tli r11,-160\n+\tstvx v22,r11,r0\n+\tli r11,-144\n+\tstvx v23,r11,r0\n+\tli r11,-128\n+\tstvx v24,r11,r0\n+\tli r11,-112\n+\tstvx v25,r11,r0\n+\tli r11,-96\n+\tstvx v26,r11,r0\n+\tli r11,-80\n+\tstvx v27,r11,r0\n+\tli r11,-64\n+\tstvx v28,r11,r0\n+\tli r11,-48\n+\tstvx v29,r11,r0\n+\tli r11,-32\n+\tstvx v30,r11,r0\n+\tli r11,-16\n+\tstvx v31,r11,r0\n+\tmfspr r11,VRsave\n+\tblr\n+\n+/* As restVec, but the original VRsave value passed in R10.  */\n+\n+.private_extern restVEC_vr10\n+restVEC_vr10:\n+\tli r11,-192\n+\tlvx v20,r11,r0\n+\tli r11,-176\n+\tlvx v21,r11,r0\n+\tli r11,-160\n+\tlvx v22,r11,r0\n+\tli r11,-144\n+\tlvx v23,r11,r0\n+\tli r11,-128\n+\tlvx v24,r11,r0\n+\tli r11,-112\n+\tlvx v25,r11,r0\n+\tli r11,-96\n+\tlvx v26,r11,r0\n+\tli r11,-80\n+\tlvx v27,r11,r0\n+\tli r11,-64\n+\tlvx v28,r11,r0\n+\tli r11,-48\n+\tlvx v29,r11,r0\n+\tli r11,-32\n+\tlvx v30,r11,r0\n+\tli r11,-16\n+\tlvx v31,r11,r0\n+\t\t\t\t/* restore VRsave from R10.  */\n+\tmtspr VRsave,r10\n+\tblr"}, {"sha": "57b516f9b4f212e8edf44995d9a394768a4cc7ed", "filename": "gcc/config/rs6000/darwin-world.asm", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm?ref=efdc5d916bbc8c31a1cd1027d38de2190278a41a", "patch": "@@ -0,0 +1,264 @@\n+/*  This file contains the exception-handling save_world and\n+ *  restore_world routines, which need to do a run-time check to see if\n+ *  they should save and restore the vector registers.\n+ *\n+ *   Copyright (C) 2004 Free Software Foundation, Inc.\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *  As a special exception, if you link this library with files\n+ *  compiled with GCC to produce an executable, this does not cause the\n+ *  resulting executable to be covered by the GNU General Public License.\n+ *  This exception does not however invalidate any other reasons why the\n+ *  executable file might be covered by the GNU General Public License.\n+ */ \n+\n+.data\n+\t.align 2\n+\n+#ifdef __DYNAMIC__\n+\n+.non_lazy_symbol_pointer\n+L_has_vec$non_lazy_ptr:\n+\t.indirect_symbol __cpu_has_altivec\n+\t.long\t0\n+\n+#else\n+\n+/* For static, \"pretend\" we have a non-lazy-pointer.  */\n+\n+L_has_vec$non_lazy_ptr:\n+\t.long __cpu_has_altivec\n+\n+#endif\n+\n+\n+.text\n+\t.align 2\n+\n+/* save_world and rest_world save/restore F14-F31 and possibly V20-V31\n+   (assuming you have a CPU with vector registers; we use a global var\n+   provided by the System Framework to determine this.)\n+\n+   SAVE_WORLD takes R0 (the caller`s caller`s return address) and R11\n+   (the stack frame size) as parameters.  It returns VRsave in R0 if\n+   we`re on a CPU with vector regs.\n+\n+   With gcc3, we now need to save and restore CR as well, since gcc3's\n+   scheduled prologs can cause comparisons to be moved before calls to\n+   save_world!\n+\n+   USES: R0 R11 R12  */\n+\n+.private_extern save_world\n+save_world:\n+\tstw r0,8(r1)\n+\tmflr r0\n+\tbcl 20,31,Ls$pb\n+Ls$pb:\tmflr r12\n+\taddis r12,r12,ha16(L_has_vec$non_lazy_ptr-Ls$pb)\n+\tlwz r12,lo16(L_has_vec$non_lazy_ptr-Ls$pb)(r12)\n+\tmtlr r0\n+\tlwz r12,0(r12)\n+\t\t\t\t/* grab CR  */\n+\tmfcr r0\t\n+\t\t\t\t/* test HAS_VEC  */\n+\tcmpwi r12,0\n+\tstfd f14,-144(r1)\n+\tstfd f15,-136(r1)\n+\tstfd f16,-128(r1)\n+\tstfd f17,-120(r1)\n+\tstfd f18,-112(r1)\n+\tstfd f19,-104(r1)\n+\tstfd f20,-96(r1)\n+\tstfd f21,-88(r1)\n+\tstfd f22,-80(r1)\n+\tstfd f23,-72(r1)\n+\tstfd f24,-64(r1)\n+\tstfd f25,-56(r1)\n+\tstfd f26,-48(r1)\n+\tstfd f27,-40(r1)\n+\tstfd f28,-32(r1)\n+\tstfd f29,-24(r1)\n+\tstfd f30,-16(r1)\n+\tstfd f31,-8(r1)\n+\tstmw r13,-220(r1)\n+\t\t\t\t/* stash CR  */\n+\tstw r0,4(r1)\n+\t\t\t\t/* set R12 pointing at Vector Reg save area  */\n+\taddi r12,r1,-224\n+\t\t\t\t/* allocate stack frame  */\n+\tstwux r1,r1,r11\n+\t\t\t\t/* ...but return if HAS_VEC is zero   */\n+\tbne+ L$saveVMX\n+\t\t\t\t/* Not forgetting to restore CR.  */\n+\tmtcr r0\n+\tblr\n+\n+L$saveVMX:\n+\t\t\t\t/* We're saving Vector regs too.  */\n+\t\t\t\t/* Restore CR from R0.  No More Branches!  */\n+\tmtcr r0\n+\n+\t/* We should really use VRSAVE to figure out which vector regs\n+\t   we actually need to save and restore.  Some other time :-/  */\n+\n+\tli r11,-192\n+\tstvx v20,r11,r12\n+\tli r11,-176\n+\tstvx v21,r11,r12\n+\tli r11,-160\n+\tstvx v22,r11,r12\n+\tli r11,-144\n+\tstvx v23,r11,r12\n+\tli r11,-128\n+\tstvx v24,r11,r12\n+\tli r11,-112\n+\tstvx v25,r11,r12\n+\tli r11,-96\n+\tstvx v26,r11,r12\n+\tli r11,-80\n+\tstvx v27,r11,r12\n+\tli r11,-64\n+\tstvx v28,r11,r12\n+\tli r11,-48\n+\tstvx v29,r11,r12\n+\tli r11,-32\n+\tstvx v30,r11,r12\n+\tmfspr r0,VRsave\n+\tli r11,-16\n+\tstvx v31,r11,r12\n+\t\t\t\t/* VRsave lives at -224(R1)  */\n+\tstw r0,0(r12)\n+\tblr\n+\n+\n+/* eh_rest_world_r10 is jumped to, not called, so no need to worry about LR.\n+   R10 is the C++ EH stack adjust parameter, we return to the caller`s caller.\n+\n+   USES: R0 R10 R11 R12   and R7 R8\n+   RETURNS: C++ EH Data registers (R3 - R6.)\n+\n+   We now set up R7/R8 and jump to rest_world_eh_r7r8.\n+\n+   rest_world doesn't use the R10 stack adjust parameter, nor does it\n+   pick up the R3-R6 exception handling stuff.  */\n+\n+.private_extern rest_world\n+rest_world:\n+\t\t\t\t/* Pickup previous SP  */\n+\tlwz r11, 0(r1)\n+\tli r7, 0\n+\tlwz r8, 8(r11)\n+\tli r10, 0\n+\tb rest_world_eh_r7r8\n+\n+.private_extern eh_rest_world_r10\n+eh_rest_world_r10:\n+\t\t\t\t/* Pickup previous SP  */\n+\tlwz r11, 0(r1)\n+\tmr  r7,r10\n+\tlwz r8, 8(r11)\n+\t\t\t/* pickup the C++ EH data regs (R3 - R6.)  */\n+\tlwz r6,-420(r11)\n+\tlwz r5,-424(r11)\n+\tlwz r4,-428(r11)\n+\tlwz r3,-432(r11)\n+\n+\tb rest_world_eh_r7r8\n+\n+/* rest_world_eh_r7r8 is jumped to -- not called! -- when we're doing\n+   the exception-handling epilog.  R7 contains the offset to add to\n+   the SP, and R8 contains the 'real' return address.\n+\n+   USES: R0 R11 R12  [R7/R8]\n+   RETURNS: C++ EH Data registers (R3 - R6.)  */\n+\n+rest_world_eh_r7r8:\n+\tbcl 20,31,Lr7r8$pb\n+Lr7r8$pb: mflr r12\n+\tlwz r11,0(r1)\n+\t\t\t\t/* R11 := previous SP  */\n+\taddis r12,r12,ha16(L_has_vec$non_lazy_ptr-Lr7r8$pb)\n+\tlwz r12,lo16(L_has_vec$non_lazy_ptr-Lr7r8$pb)(r12)\n+\tlwz r0,4(r11)\n+\t\t\t\t/* R0 := old CR  */\n+\tlwz r12,0(r12)\n+\t\t\t\t/* R12 := HAS_VEC  */\n+\tmtcr r0\t\n+\tcmpwi r12,0\n+\tlmw r13,-220(r11)\n+\tbeq L.rest_world_fp_eh\n+\t\t\t\t/* restore VRsave and V20..V31  */\n+\tlwz r0,-224(r11)\n+\tli r12,-416\n+\tmtspr VRsave,r0\n+\tlvx v20,r11,r12\n+\tli r12,-400\n+\tlvx v21,r11,r12\n+\tli r12,-384\n+\tlvx v22,r11,r12\n+\tli r12,-368\n+\tlvx v23,r11,r12\n+\tli r12,-352\n+\tlvx v24,r11,r12\n+\tli r12,-336\n+\tlvx v25,r11,r12\n+\tli r12,-320\n+\tlvx v26,r11,r12\n+\tli r12,-304\n+\tlvx v27,r11,r12\n+\tli r12,-288\n+\tlvx v28,r11,r12\n+\tli r12,-272\n+\tlvx v29,r11,r12\n+\tli r12,-256\n+\tlvx v30,r11,r12\n+\tli r12,-240\n+\tlvx v31,r11,r12\n+\n+L.rest_world_fp_eh:\n+\tlfd f14,-144(r11)\n+\tlfd f15,-136(r11)\n+\tlfd f16,-128(r11)\n+\tlfd f17,-120(r11)\n+\tlfd f18,-112(r11)\n+\tlfd f19,-104(r11)\n+\tlfd f20,-96(r11)\n+\tlfd f21,-88(r11)\n+\tlfd f22,-80(r11)\n+\tlfd f23,-72(r11)\n+\tlfd f24,-64(r11)\n+\tlfd f25,-56(r11)\n+\tlfd f26,-48(r11)\n+\tlfd f27,-40(r11)\n+\tlfd f28,-32(r11)\n+\tlfd f29,-24(r11)\n+\tlfd f30,-16(r11)\n+\t\t\t/* R8 is the exception-handler's address  */\n+\tmtctr r8\n+\tlfd f31,-8(r11)\n+\t\t\t/* set SP to original value + R7 offset  */\n+\tadd r1,r11,r7\n+\tbctr"}, {"sha": "3302176c93d52ad62bdbabf0965d83ddd718c9d7", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdc5d916bbc8c31a1cd1027d38de2190278a41a/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=efdc5d916bbc8c31a1cd1027d38de2190278a41a", "patch": "@@ -2,6 +2,12 @@\n LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm \\\n \t$(srcdir)/config/rs6000/darwin-ldouble.c\n \n+LIB2FUNCS_STATIC_EXTRA = \\\n+\t$(srcdir)/config/rs6000/darwin-fpsave.asm  \\\n+\t$(srcdir)/config/rs6000/darwin-vecsave.asm  \\\n+\t$(srcdir)/config/rs6000/darwin-world.asm\n+\n+# Enable AltiVec instructions when assembling the aforementioned .asm files.\n # For libgcc, we always want 128-bit long double, since a libgcc built with\n # that will work without it.\n-TARGET_LIBGCC2_CFLAGS = -mlong-double-128\n+TARGET_LIBGCC2_CFLAGS = -mlong-double-128 -Wa,-force_cpusubtype_ALL"}]}