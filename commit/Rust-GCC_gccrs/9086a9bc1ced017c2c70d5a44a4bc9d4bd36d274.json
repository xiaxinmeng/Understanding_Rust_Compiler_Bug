{"sha": "9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4NmE5YmMxY2VkMDE3YzJjNzBkNWE0NGE0YmM5ZDRiZDM2ZDI3NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-30T21:33:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-30T21:33:35Z"}, "message": "Initial revision\n\nFrom-SVN: r8187", "tree": {"sha": "56c233ddb4048473b4fc4ba92a58f279436dbb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c233ddb4048473b4fc4ba92a58f279436dbb6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/comments", "author": null, "committer": null, "parents": [{"sha": "3f6d0a8c2e8abf78494c99e31ac71c3bc9985c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6d0a8c2e8abf78494c99e31ac71c3bc9985c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f6d0a8c2e8abf78494c99e31ac71c3bc9985c9b"}], "stats": {"total": 529, "additions": 529, "deletions": 0}, "files": [{"sha": "d9a6c23454f58eca1ceb6a9d328e6f21fd88ae3a", "filename": "gcc/config/i386/config-nt.sed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fi386%2Fconfig-nt.sed", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fi386%2Fconfig-nt.sed", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconfig-nt.sed?ref=9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "patch": "@@ -0,0 +1,66 @@\n+#/\\.o[ \t]*:/ s/config.status//\n+/^multilib.h/ s/multilib/not-multilib/\n+/^target=/ c\\\n+target=winnt3.1\n+/^xmake_file=/ d\n+/^tmake_file=/ d\n+/^version=/ c\\\n+version=2.6.0\n+s/CC = cc/CC = gcc/\n+s/:\\$/: \\$/g\n+s/<\\ *\\$(srcdir)\\//< $(srcdir)\\\\/g\n+s/^\t\\$(srcdir)\\/move-if-change/\tcopy/\n+s/^USE_/# USE_/\n+s/`echo \\$(srcdir)\\///g\n+s/ | sed 's,\\^\\\\\\.\\/,,'`//g\n+s/^\tcd \\$(srcdir)[ \t]*;/\t/\n+/^# USE_HOST_OBSTACK/ i\\\n+USE_HOST_OBSTACK=obstack.o\n+/^stamp-attrtab/,/copy/ {\n+  /\\\\/d\n+  /fi/d\n+  /copy/ i\\\n+\t  genattrtab md > tmp-attrtab.c\n+}\n+/^enquire[ \t]*:/ s/\\$(GCC_PARTS)//g\n+/^enquire.o[ \t]*:/ s/\\$(GCC_PASSES)//g\n+/^GCC_FOR_TARGET =/ c\\\n+GCC_FOR_TARGET = gcc\n+s/; *@true//\n+/^OBJS.*stamp-objlist/ s?`cat ../stamp-objlist`?@../stamp-objlist?\n+s/^\\(SUBDIR_OBSTACK *=\\).*$/\\1 ..\\/obstack.o/\n+s/^\\(SUBDIR_USE_ALLOCA *=\\).*$/\\1/\n+s/^\\(SUBDIR_MALLOC *=\\).*$/\\1/\n+/####target/ r config/winnt/t-winnt\n+/####host/ r config/winnt/x-winnt\n+s/^C c:/# C c:/\n+s/\\${OBJS}/\\$(OBJS)/g\n+s/\\${SYSTEM_HEADER_DIR}/\\$(SYSTEM_HEADER_DIR)/g\n+s/\\${HOST_CC}/\\$(HOST_CC)/g\n+s/ \\${srcdir}\\// /g\n+s/\\${mainversion}/\\$(mainversion)/g\n+s/\\ $(srcdir)\\/move-if-change$//\n+s/\\$(srcdir)\\/move-if-change/mv/g\n+/^# USE_HOST_OBSTACK/ i\\\n+USE_HOST_OBSTACK=obstack.o\n+s/\t\\.\\//\t/\n+s/^bi-\\([a-z]*\\) *:/bi-\\1.exe :/\n+s/ bi-\\([a-z]*\\)$/ bi-\\1.exe/\n+s/ bi-\\([a-z]*\\) / bi-\\1.exe /g\n+s/^gen\\([a-z]*\\) *:/gen\\1.exe :/\n+s/ gen\\([a-z]*\\)$/ gen\\1.exe/\n+s/ gen\\([a-z]*\\) / gen\\1.exe /g\n+s/genmultilib.exe/genmultilib/g\n+s/^cccp *:/cccp.exe :/\n+s/cccp$/cccp.exe/\n+s/cccp /cccp.exe /\n+s/^cc1 *:/cc1.exe :/\n+s/cc1$/cc1.exe/\n+s/cc1 /cc1.exe /\n+s/^xgcc *:/xgcc.exe :/\n+s/xgcc$/xgcc.exe/\n+s/xgcc /xgcc.exe /\n+s/^ld *:/ld.exe :/\n+s/ld$/ld.exe/\n+s/ld /ld.exe /\n+s/^\\\f//"}, {"sha": "09cba358e4bae5f057127a22b3b6cc04b70afb41", "filename": "gcc/config/i386/win-nt.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fi386%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fi386%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin-nt.h?ref=9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "patch": "@@ -0,0 +1,79 @@\n+/* Definitions of target machine for GNU compiler\n+   for an Intel i386 or later processor running Windows NT 3.x.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (drupp@cs.washington.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#define YES_UNDERSCORES\n+\n+#include \"i386/gas.h\"\n+#include \"winnt/winnt.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Di386 -DWINNT -D_M_IX86 -D_X86_ -D__STDC__=0 \\\n+  -DALMOST_STDC -Asystem(unix) -Asystem(winnt) -Acpu(i386) -Amachine(i386)\"\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_ctor, in_dtor\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTOR_SECTION_FUNCTION\n+\n+#undef CTOR_SECTION_FUNCTION\n+#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+ctor_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctor)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n+      in_section = in_ctor;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef DTOR_SECTION_FUNCTION\n+#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+dtor_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtor)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n+      in_section = in_dtor;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+  do {\t\t\t\t\t\t\\\n+    ctor_section ();\t\t\t\t\\\n+    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)\n+\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n+  do {\t\t\t\t\t\t\\\n+    dtor_section ();                   \t\t\\\n+    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    assemble_name (FILE, NAME);              \t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)"}, {"sha": "91dabce74244236e4a66a79a9c5bf6800a4a7d0e", "filename": "gcc/config/winnt/ld.c", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fld.c?ref=9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "patch": "@@ -0,0 +1,259 @@\n+/* Call Windows NT 3.x linker.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"config.h\"\n+#include <stdio.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <process.h>\n+\n+/* These can be set by command line arguments */\n+char *linker_path = 0;\n+int verbose = 0;\n+\n+int link_arg_max = -1;\n+char **link_args = (char **) 0;\n+int link_arg_index = -1;\n+\n+char *search_dirs = \".\";\n+\n+static int is_regular_file (char *name);\n+\n+static void\n+addarg (str)\n+     char *str;\n+{\n+  int i;\n+\n+  if (++link_arg_index >= link_arg_max)\n+    {\n+      char **new_link_args\n+\t= (char **) calloc (link_arg_max + 1000, sizeof (char *));\n+\n+      for (i = 0; i <= link_arg_max; i++)\n+\tnew_link_args [i] = link_args [i];\n+\n+      if (link_args)\n+\tfree (link_args);\n+\n+      link_arg_max += 1000;\n+      link_args = new_link_args;\n+    }\n+\n+  link_args [link_arg_index] = str;\n+}\n+\n+static char *\n+locate_file (file_name, path_val)\n+     char *file_name;\n+     char *path_val;\n+{\n+  char buf [1000];\n+  int file_len = strlen (file_name);\n+  char *end_path = path_val + strlen (path_val);\n+  char *ptr;\n+\n+  /* Handle absolute pathnames */\n+  if (file_name [0] == '/' || file_name [0] == DIR_SEPARATOR\n+      || isalpha (file_name [0]) && file_name [1] == ':')\n+    {\n+      strncpy (buf, file_name, sizeof buf);\n+      buf[sizeof buf - 1] = '\\0';\n+      if (is_regular_file (buf))\n+\treturn strdup (buf);\n+      else\n+\treturn 0;\n+  }\n+\n+  if (! path_val)\n+    return 0;\n+\n+  for (;;)\n+    {\n+      for (; *path_val == PATH_SEPARATOR ; path_val++)\n+\t;\n+      if (! *path_val)\n+\treturn 0;\n+\n+      for (ptr = buf; *path_val && *path_val != PATH_SEPARATOR; )\n+\t*ptr++ = *path_val++;\n+\n+      ptr--;\n+      if (*ptr != '/' && *ptr != DIR_SEPARATOR)\n+\t*++ptr = DIR_SEPARATOR;\n+\n+      strcpy (++ptr, file_name);\n+\n+      if (is_regular_file (buf))\n+\treturn strdup (buf);\n+    }\n+\n+  return 0;\n+}\n+\n+static char *\n+expand_lib (name)\n+     char *name;\n+{\n+  char *lib, *lib_path;\n+\n+  lib = malloc (strlen (name) + 5);\n+  strcpy (lib, \"lib\");\n+  strcat (lib, name);\n+  strcat (lib, \".a\");\n+  lib_path = locate_file (lib, search_dirs);\n+  if (!lib_path)\n+    {\n+      fprintf (stderr, \"Couldn't locate library: %s\\n\", lib);\n+      exit (1);\n+    }\n+\n+  return lib_path;\n+}\n+\n+static int\n+is_regular_file (name)\n+     char *name;\n+{\n+  int ret;\n+  struct stat statbuf;\n+\n+  ret = stat(name, &statbuf);\n+  return !ret && S_ISREG (statbuf.st_mode);\n+}\n+\n+static void\n+process_args (p_argc, argv)\n+     int *p_argc;\n+     char *argv[];\n+{\n+  int i, j;\n+\n+  for (i = 1; i < *p_argc; i++)\n+    {\n+      /* -v turns on verbose option here and is passed on to gcc */\n+      if (! strcmp (argv [i], \"-v\"))\n+\tverbose = 1;\n+    }\n+}\n+\n+main (argc, argv)\n+     int argc;\n+     char *argv[];\n+{\n+  int i;\n+  int done_an_ali = 0;\n+  int file_name_index;\n+  char *pathval = getenv (\"PATH\");\n+  char *spawn_args [5];\n+  char *tmppathval = malloc (strlen (pathval) + 3);\n+\n+  strcpy (tmppathval, \".;\");\n+  pathval = strcat (tmppathval, pathval);\n+\n+  process_args (&argc , argv);\n+\n+  linker_path = locate_file (\"link32.exe\", pathval);\n+  if (!linker_path)\n+    {\n+      linker_path = locate_file (\"link.exe\", pathval);\n+      if (!linker_path)\n+\t{\n+\t  fprintf (stderr, \"Couldn't locate link32 or link\\n\");\n+\t  exit (1);\n+\t}\n+    }\n+\n+  addarg (linker_path);\n+\n+  for (i = 1; i < argc; i++)\n+    {\n+      int arg_len = strlen (argv [i]);\n+\n+      if (!strcmp (argv [i], \"-o\"))\n+\t{\n+\t  char *buff, *ptr;\n+\t  int out_len;\n+\n+\t  i++;\n+\t  out_len = strlen (argv[i]) + 9;\n+\t  buff = malloc (out_len);\n+\t  strcpy (buff, \"-out:\");\n+\t  strcat (buff, argv[i]);\n+\t  ptr = strstr (buff, \".exe\");\n+\t  if (ptr == NULL || strlen (ptr) != 4)\n+\t    strcat (buff, \".exe\");\n+\t  addarg (buff);\n+\t}\n+      else if (arg_len > 2 && !strncmp (argv [i], \"-L\", 2))\n+\t{\n+\t  char *nbuff, *sdbuff;\n+\t  int j, new_len, search_dirs_len;\n+\n+\t  new_len = strlen (&argv[i][2]);\n+\t  search_dirs_len = strlen (search_dirs);\n+\n+\t  nbuff = malloc (new_len);\n+\t  strcpy (nbuff, &argv[i][2]);\n+\n+\t  for (j = 0; j < new_len; j++)\n+\t    if (nbuff[j] == '/') nbuff[j] = DIR_SEPARATOR;\n+\n+\t  sdbuff = malloc (search_dirs_len + new_len + 1);\n+\t  strcpy (sdbuff, search_dirs);\n+\t  sdbuff[search_dirs_len] = PATH_SEPARATOR;\n+\t  sdbuff[search_dirs_len+1] = 0;\n+\t  strcat (sdbuff, nbuff);\n+\n+\t  if (search_dirs)\n+\t    free (search_dirs);\n+\n+\t  search_dirs = sdbuff;\n+\t}\n+\n+      else if (arg_len > 2 && !strncmp (argv [i], \"-l\", 2))\n+\taddarg (expand_lib (&argv[i][2]));\n+    else if (!strcmp (argv [i], \"-v\")) \n+      ;\n+    else\n+      addarg (argv [i]);\n+    }\n+\n+  addarg (NULL);\n+\n+  if (verbose)\n+    {\n+      int i;\n+\n+      for (i = 0; i < link_arg_index; i++)\n+\tprintf (\"%s \", link_args [i]);\n+      putchar ('\\n');\n+    }\n+\n+  if (spawnvp (P_WAIT, linker_path, (const char * const *)link_args) != 0)\n+    {\n+      fprintf (stderr, \"Error executing %s\\n\", link_args[0]);\n+      exit (1);\n+    }\n+\n+  exit (0);\n+}"}, {"sha": "3d4c1ee5284459d9cdc1c4fe91bfa1c54a8efff9", "filename": "gcc/config/winnt/win-nt.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h?ref=9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "patch": "@@ -0,0 +1,66 @@\n+/* winnt.h  --  operating system specific defines to be used when\n+   targeting GCC for Windows NT 3.x.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+   To use this file, put in your tm.h file something like:\n+\n+\t#include \"?????.h\"\n+\t#include \"svr4.h\"\n+\n+   followed by any really system-specific defines (or overrides of\n+   defines) which you find that you need.  For example, CPP_PREDEFINES\n+   is defined here with only the defined -Dunix and -DSVR4.  You should\n+   probably override that in your target-specific ?????svr4.h file\n+   with a set of defines that includes these, but also contains an\n+   appropriate define for the type of hardware that you are targeting. */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"libc.lib kernel32.lib\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-align:0x1000 -subsystem:console -entry:mainCRTStartup \\\n+  -stack:1000000,1000000\"\n+\n+#undef STANDARD_EXEC_PREFIX\n+#define STANDARD_EXEC_PREFIX \"\"\n+\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX \"\"\n+\n+#undef TOOLDIR_BASE_PREFIX\n+#define TOOLDIR_BASE_PREFIX \"\"\n+\n+#ifdef STANDARD_INCLUDE_DIR\n+#undef STANDARD_INCLUDE_DIR\n+#endif\n+#define STANDARD_INCLUDE_DIR \"\"\n+\n+#undef LOCAL_INCLUDE_DIR\n+#define LOCAL_INCLUDE_DIR \"\"\n+\n+#undef INCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    { 0, 0, 0 }\t\t\t\t\t\t\\\n+  }\n+"}, {"sha": "3a303990d71713d7727d337c182f0348ff388cdd", "filename": "gcc/config/winnt/xm-winnt.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h?ref=9086a9bc1ced017c2c70d5a44a4bc9d4bd36d274", "patch": "@@ -0,0 +1,59 @@\n+/* Configuration for GNU compiler\n+   for processor running Windows NT 3.x.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (drupp@cs.washington.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include <stdlib.h>\n+#define USG\n+#define ONLY_INT_FIELDS\n+#define USE_PROTOTYPES 1\n+#define bcmp(a,b,c) memcmp (a,b,c)\n+#define bcopy(a,b,c) memcpy (b,a,c)\n+#define bzero(a,b) memset (a,0,b)\n+#define index  strchr\n+#define rindex strrchr\n+#define kill(a,b) raise(b)\n+\n+#define EXECUTABLE_SUFFIX \".exe\"\n+#define PATH_SEPARATOR ';'\n+#define DIR_SEPARATOR '\\\\'\n+#define HAVE_PUTENV 1\n+\n+#define S_IRUSR 0000400\n+#define S_IWUSR 0000200\n+#define S_IXUSR 0000100\n+#define S_IRGRP 0000040\n+#define S_IWGRP 0000020\n+#define S_IXGRP 0000010\n+#define S_IROTH 0000004\n+#define S_IWOTH 0000002\n+#define S_IXOTH 0000001\n+#define S_IRWXU S_IRUSR | S_IWUSR | S_IXUSR\n+#define S_ISREG(m) (((m)&S_IFMT) == S_IFREG)\n+#define S_ISDIR(m) (((m)&S_IFMT) == S_IFDIR)\n+\n+#define access\t   _access\n+#define close\t   _close\n+#define dup\t   _dup\n+#define mktemp\t   _mktemp\n+#define open\t   _open\n+#define read\t   _read\n+#define write\t   _write\n+#define chmod      _chmod\n+#define setjmp     _setjmp"}]}