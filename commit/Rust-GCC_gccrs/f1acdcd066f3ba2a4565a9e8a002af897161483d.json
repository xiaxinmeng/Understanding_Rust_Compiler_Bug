{"sha": "f1acdcd066f3ba2a4565a9e8a002af897161483d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhY2RjZDA2NmYzYmEyYTQ1NjVhOWU4YTAwMmFmODk3MTYxNDgzZA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2018-04-04T14:49:06Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2018-04-04T14:49:06Z"}, "message": "Fix -Wstringop-overflow regression\n\nwe shouldn't claim string overflows for character arrays at\nend of structures; the code that tries to avoid these\naccidentally passed the address of the accessed member to\narray_at_struct_end_p(), but that one wants the component_ref\nor array_ref itself.  Needs updating of one testcase that\nincorrectly expected warning to occur in this situation.\n\nFrom-SVN: r259083", "tree": {"sha": "7e5d7bc4e8ce12d0b5d26478dd6693af9c618432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e5d7bc4e8ce12d0b5d26478dd6693af9c618432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1acdcd066f3ba2a4565a9e8a002af897161483d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1acdcd066f3ba2a4565a9e8a002af897161483d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1acdcd066f3ba2a4565a9e8a002af897161483d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1acdcd066f3ba2a4565a9e8a002af897161483d/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eefecf6546957c92ab0073c0e6072c9554f19566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefecf6546957c92ab0073c0e6072c9554f19566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefecf6546957c92ab0073c0e6072c9554f19566"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "f284fe8f350459f0c6ba2ccec36fbf947ee21f38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1acdcd066f3ba2a4565a9e8a002af897161483d", "patch": "@@ -1,3 +1,8 @@\n+2018-04-04  Michael Matz  <matz@suse.de>\n+\n+\t* builtins.c (compute_objsize): Pass correct operand\n+\tto array_at_struct_end_p.\n+\n 2018-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/85176"}, {"sha": "ababee5db16fd4e6110363be825969d992df3601", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f1acdcd066f3ba2a4565a9e8a002af897161483d", "patch": "@@ -3377,7 +3377,7 @@ compute_objsize (tree dest, int ostype)\n   type = TYPE_MAIN_VARIANT (type);\n \n   if (TREE_CODE (type) == ARRAY_TYPE\n-      && !array_at_struct_end_p (dest))\n+      && !array_at_struct_end_p (TREE_OPERAND (dest, 0)))\n     {\n       /* Return the constant size unless it's zero (that's a zero-length\n \t array likely at the end of a struct).  */"}, {"sha": "0e7cd5a8a50f4ec89f2b18ab988bfe692c6c5b48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1acdcd066f3ba2a4565a9e8a002af897161483d", "patch": "@@ -1,3 +1,8 @@\n+2018-04-04  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/Wstringop-overflow-4.c: New test.\n+\t* c-c++-common/Wstringop-truncation-4.c: Adjust.\n+\n 2018-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/85189"}, {"sha": "c76f2823daf3ab4ce78baee6dc2631b53d65dd47", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation-4.c?ref=f1acdcd066f3ba2a4565a9e8a002af897161483d", "patch": "@@ -23,7 +23,7 @@ void test_arrays (struct Arrays *p, const char *s)\n {\n   strncpy (p->a, s, sizeof p->a);           /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n-  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n }\n \n struct Pointers\n@@ -51,7 +51,7 @@ void test_const_arrays (struct ConstArrays *p, const char *s)\n {\n   strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n-  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n }\n \n struct ConstPointers\n@@ -79,7 +79,7 @@ void test_volatile_arrays (struct VolatileArrays *p, const char *s)\n {\n   strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n-  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n }\n \n struct VolatilePointers\n@@ -107,7 +107,7 @@ void test_const_volatile_arrays (struct ConstVolatileArrays *p, const char *s)\n {\n   strncpy ((char*)p->a, s, sizeof p->a);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n   strncpy ((char*)p->b, s, sizeof p->b);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n-  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+  strncpy ((char*)p->c, s, sizeof p->c);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n }\n \n struct ConstVolatilePointers"}, {"sha": "74596c4c9945acb29d54a26ccadacf9adebe6809", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acdcd066f3ba2a4565a9e8a002af897161483d/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-4.c?ref=f1acdcd066f3ba2a4565a9e8a002af897161483d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-overflow\" } */\n+\n+extern char* strchr (const char*, int);\n+extern char* strcpy (char*, const char*);\n+extern void* malloc (__SIZE_TYPE__);\n+extern __SIZE_TYPE__ strlen (const char *);\n+struct define_item {\n+    int len;\n+    char value[1];\n+};\n+\n+struct define_item * foo(char *name)\n+{\n+  char * p;\n+  char * value;\n+  struct define_item * ptr;\n+\n+  p = strchr (name, '=');\n+  if (1 && p) {\n+      value = p+1;\n+  } else\n+    value = \"1\";\n+\n+  ptr = malloc(sizeof(struct define_item) + strlen(value));\n+  strcpy(ptr->value, value);  /* { dg-bogus \"bytes into a region\" } */\n+  return ptr;\n+}"}]}