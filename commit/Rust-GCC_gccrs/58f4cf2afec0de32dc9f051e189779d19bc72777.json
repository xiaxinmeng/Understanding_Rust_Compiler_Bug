{"sha": "58f4cf2afec0de32dc9f051e189779d19bc72777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmNGNmMmFmZWMwZGUzMmRjOWYwNTFlMTg5Nzc5ZDE5YmM3Mjc3Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-21T20:32:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-21T20:32:22Z"}, "message": "builtins.c: strengthen various rtx to rtx_insn * and other subclasses\n\ngcc/\n2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n\n\t* builtins.c (expand_builtin_longjmp): Strengthen locals \"insn\"\n\tand \"last\" from rtx to rtx_insn *.\n\t(expand_builtin_nonlocal_goto): Likewise for local \"insn\".\n\t(expand_builtin_apply): Strengthen local \"call_insn\" from rtx to\n\trtx_call_insn *.\n\t(expand_errno_check): Strengthen local \"lab\" from rtx to\n\trtx_code_label *.\n\t(expand_builtin_mathfn): Strengthen local \"insns\" from rtx to\n\trtx_insn *.\n\t(expand_builtin_mathfn_2): Likewise.\n\t(expand_builtin_mathfn_ternary): Likewise.\n\t(expand_builtin_mathfn_3): Likewise.\n\t(expand_builtin_interclass_mathfn): Likewise for local \"last\".\n\t(expand_builtin_int_roundingfn): Likewise for local \"insns\".\n\t(expand_builtin_int_roundingfn_2): Likewise.\n\t(expand_builtin_strlen): Likewise for local \"before_strlen\".\n\t(expand_builtin_strncmp): Likewise for local \"seq\".\n\t(expand_builtin_signbit): Likewise for local \"last\".\n\t(expand_builtin_atomic_compare_exchange): Strengthen local \"label\"\n\tfrom rtx to rtx_code_label *.\n\t(expand_stack_restore):  Strengthen local \"prev\" from rtx to\n\trtx_insn *.\n\nFrom-SVN: r214288", "tree": {"sha": "e69e81c52594a1510d317f783550c1ae3a83cffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69e81c52594a1510d317f783550c1ae3a83cffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f4cf2afec0de32dc9f051e189779d19bc72777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f4cf2afec0de32dc9f051e189779d19bc72777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f4cf2afec0de32dc9f051e189779d19bc72777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f4cf2afec0de32dc9f051e189779d19bc72777/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd6657fbb3f79043efae618c18088808bc17cab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6657fbb3f79043efae618c18088808bc17cab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6657fbb3f79043efae618c18088808bc17cab0"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "f23775ffe9bfef569b3f1576008672a06137477f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f4cf2afec0de32dc9f051e189779d19bc72777/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f4cf2afec0de32dc9f051e189779d19bc72777/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f4cf2afec0de32dc9f051e189779d19bc72777", "patch": "@@ -1,3 +1,28 @@\n+2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* builtins.c (expand_builtin_longjmp): Strengthen locals \"insn\"\n+\tand \"last\" from rtx to rtx_insn *.\n+\t(expand_builtin_nonlocal_goto): Likewise for local \"insn\".\n+\t(expand_builtin_apply): Strengthen local \"call_insn\" from rtx to\n+\trtx_call_insn *.\n+\t(expand_errno_check): Strengthen local \"lab\" from rtx to\n+\trtx_code_label *.\n+\t(expand_builtin_mathfn): Strengthen local \"insns\" from rtx to\n+\trtx_insn *.\n+\t(expand_builtin_mathfn_2): Likewise.\n+\t(expand_builtin_mathfn_ternary): Likewise.\n+\t(expand_builtin_mathfn_3): Likewise.\n+\t(expand_builtin_interclass_mathfn): Likewise for local \"last\".\n+\t(expand_builtin_int_roundingfn): Likewise for local \"insns\".\n+\t(expand_builtin_int_roundingfn_2): Likewise.\n+\t(expand_builtin_strlen): Likewise for local \"before_strlen\".\n+\t(expand_builtin_strncmp): Likewise for local \"seq\".\n+\t(expand_builtin_signbit): Likewise for local \"last\".\n+\t(expand_builtin_atomic_compare_exchange): Strengthen local \"label\"\n+\tfrom rtx to rtx_code_label *.\n+\t(expand_stack_restore):  Strengthen local \"prev\" from rtx to\n+\trtx_insn *.\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* bt-load.c (struct btr_user_s): Strengthen field \"insn\" from rtx"}, {"sha": "971e525f19f3ab0dd7dc8abc511f120960be3165", "filename": "gcc/builtins.c", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f4cf2afec0de32dc9f051e189779d19bc72777/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f4cf2afec0de32dc9f051e189779d19bc72777/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=58f4cf2afec0de32dc9f051e189779d19bc72777", "patch": "@@ -965,7 +965,8 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n static void\n expand_builtin_longjmp (rtx buf_addr, rtx value)\n {\n-  rtx fp, lab, stack, insn, last;\n+  rtx fp, lab, stack;\n+  rtx_insn *insn, *last;\n   enum machine_mode sa_mode = STACK_SAVEAREA_MODE (SAVE_NONLOCAL);\n \n   /* DRAP is needed for stack realign if longjmp is expanded to current\n@@ -1109,7 +1110,8 @@ static rtx\n expand_builtin_nonlocal_goto (tree exp)\n {\n   tree t_label, t_save_area;\n-  rtx r_label, r_save_area, r_fp, r_sp, insn;\n+  rtx r_label, r_save_area, r_fp, r_sp;\n+  rtx_insn *insn;\n \n   if (!validate_arglist (exp, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n@@ -1573,7 +1575,8 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n {\n   int size, align, regno;\n   enum machine_mode mode;\n-  rtx incoming_args, result, reg, dest, src, call_insn;\n+  rtx incoming_args, result, reg, dest, src;\n+  rtx_call_insn *call_insn;\n   rtx old_stack_level = 0;\n   rtx call_fusage = 0;\n   rtx struct_value = targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 0);\n@@ -1968,7 +1971,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n static void\n expand_errno_check (tree exp, rtx target)\n {\n-  rtx lab = gen_label_rtx ();\n+  rtx_code_label *lab = gen_label_rtx ();\n \n   /* Test the result; if it is NaN, set errno=EDOM because\n      the argument was not in the domain.  */\n@@ -2015,7 +2018,8 @@ static rtx\n expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, insns;\n+  rtx op0;\n+  rtx_insn *insns;\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   bool errno_set = false;\n@@ -2141,7 +2145,8 @@ static rtx\n expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, op1, insns, result;\n+  rtx op0, op1, result;\n+  rtx_insn *insns;\n   int op1_type = REAL_TYPE;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arg0, arg1;\n@@ -2250,7 +2255,8 @@ static rtx\n expand_builtin_mathfn_ternary (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, op1, op2, insns, result;\n+  rtx op0, op1, op2, result;\n+  rtx_insn *insns;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arg0, arg1, arg2;\n   enum machine_mode mode;\n@@ -2323,7 +2329,8 @@ static rtx\n expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, insns;\n+  rtx op0;\n+  rtx_insn *insns;\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   tree arg;\n@@ -2482,7 +2489,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target)\n   if (icode != CODE_FOR_nothing)\n     {\n       struct expand_operand ops[1];\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n       tree orig_arg = arg;\n \n       /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n@@ -2700,7 +2707,8 @@ static rtx\n expand_builtin_int_roundingfn (tree exp, rtx target)\n {\n   convert_optab builtin_optab;\n-  rtx op0, insns, tmp;\n+  rtx op0, tmp;\n+  rtx_insn *insns;\n   tree fndecl = get_callee_fndecl (exp);\n   enum built_in_function fallback_fn;\n   tree fallback_fndecl;\n@@ -2836,7 +2844,8 @@ static rtx\n expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n {\n   convert_optab builtin_optab;\n-  rtx op0, insns;\n+  rtx op0;\n+  rtx_insn *insns;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arg;\n   enum machine_mode mode;\n@@ -2985,7 +2994,8 @@ expand_builtin_strlen (tree exp, rtx target,\n       rtx pat;\n       tree len;\n       tree src = CALL_EXPR_ARG (exp, 0);\n-      rtx src_reg, before_strlen;\n+      rtx src_reg;\n+      rtx_insn *before_strlen;\n       enum machine_mode insn_mode = target_mode;\n       enum insn_code icode = CODE_FOR_nothing;\n       unsigned int align;\n@@ -4156,7 +4166,8 @@ expand_builtin_strncmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n rtx\n expand_builtin_saveregs (void)\n {\n-  rtx val, seq;\n+  rtx val;\n+  rtx_insn *seq;\n \n   /* Don't do __builtin_saveregs more than once in a function.\n      Save the result of the first call and reuse it.  */\n@@ -4848,7 +4859,7 @@ expand_builtin_signbit (tree exp, rtx target)\n   icode = optab_handler (signbit_optab, fmode);\n   if (icode != CODE_FOR_nothing)\n     {\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n       target = gen_reg_rtx (TYPE_MODE (TREE_TYPE (exp)));\n       if (maybe_emit_unop_insn (icode, target, temp, UNKNOWN))\n \treturn target;\n@@ -5255,7 +5266,8 @@ static rtx\n expand_builtin_atomic_compare_exchange (enum machine_mode mode, tree exp, \n \t\t\t\t\trtx target)\n {\n-  rtx expect, desired, mem, oldval, label;\n+  rtx expect, desired, mem, oldval;\n+  rtx_code_label *label;\n   enum memmodel success, failure;\n   tree weak;\n   bool is_weak;\n@@ -5713,7 +5725,8 @@ expand_builtin_set_thread_pointer (tree exp)\n static void\n expand_stack_restore (tree var)\n {\n-  rtx prev, sa = expand_normal (var);\n+  rtx_insn *prev;\n+  rtx sa = expand_normal (var);\n \n   sa = convert_memory_address (Pmode, sa);\n "}]}