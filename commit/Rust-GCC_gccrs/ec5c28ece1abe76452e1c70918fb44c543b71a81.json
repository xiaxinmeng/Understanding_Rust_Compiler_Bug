{"sha": "ec5c28ece1abe76452e1c70918fb44c543b71a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1YzI4ZWNlMWFiZTc2NDUyZTFjNzA5MThmYjQ0YzU0M2I3MWE4MQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-23T22:20:14Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-23T22:20:14Z"}, "message": "Connection.java: Use GetPropertyAction for privileged getProperty calls.\n\n2004-07-23  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* gnu/java/net/protocol/http/Connection.java: Use GetPropertyAction\n\tfor privileged getProperty calls.\n\t* java/io/ObjectOutputStream.java (getField): No longer static. Use\n\tSetAccessibleAction instead of anonymous class for doPrivileged\n\tcall.\n\t(getMethod): Likewise.\n\t(setAccessible): New field. PrivilegedAction object to use when\n\tcalling setAccessible.\n\t* java/io/ObjectStreamClass.java (calculateOffsets): Use\n\tSetAccessibleAction instead of anonymous class for diPrivileged\n\tcall.\n\t(setFields): Likewise.\n\t(getClassUID): Likewise.\n\t(findMethod): Likewise.\n\t* gnu/java/security/action/GetPropertyAction.java: New class.\n\t* gnu/java/security/action/SetAccessibleAction.java: New class.\n\nFrom-SVN: r85097", "tree": {"sha": "96dc496d784f2249834ceb7610963655c445967c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96dc496d784f2249834ceb7610963655c445967c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5c28ece1abe76452e1c70918fb44c543b71a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c28ece1abe76452e1c70918fb44c543b71a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5c28ece1abe76452e1c70918fb44c543b71a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c28ece1abe76452e1c70918fb44c543b71a81/comments", "author": null, "committer": null, "parents": [{"sha": "ae066484dfc4edafddbcf5089720d8ceef28c232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae066484dfc4edafddbcf5089720d8ceef28c232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae066484dfc4edafddbcf5089720d8ceef28c232"}], "stats": {"total": 300, "additions": 217, "deletions": 83}, "files": [{"sha": "9b467ae0b87d002b36d5f40a1c67ff859a0e7fef", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -1,7 +1,24 @@\n 2004-07-23  Bryce McKinlay  <mckinlay@redhat.com>\n \n-\t* java/io/ObjectStreamField (ObjectStreamField): Don't unset 'toset' for final\n-\tfields.\n+\t* gnu/java/net/protocol/http/Connection.java: Use GetPropertyAction\n+\tfor privileged getProperty calls.\n+\t* java/io/ObjectOutputStream.java (getField): No longer static. Use\n+\tSetAccessibleAction instead of anonymous class for doPrivileged call.\n+\t(getMethod): Likewise.\n+\t(setAccessible): New field. PrivilegedAction object to use when\n+\tcalling setAccessible.\n+\t* java/io/ObjectStreamClass.java (calculateOffsets): Use\n+\tSetAccessibleAction instead of anonymous class for diPrivileged call.\n+\t(setFields): Likewise.\n+\t(getClassUID): Likewise.\n+\t(findMethod): Likewise.\n+\t* gnu/java/security/action/GetPropertyAction.java: New class.\n+\t* gnu/java/security/action/SetAccessibleAction.java: New class.\t\n+\n+2004-07-23  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* java/io/ObjectStreamField (ObjectStreamField): Don't unset 'toset'\n+\tfor final fields.\n \t* testsuite/libjava.lang/Serialization.java: New test.\n \t* testsuite/libjava.lang/Serialization.out: New.\n "}, {"sha": "ccae499dc33dc3997cc2fcc4502cac292cf4a4fc", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -59,6 +59,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import gnu.java.net.HeaderFieldHelper;\n+import gnu.java.security.action.GetPropertyAction;\n \n /**\n  * This subclass of java.net.URLConnection models a URLConnection via\n@@ -88,36 +89,31 @@ public final class Connection extends HttpURLConnection\n \n   static \n   {\n-    // Make sure access control for system properties depends only on\n-    // our class ProtectionDomain, not on any (indirect) callers.\n-    AccessController.doPrivileged(new PrivilegedAction() {\n-\tpublic Object run()\n-\t{\n-\t  // Recognize some networking properties listed at\n-\t  // http://java.sun.com/j2se/1.4/docs/guide/net/properties.html.\n-\t  String port = null;\n-\t  proxyHost = System.getProperty(\"http.proxyHost\");\n-\t  if (proxyHost != null)\n-\t    {\n-\t      proxyInUse = true;\n-\t      if ((port = System.getProperty(\"http.proxyPort\")) != null)\n-\t\t{\n-\t\t  try\n-\t\t    {\n-\t\t      proxyPort = Integer.parseInt(port);\n-\t\t    }\n-\t\t  catch (Throwable t)\n-\t\t    {\n-\t\t      // Nothing.  \n-\t\t    }\n-\t\t}\n-\t    }\n-\t  \n-\t  userAgent = System.getProperty(\"http.agent\");\n+    // Recognize some networking properties listed at\n+    // http://java.sun.com/j2se/1.4/docs/guide/net/properties.html.\n+    String port = null;\n+    GetPropertyAction getProperty = new GetPropertyAction(\"http.proxyHost\");\n+    proxyHost = (String) AccessController.doPrivileged(getProperty);\n+    if (proxyHost != null)\n+      {\n+\tproxyInUse = true;\n+\tgetProperty.setName(\"http.proxyPort\");\n+\tport = (String) AccessController.doPrivileged(getProperty);\n+\tif (port != null)\n+\t  {\n+\t    try\n+\t      {\n+\t\tproxyPort = Integer.parseInt(port);\n+\t      }\n+\t    catch (NumberFormatException ex)\n+\t      {\n+\t\t// Nothing.  \n+\t      }\n+\t  }\n+      }\n \n-\t  return null;\n-\t}\n-      });\n+    getProperty.setName(\"http.agent\");\n+    userAgent = (String) AccessController.doPrivileged(getProperty);\n   }\n \n   /**"}, {"sha": "f40f479bae7f76614be5952b06d2d62fcc7a718f", "filename": "libjava/gnu/java/security/action/GetPropertyAction.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FGetPropertyAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FGetPropertyAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FGetPropertyAction.java?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -0,0 +1,75 @@\n+/* GetPropertyAction.java\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.security.action;\n+\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * PrivilegedAction implementation that calls System.getProperty() with\n+ * the property name passed to its constructor.\n+ *\n+ * Example of use:\n+ * <code>\n+ * GetPropertyAction action = new GetPropertyAction(\"http.proxyPort\");\n+ * String port = AccessController.doPrivileged(action);\n+ * </code>\n+ */\n+public class GetPropertyAction implements PrivilegedAction\n+{\n+  String propName;\n+\n+  public GetPropertyAction()\n+  {\n+  }\n+  \n+  public GetPropertyAction(String propName)\n+  {\n+    this.propName = propName;\n+  }\n+  \n+  public Object run()\n+  {\n+    return System.getProperty(propName);\n+  }\n+  \n+  public GetPropertyAction setName(String propName)\n+  {\n+    this.propName = propName;\n+    return this;\n+  }\n+}"}, {"sha": "810681fd84cea692d5ea5afd3ab430e4889658b2", "filename": "libjava/gnu/java/security/action/SetAccessibleAction.java", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FSetAccessibleAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FSetAccessibleAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Faction%2FSetAccessibleAction.java?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -0,0 +1,77 @@\n+/* SetAccessibleAction.java\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.security.action;\n+\n+import java.lang.reflect.AccessibleObject;\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * PrivilagedAction implementation that calls setAccessible(true) on the \n+ * AccessibleObject passed to its constructor.\n+ *\n+ * Example of use:\n+ * <code>\n+ * Field dataField = cl.getDeclaredField(\"data\");\n+ * AccessController.doPrivilaged(new SetAccessibleAction(dataField));\n+ * </code>\n+ */\n+public class SetAccessibleAction implements PrivilegedAction\n+{\n+  AccessibleObject member;\n+  \n+  public SetAccessibleAction()\n+  {\n+  }\n+  \n+  public SetAccessibleAction(AccessibleObject member)\n+  {\n+    this.member = member;\n+  }\n+  \n+  public Object run()\n+  {\n+    member.setAccessible(true);\n+    return null;\n+  }\n+  \n+  public SetAccessibleAction setMember(AccessibleObject member)\n+  {\n+    this.member = member;\n+    return this;\n+  }\n+}"}, {"sha": "2435b070d08f3ce4c70296198f715a16a3a54480", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -48,6 +48,7 @@\n \n import gnu.java.io.ObjectIdentityWrapper;\n import gnu.java.lang.reflect.TypeSignature;\n+import gnu.java.security.action.SetAccessibleAction;\n import gnu.classpath.Configuration;\n \n /**\n@@ -1516,20 +1517,14 @@ private Object getObjectField (Object obj, Class klass, String field_name,\n       }    \n   }\n \n-  private static Field getField (Class klass, String name)\n+  private Field getField (Class klass, String name)\n     throws java.io.InvalidClassException\n   {\n     try\n       {\n \tfinal Field f = klass.getDeclaredField(name);\n-\tAccessController.doPrivileged(new PrivilegedAction()\n-\t  {\n-\t    public Object run()\n-\t    {\n-\t      f.setAccessible(true);\n-\t      return null;\n-\t    }\n-\t  });\n+\tsetAccessible.setMember(f);\n+\tAccessController.doPrivileged(setAccessible);\n \treturn f;\n       }\n     catch (java.lang.NoSuchFieldException e)\n@@ -1539,18 +1534,12 @@ public Object run()\n       }\n   }\n \n-  private static Method getMethod (Class klass, String name, Class[] args)\n+  private Method getMethod (Class klass, String name, Class[] args)\n     throws java.lang.NoSuchMethodException\n   {\n     final Method m = klass.getDeclaredMethod(name, args);\n-    AccessController.doPrivileged(new PrivilegedAction()\n-      {\n-\tpublic Object run()\n-\t{\n-\t  m.setAccessible(true);\n-\t  return null;\n-\t}\n-      });\n+    setAccessible.setMember(m);\n+    AccessController.doPrivileged(setAccessible);\n     return m;\n   }\n \n@@ -1583,6 +1572,7 @@ private void dumpElementln (String msg)\n   private Hashtable OIDLookupTable;\n   private int protocolVersion;\n   private boolean useSubclassMethod;\n+  private SetAccessibleAction setAccessible = new SetAccessibleAction();\n \n   // The nesting depth for debugging output\n   private int depth = 0;"}, {"sha": "08576cd1f7a05def26da07865c7fed0e9c84d248", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c28ece1abe76452e1c70918fb44c543b71a81/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=ec5c28ece1abe76452e1c70918fb44c543b71a81", "patch": "@@ -57,6 +57,7 @@\n import java.util.Vector;\n import gnu.java.io.NullOutputStream;\n import gnu.java.lang.reflect.TypeSignature;\n+import gnu.java.security.action.SetAccessibleAction;\n import gnu.java.security.provider.Gnu;\n \n \n@@ -470,14 +471,8 @@ private Method findMethod(Method[] methods, String name, Class[] params,\n \t\t    }\n \t\t}\n \t\tfinal Method m = methods[i];\n-\t\tAccessController.doPrivileged(new PrivilegedAction()\n-\t\t{\n-\t\t    public Object run()\n-\t\t    {\n-\t\t\tm.setAccessible(true);\n-\t\t\treturn null;\n-\t\t    }\n-\t\t});\n+\t\tSetAccessibleAction setAccessible = new SetAccessibleAction(m);\n+\t\tAccessController.doPrivileged(setAccessible);\n \t\treturn m;\n \t    }\n \t}\n@@ -543,6 +538,8 @@ else if ((java.io.Serializable.class).isAssignableFrom(cl))\n   // clazz.\n   private void setFields(Class cl)\n   {\n+    SetAccessibleAction setAccessible = new SetAccessibleAction();\n+\n     if (!isSerializable() || isExternalizable())\n       {\n \tfields = NO_FIELDS;\n@@ -551,17 +548,11 @@ private void setFields(Class cl)\n \n     try\n       {\n-\tfinal Field serialPersistentFields =\n+\tfinal Field f =\n \t  cl.getDeclaredField(\"serialPersistentFields\");\n-\tAccessController.doPrivileged(new PrivilegedAction()\n-\t{\n-\t    public Object run()\n-\t    {\n-\t\tserialPersistentFields.setAccessible(true);\n-\t\treturn null;\n-\t    }\n-\t});\n-\tint modifiers = serialPersistentFields.getModifiers();\n+\tsetAccessible.setMember(f);\n+\tAccessController.doPrivileged(setAccessible);\n+\tint modifiers = f.getModifiers();\n \n \tif (Modifier.isStatic(modifiers)\n \t    && Modifier.isFinal(modifiers)\n@@ -617,14 +608,8 @@ public Object run()\n       if (all_fields[from] != null)\n \t{\n \t  final Field f = all_fields[from];\n-\t  AccessController.doPrivileged(new PrivilegedAction()\n-\t  {\n-\t      public Object run()\n-\t      {\n-\t\t  f.setAccessible(true);\n-\t\t  return null;\n-\t      }\n-\t  });\n+\t  setAccessible.setMember(f);\n+\t  AccessController.doPrivileged(setAccessible);\n \t  fields[to] = new ObjectStreamField(all_fields[from]);\n \t  to++;\n \t}\n@@ -651,14 +636,8 @@ private long getClassUID(Class cl)\n \t// may not be public AND we only want the serialVersionUID of this\n \t// class, not a superclass or interface.\n \tfinal Field suid = cl.getDeclaredField(\"serialVersionUID\");\n-\tAccessController.doPrivileged(new PrivilegedAction()\n-\t{\n-\t    public Object run()\n-\t    {\n-\t\tsuid.setAccessible(true);\n-\t\treturn null;\n-\t    }\n-\t});\n+\tSetAccessibleAction setAccessible = new SetAccessibleAction(suid);\n+\tAccessController.doPrivileged(setAccessible);\n \tint modifiers = suid.getModifiers();\n \n \tif (Modifier.isStatic(modifiers)"}]}