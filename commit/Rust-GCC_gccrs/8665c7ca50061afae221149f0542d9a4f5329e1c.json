{"sha": "8665c7ca50061afae221149f0542d9a4f5329e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2NWM3Y2E1MDA2MWFmYWUyMjExNDlmMDU0MmQ5YTRmNTMyOWUxYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-01T10:50:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-01T10:50:01Z"}, "message": "decl.c (make_packable_type): Resize the last component to its RM size only if it is of an aggregate type.\n\n\t* decl.c (make_packable_type): Resize the last component to its RM size\n\tonly if it is of an aggregate type.\n\t* trans.c (call_to_gnu): Fix nit in comment.\n\t(gnat_to_gnu): Likewise.\n\nFrom-SVN: r134848", "tree": {"sha": "197d79b77d4a42946b3ee4b0f5c1ebc31ac12343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/197d79b77d4a42946b3ee4b0f5c1ebc31ac12343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8665c7ca50061afae221149f0542d9a4f5329e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8665c7ca50061afae221149f0542d9a4f5329e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8665c7ca50061afae221149f0542d9a4f5329e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8665c7ca50061afae221149f0542d9a4f5329e1c/comments", "author": null, "committer": null, "parents": [{"sha": "2de4b3193d2282cce587ff1a6e041cd7cc649657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2de4b3193d2282cce587ff1a6e041cd7cc649657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2de4b3193d2282cce587ff1a6e041cd7cc649657"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "b1f1a6c03126c8ee5b354ce919e0b024d2bf0363", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8665c7ca50061afae221149f0542d9a4f5329e1c", "patch": "@@ -1,3 +1,10 @@\n+2008-05-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (make_packable_type): Resize the last component to its RM size\n+\tonly if it is of an aggregate type.\n+\t* trans.c (call_to_gnu): Fix nit in comment.\n+\t(gnat_to_gnu): Likewise.\n+\n 2008-04-30  Samuel Tardieu  <sam@rfc1149.net>\n \n \t* Makefile.in: Adapt sh4-linux target."}, {"sha": "8dec1be15127999df8517593f73c9fb935f1a8c3", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=8665c7ca50061afae221149f0542d9a4f5329e1c", "patch": "@@ -5487,9 +5487,8 @@ make_packable_type (tree type, bool in_record)\n \n   TYPE_USER_ALIGN (new_type) = 1;\n \n-  /* Now copy the fields, keeping the position and size as we don't\n-     want to propagate packedness downward.  But make an exception\n-     for the last field in order to ditch the padding bits.  */\n+  /* Now copy the fields, keeping the position and size as we don't want\n+     to change the layout by propagating the packedness downwards.  */\n   for (old_field = TYPE_FIELDS (type); old_field;\n        old_field = TREE_CHAIN (old_field))\n     {\n@@ -5503,8 +5502,18 @@ make_packable_type (tree type, bool in_record)\n \t  && host_integerp (TYPE_SIZE (new_field_type), 1))\n \tnew_field_type = make_packable_type (new_field_type, true);\n \n-      if (!TREE_CHAIN (old_field) && !TYPE_PACKED (type))\n-\tnew_size = rm_size (new_field_type);\n+      /* However, for the last field in a not already packed record type\n+\t that is of an aggregate type, we need to use the RM_Size in the\n+\t packable version of the record type, see finish_record_type.  */\n+      if (!TREE_CHAIN (old_field)\n+\t  && !TYPE_PACKED (type)\n+\t  && (TREE_CODE (new_field_type) == RECORD_TYPE\n+\t      || TREE_CODE (new_field_type) == UNION_TYPE\n+\t      || TREE_CODE (new_field_type) == QUAL_UNION_TYPE)\n+\t  && !TYPE_IS_FAT_POINTER_P (new_field_type)\n+\t  && !TYPE_CONTAINS_TEMPLATE_P (new_field_type)\n+\t  && TYPE_ADA_SIZE (new_field_type))\n+\tnew_size = TYPE_ADA_SIZE (new_field_type);\n       else\n \tnew_size = DECL_SIZE (old_field);\n "}, {"sha": "404b42f2282257af330056a5e82cd4e739f91ab7", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8665c7ca50061afae221149f0542d9a4f5329e1c/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=8665c7ca50061afae221149f0542d9a4f5329e1c", "patch": "@@ -2204,7 +2204,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t     of the object if they are distinct, because the expectations\n \t     of the callee would otherwise not be met:\n \t       - if it's a justified modular type,\n-\t       - if the actual type is a packed version of it.  */\n+\t       - if the actual type is a packable version of it.  */\n \t  else if (TREE_CODE (gnu_name_type) == RECORD_TYPE\n \t\t   && (TYPE_JUSTIFIED_MODULAR_P (gnu_name_type)\n \t\t       || larger_record_type_p (gnu_name_type,\n@@ -4902,7 +4902,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  type wrong due to \"instantiating\" the unconstrained record with\n \t  discriminant values.  Similarly, if the two types are record types\n \t  with the same name don't convert.  This will be the case when we are\n-\t  converting from a packed version of a type to its original type and\n+\t  converting from a packable version of a type to its original type and\n \t  we need those conversions to be NOPs in order for assignments into\n \t  these types to work properly.\n "}]}