{"sha": "706f749ad8c243cf349169296b8d501348ecb70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2Zjc0OWFkOGMyNDNjZjM0OTE2OTI5NmI4ZDUwMTM0OGVjYjcwZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-12-20T13:55:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-12-20T13:55:41Z"}, "message": "arm_acle.h: Add underscores before variables.\n\n2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm_acle.h: Add underscores before variables.\n\nFrom-SVN: r206149", "tree": {"sha": "cb34ac01d58247f30c72c5f75584b48ce119bec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb34ac01d58247f30c72c5f75584b48ce119bec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/706f749ad8c243cf349169296b8d501348ecb70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706f749ad8c243cf349169296b8d501348ecb70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706f749ad8c243cf349169296b8d501348ecb70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706f749ad8c243cf349169296b8d501348ecb70d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09dfa4951aa9b8700c9d3047e712050d7c1e4e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dfa4951aa9b8700c9d3047e712050d7c1e4e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09dfa4951aa9b8700c9d3047e712050d7c1e4e94"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "9de43b154bdc13835802bd919f94fbf18aa5f5b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706f749ad8c243cf349169296b8d501348ecb70d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706f749ad8c243cf349169296b8d501348ecb70d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=706f749ad8c243cf349169296b8d501348ecb70d", "patch": "@@ -1,3 +1,7 @@\n+2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm_acle.h: Add underscores before variables.\n+\n 2013-12-20  Bingfeng Mei  <bmei@broadcom.com>\n \n \tPR tree-optimization/59544"}, {"sha": "a14f043a445f424bdb62bf52dc227b5db890c2f8", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706f749ad8c243cf349169296b8d501348ecb70d/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706f749ad8c243cf349169296b8d501348ecb70d/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=706f749ad8c243cf349169296b8d501348ecb70d", "patch": "@@ -34,60 +34,60 @@ extern \"C\" {\n \n #ifdef __ARM_FEATURE_CRC32\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32b (uint32_t a, uint8_t b)\n+__crc32b (uint32_t __a, uint8_t __b)\n {\n-  return __builtin_arm_crc32b (a, b);\n+  return __builtin_arm_crc32b (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32h (uint32_t a, uint16_t b)\n+__crc32h (uint32_t __a, uint16_t __b)\n {\n-  return __builtin_arm_crc32h (a, b);\n+  return __builtin_arm_crc32h (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32w (uint32_t a, uint32_t b)\n+__crc32w (uint32_t __a, uint32_t __b)\n {\n-  return __builtin_arm_crc32w (a, b);\n+  return __builtin_arm_crc32w (__a, __b);\n }\n \n #ifdef __ARM_32BIT_STATE\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32d (uint32_t a, uint64_t b)\n+__crc32d (uint32_t __a, uint64_t __b)\n {\n-  uint32_t d;\n+  uint32_t __d;\n \n-  d = __crc32w (__crc32w (a, b & 0xffffffffULL), b >> 32);\n-  return d;\n+  __d = __crc32w (__crc32w (__a, __b & 0xffffffffULL), __b >> 32);\n+  return __d;\n }\n #endif\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32cb (uint32_t a, uint8_t b)\n+__crc32cb (uint32_t __a, uint8_t __b)\n {\n-  return __builtin_arm_crc32cb (a, b);\n+  return __builtin_arm_crc32cb (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32ch (uint32_t a, uint16_t b)\n+__crc32ch (uint32_t __a, uint16_t __b)\n {\n-  return __builtin_arm_crc32ch (a, b);\n+  return __builtin_arm_crc32ch (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32cw (uint32_t a, uint32_t b)\n+__crc32cw (uint32_t __a, uint32_t __b)\n {\n-  return __builtin_arm_crc32cw (a, b);\n+  return __builtin_arm_crc32cw (__a, __b);\n }\n \n #ifdef __ARM_32BIT_STATE\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-__crc32cd (uint32_t a, uint64_t b)\n+__crc32cd (uint32_t __a, uint64_t __b)\n {\n-  uint32_t d;\n+  uint32_t __d;\n \n-  d = __crc32cw (__crc32cw (a, b & 0xffffffffULL), b >> 32);\n-  return d;\n+  __d = __crc32cw (__crc32cw (__a, __b & 0xffffffffULL), __b >> 32);\n+  return __d;\n }\n #endif\n "}]}