{"sha": "f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjMjJhOGJiYWYzZWY0MjYwZjdkOGJlZWEyMmVkMTUxY2E0YjcyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:10:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:10:05Z"}, "message": "[AArch64] Add support for SVE [SU]{MAX,MIN} immediate\n\nThis patch adds support for the immediate forms of SVE SMAX, SMIN, UMAX\nand UMIN.  SMAX and SMIN take the same range as MUL, so the patch\nbasically just moves and generalises the existing MUL patterns.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/constraints.md (vsb): New constraint.\n\t(vsm): Generalize description.\n\t* config/aarch64/iterators.md (SVE_INT_BINARY_IMM): New code\n\titerator.\n\t(sve_imm_con): Handle smax, smin, umax and umin.\n\t(sve_imm_prefix): New code attribute.\n\t* config/aarch64/predicates.md (aarch64_sve_vsb_immediate)\n\t(aarch64_sve_vsb_operand): New predicates.\n\t(aarch64_sve_mul_immediate): Rename to...\n\t(aarch64_sve_vsm_immediate): ...this.\n\t(aarch64_sve_mul_operand): Rename to...\n\t(aarch64_sve_vsm_operand): ...this.\n\t* config/aarch64/aarch64-sve.md (mul<mode>3): Generalize to...\n\t(<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3): ...this.\n\t(*mul<mode>3, *post_ra_mul<mode>3): Generalize to...\n\t(*<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3)\n\t(*post_ra_<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3): ...these and\n\tadd movprfx support for the immediate alternatives.\n\t(<su><maxmin><mode>3, *<su><maxmin><mode>3): Delete in favor\n\tof the above.\n\t(*<SVE_INT_BINARY_SD:optab><SVE_SDI:mode>3): Fix incorrect predicate\n\tfor operand 3.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/smax_1.c: New test.\n\t* gcc.target/aarch64/sve/smin_1.c: Likewise.\n\t* gcc.target/aarch64/sve/umax_1.c: Likewise.\n\t* gcc.target/aarch64/sve/umin_1.c: Likewise.\n\nFrom-SVN: r274439", "tree": {"sha": "a857079b6f1321a6e5a6c6d0ae705a9904dbfefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a857079b6f1321a6e5a6c6d0ae705a9904dbfefa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0a0be93d7c2b760779c3085c5abfd0496e3458b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a0be93d7c2b760779c3085c5abfd0496e3458b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a0be93d7c2b760779c3085c5abfd0496e3458b"}], "stats": {"total": 528, "additions": 409, "deletions": 119}, "files": [{"sha": "5f030861b840fa03727078416757c078c081449d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -1,3 +1,28 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/constraints.md (vsb): New constraint.\n+\t(vsm): Generalize description.\n+\t* config/aarch64/iterators.md (SVE_INT_BINARY_IMM): New code\n+\titerator.\n+\t(sve_imm_con): Handle smax, smin, umax and umin.\n+\t(sve_imm_prefix): New code attribute.\n+\t* config/aarch64/predicates.md (aarch64_sve_vsb_immediate)\n+\t(aarch64_sve_vsb_operand): New predicates.\n+\t(aarch64_sve_mul_immediate): Rename to...\n+\t(aarch64_sve_vsm_immediate): ...this.\n+\t(aarch64_sve_mul_operand): Rename to...\n+\t(aarch64_sve_vsm_operand): ...this.\n+\t* config/aarch64/aarch64-sve.md (mul<mode>3): Generalize to...\n+\t(<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3): ...this.\n+\t(*mul<mode>3, *post_ra_mul<mode>3): Generalize to...\n+\t(*<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3)\n+\t(*post_ra_<SVE_INT_BINARY_IMM:optab><SVE_I:mode>3): ...these and\n+\tadd movprfx support for the immediate alternatives.\n+\t(<su><maxmin><mode>3, *<su><maxmin><mode>3): Delete in favor\n+\tof the above.\n+\t(*<SVE_INT_BINARY_SD:optab><SVE_SDI:mode>3): Fix incorrect predicate\n+\tfor operand 3.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/predicates.md (aarch64_simd_imm_one): New predicate."}, {"sha": "68c5700fdb1c5ae390b1fa9cb29e71f292a89676", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 65, "deletions": 112, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -64,13 +64,11 @@\n ;; ---- [INT] Subtraction\n ;; ---- [INT] Take address\n ;; ---- [INT] Absolute difference\n-;; ---- [INT] Multiplication\n ;; ---- [INT] Highpart multiplication\n ;; ---- [INT] Division\n ;; ---- [INT] Binary logical operations\n ;; ---- [INT] Binary logical operations (inverted second input)\n ;; ---- [INT] Shifts\n-;; ---- [INT] Maximum and minimum\n ;; ---- [FP] General binary arithmetic corresponding to rtx codes\n ;; ---- [FP] General binary arithmetic corresponding to unspecs\n ;; ---- [FP] Addition\n@@ -1622,19 +1620,77 @@\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] General binary arithmetic corresponding to rtx codes\n ;; -------------------------------------------------------------------------\n-;; Includes merging patterns for:\n-;; - ADD\n-;; - AND\n-;; - EOR\n+;; Includes:\n+;; - ADD    (merging form only)\n+;; - AND    (merging form only)\n+;; - EOR    (merging form only)\n ;; - MUL\n-;; - ORR\n+;; - ORR    (merging form only)\n ;; - SMAX\n ;; - SMIN\n-;; - SUB\n+;; - SUB    (merging form only)\n ;; - UMAX\n ;; - UMIN\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated integer binary operations that have an immediate form.\n+(define_expand \"<optab><mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_dup 3)\n+\t   (SVE_INT_BINARY_IMM:SVE_I\n+\t     (match_operand:SVE_I 1 \"register_operand\")\n+\t     (match_operand:SVE_I 2 \"aarch64_sve_<sve_imm_con>_operand\"))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n+;; Integer binary operations that have an immediate form, predicated\n+;; with a PTRUE.  We don't actually need the predicate for the first\n+;; and third alternatives, but using Upa or X isn't likely to gain much\n+;; and would make the instruction seem less uniform to the register\n+;; allocator.\n+(define_insn_and_split \"*<optab><mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t   (SVE_INT_BINARY_IMM:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"%0, 0, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_<sve_imm_con>_operand\" \"<sve_imm_con>, w, <sve_imm_con>, w\"))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE\"\n+  \"@\n+   #\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   #\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  ; Split the unpredicated form after reload, so that we don't have\n+  ; the unnecessary PTRUE.\n+  \"&& reload_completed\n+   && !register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (SVE_INT_BINARY_IMM:SVE_I (match_dup 2) (match_dup 3)))]\n+  \"\"\n+  [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n+)\n+\n+;; Unpredicated binary operations with a constant (post-RA only).\n+;; These are generated by splitting a predicated instruction whose\n+;; predicate is unused.\n+(define_insn \"*post_ra_<optab><mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(SVE_INT_BINARY_IMM:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"0, w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_sve_<sve_imm_con>_immediate\")))]\n+  \"TARGET_SVE && reload_completed\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %0.<Vetype>, #%<sve_imm_prefix>2\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %0.<Vetype>, #%<sve_imm_prefix>2\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; Predicated integer operations with merging.\n (define_expand \"cond_<optab><mode>\"\n   [(set (match_operand:SVE_I 0 \"register_operand\")\n@@ -1865,68 +1921,6 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n-;; -------------------------------------------------------------------------\n-;; ---- [INT] Multiplication\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - MUL\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated multiplication.\n-(define_expand \"mul<mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\")\n-\t(unspec:SVE_I\n-\t  [(match_dup 3)\n-\t   (mult:SVE_I\n-\t     (match_operand:SVE_I 1 \"register_operand\")\n-\t     (match_operand:SVE_I 2 \"aarch64_sve_mul_operand\"))]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; Multiplication predicated with a PTRUE.  We don't actually need the\n-;; predicate for the first alternative, but using Upa or X isn't likely\n-;; to gain much and would make the instruction seem less uniform to the\n-;; register allocator.\n-(define_insn_and_split \"*mul<mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (mult:SVE_I\n-\t     (match_operand:SVE_I 2 \"register_operand\" \"%0, 0, w\")\n-\t     (match_operand:SVE_I 3 \"aarch64_sve_mul_operand\" \"vsm, w, w\"))]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  \"@\n-   #\n-   mul\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   movprfx\\t%0, %2\\;mul\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n-  ; Split the unpredicated form after reload, so that we don't have\n-  ; the unnecessary PTRUE.\n-  \"&& reload_completed\n-   && !register_operand (operands[3], <MODE>mode)\"\n-  [(set (match_dup 0) (mult:SVE_I (match_dup 2) (match_dup 3)))]\n-  \"\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n-;; Unpredicated multiplications by a constant (post-RA only).\n-;; These are generated by splitting a predicated instruction whose\n-;; predicate is unused.\n-(define_insn \"*post_ra_mul<mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n-\t(mult:SVE_I\n-\t  (match_operand:SVE_I 1 \"register_operand\" \"0\")\n-\t  (match_operand:SVE_I 2 \"aarch64_sve_mul_immediate\")))]\n-  \"TARGET_SVE && reload_completed\"\n-  \"mul\\t%0.<Vetype>, %0.<Vetype>, #%2\"\n-)\n-\n-;; Merging forms are handled through SVE_INT_BINARY.\n-\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Highpart multiplication\n ;; -------------------------------------------------------------------------\n@@ -1998,7 +1992,7 @@\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   (SVE_INT_BINARY_SD:SVE_SDI\n \t     (match_operand:SVE_SDI 2 \"register_operand\" \"0, w, w\")\n-\t     (match_operand:SVE_SDI 3 \"aarch64_sve_mul_operand\" \"w, 0, w\"))]\n+\t     (match_operand:SVE_SDI 3 \"register_operand\" \"w, 0, w\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n@@ -2218,47 +2212,6 @@\n   \"<shift>\\t%0.<Vetype>, %1.<Vetype>, #%2\"\n )\n \n-;; -------------------------------------------------------------------------\n-;; ---- [INT] Maximum and minimum\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - SMAX\n-;; - SMIN\n-;; - UMAX\n-;; - UMIN\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated integer MAX/MIN.\n-(define_expand \"<su><maxmin><mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\")\n-\t(unspec:SVE_I\n-\t  [(match_dup 3)\n-\t   (MAXMIN:SVE_I (match_operand:SVE_I 1 \"register_operand\")\n-\t\t\t (match_operand:SVE_I 2 \"register_operand\"))]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; Integer MAX/MIN predicated with a PTRUE.\n-(define_insn \"*<su><maxmin><mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (MAXMIN:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n-\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  \"@\n-   <su><maxmin>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   movprfx\\t%0, %2\\;<su><maxmin>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,yes\")]\n-)\n-\n-;; Merging forms are handled through SVE_INT_BINARY.\n-\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] General binary arithmetic corresponding to rtx codes\n ;; -------------------------------------------------------------------------"}, {"sha": "1b154901d27e18976f6f7d7e81d8c205b9fdc054", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -388,6 +388,12 @@\n    arithmetic instructions.\"\n  (match_operand 0 \"aarch64_sve_arith_immediate\"))\n \n+(define_constraint \"vsb\"\n+  \"@internal\n+   A constraint that matches an immediate operand valid for SVE UMAX\n+   and UMIN operations.\"\n+ (match_operand 0 \"aarch64_sve_vsb_immediate\"))\n+\n (define_constraint \"vsc\"\n   \"@internal\n    A constraint that matches a signed immediate operand valid for SVE\n@@ -420,9 +426,9 @@\n \n (define_constraint \"vsm\"\n   \"@internal\n-   A constraint that matches an immediate operand valid for SVE MUL\n-   operations.\"\n- (match_operand 0 \"aarch64_sve_mul_immediate\"))\n+   A constraint that matches an immediate operand valid for SVE MUL,\n+   SMAX and SMIN operations.\"\n+ (match_operand 0 \"aarch64_sve_vsm_immediate\"))\n \n (define_constraint \"vsA\"\n   \"@internal"}, {"sha": "d52eaa57d3b419e91f0df388d71a83063e756d1c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -1285,6 +1285,9 @@\n ;; SVE integer binary division operations.\n (define_code_iterator SVE_INT_BINARY_SD [div udiv])\n \n+;; SVE integer binary operations that have an immediate form.\n+(define_code_iterator SVE_INT_BINARY_IMM [mult smax smin umax umin])\n+\n ;; SVE floating-point operations with an unpredicated all-register form.\n (define_code_iterator SVE_UNPRED_FP_BINARY [plus minus mult])\n \n@@ -1499,7 +1502,12 @@\n \t\t\t     (mult \"fmul\")])\n \n ;; The SVE immediate constraint to use for an rtl code.\n-(define_code_attr sve_imm_con [(eq \"vsc\")\n+(define_code_attr sve_imm_con [(mult \"vsm\")\n+\t\t\t       (smax \"vsm\")\n+\t\t\t       (smin \"vsm\")\n+\t\t\t       (umax \"vsb\")\n+\t\t\t       (umin \"vsb\")\n+\t\t\t       (eq \"vsc\")\n \t\t\t       (ne \"vsc\")\n \t\t\t       (lt \"vsc\")\n \t\t\t       (ge \"vsc\")\n@@ -1510,6 +1518,13 @@\n \t\t\t       (geu \"vsd\")\n \t\t\t       (gtu \"vsd\")])\n \n+;; The prefix letter to use when printing an immediate operand.\n+(define_code_attr sve_imm_prefix [(mult \"\")\n+\t\t\t\t  (smax \"\")\n+\t\t\t\t  (smin \"\")\n+\t\t\t\t  (umax \"D\")\n+\t\t\t\t  (umin \"D\")])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators.\n ;; -------------------------------------------------------------------"}, {"sha": "0f20d89764868daa7735cbd9c5b0723311580ccb", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -615,7 +615,15 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_bitmask_immediate_p (op)\")))\n \n-(define_predicate \"aarch64_sve_mul_immediate\"\n+;; Used for SVE UMAX and UMIN.\n+(define_predicate \"aarch64_sve_vsb_immediate\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"GET_MODE_INNER (GET_MODE (op)) == QImode\n+\t\t    ? aarch64_const_vec_all_same_in_range_p (op, -128, 127)\n+\t\t    : aarch64_const_vec_all_same_in_range_p (op, 0, 255)\")))\n+\n+;; Used for SVE MUL, SMAX and SMIN.\n+(define_predicate \"aarch64_sve_vsm_immediate\"\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_const_vec_all_same_in_range_p (op, -128, 127)\")))\n \n@@ -668,9 +676,13 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_simd_rshift_imm\")))\n \n-(define_predicate \"aarch64_sve_mul_operand\"\n+(define_predicate \"aarch64_sve_vsb_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"aarch64_sve_vsb_immediate\")))\n+\n+(define_predicate \"aarch64_sve_vsm_operand\"\n   (ior (match_operand 0 \"register_operand\")\n-       (match_operand 0 \"aarch64_sve_mul_immediate\")))\n+       (match_operand 0 \"aarch64_sve_vsm_immediate\")))\n \n (define_predicate \"aarch64_sve_cmp_vsc_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "8fb83602a3aac8c83eed57d463e55f707cc92a20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/smax_1.c: New test.\n+\t* gcc.target/aarch64/sve/smin_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/umax_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/umin_1.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cnot_1.c: New test."}, {"sha": "050248c81cc7335e2ce87e611eb9bd5b55a35b38", "filename": "gcc/testsuite/gcc.target/aarch64/sve/smax_1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmax_1.c?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)\t\t\t\t\t\\\n+void varith_##TYPE##_reg (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] > src[i] ? dst[i] : src[i];\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] > (TYPE) VALUE ? dst[i] : (TYPE) VALUE;\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\t\\\n+  DO_REGREG_OPS (TYPE);\t\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, 0);\t\t\\\n+  DO_IMMEDIATE_OPS (86, TYPE, 86);\t\t\\\n+  DO_IMMEDIATE_OPS (109, TYPE, 109);\t\t\\\n+  DO_IMMEDIATE_OPS (141, TYPE, 141);\t\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, minus1);\t\t\\\n+  DO_IMMEDIATE_OPS (-110, TYPE, minus110);\t\\\n+  DO_IMMEDIATE_OPS (-141, TYPE, minus141);\n+\n+DO_ARITH_OPS (int8_t)\n+DO_ARITH_OPS (int16_t)\n+DO_ARITH_OPS (int32_t)\n+DO_ARITH_OPS (int64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.b, z[0-9]+\\.b, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.h, z[0-9]+\\.h, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.s, z[0-9]+\\.s, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmax\\tz[0-9]+\\.d, z[0-9]+\\.d, #-141\\n} } } */"}, {"sha": "d6a9e9467dff6b6563e7f2c0460e3e00048f57fc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/smin_1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsmin_1.c?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)\t\t\t\t\t\\\n+void varith_##TYPE##_reg (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] < src[i] ? dst[i] : src[i];\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] < (TYPE) VALUE ? dst[i] : (TYPE) VALUE;\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\t\\\n+  DO_REGREG_OPS (TYPE);\t\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, 0);\t\t\\\n+  DO_IMMEDIATE_OPS (86, TYPE, 86);\t\t\\\n+  DO_IMMEDIATE_OPS (109, TYPE, 109);\t\t\\\n+  DO_IMMEDIATE_OPS (141, TYPE, 141);\t\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, minus1);\t\t\\\n+  DO_IMMEDIATE_OPS (-110, TYPE, minus110);\t\\\n+  DO_IMMEDIATE_OPS (-141, TYPE, minus141);\n+\n+DO_ARITH_OPS (int8_t)\n+DO_ARITH_OPS (int16_t)\n+DO_ARITH_OPS (int32_t)\n+DO_ARITH_OPS (int64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.b, z[0-9]+\\.b, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.h, z[0-9]+\\.h, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.s, z[0-9]+\\.s, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsmin\\tz[0-9]+\\.d, z[0-9]+\\.d, #-141\\n} } } */"}, {"sha": "fffedb9c319bfc888b2a6341b645ad8a9e9a6c5b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/umax_1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumax_1.c?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)\t\t\t\t\t\\\n+void varith_##TYPE##_reg (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] > src[i] ? dst[i] : src[i];\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)\t\t\t\t\\\n+void varithimm_##VALUE##_##TYPE (TYPE *dst, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] > (TYPE) VALUE ? dst[i] : (TYPE) VALUE;\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\\\n+  DO_REGREG_OPS (TYPE);\t\t\t\\\n+  DO_IMMEDIATE_OPS (2, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (86, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (109, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (141, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (229, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (255, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (256, TYPE);\n+\n+DO_ARITH_OPS (uint8_t)\n+DO_ARITH_OPS (uint16_t)\n+DO_ARITH_OPS (uint32_t)\n+DO_ARITH_OPS (uint64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #255\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tumax\\tz[0-9]+\\.b, z[0-9]+\\.b, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumax\\tz[0-9]+\\.h, z[0-9]+\\.h, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumax\\tz[0-9]+\\.s, z[0-9]+\\.s, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumax\\tz[0-9]+\\.d, z[0-9]+\\.d, #256\\n} } } */"}, {"sha": "f7cdba3b744be472ff7fea5a95ecb582a28c6809", "filename": "gcc/testsuite/gcc.target/aarch64/sve/umin_1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fumin_1.c?ref=f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE)\t\t\t\t\t\\\n+void varith_##TYPE##_reg (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] < src[i] ? dst[i] : src[i];\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE)\t\t\t\t\\\n+void varithimm_##VALUE##_##TYPE (TYPE *dst, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] < (TYPE) VALUE ? dst[i] : (TYPE) VALUE;\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\\\n+  DO_REGREG_OPS (TYPE);\t\t\t\\\n+  DO_IMMEDIATE_OPS (2, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (86, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (109, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (141, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (229, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (255, TYPE);\t\t\\\n+  DO_IMMEDIATE_OPS (256, TYPE);\n+\n+DO_ARITH_OPS (uint8_t)\n+DO_ARITH_OPS (uint16_t)\n+DO_ARITH_OPS (uint32_t)\n+DO_ARITH_OPS (uint64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #255\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tumin\\tz[0-9]+\\.b, z[0-9]+\\.b, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumin\\tz[0-9]+\\.h, z[0-9]+\\.h, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumin\\tz[0-9]+\\.s, z[0-9]+\\.s, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #141\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #229\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tumin\\tz[0-9]+\\.d, z[0-9]+\\.d, #256\\n} } } */"}]}