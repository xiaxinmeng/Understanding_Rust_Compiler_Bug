{"sha": "294eab8c10d448016ed91b705f28b0ec2bcac607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0ZWFiOGMxMGQ0NDgwMTZlZDkxYjcwNWYyOGIwZWMyYmNhYzYwNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-03-18T11:48:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-03-18T11:48:29Z"}, "message": "testsuite_random.h: New.\n\n2011-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_random.h: New.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_c99_math,\n\tdg-require-c99_math): Add.\n\t* testsuite/26_numerics/random/bernoulli_distribution/\n\toperators/values.cc: New.\n\t* testsuite/26_numerics/random/binomial_distribution/\n\toperators/values.cc: Likewise.\n\t* testsuite/26_numerics/random/geometric_distribution/\n\toperators/values.cc: Likewise.\n\nFrom-SVN: r171133", "tree": {"sha": "b3d8eda8f4baf187b2e2539e7d32020774102801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3d8eda8f4baf187b2e2539e7d32020774102801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294eab8c10d448016ed91b705f28b0ec2bcac607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294eab8c10d448016ed91b705f28b0ec2bcac607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294eab8c10d448016ed91b705f28b0ec2bcac607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294eab8c10d448016ed91b705f28b0ec2bcac607/comments", "author": null, "committer": null, "parents": [{"sha": "30a49b23edb7a5a6201c5f59c8a5eee9663c3910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a49b23edb7a5a6201c5f59c8a5eee9663c3910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a49b23edb7a5a6201c5f59c8a5eee9663c3910"}], "stats": {"total": 365, "additions": 361, "deletions": 4}, "files": [{"sha": "e476058c1a5b2262cfa3c9727697f86caffc64fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -1,3 +1,15 @@\n+2011-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_random.h: New.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_c99_math,\n+\tdg-require-c99_math): Add.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/\n+\toperators/values.cc: New.\n+\t* testsuite/26_numerics/random/binomial_distribution/\n+\toperators/values.cc: Likewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/\n+\toperators/values.cc: Likewise.\n+\n 2011-03-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Add base destructors for stdexcept classes."}, {"sha": "513b5a6bdefea3f052392ffb5cbae02633445505", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/values.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fvalues.cc?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::bernoulli_distribution bd1(0.25);\n+  auto bbd1 = std::bind(bd1, eng);\n+  testDiscreteDist(bbd1, [](int n) { return bernoulli_pdf(n, 0.25); } );\n+\n+  std::bernoulli_distribution bd2(0.5);\n+  auto bbd2 = std::bind(bd2, eng);\n+  testDiscreteDist(bbd2, [](int n) { return bernoulli_pdf(n, 0.5); } );\n+\n+  std::bernoulli_distribution bd3(0.75);\n+  auto bbd3 = std::bind(bd3, eng);\n+  testDiscreteDist(bbd3, [](int n) { return bernoulli_pdf(n, 0.75); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f1f956575a9b5934ee29e2b2ef4f1d0545b1d1e0", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/values.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-c99_math \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::binomial_distribution<> bd1(5, 0.3);\n+  auto bbd1 = std::bind(bd1, eng);\n+  testDiscreteDist(bbd1, [](int n) { return binomial_pdf(n, 0.3, 5); } );\n+\n+  std::binomial_distribution<> bd2(55, 0.3);\n+  auto bbd2 = std::bind(bd2, eng);\n+  testDiscreteDist(bbd2, [](int n) { return binomial_pdf(n, 0.3, 55); } );\n+\n+  // libstdc++/48114\n+  std::binomial_distribution<> bd3(10, 0.75);\n+  auto bbd3 = std::bind(bd3, eng);\n+  testDiscreteDist(bbd3, [](int n) { return binomial_pdf(n, 0.75, 10); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f6eaaf6bd198e9a57ab43f26db7729e8a9f817ba", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/values.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fvalues.cc?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::geometric_distribution<> gd1(0.5);\n+  auto bgd1 = std::bind(gd1, eng);\n+  testDiscreteDist(bgd1, [](int n) { return geometric_pdf(n, 0.5); } );\n+\n+  std::geometric_distribution<> gd2(0.75);\n+  auto bgd2 = std::bind(gd2, eng);\n+  testDiscreteDist(bgd2, [](int n) { return geometric_pdf(n, 0.75); } );\n+\n+  // libstdc++/48114\n+  std::geometric_distribution<> gd3(0.25);\n+  auto bgd3 = std::bind(gd3, eng);\n+  testDiscreteDist(bgd3, [](int n) { return geometric_pdf(n, 0.25); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "34f81e859787d43ddca1a234c2395ea3ba438385", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -1,6 +1,6 @@\n # Handlers for additional dg-xxx keywords in tests.\n \n-# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This program is free software; you can redistribute it and/or modify\n@@ -107,6 +107,15 @@ proc dg-require-cstdint { args } {\n     return\n }\n \n+proc dg-require-c99_math { args } {\n+    if { ![ check_v3_target_c99_math ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n proc dg-require-atomic-builtins { args } {\n     if { ![ check_v3_target_atomic_builtins ] } {\n \tupvar dg-do-what dg-do-what"}, {"sha": "ac67ebbb51fba6b7b12bb85173e1ad7e620167d9", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -1,6 +1,7 @@\n # libstdc++ \"tool init file\" for DejaGNU\n \n-# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+# 2009, 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This program is free software; you can redistribute it and/or modify\n@@ -1145,12 +1146,70 @@ proc check_v3_target_cstdint { } {\n     return $et_cstdint\n }\n \n+proc check_v3_target_c99_math { } {\n+    global cxxflags\n+    global DEFAULT_CXXFLAGS\n+    global et_c99_math\n+\n+    global tool\n+\n+    if { ![info exists et_c99_math_target_name] } {\n+\tset et_c99_math_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_c99_math_target_name } {\n+\tverbose \"check_v3_target_c99_math: `$et_c99_math_target_name'\" 2\n+\tset et_c99_math_target_name $current_target\n+\tif [info exists et_c99_math] {\n+\t    verbose \"check_v3_target_c99_math: removing cached result\" 2\n+\t    unset et_c99_math\n+\t}\n+    }\n+\n+    if [info exists et_c99_math] {\n+\tverbose \"check_v3_target_c99_math: using cached result\" 2\n+    } else {\n+\tset et_c99_math 0\n+\n+\t# Set up and compile a C++0x test program that depends\n+\t# on the C99 math facilities to be available.\n+\tset src c99_math[pid].cc\n+\tset exe c99_math[pid].exe\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <tr1/cmath>\"\n+\tputs $f \"int main()\"\n+\tputs $f \"#ifdef _GLIBCXX_USE_C99_MATH_TR1\"\n+\tputs $f \"{ return 0; }\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, compilation succeeded.\n+\t    set et_c99_math 1\n+\t} else {\n+\t    verbose \"check_v3_target_c99_math: compilation failed\" 2\n+\t}\n+    }\n+    verbose \"check_v3_target_c99_math: $et_c99_math\" 2\n+    return $et_c99_math\n+}\n+\n proc check_v3_target_atomic_builtins { } {\n     global cxxflags\n     global DEFAULT_CXXFLAGS\n-    global et_cstdint\n+    global et_atomic_builtins\n \n-    global tool\t\n+    global tool\n \n     if { ![info exists et_atomic_builtins_target_name] } {\n \tset et_atomic_builtins_target_name \"\""}, {"sha": "417a95a8c6c0bb2514d9484cfa006474b5ea5fee", "filename": "libstdc++-v3/testsuite/util/testsuite_random.h", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294eab8c10d448016ed91b705f28b0ec2bcac607/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h?ref=294eab8c10d448016ed91b705f28b0ec2bcac607", "patch": "@@ -0,0 +1,124 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+/**\n+ * @file testsuite_random.h\n+ */\n+\n+#ifndef _GLIBCXX_TESTSUITE_RANDOM_H\n+#define _GLIBCXX_TESTSUITE_RANDOM_H\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  // Adapted for libstdc++ from GNU gsl-1.14/randist/test.c\n+  // Copyright (C) 1996, 1997, 1998, 1999, 2000, 2007, 2010\n+  // James Theiler, Brian Gough\n+  template<unsigned long BINS = 100,\n+\t   unsigned long N = 100000,\n+\t   typename Distribution, typename Pdf>\n+    void\n+    testDiscreteDist(Distribution& f, Pdf pdf)\n+    {\n+      bool test __attribute__((unused)) = true;\n+      double count[BINS], p[BINS];\n+\n+      for (unsigned long i = 0; i < BINS; i++)\n+\tcount[i] = 0;\n+\n+      for (unsigned long i = 0; i < N; i++)\n+\t{\n+\t  auto r = f();\n+\t  if (r >= 0 && r < BINS)\n+\t    count[r]++;\n+\t}\n+\n+      for (unsigned long i = 0; i < BINS; i++)\n+\tp[i] = pdf(i);\n+\n+      for (unsigned long i = 0; i < BINS; i++)\n+\t{\n+\t  bool status_i;\n+\t  double d = std::abs(count[i] - N * p[i]);\n+\n+\t  if (p[i] != 0)\n+\t    {\n+\t      double s = d / std::sqrt(N * p[i]);\n+\t      status_i = (s > 5) && (d > 1);\n+\t    }\n+\t  else\n+\t    status_i = (count[i] != 0);\n+\n+\t  VERIFY( !status_i );\n+\t}\n+    }\n+\n+  inline double\n+  bernoulli_pdf(int k, double p)\n+  {\n+    if (k == 0)\n+      return 1 - p;\n+    else if (k == 1)\n+      return p;\n+    else\n+      return 0;\n+  }\n+\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+  inline double\n+  binomial_pdf(int k, double p, int n)\n+  {\n+    if (k < 0 || k > n)\n+      return 0;\n+    else\n+      {\n+\tdouble q;\n+\n+\tif (p == 0) \n+\t  q = (k == 0) ? 1 : 0;\n+\telse if (p == 1)\n+\t  q = (k == n) ? 1 : 0;\n+\telse\n+\t  {\n+\t    double ln_Cnk = (std::lgamma(n + 1) - std::lgamma(k + 1)\n+\t\t\t     - std::lgamma(n - k + 1));\n+\t    q = ln_Cnk + k * std::log(p) + (n - k) * std::log1p(-p);\n+\t    q = std::exp(q);\n+\t  }\n+\n+\treturn q;\n+      }\n+  }\n+#endif\n+\n+  inline double\n+  geometric_pdf(int k, double p)\n+  {\n+    if (k < 0)\n+      return 0;\n+    else if (k == 0)\n+      return p;\n+    else\n+      return p * std::pow(1 - p, k);\n+  }\n+} // namespace __gnu_test\n+\n+#endif // #ifndef _GLIBCXX_TESTSUITE_RANDOM_H"}]}