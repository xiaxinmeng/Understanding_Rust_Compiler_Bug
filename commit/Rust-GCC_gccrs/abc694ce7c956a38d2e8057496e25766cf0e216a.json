{"sha": "abc694ce7c956a38d2e8057496e25766cf0e216a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjNjk0Y2U3Yzk1NmEzOGQyZTgwNTc0OTZlMjU3NjZjZjBlMjE2YQ==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-07-22T12:13:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:45Z"}, "message": "[Ada] Crash on cond expression as actual for anonymous access formal\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Branch): Properly anticipate expansion of\n\tconditional expressions producing object declarations in\n\taddition to assignment statements, and rename formal.", "tree": {"sha": "7133f661c9d842edd06f770f0f291f22d798b42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7133f661c9d842edd06f770f0f291f22d798b42a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc694ce7c956a38d2e8057496e25766cf0e216a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc694ce7c956a38d2e8057496e25766cf0e216a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc694ce7c956a38d2e8057496e25766cf0e216a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc694ce7c956a38d2e8057496e25766cf0e216a/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01c11cc9cbb2d2a78f03c7c90d98149fd650a95"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "9b7efc2bc627cea2c2df260c6f777d759962750f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc694ce7c956a38d2e8057496e25766cf0e216a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc694ce7c956a38d2e8057496e25766cf0e216a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=abc694ce7c956a38d2e8057496e25766cf0e216a", "patch": "@@ -3961,42 +3961,47 @@ package body Exp_Ch6 is\n \n                            procedure Insert_Level_Assign (Branch : Node_Id) is\n \n-                              procedure Expand_Branch (Assn : Node_Id);\n+                              procedure Expand_Branch (Res_Assn : Node_Id);\n                               --  Perform expansion or iterate further within\n-                              --  nested conditionals.\n+                              --  nested conditionals given the object\n+                              --  declaration or assignment to result object\n+                              --  created during expansion which represents\n+                              --  a branch of the conditional expression.\n \n                               -------------------\n                               -- Expand_Branch --\n                               -------------------\n \n-                              procedure Expand_Branch (Assn : Node_Id) is\n+                              procedure Expand_Branch (Res_Assn : Node_Id) is\n                               begin\n-                                 pragma Assert (Nkind (Assn) =\n-                                                 N_Assignment_Statement);\n+                                 pragma Assert (Nkind (Res_Assn) in\n+                                                 N_Assignment_Statement |\n+                                                 N_Object_Declaration);\n \n                                  --  There are more nested conditional\n                                  --  expressions so we must go deeper.\n \n-                                 if Nkind (Expression (Assn)) =\n+                                 if Nkind (Expression (Res_Assn)) =\n                                       N_Expression_With_Actions\n                                    and then\n                                      Nkind\n-                                       (Original_Node (Expression (Assn))) in\n-                                         N_Case_Expression | N_If_Expression\n+                                       (Original_Node (Expression (Res_Assn)))\n+                                         in N_Case_Expression | N_If_Expression\n                                  then\n-                                    Insert_Level_Assign (Expression (Assn));\n+                                    Insert_Level_Assign\n+                                      (Expression (Res_Assn));\n \n                                  --  Add the level assignment\n \n                                  else\n-                                    Insert_Before_And_Analyze (Assn,\n+                                    Insert_Before_And_Analyze (Res_Assn,\n                                       Make_Assignment_Statement (Loc,\n                                         Name       =>\n                                           New_Occurrence_Of\n                                             (Lvl, Loc),\n                                         Expression =>\n                                           Dynamic_Accessibility_Level\n-                                            (Expression (Assn))));\n+                                            (Expression (Res_Assn))));\n                                  end if;\n                               end Expand_Branch;\n "}]}