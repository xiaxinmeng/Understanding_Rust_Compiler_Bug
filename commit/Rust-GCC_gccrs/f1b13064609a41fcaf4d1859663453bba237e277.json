{"sha": "f1b13064609a41fcaf4d1859663453bba237e277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiMTMwNjQ2MDlhNDFmY2FmNGQxODU5NjYzNDUzYmJhMjM3ZTI3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-03T09:06:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-03T09:06:14Z"}, "message": "i386: Fix a peephole2 for -mavx512vl -mno-avx512bw [PR99321]\n\nAs the testcase shows, the\n(define_peephole2\n  [(set (match_operand 0 \"sse_reg_operand\")\n        (match_operand 1 \"sse_reg_operand\"))\n   (set (match_dup 0)\n        (match_operator 3 \"commutative_operator\"\n          [(match_dup 0)\n           (match_operand 2 \"memory_operand\")]))]\npeephole2 can for AVX512VL without AVX512BW (I guess it is a hyphothetical\nCPU, but unfortunately they are separate CPUID bits and we have separate\noptions for them) turn something that is valid without that peephole2\ninto something that is invalid (and in this case ICEs).\nThe problem is that the vpadd[bw], vpmullw, vpmin[su][bw] and vpmax[su][bw]\ninstructions require both AVX512BW and AVX512VL when they have\n16-byte or 32-byte operands.  If operands[0] is %[xy]mm0 .. %[xy]mm15\nbut operands[1] is %[xy]mm16 .. %[xy]mm31, then before we have\na vector move which uses vmovdqa{32,64} and doesn't need AVX512BW,\nAVX512VL is I think implied from HARD_REGNO_MODE_OK only supporting\nV{16Q,32Q,8H,16H}imode in EXT_REX_SSE_REGNO_P regs with AVX512VL, and then\nwe have a commutative operation with that %[xy]mm0 .. %[xy]mm15 destination\nand one source and a memory operand, so VEX encoded operation.\nAnd, the peephole2 wants to replace it with a load into the destination\nregister from memory (ok) and then the commutative arith instruction.\nBut that needs EVEX encoding because of the high register and so requires\nAVX512BW which might not be enabled.\nThe exception is and/ior/xor, because the hw doesn't have\nvp{and,or,xor}{b,w} instructions at all, it uses vp{and,or,xor}d instead\nand that of course doesn't need AVX512BW.\n\nBTW, there are other bugs I need to look at, while the vp{min,max}ub with\n16-byte operands instruction properly requires avx512bw for v constraints\nand otherwise uses x, e.g. the vpadd[bw] etc. instructions don't.\nI'll try to handle that incrementally later this week.\n\n2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99321\n\t* config/i386/predicates.md (logic_operator): New define_predicate.\n\t* config/i386/i386.md (mov + mem using comm arith peephole2):\n\tPunt if operands[1] is EXT_REX_SSE_REGNO_P, AVX512BW is not enabled\n\tand the inner mode is [QH]Imode.\n\n\t* gcc.target/i386/pr99321.c: New test.", "tree": {"sha": "1fc3cf37bad7d2e33a914075eeb3989d5b5cec6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc3cf37bad7d2e33a914075eeb3989d5b5cec6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1b13064609a41fcaf4d1859663453bba237e277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b13064609a41fcaf4d1859663453bba237e277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b13064609a41fcaf4d1859663453bba237e277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b13064609a41fcaf4d1859663453bba237e277/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba09d11a9d0ae2382bab715b102a7746d20dea6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba09d11a9d0ae2382bab715b102a7746d20dea6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba09d11a9d0ae2382bab715b102a7746d20dea6d"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "2820f6d618897645f4903669b7d23253fddc15d5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f1b13064609a41fcaf4d1859663453bba237e277", "patch": "@@ -19843,7 +19843,16 @@\n \t(match_operator 3 \"commutative_operator\"\n \t  [(match_dup 0)\n \t   (match_operand 2 \"memory_operand\")]))]\n-  \"REGNO (operands[0]) != REGNO (operands[1])\"\n+  \"REGNO (operands[0]) != REGNO (operands[1])\n+   /* Punt if operands[1] is %[xy]mm16+ and AVX512BW is not enabled,\n+      as EVEX encoded vpadd[bw], vpmullw, vpmin[su][bw] and vpmax[su][bw]\n+      instructions require AVX512BW and AVX512VL, but with the original\n+      instructions it might require just AVX512VL.\n+      AVX512VL is implied from TARGET_HARD_REGNO_MODE_OK.  */\n+   && (!EXT_REX_SSE_REGNO_P (REGNO (operands[1]))\n+       || TARGET_AVX512BW\n+       || GET_MODE_SIZE (GET_MODE_INNER (GET_MODE (operands[0]))) > 2\n+       || logic_operator (operands[3], VOIDmode))\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0)\n \t(match_op_dup 3 [(match_dup 0) (match_dup 1)]))])"}, {"sha": "b6dd5e9d3b243b497bffbeb40a07d9fe5cad3bfc", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f1b13064609a41fcaf4d1859663453bba237e277", "patch": "@@ -1486,6 +1486,10 @@\n (define_predicate \"div_operator\"\n   (match_code \"div\"))\n \n+;; Return true if this is a and, ior or xor operation.\n+(define_predicate \"logic_operator\"\n+  (match_code \"and,ior,xor\"))\n+\n ;; Return true if this is a plus, minus, and, ior or xor operation.\n (define_predicate \"plusminuslogic_operator\"\n   (match_code \"plus,minus,and,ior,xor\"))"}, {"sha": "d290b67df8d18862355d8882aaed6e9a2997b582", "filename": "gcc/testsuite/gcc.target/i386/pr99321.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99321.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b13064609a41fcaf4d1859663453bba237e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99321.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99321.c?ref=f1b13064609a41fcaf4d1859663453bba237e277", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/99321 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=btver2 -fno-tree-dce -mavx512vl -mno-avx512bw\" } */\n+\n+typedef unsigned __attribute__((__vector_size__ (8))) A;\n+typedef unsigned int __attribute__((__vector_size__ (8))) B;\n+typedef unsigned char __attribute__((__vector_size__ (16))) C;\n+typedef unsigned __attribute__((__vector_size__ (16))) D;\n+typedef unsigned int __attribute__((__vector_size__ (16))) E;\n+typedef unsigned __attribute__((__vector_size__ (16))) F;\n+typedef unsigned __attribute__((__vector_size__ (32))) G;\n+typedef int __attribute__((__vector_size__ (32))) H;\n+typedef unsigned int __attribute__((__vector_size__ (32))) I;\n+typedef char __attribute__((__vector_size__ (64))) J;\n+typedef unsigned int __attribute__((__vector_size__ (64))) K;\n+typedef unsigned long long __attribute__((__vector_size__ (64))) L;\n+unsigned char a;\n+unsigned b, c;\n+H d;\n+E e, f;\n+D g;\n+L h;\n+\n+A\n+foo0 (A i, C j, G k, B l, K m, B n, I o)\n+{\n+  J p, q = a != p;\n+  F r = b << f;\n+  int s = a * 15;\n+  C t = (1 << ((C) ((C) { 80 } >=j) & sizeof (0)) | (j ^ (C) { 5 }) << (j & sizeof (0))) != 0;\n+  L u = h;\n+  H v = d - 40;\n+  u ^= -(long long) n;\n+  D w = (char) s > g;\n+  o ^= c / o;\n+  J x = p + q + (J) m + (J) u + (J) u;\n+  G y = ((union { J a; G b;}) x).b + ((union { J a; G b[2];}) x).b[1] + k + v + o;\n+  C z = ((union { G a; C b;}) y).b + ((union { G a; C b;}) y).b + j + t + (C) g + (C) w + (C) e + (C) f + (C) r;\n+  A zz = ((union { C a; A b;}) z).b + i + l + n;\n+  return zz;\n+}"}]}