{"sha": "31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyODBmYjdjNDdlNmEzMjI4OWI0ZGZjNDc4ODBhOWYyMmE5ZDliNA==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-11-26T03:58:56Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-11-26T03:58:56Z"}, "message": "prims.cc (_Jv_NewObjectArray): Undo placement change.\n\n2000-11-25  Anthony Green  <green@redhat.com>\n\n\t* prims.cc (_Jv_NewObjectArray): Undo placement change.\n\t(_Jv_NewPrimArray): Likewise.\n\t* gcj/array.h (__JArray): Undo const change.  Removed constructor.\n\t(class JArray): Removed constructor.\n\n\t* java/lang/Thread.java (context_class_loader): New private data.\n\t(getContextClassLoader): New method.\n\t(setContextClassLoader): New method.\n\t(Thread): Initialize context_class_loader.\n\n\t* java/net/URLClassLoader.java: Import java.util.Enumeration.\n\t(getResource): Rename to findResource.\n\t(findResource): New method.  Used to be getResource.\n\t(getResourceAsStream): Deleted.\n\t(jarFileize): Extracted logic from URLClassLoader constructor into\n\tthis new private method.\n\t(addURL): New protected method.\n\t(URLClassLoader): Call jarFileize.  Use addElement instead of\n\tinsertElementAt.\n\t(findResources): New method.\n\n\t* java/lang/ClassLoader.java: Import java.util.Enumeration.\n\t(getResource): Implement correct logic.\n\t(findResource): New method.\n\t(getResources): New method.\n\t(findClass): Create a ClassNotFoundException with the name of the\n\tclass rather than nothing at all.\n\t(defineClass) Only throw ClassFormatError.\n\n\t* java/lang/Class.java (forName): New method.\n\t* java/lang/Class.h (forName): New method.\n\t* java/lang/natClass.cc (forName): New method.\n\nFrom-SVN: r37751", "tree": {"sha": "271c97444f9f312ff7d98c59c17993b4b9218ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/271c97444f9f312ff7d98c59c17993b4b9218ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/comments", "author": null, "committer": null, "parents": [{"sha": "1786009e06fdea320bf13b65f130632853c9386a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1786009e06fdea320bf13b65f130632853c9386a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1786009e06fdea320bf13b65f130632853c9386a"}], "stats": {"total": 289, "additions": 191, "deletions": 98}, "files": [{"sha": "b3ba9938228dab83643d06e49427e99902471a96", "filename": "libjava/gcj/array.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fgcj%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fgcj%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Farray.h?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -17,21 +17,9 @@ extern \"Java\" {\n \n class __JArray : public java::lang::Object\n {\n-protected:\n-  // FIXME: this is a hack to work around a bug in the g++ Java\n-  // support.  If we add a constructor with a jsize argument to\n-  // JArray<T>, then g++ complains.\n-  __JArray () : length (0)\n-  {\n-  }\n public:\n-  const jsize length;\n+  jsize length;\n   friend jsize JvGetArrayLength (__JArray*);\n-\n-  // This probably shouldn't be public.\n-  __JArray (jsize l) : length (l)\n-  {\n-  }\n };\n \n template<class T>"}, {"sha": "edaebb3245a5d95217f9c2fbed19459f099eaae3", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -103,6 +103,7 @@ struct _Jv_ifaces\n class java::lang::Class : public java::lang::Object\n {\n public:\n+  static jclass forName (jstring className, java::lang::ClassLoader *loader);\n   static jclass forName (jstring className);\n   JArray<jclass> *getClasses (void);\n "}, {"sha": "0f081ebbac6601f97efe646bc36f81011698db9f", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -30,6 +30,8 @@ public final class Class implements Serializable\n {\n   public static native Class forName (String className)\n     throws ClassNotFoundException;\n+  public static native Class forName (String className, ClassLoader loader)\n+    throws ClassNotFoundException;\n   public native Class[] getClasses ();\n   public native ClassLoader getClassLoader ();\n   public native Class getComponentType ();"}, {"sha": "de9560317a250c8604ca7201aeabf5e74e3786a8", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -11,8 +11,10 @@\n package java.lang;\n \n import java.io.InputStream;\n+import java.io.IOException;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.util.Enumeration;\n import java.util.Stack;\n \n /**\n@@ -132,7 +134,7 @@ protected Class loadClass(String name, boolean link)\n   protected Class findClass (String name)\n     throws ClassNotFoundException\n   {\n-    throw new ClassNotFoundException ();\n+    throw new ClassNotFoundException (name);\n   }\n \n   /** \n@@ -154,7 +156,7 @@ protected Class findClass (String name)\n    * @exception java.lang.LinkageError\n    * @see ClassLoader#defineClass(String,byte[],int,int) */\n   protected final Class defineClass(byte[] data, int off, int len) \n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError\n+    throws ClassFormatError\n   {\n     return defineClass (null, data, off, len);\n   }\n@@ -188,7 +190,7 @@ protected final synchronized Class defineClass(String name,\n \t\t\t\t\t\t byte[] data,\n \t\t\t\t\t\t int off,\n \t\t\t\t\t\t int len)\n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError\n+    throws ClassFormatError\n   {\n     if (data==null || data.length < off+len || off<0 || len<0)\n       throw new ClassFormatError (\"arguments to defineClass \"\n@@ -207,10 +209,7 @@ protected final synchronized Class defineClass(String name,\n \n       return defineClass0 (name, data, off, len);\n \n-    } catch (java.lang.LinkageError x) {\n-      throw x;\t\t// rethrow\n-\n-    } catch (java.lang.ClassNotFoundException x) {\n+    } catch (ClassFormatError x) {\n       throw x;\t\t// rethrow\n \n     } catch (java.lang.VirtualMachineError x) {\n@@ -223,15 +222,15 @@ protected final synchronized Class defineClass(String name,\n \t\t\t       + \"while defining class \"\n \t\t\t       + name + \": \" \n \t\t\t       + x.toString ());\n-     }\n+    }\n   }\n \n   /** This is the entry point of defineClass into the native code */\n   private native Class defineClass0 (String name,\n \t\t\t\t     byte[] data,\n \t\t\t\t     int off,\n \t\t\t\t     int len)\n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError;\n+    throws ClassFormatError;\n \n \n   /** \n@@ -356,8 +355,8 @@ public InputStream getResourceAsStream(String name)\n       if (res == null) return null;\n       return res.openStream ();\n     } catch (java.io.IOException x) {\n-       return null;\n-     }\n+      return null;\n+    }\n   }\n  \n   /**\n@@ -369,9 +368,62 @@ public InputStream getResourceAsStream(String name)\n    * @see     java.lang.ClassLoader#getResourceAsStream(String)\n    * @see     java.io.URL\n    */\n-  public URL getResource(String name) {\n+  public URL getResource (String name) \n+  {\n+    // The rules say search the parent class if non-null,\n+    // otherwise search the built-in class loader (assumed to be\n+    // the system ClassLoader).  If not found, call\n+    // findResource().\n+    URL result = null;\n+\n+    ClassLoader delegate = parent;\n+\n+    if (delegate == null)\n+      delegate = getSystemClassLoader ();\n+\t\n+    // Protect ourselves from looping.\n+    if (this != delegate)\n+      result = delegate.getResource (name);\n+\n+    if (result != null)\n+      return result;\n+    else\n+      return findResource (name);\n+  }\n+\n+  protected URL findResource (String name)\n+  {\n+    // Default to returning null.  Derived classes implement this.\n     return null;\n   }\n \n+  public Enumeration getResources (String name) throws IOException\n+  {\n+    // The rules say search the parent class if non-null,\n+    // otherwise search the built-in class loader (assumed to be\n+    // the system ClassLoader).  If not found, call\n+    // findResource().\n+    Enumeration result = null;\n+\n+    ClassLoader delegate = parent;\n+\n+    if (delegate == null)\n+      delegate = getSystemClassLoader ();\n+\t\n+    // Protect ourselves from looping.\n+    if (this != delegate)\n+      result = delegate.getResources (name);\n+\n+    if (result != null)\n+      return result;\n+    else\n+      return findResources (name);\n+  }\n+\n+  protected Enumeration findResources (String name) throws IOException\n+  {\n+    // Default to returning null.  Derived classes implement this.\n+    return null;\n+  }\n }\n "}, {"sha": "33fabf4b5ace127ebb7860b1dfc0dc0d2333e19f", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -145,15 +145,23 @@ public final void setDaemon (boolean status)\n     daemon_flag = status;\n   }\n \n-  // TODO12:\n-  // public ClassLoader getContextClassLoader()\n-  // {\n-  // }\n+  public ClassLoader getContextClassLoader()\n+  {\n+    if (context_class_loader == null)\n+      {\n+\tcontext_class_loader = ClassLoader.getSystemClassLoader ();\n+\treturn context_class_loader;\n+      }\n+\n+    // FIXME: Add security manager stuff here.\n+    return context_class_loader;\n+  }\n \n-  // TODO12:\n-  // public void setContextClassLoader(ClassLoader cl)\n-  // {\n-  // }\n+  public void setContextClassLoader(ClassLoader cl)\n+  {\n+    // FIXME: Add security manager stuff here.\n+    context_class_loader = cl;\n+  }\n \n   public final void setName (String n)\n   {\n@@ -227,13 +235,14 @@ public Thread (ThreadGroup g, Runnable r, String n)\n     interrupt_flag = false;\n     alive_flag = false;\n     startable_flag = true;\n-    \n+\n     if (current != null)\n       {\n \tdaemon_flag = current.isDaemon();\n         int gmax = group.getMaxPriority();\n \tint pri = current.getPriority();\n \tpriority = (gmax < pri ? gmax : pri);\n+\tcontext_class_loader = current.context_class_loader;\n       }\n     else\n       {\n@@ -277,7 +286,7 @@ public Thread (Runnable r, String n)\n   public String toString ()\n   {\n     return \"Thread[\" + name + \",\" + priority + \",\" + \n-\t   (group == null ? \"\" : group.getName()) + \"]\";\n+      (group == null ? \"\" : group.getName()) + \"]\";\n   }\n \n   public static native void yield ();\n@@ -291,6 +300,7 @@ public String toString ()\n   boolean interrupt_flag;\n   private boolean alive_flag;\n   private boolean startable_flag;\n+  private ClassLoader context_class_loader;\n \n   // Our native data.\n   private Object data;"}, {"sha": "2eec179fa647c1f3be814a670ad604fe836560b3", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -72,7 +72,7 @@ static _Jv_Utf8Const *finit_leg_name = _Jv_makeUtf8Const (\"$finit$\", 7);\n \f\n \n jclass\n-java::lang::Class::forName (jstring className)\n+java::lang::Class::forName (jstring className, java::lang::ClassLoader *loader)\n {\n   if (! className)\n     JvThrow (new java::lang::NullPointerException);\n@@ -85,10 +85,10 @@ java::lang::Class::forName (jstring className)\n   // IllegalArgumentException on failure.\n   _Jv_Utf8Const *name = _Jv_makeUtf8Const (buffer, length);\n \n-  // FIXME: should use class loader from calling method.\n+  // FIXME: should use bootstrap class loader if loader is null.\n   jclass klass = (buffer[0] == '[' \n-\t\t  ? _Jv_FindClassFromSignature (name->data, NULL)\n-\t\t  : _Jv_FindClass (name, NULL));\n+\t\t  ? _Jv_FindClassFromSignature (name->data, loader)\n+\t\t  : _Jv_FindClass (name, loader));\n \n   if (klass)\n     _Jv_InitClass (klass);\n@@ -98,6 +98,13 @@ java::lang::Class::forName (jstring className)\n   return klass;\n }\n \n+jclass\n+java::lang::Class::forName (jstring className)\n+{\n+  // FIXME: should use class loader from calling method.\n+  return forName (className, NULL);\n+}\n+\n java::lang::reflect::Constructor *\n java::lang::Class::getConstructor (JArray<jclass> *param_types)\n {\n@@ -608,7 +615,7 @@ java::lang::Class::getMethods (void)\n   return result;\n }\n \n-jboolean\n+inline jboolean\n java::lang::Class::isAssignableFrom (jclass klass)\n {\n   // Arguments may not have been initialized, given \".class\" syntax.\n@@ -899,7 +906,7 @@ _Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface, int method_idx)\n   return cldt->cls.itable[idx];\n }\n \n-inline jboolean\n+jboolean\n _Jv_IsAssignableFrom (jclass target, jclass source)\n {\n   if (target == &ObjectClass "}, {"sha": "eeec8821316836193bc1646b341f9e92fb2fa602", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 87, "deletions": 49, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -10,6 +10,7 @@\n \n import java.io.*;\n import java.util.jar.*;\n+import java.util.Enumeration;\n import java.util.Vector;\n \n public class URLClassLoader extends ClassLoader \n@@ -42,6 +43,56 @@ public URLClassLoader (URL[] urls, ClassLoader parent)\n     this (urls, parent, null);\n   }\n \n+  // A File URL may actually be a Jar URL.  Convert if possible.\n+  private URL jarFileize (URL url)\n+  {\n+    if (! url.getProtocol ().equals (\"jar\"))\n+      {\n+\tString f = url.getFile ();\n+\n+\t// If it ends with '/' we'll take it for a directory,\n+\t// otherwise it's a jar file.  This is how JDK 1.2 defines\n+\t// it, so we will not try to be smart here.\n+\tif (f.charAt (f.length ()-1) != '/')\n+\t  {\n+\t    try\n+\t      {\n+\t\turl = new URL (\"jar\", \"\", -1, (url.toExternalForm ())+\"!/\", \n+\t\t\t       getHandler0 (\"jar\"));\n+\t      } \n+\t    catch (MalformedURLException x)\n+\t      {\n+\t\t/* ignore */\n+\t      }\n+\t  }\n+      }\n+    return url;\n+  }\n+\n+  protected void addURL (URL url)\n+  {\n+    JarURLConnection conn = null;\n+    \n+    // Convert a Jar File URL into Jar URL if possible.\n+    url = jarFileize (url);\n+\n+    path.addElement (url);\n+\n+    if (url.getProtocol ().equals (\"jar\"))\n+      {\n+\ttry\n+\t  {\n+\t    conn = (JarURLConnection) url.openConnection ();\n+\t  }\n+\tcatch (java.io.IOException x)\n+\t  {\n+\t    /* ignore */\n+\t  }\n+      }\n+\n+    info.addElement (conn);\n+  }\n+\n   public URLClassLoader (URL[] urls, ClassLoader parent,\n \t\t\t URLStreamHandlerFactory fac)\n   { \n@@ -61,31 +112,10 @@ public URLClassLoader (URL[] urls, ClassLoader parent,\n \n     for (int i = 0; i < urls.length; i++)\n       {\n-\tURL u = urls[i];\n+\t// Convert a Jar File URL into a Jar URL is possible. \n+\tURL u = jarFileize(urls[i]);\n \n-\t// If it is a jar url, then we'll search it as is.  \n-\tif (! u.getProtocol ().equals (\"jar\"))\n-\t  {\n-\t    String f = u.getFile ();\n-\n-\t    // If it ends with '/' we'll take it for a directory,\n-\t    // otherwise it's a jar file.  This is how JDK 1.2 defines\n-\t    // it, so we will not try to be smart here.\n-\t    if (f.charAt (f.length ()-1) != '/')\n-\t      {\n-\t\ttry\n-\t\t  {\n-\t\t    u = new URL (\"jar\", \"\", -1, (u.toExternalForm ())+\"!/\", \n-\t\t\t\t getHandler0 (\"jar\"));\n-\t\t  } \n-\t\tcatch (MalformedURLException x)\n-\t\t  {\n-\t\t    /* ignore */\n-\t\t  }\n-\t      }\n-\t  }\n-\n-\tpath.insertElementAt (u, i);\n+\tpath.addElement (u);\n \n \tif (u.getProtocol ().equals (\"jar\"))\n \t  {\n@@ -98,75 +128,83 @@ public URLClassLoader (URL[] urls, ClassLoader parent,\n \t      {\n \t\t/* ignore */\n \t      }\n-\t    info.insertElementAt (conn, i);\n+\t    info.addElement (conn);\n \t  }\n \telse\n \t  {\n-\t    info.insertElementAt (null, i);\n+\t    info.addElement (null);\n \t  }\n       }\n   }\n+\n+  public URL[] getURLs ()\n+  {\n+    URL[] urls = new URL[path.size()];\n+    path.copyInto (urls);\n+    return urls;\n+  }\n   \n-  public URL getResource (String name)\n+  public Enumeration findResources (String name)\n   {\n+    Vector results = new Vector ();\n+\n     for (int i = 0; i < path.size(); i++)\n       {\n-\tURL u    = (URL)path.elementAt (i);\n-\t\n+\tURL u = (URL)path.elementAt (i);\n+\t\t\n \ttry {\n \t  JarURLConnection conn = (JarURLConnection) info.elementAt (i);\n- \t  \n+\t  \n \t  if (conn != null)\n \t    {\n \t      if (conn.getJarFile().getJarEntry (name) != null)\n-\t\treturn new URL(u, name, getHandler0 (u.getProtocol()));\n+\t\tresults.addElement (new URL(u, name, getHandler0 (u.getProtocol())));\n \t    }\n \t  else\n \t    {\n \t      URL p = new URL (u, name, getHandler0 (u.getProtocol()));\n-\n+\t\t\t    \n \t      InputStream is = p.openStream();\n \t      if (is != null)\n \t\t{\n \t\t  is.close();\n-\t\t  return p;\n+\t\t  results.addElement (p);\n \t\t}\n \t    }\n-\t\n+\t\t    \n \t  // if we get an exception ... try the next path element\n \t} catch (IOException x) {\n \t  continue;\n \t}\n       }\n-\n-    return null;\n+\t\n+    return results.elements ();\n   }\n \n-  /** IN jdk 1.2 this method is not overridden, but we gain performance\n-      by doing so.\n-   */\n-\n-  public InputStream getResourceAsStream (String name)\n+  public URL findResource (String name)\n   {\n     for (int i = 0; i < path.size(); i++)\n       {\n-\tURL u    = (URL)path.elementAt (i);\n+\tURL u = (URL)path.elementAt (i);\n \t\n \ttry {\n \t  JarURLConnection conn = (JarURLConnection) info.elementAt (i);\n-\t  \n+ \t  \n \t  if (conn != null)\n \t    {\n-\t      JarFile file = conn.getJarFile ();\n-\t      JarEntry ent = file.getJarEntry (name);\n-\t      if (ent != null)\n-\t\treturn file.getInputStream(ent);\n+\t      if (conn.getJarFile().getJarEntry (name) != null)\n+\t\treturn new URL(u, name, getHandler0 (u.getProtocol()));\n \t    }\n \t  else\n \t    {\n-\t      InputStream is = new URL(u, name, getHandler0 (u.getProtocol())).openStream();\n+\t      URL p = new URL (u, name, getHandler0 (u.getProtocol()));\n+\n+\t      InputStream is = p.openStream();\n \t      if (is != null)\n-\t\treturn is;\n+\t\t{\n+\t\t  is.close();\n+\t\t  return p;\n+\t\t}\n \t    }\n \t\n \t  // if we get an exception ... try the next path element"}, {"sha": "b6ac7f87b8159957e891f3b4488f70ca182f1223", "filename": "libjava/prims.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31280fb7c47e6a32289b4dfc47880a9f22a9d9b4/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=31280fb7c47e6a32289b4dfc47880a9f22a9d9b4", "patch": "@@ -67,9 +67,6 @@ details.  */\n #include <ltdl.h>\n #endif\n \n-// We use placement new.\n-#include <new>\n-\n // We allocate a single OutOfMemoryError exception which we keep\n // around for use if we run out of memory.\n static java::lang::OutOfMemoryError *no_memory;\n@@ -414,9 +411,8 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   obj = (jobjectArray) _Jv_AllocArray (size, klass);\n   if (__builtin_expect (! obj, false))\n     JvThrow (no_memory);\n-  // Use placement new to initialize length field.\n-  new (obj) __JArray (count);\n-  jobject *ptr = elements(obj);\n+  obj->length = count;\n+  jobject *ptr = elements (obj);\n   // We know the allocator returns zeroed memory.  So don't bother\n   // zeroing it again.\n   if (init)\n@@ -450,8 +446,7 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n   __JArray *arr = (__JArray*) _Jv_AllocObj (size + elsize * count, klass);\n   if (__builtin_expect (! arr, false))\n     JvThrow (no_memory);\n-  // Use placement new to initialize length field.\n-  new (arr) __JArray (count);\n+  arr->length = count;\n   // Note that we assume we are given zeroed memory by the allocator.\n \n   return arr;"}]}