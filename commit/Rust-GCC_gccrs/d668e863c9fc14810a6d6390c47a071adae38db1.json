{"sha": "d668e863c9fc14810a6d6390c47a071adae38db1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2OGU4NjNjOWZjMTQ4MTBhNmQ2MzkwYzQ3YTA3MWFkYWUzOGRiMQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-05-13T00:53:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-05-13T00:53:59Z"}, "message": "reload1.c (merge_assigned_reloads): Can merge RELOAD_FOR_INPUT_ADDRESS and RELOAD_FOR_OTHER_ADDRESS even if...\n\n\t* reload1.c (merge_assigned_reloads):  Can merge\n\tRELOAD_FOR_INPUT_ADDRESS and RELOAD_FOR_OTHER_ADDRESS even\n\tif RELOAD_FOR_INPUT with the same reload_reg_rtx is present.\n\nFrom-SVN: r19706", "tree": {"sha": "f2400db3a9e3cd58586d75ca465157223bd09bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2400db3a9e3cd58586d75ca465157223bd09bc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d668e863c9fc14810a6d6390c47a071adae38db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d668e863c9fc14810a6d6390c47a071adae38db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d668e863c9fc14810a6d6390c47a071adae38db1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d668e863c9fc14810a6d6390c47a071adae38db1/comments", "author": null, "committer": null, "parents": [{"sha": "6eb3bb273d41fc53006e8c0c042433d41bdcb294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb3bb273d41fc53006e8c0c042433d41bdcb294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb3bb273d41fc53006e8c0c042433d41bdcb294"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "981db4f865dfe6baa5b002e40a37ba1b3b9ea76d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d668e863c9fc14810a6d6390c47a071adae38db1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d668e863c9fc14810a6d6390c47a071adae38db1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d668e863c9fc14810a6d6390c47a071adae38db1", "patch": "@@ -1,3 +1,9 @@\n+Wed May 13 08:52:08 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (merge_assigned_reloads):  Can merge\n+\tRELOAD_FOR_INPUT_ADDRESS and RELOAD_FOR_OTHER_ADDRESS even\n+\tif RELOAD_FOR_INPUT with the same reload_reg_rtx is present.\n+\n Tue May 12 20:05:57 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* collect2.c (main): Ignore do_collecting when COLLECT_EXPORT_LIST."}, {"sha": "0e77f38e609f1c0b1db5eac0df27477c502d2dd3", "filename": "gcc/reload1.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d668e863c9fc14810a6d6390c47a071adae38db1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d668e863c9fc14810a6d6390c47a071adae38db1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d668e863c9fc14810a6d6390c47a071adae38db1", "patch": "@@ -5899,6 +5899,10 @@ merge_assigned_reloads (insn)\n \n   for (i = 0; i < n_reloads; i++)\n     {\n+      int conflicting_input = 0;\n+      int max_input_address_opnum = -1;\n+      int min_conflicting_input_opnum = MAX_RECOG_OPERANDS;\n+\n       if (reload_in[i] == 0 || reload_when_needed[i] == RELOAD_OTHER\n \t  || reload_out[i] != 0 || reload_reg_rtx[i] == 0\n \t  || reg_set_p (reload_reg_rtx[i], insn))\n@@ -5917,24 +5921,42 @@ merge_assigned_reloads (insn)\n \t\t\t\t\t    reload_reg_rtx[i]))\n \t    continue;\n \n+\t  if (reload_when_needed[j] == RELOAD_FOR_INPUT_ADDRESS\n+\t      && reload_opnum[j] > max_input_address_opnum)\n+\t    max_input_address_opnum = reload_opnum[j];\n+\n \t  /* If the reload regs aren't exactly the same (e.g, different modes)\n-\t     or if the values are different, we can't merge anything with this\n-\t     reload register.  */\n+\t     or if the values are different, we can't merge this reload.\n+\t     But if it is an input reload, we might still merge\n+\t     RELOAD_FOR_INPUT_ADDRESS and RELOAD_FOR_OTHER_ADDRESS reloads.  */\n \n \t  if (! rtx_equal_p (reload_reg_rtx[i], reload_reg_rtx[j])\n \t      || reload_out[j] != 0 || reload_in[j] == 0\n \t      || ! rtx_equal_p (reload_in[i], reload_in[j]))\n-\t    break;\n+\t    {\n+\t      if (reload_when_needed[j] != RELOAD_FOR_INPUT\n+\t\t  || ((reload_when_needed[i] != RELOAD_FOR_INPUT_ADDRESS\n+\t\t       || reload_opnum[i] > reload_opnum[j])\n+\t\t      && reload_when_needed[i] != RELOAD_FOR_OTHER_ADDRESS))\n+\t\tbreak;\n+\t      conflicting_input = 1;\n+\t      if (min_conflicting_input_opnum > reload_opnum[j])\n+\t\tmin_conflicting_input_opnum = reload_opnum[j];\n+\t    }\n \t}\n \n       /* If all is OK, merge the reloads.  Only set this to RELOAD_OTHER if\n \t we, in fact, found any matching reloads.  */\n \n-      if (j == n_reloads)\n+      if (j == n_reloads\n+\t  && max_input_address_opnum <= min_conflicting_input_opnum)\n \t{\n \t  for (j = 0; j < n_reloads; j++)\n \t    if (i != j && reload_reg_rtx[j] != 0\n-\t\t&& rtx_equal_p (reload_reg_rtx[i], reload_reg_rtx[j]))\n+\t\t&& rtx_equal_p (reload_reg_rtx[i], reload_reg_rtx[j])\n+\t\t&& (! conflicting_input\n+\t\t    || reload_when_needed[j] == RELOAD_FOR_INPUT_ADDRESS\n+\t\t    || reload_when_needed[j] == RELOAD_FOR_OTHER_ADDRESS))\n \t      {\n \t\treload_when_needed[i] = RELOAD_OTHER;\n \t\treload_in[j] = 0;"}]}