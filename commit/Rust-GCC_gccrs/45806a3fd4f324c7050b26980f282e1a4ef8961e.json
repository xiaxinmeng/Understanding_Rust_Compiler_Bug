{"sha": "45806a3fd4f324c7050b26980f282e1a4ef8961e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4MDZhM2ZkNGYzMjRjNzA1MGIyNjk4MGYyODJlMWE0ZWY4OTYxZQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2002-04-28T18:31:34Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2002-04-28T18:31:34Z"}, "message": "re PR c/6343 (attribute((weak)) not working on second declaration)\n\n\t2002-04-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n\tPR c/6343\n\t* c-decl.c (duplicate_decls): Call merge_weak.\n\t* c-pragma.c (apply_pragma_weak): Warn about misuse.\n\t* output.h (merge_weak): Prototype merge_weak.\n\t* varasm.c (merge_weak): New function.\n\t(declare_weak): Make sure we don't give an error on VAR_DECLs.\n\tMark RTL with SYMBOL_REF_WEAK.\n\ncp:\n\t* decl.c (duplicate_decls): Call merge_weak.\n\ntestsuite:\n\t* gcc.dg/weak-[2-7].c: New tests.\n\nFrom-SVN: r52844", "tree": {"sha": "bf07a3136b537dc0844e7c227d87d6ade6e858ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf07a3136b537dc0844e7c227d87d6ade6e858ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45806a3fd4f324c7050b26980f282e1a4ef8961e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45806a3fd4f324c7050b26980f282e1a4ef8961e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45806a3fd4f324c7050b26980f282e1a4ef8961e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45806a3fd4f324c7050b26980f282e1a4ef8961e/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32c8d10081ea8d106b1bf83f0ce13480c9e36910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c8d10081ea8d106b1bf83f0ce13480c9e36910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c8d10081ea8d106b1bf83f0ce13480c9e36910"}], "stats": {"total": 435, "additions": 432, "deletions": 3}, "files": [{"sha": "4b62c60f3af380d9746f8134a6a6b20bc00e043e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -1,3 +1,13 @@\n+2002-04-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\tPR c/6343\n+\t* c-decl.c (duplicate_decls): Call merge_weak.\n+\t* c-pragma.c (apply_pragma_weak): Warn about misuse.\n+\t* output.h (merge_weak): Prototype merge_weak.\n+\t* varasm.c (merge_weak): New function.\n+\t(declare_weak): Make sure we don't give an error on VAR_DECLs.\n+\tMark RTL with SYMBOL_REF_WEAK.\n+\n 2002-04-27  Kurt Garloff <garloff@suse.de>\n \n \t* tree-inline.c (inlinable_function_p): Improve heuristics"}, {"sha": "0898613ed9a2b12324fae9e74dc142b44266af84", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -1843,7 +1843,8 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n     }\n \n   /* Merge the storage class information.  */\n-  DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);\n+  merge_weak (newdecl, olddecl);\n+\n   /* For functions, static overrides non-static.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {"}, {"sha": "d5df35595975e07d7b593e5f25710825c2f35c9d", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -287,6 +287,10 @@ apply_pragma_weak (decl, value)\n     decl_attributes (&decl, build_tree_list (get_identifier (\"alias\"),\n \t\t\t\t             build_tree_list (NULL, value)),\n \t\t     0);\n+  if (SUPPORTS_WEAK && DECL_EXTERNAL (decl) && TREE_USED (decl)\n+      && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+    warning_with_decl (decl, \"applying #pragma weak `%s' after first use results in unspecified behavior\");\n+\n   declare_weak (decl);\n }\n "}, {"sha": "61673813fd7052b53a36a35e083095b2543af62b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -1,3 +1,8 @@\n+2002-04-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\tPR c/6343\n+\t* decl.c (duplicate_decls): Call merge_weak.\n+\n 2002-04-26  Richard Henderson  <rth@redhat.com>\n \n \t* parse.y (malloced_yyss, malloced_yyvs): New."}, {"sha": "642fcf019d05077585ac08dbbd36ce0e6402c3ba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -3640,7 +3640,8 @@ duplicate_decls (newdecl, olddecl)\n     }\n \n   /* Merge the storage class information.  */\n-  DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);\n+  merge_weak (newdecl, olddecl);\n+\n   DECL_ONE_ONLY (newdecl) |= DECL_ONE_ONLY (olddecl);\n   DECL_DEFER_OUTPUT (newdecl) |= DECL_DEFER_OUTPUT (olddecl);\n   TREE_PUBLIC (newdecl) = TREE_PUBLIC (olddecl);"}, {"sha": "67c635b3f177145ca80087cf4ca9534c3c150973", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -231,6 +231,8 @@ extern void mergeable_constant_section\tPARAMS ((enum machine_mode,\n \n /* Declare DECL to be a weak symbol.  */\n extern void declare_weak\t\tPARAMS ((tree));\n+/* Merge weak status.  */\n+extern void merge_weak\t\t\tPARAMS ((tree, tree));\n #endif /* TREE_CODE */\n \n /* Emit any pending weak declarations.  */"}, {"sha": "ab1c3422ecf15d478b699f0d0e86e793c1750b53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -1,3 +1,8 @@\n+2002-04-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\tPR c/6343\n+\t* gcc.dg/weak-[2-7].c: New tests.\n+\n 2002-04-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/enum1.c: New test."}, {"sha": "217220e359ef336a02d06753143aaf3b4b662132", "filename": "gcc/testsuite/gcc.dg/weak-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-2.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-common\" } */\n+\n+/* COFF does not support weak, and dg doesn't support UNSUPPORTED.  */\n+/* { dg-do compile { xfail *-*-coff i?86-pc-cygwin h8300-*-hms } } */\n+\n+/* { dg-final { global target_triplet } } */\n+/* { dg-final { if [string match h8300-*-hms $target_triplet ] {return} } } */\n+/* { dg-final { if [string match i?86-pc-cygwin $target_triplet ] {return} } } */\n+/* { dg-final { if [string match *-*-coff $target_triplet ] {return} } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1a\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1b\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1c\" } } */\n+/* { dg-final { scan-assembler-not \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1d\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1e\" } } */\n+\n+/* test function addresses with #pragma weak */\n+\n+#pragma weak ffoo1a\n+extern void * ffoo1a (void);\n+void * foo1a (void)\n+{\n+  return (void *)ffoo1a;\n+}\n+\n+extern void * ffoo1b (void);\n+#pragma weak ffoo1b\n+void * foo1b (void)\n+{\n+  return (void *)ffoo1b;\n+}\n+\n+extern void * ffoo1c (void);  /* { dg-warning \"applying #pragma weak\" \"applying #pragma weak\" } */\n+void * foo1c (void)\n+{\n+  return (void *)ffoo1c;\n+}\n+#pragma weak ffoo1c\n+\n+\n+int ffoo1d (void);\n+#pragma weak ffoo1d\n+\n+\n+extern void * ffoo1e (void);\n+#pragma weak ffoo1e\n+void * foo1e (void)\n+{\n+  if (ffoo1e)\n+    ffoo1e ();\n+  return 0;\n+}\n+"}, {"sha": "bd7d827ee971c5bc49993aefe442b67f914eff7c", "filename": "gcc/testsuite/gcc.dg/weak-3.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-common\" } */\n+\n+/* COFF does not support weak, and dg doesn't support UNSUPPORTED.  */\n+/* { dg-do compile { xfail *-*-coff i?86-pc-cygwin h8300-*-hms } } */\n+\n+/* { dg-final { global target_triplet } } */\n+/* { dg-final { if [string match h8300-*-hms $target_triplet ] {return} } } */\n+/* { dg-final { if [string match i?86-pc-cygwin $target_triplet ] {return} } } */\n+/* { dg-final { if [string match *-*-coff $target_triplet ] {return} } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1a\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1b\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1c\" } } */\n+/* { dg-final { scan-assembler-not \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1d\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1e\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1f\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]ffoo1g\" } } */\n+\n+/* test function addresses with __attribute__((weak)) */\n+\n+extern void * ffoo1a (void) __attribute__((weak));\n+extern void * ffoo1a (void);\n+void * foo1a (void)\n+{\n+  return (void *)ffoo1a;\n+}\n+\n+\n+extern void * ffoo1b (void);\n+extern void * ffoo1b (void) __attribute__((weak));\n+void * foo1b (void)\n+{\n+  return (void *)ffoo1b;\n+}\n+\n+\n+extern void * ffoo1c (void);  /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+void * foo1c (void)\n+{\n+  return (void *)ffoo1c;\n+}\n+extern void * ffoo1c (void) __attribute__((weak));\n+\n+\n+int ffoo1d (void);\n+int ffoo1d (void) __attribute__((weak));\n+\n+\n+extern void * ffoo1e (void);\n+extern void * ffoo1e (void)  __attribute__((weak));\n+void * foo1e (void)\n+{\n+  if (ffoo1e)\n+    ffoo1e ();\n+  return 0;\n+}\n+\n+\n+extern void * ffoo1f (void);    /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+extern void * ffoox1f (void);\n+void * foo1f (void)\n+{\n+  if (ffoo1f)\n+    ffoo1f ();\n+  return 0;\n+}\n+extern void * ffoo1f (void)  __attribute__((weak, alias (\"ffoox1f\")));\n+\n+\n+extern void * ffoo1g (void);\n+extern void * ffoox1g (void);\n+extern void * ffoo1g (void)  __attribute__((weak, alias (\"ffoox1g\")));\n+void * foo1g (void)\n+{\n+  if (ffoo1g)\n+    ffoo1g ();\n+  return 0;\n+}"}, {"sha": "c6bde1ea3fd8ee68893e8d1f9f1ce849e284fb16", "filename": "gcc/testsuite/gcc.dg/weak-4.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-4.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-common\" } */\n+\n+/* COFF does not support weak, and dg doesn't support UNSUPPORTED.  */\n+/* { dg-do compile { xfail *-*-coff i?86-pc-cygwin h8300-*-hms } } */\n+\n+/* { dg-final { global target_triplet } } */\n+/* { dg-final { if [string match h8300-*-hms $target_triplet ] {return} } } */\n+/* { dg-final { if [string match i?86-pc-cygwin $target_triplet ] {return} } } */\n+/* { dg-final { if [string match *-*-coff $target_triplet ] {return} } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1a\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1b\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1c\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1d\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1e\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1f\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1g\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1h\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1i\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1j\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1k\" } } */\n+\n+/* test variable addresses with #pragma weak */\n+\n+#pragma weak vfoo1a\n+extern int vfoo1a;\n+void * foo1a (void)\n+{\n+  return (void *)&vfoo1a;\n+}\n+\n+\n+extern int vfoo1b;\n+#pragma weak vfoo1b\n+void * foo1b (void)\n+{\n+  return (void *)&vfoo1b;\n+}\n+\n+\n+extern int vfoo1c;  /* { dg-warning \"applying #pragma weak\" \"applying #pragma weak\" } */\n+void * foo1c (void)\n+{\n+  return (void *)&vfoo1c;\n+}\n+#pragma weak vfoo1c\n+\n+\n+#pragma weak vfoo1d\n+int vfoo1d;\n+void * foo1d (void)\n+{\n+  return (void *)&vfoo1d;\n+}\n+\n+\n+int vfoo1e;\n+#pragma weak vfoo1e\n+void * foo1e (void)\n+{\n+  return (void *)&vfoo1e;\n+}\n+\n+\n+int vfoo1f;\n+void * foo1f (void)\n+{\n+  return (void *)&vfoo1f;\n+}\n+#pragma weak vfoo1f\n+\n+\n+extern int vfoo1g;  /* { dg-warning \"applying #pragma weak\" \"applying #pragma weak\" } */\n+void * foo1g (void)\n+{\n+  return (void *)&vfoo1g;\n+}\n+#pragma weak vfoo1g\n+int vfoo1g;\n+\n+\n+extern int vfoo1h;\n+void * foo1h (void)\n+{\n+  return (void *)&vfoo1h;\n+}\n+int vfoo1h;\n+#pragma weak vfoo1h\n+\n+\n+int vfoo1i;\n+extern int vfoo1i;\n+void * foo1i (void)\n+{\n+  return (void *)&vfoo1i;\n+}\n+#pragma weak vfoo1i\n+\n+\n+extern int vfoo1j;\n+int vfoo1j;\n+void * foo1j (void)\n+{\n+  return (void *)&vfoo1j;\n+}\n+#pragma weak vfoo1j\n+\n+\n+#pragma weak vfoo1k\n+int vfoo1k = 1;\n+"}, {"sha": "694eb61ac1cb18db7b5ffc97f908ba1759c54470", "filename": "gcc/testsuite/gcc.dg/weak-5.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-common\" } */\n+\n+/* COFF does not support weak, and dg doesn't support UNSUPPORTED.  */\n+/* { dg-do compile { xfail *-*-coff i?86-pc-cygwin h8300-*-hms } } */\n+\n+/* { dg-final { global target_triplet } } */\n+/* { dg-final { if [string match h8300-*-hms $target_triplet ] {return} } } */\n+/* { dg-final { if [string match i?86-pc-cygwin $target_triplet ] {return} } } */\n+/* { dg-final { if [string match *-*-coff $target_triplet ] {return} } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1a\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1b\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1c\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1d\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1e\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1f\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1g\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1h\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1i\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1j\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1k\" } } */\n+/* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]vfoo1l\" } } */\n+\n+/* test variable addresses with __attribute__ ((weak)) */\n+\n+extern int vfoo1a __attribute__((weak));\n+extern int vfoo1a;\n+void * foo1a (void)\n+{\n+  return (void *)&vfoo1a;\n+}\n+\n+\n+extern int vfoo1b;\n+extern int vfoo1b __attribute__((weak));\n+void * foo1b (void)\n+{\n+  return (void *)&vfoo1b;\n+}\n+\n+\n+extern int vfoo1c;  /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+void * foo1c (void)\n+{\n+  return (void *)&vfoo1c;\n+}\n+extern int vfoo1c __attribute__((weak));\n+\n+\n+extern int vfoo1d __attribute__((weak));\n+int vfoo1d;\n+void * foo1d (void)\n+{\n+  return (void *)&vfoo1d;\n+}\n+\n+\n+int vfoo1e;\n+extern int vfoo1e __attribute__((weak));\n+void * foo1e (void)\n+{\n+  return (void *)&vfoo1e;\n+}\n+\n+\n+int vfoo1f;\n+void * foo1f (void)\n+{\n+  return (void *)&vfoo1f;\n+}\n+extern int vfoo1f __attribute__((weak));\n+\n+\n+extern int vfoo1g;\n+void * foo1g (void)\n+{\n+  return (void *)&vfoo1g;\n+}\n+int vfoo1g __attribute__((weak));\n+\n+\n+extern int vfoo1h __attribute__((weak));\n+void * foo1h (void)\n+{\n+  return (void *)&vfoo1h;\n+}\n+extern int vfoo1h __attribute__((weak));\n+int vfoo1h;\n+\n+\n+extern int vfoo1i __attribute__((weak));\n+void * foo1i (void)\n+{\n+  return (void *)&vfoo1i;\n+}\n+extern int vfoo1i __attribute__((weak));\n+extern int vfoo1i;\n+\n+\n+extern int vfoo1j __attribute__((weak));\n+void * foo1j (void)\n+{\n+  return (void *)&vfoo1j;\n+}\n+extern int vfoo1j;\n+extern int vfoo1j __attribute__((weak));\n+\n+\n+extern int vfoo1k __attribute__((weak));\n+int vfoo1k = 1;\n+\n+\n+int vfoox1l = 1;\n+extern int vfoo1l __attribute__((alias (\"vfoox1l\")));\n+extern int vfoo1l __attribute__((weak, alias (\"vfoox1l\")));\n+"}, {"sha": "8f88a675d31df46db405971bbaac7071d917bbe3", "filename": "gcc/testsuite/gcc.dg/weak-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-6.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+\n+extern void * foo (void);\n+void * foo (void) { return (void *)foo; } /* { dg-error \"precede\" } */\n+\n+#pragma weak foo"}, {"sha": "64d6155a890c6baaff02435a999dd9a4a25f5724", "filename": "gcc/testsuite/gcc.dg/weak-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-7.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+\n+extern void * foo (void);\n+void * foo (void) { return (void *)foo; } /* { dg-error \"precede\" } */\n+\n+extern void * foo (void) __attribute__((weak));"}, {"sha": "4dbd09c6d9ea56abbf8463f90ea2e31f34cf2949", "filename": "gcc/varasm.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45806a3fd4f324c7050b26980f282e1a4ef8961e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=45806a3fd4f324c7050b26980f282e1a4ef8961e", "patch": "@@ -4989,6 +4989,31 @@ output_constructor (exp, size, align)\n    to be emitted.  */\n static tree weak_decls;\n \n+/* Merge weak status between NEWDECL and OLDDECL.  */\n+\n+void\n+merge_weak (newdecl, olddecl)\n+     tree newdecl;\n+     tree olddecl;\n+{\n+  tree decl;\n+\n+  if (DECL_WEAK (newdecl) == DECL_WEAK (olddecl))\n+    return;\n+\n+  decl = DECL_WEAK (olddecl) ? newdecl : olddecl;\n+\n+  if (SUPPORTS_WEAK\n+      && DECL_EXTERNAL (newdecl) && DECL_EXTERNAL (olddecl)\n+      && (TREE_CODE (decl) != VAR_DECL\n+\t  || ! TREE_STATIC (decl))\n+      && TREE_USED (decl)\n+      && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+    warning_with_decl (decl, \"weak declaration of `%s' after first use results in unspecified behavior\");\n+\n+  declare_weak (decl);\n+}\n+\n /* Declare DECL to be a weak symbol.  */\n \n void\n@@ -4997,7 +5022,7 @@ declare_weak (decl)\n {\n   if (! TREE_PUBLIC (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must be public\");\n-  else if (TREE_ASM_WRITTEN (decl))\n+  else if (TREE_CODE (decl) == FUNCTION_DECL && TREE_ASM_WRITTEN (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must precede definition\");\n   else if (SUPPORTS_WEAK)\n     {\n@@ -5008,6 +5033,12 @@ declare_weak (decl)\n     warning_with_decl (decl, \"weak declaration of `%s' not supported\");\n \n   DECL_WEAK (decl) = 1;\n+\n+  if (DECL_RTL_SET_P (decl)\n+      && GET_CODE (DECL_RTL (decl)) == MEM\n+      && XEXP (DECL_RTL (decl), 0)\n+      && GET_CODE (XEXP (DECL_RTL (decl), 0)) == SYMBOL_REF)\n+    SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n \n /* Emit any pending weak declarations.  */"}]}