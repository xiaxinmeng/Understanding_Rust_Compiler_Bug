{"sha": "79748d710383e205e3c045b55ceda1b3e15ba945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3NDhkNzEwMzgzZTIwNWUzYzA0NWI1NWNlZGExYjNlMTViYTk0NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-17T11:53:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-17T11:53:59Z"}, "message": "tree-optimize.c (execute_ipa_pass_list): New.\n\n\t* tree-optimize.c (execute_ipa_pass_list): New.\n\t(ipa_passes): Use it.\n\nFrom-SVN: r101126", "tree": {"sha": "f7c47b1da51f34a89b481ca4759e39742ca0cb7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c47b1da51f34a89b481ca4759e39742ca0cb7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79748d710383e205e3c045b55ceda1b3e15ba945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79748d710383e205e3c045b55ceda1b3e15ba945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79748d710383e205e3c045b55ceda1b3e15ba945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79748d710383e205e3c045b55ceda1b3e15ba945/comments", "author": null, "committer": null, "parents": [{"sha": "bb2b2a247232830b94d9dc3daa914913756ac847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2b2a247232830b94d9dc3daa914913756ac847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2b2a247232830b94d9dc3daa914913756ac847"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "29ec313a622de94c86141ea2b9c107c81b6093dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79748d710383e205e3c045b55ceda1b3e15ba945/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79748d710383e205e3c045b55ceda1b3e15ba945/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79748d710383e205e3c045b55ceda1b3e15ba945", "patch": "@@ -1,3 +1,8 @@\n+2005-06-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-optimize.c (execute_ipa_pass_list): New.\n+\t(ipa_passes): Use it.\n+\n 2005-06-16  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/22022"}, {"sha": "a33a7104d78ef2138df61bbbca9bf3c6ee1dac7d", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79748d710383e205e3c045b55ceda1b3e15ba945/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79748d710383e205e3c045b55ceda1b3e15ba945/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=79748d710383e205e3c045b55ceda1b3e15ba945", "patch": "@@ -50,7 +50,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cfgloop.h\"\n #include \"except.h\"\n \n-\n /* Global variables used to communicate with passes.  */\n int dump_flags;\n bool in_gimple_form;\n@@ -665,7 +664,35 @@ execute_pass_list (struct tree_opt_pass *pass)\n   do\n     {\n       if (execute_one_pass (pass) && pass->sub)\n-\texecute_pass_list (pass->sub);\n+        execute_pass_list (pass->sub);\n+      pass = pass->next;\n+    }\n+  while (pass);\n+}\n+\n+/* Same as execute_pass_list but assume that subpasses of IPA passes\n+   are local passes.  */\n+static void\n+execute_ipa_pass_list (struct tree_opt_pass *pass)\n+{\n+  do\n+    {\n+      if (execute_one_pass (pass) && pass->sub)\n+\t{\n+\t  struct cgraph_node *node;\n+\t  for (node = cgraph_nodes; node; node = node->next)\n+\t    if (node->analyzed)\n+\t      {\n+\t\tpush_cfun (DECL_STRUCT_FUNCTION (node->decl));\n+\t\tcurrent_function_decl = node->decl;\n+\t\texecute_pass_list (pass);\n+\t\tfree_dominance_info (CDI_DOMINATORS);\n+\t\tfree_dominance_info (CDI_POST_DOMINATORS);\n+\t\tcurrent_function_decl = NULL;\n+\t\tpop_cfun ();\n+\t\tggc_collect ();\n+\t      }\n+\t}\n       pass = pass->next;\n     }\n   while (pass);\n@@ -692,8 +719,10 @@ tree_lowering_passes (tree fn)\n void\n ipa_passes (void)\n {\n+  cfun = NULL;\n+  tree_register_cfg_hooks ();\n   bitmap_obstack_initialize (NULL);\n-  execute_pass_list (all_ipa_passes);\n+  execute_ipa_pass_list (all_ipa_passes);\n   bitmap_obstack_release (NULL);\n }\n \f"}]}