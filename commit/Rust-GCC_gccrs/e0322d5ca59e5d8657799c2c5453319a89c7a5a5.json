{"sha": "e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzMjJkNWNhNTllNWQ4NjU3Nzk5YzJjNTQ1MzMxOWE4OWM3YTVhNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-19T21:53:53Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-19T21:53:53Z"}, "message": "c-common.c (preprocessing_asm): New macro.\n\n\t* c-common.c (preprocessing_asm): New macro.\n\t* c-lex.h (builtin_define, builtin_assert): Use pfile.\ndoc:\n\t* tm.texi: Update.\nconfig/alpha:\n\t* alpha.h (CPLUSPLUS_CPP_SPEC): Remove.\n\t(CPP_SPEC): Simplify.\n\t(TARGET_CPU_CPP_BUILTINS): Update.\n\t* freebsd.h (TARGET_OS_CPP_BUILTINS): New.\n\t(CPP_SPEC): Simplify.\n\t* linux.h (CPLUSPLUS_CPP_SPEC): Remove.\n\t(TARGET_OS_CPP_BUILTINS): Update.\n\t* osf.h (CPP_XFLOAT_SPEC): Kill.\n\t(TARGET_OS_CPP_BUILTINS): Update.\n\t(CPP_SUBTARGET_SPEC, SUBTARGET_EXTRA_SPECS): Simplify.\n\t* osf5.h (CPP_XFLOAT_SPEC): Kill.\n\t* vms.h (CPP_SUBTARGET_SPEC): Kill.\n\t(TARGET_OS_CPP_BUILTINS): Update.\n\nFrom-SVN: r53641", "tree": {"sha": "ee6a881b61f9afa791ff8b9df53883da2b15c9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee6a881b61f9afa791ff8b9df53883da2b15c9e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/comments", "author": null, "committer": null, "parents": [{"sha": "e3227f2c44019c858c2eb6430a0fd3237f245d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3227f2c44019c858c2eb6430a0fd3237f245d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3227f2c44019c858c2eb6430a0fd3237f245d02"}], "stats": {"total": 128, "additions": 79, "deletions": 49}, "files": [{"sha": "1f6f6f4fe58e56f12b2ed5eabe0ec131030535bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -1,3 +1,24 @@\n+2002-05-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (preprocessing_asm): New macro.\n+\t* c-lex.h (builtin_define, builtin_assert): Use pfile.\n+doc:\n+\t* tm.texi: Update.\n+config/alpha:\n+\t* alpha.h (CPLUSPLUS_CPP_SPEC): Remove.\n+\t(CPP_SPEC): Simplify.\n+\t(TARGET_CPU_CPP_BUILTINS): Update.\n+\t* freebsd.h (TARGET_OS_CPP_BUILTINS): New.\n+\t(CPP_SPEC): Simplify.\n+\t* linux.h (CPLUSPLUS_CPP_SPEC): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): Update.\n+\t* osf.h (CPP_XFLOAT_SPEC): Kill.\n+\t(TARGET_OS_CPP_BUILTINS): Update.\n+\t(CPP_SUBTARGET_SPEC, SUBTARGET_EXTRA_SPECS): Simplify.\n+\t* osf5.h (CPP_XFLOAT_SPEC): Kill.\n+\t* vms.h (CPP_SUBTARGET_SPEC): Kill.\n+\t(TARGET_OS_CPP_BUILTINS): Update.\n+\n 2002-05-19  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (default_binds_local_p): Fix typo."}, {"sha": "b9658da30e7fc0dde1504aaba0bcd8de1673f0bb", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -4374,6 +4374,7 @@ cb_register_builtins (pfile)\n \n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n+  #define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)\n   TARGET_CPU_CPP_BUILTINS ();\n   TARGET_OS_CPP_BUILTINS ();\n }\n@@ -4407,17 +4408,17 @@ builtin_define_std (macro)\n   /* If it was in user's namespace...  */\n   if (p != buff + 2)\n     {\n-      /* Define the original macro if permitted.  */\n-      if (!flag_iso)\n-\tcpp_define (parse_in, macro);\n-\n       /* Define the macro with leading and following __.  */\n       if (q[-1] != '_')\n \t*q++ = '_';\n       if (q[-2] != '_')\n \t*q++ = '_';\n       *q = '\\0';\n       cpp_define (parse_in, p);\n+\n+      /* Finally, define the original macro if permitted.  */\n+      if (!flag_iso)\n+\tcpp_define (parse_in, macro);\n     }\n }\n "}, {"sha": "aa3d333f4f2dbabdee3744827152b113baa3e529", "filename": "gcc/c-lex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -35,8 +35,8 @@ extern int indent_level;\n struct cpp_reader;\n extern struct cpp_reader* parse_in;\n \n-#define builtin_define(TXT) cpp_define (parse_in, TXT)\n-#define builtin_assert(TXT) cpp_assert (parse_in, TXT)\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n \n /* Pass an object-like macro.  If it doesn't lie in the user's\n    namespace, defines it unconditionally.  Otherwise define a version"}, {"sha": "fc9ba92aacadfe7dd6eb95d0ba39a32de1ae2442", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -67,21 +67,25 @@ Boston, MA 02111-1307, USA.  */\n \t  builtin_define (\"__IEEE_FP\");\t\t\t\\\n \tif (TARGET_IEEE_WITH_INEXACT)\t\t\t\\\n \t  builtin_define (\"__IEEE_FP_INEXACT\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t/* Macros dependent on the C dialect.  */\t\\\n+\tif (preprocessing_asm_p ())\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\\\n+        else if (c_language == clk_c)\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_C\");\t\t\\\n+\telse if (c_language == clk_cplusplus)\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__LANGUAGE_C_PLUS_PLUS\");\t\\\n+\t    builtin_define (\"__LANGUAGE_C_PLUS_PLUS__\");\\\n+\t  }\t\t\t\t\t\t\\\n+\telse if (c_language == clk_objective_c)\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__LANGUAGE_OBJECTIVE_C\");\t\\\n+\t    builtin_define (\"__LANGUAGE_OBJECTIVE_C__\");\\\n+\t  }\t\t\t\t\t\t\\\n } while (0)\n \n-/* For C++ we need to ensure that __LANGUAGE_C_PLUS_PLUS is defined independent\n-   of the source file extension.  */\n-#define CPLUSPLUS_CPP_SPEC \"-D__LANGUAGE_C_PLUS_PLUS__\\\n- -D__LANGUAGE_C_PLUS_PLUS %(cpp)\"\n-\n-/* Write out the correct language type definition for the header files.  \n-   Unless we have assembler language, write out the symbols for C.  */\n-#define CPP_SPEC \"\\\n-%{!undef:\\\n-%{.S:-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY }}\\\n-%{.m:-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C }\\\n-%{!.S:%{!.cc:%{!.cxx:%{!.cpp:%{!.cp:%{!.c++:%{!.C:%{!.m:-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C }}}}}}}}}}\\\n-%(cpp_subtarget)\"\n+#define CPP_SPEC \"%(cpp_subtarget)\"\n \n #ifndef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\""}, {"sha": "4fd4c6962043340a7a3a0a50615b655cbb9c5da7", "filename": "gcc/config/alpha/freebsd.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ffreebsd.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -24,10 +24,19 @@ Boston, MA 02111-1307, USA.  */\n    the GCC option `-posix', and PIC issues as on all FreeBSD platforms, we must\n    deal with the Alpha's FP issues.  */\n \n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (flag_pic)\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__PIC__\");\t\t\\\n+\t  builtin_define (\"__pic__\");\t\t\\\n+\t}\t\t\t\t\t\\\n+    }\n+  while (0)\n+\n #undef  CPP_SPEC\n-#define CPP_SPEC \"%(cpp_subtarget)\t\t\t\t\t\\\n-  %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\t\t\\\n-  %{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \"%(cpp_subtarget) %{posix:-D_POSIX_SOURCE}\"\n \n #define LINK_SPEC \"%{G*} %{relax:-relax}\t\t\t\t\\\n   %{p:%e`-p' not supported; use `-pg' and gprof(1)}\t\t\t\\"}, {"sha": "461bd0e764eeb2a64325f9197555260f458a26c3", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -30,12 +30,11 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define_std (\"linux\");\t\t\t\t\\\n \tbuiltin_define_std (\"unix\");\t\t\t\t\\\n \tbuiltin_assert (\"system=linux\");\t\t\t\\\n+\t/* The GNU C++ standard library requires this.  */\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  builtin_define (\"_GNU_SOURCE\");\t\t\t\\\n     } while (0)\n \n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n-\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{shared: -lc} \\"}, {"sha": "6d5ea3bb882838f4882cb332edaf4c3d7df1ec09", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -39,23 +39,23 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"_SYSTYPE_BSD\");\t\\\n \tbuiltin_define (\"__osf__\");\t\t\\\n \tbuiltin_define (\"_LONGLONG\");\t\t\\\n+\tbuiltin_define (\"__EXTERN_PREFIX\");\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\\\n \tbuiltin_assert (\"system=xpg4\");\t\t\\\n+\t/* Tru64 UNIX V5 has a 16 byte long\t\\\n+\t   double type and requires __X_FLOAT\t\\\n+\t   to be defined for <math.h>.  */\t\\\n+        if (LONG_DOUBLE_TYPE_SIZE == 128)\t\\\n+          builtin_define (\"__X_FLOAT\");\t\t\\\n     } while (0)\n \n-/* Tru64 UNIX V5 requires additional definitions for 16 byte long double\n-   support.  Empty by default.  */\n-\n-#define CPP_XFLOAT_SPEC \"\"\n-\n /* Accept DEC C flags for multithreaded programs.  We use _PTHREAD_USE_D4\n    instead of PTHREAD_USE_D4 since both have the same effect and the former\n    doesn't invade the users' namespace.  */\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \\\n-\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4} %(cpp_xfloat) \\\n--D__EXTERN_PREFIX\"\n+\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4}\"\n \n /* Under OSF4, -p and -pg require -lprof1, and -lprof1 requires -lpdf.  */\n \n@@ -143,9 +143,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #undef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS\t\t\\\n-  { \"cpp_xfloat\", CPP_XFLOAT_SPEC },\t\\\n-  { \"asm_oldas\", ASM_OLDAS_SPEC }\n+#define SUBTARGET_EXTRA_SPECS { \"asm_oldas\", ASM_OLDAS_SPEC }\n \n /* Indicate that we have a stamp.h to use.  */\n #ifndef CROSS_COMPILE"}, {"sha": "59b3ae117934ff2a84f26354495015ef0dcd375e", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -21,13 +21,6 @@\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE  128\n \n-/* Tru64 UNIX V5 has a 16 byte long double type and requires __X_FLOAT to be\n-   defined to get the appropriate prototypes for the long double functions\n-   in <math.h>.  */\n-\n-#undef CPP_XFLOAT_SPEC\n-#define CPP_XFLOAT_SPEC \"-D__X_FLOAT\"\n-\n /* In Tru64 UNIX V5.1, Compaq introduced a new assembler\n    (/usr/lib/cmplrs/cc/adu) which currently (versions between 3.04.29 and\n    3.04.32) breaks mips-tfile.  Passing the undocumented -oldas flag reverts"}, {"sha": "03dd491c823f1d0a10a55ac70a36cbb33687143e", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -35,14 +35,12 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define_std (\"VMS\");\t\t\\\n \tbuiltin_define (\"__ALPHA\");\t\t\\\n \tbuiltin_assert (\"system=vms\");\t\t\\\n+\tif (TARGET_FLOAT_VAX)\t\t\t\\\n+\t  builtin_define (\"__G_FLOAT\");\t\t\\\n+\telse\t\t\t\t\t\\\n+\t  builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-#undef CPP_SUBTARGET_SPEC\n-#define CPP_SUBTARGET_SPEC \"\\\n-%{mfloat-ieee:-D__IEEE_FLOAT} \\\n-%{mfloat-vax:-D__G_FLOAT} \\\n-%{!mfloat-vax:-D__IEEE_FLOAT}\"\n-\n /* By default, allow $ to be part of an identifier.  */\n #define DOLLARS_IN_IDENTIFIERS 2\n "}, {"sha": "3d321422a7f1185dc92e3722d137b405792a6d7a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0322d5ca59e5d8657799c2c5453319a89c7a5a5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "patch": "@@ -609,6 +609,13 @@ and possibly @code{unix}; passing @code{_mips} defines @code{__mips},\n @code{__mips__} and possibly @code{_mips}, and passing @code{_ABI64}\n defines only @code{_ABI64}.\n \n+You can also test for the C dialect being compiled.  The variable\n+@code{c_language} is set to one of @code{clk_c}, @code{clk_cplusplus}\n+or @code{clk_objective_c}.  Note that if we are preprocessing\n+assembler, this variable will be @code{clk_c} but the function-like\n+macro @code{preprocessing_asm_p()} will return true, so you might want\n+to check for that first.\n+\n With @code{TARGET_OS_CPP_BUILTINS} this macro obsoletes the\n @code{CPP_PREDEFINES} target macro.\n "}]}