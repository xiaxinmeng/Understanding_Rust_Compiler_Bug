{"sha": "a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3YWVlMmFiNjMyNDViZjc2NzhhMGNiMTg5OTdjZWI3OGRhOGZmYw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2006-03-23T18:23:53Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-03-23T18:23:53Z"}, "message": "haifa-sched.c (choose_ready): Fix type of the local variable.\n\n2006-03-23  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\t* haifa-sched.c (choose_ready): Fix type of the local variable.\n\tMove local variables.  Add comment.\n\t(check_reg_live): Change signature.  Make callable from debugger.\n\t* sched-int.h (check_reg_live): Update signature.\n\t* sched-ebb.c (check_reg_live): Update parameters.\n\t* sched-rgn.c (check_reg_live): Ditto.\n\t(region_head_or_leaf_p): Check pointer before dereferencing.\n\t* config/ia64/ia64.c (ia64_set_sched_flags): Disable data speculation\n\tbefore reload on optimization levels below 1.\n\nFrom-SVN: r112328", "tree": {"sha": "cba1bf3ad44f7516e9b9ac11a9cbb19a5bd336b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba1bf3ad44f7516e9b9ac11a9cbb19a5bd336b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/comments", "author": null, "committer": null, "parents": [{"sha": "e584065d68f543b9c8dcc4fde3b82caab9dca73e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e584065d68f543b9c8dcc4fde3b82caab9dca73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e584065d68f543b9c8dcc4fde3b82caab9dca73e"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "5cb82911b82ac8dd03f3ade011d5b1904c010efe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -1,3 +1,15 @@\n+2006-03-23  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\t* haifa-sched.c (choose_ready): Fix type of the local variable.\n+\tMove local variables.  Add comment.\n+\t(check_reg_live): Change signature.  Make callable from debugger.\n+\t* sched-int.h (check_reg_live): Update signature.\n+\t* sched-ebb.c (check_reg_live): Update parameters.\n+\t* sched-rgn.c (check_reg_live): Ditto.\n+\t(region_head_or_leaf_p): Check pointer before dereferencing.\n+\t* config/ia64/ia64.c (ia64_set_sched_flags): Disable data speculation\n+\tbefore reload on optimization levels below 1.\n+\n 2006-03-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_legitimate_constant_p): Reject"}, {"sha": "81d4f354c61b0044a4364fdc920ce5dc92a03b45", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -6713,7 +6713,7 @@ ia64_set_sched_flags (spec_info_t spec_info)\n     {\n       int mask = 0;\n \n-      if ((mflag_sched_br_data_spec && !reload_completed)\n+      if ((mflag_sched_br_data_spec && !reload_completed && optimize > 0)\n \t  || (mflag_sched_ar_data_spec && reload_completed))\n \t{\n \t  mask |= BEGIN_DATA;"}, {"sha": "56abcda64e2539a21064294ef541e00c8028c379", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -2153,11 +2153,11 @@ choose_ready (struct ready_list *ready)\n \t  && spec_info->flags & (PREFER_NON_DATA_SPEC\n \t\t\t\t | PREFER_NON_CONTROL_SPEC))\n \t{\n-\t  rtx x;\n-\t  int s;\n-\n \t  for (i = 0, n = ready->n_ready; i < n; i++)\n \t    {\n+\t      rtx x;\n+\t      ds_t s;\n+\n \t      x = ready_element (ready, i);\n \t      s = TODO_SPEC (x);\n \t      \n@@ -2185,6 +2185,8 @@ choose_ready (struct ready_list *ready)\n \t  || (targetm.sched.first_cycle_multipass_dfa_lookahead_guard_spec\n \t      && !targetm.sched.first_cycle_multipass_dfa_lookahead_guard_spec\n \t      (insn)))\n+\t/* Discard speculative instruction that stands first in the ready\n+\t   list.  */\n \t{\n \t  change_queue_index (insn, 1);\n \t  return 0;\n@@ -4625,9 +4627,12 @@ check_sched_flags (void)\n     gcc_assert (f & USE_GLAT);\n }\n \n-/* Checks global_live_at_{start, end} regsets.  */\n+/* Check global_live_at_{start, end} regsets.\n+   If FATAL_P is TRUE, then abort execution at the first failure.\n+   Overwise, print diagnostics to STDERR (this mode is for calling\n+   from debugger).  */\n void\n-check_reg_live (void)\n+check_reg_live (bool fatal_p)\n {\n   basic_block bb;\n \n@@ -4638,11 +4643,30 @@ check_reg_live (void)\n       i = bb->index;\n \n       if (glat_start[i])\n-\tgcc_assert (bitmap_equal_p (bb->il.rtl->global_live_at_start,\n-\t\t\t\t     glat_start[i]));\n+\t{\n+\t  bool b = bitmap_equal_p (bb->il.rtl->global_live_at_start,\n+\t\t\t\t   glat_start[i]);\n+\n+\t  if (!b)\n+\t    {\n+\t      gcc_assert (!fatal_p);\n+\n+\t      fprintf (stderr, \";; check_reg_live_at_start (%d) failed.\\n\", i);\n+\t    }\n+\t}\n+\n       if (glat_end[i])\n-\tgcc_assert (bitmap_equal_p (bb->il.rtl->global_live_at_end,\n-\t\t\t\t     glat_end[i]));\n+\t{\n+\t  bool b = bitmap_equal_p (bb->il.rtl->global_live_at_end,\n+\t\t\t\t   glat_end[i]);\n+\n+\t  if (!b)\n+\t    {\n+\t      gcc_assert (!fatal_p);\n+\n+\t      fprintf (stderr, \";; check_reg_live_at_end (%d) failed.\\n\", i);\n+\t    }\n+\t}\n     }\n }\n #endif /* ENABLE_CHECKING */"}, {"sha": "d7a3db9b61d459defb7091aa4250b50a4d1c2d13", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -667,7 +667,7 @@ schedule_ebbs (void)\n       /* !!! We can't check reg_live_info here because of the fact,\n \t that destination registers of COND_EXEC's may be dead\n \t before scheduling (while they should be alive).  Don't know why.  */\n-      /*check_reg_live ();*/\n+      /*check_reg_live (true);*/\n #endif\n     }\n   sbitmap_free (large_region_blocks);"}, {"sha": "175bd69dd5aead28c39aa73b36544d779ab7a0e3", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -639,7 +639,7 @@ extern void add_block (basic_block, basic_block);\n extern void attach_life_info (void);\n \n #ifdef ENABLE_CHECKING\n-extern void check_reg_live (void);\n+extern void check_reg_live (bool);\n #endif\n \n #endif /* GCC_SCHED_INT_H */"}, {"sha": "a4f037e53517ec8780a5a5f79a48cc78e061a9ce", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57aee2ab63245bf7678a0cb18997ceb78da8ffc/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "patch": "@@ -3020,7 +3020,7 @@ schedule_insns (void)\n \t\t\t : (PROP_DEATH_NOTES | PROP_REG_INFO)));\n \n #ifdef ENABLE_CHECKING\n-      check_reg_live ();\n+      check_reg_live (true);\n #endif\n     }\n \n@@ -3266,7 +3266,8 @@ region_head_or_leaf_p (basic_block bb, int leaf_p)\n       i = CONTAINING_RGN (bb->index);\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n-\tif (CONTAINING_RGN (e->dest->index) == i\n+\tif (e->dest != EXIT_BLOCK_PTR\n+            && CONTAINING_RGN (e->dest->index) == i\n \t    /* except self-loop.  */\n \t    && e->dest != bb)\n \t  return 0;"}]}