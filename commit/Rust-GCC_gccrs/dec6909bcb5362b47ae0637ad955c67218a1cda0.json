{"sha": "dec6909bcb5362b47ae0637ad955c67218a1cda0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjNjkwOWJjYjUzNjJiNDdhZTA2MzdhZDk1NWM2NzIxOGExY2RhMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-03-23T15:49:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-03-23T15:49:00Z"}, "message": "re PR target/26347 (hidden weak extern functions fail regardless of existence on alpha/linux)\n\n        PR target/26347\n        * config/alpha/predicates.md (local_symbolic_operand): Reject\n        weak symbols.\n\nFrom-SVN: r112322", "tree": {"sha": "09389bbdf2a4fd4a7c95387c246d5278b577b5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09389bbdf2a4fd4a7c95387c246d5278b577b5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dec6909bcb5362b47ae0637ad955c67218a1cda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec6909bcb5362b47ae0637ad955c67218a1cda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec6909bcb5362b47ae0637ad955c67218a1cda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec6909bcb5362b47ae0637ad955c67218a1cda0/comments", "author": null, "committer": null, "parents": [{"sha": "60fee157375ed84e88fa9b820bdde91b1bcd430d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fee157375ed84e88fa9b820bdde91b1bcd430d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fee157375ed84e88fa9b820bdde91b1bcd430d"}], "stats": {"total": 360, "additions": 184, "deletions": 176}, "files": [{"sha": "600619cb2c3a6744e1d158e352642caffcb6679b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 181, "deletions": 175, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec6909bcb5362b47ae0637ad955c67218a1cda0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec6909bcb5362b47ae0637ad955c67218a1cda0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dec6909bcb5362b47ae0637ad955c67218a1cda0", "patch": "@@ -1,3 +1,9 @@\n+2006-03-23  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/26347\n+\t* config/alpha/predicates.md (local_symbolic_operand): Reject\n+\tweak symbols.\n+\n 2006-03-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/26795\n@@ -552,227 +558,227 @@\n \n 2006-03-16  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>\n \n-        * config/ia64/ia64.c (stops_p): Added explicit initialization.\n-        (ia64_first_cycle_multipass_dfa_lookahead_guard_spec,\n-        ia64_h_i_d_extended, ia64_set_sched_flags, ia64_speculate_insn,\n-        ia64_needs_block_p, ia64_gen_check, ia64_sched_init_global,\n+\t* config/ia64/ia64.c (stops_p): Added explicit initialization.\n+\t(ia64_first_cycle_multipass_dfa_lookahead_guard_spec,\n+\tia64_h_i_d_extended, ia64_set_sched_flags, ia64_speculate_insn,\n+\tia64_needs_block_p, ia64_gen_check, ia64_sched_init_global,\n \tia64_sched_finish_global): New static functions to implement\n \thooks from gcc_target.sched.\n \t(spec_check_no, max_uid, pending_data_specs): New static variables.\n-        (ia64_mode_to_int, ia64_gen_spec_insn, ia64_spec_check_p,\n+\t(ia64_mode_to_int, ia64_gen_spec_insn, ia64_spec_check_p,\n \tia64_spec_check_src_p): New static functions.\n-        (ia64_adjust_cost): Renamed to ia64_adjust_cost_2.\n-        (TARGET_SCHED_ADJUST_COST): Removed.\n-        (TARGET_SCHED_ADJUST_COST_2, TARGET_SCHED_INIT_GLOBAL,\n+\t(ia64_adjust_cost): Renamed to ia64_adjust_cost_2.\n+\t(TARGET_SCHED_ADJUST_COST): Removed.\n+\t(TARGET_SCHED_ADJUST_COST_2, TARGET_SCHED_INIT_GLOBAL,\n \tTARGET_SCHED_FINISH_GLOBAL, TARGET_SCHED_H_I_D_EXTENDED,\n \tTARGET_SCHED_SPECULATE_INSN, TARGET_SCHED_NEEDS_BLOCK_P,\n \tTARGET_SCHED_GEN_CHECK,\n \tTARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC,\n-        TARGET_SCHED_SET_SCHED_FLAGS): New macros.\n-        (update_set_flags, group_barrier_needed, set_src_needs_barrier):\n+\tTARGET_SCHED_SET_SCHED_FLAGS): New macros.\n+\t(update_set_flags, group_barrier_needed, set_src_needs_barrier):\n \tFixed to handle speculation checks.\n-        (rtx_needs_barrier): Fixed to handle speculative loads and\n-        their checks.\n-        (ia64_variable_issue): Added code to count speculative loads and their\n-        checks.\n-        (ia64_first_cycle_multipass_dfa_lookahead_guard): Fixed to handle\n-        speculative loads.\n-        (enum SPEC_MODES, enum SPEC_GEN_LD_MAP, SPEC_GEN_CHECK_OFFSET):\n-        New enumerations.\n-        (SPEC_GEN_EXTEND_OFFSET, SPEC_N, SPEC_GEN_CHECK_MUTATION_OFFSET):\n-        New constants.\n-        (ia64_ld_address_bypass_p): Fixed to handle speculative loads.\n+\t(rtx_needs_barrier): Fixed to handle speculative loads and\n+\ttheir checks.\n+\t(ia64_variable_issue): Added code to count speculative loads and their\n+\tchecks.\n+\t(ia64_first_cycle_multipass_dfa_lookahead_guard): Fixed to handle\n+\tspeculative loads.\n+\t(enum SPEC_MODES, enum SPEC_GEN_LD_MAP, SPEC_GEN_CHECK_OFFSET):\n+\tNew enumerations.\n+\t(SPEC_GEN_EXTEND_OFFSET, SPEC_N, SPEC_GEN_CHECK_MUTATION_OFFSET):\n+\tNew constants.\n+\t(ia64_ld_address_bypass_p): Fixed to handle speculative loads.\n \t(ia64_reorg): Reset stops_p to NULL after it is freed.\n-        * config/ia64/ia64.md (UNSPEC_LDA, UNSPEC_LDS, UNSPEC_LDSA,\n+\t* config/ia64/ia64.md (UNSPEC_LDA, UNSPEC_LDS, UNSPEC_LDSA,\n \tUNSPEC_LDCCLR, UNSPEC_CHKACLR, UNSPEC_CHKS): New constants.\n-        (itanium_class): chk_s renamed to chk_s_i.  New constants: chk_s_f,\n-        chk_a.\n-        (data_speculative, control_speculative, check_load): New attributes.\n-        (mov<mode>_advanced, mov<mode>_speculative,\n-        mov<mode>_speculative_advanced, zero_extend<mode>di2_advanced,\n-        zero_extend<mode>di2_speculative,\n-        zero_extend<mode>di2_speculative_advanced): New patterns for\n-        data and control speculative loads.\n-        (mov<mode>_clr, zero_extend<mode>di2_clr): New patterns for\n-        check loads.\n-        (advanced_load_check_clr_<mode>, speculation_check_<mode>):\n-        New pattern for data and control speculation checks.\n+\t(itanium_class): chk_s renamed to chk_s_i.  New constants: chk_s_f,\n+\tchk_a.\n+\t(data_speculative, control_speculative, check_load): New attributes.\n+\t(mov<mode>_advanced, mov<mode>_speculative,\n+\tmov<mode>_speculative_advanced, zero_extend<mode>di2_advanced,\n+\tzero_extend<mode>di2_speculative,\n+\tzero_extend<mode>di2_speculative_advanced): New patterns for\n+\tdata and control speculative loads.\n+\t(mov<mode>_clr, zero_extend<mode>di2_clr): New patterns for\n+\tcheck loads.\n+\t(advanced_load_check_clr_<mode>, speculation_check_<mode>):\n+\tNew pattern for data and control speculation checks.\n \t(MODE, MODE_FOR_EXTEND, output_a, output_s, output_sa, output_c_clr,\n \tld_reg_constr, ldc_reg_constr, chk_reg_constr, mem_constr,\n \treg_pred_prefix, ld_class, chka_class, chks_class, attr_yes):\n \tAuxiliary definitions for the patterns.\n-        * config/ia64/itanium1.md (1_fldc, 1_fldpc, 1_ldc, 1_chk_s_f, 1_chk_a,\n-        1b_fldc, 1b_fldpc, 1b_ldc, 1b_chk_s_f, 1b_chk_a): New resource\n-        constraints.\n+\t* config/ia64/itanium1.md (1_fldc, 1_fldpc, 1_ldc, 1_chk_s_f, 1_chk_a,\n+\t1b_fldc, 1b_fldpc, 1b_ldc, 1b_chk_s_f, 1b_chk_a): New resource\n+\tconstraints.\n \t(1_fld, 1_fldp, 1_ld, 1b_fld, 1b_fldp, 1b_ld): Add a condition\n-        for speculation.\n-        (1_chk_s, 1b_chk_s): Renamed to 1_chk_s_i, 1b_chk_s_i.\n-        * config/ia64/itanium2.md (2_flda, 2_fldc, 2_fldpc, 2_ldc, 2_chk_s_f,\n+\tfor speculation.\n+\t(1_chk_s, 1b_chk_s): Renamed to 1_chk_s_i, 1b_chk_s_i.\n+\t* config/ia64/itanium2.md (2_flda, 2_fldc, 2_fldpc, 2_ldc, 2_chk_s_f,\n \t2_chk_a, 2b_flda, 2b_fldc, 2b_fldpc, 2b_ldc, 2b_chk_s_f, 2b_chk_a):\n \tNew resource constraints.\n \t(2_fld, 2_fldp, 2_ld, 2b_fld, 2b_fldp, 2b_ld): Add a condition\n-        for speculation.\n-        (2_chk_s, 2b_chk_s): Renamed to 2_chk_s_i, 2b_chk_s_i.\n-        * config/ia64/ia64.opt (msched-br-data-spec, msched-ar-data-spec,\n-        msched-control-spec, msched-br-in-data-spec, msched-ar-in-data-spec,\n-        msched-in-control-spec, msched-ldc, msched-control-ldc,\n-        msched-spec-verbose, msched-prefer-non-data-spec-insns,\n-        msched-prefer-non-control-spec-insns,\n+\tfor speculation.\n+\t(2_chk_s, 2b_chk_s): Renamed to 2_chk_s_i, 2b_chk_s_i.\n+\t* config/ia64/ia64.opt (msched-br-data-spec, msched-ar-data-spec,\n+\tmsched-control-spec, msched-br-in-data-spec, msched-ar-in-data-spec,\n+\tmsched-in-control-spec, msched-ldc, msched-control-ldc,\n+\tmsched-spec-verbose, msched-prefer-non-data-spec-insns,\n+\tmsched-prefer-non-control-spec-insns,\n \tmsched-count-spec-in-critical-path): New flags to tune speculative\n \tscheduling.\n \t* doc/invoke.texi (msched-br-data-spec, msched-ar-data-spec,\n-        msched-control-spec, msched-br-in-data-spec, msched-ar-in-data-spec,\n-        msched-in-control-spec, msched-ldc, msched-control-ldc,\n-        msched-spec-verbose, msched-prefer-non-data-spec-insns,\n-        msched-prefer-non-control-spec-insns,\n+\tmsched-control-spec, msched-br-in-data-spec, msched-ar-in-data-spec,\n+\tmsched-in-control-spec, msched-ldc, msched-control-ldc,\n+\tmsched-spec-verbose, msched-prefer-non-data-spec-insns,\n+\tmsched-prefer-non-control-spec-insns,\n \tmsched-count-spec-in-critical-path): Document new flags.\n \n 2006-03-16  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>\n \n-        * target.h (struct spec_info_def): New opaque declaration.\n-        (struct gcc_target.sched): New fields: adjust_cost_2, h_i_d_extended,\n-        speculate_insn, needs_block_p, gen_check,\n-        first_cycle_multipass_dfa_lookahead_guard_spec, set_sched_flags.\n-        * target-def.h (TARGET_SCHED_ADJUST_COST_2,\n-        TARGET_SCHED_H_I_D_EXTENDED, TARGET_SCHED_SPECULATE_INSN,\n-        TARGET_SCHED_NEEDS_BLOCK_P, TARGET_SCHED_GEN_CHECK,\n-        TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC,\n-        TARGET_SCHED_SET_SCHED_FLAGS): New macros to initialize fields in\n-        gcc_target.sched.\n-        (TARGET_SCHED): Use new macros.\n-        * rtl.h (copy_DEPS_LIST_list): New prototype.\n-        * sched-int.h (struct sched_info): Change signature of new_ready field,\n+\t* target.h (struct spec_info_def): New opaque declaration.\n+\t(struct gcc_target.sched): New fields: adjust_cost_2, h_i_d_extended,\n+\tspeculate_insn, needs_block_p, gen_check,\n+\tfirst_cycle_multipass_dfa_lookahead_guard_spec, set_sched_flags.\n+\t* target-def.h (TARGET_SCHED_ADJUST_COST_2,\n+\tTARGET_SCHED_H_I_D_EXTENDED, TARGET_SCHED_SPECULATE_INSN,\n+\tTARGET_SCHED_NEEDS_BLOCK_P, TARGET_SCHED_GEN_CHECK,\n+\tTARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC,\n+\tTARGET_SCHED_SET_SCHED_FLAGS): New macros to initialize fields in\n+\tgcc_target.sched.\n+\t(TARGET_SCHED): Use new macros.\n+\t* rtl.h (copy_DEPS_LIST_list): New prototype.\n+\t* sched-int.h (struct sched_info): Change signature of new_ready field,\n \tadjust all initializations. New fields: add_remove_insn,\n-        begin_schedule_ready, add_block, advance_target_bb, fix_recovery_cfg,\n+\tbegin_schedule_ready, add_block, advance_target_bb, fix_recovery_cfg,\n \tregion_head_or_leaf_p.\n-        (struct spec_info_def): New structure declaration.\n-        (spec_info_t): New typedef.\n-        (struct haifa_insn_data): New fields: todo_spec, done_spec, check_spec,\n-        recovery_block, orig_pat.\n-        (glat_start, glat_end): New variables declaraions.\n-        (TODO_SPEC, DONE_SPEC, CHECK_SPEC, RECOVERY_BLOCK, ORIG_PAT):\n+\t(struct spec_info_def): New structure declaration.\n+\t(spec_info_t): New typedef.\n+\t(struct haifa_insn_data): New fields: todo_spec, done_spec, check_spec,\n+\trecovery_block, orig_pat.\n+\t(glat_start, glat_end): New variables declaraions.\n+\t(TODO_SPEC, DONE_SPEC, CHECK_SPEC, RECOVERY_BLOCK, ORIG_PAT):\n \tNew access macros.\n-        (enum SCHED_FLAGS): New constants: SCHED_RGN, SCHED_EBB,\n-        DETACH_LIFE_INFO, USE_GLAT.\n-        (enum SPEC_SCHED_FLAGS): New enumeration.\n-        (NOTE_NOTE_BB_P): New macro.\n-        (extend_dependency_caches, xrecalloc, unlink_bb_notes, add_block,\n-        attach_life_info, debug_spec_status, check_reg_live): New functions.\n-        (get_block_head_tail): Change signature to get_ebb_head_tail, adjust\n-        all uses in ddg.c, modulo-sched.c, haifa-sched.c, sched-rgn.c,\n-        sched-ebb.c\n+\t(enum SCHED_FLAGS): New constants: SCHED_RGN, SCHED_EBB,\n+\tDETACH_LIFE_INFO, USE_GLAT.\n+\t(enum SPEC_SCHED_FLAGS): New enumeration.\n+\t(NOTE_NOTE_BB_P): New macro.\n+\t(extend_dependency_caches, xrecalloc, unlink_bb_notes, add_block,\n+\tattach_life_info, debug_spec_status, check_reg_live): New functions.\n+\t(get_block_head_tail): Change signature to get_ebb_head_tail, adjust\n+\tall uses in ddg.c, modulo-sched.c, haifa-sched.c, sched-rgn.c,\n+\tsched-ebb.c\n \t(get_dep_weak, ds_merge): Prototype functions from sched-deps.c .\n-        * ddg.c (get_block_head_tail): Adjust all uses.\n-        * modulo-sched.c (get_block_head_tail): Adjust all uses.\n+\t* ddg.c (get_block_head_tail): Adjust all uses.\n+\t* modulo-sched.c (get_block_head_tail): Adjust all uses.\n \t(sms_sched_info): Initialize new fields.\n \t(contributes_to_priority): Removed.\n-        * haifa-sched.c (params.h): New include.\n+\t* haifa-sched.c (params.h): New include.\n \t(get_block_head_tail): Adjust all uses.\n-        (ISSUE_POINTS): New macro.\n-        (glat_start, glat_end): New global variables.\n-        (spec_info_var, spec_info, added_recovery_block_p, nr_begin_data,\n+\t(ISSUE_POINTS): New macro.\n+\t(glat_start, glat_end): New global variables.\n+\t(spec_info_var, spec_info, added_recovery_block_p, nr_begin_data,\n \tnr_be_in_data, nr_begin_control, nr_be_in_control, bb_header,\n \told_last_basic_block, before_recovery, current_sched_info_var,\n \trgn_n_insns, luid): New static variables.\n-        (insn_cost1): New function.  Move logic from insn_cost to here.\n-        (find_insn_reg_weight1): New function.  Move logic from\n-        find_insn_reg_weight to here.\n-        (reemit_notes, move_insn, max_issue): Change signature.\n-        (move_insn1): Removed.\n-        (extend_h_i_d, extend_ready, extend_global, extend_all, init_h_i_d,\n-        extend_bb): New static functions to support extension of scheduler's\n-        data structures.\n-        (generate_recovery_code, process_insn_depend_be_in_spec,\n-        begin_speculative_block, add_to_speculative_block,\n-        init_before_recovery, create_recovery_block, create_check_block_twin,\n-        fix_recovery_deps): New static functions to support\n-        generation of recovery code.\n-        (fix_jump_move, find_fallthru_edge, dump_new_block_header,\n-        restore_bb_notes, move_block_after_check, move_succs): New static\n-        functions to support ebb scheduling.\n-        (init_glat, init_glat1, attach_life_info1, free_glat): New static\n-        functions to support handling of register live information.\n-        (associate_line_notes_with_blocks, change_pattern, speculate_insn,\n+\t(insn_cost1): New function.  Move logic from insn_cost to here.\n+\t(find_insn_reg_weight1): New function.  Move logic from\n+\tfind_insn_reg_weight to here.\n+\t(reemit_notes, move_insn, max_issue): Change signature.\n+\t(move_insn1): Removed.\n+\t(extend_h_i_d, extend_ready, extend_global, extend_all, init_h_i_d,\n+\textend_bb): New static functions to support extension of scheduler's\n+\tdata structures.\n+\t(generate_recovery_code, process_insn_depend_be_in_spec,\n+\tbegin_speculative_block, add_to_speculative_block,\n+\tinit_before_recovery, create_recovery_block, create_check_block_twin,\n+\tfix_recovery_deps): New static functions to support\n+\tgeneration of recovery code.\n+\t(fix_jump_move, find_fallthru_edge, dump_new_block_header,\n+\trestore_bb_notes, move_block_after_check, move_succs): New static\n+\tfunctions to support ebb scheduling.\n+\t(init_glat, init_glat1, attach_life_info1, free_glat): New static\n+\tfunctions to support handling of register live information.\n+\t(associate_line_notes_with_blocks, change_pattern, speculate_insn,\n \tsched_remove_insn, clear_priorities, calc_priorities, bb_note,\n \tadd_jump_dependencies):\tNew static functions.\n-        (check_cfg, has_edge_p, check_sched_flags): New static functions for\n+\t(check_cfg, has_edge_p, check_sched_flags): New static functions for\n \tconsistancy checking.\n \t(debug_spec_status): New function to call from debugger.\n \t(priority): Added code to handle speculation checks.\n \t(rank_for_schedule): Added code to distinguish speculative instructions.\n \t(schedule_insn): Added code to handle speculation checks.\n \t(unlink_other_notes, rm_line_notes, restore_line_notes, rm_other_notes):\n \tFixed to handle ebbs.\n-        (move_insn): Added code to handle ebb scheduling.\n+\t(move_insn): Added code to handle ebb scheduling.\n \t(max_issue): Added code to use ISSUE_POINTS of instructions.\n-        (choose_ready): Added code to choose between speculative and\n-        non-speculative instructions.\n-        (schedule_block): Added code to handle ebb scheduling and scheduling of\n-        speculative instructions.\n-        (sched_init): Initialize new variables.\n-        (sched_finish): Free new variables.  Print statistics.\n-        (try_ready): Added code to handle speculative instructions.\n-        * lists.c (copy_DEPS_LIST_list): New function.\n-        * sched-deps.c (extend_dependency_caches): New function.  Move logic\n-        from create_dependency_caches to here.\n+\t(choose_ready): Added code to choose between speculative and\n+\tnon-speculative instructions.\n+\t(schedule_block): Added code to handle ebb scheduling and scheduling of\n+\tspeculative instructions.\n+\t(sched_init): Initialize new variables.\n+\t(sched_finish): Free new variables.  Print statistics.\n+\t(try_ready): Added code to handle speculative instructions.\n+\t* lists.c (copy_DEPS_LIST_list): New function.\n+\t* sched-deps.c (extend_dependency_caches): New function.  Move logic\n+\tfrom create_dependency_caches to here.\n \t(get_dep_weak, ds_merge): Make global.\n-        * genattr.c (main): Code to output prototype for\n-        dfa_clear_single_insn_cache.\n-        * genautomata.c (DFA_CLEAR_SINGLE_INSN_CACHE_FUNC_NAME): New macros.\n-        (output_dfa_clean_insn_cache_func): Code to output\n-        dfa_clear_single_insn_cache function.\n-        * sched-ebb.c (target_n_insns): Remove.  Adjust all users to use\n+\t* genattr.c (main): Code to output prototype for\n+\tdfa_clear_single_insn_cache.\n+\t* genautomata.c (DFA_CLEAR_SINGLE_INSN_CACHE_FUNC_NAME): New macros.\n+\t(output_dfa_clean_insn_cache_func): Code to output\n+\tdfa_clear_single_insn_cache function.\n+\t* sched-ebb.c (target_n_insns): Remove.  Adjust all users to use\n \tn_insns.\n-        (can_schedule_ready_p, fix_basic_block_boundaries, add_missing_bbs):\n-        Removed.\n-        (n_insns, dont_calc_deps, ebb_head, ebb_tail, last_bb):\n-        New static variables.\n-        (begin_schedule_ready, add_remove_insn, add_block1, advance_target_bb,\n+\t(can_schedule_ready_p, fix_basic_block_boundaries, add_missing_bbs):\n+\tRemoved.\n+\t(n_insns, dont_calc_deps, ebb_head, ebb_tail, last_bb):\n+\tNew static variables.\n+\t(begin_schedule_ready, add_remove_insn, add_block1, advance_target_bb,\n \tfix_recovery_cfg, ebb_head_or_leaf_p): Implement hooks from\n \tstruct sched_info.\n-        (ebb_sched_info): Initialize new fields.\n+\t(ebb_sched_info): Initialize new fields.\n \t(get_block_head_tail): Adjust all uses.\n \t(compute_jump_reg_dependencies): Fixed to use glat_start.\n \t(schedule_ebb): Code to remove unreachable last block.\n-        (schedule_ebbs): Added code to update register live information.\n-        * sched-rgn.c (region_sched_info): Initialize new fields.\n+\t(schedule_ebbs): Added code to update register live information.\n+\t* sched-rgn.c (region_sched_info): Initialize new fields.\n \t(get_block_head_tail): Adjust all uses.\n \t(last_was_jump): Removed.  Adjust users.\n-        (begin_schedule_ready, add_remove_insn, insn_points, extend_regions,\n+\t(begin_schedule_ready, add_remove_insn, insn_points, extend_regions,\n \tadd_block1, fix_recovery_cfg, advance_target_bb, region_head_or_leaf_p):\n \tImplement new hooks.\n-        (check_dead_notes1): New static function.\n-        (struct region): New fields: dont_calc_deps, has_real_ebb.\n-        (RGN_DONT_CALC_DEPS, RGN_HAS_REAL_EBB): New access macros.\n-        (BB_TO_BLOCK): Fixed to handle EBBs.\n-        (EBB_FIRST_BB, EBB_LAST_BB): New macros.\n-        (ebb_head): New static variable.\n-        (debug_regions, contributes_to_priority): Fixed to handle EBBs.\n-        (find_single_block_regions, find_rgns, find_more_rgns): Initialize\n+\t(check_dead_notes1): New static function.\n+\t(struct region): New fields: dont_calc_deps, has_real_ebb.\n+\t(RGN_DONT_CALC_DEPS, RGN_HAS_REAL_EBB): New access macros.\n+\t(BB_TO_BLOCK): Fixed to handle EBBs.\n+\t(EBB_FIRST_BB, EBB_LAST_BB): New macros.\n+\t(ebb_head): New static variable.\n+\t(debug_regions, contributes_to_priority): Fixed to handle EBBs.\n+\t(find_single_block_regions, find_rgns, find_more_rgns): Initialize\n \tnew fields.\n \t(compute_dom_prob_ps): New assertion.\n-        (check_live_1, update_live_1): Fixed to work with glat_start instead of\n-        global_live_at_start.\n+\t(check_live_1, update_live_1): Fixed to work with glat_start instead of\n+\tglobal_live_at_start.\n \t(init_ready_list): New assertions.\n \t(can_schedule_ready_p): Split update code to begin_schedule_ready.\n \t(new_ready): Add support for BEGIN_CONTROL speculation.\n-        (schedule_insns): Fixed code that updates register live information\n-        to handle EBBs.\n-        (schedule_region): Fixed to handle EBBs.\n+\t(schedule_insns): Fixed code that updates register live information\n+\tto handle EBBs.\n+\t(schedule_region): Fixed to handle EBBs.\n \t(init_regions): Use extend_regions and check_dead_notes1.\n-        * params.def (PARAM_MAX_SCHED_INSN_CONFLICT_DELAY,\n-        PARAM_SCHED_SPEC_PROB_CUTOFF): New parameters.\n+\t* params.def (PARAM_MAX_SCHED_INSN_CONFLICT_DELAY,\n+\tPARAM_SCHED_SPEC_PROB_CUTOFF): New parameters.\n \t* doc/tm.texi (TARGET_SCHED_ADJUST_COST_2, TARGET_SCHED_H_I_D_EXTENDED,\n \tTARGET_SCHED_SPECULATE_INSN, TARGET_SCHED_NEEDS_BLOCK_P,\n \tTARGET_SCHED_GEN_CHECK,\n \tTARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC,\n \tTARGET_SCHED_SET_SCHED_FLAGS): Document.\n-        * doc/invoke.texi (max-sched-insn-conflict-delay,\n+\t* doc/invoke.texi (max-sched-insn-conflict-delay,\n \tsched-spec-prob-cutoff): Document.\n \n 2006-03-16  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>\n \n-        * sched-int.h (struct haifa_insn_data): New fields: resolved_deps,\n+\t* sched-int.h (struct haifa_insn_data): New fields: resolved_deps,\n \tinter_tick, queue_index.\n \t(struct sched_info): Change signature of init_ready_list field.\n \tAdjust all initializations.\n@@ -823,60 +829,60 @@\n \t(gather_region_statistics, print_region_statistics): New static\n \tfunctions.\n \t* params.def (PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS): New parameter.\n-        * doc/invoke.texi (max-sched-extend-regions-iters): Document.\n+\t* doc/invoke.texi (max-sched-extend-regions-iters): Document.\n \n 2006-03-16  Maxim Kuvyrkov <mkuvyrkov@ispras.ru>\n-            Andrey Belevantsev <abel@ispras.ru>\n+\t    Andrey Belevantsev <abel@ispras.ru>\n \n \t* ddg.c (build_intra_loop_deps): Adjust add_forward_dependence call.\n-        * lists.c (unused_deps_list): New variable.\n+\t* lists.c (unused_deps_list): New variable.\n \t(free_list): Add assertions to verify the proper distinguishing \n-        between INSN_LISTs and DEPS_LISTs.\n-        (find_list_elem, remove_list_elem, remove_list_node): New static\n+\tbetween INSN_LISTs and DEPS_LISTs.\n+\t(find_list_elem, remove_list_elem, remove_list_node): New static\n \tfunctions.\n-        (alloc_DEPS_LIST, free_DEPS_LIST, free_DEPS_LIST_node,\n-        remove_free_INSN_LIST_elem, remove_free_DEPS_LIST_elem,\n-        remove_free_INSN_LIST_node, remove_free_DEPS_LIST_node): New functions.\n-        (alloc_INSN_LIST): Assert that the list we're working on is indeed\n+\t(alloc_DEPS_LIST, free_DEPS_LIST, free_DEPS_LIST_node,\n+\tremove_free_INSN_LIST_elem, remove_free_DEPS_LIST_elem,\n+\tremove_free_INSN_LIST_node, remove_free_DEPS_LIST_node): New functions.\n+\t(alloc_INSN_LIST): Assert that the list we're working on is indeed\n \tan INSN_LIST.\n-        (free_INSN_LIST_node): Likewise.\n+\t(free_INSN_LIST_node): Likewise.\n \t* modulo-sched.c (current_sched_info): Initialize flags field.\n \t* reg-notes.def: Exchange DEP_ANTI and DEP_OUTPUT.\n \t* rtl.def (DEPS_LIST): Define.\n-        * rtl.h: Declare new functions from lists.c.\n-        * sched-deps.c (spec_dependency_cache): New static variable.\n-        (maybe_add_or_update_back_dep_1, add_back_dep): New static functions.\n-        (add_dependence): Change return type to void.  Move the logic to ...\n-        (add_or_update_back_dep_1): ... here.  Handle speculative dependencies.\n-        (delete_all_dependences): Add comment about forward_dependency_cache.\n+\t* rtl.h: Declare new functions from lists.c.\n+\t* sched-deps.c (spec_dependency_cache): New static variable.\n+\t(maybe_add_or_update_back_dep_1, add_back_dep): New static functions.\n+\t(add_dependence): Change return type to void.  Move the logic to ...\n+\t(add_or_update_back_dep_1): ... here.  Handle speculative dependencies.\n+\t(delete_all_dependences): Add comment about forward_dependency_cache.\n \tHandle spec_dependency_cache.  Handle DEPS_LISTs.\n-        (fixup_sched_groups): Clarify the change of priority of output\n-        and anti dependencies.\n-        (sched_analyze_2): Adjust add_dependence calls to create data\n+\t(fixup_sched_groups): Clarify the change of priority of output\n+\tand anti dependencies.\n+\t(sched_analyze_2): Adjust add_dependence calls to create data\n \tspeculative dependence.\n-        (add_forward_dependence): Renamed to add_forw_dep, change prototype.\n+\t(add_forward_dependence): Renamed to add_forw_dep, change prototype.\n \tAdjust all callers.  Handle DEPS_LISTS.\n-        (compute_forward_dependences): Use add_forw_dep.  Sort LOG_LINKs in\n+\t(compute_forward_dependences): Use add_forw_dep.  Sort LOG_LINKs in\n \tpresence of speculation.\n-        (init_dependency_caches, free_dependency_caches):\n+\t(init_dependency_caches, free_dependency_caches):\n \tHandle spec_dependency_cache.\n-        (adjust_add_sorted_back_dep, adjust_back_add_forw_dep, delete_forw_dep,\n+\t(adjust_add_sorted_back_dep, adjust_back_add_forw_dep, delete_forw_dep,\n \testimate_dep_weak, get_dep_weak, ds_merge, check_dep_status):\n \tNew static functions.\n-        (add_or_update_back_dep, add_or_update_back_forw_dep,\n+\t(add_or_update_back_dep, add_or_update_back_forw_dep,\n \tadd_back_forw_dep, delete_back_forw_dep): New functions.\n \t* sched-int.h (ds_t, dw_t): New typedefs.\n \t(struct sched_info): Add new field flags.\n \t(struct haifa_insn_data): Add new bitfield has_internal_dep.\n \tPrototype new sched-deps.c functions.\n-        (HAS_INTERNAL_DEP, DEP_STATUS): New access macros.\n+\t(HAS_INTERNAL_DEP, DEP_STATUS): New access macros.\n \t(BITS_PER_DEP_STATUS, BITS_PER_DEP_WEAK, DEP_WEAK_MASK, MAX_DEP_WEAK,\n \tMIN_DEP_WEAK, NO_DEP_WEAK, UNCERTAIN_DEP_WEAK, BEGIN_DATA, BE_IN_DATA,\n \tBEGIN_CONTROL, BE_IN_CONTROL, BEGIN_SPEC, DATA_SPEC, CONTROL_SPEC,\n \tSPECULATIVE, BE_IN_SPEC, FIRST_SPEC_TYPE, LAST_SPEC_TYPE,\n \tSPEC_TYPE_SHIFT, DEP_TRUE, DEP_OUTPUT, DEP_ANTI, DEP_TYPES, HARD_DEP):\n \tNew constants.\n-        (enum SPEC_TYPES_OFFSETS, enum DEPS_ADJUST_RESULT, enum SCHED_FLAGS):\n+\t(enum SPEC_TYPES_OFFSETS, enum DEPS_ADJUST_RESULT, enum SCHED_FLAGS):\n \tNew enums.\n \t* sched-rgn.c (current_sched_info): Initialize flags field.\n \t(schedule_insns): Initialize current_sched_info before the sched_init"}, {"sha": "a035fffd841d2e1a8fcd3cdc0cffcc834ed0d04c", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec6909bcb5362b47ae0637ad955c67218a1cda0/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec6909bcb5362b47ae0637ad955c67218a1cda0/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=dec6909bcb5362b47ae0637ad955c67218a1cda0", "patch": "@@ -338,7 +338,9 @@\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n \n-  return SYMBOL_REF_LOCAL_P (op) && !SYMBOL_REF_TLS_MODEL (op);\n+  return (SYMBOL_REF_LOCAL_P (op)\n+\t  && !SYMBOL_REF_WEAK (op)\n+\t  && !SYMBOL_REF_TLS_MODEL (op));\n })\n \n ;; Return true if OP is a SYMBOL_REF or CONST referencing a variable"}]}