{"sha": "bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "node_id": "C_kwDOANBUbNoAKGJiMGExNTU2ZGY3OWQwMmNmNTcwZjVlYjE3YTFiMDJhNTA5ZjBiZTQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-02T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-02T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "c64bfaf4a48f30afc2067ea5051eb61737ba8cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c64bfaf4a48f30afc2067ea5051eb61737ba8cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/comments", "author": null, "committer": null, "parents": [{"sha": "6761d362c3efe5f4ca3b0c66e6854015acf162a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6761d362c3efe5f4ca3b0c66e6854015acf162a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6761d362c3efe5f4ca3b0c66e6854015acf162a1"}], "stats": {"total": 381, "additions": 380, "deletions": 1}, "files": [{"sha": "3377aa1b97f9176f3c99af5cb232a9405245f533", "filename": "gcc/ChangeLog", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,173 @@\n+2022-09-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR other/106782\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_vector_costs::prefer_unrolled_loop): Replace %u with\n+\tHOST_WIDE_INT_PRINT_UNSIGNED.\n+\n+2022-09-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.cc (vect_build_slp_tree_2): When building a\n+\tVEC_PERM_EXPR of an existing vector, set the SLP_TREE_LANES\n+\tto the number of vector elements, if that's a known constant.\n+\t(vect_optimize_slp_pass::is_compatible_layout): Remove associated\n+\tcomment about zero SLP_TREE_LANES.\n+\t(vect_optimize_slp_pass::start_choosing_layouts): Iterate over\n+\tall partition members when looking for potential layouts.\n+\tHandle existing permutes of fixed-length vectors.\n+\n+2022-09-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/106707\n+\t* config/i386/i386.md (moves to/from AX_REG into xchg peephole2):\n+\tDo not convert a move pattern where both operands are AX_REG.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_le): Convert to dconst*inf.\n+\t(build_ge): Same.\n+\t* value-range.cc (frange::set_signbit): Same.\n+\t(frange::normalize_kind): Same.\n+\t(range_tests_floats): Same.\n+\t* value-range.h (vrp_val_max): Same.\n+\t(vrp_val_min): Same.\n+\t(frange::set_varying): Same.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* emit-rtl.cc (init_emit_once): Initialize dconstinf and\n+\tdconstninf.\n+\t* real.h: Add dconstinf and dconstninf.\n+\n+2022-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n+\tRemove cycle detection, instead avoid walking backedges.\n+\n+2022-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n+\tNew wrapping overload.\n+\t(uninit_analysis::init_use_preds): Simplify.\n+\t(uninit_analysis::init_from_phi_def): Likewise.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_builtin_int_call): Add case for\n+\tCFN_BUILT_IN_SIGNBIT.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_equal::op1_range): Do not copy sign\n+\tbit.\n+\t(foperator_not_equal::op1_range): Same.\n+\t* value-query.cc (range_query::get_tree_range): Set sign bit.\n+\t* value-range-pretty-print.cc (vrange_printer::visit): Dump sign bit.\n+\t* value-range.cc (frange::set_signbit): New.\n+\t(frange::set): Adjust for sign bit.\n+\t(frange::normalize_kind): Same.\n+\t(frange::union_): Remove useless comment.\n+\t(frange::intersect): Same.\n+\t(frange::contains_p): Adjust for sign bit.\n+\t(frange::singleton_p): Same.\n+\t(frange::verify_range): Same.\n+\t(range_tests_signbit): New tests.\n+\t(range_tests_floats): Call range_tests_signbit.\n+\t* value-range.h (class frange_props): Add signbit\n+\t(class frange): Same.\n+\n+2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/106782\n+\t* dumpfile.h (dump_printf_loc): Use ATTRIBUTE_GCC_DUMP_PRINTF (3, 4)\n+\tinstead of ATTRIBUTE_GCC_DUMP_PRINTF (3, 0).\n+\t* tree-parloops.cc (parloops_is_slp_reduction): Cast pointers to\n+\tderived types of gimple to gimple * to avoid -Wformat warnings.\n+\t* tree-vect-loop-manip.cc (vect_set_loop_condition,\n+\tvect_update_ivs_after_vectorizer): Likewise.\n+\t* tree-vect-stmts.cc (vectorizable_load): Likewise.\n+\t* tree-vect-patterns.cc (vect_split_statement,\n+\tvect_recog_mulhs_pattern, vect_recog_average_pattern,\n+\tvect_determine_precisions_from_range,\n+\tvect_determine_precisions_from_users): Likewise.\n+\t* gimple-loop-versioning.cc\n+\t(loop_versioning::analyze_term_using_scevs): Likewise.\n+\t* tree-vect-slp.cc (vect_build_slp_tree_1): Likewise.\n+\t(vect_build_slp_tree): Cast slp_tree to void * to avoid\n+\t-Wformat warnings.\n+\t(optimize_load_redistribution_1, vect_match_slp_patterns,\n+\tvect_build_slp_instance, vect_optimize_slp_pass::materialize,\n+\tvect_optimize_slp_pass::dump, vect_slp_convert_to_external,\n+\tvect_slp_analyze_node_operations, vect_bb_partition_graph): Likewise.\n+\t(vect_print_slp_tree): Likewise.  Also use\n+\tHOST_WIDE_INT_PRINT_UNSIGNED instead of %u.\n+\t* tree-vect-loop.cc (vect_determine_vectorization_factor,\n+\tvect_analyze_scalar_cycles_1, vect_analyze_loop_operations,\n+\tvectorizable_induction, vect_transform_loop): Cast pointers to derived\n+\ttypes of gimple to gimple * to avoid -Wformat warnings.\n+\t(vect_analyze_loop_2): Cast slp_tree to void * to avoid\n+\t-Wformat warnings.\n+\t(vect_estimate_min_profitable_iters): Use HOST_WIDE_INT_PRINT_UNSIGNED\n+\tinstead of %d.\n+\t* tree-vect-slp-patterns.cc (vect_pattern_validate_optab): Use %G\n+\tinstead of %T and STMT_VINFO_STMT (SLP_TREE_REPRESENTATIVE (node))\n+\tinstead of SLP_TREE_DEF_TYPE (node).\n+\n+2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106655\n+\t* doc/invoke.texi (-Winvalid-utf8): Document it.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106785\n+\t* value-range.cc (range_tests_nan): Adjust tests for !HONOR_NANS.\n+\t(range_tests_floats): Same.\n+\n+2022-09-01  konglin1  <lingling.kong@intel.com>\n+\n+\t* tree-if-conv.cc (is_cond_scalar_reduction): Add MULT_EXPR\n+\trecognition.\n+\n+2022-09-01  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/101322\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_mma_builtin):\n+\tEnforce the use of a valid MMA pointer type.\n+\n+2022-09-01  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.cc (riscv_conditional_register_usage): Add vector\n+\tregisters.\n+\n+2022-09-01  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.cc (riscv_const_insns): Add cost of poly_int.\n+\t(riscv_output_move): Add csrr vlenb assembly.\n+\t* config/riscv/riscv.md (move_type): Add csrr vlenb type.\n+\t(ext): New attribute.\n+\t(ext_enabled): Ditto.\n+\t(enabled): Ditto.\n+\n+2022-09-01  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/constraints.md (TARGET_VECTOR ? V_REGS : NO_REGS): Add\n+\t\"vr\" constraint.\n+\t(TARGET_VECTOR ? VD_REGS : NO_REGS): Add \"vd\" constraint.\n+\t(TARGET_VECTOR ? VM_REGS : NO_REGS): Add \"vm\" constraint.\n+\t(vp): Add poly constraint.\n+\n+2022-09-01  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.h (enum reg_class): Change vype to vtype.\n+\n+2022-09-01  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.cc (riscv_convert_vector_bits): Change\n+\tconfiguration according to TARGET_MIN_VLEN.\n+\t* config/riscv/riscv.h (UNITS_PER_FP_REG): Fix comment.\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* config.build: Remove deprecated ports."}, {"sha": "9dafb9722d0132124979768702e4b588d723ef52", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1 +1 @@\n-20220901\n+20220902"}, {"sha": "e03e3a0272dd6c68c036ec47c838ae3562fbd950", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,19 @@\n+2022-09-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.cc (c_common_nodes_and_builtins): Set TREE_STRING_FLAG on\n+\tchar8_t.\n+\t(braced_list_to_string): Check for char-sized elements.\n+\n+2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106655\n+\t* c.opt (-Winvalid-utf8): New warning.\n+\t* c-opts.cc (c_common_handle_option) <case OPT_finput_charset_>:\n+\tSet cpp_opts->cpp_input_charset_explicit.\n+\t(c_common_post_options): If -finput-charset=UTF-8 is explicit\n+\tin C++23, enable -Winvalid-utf8 by default and if -pedantic\n+\tor -pedantic-errors, make it a pedwarn.\n+\n 2022-08-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-attribs.cc (handle_deprecated_attribute): Check and pedwarn"}, {"sha": "61b9c669342680c6cb0b28bbd7d55fc2542fdd00", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,8 @@\n+2022-09-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (grokparms): Handle () in a function declaration the\n+\tsame as (void) for C2X.\n+\n 2022-08-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.cc (c_parser_label): Pass attributes to do_case."}, {"sha": "c9b87bad0270c8c0e90fc8c4f8db3f9a50454af4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,7 @@\n+2022-09-01  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (maybe_strip_ref_conversion): Remove.\n+\n 2022-08-30  Ulrich Drepper  <drepper@gmail.com>\n \n \t* Make-lang.in: Add rule to rebuild std-name-hint.h from"}, {"sha": "d8a1999a40add85a304a3083d7775dd830f54fc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,69 @@\n+2022-09-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/106707\n+\t* gcc.target/i386/pr106707.c (foo): Replace long with long long.\n+\n+2022-09-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-unproto-3.c, gcc.dg/c2x-unproto-3.c,\n+\tgcc.dg/c2x-unproto-4.c: New tests.\n+\t* gcc.dg/c2x-old-style-definition-6.c, gcc.dg/c2x-unproto-1.c,\n+\tgcc.dg/c2x-unproto-2.c: Update for removal of unprototyped\n+\tfunctions.\n+\n+2022-09-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-pr54400.c: Extend to aarch64.\n+\t* gcc.dg/vect/bb-slp-layout-18.c: New test.\n+\n+2022-09-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/106707\n+\t* gcc.target/i386/pr106707.c: New test.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-signbit-1.c: New test.\n+\n+2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106655\n+\t* c-c++-common/cpp/Winvalid-utf8-1.c: New test.\n+\t* c-c++-common/cpp/Winvalid-utf8-2.c: New test.\n+\t* c-c++-common/cpp/Winvalid-utf8-3.c: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-1.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-2.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-3.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-4.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-5.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-6.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-7.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-8.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-9.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-10.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-11.C: New test.\n+\t* g++.dg/cpp23/Winvalid-utf8-12.C: New test.\n+\n+2022-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106785\n+\t* gcc.dg/tree-ssa/vrp-float-nan-1.c: New test.\n+\n+2022-09-01  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.dg/tree-ssa/gen-vect-34.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-18.c: New test.\n+\n+2022-09-01  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/106682\n+\t* gcc.target/powerpc/pr86731-fwrapv-longlong.c: Fix typo.\n+\n+2022-09-01  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/101322\n+\t* g++.target/powerpc/pr101322.C: New test.\n+\n 2022-08-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-fallthrough-2.c,"}, {"sha": "defaa945629bcf1b405ef01d1a247c7c3a05a800", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,22 @@\n+2022-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106655\n+\t* include/cpplib.h (struct cpp_options): Implement C++23\n+\tP2295R6 - Support for UTF-8 as a portable source file encoding.\n+\tAdd cpp_warn_invalid_utf8 and cpp_input_charset_explicit fields.\n+\t(enum cpp_warning_reason): Add CPP_W_INVALID_UTF8 enumerator.\n+\t* init.cc (cpp_create_reader): Initialize cpp_warn_invalid_utf8\n+\tand cpp_input_charset_explicit.\n+\t* charset.cc (_cpp_valid_utf8): Adjust function comment.\n+\t* lex.cc (UCS_LIMIT): Define.\n+\t(utf8_continuation): New const variable.\n+\t(utf8_signifier): Move earlier in the file.\n+\t(_cpp_warn_invalid_utf8, _cpp_handle_multibyte_utf8): New functions.\n+\t(_cpp_skip_block_comment): Handle -Winvalid-utf8 warning.\n+\t(skip_line_comment): Likewise.\n+\t(lex_raw_string, lex_string): Likewise.\n+\t(_cpp_lex_direct): Likewise.\n+\n 2022-08-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/106778"}, {"sha": "2547cd68ca12543727496620323b06aad694608e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0a1556df79d02cf570f5eb17a1b02a509f0be4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "patch": "@@ -1,3 +1,102 @@\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (adjacent_transform_view::_Iterator): Add\n+\ttypename keyword before dependent qualified-id.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_referenceable): Remove.\n+\t(__add_lvalue_reference_helper, __add_rvalue_reference_helper):\n+\tUse __void_t instead of __is_referenceable.\n+\t(__add_pointer_helper): Likewise.\n+\t(add_pointer): Add partial specializations for reference types.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_constructible_impl): Replace\n+\tclass template with alias template.\n+\t(is_default_constructible, is_nothrow_constructible)\n+\t(is_nothrow_constructible): Simplify base-specifier.\n+\t(__is_copy_constructible_impl, __is_move_constructible_impl)\n+\t(__is_nothrow_copy_constructible_impl)\n+\t(__is_nothrow_move_constructible_impl): Remove class templates.\n+\t(is_copy_constructible, is_move_constructible)\n+\t(is_nothrow_constructible, is_nothrow_default_constructible)\n+\t(is_nothrow_copy_constructible, is_nothrow_move_constructible):\n+\tAdjust base-specifiers to use __is_constructible_impl.\n+\t(__is_copy_assignable_impl, __is_move_assignable_impl)\n+\t(__is_nt_copy_assignable_impl, __is_nt_move_assignable_impl):\n+\tRemove class templates.\n+\t(__is_assignable_impl): New alias template.\n+\t(is_assignable, is_copy_assignable, is_move_assignable):\n+\tAdjust base-specifiers to use new alias template.\n+\t(is_nothrow_copy_assignable, is_nothrow_move_assignable):\n+\tAdjust base-specifiers to use existing alias template.\n+\t(__is_trivially_constructible_impl): New alias template.\n+\t(is_trivially_constructible, is_trivially_default_constructible)\n+\t(is_trivially_copy_constructible)\n+\t(is_trivially_move_constructible): Adjust base-specifiers to use\n+\tnew alias template.\n+\t(__is_trivially_assignable_impl): New alias template.\n+\t(is_trivially_assignable, is_trivially_copy_assignable)\n+\t(is_trivially_move_assignable): Adjust base-specifier to use\n+\tnew alias template.\n+\t(__add_lval_ref_t, __add_rval_ref_t): New alias templates.\n+\t(add_lvalue_reference, add_rvalue_reference): Use new alias\n+\ttemplates.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__decay_selector): Add partial\n+\tspecializations for array types. Only check for function types\n+\twhen not dealing with an array.\n+\t(decay): Add partial specializations for reference types.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_lvalue_reference_v)\n+\t(is_rvalue_reference_v, is_reference_v, is_const_v)\n+\t(is_volatile_v): Define using partial specializations instead\n+\tof instantiating class templates.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_enum_v, is_class_v, is_union_v)\n+\t(is_empty_v, is_polymoprhic_v, is_abstract_v, is_final_v)\n+\t(is_base_of_v, is_aggregate_v): Use built-in directly instead of\n+\tinstantiating class template.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_scoped_enum): Remove workaround.\n+\n+2022-09-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__unarize): Define.\n+\t(adjacent_view::_Iterator): Befriend adjacent_transform_view.\n+\t(adjacent_transform_view): Define.\n+\t(adjacent_transform_view::_Iterator): Define.\n+\t(adjacent_transform_view::_Sentinel): Define.\n+\t(views::__detail::__can_adjacent_transform_view): Define.\n+\t(views::_AdjacentTransform): Define.\n+\t(views::adjacent_transform): Define.\n+\t(views::pairwise_transform): Define.\n+\t* testsuite/std/ranges/adaptors/adjacent_transform/1.cc: New test.\n+\n+2022-09-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_array_known_bounds): Add partial\n+\tspecialization instead of using std::extent.\n+\t(__is_array_unknown_bounds): Likewise.\n+\t(extent): Add partial specializations to stop recursion after\n+\tthe result is found.\n+\t(is_array_v): Add partial specializations instead of\n+\tinstantiating the class template.\n+\t(rank_v, extent_v): Likewise.\n+\t(is_bounded_array_v, is_unbounded_array_v): Likewise.\n+\t(is_bounded_array, is_unbounded_array): Define in terms of the\n+\tvariable templates.\n+\n 2022-08-31  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_base.h (__advance_fn::operator()): Add"}]}