{"sha": "74ccca380cde5e79e082d39214b306a90ded0344", "node_id": "C_kwDOANBUbNoAKDc0Y2NjYTM4MGNkZTVlNzllMDgyZDM5MjE0YjMwNmE5MGRlZDAzNDQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-10T18:11:43Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-10T18:11:43Z"}, "message": "Fortran: handle initialization of derived type parameter arrays from scalar\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99348\n\tPR fortran/102521\n\t* decl.c (add_init_expr_to_sym): Extend initialization of\n\tparameter arrays from scalars to handle derived types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99348\n\tPR fortran/102521\n\t* gfortran.dg/parameter_array_init_8.f90: New test.", "tree": {"sha": "04ed6ca0e1f5dae3d71bf715a07a13b68dbc826f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ed6ca0e1f5dae3d71bf715a07a13b68dbc826f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74ccca380cde5e79e082d39214b306a90ded0344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ccca380cde5e79e082d39214b306a90ded0344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ccca380cde5e79e082d39214b306a90ded0344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ccca380cde5e79e082d39214b306a90ded0344/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9583b26f3701ea0456405d84f9a898451a2f7452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9583b26f3701ea0456405d84f9a898451a2f7452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9583b26f3701ea0456405d84f9a898451a2f7452"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "d6a22d13451fe784ace3739af9332f811f1b16fc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ccca380cde5e79e082d39214b306a90ded0344/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ccca380cde5e79e082d39214b306a90ded0344/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=74ccca380cde5e79e082d39214b306a90ded0344", "patch": "@@ -2228,12 +2228,16 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t  gfc_expr *array;\n \t  int n;\n \t  if (sym->attr.flavor == FL_PARAMETER\n-\t\t&& init->expr_type == EXPR_CONSTANT\n-\t\t&& spec_size (sym->as, &size)\n-\t\t&& mpz_cmp_si (size, 0) > 0)\n+\t      && gfc_is_constant_expr (init)\n+\t      && (init->expr_type == EXPR_CONSTANT\n+\t\t  || init->expr_type == EXPR_STRUCTURE)\n+\t      && spec_size (sym->as, &size)\n+\t      && mpz_cmp_si (size, 0) > 0)\n \t    {\n \t      array = gfc_get_array_expr (init->ts.type, init->ts.kind,\n \t\t\t\t\t  &init->where);\n+\t      if (init->ts.type == BT_DERIVED)\n+\t\tarray->ts.u.derived = init->ts.u.derived;\n \t      for (n = 0; n < (int)mpz_get_si (size); n++)\n \t\tgfc_constructor_append_expr (&array->value.constructor,\n \t\t\t\t\t     n == 0"}, {"sha": "2e5f7694d3a4df4a193297d4e690027d6c2660b3", "filename": "gcc/testsuite/gfortran.dg/parameter_array_init_8.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ccca380cde5e79e082d39214b306a90ded0344/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ccca380cde5e79e082d39214b306a90ded0344/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_8.f90?ref=74ccca380cde5e79e082d39214b306a90ded0344", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! PR fortran/99348\n+! PR fortran/102521\n+! Check simplifications for initialization of DT parameter arrays\n+\n+program p\n+  type t\n+     integer :: n\n+  end type\n+  type(t), parameter :: a(4)   = t(1)\n+  type(t), parameter :: d(*)   = a\n+  type(t), parameter :: b(2,2) = reshape(d, [2,2])\n+  integer, parameter :: nn     = b(2,2)% n\n+  type u\n+     character(3) :: c\n+  end type\n+  type(u),      parameter :: x(2,3) = u('ab')\n+  type(u),      parameter :: y(*,*) = transpose (x)\n+  character(*), parameter :: c      = y(3,2)% c\n+  integer,      parameter :: lc     = c% len\n+  integer,      parameter :: lyc    = len (y(3,2)% c)\n+! integer,      parameter :: lxc    = x(1,1)% c% len    ! fails (pr101735?)\n+  if (nn /= 1) stop 1\n+  if (lc /= 3 .or. lyc /= 3 .or. c /= \"ab \") stop 2\n+end"}]}