{"sha": "6c4d60f80aae979c4c317e5274babd404429f4cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0ZDYwZjgwYWFlOTc5YzRjMzE3ZTUyNzRiYWJkNDA0NDI5ZjRjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-23T19:55:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-23T19:55:16Z"}, "message": "re PR rtl-optimization/63637 (CSE on x86 asm()-s no longer working due to PR/60663 fix)\n\n\tPR rtl-optimization/63637\n\tPR rtl-optimization/60663\n\t* cse.c (merge_equiv_classes): Set new_elt->cost to MAX_COST\n\tif elt->cost is MAX_COST for ASM_OPERANDS.\n\t(find_sets_in_insn): Fix up comment typo.\n\t(cse_insn): Don't set src_volatile for all non-volatile\n\tASM_OPERANDS in PARALLELs, but just those with multiple outputs\n\tor with \"memory\" clobber.  Set elt->cost to MAX_COST\n\tfor ASM_OPERANDS in PARALLEL.  Set src_elt->cost to MAX_COST\n\tif new_src is ASM_OPERANDS and elt->cost is MAX_COST.\n\n\t* gcc.dg/pr63637-1.c: New test.\n\t* gcc.dg/pr63637-2.c: New test.\n\t* gcc.dg/pr63637-3.c: New test.\n\t* gcc.dg/pr63637-4.c: New test.\n\t* gcc.dg/pr63637-5.c: New test.\n\t* gcc.dg/pr63637-6.c: New test.\n\t* gcc.target/i386/pr63637-1.c: New test.\n\t* gcc.target/i386/pr63637-2.c: New test.\n\t* gcc.target/i386/pr63637-3.c: New test.\n\t* gcc.target/i386/pr63637-4.c: New test.\n\t* gcc.target/i386/pr63637-5.c: New test.\n\t* gcc.target/i386/pr63637-6.c: New test.\n\nFrom-SVN: r220059", "tree": {"sha": "1e1f3b9630c3bd67e06282a119cee3f5d8c8a41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e1f3b9630c3bd67e06282a119cee3f5d8c8a41f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c4d60f80aae979c4c317e5274babd404429f4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4d60f80aae979c4c317e5274babd404429f4cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4d60f80aae979c4c317e5274babd404429f4cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4d60f80aae979c4c317e5274babd404429f4cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2d7aa9a6246ba1454c1ebd04bb25c96ad0ec974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d7aa9a6246ba1454c1ebd04bb25c96ad0ec974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d7aa9a6246ba1454c1ebd04bb25c96ad0ec974"}], "stats": {"total": 250, "additions": 243, "deletions": 7}, "files": [{"sha": "34e8ad1e6512a551edf3d47548b9db549931d39e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -1,3 +1,16 @@\n+2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63637\n+\tPR rtl-optimization/60663\n+\t* cse.c (merge_equiv_classes): Set new_elt->cost to MAX_COST\n+\tif elt->cost is MAX_COST for ASM_OPERANDS.\n+\t(find_sets_in_insn): Fix up comment typo.\n+\t(cse_insn): Don't set src_volatile for all non-volatile\n+\tASM_OPERANDS in PARALLELs, but just those with multiple outputs\n+\tor with \"memory\" clobber.  Set elt->cost to MAX_COST\n+\tfor ASM_OPERANDS in PARALLEL.  Set src_elt->cost to MAX_COST\n+\tif new_src is ASM_OPERANDS and elt->cost is MAX_COST.\n+\n 2015-01-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (sse2_loadld): Set attribute isa to sse2 for"}, {"sha": "7edd901189980a650544a9ac7a8d7130f7b7bc38", "filename": "gcc/cse.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -1807,6 +1807,8 @@ merge_equiv_classes (struct table_elt *class1, struct table_elt *class2)\n \t    }\n \t  new_elt = insert (exp, class1, hash, mode);\n \t  new_elt->in_memory = hash_arg_in_memory;\n+\t  if (GET_CODE (exp) == ASM_OPERANDS && elt->cost == MAX_COST)\n+\t    new_elt->cost = MAX_COST;\n \t}\n     }\n }\n@@ -4275,7 +4277,7 @@ find_sets_in_insn (rtx_insn *insn, struct set **psets)\n     {\n       int i, lim = XVECLEN (x, 0);\n \n-      /* Go over the epressions of the PARALLEL in forward order, to\n+      /* Go over the expressions of the PARALLEL in forward order, to\n \t put them in the same order in the SETS array.  */\n       for (i = 0; i < lim; i++)\n \t{\n@@ -4651,12 +4653,27 @@ cse_insn (rtx_insn *insn)\n \t  && REGNO (dest) >= FIRST_PSEUDO_REGISTER)\n \tsets[i].src_volatile = 1;\n \n-      /* Also do not record result of a non-volatile inline asm with\n-\t more than one result or with clobbers, we do not want CSE to\n-\t break the inline asm apart.  */\n       else if (GET_CODE (src) == ASM_OPERANDS\n \t       && GET_CODE (x) == PARALLEL)\n-\tsets[i].src_volatile = 1;\n+\t{\n+\t  /* Do not record result of a non-volatile inline asm with\n+\t     more than one result.  */\n+\t  if (n_sets > 1)\n+\t    sets[i].src_volatile = 1;\n+\n+\t  int j, lim = XVECLEN (x, 0);\n+\t  for (j = 0; j < lim; j++)\n+\t    {\n+\t      rtx y = XVECEXP (x, 0, j);\n+\t      /* And do not record result of a non-volatile inline asm\n+\t\t with \"memory\" clobber.  */\n+\t      if (GET_CODE (y) == CLOBBER && MEM_P (XEXP (y, 0)))\n+\t\t{\n+\t\t  sets[i].src_volatile = 1;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n \n #if 0\n       /* It is no longer clear why we used to do this, but it doesn't\n@@ -5247,8 +5264,8 @@ cse_insn (rtx_insn *insn)\n \t    ;\n \n \t  /* Look for a substitution that makes a valid insn.  */\n-\t  else if (validate_unshare_change\n-\t\t     (insn, &SET_SRC (sets[i].rtl), trial, 0))\n+\t  else if (validate_unshare_change (insn, &SET_SRC (sets[i].rtl),\n+\t\t\t\t\t    trial, 0))\n \t    {\n \t      rtx new_rtx = canon_reg (SET_SRC (sets[i].rtl), insn);\n \n@@ -5610,6 +5627,12 @@ cse_insn (rtx_insn *insn)\n \t\t  }\n \t\telt = insert (src, classp, sets[i].src_hash, mode);\n \t\telt->in_memory = sets[i].src_in_memory;\n+\t\t/* If inline asm has any clobbers, ensure we only reuse\n+\t\t   existing inline asms and never try to put the ASM_OPERANDS\n+\t\t   into an insn that isn't inline asm.  */\n+\t\tif (GET_CODE (src) == ASM_OPERANDS\n+\t\t    && GET_CODE (x) == PARALLEL)\n+\t\t  elt->cost = MAX_COST;\n \t\tsets[i].src_elt = classp = elt;\n \t      }\n \t    if (sets[i].src_const && sets[i].src_const_elt == 0\n@@ -5923,6 +5946,9 @@ cse_insn (rtx_insn *insn)\n \t\t      }\n \t\t    src_elt = insert (new_src, classp, src_hash, new_mode);\n \t\t    src_elt->in_memory = elt->in_memory;\n+\t\t    if (GET_CODE (new_src) == ASM_OPERANDS\n+\t\t\t&& elt->cost == MAX_COST)\n+\t\t      src_elt->cost = MAX_COST;\n \t\t  }\n \t\telse if (classp && classp != src_elt->first_same_value)\n \t\t  /* Show that two things that we've seen before are"}, {"sha": "39a1741f745b0cf74a04c22e1813e90cfd4e2c78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -1,3 +1,20 @@\n+2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63637\n+\tPR rtl-optimization/60663\n+\t* gcc.dg/pr63637-1.c: New test.\n+\t* gcc.dg/pr63637-2.c: New test.\n+\t* gcc.dg/pr63637-3.c: New test.\n+\t* gcc.dg/pr63637-4.c: New test.\n+\t* gcc.dg/pr63637-5.c: New test.\n+\t* gcc.dg/pr63637-6.c: New test.\n+\t* gcc.target/i386/pr63637-1.c: New test.\n+\t* gcc.target/i386/pr63637-2.c: New test.\n+\t* gcc.target/i386/pr63637-3.c: New test.\n+\t* gcc.target/i386/pr63637-4.c: New test.\n+\t* gcc.target/i386/pr63637-5.c: New test.\n+\t* gcc.target/i386/pr63637-6.c: New test.\n+\n 2015-01-23  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/63439"}, {"sha": "7a716f98c5ffab0b2fb60a2802f713cb9ef4a627", "filename": "gcc/testsuite/gcc.dg/pr63637-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-1.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a));\n+  asm (\"# Magic instruction\" : \"=r\" (b));\n+  asm (\"# Magic instruction\" : \"=r\" (c));\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 1 } } */"}, {"sha": "44e9d7c96ec2db9b2921c40a41a6491d3ddfcd68", "filename": "gcc/testsuite/gcc.dg/pr63637-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-2.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : \"r\" (0));\n+  asm (\"# Magic instruction\" : \"=r\" (b) : \"r\" (0));\n+  asm (\"# Magic instruction\" : \"=r\" (c) : \"r\" (0));\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 1 } } */"}, {"sha": "51a2ff707e422b214d38df8dc4db2963afaef27e", "filename": "gcc/testsuite/gcc.dg/pr63637-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-3.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : : \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : : \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : : \"memory\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "1a914830c1e360a8b62b489df99d13f3828b94bf", "filename": "gcc/testsuite/gcc.dg/pr63637-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-4.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : \"r\" (0) : \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : \"r\" (0) : \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : \"r\" (0) : \"memory\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "fce8593adb4931d601cef3b216f89c42d9f7b9f7", "filename": "gcc/testsuite/gcc.dg/pr63637-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-5.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c, d, e, f;\n+  asm (\"# Magic instruction\" : \"=r\" (a), \"=r\" (d));\n+  asm (\"# Magic instruction\" : \"=r\" (b), \"=r\" (e));\n+  asm (\"# Magic instruction\" : \"=r\" (c), \"=r\" (f));\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "1b997c4304939be8a740b407764db47870cdc4bd", "filename": "gcc/testsuite/gcc.dg/pr63637-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63637-6.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c, d, e, f;\n+  asm (\"# Magic instruction\" : \"=r\" (a), \"=r\" (d) : \"r\" (0));\n+  asm (\"# Magic instruction\" : \"=r\" (b), \"=r\" (e) : \"r\" (0));\n+  asm (\"# Magic instruction\" : \"=r\" (c), \"=r\" (f) : \"r\" (0));\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "9cc9750dd13dd84507f5085fcabe01d1d14b093f", "filename": "gcc/testsuite/gcc.target/i386/pr63637-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-1.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : : \"eax\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : : \"edx\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : : \"ecx\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 1 } } */"}, {"sha": "fc549000e8e1a194d029cd21f349bd453cb27aaa", "filename": "gcc/testsuite/gcc.target/i386/pr63637-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-2.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : \"r\" (0) : \"eax\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : \"r\" (0) : \"edx\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : \"r\" (0) : \"ecx\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 1 } } */"}, {"sha": "4b631ce0f81df0844c554959d885b190faee4edf", "filename": "gcc/testsuite/gcc.target/i386/pr63637-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-3.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : : \"eax\", \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : : \"edx\", \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : : \"ecx\", \"memory\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "7b36690bbcff8539660b18df0febfc4058d2ba15", "filename": "gcc/testsuite/gcc.target/i386/pr63637-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-4.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c;\n+  asm (\"# Magic instruction\" : \"=r\" (a) : \"r\" (0) : \"eax\", \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (b) : \"r\" (0) : \"edx\", \"memory\");\n+  asm (\"# Magic instruction\" : \"=r\" (c) : \"r\" (0) : \"ecx\", \"memory\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "f0c79b76d0a71f036153e93cdaab1d969e9e6f7a", "filename": "gcc/testsuite/gcc.target/i386/pr63637-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-5.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c, d, e, f;\n+  asm (\"# Magic instruction\" : \"=r\" (a), \"=r\" (d) : : \"eax\");\n+  asm (\"# Magic instruction\" : \"=r\" (b), \"=r\" (e) : : \"edx\");\n+  asm (\"# Magic instruction\" : \"=r\" (c), \"=r\" (f) : : \"ecx\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}, {"sha": "4b0b3ba5f4b85fc28d4318a35abbc12404e9bd49", "filename": "gcc/testsuite/gcc.target/i386/pr63637-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4d60f80aae979c4c317e5274babd404429f4cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63637-6.c?ref=6c4d60f80aae979c4c317e5274babd404429f4cf", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/63637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  int a, b, c, d, e, f;\n+  asm (\"# Magic instruction\" : \"=r\" (a), \"=r\" (d) : \"r\" (0) : \"eax\");\n+  asm (\"# Magic instruction\" : \"=r\" (b), \"=r\" (e) : \"r\" (0) : \"edx\");\n+  asm (\"# Magic instruction\" : \"=r\" (c), \"=r\" (f) : \"r\" (0) : \"ecx\");\n+  return a + b + c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"# Magic instruction\" 3 } } */"}]}