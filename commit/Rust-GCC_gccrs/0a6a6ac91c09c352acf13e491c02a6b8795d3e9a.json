{"sha": "0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2YTZhYzkxYzA5YzM1MmFjZjEzZTQ5MWMwMmE2Yjg3OTVkM2U5YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-12-09T20:38:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-12-09T20:38:21Z"}, "message": "Eliminate profile_status macro.\n\ngcc/\n\t* basic-block.h (profile_status): Eliminate macro.\n\n\t* cfgbuild.c (find_many_sub_basic_blocks): Eliminate use of\n\tprofile_status macro in favor of profile_status_for_fn, making\n\tuse of cfun explicit.\n\t* cfghooks.c (account_profile_record): Likewise.\n\t* cfgloopanal.c (single_likely_exit):\n\t* cfgrtl.c (rtl_verify_edges, rtl_account_profile_record): Likewise.\n\t* graphite.c (graphite_finalize):\n\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check,\n\tubsan_expand_si_overflow_neg_check,\n\tubsan_expand_si_overflow_mul_check): Likewise.\n\t* ipa-split.c (consider_split, execute_split_functions):\n\t* loop-unroll.c (decide_peel_simple):\n\t* optabs.c (emit_cmp_and_jump_insn_1):\n\t* predict.c (maybe_hot_edge_p, probably_never_executed,\n\tpredictable_edge_p, probability_reliable_p, gimple_predict_edge,\n\ttree_estimate_probability_driver, estimate_bb_frequencies,\n\tcompute_function_frequency, rebuild_frequencies): Likewise.\n\t* profile.c (compute_branch_probabilities): Likewise.\n\t* tree-cfg.c (gimple_account_profile_record): Likewise.\n\t* tree-inline.c (optimize_inline_calls): Likewise.\n\nFrom-SVN: r205825", "tree": {"sha": "9f0c39edb95562e8ddd411354ba868a780f626cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0c39edb95562e8ddd411354ba868a780f626cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99729d912d29072cc42c361cdc6bed31cb0c0e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99729d912d29072cc42c361cdc6bed31cb0c0e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99729d912d29072cc42c361cdc6bed31cb0c0e6b"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "543a3f081e193e031efddb8d839252685b1b34bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -1,3 +1,28 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (profile_status): Eliminate macro.\n+\n+\t* cfgbuild.c (find_many_sub_basic_blocks): Eliminate use of\n+\tprofile_status macro in favor of profile_status_for_fn, making\n+\tuse of cfun explicit.\n+\t* cfghooks.c (account_profile_record): Likewise.\n+\t* cfgloopanal.c (single_likely_exit):\n+\t* cfgrtl.c (rtl_verify_edges, rtl_account_profile_record): Likewise.\n+\t* graphite.c (graphite_finalize):\n+\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check,\n+\tubsan_expand_si_overflow_neg_check,\n+\tubsan_expand_si_overflow_mul_check): Likewise.\n+\t* ipa-split.c (consider_split, execute_split_functions):\n+\t* loop-unroll.c (decide_peel_simple):\n+\t* optabs.c (emit_cmp_and_jump_insn_1):\n+\t* predict.c (maybe_hot_edge_p, probably_never_executed,\n+\tpredictable_edge_p, probability_reliable_p, gimple_predict_edge,\n+\ttree_estimate_probability_driver, estimate_bb_frequencies,\n+\tcompute_function_frequency, rebuild_frequencies): Likewise.\n+\t* profile.c (compute_branch_probabilities): Likewise.\n+\t* tree-cfg.c (gimple_account_profile_record): Likewise.\n+\t* tree-inline.c (optimize_inline_calls): Likewise.\n+\n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (label_to_block_map): Eliminate macro."}, {"sha": "d000a432522d9210e53a8a2a23d88ca729164793", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -328,7 +328,6 @@ struct GTY(()) control_flow_graph {\n \n /* Defines for textual backward source compatibility.  */\n #define last_basic_block\t(cfun->cfg->x_last_basic_block)\n-#define profile_status\t\t(cfun->cfg->x_profile_status)\n \n /* For iterating over basic blocks.  */\n #define FOR_BB_BETWEEN(BB, FROM, TO, DIR) \\"}, {"sha": "a0c2c66a72e3be6f7b34f6234fe792be2096f791", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -618,7 +618,7 @@ find_many_sub_basic_blocks (sbitmap blocks)\n \n   /* Update branch probabilities.  Expect only (un)conditional jumps\n      to be created with only the forward edges.  */\n-  if (profile_status != PROFILE_ABSENT)\n+  if (profile_status_for_fn (cfun) != PROFILE_ABSENT)\n     FOR_BB_BETWEEN (bb, min, max->next_bb, next_bb)\n       {\n \tedge e;"}, {"sha": "ab1c15fb2c433f9363fab3ef78620c9c1d84763c", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -1411,7 +1411,7 @@ account_profile_record (struct profile_record *record, int after_pass)\n   FOR_ALL_BB (bb)\n    {\n       if (bb != EXIT_BLOCK_PTR_FOR_FN (cfun)\n-\t  && profile_status != PROFILE_ABSENT)\n+\t  && profile_status_for_fn (cfun) != PROFILE_ABSENT)\n \t{\n \t  sum = 0;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n@@ -1426,7 +1426,7 @@ account_profile_record (struct profile_record *record, int after_pass)\n \t    record->num_mismatched_count_out[after_pass]++;\n \t}\n       if (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n-\t  && profile_status != PROFILE_ABSENT)\n+\t  && profile_status_for_fn (cfun) != PROFILE_ABSENT)\n \t{\n \t  sum = 0;\n \t  FOR_EACH_EDGE (e, ei, bb->preds)"}, {"sha": "2260f4b4baa96fe8b80aa8fd3a78c63db7d69fb0", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -470,7 +470,7 @@ single_likely_exit (struct loop *loop)\n \t ruled out by this test.  The static branch prediction algorithm\n          will not assign such a low probability to conditionals for usual\n          reasons.  */\n-      if (profile_status != PROFILE_ABSENT\n+      if (profile_status_for_fn (cfun) != PROFILE_ABSENT\n \t  && ex->probability < 5 && !ex->count)\n \tcontinue;\n       if (!found)"}, {"sha": "34fe4f37846ad7f77fd1fc46078648676c8a65c7", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -2420,7 +2420,7 @@ rtl_verify_edges (void)\n \t  && any_condjump_p (BB_END (bb)))\n \t{\n \t  if (XINT (note, 0) != BRANCH_EDGE (bb)->probability\n-\t      && profile_status != PROFILE_ABSENT)\n+\t      && profile_status_for_fn (cfun) != PROFILE_ABSENT)\n \t    {\n \t      error (\"verify_flow_info: REG_BR_PROB does not match cfg %i %i\",\n \t\t     XINT (note, 0), BRANCH_EDGE (bb)->probability);\n@@ -5011,10 +5011,10 @@ rtl_account_profile_record (basic_block bb, int after_pass,\n       {\n \trecord->size[after_pass]\n \t  += insn_rtx_cost (PATTERN (insn), false);\n-\tif (profile_status == PROFILE_READ)\n+\tif (profile_status_for_fn (cfun) == PROFILE_READ)\n \t  record->time[after_pass]\n \t    += insn_rtx_cost (PATTERN (insn), true) * bb->count;\n-\telse if (profile_status == PROFILE_GUESSED)\n+\telse if (profile_status_for_fn (cfun) == PROFILE_GUESSED)\n \t  record->time[after_pass]\n \t    += insn_rtx_cost (PATTERN (insn), true) * bb->frequency;\n       }"}, {"sha": "a573ea74d1900a89a0d6cb51011b2b265c89d252", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -245,7 +245,7 @@ graphite_finalize (bool need_cfg_cleanup_p)\n     {\n       scev_reset ();\n       cleanup_tree_cfg ();\n-      profile_status = PROFILE_ABSENT;\n+      profile_status_for_fn (cfun) = PROFILE_ABSENT;\n       release_recorded_exits ();\n       tree_estimate_probability ();\n     }"}, {"sha": "8c54d987a626e9b739f71bf4b3f28509f6a5adb6", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -194,7 +194,7 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n       if (maybe_expand_insn (icode, 4, ops))\n \t{\n \t  last = get_last_insn ();\n-\t  if (profile_status != PROFILE_ABSENT\n+\t  if (profile_status_for_fn (cfun) != PROFILE_ABSENT\n \t      && JUMP_P (last)\n \t      && any_condjump_p (last)\n \t      && !find_reg_note (last, REG_BR_PROB, 0))\n@@ -285,7 +285,7 @@ ubsan_expand_si_overflow_neg_check (gimple stmt)\n       if (maybe_expand_insn (icode, 3, ops))\n \t{\n \t  last = get_last_insn ();\n-\t  if (profile_status != PROFILE_ABSENT\n+\t  if (profile_status_for_fn (cfun) != PROFILE_ABSENT\n \t      && JUMP_P (last)\n \t      && any_condjump_p (last)\n \t      && !find_reg_note (last, REG_BR_PROB, 0))\n@@ -364,7 +364,7 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n       if (maybe_expand_insn (icode, 4, ops))\n \t{\n \t  last = get_last_insn ();\n-\t  if (profile_status != PROFILE_ABSENT\n+\t  if (profile_status_for_fn (cfun) != PROFILE_ABSENT\n \t      && JUMP_P (last)\n \t      && any_condjump_p (last)\n \t      && !find_reg_note (last, REG_BR_PROB, 0))"}, {"sha": "f8fa0eee2e5e1d1ceb4088291f099358ede07fbf", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -411,7 +411,7 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n \t a loop, enable splitting since inlining code skipping the loop\n \t is likely noticeable win.  */\n       if (back_edge\n-\t  && profile_status != PROFILE_READ\n+\t  && profile_status_for_fn (cfun) != PROFILE_READ\n \t  && incoming_freq < ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1585,7 +1585,7 @@ execute_split_functions (void)\n \n   /* We enforce splitting after loop headers when profile info is not\n      available.  */\n-  if (profile_status != PROFILE_READ)\n+  if (profile_status_for_fn (cfun) != PROFILE_READ)\n     mark_dfs_back_edges ();\n \n   /* Initialize bitmap to track forbidden calls.  */"}, {"sha": "d1c7b9cdfb35aed632f4f07387857b4e4bdbdb78", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -1371,7 +1371,7 @@ decide_peel_simple (struct loop *loop, int flags)\n      also branch from branch prediction POV (and probably better reason\n      to not unroll/peel).  */\n   if (num_loop_branches (loop) > 1\n-      && profile_status != PROFILE_READ)\n+      && profile_status_for_fn (cfun) != PROFILE_READ)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \";; Not peeling, contains branches\\n\");"}, {"sha": "5172bd41666b1cb876c626bf8d0dac7233f581db", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -4286,7 +4286,7 @@ emit_cmp_and_jump_insn_1 (rtx test, enum machine_mode mode, rtx label, int prob)\n   insn = emit_jump_insn (GEN_FCN (icode) (test, XEXP (test, 0),\n                                           XEXP (test, 1), label));\n   if (prob != -1\n-      && profile_status != PROFILE_ABSENT\n+      && profile_status_for_fn (cfun) != PROFILE_ABSENT\n       && insn\n       && JUMP_P (insn)\n       && any_condjump_p (insn)"}, {"sha": "6bb1b2cfef13a713737ea6491f16f5acca5512a9", "filename": "gcc/predict.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -224,7 +224,7 @@ cgraph_maybe_hot_edge_p (struct cgraph_edge *edge)\n bool\n maybe_hot_edge_p (edge e)\n {\n-  if (profile_status == PROFILE_READ)\n+  if (profile_status_for_fn (cfun) == PROFILE_READ)\n     return maybe_hot_count_p (cfun, e->count);\n   return maybe_hot_frequency_p (cfun, EDGE_FREQUENCY (e));\n }\n@@ -239,7 +239,7 @@ probably_never_executed (struct function *fun,\n                          gcov_type count, int frequency)\n {\n   gcc_checking_assert (fun);\n-  if (profile_status_for_fn (fun) == PROFILE_READ)\n+  if (profile_status_for_fn (cfun) == PROFILE_READ)\n     {\n       int unlikely_count_fraction = PARAM_VALUE (UNLIKELY_BB_COUNT_FRACTION);\n       if (count * unlikely_count_fraction >= profile_info->runs)\n@@ -438,7 +438,7 @@ optimize_loop_nest_for_size_p (struct loop *loop)\n bool\n predictable_edge_p (edge e)\n {\n-  if (profile_status == PROFILE_ABSENT)\n+  if (profile_status_for_fn (cfun) == PROFILE_ABSENT)\n     return false;\n   if ((e->probability\n        <= PARAM_VALUE (PARAM_PREDICTABLE_BRANCH_OUTCOME) * REG_BR_PROB_BASE / 100)\n@@ -539,8 +539,8 @@ gimple_predicted_by_p (const_basic_block bb, enum br_predictor predictor)\n static bool\n probability_reliable_p (int prob)\n {\n-  return (profile_status == PROFILE_READ\n-\t  || (profile_status == PROFILE_GUESSED\n+  return (profile_status_for_fn (cfun) == PROFILE_READ\n+\t  || (profile_status_for_fn (cfun) == PROFILE_GUESSED\n \t      && (prob <= HITRATE (1) || prob >= HITRATE (99))));\n }\n \n@@ -610,7 +610,7 @@ rtl_predict_edge (edge e, enum br_predictor predictor, int probability)\n void\n gimple_predict_edge (edge e, enum br_predictor predictor, int probability)\n {\n-  gcc_assert (profile_status != PROFILE_GUESSED);\n+  gcc_assert (profile_status_for_fn (cfun) != PROFILE_GUESSED);\n   if ((e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun) && EDGE_COUNT (e->src->succs) >\n        1)\n       && flag_guess_branch_prob && optimize)\n@@ -2443,8 +2443,8 @@ tree_estimate_probability_driver (void)\n   loop_optimizer_finalize ();\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     gimple_dump_cfg (dump_file, dump_flags);\n-  if (profile_status == PROFILE_ABSENT)\n-    profile_status = PROFILE_GUESSED;\n+  if (profile_status_for_fn (cfun) == PROFILE_ABSENT)\n+    profile_status_for_fn (cfun) = PROFILE_GUESSED;\n   return 0;\n }\n \f\n@@ -2954,7 +2954,7 @@ estimate_bb_frequencies (bool force)\n   basic_block bb;\n   sreal freq_max;\n \n-  if (force || profile_status != PROFILE_READ || !counts_to_freqs ())\n+  if (force || profile_status_for_fn (cfun) != PROFILE_READ || !counts_to_freqs ())\n     {\n       static int real_values_initialized = 0;\n \n@@ -3030,7 +3030,7 @@ compute_function_frequency (void)\n   if (DECL_STATIC_DESTRUCTOR (current_function_decl))\n     node->only_called_at_exit = true;\n \n-  if (profile_status != PROFILE_READ)\n+  if (profile_status_for_fn (cfun) != PROFILE_READ)\n     {\n       int flags = flags_from_decl_or_type (current_function_decl);\n       if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (current_function_decl))\n@@ -3189,8 +3189,8 @@ rebuild_frequencies (void)\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun), NULL, next_bb)\n     count_max = MAX (bb->count, count_max);\n \n-  if (profile_status == PROFILE_GUESSED\n-      || (profile_status == PROFILE_READ && count_max < REG_BR_PROB_BASE/10))\n+  if (profile_status_for_fn (cfun) == PROFILE_GUESSED\n+      || (profile_status_for_fn (cfun) == PROFILE_READ && count_max < REG_BR_PROB_BASE/10))\n     {\n       loop_optimizer_init (0);\n       add_noreturn_fake_exit_edges ();\n@@ -3200,7 +3200,7 @@ rebuild_frequencies (void)\n       remove_fake_exit_edges ();\n       loop_optimizer_finalize ();\n     }\n-  else if (profile_status == PROFILE_READ)\n+  else if (profile_status_for_fn (cfun) == PROFILE_READ)\n     counts_to_freqs ();\n   else\n     gcc_unreachable ();"}, {"sha": "24c16aa5b955100663f27b1cd2ce0f0a4e75594d", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -797,7 +797,7 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n \t give all abnormals frequency of 0, otherwise distribute the\n \t frequency over abnormals (this is the case of noreturn\n \t calls).  */\n-      else if (profile_status == PROFILE_ABSENT)\n+      else if (profile_status_for_fn (cfun) == PROFILE_ABSENT)\n \t{\n \t  int total = 0;\n \n@@ -825,7 +825,7 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n \t}\n     }\n   counts_to_freqs ();\n-  profile_status = PROFILE_READ;\n+  profile_status_for_fn (cfun) = PROFILE_READ;\n   compute_function_frequency ();\n \n   if (dump_file)"}, {"sha": "57d648755f0fbc0d7161c879337b8409fe6695e8", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -7875,11 +7875,11 @@ gimple_account_profile_record (basic_block bb, int after_pass,\n     {\n       record->size[after_pass]\n \t+= estimate_num_insns (gsi_stmt (i), &eni_size_weights);\n-      if (profile_status == PROFILE_READ)\n+      if (profile_status_for_fn (cfun) == PROFILE_READ)\n \trecord->time[after_pass]\n \t  += estimate_num_insns (gsi_stmt (i),\n \t\t\t\t &eni_time_weights) * bb->count;\n-      else if (profile_status == PROFILE_GUESSED)\n+      else if (profile_status_for_fn (cfun) == PROFILE_GUESSED)\n \trecord->time[after_pass]\n \t  += estimate_num_insns (gsi_stmt (i),\n \t\t\t\t &eni_time_weights) * bb->frequency;"}, {"sha": "fd7eedb8fb0cd4f114152a4547024c924e0d7aa0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6a6ac91c09c352acf13e491c02a6b8795d3e9a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0a6a6ac91c09c352acf13e491c02a6b8795d3e9a", "patch": "@@ -4612,7 +4612,8 @@ optimize_inline_calls (tree fn)\n \t  | TODO_cleanup_cfg\n \t  | (gimple_in_ssa_p (cfun) ? TODO_remove_unused_locals : 0)\n \t  | (gimple_in_ssa_p (cfun) ? TODO_update_address_taken : 0)\n-\t  | (profile_status != PROFILE_ABSENT ? TODO_rebuild_frequencies : 0));\n+\t  | (profile_status_for_fn (cfun) != PROFILE_ABSENT\n+\t     ? TODO_rebuild_frequencies : 0));\n }\n \n /* Passed to walk_tree.  Copies the node pointed to, if appropriate.  */"}]}