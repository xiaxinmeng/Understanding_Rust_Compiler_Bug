{"sha": "0c23e1be874aec1658ae7f95499d289d95530ad6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyM2UxYmU4NzRhZWMxNjU4YWU3Zjk1NDk5ZDI4OWQ5NTUzMGFkNg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2009-12-17T15:37:23Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2009-12-17T15:37:23Z"}, "message": "bpabi-v6m.S (test_div_by_zero): New macro.\n\n\tgcc/\n\t* config/arm/bpabi-v6m.S (test_div_by_zero): New macro.\n\t(aeabi_ldivmod, aeabi_uldivmod): Use above macro.\n\t* config/arm/bpabi.S (test_div_by_zero): New macro.\n\t(aeabi_ldivmod, aeabi_uldivmod): Use above macro.\n\t* config/arm/lib1funcs.asm (ARM_LDIV0): Tail-call int div-by-zero\n\thandler for EABI. Add signed/unsigned argument, pass correct value\n\tto that handler.\n\t(THUMB_LDIV0): Same, for Thumb.\n\t(DIV_FUNC_END): Add signed argument.\n\t(WEAK): New macro (for EABI).\n\t(__udivsi3, __umodsi3): Add unsigned argument to DIV_FUNC_END. For\n\t__udivsi3, add entry point which skips division-by-zero test.\n\t(__divsi3, __modsi3): Add signed argument to DIV_FUNC_END.\n\t(__aeabi_uidivmod, __aeabi_idivmod): Check for division by zero.\n\tCall __udivsi3 or __divsi3 via entry points which skip\n\tdivision-by-zero tests.\n\t(__div0): Rename to __aeabi_idiv0, __aeabi_ldiv0 for EABI, and\n\tdeclare those names weak.\n\nFrom-SVN: r155319", "tree": {"sha": "11aa02e3ca0aaf3665b8f9f816fb7e037bb9c9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11aa02e3ca0aaf3665b8f9f816fb7e037bb9c9de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c23e1be874aec1658ae7f95499d289d95530ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c23e1be874aec1658ae7f95499d289d95530ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c23e1be874aec1658ae7f95499d289d95530ad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c23e1be874aec1658ae7f95499d289d95530ad6/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce7611f2f8a757eede90c92ae1489e510a766864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7611f2f8a757eede90c92ae1489e510a766864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7611f2f8a757eede90c92ae1489e510a766864"}], "stats": {"total": 267, "additions": 247, "deletions": 20}, "files": [{"sha": "22825393e438755e8963656fc2f88b403e2ff9a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c23e1be874aec1658ae7f95499d289d95530ad6", "patch": "@@ -1,3 +1,24 @@\n+2009-12-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/bpabi-v6m.S (test_div_by_zero): New macro.\n+\t(aeabi_ldivmod, aeabi_uldivmod): Use above macro.\n+\t* config/arm/bpabi.S (test_div_by_zero): New macro.\n+\t(aeabi_ldivmod, aeabi_uldivmod): Use above macro.\n+\t* config/arm/lib1funcs.asm (ARM_LDIV0): Tail-call int div-by-zero\n+\thandler for EABI. Add signed/unsigned argument, pass correct value\n+\tto that handler.\n+\t(THUMB_LDIV0): Same, for Thumb.\n+\t(DIV_FUNC_END): Add signed argument.\n+\t(WEAK): New macro (for EABI).\n+\t(__udivsi3, __umodsi3): Add unsigned argument to DIV_FUNC_END. For\n+\t__udivsi3, add entry point which skips division-by-zero test.\n+\t(__divsi3, __modsi3): Add signed argument to DIV_FUNC_END.\n+\t(__aeabi_uidivmod, __aeabi_idivmod): Check for division by zero.\n+\tCall __udivsi3 or __divsi3 via entry points which skip\n+\tdivision-by-zero tests.\n+\t(__div0): Rename to __aeabi_idiv0, __aeabi_ldiv0 for EABI, and\n+\tdeclare those names weak.\n+\n 2009-12-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/42397"}, {"sha": "75d50d967a7894fe8e6cee2a365159e8398df25b", "filename": "gcc/config/arm/bpabi-v6m.S", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S?ref=0c23e1be874aec1658ae7f95499d289d95530ad6", "patch": "@@ -69,9 +69,52 @@ FUNC_START aeabi_ulcmp\n \n #endif /* L_aeabi_ulcmp */\n \n+.macro test_div_by_zero signed\n+\tcmp\tyyh, #0\n+\tbne\t7f\n+\tcmp\tyyl, #0\n+\tbne\t7f\n+\tcmp\txxh, #0\n+\tbne\t2f\n+\tcmp\txxl, #0\n+2:\n+\t.ifc\t\\signed, unsigned\n+\tbeq\t3f\n+\tmov\txxh, #0\n+\tmvn\txxh, xxh\t\t@ 0xffffffff\n+\tmov\txxl, xxh\n+3:\n+\t.else\n+\tbeq\t5f\n+\tblt\t6f\n+\tmov\txxl, #0\n+\tmvn\txxl, xxl\t\t@ 0xffffffff\n+\tlsr\txxh, xxl, #1\t\t@ 0x7fffffff\n+\tb\t5f\n+6:\tmov\txxh, #0x80\n+\tlsl\txxh, xxh, #24\t\t@ 0x80000000\n+\tmov\txxl, #0\n+5:\n+\t.endif\n+\t@ tailcalls are tricky on v6-m.\n+\tpush\t{r0, r1, r2}\n+\tldr\tr0, 1f\n+\tadr\tr1, 1f\n+\tadd\tr0, r1\n+\tstr\tr0, [sp, #8]\n+\t@ We know we are not on armv4t, so pop pc is safe.\n+\tpop\t{r0, r1, pc}\n+\t.align\t2\n+1:\n+\t.word\t__aeabi_ldiv0 - 1b\n+7:\n+.endm\n+\n #ifdef L_aeabi_ldivmod\n \n FUNC_START aeabi_ldivmod\n+\ttest_div_by_zero signed\n+\n \tpush {r0, r1}\n \tmov r0, sp\n \tpush {r0, lr}\n@@ -89,6 +132,8 @@ FUNC_START aeabi_ldivmod\n #ifdef L_aeabi_uldivmod\n \n FUNC_START aeabi_uldivmod\n+\ttest_div_by_zero unsigned\n+\n \tpush {r0, r1}\n \tmov r0, sp\n \tpush {r0, lr}"}, {"sha": "ccc569e982180ea35e61753249856dea450bcdf6", "filename": "gcc/config/arm/bpabi.S", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Fbpabi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Fbpabi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.S?ref=0c23e1be874aec1658ae7f95499d289d95530ad6", "patch": "@@ -64,9 +64,57 @@ ARM_FUNC_START aeabi_ulcmp\n \n #endif /* L_aeabi_ulcmp */\n \n+.macro test_div_by_zero signed\n+/* Tail-call to divide-by-zero handlers which may be overridden by the user,\n+   so unwinding works properly.  */\n+#if defined(__thumb2__)\n+\tcbnz\tyyh, 1f\n+\tcbnz\tyyl, 1f\n+\tcmp\txxh, #0\n+\tdo_it\teq\n+\tcmpeq\txxl, #0\n+\t.ifc \\signed, unsigned\n+\tbeq\t2f\n+\tmov\txxh, #0xffffffff\n+\tmov\txxl, xxh\n+2:\n+\t.else\n+\tdo_it\tlt, t\n+\tmovlt\txxl, #0\n+\tmovlt\txxh, #0x80000000\n+\tdo_it\tgt, t\n+\tmovgt\txxh, #0x7fffffff\n+\tmovgt\txxl, #0xffffffff\n+\t.endif\n+\tb\tSYM (__aeabi_ldiv0) __PLT__\n+1:\n+#else\n+\t/* Note: Thumb-1 code calls via an ARM shim on processors which\n+\t   support ARM mode.  */\n+\tcmp\tyyh, #0\n+\tcmpeq\tyyl, #0\n+\tbne\t2f\n+\tcmp\txxh, #0\n+\tcmpeq\txxl, #0\n+\t.ifc \\signed, unsigned\n+\tmovne\txxh, #0xffffffff\n+\tmovne\txxl, #0xffffffff\n+\t.else\n+\tmovlt\txxh, #0x80000000\n+\tmovlt\txxl, #0\n+\tmovgt\txxh, #0x7fffffff\n+\tmovgt\txxl, #0xffffffff\n+\t.endif\n+\tb\tSYM (__aeabi_ldiv0) __PLT__\n+2:\n+#endif\n+.endm\n+\n #ifdef L_aeabi_ldivmod\n \n ARM_FUNC_START aeabi_ldivmod\n+\ttest_div_by_zero signed\n+\n \tsub sp, sp, #8\n #if defined(__thumb2__)\n \tmov ip, sp\n@@ -85,6 +133,8 @@ ARM_FUNC_START aeabi_ldivmod\n #ifdef L_aeabi_uldivmod\n \n ARM_FUNC_START aeabi_uldivmod\n+\ttest_div_by_zero unsigned\n+\n \tsub sp, sp, #8\n #if defined(__thumb2__)\n \tmov ip, sp"}, {"sha": "1035a3cecad1045725bfb0571872a367f78680a0", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 131, "deletions": 20, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c23e1be874aec1658ae7f95499d289d95530ad6/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=0c23e1be874aec1658ae7f95499d289d95530ad6", "patch": "@@ -265,16 +265,91 @@ LSYM(Lend_fde):\n .endm\n #endif\n \n-.macro ARM_LDIV0 name\n+#ifdef __ARM_EABI__\n+.macro ARM_LDIV0 name signed\n+\tcmp\tr0, #0\n+\t.ifc\t\\signed, unsigned\n+\tmovne\tr0, #0xffffffff\n+\t.else\n+\tmovgt\tr0, #0x7fffffff\n+\tmovlt\tr0, #0x80000000\n+\t.endif\n+\tb\tSYM (__aeabi_idiv0) __PLT__\n+.endm\n+#else\n+.macro ARM_LDIV0 name signed\n \tstr\tlr, [sp, #-8]!\n 98:\tcfi_push 98b - __\\name, 0xe, -0x8, 0x8\n \tbl\tSYM (__div0) __PLT__\n \tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n \tRETLDM\tunwind=98b\n .endm\n+#endif\n \n \n-.macro THUMB_LDIV0 name\n+#ifdef __ARM_EABI__\n+.macro THUMB_LDIV0 name signed\n+#if defined(__ARM_ARCH_6M__)\n+\t.ifc \\signed, unsigned\n+\tcmp\tr0, #0\n+\tbeq\t1f\n+\tmov\tr0, #0\n+\tmvn\tr0, r0\t\t@ 0xffffffff\n+1:\n+\t.else\n+\tcmp\tr0, #0\n+\tbeq\t2f\n+\tblt\t3f\n+\tmov\tr0, #0\n+\tmvn\tr0, r0\n+\tlsr\tr0, r0, #1\t@ 0x7fffffff\n+\tb\t2f\n+3:\tmov\tr0, #0x80\n+\tlsl\tr0, r0, #24\t@ 0x80000000\n+2:\n+\t.endif\n+\tpush\t{r0, r1, r2}\n+\tldr\tr0, 4f\n+\tadr\tr1, 4f\n+\tadd\tr0, r1\n+\tstr\tr0, [sp, #8]\n+\t@ We know we are not on armv4t, so pop pc is safe.\n+\tpop\t{r0, r1, pc}\n+\t.align\t2\n+4:\n+\t.word\t__aeabi_idiv0 - 4b\n+#elif defined(__thumb2__)\n+\t.syntax unified\n+\t.ifc \\signed, unsigned\n+\tcbz\tr0, 1f\n+\tmov\tr0, #0xffffffff\n+1:\n+\t.else\n+\tcmp\tr0, #0\n+\tdo_it\tgt\n+\tmovgt\tr0, #0x7fffffff\n+\tdo_it\tlt\n+\tmovlt\tr0, #0x80000000\n+\t.endif\n+\tb.w\tSYM(__aeabi_idiv0) __PLT__\n+#else\n+\t.align\t2\n+\tbx\tpc\n+\tnop\n+\t.arm\n+\tcmp\tr0, #0\n+\t.ifc\t\\signed, unsigned\n+\tmovne\tr0, #0xffffffff\n+\t.else\n+\tmovgt\tr0, #0x7fffffff\n+\tmovlt\tr0, #0x80000000\n+\t.endif\n+\tb\tSYM(__aeabi_idiv0) __PLT__\n+\t.thumb\n+#endif\n+.endm\n+#else\n+.macro THUMB_LDIV0 name signed\n \tpush\t{ r1, lr }\n 98:\tcfi_push 98b - __\\name, 0xe, -0x4, 0x8\n \tbl\tSYM (__div0)\n@@ -286,18 +361,19 @@ LSYM(Lend_fde):\n \tpop\t{ r1, pc }\n #endif\n .endm\n+#endif\n \n .macro FUNC_END name\n \tSIZE (__\\name)\n .endm\n \n-.macro DIV_FUNC_END name\n+.macro DIV_FUNC_END name signed\n \tcfi_start\t__\\name, LSYM(Lend_div0)\n LSYM(Ldiv0):\n #ifdef __thumb__\n-\tTHUMB_LDIV0 \\name\n+\tTHUMB_LDIV0 \\name \\signed\n #else\n-\tARM_LDIV0 \\name\n+\tARM_LDIV0 \\name \\signed\n #endif\n \tcfi_end\tLSYM(Lend_div0)\n \tFUNC_END \\name\n@@ -422,6 +498,12 @@ SYM (__\\name):\n #define yyl r2\n #endif\t\n \n+#ifdef __ARM_EABI__\n+.macro\tWEAK name\n+\t.weak SYM (__\\name)\n+.endm\n+#endif\n+\n #ifdef __thumb__\n /* Register aliases.  */\n \n@@ -842,6 +924,7 @@ LSYM(Lgot_result):\n \n \tcmp\tdivisor, #0\n \tbeq\tLSYM(Ldiv0)\n+LSYM(udivsi3_skip_div0_test):\n \tmov\tcurbit, #1\n \tmov\tresult, #0\n \t\n@@ -860,6 +943,9 @@ LSYM(Lgot_result):\n \tARM_FUNC_START udivsi3\n \tARM_FUNC_ALIAS aeabi_uidiv udivsi3\n \n+\t/* Note: if called via udivsi3_skip_div0_test, this will unnecessarily\n+\t   check for division-by-zero a second time.  */\n+LSYM(udivsi3_skip_div0_test):\n \tsubs\tr2, r1, #1\n \tdo_it\teq\n \tRETc(eq)\n@@ -886,20 +972,24 @@ LSYM(Lgot_result):\n \n #endif /* ARM version */\n \n-\tDIV_FUNC_END udivsi3\n+\tDIV_FUNC_END udivsi3 unsigned\n \n #if defined(__ARM_ARCH_6M__)\n FUNC_START aeabi_uidivmod\n+\tcmp\tr1, #0\n+\tbeq\tLSYM(Ldiv0)\n \tpush\t{r0, r1, lr}\n-\tbl\tSYM(__udivsi3)\n+\tbl\tLSYM(udivsi3_skip_div0_test)\n \tPOP\t{r1, r2, r3}\n \tmul\tr2, r0\n \tsub\tr1, r1, r2\n \tbx\tr3\n #else\n ARM_FUNC_START aeabi_uidivmod\n+\tcmp\tr1, #0\n+\tbeq\tLSYM(Ldiv0)\n \tstmfd\tsp!, { r0, r1, lr }\n-\tbl\tSYM(__udivsi3)\n+\tbl\tLSYM(udivsi3_skip_div0_test)\n \tldmfd\tsp!, { r1, r2, lr }\n \tmul\tr3, r2, r0\n \tsub\tr1, r1, r3\n@@ -946,7 +1036,7 @@ LSYM(Lover10):\n \n #endif /* ARM version.  */\n \t\n-\tDIV_FUNC_END umodsi3\n+\tDIV_FUNC_END umodsi3 unsigned\n \n #endif /* L_umodsi3 */\n /* ------------------------------------------------------------------------ */\n@@ -959,7 +1049,7 @@ LSYM(Lover10):\n \n \tcmp\tdivisor, #0\n \tbeq\tLSYM(Ldiv0)\n-\t\n+LSYM(divsi3_skip_div0_test):\n \tpush\t{ work }\n \tmov\twork, dividend\n \teor\twork, divisor\t\t@ Save the sign of the result.\n@@ -994,8 +1084,9 @@ LSYM(Lover12):\n \tARM_FUNC_ALIAS aeabi_idiv divsi3\n \n \tcmp\tr1, #0\n-\teor\tip, r0, r1\t\t\t@ save the sign of the result.\n \tbeq\tLSYM(Ldiv0)\n+LSYM(divsi3_skip_div0_test):\n+\teor\tip, r0, r1\t\t\t@ save the sign of the result.\n \tdo_it\tmi\n \trsbmi\tr1, r1, #0\t\t\t@ loops below use unsigned.\n \tsubs\tr2, r1, #1\t\t\t@ division by 1 or -1 ?\n@@ -1037,20 +1128,24 @@ LSYM(Lover12):\n \n #endif /* ARM version */\n \t\n-\tDIV_FUNC_END divsi3\n+\tDIV_FUNC_END divsi3 signed\n \n #if defined(__ARM_ARCH_6M__)\n FUNC_START aeabi_idivmod\n+\tcmp\tr1, #0\n+\tbeq\tLSYM(Ldiv0)\n \tpush\t{r0, r1, lr}\n-\tbl\tSYM(__divsi3)\n+\tbl\tLSYM(divsi3_skip_div0_test)\n \tPOP\t{r1, r2, r3}\n \tmul\tr2, r0\n \tsub\tr1, r1, r2\n \tbx\tr3\n #else\n ARM_FUNC_START aeabi_idivmod\n+\tcmp\tr1, #0\n+\tbeq\tLSYM(Ldiv0)\n \tstmfd\tsp!, { r0, r1, lr }\n-\tbl\tSYM(__divsi3)\n+\tbl\tLSYM(divsi3_skip_div0_test)\n \tldmfd\tsp!, { r1, r2, lr }\n \tmul\tr3, r2, r0\n \tsub\tr1, r1, r3\n@@ -1116,21 +1211,25 @@ LSYM(Lover12):\n \n #endif /* ARM version */\n \t\n-\tDIV_FUNC_END modsi3\n+\tDIV_FUNC_END modsi3 signed\n \n #endif /* L_modsi3 */\n /* ------------------------------------------------------------------------ */\n #ifdef L_dvmd_tls\n \n-\tFUNC_START div0\n-\tFUNC_ALIAS aeabi_idiv0 div0\n-\tFUNC_ALIAS aeabi_ldiv0 div0\n-\n+#ifdef __ARM_EABI__\n+\tWEAK aeabi_idiv0\n+\tWEAK aeabi_ldiv0\n+\tFUNC_START aeabi_idiv0\n+\tFUNC_START aeabi_ldiv0\n \tRET\n-\n \tFUNC_END aeabi_ldiv0\n \tFUNC_END aeabi_idiv0\n+#else\n+\tFUNC_START div0\n+\tRET\n \tFUNC_END div0\n+#endif\n \t\n #endif /* L_divmodsi_tools */\n /* ------------------------------------------------------------------------ */\n@@ -1140,14 +1239,26 @@ LSYM(Lover12):\n /* Constant taken from <asm/signal.h>.  */\n #define SIGFPE\t8\n \n+#ifdef __ARM_EABI__\n+\tWEAK aeabi_idiv0\n+\tWEAK aeabi_ldiv0\n+\tARM_FUNC_START aeabi_idiv0\n+\tARM_FUNC_START aeabi_ldiv0\n+#else\n \tARM_FUNC_START div0\n+#endif\n \n \tdo_push\t{r1, lr}\n \tmov\tr0, #SIGFPE\n \tbl\tSYM(raise) __PLT__\n \tRETLDM\tr1\n \n+#ifdef __ARM_EABI__\n+\tFUNC_END aeabi_ldiv0\n+\tFUNC_END aeabi_idiv0\n+#else\n \tFUNC_END div0\n+#endif\n \t\n #endif /* L_dvmd_lnx */\n #ifdef L_clear_cache"}]}