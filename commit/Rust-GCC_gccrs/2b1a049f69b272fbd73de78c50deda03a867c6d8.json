{"sha": "2b1a049f69b272fbd73de78c50deda03a867c6d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxYTA0OWY2OWIyNzJmYmQ3M2RlNzhjNTBkZWRhMDNhODY3YzZkOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-29T07:28:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-29T07:28:26Z"}, "message": "(make_definition): Pass NULL as 3rd arg to do_define.\n\nFrom-SVN: r2977", "tree": {"sha": "bac77c890fcd77b1852c899ae4758a7871c285ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bac77c890fcd77b1852c899ae4758a7871c285ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b1a049f69b272fbd73de78c50deda03a867c6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1a049f69b272fbd73de78c50deda03a867c6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1a049f69b272fbd73de78c50deda03a867c6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1a049f69b272fbd73de78c50deda03a867c6d8/comments", "author": null, "committer": null, "parents": [{"sha": "0129f367821b40f1738b75f93531e55363adc6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0129f367821b40f1738b75f93531e55363adc6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0129f367821b40f1738b75f93531e55363adc6c6"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "6b2aaacacf1c4149c317b1feab51d0c2b3d3d4a7", "filename": "gcc/cccp.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1a049f69b272fbd73de78c50deda03a867c6d8/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1a049f69b272fbd73de78c50deda03a867c6d8/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=2b1a049f69b272fbd73de78c50deda03a867c6d8", "patch": "@@ -6902,7 +6902,8 @@ macroexpand (hp, op)\n     args = (struct argdata *) alloca ((nargs + 1) * sizeof (struct argdata));\n \n     for (i = 0; i < nargs; i++) {\n-      args[i].raw = args[i].expanded = (U_CHAR *) \"\";\n+      args[i].raw = (U_CHAR *) \"\";\n+      args[i].expanded = 0;\n       args[i].raw_length = args[i].expand_length\n \t= args[i].stringified_length = 0;\n       args[i].free1 = args[i].free2 = 0;\n@@ -6997,9 +6998,22 @@ macroexpand (hp, op)\n \t  xbuf_len += args[ap->argno].stringified_length;\n \telse if (ap->raw_before || ap->raw_after || traditional)\n \t  xbuf_len += args[ap->argno].raw_length;\n-\telse\n-\t  xbuf_len += args[ap->argno].expand_length;\n+\telse {\n+\t  /* We have an ordinary (expanded) occurrence of the arg.\n+\t     So compute its expansion, if we have not already.  */\n+\t  if (args[ap->argno].expanded == 0) {\n+\t    FILE_BUF obuf;\n+\t    obuf = expand_to_temp_buffer (args[ap->argno].raw,\n+\t\t\t\t\t  args[ap->argno].raw + args[ap->argno].raw_length,\n+\t\t\t\t\t  1, 0);\n+\n+\t    args[ap->argno].expanded = obuf.buf;\n+\t    args[ap->argno].expand_length = obuf.length;\n+\t    args[ap->argno].free2 = obuf.buf;\n+\t  }\n \n+\t  xbuf_len += args[ap->argno].expand_length;\n+\t}\n \tif (args[ap->argno].use_count < 10)\n \t  args[ap->argno].use_count++;\n       }\n@@ -7291,18 +7305,9 @@ macarg (argptr, rest_args)\n      All this info goes into *ARGPTR.  */\n \n   if (argptr != 0) {\n-    FILE_BUF obuf;\n     register U_CHAR *buf, *lim;\n     register int totlen;\n \n-    obuf = expand_to_temp_buffer (argptr->raw,\n-\t\t\t\t  argptr->raw + argptr->raw_length,\n-\t\t\t\t  1, 0);\n-\n-    argptr->expanded = obuf.buf;\n-    argptr->expand_length = obuf.length;\n-    argptr->free2 = obuf.buf;\n-\n     buf = argptr->raw;\n     lim = buf + argptr->raw_length;\n \n@@ -8321,7 +8326,8 @@ make_definition (str, op)\n   for (kt = directive_table; kt->type != T_DEFINE; kt++)\n     ;\n \n-  do_define (buf, buf + strlen (buf) , op, kt);\n+  /* Pass NULL instead of OP, since this is a \"predefined\" macro.  */\n+  do_define (buf, buf + strlen (buf), NULL, kt);\n   --indepth;\n }\n "}]}