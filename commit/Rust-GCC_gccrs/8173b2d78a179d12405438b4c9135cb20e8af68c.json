{"sha": "8173b2d78a179d12405438b4c9135cb20e8af68c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3M2IyZDc4YTE3OWQxMjQwNTQzOGI0YzkxMzVjYjIwZThhZjY4Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-13T23:48:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-13T23:48:02Z"}, "message": "stl_iterator.h: Added inline to operators == to >=.\n\n\n2000-06-13  Thomas Holenstein  <thomas@hex.ch>\n\n        * bits/stl_iterator.h: Added inline to operators == to >=.\n\nFrom-SVN: r34534", "tree": {"sha": "681a1ee1806aa28c9707e9dcd8dee6b6a2976f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681a1ee1806aa28c9707e9dcd8dee6b6a2976f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8173b2d78a179d12405438b4c9135cb20e8af68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8173b2d78a179d12405438b4c9135cb20e8af68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8173b2d78a179d12405438b4c9135cb20e8af68c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8173b2d78a179d12405438b4c9135cb20e8af68c/comments", "author": null, "committer": null, "parents": [{"sha": "a032eacb1b30960ed3cbc0fe6de47bd97ec816cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a032eacb1b30960ed3cbc0fe6de47bd97ec816cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a032eacb1b30960ed3cbc0fe6de47bd97ec816cc"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "535a38a9547f4cb7b951fac1ed7430d2bbbddcf5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8173b2d78a179d12405438b4c9135cb20e8af68c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8173b2d78a179d12405438b4c9135cb20e8af68c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8173b2d78a179d12405438b4c9135cb20e8af68c", "patch": "@@ -1,3 +1,25 @@\n+2000-06-13  Anthony Williams  <anthony@anthonyw.cjb.net>\n+\n+\t* testsuite/23_containers/bitset_ctor.cc: Qualify reverse wth std::.\n+\n+\t* testsuite/27_io/filebuf.cc: Changed calls to\n+\tfpos<>._M_position() to implicit calls to operator streamoff().\n+\t* testsuite/27_io/iostream_objects.cc: Removed #include <ciso646>,\n+\tas not needed. Revert, as part of standard.\n+\t* testsuite/27_io/ostream_inserter_arith.cc: Replaced explicit\n+\tcall to numpunct<>._M_init() with overrides of the appropriate\n+\tvirtual functions.\n+\n+\t* testsuite/27_io/stringstream.cc: Removed unnecessary char *\n+\tpointers from test01, so no need to call base(), which isn't\n+\tguaranteed to be implemented as iterators may themselves be pointers\n+\t* testsuite/27_io/stringbuf.cc: Removed unnecessary calls to\n+\t_M_position() - use implicit conversion to streamoff instead\n+\n+2000-06-13  Thomas Holenstein  <thomas@hex.ch>\n+ \n+        * bits/stl_iterator.h: Added inline to operators == to >=.\n+\n 2000-06-13  Brent Verner <brent@rcfile.org>\n \n \t* bits/streambuf.tcc: repaired _S_copy_streambufs()"}, {"sha": "d6d96f32b4ef76c62b2015d8278a97e16b794d4f", "filename": "libstdc++-v3/bits/stl_iterator.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8173b2d78a179d12405438b4c9135cb20e8af68c/libstdc%2B%2B-v3%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8173b2d78a179d12405438b4c9135cb20e8af68c/libstdc%2B%2B-v3%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstl_iterator.h?ref=8173b2d78a179d12405438b4c9135cb20e8af68c", "patch": "@@ -1043,35 +1043,41 @@ class __normal_iterator\n // forward iterator requirements\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-                const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool\n+operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return __lhs.base() == __rhs.base(); }\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-                const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool\n+operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return !(__lhs == __rhs); }\n \n // random access iterator requirements\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-               const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool \n+operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t  const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return __lhs.base() < __rhs.base(); }\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-               const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool\n+operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t  const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return __rhs < __lhs; }\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-                const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool\n+operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return !(__rhs < __lhs); }\n \n template<typename _IteratorL, typename _IteratorR, typename _Container>\n-bool operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-                const __normal_iterator<_IteratorR, _Container>& __rhs)\n+inline bool\n+operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n { return !(__lhs < __rhs); }\n \n template<typename _Iterator, typename _Container>"}]}