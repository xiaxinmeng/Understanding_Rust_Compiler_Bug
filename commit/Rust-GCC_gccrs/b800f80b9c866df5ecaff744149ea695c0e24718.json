{"sha": "b800f80b9c866df5ecaff744149ea695c0e24718", "node_id": "C_kwDOANBUbNoAKGI4MDBmODBiOWM4NjZkZjVlY2FmZjc0NDE0OWVhNjk1YzBlMjQ3MTg", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-27T15:12:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-27T15:12:25Z"}, "message": "don't declare header-defined functions both static and inline, cont.\n\nThis fixes some header-defined functions that are undesirably declared\nstatic and weren't caught by the \"^static inline\" pattern used for the\nmain patch r13-6096-gcb3e0eac262e55.\n\ngcc/ChangeLog:\n\n\t* hash-table.h (gt_pch_nx(hash_table<D>)): Remove static.\n\t* lra-int.h (lra_change_class): Likewise.\n\t* recog.h (which_op_alt): Likewise.\n\t* sel-sched-ir.h (sel_bb_empty_or_nop_p): Declare inline\n\tinstead of static.", "tree": {"sha": "260608cc9ef2efbe3c928c5533adc41d7f724472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/260608cc9ef2efbe3c928c5533adc41d7f724472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b800f80b9c866df5ecaff744149ea695c0e24718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800f80b9c866df5ecaff744149ea695c0e24718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b800f80b9c866df5ecaff744149ea695c0e24718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800f80b9c866df5ecaff744149ea695c0e24718/comments", "author": null, "committer": null, "parents": [{"sha": "dfa85beebfbc2f879d30d3918f634feabc851782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa85beebfbc2f879d30d3918f634feabc851782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa85beebfbc2f879d30d3918f634feabc851782"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c0c6e1cd83d59b8ae54d79e0c41f20294bcb3283", "filename": "gcc/hash-table.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=b800f80b9c866df5ecaff744149ea695c0e24718", "patch": "@@ -1275,7 +1275,7 @@ hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,\n }\n \n template<typename D>\n-static void\n+void\n gt_pch_nx (hash_table<D> *h)\n {\n   h->check_complete_insertion ();"}, {"sha": "a400a0f85e291d961c9fa2f64cc3425472245843", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=b800f80b9c866df5ecaff744149ea695c0e24718", "patch": "@@ -428,7 +428,7 @@ lra_get_regno_hard_regno (int regno)\n \n /* Change class of pseudo REGNO to NEW_CLASS.  Print info about it\n    using TITLE.  Output a new line if NL_P.  */\n-static void inline\n+inline void\n lra_change_class (int regno, enum reg_class new_class,\n \t\t  const char *title, bool nl_p)\n {"}, {"sha": "539a27c3edf415ba221a64dfa4877ed1c5c0dee3", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=b800f80b9c866df5ecaff744149ea695c0e24718", "patch": "@@ -382,7 +382,7 @@ extern const operand_alternative *recog_op_alt;\n    on operand OP of the current instruction alternative (which_alternative).\n    Only valid after calling preprocess_constraints and constrain_operands.  */\n \n-inline static const operand_alternative *\n+inline const operand_alternative *\n which_op_alt ()\n {\n   gcc_checking_assert (IN_RANGE (which_alternative, 0,"}, {"sha": "0e87134c6db1e19ffc555fda5732b0dba7fd3645", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800f80b9c866df5ecaff744149ea695c0e24718/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=b800f80b9c866df5ecaff744149ea695c0e24718", "patch": "@@ -1096,7 +1096,7 @@ get_loop_exit_edges_unique_dests (const class loop *loop)\n   return edges;\n }\n \n-static bool\n+inline bool\n sel_bb_empty_or_nop_p (basic_block bb)\n {\n   insn_t first = sel_bb_head (bb), last;"}]}