{"sha": "2ae30b147b8e3c11058d124616301b3a3e27fdd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlMzBiMTQ3YjhlM2MxMTA1OGQxMjQ2MTYzMDFiM2EzZTI3ZmRkMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-12-16T00:34:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-12-16T00:34:37Z"}, "message": "compiler: fix comments + fieldnames to match libgo source\n    \n    A couple of the comments in the type descriptor code were out of date\n    with respect to the names in libgo/go/runtime/type.go.  Fix up the\n    comments and field names to bring them into sync.\n    \n    Reviewed-on: https://go-review.googlesource.com/34472\n\nFrom-SVN: r243735", "tree": {"sha": "fe18bbf96e0c49f223dd673407cf0f7d377391ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe18bbf96e0c49f223dd673407cf0f7d377391ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae30b147b8e3c11058d124616301b3a3e27fdd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae30b147b8e3c11058d124616301b3a3e27fdd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae30b147b8e3c11058d124616301b3a3e27fdd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae30b147b8e3c11058d124616301b3a3e27fdd2/comments", "author": null, "committer": null, "parents": [{"sha": "6f9ad634bbd30dbe215398e1edf4d4cb3d4a6d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9ad634bbd30dbe215398e1edf4d4cb3d4a6d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9ad634bbd30dbe215398e1edf4d4cb3d4a6d22"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "8a515e61859ce3118a15fdba3b488e55d2f94e1a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae30b147b8e3c11058d124616301b3a3e27fdd2/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae30b147b8e3c11058d124616301b3a3e27fdd2/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2ae30b147b8e3c11058d124616301b3a3e27fdd2", "patch": "@@ -1,4 +1,4 @@\n-ae57b28b3caf1f6670e0f663235f1bf7655db870\n+310862eb11ec0705f21a375c0dd16f46a8d901c1\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e03201e25227862a9b2e698ab5e6cd481d9358bd", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae30b147b8e3c11058d124616301b3a3e27fdd2/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae30b147b8e3c11058d124616301b3a3e27fdd2/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=2ae30b147b8e3c11058d124616301b3a3e27fdd2", "patch": "@@ -1471,8 +1471,8 @@ Type::convert_builtin_named_types(Gogo* gogo)\n }\n \n // Return the type of a type descriptor.  We should really tie this to\n-// runtime.Type rather than copying it.  This must match commonType in\n-// libgo/go/runtime/type.go.\n+// runtime.Type rather than copying it.  This must match the struct \"_type\"\n+// declared in libgo/go/runtime/type.go.\n \n Type*\n Type::make_type_descriptor_type()\n@@ -1519,7 +1519,7 @@ Type::make_type_descriptor_type()\n \n       // Forward declaration for the type descriptor type.\n       Named_object* named_type_descriptor_type =\n-\tNamed_object::make_type_declaration(\"commonType\", NULL, bloc);\n+\tNamed_object::make_type_declaration(\"_type\", NULL, bloc);\n       Type* ft = Type::make_forward_declaration(named_type_descriptor_type);\n       Type* pointer_type_descriptor_type = Type::make_pointer_type(ft);\n \n@@ -1565,7 +1565,7 @@ Type::make_type_descriptor_type()\n \t\t\t\t       \"ptrToThis\",\n \t\t\t\t       pointer_type_descriptor_type);\n \n-      Named_type* named = Type::make_builtin_named_type(\"commonType\",\n+      Named_type* named = Type::make_builtin_named_type(\"_type\",\n \t\t\t\t\t\t\ttype_descriptor_type);\n \n       named_type_descriptor_type->set_type_value(named);\n@@ -3882,7 +3882,7 @@ Function_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   vals->reserve(4);\n \n   Struct_field_list::const_iterator p = fields->begin();\n-  go_assert(p->is_field_name(\"commonType\"));\n+  go_assert(p->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_FUNC,\n \t\t\t\t\t\t    name, NULL, true));\n@@ -4395,7 +4395,7 @@ Pointer_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n       vals->reserve(2);\n \n       Struct_field_list::const_iterator p = fields->begin();\n-      go_assert(p->is_field_name(\"commonType\"));\n+      go_assert(p->is_field_name(\"_type\"));\n       vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t\tRUNTIME_TYPE_KIND_PTR,\n \t\t\t\t\t\t\tname, methods, false));\n@@ -5305,7 +5305,7 @@ Struct_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   go_assert(methods == NULL || name == NULL);\n \n   Struct_field_list::const_iterator ps = fields->begin();\n-  go_assert(ps->is_field_name(\"commonType\"));\n+  go_assert(ps->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_STRUCT,\n \t\t\t\t\t\t    name, methods, true));\n@@ -6719,7 +6719,7 @@ Array_type::array_type_descriptor(Gogo* gogo, Named_type* name)\n   vals->reserve(3);\n \n   Struct_field_list::const_iterator p = fields->begin();\n-  go_assert(p->is_field_name(\"commonType\"));\n+  go_assert(p->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_ARRAY,\n \t\t\t\t\t\t    name, NULL, true));\n@@ -6758,7 +6758,7 @@ Array_type::slice_type_descriptor(Gogo* gogo, Named_type* name)\n   vals->reserve(2);\n \n   Struct_field_list::const_iterator p = fields->begin();\n-  go_assert(p->is_field_name(\"commonType\"));\n+  go_assert(p->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_SLICE,\n \t\t\t\t\t\t    name, NULL, true));\n@@ -7243,7 +7243,7 @@ Map_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   vals->reserve(12);\n \n   Struct_field_list::const_iterator p = fields->begin();\n-  go_assert(p->is_field_name(\"commonType\"));\n+  go_assert(p->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_MAP,\n \t\t\t\t\t\t    name, NULL, true));\n@@ -7681,7 +7681,7 @@ Channel_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   vals->reserve(3);\n \n   Struct_field_list::const_iterator p = fields->begin();\n-  go_assert(p->is_field_name(\"commonType\"));\n+  go_assert(p->is_field_name(\"_type\"));\n   vals->push_back(this->type_descriptor_constructor(gogo,\n \t\t\t\t\t\t    RUNTIME_TYPE_KIND_CHAN,\n \t\t\t\t\t\t    name, NULL, true));\n@@ -8570,7 +8570,7 @@ Interface_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   ivals->reserve(2);\n \n   Struct_field_list::const_iterator pif = ifields->begin();\n-  go_assert(pif->is_field_name(\"commonType\"));\n+  go_assert(pif->is_field_name(\"_type\"));\n   const int rt = RUNTIME_TYPE_KIND_INTERFACE;\n   ivals->push_back(this->type_descriptor_constructor(gogo, rt, name, NULL,\n \t\t\t\t\t\t     true));"}]}