{"sha": "517f954609e08162835cdf711745c23c8fae67f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3Zjk1NDYwOWUwODE2MjgzNWNkZjcxMTc0NWMyM2M4ZmFlNjdmNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-14T17:36:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-14T17:36:43Z"}, "message": "entered into RCS\n\nFrom-SVN: r4456", "tree": {"sha": "2c7d8d3e3c7327a235a5d804651adab7b25fd5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c7d8d3e3c7327a235a5d804651adab7b25fd5ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517f954609e08162835cdf711745c23c8fae67f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517f954609e08162835cdf711745c23c8fae67f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517f954609e08162835cdf711745c23c8fae67f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517f954609e08162835cdf711745c23c8fae67f6/comments", "author": null, "committer": null, "parents": [{"sha": "bae1218656da94a930c61d8b4bafefc23361f844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae1218656da94a930c61d8b4bafefc23361f844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae1218656da94a930c61d8b4bafefc23361f844"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "d6b0d95b0e12cb2769cfbbf9980776d89b1420c6", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517f954609e08162835cdf711745c23c8fae67f6/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517f954609e08162835cdf711745c23c8fae67f6/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=517f954609e08162835cdf711745c23c8fae67f6", "patch": "@@ -77,3 +77,225 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\f\n+/* ??? This stuff is copied from config/svr3.h.  In the future,\n+   this file should be rewritten to include config/svr3.h\n+   and override what isn't right.  */\n+\n+/* Support const sections and the ctors and dtors sections for g++.\n+   Note that there appears to be two different ways to support const\n+   sections at the moment.  You can either #define the symbol\n+   READONLY_DATA_SECTION (giving it some code which switches to the\n+   readonly data section) or else you can #define the symbols\n+   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n+   SELECT_RTX_SECTION.  We do both here just to be on the safe side.\n+   However, use of the const section is turned off by default\n+   unless the specific tm.h file turns it on by defining\n+   USE_CONST_SECTION as 1.  */\n+\n+/* Define a few machine-specific details of the implementation of\n+   constructors.\n+\n+   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n+   and CTOR_LIST_END to contribute to the .init section an instruction to\n+   push a word containing 0 (or some equivalent of that).\n+\n+   Define ASM_OUTPUT_CONSTRUCTOR to push the address of the constructor.  */\n+\n+#define USE_CONST_SECTION\t0\n+\n+#define INIT_SECTION_ASM_OP     \".section\\t.init\"\n+#define FINI_SECTION_ASM_OP     \".section .fini,\\\"x\\\"\"\n+#define CONST_SECTION_ASM_OP\t\".section\\t.rodata, \\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP\tINIT_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n+\n+/* CTOR_LIST_BEGIN and CTOR_LIST_END are machine-dependent\n+   because they push on the stack.  */\n+\n+#ifdef STACK_GROWS_DOWNWARD\n+\n+/* Constructor list on stack is in reverse order.  Go to the end of the\n+   list and go backwards to call constructors in the right order.  */\n+#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  func_ptr *p, *beg = alloca (0);\t\t\t\t\\\n+  for (p = beg; *p; p++)\t\t\t\t\t\\\n+    ;\t\t\t\t\t\t\t\t\\\n+  while (p != beg)\t\t\t\t\t\t\\\n+    (*--p) ();\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+#else\n+\n+/* Constructor list on stack is in correct order.  Just call them.  */\n+#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  func_ptr *p, *beg = alloca (0);\t\t\t\t\\\n+  for (p = beg; *p; )\t\t\t\t\t\t\\\n+    (*p++) ();\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+#endif /* STACK_GROWS_DOWNWARD */\n+\n+/* Add extra sections .init and .fini, in addition to .bss from att386.h. */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_const, in_bss, in_init, in_fini\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n+  BSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  FINI_SECTION_FUNCTION\n+\n+#define BSS_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+bss_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_bss)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t%s\\n\", BSS_SECTION_ASM_OP);\t\\\n+      in_section = in_bss;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+init_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_init)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t%s\\n\", INIT_SECTION_ASM_OP);\t\\\n+      in_section = in_init;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FINI_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+fini_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_fini)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t%s\\n\", FINI_SECTION_ASM_OP);\t\\\n+      in_section = in_fini;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define READONLY_DATA_SECTION() const_section ()\n+\n+#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+const_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern void text_section();\t\t\t\t\t\t\\\n+  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n+    text_section();\t\t\t\t\t\t\t\\\n+  else if (in_section != in_const)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n+      in_section = in_const;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* The ctors and dtors sections are not normally put into use \n+   by EXTRA_SECTIONS and EXTRA_SECTION_FUNCTIONS as defined in svr3.h,\n+   but it can't hurt to define these macros for whatever systems use them.  */\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* This is machine-dependent\n+   because it needs to push something on the stack.  */\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fini_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"%s\\t \", ASM_LONG);\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement or statements to switch to the appropriate\n+   section for output of DECL.  DECL is either a `VAR_DECL' node\n+   or a constant of some sort.  RELOC indicates whether forming\n+   the initial value of DECL requires link-time relocations.  */\n+\n+#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! flag_writable_strings)\t\t\t\t\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((0 && RELOC)\t/* should be (flag_pic && RELOC) */\t\t\\\n+\t  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL))\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    const_section ();\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C statement or statements to switch to the appropriate\n+   section for output of RTX in mode MODE.  RTX is some kind\n+   of constant in RTL.  The argument MODE is redundant except\n+   in the case of a `const_int' rtx.  Currently, these always\n+   go into the const section.  */\n+\n+#define SELECT_RTX_SECTION(MODE,RTX) const_section()\n+\f\n+/* This is copied from i386/sysv3.h.  */\n+\n+/* Define a few machine-specific details of the implementation of\n+   constructors.\n+\n+   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n+   and CTOR_LIST_END to contribute to the .init section an instruction to\n+   push a word containing 0 (or some equivalent of that).\n+\n+   ASM_OUTPUT_CONSTRUCTOR should be defined to push the address of the\n+   constructor.  */\n+\n+#undef INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP     \".section .init,\\\"x\\\"\"\n+\n+#define CTOR_LIST_BEGIN\t\t\t\t\\\n+  asm (INIT_SECTION_ASM_OP);\t\t\t\\\n+  asm (\"pushl $0\")\n+#define CTOR_LIST_END CTOR_LIST_BEGIN\n+\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n+  do {\t\t\t\t\t\t\\\n+    init_section ();\t\t\t\t\\\n+    fprintf (FILE, \"\\tpushl $\");\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\\\n+  } while (0)"}]}