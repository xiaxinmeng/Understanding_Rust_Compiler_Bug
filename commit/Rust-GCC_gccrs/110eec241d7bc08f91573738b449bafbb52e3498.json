{"sha": "110eec241d7bc08f91573738b449bafbb52e3498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwZWVjMjQxZDdiYzA4ZjkxNTczNzM4YjQ0OWJhZmJiNTJlMzQ5OA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-12-22T11:37:03Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-12-22T11:37:03Z"}, "message": "re PR fortran/18990 (ICE in gfc_get_derived_type, at fortran/trans-types.c)\n\nfortran/\n\tPR fortran/18990\n\t* gfortran.h (gfc_charlen): Add resolved field.\n\t* expr.c (gfc_specification_expr): Accept NULL argument.\n\t* resolve.c (gfc_resolve_charlen, gfc_resolve_derived): New.\n\t(gfc_resolve_symbol): Resolve derived type definitions.  Use\n\tresolve_charlen to resolve character lengths.\ntestsuite/\n\tPR fortran/18990\n\t* gfortran.dg/der_charlen_1.f90: New.\n\nFrom-SVN: r108946", "tree": {"sha": "f8fc1a9545c40e8286e72097ca770b0898d568cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8fc1a9545c40e8286e72097ca770b0898d568cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/110eec241d7bc08f91573738b449bafbb52e3498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110eec241d7bc08f91573738b449bafbb52e3498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110eec241d7bc08f91573738b449bafbb52e3498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110eec241d7bc08f91573738b449bafbb52e3498/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e85e0617394f491e74fd1d8c5f121fa5527487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e85e0617394f491e74fd1d8c5f121fa5527487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e85e0617394f491e74fd1d8c5f121fa5527487"}], "stats": {"total": 110, "additions": 100, "deletions": 10}, "files": [{"sha": "fa5bb4f1d2782424b9f86f90d06d6ac2673bb0f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -1,3 +1,12 @@\n+2005-12-22  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/18990\n+\t* gfortran.h (gfc_charlen): Add resolved field.\n+\t* expr.c (gfc_specification_expr): Accept NULL argument.\n+\t* resolve.c (gfc_resolve_charlen, gfc_resolve_derived): New.\n+\t(gfc_resolve_symbol): Resolve derived type definitions.  Use\n+\tresolve_charlen to resolve character lengths.\n+\n 2005-12-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/20889"}, {"sha": "c55b142d0382a4ce43d741ab1ed0769a7dbc0c99", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -1768,6 +1768,8 @@ check_restricted (gfc_expr * e)\n try\n gfc_specification_expr (gfc_expr * e)\n {\n+  if (e == NULL)\n+    return SUCCESS;\n \n   if (e->ts.type != BT_INTEGER)\n     {"}, {"sha": "e160e00d09f234a0d5d987e61b254a8f70e422b4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -571,6 +571,8 @@ typedef struct gfc_charlen\n   struct gfc_expr *length;\n   struct gfc_charlen *next;\n   tree backend_decl;\n+\n+  int resolved;\n }\n gfc_charlen;\n "}, {"sha": "5f5ce5694e352064589993b5a96ab4f6455e752a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -4328,6 +4328,60 @@ resolve_values (gfc_symbol * sym)\n }\n \n \n+/* Resolve a charlen structure.  */\n+\n+static try\n+resolve_charlen (gfc_charlen *cl)\n+{\n+  if (cl->resolved)\n+    return SUCCESS;\n+\n+  cl->resolved = 1;\n+\n+  if (gfc_resolve_expr (cl->length) == FAILURE)\n+    return FAILURE;\n+\n+  if (gfc_simplify_expr (cl->length, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (gfc_specification_expr (cl->length) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+/* Resolve the components of a derived type.  */\n+\n+static try\n+resolve_derived (gfc_symbol *sym)\n+{\n+  gfc_component *c;\n+\n+  for (c = sym->components; c != NULL; c = c->next)\n+    {\n+      if (c->ts.type == BT_CHARACTER)\n+\t{\n+         if (resolve_charlen (c->ts.cl) == FAILURE)\n+\t   return FAILURE;\n+\t \n+\t if (c->ts.cl->length == NULL\n+\t     || !gfc_is_constant_expr (c->ts.cl->length))\n+\t   {\n+\t     gfc_error (\"Character length of component '%s' needs to \"\n+\t\t\t\"be a constant specification expression at %L.\",\n+\t\t\tc->name,\n+\t\t\tc->ts.cl->length ? &c->ts.cl->length->where : &c->loc);\n+\t     return FAILURE;\n+\t   }\n+\t}\n+\n+      /* TODO: Anything else that should be done here?  */\n+    }\n+\n+  return SUCCESS;\n+}\n+\n /* Do anything necessary to resolve a symbol.  Right now, we just\n    assume that an otherwise unknown symbol is a variable.  This sort\n    of thing commonly happens for symbols in module.  */\n@@ -4380,6 +4434,9 @@ resolve_symbol (gfc_symbol * sym)\n \t}\n     }\n \n+  if (sym->attr.flavor == FL_DERIVED && resolve_derived (sym) == FAILURE)\n+    return;\n+\n   /* Symbols that are module procedures with results (functions) have\n      the types and array specification copied for type checking in\n      procedures that call them, as well as for saving to a module\n@@ -5588,16 +5645,7 @@ gfc_resolve (gfc_namespace * ns)\n   gfc_check_interfaces (ns);\n \n   for (cl = ns->cl_list; cl; cl = cl->next)\n-    {\n-      if (cl->length == NULL || gfc_resolve_expr (cl->length) == FAILURE)\n-\tcontinue;\n-\n-      if (gfc_simplify_expr (cl->length, 0) == FAILURE)\n-\tcontinue;\n-\n-      if (gfc_specification_expr (cl->length) == FAILURE)\n-\tcontinue;\n-    }\n+    resolve_charlen (cl);\n \n   gfc_traverse_ns (ns, resolve_values);\n "}, {"sha": "4734f8150bdeaff676e709283b6dd5225a3d7e1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -1,3 +1,8 @@\n+2005-12-22  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/18990\n+\t* gfortran.dg/der_charlen_1.f90: New.\n+\n 2005-12-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/20889"}, {"sha": "9f394c73f25a3e263e0107bb6403818e6e09bfbc", "filename": "gcc/testsuite/gfortran.dg/der_charlen_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_charlen_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110eec241d7bc08f91573738b449bafbb52e3498/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_charlen_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_charlen_1.f90?ref=110eec241d7bc08f91573738b449bafbb52e3498", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! PR 18990\n+! we used to ICE on these examples\n+module core\n+  type, public  :: T\n+     character(len=I)  :: str ! { dg-error \"needs to be a constant specification expression\" }\n+  end type T\n+  private\n+CONTAINS\n+  subroutine FOO(X)\n+    type(T), intent(in)          :: X\n+  end subroutine\n+end module core\n+\n+module another_core\n+  type :: T\n+     character(len=*)  :: s ! { dg-error \"needs to be a constant specification expr\" }\n+  end type T\n+  private\n+CONTAINS\n+  subroutine FOO(X)\n+    type(T), intent(in)          :: X\n+  end subroutine\n+end module another_core"}]}