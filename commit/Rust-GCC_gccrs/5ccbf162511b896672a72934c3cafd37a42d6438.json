{"sha": "5ccbf162511b896672a72934c3cafd37a42d6438", "node_id": "C_kwDOANBUbNoAKDVjY2JmMTYyNTExYjg5NjY3MmE3MjkzNGMzY2FmZDM3YTQyZDY0Mzg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-15T02:07:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-15T12:44:42Z"}, "message": "c++: coerce_template_template_parms interface tweak\n\nThis should have no semantic effect, but is a prerequisite for the PR108179\nfix to follow.\n\n\tPR c++/108179\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc\t(coerce_template_template_parms): Take the arg and parm\n\ttemplates directly.\n\t(coerce_template_template_parm): Adjust.\n\t(template_template_parm_bindings_ok_p): Adjust.\n\t(convert_template_argument): Adjust.", "tree": {"sha": "110803bc400b32d51f8bda5320af4a63ef396ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110803bc400b32d51f8bda5320af4a63ef396ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ccbf162511b896672a72934c3cafd37a42d6438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccbf162511b896672a72934c3cafd37a42d6438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ccbf162511b896672a72934c3cafd37a42d6438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccbf162511b896672a72934c3cafd37a42d6438/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc541efc340535d212cd685176bd9592905de8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc541efc340535d212cd685176bd9592905de8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc541efc340535d212cd685176bd9592905de8a"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "d75c4395c8a8239c67c1b58e7d78942004b4e94f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccbf162511b896672a72934c3cafd37a42d6438/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccbf162511b896672a72934c3cafd37a42d6438/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=5ccbf162511b896672a72934c3cafd37a42d6438", "patch": "@@ -7798,11 +7798,8 @@ coerce_template_template_parm (tree parm,\n \t template <template <template <class> class> class TT>\n \t class C;  */\n       {\n-\ttree parmparm = DECL_TEMPLATE_PARMS (parm);\n-\ttree argparm = DECL_TEMPLATE_PARMS (arg);\n-\n \tif (!coerce_template_template_parms\n-\t    (parmparm, argparm, complain, in_decl, outer_args))\n+\t    (parm, arg, complain, in_decl, outer_args))\n \t  return 0;\n       }\n       /* Fall through.  */\n@@ -8050,21 +8047,19 @@ unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree& arg,\n   return 0;\n }\n \n-/* Return 1 if PARM_PARMS and ARG_PARMS matches using rule for\n-   template template parameters.  Both PARM_PARMS and ARG_PARMS are\n-   vectors of TREE_LIST nodes containing TYPE_DECL, TEMPLATE_DECL\n-   or PARM_DECL.\n+/* Return 1 if PARM_TMPL and ARG_TMPL match using rule for\n+   template template parameters.\n \n    Consider the example:\n      template <class T> class A;\n      template<template <class U> class TT> class B;\n \n-   For B<A>, PARM_PARMS are the parameters to TT, while ARG_PARMS are\n-   the parameters to A, and OUTER_ARGS contains A.  */\n+   For B<A>, PARM_TMPL is TT, while ARG_TMPL is A,\n+   and OUTER_ARGS contains A.  */\n \n static int\n-coerce_template_template_parms (tree parm_parms_full,\n-\t\t\t\ttree arg_parms_full,\n+coerce_template_template_parms (tree parm_tmpl,\n+\t\t\t\ttree arg_tmpl,\n \t\t\t\ttsubst_flags_t complain,\n \t\t\t\ttree in_decl,\n \t\t\t\ttree outer_args)\n@@ -8073,7 +8068,8 @@ coerce_template_template_parms (tree parm_parms_full,\n   tree parm, arg;\n   int variadic_p = 0;\n \n-  tree parm_parms = INNERMOST_TEMPLATE_PARMS (parm_parms_full);\n+  tree parm_parms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (parm_tmpl));\n+  tree arg_parms_full = DECL_TEMPLATE_PARMS (arg_tmpl);\n   tree arg_parms = INNERMOST_TEMPLATE_PARMS (arg_parms_full);\n \n   gcc_assert (TREE_CODE (parm_parms) == TREE_VEC);\n@@ -8254,8 +8250,6 @@ template_template_parm_bindings_ok_p (tree tparms, tree targs)\n \n \t  for (idx = 0; idx < len; ++idx)\n \t    {\n-\t      tree targ_parms = NULL_TREE;\n-\n \t      if (packed_args)\n \t\t/* Extract the next argument from the argument\n \t\t   pack.  */\n@@ -8267,18 +8261,16 @@ template_template_parm_bindings_ok_p (tree tparms, tree targs)\n \n \t      /* Extract the template parameters from the template\n \t\t argument.  */\n-\t      if (TREE_CODE (targ) == TEMPLATE_DECL)\n-\t\ttarg_parms = DECL_TEMPLATE_PARMS (targ);\n-\t      else if (TREE_CODE (targ) == TEMPLATE_TEMPLATE_PARM)\n-\t\ttarg_parms = DECL_TEMPLATE_PARMS (TYPE_NAME (targ));\n+\t      if (TREE_CODE (targ) == TEMPLATE_TEMPLATE_PARM)\n+\t\ttarg = TYPE_NAME (targ);\n \n \t      /* Verify that we can coerce the template template\n \t\t parameters from the template argument to the template\n \t\t parameter.  This requires an exact match.  */\n-\t      if (targ_parms\n+\t      if (TREE_CODE (targ) == TEMPLATE_DECL\n \t\t  && !coerce_template_template_parms\n-\t\t       (DECL_TEMPLATE_PARMS (tparm),\n-\t\t\ttarg_parms,\n+\t\t       (tparm,\n+\t\t\ttarg,\n \t\t\ttf_none,\n \t\t\ttparm,\n \t\t\ttargs))\n@@ -8571,15 +8563,11 @@ convert_template_argument (tree parm,\n \t    val = orig_arg;\n \t  else\n \t    {\n-\t      tree parmparm = DECL_TEMPLATE_PARMS (parm);\n-\t      tree argparm;\n-\n \t      /* Strip alias templates that are equivalent to another\n \t\t template.  */\n \t      arg = get_underlying_template (arg);\n-\t      argparm = DECL_TEMPLATE_PARMS (arg);\n \n-\t      if (coerce_template_template_parms (parmparm, argparm,\n+\t      if (coerce_template_template_parms (parm, arg,\n \t\t\t\t\t\t  complain, in_decl,\n \t\t\t\t\t\t  args))\n \t\t{"}]}