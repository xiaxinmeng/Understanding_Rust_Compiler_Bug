{"sha": "cdc23b1b205ad460a71983b41c67a6f34f18b368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjMjNiMWIyMDVhZDQ2MGE3MTk4M2I0MWM2N2E2ZjM0ZjE4YjM2OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-01-03T11:11:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-01-03T11:11:31Z"}, "message": "Core DR 1442 PR c++/59165\n\n/cp\n2014-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tCore DR 1442\n\tPR c++/59165\n\t* parser.c (cp_parser_perform_range_for_lookup): Don't pass true\n\tas include_std to perform_koenig_lookup.\n\t(cp_parser_postfix_expression): Adjust.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (perform_koenig_lookup): Remove bool parameter.\n\t(omp_reduction_lookup): Adjust.\n\t* name-lookup.c (lookup_arg_dependent_1): Remove bool parameter.\n\t(lookup_arg_dependent): Likewise.\n\t(lookup_function_nonclass): Adjust.\n\t* name-lookup.h: Adjust declaration.\n\t* cp-tree.h: Likewise.\n\n/testsuite\n2014-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tCore DR 1442\n\tPR c++/59165\n\t* g++.dg/cpp0x/range-for28.C: New.\n\t* g++.dg/cpp0x/range-for3.C: Update.\n\nFrom-SVN: r206313", "tree": {"sha": "e503a93e70f05996ba48140b302a914cfbfc7f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e503a93e70f05996ba48140b302a914cfbfc7f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc23b1b205ad460a71983b41c67a6f34f18b368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc23b1b205ad460a71983b41c67a6f34f18b368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc23b1b205ad460a71983b41c67a6f34f18b368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc23b1b205ad460a71983b41c67a6f34f18b368/comments", "author": null, "committer": null, "parents": [{"sha": "039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "e89bc50baa8139d40dffd26ec744025118a53537", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -1,3 +1,19 @@\n+2014-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tCore DR 1442\n+\tPR c++/59165\n+\t* parser.c (cp_parser_perform_range_for_lookup): Don't pass true\n+\tas include_std to perform_koenig_lookup.\n+\t(cp_parser_postfix_expression): Adjust.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (perform_koenig_lookup): Remove bool parameter.\n+\t(omp_reduction_lookup): Adjust.\n+\t* name-lookup.c (lookup_arg_dependent_1): Remove bool parameter.\n+\t(lookup_arg_dependent): Likewise.\n+\t(lookup_function_nonclass): Adjust.\n+\t* name-lookup.h: Adjust declaration.\n+\t* cp-tree.h: Likewise.\n+\n 2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/59087"}, {"sha": "bdae500d374a5a4d779e0a92a6b1cf1c0d812baa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -5744,7 +5744,7 @@ extern tree finish_stmt_expr_expr\t\t(tree, tree);\n extern tree finish_stmt_expr\t\t\t(tree, bool);\n extern tree stmt_expr_value_expr\t\t(tree);\n bool empty_expr_stmt_p\t\t\t\t(tree);\n-extern tree perform_koenig_lookup\t\t(tree, vec<tree, va_gc> *, bool,\n+extern tree perform_koenig_lookup\t\t(tree, vec<tree, va_gc> *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_call_expr\t\t\t(tree, vec<tree, va_gc> **, bool,\n \t\t\t\t\t\t bool, tsubst_flags_t);"}, {"sha": "28f998d7fd7eed7e38b8e82daf3fe8d8e3c79a65", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -4879,7 +4879,7 @@ lookup_function_nonclass (tree name, vec<tree, va_gc> *args, bool block_p)\n   return\n     lookup_arg_dependent (name,\n \t\t\t  lookup_name_real (name, 0, 1, block_p, 0, 0),\n-\t\t\t  args, false);\n+\t\t\t  args);\n }\n \n tree\n@@ -5578,8 +5578,7 @@ arg_assoc (struct arg_lookup *k, tree n)\n    are the functions found in normal lookup.  */\n \n static tree\n-lookup_arg_dependent_1 (tree name, tree fns, vec<tree, va_gc> *args,\n-\t\t\tbool include_std)\n+lookup_arg_dependent_1 (tree name, tree fns, vec<tree, va_gc> *args)\n {\n   struct arg_lookup k;\n \n@@ -5617,8 +5616,6 @@ lookup_arg_dependent_1 (tree name, tree fns, vec<tree, va_gc> *args,\n   else\n     k.fn_set = NULL;\n \n-  if (include_std)\n-    arg_assoc_namespace (&k, std_node);\n   arg_assoc_args_vec (&k, args);\n \n   fns = k.functions;\n@@ -5643,13 +5640,12 @@ lookup_arg_dependent_1 (tree name, tree fns, vec<tree, va_gc> *args,\n /* Wrapper for lookup_arg_dependent_1.  */\n \n tree\n-lookup_arg_dependent (tree name, tree fns, vec<tree, va_gc> *args,\n-                      bool include_std)\n+lookup_arg_dependent (tree name, tree fns, vec<tree, va_gc> *args)\n {\n   tree ret;\n   bool subtime;\n   subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  ret = lookup_arg_dependent_1 (name, fns, args, include_std);\n+  ret = lookup_arg_dependent_1 (name, fns, args);\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n   return ret;\n }"}, {"sha": "a63442f85c2064c1fc4f034efc8a6b32ee4a7b65", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -338,7 +338,7 @@ extern void do_toplevel_using_decl (tree, tree, tree);\n extern void do_local_using_decl (tree, tree, tree);\n extern tree do_class_using_decl (tree, tree);\n extern void do_using_directive (tree);\n-extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *, bool);\n+extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern bool is_associated_namespace (tree, tree);\n extern void parse_using_directive (tree, tree);\n extern tree innermost_non_namespace_value (tree);"}, {"sha": "c99c1fcb64547e98dbb51df0571169e6b7e1f8a8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -6076,7 +6076,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\tif (!any_type_dependent_arguments_p (args))\n \t\t\t  postfix_expression\n \t\t\t    = perform_koenig_lookup (postfix_expression, args,\n-\t\t\t\t\t\t     /*include_std=*/false,\n \t\t\t\t\t\t     complain);\n \t\t      }\n \t\t    else\n@@ -6102,7 +6101,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\tif (!any_type_dependent_arguments_p (args))\n \t\t\t  postfix_expression\n \t\t\t    = perform_koenig_lookup (postfix_expression, args,\n-\t\t\t\t\t\t     /*include_std=*/false,\n \t\t\t\t\t\t     complain);\n \t\t      }\n \t\t  }\n@@ -10356,12 +10354,10 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t  vec_safe_push (vec, range);\n \n \t  member_begin = perform_koenig_lookup (id_begin, vec,\n-\t\t\t\t\t\t/*include_std=*/true,\n \t\t\t\t\t\ttf_warning_or_error);\n \t  *begin = finish_call_expr (member_begin, &vec, false, true,\n \t\t\t\t     tf_warning_or_error);\n \t  member_end = perform_koenig_lookup (id_end, vec,\n-\t\t\t\t\t      /*include_std=*/true,\n \t\t\t\t\t      tf_warning_or_error);\n \t  *end = finish_call_expr (member_end, &vec, false, true,\n \t\t\t\t   tf_warning_or_error);"}, {"sha": "3b8f83a596c0b7a91bfda141d031b2e91e180e57", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -14490,8 +14490,7 @@ tsubst_copy_and_build (tree t,\n \t       into a non-dependent call.  */\n \t    && type_dependent_expression_p_push (t)\n \t    && !any_type_dependent_arguments_p (call_args))\n-\t  function = perform_koenig_lookup (function, call_args, false,\n-\t\t\t\t\t    tf_none);\n+\t  function = perform_koenig_lookup (function, call_args, tf_none);\n \n \tif (identifier_p (function)\n \t    && !any_type_dependent_arguments_p (call_args))"}, {"sha": "0bb64c7752b5713d0a176c17777c422d18bef317", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -2041,12 +2041,10 @@ empty_expr_stmt_p (tree expr_stmt)\n \n /* Perform Koenig lookup.  FN is the postfix-expression representing\n    the function (or functions) to call; ARGS are the arguments to the\n-   call; if INCLUDE_STD then the `std' namespace is automatically\n-   considered an associated namespace (used in range-based for loops).\n-   Returns the functions to be considered by overload resolution.  */\n+   call.  Returns the functions to be considered by overload resolution.  */\n \n tree\n-perform_koenig_lookup (tree fn, vec<tree, va_gc> *args, bool include_std,\n+perform_koenig_lookup (tree fn, vec<tree, va_gc> *args,\n \t\t       tsubst_flags_t complain)\n {\n   tree identifier = NULL_TREE;\n@@ -2083,7 +2081,7 @@ perform_koenig_lookup (tree fn, vec<tree, va_gc> *args, bool include_std,\n   if (!any_type_dependent_arguments_p (args)\n       && !any_dependent_template_arguments_p (tmpl_args))\n     {\n-      fn = lookup_arg_dependent (identifier, functions, args, include_std);\n+      fn = lookup_arg_dependent (identifier, functions, args);\n       if (!fn)\n \t{\n \t  /* The unqualified name could not be resolved.  */\n@@ -4643,7 +4641,7 @@ omp_reduction_lookup (location_t loc, tree id, tree type, tree *baselinkp,\n \t{\n \t  vec<tree, va_gc> *args = NULL;\n \t  vec_safe_push (args, build_reference_type (type));\n-\t  id = perform_koenig_lookup (id, args, false, tf_none);\n+\t  id = perform_koenig_lookup (id, args, tf_none);\n \t}\n     }\n   else if (TREE_CODE (id) == SCOPE_REF)"}, {"sha": "0950914255ef2a791bc7b8684c97942617bbdb6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -1,3 +1,10 @@\n+2014-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tCore DR 1442\n+\tPR c++/59165\n+\t* g++.dg/cpp0x/range-for28.C: New.\n+\t* g++.dg/cpp0x/range-for3.C: Update.\n+\n 2014-01-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/powerpc/rs6000-ldouble-3.c: New test."}, {"sha": "5007349949aa4fa72dd308ba9464b737a69784aa", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for28.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for28.C?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/59165\n+// { dg-require-effective-target c++11 }\n+\n+namespace std {\n+int* begin(int i) { return (int*)0; }\n+int* end(int i) { return (int*)0; }\n+}\n+\n+int main() {\n+  for (int a : 10) { }  // { dg-error \"was not declared\" }\n+}"}, {"sha": "2f1ce382651958c155290f5e80f38a7086759c66", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23b1b205ad460a71983b41c67a6f34f18b368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for3.C?ref=cdc23b1b205ad460a71983b41c67a6f34f18b368", "patch": "@@ -36,7 +36,7 @@ namespace std\n int main()\n {\n     container c(1,4);\n-    for (int it : c)\n+    for (int it : c)    // { dg-error \"was not declared\" }\n     {\n     }\n }"}]}