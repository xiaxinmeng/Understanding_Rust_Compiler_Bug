{"sha": "0fac482ed6eba252d1b1753f48a49da7fa9175cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhYzQ4MmVkNmViYTI1MmQxYjE3NTNmNDhhNDlkYTdmYTkxNzVjYw==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-07-23T17:55:13Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-07-23T17:55:13Z"}, "message": "cp-demangle.c (demangle_ctor_dtor_name): Remove not-in-charge allocating ctor mangling.\n\n\t* cp-demangle.c (demangle_ctor_dtor_name): Remove not-in-charge\n\tallocating ctor mangling.\n\t(demangle_array_type): Handle empty and non-constant array length.\n\nFrom-SVN: r35210", "tree": {"sha": "225c1ff7f39e01bde48586dfc91961fc01b13b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225c1ff7f39e01bde48586dfc91961fc01b13b7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fac482ed6eba252d1b1753f48a49da7fa9175cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fac482ed6eba252d1b1753f48a49da7fa9175cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fac482ed6eba252d1b1753f48a49da7fa9175cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fac482ed6eba252d1b1753f48a49da7fa9175cc/comments", "author": null, "committer": null, "parents": [{"sha": "2d0e2e024c8af0eb963a16eb1fbede2c317f0255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0e2e024c8af0eb963a16eb1fbede2c317f0255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0e2e024c8af0eb963a16eb1fbede2c317f0255"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "feee64245134d69c9ca5ccf99a0d406f087dfd25", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fac482ed6eba252d1b1753f48a49da7fa9175cc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fac482ed6eba252d1b1753f48a49da7fa9175cc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0fac482ed6eba252d1b1753f48a49da7fa9175cc", "patch": "@@ -1,3 +1,9 @@\n+2000-07-21  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (demangle_ctor_dtor_name): Remove not-in-charge\n+\tallocating ctor mangling.\n+\t(demangle_array_type): Handle empty and non-constant array length.\n+\n 2000-07-23  Michael Sokolov  <msokolov@ivan.Harhan.ORG>\n \n \t* aclocal.m4 (libiberty_AC_DECLARE_ERRNO): New macro."}, {"sha": "a2c326106b68b9c4f18a4bc24cae5b2273e97ba8", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fac482ed6eba252d1b1753f48a49da7fa9175cc/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fac482ed6eba252d1b1753f48a49da7fa9175cc/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=0fac482ed6eba252d1b1753f48a49da7fa9175cc", "patch": "@@ -1738,7 +1738,6 @@ demangle_special_name (dm)\n                    ::= C1  # complete object (in-charge) ctor\n                    ::= C2  # base object (not-in-charge) ctor\n                    ::= C3  # complete object (in-charge) allocating ctor\n-                   ::= C4  # base object (not-in-charge) allocating ctor\n                    ::= D0  # deleting (in-charge) dtor\n                    ::= D1  # complete object (in-charge) dtor\n                    ::= D2  # base object (not-in-charge) dtor  */\n@@ -1751,8 +1750,7 @@ demangle_ctor_dtor_name (dm)\n   {\n     \"in-charge\",\n     \"not-in-charge\",\n-    \"in-charge allocating\",\n-    \"not-in-charge allocating\"\n+    \"allocating\"\n   };\n   static const char *const dtor_flavors[] = \n   {\n@@ -1770,7 +1768,7 @@ demangle_ctor_dtor_name (dm)\n     {\n       /* A constructor name.  Consume the C.  */\n       advance_char (dm);\n-      if (peek_char (dm) < '1' || peek_char (dm) > '4')\n+      if (peek_char (dm) < '1' || peek_char (dm) > '3')\n \treturn \"Unrecognized constructor.\";\n       RETURN_IF_ERROR (result_append_string (dm, dm->last_source_name));\n       /* Print the flavor of the constructor if in verbose mode.  */\n@@ -2312,23 +2310,43 @@ demangle_class_enum_type (dm, template_p)\n \n /* Demangles and emits an <array-type>.  \n \n-    <array-type> ::= A [<dimension number>] _ <element type>  */\n+    <array-type> ::= A [<dimension number>] _ <element type>  \n+                 ::= A <dimension expression> _ <element type>  */\n \n static status_t\n demangle_array_type (dm)\n      demangling_t dm;\n {\n-  status_t status;\n-  dyn_string_t array_size = dyn_string_new (10);\n-\n-  if (array_size == NULL)\n-    return STATUS_ALLOCATION_FAILED;\n+  status_t status = STATUS_OK;\n+  dyn_string_t array_size = NULL;\n+  char peek;\n \n-  status = demangle_char (dm, 'A');\n+  RETURN_IF_ERROR (demangle_char (dm, 'A'));\n \n   /* Demangle the array size into array_size.  */\n-  if (STATUS_NO_ERROR (status))\n-    status = demangle_number_literally (dm, array_size, 10, 0);\n+  peek = peek_char (dm);\n+  if (peek == '_')\n+    /* Array bound is omitted.  This is a C99-style VLA.  */\n+    ;\n+  else if (IS_DIGIT (peek_char (dm))) \n+    {\n+      /* It looks like a constant array bound.  */\n+      array_size = dyn_string_new (10);\n+      if (array_size == NULL)\n+\treturn STATUS_ALLOCATION_FAILED;\n+      status = demangle_number_literally (dm, array_size, 10, 0);\n+    }\n+  else\n+    {\n+      /* Anything is must be an expression for a nont-constant array\n+\t bound.  This happens if the array type occurs in a template\n+\t and the array bound references a template parameter.  */\n+      RETURN_IF_ERROR (result_push (dm));\n+      RETURN_IF_ERROR (demangle_expression (dm));\n+      array_size = (dyn_string_t) result_pop (dm);\n+    }\n+  /* array_size may have been allocated by now, so we can't use\n+     RETURN_IF_ERROR until it's been deallocated.  */\n \n   /* Demangle the base type of the array.  */\n   if (STATUS_NO_ERROR (status))\n@@ -2339,11 +2357,12 @@ demangle_array_type (dm)\n   /* Emit the array dimension syntax.  */\n   if (STATUS_NO_ERROR (status))\n     status = result_append_char (dm, '[');\n-  if (STATUS_NO_ERROR (status))\n+  if (STATUS_NO_ERROR (status) && array_size != NULL)\n     status = result_append_string (dm, array_size);\n   if (STATUS_NO_ERROR (status))\n     status = result_append_char (dm, ']');\n-  dyn_string_delete (array_size);\n+  if (array_size != NULL)\n+    dyn_string_delete (array_size);\n   \n   RETURN_IF_ERROR (status);\n "}]}