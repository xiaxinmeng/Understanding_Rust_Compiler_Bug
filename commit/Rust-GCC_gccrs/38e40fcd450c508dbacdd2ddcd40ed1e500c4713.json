{"sha": "38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlNDBmY2Q0NTBjNTA4ZGJhY2RkMmRkY2Q0MGVkMWU1MDBjNDcxMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-16T06:05:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-16T06:05:09Z"}, "message": "re PR c++/43036 (c++ compilation hang)\n\n\tPR c++/43036\n\t* tree.c (build_cplus_array_type): Set TYPE_MAIN_VARIANT to strip\n\tcv-quals from element here.\n\t(cp_build_qualified_type_real): Not here.  Preserve typedef name.\n\nFrom-SVN: r156792", "tree": {"sha": "40fe916d8d35dae1dbd625b7ed0a84e18d0c48da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40fe916d8d35dae1dbd625b7ed0a84e18d0c48da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d96f5ff5b4afaafb6acdfd4eb407f1d99561dc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96f5ff5b4afaafb6acdfd4eb407f1d99561dc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96f5ff5b4afaafb6acdfd4eb407f1d99561dc25"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "8b9bc62589ece5f4c77a6d5250ce8ce2dfaf7081", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "patch": "@@ -1,3 +1,10 @@\n+2010-02-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43036\n+\t* tree.c (build_cplus_array_type): Set TYPE_MAIN_VARIANT to strip\n+\tcv-quals from element here.\n+\t(cp_build_qualified_type_real): Not here.  Preserve typedef name.\n+\n 2010-02-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41997"}, {"sha": "31b54f6ce9cd50b3ccc518cfeba979643742095d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 33, "deletions": 51, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "patch": "@@ -41,7 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n \n static tree bot_manip (tree *, int *, void *);\n static tree bot_replace (tree *, int *, void *);\n-static tree build_cplus_array_type_1 (tree, tree);\n static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n@@ -601,14 +600,14 @@ cplus_array_compare (const void * k1, const void * k2)\n   return (TREE_TYPE (t1) == t2->type && TYPE_DOMAIN (t1) == t2->domain);\n }\n \n-/* Hash table containing all of the C++ array types, including\n-   dependent array types and array types whose element type is\n-   cv-qualified.  */\n+/* Hash table containing dependent array types, which are unsuitable for\n+   the language-independent type hash table.  */\n static GTY ((param_is (union tree_node))) htab_t cplus_array_htab;\n \n+/* Like build_array_type, but handle special C++ semantics.  */\n \n-static tree\n-build_cplus_array_type_1 (tree elt_type, tree index_type)\n+tree\n+build_cplus_array_type (tree elt_type, tree index_type)\n {\n   tree t;\n \n@@ -665,6 +664,20 @@ build_cplus_array_type_1 (tree elt_type, tree index_type)\n   else\n     t = build_array_type (elt_type, index_type);\n \n+  /* We want TYPE_MAIN_VARIANT of an array to strip cv-quals from the\n+     element type as well, so fix it up if needed.  */\n+  if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n+    {\n+      tree m = build_cplus_array_type (TYPE_MAIN_VARIANT (elt_type),\n+\t\t\t\t       index_type);\n+      if (TYPE_MAIN_VARIANT (t) != m)\n+\t{\n+\t  TYPE_MAIN_VARIANT (t) = m;\n+\t  TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n+\t  TYPE_NEXT_VARIANT (m) = t;\n+\t}\n+    }\n+\n   /* Push these needs up so that initialization takes place\n      more easily.  */\n   TYPE_NEEDS_CONSTRUCTING (t)\n@@ -674,23 +687,6 @@ build_cplus_array_type_1 (tree elt_type, tree index_type)\n   return t;\n }\n \n-tree\n-build_cplus_array_type (tree elt_type, tree index_type)\n-{\n-  tree t;\n-  int type_quals = cp_type_quals (elt_type);\n-\n-  if (type_quals != TYPE_UNQUALIFIED)\n-    elt_type = cp_build_qualified_type (elt_type, TYPE_UNQUALIFIED);\n-\n-  t = build_cplus_array_type_1 (elt_type, index_type);\n-\n-  if (type_quals != TYPE_UNQUALIFIED)\n-    t = cp_build_qualified_type (t, type_quals);\n-\n-  return t;\n-}\n-\n /* Return an ARRAY_TYPE with element type ELT and length N.  */\n \n tree\n@@ -811,41 +807,27 @@ cp_build_qualified_type_real (tree type,\n       if (element_type == error_mark_node)\n \treturn error_mark_node;\n \n-      /* See if we already have an identically qualified type.  */\n+      /* See if we already have an identically qualified type.  Tests\n+\t should be equivalent to those in check_qualified_type.  */\n       for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n \tif (cp_type_quals (t) == type_quals\n \t    && TYPE_NAME (t) == TYPE_NAME (type)\n-\t    && TYPE_CONTEXT (t) == TYPE_CONTEXT (type))\n+\t    && TYPE_CONTEXT (t) == TYPE_CONTEXT (type)\n+\t    && attribute_list_equal (TYPE_ATTRIBUTES (t),\n+\t\t\t\t     TYPE_ATTRIBUTES (type)))\n \t  break;\n \n       if (!t)\n-      {\n-\tt = build_cplus_array_type_1 (element_type, TYPE_DOMAIN (type));\n+\t{\n+\t  t = build_cplus_array_type (element_type, TYPE_DOMAIN (type));\n \n-\tif (TYPE_MAIN_VARIANT (t) != TYPE_MAIN_VARIANT (type))\n-\t  {\n-\t    /* Set the main variant of the newly-created ARRAY_TYPE\n-\t       (with cv-qualified element type) to the main variant of\n-\t       the unqualified ARRAY_TYPE we started with.  */\n-\t    tree last_variant = t;\n-\t    tree m = TYPE_MAIN_VARIANT (type);\n-\n-\t    /* Find the last variant on the new ARRAY_TYPEs list of\n-\t       variants, setting the main variant of each of the other\n-\t       types to the main variant of our unqualified\n-\t       ARRAY_TYPE.  */\n-\t    while (TYPE_NEXT_VARIANT (last_variant))\n-\t      {\n-\t\tTYPE_MAIN_VARIANT (last_variant) = m;\n-\t\tlast_variant = TYPE_NEXT_VARIANT (last_variant);\n-\t      }\n-\n-\t    /* Splice in the newly-created variants.  */\n-\t    TYPE_NEXT_VARIANT (last_variant) = TYPE_NEXT_VARIANT (m);\n-\t    TYPE_NEXT_VARIANT (m) = t;\n-\t    TYPE_MAIN_VARIANT (last_variant) = m;\n-\t  }\n-      }\n+\t  /* Keep the typedef name.  */\n+\t  if (TYPE_NAME (t) != TYPE_NAME (type))\n+\t    {\n+\t      t = build_variant_type_copy (t);\n+\t      TYPE_NAME (t) = TYPE_NAME (type);\n+\t    }\n+\t}\n \n       /* Even if we already had this variant, we update\n \t TYPE_NEEDS_CONSTRUCTING and TYPE_HAS_NONTRIVIAL_DESTRUCTOR in case"}, {"sha": "f361202c2e397ae5bea2fc05e7ed218b1f14a5b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "patch": "@@ -1,3 +1,8 @@\n+2010-02-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43036\n+\t* g++.dg/other/array6.C: New.\n+\n 2010-02-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.dg/cpp0x/initlist-opt.C: Bind pic locally."}, {"sha": "cd02401f4305099a6804e3965af40f22c0581bed", "filename": "gcc/testsuite/g++.dg/other/array6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e40fcd450c508dbacdd2ddcd40ed1e500c4713/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray6.C?ref=38e40fcd450c508dbacdd2ddcd40ed1e500c4713", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/43036\n+\n+typedef char T6[2][8];\n+const T6* p1;\n+typedef char T[8];\n+typedef T T2[2];\n+typedef T T3[2];\n+typedef char T5[2][8];\n+const T2* p2;\n+const T5* p3;\n+const T3* p4;"}]}