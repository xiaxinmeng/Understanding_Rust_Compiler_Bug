{"sha": "bb2921ab84dba014f24be06663636c7fb1361474", "node_id": "C_kwDOANBUbNoAKGJiMjkyMWFiODRkYmEwMTRmMjRiZTA2NjYzNjM2YzdmYjEzNjE0NzQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-09T20:03:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-10T05:05:51Z"}, "message": "c++: fix arm-eabi crash building libstdc++ [PR105529]\n\nMy recent change to cxx_eval_store_expression asserts that the target and\nvalue can only end up having different types in the case of an empty base;\nthis was crashing arm-eabi compilers because in that ABI [cd]tors\nreturn *this, and weren't converting it to void* first.\n\nThis also shares the 'return this' code between the three places it occurs.\n\nThanks to Marek for the tests.\n\n\tPR c++/105529\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (maybe_return_this): Replace...\n\t(finish_constructor_body, finish_destructor_body): ...these.\n\t(finish_function_body): Call it.\n\t* optimize.cc (build_delete_destructor_body): Call it.\n\t* cp-tree.h (maybe_return_this): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/constexpr-dtor13.C: New test.\n\t* g++.dg/cpp2a/constexpr-dtor14.C: New test.", "tree": {"sha": "4916f6215202be7c12b436d43d04f050ec5f10ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4916f6215202be7c12b436d43d04f050ec5f10ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb2921ab84dba014f24be06663636c7fb1361474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2921ab84dba014f24be06663636c7fb1361474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2921ab84dba014f24be06663636c7fb1361474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2921ab84dba014f24be06663636c7fb1361474/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "067fe66c8ba9b16feacf66fce9ae668091e42821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067fe66c8ba9b16feacf66fce9ae668091e42821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067fe66c8ba9b16feacf66fce9ae668091e42821"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "9fb07d8ea394ac74bbd5647eb1257040c5f0c67b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bb2921ab84dba014f24be06663636c7fb1361474", "patch": "@@ -6841,6 +6841,7 @@ extern tree lookup_enumerator\t\t\t(tree, tree);\n extern bool start_preparsed_function\t\t(tree, tree, int);\n extern bool start_function\t\t\t(cp_decl_specifier_seq *,\n \t\t\t\t\t\t const cp_declarator *, tree);\n+extern void maybe_return_this\t\t\t(void);\n extern tree begin_function_body\t\t\t(void);\n extern void finish_function_body\t\t(tree);\n extern tree outer_curly_brace_block\t\t(tree);"}, {"sha": "9c9cf9f7f6bc98c9b39b1d3d3623bde4ef370adb", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=bb2921ab84dba014f24be06663636c7fb1361474", "patch": "@@ -86,9 +86,7 @@ static tree check_initializer (tree, tree, int, vec<tree, va_gc> **);\n static void make_rtl_for_nonlocal_decl (tree, tree, const char *);\n static void copy_type_enum (tree , tree);\n static void check_function_type (tree, tree);\n-static void finish_constructor_body (void);\n static void begin_destructor_body (void);\n-static void finish_destructor_body (void);\n static void record_key_method_defined (tree);\n static tree create_array_type_for_decl (tree, tree, tree, location_t);\n static tree get_atexit_node (void);\n@@ -17502,22 +17500,20 @@ store_parm_decls (tree current_function_parms)\n }\n \n \f\n-/* Set the return value of the constructor (if present).  */\n+/* Set the return value of the [cd]tor if the ABI wants that.  */\n \n-static void\n-finish_constructor_body (void)\n+void\n+maybe_return_this (void)\n {\n-  tree val;\n-  tree exprstmt;\n-\n   if (targetm.cxx.cdtor_returns_this ())\n     {\n-      val = DECL_ARGUMENTS (current_function_decl);\n+      /* Return the address of the object.  */\n+      tree val = DECL_ARGUMENTS (current_function_decl);\n       suppress_warning (val, OPT_Wuse_after_free);\n+      val = fold_convert (TREE_TYPE (DECL_RESULT (current_function_decl)), val);\n       val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n \t\t    DECL_RESULT (current_function_decl), val);\n-      /* Return the address of the object.  */\n-      exprstmt = build_stmt (input_location, RETURN_EXPR, val);\n+      tree exprstmt = build_stmt (input_location, RETURN_EXPR, val);\n       add_stmt (exprstmt);\n     }\n }\n@@ -17590,28 +17586,6 @@ begin_destructor_body (void)\n     }\n }\n \n-/* At the end of every destructor we generate code to delete the object if\n-   necessary.  Do that now.  */\n-\n-static void\n-finish_destructor_body (void)\n-{\n-  tree exprstmt;\n-\n-  if (targetm.cxx.cdtor_returns_this ())\n-    {\n-      tree val;\n-\n-      val = DECL_ARGUMENTS (current_function_decl);\n-      suppress_warning (val, OPT_Wuse_after_free);\n-      val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n-\t\t    DECL_RESULT (current_function_decl), val);\n-      /* Return the address of the object.  */\n-      exprstmt = build_stmt (input_location, RETURN_EXPR, val);\n-      add_stmt (exprstmt);\n-    }\n-}\n-\n /* Do the necessary processing for the beginning of a function body, which\n    in this case includes member-initializers, but not the catch clauses of\n    a function-try-block.  Currently, this means opening a binding level\n@@ -17662,10 +17636,9 @@ finish_function_body (tree compstmt)\n \n   if (processing_template_decl)\n     /* Do nothing now.  */;\n-  else if (DECL_CONSTRUCTOR_P (current_function_decl))\n-    finish_constructor_body ();\n-  else if (DECL_DESTRUCTOR_P (current_function_decl))\n-    finish_destructor_body ();\n+  else if (DECL_CONSTRUCTOR_P (current_function_decl)\n+\t   || DECL_DESTRUCTOR_P (current_function_decl))\n+    maybe_return_this ();\n }\n \n /* Given a function, returns the BLOCK corresponding to the outermost level"}, {"sha": "5c134fd2fed7324fb198d9138b339caa2f7b2b02", "filename": "gcc/cp/optimize.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Foptimize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Fcp%2Foptimize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.cc?ref=bb2921ab84dba014f24be06663636c7fb1361474", "patch": "@@ -163,14 +163,7 @@ build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n \n   /* Return the address of the object.\n      ??? How is it useful to return an invalid address?  */\n-  if (targetm.cxx.cdtor_returns_this ())\n-    {\n-      tree val = DECL_ARGUMENTS (delete_dtor);\n-      suppress_warning (val, OPT_Wuse_after_free);\n-      val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n-                    DECL_RESULT (delete_dtor), val);\n-      add_stmt (build_stmt (0, RETURN_EXPR, val));\n-    }\n+  maybe_return_this ();\n }\n \n /* Return name of comdat group for complete and base ctor (or dtor)"}, {"sha": "7b289614fc15dad14a34e68500f8493a0e40b2ef", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor13.C?ref=bb2921ab84dba014f24be06663636c7fb1361474", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/105529\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-O\" }\n+\n+struct allocator {\n+  constexpr ~allocator() {}\n+};\n+struct S {\n+  S(int, int, allocator = allocator());\n+};\n+void to_string() { S(0, '\\0'); }"}, {"sha": "9c55121eb8abda0941dbcb555c6f70e37dc397f4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor14.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2921ab84dba014f24be06663636c7fb1361474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor14.C?ref=bb2921ab84dba014f24be06663636c7fb1361474", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105529\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-O\" }\n+// Like constexpr-dtor13.C, except that allocator is not an empty class.\n+\n+struct allocator {\n+  constexpr ~allocator() {}\n+  int a;\n+};\n+struct S {\n+  S(int, int, allocator = allocator());\n+};\n+void to_string() { S(0, '\\0'); }"}]}