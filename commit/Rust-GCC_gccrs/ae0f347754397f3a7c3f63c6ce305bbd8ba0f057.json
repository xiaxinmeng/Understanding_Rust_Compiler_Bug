{"sha": "ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwZjM0Nzc1NDM5N2YzYTdjM2Y2M2M2Y2UzMDViYmQ4YmEwZjA1Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-10-22T20:20:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-10-22T20:20:19Z"}, "message": "dwarf2out.c (dwarf2out_abstract_function): Use DW_AT to check presence of DW_AT_inline.\n\n\n\t* dwarf2out.c (dwarf2out_abstract_function): Use DW_AT to check presence of DW_AT_inline.\n\t(gen_subprogram_die): Likewise; do not abort instead of emitting DW_AT_not_inline\n\nFrom-SVN: r72821", "tree": {"sha": "8e6f8fdc4504eb41afc181b4d9d8be23f3d7dbcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e6f8fdc4504eb41afc181b4d9d8be23f3d7dbcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057/comments", "author": null, "committer": null, "parents": [{"sha": "eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab09cdf1a45d70f86d48138d81c8541bae9b2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab09cdf1a45d70f86d48138d81c8541bae9b2d4"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "853980ad26ecface7ac1a9875437b9ebcc57031f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "patch": "@@ -1,3 +1,8 @@\n+2003-10-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* dwarf2out.c (dwarf2out_abstract_function): Use DW_AT to check presence of DW_AT_inline.\n+\t(gen_subprogram_die): Likewise; do not abort instead of emitting DW_AT_not_inline\n+\n 2003-10-22  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_function_possibly_inlined_p): Be conservative when"}, {"sha": "96eb7c436d830049b4bf40da77c3b8177c32ee37", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0f347754397f3a7c3f63c6ce305bbd8ba0f057/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ae0f347754397f3a7c3f63c6ce305bbd8ba0f057", "patch": "@@ -10525,7 +10525,7 @@ dwarf2out_abstract_function (tree decl)\n   decl = DECL_ORIGIN (decl);\n \n   old_die = lookup_decl_die (decl);\n-  if (old_die && get_AT_unsigned (old_die, DW_AT_inline))\n+  if (old_die && get_AT (old_die, DW_AT_inline))\n     /* We've already generated the abstract instance.  */\n     return;\n \n@@ -10602,7 +10602,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  /* We can have a normal definition following an inline one in the\n \t     case of redefinition of GNU C extern inlines.\n \t     It seems reasonable to use AT_specification in this case.  */\n-\t  && !get_AT_unsigned (old_die, DW_AT_inline))\n+\t  && !get_AT (old_die, DW_AT_inline))\n \t{\n \t  /* ??? This can happen if there is a bug in the program, for\n \t     instance, if it has duplicate function definitions.  Ideally,\n@@ -10672,7 +10672,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n   if (declaration)\n     {\n-      if (!old_die || !get_AT_unsigned (old_die, DW_AT_inline))\n+      if (!old_die || !get_AT (old_die, DW_AT_inline))\n \t{\n \t  add_AT_flag (subr_die, DW_AT_declaration, 1);\n \n@@ -10698,14 +10698,14 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  if (cgraph_function_possibly_inlined_p (decl))\n             add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_inlined);\n \t  else\n-\t    abort ();\n+            add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_not_inlined);\n \t}\n \n       equate_decl_number_to_die (decl, subr_die);\n     }\n   else if (!DECL_EXTERNAL (decl))\n     {\n-      if (!old_die || !get_AT_unsigned (old_die, DW_AT_inline))\n+      if (!old_die || !get_AT (old_die, DW_AT_inline))\n \tequate_decl_number_to_die (decl, subr_die);\n \n       ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_BEGIN_LABEL,"}]}