{"sha": "2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM5YmViOGE4MTQxNDFkNzc0ZWI2OWNlOWQxZDA4ODI4MGE0YWI2Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@gnat.com", "date": "2004-09-23T09:00:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-09-23T09:00:08Z"}, "message": "re PR ada/17540 (Duplicate symbols while building Ada)\n\n2004-09-23  Robert Dewar  <dewar@gnat.com>\n\n\tPR ada/17540\n\n\t* sem_prag.adb (Process_Import_Or_Interface): Don't set Is_Public here,\n\tinstead do this at freeze time (we won't do it if there is an address\n\tclause).\n\tChange \"pragma inline\" to \"pragma Inline\" in information and error\n\tmessages.\n\tMinor reformatting.\n\n\t* freeze.adb (Check_Address_Clause): Remove previous change, not the\n\tright way of doing things after all.\n\t(Freeze_Entity): For object, set Is_Public for imported entities\n\tunless there is an address clause present.\n\nFrom-SVN: r87936", "tree": {"sha": "f51a21c0629ac49a84b1dd8bcd28f290fa3eb6a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51a21c0629ac49a84b1dd8bcd28f290fa3eb6a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/comments", "author": null, "committer": null, "parents": [{"sha": "f8d1c4278bcea3cdba69f22114a382090be0533e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d1c4278bcea3cdba69f22114a382090be0533e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d1c4278bcea3cdba69f22114a382090be0533e"}], "stats": {"total": 107, "additions": 79, "deletions": 28}, "files": [{"sha": "3b04259111005b842976d1fac24619c5c1c4726d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "patch": "@@ -1,3 +1,19 @@\n+2004-09-23  Robert Dewar  <dewar@gnat.com>\n+\n+\tPR ada/17540\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): Don't set Is_Public here,\n+\tinstead do this at freeze time (we won't do it if there is an address\n+\tclause).\n+\tChange \"pragma inline\" to \"pragma Inline\" in information and error\n+\tmessages.\n+\tMinor reformatting.\n+\n+\t* freeze.adb (Check_Address_Clause): Remove previous change, not the\n+\tright way of doing things after all.\n+\t(Freeze_Entity): For object, set Is_Public for imported entities\n+\tunless there is an address clause present.\n+\n 2004-09-21  Olivier Hainque  <hainque@act-europe.fr>\n \n \t* decl.c (gnat_to_gnu_entity) <E_General_Access_Type>: Check for a"}, {"sha": "1623b41f7b01067b2f2e2a2c82e7f8c9be7dcd79", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "patch": "@@ -82,9 +82,7 @@ package body Freeze is\n \n    procedure Check_Address_Clause (E : Entity_Id);\n    --  Apply legality checks to address clauses for object declarations,\n-   --  at the point the object is frozen. Also deals with cancelling effect\n-   --  of Import pragma which has no effect (other than to eliminate any\n-   --  implicit initialization) if an address clause is present.\n+   --  at the point the object is frozen.\n \n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n@@ -499,11 +497,6 @@ package body Freeze is\n          then\n             Warn_Overlay (Expr, Typ, Name (Addr));\n          end if;\n-\n-         --  Cancel effect of any Import pragma\n-\n-         Set_Is_Imported (E, False);\n-         Set_Is_Public (E, False);\n       end if;\n    end Check_Address_Clause;\n \n@@ -2198,14 +2191,35 @@ package body Freeze is\n                Freeze_And_Append (Etype (E), Loc, Result);\n             end if;\n \n-            --  For object created by object declaration, perform required\n-            --  categorization (preelaborate and pure) checks. Defer these\n-            --  checks to freeze time since pragma Import inhibits default\n-            --  initialization and thus pragma Import affects these checks.\n+            --  Special processing for objects created by object declaration\n \n             if Nkind (Declaration_Node (E)) = N_Object_Declaration then\n+\n+               --  For object created by object declaration, perform required\n+               --  categorization (preelaborate and pure) checks. Defer these\n+               --  checks to freeze time since pragma Import inhibits default\n+               --  initialization and thus pragma Import affects these checks.\n+\n                Validate_Object_Declaration (Declaration_Node (E));\n+\n+               --  If there is an address clause, check it is valid\n+\n                Check_Address_Clause (E);\n+\n+               --  For imported objects, set Is_Public unless there is also\n+               --  an address clause, which means that there is no external\n+               --  symbol needed for the Import (Is_Public may still be set\n+               --  for other unrelated reasons). Note that we delayed this\n+               --  processing till freeze time so that we can be sure not\n+               --  to set the flag if there is an address clause. If there\n+               --  is such a clause, then the only purpose of the import\n+               --  pragma is to suppress implicit initialization.\n+\n+               if Is_Imported (E)\n+                 and then not Present (Address_Clause (E))\n+               then\n+                  Set_Is_Public (E);\n+               end if;\n             end if;\n \n             --  Check that a constant which has a pragma Volatile[_Components]"}, {"sha": "ae4aa108d5ef73bd2888e8cb49d74ef9ee6d7977", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9beb8a814141d774eb69ce9d1d088280a4ab6b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2c9beb8a814141d774eb69ce9d1d088280a4ab6b", "patch": "@@ -922,7 +922,6 @@ package body Sem_Prag is\n       begin\n          if Arg_Count > N then\n             Arg := Arg1;\n-\n             for J in 1 .. N loop\n                Next (Arg);\n                Error_Pragma_Arg (\"too many arguments for pragma%\", Arg);\n@@ -1608,7 +1607,6 @@ package body Sem_Prag is\n          --  Otherwise first deal with any positional parameters present\n \n          Arg := First (Pragma_Argument_Associations (N));\n-\n          for Index in Args'Range loop\n             exit when No (Arg) or else Chars (Arg) /= No_Name;\n             Args (Index) := Expression (Arg);\n@@ -2720,6 +2718,7 @@ package body Sem_Prag is\n                   --  Deal with positional ones first\n \n                   Formal := First_Formal (Ent);\n+\n                   if Present (Expressions (Arg_Mechanism)) then\n                      Mname := First (Expressions (Arg_Mechanism));\n \n@@ -2900,9 +2899,13 @@ package body Sem_Prag is\n \n             else\n                Set_Imported (Def_Id);\n-               Set_Is_Public (Def_Id);\n                Process_Interface_Name (Def_Id, Arg3, Arg4);\n \n+               --  Note that we do not set Is_Public here. That's because we\n+               --  only want to set if if there is no address clause, and we\n+               --  don't know that yet, so we delay that processing till\n+               --  freeze time.\n+\n                --  pragma Import completes deferred constants\n \n                if Ekind (Def_Id) = E_Constant then\n@@ -2959,18 +2962,18 @@ package body Sem_Prag is\n                else\n                   Set_Imported (Def_Id);\n \n-                  --  If Import intrinsic, set intrinsic flag\n-                  --  and verify that it is known as such.\n+                  --  If Import intrinsic, set intrinsic flag and verify\n+                  --  that it is known as such.\n \n                   if C = Convention_Intrinsic then\n                      Set_Is_Intrinsic_Subprogram (Def_Id);\n                      Check_Intrinsic_Subprogram\n                        (Def_Id, Expression (Arg2));\n                   end if;\n \n-                  --  All interfaced procedures need an external\n-                  --  symbol created for them since they are\n-                  --  always referenced from another object file.\n+                  --  All interfaced procedures need an external symbol\n+                  --  created for them since they are always referenced\n+                  --  from another object file.\n \n                   Set_Is_Public (Def_Id);\n \n@@ -3271,7 +3274,7 @@ package body Sem_Prag is\n             elsif not Effective\n               and then Warn_On_Redundant_Constructs\n             then\n-               Error_Msg_NE (\"pragma inline on& is redundant?\",\n+               Error_Msg_NE (\"pragma Inline for& is redundant?\",\n                  N, Entity (Subp_Id));\n             end if;\n \n@@ -3298,6 +3301,10 @@ package body Sem_Prag is\n          --  particular that no spaces or other obviously incorrect characters\n          --  appear. This is only a warning, since any characters are allowed.\n \n+         ----------------------------------\n+         -- Check_Form_Of_Interface_Name --\n+         ----------------------------------\n+\n          procedure Check_Form_Of_Interface_Name (SN : Node_Id) is\n             S  : constant String_Id := Strval (Expr_Value_S (SN));\n             SL : constant Nat       := String_Length (S);\n@@ -3834,13 +3841,17 @@ package body Sem_Prag is\n          --  Import or Export pragma), then the external names must match\n \n          if Present (Interface_Name (Internal_Ent)) then\n-            declare\n+            Check_Matching_Internal_Names : declare\n                S1 : constant String_Id := Strval (Old_Name);\n                S2 : constant String_Id := Strval (New_Name);\n \n                procedure Mismatch;\n                --  Called if names do not match\n \n+               --------------\n+               -- Mismatch --\n+               --------------\n+\n                procedure Mismatch is\n                begin\n                   Error_Msg_Sloc := Sloc (Old_Name);\n@@ -3849,6 +3860,8 @@ package body Sem_Prag is\n                      Arg_External);\n                end Mismatch;\n \n+            --  Start of processing for Check_Matching_Internal_Names\n+\n             begin\n                if String_Length (S1) /= String_Length (S2) then\n                   Mismatch;\n@@ -3860,7 +3873,7 @@ package body Sem_Prag is\n                      end if;\n                   end loop;\n                end if;\n-            end;\n+            end Check_Matching_Internal_Names;\n \n          --  Otherwise set the given name\n \n@@ -3924,11 +3937,19 @@ package body Sem_Prag is\n          procedure Bad_Mechanism;\n          --  Signal bad mechanism name\n \n+         ---------------\n+         -- Bad_Class --\n+         ---------------\n+\n          procedure Bad_Class is\n          begin\n             Error_Pragma_Arg (\"unrecognized descriptor class name\", Class);\n          end Bad_Class;\n \n+         -------------------------\n+         -- Bad_Mechanism_Value --\n+         -------------------------\n+\n          procedure Bad_Mechanism is\n          begin\n             Error_Pragma_Arg (\"unrecognized mechanism name\", Mech_Name);\n@@ -6208,9 +6229,7 @@ package body Sem_Prag is\n          --    UPPERCASE | LOWERCASE\n          --    [, AS_IS | UPPERCASE | LOWERCASE]);\n \n-         when Pragma_External_Name_Casing =>\n-\n-         External_Name_Casing : declare\n+         when Pragma_External_Name_Casing => External_Name_Casing : declare\n          begin\n             GNAT_Pragma;\n             Check_No_Identifiers;\n@@ -10584,6 +10603,10 @@ package body Sem_Prag is\n       --  Stores encoded value of character code CC. The encoding we\n       --  use an underscore followed by four lower case hex digits.\n \n+      ------------\n+      -- Encode --\n+      ------------\n+\n       procedure Encode is\n       begin\n          Store_String_Char (Get_Char_Code ('_'));\n@@ -10686,7 +10709,6 @@ package body Sem_Prag is\n \n          Pref := Prefix (N);\n          Scop := Scope (Entity (N));\n-\n          while Nkind (Pref) = N_Selected_Component loop\n             Change_Selected_Component_To_Expanded_Name (Pref);\n             Set_Entity (Selector_Name (Pref), Scop);\n@@ -10698,5 +10720,4 @@ package body Sem_Prag is\n          Set_Entity (Pref, Scop);\n       end if;\n    end Set_Unit_Name;\n-\n end Sem_Prag;"}]}