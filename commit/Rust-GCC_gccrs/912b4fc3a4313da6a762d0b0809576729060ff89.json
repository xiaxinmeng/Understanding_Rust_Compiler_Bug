{"sha": "912b4fc3a4313da6a762d0b0809576729060ff89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEyYjRmYzNhNDMxM2RhNmE3NjJkMGIwODA5NTc2NzI5MDYwZmY4OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-03-02T23:39:09Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-03-02T23:39:09Z"}, "message": "(build_binary_op): Avoid spurious warning\n|        comparing enumerator to unsigned variable.\n\nFrom-SVN: r9113", "tree": {"sha": "ee4c759cff99079d84807cf78958fdfdcfb05226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4c759cff99079d84807cf78958fdfdcfb05226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/912b4fc3a4313da6a762d0b0809576729060ff89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912b4fc3a4313da6a762d0b0809576729060ff89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/912b4fc3a4313da6a762d0b0809576729060ff89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912b4fc3a4313da6a762d0b0809576729060ff89/comments", "author": null, "committer": null, "parents": [{"sha": "f590249e804f57f075bb73c2ebf1e95845af8b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f590249e804f57f075bb73c2ebf1e95845af8b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f590249e804f57f075bb73c2ebf1e95845af8b2c"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "688393f7ae08714e7f43383fb147cf1850d9a282", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912b4fc3a4313da6a762d0b0809576729060ff89/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912b4fc3a4313da6a762d0b0809576729060ff89/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=912b4fc3a4313da6a762d0b0809576729060ff89", "patch": "@@ -2443,6 +2443,13 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \n \t      tree comp_type = TREE_TYPE (op0);\n \n+\t      /* Avoid spurious warnings for comparison with enumerators.  */\n+ \n+\t      xop0 = orig_op0;\n+\t      xop1 = orig_op1;\n+\t      STRIP_TYPE_NOPS (xop0);\n+\t      STRIP_TYPE_NOPS (xop1);\n+\n \t      /* Give warnings for comparisons between signed and unsigned\n \t\t quantities that may fail.  Do not warn if the signed quantity\n \t\t is an unsuffixed integer literal (or some static constant\n@@ -2453,10 +2460,10 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      /* Do the checking based on the original operand trees, so that\n \t\t casts will be considered, but default promotions won't be.  */\n \t      if (TREE_UNSIGNED (comp_type)\n-\t\t  && ((op0_signed && (TREE_CODE (orig_op0) != INTEGER_CST\n-\t\t\t\t      || tree_int_cst_sgn (orig_op0) == -1))\n-\t\t      || (op1_signed && (TREE_CODE (orig_op1) != INTEGER_CST\n-\t\t\t\t       || tree_int_cst_sgn (orig_op1) == -1))))\n+\t\t  && ((op0_signed && (TREE_CODE (xop0) != INTEGER_CST\n+\t\t\t\t      || tree_int_cst_sgn (xop0) == -1))\n+\t\t      || (op1_signed && (TREE_CODE (xop1) != INTEGER_CST\n+\t\t\t\t       || tree_int_cst_sgn (xop1) == -1))))\n \t\twarning (\"comparison between signed and unsigned\");\n \t    }\n \t}"}]}