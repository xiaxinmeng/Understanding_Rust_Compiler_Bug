{"sha": "07687835bea637072221fdcbeb11cf14c43986f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2ODc4MzViZWE2MzcwNzIyMjFmZGNiZWIxMWNmMTRjNDM5ODZmNw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2013-11-01T20:31:32Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2013-11-01T20:31:32Z"}, "message": "Replace some heap vectors with stack vectors.\n\nFrom http://gcc.gnu.org/ml/gcc-patches/2013-10/msg02735.html\n\nThis patch is pretty dull, it just replaces a bunch of things of the\nform\nvec<T> x;\nx.create (N); // N is a constant\nblah blah\nx.release ();\nby\nstack_vec<T, N> x;\nblah blah\n\n2013-11-01  Trevor Saunders  <tsaunders@mozilla.com>\n\ngcc/\n\t* function.c (reorder_blocks): Convert block_stack to a stack_vec.\n\t* gimplify.c (gimplify_compound_lval): Likewise.\n\t* graphite-clast-to-gimple.c (gloog): Likewise.\n\t* graphite-dependences.c (loop_is_parallel_p): Likewise.\n\t* graphite-scop-detection.c (scopdet_basic_block_info): Likewise.\n\t(limit_scop); Likewise.\n\t(build_scops): Likewise.\n\t(dot_scop): Likewise.\n\t* graphite-sese-to-poly.c (sese_dom_walker): Likewise.\n\t(build_scop_drs): Likewise.\n\t(insert_stmts): Likewise.\n\t(insert_out_of_ssa_copy): Likewise.\n\t(remove_phi): Likewise.\n\t(rewrite_commutative_reductions_out_of_ssa_close_phi): Likewise.\n\t* hw-doloop.c (discover_loop): Likewise.\n\t* tree-call-cdce.c (shrink_wrap_one_built_in_call): Likewise.\n\t* tree-dfa.c (dump_enumerated_decls): Likewise.\n\t* tree-if-conv.c (if_convertable_loop_p): Likewise.\n\t* tree-inline.c (tree_function_versioning): Likewise.\n\t* tree-loop-distribution.c (build_rdg): Likewise.\n\t(rdg_flag_vertex_and_dependent): Likewise.\n\t(distribute_loop): Likewise.\n\t* tree-parloops.c (loop_parallel_p): Likewise.\n\t(eliminate_local_variables): Likewise.\n\t(separate_decls_in_region): Likewise.\n\t* tree-predcom.c (tree_predictive_commoning_loop): Likewise.\n\t* tree-ssa-phiopt.c (cond_if_else_store_replacement): Likewise.\n\t* tree-ssa-uncprop.c (uncprop_dom_walker): Likewise.\n\t* tree-vect-loop.c (vect_analyze_scaler_cycles_1): Likewise.\n\t* tree-vect-patterns.c (vect_pattern_recog): Likewise.\n\t* tree-vect-stmts.c (vect_mark_stmts_to_be_vectorized): Likewise.\n\t(vectorizable_condition): Likewise.\n\ngcc/cp/\n\t* semantics.c (build_anon_member_initialization): Convert fields to be\n        a stack_vec.\n\nFrom-SVN: r204301", "tree": {"sha": "9b926d72ddfbc7904a373e59872f1d07b4e4e417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b926d72ddfbc7904a373e59872f1d07b4e4e417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07687835bea637072221fdcbeb11cf14c43986f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07687835bea637072221fdcbeb11cf14c43986f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07687835bea637072221fdcbeb11cf14c43986f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07687835bea637072221fdcbeb11cf14c43986f7/comments", "author": null, "committer": null, "parents": [{"sha": "654a6bb421af2e0aadccc0b29ce5af298519c8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654a6bb421af2e0aadccc0b29ce5af298519c8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654a6bb421af2e0aadccc0b29ce5af298519c8e9"}], "stats": {"total": 262, "additions": 89, "deletions": 173}, "files": [{"sha": "6bdaa313d8b70fa1a332853ed272d03bf1af15b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1,3 +1,38 @@\n+2013-11-01  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* function.c (reorder_blocks): Convert block_stack to a stack_vec.\n+\t* gimplify.c (gimplify_compound_lval): Likewise.\n+\t* graphite-clast-to-gimple.c (gloog): Likewise.\n+\t* graphite-dependences.c (loop_is_parallel_p): Likewise.\n+\t* graphite-scop-detection.c (scopdet_basic_block_info): Likewise.\n+\t(limit_scop); Likewise.\n+\t(build_scops): Likewise.\n+\t(dot_scop): Likewise.\n+\t* graphite-sese-to-poly.c (sese_dom_walker): Likewise.\n+\t(build_scop_drs): Likewise.\n+\t(insert_stmts): Likewise.\n+\t(insert_out_of_ssa_copy): Likewise.\n+\t(remove_phi): Likewise.\n+\t(rewrite_commutative_reductions_out_of_ssa_close_phi): Likewise.\n+\t* hw-doloop.c (discover_loop): Likewise.\n+\t* tree-call-cdce.c (shrink_wrap_one_built_in_call): Likewise.\n+\t* tree-dfa.c (dump_enumerated_decls): Likewise.\n+\t* tree-if-conv.c (if_convertable_loop_p): Likewise.\n+\t* tree-inline.c (tree_function_versioning): Likewise.\n+\t* tree-loop-distribution.c (build_rdg): Likewise.\n+\t(rdg_flag_vertex_and_dependent): Likewise.\n+\t(distribute_loop): Likewise.\n+\t* tree-parloops.c (loop_parallel_p): Likewise.\n+\t(eliminate_local_variables): Likewise.\n+\t(separate_decls_in_region): Likewise.\n+\t* tree-predcom.c (tree_predictive_commoning_loop): Likewise.\n+\t* tree-ssa-phiopt.c (cond_if_else_store_replacement): Likewise.\n+\t* tree-ssa-uncprop.c (uncprop_dom_walker): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_scaler_cycles_1): Likewise.\n+\t* tree-vect-patterns.c (vect_pattern_recog): Likewise.\n+\t* tree-vect-stmts.c (vect_mark_stmts_to_be_vectorized): Likewise.\n+\t(vectorizable_condition): Likewise.\n+\n 2013-11-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* configure.ac (HAVE_AS_IX86_INTERUNIT_MOVQ): Always define as 0/1."}, {"sha": "d707fec81f17059b341468b16a3e98356281a7e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1,3 +1,8 @@\n+2013-11-01  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* semantics.c (build_anon_member_initialization): Convert fields to be\n+        a stack_vec.\n+\n 2013-11-01  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/58834"}, {"sha": "366756fd437593eae7e886b343e1456064dac8cb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -7439,8 +7439,7 @@ build_anon_member_initialization (tree member, tree init,\n      to build up the initializer from the outside in so that we can reuse\n      previously built CONSTRUCTORs if this is, say, the second field in an\n      anonymous struct.  So we use a vec as a stack.  */\n-  vec<tree> fields;\n-  fields.create (2);\n+  stack_vec<tree, 2> fields;\n   do\n     {\n       fields.safe_push (TREE_OPERAND (member, 1));\n@@ -7472,7 +7471,6 @@ build_anon_member_initialization (tree member, tree init,\n   /* Now we're at the innermost field, the one that isn't an anonymous\n      aggregate.  Add its initializer to the CONSTRUCTOR and we're done.  */\n   gcc_assert (fields.is_empty());\n-  fields.release ();\n   CONSTRUCTOR_APPEND_ELT (*vec, field, init);\n \n   return true;"}, {"sha": "21ab691c586a43d86f629d9c71e4f5ba3d3c1611", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -4128,12 +4128,11 @@ void\n reorder_blocks (void)\n {\n   tree block = DECL_INITIAL (current_function_decl);\n-  vec<tree> block_stack;\n \n   if (block == NULL_TREE)\n     return;\n \n-  block_stack.create (10);\n+  stack_vec<tree, 10> block_stack;\n \n   /* Reset the TREE_ASM_WRITTEN bit for all blocks.  */\n   clear_block_marks (block);\n@@ -4145,8 +4144,6 @@ reorder_blocks (void)\n   /* Recreate the block tree from the note nesting.  */\n   reorder_blocks_1 (get_insns (), block, &block_stack);\n   BLOCK_SUBBLOCKS (block) = blocks_nreverse_all (BLOCK_SUBBLOCKS (block));\n-\n-  block_stack.release ();\n }\n \n /* Helper function for reorder_blocks.  Reset TREE_ASM_WRITTEN.  */"}, {"sha": "0723027c392f25f579c37d5dcde276d6fcd53ea4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -2142,15 +2142,14 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\tfallback_t fallback)\n {\n   tree *p;\n-  vec<tree> expr_stack;\n   enum gimplify_status ret = GS_ALL_DONE, tret;\n   int i;\n   location_t loc = EXPR_LOCATION (*expr_p);\n   tree expr = *expr_p;\n \n   /* Create a stack of the subexpressions so later we can walk them in\n      order from inner to outer.  */\n-  expr_stack.create (10);\n+  stack_vec<tree, 10> expr_stack;\n \n   /* We can handle anything that get_inner_reference can deal with.  */\n   for (p = expr_p; ; p = &TREE_OPERAND (*p, 0))"}, {"sha": "ec4c1d1f461fc1480ae545f0429174577943c8b1", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1652,8 +1652,7 @@ debug_generated_program (scop_p scop)\n bool\n gloog (scop_p scop, bb_pbb_htab_type bb_pbb_mapping)\n {\n-  vec<tree> newivs;\n-  newivs.create (10);\n+  stack_vec<tree, 10> newivs;\n   loop_p context_loop;\n   sese region = SCOP_REGION (scop);\n   ifsese if_region = NULL;\n@@ -1711,7 +1710,6 @@ gloog (scop_p scop, bb_pbb_htab_type bb_pbb_mapping)\n \n   newivs_index.dispose ();\n   params_index.dispose ();\n-  newivs.release ();\n   cloog_clast_free (clast);\n   timevar_pop (TV_GRAPHITE_CODE_GEN);\n "}, {"sha": "417ea2cd153e2309788ec464a1e044dcab9e3523", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -585,13 +585,11 @@ loop_is_parallel_p (loop_p loop, bb_pbb_htab_type bb_pbb_mapping, int depth)\n {\n   bool dependences;\n   scop_p scop;\n-  vec<poly_bb_p> body;\n-  body.create (3);\n \n   timevar_push (TV_GRAPHITE_DATA_DEPS);\n+  stack_vec<poly_bb_p, 3> body;\n   scop = get_loop_body_pbbs (loop, bb_pbb_mapping, &body);\n   dependences = loop_level_carries_dependences (scop, body, depth);\n-  body.release ();\n   timevar_pop (TV_GRAPHITE_DATA_DEPS);\n \n   return !dependences;"}, {"sha": "e73a349803a823ea1c1596a1ded8854884f834b2", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -475,8 +475,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n \n     case GBB_LOOP_SING_EXIT_HEADER:\n       {\n-\tvec<sd_region> regions;\n-\tregions.create (3);\n+\tstack_vec<sd_region, 3> regions;\n \tstruct scopdet_info sinfo;\n \tedge exit_e = single_exit (loop);\n \n@@ -541,8 +540,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n       {\n         /* XXX: For now we just do not join loops with multiple exits.  If the\n            exits lead to the same bb it may be possible to join the loop.  */\n-        vec<sd_region> regions;\n-\tregions.create (3);\n+        stack_vec<sd_region, 3> regions;\n         vec<edge> exits = get_loop_exit_edges (loop);\n         edge e;\n         int i;\n@@ -585,8 +583,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n       }\n     case GBB_COND_HEADER:\n       {\n-\tvec<sd_region> regions;\n-\tregions.create (3);\n+\tstack_vec<sd_region, 3> regions;\n \tstruct scopdet_info sinfo;\n \tvec<basic_block> dominated;\n \tint i;\n@@ -1189,8 +1186,7 @@ print_graphite_statistics (FILE* file, vec<scop_p> scops)\n static void\n limit_scops (vec<scop_p> *scops)\n {\n-  vec<sd_region> regions;\n-  regions.create (3);\n+  stack_vec<sd_region, 3> regions;\n \n   int i;\n   scop_p scop;\n@@ -1225,7 +1221,6 @@ limit_scops (vec<scop_p> *scops)\n \n   create_sese_edges (regions);\n   build_graphite_scops (regions, scops);\n-  regions.release ();\n }\n \n /* Returns true when P1 and P2 are close phis with the same\n@@ -1404,8 +1399,7 @@ void\n build_scops (vec<scop_p> *scops)\n {\n   struct loop *loop = current_loops->tree_root;\n-  vec<sd_region> regions;\n-  regions.create (3);\n+  stack_vec<sd_region, 3> regions;\n \n   canonicalize_loop_closed_ssa_form ();\n   build_scops_1 (single_succ (ENTRY_BLOCK_PTR), ENTRY_BLOCK_PTR->loop_father,\n@@ -1595,7 +1589,7 @@ dot_all_scops (vec<scop_p> scops)\n DEBUG_FUNCTION void\n dot_scop (scop_p scop)\n {\n-  vec<scop_p> scops = vNULL;\n+  stack_vec<scop_p, 1> scops;\n \n   if (scop)\n     scops.safe_push (scop);\n@@ -1615,8 +1609,6 @@ dot_scop (scop_p scop)\n #else\n   dot_all_scops_1 (stderr, scops);\n #endif\n-\n-  scops.release ();\n }\n \n #endif"}, {"sha": "6c2ac41b30e74952ede2c4fb3c264ae4266f5312", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1231,27 +1231,18 @@ class sese_dom_walker : public dom_walker\n {\n public:\n   sese_dom_walker (cdi_direction, sese);\n-  ~sese_dom_walker ();\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n \n private:\n-  vec<gimple> m_conditions, m_cases;\n+  stack_vec<gimple, 3> m_conditions, m_cases;\n   sese m_region;\n };\n \n sese_dom_walker::sese_dom_walker (cdi_direction direction, sese region)\n   : dom_walker (direction), m_region (region)\n {\n-  m_conditions.create (3);\n-  m_cases.create (3);\n-}\n-\n-sese_dom_walker::~sese_dom_walker ()\n-{\n-  m_conditions.release ();\n-  m_cases.release ();\n }\n \n /* Call-back for dom_walk executed before visiting the dominated\n@@ -1890,8 +1881,7 @@ build_scop_drs (scop_p scop)\n   int i, j;\n   poly_bb_p pbb;\n   data_reference_p dr;\n-  vec<data_reference_p> drs;\n-  drs.create (3);\n+  stack_vec<data_reference_p, 3> drs;\n \n   /* Remove all the PBBs that do not have data references: these basic\n      blocks are not handled in the polyhedral representation.  */\n@@ -1989,16 +1979,14 @@ insert_stmts (scop_p scop, gimple stmt, gimple_seq stmts,\n \t      gimple_stmt_iterator insert_gsi)\n {\n   gimple_stmt_iterator gsi;\n-  vec<gimple> x;\n-  x.create (3);\n+  stack_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n     x.safe_push (gsi_stmt (gsi));\n \n   gsi_insert_seq_before (&insert_gsi, stmts, GSI_SAME_STMT);\n   analyze_drs_in_stmts (scop, gsi_bb (insert_gsi), x);\n-  x.release ();\n }\n \n /* Insert the assignment \"RES := EXPR\" just after AFTER_STMT.  */\n@@ -2010,8 +1998,7 @@ insert_out_of_ssa_copy (scop_p scop, tree res, tree expr, gimple after_stmt)\n   gimple_stmt_iterator gsi;\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n   gimple stmt = gimple_build_assign (unshare_expr (res), var);\n-  vec<gimple> x;\n-  x.create (3);\n+  stack_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2029,7 +2016,6 @@ insert_out_of_ssa_copy (scop_p scop, tree res, tree expr, gimple after_stmt)\n     }\n \n   analyze_drs_in_stmts (scop, gimple_bb (after_stmt), x);\n-  x.release ();\n }\n \n /* Creates a poly_bb_p for basic_block BB from the existing PBB.  */\n@@ -2067,8 +2053,7 @@ insert_out_of_ssa_copy_on_edge (scop_p scop, edge e, tree res, tree expr)\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n   gimple stmt = gimple_build_assign (unshare_expr (res), var);\n   basic_block bb;\n-  vec<gimple> x;\n-  x.create (3);\n+  stack_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2085,7 +2070,6 @@ insert_out_of_ssa_copy_on_edge (scop_p scop, edge e, tree res, tree expr)\n     new_pbb_from_pbb (scop, pbb_from_bb (e->src), bb);\n \n   analyze_drs_in_stmts (scop, bb, x);\n-  x.release ();\n }\n \n /* Creates a zero dimension array of the same type as VAR.  */\n@@ -2881,8 +2865,7 @@ remove_phi (gimple phi)\n   tree def;\n   use_operand_p use_p;\n   gimple_stmt_iterator gsi;\n-  vec<gimple> update;\n-  update.create (3);\n+  stack_vec<gimple, 3> update;\n   unsigned int i;\n   gimple stmt;\n \n@@ -2901,8 +2884,6 @@ remove_phi (gimple phi)\n   FOR_EACH_VEC_ELT (update, i, stmt)\n     update_stmt (stmt);\n \n-  update.release ();\n-\n   gsi = gsi_for_phi_node (phi);\n   remove_phi_node (&gsi, false);\n }\n@@ -3042,18 +3023,14 @@ rewrite_commutative_reductions_out_of_ssa_close_phi (scop_p scop,\n \t\t\t\t\t\t     gimple close_phi)\n {\n   bool res;\n-  vec<gimple> in;\n-  in.create (10);\n-  vec<gimple> out;\n-  out.create (10);\n+  stack_vec<gimple, 10> in;\n+  stack_vec<gimple, 10> out;\n \n   detect_commutative_reduction (scop, close_phi, &in, &out);\n   res = in.length () > 1;\n   if (res)\n     translate_scalar_reduction_to_array (scop, in, out);\n \n-  in.release ();\n-  out.release ();\n   return res;\n }\n "}, {"sha": "5d26638748510031a7626722f33e1e9bd3ed9b77", "filename": "gcc/hw-doloop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fhw-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Fhw-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhw-doloop.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -237,7 +237,6 @@ discover_loop (hwloop_info loop, basic_block tail_bb, rtx tail_insn, rtx reg)\n   bool found_tail;\n   unsigned dwork = 0;\n   basic_block bb;\n-  vec<basic_block> works;\n \n   loop->tail = tail_bb;\n   loop->loop_end = tail_insn;\n@@ -253,7 +252,7 @@ discover_loop (hwloop_info loop, basic_block tail_bb, rtx tail_insn, rtx reg)\n   loop->head = BRANCH_EDGE (tail_bb)->dest;\n   loop->successor = FALLTHRU_EDGE (tail_bb)->dest;\n \n-  works.create (20);\n+  stack_vec<basic_block, 20> works;\n   works.safe_push (loop->head);\n \n   found_tail = false;\n@@ -340,8 +339,6 @@ discover_loop (hwloop_info loop, basic_block tail_bb, rtx tail_insn, rtx reg)\n \t    }\n \t}\n     }\n-\n-  works.release ();\n }\n \n /* Analyze the structure of the loops in the current function.  Use"}, {"sha": "eec1b0fb739aa3f1842f14c1e1cdeb58c65a85d1", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -713,26 +713,22 @@ shrink_wrap_one_built_in_call (gimple bi_call)\n   basic_block bi_call_bb, join_tgt_bb, guard_bb, guard_bb0;\n   edge join_tgt_in_edge_from_call, join_tgt_in_edge_fall_thru;\n   edge bi_call_in_edge0, guard_bb_in_edge;\n-  vec<gimple> conds;\n   unsigned tn_cond_stmts, nconds;\n   unsigned ci;\n   gimple cond_expr = NULL;\n   gimple cond_expr_start;\n   tree bi_call_label_decl;\n   gimple bi_call_label;\n \n-  conds.create (12);\n+  stack_vec<gimple, 12> conds;\n   gen_shrink_wrap_conditions (bi_call, conds, &nconds);\n \n   /* This can happen if the condition generator decides\n      it is not beneficial to do the transformation.  Just\n      return false and do not do any transformation for\n      the call.  */\n   if (nconds == 0)\n-    {\n-      conds.release ();\n-      return false;\n-    }\n+    return false;\n \n   bi_call_bb = gimple_bb (bi_call);\n \n@@ -743,10 +739,7 @@ shrink_wrap_one_built_in_call (gimple bi_call)\n \t it could e.g. have EH edges.  */\n       join_tgt_in_edge_from_call = find_fallthru_edge (bi_call_bb->succs);\n       if (join_tgt_in_edge_from_call == NULL)\n-\t{\n-\t  conds.release ();\n-\t  return false;\n-\t}\n+        return false;\n     }\n   else\n     join_tgt_in_edge_from_call = split_block (bi_call_bb, bi_call);\n@@ -832,7 +825,6 @@ shrink_wrap_one_built_in_call (gimple bi_call)\n       guard_bb_in_edge->count = guard_bb->count - bi_call_in_edge->count;\n     }\n \n-  conds.release ();\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       location_t loc;"}, {"sha": "a44cfe884dd941404a9bc0f27fb55326389cd31d", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -743,8 +743,7 @@ dump_enumerated_decls (FILE *file, int flags)\n {\n   basic_block bb;\n   struct walk_stmt_info wi;\n-  vec<numbered_tree> decl_list;\n-  decl_list.create (40);\n+  stack_vec<numbered_tree, 40> decl_list;\n \n   memset (&wi, '\\0', sizeof (wi));\n   wi.info = (void *) &decl_list;\n@@ -775,5 +774,4 @@ dump_enumerated_decls (FILE *file, int flags)\n \t  last = ntp->t;\n \t}\n     }\n-  decl_list.release ();\n }"}, {"sha": "31994b718e57150e27f19cfd269b95bf69b26320", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1165,7 +1165,6 @@ if_convertible_loop_p (struct loop *loop)\n   bool res = false;\n   vec<data_reference_p> refs;\n   vec<ddr_p> ddrs;\n-  vec<loop_p> loop_nest;\n \n   /* Handle only innermost loop.  */\n   if (!loop || loop->inner)\n@@ -1199,7 +1198,7 @@ if_convertible_loop_p (struct loop *loop)\n \n   refs.create (5);\n   ddrs.create (25);\n-  loop_nest.create (3);\n+  stack_vec<loop_p, 3> loop_nest;\n   res = if_convertible_loop_p_1 (loop, &loop_nest, &refs, &ddrs);\n \n   if (flag_tree_loop_if_convert_stores)"}, {"sha": "77013b390cb927902a407f63c775e688c0136c8e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -5187,8 +5187,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   unsigned i;\n   struct ipa_replace_map *replace_info;\n   basic_block old_entry_block, bb;\n-  vec<gimple> init_stmts;\n-  init_stmts.create (10);\n+  stack_vec<gimple, 10> init_stmts;\n   tree vars = NULL_TREE;\n \n   gcc_assert (TREE_CODE (old_decl) == FUNCTION_DECL\n@@ -5446,7 +5445,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   free_dominance_info (CDI_POST_DOMINATORS);\n \n   gcc_assert (!id.debug_stmts.exists ());\n-  init_stmts.release ();\n   pop_cfun ();\n   return;\n }"}, {"sha": "79884bf4272621fcb556ed38afec54899ab991d5", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -436,17 +436,15 @@ static struct graph *\n build_rdg (vec<loop_p> loop_nest, control_dependences *cd)\n {\n   struct graph *rdg;\n-  vec<gimple> stmts;\n   vec<data_reference_p> datarefs;\n \n   /* Create the RDG vertices from the stmts of the loop nest.  */\n-  stmts.create (10);\n+  stack_vec<gimple, 10> stmts;\n   stmts_from_loop (loop_nest[0], &stmts);\n   rdg = new_graph (stmts.length ());\n   datarefs.create (10);\n   if (!create_rdg_vertices (rdg, stmts, loop_nest[0], &datarefs))\n     {\n-      stmts.release ();\n       datarefs.release ();\n       free_rdg (rdg);\n       return NULL;\n@@ -951,11 +949,10 @@ static partition_t\n build_rdg_partition_for_vertex (struct graph *rdg, int v)\n {\n   partition_t partition = partition_alloc (NULL, NULL);\n-  vec<int> nodes;\n+  stack_vec<int, 3> nodes;\n   unsigned i;\n   int x;\n \n-  nodes.create (3);\n   graphds_dfs (rdg, &v, 1, &nodes, false, NULL);\n \n   FOR_EACH_VEC_ELT (nodes, i, x)\n@@ -965,7 +962,6 @@ build_rdg_partition_for_vertex (struct graph *rdg, int v)\n \t\t      loop_containing_stmt (RDG_STMT (rdg, x))->num);\n     }\n \n-  nodes.release ();\n   return partition;\n }\n \n@@ -1388,7 +1384,6 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n \t\t control_dependences *cd, int *nb_calls)\n {\n   struct graph *rdg;\n-  vec<loop_p> loop_nest;\n   vec<partition_t> partitions;\n   partition_t partition;\n   bool any_builtin;\n@@ -1397,12 +1392,9 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n   int num_sccs = 1;\n \n   *nb_calls = 0;\n-  loop_nest.create (3);\n+  stack_vec<loop_p, 3> loop_nest;\n   if (!find_loop_nest (loop, &loop_nest))\n-    {\n-      loop_nest.release ();\n-      return 0;\n-    }\n+    return 0;\n \n   rdg = build_rdg (loop_nest, cd);\n   if (!rdg)\n@@ -1412,7 +1404,6 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n \t\t \"Loop %d not distributed: failed to build the RDG.\\n\",\n \t\t loop->num);\n \n-      loop_nest.release ();\n       return 0;\n     }\n \n@@ -1648,7 +1639,6 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n   partitions.release ();\n \n   free_rdg (rdg);\n-  loop_nest.release ();\n   return nbp - *nb_calls;\n }\n "}, {"sha": "25a0f0ac52b2a9cce5debf7274bf8318ac87bd5d", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -395,7 +395,6 @@ lambda_transform_legal_p (lambda_trans_matrix trans,\n static bool\n loop_parallel_p (struct loop *loop, struct obstack * parloop_obstack)\n {\n-  vec<loop_p> loop_nest;\n   vec<ddr_p> dependence_relations;\n   vec<data_reference_p> datarefs;\n   lambda_trans_matrix trans;\n@@ -412,9 +411,9 @@ loop_parallel_p (struct loop *loop, struct obstack * parloop_obstack)\n \n   /* Check for problems with dependences.  If the loop can be reversed,\n      the iterations are independent.  */\n+  stack_vec<loop_p, 3> loop_nest;\n   datarefs.create (10);\n-  dependence_relations.create (10 * 10);\n-  loop_nest.create (3);\n+  dependence_relations.create (100);\n   if (! compute_data_dependences_for_loop (loop, true, &loop_nest, &datarefs,\n \t\t\t\t\t   &dependence_relations))\n     {\n@@ -440,7 +439,6 @@ loop_parallel_p (struct loop *loop, struct obstack * parloop_obstack)\n \t     \"  FAILED: data dependencies exist across iterations\\n\");\n \n  end:\n-  loop_nest.release ();\n   free_dependence_relations (dependence_relations);\n   free_data_refs (datarefs);\n \n@@ -741,8 +739,7 @@ static void\n eliminate_local_variables (edge entry, edge exit)\n {\n   basic_block bb;\n-  vec<basic_block> body;\n-  body.create (3);\n+  stack_vec<basic_block, 3> body;\n   unsigned i;\n   gimple_stmt_iterator gsi;\n   bool has_debug_stmt = false;\n@@ -772,7 +769,6 @@ eliminate_local_variables (edge entry, edge exit)\n \t    eliminate_local_variables_stmt (entry, &gsi, decl_address);\n \n   decl_address.dispose ();\n-  body.release ();\n }\n \n /* Returns true if expression EXPR is not defined between ENTRY and\n@@ -1297,8 +1293,7 @@ separate_decls_in_region (edge entry, edge exit,\n   tree type, type_name, nvar;\n   gimple_stmt_iterator gsi;\n   struct clsn_data clsn_data;\n-  vec<basic_block> body;\n-  body.create (3);\n+  stack_vec<basic_block, 3> body;\n   basic_block bb;\n   basic_block entry_bb = bb1;\n   basic_block exit_bb = exit->dest;\n@@ -1356,8 +1351,6 @@ separate_decls_in_region (edge entry, edge exit,\n \t    }\n \t}\n \n-  body.release ();\n-\n   if (name_copies.elements () == 0 && reduction_list.elements () == 0)\n     {\n       /* It may happen that there is nothing to copy (if there are only"}, {"sha": "1005e783d0bf09700e4901750164128406cd1ee7", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -2421,7 +2421,6 @@ prepare_initializers (struct loop *loop, vec<chain_p> chains)\n static bool\n tree_predictive_commoning_loop (struct loop *loop)\n {\n-  vec<loop_p> loop_nest;\n   vec<data_reference_p> datarefs;\n   vec<ddr_p> dependences;\n   struct component *components;\n@@ -2437,15 +2436,14 @@ tree_predictive_commoning_loop (struct loop *loop)\n \n   /* Find the data references and split them into components according to their\n      dependence relations.  */\n-  datarefs.create (10);\n+  stack_vec<loop_p, 3> loop_nest;\n   dependences.create (10);\n-  loop_nest.create (3);\n+  datarefs.create (10);\n   if (! compute_data_dependences_for_loop (loop, true, &loop_nest, &datarefs,\n \t\t\t\t\t   &dependences))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Cannot analyze data dependencies\\n\");\n-      loop_nest.release ();\n       free_data_refs (datarefs);\n       free_dependence_relations (dependences);\n       return false;"}, {"sha": "ef114a01a6dd8438b1b67d08d6c2e5e8177b84b4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -1680,7 +1680,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n   data_reference_p then_dr, else_dr;\n   int i, j;\n   tree then_lhs, else_lhs;\n-  vec<gimple> then_stores, else_stores;\n   basic_block blocks[3];\n \n   if (MAX_STORES_TO_SINK == 0)\n@@ -1707,8 +1706,7 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n     }\n \n   /* Find pairs of stores with equal LHS.  */\n-  then_stores.create (1);\n-  else_stores.create (1);\n+  stack_vec<gimple, 1> then_stores, else_stores;\n   FOR_EACH_VEC_ELT (then_datarefs, i, then_dr)\n     {\n       if (DR_IS_READ (then_dr))\n@@ -1746,8 +1744,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n     {\n       free_data_refs (then_datarefs);\n       free_data_refs (else_datarefs);\n-      then_stores.release ();\n-      else_stores.release ();\n       return false;\n     }\n \n@@ -1763,8 +1759,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n       free_dependence_relations (else_ddrs);\n       free_data_refs (then_datarefs);\n       free_data_refs (else_datarefs);\n-      then_stores.release ();\n-      else_stores.release ();\n       return false;\n     }\n   blocks[0] = then_bb;\n@@ -1790,8 +1784,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n           free_dependence_relations (else_ddrs);\n \t  free_data_refs (then_datarefs);\n \t  free_data_refs (else_datarefs);\n-          then_stores.release ();\n-          else_stores.release ();\n           return false;\n         }\n     }\n@@ -1814,8 +1806,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n           free_dependence_relations (else_ddrs);\n \t  free_data_refs (then_datarefs);\n \t  free_data_refs (else_datarefs);\n-          then_stores.release ();\n-          else_stores.release ();\n           return false;\n         }\n     }\n@@ -1833,8 +1823,6 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n   free_dependence_relations (else_ddrs);\n   free_data_refs (then_datarefs);\n   free_data_refs (else_datarefs);\n-  then_stores.release ();\n-  else_stores.release ();\n \n   return ok;\n }"}, {"sha": "5255d7fb73829b4dfc8601e38da7799fa46ac1da", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -361,15 +361,7 @@ record_equiv (tree value, tree equivalence)\n class uncprop_dom_walker : public dom_walker\n {\n public:\n-  uncprop_dom_walker (cdi_direction direction)\n-    : dom_walker (direction)\n-  {\n-    m_equiv_stack.create (2);\n-  }\n-  ~uncprop_dom_walker ()\n-  {\n-    m_equiv_stack.release ();\n-  }\n+  uncprop_dom_walker (cdi_direction direction) : dom_walker (direction) {}\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n@@ -380,7 +372,7 @@ class uncprop_dom_walker : public dom_walker\n      leading to this block.  If no such edge equivalency exists, then we\n      record NULL.  These equivalences are live until we leave the dominator\n      subtree rooted at the block where we record the equivalency.  */\n-  vec<tree> m_equiv_stack;\n+  stack_vec<tree, 2> m_equiv_stack;\n };\n \n /* Main driver for un-cprop.  */"}, {"sha": "d5f86ad00a7f6a7a72a458b1b82b1ce4d22a6551", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -591,8 +591,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n {\n   basic_block bb = loop->header;\n   tree init, step;\n-  vec<gimple> worklist;\n-  worklist.create (64);\n+  stack_vec<gimple, 64> worklist;\n   gimple_stmt_iterator gsi;\n   bool double_reduc;\n \n@@ -723,8 +722,6 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n           dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t   \"Unknown def-use cycle pattern.\\n\");\n     }\n-\n-  worklist.release ();\n }\n \n "}, {"sha": "099880488bc41587c467f8aa1b354eb3b9d0f590", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -3207,8 +3207,7 @@ vect_pattern_recog (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n   gimple_stmt_iterator si;\n   unsigned int i, j;\n   vect_recog_func_ptr vect_recog_func;\n-  vec<gimple> stmts_to_replace;\n-  stmts_to_replace.create (1);\n+  stack_vec<gimple, 1> stmts_to_replace;\n   gimple stmt;\n \n   if (dump_enabled_p ())\n@@ -3248,6 +3247,4 @@ vect_pattern_recog (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n             }\n         }\n     }\n-\n-  stmts_to_replace.release ();\n }"}, {"sha": "c1ba3c7eedb2e6bb3dbff34535bb8c4715f256d9", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07687835bea637072221fdcbeb11cf14c43986f7/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=07687835bea637072221fdcbeb11cf14c43986f7", "patch": "@@ -580,7 +580,6 @@ process_use (gimple stmt, tree use, loop_vec_info loop_vinfo, bool live_p,\n bool\n vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n {\n-  vec<gimple> worklist;\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n   unsigned int nbbs = loop->num_nodes;\n@@ -598,7 +597,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_mark_stmts_to_be_vectorized ===\\n\");\n \n-  worklist.create (64);\n+  stack_vec<gimple, 64> worklist;\n \n   /* 1. Init worklist.  */\n   for (i = 0; i < nbbs; i++)\n@@ -688,7 +687,6 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t          if (dump_enabled_p ())\n \t            dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                      \"unsupported use of reduction.\\n\");\n-  \t          worklist.release ();\n \t          return false;\n \t      }\n \n@@ -704,7 +702,6 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n                   dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                    \"unsupported use of nested cycle.\\n\");\n \n-                worklist.release ();\n                 return false;\n               }\n \n@@ -719,7 +716,6 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n                   dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                    \"unsupported use of double reduction.\\n\");\n \n-                worklist.release ();\n                 return false;\n               }\n \n@@ -747,21 +743,15 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t\t\t\t    live_p, relevant, &worklist, false)\n \t\t      || !process_use (stmt, TREE_OPERAND (op, 1), loop_vinfo,\n \t\t\t\t       live_p, relevant, &worklist, false))\n-\t\t    {\n-\t\t      worklist.release ();\n-\t\t      return false;\n-\t\t    }\n+        return false;\n \t\t  i = 2;\n \t\t}\n \t      for (; i < gimple_num_ops (stmt); i++)\n                 {\n \t\t  op = gimple_op (stmt, i);\n                   if (!process_use (stmt, op, loop_vinfo, live_p, relevant,\n \t\t\t\t    &worklist, false))\n-                    {\n-                      worklist.release ();\n-                      return false;\n-                    }\n+                    return false;\n                  }\n             }\n           else if (is_gimple_call (stmt))\n@@ -771,10 +761,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n                   tree arg = gimple_call_arg (stmt, i);\n                   if (!process_use (stmt, arg, loop_vinfo, live_p, relevant,\n \t\t\t\t    &worklist, false))\n-                    {\n-                      worklist.release ();\n-                      return false;\n-                    }\n+                    return false;\n                 }\n             }\n         }\n@@ -784,10 +771,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n             tree op = USE_FROM_PTR (use_p);\n             if (!process_use (stmt, op, loop_vinfo, live_p, relevant,\n \t\t\t      &worklist, false))\n-              {\n-                worklist.release ();\n-                return false;\n-              }\n+              return false;\n           }\n \n       if (STMT_VINFO_GATHER_P (stmt_vinfo))\n@@ -797,14 +781,10 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t  gcc_assert (decl);\n \t  if (!process_use (stmt, off, loop_vinfo, live_p, relevant,\n \t\t\t    &worklist, true))\n-\t    {\n-\t      worklist.release ();\n-\t      return false;\n-\t    }\n+      return false;\n \t}\n     } /* while worklist */\n \n-  worklist.release ();\n   return true;\n }\n \n@@ -5552,11 +5532,9 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n \t{\n           if (slp_node)\n             {\n-              vec<tree> ops;\n-\t      ops.create (4);\n-\t      vec<vec<tree> > vec_defs;\n+              stack_vec<tree, 4> ops;\n+\t      stack_vec<vec<tree>, 4> vec_defs;\n \n-\t      vec_defs.create (4);\n               ops.safe_push (TREE_OPERAND (cond_expr, 0));\n               ops.safe_push (TREE_OPERAND (cond_expr, 1));\n               ops.safe_push (then_clause);"}]}