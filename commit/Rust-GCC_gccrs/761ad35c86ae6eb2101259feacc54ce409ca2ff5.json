{"sha": "761ad35c86ae6eb2101259feacc54ce409ca2ff5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxYWQzNWM4NmFlNmViMjEwMTI1OWZlYWNjNTRjZTQwOWNhMmZmNQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "v.reichelt@netcologne.de", "date": "2017-04-24T20:30:29Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2017-04-24T20:30:29Z"}, "message": "decl.c (grokdeclarator): Use %qT instead of %<%T%> in\n\n        * decl.c (grokdeclarator): Use %qT instead of %<%T%> in\n        * diagnostics.\n        (start_enum): Likewise.\n        (build_enumerator): Likewise. Use %qE instead of plain %E.\n        * parser.c (cp_parser_mem_initializer_list): Use %qD instead of\n        %<%D%> in diagnostics.\n        (cp_parser_elaborated_type_specifier): Likewise.\n        * pt.c (make_pack_expansion): Use %qT and %qE instead of\n        %<%T%> and %<%E%> in diagnostics.\n        (tsubst_pack_expansion): Likewise.\n\nFrom-SVN: r247110", "tree": {"sha": "4fdb83c9cc16223cf32faf0e6675b989e4080a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fdb83c9cc16223cf32faf0e6675b989e4080a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761ad35c86ae6eb2101259feacc54ce409ca2ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761ad35c86ae6eb2101259feacc54ce409ca2ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761ad35c86ae6eb2101259feacc54ce409ca2ff5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761ad35c86ae6eb2101259feacc54ce409ca2ff5/comments", "author": {"login": "VReichelt", "id": 85767072, "node_id": "MDQ6VXNlcjg1NzY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/85767072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VReichelt", "html_url": "https://github.com/VReichelt", "followers_url": "https://api.github.com/users/VReichelt/followers", "following_url": "https://api.github.com/users/VReichelt/following{/other_user}", "gists_url": "https://api.github.com/users/VReichelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/VReichelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VReichelt/subscriptions", "organizations_url": "https://api.github.com/users/VReichelt/orgs", "repos_url": "https://api.github.com/users/VReichelt/repos", "events_url": "https://api.github.com/users/VReichelt/events{/privacy}", "received_events_url": "https://api.github.com/users/VReichelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "412f61f0f6ee495f3dd076debd9db536aa386a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412f61f0f6ee495f3dd076debd9db536aa386a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412f61f0f6ee495f3dd076debd9db536aa386a26"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "ecdf61630b531d3bb0ca719faa72b794bba57b02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=761ad35c86ae6eb2101259feacc54ce409ca2ff5", "patch": "@@ -1,3 +1,15 @@\n+2017-04-24  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* decl.c (grokdeclarator): Use %qT instead of %<%T%> in diagnostics.\n+\t(start_enum): Likewise.\n+\t(build_enumerator): Likewise. Use %qE instead of plain %E.\n+\t* parser.c (cp_parser_mem_initializer_list): Use %qD instead of\n+\t%<%D%> in diagnostics.\n+\t(cp_parser_elaborated_type_specifier): Likewise.\n+\t* pt.c (make_pack_expansion): Use %qT and %qE instead of\n+\t%<%T%> and %<%E%> in diagnostics.\n+\t(tsubst_pack_expansion): Likewise.\n+\n 2017-04-24  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/80016"}, {"sha": "8c8cf84a1da77d9443574cc0c0e4ceb2926a90ac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=761ad35c86ae6eb2101259feacc54ce409ca2ff5", "patch": "@@ -11433,9 +11433,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t    {\n \t      error (funcdef_flag || initialized\n \t\t     ? G_(\"cannot define member function %<%T::%s%> \"\n-\t\t\t  \"within %<%T%>\")\n+\t\t\t  \"within %qT\")\n \t\t     : G_(\"cannot declare member function %<%T::%s%> \"\n-\t\t\t  \"within %<%T%>\"),\n+\t\t\t  \"within %qT\"),\n \t\t     ctype, name, current_class_type);\n \t      return error_mark_node;\n \t    }\n@@ -14150,7 +14150,7 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n       else if (dependent_type_p (underlying_type))\n \tENUM_UNDERLYING_TYPE (enumtype) = underlying_type;\n       else\n-        error (\"underlying type %<%T%> of %<%T%> must be an integral type\", \n+        error (\"underlying type %qT of %qT must be an integral type\", \n                underlying_type, enumtype);\n     }\n \n@@ -14560,8 +14560,8 @@ incremented enumerator value is too large for %<long%>\"));\n           && TREE_CODE (value) == INTEGER_CST)\n         {\n \t  if (!int_fits_type_p (value, ENUM_UNDERLYING_TYPE (enumtype)))\n-\t    error (\"enumerator value %E is outside the range of underlying \"\n-\t\t   \"type %<%T%>\", value, ENUM_UNDERLYING_TYPE (enumtype));\n+\t    error (\"enumerator value %qE is outside the range of underlying \"\n+\t\t   \"type %qT\", value, ENUM_UNDERLYING_TYPE (enumtype));\n \n           /* Convert the value to the appropriate type.  */\n           value = fold_convert (ENUM_UNDERLYING_TYPE (enumtype), value);"}, {"sha": "31eb3d2e155f0d08b461855b86780c3007b99745", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=761ad35c86ae6eb2101259feacc54ce409ca2ff5", "patch": "@@ -14084,7 +14084,7 @@ cp_parser_mem_initializer_list (cp_parser* parser)\n               && !TYPE_P (TREE_PURPOSE (mem_initializer)))\n             {\n               error_at (token->location,\n-\t\t\t\"cannot expand initializer for member %<%D%>\",\n+\t\t\t\"cannot expand initializer for member %qD\",\n \t\t\tTREE_PURPOSE (mem_initializer));\n               mem_initializer = error_mark_node;\n             }\n@@ -17274,7 +17274,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t  || cp_lexer_next_token_is_keyword (parser->lexer, RID_STRUCT))\n \t{\n \t    pedwarn (input_location, 0, \"elaborated-type-specifier \"\n-\t\t      \"for a scoped enum must not use the %<%D%> keyword\",\n+\t\t      \"for a scoped enum must not use the %qD keyword\",\n \t\t      cp_lexer_peek_token (parser->lexer)->u.value);\n \t  /* Consume the `struct' or `class' and parse it anyway.  */\n \t  cp_lexer_consume_token (parser->lexer);"}, {"sha": "cf6ba6dc9e6b2f0cd2d709878a66e22628013987", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761ad35c86ae6eb2101259feacc54ce409ca2ff5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=761ad35c86ae6eb2101259feacc54ce409ca2ff5", "patch": "@@ -3701,7 +3701,7 @@ make_pack_expansion (tree arg)\n \n       if (parameter_packs == NULL_TREE)\n         {\n-          error (\"base initializer expansion %<%T%> contains no parameter packs\", arg);\n+          error (\"base initializer expansion %qT contains no parameter packs\", arg);\n           delete ppd.visited;\n           return error_mark_node;\n         }\n@@ -3765,9 +3765,9 @@ make_pack_expansion (tree arg)\n   if (parameter_packs == NULL_TREE)\n     {\n       if (TYPE_P (arg))\n-        error (\"expansion pattern %<%T%> contains no argument packs\", arg);\n+        error (\"expansion pattern %qT contains no argument packs\", arg);\n       else\n-        error (\"expansion pattern %<%E%> contains no argument packs\", arg);\n+        error (\"expansion pattern %qE contains no argument packs\", arg);\n       return error_mark_node;\n     }\n   PACK_EXPANSION_PARAMETER_PACKS (result) = parameter_packs;\n@@ -11409,12 +11409,10 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t      if (!(complain & tf_error))\n \t\t/* Fail quietly.  */;\n               else if (TREE_CODE (t) == TYPE_PACK_EXPANSION)\n-                error (\"mismatched argument pack lengths while expanding \"\n-                       \"%<%T%>\",\n+                error (\"mismatched argument pack lengths while expanding %qT\",\n                        pattern);\n               else\n-                error (\"mismatched argument pack lengths while expanding \"\n-                       \"%<%E%>\",\n+                error (\"mismatched argument pack lengths while expanding %qE\",\n                        pattern);\n               return error_mark_node;\n             }"}]}