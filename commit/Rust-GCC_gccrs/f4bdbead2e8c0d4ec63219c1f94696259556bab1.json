{"sha": "f4bdbead2e8c0d4ec63219c1f94696259556bab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiZGJlYWQyZThjMGQ0ZWM2MzIxOWMxZjk0Njk2MjU5NTU2YmFiMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-27T10:12:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-27T10:12:01Z"}, "message": "locale_facets.h (money_get<>::_M_extract): Change signature: now takes a plain string&.\n\n2004-02-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (money_get<>::_M_extract):\n\tChange signature: now takes a plain string&.\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n\tUpdate consistently the definition; use the moneypunct cache\n\tto parse the value; use swap to change __units.\n\t(money_get<>::do_get(long double&)): Update call of _M_extract,\n\tavoid ctype::narrow, not correct wrt the standard.\n\t(money_get<>::do_get(string_type&)): Likewise, update call\n\tof _M_extract, use ctype::widen.\n\t* src/locale-inst.cc: Tweak instantiations of _M_extract.\n\nFrom-SVN: r78562", "tree": {"sha": "573d60da293db9dc5e30cf1961f83d9bf0d701bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/573d60da293db9dc5e30cf1961f83d9bf0d701bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4bdbead2e8c0d4ec63219c1f94696259556bab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bdbead2e8c0d4ec63219c1f94696259556bab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bdbead2e8c0d4ec63219c1f94696259556bab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bdbead2e8c0d4ec63219c1f94696259556bab1/comments", "author": null, "committer": null, "parents": [{"sha": "f6db1481a7e4e5c6d97baecde520bcf60487deb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6db1481a7e4e5c6d97baecde520bcf60487deb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6db1481a7e4e5c6d97baecde520bcf60487deb5"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "4fbf39cc57b0fd005c1fc3a70322f456b8b0788c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4bdbead2e8c0d4ec63219c1f94696259556bab1", "patch": "@@ -1,3 +1,16 @@\n+2004-02-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (money_get<>::_M_extract):\n+\tChange signature: now takes a plain string&.\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n+\tUpdate consistently the definition; use the moneypunct cache\n+\tto parse the value; use swap to change __units.\n+\t(money_get<>::do_get(long double&)): Update call of _M_extract,\n+\tavoid ctype::narrow, not correct wrt the standard.\n+\t(money_get<>::do_get(string_type&)): Likewise, update call\n+\tof _M_extract, use ctype::widen.\n+\t* src/locale-inst.cc: Tweak instantiations of _M_extract.\n+\n 2004-02-26  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* testsuite/demangle/abi_examples/01.cc: Expect error -2."}, {"sha": "cd725f52ad16c5ea96a4c97e4ae65ab5fa00f8c2", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=f4bdbead2e8c0d4ec63219c1f94696259556bab1", "patch": "@@ -4128,7 +4128,7 @@ namespace std\n       template<bool _Intl>\n         iter_type\n         _M_extract(iter_type __s, iter_type __end, ios_base& __io,\n-\t\t   ios_base::iostate& __err, string_type& __digits) const;     \n+\t\t   ios_base::iostate& __err, string& __digits) const;     \n     };\n \n   template<typename _CharT, typename _InIter>"}, {"sha": "b5bd407bdcee2594863b4361253f3a3392c22503", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=f4bdbead2e8c0d4ec63219c1f94696259556bab1", "patch": "@@ -1163,8 +1163,9 @@ namespace std\n       _InIter\n       money_get<_CharT, _InIter>::\n       _M_extract(iter_type __beg, iter_type __end, ios_base& __io,\n-\t\t ios_base::iostate& __err, string_type& __units) const\n+\t\t ios_base::iostate& __err, string& __units) const\n       {\n+\ttypedef char_traits<_CharT>\t\t\t  __traits_type;\n \ttypedef typename string_type::size_type\t          size_type;\t\n \ttypedef money_base::part\t\t\t  part;\n \ttypedef moneypunct<_CharT, _Intl>\t\t  __moneypunct_type;\n@@ -1193,12 +1194,13 @@ namespace std\n \tbool __testdecfound = false;\n \n \t// The tentative returned string is stored here.\n-\tstring_type __res;\n-\t__res.reserve(20);\n+\tstring __res;\n+\t__res.reserve(32);\n \n+\tconst char_type* __lit_zero = __lit + _S_zero;\n+\tconst char_type* __q;\n \tfor (int __i = 0; __beg != __end && __i < 4 && __testvalid; ++__i)\n \t  {\n-\t    char_type __c;\n \t    const part __which = static_cast<part>(__p.field[__i]);\n \t    switch (__which)\n \t      {\n@@ -1257,12 +1259,12 @@ namespace std\n \t\t// Extract digits, remove and stash away the\n \t\t// grouping of found thousands separators.\n \t\tfor (; __beg != __end; ++__beg)\n-\t\t  if (__ctype.is(ctype_base::digit, __c = *__beg))\n+\t\t  if (__q = __traits_type::find(__lit_zero, 10, *__beg))\n \t\t    {\n-\t\t      __res += __c;\n+\t\t      __res += _S_atoms[__q - __lit];\n \t\t      ++__sep_pos;\n \t\t    }\n-\t\t  else if (__c == __lc->_M_decimal_point && !__testdecfound)\n+\t\t  else if (*__beg == __lc->_M_decimal_point && !__testdecfound)\n \t\t    {\n \t\t      // If no grouping chars are seen, no grouping check\n \t\t      // is applied. Therefore __grouping_tmp is adjusted\n@@ -1272,7 +1274,7 @@ namespace std\n \t\t      __sep_pos = 0;\n \t\t      __testdecfound = true;\n \t\t    }\n-\t\t  else if (__c == __lc->_M_thousands_sep && !__testdecfound)\n+\t\t  else if (*__beg == __lc->_M_thousands_sep && !__testdecfound)\n \t\t    {\n \t\t      if (__lc->_M_grouping_size)\n \t\t\t{\n@@ -1358,7 +1360,7 @@ namespace std\n \tif (!__testvalid)\n \t  __err |= ios_base::failbit;\n \telse\n-\t  __units.assign(__res.data(), __res.size());\n+\t  __units.swap(__res);\n \t\n \treturn __beg;\n       }\n@@ -1369,19 +1371,15 @@ namespace std\n     do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n \t   ios_base::iostate& __err, long double& __units) const\n     {\n-      string_type __str;\n+      string __str;\n       if (__intl)\n \t__beg = _M_extract<true>(__beg, __end, __io, __err, __str);\n       else\n \t__beg = _M_extract<false>(__beg, __end, __io, __err, __str);\n \n-      const int __cs_size = __str.size() + 1;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      const locale __loc = __io.getloc();\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      const _CharT* __wcs = __str.c_str();\n-      __ctype.narrow(__wcs, __wcs + __cs_size, char(), __cs);\n-      std::__convert_to_v(__cs, __units, __err, _S_get_c_locale());\n+      if (__str.size())\n+\tstd::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());\n+\n       return __beg;\n     }\n \n@@ -1390,8 +1388,28 @@ namespace std\n     money_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n \t   ios_base::iostate& __err, string_type& __units) const\n-    { return __intl ? _M_extract<true>(__beg, __end, __io, __err, __units)\n-\t            : _M_extract<false>(__beg, __end, __io, __err, __units); }\n+    {\n+      typedef typename string_type::size_type             size_type;\n+\n+      const locale& __loc = __io._M_getloc();\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n+\n+      string __str;\n+      const iter_type __ret = __intl ? _M_extract<true>(__beg, __end, __io,\n+\t\t\t\t\t\t\t__err, __str)\n+\t                             : _M_extract<false>(__beg, __end, __io,\n+\t\t\t\t\t\t\t __err, __str);\n+      const size_type __len = __str.size();\n+      if (__len)\n+\t{\n+\t  _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t       * __len));\n+\t  __ctype.widen(__str.data(), __str.data() + __len, __ws);\n+\t  __units.assign(__ws, __len);\n+\t}\n+\n+      return __ret;\n+    }\n \n   template<typename _CharT, typename _OutIter>\n     template<bool _Intl>"}, {"sha": "3aeb55366f9c8c9bcdff1e5bd854b877b28fd5b8", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bdbead2e8c0d4ec63219c1f94696259556bab1/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=f4bdbead2e8c0d4ec63219c1f94696259556bab1", "patch": "@@ -54,13 +54,13 @@ namespace std\n     istreambuf_iterator<C>\n     money_get<C, istreambuf_iterator<C> >::\n     _M_extract<true>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t     ios_base&, ios_base::iostate&, string_type&) const;\n+\t\t     ios_base&, ios_base::iostate&, string&) const;\n \n   template\n     istreambuf_iterator<C>\n     money_get<C, istreambuf_iterator<C> >::\n     _M_extract<false>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t      ios_base&, ios_base::iostate&, string_type&) const;\n+\t\t      ios_base&, ios_base::iostate&, string&) const;\n \n   template\n     ostreambuf_iterator<C>"}]}