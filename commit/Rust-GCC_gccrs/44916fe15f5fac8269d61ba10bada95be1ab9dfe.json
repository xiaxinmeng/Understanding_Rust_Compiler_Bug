{"sha": "44916fe15f5fac8269d61ba10bada95be1ab9dfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ5MTZmZTE1ZjVmYWM4MjY5ZDYxYmExMGJhZGE5NWJlMWFiOWRmZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-12-06T23:08:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-12-06T23:08:41Z"}, "message": "testsuite_tr1.h (test_category, [...]): constexpr in c++11 mode.\n\n2013-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_tr1.h (test_category, test_property,\n\ttest_relationship): constexpr in c++11 mode.\n\t* testsuite/20_util/add_lvalue_reference/value.cc: Use static_assert\n\tand change to dg-do compile testcase.\n\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/aligned_storage/value.cc: Likewise.\n\t* testsuite/20_util/has_trivial_copy_assign/value.cc: Likewise.\n\t* testsuite/20_util/has_trivial_copy_constructor/value.cc: Likewise.\n\t* testsuite/20_util/has_trivial_default_constructor/value.cc: Likewise.\n\t* testsuite/20_util/is_compound/value.cc: Likewise.\n\t* testsuite/20_util/is_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_convertible/value.cc: Likewise.\n\t* testsuite/20_util/is_copy_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n\t* testsuite/20_util/is_function/value.cc: Likewise.\n\t* testsuite/20_util/is_fundamental/value.cc: Likewise.\n\t* testsuite/20_util/is_integral/value.cc: Likewise.\n\t* testsuite/20_util/is_literal_type/value.cc: Likewise.\n\t* testsuite/20_util/is_lvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_member_function_pointer/value.cc: Likewise.\n\t* testsuite/20_util/is_member_object_pointer/value.cc: Likewise.\n\t* testsuite/20_util/is_member_pointer/value.cc: Likewise.\n\t* testsuite/20_util/is_move_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_default_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_null_pointer/value.cc: Likewise.\n\t* testsuite/20_util/is_object/value.cc: Likewise.\n\t* testsuite/20_util/is_pod/value.cc: Likewise.\n\t* testsuite/20_util/is_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_rvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/is_scalar/value.cc: Likewise.\n\t* testsuite/20_util/is_signed/value.cc: Likewise.\n\t* testsuite/20_util/is_standard_layout/value.cc: Likewise.\n\t* testsuite/20_util/is_trivial/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_destructible/value.cc: Likewise.\n\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/remove_reference/value.cc: Likewise.\n\nFrom-SVN: r205766", "tree": {"sha": "c70b305b4a24df50c3c11b28165330651d8dba1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70b305b4a24df50c3c11b28165330651d8dba1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44916fe15f5fac8269d61ba10bada95be1ab9dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44916fe15f5fac8269d61ba10bada95be1ab9dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44916fe15f5fac8269d61ba10bada95be1ab9dfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44916fe15f5fac8269d61ba10bada95be1ab9dfe/comments", "author": null, "committer": null, "parents": [{"sha": "07d50f394d461ee10cb2852ecbc649de4778e062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d50f394d461ee10cb2852ecbc649de4778e062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d50f394d461ee10cb2852ecbc649de4778e062"}], "stats": {"total": 2491, "additions": 1200, "deletions": 1291}, "files": [{"sha": "e437e5eecbcf6526a7b88b94ac8f84dcd0da869c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,3 +1,53 @@\n+2013-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_tr1.h (test_category, test_property,\n+\ttest_relationship): constexpr in c++11 mode.\n+\t* testsuite/20_util/add_lvalue_reference/value.cc: Use static_assert\n+\tand change to dg-do compile testcase.\n+\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/aligned_storage/value.cc: Likewise.\n+\t* testsuite/20_util/has_trivial_copy_assign/value.cc: Likewise.\n+\t* testsuite/20_util/has_trivial_copy_constructor/value.cc: Likewise.\n+\t* testsuite/20_util/has_trivial_default_constructor/value.cc: Likewise.\n+\t* testsuite/20_util/is_compound/value.cc: Likewise.\n+\t* testsuite/20_util/is_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_convertible/value.cc: Likewise.\n+\t* testsuite/20_util/is_copy_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n+\t* testsuite/20_util/is_function/value.cc: Likewise.\n+\t* testsuite/20_util/is_fundamental/value.cc: Likewise.\n+\t* testsuite/20_util/is_integral/value.cc: Likewise.\n+\t* testsuite/20_util/is_literal_type/value.cc: Likewise.\n+\t* testsuite/20_util/is_lvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_member_function_pointer/value.cc: Likewise.\n+\t* testsuite/20_util/is_member_object_pointer/value.cc: Likewise.\n+\t* testsuite/20_util/is_member_pointer/value.cc: Likewise.\n+\t* testsuite/20_util/is_move_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_default_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_null_pointer/value.cc: Likewise.\n+\t* testsuite/20_util/is_object/value.cc: Likewise.\n+\t* testsuite/20_util/is_pod/value.cc: Likewise.\n+\t* testsuite/20_util/is_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_rvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/is_scalar/value.cc: Likewise.\n+\t* testsuite/20_util/is_signed/value.cc: Likewise.\n+\t* testsuite/20_util/is_standard_layout/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivial/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_destructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/remove_reference/value.cc: Likewise.\n+\n 2013-12-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/fstream (basic_filebuf::open): Use preformatted text"}, {"sha": "ed862865146b2274cd451ad82018275fe40981e7", "filename": "libstdc++-v3/testsuite/20_util/add_lvalue_reference/value.cc", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,35 +21,37 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::add_lvalue_reference;\n   using std::is_same;\n   using namespace __gnu_test;\n \n-  VERIFY( (is_same<add_lvalue_reference<int>::type, int&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<int&>::type, int&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<const int>::type, const int&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<int*>::type, int*&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<ClassType&>::type, ClassType&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<ClassType>::type, ClassType&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<int(int)>::type, int(&)(int)>::value) );  \n-  VERIFY( (is_same<add_lvalue_reference<int&&>::type, int&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<ClassType&&>::type, ClassType&>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<void>::type, void>::value) );\n-  VERIFY( (is_same<add_lvalue_reference<const void>::type, const void>::value) );  \n-  VERIFY( (is_same<add_lvalue_reference<bool(int) const>::type, bool(int) const>::value) );  \n-  VERIFY( (is_same<add_lvalue_reference<bool(int) &>::type, bool(int) &>::value) );  \n-  VERIFY( (is_same<add_lvalue_reference<bool(int) const &&>::type, bool(int) const &&>::value) );  \n-  VERIFY( (is_same<add_lvalue_reference<bool(int)>::type, bool(&)(int)>::value) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(is_same<add_lvalue_reference<int>::type, int&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<int&>::type, int&>::value, \"\" );\n+  static_assert(is_same<add_lvalue_reference<const int>::type,\n+\t\tconst int&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<int*>::type, int*&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<ClassType&>::type,\n+\t\tClassType&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<ClassType>::type,\n+\t\tClassType&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<int(int)>::type,\n+\t\tint(&)(int)>::value, \"\");  \n+  static_assert(is_same<add_lvalue_reference<int&&>::type, int&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<ClassType&&>::type,\n+\t\tClassType&>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<void>::type, void>::value, \"\");\n+  static_assert(is_same<add_lvalue_reference<const void>::type,\n+\t\tconst void>::value, \"\");  \n+  static_assert(is_same<add_lvalue_reference<bool(int) const>::type,\n+\t\tbool(int) const>::value, \"\");  \n+  static_assert(is_same<add_lvalue_reference<bool(int) &>::type,\n+\t\tbool(int) &>::value, \"\");  \n+  static_assert(is_same<add_lvalue_reference<bool(int) const &&>::type,\n+\t\tbool(int) const &&>::value, \"\");  \n+  static_assert(is_same<add_lvalue_reference<bool(int)>::type,\n+\t\tbool(&)(int)>::value, \"\");\n }"}, {"sha": "468c438fdd1246c08cd560b8f41d23c26cb12db6", "filename": "libstdc++-v3/testsuite/20_util/add_rvalue_reference/value.cc", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,34 +21,35 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::add_rvalue_reference;\n   using std::is_same;\n   using namespace __gnu_test;\n \n-  VERIFY( (is_same<add_rvalue_reference<int>::type, int&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<int&&>::type, int&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<int&>::type, int&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<const int>::type, const int&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<int*>::type, int*&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<ClassType&&>::type, ClassType&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<ClassType>::type, ClassType&&>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<int(int)>::type, int(&&)(int)>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<void>::type, void>::value) );\n-  VERIFY( (is_same<add_rvalue_reference<const void>::type, const void>::value) );  \n-  VERIFY( (is_same<add_rvalue_reference<bool(int) const>::type, bool(int) const>::value) );  \n-  VERIFY( (is_same<add_rvalue_reference<bool(int) &>::type, bool(int) &>::value) );  \n-  VERIFY( (is_same<add_rvalue_reference<bool(int) const &&>::type, bool(int) const &&>::value) );  \n-  VERIFY( (is_same<add_rvalue_reference<bool(int)>::type, bool(&&)(int)>::value) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(is_same<add_rvalue_reference<int>::type, int&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<int&&>::type, int&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<int&>::type, int&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<const int>::type,\n+\t\tconst int&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<int*>::type, int*&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<ClassType&&>::type,\n+\t\tClassType&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<ClassType>::type,\n+\t\tClassType&&>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<int(int)>::type,\n+\t\tint(&&)(int)>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<void>::type, void>::value, \"\");\n+  static_assert(is_same<add_rvalue_reference<const void>::type,\n+\t\tconst void>::value, \"\");  \n+  static_assert(is_same<add_rvalue_reference<bool(int) const>::type,\n+\t\tbool(int) const>::value, \"\");  \n+  static_assert(is_same<add_rvalue_reference<bool(int) &>::type,\n+\t\tbool(int) &>::value, \"\");  \n+  static_assert(is_same<add_rvalue_reference<bool(int) const &&>::type,\n+\t\tbool(int) const &&>::value, \"\");  \n+  static_assert(is_same<add_rvalue_reference<bool(int)>::type,\n+\t\tbool(&&)(int)>::value, \"\");  \n }"}, {"sha": "4edbdbed7930b09335ec7bed2961065517daa23b", "filename": "libstdc++-v3/testsuite/20_util/aligned_storage/value.cc", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_storage%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n // { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n // 2007-09-17  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,49 +20,43 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n struct MSAlignType { } __attribute__((__aligned__));  \n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::aligned_storage;\n   using std::alignment_of;\n   using namespace __gnu_test;\n   \n   const std::size_t align_c = alignment_of<char>::value;\n-  VERIFY( (sizeof(aligned_storage<4, align_c>::type) >= 4) );\n-  VERIFY( (__alignof__(aligned_storage<4, align_c>::type) == align_c) );\n+  static_assert(sizeof(aligned_storage<4, align_c>::type) >= 4, \"\");\n+  static_assert(__alignof__(aligned_storage<4, align_c>::type) == align_c, \"\");\n \n   const std::size_t align_s = alignment_of<short>::value;\n-  VERIFY( (sizeof(aligned_storage<1, align_s>::type) >= 1) );\n-  VERIFY( (__alignof__(aligned_storage<1, align_s>::type) == align_s) );\n+  static_assert(sizeof(aligned_storage<1, align_s>::type) >= 1, \"\");\n+  static_assert(__alignof__(aligned_storage<1, align_s>::type) == align_s, \"\");\n \n   const std::size_t align_i = alignment_of<int>::value;\n-  VERIFY( (sizeof(aligned_storage<7, align_i>::type) >= 7) );\n-  VERIFY( (__alignof__(aligned_storage<7, align_i>::type) == align_i) );\n+  static_assert(sizeof(aligned_storage<7, align_i>::type) >= 7, \"\");\n+  static_assert(__alignof__(aligned_storage<7, align_i>::type) == align_i, \"\");\n \n   const std::size_t align_d = alignment_of<double>::value;\n-  VERIFY( (sizeof(aligned_storage<2, align_d>::type) >= 2) );\n-  VERIFY( (__alignof__(aligned_storage<2, align_d>::type) == align_d) );\n+  static_assert(sizeof(aligned_storage<2, align_d>::type) >= 2, \"\");\n+  static_assert(__alignof__(aligned_storage<2, align_d>::type) == align_d, \"\");\n \n   const std::size_t align_ai = alignment_of<int[4]>::value;\n-  VERIFY( (sizeof(aligned_storage<20, align_ai>::type) >= 20) );\n-  VERIFY( (__alignof__(aligned_storage<20, align_ai>::type) == align_ai) );\n+  static_assert(sizeof(aligned_storage<20, align_ai>::type) >= 20, \"\");\n+  static_assert(__alignof__(aligned_storage<20, align_ai>::type) == align_ai,\n+\t\t\"\");\n \n   const std::size_t align_ct = alignment_of<ClassType>::value;\n-  VERIFY( (sizeof(aligned_storage<11, align_ct>::type) >= 11) );\n-  VERIFY( (__alignof__(aligned_storage<11, align_ct>::type) == align_ct) );\n+  static_assert(sizeof(aligned_storage<11, align_ct>::type) >= 11, \"\");\n+  static_assert(__alignof__(aligned_storage<11, align_ct>::type) == align_ct,\n+\t\t\"\");\n \n   const std::size_t align_msa = alignment_of<MSAlignType>::value;\n-  VERIFY( (sizeof(aligned_storage<5>::type) >= 5) );\n-  VERIFY( (__alignof__(aligned_storage<5>::type) == align_msa) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(sizeof(aligned_storage<5>::type) >= 5, \"\");\n+  static_assert(__alignof__(aligned_storage<5>::type) == align_msa, \"\");\n }"}, {"sha": "3e7568d0bb0428077809979875a21b14113afa52", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_copy_assign/value.cc", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_assign%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_assign%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_assign%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,39 +21,34 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::has_trivial_copy_assign;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_property<has_trivial_copy_assign, int>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, float>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, EnumType>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int*>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int(*)(int)>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int (ClassType::*)>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int[2]>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, float[][3]>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int*[3]>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_property<has_trivial_copy_assign,\n-\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+  static_assert(test_property<has_trivial_copy_assign, int>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, float>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, EnumType>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, int*>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, int(*)(int)>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, int[2]>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, float[][3]>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tEnumType[2][3][4]>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign, int*[3]>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tint(*[][2])(int)>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tint (ClassType::*[2][3])>(true), \"\");\n+  static_assert(test_property<has_trivial_copy_assign,\n+\t\tint (ClassType::*[][2][3]) (int)>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<has_trivial_copy_assign, void>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<has_trivial_copy_assign, void>(false), \"\");\n }"}, {"sha": "5e91308de50f6dc2c2fb290bb0f865bba18226fb", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_copy_constructor/value.cc", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2004-2013 Free Software Foundation, Inc.\n@@ -21,38 +23,38 @@\n // 4.5.3 Type properties\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::has_trivial_copy_constructor;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<has_trivial_copy_constructor, int>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, float>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, EnumType>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int*>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int(*)(int)>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int[2]>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, float[][3]>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int*[3]>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<has_trivial_copy_constructor,\n-\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+  static_assert(test_category<has_trivial_copy_constructor, int>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor, float>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tEnumType>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor, int*>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor, int[2]>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tfloat[][3]>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tEnumType[2][3][4]>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor, int*[3]>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint(*[][2])(int)>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint (ClassType::*[2][3])>(true), \"\");\n+  static_assert(test_category<has_trivial_copy_constructor,\n+\t\tint (ClassType::*[][2][3]) (int)>(true), \"\");\n \n   // Negative tests.  \n-  VERIFY( (test_category<has_trivial_copy_constructor, void>(false)) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<has_trivial_copy_constructor, void>(false), \"\");  \n }"}, {"sha": "c04908633a73f4bd55dccb819bf427b0b1e49818", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_default_constructor/value.cc", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2004-12-26  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2004-2013 Free Software Foundation, Inc.\n@@ -21,41 +23,44 @@\n // 4.5.3 Type properties\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::has_trivial_default_constructor;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<has_trivial_default_constructor, int>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, float>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, EnumType>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int*>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int(*)(int)>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int[2]>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, float[][3]>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int*[3]>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor,\n-\t   int (ClassType::*[][2][3]) (int)>(true)) );\n-  VERIFY( (test_category<has_trivial_default_constructor, ClassType>(true)) );\n+  static_assert(test_category<has_trivial_default_constructor, int>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tfloat>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tEnumType>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor, int*>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint[2]>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tfloat[][3]>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tEnumType[2][3][4]>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint*[3]>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint(*[][2])(int)>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint (ClassType::*[2][3])>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tint (ClassType::*[][2][3]) (int)>(true), \"\");\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tClassType>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<has_trivial_default_constructor, void>(false)) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<has_trivial_default_constructor,\n+\t\tvoid>(false), \"\");  \n }"}, {"sha": "ac04f55081f3eb4c85e190629f86f18f4bc9deb9", "filename": "libstdc++-v3/testsuite/20_util/is_compound/value.cc", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,43 +19,35 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_compound;\n   using namespace __gnu_test;\n-  \n-  VERIFY( (test_category<is_compound, void>(false)) );\n-  VERIFY( (test_category<is_compound, char>(false)) );\n-  VERIFY( (test_category<is_compound, signed char>(false)) );\n-  VERIFY( (test_category<is_compound, unsigned char>(false)) );\n+\n+  static_assert(test_category<is_compound, void>(false), \"\");\n+  static_assert(test_category<is_compound, char>(false), \"\");\n+  static_assert(test_category<is_compound, signed char>(false), \"\");\n+  static_assert(test_category<is_compound, unsigned char>(false), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_compound, wchar_t>(false)) );\n+  static_assert(test_category<is_compound, wchar_t>(false), \"\");\n #endif\n-  VERIFY( (test_category<is_compound, short>(false)) );\n-  VERIFY( (test_category<is_compound, unsigned short>(false)) );\n-  VERIFY( (test_category<is_compound, int>(false)) );\n-  VERIFY( (test_category<is_compound, unsigned int>(false)) );\n-  VERIFY( (test_category<is_compound, long>(false)) );\n-  VERIFY( (test_category<is_compound, unsigned long>(false)) );\n-  VERIFY( (test_category<is_compound, long long>(false)) );\n-  VERIFY( (test_category<is_compound, unsigned long long>(false)) );\n-  VERIFY( (test_category<is_compound, float>(false)) );\n-  VERIFY( (test_category<is_compound, double>(false)) );\n-  VERIFY( (test_category<is_compound, long double>(false)) );\n+  static_assert(test_category<is_compound, short>(false), \"\");\n+  static_assert(test_category<is_compound, unsigned short>(false), \"\");\n+  static_assert(test_category<is_compound, int>(false), \"\");\n+  static_assert(test_category<is_compound, unsigned int>(false), \"\");\n+  static_assert(test_category<is_compound, long>(false), \"\");\n+  static_assert(test_category<is_compound, unsigned long>(false), \"\");\n+  static_assert(test_category<is_compound, long long>(false), \"\");\n+  static_assert(test_category<is_compound, unsigned long long>(false), \"\");\n+  static_assert(test_category<is_compound, float>(false), \"\");\n+  static_assert(test_category<is_compound, double>(false), \"\");\n+  static_assert(test_category<is_compound, long double>(false), \"\");\n \n   // libstdc++/56609\n-  VERIFY( (test_category<is_compound, std::nullptr_t>(false)) );\n+  static_assert(test_category<is_compound, std::nullptr_t>(false), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_compound, ClassType>(true)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_compound, ClassType>(true), \"\");\n }"}, {"sha": "bfd9f144e3406c8982b95e0d8d768cfe28b3b84d", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value.cc", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,5 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n // Copyright (C) 2009-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -18,28 +18,22 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_constructible, ExplicitClass, double&>(true)) );\n-  VERIFY( (test_property<is_constructible, ExplicitClass, int&>(true)) );\n+  static_assert(test_property<is_constructible,\n+\t\tExplicitClass, double&>(true), \"\");\n+  static_assert(test_property<is_constructible, ExplicitClass, int&>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_constructible, ExplicitClass, void*>(false)) );\n-  VERIFY( (test_property<is_constructible, ExplicitClass>(false)) );\n-  VERIFY( (test_property<is_constructible, ExplicitClass,\n-\t   int, double>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_constructible,\n+\t\tExplicitClass, void*>(false), \"\");\n+  static_assert(test_property<is_constructible, ExplicitClass>(false), \"\");\n+  static_assert(test_property<is_constructible, ExplicitClass,\n+\t\tint, double>(false), \"\");\n }"}, {"sha": "97518a4dd2aea2d461e5e1cfee7c3ebf26fcf3bb", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/value.cc", "status": "modified", "additions": 79, "deletions": 67, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n@@ -20,87 +21,98 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_convertible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_relationship<is_convertible, int, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int, const int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, volatile int, const int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int, float>(true)) );\n-  VERIFY( (test_relationship<is_convertible, double, float>(true)) );\n-  VERIFY( (test_relationship<is_convertible, float, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int*, const int*>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int*, void*>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int[4], int*>(true)) );\n-  VERIFY( (test_relationship<is_convertible, float&, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int, const int&>(true)) ); \n-  VERIFY( (test_relationship<is_convertible, const int&, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, float, const int&>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int(int), int(*)(int)>(true)) );\n-  VERIFY( (test_relationship<is_convertible, int(&)(int), int(*)(int)>(true)) );\n-  VERIFY( (test_relationship<is_convertible, EnumType, int>(true)) );\n-  VERIFY( (test_relationship<is_convertible, ClassType, ClassType>(true)) );\n-  VERIFY( (test_relationship<is_convertible, DerivedType, ClassType>(true)) );\n-  VERIFY( (test_relationship<is_convertible, DerivedType*, ClassType*>(true)) );\n-  VERIFY( (test_relationship<is_convertible, DerivedType&, ClassType&>(true)) );\n+  static_assert(test_relationship<is_convertible, int, int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int, const int>(true), \"\");\n+  static_assert(test_relationship<is_convertible,\n+\t\tvolatile int, const int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int, float>(true), \"\");\n+  static_assert(test_relationship<is_convertible, double, float>(true), \"\");\n+  static_assert(test_relationship<is_convertible, float, int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int*, const int*>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int*, void*>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int[4], int*>(true), \"\");\n+  static_assert(test_relationship<is_convertible, float&, int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int, const int&>(true), \"\"); \n+  static_assert(test_relationship<is_convertible, const int&, int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, float, const int&>(true), \"\");\n+  static_assert(test_relationship<is_convertible, int(int),\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_relationship<is_convertible,\n+\t\tint(&)(int), int(*)(int)>(true), \"\");\n+  static_assert(test_relationship<is_convertible, EnumType, int>(true), \"\");\n+  static_assert(test_relationship<is_convertible, ClassType,\n+\t\tClassType>(true), \"\");\n+  static_assert(test_relationship<is_convertible, DerivedType,\n+\t\tClassType>(true), \"\");\n+  static_assert(test_relationship<is_convertible, DerivedType*,\n+\t\tClassType*>(true), \"\");\n+  static_assert(test_relationship<is_convertible, DerivedType&,\n+\t\tClassType&>(true), \"\");\n \n-  VERIFY( (test_relationship<is_convertible, const int, const int&>(true)) );\n+  static_assert(test_relationship<is_convertible, const int,\n+\t\tconst int&>(true), \"\");\n \n-  VERIFY( (test_relationship<is_convertible, void, void>(true)) );\n-  VERIFY( (test_relationship<is_convertible, const void, void>(true)) );\n-  VERIFY( (test_relationship<is_convertible, void, volatile void>(true)) );\n-  VERIFY( (test_relationship<is_convertible, double&, ExplicitClass>(true)) );\n+  static_assert(test_relationship<is_convertible, void, void>(true), \"\");\n+  static_assert(test_relationship<is_convertible, const void, void>(true), \"\");\n+  static_assert(test_relationship<is_convertible, void,\n+\t\tvolatile void>(true), \"\");\n+  static_assert(test_relationship<is_convertible, double&,\n+\t\tExplicitClass>(true), \"\");\n \n-  VERIFY( (test_relationship<is_convertible, int(int), int(&)(int)>(true)) );\n+  static_assert(test_relationship<is_convertible, int(int),\n+\t\tint(&)(int)>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_relationship<is_convertible, const int*, int*>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int*, float*>(false)) );\n-  VERIFY( (test_relationship<is_convertible, const int[4], int*>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int[4], int[4]>(false)) );\n-  VERIFY( (test_relationship<is_convertible, const int&, int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, float&, int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, float, volatile int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int(int), int(int)>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int(int), int(*)(void)>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int(*)(int),\n-\t                                     int(&)(int)>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int, EnumType>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int, ClassType>(false)) );\n-  VERIFY( (test_relationship<is_convertible, ClassType, DerivedType>(false)) );\n-  VERIFY( (test_relationship<is_convertible, ClassType*,\n-\t                                     DerivedType*>(false)) );\n-  VERIFY( (test_relationship<is_convertible, ClassType&,\n-\t                                     DerivedType&>(false)) );\n+  static_assert(test_relationship<is_convertible, const int*, int*>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int*, float*>(false), \"\");\n+  static_assert(test_relationship<is_convertible, const int[4],\n+\t\tint*>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int[4], int[4]>(false), \"\");\n+  static_assert(test_relationship<is_convertible, const int&, int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, float&, int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, float,\n+\t\tvolatile int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int(int),\n+\t\tint(int)>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int(int),\n+\t\tint(*)(void)>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int(*)(int),\n+\t\tint(&)(int)>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int, EnumType>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int, ClassType>(false), \"\");\n+  static_assert(test_relationship<is_convertible, ClassType,\n+\t\tDerivedType>(false), \"\");\n+  static_assert(test_relationship<is_convertible, ClassType*,\n+\t\tDerivedType*>(false), \"\");\n+  static_assert(test_relationship<is_convertible, ClassType&,\n+\t\tDerivedType&>(false), \"\");\n \n-  VERIFY( (test_relationship<is_convertible, void, int>(false)) );\n-  VERIFY( (test_relationship<is_convertible, void, float>(false)) );  \n-  VERIFY( (test_relationship<is_convertible, void, int(*)(int)>(false)) );\n+  static_assert(test_relationship<is_convertible, void, int>(false), \"\");\n+  static_assert(test_relationship<is_convertible, void, float>(false), \"\");  \n+  static_assert(test_relationship<is_convertible, void,\n+\t\tint(*)(int)>(false), \"\");\n \n   // C++0x\n-  VERIFY( (test_relationship<is_convertible, int, void>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int[4], void>(false)) );\n+  static_assert(test_relationship<is_convertible, int, void>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int[4], void>(false), \"\");\n \n-  VERIFY( (test_relationship<is_convertible, int, int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, float,\n-\t                                     volatile float&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, const volatile int,\n-\t                                     const volatile int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, volatile int,\n-\t                                     volatile int&>(false)) );\n-  VERIFY( (test_relationship<is_convertible, int&, ExplicitClass>(false)) );\n-  VERIFY( (test_relationship<is_convertible, void*, ExplicitClass>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_relationship<is_convertible, int, int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, float,\n+\t\tvolatile float&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, const volatile int,\n+\t\tconst volatile int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, volatile int,\n+\t\tvolatile int&>(false), \"\");\n+  static_assert(test_relationship<is_convertible, int&,\n+\t\tExplicitClass>(false), \"\");\n+  static_assert(test_relationship<is_convertible, void*,\n+\t\tExplicitClass>(false), \"\");\n }"}, {"sha": "4cc12d6e521de0149db2d74df4ea3470279d0d3b", "filename": "libstdc++-v3/testsuite/20_util/is_copy_assignable/value.cc", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n@@ -19,56 +21,57 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_copy_assignable;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_copy_assignable, int>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, float>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, EnumType>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, int*>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, int(*)(int)>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, int (ClassType::*)>(true)) );\n-  VERIFY( (test_property<is_copy_assignable,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_property<is_copy_assignable, int>(true), \"\");\n+  static_assert(test_property<is_copy_assignable, float>(true), \"\");\n+  static_assert(test_property<is_copy_assignable, EnumType>(true), \"\");\n+  static_assert(test_property<is_copy_assignable, int*>(true), \"\");\n+  static_assert(test_property<is_copy_assignable, int(*)(int)>(true), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_copy_assignable, NoexceptCopyAssignClass>(true)) );\n-  VERIFY( (test_property<is_copy_assignable, ExceptCopyAssignClass>(true)) );\n+  static_assert(test_property<is_copy_assignable,\n+\t\tNoexceptCopyAssignClass>(true), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tExceptCopyAssignClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_copy_assignable, void>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, int[2]>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, float[][3]>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, int*[3]>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, int(*[][2])(int)>(false)) );\n-  VERIFY( (test_property<is_copy_assignable,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, \n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, \n-       EnumType(int, ...)>(false)) );\n-\n-  VERIFY( (test_property<is_copy_assignable, NoexceptMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, ExceptMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, DeletedCopyAssignClass>(false)) );\n-  VERIFY( (test_property<is_copy_assignable, DeletedMoveAssignClass>(false)) );\n-}\n+  static_assert(test_property<is_copy_assignable, void>(false), \"\");\n+  static_assert(test_property<is_copy_assignable, int[2]>(false), \"\");\n+  static_assert(test_property<is_copy_assignable, float[][3]>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_copy_assignable, int*[3]>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_property<is_copy_assignable, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_property<is_copy_assignable, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_copy_assignable,\n+\t\tNoexceptMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tExceptMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tDeletedCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_copy_assignable,\n+\t\tDeletedMoveAssignClass>(false), \"\");\n }"}, {"sha": "d05c21243fcbc3fc3fe3014d340e1ec1bc610e8b", "filename": "libstdc++-v3/testsuite/20_util/is_copy_constructible/value.cc", "status": "modified", "additions": 42, "deletions": 49, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,64 +19,56 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_copy_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_copy_constructible, int>(true)) );\n-  VERIFY( (test_category<is_copy_constructible, float>(true)) );\n-  VERIFY( (test_category<is_copy_constructible, EnumType>(true)) );\n-  VERIFY( (test_category<is_copy_constructible, int*>(true)) );\n-  VERIFY( (test_category<is_copy_constructible, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_category<is_copy_constructible, int>(true), \"\");\n+  static_assert(test_category<is_copy_constructible, float>(true), \"\");\n+  static_assert(test_category<is_copy_constructible, EnumType>(true), \"\");\n+  static_assert(test_category<is_copy_constructible, int*>(true), \"\");\n+  static_assert(test_category<is_copy_constructible, int(*)(int)>(true), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_copy_constructible,\n-\t   NoexceptCopyConsClass>(true)) );\n-  VERIFY( (test_property<is_copy_constructible,\n-\t   const NoexceptCopyConsClass>(true)) );\n-  VERIFY( (test_property<is_copy_constructible,\n-\t   ThrowCopyConsClass>(true)) );\n-  VERIFY( (test_property<is_copy_constructible,\n-\t   ExceptCopyConsClass>(true)) );\n+  static_assert(test_property<is_copy_constructible,\n+\t\tNoexceptCopyConsClass>(true), \"\");\n+  static_assert(test_property<is_copy_constructible,\n+\t\tconst NoexceptCopyConsClass>(true), \"\");\n+  static_assert(test_property<is_copy_constructible,\n+\t\tThrowCopyConsClass>(true), \"\");\n+  static_assert(test_property<is_copy_constructible,\n+\t\tExceptCopyConsClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_copy_constructible, void>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, int[2]>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, int[]>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, float[][3]>(false)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, int*[3]>(false)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_category<is_copy_constructible,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_category<is_copy_constructible, \n-       EnumType(int, ...)>(false)) );\n+  static_assert(test_category<is_copy_constructible, void>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, int[2]>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, int[]>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, float[][3]>(false), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, int*[3]>(false), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_category<is_copy_constructible,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, \n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_category<is_copy_constructible, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-  VERIFY( (test_property<is_copy_constructible,\n-\t   volatile NoexceptCopyConsClass>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_copy_constructible,\n+\t\tvolatile NoexceptCopyConsClass>(false), \"\");\n }"}, {"sha": "d77687edce185394d097a8ed9e7818e1ff24a96c", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,51 +19,45 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_floating_point;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_floating_point, void>(false)) );\n-  VERIFY( (test_category<is_floating_point, char>(false)) );\n-  VERIFY( (test_category<is_floating_point, signed char>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned char>(false)) );\n+  static_assert(test_category<is_floating_point, void>(false), \"\");\n+  static_assert(test_category<is_floating_point, char>(false), \"\");\n+  static_assert(test_category<is_floating_point, signed char>(false), \"\");\n+  static_assert(test_category<is_floating_point, unsigned char>(false), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_floating_point, wchar_t>(false)) );\n+  static_assert(test_category<is_floating_point, wchar_t>(false), \"\");\n #endif\n-  VERIFY( (test_category<is_floating_point, short>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned short>(false)) );\n-  VERIFY( (test_category<is_floating_point, int>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned int>(false)) );\n-  VERIFY( (test_category<is_floating_point, long>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned long>(false)) );\n-  VERIFY( (test_category<is_floating_point, long long>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned long long>(false)) );\n-\n-  VERIFY( (test_category<is_floating_point, float>(true)) );\n-  VERIFY( (test_category<is_floating_point, double>(true)) );\n-  VERIFY( (test_category<is_floating_point, long double>(true)) );\n+  static_assert(test_category<is_floating_point, short>(false), \"\");\n+  static_assert(test_category<is_floating_point, unsigned short>(false), \"\");\n+  static_assert(test_category<is_floating_point, int>(false), \"\");\n+  static_assert(test_category<is_floating_point, unsigned int>(false), \"\");\n+  static_assert(test_category<is_floating_point, long>(false), \"\");\n+  static_assert(test_category<is_floating_point, unsigned long>(false), \"\");\n+  static_assert(test_category<is_floating_point, long long>(false), \"\");\n+  static_assert(test_category<is_floating_point,\n+\t\tunsigned long long>(false), \"\");\n+\n+  static_assert(test_category<is_floating_point, float>(true), \"\");\n+  static_assert(test_category<is_floating_point, double>(true), \"\");\n+  static_assert(test_category<is_floating_point, long double>(true), \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_FLOAT128\n-  VERIFY( (test_category<is_floating_point, __float128>(true)) );\n+  static_assert(test_category<is_floating_point, __float128>(true), \"\");\n #endif\n \n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_floating_point, __int128>(false)) );\n-  VERIFY( (test_category<is_floating_point, unsigned __int128>(false)) );\n+  static_assert(test_category<is_floating_point, __int128>(false), \"\");\n+  static_assert(test_category<is_floating_point,\n+\t\tunsigned __int128>(false), \"\");\n #endif\n \n   // Sanity check.\n-  VERIFY( (test_category<is_floating_point, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_floating_point, ClassType>(false), \"\");\n }"}, {"sha": "c38a3a1e7a16419f279c07cdcde5d8e7e4e54f5a", "filename": "libstdc++-v3/testsuite/20_util/is_function/value.cc", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,38 +19,32 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_function;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_function, int (int)>(true)) );\n-  VERIFY( (test_category<is_function, ClassType (ClassType)>(true)) );\n-  VERIFY( (test_category<is_function, float (int, float, int[], int&)>(true)) );\n-  VERIFY( (test_category<is_function, int (int, ...)>(true)) );\n-  VERIFY( (test_category<is_function, bool (ClassType) const>(true)) );\n-  VERIFY( (test_category<is_function, ClassType () &>(true)) );\n-  VERIFY( (test_category<is_function, char (int, ClassType) const volatile &&>(true)) );\n+  static_assert(test_category<is_function, int (int)>(true), \"\");\n+  static_assert(test_category<is_function, ClassType (ClassType)>(true), \"\");\n+  static_assert(test_category<is_function,\n+\t\tfloat (int, float, int[], int&)>(true), \"\");\n+  static_assert(test_category<is_function, int (int, ...)>(true), \"\");\n+  static_assert(test_category<is_function, bool (ClassType) const>(true), \"\");\n+  static_assert(test_category<is_function, ClassType () &>(true), \"\");\n+  static_assert(test_category<is_function,\n+\t\tchar (int, ClassType) const volatile &&>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_function, int&>(false)) );\n-  VERIFY( (test_category<is_function, void>(false)) );\n-  VERIFY( (test_category<is_function, const void>(false)) );\n+  static_assert(test_category<is_function, int&>(false), \"\");\n+  static_assert(test_category<is_function, void>(false), \"\");\n+  static_assert(test_category<is_function, const void>(false), \"\");\n \n-  VERIFY( (test_category<is_function, AbstractClass>(false)) );\n-  VERIFY( (test_category<is_function, int(&)(int)>(false)) );\n+  static_assert(test_category<is_function, AbstractClass>(false), \"\");\n+  static_assert(test_category<is_function, int(&)(int)>(false), \"\");\n   \n   // Sanity check.\n-  VERIFY( (test_category<is_function, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_function, ClassType>(false), \"\");\n }"}, {"sha": "b6ba4d09c7ea2e8d644594aaa94c8d5a4a2d2813", "filename": "libstdc++-v3/testsuite/20_util/is_fundamental/value.cc", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,43 +19,35 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_fundamental;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_fundamental, void>(true)) );\n-  VERIFY( (test_category<is_fundamental, char>(true)) );\n-  VERIFY( (test_category<is_fundamental, signed char>(true)) );\n-  VERIFY( (test_category<is_fundamental, unsigned char>(true)) );\n+  static_assert(test_category<is_fundamental, void>(true), \"\");\n+  static_assert(test_category<is_fundamental, char>(true), \"\");\n+  static_assert(test_category<is_fundamental, signed char>(true), \"\");\n+  static_assert(test_category<is_fundamental, unsigned char>(true), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_fundamental, wchar_t>(true)) );\n+  static_assert(test_category<is_fundamental, wchar_t>(true), \"\");\n #endif\n-  VERIFY( (test_category<is_fundamental, short>(true)) );\n-  VERIFY( (test_category<is_fundamental, unsigned short>(true)) );\n-  VERIFY( (test_category<is_fundamental, int>(true)) );\n-  VERIFY( (test_category<is_fundamental, unsigned int>(true)) );\n-  VERIFY( (test_category<is_fundamental, long>(true)) );\n-  VERIFY( (test_category<is_fundamental, unsigned long>(true)) );\n-  VERIFY( (test_category<is_fundamental, long long>(true)) );\n-  VERIFY( (test_category<is_fundamental, unsigned long long>(true)) );\n-  VERIFY( (test_category<is_fundamental, float>(true)) );\n-  VERIFY( (test_category<is_fundamental, double>(true)) );\n-  VERIFY( (test_category<is_fundamental, long double>(true)) );\n+  static_assert(test_category<is_fundamental, short>(true), \"\");\n+  static_assert(test_category<is_fundamental, unsigned short>(true), \"\");\n+  static_assert(test_category<is_fundamental, int>(true), \"\");\n+  static_assert(test_category<is_fundamental, unsigned int>(true), \"\");\n+  static_assert(test_category<is_fundamental, long>(true), \"\");\n+  static_assert(test_category<is_fundamental, unsigned long>(true), \"\");\n+  static_assert(test_category<is_fundamental, long long>(true), \"\");\n+  static_assert(test_category<is_fundamental, unsigned long long>(true), \"\");\n+  static_assert(test_category<is_fundamental, float>(true), \"\");\n+  static_assert(test_category<is_fundamental, double>(true), \"\");\n+  static_assert(test_category<is_fundamental, long double>(true), \"\");\n \n   // libstdc++/56609\n-  VERIFY( (test_category<is_fundamental, std::nullptr_t>(true)) );\n+  static_assert(test_category<is_fundamental, std::nullptr_t>(true), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_fundamental, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_fundamental, ClassType>(false), \"\");\n }"}, {"sha": "0ebc91b8d05ed7f3fa04e89513fdd01203740a74", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2008-2013 Free Software Foundation, Inc.\n@@ -19,54 +21,46 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_integral;\n   using namespace __gnu_test;\n+\n+  static_assert(test_category<is_integral, void>(false), \"\");\n   \n-  VERIFY( (test_category<is_integral, void>(false)) );\n-  \n-  VERIFY( (test_category<is_integral, char>(true)) );\n-  VERIFY( (test_category<is_integral, signed char>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned char>(true)) );\n+  static_assert(test_category<is_integral, char>(true), \"\");\n+  static_assert(test_category<is_integral, signed char>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned char>(true), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_integral, wchar_t>(true)) );\n+  static_assert(test_category<is_integral, wchar_t>(true), \"\");\n #endif\n-  VERIFY( (test_category<is_integral, char16_t>(true)) );\n-  VERIFY( (test_category<is_integral, char32_t>(true)) );\n-  VERIFY( (test_category<is_integral, short>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned short>(true)) );\n-  VERIFY( (test_category<is_integral, int>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned int>(true)) );\n-  VERIFY( (test_category<is_integral, long>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned long>(true)) );\n-  VERIFY( (test_category<is_integral, long long>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned long long>(true)) );\n+  static_assert(test_category<is_integral, char16_t>(true), \"\");\n+  static_assert(test_category<is_integral, char32_t>(true), \"\");\n+  static_assert(test_category<is_integral, short>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned short>(true), \"\");\n+  static_assert(test_category<is_integral, int>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned int>(true), \"\");\n+  static_assert(test_category<is_integral, long>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned long>(true), \"\");\n+  static_assert(test_category<is_integral, long long>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned long long>(true), \"\");\n \n-  VERIFY( (test_category<is_integral, float>(false)) );\n-  VERIFY( (test_category<is_integral, double>(false)) );\n-  VERIFY( (test_category<is_integral, long double>(false)) );\n+  static_assert(test_category<is_integral, float>(false), \"\");\n+  static_assert(test_category<is_integral, double>(false), \"\");\n+  static_assert(test_category<is_integral, long double>(false), \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_integral, __int128>(true)) );\n-  VERIFY( (test_category<is_integral, unsigned __int128>(true)) );\n+  static_assert(test_category<is_integral, __int128>(true), \"\");\n+  static_assert(test_category<is_integral, unsigned __int128>(true), \"\");\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128\n-  VERIFY( (test_category<is_integral, __float128>(false)) );\n+  static_assert(test_category<is_integral, __float128>(false), \"\");\n #endif\n \n   // Sanity check.\n-  VERIFY( (test_category<is_integral, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_integral, ClassType>(false), \"\");\n }"}, {"sha": "703707c3b2b9a5ae6aae72fe1e5753bd39203f6b", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/value.cc", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,36 +21,28 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_literal_type;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_literal_type, int>(true)) );\n-  VERIFY( (test_category<is_literal_type, unsigned char>(true)) );\n-\n-  VERIFY( (test_category<is_literal_type, TType>(true)) );\n-  VERIFY( (test_category<is_literal_type, PODType>(true)) );\n+  static_assert(test_category<is_literal_type, int>(true), \"\");\n+  static_assert(test_category<is_literal_type, unsigned char>(true), \"\");\n \n-  VERIFY( (test_category<is_literal_type, NType>(false)) );\n-  VERIFY( (test_category<is_literal_type, SLType>(false)) );\n+  static_assert(test_category<is_literal_type, TType>(true), \"\");\n+  static_assert(test_category<is_literal_type, PODType>(true), \"\");\n \n-  VERIFY( (test_category<is_literal_type, LType>(true)) );\n-  VERIFY( (test_category<is_literal_type, LType[5]>(true)) );\n+  static_assert(test_category<is_literal_type, NType>(false), \"\");\n+  static_assert(test_category<is_literal_type, SLType>(false), \"\");\n \n-  VERIFY( (test_category<is_literal_type, NLType>(false)) );\n-  VERIFY( (test_category<is_literal_type, NLType[5]>(false)) );\n+  static_assert(test_category<is_literal_type, LType>(true), \"\");\n+  static_assert(test_category<is_literal_type, LType[5]>(true), \"\");\n \n-  VERIFY( (test_category<is_literal_type, LTypeDerived>(true)) );\n-  VERIFY( (test_category<is_literal_type, LTypeDerived[5]>(true)) );\n-}\n+  static_assert(test_category<is_literal_type, NLType>(false), \"\");\n+  static_assert(test_category<is_literal_type, NLType[5]>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_literal_type, LTypeDerived>(true), \"\");\n+  static_assert(test_category<is_literal_type, LTypeDerived[5]>(true), \"\");\n }"}, {"sha": "d084fd97323b0f3f4f480bab531b1a6ee7918f1c", "filename": "libstdc++-v3/testsuite/20_util/is_lvalue_reference/value.cc", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_lvalue_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,26 +21,19 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_lvalue_reference;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_lvalue_reference, int&>(true)) );\n-  VERIFY( (test_category<is_lvalue_reference, ClassType&>(true)) );\n-  VERIFY( (test_category<is_lvalue_reference, int(&)(int)>(true)) );\n+  static_assert(test_category<is_lvalue_reference, int&>(true), \"\");\n+  static_assert(test_category<is_lvalue_reference, ClassType&>(true), \"\");\n+  static_assert(test_category<is_lvalue_reference, int(&)(int)>(true), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_lvalue_reference, int&&>(false)) );\n-  VERIFY( (test_category<is_lvalue_reference, ClassType>(false)) );\n+  static_assert(test_category<is_lvalue_reference, int&&>(false), \"\");\n+  static_assert(test_category<is_lvalue_reference, ClassType>(false), \"\");\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "78da4749dfb96a18718c945040492139860f7e0b", "filename": "libstdc++-v3/testsuite/20_util/is_member_function_pointer/value.cc", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,41 +19,34 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_member_function_pointer;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   int (ClassType::*) (int) const>(true)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   int (ClassType::*) (float, ...)>(true)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   ClassType (ClassType::*) (ClassType)>(true)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tint (ClassType::*) (int) const>(true), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tint (ClassType::*) (float, ...)>(true), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tClassType (ClassType::*) (ClassType)>(true), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tfloat (ClassType::*) (int, float, int[], int&)>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   int (ClassType::*)>(false)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   const int (ClassType::*)>(false)) );\n-  VERIFY( (test_category<is_member_function_pointer,\n-\t   ClassType (ClassType::*)>(false)) );\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tint (ClassType::*)>(false), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tconst int (ClassType::*)>(false), \"\");\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tClassType (ClassType::*)>(false), \"\");\n   \n   // Sanity check.\n-  VERIFY( (test_category<is_member_function_pointer, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_member_function_pointer,\n+\t\tClassType>(false), \"\");\n }"}, {"sha": "88eb561aa9371ad17bdd3370777ea8537879408f", "filename": "libstdc++-v3/testsuite/20_util/is_member_object_pointer/value.cc", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_object_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_object_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_object_pointer%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,37 +19,35 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_member_object_pointer;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   const int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   ClassType (ClassType::*)>(true)) );\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tconst int (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tClassType (ClassType::*)>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   int (ClassType::*) (int)>(false)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   int (ClassType::*) (int) const>(false)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   int (ClassType::*) (float, ...)>(false)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   ClassType (ClassType::*) (ClassType)>(false)) );\n-  VERIFY( (test_category<is_member_object_pointer,\n-\t   float (ClassType::*) (int, float, int[], int&)>(false)) );\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tint (ClassType::*) (int)>(false), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tint (ClassType::*) (int) const>(false), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tint (ClassType::*) (float, ...)>(false), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tClassType (ClassType::*) (ClassType)>(false), \"\");\n+  static_assert(test_category<is_member_object_pointer,\n+\t\tfloat (ClassType::*) (int, float, int[], int&)>(false), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_member_object_pointer, ClassType>(false)) );\n+  static_assert(test_category<is_member_object_pointer, ClassType>(false), \"\");\n }\n \n int main()"}, {"sha": "c74c9820d282220ea4829af32308222579104609", "filename": "libstdc++-v3/testsuite/20_util/is_member_pointer/value.cc", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_pointer%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,36 +19,30 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_member_pointer;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_member_pointer, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_member_pointer, const int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_member_pointer, ClassType (ClassType::*)>(true)) );\n+  static_assert(test_category<is_member_pointer, int (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tconst int (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tClassType (ClassType::*)>(true), \"\");\n \n-  VERIFY( (test_category<is_member_pointer,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<is_member_pointer,\n-\t   int (ClassType::*) (int) const>(true)) );\n-  VERIFY( (test_category<is_member_pointer,\n-\t   int (ClassType::*) (float, ...)>(true)) );\n-  VERIFY( (test_category<is_member_pointer,\n-\t   ClassType (ClassType::*) (ClassType)>(true)) );\n-  VERIFY( (test_category<is_member_pointer,\n-\t   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+  static_assert(test_category<is_member_pointer,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tint (ClassType::*) (int) const>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tint (ClassType::*) (float, ...)>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tClassType (ClassType::*) (ClassType)>(true), \"\");\n+  static_assert(test_category<is_member_pointer,\n+\t\tfloat (ClassType::*) (int, float, int[], int&)>(true), \"\");\n   \n   // Sanity check.\n-  VERIFY( (test_category<is_member_pointer, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_member_pointer, ClassType>(false), \"\");\n }"}, {"sha": "bd7699af167041e73c79389e63bd8f3997849820", "filename": "libstdc++-v3/testsuite/20_util/is_move_assignable/value.cc", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n@@ -19,56 +21,56 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_move_assignable;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_move_assignable, int>(true)) );\n-  VERIFY( (test_property<is_move_assignable, float>(true)) );\n-  VERIFY( (test_property<is_move_assignable, EnumType>(true)) );\n-  VERIFY( (test_property<is_move_assignable, int*>(true)) );\n-  VERIFY( (test_property<is_move_assignable, int(*)(int)>(true)) );\n-  VERIFY( (test_property<is_move_assignable, int (ClassType::*)>(true)) );\n-  VERIFY( (test_property<is_move_assignable,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_property<is_move_assignable, int>(true), \"\");\n+  static_assert(test_property<is_move_assignable, float>(true), \"\");\n+  static_assert(test_property<is_move_assignable, EnumType>(true), \"\");\n+  static_assert(test_property<is_move_assignable, int*>(true), \"\");\n+  static_assert(test_property<is_move_assignable, int(*)(int)>(true), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_move_assignable, NoexceptMoveAssignClass>(true)) );\n-  VERIFY( (test_property<is_move_assignable, ExceptMoveAssignClass>(true)) );\n-  VERIFY( (test_property<is_move_assignable, NoexceptCopyAssignClass>(true)) );\n-  VERIFY( (test_property<is_move_assignable, ExceptCopyAssignClass>(true)) );\n+  static_assert(test_property<is_move_assignable,\n+\t\tNoexceptMoveAssignClass>(true), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tExceptMoveAssignClass>(true), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tNoexceptCopyAssignClass>(true), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tExceptCopyAssignClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_move_assignable, void>(false)) );\n-  VERIFY( (test_property<is_move_assignable, int[2]>(false)) );\n-  VERIFY( (test_property<is_move_assignable, float[][3]>(false)) );\n-  VERIFY( (test_property<is_move_assignable, EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_property<is_move_assignable, int*[3]>(false)) );\n-  VERIFY( (test_property<is_move_assignable, int(*[][2])(int)>(false)) );\n-  VERIFY( (test_property<is_move_assignable,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_property<is_move_assignable, \n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_property<is_move_assignable, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_property<is_move_assignable, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_property<is_move_assignable, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_property<is_move_assignable, \n-       EnumType(int, ...)>(false)) );\n-\n-  VERIFY( (test_property<is_move_assignable, DeletedCopyAssignClass>(false)) );\n-  VERIFY( (test_property<is_move_assignable, DeletedMoveAssignClass>(false)) );\n-}\n+  static_assert(test_property<is_move_assignable, void>(false), \"\");\n+  static_assert(test_property<is_move_assignable, int[2]>(false), \"\");\n+  static_assert(test_property<is_move_assignable, float[][3]>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_move_assignable, int*[3]>(false), \"\");\n+  static_assert(test_property<is_move_assignable, int(*[][2])(int)>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_property<is_move_assignable, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_property<is_move_assignable, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_move_assignable,\n+\t\tDeletedCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_move_assignable,\n+\t\tDeletedMoveAssignClass>(false), \"\");\n }"}, {"sha": "b483eb029a3e4548b69835c47478b355995710cd", "filename": "libstdc++-v3/testsuite/20_util/is_move_constructible/value.cc", "status": "modified", "additions": 42, "deletions": 49, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,64 +19,56 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_move_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_move_constructible, int>(true)) );\n-  VERIFY( (test_category<is_move_constructible, float>(true)) );\n-  VERIFY( (test_category<is_move_constructible, EnumType>(true)) );\n-  VERIFY( (test_category<is_move_constructible, int*>(true)) );\n-  VERIFY( (test_category<is_move_constructible, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_category<is_move_constructible, int>(true), \"\");\n+  static_assert(test_category<is_move_constructible, float>(true), \"\");\n+  static_assert(test_category<is_move_constructible, EnumType>(true), \"\");\n+  static_assert(test_category<is_move_constructible, int*>(true), \"\");\n+  static_assert(test_category<is_move_constructible, int(*)(int)>(true), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_move_constructible,\n-\t   NoexceptMoveConsClass>(true)) );\n-  VERIFY( (test_property<is_move_constructible,\n-\t   ThrowMoveConsClass>(true)) );\n-  VERIFY( (test_property<is_move_constructible,\n-\t   ExceptMoveConsClass>(true)) );\n+  static_assert(test_property<is_move_constructible,\n+\t\tNoexceptMoveConsClass>(true), \"\");\n+  static_assert(test_property<is_move_constructible,\n+\t\tThrowMoveConsClass>(true), \"\");\n+  static_assert(test_property<is_move_constructible,\n+\t\tExceptMoveConsClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_move_constructible, void>(false)) );\n-  VERIFY( (test_category<is_move_constructible, int[2]>(false)) );\n-  VERIFY( (test_category<is_move_constructible, int[]>(false)) );\n-  VERIFY( (test_category<is_move_constructible, float[][3]>(false)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_category<is_move_constructible, int*[3]>(false)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_category<is_move_constructible,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_category<is_move_constructible, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_category<is_move_constructible, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_category<is_move_constructible, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_category<is_move_constructible, \n-       EnumType(int, ...)>(false)) );\n+  static_assert(test_category<is_move_constructible, void>(false), \"\");\n+  static_assert(test_category<is_move_constructible, int[2]>(false), \"\");\n+  static_assert(test_category<is_move_constructible, int[]>(false), \"\");\n+  static_assert(test_category<is_move_constructible, float[][3]>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_category<is_move_constructible, int*[3]>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_category<is_move_constructible,\n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_category<is_move_constructible, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_category<is_move_constructible, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-  VERIFY( (test_property<is_move_constructible,\n-\t   const NoexceptMoveConsClass>(false)) );\n-  VERIFY( (test_property<is_move_constructible,\n-\t   volatile NoexceptMoveConsClass>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_move_constructible,\n+\t\tconst NoexceptMoveConsClass>(false), \"\");\n+  static_assert(test_property<is_move_constructible,\n+\t\tvolatile NoexceptMoveConsClass>(false), \"\");\n }"}, {"sha": "ae4b4e049d459ad66347d4d98615b453d423e3be", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_assignable/value.cc", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_assignable%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n@@ -19,40 +21,37 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_assignable;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_relationship<is_nothrow_assignable, int&, int>(true)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable, int&, const int>(true)) );\n+  static_assert(test_relationship<is_nothrow_assignable, int&, int>(true), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable, int&,\n+\t\tconst int>(true), \"\");\n \n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   NoexceptCopyAssignClass&, const NoexceptCopyAssignClass&>(true)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   NoexceptMoveAssignClass&, NoexceptMoveAssignClass&&>(true)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   NoexceptCopyAssignClass&, NoexceptCopyAssignClass&&>(true)) );\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tNoexceptCopyAssignClass&,\n+\t\tconst NoexceptCopyAssignClass&>(true), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tNoexceptMoveAssignClass&, NoexceptMoveAssignClass&&>(true), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tNoexceptCopyAssignClass&, NoexceptCopyAssignClass&&>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_relationship<is_nothrow_assignable, int, int>(false)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable, int, const int>(false)) );\n-\n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   ExceptCopyAssignClass&, const ExceptCopyAssignClass&>(false)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   ExceptMoveAssignClass&, ExceptMoveAssignClass&&>(false)) );\n-  VERIFY( (test_relationship<is_nothrow_assignable,\n-\t   NoexceptMoveAssignClass&, const NoexceptMoveAssignClass&>(false)) );\n-}\n+  static_assert(test_relationship<is_nothrow_assignable, int, int>(false), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable, int,\n+\t\tconst int>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tExceptCopyAssignClass&,\n+\t\tconst ExceptCopyAssignClass&>(false), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tExceptMoveAssignClass&, ExceptMoveAssignClass&&>(false), \"\");\n+  static_assert(test_relationship<is_nothrow_assignable,\n+\t\tNoexceptMoveAssignClass&,\n+\t\tconst NoexceptMoveAssignClass&>(false), \"\");\n }"}, {"sha": "f5fdddf4c9fd837b4e6fe1be6c94dbfc09f7ba8d", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/value.cc", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // 2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -20,63 +21,55 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n-\t   double&>(true)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n-\t   int&>(true)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n-\t   double&, int&, double&>(true)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n-\t   double&>(true)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n-\t   int&>(true)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n-\t   double&, int&, double&>(true)) );\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t\tdouble&>(true), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t\tint&>(true), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t\tdouble&, int&, double&>(true), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t\tdouble&>(true), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t\tint&>(true), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t\tdouble&, int&, double&>(true), \"\");\n \n-  VERIFY( (test_property<is_nothrow_constructible, int[1]>(true)) );\n+  static_assert(test_property<is_nothrow_constructible, int[1]>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n-\t   void*>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass>\n-\t   (false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n-\t   int, double>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n-\t   void*>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass>\n-\t   (false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n-\t   int, double>(false)) );\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t\tvoid*>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass>\n+\t\t(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t\tint, double>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t\tvoid*>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass>\n+\t\t(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t\tint, double>(false), \"\");\n \n-  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n-\t   double&>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n-\t   int&>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n-\t   double&, int&, double&>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n-\t   double&>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n-\t   int&>(false)) );\n-  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n-\t   double&, int&, double&>(false)) );\n+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t\tdouble&>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t\tint&>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t\tdouble&, int&, double&>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t\tdouble&>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t\tint&>(false), \"\");\n+  static_assert(test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t\tdouble&, int&, double&>(false), \"\");\n \n-  VERIFY( (test_property<is_nothrow_constructible, int[]>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_nothrow_constructible, int[]>(false), \"\");\n }"}, {"sha": "c787e4b5d592a81f01d1c9b144c5d0e8aa94ce9d", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_assignable/value.cc", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,65 +21,59 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_copy_assignable;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_nothrow_copy_assignable, int>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, float>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, EnumType>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, int*>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, int(*)(int)>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_property<is_nothrow_copy_assignable, int>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, float>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, EnumType>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, int*>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   NoexceptCopyAssignClass>(true)) );\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tNoexceptCopyAssignClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_nothrow_copy_assignable, void>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, int[2]>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, float[][3]>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, int*[3]>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, \n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable, \n-       EnumType(int, ...)>(false)) );\n-\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   ExceptCopyAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   NoexceptMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   ExceptMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   DeletedCopyAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_assignable,\n-\t   DeletedMoveAssignClass>(false)) );\n-}\n+  static_assert(test_property<is_nothrow_copy_assignable, void>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, int[2]>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tfloat[][3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, int*[3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, \n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tExceptCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tNoexceptMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tExceptMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tDeletedCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_assignable,\n+\t\tDeletedMoveAssignClass>(false), \"\");\n }"}, {"sha": "8b7d324a3fbd4457c426e1e5b5d5068c6b2ee560", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_constructible/value.cc", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2004-2013 Free Software Foundation, Inc.\n@@ -19,64 +21,61 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_copy_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, float>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, EnumType>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int*>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_category<is_nothrow_copy_constructible, int>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, float>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tEnumType>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, int*>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_nothrow_copy_constructible,\n-\t   NoexceptCopyConsClass>(true)) );\n-  VERIFY( (test_property<is_nothrow_copy_constructible,\n-\t   const NoexceptCopyConsClass>(true)) );\n+  static_assert(test_property<is_nothrow_copy_constructible,\n+\t\tNoexceptCopyConsClass>(true), \"\");\n+  static_assert(test_property<is_nothrow_copy_constructible,\n+\t\tconst NoexceptCopyConsClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_nothrow_copy_constructible, void>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int[2]>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int[]>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, float[][3]>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, int*[3]>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_category<is_nothrow_copy_constructible, \n-       EnumType(int, ...)>(false)) );\n-\n-  VERIFY( (test_property<is_nothrow_copy_constructible,\n-\t   volatile NoexceptCopyConsClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_constructible,\n-\t   ThrowCopyConsClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_copy_constructible,\n-\t   ExceptCopyConsClass>(false)) );\n-}\n+  static_assert(test_category<is_nothrow_copy_constructible, void>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint[2]>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, int[]>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tfloat[][3]>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint*[3]>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, \n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_category<is_nothrow_copy_constructible, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_nothrow_copy_constructible,\n+\t\tvolatile NoexceptCopyConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_constructible,\n+\t\tThrowCopyConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_copy_constructible,\n+\t\tExceptCopyConsClass>(false), \"\");\n }"}, {"sha": "10ee4a474bf984de5b557fdba263d6d1920a4209", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_default_constructible/value.cc", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2004-2013 Free Software Foundation, Inc.\n@@ -19,55 +21,55 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_default_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.  \n-  VERIFY( (test_category<is_nothrow_default_constructible, int>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, float>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, EnumType>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, int*>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, int[2]>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, int*[3]>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, ClassType>(true)) );\n+  static_assert(test_category<is_nothrow_default_constructible, int>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tfloat>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tEnumType>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint*>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint[2]>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tEnumType[2][3][4]>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint*[3]>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint (ClassType::*[2][3])>(true), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tClassType>(true), \"\");\n \n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   NoexceptDefaultClass>(true)) );\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tNoexceptDefaultClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_nothrow_default_constructible, void>(false)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible, int[]>(false)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   float[][3]>(false)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   ThrowDefaultClass>(false)) );\n-  VERIFY( (test_category<is_nothrow_default_constructible,\n-\t   ExceptDefaultClass>(false)) );\n-}\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tvoid>(false), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint[]>(false), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tfloat[][3]>(false), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tThrowDefaultClass>(false), \"\");\n+  static_assert(test_category<is_nothrow_default_constructible,\n+\t\tExceptDefaultClass>(false), \"\");\n }"}, {"sha": "a7251a9e0f4a7441d42087904deb06fccdcbed12", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_assignable/value.cc", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n@@ -19,65 +21,59 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_move_assignable;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_nothrow_move_assignable, int>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, float>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, EnumType>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, int*>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, int(*)(int)>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_property<is_nothrow_move_assignable, int>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, float>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, EnumType>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, int*>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   NoexceptMoveAssignClass>(true)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   NoexceptCopyAssignClass>(true)) );\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tNoexceptMoveAssignClass>(true), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tNoexceptCopyAssignClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_property<is_nothrow_move_assignable, void>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, int[2]>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, float[][3]>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, int*[3]>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, \n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable, \n-       EnumType(int, ...)>(false)) );\n-\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   ExceptMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   ExceptCopyAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   DeletedMoveAssignClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_assignable,\n-\t   DeletedCopyAssignClass>(false)) );\n-}\n+  static_assert(test_property<is_nothrow_move_assignable, void>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, int[2]>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tfloat[][3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, int*[3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, \n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tExceptMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tExceptCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tDeletedMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_assignable,\n+\t\tDeletedCopyAssignClass>(false), \"\");\n }"}, {"sha": "868e4e7b377fb2d791f95b9407fc1be60cf6ef27", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_constructible/value.cc", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,64 +19,62 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_nothrow_move_constructible;\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_category<is_nothrow_move_constructible, int>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, float>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, EnumType>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, int*>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   int (ClassType::*) (int)>(true)) );\n+  static_assert(test_category<is_nothrow_move_constructible, int>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, float>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tEnumType>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, int*>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint(*)(int)>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint (ClassType::*) (int)>(true), \"\");\n \n-  VERIFY( (test_property<is_nothrow_move_constructible,\n-\t   NoexceptMoveConsClass>(true)) );\n+  static_assert(test_property<is_nothrow_move_constructible,\n+\t\tNoexceptMoveConsClass>(true), \"\");\n \n   // Negative tests.\n-  VERIFY( (test_category<is_nothrow_move_constructible, void>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, int[2]>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, int[]>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, float[][3]>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, int*[3]>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, \n-       ClassType(unsigned) const &>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, \n-       bool(ClassType) const>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, \n-       bool(...) &&>(false)) );\n-  VERIFY( (test_category<is_nothrow_move_constructible, \n-       EnumType(int, ...)>(false)) );\n+  static_assert(test_category<is_nothrow_move_constructible, void>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint[2]>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint[]>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tfloat[][3]>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tEnumType[2][3][4]>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint*[3]>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, \n+\t\tClassType(unsigned) const &>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, \n+\t\tbool(ClassType) const>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, \n+\t\tbool(...) &&>(false), \"\");\n+  static_assert(test_category<is_nothrow_move_constructible, \n+\t\tEnumType(int, ...)>(false), \"\");\n \n-  VERIFY( (test_property<is_nothrow_move_constructible,\n-\t   const NoexceptMoveConsClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_constructible,\n-\t   volatile NoexceptMoveConsClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_constructible,\n-\t   ThrowMoveConsClass>(false)) );\n-  VERIFY( (test_property<is_nothrow_move_constructible,\n-\t   ExceptMoveConsClass>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_property<is_nothrow_move_constructible,\n+\t\tconst NoexceptMoveConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_constructible,\n+\t\tvolatile NoexceptMoveConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_constructible,\n+\t\tThrowMoveConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_move_constructible,\n+\t\tExceptMoveConsClass>(false), \"\");\n }"}, {"sha": "b4e2fa7ea316f1363233479e48cb684d319b30d4", "filename": "libstdc++-v3/testsuite/20_util/is_null_pointer/value.cc", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n // { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2013-05-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2013 Free Software Foundation, Inc.\n@@ -19,42 +21,36 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_null_pointer;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_null_pointer, std::nullptr_t>(true)) );\n-\n-  VERIFY( (test_category<is_null_pointer, int>(false)) );\n-  VERIFY( (test_category<is_null_pointer, float>(false)) );\n-  VERIFY( (test_category<is_null_pointer, EnumType>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int*>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int(*)(int)>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int (ClassType::*)>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int (ClassType::*) (int)>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int[2]>(false)) );\n-  VERIFY( (test_category<is_null_pointer, float[][3]>(false)) );\n-  VERIFY( (test_category<is_null_pointer, EnumType[2][3][4]>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int*[3]>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int(*[][2])(int)>(false)) );\n-  VERIFY( (test_category<is_null_pointer, int (ClassType::*[2][3])>(false)) );\n-  VERIFY( (test_category<is_null_pointer,\n-\t   int (ClassType::*[][2][3]) (int)>(false)) );\n-  VERIFY( (test_category<is_null_pointer, ClassType>(false)) );\n-  VERIFY( (test_category<is_null_pointer, PODType>(false)) );\n-  VERIFY( (test_category<is_null_pointer, void>(false)) );\n-  VERIFY( (test_category<is_null_pointer, NType>(false)) );\n-  VERIFY( (test_category<is_null_pointer, TType>(false)) );\n-  VERIFY( (test_category<is_null_pointer, SLType>(false)) );\n-}\n+  static_assert(test_category<is_null_pointer, std::nullptr_t>(true), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_null_pointer, int>(false), \"\");\n+  static_assert(test_category<is_null_pointer, float>(false), \"\");\n+  static_assert(test_category<is_null_pointer, EnumType>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int*>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int(*)(int)>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int (ClassType::*)>(false), \"\");\n+  static_assert(test_category<is_null_pointer,\n+\t\tint (ClassType::*) (int)>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int[2]>(false), \"\");\n+  static_assert(test_category<is_null_pointer, float[][3]>(false), \"\");\n+  static_assert(test_category<is_null_pointer, EnumType[2][3][4]>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int*[3]>(false), \"\");\n+  static_assert(test_category<is_null_pointer, int(*[][2])(int)>(false), \"\");\n+  static_assert(test_category<is_null_pointer,\n+\t\tint (ClassType::*[2][3])>(false), \"\");\n+  static_assert(test_category<is_null_pointer,\n+\t\tint (ClassType::*[][2][3]) (int)>(false), \"\");\n+  static_assert(test_category<is_null_pointer, ClassType>(false), \"\");\n+  static_assert(test_category<is_null_pointer, PODType>(false), \"\");\n+  static_assert(test_category<is_null_pointer, void>(false), \"\");\n+  static_assert(test_category<is_null_pointer, NType>(false), \"\");\n+  static_assert(test_category<is_null_pointer, TType>(false), \"\");\n+  static_assert(test_category<is_null_pointer, SLType>(false), \"\");\n }"}, {"sha": "be35fb2eef155065fe8fd4d2f87eccf07f4fbeb7", "filename": "libstdc++-v3/testsuite/20_util/is_object/value.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -18,30 +19,23 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_object;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_object, int (int)>(false)) );\n-  VERIFY( (test_category<is_object, ClassType (ClassType)>(false)) );\n-  VERIFY( (test_category<is_object, float (int, float, int[], int&)>(false)) );\n-  VERIFY( (test_category<is_object, int&>(false)) );\n-  VERIFY( (test_category<is_object, ClassType&>(false)) );\n-  VERIFY( (test_category<is_object, int(&)(int)>(false)) );\n-  VERIFY( (test_category<is_object, void>(false)) );\n-  VERIFY( (test_category<is_object, const void>(false)) );\n+  static_assert(test_category<is_object, int (int)>(false), \"\");\n+  static_assert(test_category<is_object, ClassType (ClassType)>(false), \"\");\n+  static_assert(test_category<is_object,\n+\t\tfloat (int, float, int[], int&)>(false), \"\");\n+  static_assert(test_category<is_object, int&>(false), \"\");\n+  static_assert(test_category<is_object, ClassType&>(false), \"\");\n+  static_assert(test_category<is_object, int(&)(int)>(false), \"\");\n+  static_assert(test_category<is_object, void>(false), \"\");\n+  static_assert(test_category<is_object, const void>(false), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_object, ClassType>(true)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_object, ClassType>(true), \"\");\n }"}, {"sha": "93bcc040a4df52a18a3d0b70f2ede6e62fcb3751", "filename": "libstdc++-v3/testsuite/20_util/is_pod/value.cc", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-02-21  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,40 +21,33 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_pod;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_pod, int>(true)) );\n-  VERIFY( (test_category<is_pod, float>(true)) );\n-  VERIFY( (test_category<is_pod, EnumType>(true)) );\n-  VERIFY( (test_category<is_pod, int*>(true)) );\n-  VERIFY( (test_category<is_pod, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_pod, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_pod, int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<is_pod, int[2]>(true)) );\n-  VERIFY( (test_category<is_pod, float[][3]>(true)) );\n-  VERIFY( (test_category<is_pod, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<is_pod, int*[3]>(true)) );\n-  VERIFY( (test_category<is_pod, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_category<is_pod, int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<is_pod, int (ClassType::*[][2][3]) (int)>(true)) );\n-  VERIFY( (test_category<is_pod, ClassType>(true)) );\n-  VERIFY( (test_category<is_pod, PODType>(true)) );\n-\n-  VERIFY( (test_category<is_pod, void>(false)) );\n-  VERIFY( (test_category<is_pod, NType>(false)) );\n-  VERIFY( (test_category<is_pod, TType>(false)) );\n-  VERIFY( (test_category<is_pod, SLType>(false)) );\n-}\n+  static_assert(test_category<is_pod, int>(true), \"\");\n+  static_assert(test_category<is_pod, float>(true), \"\");\n+  static_assert(test_category<is_pod, EnumType>(true), \"\");\n+  static_assert(test_category<is_pod, int*>(true), \"\");\n+  static_assert(test_category<is_pod, int(*)(int)>(true), \"\");\n+  static_assert(test_category<is_pod, int (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_pod, int (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<is_pod, int[2]>(true), \"\");\n+  static_assert(test_category<is_pod, float[][3]>(true), \"\");\n+  static_assert(test_category<is_pod, EnumType[2][3][4]>(true), \"\");\n+  static_assert(test_category<is_pod, int*[3]>(true), \"\");\n+  static_assert(test_category<is_pod, int(*[][2])(int)>(true), \"\");\n+  static_assert(test_category<is_pod, int (ClassType::*[2][3])>(true), \"\");\n+  static_assert(test_category<is_pod,\n+\t\tint (ClassType::*[][2][3]) (int)>(true), \"\");\n+  static_assert(test_category<is_pod, ClassType>(true), \"\");\n+  static_assert(test_category<is_pod, PODType>(true), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_pod, void>(false), \"\");\n+  static_assert(test_category<is_pod, NType>(false), \"\");\n+  static_assert(test_category<is_pod, TType>(false), \"\");\n+  static_assert(test_category<is_pod, SLType>(false), \"\");\n }"}, {"sha": "36c0c3530c20644556a0e4762b0faa2c15413fde", "filename": "libstdc++-v3/testsuite/20_util/is_reference/value.cc", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,28 +21,21 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_reference;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_reference, int&>(true)) );\n-  VERIFY( (test_category<is_reference, ClassType&>(true)) );\n-  VERIFY( (test_category<is_reference, int(&)(int)>(true)) );\n-  VERIFY( (test_category<is_reference, int&&>(true)) );\n-  VERIFY( (test_category<is_reference, ClassType&&>(true)) );\n-  VERIFY( (test_category<is_reference, int(&&)(int)>(true)) );\n+  static_assert(test_category<is_reference, int&>(true), \"\");\n+  static_assert(test_category<is_reference, ClassType&>(true), \"\");\n+  static_assert(test_category<is_reference, int(&)(int)>(true), \"\");\n+  static_assert(test_category<is_reference, int&&>(true), \"\");\n+  static_assert(test_category<is_reference, ClassType&&>(true), \"\");\n+  static_assert(test_category<is_reference, int(&&)(int)>(true), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_reference, ClassType>(false)) );\n+  static_assert(test_category<is_reference, ClassType>(false), \"\");\n }\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "45cf1476307b0c5b937dee16afa5705f3626c421", "filename": "libstdc++-v3/testsuite/20_util/is_rvalue_reference/value.cc", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_rvalue_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,26 +21,18 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_rvalue_reference;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_rvalue_reference, int&&>(true)) );\n-  VERIFY( (test_category<is_rvalue_reference, ClassType&&>(true)) );\n-  VERIFY( (test_category<is_rvalue_reference, int(&&)(int)>(true)) );\n+  static_assert(test_category<is_rvalue_reference, int&&>(true), \"\");\n+  static_assert(test_category<is_rvalue_reference, ClassType&&>(true), \"\");\n+  static_assert(test_category<is_rvalue_reference, int(&&)(int)>(true), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_rvalue_reference, int&>(false)) );\n-  VERIFY( (test_category<is_rvalue_reference, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_rvalue_reference, int&>(false), \"\");\n+  static_assert(test_category<is_rvalue_reference, ClassType>(false), \"\");\n }"}, {"sha": "7e37565860bce5bb07329761250579290ff8418b", "filename": "libstdc++-v3/testsuite/20_util/is_scalar/value.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scalar%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scalar%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scalar%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-11-30  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,30 +21,22 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_scalar;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_scalar, int>(true)) );\n-  VERIFY( (test_category<is_scalar, float>(true)) );\n-  VERIFY( (test_category<is_scalar, EnumType>(true)) );\n-  VERIFY( (test_category<is_scalar, int*>(true)) );\n-  VERIFY( (test_category<is_scalar, int(*)(int)>(true)) );\n-  VERIFY( (test_category<is_scalar, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<is_scalar, int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<is_scalar, std::nullptr_t>(true)) );\n+  static_assert(test_category<is_scalar, int>(true), \"\");\n+  static_assert(test_category<is_scalar, float>(true), \"\");\n+  static_assert(test_category<is_scalar, EnumType>(true), \"\");\n+  static_assert(test_category<is_scalar, int*>(true), \"\");\n+  static_assert(test_category<is_scalar, int(*)(int)>(true), \"\");\n+  static_assert(test_category<is_scalar, int (ClassType::*)>(true), \"\");\n+  static_assert(test_category<is_scalar, int (ClassType::*) (int)>(true), \"\");\n+  static_assert(test_category<is_scalar, std::nullptr_t>(true), \"\");\n \n   // Sanity check.\n-  VERIFY( (test_category<is_scalar, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_scalar, ClassType>(false), \"\");\n }"}, {"sha": "e72a4ef87b9fbf7d741e04b02c82b580e82ed8ba", "filename": "libstdc++-v3/testsuite/20_util/is_signed/value.cc", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2005-01-24  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2005-2013 Free Software Foundation, Inc.\n@@ -19,52 +21,45 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_signed;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_signed, void>(false)) );\n+  static_assert(test_category<is_signed, void>(false), \"\");\n   \n-  VERIFY( (test_category<is_signed, char>(char(-1) < char(0))) );\n-  VERIFY( (test_category<is_signed, signed char>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned char>(false)) );\n+  static_assert(test_category<is_signed, char>(char(-1) < char(0)), \"\");\n+  static_assert(test_category<is_signed, signed char>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned char>(false), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_signed, wchar_t>(wchar_t(-1) < wchar_t(0))) );\n+  static_assert(test_category<is_signed, wchar_t>\n+\t\t(wchar_t(-1) < wchar_t(0)), \"\");\n #endif\n-  VERIFY( (test_category<is_signed, short>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned short>(false)) );\n-  VERIFY( (test_category<is_signed, int>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned int>(false)) );\n-  VERIFY( (test_category<is_signed, long>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned long>(false)) );\n-  VERIFY( (test_category<is_signed, long long>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned long long>(false)) );\n+  static_assert(test_category<is_signed, short>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned short>(false), \"\");\n+  static_assert(test_category<is_signed, int>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned int>(false), \"\");\n+  static_assert(test_category<is_signed, long>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned long>(false), \"\");\n+  static_assert(test_category<is_signed, long long>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned long long>(false), \"\");\n \n-  VERIFY( (test_category<is_signed, float>(true)) );\n-  VERIFY( (test_category<is_signed, double>(true)) );\n-  VERIFY( (test_category<is_signed, long double>(true)) );\n+  static_assert(test_category<is_signed, float>(true), \"\");\n+  static_assert(test_category<is_signed, double>(true), \"\");\n+  static_assert(test_category<is_signed, long double>(true), \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_signed, __int128>(true)) );\n-  VERIFY( (test_category<is_signed, unsigned __int128>(false)) );\n+  static_assert(test_category<is_signed, __int128>(true), \"\");\n+  static_assert(test_category<is_signed, unsigned __int128>(false), \"\");\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128\n-  VERIFY( (test_category<is_signed, __float128>(true)) );\n+  static_assert(test_category<is_signed, __float128>(true), \"\");\n #endif\n \n   // Sanity check.\n-  VERIFY( (test_category<is_signed, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_signed, ClassType>(false), \"\");\n }"}, {"sha": "7bb417c889392fe11d3e7c95ee28e3766d5f759f", "filename": "libstdc++-v3/testsuite/20_util/is_standard_layout/value.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,24 +21,16 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_standard_layout;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_standard_layout, SLType>(true)) );\n-  VERIFY( (test_category<is_standard_layout, PODType>(true)) );\n-\n-  VERIFY( (test_category<is_standard_layout, NType>(false)) );\n-  VERIFY( (test_category<is_standard_layout, TType>(false)) );\n-}\n+  static_assert(test_category<is_standard_layout, SLType>(true), \"\");\n+  static_assert(test_category<is_standard_layout, PODType>(true), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_standard_layout, NType>(false), \"\");\n+  static_assert(test_category<is_standard_layout, TType>(false), \"\");\n }"}, {"sha": "1798dfb528362959a83572ad7d7a9b3502e300bd", "filename": "libstdc++-v3/testsuite/20_util/is_trivial/value.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n@@ -19,24 +21,16 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_trivial;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_trivial, TType>(true)) );\n-  VERIFY( (test_category<is_trivial, PODType>(true)) );\n-\n-  VERIFY( (test_category<is_trivial, NType>(false)) );\n-  VERIFY( (test_category<is_trivial, SLType>(false)) );\n-}\n+  static_assert(test_category<is_trivial, TType>(true), \"\");\n+  static_assert(test_category<is_trivial, PODType>(true), \"\");\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_trivial, NType>(false), \"\");\n+  static_assert(test_category<is_trivial, SLType>(false), \"\");\n }"}, {"sha": "23c64c476ab4b60fc682d3f3cf3e7f9fe23bcf9c", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_destructible/value.cc", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_destructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_destructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_destructible%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n // { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n //\n // 2012-04-15  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n@@ -20,25 +21,17 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_trivially_destructible;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_trivially_destructible, int>(true)) );\n-  VERIFY( (test_category<is_trivially_destructible, TType>(true)) );\n-  VERIFY( (test_category<is_trivially_destructible, PODType>(true)) );\n+  static_assert(test_category<is_trivially_destructible, int>(true), \"\");\n+  static_assert(test_category<is_trivially_destructible, TType>(true), \"\");\n+  static_assert(test_category<is_trivially_destructible, PODType>(true), \"\");\n \n-  VERIFY( (test_category<is_trivially_destructible, NType>(false)) );\n-  VERIFY( (test_category<is_trivially_destructible, SLType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_trivially_destructible, NType>(false), \"\");\n+  static_assert(test_category<is_trivially_destructible, SLType>(false), \"\");\n }"}, {"sha": "7c9fea3c9b8403b6bbfee574cbc997ae4e2661f8", "filename": "libstdc++-v3/testsuite/20_util/is_unsigned/value.cc", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2005-01-24  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2005-2013 Free Software Foundation, Inc.\n@@ -19,52 +21,45 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::is_unsigned;\n   using namespace __gnu_test;\n+\n+  static_assert(test_category<is_unsigned, void>(false), \"\");\n   \n-  VERIFY( (test_category<is_unsigned, void>(false)) );\n-  \n-  VERIFY( (test_category<is_unsigned, char>(char(-1) > char(0))) );\n-  VERIFY( (test_category<is_unsigned, signed char>(false)) );\n-  VERIFY( (test_category<is_unsigned, unsigned char>(true)) );\n+  static_assert(test_category<is_unsigned, char>(char(-1) > char(0)), \"\");\n+  static_assert(test_category<is_unsigned, signed char>(false), \"\");\n+  static_assert(test_category<is_unsigned, unsigned char>(true), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_unsigned, wchar_t>(wchar_t(-1) > wchar_t(0))) );\n+  static_assert(test_category<is_unsigned, wchar_t>\n+\t\t(wchar_t(-1) > wchar_t(0)), \"\");\n #endif\n-  VERIFY( (test_category<is_unsigned, short>(false)) );\n-  VERIFY( (test_category<is_unsigned, unsigned short>(true)) );\n-  VERIFY( (test_category<is_unsigned, int>(false)) );\n-  VERIFY( (test_category<is_unsigned, unsigned int>(true)) );\n-  VERIFY( (test_category<is_unsigned, long>(false)) );\n-  VERIFY( (test_category<is_unsigned, unsigned long>(true)) );\n-  VERIFY( (test_category<is_unsigned, long long>(false)) );\n-  VERIFY( (test_category<is_unsigned, unsigned long long>(true)) );\n+  static_assert(test_category<is_unsigned, short>(false), \"\");\n+  static_assert(test_category<is_unsigned, unsigned short>(true), \"\");\n+  static_assert(test_category<is_unsigned, int>(false), \"\");\n+  static_assert(test_category<is_unsigned, unsigned int>(true), \"\");\n+  static_assert(test_category<is_unsigned, long>(false), \"\");\n+  static_assert(test_category<is_unsigned, unsigned long>(true), \"\");\n+  static_assert(test_category<is_unsigned, long long>(false), \"\");\n+  static_assert(test_category<is_unsigned, unsigned long long>(true), \"\");\n \n-  VERIFY( (test_category<is_unsigned, float>(false)) );\n-  VERIFY( (test_category<is_unsigned, double>(false)) );\n-  VERIFY( (test_category<is_unsigned, long double>(false)) );\n+  static_assert(test_category<is_unsigned, float>(false), \"\");\n+  static_assert(test_category<is_unsigned, double>(false), \"\");\n+  static_assert(test_category<is_unsigned, long double>(false), \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_unsigned, unsigned __int128>(true)) );\n-  VERIFY( (test_category<is_unsigned, __int128>(false)) );\n+  static_assert(test_category<is_unsigned, unsigned __int128>(true), \"\");\n+  static_assert(test_category<is_unsigned, __int128>(false), \"\");\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128\n-  VERIFY( (test_category<is_unsigned, __float128>(false)) );\n+  static_assert(test_category<is_unsigned, __float128>(false), \"\");\n #endif\n \n   // Sanity check.\n-  VERIFY( (test_category<is_unsigned, ClassType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(test_category<is_unsigned, ClassType>(false), \"\");\n }"}, {"sha": "86097bb70eccaf92ec5dc1ee1215955befab93c3", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n // { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux-* } }\n+// { dg-do compile }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -21,53 +22,46 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n // Ensure that this enum has \"short\" as its underlying type.\n enum test_enum { first_selection = ((unsigned char)-1) + 1 };\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::make_signed;\n   using std::is_same;\n \n   // Positive tests.\n   typedef make_signed<const int>::type  \ttest2_type;\n-  VERIFY( (is_same<test2_type, const int>::value) );\n+  static_assert(is_same<test2_type, const int>::value, \"\");\n \n   typedef make_signed<const unsigned int>::type  \ttest21c_type;\n-  VERIFY( (is_same<test21c_type, const signed int>::value) );\n+  static_assert(is_same<test21c_type, const signed int>::value, \"\");\n \n   typedef make_signed<volatile unsigned int>::type  \ttest21v_type;\n-  VERIFY( (is_same<test21v_type, volatile signed int>::value) );\n+  static_assert(is_same<test21v_type, volatile signed int>::value, \"\");\n \n   typedef make_signed<const volatile unsigned int>::type  \ttest21cv_type;\n-  VERIFY( (is_same<test21cv_type, const volatile signed int>::value) );\n+  static_assert(is_same<test21cv_type,\n+\t\tconst volatile signed int>::value, \"\");\n \n   typedef make_signed<const char>::type  \ttest22_type;\n-  VERIFY( (is_same<test22_type, const signed char>::value) );\n+  static_assert(is_same<test22_type, const signed char>::value, \"\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n-  VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n+  static_assert(is_same<test23_type, volatile signed wchar_t>::value, \"\");\n #endif\n \n   typedef make_signed<test_enum>::type  \ttest24_type;\n-  VERIFY( (is_same<test24_type, short>::value) );\n+  static_assert(is_same<test24_type, short>::value, \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n   typedef make_signed<unsigned __int128>::type  test25_type;\n-  VERIFY( (is_same<test25_type, __int128>::value) );\n+  static_assert(is_same<test25_type, __int128>::value, \"\");\n \n   typedef make_signed<__int128>::type  \t        test26_type;\n-  VERIFY( (is_same<test26_type, __int128>::value) );\n+  static_assert(is_same<test26_type, __int128>::value, \"\");\n #endif\n }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "e6d66dcf9bea37fb0fe4096ae7afa06d15894c26", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -20,56 +21,49 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n enum test_enum { first_selection };\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::make_unsigned;\n   using std::is_same;\n   using std::is_unsigned;\n \n   // Positive tests.\n   typedef make_unsigned<const unsigned int>::type  \ttest2_type;\n-  VERIFY( (is_same<test2_type, const unsigned int>::value) );\n+  static_assert(is_same<test2_type, const unsigned int>::value, \"\");\n \n   typedef make_unsigned<const signed int>::type  \ttest21c_type;\n-  VERIFY( (is_same<test21c_type, const unsigned int>::value) );\n+  static_assert(is_same<test21c_type, const unsigned int>::value, \"\");\n \n   typedef make_unsigned<volatile signed int>::type  \ttest21v_type;\n-  VERIFY( (is_same<test21v_type, volatile unsigned int>::value) );\n+  static_assert(is_same<test21v_type, volatile unsigned int>::value, \"\");\n \n   typedef make_unsigned<const volatile signed int>::type  \ttest21cv_type;\n-  VERIFY( (is_same<test21cv_type, const volatile unsigned int>::value) );\n+  static_assert(is_same<test21cv_type,\n+\t\tconst volatile unsigned int>::value, \"\");\n \n   typedef make_unsigned<const char>::type  \ttest22_type;\n-  VERIFY( (is_same<test22_type, const unsigned char>::value) );\n+  static_assert(is_same<test22_type, const unsigned char>::value, \"\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n-  VERIFY( (is_same<test23_type, volatile wchar_t>::value) );\n+  static_assert(is_same<test23_type, volatile wchar_t>::value, \"\");\n #endif\n \n   // Chapter 48, chapter 20. Smallest rank such that new unsigned type\n   // same size.\n   typedef make_unsigned<test_enum>::type  \t test24_type;\n-  VERIFY( is_unsigned<test24_type>::value );\n-  VERIFY( sizeof(test24_type) == sizeof(test_enum) );\n+  static_assert(is_unsigned<test24_type>::value, \"\");\n+  static_assert(sizeof(test24_type) == sizeof(test_enum), \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n   typedef make_unsigned<unsigned __int128>::type test25_type;\n-  VERIFY( (is_same<test25_type, unsigned __int128>::value) );\n+  static_assert(is_same<test25_type, unsigned __int128>::value, \"\");\n \n   typedef make_unsigned<__int128>::type  \t test26_type;\n-  VERIFY( (is_same<test26_type, unsigned __int128>::value) );\n+  static_assert(is_same<test26_type, unsigned __int128>::value, \"\");\n #endif\n }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "41119be1fbbbd5a31148d96d5a52881899ab06d4", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,5 +1,6 @@\n-// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n-// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux-* } }\n+// { dg-options \"-std=gnu++11 -funsigned-char -fshort-enums\" }\n+// { dg-options \"-std=gnu++11 -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux-* } }\n+// { dg-do compile }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -21,53 +22,46 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n // Ensure that this enum has \"short\" as its underlying type.\n enum test_enum { first_selection = ((unsigned char)-1) + 1 };\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::make_unsigned;\n   using std::is_same;\n \n   // Positive tests.\n   typedef make_unsigned<const unsigned int>::type  \ttest2_type;\n-  VERIFY( (is_same<test2_type, const unsigned int>::value) );\n+  static_assert(is_same<test2_type, const unsigned int>::value, \"\");\n \n   typedef make_unsigned<const signed int>::type  \ttest21c_type;\n-  VERIFY( (is_same<test21c_type, const unsigned int>::value) );\n+  static_assert(is_same<test21c_type, const unsigned int>::value, \"\");\n \n   typedef make_unsigned<volatile signed int>::type  \ttest21v_type;\n-  VERIFY( (is_same<test21v_type, volatile unsigned int>::value) );\n+  static_assert(is_same<test21v_type, volatile unsigned int>::value, \"\");\n \n   typedef make_unsigned<const volatile signed int>::type  \ttest21cv_type;\n-  VERIFY( (is_same<test21cv_type, const volatile unsigned int>::value) );\n+  static_assert(is_same<test21cv_type,\n+\t\tconst volatile unsigned int>::value, \"\");\n \n   typedef make_unsigned<const char>::type  \ttest22_type;\n-  VERIFY( (is_same<test22_type, const unsigned char>::value) );\n+  static_assert(is_same<test22_type, const unsigned char>::value, \"\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n-  VERIFY( (is_same<test23_type, volatile wchar_t>::value) );\n+  static_assert(is_same<test23_type, volatile wchar_t>::value, \"\");\n #endif\n \n   typedef make_unsigned<test_enum>::type  \t  test24_type;\n-  VERIFY( (is_same<test24_type, unsigned short>::value) );\n+  static_assert(is_same<test24_type, unsigned short>::value, \"\");\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n   typedef make_unsigned<unsigned __int128>::type  test25_type;\n-  VERIFY( (is_same<test25_type, unsigned __int128>::value) );\n+  static_assert(is_same<test25_type, unsigned __int128>::value, \"\");\n \n   typedef make_unsigned<__int128>::type  \t  test26_type;\n-  VERIFY( (is_same<test26_type, unsigned __int128>::value) );\n+  static_assert(is_same<test26_type, unsigned __int128>::value, \"\");\n #endif\n }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "b66d27ee104c27992697a58e803ea1d6638dc1bb", "filename": "libstdc++-v3/testsuite/20_util/remove_reference/value.cc", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Fvalue.cc?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -1,4 +1,6 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n // 2007-06-02  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n@@ -19,34 +21,34 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::remove_reference;\n   using std::is_same;\n   using namespace __gnu_test;\n \n-  VERIFY( (is_same<remove_reference<int&>::type, int>::value) );\n-  VERIFY( (is_same<remove_reference<int>::type, int>::value) );\n-  VERIFY( (is_same<remove_reference<const int&>::type, const int>::value) );\n-  VERIFY( (is_same<remove_reference<int*&>::type, int*>::value) );\n-  VERIFY( (is_same<remove_reference<ClassType&>::type, ClassType>::value) );\n-  VERIFY( (is_same<remove_reference<ClassType>::type, ClassType>::value) );\n-  VERIFY( (is_same<remove_reference<int(&)(int)>::type, int(int)>::value) );\n-  VERIFY( (is_same<remove_reference<int&&>::type, int>::value) );\n-  VERIFY( (is_same<remove_reference<int>::type, int>::value) );\n-  VERIFY( (is_same<remove_reference<const int&&>::type, const int>::value) );\n-  VERIFY( (is_same<remove_reference<int*&&>::type, int*>::value) );\n-  VERIFY( (is_same<remove_reference<ClassType&&>::type, ClassType>::value) );\n-  VERIFY( (is_same<remove_reference<ClassType>::type, ClassType>::value) );\n-  VERIFY( (is_same<remove_reference<int(&&)(int)>::type, int(int)>::value) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert(is_same<remove_reference<int&>::type, int>::value, \"\");\n+  static_assert(is_same<remove_reference<int>::type, int>::value, \"\");\n+  static_assert(is_same<remove_reference<const int&>::type,\n+\t\tconst int>::value, \"\");\n+  static_assert(is_same<remove_reference<int*&>::type, int*>::value, \"\");\n+  static_assert(is_same<remove_reference<ClassType&>::type,\n+\t\tClassType>::value, \"\");\n+  static_assert(is_same<remove_reference<ClassType>::type,\n+\t\tClassType>::value, \"\");\n+  static_assert(is_same<remove_reference<int(&)(int)>::type,\n+\t\tint(int)>::value, \"\");\n+  static_assert(is_same<remove_reference<int&&>::type, int>::value, \"\");\n+  static_assert(is_same<remove_reference<int>::type, int>::value, \"\");\n+  static_assert(is_same<remove_reference<const int&&>::type,\n+\t\tconst int>::value, \"\");\n+  static_assert(is_same<remove_reference<int*&&>::type, int*>::value, \"\");\n+  static_assert(is_same<remove_reference<ClassType&&>::type,\n+\t\tClassType>::value, \"\");\n+  static_assert(is_same<remove_reference<ClassType>::type,\n+\t\tClassType>::value, \"\");\n+  static_assert(is_same<remove_reference<int(&&)(int)>::type,\n+\t\tint(int)>::value, \"\");\n }"}, {"sha": "60d95ec6f0ca79f032126935ffd3c24d1b4f749b", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44916fe15f5fac8269d61ba10bada95be1ab9dfe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=44916fe15f5fac8269d61ba10bada95be1ab9dfe", "patch": "@@ -28,66 +28,68 @@ namespace __gnu_test\n {\n   // For tr1/type_traits.\n   template<template<typename> class Category, typename Type>\n+#if __cplusplus >= 201103L\n+    constexpr\n+#endif\n     bool\n     test_category(bool value)\n     {\n-      bool ret = true;\n-      ret &= Category<Type>::value == value;\n-      ret &= Category<const Type>::value == value;\n-      ret &= Category<volatile Type>::value == value;\n-      ret &= Category<const volatile Type>::value == value;\n-      ret &= Category<Type>::type::value == value;\n-      ret &= Category<const Type>::type::value == value;\n-      ret &= Category<volatile Type>::type::value == value;\n-      ret &= Category<const volatile Type>::type::value == value;\n-      return ret;\n+      return (Category<Type>::value == value\n+\t      && Category<const Type>::value == value\n+\t      && Category<volatile Type>::value == value\n+\t      && Category<const volatile Type>::value == value\n+\t      && Category<Type>::type::value == value\n+\t      && Category<const Type>::type::value == value\n+\t      && Category<volatile Type>::type::value == value\n+\t      && Category<const volatile Type>::type::value == value);\n     }\n \n   template<template<typename> class Property, typename Type>\n+#if __cplusplus >= 201103L\n+    constexpr\n+#endif\n     bool\n     test_property(typename Property<Type>::value_type value)\n     {\n-      bool ret = true;\n-      ret &= Property<Type>::value == value;\n-      ret &= Property<Type>::type::value == value;\n-      return ret;\n+      return (Property<Type>::value == value\n+\t      && Property<Type>::type::value == value);\n     }\n \n   // For testing tr1/type_traits/extent, which has a second template\n   // parameter.\n   template<template<typename, unsigned> class Property,\n \t   typename Type, unsigned Uint>\n+#if __cplusplus >= 201103L\n+    constexpr\n+#endif\n     bool\n     test_property(typename Property<Type, Uint>::value_type value)\n     {\n-      bool ret = true;\n-      ret &= Property<Type, Uint>::value == value;\n-      ret &= Property<Type, Uint>::type::value == value;\n-      return ret;\n+      return (Property<Type, Uint>::value == value\n+\t      && Property<Type, Uint>::type::value == value);\n     }\n \n #if __cplusplus >= 201103L\n   template<template<typename...> class Property,\n \t   typename Type1, typename... Types>\n-    bool\n+    constexpr bool\n     test_property(typename Property<Type1, Types...>::value_type value)\n     {\n-      bool ret = true;\n-      ret &= Property<Type1, Types...>::value == value;\n-      ret &= Property<Type1, Types...>::type::value == value;\n-      return ret;\n+      return (Property<Type1, Types...>::value == value\n+\t      && Property<Type1, Types...>::type::value == value);\n     }\n #endif\n \n   template<template<typename, typename> class Relationship,\n \t   typename Type1, typename Type2>\n+#if __cplusplus >= 201103L\n+    constexpr\n+#endif\n     bool\n     test_relationship(bool value)\n     {\n-      bool ret = true;\n-      ret &= Relationship<Type1, Type2>::value == value;\n-      ret &= Relationship<Type1, Type2>::type::value == value;\n-      return ret;\n+      return (Relationship<Type1, Type2>::value == value\n+\t      && Relationship<Type1, Type2>::type::value == value);\n     }\n \n   // Test types."}]}