{"sha": "6f23a2d08903c793134a3dedf18a34d36ce6c78d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyM2EyZDA4OTAzYzc5MzEzNGEzZGVkZjE4YTM0ZDM2Y2U2Yzc4ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-11-16T11:50:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-11-16T11:50:29Z"}, "message": "sh.c: Do not include algorithm.\n\n\t* config/sh/sh.c: Do not include algorithm.\n\t(sh_emit_scc_to_t): Replace open-coded swap with std::swap\n\tto swap values.\n\t(sh_emit_compare_and_branch): Ditto.\n\t(sh_emit_compare_and_set): Ditto.\n\t* config/sh/sh.md (replacement peephole2): Ditto.\n\t(cstore4_media): Ditto.\n\t(*fmasf4): Ditto.\n\nFrom-SVN: r217626", "tree": {"sha": "f59c9fee672cd745722441e08db0d909086949fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f59c9fee672cd745722441e08db0d909086949fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f23a2d08903c793134a3dedf18a34d36ce6c78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f23a2d08903c793134a3dedf18a34d36ce6c78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f23a2d08903c793134a3dedf18a34d36ce6c78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f23a2d08903c793134a3dedf18a34d36ce6c78d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24b5038632010c92013aa66078c207a28fb09f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b5038632010c92013aa66078c207a28fb09f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b5038632010c92013aa66078c207a28fb09f51"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "747264ce9b2e2491a9c183fcb32c1441813ae894", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f23a2d08903c793134a3dedf18a34d36ce6c78d", "patch": "@@ -1,3 +1,14 @@\n+2014-11-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/sh/sh.c: Do not include algorithm.\n+\t(sh_emit_scc_to_t): Replace open-coded swap with std::swap\n+\tto swap values.\n+\t(sh_emit_compare_and_branch): Ditto.\n+\t(sh_emit_compare_and_set): Ditto.\n+\t* config/sh/sh.md (replacement peephole2): Ditto.\n+\t(cstore4_media): Ditto.\n+\t(*fmasf4): Ditto.\n+\n 2014-11-15  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* lra-remat.c (cand_transf_func): Process regno for"}, {"sha": "5bac2afbcbc64aed15c65bd4c7dc52d0d4a86fa8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6f23a2d08903c793134a3dedf18a34d36ce6c78d", "patch": "@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include <sstream>\n #include <vector>\n-#include <algorithm>\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -2351,11 +2350,7 @@ sh_emit_scc_to_t (enum rtx_code code, rtx op0, rtx op1)\n       break;\n     }\n   if (code != oldcode)\n-    {\n-      rtx tmp = op0;\n-      op0 = op1;\n-      op1 = tmp;\n-    }\n+    std::swap (op0, op1);\n \n   mode = GET_MODE (op0);\n   if (mode == VOIDmode)\n@@ -2436,7 +2431,7 @@ sh_emit_compare_and_branch (rtx *operands, machine_mode mode)\n   enum rtx_code branch_code;\n   rtx op0 = operands[1];\n   rtx op1 = operands[2];\n-  rtx insn, tem;\n+  rtx insn;\n   bool need_ccmpeq = false;\n \n   if (TARGET_SH2E && GET_MODE_CLASS (mode) == MODE_FLOAT)\n@@ -2461,7 +2456,7 @@ sh_emit_compare_and_branch (rtx *operands, machine_mode mode)\n \t  || (code == LE && TARGET_IEEE && TARGET_SH2E)\n \t  || (code == GE && !(TARGET_IEEE && TARGET_SH2E)))\n \t{\n-\t  tem = op0, op0 = op1, op1 = tem;\n+\t  std::swap (op0, op1);\n \t  code = swap_condition (code);\n \t}\n \n@@ -2520,7 +2515,6 @@ sh_emit_compare_and_set (rtx *operands, machine_mode mode)\n   rtx op1 = operands[3];\n   rtx_code_label *lab = NULL;\n   bool invert = false;\n-  rtx tem;\n \n   op0 = force_reg (mode, op0);\n   if ((code != EQ && code != NE\n@@ -2534,8 +2528,8 @@ sh_emit_compare_and_set (rtx *operands, machine_mode mode)\n     {\n       if (code == LT || code == LE)\n \t{\n+\t  std::swap (op0, op1);\n \t  code = swap_condition (code);\n-\t  tem = op0, op0 = op1, op1 = tem;\n \t}\n       if (code == GE)\n \t{"}, {"sha": "7b902953ac63fe21590d48fb16123c5b1876fd05", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f23a2d08903c793134a3dedf18a34d36ce6c78d/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=6f23a2d08903c793134a3dedf18a34d36ce6c78d", "patch": "@@ -1618,14 +1618,9 @@\n   extract_insn (insn2);\n   if (! constrain_operands (1, get_preferred_alternatives (insn2, bb)))\n     {\n-      rtx tmp;\n     failure:\n-      tmp = replacements[0];\n-      replacements[0] = replacements[1];\n-      replacements[1] = tmp;\n-      tmp = replacements[2];\n-      replacements[2] = replacements[3];\n-      replacements[3] = tmp;\n+      std::swap (replacements[0], replacements[1]);\n+      std::swap (replacements[2], replacements[3]);\n       replace_n_hard_rtx (SET_DEST (set1), replacements, 2, 1);\n       replace_n_hard_rtx (SET_DEST (set2), replacements, 2, 1);\n       replace_n_hard_rtx (SET_SRC (set2), replacements, 2, 1);\n@@ -11348,9 +11343,7 @@ label:\n \n   if (swap)\n     {\n-      rtx tem = operands[2];\n-      operands[2] = operands[3];\n-      operands[3] = tem;\n+      std::swap (operands[2], operands[3]);\n       code = swap_condition (code);\n     }\n \n@@ -12538,11 +12531,7 @@ label:\n   /* Change 'b * a + a' into 'a * b + a'.\n      This is better for register allocation.  */\n   if (REGNO (operands[2]) == REGNO (operands[3]))\n-    {\n-      rtx tmp = operands[1];\n-      operands[1] = operands[2];\n-      operands[2] = tmp;\n-    }\n+    std::swap (operands[1], operands[2]);\n }\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])"}]}