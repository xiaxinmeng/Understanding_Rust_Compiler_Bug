{"sha": "6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjMGU1YjljMzIzZGJiZGZhZmI0OWQyYzk0NmJlOGY0MzIzNzIxNA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T12:33:42Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T12:33:42Z"}, "message": "[AArch64 array_mode 4/8] Remove EImode\n\n\t* config/aarch64/aarch64.c (aarch64_simd_attr_length_rglist): Update\n\tcomment.\n\t* config/aarch64/aarch64-builtins.c (ei_UP): Remove.\n\t(aarch64_simd_intEI_type_node): Likewise.\n\t(aarch64_simd_builtin_std_type): Remove EImode case.\n\t(aarch64_init_simd_builtin_types): Don't create/add intEI_type_node.\n\t* config/aarch64/aarch64-modes.def: Remove EImode.\n\nFrom-SVN: r227787", "tree": {"sha": "73e9b8865e6566a4a1a9368ba6206dffebd49c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e9b8865e6566a4a1a9368ba6206dffebd49c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/comments", "author": null, "committer": null, "parents": [{"sha": "7e56d668646e384a2c6cb9f903bdf2b47f31b129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e56d668646e384a2c6cb9f903bdf2b47f31b129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e56d668646e384a2c6cb9f903bdf2b47f31b129"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "d4db5afbbd9af019640ec733797481b56c289271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "patch": "@@ -1,4 +1,14 @@\n-2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_attr_length_rglist): Update\n+\tcomment.\n+\t* config/aarch64/aarch64-builtins.c (ei_UP): Remove.\n+\t(aarch64_simd_intEI_type_node): Likewise.\n+\t(aarch64_simd_builtin_std_type): Remove EImode case.\n+\t(aarch64_init_simd_builtin_types): Don't create/add intEI_type_node.\n+\t* config/aarch64/aarch64-modes.def: Remove EImode.\n+\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_simd_ld3r<mode>):\n \tChange operand mode from <V_THREE_ELEM> to BLK."}, {"sha": "c86f47d374f1c9403b4e68c29778c10c5a79a20f", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "patch": "@@ -75,7 +75,6 @@\n #define v2di_UP  V2DImode\n #define v2df_UP  V2DFmode\n #define ti_UP\t TImode\n-#define ei_UP\t EImode\n #define oi_UP\t OImode\n #define ci_UP\t CImode\n #define xi_UP\t XImode\n@@ -449,7 +448,6 @@ static struct aarch64_simd_type_info aarch64_simd_types [] = {\n static tree aarch64_fp16_type_node = NULL_TREE;\n \n static tree aarch64_simd_intOI_type_node = NULL_TREE;\n-static tree aarch64_simd_intEI_type_node = NULL_TREE;\n static tree aarch64_simd_intCI_type_node = NULL_TREE;\n static tree aarch64_simd_intXI_type_node = NULL_TREE;\n \n@@ -523,8 +521,6 @@ aarch64_simd_builtin_std_type (enum machine_mode mode,\n       return QUAL_TYPE (TI);\n     case OImode:\n       return aarch64_simd_intOI_type_node;\n-    case EImode:\n-      return aarch64_simd_intEI_type_node;\n     case CImode:\n       return aarch64_simd_intCI_type_node;\n     case XImode:\n@@ -641,14 +637,10 @@ aarch64_init_simd_builtin_types (void)\n #define AARCH64_BUILD_SIGNED_TYPE(mode)  \\\n   make_signed_type (GET_MODE_PRECISION (mode));\n   aarch64_simd_intOI_type_node = AARCH64_BUILD_SIGNED_TYPE (OImode);\n-  aarch64_simd_intEI_type_node = AARCH64_BUILD_SIGNED_TYPE (EImode);\n   aarch64_simd_intCI_type_node = AARCH64_BUILD_SIGNED_TYPE (CImode);\n   aarch64_simd_intXI_type_node = AARCH64_BUILD_SIGNED_TYPE (XImode);\n #undef AARCH64_BUILD_SIGNED_TYPE\n \n-  tdecl = add_builtin_type\n-\t    (\"__builtin_aarch64_simd_ei\" , aarch64_simd_intEI_type_node);\n-  TYPE_NAME (aarch64_simd_intEI_type_node) = tdecl;\n   tdecl = add_builtin_type\n \t    (\"__builtin_aarch64_simd_oi\" , aarch64_simd_intOI_type_node);\n   TYPE_NAME (aarch64_simd_intOI_type_node) = tdecl;"}, {"sha": "3bf3b2dea3cbb2af78cba5e6da38cdcda305f86a", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "patch": "@@ -50,9 +50,8 @@ VECTOR_MODE (FLOAT, DF, 1);   /*                 V1DF.  */\n /* Oct Int: 256-bit integer mode needed for 32-byte vector arguments.  */\n INT_MODE (OI, 32);\n \n-/* Opaque integer modes for 3, 6 or 8 Neon double registers (2 is\n-   TImode).  */\n-INT_MODE (EI, 24);\n+/* Opaque integer modes for 3 or 4 Neon q-registers / 6 or 8 Neon d-registers\n+   (2 d-regs = 1 q-reg = TImode).  */\n INT_MODE (CI, 48);\n INT_MODE (XI, 64);\n "}, {"sha": "9c5cf4cb2752fd2d47127206df36a568d31350ea", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec0e5b9c323dbbdfafb49d2c946be8f43237214/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6ec0e5b9c323dbbdfafb49d2c946be8f43237214", "patch": "@@ -10577,7 +10577,7 @@ aarch64_simd_attr_length_move (rtx_insn *insn)\n }\n \n /* Compute and return the length of aarch64_simd_reglist<mode>, where <mode> is\n-   one of VSTRUCT modes: OI, CI, EI, or XI.  */\n+   one of VSTRUCT modes: OI, CI, or XI.  */\n int\n aarch64_simd_attr_length_rglist (enum machine_mode mode)\n {"}]}