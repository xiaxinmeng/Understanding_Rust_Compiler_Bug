{"sha": "97c30075e88f65351d4140a53a0f9acec76a075a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjMzAwNzVlODhmNjUzNTFkNDE0MGE1M2EwZjlhY2VjNzZhMDc1YQ==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2017-11-29T15:37:19Z"}, "committer": {"name": "Daniel Hellstrom", "email": "danielh@gcc.gnu.org", "date": "2017-11-29T15:37:19Z"}, "message": "[SPARC] Errata workaround for GRLIB-TN-0013\n\nThis patch provides a workaround for the errata described in GRLIB-TN-0013.\n\nIf the workaround is enabled it will:\n\n* Prevent div and sqrt instructions in the delay slot.\n\n* Insert NOPs to prevent the sequence (div/sqrt) -> (two or three floating\n  point operations or loads) -> (div/sqrt).\n\n* Not insert NOPs if any of the floating point operations have a dependency\n  on the destination register of the first (div/sqrt).\n\n* Not insert NOPs if one of the floating point operations is a (div/sqrt).\n\n* Insert NOPs to prevent (div/sqrt) followed by a branch.\n\nIt is applicable to GR712RC, UT700, and UT699.\n\n2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n\ngcc/\n\t* config/sparc/sparc.c (fpop_reg_depend_p): New function.\n\t(div_sqrt_insn_p): New function.\n\t(sparc_do_work_around_errata): Insert NOP instructions to\n\tprevent sequences that could trigger the TN-0013 errata for\n\tcertain LEON3 processors.\n\t(pass_work_around_errata::gate): Also test sparc_fix_lost_divsqrt.\n\t(sparc_option_override): Set sparc_fix_lost_divsqrt appropriately.\n\t* config/sparc/sparc.md (fix_lost_divsqrt): New attribute.\n\t(in_branch_delay): Prevent div and sqrt in delay slot if\n\tfix_lost_divsqrt.\n\t* config/sparc/sparc.opt (sparc_fix_lost_divsqrt): New variable.\n\nFrom-SVN: r255237", "tree": {"sha": "545d06bbed1d81221f919c4d58ee659b489724b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/545d06bbed1d81221f919c4d58ee659b489724b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c30075e88f65351d4140a53a0f9acec76a075a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c30075e88f65351d4140a53a0f9acec76a075a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c30075e88f65351d4140a53a0f9acec76a075a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c30075e88f65351d4140a53a0f9acec76a075a/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "7c12d02b4e4b1e9edfe84f63aee439bae15688f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97c30075e88f65351d4140a53a0f9acec76a075a", "patch": "@@ -1,3 +1,17 @@\n+2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (fpop_reg_depend_p): New function.\n+\t(div_sqrt_insn_p): New function.\n+\t(sparc_do_work_around_errata): Insert NOP instructions to\n+\tprevent sequences that could trigger the TN-0013 errata for\n+\tcertain LEON3 processors.\n+\t(pass_work_around_errata::gate): Also test sparc_fix_lost_divsqrt.\n+\t(sparc_option_override): Set sparc_fix_lost_divsqrt appropriately.\n+\t* config/sparc/sparc.md (fix_lost_divsqrt): New attribute.\n+\t(in_branch_delay): Prevent div and sqrt in delay slot if\n+\tfix_lost_divsqrt.\n+\t* config/sparc/sparc.opt (sparc_fix_lost_divsqrt): New variable.\n+\n 2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n \n \t* config/sparc/sparc.c (atomic_insn_p): New function."}, {"sha": "64c88de38fdf1421cd3bd1f757f5c09222a1f558", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=97c30075e88f65351d4140a53a0f9acec76a075a", "patch": "@@ -945,6 +945,39 @@ mem_ref (rtx x)\n   return NULL_RTX;\n }\n \n+/* True if any of INSN's source register(s) is REG.  */\n+\n+static bool\n+insn_uses_reg_p (rtx_insn *insn, unsigned int reg)\n+{\n+  extract_insn (insn);\n+  return ((REG_P (recog_data.operand[1])\n+\t   && REGNO (recog_data.operand[1]) == reg)\n+\t  || (recog_data.n_operands == 3\n+\t      && REG_P (recog_data.operand[2])\n+\t      && REGNO (recog_data.operand[2]) == reg));\n+}\n+\n+/* True if INSN is a floating-point division or square-root.  */\n+\n+static bool\n+div_sqrt_insn_p (rtx_insn *insn)\n+{\n+  if (GET_CODE (PATTERN (insn)) != SET)\n+    return false;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_FPDIVS:\n+    case TYPE_FPSQRTS:\n+    case TYPE_FPDIVD:\n+    case TYPE_FPSQRTD:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* True if INSN is a floating-point instruction.  */\n \n static bool\n@@ -1065,6 +1098,79 @@ sparc_do_work_around_errata (void)\n \t    insert_nop = true;\n \t}\n \n+      /* Look for sequences that could trigger the GRLIB-TN-0013 errata.  */\n+      if (sparc_fix_lost_divsqrt\n+\t  && NONJUMP_INSN_P (insn)\n+\t  && div_sqrt_insn_p (insn))\n+\t{\n+\t  int i;\n+\t  int fp_found = 0;\n+\t  rtx_insn *after;\n+\n+\t  const unsigned int dest_reg = REGNO (SET_DEST (single_set (insn)));\n+\n+\t  next = next_active_insn (insn);\n+\t  if (!next)\n+\t    break;\n+\n+\t  for (after = next, i = 0; i < 4; i++)\n+\t    {\n+\t      /* Count floating-point operations.  */\n+\t      if (i != 3 && fpop_insn_p (after))\n+\t\t{\n+\t\t  /* If the insn uses the destination register of\n+\t\t     the div/sqrt, then it cannot be problematic.  */\n+\t\t  if (insn_uses_reg_p (after, dest_reg))\n+\t\t    break;\n+\t\t  fp_found++;\n+\t\t}\n+\n+\t      /* Count floating-point loads.  */\n+\t      if (i != 3\n+\t\t  && (set = single_set (after)) != NULL_RTX\n+\t\t  && REG_P (SET_DEST (set))\n+\t\t  && REGNO (SET_DEST (set)) > 31)\n+\t\t{\n+\t\t  /* If the insn uses the destination register of\n+\t\t     the div/sqrt, then it cannot be problematic.  */\n+\t\t  if (REGNO (SET_DEST (set)) == dest_reg)\n+\t\t    break;\n+\t\t  fp_found++;\n+\t\t}\n+\n+\t      /* Check if this is a problematic sequence.  */\n+\t      if (i > 1\n+\t\t  && fp_found >= 2\n+\t\t  && div_sqrt_insn_p (after))\n+\t\t{\n+\t\t  /* If this is the short version of the problematic\n+\t\t     sequence we add two NOPs in a row to also prevent\n+\t\t     the long version.  */\n+\t\t  if (i == 2)\n+\t\t    emit_insn_before (gen_nop (), next);\n+\t\t  insert_nop = true;\n+\t\t  break;\n+\t\t}\n+\n+\t      /* No need to scan past a second div/sqrt.  */\n+\t      if (div_sqrt_insn_p (after))\n+\t\tbreak;\n+\n+\t      /* Insert NOP before branch.  */\n+\t      if (i < 3\n+\t\t  && (!NONJUMP_INSN_P (after)\n+\t\t      || GET_CODE (PATTERN (after)) == SEQUENCE))\n+\t\t{\n+\t\t  insert_nop = true;\n+\t\t  break;\n+\t\t}\n+\n+\t      after = next_active_insn (after);\n+\t      if (!after)\n+\t\tbreak;\n+\t    }\n+\t}\n+\n       /* Look for either of these two sequences:\n \n \t Sequence A:\n@@ -1393,7 +1499,7 @@ class pass_work_around_errata : public rtl_opt_pass\n   virtual bool gate (function *)\n     {\n       return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst\n-\t  || sparc_fix_gr712rc || sparc_fix_ut700;\n+\t  || sparc_fix_gr712rc || sparc_fix_ut700 || sparc_fix_lost_divsqrt;\n     }\n \n   virtual unsigned int execute (function *)\n@@ -1763,9 +1869,12 @@ sparc_option_override (void)\n   if (!(target_flags_explicit & MASK_LRA))\n     target_flags |= MASK_LRA;\n \n-  /* Enable the back-to-back store errata workaround for LEON3FT.  */\n+  /* Enable applicable errata workarounds for LEON3FT.  */\n   if (sparc_fix_ut699 || sparc_fix_ut700 || sparc_fix_gr712rc)\n+    {\n     sparc_fix_b2bst = 1;\n+    sparc_fix_lost_divsqrt = 1;\n+    }\n \n   /* Disable FsMULd for the UT699 since it doesn't work correctly.  */\n   if (sparc_fix_ut699)"}, {"sha": "d1af68034dd0d47a8e307f07bfae6d742c3a6f75", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=97c30075e88f65351d4140a53a0f9acec76a075a", "patch": "@@ -430,6 +430,10 @@\n    (symbol_ref \"(sparc_fix_b2bst != 0\n \t\t ? FIX_B2BST_TRUE : FIX_B2BST_FALSE)\"))\n \n+(define_attr \"fix_lost_divsqrt\" \"false,true\"\n+   (symbol_ref \"(sparc_fix_lost_divsqrt != 0\n+\t\t ? FIX_LOST_DIVSQRT_TRUE : FIX_LOST_DIVSQRT_FALSE)\"))\n+\n (define_attr \"fix_gr712rc\" \"false,true\"\n    (symbol_ref \"(sparc_fix_gr712rc != 0\n \t\t ? FIX_GR712RC_TRUE : FIX_GR712RC_FALSE)\"))\n@@ -581,6 +585,9 @@\n (define_attr \"in_branch_delay\" \"false,true\"\n   (cond [(eq_attr \"type\" \"uncond_branch,branch,cbcond,uncond_cbcond,call,sibcall,call_no_delay_slot,multi\")\n \t   (const_string \"false\")\n+\t (and (eq_attr \"fix_lost_divsqrt\" \"true\")\n+\t      (eq_attr \"type\" \"fpdivs,fpsqrts,fpdivd,fpsqrtd\"))\n+\t   (const_string \"false\")\n \t (and (eq_attr \"fix_b2bst\" \"true\") (eq_attr \"type\" \"store,fpstore\"))\n \t   (const_string \"false\")\n \t (and (eq_attr \"fix_ut699\" \"true\") (eq_attr \"type\" \"load,sload\"))"}, {"sha": "71ead75831db81f261c37ed7aa6fe547a47bc2fa", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c30075e88f65351d4140a53a0f9acec76a075a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=97c30075e88f65351d4140a53a0f9acec76a075a", "patch": "@@ -253,6 +253,10 @@ Enable workarounds for the errata of the GR712RC processor.\n TargetVariable\n unsigned int sparc_fix_b2bst\n \n+;; Enable workaround for GRLIB-TN-0013 errata\n+TargetVariable\n+unsigned int sparc_fix_lost_divsqrt\n+\n Mask(LONG_DOUBLE_128)\n ;; Use 128-bit long double\n "}]}