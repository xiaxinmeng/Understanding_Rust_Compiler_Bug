{"sha": "393de53f612cdae21b53be55d42b40c674b23252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZGU1M2Y2MTJjZGFlMjFiNTNiZTU1ZDQyYjQwYzY3NGIyMzI1Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-17T11:45:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-17T11:45:16Z"}, "message": "(try_combine): When checking for two sets of the same register in a split insn...\n\n(try_combine): When checking for two sets of the same register in a\nsplit insn, also test for setting a ZERO_EXTRACT, STRICT_LOW_PART, or\nSUBREG.\n\nFrom-SVN: r10783", "tree": {"sha": "46b1138c15e18f6f348332bc62fbd67ec0cd5827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46b1138c15e18f6f348332bc62fbd67ec0cd5827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393de53f612cdae21b53be55d42b40c674b23252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393de53f612cdae21b53be55d42b40c674b23252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393de53f612cdae21b53be55d42b40c674b23252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393de53f612cdae21b53be55d42b40c674b23252/comments", "author": null, "committer": null, "parents": [{"sha": "4bcdd4d0b29c8053d86b78d802eba6750a5840d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcdd4d0b29c8053d86b78d802eba6750a5840d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcdd4d0b29c8053d86b78d802eba6750a5840d8"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "f86192148e0e14e7f5a0c233325896dda8198f74", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393de53f612cdae21b53be55d42b40c674b23252/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393de53f612cdae21b53be55d42b40c674b23252/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=393de53f612cdae21b53be55d42b40c674b23252", "patch": "@@ -1809,10 +1809,21 @@ try_combine (i3, i2, i1)\n \t  /* It is possible that both insns now set the destination of I3.\n \t     If so, we must show an extra use of it.  */\n \n-\t  if (insn_code_number >= 0 && GET_CODE (SET_DEST (i3set)) == REG\n-\t      && GET_CODE (SET_DEST (i2set)) == REG\n-\t      && REGNO (SET_DEST (i3set)) == REGNO (SET_DEST (i2set)))\n-\t    reg_n_sets[REGNO (SET_DEST (i2set))]++;\n+\t  if (insn_code_number >= 0)\n+\t    {\n+\t      rtx new_i3_dest = SET_DEST (i3set);\n+\t      rtx new_i2_dest = SET_DEST (i2set);\n+\n+\t      while (GET_CODE (new_i3_dest) == ZERO_EXTRACT\n+\t\t     || GET_CODE (new_i3_dest) == STRICT_LOW_PART\n+\t\t     || GET_CODE (new_i3_dest) == SUBREG)\n+\t\tnew_i3_dest = XEXP (new_i3_dest, 0);\n+\n+\t      if (GET_CODE (new_i3_dest) == REG\n+\t\t  && GET_CODE (new_i2_dest) == REG\n+\t\t  && REGNO (new_i3_dest) == REGNO (new_i2_dest))\n+\t\treg_n_sets[REGNO (SET_DEST (i2set))]++;\n+\t    }\n \t}\n \n       /* If we can split it and use I2DEST, go ahead and see if that"}]}