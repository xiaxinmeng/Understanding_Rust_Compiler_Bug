{"sha": "8b8b2c1c00699cedf94f14ae176aebda92aab1a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI4YjJjMWMwMDY5OWNlZGY5NGYxNGFlMTc2YWViZGE5MmFhYjFhNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T10:48:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T10:48:54Z"}, "message": "(OBJS): Add bitmap.o.\n\n(BASIC_BLOCK_H): New make variable for basic-block.h, bitmap.h.\n({flow,combine,regclass,local-alloc,reload1,reorg,sched}.o): Use\nBASIC_BLOCK_H variable instead of basic-block.h.\n\nFrom-SVN: r14419", "tree": {"sha": "fbd9ce9e6e66720d894e3762903ac19effcadbd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd9ce9e6e66720d894e3762903ac19effcadbd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b8b2c1c00699cedf94f14ae176aebda92aab1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8b2c1c00699cedf94f14ae176aebda92aab1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8b2c1c00699cedf94f14ae176aebda92aab1a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8b2c1c00699cedf94f14ae176aebda92aab1a7/comments", "author": null, "committer": null, "parents": [{"sha": "fe0986b439159d4d89bba6afc5bcacffe32e8a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0986b439159d4d89bba6afc5bcacffe32e8a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0986b439159d4d89bba6afc5bcacffe32e8a2c"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "3e5967ef3a1dcbaef471da2361d821ecb5ad0879", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8b2c1c00699cedf94f14ae176aebda92aab1a7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8b2c1c00699cedf94f14ae176aebda92aab1a7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8b8b2c1c00699cedf94f14ae176aebda92aab1a7", "patch": "@@ -547,13 +547,12 @@ BC_ALL = bc-arity.h bc-opcode.h bc-opname.h\n OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n  function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o \\\n  varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o \\\n- dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o \\\n+ dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o \\\n  integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n  regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o \\\n  insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \\\n  insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o \\\n- profile.o \\\n- insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)\n+ profile.o insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)\n \n # GEN files are listed separately, so they can be built before doing parallel\n #  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load\n@@ -619,6 +618,7 @@ CONFIG_H =\n RTL_H = rtl.h rtl.def machmode.h machmode.def\n TREE_H = tree.h real.h tree.def machmode.h machmode.def\n BYTECODE_H = bytecode.h bc-emit.h bc-optab.h\n+BASIC_BLOCK_H = basic-block.h bitmap.h\n \n # \"t\" or nothing, for building multilibbed versions of, say, crtbegin.o.\n T =\n@@ -1276,29 +1276,30 @@ loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h \\\n unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \\\n    integrate.h regs.h flags.h expr.h loop.h\n flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \\\n-   basic-block.h regs.h hard-reg-set.h output.h\n+   $(BASIC_BLOCK_H) regs.h hard-reg-set.h output.h\n combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h  \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \\\n-   basic-block.h recog.h real.h hard-reg-set.h\n+   $(BASIC_BLOCK_H) recog.h real.h hard-reg-set.h\n regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \\\n-   basic-block.h regs.h insn-config.h recog.h reload.h real.h bytecode.h\n-local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h \\\n+   $(BASIC_BLOCK_H) regs.h insn-config.h recog.h reload.h real.h bytecode.h\n+local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) \\\n    regs.h hard-reg-set.h insn-config.h recog.h output.h\n+bitmap.o : bitmap.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) regs.h\n global.o : global.c $(CONFIG_H) $(RTL_H) flags.h  \\\n-   basic-block.h regs.h hard-reg-set.h insn-config.h output.h\n+   $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h output.h\n \n reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h expr.h\\\n    reload.h recog.h hard-reg-set.h insn-config.h insn-codes.h regs.h real.h\n reload1.o : reload1.c $(CONFIG_H) $(RTL_H) real.h flags.h expr.h \\\n    reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h \\\n-   basic-block.h recog.h output.h\n+   $(BASIC_BLOCK_H) recog.h output.h\n caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h \\\n-   regs.h hard-reg-set.h insn-codes.h insn-config.h basic-block.h recog.h \\\n+   regs.h hard-reg-set.h insn-codes.h insn-config.h $(BASIC_BLOCK_H) recog.h \\\n    reload.h expr.h\n reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \\\n-   basic-block.h regs.h insn-config.h insn-attr.h insn-flags.h recog.h \\\n+   $(BASIC_BLOCK_H) regs.h insn-config.h insn-attr.h insn-flags.h recog.h \\\n    flags.h output.h\n-sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n+sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) $(RTL_H) $(BASIC_BLOCK_H) regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h \\\n    recog.h conditions.h insn-config.h insn-attr.h except.h real.h output.h \\"}]}