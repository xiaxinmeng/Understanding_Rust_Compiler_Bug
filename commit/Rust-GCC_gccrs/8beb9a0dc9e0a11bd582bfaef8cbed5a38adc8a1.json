{"sha": "8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlYjlhMGRjOWUwYTExYmQ1ODJiZmFlZjhjYmVkNWEzOGFkYzhhMQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-08T15:26:51Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-08T15:26:51Z"}, "message": "[AArch64] Use fmin/fmax for v[min|max]nm{q} intrinsics\n\n  smin/smax will actually honor quiet NaN.\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def (smax): Remove float\n\tvariants.\n\t(smin): Likewise.\n\t(fmax): New entry.\n\t(fmin): Likewise.\n\t* config/aarch64/arm_neon.h (vmaxnm_f32): Use\n\t__builtin_aarch64_fmaxv2sf.\n\t(vmaxnmq_f32): Likewise.\n\t(vmaxnmq_f64): Likewise.\n\t(vminnm_f32): Likewise.\n\t(vminnmq_f32): Likewise.\n\t(vminnmq_f64): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/simd/vminmaxnm_1.c: New.\n\nFrom-SVN: r238166", "tree": {"sha": "efffb983adc44f8e9f26dd797118ec1e0176ca42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efffb983adc44f8e9f26dd797118ec1e0176ca42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/comments", "author": null, "committer": null, "parents": [{"sha": "cef4b65070a67ba1afa3359f21c48e4529ac154b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef4b65070a67ba1afa3359f21c48e4529ac154b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef4b65070a67ba1afa3359f21c48e4529ac154b"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "1cde33269309087761da75bb4e2ce5d1af36eccd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "patch": "@@ -1,3 +1,18 @@\n+2016-07-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (smax): Remove float\n+\tvariants.\n+\t(smin): Likewise.\n+\t(fmax): New entry.\n+\t(fmin): Likewise.\n+\t* config/aarch64/arm_neon.h (vmaxnm_f32): Use\n+\t__builtin_aarch64_fmaxv2sf.\n+\t(vmaxnmq_f32): Likewise.\n+\t(vmaxnmq_f64): Likewise.\n+\t(vminnm_f32): Likewise.\n+\t(vminnmq_f32): Likewise.\n+\t(vminnmq_f64): Likewise.\n+\n 2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71806"}, {"sha": "f1ad325f464f89c981cbdee8a8f6afafa938639a", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "patch": "@@ -244,13 +244,17 @@\n   /* Implemented by <maxmin><mode>3.\n      smax variants map to fmaxnm,\n      smax_nan variants map to fmax.  */\n-  BUILTIN_VDQIF (BINOP, smax, 3)\n-  BUILTIN_VDQIF (BINOP, smin, 3)\n+  BUILTIN_VDQ_BHSI (BINOP, smax, 3)\n+  BUILTIN_VDQ_BHSI (BINOP, smin, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umax, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umin, 3)\n   BUILTIN_VDQF (BINOP, smax_nan, 3)\n   BUILTIN_VDQF (BINOP, smin_nan, 3)\n \n+  /* Implemented by <fmaxmin><mode>3.  */\n+  BUILTIN_VDQF (BINOP, fmax, 3)\n+  BUILTIN_VDQF (BINOP, fmin, 3)\n+\n   /* Implemented by aarch64_<maxmin_uns>p<mode>.  */\n   BUILTIN_VDQ_BHSI (BINOP, smaxp, 0)\n   BUILTIN_VDQ_BHSI (BINOP, sminp, 0)"}, {"sha": "b0ab1d33d37418f34af8f8d61f6caf143cad8477", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "patch": "@@ -17588,19 +17588,19 @@ vpminnms_f32 (float32x2_t a)\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmaxnm_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_smaxv2sf (__a, __b);\n+  return __builtin_aarch64_fmaxv2sf (__a, __b);\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vmaxnmq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_smaxv4sf (__a, __b);\n+  return __builtin_aarch64_fmaxv4sf (__a, __b);\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vmaxnmq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_smaxv2df (__a, __b);\n+  return __builtin_aarch64_fmaxv2df (__a, __b);\n }\n \n /* vmaxv  */\n@@ -17818,19 +17818,19 @@ vminq_u32 (uint32x4_t __a, uint32x4_t __b)\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vminnm_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_sminv2sf (__a, __b);\n+  return __builtin_aarch64_fminv2sf (__a, __b);\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vminnmq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_sminv4sf (__a, __b);\n+  return __builtin_aarch64_fminv4sf (__a, __b);\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vminnmq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_sminv2df (__a, __b);\n+  return __builtin_aarch64_fminv2df (__a, __b);\n }\n \n /* vminv  */"}, {"sha": "0cbcb8896a216895c031e702350d7733885877b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "patch": "@@ -1,3 +1,7 @@\n+2016-07-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vminmaxnm_1.c: New.\n+\n 2016-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71806"}, {"sha": "96608ebb28351b0dca22d51eebe1256b11f9c7d4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vminmaxnm_1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c?ref=8beb9a0dc9e0a11bd582bfaef8cbed5a38adc8a1", "patch": "@@ -0,0 +1,82 @@\n+/* Test the `v[min|max]nm{q}_f*' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort ();\n+\n+#define CHECK(T, N, R, E) \\\n+  {\\\n+    int i = 0;\\\n+    for (; i < N; i++)\\\n+      if (* (T *) &R[i] != * (T *) &E[i])\\\n+\tabort ();\\\n+  }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float32x2_t f32x2_input1 = vdup_n_f32 (-1.0);\n+  float32x2_t f32x2_input2 = vdup_n_f32 (0.0);\n+  float32x2_t f32x2_exp_minnm  = vdup_n_f32 (-1.0);\n+  float32x2_t f32x2_exp_maxnm  = vdup_n_f32 (0.0);\n+  float32x2_t f32x2_ret_minnm  = vminnm_f32 (f32x2_input1, f32x2_input2);\n+  float32x2_t f32x2_ret_maxnm  = vmaxnm_f32 (f32x2_input1, f32x2_input2);\n+\n+  CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n+  CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n+\n+  f32x2_input1 = vdup_n_f32 (__builtin_nanf (\"\"));\n+  f32x2_input2 = vdup_n_f32 (1.0);\n+  f32x2_exp_minnm  = vdup_n_f32 (1.0);\n+  f32x2_exp_maxnm  = vdup_n_f32 (1.0);\n+  f32x2_ret_minnm  = vminnm_f32 (f32x2_input1, f32x2_input2);\n+  f32x2_ret_maxnm  = vmaxnm_f32 (f32x2_input1, f32x2_input2);\n+\n+  CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n+  CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n+\n+  float32x4_t f32x4_input1 = vdupq_n_f32 (-1024.0);\n+  float32x4_t f32x4_input2 = vdupq_n_f32 (77.0);\n+  float32x4_t f32x4_exp_minnm  = vdupq_n_f32 (-1024.0);\n+  float32x4_t f32x4_exp_maxnm  = vdupq_n_f32 (77.0);\n+  float32x4_t f32x4_ret_minnm  = vminnmq_f32 (f32x4_input1, f32x4_input2);\n+  float32x4_t f32x4_ret_maxnm  = vmaxnmq_f32 (f32x4_input1, f32x4_input2);\n+\n+  CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n+  CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n+\n+  f32x4_input1 = vdupq_n_f32 (-__builtin_nanf (\"\"));\n+  f32x4_input2 = vdupq_n_f32 (-1.0);\n+  f32x4_exp_minnm  = vdupq_n_f32 (-1.0);\n+  f32x4_exp_maxnm  = vdupq_n_f32 (-1.0);\n+  f32x4_ret_minnm  = vminnmq_f32 (f32x4_input1, f32x4_input2);\n+  f32x4_ret_maxnm  = vmaxnmq_f32 (f32x4_input1, f32x4_input2);\n+\n+  CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n+  CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n+\n+  float64x2_t f64x2_input1 = vdupq_n_f64 (1.23);\n+  float64x2_t f64x2_input2 = vdupq_n_f64 (4.56);\n+  float64x2_t f64x2_exp_minnm  = vdupq_n_f64 (1.23);\n+  float64x2_t f64x2_exp_maxnm  = vdupq_n_f64 (4.56);\n+  float64x2_t f64x2_ret_minnm  = vminnmq_f64 (f64x2_input1, f64x2_input2);\n+  float64x2_t f64x2_ret_maxnm  = vmaxnmq_f64 (f64x2_input1, f64x2_input2);\n+\n+  CHECK (uint64_t, 2, f64x2_ret_minnm, f64x2_exp_minnm);\n+  CHECK (uint64_t, 2, f64x2_ret_maxnm, f64x2_exp_maxnm);\n+\n+  f64x2_input1 = vdupq_n_f64 (-__builtin_nan (\"\"));\n+  f64x2_input2 = vdupq_n_f64 (1.0);\n+  f64x2_exp_minnm  = vdupq_n_f64 (1.0);\n+  f64x2_exp_maxnm  = vdupq_n_f64 (1.0);\n+  f64x2_ret_minnm  = vminnmq_f64 (f64x2_input1, f64x2_input2);\n+  f64x2_ret_maxnm  = vmaxnmq_f64 (f64x2_input1, f64x2_input2);\n+\n+  CHECK (uint64_t, 2, f64x2_ret_minnm, f64x2_exp_minnm);\n+  CHECK (uint64_t, 2, f64x2_ret_maxnm, f64x2_exp_maxnm);\n+\n+  return 0;\n+}"}]}