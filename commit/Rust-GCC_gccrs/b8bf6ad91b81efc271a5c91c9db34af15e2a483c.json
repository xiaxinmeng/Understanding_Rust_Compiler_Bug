{"sha": "b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiZjZhZDkxYjgxZWZjMjcxYTVjOTFjOWRiMzRhZjE1ZTJhNDgzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-12-08T20:00:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-12-08T20:00:37Z"}, "message": "re PR c++/45822 (Qt 4.7.0 build fails)\n\n\tPR c++/45822\n\t* cp-tree.h (LOOKUP_DEFAULTED): New.\n\t* call.c (add_function_candidate): Check it.\n\t* method.c (synthesized_method_walk): Set it.\n\t(do_build_copy_assign): Likewise.\n\t* init.c (perform_member_init): Likewise.\n\t(emit_mem_initializers): Likewise.\n\nFrom-SVN: r167602", "tree": {"sha": "5c4c91efbfc591c63836997af7094151c6fd8702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c4c91efbfc591c63836997af7094151c6fd8702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4842525074ad8c1d7365ea5ea51a2d5b023293b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4842525074ad8c1d7365ea5ea51a2d5b023293b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4842525074ad8c1d7365ea5ea51a2d5b023293b"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "e8329c1c4ad914900ed05e84c8aa1993ca1200d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -1,5 +1,13 @@\n 2010-12-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45822\n+\t* cp-tree.h (LOOKUP_DEFAULTED): New.\n+\t* call.c (add_function_candidate): Check it.\n+\t* method.c (synthesized_method_walk): Set it.\n+\t(do_build_copy_assign): Likewise.\n+\t* init.c (perform_member_init): Likewise.\n+\t(emit_mem_initializers): Likewise.\n+\n \tPR c++/46736\n \t* decl.c (cp_finish_decl): Complain about an implicitly deleted\n \tmethod defaulted outside the class."}, {"sha": "1e0b328a1b0a7dbe118d4d7c3ae548e74f3be280", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -1645,13 +1645,10 @@ add_function_candidate (struct z_candidate **candidates,\n   else if (!sufficient_parms_p (parmnode))\n     viable = 0;\n \n-  /* Kludge: When looking for a function from a subobject while generating\n-     an implicit copy/move constructor/operator=, don't consider anything\n-     that takes (a reference to) an unrelated type.  See c++/44909.  */\n-  else if (parmlist\n-\t   && ((flags & LOOKUP_SPECULATIVE)\n-\t       || (current_function_decl\n-\t\t   && DECL_DEFAULTED_FN (current_function_decl))))\n+  /* When looking for a function from a subobject from an implicit\n+     copy/move constructor/operator=, don't consider anything that takes (a\n+     reference to) an unrelated type.  See c++/44909 and core 1092.  */\n+  else if (parmlist && (flags & LOOKUP_DEFAULTED))\n     {\n       if (DECL_CONSTRUCTOR_P (fn))\n \ti = 1;\n@@ -1667,6 +1664,9 @@ add_function_candidate (struct z_candidate **candidates,\n \t\t\t\t    ctype))\n \t    viable = 0;\n \t}\n+\n+      /* This only applies at the top level.  */\n+      flags &= ~LOOKUP_DEFAULTED;\n     }\n \n   if (! viable)"}, {"sha": "03c02fc0933df95f07a73a25af7c655f5ddfad61", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -4227,9 +4227,12 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n    another mechanism.  Exiting early also avoids problems with trying\n    to perform argument conversions when the class isn't complete yet.  */\n #define LOOKUP_SPECULATIVE (LOOKUP_LIST_ONLY << 1)\n+/* Used by calls from defaulted functions to limit the overload set to avoid\n+   cycles trying to declare them (core issue 1092).  */\n+#define LOOKUP_DEFAULTED (LOOKUP_SPECULATIVE << 1)\n /* Used in calls to store_init_value to suppress its usual call to\n    digest_init.  */\n-#define LOOKUP_ALREADY_DIGESTED (LOOKUP_SPECULATIVE << 1)\n+#define LOOKUP_ALREADY_DIGESTED (LOOKUP_DEFAULTED << 1)\n \n #define LOOKUP_NAMESPACES_ONLY(F)  \\\n   (((F) & LOOKUP_PREFER_NAMESPACES) && !((F) & LOOKUP_PREFER_TYPES))"}, {"sha": "5a4f91cfb2b06bd72d62947c2bc398b61695488d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -503,6 +503,9 @@ perform_member_init (tree member, tree init)\n \t}\n       else\n \t{\n+\t  int flags = LOOKUP_NORMAL;\n+\t  if (DECL_DEFAULTED_FN (current_function_decl))\n+\t    flags |= LOOKUP_DEFAULTED;\n \t  if (CP_TYPE_CONST_P (type)\n \t      && init == NULL_TREE\n \t      && !type_has_user_provided_default_constructor (type))\n@@ -511,7 +514,7 @@ perform_member_init (tree member, tree init)\n \t    permerror (DECL_SOURCE_LOCATION (current_function_decl),\n \t\t       \"uninitialized member %qD with %<const%> type %qT\",\n \t\t       member, type);\n-\t  finish_expr_stmt (build_aggr_init (decl, init, 0, \n+\t  finish_expr_stmt (build_aggr_init (decl, init, flags,\n \t\t\t\t\t     tf_warning_or_error));\n \t}\n     }\n@@ -852,11 +855,16 @@ sort_mem_initializers (tree t, tree mem_inits)\n void\n emit_mem_initializers (tree mem_inits)\n {\n+  int flags = LOOKUP_NORMAL;\n+\n   /* We will already have issued an error message about the fact that\n      the type is incomplete.  */\n   if (!COMPLETE_TYPE_P (current_class_type))\n     return;\n \n+  if (DECL_DEFAULTED_FN (current_function_decl))\n+    flags |= LOOKUP_DEFAULTED;\n+\n   /* Sort the mem-initializers into the order in which the\n      initializations should be performed.  */\n   mem_inits = sort_mem_initializers (current_class_type, mem_inits);\n@@ -908,7 +916,7 @@ emit_mem_initializers (tree mem_inits)\n \t\t\t      cp_build_indirect_ref (base_addr, RO_NULL,\n                                                      tf_warning_or_error),\n \t\t\t      arguments,\n-\t\t\t      LOOKUP_NORMAL,\n+\t\t\t      flags,\n                               tf_warning_or_error);\n \t  expand_cleanup_for_base (subobject, NULL_TREE);\n \t}"}, {"sha": "149910c2394eab01c1dadef9dca75815ec8ec35d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -583,6 +583,7 @@ do_build_copy_assign (tree fndecl)\n   tree compound_stmt;\n   bool move_p = move_fn_p (fndecl);\n   bool trivial = trivial_fn_p (fndecl);\n+  int flags = LOOKUP_NORMAL | LOOKUP_NONVIRTUAL | LOOKUP_DEFAULTED;\n \n   compound_stmt = begin_compound_stmt (0);\n   parm = convert_from_reference (parm);\n@@ -622,7 +623,7 @@ do_build_copy_assign (tree fndecl)\n \t\t\t\t\tansi_assopname (NOP_EXPR),\n \t\t\t\t\t&parmvec,\n \t\t\t\t\tbase_binfo,\n-\t\t\t\t\tLOOKUP_NORMAL | LOOKUP_NONVIRTUAL,\n+\t\t\t\t\tflags,\n                                         tf_warning_or_error));\n \t  release_tree_vector (parmvec);\n \t}\n@@ -1175,12 +1176,12 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \n   if (diag)\n     {\n-      flags = LOOKUP_NORMAL|LOOKUP_SPECULATIVE;\n+      flags = LOOKUP_NORMAL|LOOKUP_SPECULATIVE|LOOKUP_DEFAULTED;\n       complain = tf_warning_or_error;\n     }\n   else\n     {\n-      flags = LOOKUP_PROTECT|LOOKUP_SPECULATIVE;\n+      flags = LOOKUP_PROTECT|LOOKUP_SPECULATIVE|LOOKUP_DEFAULTED;\n       complain = tf_none;\n     }\n "}, {"sha": "e505dad28ed9c3c82f829ce5d9714e5d73bf53a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -1,5 +1,8 @@\n 2010-12-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45822\n+\t* g++.dg/init/synth4.C: New.\n+\n \tPR c++/46736\n \t* g++.dg/cpp0x/defaulted21.C: New.\n "}, {"sha": "2b0b0b95a83b9dcd02fc8eddfea0240818d95d16", "filename": "gcc/testsuite/g++.dg/init/synth4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf6ad91b81efc271a5c91c9db34af15e2a483c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fsynth4.C?ref=b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/45822\n+\n+struct A\n+{\n+  A(int);\n+};\n+\n+struct B\n+{\n+  B(A = 0);\n+};\n+\n+struct C\n+{\n+  B b;\n+};\n+\n+C c;"}]}