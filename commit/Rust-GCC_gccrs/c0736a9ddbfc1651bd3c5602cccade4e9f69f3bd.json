{"sha": "c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA3MzZhOWRkYmZjMTY1MWJkM2M1NjAyY2NjYWRlNGU5ZjY5ZjNiZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-31T16:22:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-31T16:22:01Z"}, "message": "cpp_type_traits.h: Add types to the structs thus making type_traits.h redundant...\n\n2005-01-31  Paolo Carlini  <pcarlini@suse.de>\n\t    Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n\t* include/bits/cpp_type_traits.h: Add types to the structs thus\n\tmaking type_traits.h redundant; exploit new __truth_type and\n\t__traitor helpers.\n\t* include/bits/type_traits.h: Remove.\n\t* include/Makefile.am: Update.\n\t* include/Makefile.in: Regenerate.\n\t* include/backward/tempbuf.h: Include cpp_type_traits.h instead.\n\t* include/bits/basic_string.h (replace(iterator, iterator,\n\t_InputIterator, _InputIterator), _S_construct(_InIterator,\n\t_InIterator, const _Alloc&)): Use __is_integer instead.\n\t* include/bits/stl_bvector.h (vector(_InputIterator,\n\t_InputIterator, const allocator_type&), assign(_InputIterator,\n\t_InputIterator), insert(iterator, _InputIterator, _InputIterator)):\n\tLikewise.\n\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n\t_ForwardIterator)): Use __is_scalar.\n\t* include/bits/stl_deque.h (deque(_InputIterator, _InputIterator,\n\tconst allocator_type&), assign(_InputIterator, _InputIterator),\n\tinsert(iterator, _InputIterator, _InputIterator)): Use __is_integer.\n\t* include/bits/stl_list.h (assign(_InputIterator, _InputIterator),\n\tinsert(iterator, _InputIterator, _InputIterator)): Likewise.\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer(_ForwardIterator,\n\t_ForwardIterator)): Use __is_scalar.\n\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n\t_InputIterator, _ForwardIterator), uninitialized_fill(_ForwardIterator,\n\t_ForwardIterator, const _Tp&), uninitialized_fill_n(_ForwardIterator,\n\t_Size, const _Tp&)): Likewise.\n\t* include/bits/stl_vector.h (vector(_InputIterator, _InputIterator,\n\tconst allocator_type&), assign(_InputIterator, _InputIterator),\n\tinsert(iterator, _InputIterator, _InputIterator)): Use __is_integer.\n\t* include/debug/debug.h (__valid_range(const _InputIterator&,\n\tconst _InputIterator&)): Use __is_integer.\n\t* include/ext/slist (assign(_InputIterator, _InputIterator)): Likewise.\n\t* include/std/std_string.h: Include cpp_type_traits.h instead.\n\nCo-Authored-By: Gabriel Dos Reis <gdr@integrable-solutions.net>\n\nFrom-SVN: r94484", "tree": {"sha": "ea17c9630d9b1eae99293b1b8fb9d7fbf632039f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea17c9630d9b1eae99293b1b8fb9d7fbf632039f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/comments", "author": null, "committer": null, "parents": [{"sha": "4e8f0a2e12493d52dd8009a8921496fce9a5ae63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8f0a2e12493d52dd8009a8921496fce9a5ae63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8f0a2e12493d52dd8009a8921496fce9a5ae63"}], "stats": {"total": 702, "additions": 158, "deletions": 544}, "files": [{"sha": "c3c526d0dc5cdb74f0b9c0ffa98ea2031a0531f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,3 +1,41 @@\n+2005-01-31  Paolo Carlini  <pcarlini@suse.de>\n+\t    Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/bits/cpp_type_traits.h: Add types to the structs thus\n+\tmaking type_traits.h redundant; exploit new __truth_type and\n+\t__traitor helpers.\n+\t* include/bits/type_traits.h: Remove.\n+\t* include/Makefile.am: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/backward/tempbuf.h: Include cpp_type_traits.h instead.\n+\t* include/bits/basic_string.h (replace(iterator, iterator,\n+\t_InputIterator, _InputIterator), _S_construct(_InIterator,\n+\t_InIterator, const _Alloc&)): Use __is_integer instead.\n+\t* include/bits/stl_bvector.h (vector(_InputIterator,\n+\t_InputIterator, const allocator_type&), assign(_InputIterator,\n+\t_InputIterator), insert(iterator, _InputIterator, _InputIterator)):\n+\tLikewise.\n+\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n+\t_ForwardIterator)): Use __is_scalar.\n+\t* include/bits/stl_deque.h (deque(_InputIterator, _InputIterator,\n+\tconst allocator_type&), assign(_InputIterator, _InputIterator),\n+\tinsert(iterator, _InputIterator, _InputIterator)): Use __is_integer.\n+\t* include/bits/stl_list.h (assign(_InputIterator, _InputIterator),\n+\tinsert(iterator, _InputIterator, _InputIterator)): Likewise.\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer(_ForwardIterator,\n+\t_ForwardIterator)): Use __is_scalar.\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n+\t_InputIterator, _ForwardIterator), uninitialized_fill(_ForwardIterator,\n+\t_ForwardIterator, const _Tp&), uninitialized_fill_n(_ForwardIterator,\n+\t_Size, const _Tp&)): Likewise.\n+\t* include/bits/stl_vector.h (vector(_InputIterator, _InputIterator,\n+\tconst allocator_type&), assign(_InputIterator, _InputIterator),\n+\tinsert(iterator, _InputIterator, _InputIterator)): Use __is_integer.\n+\t* include/debug/debug.h (__valid_range(const _InputIterator&,\n+\tconst _InputIterator&)): Use __is_integer.\n+\t* include/ext/slist (assign(_InputIterator, _InputIterator)): Likewise.\n+\t* include/std/std_string.h: Include cpp_type_traits.h instead.\n+\n 2005-01-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/19642"}, {"sha": "3fa1dd65e77c2a53328590264e5d96db29df77b2", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the include subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+## Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -150,7 +150,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "d56d35aab7f1811b86190a64bba9347025f51897", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.4 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -366,7 +366,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "151c4c1fb30d859ac1f82009e930380f0bb6ccd1", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Backward-compat support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,7 +62,7 @@\n #include <limits.h>\n #include <stddef.h>\n #include <stdlib.h>\n-#include <bits/type_traits.h>\n+#include <bits/cpp_type_traits.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <ext/memory>"}, {"sha": "2b26fc54d51071d55386f51cb6eecff02803f379", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1361,7 +1361,7 @@ namespace std\n \t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t   && __i2 <= _M_iend());\n \t  __glibcxx_requires_valid_range(__k1, __k2);\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());\n \t}\n \n@@ -1451,7 +1451,7 @@ namespace std\n         static _CharT*\n         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n \t{\n-\t  typedef typename _Is_integer<_InIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n         }\n "}, {"sha": "547ce08d9a6cfd292eb5164c6be625d83570a05f", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 81, "deletions": 117, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,7 @@\n // The  -*- C++ -*- type traits classes for internal use in libstdc++\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +40,8 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n+\n //\n // This file provides some compile-time information about various types.\n // These representations were designed, on purpose, to be constant-expressions\n@@ -63,6 +66,9 @@\n //\n // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.\n //\n+// Update 2005: types are also provided and <bits/type_traits.h> has been\n+// removed.\n+//\n \n // NB: g++ can not compile these if declared within the class\n // __is_pod itself.\n@@ -84,8 +90,26 @@ namespace __gnu_cxx\n     class __normal_iterator;\n } // namespace __gnu_cxx\n \n+struct __true_type { };\n+struct __false_type { };\n+\n namespace std\n {\n+  template<bool>\n+    struct __truth_type\n+    { typedef __false_type __type; };\n+\n+  template<>\n+    struct __truth_type<true>\n+    { typedef __true_type __type; };\n+\n+  template<class _Sp, class _Tp>\n+    struct __traitor\n+    {\n+      enum { _M_type = _Sp::_M_type || _Tp::_M_type };\n+      typedef typename __truth_type<_M_type>::__type __type;\n+    };\n+\n   // Compare for equality of types.\n   template<typename, typename>\n     struct __are_same\n@@ -108,7 +132,7 @@ namespace std\n   // Define a nested type if some predicate holds.\n   template<typename, bool>\n     struct __enable_if\n-    {\n+    { \n     };\n \n   template<typename _Tp>\n@@ -121,19 +145,15 @@ namespace std\n   template<typename _Tp>\n     struct __is_void\n     {\n-      enum\n-\t{\n-\t  _M_type = 0\n-\t};\n+      enum { _M_type = 0 };\n+      typedef __false_type __type;\n     };\n \n   template<>\n     struct __is_void<void>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   //\n@@ -142,10 +162,8 @@ namespace std\n   template<typename _Tp>\n     struct __is_integer\n     {\n-      enum\n-\t{\n-\t  _M_type = 0\n-\t};\n+      enum { _M_type = 0 };\n+      typedef __false_type __type;\n     };\n \n   // Thirteen specializations (yes there are eleven standard integer\n@@ -154,120 +172,94 @@ namespace std\n   template<>\n     struct __is_integer<bool>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<char>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<signed char>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<unsigned char>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n # ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct __is_integer<wchar_t>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n # endif\n \n   template<>\n     struct __is_integer<short>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<unsigned short>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<int>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<unsigned int>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<long>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<unsigned long>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<long long>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_integer<unsigned long long>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   //\n@@ -276,38 +268,30 @@ namespace std\n   template<typename _Tp>\n     struct __is_floating\n     {\n-      enum\n-\t{\n-\t  _M_type = 0\n-\t};\n+      enum { _M_type = 0 };\n+      typedef __false_type __type;\n     };\n \n   // three specializations (float, double and 'long double')\n   template<>\n     struct __is_floating<float>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_floating<double>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   template<>\n     struct __is_floating<long double>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   //\n@@ -316,19 +300,15 @@ namespace std\n   template<typename _Tp>\n     struct __is_pointer\n     {\n-      enum\n-\t{\n-\t  _M_type = 0\n-\t};\n+      enum { _M_type = 0 };\n+      typedef __false_type __type;\n     };\n \n   template<typename _Tp>\n     struct __is_pointer<_Tp*>\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   //\n@@ -337,57 +317,41 @@ namespace std\n   template<typename _Tp>\n     struct __is_normal_iterator\n     {\n-      enum\n-\t{\n-\t  _M_type = 0\n-\t};\n+      enum { _M_type = 0 };\n+      typedef __false_type __type;\n     };\n \n   template<typename _Iterator, typename _Container>\n     struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,\n \t\t\t\t\t\t\t      _Container> >\n     {\n-      enum\n-\t{\n-\t  _M_type = 1\n-\t};\n+      enum { _M_type = 1 };\n+      typedef __true_type __type;\n     };\n \n   //\n   // An arithmetic type is an integer type or a floating point type\n   //\n   template<typename _Tp>\n     struct __is_arithmetic\n-    {\n-      enum\n-\t{\n-\t  _M_type = __is_integer<_Tp>::_M_type || __is_floating<_Tp>::_M_type\n-\t};\n-    };\n-  \n+    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >\n+    { };\n+\n   //\n   // A fundamental type is `void' or and arithmetic type\n   //\n   template<typename _Tp>\n     struct __is_fundamental\n-    {\n-      enum\n-\t{\n-\t  _M_type = __is_void<_Tp>::_M_type || __is_arithmetic<_Tp>::_M_type\n-\t};\n-    };\n+    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >\n+    { };\n \n   //\n   // A scalar type is an arithmetic type or a pointer type\n   // \n   template<typename _Tp>\n     struct __is_scalar\n-    {\n-      enum\n-\t{\n-\t  _M_type = __is_arithmetic<_Tp>::_M_type || __is_pointer<_Tp>::_M_type\n-\t};\n-    };\n+    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >\n+    { };\n \n   //\n   // For the immediate use, the following is a good approximation"}, {"sha": "74985071baa9804d510555cf699b3f9a6bba31f3", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // vector<bool> specialization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -673,7 +673,7 @@ template<typename _Alloc>\n \t     const allocator_type& __a = allocator_type())\n       : _Bvector_base<_Alloc>(__a)\n       {\n-\ttypedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_initialize_dispatch(__first, __last, _Integral());\n       }\n \n@@ -724,7 +724,7 @@ template<typename _Alloc>\n       void\n       assign(_InputIterator __first, _InputIterator __last)\n       {\n-\ttypedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_assign_dispatch(__first, __last, _Integral());\n       }\n \n@@ -863,7 +863,7 @@ template<typename _Alloc>\n       insert(iterator __position,\n \t     _InputIterator __first, _InputIterator __last)\n       {\n-\ttypedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\ttypedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t_M_insert_dispatch(__position, __first, __last, _Integral());\n       }\n "}, {"sha": "71acb253a8a5afbd2c52bbc1856f148c25a9dc16", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // nonstandard construct and destroy functions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,7 +61,7 @@\n #ifndef _STL_CONSTRUCT_H\n #define _STL_CONSTRUCT_H 1\n \n-#include <bits/type_traits.h>\n+#include <bits/cpp_type_traits.h>\n #include <new>\n \n namespace std\n@@ -149,8 +149,8 @@ namespace std\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n                        _Value_type;\n-      typedef typename __type_traits<_Value_type>::has_trivial_destructor\n-                       _Has_trivial_destructor;\n+      typedef typename std::__is_scalar<_Value_type>::__type\n+\t               _Has_trivial_destructor;\n \n       std::__destroy_aux(__first, __last, _Has_trivial_destructor());\n     }"}, {"sha": "27d0304ba041ca31e0545f00000921ccc6d8b3c1", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -702,7 +702,7 @@ namespace _GLIBCXX_STD\n \t: _Base(__a)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -755,7 +755,7 @@ namespace _GLIBCXX_STD\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -1131,7 +1131,7 @@ namespace _GLIBCXX_STD\n \t       _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n "}, {"sha": "b928e00515baaf9028dfc31800720deec79cb5ec", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -561,7 +561,7 @@ namespace _GLIBCXX_STD\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -838,7 +838,7 @@ namespace _GLIBCXX_STD\n \t       _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n "}, {"sha": "66ce24052b3a9db5b9520eae9a71d4d966add57f", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -145,8 +145,7 @@ namespace std\n       _M_len(0), _M_buffer(0)\n     {\n       // Workaround for a __type_traits bug in the pre-7.3 compiler.\n-      typedef typename __type_traits<_Tp>::has_trivial_default_constructor\n-\t      _Trivial;\n+      typedef typename std::__is_scalar<_Tp>::__type _Trivial;\n \n       try\n \t{"}, {"sha": "242ae1519cb85915e1c325c3cb8bd61dd7ba2357", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Raw memory manipulators -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -108,7 +108,7 @@ namespace std\n \t\t       _ForwardIterator __result)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n+      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n       return std::__uninitialized_copy_aux(__first, __last, __result,\n \t\t\t\t\t   _Is_POD());\n     }\n@@ -170,7 +170,7 @@ namespace std\n \t\t       const _Tp& __x)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n+      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n       std::__uninitialized_fill_aux(__first, __last, __x, _Is_POD());\n     }\n \n@@ -214,7 +214,7 @@ namespace std\n     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n+      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;\n       std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n     }\n "}, {"sha": "3495d9312ae8059884b57186f32ef23b08930fee", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -259,7 +259,7 @@ namespace _GLIBCXX_STD\n \t: _Base(__a)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -316,7 +316,7 @@ namespace _GLIBCXX_STD\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -677,7 +677,7 @@ namespace _GLIBCXX_STD\n \t       _InputIterator __last)\n         {\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n \t}\n "}, {"sha": "0a263e5e0b6f6b500529f657ba730e142f55e3f6", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "removed", "additions": 0, "deletions": 385, "changes": 385, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8f0a2e12493d52dd8009a8921496fce9a5ae63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8f0a2e12493d52dd8009a8921496fce9a5ae63/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=4e8f0a2e12493d52dd8009a8921496fce9a5ae63", "patch": "@@ -1,385 +0,0 @@\n-// Type traits implementation -*- C++ -*-\n-\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file type_traits.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _TYPE_TRAITS_H\n-#define _TYPE_TRAITS_H 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-\n-/*\n-This header file provides a framework for allowing compile time dispatch\n-based on type attributes. This is useful when writing template code.\n-For example, when making a copy of an array of an unknown type, it helps\n-to know if the type has a trivial copy constructor or not, to help decide\n-if a memcpy can be used.\n-\n-The class template __type_traits provides a series of typedefs each of\n-which is either __true_type or __false_type. The argument to\n-__type_traits can be any type. The typedefs within this template will\n-attain their correct values by one of these means:\n-    1. The general instantiation contain conservative values which work\n-       for all types.\n-    2. Specializations may be declared to make distinctions between types.\n-    3. Some compilers (such as the Silicon Graphics N32 and N64 compilers)\n-       will automatically provide the appropriate specializations for all\n-       types.\n-\n-EXAMPLE:\n-\n-//Copy an array of elements which have non-trivial copy constructors\n-template <class _Tp> void\n-  copy(_Tp* __source,_Tp* __destination,int __n,__false_type);\n-//Copy an array of elements which have trivial copy constructors. Use memcpy.\n-template <class _Tp> void\n-  copy(_Tp* __source,_Tp* __destination,int __n,__true_type);\n-\n-//Copy an array of any type by using the most efficient copy mechanism\n-template <class _Tp> inline void copy(_Tp* __source,_Tp* __destination,int __n) {\n-   copy(__source,__destination,__n,\n-        typename __type_traits<_Tp>::has_trivial_copy_constructor());\n-}\n-*/\n-\n-struct __true_type {};\n-struct __false_type {};\n-\n-template <class _Tp>\n-  struct __type_traits\n-  {\n-    typedef __true_type     this_dummy_member_must_be_first;\n-    /* Do not remove this member. It informs a compiler which\n-       automatically specializes __type_traits that this\n-       __type_traits template is special. It just makes sure that\n-       things work if an implementation is using a template\n-       called __type_traits for something unrelated. */\n-\n-   /* The following restrictions should be observed for the sake of\n-      compilers which automatically produce type specific specializations\n-      of this class:\n-          - You may reorder the members below if you wish\n-          - You may remove any of the members below if you wish\n-          - You must not rename members without making the corresponding\n-            name change in the compiler\n-          - Members you add will be treated like regular members unless\n-            you add the appropriate support in the compiler. */\n-\n-\n-    typedef __false_type    has_trivial_default_constructor;\n-    typedef __false_type    has_trivial_copy_constructor;\n-    typedef __false_type    has_trivial_assignment_operator;\n-    typedef __false_type    has_trivial_destructor;\n-    typedef __false_type    is_POD_type;\n-  };\n-\n-\n-// Provide some specializations.\n-\n-template<>\n-  struct __type_traits<bool>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<char>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<signed char>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<unsigned char>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<wchar_t>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<short>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<unsigned short>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<int>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<unsigned int>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<long>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<unsigned long>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<long long>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<unsigned long long>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<float>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<double>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template<>\n-  struct __type_traits<long double>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-template <class _Tp>\n-  struct __type_traits<_Tp*>\n-  {\n-    typedef __true_type    has_trivial_default_constructor;\n-    typedef __true_type    has_trivial_copy_constructor;\n-    typedef __true_type    has_trivial_assignment_operator;\n-    typedef __true_type    has_trivial_destructor;\n-    typedef __true_type    is_POD_type;\n-  };\n-\n-// The following could be written in terms of numeric_limits.\n-// We're doing it separately to reduce the number of dependencies.\n-\n-template <class _Tp>\n-  struct _Is_integer\n-  {\n-    typedef __false_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<bool>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<char>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<signed char>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<unsigned char>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<wchar_t>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<short>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<unsigned short>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<int>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<unsigned int>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<long>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<unsigned long>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<long long>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-template<>\n-  struct _Is_integer<unsigned long long>\n-  {\n-    typedef __true_type _Integral;\n-  };\n-\n-#endif /* _TYPE_TRAITS_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "94c89e95facf6f2fe9e961fef22e9b2c9730d67b", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -273,7 +273,7 @@ _GLIBCXX_DEBUG_VERIFY(::std::__is_heap(_First, _Last, _Pred),\t\t\\\n \n #include <stddef.h>                       // for ptrdiff_t\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories\n-#include <bits/type_traits.h>             // for _Is_integer\n+#include <bits/cpp_type_traits.h>         // for __is_integer\n \n namespace __gnu_debug\n {\n@@ -373,7 +373,7 @@ namespace __gnu_debug\n     inline bool\n     __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n     {\n-      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+      typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __gnu_debug::__valid_range_aux(__first, __last, _Integral());\n     }\n "}, {"sha": "9e099e15c729bee0e11f68bf4a6b3823f2e5dc64", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Singly-linked list implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -403,7 +403,7 @@ namespace __gnu_cxx\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n-\t  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n \t}\n \n@@ -526,7 +526,7 @@ namespace __gnu_cxx\n         _M_insert_after_range(_Node_base* __pos,\n \t\t\t      _InIterator __first, _InIterator __last)\n         {\n-\t  typedef typename _Is_integer<_InIterator>::_Integral _Integral;\n+\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n \t  _M_insert_after_range(__pos, __first, __last, _Integral());\n \t}\n "}, {"sha": "d2959f34b2789cc291634bbdc813b5c610840373", "filename": "libstdc++-v3/include/std/std_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h?ref=c0736a9ddbfc1651bd3c5602cccade4e9f69f3bd", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,7 +45,7 @@\n #include <bits/stringfwd.h>\n #include <bits/char_traits.h>\n #include <memory> \t// For allocator.\n-#include <bits/type_traits.h>\n+#include <bits/cpp_type_traits.h>\n #include <iosfwd> \t// For operators >>, <<, and getline decls.\n #include <bits/stl_iterator.h>\n #include <bits/stl_function.h>  // For less"}]}