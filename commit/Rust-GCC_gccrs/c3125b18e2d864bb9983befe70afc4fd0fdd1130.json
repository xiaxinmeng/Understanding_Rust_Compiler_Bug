{"sha": "c3125b18e2d864bb9983befe70afc4fd0fdd1130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxMjViMThlMmQ4NjRiYjk5ODNiZWZlNzBhZmM0ZmQwZmRkMTEzMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-04-28T07:26:18Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-04-28T07:26:18Z"}, "message": "Remove superfluous ' . ' in dg-(error|warning|message|bogus)\n\nfind $(find -type d -name testsuite) -type f \\\n     | xargs sed -ri 's#(dg-(error|warning|message|bogus).*) \\. \\}#\\1 }#'\n\n2017-04-28  Tom de Vries  <tom@codesourcery.com>\n\n\t* c-c++-common/Wimplicit-fallthrough-6.c: Remove superfluous ' . ' in\n\tdg-(error|warning|message|bogus).\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Same.\n\t* c-c++-common/cilk-plus/AN/pr61963.c: Same.\n\t* c-c++-common/cilk-plus/CK/no_args_error.c: Same.\n\t* c-c++-common/pr20000.c: Same.\n\t* c-c++-common/pr49706.c: Same.\n\t* g++.dg/ext/utf16-4.C: Same.\n\t* g++.dg/parse/error2.C: Same.\n\t* g++.dg/warn/Wtype-limits-Wextra.C: Same.\n\t* g++.dg/warn/Wtype-limits.C: Same.\n\t* g++.dg/warn/overflow-warn-1.C: Same.\n\t* g++.dg/warn/overflow-warn-3.C: Same.\n\t* gcc.dg/Wpointer-sign-Wall.c: Same.\n\t* gcc.dg/Wpointer-sign-pedantic.c: Same.\n\t* gcc.dg/Wtype-limits-Wextra.c: Same.\n\t* gcc.dg/Wtype-limits.c: Same.\n\t* gcc.dg/cpp/19990413-1.c: Same.\n\t* gcc.dg/dg-test-1.c: Same.\n\t* gcc.dg/empty-source-2.c: Same.\n\t* gcc.dg/empty-source-3.c: Same.\n\t* gcc.dg/label-decl-2.c: Same.\n\t* gcc.dg/m-un-2.c: Same.\n\t* gcc.dg/uninit-pr19430-O0.c: Same.\n\t* gcc.dg/uninit-pr19430.c: Same.\n\t* gcc.dg/uninit-pr20644-O0.c: Same.\n\t* gcc.dg/utf16-4.c: Same.\n\t* gfortran.dg/pr70006.f90: Same.\n\t* obj-c++.dg/fsf-package-0.m: Same.\n\nFrom-SVN: r247363", "tree": {"sha": "0d6e63a45e6606241e957c41fb06581884c4d5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d6e63a45e6606241e957c41fb06581884c4d5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3125b18e2d864bb9983befe70afc4fd0fdd1130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3125b18e2d864bb9983befe70afc4fd0fdd1130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3125b18e2d864bb9983befe70afc4fd0fdd1130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3125b18e2d864bb9983befe70afc4fd0fdd1130/comments", "author": null, "committer": null, "parents": [{"sha": "119092c17a0c6e947f774692849dedb84acb53f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119092c17a0c6e947f774692849dedb84acb53f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119092c17a0c6e947f774692849dedb84acb53f2"}], "stats": {"total": 130, "additions": 81, "deletions": 49}, "files": [{"sha": "3893b12a9d2519fcea38bc815ede565fd375b2c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -1,3 +1,35 @@\n+2017-04-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* c-c++-common/Wimplicit-fallthrough-6.c: Remove superfluous ' . ' in\n+\tdg-(error|warning|message|bogus).\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Same.\n+\t* c-c++-common/cilk-plus/AN/pr61963.c: Same.\n+\t* c-c++-common/cilk-plus/CK/no_args_error.c: Same.\n+\t* c-c++-common/pr20000.c: Same.\n+\t* c-c++-common/pr49706.c: Same.\n+\t* g++.dg/ext/utf16-4.C: Same.\n+\t* g++.dg/parse/error2.C: Same.\n+\t* g++.dg/warn/Wtype-limits-Wextra.C: Same.\n+\t* g++.dg/warn/Wtype-limits.C: Same.\n+\t* g++.dg/warn/overflow-warn-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-3.C: Same.\n+\t* gcc.dg/Wpointer-sign-Wall.c: Same.\n+\t* gcc.dg/Wpointer-sign-pedantic.c: Same.\n+\t* gcc.dg/Wtype-limits-Wextra.c: Same.\n+\t* gcc.dg/Wtype-limits.c: Same.\n+\t* gcc.dg/cpp/19990413-1.c: Same.\n+\t* gcc.dg/dg-test-1.c: Same.\n+\t* gcc.dg/empty-source-2.c: Same.\n+\t* gcc.dg/empty-source-3.c: Same.\n+\t* gcc.dg/label-decl-2.c: Same.\n+\t* gcc.dg/m-un-2.c: Same.\n+\t* gcc.dg/uninit-pr19430-O0.c: Same.\n+\t* gcc.dg/uninit-pr19430.c: Same.\n+\t* gcc.dg/uninit-pr20644-O0.c: Same.\n+\t* gcc.dg/utf16-4.c: Same.\n+\t* gfortran.dg/pr70006.f90: Same.\n+\t* obj-c++.dg/fsf-package-0.m: Same.\n+\n 2017-04-28  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/evrp7.c: New testcase."}, {"sha": "32d5febda830b8c06130568e04f2a6ebe925c76b", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -117,11 +117,11 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n       }\n     case 2:\n       bar (99);\n@@ -145,13 +145,13 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n       }\n     case 2:\n       bar (99);\n@@ -175,13 +175,13 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  bar (2); /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+\t  bar (2); /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n       }\n     case 2:\n       bar (99);\n@@ -279,9 +279,9 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n \tint j = 9;\n-\tswitch (j); /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+\tswitch (j); /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n       }\n     case 2:\n       bar (99);"}, {"sha": "24a573b4d195fd1e471837e37b5b10dbc8c68658", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -21,8 +21,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n-\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n+\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n       }\n     case 2:\n       bar (99);\n@@ -31,8 +31,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } . } */\n-\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } . } */\n+      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n+\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "205671a5b501ea1b8a205520bb4edb7554ba530f", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr61963.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr61963.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -4,6 +4,6 @@\n \n void f (int * int *a) /* { dg-error \"expected\" } */\n {\n-    a[0:64] = 0; /* { dg-error \"was not declared\" \"\" { target c++ } . } */\n+    a[0:64] = 0; /* { dg-error \"was not declared\" \"\" { target c++ } } */\n     a[0:64] = 0;\n }"}, {"sha": "a2f20d22238832049eace81984ce8fdc2ae3a5a9", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/no_args_error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fno_args_error.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -5,7 +5,7 @@ int spawn_1 ();\n typedef int(*func) (int);\n \n void check () {\n-      func var = spawn_1; /* { dg-error \"invalid conversion from\" \"\" { target c++ } . } */\n+      func var = spawn_1; /* { dg-error \"invalid conversion from\" \"\" { target c++ } } */\n         _Cilk_spawn var (); /* { dg-error \"too few arguments to function\" } */ \n }\n "}, {"sha": "726cb0d1384eed5cbc47ca0e7e128ff7593287d1", "filename": "gcc/testsuite/c-c++-common/pr20000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -24,7 +24,7 @@ int vg(void);\n int vg2(void); /* { dg-bogus \".noreturn. function returns non-void value\" } */\n \n int vg(void) {\n-  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"has return\" { target c } . } */\n+  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"has return\" { target c } } */\n }           /* { dg-warning \"'noreturn' function does return\" \"does return\" { target c } .-1 } */\n \n int vg2(void) {"}, {"sha": "203fc36aad00d3cf745a14b94a5f2258b4b77e0c", "filename": "gcc/testsuite/c-c++-common/pr49706.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -12,13 +12,13 @@ extern bool foo_b (void);\n extern int foo_i (void);\n \n #ifdef __cplusplus\n-template <class T, class U> bool tfn1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n+template <class T, class U> bool tfn1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } } */\n template <class T, class U> bool tfn2(T t, U u) { return ((!t) == u); }\n-template <class T, class U> bool tfn3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n+template <class T, class U> bool tfn3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } } */\n template <class T, class U> bool tfn4(T t, U u) { return ((!g(t)) == u); }\n template <class T, class U> bool tfn5(T t, U u) { return (!!t == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n template <class T, class U> bool tfn6(T t, U u) { return (!!g(t) == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n-template <int N> bool tfn7(int i1, int i2) { return (!i1 == i2); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } . } */\n+template <int N> bool tfn7(int i1, int i2) { return (!i1 == i2); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } } */\n #endif\n \n void"}, {"sha": "e8d6531b20d7a73e950f90aafbfe95b8adf62011", "filename": "gcc/testsuite/g++.dg/ext/utf16-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf16-4.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -13,6 +13,6 @@ const static char16_t\tc5 = U'\\u2029';\n const static char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"implicitly truncated\" } */\n const static char16_t\tc7 = L'a';\n const static char16_t\tc8 = L'\\u2029';\n-const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } . } */\n+const static char16_t\tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } } */\n \t\t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } .-1 } */\n int main () {}"}, {"sha": "cb8f4136ce5a35f3f480d792b10ef85f74488883", "filename": "gcc/testsuite/g++.dg/parse/error2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -8,7 +8,7 @@ int func(double);\n template <int>\n struct Foo {};\n \n-Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"func double\" { target *-*-* } . }\n+Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"func double\" { target *-*-* } }\n // { dg-error \"10:'g' cannot appear in a constant-expression\" \"g\" { target *-*-* } .-1 }\n // { dg-error \"11:a function call cannot appear in a constant-expression\" \"call\" { target *-*-* } .-2 }\n // { dg-error \"12:template argument 1 is invalid\" \"invalid template argument\" { target *-*-* } .-3 }"}, {"sha": "91b5c1b46d8801608b864727e527e0b457e8c85e", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits-Wextra.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -58,7 +58,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return 1;\n   else \n     return 0;"}, {"sha": "c345eff0b44744817b4025e22138c13c200eb637", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -58,7 +58,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return 1;\n   else \n     return 0;"}, {"sha": "c327cc040a58b46a4fa928278e4331e9af01beb1", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -11,7 +11,7 @@ enum e {\n   E1 = UINT_MAX + 1,\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n-  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } . } */\n+  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } } */\n   E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n   /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } .-1 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the"}, {"sha": "ff6864d33ee9a877ea77e3ea6046e249e5f83733", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -11,7 +11,7 @@ enum e {\n   E1 = UINT_MAX + 1,\n   /* Overflow in an unevaluated part of an expression is OK (example\n      in the standard).  */\n-  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } . } */\n+  E2 = 2 || 1 / 0, /* { dg-bogus \"warning: division by zero\" \"\" { xfail *-*-* } } */\n   E3 = 1 / 0, /* { dg-warning \"division by zero\" } */\n   /* { dg-error \"enumerator value for 'E3' is not an integer constant|not a constant.expression\" \"enum error\" { target *-*-* } .-1 } */\n   /* But as in DR#031, the 1/0 in an evaluated subexpression means the"}, {"sha": "d29df30a7adde35f05dd2c1647bf4385c7a79394", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-Wall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-options \"-Wall\" } */\n \n-void foo(unsigned long* ulp); /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" { target *-*-* } . } */\n+void foo(unsigned long* ulp); /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" { target *-*-* } } */\n \n \n void bar(long* lp) {"}, {"sha": "aebfbddb666bc0c23fb63741ba9db84a21aa9b51", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-pedantic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-options \"-pedantic\" } */\n \n-void foo(unsigned long* ulp);/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } . } */\n+void foo(unsigned long* ulp);/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } } */\n \n void bar(long* lp) {\n   foo(lp); /* { dg-warning \"differ in signedness\" } */"}, {"sha": "e5e7f9444767cbb23b5d6fdf768e7383a7b23cbd", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -61,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return 1;\n   else \n     return 0;"}, {"sha": "2d6f9910d447fe91418d0e8294ac6c282abd1762", "filename": "gcc/testsuite/gcc.dg/Wtype-limits.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -13,7 +13,7 @@ void a (unsigned char x)\n     return;\n   if (255 >= x) /* { dg-warning \"comparison is always true due to limited range of data type\" } */\n     return;\n-  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((int)x <= 255) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return;\n   if (255 >= (unsigned char) 1)\n     return;\n@@ -61,7 +61,7 @@ void e (unsigned long long x)\n \n int test (int x) \n {\n-  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } . } */\n+  if ((long long)x <= 0x123456789ABCLL) /* { dg-bogus \"comparison is always true due to limited range of data type\" \"\" { xfail *-*-* } } */\n     return 1;\n   else \n     return 0;"}, {"sha": "bcb7e529bdea5f4b42787b1e6a469dc14c663965", "filename": "gcc/testsuite/gcc.dg/cpp/19990413-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19990413-1.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -9,5 +9,5 @@ func(void)\n {\n   FOO(i\n       = 4)\n-  else;  /* { dg-error \"'else' without a previous 'if'\" \"error on this line\" { target *-*-* } . } */ \n+  else;  /* { dg-error \"'else' without a previous 'if'\" \"error on this line\" { target *-*-* } } */ \n }"}, {"sha": "b4e22e22c7af10352a9125b3984484faa185f9c2", "filename": "gcc/testsuite/gcc.dg/dg-test-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fdg-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fdg-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdg-test-1.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -5,15 +5,15 @@\n void\n foo (void)\n {\t\t\t/* { dg-error \"'a' undeclared\" \"err1\" { target *-*-* } .+1 } */\n-  int z = a + b + c + d;/* { dg-error \"'b' undeclared\" \"err2\" { target *-*-* } . } */\n+  int z = a + b + c + d;/* { dg-error \"'b' undeclared\" \"err2\" { target *-*-* } } */\n }\t\t\t/* { dg-error \"'c' undeclared\" \"err3\" { target *-*-* } .-1 } */\n \n \n /* { dg-error \"'d' undeclared\" \"err4\" { target *-*-* } .-4 } */\n /* { dg-warning \"unused parameter 'e'\" \"warn1\" { target *-*-* } .+3 } */\n \n void\t\t\t\t/* { dg-warning \"unused parameter 'f'\" \"warn2\" { target *-*-* } .+1 } */\n-bar (int e, int f, int g, int h)/* { dg-warning \"unused parameter 'g'\" \"warn3\" { target *-*-* } . } */\n+bar (int e, int f, int g, int h)/* { dg-warning \"unused parameter 'g'\" \"warn3\" { target *-*-* } } */\n {\t\t\t\t/* { dg-warning \"unused parameter 'h'\" \"warn4\" { target *-*-* } .-1 } */\n }\n "}, {"sha": "e0f1e20b22a1a6a2a167feee014c8140b78c05ea", "filename": "gcc/testsuite/gcc.dg/empty-source-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-/* { dg-warning \"ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } . } */\n+/* { dg-warning \"ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } } */"}, {"sha": "a1e1d2c765d3c556be0d23432d5ac58f4ae52c50", "filename": "gcc/testsuite/gcc.dg/empty-source-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-/* { dg-error \"ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } . } */\n+/* { dg-error \"ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } } */"}, {"sha": "2ad427257f93aadadd19263cc2a27124c2c1daa4", "filename": "gcc/testsuite/gcc.dg/label-decl-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-2.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -8,7 +8,7 @@ typedef int b;\n void\n f (void)\n {\n-  __label__ a, b, c, d; /* { dg-warning \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } . } */\n+  __label__ a, b, c, d; /* { dg-warning \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } } */\n   __extension__ (void)&&d; /* { dg-error \"label 'd' used but not defined\" } */\n   goto c; /* { dg-error \"label 'c' used but not defined\" } */\n  a: (void)0;"}, {"sha": "345b9ff4dc22df0cee31d53605191084a8d66318", "filename": "gcc/testsuite/gcc.dg/m-un-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -15,7 +15,7 @@ struct vtable {\n struct vtable mtable = {\n   malloc,\n   free\n-}; /* { dg-warning \"missing initializer\" \"warning regression\" { target *-*-* } . } */\n+}; /* { dg-warning \"missing initializer\" \"warning regression\" { target *-*-* } } */\n    /* { dg-message \"declared here\" \"warning regression 2\" { target *-*-* } 12 } */\n \n /* With designated initializers, we assume you meant to leave out the"}, {"sha": "832aeb30becb569eb57f3a414c8726f4537eee57", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430-O0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -6,7 +6,7 @@ extern void baz (int *);\n int\n foo (int i)\n {\n-  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } . } */\n+  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } } */\n \n   if (bar (i)) {\n     baz (&j);"}, {"sha": "ef47b26bb0221aaad45791db0197664fff685dbc", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -5,7 +5,7 @@ extern void baz (int *);\n int\n foo (int i)\n {\n-  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } . } */\n+  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } } */\n \n   if (bar (i)) { \n     baz (&j);"}, {"sha": "14bd0e214ae57a6fa8a18635bcb8fad92a489bc3", "filename": "gcc/testsuite/gcc.dg/uninit-pr20644-O0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -7,7 +7,7 @@ int foo ()\n   int j;\n \n   if (1 == i)\n-    return j; /* { dg-bogus \"uninitialized\" \"uninitialized\" { xfail *-*-* } . } */\n+    return j; /* { dg-bogus \"uninitialized\" \"uninitialized\" { xfail *-*-* } } */\n \n   return 0;\n }\n@@ -18,7 +18,7 @@ int bar ()\n   int j; \n \n   if (1 == i)\n-    return j; /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } . } */\n+    return j; /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } } */\n \n   return 0;\n }"}, {"sha": "6ef4ae3ff7efbab0feb36deb0d80b8ca5755c507", "filename": "gcc/testsuite/gcc.dg/utf16-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -15,7 +15,7 @@ char16_t\tc5 = U'\\u2029';\n char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"implicitly truncated\" } */\n char16_t\tc7 = L'a';\n char16_t\tc8 = L'\\u2029';\n-char16_t \tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } . } */\n+char16_t \tc9 = L'\\U00064321';\t/* { dg-warning \"implicitly truncated\" \"\" { target { 4byte_wchar_t } } } */\n \t\t\t\t\t/* { dg-warning \"constant too long\" \"\" { target { ! 4byte_wchar_t } } .-1 } */\n \n int main () {}"}, {"sha": "a98d3da88b806ebea9ea730ccf205edd3d47afe9", "filename": "gcc/testsuite/gfortran.dg/pr70006.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70006.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70006.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70006.f90?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -1,9 +1,9 @@\n ! { dg-do compile }\n program test\n-   print 1, 'string 1' ! { dg-error \"FORMAT label 1\" \" \" { target *-*-* } . }\n-   print 1, 'string 2' ! { dg-error \"FORMAT label 1\" \" \" { target *-*-* } . }\n+   print 1, 'string 1' ! { dg-error \"FORMAT label 1\" \" \" { target *-*-* } }\n+   print 1, 'string 2' ! { dg-error \"FORMAT label 1\" \" \" { target *-*-* } }\n !1 format(a)\n-   goto 2 ! { dg-error \"Label 2 referenced\" \" \" { target *-*-* } . }\n-   goto 2 ! { dg-error \"Label 2 referenced\" \" \" { target *-*-* } . }\n+   goto 2 ! { dg-error \"Label 2 referenced\" \" \" { target *-*-* } }\n+   goto 2 ! { dg-error \"Label 2 referenced\" \" \" { target *-*-* } }\n !2 continue\n end program"}, {"sha": "c2fc0cff1d8c760385ca675350052386eda5f34c", "filename": "gcc/testsuite/obj-c++.dg/fsf-package-0.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3125b18e2d864bb9983befe70afc4fd0fdd1130/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m?ref=c3125b18e2d864bb9983befe70afc4fd0fdd1130", "patch": "@@ -32,5 +32,5 @@ void foo (void)\n   a->v2 = 1;\n   a->v3 = [a value] - a->v2;\t/* { dg-warning \".v3. is @protected\" } */\n   a->v4 = a->v3 - 1;\t\t/* { dg-warning \".v4. is @private\" } */\n-  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } . } */\n+  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } } */\n }"}]}