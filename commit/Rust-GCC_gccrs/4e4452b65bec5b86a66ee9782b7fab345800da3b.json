{"sha": "4e4452b65bec5b86a66ee9782b7fab345800da3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0NDUyYjY1YmVjNWI4NmE2NmVlOTc4MmI3ZmFiMzQ1ODAwZGEzYg==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-09-25T09:21:42Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-09-25T09:21:42Z"}, "message": "tree-data-ref.c (dr_analyze_innermost): Add new argument.\n\n\n        * tree-data-ref.c (dr_analyze_innermost): Add new argument.\n        Allow not simple iv if analyzing basic block.\n        (create_data_ref): Update call to dr_analyze_innermost.\n        (stmt_with_adjacent_zero_store_dr_p, ref_base_address):\n        Likewise.\n        * tree-loop-distribution.c (generate_memset_zero): Likewise.\n        * tree-predcom.c (find_looparound_phi): Likewise.\n        * tree-data-ref.h (dr_analyze_innermost): Add new argument.\n\nFrom-SVN: r179161", "tree": {"sha": "bb58bc6b6b42ce97f7de43d99177040a04c462ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb58bc6b6b42ce97f7de43d99177040a04c462ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e4452b65bec5b86a66ee9782b7fab345800da3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4452b65bec5b86a66ee9782b7fab345800da3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4452b65bec5b86a66ee9782b7fab345800da3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4452b65bec5b86a66ee9782b7fab345800da3b/comments", "author": null, "committer": null, "parents": [{"sha": "10b859c0d8b237a76470229dbb99e6c8ad86eb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b859c0d8b237a76470229dbb99e6c8ad86eb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b859c0d8b237a76470229dbb99e6c8ad86eb65"}], "stats": {"total": 122, "additions": 107, "deletions": 15}, "files": [{"sha": "ec9d6b48e9a2c7363c2e1ef7becfb29ea98dc041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -1,3 +1,13 @@\n+2011-09-25  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\t* tree-data-ref.c (dr_analyze_innermost): Add new argument.\n+\tAllow not simple iv if analyzing basic block.\n+\t(create_data_ref): Update call to dr_analyze_innermost.\n+\t(stmt_with_adjacent_zero_store_dr_p, ref_base_address): Likewise.\n+\t* tree-loop-distribution.c (generate_memset_zero): Likewise.\n+\t* tree-predcom.c (find_looparound_phi): Likewise.\n+\t* tree-data-ref.h (dr_analyze_innermost): Add new argument.\n+\n 2011-09-24  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.h (FIRST_PSEUDO_REGISTER): Bump to 103."}, {"sha": "a5c9e43dd58cb13b744e1cb32db43685e9169cca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -1,3 +1,7 @@\n+2011-09-25  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\t* gcc.dg/vect/bb-slp-24.c: New.\n+\n 2011-09-24  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/nsdmi-eh1.C: New."}, {"sha": "cbe1cb3edeaa8cbf6b8aba5561cbb8bf3ea63570", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-24.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-24.c?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define A 3\n+#define N 256\n+\n+short src[N], dst[N];\n+\n+void foo (short * __restrict__ dst, short * __restrict__ src, int h,\n+          int stride, int dummy)\n+{\n+  int i;\n+  h /= 8;\n+  for (i = 0; i < h; i++)\n+    {\n+      dst[0] += A*src[0];\n+      dst[1] += A*src[1];\n+      dst[2] += A*src[2];\n+      dst[3] += A*src[3];\n+      dst[4] += A*src[4];\n+      dst[5] += A*src[5];\n+      dst[6] += A*src[6];\n+      dst[7] += A*src[7];\n+      dst += stride;\n+      src += stride;\n+      if (dummy == 32)\n+        abort ();\n+    }\n+}\n+\n+\n+int main (void)\n+{\n+  int i;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      dst[i] = 0;\n+      src[i] = i;\n+    }\n+\n+  foo (dst, src, N, 8, 0);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (dst[i] != A * i)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized using SLP\" 1 \"slp\" { target vect_element_align } } } */\n+/* { dg-final { cleanup-tree-dump \"slp\" } } */\n+"}, {"sha": "a4c9367d9c674b316092e53087bd3782660dd636", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -722,11 +722,11 @@ canonicalize_base_object_address (tree addr)\n }\n \n /* Analyzes the behavior of the memory reference DR in the innermost loop or\n-   basic block that contains it. Returns true if analysis succeed or false\n+   basic block that contains it.  Returns true if analysis succeed or false\n    otherwise.  */\n \n bool\n-dr_analyze_innermost (struct data_reference *dr)\n+dr_analyze_innermost (struct data_reference *dr, struct loop *nest)\n {\n   gimple stmt = DR_STMT (dr);\n   struct loop *loop = loop_containing_stmt (stmt);\n@@ -769,14 +769,25 @@ dr_analyze_innermost (struct data_reference *dr)\n     }\n   else\n     base = build_fold_addr_expr (base);\n+\n   if (in_loop)\n     {\n       if (!simple_iv (loop, loop_containing_stmt (stmt), base, &base_iv,\n                       false))\n         {\n-          if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"failed: evolution of base is not affine.\\n\");\n-          return false;\n+          if (nest)\n+            {\n+              if (dump_file && (dump_flags & TDF_DETAILS))\n+                fprintf (dump_file, \"failed: evolution of base is not\"\n+                                    \" affine.\\n\");\n+              return false;\n+            }\n+          else\n+            {\n+              base_iv.base = base;\n+              base_iv.step = ssize_int (0);\n+              base_iv.no_overflow = true;\n+            }\n         }\n     }\n   else\n@@ -801,10 +812,18 @@ dr_analyze_innermost (struct data_reference *dr)\n       else if (!simple_iv (loop, loop_containing_stmt (stmt),\n                            poffset, &offset_iv, false))\n         {\n-          if (dump_file && (dump_flags & TDF_DETAILS))\n-            fprintf (dump_file, \"failed: evolution of offset is not\"\n-                                \" affine.\\n\");\n-          return false;\n+          if (nest)\n+            {\n+              if (dump_file && (dump_flags & TDF_DETAILS))\n+                fprintf (dump_file, \"failed: evolution of offset is not\"\n+                                    \" affine.\\n\");\n+              return false;\n+            }\n+          else\n+            {\n+              offset_iv.base = poffset;\n+              offset_iv.step = ssize_int (0);\n+            }\n         }\n     }\n \n@@ -972,7 +991,7 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple stmt,\n   DR_REF (dr) = memref;\n   DR_IS_READ (dr) = is_read;\n \n-  dr_analyze_innermost (dr);\n+  dr_analyze_innermost (dr, nest);\n   dr_analyze_indices (dr, nest, loop);\n   dr_analyze_alias (dr);\n \n@@ -5150,7 +5169,7 @@ stmt_with_adjacent_zero_store_dr_p (gimple stmt)\n   DR_STMT (dr) = stmt;\n   DR_REF (dr) = op0;\n \n-  res = dr_analyze_innermost (dr)\n+  res = dr_analyze_innermost (dr, loop_containing_stmt (stmt))\n     && stride_of_unit_type_p (DR_STEP (dr), TREE_TYPE (op0));\n \n   free_data_ref (dr);\n@@ -5190,7 +5209,7 @@ ref_base_address (gimple stmt, data_ref_loc *ref)\n \n   DR_STMT (dr) = stmt;\n   DR_REF (dr) = *ref->pos;\n-  dr_analyze_innermost (dr);\n+  dr_analyze_innermost (dr, loop_containing_stmt (stmt));\n   base_address = DR_BASE_ADDRESS (dr);\n \n   if (!base_address)"}, {"sha": "c55bd48a81e12f9b3de5370926230ccc0b4efae4", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -386,7 +386,7 @@ DEF_VEC_O (data_ref_loc);\n DEF_VEC_ALLOC_O (data_ref_loc, heap);\n \n bool get_references_in_stmt (gimple, VEC (data_ref_loc, heap) **);\n-bool dr_analyze_innermost (struct data_reference *);\n+bool dr_analyze_innermost (struct data_reference *, struct loop *);\n extern bool compute_data_dependences_for_loop (struct loop *, bool,\n \t\t\t\t\t       VEC (loop_p, heap) **,\n \t\t\t\t\t       VEC (data_reference_p, heap) **,"}, {"sha": "fd633b4d3200f71e4ba2e3599bc6647d4b5f2834", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -268,7 +268,7 @@ generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n \n   DR_STMT (dr) = stmt;\n   DR_REF (dr) = op0;\n-  res = dr_analyze_innermost (dr);\n+  res = dr_analyze_innermost (dr, loop_containing_stmt (stmt));\n   gcc_assert (res && stride_of_unit_type_p (DR_STEP (dr), TREE_TYPE (op0)));\n \n   nb_bytes = build_size_arg_loc (loc, nb_iter, op0, &stmt_list);"}, {"sha": "c55c89e9b71ca7af4be3f6081b5c54bc07e652c4", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4452b65bec5b86a66ee9782b7fab345800da3b/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=4e4452b65bec5b86a66ee9782b7fab345800da3b", "patch": "@@ -1116,7 +1116,7 @@ find_looparound_phi (struct loop *loop, dref ref, dref root)\n   memset (&init_dr, 0, sizeof (struct data_reference));\n   DR_REF (&init_dr) = init_ref;\n   DR_STMT (&init_dr) = phi;\n-  if (!dr_analyze_innermost (&init_dr))\n+  if (!dr_analyze_innermost (&init_dr, loop))\n     return NULL;\n \n   if (!valid_initializer_p (&init_dr, ref->distance + 1, root->ref))"}]}