{"sha": "f62115c9b770a66c5378f78a2d5866243d560573", "node_id": "C_kwDOANBUbNoAKGY2MjExNWM5Yjc3MGE2NmM1Mzc4Zjc4YTJkNTg2NjI0M2Q1NjA1NzM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T20:25:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T20:25:12Z"}, "message": "match.pd: Further complex simplification fixes [PR104675]\n\nMark mentioned in the PR further 2 simplifications that also ICE\nwith complex types.\nFor these, eventually (but IMO GCC 13 materials) we could support it\nfor vector types if it would be uniform vector constants.\nCurrently integer_pow2p is true only for INTEGER_CSTs and COMPLEX_CSTs\nand we can't use bit_and etc. for complex type.\n\n2022-02-25  Jakub Jelinek  <jakub@redhat.com>\n\t    Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/104675\n\t* match.pd (t * 2U / 2 -> t & (~0 / 2), t / 2U * 2 -> t & ~1):\n\tRestrict simplifications to INTEGRAL_TYPE_P.\n\n\t* gcc.dg/pr104675-3.c : New test.", "tree": {"sha": "4f146144ce3374279e18a7cd84442201fb71c3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f146144ce3374279e18a7cd84442201fb71c3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62115c9b770a66c5378f78a2d5866243d560573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62115c9b770a66c5378f78a2d5866243d560573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62115c9b770a66c5378f78a2d5866243d560573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62115c9b770a66c5378f78a2d5866243d560573/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3885a122f817a1b6dca4a84ba9e020d5ab2060af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3885a122f817a1b6dca4a84ba9e020d5ab2060af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3885a122f817a1b6dca4a84ba9e020d5ab2060af"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "97399e580a4c6e88761b824695f276fda0ac717e", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62115c9b770a66c5378f78a2d5866243d560573/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62115c9b770a66c5378f78a2d5866243d560573/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f62115c9b770a66c5378f78a2d5866243d560573", "patch": "@@ -731,7 +731,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Simplify (unsigned t * 2)/2 -> unsigned t & 0x7FFFFFFF.  */\n (simplify\n  (trunc_div (mult @0 integer_pow2p@1) @1)\n- (if (TYPE_UNSIGNED (TREE_TYPE (@0)))\n+ (if (INTEGRAL_TYPE_P (TREE_TYPE (@0)) && TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (bit_and @0 { wide_int_to_tree\n \t\t(type, wi::mask (TYPE_PRECISION (type)\n \t\t\t\t - wi::exact_log2 (wi::to_wide (@1)),\n@@ -740,7 +740,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Simplify (unsigned t / 2) * 2 -> unsigned t & ~1.  */\n (simplify\n  (mult (trunc_div @0 integer_pow2p@1) @1)\n- (if (TYPE_UNSIGNED (TREE_TYPE (@0)))\n+ (if (INTEGRAL_TYPE_P (TREE_TYPE (@0)) && TYPE_UNSIGNED (TREE_TYPE (@0)))\n   (bit_and @0 (negate @1))))\n \n /* Simplify (t * 2) / 2) -> t.  */"}, {"sha": "3b2eb649403603f128f0c27ba6af2a345154f158", "filename": "gcc/testsuite/gcc.dg/pr104675-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62115c9b770a66c5378f78a2d5866243d560573/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104675-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62115c9b770a66c5378f78a2d5866243d560573/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104675-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104675-3.c?ref=f62115c9b770a66c5378f78a2d5866243d560573", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/104675 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+_Complex unsigned int\n+foo (_Complex unsigned int x)\n+{\n+  return (x / 2) * 2;\n+}\n+\n+_Complex unsigned int\n+bar (_Complex unsigned int x)\n+{\n+  return (x * 2) / 2;\n+}\n+\n+_Complex unsigned int\n+baz (_Complex unsigned int x)\n+{\n+  _Complex unsigned int y = x / 2;\n+  return y * 2;\n+}\n+\n+_Complex unsigned int\n+qux (_Complex unsigned int x)\n+{\n+  _Complex unsigned int y = x * 2;\n+  return y / 2;\n+}"}]}