{"sha": "e174accc45d14735a11d8c7abd37c674b2f4f431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE3NGFjY2M0NWQxNDczNWExMWQ4YzdhYmQzN2M2NzRiMmY0ZjQzMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T02:56:57Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T02:56:57Z"}, "message": "(scan_decls): When reading parameter list,\n\nhandle whitespace differently, and keep track of line number.\n\nFrom-SVN: r5890", "tree": {"sha": "47f39935bd73268b4db9c531bd2db5e7dd59f65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f39935bd73268b4db9c531bd2db5e7dd59f65c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e174accc45d14735a11d8c7abd37c674b2f4f431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e174accc45d14735a11d8c7abd37c674b2f4f431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e174accc45d14735a11d8c7abd37c674b2f4f431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e174accc45d14735a11d8c7abd37c674b2f4f431/comments", "author": null, "committer": null, "parents": [{"sha": "13ac10d7fd3244ebab9629a935b99df38227f362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ac10d7fd3244ebab9629a935b99df38227f362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ac10d7fd3244ebab9629a935b99df38227f362"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "a27c1a5dd6f60f239fcd2039dac0e61c2139261a", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e174accc45d14735a11d8c7abd37c674b2f4f431/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e174accc45d14735a11d8c7abd37c674b2f4f431/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=e174accc45d14735a11d8c7abd37c674b2f4f431", "patch": "@@ -32,13 +32,13 @@ int brace_nesting = 0;\n \n /* The first extern_C_braces_length elements of extern_C_braces\n    indicate the (brace nesting levels of) left braces that were\n-   prefixed by extern \"C\". */\n+   prefixed by extern \"C\".  */\n int extern_C_braces_length = 0;\n char extern_C_braces[20];\n #define in_extern_C_brace (extern_C_braces_length>0)\n \n /* True if the function declaration currently being scanned is\n-   prefixed by extern \"C\". */\n+   prefixed by extern \"C\".  */\n int current_extern_C = 0;\n \n static void\n@@ -77,7 +77,7 @@ scan_decls (fp)\n   saw_inline = 0;\n   if (c == '}')\n     {\n-      /* pop an 'extern \"C\"' nesting level, if appropriate */\n+      /* Pop an 'extern \"C\"' nesting level, if appropriate.  */\n       if (extern_C_braces_length\n \t  && extern_C_braces[extern_C_braces_length - 1] == brace_nesting)\n \textern_C_braces_length--;\n@@ -100,11 +100,11 @@ scan_decls (fp)\n       && strncmp (buf.base, \"__DEFINED_MACRO_\", 16) == 0)\n     {\n       /* For certain interesting macro names, fixproto puts\n-\t   #ifdef FOO\n-\t   __DEFINED_MACRO_FOO\n-\t   #endif\n+\t #ifdef FOO\n+\t __DEFINED_MACRO_FOO\n+\t #endif\n \t into the file to be pre-processed.  So if we see __DEFINED_MACRO_FOO,\n-\t it means FOO was defined, which we may want to make a note of. */\n+\t it means FOO was defined, which we may want to make a note of.  */\n       recognized_macro (buf.base+16);\n       goto new_statement;\n     }\n@@ -134,7 +134,7 @@ scan_decls (fp)\n     {\n       int followingc = getc (fp); /* char following token in buf */\n \n-      MAKE_SSTRING_SPACE(&rtype, 1);\n+      MAKE_SSTRING_SPACE (&rtype, 1);\n       *rtype.ptr = 0;\n \n       if (c == IDENTIFIER_TOKEN)\n@@ -143,11 +143,13 @@ scan_decls (fp)\n \t  if (nextc == '(')\n \t    {\n \t      int nesting = 1;\n+\t      int func_lineno = source_lineno;\n+\t      char *args;\n \n \t      arg_list.ptr = arg_list.base;\n-\t      c = skip_spaces (fp, ' ');\n \t      for (;;)\n \t\t{\n+\t\t  c = getc (fp);\n \t\t  if (c == '(')\n \t\t    nesting++;\n \t\t  else if (c == ')')\n@@ -156,17 +158,23 @@ scan_decls (fp)\n \t\t  if (c == EOF)\n \t\t    break;\n \t\t  if (c == '\\n')\n-\t\t    c = ' ';\n-\t\t  SSTRING_PUT(&arg_list, c);\n-\t\t  c = getc (fp);\n+\t\t    {\n+\t\t      c = ' ';\n+\t\t      source_lineno++;\n+\t\t      lineno++;\n+\t\t    }\n+\t\t  SSTRING_PUT (&arg_list, c);\n \t\t}\n-\t      SSTRING_PUT(&arg_list, '\\0');\n+\t      SSTRING_PUT (&arg_list, '\\0');\n+\t      args = arg_list.base;\n+\t      while (*args == ' ')\n+\t\targs++;\n \t      recognized_function (buf.base,\n-\t\t\t\t  saw_inline ? 'I'\n-\t\t\t\t  : in_extern_C_brace || current_extern_C\n-\t\t\t\t  ? 'F' : 'f',\n-\t\t\t\t  rtype.base, arg_list.base,\n-\t\t\t\t  source_filename.base, source_lineno);\n+\t\t\t\t   (saw_inline ? 'I'\n+\t\t\t\t    : in_extern_C_brace || current_extern_C\n+\t\t\t\t    ? 'F' : 'f'),\n+\t\t\t\t   rtype.base, args,\n+\t\t\t\t   source_filename.base, func_lineno);\n \t      c = get_token (fp, &buf);\n \t      if (c == '{')\n \t\t{\n@@ -190,7 +198,7 @@ scan_decls (fp)\n \tgoto handle_statement;\n       sstring_append (&rtype, &buf);\n       if (followingc == ' ' || followingc == '\\t' || followingc == '\\n')\n-\tSSTRING_PUT(&rtype, ' ');\n+\tSSTRING_PUT (&rtype, ' ');\n       c = get_token (fp, &buf);\n     }\n }"}]}