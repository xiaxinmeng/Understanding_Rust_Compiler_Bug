{"sha": "48bb06a77e71672e09f409b719b76c3388cc3b99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiYjA2YTc3ZTcxNjcyZTA5ZjQwOWI3MTliNzZjMzM4OGNjM2I5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T13:27:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T13:27:48Z"}, "message": "[multiple changes]\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb, sem_aux.adb, exp_attr.adb, sem_eval.adb: Minor\n\treformatting.\n\t* sem_util.adb, sem_ch5.adb: Minor reformatting.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_unst.adb (Unnest_Subprogram): Add guard to prevent compiler\n\tabort when handling a reference to a formal in an aspect of a\n\tnested subprogram declaration as an uplevel reference.\n\nFrom-SVN: r229359", "tree": {"sha": "e4c74e1939cb28e61f886ff3194cbb241680e58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c74e1939cb28e61f886ff3194cbb241680e58d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48bb06a77e71672e09f409b719b76c3388cc3b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bb06a77e71672e09f409b719b76c3388cc3b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48bb06a77e71672e09f409b719b76c3388cc3b99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bb06a77e71672e09f409b719b76c3388cc3b99/comments", "author": null, "committer": null, "parents": [{"sha": "a2c314c72b070a170ade9858c6a0ece2105c4508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c314c72b070a170ade9858c6a0ece2105c4508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c314c72b070a170ade9858c6a0ece2105c4508"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "65f700c7341eb08c161d7738eb5d68af6928bd1f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -1,3 +1,15 @@\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb, sem_aux.adb, exp_attr.adb, sem_eval.adb: Minor\n+\treformatting.\n+\t* sem_util.adb, sem_ch5.adb: Minor reformatting.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram): Add guard to prevent compiler\n+\tabort when handling a reference to a formal in an aspect of a\n+\tnested subprogram declaration as an uplevel reference.\n+\n 2015-10-26  Bob Duff  <duff@adacore.com>\n \n \t* snames.ads-tmpl, aspects.adb, aspects.ads: Add the aspect and"}, {"sha": "532dd273d51636a1e0df17cec65d94387307d7ca", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -2999,9 +2999,8 @@ package body Exp_Attr is\n \n          elsif Ekind (Entity (Pref)) = E_Constant\n            and then Present (Renamed_Object (Entity (Pref)))\n-           and then\n-             Ekind (Entity (Renamed_Object (Entity (Pref))))\n-               = E_Enumeration_Literal\n+           and then Ekind (Entity (Renamed_Object (Entity (Pref)))) =\n+                      E_Enumeration_Literal\n          then\n             Rewrite (N,\n               Make_Integer_Literal (Loc,\n@@ -4987,8 +4986,8 @@ package body Exp_Attr is\n             --  both cases the type of the first formal of their expanded\n             --  subprogram is Address)\n \n-            if Etype (First_Entity (Protected_Body_Subprogram (Subprg)))\n-              = RTE (RE_Address)\n+            if Etype (First_Entity (Protected_Body_Subprogram (Subprg))) =\n+                 RTE (RE_Address)\n             then\n                declare\n                   New_Itype : Entity_Id;"}, {"sha": "689726bd919520c0d292e87db078ad348f4c617d", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -496,7 +496,7 @@ package body Exp_Unst is\n                --  We have a new uplevel referenced entity\n \n                --  All we do at this stage is to add the uplevel reference to\n-               --  the table. It's too earch to do anything else, since this\n+               --  the table. It's too early to do anything else, since this\n                --  uplevel reference may come from an unreachable subprogram\n                --  in which case the entry will be deleted.\n \n@@ -798,6 +798,13 @@ package body Exp_Unst is\n                   S := URJ.Caller;\n                   loop\n                      S := Enclosing_Subprogram (S);\n+\n+                     --  if we are at the top level, as can happen with\n+                     --  references to formals in aspects of nested subprogram\n+                     --  declarations, there are no further subprograms to\n+                     --  mark as requiring activation records.\n+\n+                     exit when No (S);\n                      Subps.Table (Subp_Index (S)).Declares_AREC := True;\n                      exit when S = URJ.Callee;\n                   end loop;"}, {"sha": "f2d7b59b18a502d95debf82c1c03927152481da8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -6508,13 +6508,13 @@ package body Exp_Util is\n       Expr : Node_Id) return Node_Id\n    is\n       Loc      : constant Source_Ptr := Sloc (Expr);\n-      Nam      : Name_Id;\n       Arg_List : List_Id;\n+      Nam      : Name_Id;\n \n    begin\n-      --  If predicate checks are suppressed, then return a null statement.\n-      --  For this call, we check only the scope setting. If the caller wants\n-      --  to check a specific entity's setting, they must do it manually.\n+      --  If predicate checks are suppressed, then return a null statement. For\n+      --  this call, we check only the scope setting. If the caller wants to\n+      --  check a specific entity's setting, they must do it manually.\n \n       if Predicate_Checks_Suppressed (Empty) then\n          return Make_Null_Statement (Loc);\n@@ -6548,8 +6548,8 @@ package body Exp_Util is\n          Append_To (Arg_List,\n            Make_Pragma_Argument_Association (Loc,\n              Expression =>\n-               New_Copy_Tree (Expression\n-                 (Find_Aspect (Typ, Aspect_Predicate_Failure)))));\n+               New_Copy_Tree\n+                 (Expression (Find_Aspect (Typ, Aspect_Predicate_Failure)))));\n       end if;\n \n       return"}, {"sha": "f704f93d5de8622c26e02e9b1234ab58d6a39b34", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -120,7 +120,7 @@ package body Sem_Aux is\n       --  If there is an expression, return it\n \n       elsif Present (Expression (D)) then\n-         return (Expression (D));\n+         return Expression (D);\n \n       --  For a constant, see if we have a full view\n "}, {"sha": "418ff13edbb44b7cbc3a1b50008660d69961aa8e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -316,10 +316,11 @@ package body Sem_Ch5 is\n             Get_First_Interp (Lhs, I, It);\n \n             while Present (It.Typ) loop\n+\n                --  An indexed component with generalized indexing is always\n-               --  overloaded with the corresponding dereference. Discard\n-               --  the interpretation that yields a reference type, which\n-               --  is not assignable.\n+               --  overloaded with the corresponding dereference. Discard the\n+               --  interpretation that yields a reference type, which is not\n+               --  assignable.\n \n                if Nkind (Lhs) = N_Indexed_Component\n                  and then Present (Generalized_Indexing (Lhs))"}, {"sha": "3f7e97b1ef1565cd5b4d27ff0e648309030c4d49", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -3761,9 +3761,6 @@ package body Sem_Eval is\n       Source_Type : constant Entity_Id := Etype (Operand);\n       Target_Type : constant Entity_Id := Etype (N);\n \n-      Stat   : Boolean;\n-      Fold   : Boolean;\n-\n       function To_Be_Treated_As_Integer (T : Entity_Id) return Boolean;\n       --  Returns true if type T is an integer type, or if it is a fixed-point\n       --  type to be treated as an integer (i.e. the flag Conversion_OK is set\n@@ -3796,6 +3793,11 @@ package body Sem_Eval is\n              or else (Is_Fixed_Point_Type (T) and then not Conversion_OK (N));\n       end To_Be_Treated_As_Real;\n \n+      --  Local variables\n+\n+      Fold : Boolean;\n+      Stat : Boolean;\n+\n    --  Start of processing for Eval_Type_Conversion\n \n    begin"}, {"sha": "01d6737551c53130c3f56ca2eb380a7fc4718871", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb06a77e71672e09f409b719b76c3388cc3b99/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=48bb06a77e71672e09f409b719b76c3388cc3b99", "patch": "@@ -5345,7 +5345,6 @@ package body Sem_Util is\n    -------------------------\n \n    function Denotes_Same_Prefix (A1, A2 : Node_Id) return Boolean is\n-\n    begin\n       if Is_Entity_Name (A1) then\n          if Nkind_In (A2, N_Selected_Component, N_Indexed_Component)\n@@ -7856,6 +7855,7 @@ package body Sem_Util is\n          return Defining_Entity (Unit);\n       end if;\n    end Get_Parent_Entity;\n+\n    -------------------\n    -- Get_Pragma_Id --\n    -------------------\n@@ -8806,7 +8806,7 @@ package body Sem_Util is\n       Comp : Entity_Id;\n \n    begin\n-      --  A scalar type is fully default initialized if it is subjec to aspect\n+      --  A scalar type is fully default initialized if it is subject to aspect\n       --  Default_Value.\n \n       if Is_Scalar_Type (Typ) then"}]}