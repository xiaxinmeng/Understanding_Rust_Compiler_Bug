{"sha": "4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjNDg2YjZiYTkzNjJmNDVmZTgyNTJiOTFkMGY1YzAzZDg1YTBkMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-12-03T18:40:34Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2020-12-14T17:31:46Z"}, "message": "AArch64: Add support for --with-tune\n\nAdd support for --with-tune. Like --with-cpu and --with-arch, the argument is\nvalidated and transformed into a -mtune option to be processed like any other\ncommand-line option.  --with-tune has no effect if a -mcpu or -mtune option\nis used. The validating code didn't allow --with-cpu=native, so explicitly\nallow that.\n\nCo-authored-by:  Delia Burduv  <delia.burduv@arm.com>\n\nBootstrap OK, regress pass, OK to commit?\n\n2020-09-03  Wilco Dijkstra  <wdijkstr@arm.com>\n\ngcc/\n\t* config.gcc (aarch64*-*-*): Add --with-tune. Support --with-cpu=native.\n\t* config/aarch64/aarch64.h (OPTION_DEFAULT_SPECS): Add --with-tune.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_tune_cortex_a76): New\n\teffective target test.\n\t* gcc.target/aarch64/with-tune-config.c: New test.\n\t* gcc.target/aarch64/with-tune-march.c: Likewise.\n\t* gcc.target/aarch64/with-tune-mcpu.c: Likewise.\n\t* gcc.target/aarch64/with-tune-mtune.c: Likewise.", "tree": {"sha": "8db61072a2218a5d9c04a29a6ab3d20ccfc287a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8db61072a2218a5d9c04a29a6ab3d20ccfc287a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca086b8b8bb3995f369a523e92db4bf0cb763194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca086b8b8bb3995f369a523e92db4bf0cb763194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca086b8b8bb3995f369a523e92db4bf0cb763194"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "50c10dc39f7501bd671dade5e29416b40d0b23be", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -4157,6 +4157,12 @@ case \"${target}\" in\n \t\t\t\t  sed -e 's/,.*$//'`\n \t\t\t  fi\n \n+\t\t\t  # Disallow extensions in --with-tune=cortex-a53+crc.\n+\t\t\t  if [ $which = tune ] && [ x\"$ext_val\" != x ]; then\n+\t\t\t    echo \"Architecture extensions not supported in --with-$which=$val\" 1>&2\n+\t\t\t    exit 1\n+\t\t\t  fi\n+\n \t\t\t  # Use the pre-processor to strip flatten the options.\n \t\t\t  # This makes the format less rigid than if we use\n \t\t\t  # grep and sed directly here.\n@@ -4214,8 +4220,13 @@ case \"${target}\" in\n \t\t\t  fi\n \t\t\t  true\n \t\t\telse\n-\t\t\t  echo \"Unknown $which used in --with-$which=$val\" 1>&2\n-\t\t\t  exit 1\n+\t\t\t  # Allow --with-$which=native.\n+\t\t\t  if [ \"$val\" = native ]; then\n+\t\t\t    true\n+\t\t\t  else\n+\t\t\t    echo \"Unknown $which used in --with-$which=$val\" 1>&2\n+\t\t\t    exit 1\n+\t\t\t  fi\n \t\t\tfi\n \t\tdone\n \t\t;;"}, {"sha": "74bb3b530879d6a19b3fe17544eb7d5343ffde4b", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -1219,12 +1219,14 @@ extern enum aarch64_code_model aarch64_cmodel;\n #define ENDIAN_LANE_N(NUNITS, N) \\\n   (BYTES_BIG_ENDIAN ? NUNITS - 1 - N : N)\n \n-/* Support for a configure-time default CPU, etc.  We currently support\n-   --with-arch and --with-cpu.  Both are ignored if either is specified\n-   explicitly on the command line at run time.  */\n+/* Support for configure-time --with-arch, --with-cpu and --with-tune.\n+   --with-arch and --with-cpu are ignored if either -mcpu or -march is used.\n+   --with-tune is ignored if either -mtune or -mcpu is used (but is not\n+   affected by -march).  */\n #define OPTION_DEFAULT_SPECS\t\t\t\t\\\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" },\t\\\n-  {\"cpu\",  \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" },\n+  {\"cpu\",  \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" },   \\\n+  {\"tune\", \"%{!mcpu=*:%{!mtune=*:-mtune=%(VALUE)}}\"},\n \n #define MCPU_TO_MARCH_SPEC \\\n    \" %{mcpu=*:-march=%:rewrite_mcpu(%{mcpu=*:%*})}\""}, {"sha": "0940e9eea892770fada0b9bc0e05e22bebef1167", "filename": "gcc/testsuite/gcc.target/aarch64/with-tune-config.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-config.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-config.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-config.c?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { tune_cortex_a76 } } } */\n+/* { dg-additional-options \" -dA \" } */\n+\n+void foo ()\n+{}\n+\n+/* { dg-final { scan-assembler \"//.tune cortex-a76\" } } */"}, {"sha": "61039adea71878222dc27633d0818bac2daefeea", "filename": "gcc/testsuite/gcc.target/aarch64/with-tune-march.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-march.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-march.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-march.c?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { tune_cortex_a76 } } } */\n+/* { dg-additional-options \" -dA -march=armv8.6-a \" } */\n+\n+void foo ()\n+{}\n+\n+/* { dg-final { scan-assembler \"//.tune cortex-a76\" } } */\n+/* { dg-final { scan-assembler \".arch armv8.6-a\" } } */"}, {"sha": "4f8267a5c167cbeda28537811a4f41d51afb05b0", "filename": "gcc/testsuite/gcc.target/aarch64/with-tune-mcpu.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mcpu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mcpu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mcpu.c?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { tune_cortex_a76 } } } */\n+/* { dg-additional-options \" -dA -mcpu=cortex-a73\" } */\n+\n+void foo ()\n+{}\n+\n+/* { dg-final { scan-assembler \"//.tune cortex-a73\" } } */\n+/* { dg-final { scan-assembler \".arch armv8-a\" } } */"}, {"sha": "60f795a3919968153ba7bf092e22b135d9078294", "filename": "gcc/testsuite/gcc.target/aarch64/with-tune-mtune.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mtune.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mtune.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fwith-tune-mtune.c?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { tune_cortex_a76 } } } */\n+/* { dg-additional-options \" -dA -mtune=cortex-a73\" } */\n+\n+void foo ()\n+{}\n+\n+/* { dg-final { scan-assembler \"//.tune cortex-a73\" } } */"}, {"sha": "3c02f763e7e0963505b7d487cc74e6a235695bf2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4dc486b6ba9362f45fe8252b91d0f5c03d85a0d0", "patch": "@@ -10744,6 +10744,11 @@ proc check_effective_target_msp430_large {} {\n     } \"\"]\n }\n \n+# Return 1 if GCC was configured with --with-tune=cortex-a76\n+proc check_effective_target_tune_cortex_a76 { } {\n+    return [check_configured_with \"with-tune=cortex-a76\"]\n+}\n+\n # Return 1 if the target has an efficient means to encode large initializers\n # in the assembly.\n "}]}