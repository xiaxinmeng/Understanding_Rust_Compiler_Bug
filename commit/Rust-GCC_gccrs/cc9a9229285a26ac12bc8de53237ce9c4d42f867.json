{"sha": "cc9a9229285a26ac12bc8de53237ce9c4d42f867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5YTkyMjkyODVhMjZhYzEyYmM4ZGU1MzIzN2NlOWM0ZDQyZjg2Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-05T18:11:35Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-05T18:13:41Z"}, "message": "Test global identifiers against what is specified interfaces.\n\nApart from calling gfc_compare_interfaces to check interfaces against\nglobal identifiers, this also sets and check a few sym->error flags\nto avoid duplicate error messages.  I thought about issuing errors\non mismatched interfaces, but when the procedure is not invoked,\na warning should be enough to alert the user.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/27318\n\t* frontend-passes.c (check_against_globals): New function.\n\t(gfc_check_externals): Split; also invoke check_against_globals\n\tvia gfc_traverse_ns.\n\t(gfc_check_externals0): Recursive part formerly in\n\tgfc_check_externals.\n\t* resolve.c (resolve_global_procedure): Set sym->error on\n\tinterface mismatch.\n\t* symbol.c (ambiguous_symbol): Check for, and set sym->error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/27318\n\t* gfortran.dg/error_recovery_1.f90: Adjust test case.\n\t* gfortran.dg/use_15.f90: Likewise.\n\t* gfortran.dg/interface_47.f90: New test.", "tree": {"sha": "3cf1f57ca03637bc33a220fd8d032db66beaafad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf1f57ca03637bc33a220fd8d032db66beaafad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc9a9229285a26ac12bc8de53237ce9c4d42f867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9a9229285a26ac12bc8de53237ce9c4d42f867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9a9229285a26ac12bc8de53237ce9c4d42f867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9a9229285a26ac12bc8de53237ce9c4d42f867/comments", "author": null, "committer": null, "parents": [{"sha": "706e6f613d23b708f44e7874b1f64ddbe155faf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706e6f613d23b708f44e7874b1f64ddbe155faf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706e6f613d23b708f44e7874b1f64ddbe155faf1"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "69f9ca64c97699ea47812918c264018ee2324904", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -5493,26 +5493,75 @@ check_externals_expr (gfc_expr **ep, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return check_externals_procedure (sym, loc, actual);\n }\n \n-/* Called routine.  */\n+/* Function to check if any interface clashes with a global\n+   identifier, to be invoked via gfc_traverse_ns.  */\n \n-void\n-gfc_check_externals (gfc_namespace *ns)\n+static void\n+check_against_globals (gfc_symbol *sym)\n {\n+  gfc_gsymbol *gsym;\n+  gfc_symbol *def_sym = NULL;\n+  const char *sym_name;\n+  char buf  [200];\n \n-  gfc_clear_error ();\n+  if (sym->attr.if_source != IFSRC_IFBODY || sym->attr.flavor != FL_PROCEDURE\n+      || sym->attr.generic || sym->error)\n+    return;\n \n-  /* Turn errors into warnings if the user indicated this.  */\n+  if (sym->binding_label)\n+    sym_name = sym->binding_label;\n+  else\n+    sym_name = sym->name;\n \n-  if (!pedantic && flag_allow_argument_mismatch)\n-    gfc_errors_to_warnings (true);\n+  gsym = gfc_find_gsymbol (gfc_gsym_root, sym_name);\n+  if (gsym && gsym->ns)\n+    gfc_find_symbol (sym->name, gsym->ns, 0, &def_sym);\n+\n+  if (!def_sym || def_sym->error || def_sym->attr.generic)\n+    return;\n+\n+  buf[0] = 0;\n+  gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1, buf, sizeof(buf),\n+\t\t\t  NULL, NULL, NULL);\n+  if (buf[0] != 0)\n+    {\n+      gfc_warning (0, \"%s between %L and %L\", buf, &def_sym->declared_at,\n+\t\t   &sym->declared_at);\n+      sym->error = 1;\n+      def_sym->error = 1;\n+    }\n+\n+}\n+\n+/* Do the code-walkling part for gfc_check_externals.  */\n \n+static void\n+gfc_check_externals0 (gfc_namespace *ns)\n+{\n   gfc_code_walker (&ns->code, check_externals_code, check_externals_expr, NULL);\n \n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n       if (ns->code == NULL || ns->code->op != EXEC_BLOCK)\n-\tgfc_check_externals (ns);\n+\tgfc_check_externals0 (ns);\n     }\n \n+}\n+\n+/* Called routine.  */\n+\n+void gfc_check_externals (gfc_namespace *ns)\n+{\n+  gfc_clear_error ();\n+\n+  /* Turn errors into warnings if the user indicated this.  */\n+\n+  if (!pedantic && flag_allow_argument_mismatch)\n+    gfc_errors_to_warnings (true);\n+\n+  gfc_check_externals0 (ns);\n+  gfc_traverse_ns (ns, check_against_globals);\n+\n   gfc_errors_to_warnings (false);\n }\n+"}, {"sha": "9c178d07e53c7e4e66984a3fc981ca895d043f6a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -2634,6 +2634,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n \n \t  gfc_error (\"Interface mismatch in global procedure %qs at %L: %s\",\n \t\t     sym->name, &sym->declared_at, reason);\n+\t  sym->error = 1;\n \t  gfc_errors_to_warnings (false);\n \t  goto done;\n \t}"}, {"sha": "abd3b5ccfd0cc0ec1d303ca018f069decb341b52", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -3145,18 +3145,24 @@ gfc_new_symbol (const char *name, gfc_namespace *ns)\n }\n \n \n-/* Generate an error if a symbol is ambiguous.  */\n+/* Generate an error if a symbol is ambiguous, and set the error flag\n+   on it.  */\n \n static void\n ambiguous_symbol (const char *name, gfc_symtree *st)\n {\n \n+  if (st->n.sym->error)\n+    return;\n+\n   if (st->n.sym->module)\n     gfc_error (\"Name %qs at %C is an ambiguous reference to %qs \"\n \t       \"from module %qs\", name, st->n.sym->name, st->n.sym->module);\n   else\n     gfc_error (\"Name %qs at %C is an ambiguous reference to %qs \"\n \t       \"from current program unit\", name, st->n.sym->name);\n+\n+  st->n.sym->error = 1;\n }\n \n "}, {"sha": "9e2540c0787835addddfc16c4c409a20ee57030f", "filename": "gcc/testsuite/gfortran.dg/error_recovery_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Ferror_recovery_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Ferror_recovery_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferror_recovery_1.f90?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -2,14 +2,14 @@\n ! PR fortran/24549 (and duplicate PR fortran/27487)\n module gfcbug29_import\n   interface\n-     subroutine foo (x)\n+     subroutine foo (x) ! { dg-warning \"wrong number of arguments\" }\n        something :: dp ! { dg-error \"Unclassifiable statement\" }\n        real (kind=dp) :: x ! { dg-error \"has not been declared or is a variable, which does not reduce to a constant expression\" }\n      end subroutine foo\n   end interface\n end module gfcbug29_import\n \n-subroutine FOO\n+subroutine FOO ! { dg-warning \"wrong number of arguments\" }\n     X :: I\n     equivalence (I,I)\n end"}, {"sha": "6f1d1a74ffc8ac5d1ae6aec64d33b3dd9a7421bd", "filename": "gcc/testsuite/gfortran.dg/interface_47.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_47.f90?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -0,0 +1,19 @@\n+! PR fortran/27318\n+! { dg-do compile }\n+! This tests for mismatch between the interface for a global\n+! procedure and the procedure itself.\n+\n+module test\n+implicit none\n+interface\n+   subroutine hello(n) ! { dg-warning \"INTENT mismatch\" }\n+     integer :: n\n+   end subroutine hello\n+end interface\n+end module test\n+\n+subroutine hello(n)  ! { dg-warning \"INTENT mismatch\" }\n+  integer, intent(in) :: n\n+  integer :: i\n+  do i = 1,n; print *, 'hello'; end do\n+end subroutine hello"}, {"sha": "9722db4ddb351074e1b2597e6b89505ce3a28a43", "filename": "gcc/testsuite/gfortran.dg/use_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9a9229285a26ac12bc8de53237ce9c4d42f867/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_15.f90?ref=cc9a9229285a26ac12bc8de53237ce9c4d42f867", "patch": "@@ -34,4 +34,4 @@ subroutine my_sub3 (a)              ! { dg-error \"\\(1\\)\" }\n   print *, a\n end subroutine\n \n-END\n+END ! { dg-error \"is an ambiguous reference\" }"}]}