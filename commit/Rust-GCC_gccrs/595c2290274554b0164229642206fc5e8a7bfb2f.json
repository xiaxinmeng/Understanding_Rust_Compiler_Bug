{"sha": "595c2290274554b0164229642206fc5e8a7bfb2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1YzIyOTAyNzQ1NTRiMDE2NDIyOTY0MjIwNmZjNWU4YTdiZmIyZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-30T23:27:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-04-30T23:27:22Z"}, "message": "regmove.c (try_apply_stack_adjustment): Remove now redundant sanity checks.\n\n        * regmove.c (try_apply_stack_adjustment): Remove now redundant\n        sanity checks.\n        (combine_stack_adjustments_for_block): Don't combine stack\n        allocation followed by deallocations.  Handle grow-up stacks.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r41707", "tree": {"sha": "b5e2deb5406973fb7e6c37c3bdf2a9c4ef77598b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e2deb5406973fb7e6c37c3bdf2a9c4ef77598b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/595c2290274554b0164229642206fc5e8a7bfb2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595c2290274554b0164229642206fc5e8a7bfb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595c2290274554b0164229642206fc5e8a7bfb2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595c2290274554b0164229642206fc5e8a7bfb2f/comments", "author": null, "committer": null, "parents": [{"sha": "dad362764fe456881661e192c595a6774794eb82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad362764fe456881661e192c595a6774794eb82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad362764fe456881661e192c595a6774794eb82"}], "stats": {"total": 106, "additions": 68, "deletions": 38}, "files": [{"sha": "ba3fc472bc92732c4446f656ef0ed358d02bc933", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595c2290274554b0164229642206fc5e8a7bfb2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595c2290274554b0164229642206fc5e8a7bfb2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=595c2290274554b0164229642206fc5e8a7bfb2f", "patch": "@@ -1,3 +1,11 @@\n+2001-04-30  Jan Hubicka  <jh@suse.cz>\n+            Richard Henderson  <rth@redhat.com>\n+\n+\t* regmove.c (try_apply_stack_adjustment): Remove now redundant\n+\tsanity checks.\n+\t(combine_stack_adjustments_for_block): Don't combine stack\n+\tallocation followed by deallocations.  Handle grow-up stacks.\n+\n 2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* fdl.texi: New file."}, {"sha": "a151d6f2320a5268984a15ced518a42a484e5786", "filename": "gcc/regmove.c", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595c2290274554b0164229642206fc5e8a7bfb2f/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595c2290274554b0164229642206fc5e8a7bfb2f/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=595c2290274554b0164229642206fc5e8a7bfb2f", "patch": "@@ -42,6 +42,15 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"reload.h\"\n \n+\n+/* Turn STACK_GROWS_DOWNWARD into a boolean.  */\n+#ifdef STACK_GROWS_DOWNWARD\n+#undef STACK_GROWS_DOWNWARD\n+#define STACK_GROWS_DOWNWARD 1\n+#else\n+#define STACK_GROWS_DOWNWARD 0\n+#endif\n+\n static int perhaps_ends_bb_p\tPARAMS ((rtx));\n static int optimize_reg_copy_1\tPARAMS ((rtx, rtx, rtx));\n static void optimize_reg_copy_2\tPARAMS ((rtx, rtx, rtx));\n@@ -2231,14 +2240,6 @@ try_apply_stack_adjustment (insn, memlist, new_adjust, delta)\n   struct csa_memlist *ml;\n   rtx set;\n \n-  /* We know INSN matches single_set_for_csa, because that's what we\n-     recognized earlier.  However, if INSN is not single_set, it is\n-     doing double duty as a barrier for frame pointer memory accesses,\n-     which we are not recording.  Therefore, an adjust insn that is not\n-     single_set may not have a positive delta applied.  */\n-\n-  if (delta > 0 && ! single_set (insn))\n-    return 0;\n   set = single_set_for_csa (insn);\n   validate_change (insn, &XEXP (SET_SRC (set), 1), GEN_INT (new_adjust), 1);\n \n@@ -2248,13 +2249,6 @@ try_apply_stack_adjustment (insn, memlist, new_adjust, delta)\n       rtx new = gen_rtx_MEM (GET_MODE (*ml->mem),\n \t\t\t     plus_constant (stack_pointer_rtx, c));\n \n-      /* Don't reference memory below the stack pointer.  */\n-      if (c < 0)\n-\t{\n-\t  cancel_changes (0);\n-\t  return 0;\n-\t}\n-\n       MEM_COPY_ATTRIBUTES (new, *ml->mem);\n       validate_change (ml->insn, ml->mem, new, 1);\n     }\n@@ -2369,35 +2363,63 @@ combine_stack_adjustments_for_block (bb)\n \n \t      /* If not all recorded memrefs can be adjusted, or the\n \t\t adjustment is now too large for a constant addition,\n-\t\t we cannot merge the two stack adjustments.  */\n-\t      if (! try_apply_stack_adjustment (last_sp_set, memlist,\n-\t\t\t\t\t\tlast_sp_adjust + this_adjust,\n-\t\t\t\t\t\tthis_adjust))\n+\t\t we cannot merge the two stack adjustments.\n+\n+\t\t Also we need to be carefull to not move stack pointer\n+\t\t such that we create stack accesses outside the allocated\n+\t\t area.  We can combine an allocation into the first insn,\n+\t\t or a deallocation into the second insn.  We can not\n+\t\t combine an allocation followed by a deallocation.\n+\n+\t\t The only somewhat frequent ocurrence of the later is when\n+\t\t a function allocates a stack frame but does not use it.\n+\t\t For this case, we would need to analyze rtl stream to be\n+\t\t sure that allocated area is really unused.  This means not\n+\t\t only checking the memory references, but also all registers\n+\t\t or global memory references possibly containing a stack\n+\t\t frame address.\n+\n+\t\t Perhaps the best way to address this problem is to teach\n+\t\t gcc not to allocate stack for objects never used.  */\n+\n+\t      /* Combine an allocation into the first instruction.  */\n+\t      if (STACK_GROWS_DOWNWARD ? this_adjust <= 0 : this_adjust >= 0)\n \t\t{\n-\t\t  free_csa_memlist (memlist);\n-\t\t  memlist = NULL;\n-\t\t  last_sp_set = insn;\n-\t\t  last_sp_adjust = this_adjust;\n-\t\t  goto processed;\n+\t\t  if (try_apply_stack_adjustment (last_sp_set, memlist,\n+\t\t\t\t\t\t  last_sp_adjust + this_adjust,\n+\t\t\t\t\t\t  this_adjust))\n+\t\t    {\n+\t\t      /* It worked!  */\n+\t\t      pending_delete = insn;\n+\t\t      last_sp_adjust += this_adjust;\n+\t\t      goto processed;\n+\t\t    }\n \t\t}\n \n-\t      /* It worked!  */\n-\t      pending_delete = insn;\n-\t      last_sp_adjust += this_adjust;\n-\n-\t      /* If, by some accident, the adjustments cancel out,\n-\t\t delete both insns and start from scratch.  */\n-\t      if (last_sp_adjust == 0)\n+\t      /* Otherwise we have a deallocation.  Do not combine with\n+\t\t a previous allocation.  Combine into the second insn.  */\n+\t      else if (STACK_GROWS_DOWNWARD\n+\t\t       ? last_sp_adjust >= 0 : last_sp_adjust <= 0)\n \t\t{\n-\t\t  if (last_sp_set == bb->head)\n-\t\t    bb->head = NEXT_INSN (last_sp_set);\n-\t\t  flow_delete_insn (last_sp_set);\n-\n-\t\t  free_csa_memlist (memlist);\n-\t\t  memlist = NULL;\n-\t\t  last_sp_set = NULL_RTX;\n+\t\t  if (try_apply_stack_adjustment (insn, memlist,\n+\t\t\t\t\t\t  last_sp_adjust + this_adjust,\n+\t\t\t\t\t\t  -last_sp_adjust))\n+\t\t    {\n+\t\t      /* It worked!  */\n+\t\t      flow_delete_insn (last_sp_set);\n+\t\t      last_sp_set = insn;\n+\t\t      last_sp_adjust += this_adjust;\n+\t\t      free_csa_memlist (memlist);\n+\t\t      memlist = NULL;\n+\t\t      goto processed;\n+\t\t    }\n \t\t}\n \n+\t      /* Combination failed.  Restart processing from here.  */\n+\t      free_csa_memlist (memlist);\n+\t      memlist = NULL;\n+\t      last_sp_set = insn;\n+\t      last_sp_adjust = this_adjust;\n \t      goto processed;\n \t    }\n "}]}