{"sha": "6eff269e954a906bb2324013a9656d484dabceb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmZjI2OWU5NTRhOTA2YmIyMzI0MDEzYTk2NTZkNDg0ZGFiY2ViMg==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-03-31T20:09:44Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-03-31T20:09:44Z"}, "message": "define CONSTANT_ADDRESS_P(X) to not use CONST_DOUBLE\n\nFrom-SVN: r3954", "tree": {"sha": "b0f64862f346f519af2235d5a83199df2c25a57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f64862f346f519af2235d5a83199df2c25a57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eff269e954a906bb2324013a9656d484dabceb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eff269e954a906bb2324013a9656d484dabceb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eff269e954a906bb2324013a9656d484dabceb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eff269e954a906bb2324013a9656d484dabceb2/comments", "author": null, "committer": null, "parents": [{"sha": "6ec87b9de9a2749bacdeb1f0a382652c113607b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec87b9de9a2749bacdeb1f0a382652c113607b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec87b9de9a2749bacdeb1f0a382652c113607b4"}], "stats": {"total": 111, "additions": 82, "deletions": 29}, "files": [{"sha": "f31b03f520da15c00f25be083264ab4930195160", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -582,7 +582,10 @@ enum reg_class {\n \n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "029a1abdf6a4b822bd9021fa4b777aa85b73fd5f", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -522,7 +522,10 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "06acdfd010648de06f31d58d2c46b8be2420f443", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -653,7 +653,10 @@ extern enum reg_class regno_reg_class[];\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "683550a55bf8956c7e65b41b99b671542b610917", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -918,7 +918,10 @@ extern enum reg_class regno_reg_class[];\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "fa8f0b5b26b487c03e8944b4405b6cd9d46f4c04", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -934,7 +934,10 @@ do {\t\t\t\t\t\t\\\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-#define CONSTANT_ADDRESS_P(X)   CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "2d0c6eb98928117bdf1776d7a02a7c4b14231165", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -144,7 +144,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef\tCONSTANT_ADDRESS_P\n #define CONSTANT_ADDRESS_P(X)                                           \\\n-  (CONSTANT_P (X) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n+  ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "40bef3f26b34ca1835c232a6079a44121e812dd1", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -693,7 +693,10 @@ struct cumulative_args { int ints, floats; };\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE."}, {"sha": "46acfa277602844cf0f1341f8c09f510fa92c107", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -911,7 +911,10 @@ extern struct rtx_def *i960_function_arg ();\n /* Maximum number of registers that can appear in a valid memory address.  */\n #define\tMAX_REGS_PER_ADDRESS 2\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* LEGITIMATE_CONSTANT_P is nonzero if the constant value X\n    is a legitimate general operand."}, {"sha": "4609e1d4e62ee8297863f4d1363e1c60ff90817d", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -1047,7 +1047,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "b5bc29d08f1bc654b72561e0f853411aa8c57770", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -1253,7 +1253,10 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n /* #define HAVE_PRE_INCREMENT */\n \n /* Recognize any constant value that is a valid address.  */\n-#define CONSTANT_ADDRESS_P(X) (CONSTANT_P (X))\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Maximum number of registers that can appear in a valid memory address.  */\n #define MAX_REGS_PER_ADDRESS 2"}, {"sha": "9101fc3a7dda50f70808166cbf66e91c6bbb3a4d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -2181,17 +2181,12 @@ __enable_execute_stack (addr)\t\t\t\t\t\t\\\n \n \n /* A C expression that is 1 if the RTX X is a constant which is a\n-   valid address.  On most machines, this can be defined as\n-   `CONSTANT_P (X)', but a few machines are more restrictive in\n-   which constant addresses are supported.\n-\n-   `CONSTANT_P' accepts integer-values expressions whose values are\n-   not explicitly known, such as `symbol_ref', `label_ref', and\n-   `high' expressions and `const' arithmetic expressions, in\n-   addition to `const_int' and `const_double' expressions.  */\n-\n+   valid address.  This is defined to be the same as `CONSTANT_P (X)',\n+   but rejecting CONST_DOUBLE.  */\n #define CONSTANT_ADDRESS_P(X)\t\t\t\t\t\t\\\n-  (CONSTANT_P (X) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n+  ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n \n \n /* Nonzero if the constant value X is a legitimate general operand."}, {"sha": "5b207ceec50795901d33ba88206fb35854266813", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -1056,9 +1056,14 @@ extern union tree_node *current_function_decl;\n \n /* Recognize any constant value that is a valid address except\n    for symbolic addresses.  We get better CSE by rejecting them\n-   here and allowing hppa_legitimize_address to break them up.  */\n+   here and allowing hppa_legitimize_address to break them up.  We\n+   use most of the constants accepted by CONSTANT_P, except CONST_DOUBLE.  */\n \n #define CONSTANT_ADDRESS_P(X) \\\n+  ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH) && ! symbolic_expression_p (X))\n+\n  (CONSTANT_P (X) && ! symbolic_expression_p (X))\n \n /* Include all constant integers and constant doubles, but not"}, {"sha": "758876c019d4bdb3f7b31c54e73fe3d2f5a5d64b", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -829,7 +829,10 @@ extern int current_function_calls_alloca;\n \n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "85c1b416a71aa22b8666cf0ce91806cb3941f4e8", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -947,7 +947,10 @@ struct rt_cargs {int gregs, fregs; };\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE."}, {"sha": "c9ad94ff19b2f7c033961519852a6aac30791c7e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -969,7 +969,10 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE."}, {"sha": "27dbfb02e7485d1a54dafb2a5fab5e432dc6ef65", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -1135,7 +1135,10 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X) (CONSTANT_P (X))\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    Anything can be made to work except floating point constants.  */"}, {"sha": "7a8ed4b6ef337e34c56289ee9f36714e070448f0", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -622,7 +622,10 @@ extern int current_function_pretend_args_size;\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "0982b7d070d4f8e0c7f9295c049ff7d7e759cfe4", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -446,7 +446,10 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \n /* constant addresses can be treated exactly the same as normal constants */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* we can have as many as two regs in any given address */\n "}, {"sha": "8171fcef8b5d3d4731b7cec5523b0c4e74eef951", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -571,7 +571,10 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n \n /* 1 if X is an rtx for a constant that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X) CONSTANT_P (X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "0eee791cbed762f6b37995e7867802bcfa2c7b32", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eff269e954a906bb2324013a9656d484dabceb2/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=6eff269e954a906bb2324013a9656d484dabceb2", "patch": "@@ -533,7 +533,10 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n /* Recognize any constant value that is a valid address.  */\n \n-#define CONSTANT_ADDRESS_P(X)  CONSTANT_P(X)\n+#define CONSTANT_ADDRESS_P(X)   \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}]}