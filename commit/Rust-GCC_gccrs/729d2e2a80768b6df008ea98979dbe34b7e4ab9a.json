{"sha": "729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "node_id": "C_kwDOANBUbNoAKDcyOWQyZTJhODA3NjhiNmRmMDA4ZWE5ODk3OWRiZTM0YjdlNGFiOWE", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-06-15T01:53:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:14Z"}, "message": "[Ada] Spurious use_type clause warning\n\nThis patch corrects an error in the compiler whereby a spurious\nredundant use_type_clause warning gets issued when the clause appears in\nthe context_clause of a package preceding a with_clause for a package\nwith an identical use_clause in its specification.\n\ngcc/ada/\n\n\t* einfo.ads: Modify documentation for In_Use flag to include\n\tscope stack manipulation.\n\t* sem_ch8.adb (Use_One_Type): Add condition to return when\n\tattempting to detect redundant use_type_clauses in child units\n\tin certain cases.", "tree": {"sha": "377a6dfe5e903e502a7164f8387a39796752face", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/377a6dfe5e903e502a7164f8387a39796752face"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729d2e2a80768b6df008ea98979dbe34b7e4ab9a/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433cefcd0252ad8aae2aa8a69fbd9900809063b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433cefcd0252ad8aae2aa8a69fbd9900809063b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433cefcd0252ad8aae2aa8a69fbd9900809063b7"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "ed630191957d5aaea8b22ec51772bf09dfcef755", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729d2e2a80768b6df008ea98979dbe34b7e4ab9a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729d2e2a80768b6df008ea98979dbe34b7e4ab9a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "patch": "@@ -2309,6 +2309,10 @@ package Einfo is\n --       the corresponding entity. Reset at end of corresponding declarative\n --       part. The flag on a type is also used to determine the visibility of\n --       the primitive operators of the type.\n+--\n+--       Note that manipulation of scopes on the scope stack will also cause\n+--       the flag to be set/unset since the setting of scopes affects\n+--       visibility.\n \n --    Is_Abstract_Subprogram\n --       Defined in all subprograms and entries. Set for abstract subprograms."}, {"sha": "eb9e359e4976adde68ac64e5aa2e74e108ceaed2", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729d2e2a80768b6df008ea98979dbe34b7e4ab9a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729d2e2a80768b6df008ea98979dbe34b7e4ab9a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=729d2e2a80768b6df008ea98979dbe34b7e4ab9a", "patch": "@@ -10758,15 +10758,26 @@ package body Sem_Ch8 is\n                      return;\n                   end if;\n \n-                  --  There is a redundant use_type_clause in a child unit.\n-                  --  Determine which of the units is more deeply nested. If a\n+                  --  If there is a redundant use_type_clause in a child unit\n+                  --  determine which of the units is more deeply nested. If a\n                   --  unit is a package instance, retrieve the entity and its\n                   --  scope from the instance spec.\n \n                   Ent1 := Entity_Of_Unit (Unit1);\n                   Ent2 := Entity_Of_Unit (Unit2);\n \n-                  if Scope (Ent2) = Standard_Standard then\n+                  --  When the scope of both units' entities are\n+                  --  Standard_Standard then neither Unit1 or Unit2 are child\n+                  --  units - so return in that case.\n+\n+                  if Scope (Ent1) = Standard_Standard\n+                    and then Scope (Ent2) = Standard_Standard\n+                  then\n+                     return;\n+\n+                  --  Otherwise, determine if one of the units is not a child\n+\n+                  elsif Scope (Ent2) = Standard_Standard then\n                      Error_Msg_Sloc := Sloc (Clause2);\n                      Err_No := Clause1;\n "}]}