{"sha": "05fc16dde913ed47ab4352a34b15f71d24d58934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmYzE2ZGRlOTEzZWQ0N2FiNDM1MmEzNGIxNWY3MWQyNGQ1ODkzNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-05-25T05:24:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-05-25T05:24:12Z"}, "message": "check.c (gfc_check_num_images): New.\n\n2014-05-25  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (gfc_check_num_images): New.\n        (gfc_check_this_image): Handle distance argument.\n        * intrinsic.c (add_functions): Update this_image and num_images\n        for new distance and failed arguments.\n        * intrinsic.texi (THIS_IMAGE, NUM_IMAGES): Document the new\n        arguments.\n        * intrinsic.h (gfc_check_num_images): New.\n        (gfc_check_this_image, gfc_simplify_num_images,\n        gfc_simplify_this_image, gfc_resolve_this_image): Update prototype.\n        * iresolve.c (gfc_resolve_this_image): Handle distance argument.\n        * simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n        Handle new arguments.\n        * trans-intrinsic.c (trans_this_image, trans_num_images): Ditto.\n        (gfc_conv_intrinsic_function): Update trans_num_images call.\n\n2014-05-25  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_10.f90: Update dg-warning.\n        * gfortran.dg/coarray_this_image_1.f90: New.\n        * gfortran.dg/coarray_this_image_2.f90: New.\n\nFrom-SVN: r210909", "tree": {"sha": "674a166546a3e633ac9d67036605b32fa986ed8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674a166546a3e633ac9d67036605b32fa986ed8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05fc16dde913ed47ab4352a34b15f71d24d58934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fc16dde913ed47ab4352a34b15f71d24d58934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05fc16dde913ed47ab4352a34b15f71d24d58934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fc16dde913ed47ab4352a34b15f71d24d58934/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd1e93027047ca891e278fac96d38978aeb51d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e93027047ca891e278fac96d38978aeb51d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1e93027047ca891e278fac96d38978aeb51d6d"}], "stats": {"total": 263, "additions": 224, "deletions": 39}, "files": [{"sha": "88c26ad3986f3d47ee0ecd9309ab763433932ce9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -1,3 +1,20 @@\n+2014-05-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (gfc_check_num_images): New.\n+\t(gfc_check_this_image): Handle distance argument.\n+\t* intrinsic.c (add_functions): Update this_image and num_images\n+\tfor new distance and failed arguments.\n+\t* intrinsic.texi (THIS_IMAGE, NUM_IMAGES): Document the new\n+\targuments.\n+\t* intrinsic.h (gfc_check_num_images): New.\n+\t(gfc_check_this_image, gfc_simplify_num_images,\n+\tgfc_simplify_this_image, gfc_resolve_this_image): Update prototype.\n+\t* iresolve.c (gfc_resolve_this_image): Handle distance argument.\n+\t* simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n+\tHandle new arguments.\n+\t* trans-intrinsic.c (trans_this_image, trans_num_images): Ditto.\n+\t(gfc_conv_intrinsic_function): Update trans_num_images call.\n+\n 2014-05-23  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfc-internals.texi: Change URLs to HTTPS; fix broken links."}, {"sha": "20af75feb44707713b3ba33c08f9f3dc11e89f91", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -4552,24 +4552,104 @@ gfc_check_image_index (gfc_expr *coarray, gfc_expr *sub)\n \n \n bool\n-gfc_check_this_image (gfc_expr *coarray, gfc_expr *dim)\n+gfc_check_num_images (gfc_expr *distance, gfc_expr *failed)\n {\n   if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n     {\n       gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n       return false;\n     }\n \n-  if (dim != NULL &&  coarray == NULL)\n+  if (distance)\n     {\n-      gfc_error (\"DIM argument without ARRAY argument not allowed for THIS_IMAGE \"\n-                \"intrinsic at %L\", &dim->where);\n+      if (!type_check (distance, 0, BT_INTEGER))\n+\treturn false;\n+\n+      if (!nonnegative_check (\"DISTANCE\", distance))\n+\treturn false;\n+\n+      if (!scalar_check (distance, 0))\n+\treturn false;\n+\n+      if (!gfc_notify_std (GFC_STD_F2008_TS, \"DISTANCE= argument to \"\n+\t\t\t   \"NUM_IMAGES at %L\", &distance->where))\n+\treturn false;\n+    }\n+\n+   if (failed)\n+    {\n+      if (!type_check (failed, 1, BT_LOGICAL))\n+\treturn false;\n+\n+      if (!scalar_check (failed, 1))\n+\treturn false;\n+\n+      if (!gfc_notify_std (GFC_STD_F2008_TS, \"FAILED= argument to \"\n+\t\t\t   \"NUM_IMAGES at %L\", &distance->where))\n+\treturn false;\n+    }\n+\n+  return true;\n+}\n+\n+\n+bool\n+gfc_check_this_image (gfc_expr *coarray, gfc_expr *dim, gfc_expr *distance)\n+{\n+  if (gfc_option.coarray == GFC_FCOARRAY_NONE)\n+    {\n+      gfc_fatal_error (\"Coarrays disabled at %C, use -fcoarray= to enable\");\n       return false;\n     }\n \n-  if (coarray == NULL)\n+  if (coarray == NULL && dim == NULL && distance == NULL)\n     return true;\n \n+  if (dim != NULL && coarray == NULL)\n+    {\n+      gfc_error (\"DIM argument without COARRAY argument not allowed for \"\n+\t\t \"THIS_IMAGE intrinsic at %L\", &dim->where);\n+      return false;\n+    }\n+\n+  if (distance && (coarray || dim))\n+    {\n+      gfc_error (\"The DISTANCE argument may not be specified together with the \"\n+\t\t \"COARRAY or DIM argument in intrinsic at %L\",\n+\t\t &distance->where);\n+      return false;\n+    }\n+\n+  /* Assume that we have \"this_image (distance)\".  */\n+  if (coarray && !gfc_is_coarray (coarray) && coarray->ts.type == BT_INTEGER)\n+    {\n+      if (dim)\n+\t{\n+\t  gfc_error (\"Unexpected DIM argument with noncoarray argument at %L\",\n+\t\t     &coarray->where);\n+\t  return false;\n+\t}\n+      distance = coarray;\n+    }\n+\n+  if (distance)\n+    {\n+      if (!type_check (distance, 2, BT_INTEGER))\n+\treturn false;\n+\n+      if (!nonnegative_check (\"DISTANCE\", distance))\n+\treturn false;\n+\n+      if (!scalar_check (distance, 2))\n+\treturn false;\n+\n+      if (!gfc_notify_std (GFC_STD_F2008_TS, \"DISTANCE= argument to \"\n+\t\t\t   \"THIS_IMAGE at %L\", &distance->where))\n+\treturn false;\n+\n+      return true;\n+    }\n+\n   if (!coarray_check (coarray, 0))\n     return false;\n "}, {"sha": "bf784b5e18f906cff756fe3334cf28c504890629", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -1205,7 +1205,7 @@ add_functions (void)\n     *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n     *num = \"number\", *tm = \"time\", *nm = \"name\", *md = \"mode\",\n     *vl = \"values\", *p1 = \"path1\", *p2 = \"path2\", *com = \"command\",\n-    *ca = \"coarray\", *sub = \"sub\";\n+    *ca = \"coarray\", *sub = \"sub\", *dist = \"distance\", *failed=\"failed\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -2477,9 +2477,11 @@ add_functions (void)\n \n   make_generic (\"null\", GFC_ISYM_NULL, GFC_STD_F95);\n \n-  add_sym_0 (\"num_images\", GFC_ISYM_NUM_IMAGES, CLASS_INQUIRY, ACTUAL_NO,\n+  add_sym_2 (\"num_images\", GFC_ISYM_NUM_IMAGES, CLASS_INQUIRY, ACTUAL_NO,\n \t     BT_INTEGER, di, GFC_STD_F2008,\n-\t     NULL, gfc_simplify_num_images, NULL);\n+\t     gfc_check_num_images, gfc_simplify_num_images, NULL,\n+\t     dist, BT_INTEGER, di, OPTIONAL,\n+\t     failed, BT_LOGICAL, dl, OPTIONAL);\n \n   add_sym_3 (\"pack\", GFC_ISYM_PACK, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_pack, gfc_simplify_pack, gfc_resolve_pack,\n@@ -2892,9 +2894,10 @@ add_functions (void)\n \n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n-  add_sym_2 (\"this_image\", GFC_ISYM_THIS_IMAGE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2008,\n+  add_sym_3 (\"this_image\", GFC_ISYM_THIS_IMAGE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2008,\n \t     gfc_check_this_image, gfc_simplify_this_image, gfc_resolve_this_image,\n-\t     ca, BT_REAL, dr, OPTIONAL, dm, BT_INTEGER, ii, OPTIONAL);\n+\t     ca, BT_REAL, dr, OPTIONAL, dm, BT_INTEGER, ii, OPTIONAL,\n+\t     dist, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_0 (\"time\", GFC_ISYM_TIME, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n \t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_time);"}, {"sha": "05cd1464182114d0a58283d45df78633edef8f9c", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -117,6 +117,7 @@ bool gfc_check_nearest (gfc_expr *, gfc_expr *);\n bool gfc_check_new_line (gfc_expr *);\n bool gfc_check_norm2 (gfc_expr *, gfc_expr *);\n bool gfc_check_null (gfc_expr *);\n+bool gfc_check_num_images (gfc_expr *, gfc_expr *);\n bool gfc_check_pack (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_parity (gfc_expr *, gfc_expr *);\n bool gfc_check_precision (gfc_expr *);\n@@ -212,7 +213,7 @@ bool gfc_check_signal_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_sleep_sub (gfc_expr *);\n bool gfc_check_stat_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_system_sub (gfc_expr *, gfc_expr *);\n-bool gfc_check_this_image (gfc_expr *, gfc_expr *);\n+bool gfc_check_this_image (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_ttynam_sub (gfc_expr *, gfc_expr *);\n bool gfc_check_umask_sub (gfc_expr *, gfc_expr *);\n bool gfc_check_unlink_sub (gfc_expr *, gfc_expr *);\n@@ -343,7 +344,7 @@ gfc_expr *gfc_simplify_new_line (gfc_expr *);\n gfc_expr *gfc_simplify_nint (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_norm2 (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_null (gfc_expr *);\n-gfc_expr *gfc_simplify_num_images (void);\n+gfc_expr *gfc_simplify_num_images (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_idnint (gfc_expr *);\n gfc_expr *gfc_simplify_not (gfc_expr *);\n gfc_expr *gfc_simplify_or (gfc_expr *, gfc_expr *);\n@@ -387,7 +388,7 @@ gfc_expr *gfc_simplify_sqrt (gfc_expr *);\n gfc_expr *gfc_simplify_sum (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_tan (gfc_expr *);\n gfc_expr *gfc_simplify_tanh (gfc_expr *);\n-gfc_expr *gfc_simplify_this_image (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_this_image (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_tiny (gfc_expr *);\n gfc_expr *gfc_simplify_trailz (gfc_expr *);\n gfc_expr *gfc_simplify_transfer (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -568,7 +569,7 @@ void gfc_resolve_symlnk (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_system (gfc_expr *, gfc_expr *);\n void gfc_resolve_tan (gfc_expr *, gfc_expr *);\n void gfc_resolve_tanh (gfc_expr *, gfc_expr *);\n-void gfc_resolve_this_image (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_this_image (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_time (gfc_expr *);\n void gfc_resolve_time8 (gfc_expr *);\n void gfc_resolve_transfer (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "776cb00bf1166b5729f520d16e527b84a9b798c2", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -9676,18 +9676,32 @@ REAL, POINTER, DIMENSION(:) :: VEC => NULL ()\n Returns the number of images.\n \n @item @emph{Standard}:\n-Fortran 2008 and later\n+Fortran 2008 and later. With @var{DISTANCE} or @var{FAILED} argument, \n+Technical Specification (TS) 18508 or later\n+\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = NUM_IMAGES()}\n+@code{RESULT = NUM_IMAGES(DISTANCE, FAILED)}\n \n-@item @emph{Arguments}: None.\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{DISTANCE} @tab (optional, intent(in)) Nonnegative scalar integer\n+@item @var{FAILED}   @tab (optional, intent(in)) Scalar logical expression\n+@end multitable\n \n @item @emph{Return value}:\n-Scalar default-kind integer.\n+Scalar default-kind integer.  If @var{DISTANCE} is not present or has value 0,\n+the number of images in the current team is returned. For values smaller or\n+equal distance to the initial team, it returns the number of images index\n+on the ancestor team which has a distance of @var{DISTANCE} from the invoking\n+team. If @var{DISTANCE} is larger than the distance to the initial team, the\n+number of images of the initial team is returned. If @var{FAILED} is not present\n+the total number of images is returned; if it has the value @code{.TRUE.},\n+the number of failed images is returned, otherwise, the number of images which\n+do have not the failed status.\n \n @item @emph{Example}:\n @smallexample\n@@ -12422,19 +12436,23 @@ end program test_tanh\n Returns the cosubscript for this image.\n \n @item @emph{Standard}:\n-Fortran 2008 and later\n+Fortran 2008 and later. With @var{DISTANCE} argument, \n+Technical Specification (TS) 18508 or later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n @item @code{RESULT = THIS_IMAGE()}\n+@item @code{RESULT = THIS_IMAGE(DISTANCE)}\n @item @code{RESULT = THIS_IMAGE(COARRAY [, DIM])}\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n+@item @var{DISTANCE} @tab (optional, intent(in)) Nonnegative scalar integer\n+(not permitted together with @var{COARRAY}).\n @item @var{COARRAY} @tab Coarray of any type  (optional; if @var{DIM}\n present, required).\n @item @var{DIM}     @tab default integer scalar (optional). If present,\n@@ -12443,12 +12461,17 @@ present, required).\n \n \n @item @emph{Return value}:\n-Default integer. If @var{COARRAY} is not present, it is scalar and its value\n-is the index of the invoking image. Otherwise, if @var{DIM} is not present,\n-a rank-1 array with corank elements is returned, containing the cosubscripts\n-for @var{COARRAY} specifying the invoking image. If @var{DIM} is present,\n-a scalar is returned, with the value of the @var{DIM} element of\n-@code{THIS_IMAGE(COARRAY)}.\n+Default integer. If @var{COARRAY} is not present, it is scalar; if\n+@var{DISTANCE} is not present or has value 0, its value is the image index on\n+the invoking image for the current team, for values smaller or equal\n+distance to the initial team, it returns the image index on the ancestor team\n+which has a distance of @var{DISTANCE} from the invoking team. If\n+@var{DISTANCE} is larger than the distance to the initial team, the image\n+index of the initial team is returned. Otherwise when the @var{COARRAY} is\n+present, if @var{DIM} is not present, a rank-1 array with corank elements is\n+returned, containing the cosubscripts for @var{COARRAY} specifying the invoking\n+image. If @var{DIM} is present, a scalar is returned, with the value of\n+the @var{DIM} element of @code{THIS_IMAGE(COARRAY)}.\n \n @item @emph{Example}:\n @smallexample\n@@ -12461,6 +12484,10 @@ IF (THIS_IMAGE() == 1) THEN\n     WRITE(*,'(2(a,i0))') 'value[', i, '] is ', value[i]\n   END DO\n END IF\n+\n+! Check whether the current image is the initial image\n+IF (THIS_IMAGE(HUGE(1)) /= THIS_IMAGE())\n+  error stop \"something is rotten here\"\n @end smallexample\n \n @item @emph{See also}:"}, {"sha": "d029f720a8dea7a9e9483e8048121d3fbd800be7", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -2590,10 +2590,11 @@ gfc_resolve_image_index (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED,\n \n \n void\n-gfc_resolve_this_image (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n+gfc_resolve_this_image (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n+\t\t\tgfc_expr *distance ATTRIBUTE_UNUSED)\n {\n   static char this_image[] = \"__this_image\";\n-  if (array)\n+  if (array && gfc_is_coarray (array))\n     resolve_bound (f, array, dim, NULL, \"__this_image\", true);\n   else\n     {"}, {"sha": "d18bc081088b12392518079b99e8d44ef56ce16c", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -4601,7 +4601,7 @@ gfc_simplify_null (gfc_expr *mold)\n \n \n gfc_expr *\n-gfc_simplify_num_images (void)\n+gfc_simplify_num_images (gfc_expr *distance ATTRIBUTE_UNUSED, gfc_expr *failed)\n {\n   gfc_expr *result;\n \n@@ -4614,10 +4614,18 @@ gfc_simplify_num_images (void)\n   if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n     return NULL;\n \n+  if (failed && failed->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n   /* FIXME: gfc_current_locus is wrong.  */\n   result = gfc_get_constant_expr (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t  &gfc_current_locus);\n-  mpz_set_si (result->value.integer, 1);\n+\n+  if (failed && failed->value.logical != 0)\n+    mpz_set_si (result->value.integer, 0);\n+  else\n+    mpz_set_si (result->value.integer, 1);\n+\n   return result;\n }\n \n@@ -6389,12 +6397,15 @@ gfc_simplify_image_index (gfc_expr *coarray, gfc_expr *sub)\n \n \n gfc_expr *\n-gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim)\n+gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim,\n+\t\t\t gfc_expr *distance ATTRIBUTE_UNUSED)\n {\n   if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n     return NULL;\n \n-  if (coarray == NULL)\n+  /* If no coarray argument has been passed or when the first argument\n+     is actually a distance argment.  */\n+  if (coarray == NULL || !gfc_is_coarray (coarray))\n     {\n       gfc_expr *result;\n       /* FIXME: gfc_current_locus is wrong.  */"}, {"sha": "a76d0f75cc1dc744243ccbcbd817acad33cd5cac", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -934,15 +934,30 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n        lbound, ubound, extent, ml;\n   gfc_se argse;\n   int rank, corank;\n+  gfc_expr *distance = expr->value.function.actual->next->next->expr;\n+\n+  if (expr->value.function.actual->expr\n+      && !gfc_is_coarray (expr->value.function.actual->expr))\n+    distance = expr->value.function.actual->expr;\n \n   /* The case -fcoarray=single is handled elsewhere.  */\n   gcc_assert (gfc_option.coarray != GFC_FCOARRAY_SINGLE);\n \n   /* Argument-free version: THIS_IMAGE().  */\n-  if (expr->value.function.actual->expr == NULL)\n+  if (distance || expr->value.function.actual->expr == NULL)\n     {\n+      if (distance)\n+\t{\n+\t  gfc_init_se (&argse, NULL);\n+\t  gfc_conv_expr_val (&argse, distance);\n+\t  gfc_add_block_to_block (&se->pre, &argse.pre);\n+\t  gfc_add_block_to_block (&se->post, &argse.post);\n+\t  tmp = fold_convert (integer_type_node, argse.expr);\n+\t}\n+      else\n+\ttmp = integer_zero_node;\n       tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_this_image, 1,\n-\t\t\t\t integer_zero_node);\n+\t\t\t\t tmp);\n       se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind),\n \t\t\t       tmp);\n       return;\n@@ -1262,11 +1277,35 @@ trans_image_index (gfc_se * se, gfc_expr *expr)\n \n \n static void\n-trans_num_images (gfc_se * se)\n+trans_num_images (gfc_se * se, gfc_expr *expr)\n {\n-  tree tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images, 2,\n-\t\t\t\t  integer_zero_node,\n-\t\t\t\t  build_int_cst (integer_type_node, -1));\n+  tree tmp, distance, failed;\n+  gfc_se argse;\n+\n+  if (expr->value.function.actual->expr)\n+    {\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr_val (&argse, expr->value.function.actual->expr);\n+      gfc_add_block_to_block (&se->pre, &argse.pre);\n+      gfc_add_block_to_block (&se->post, &argse.post);\n+      distance = fold_convert (integer_type_node, argse.expr);\n+    }\n+  else\n+    distance = integer_zero_node;\n+\n+  if (expr->value.function.actual->next->expr)\n+    {\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr_val (&argse, expr->value.function.actual->next->expr);\n+      gfc_add_block_to_block (&se->pre, &argse.pre);\n+      gfc_add_block_to_block (&se->post, &argse.post);\n+      failed = fold_convert (integer_type_node, argse.expr);\n+    }\n+  else\n+    failed = build_int_cst (integer_type_node, -1);\n+\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images, 2,\n+\t\t\t     distance, failed);\n   se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind), tmp);\n }\n \n@@ -7099,7 +7138,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_NUM_IMAGES:\n-      trans_num_images (se);\n+      trans_num_images (se, expr);\n       break;\n \n     case GFC_ISYM_ACCESS:"}, {"sha": "49e4bb7826ca5ebbcbb2385efaf12fe63a839313", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -1,3 +1,9 @@\n+2014-05-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_10.f90: Update dg-warning.\n+\t* gfortran.dg/coarray_this_image_1.f90: New.\n+\t* gfortran.dg/coarray_this_image_2.f90: New.\n+\n 2014-05-24  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/61173"}, {"sha": "53917b58ff3ab68d5bd015c316f395b76a020f61", "filename": "gcc/testsuite/gfortran.dg/coarray_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fc16dde913ed47ab4352a34b15f71d24d58934/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_10.f90?ref=05fc16dde913ed47ab4352a34b15f71d24d58934", "patch": "@@ -21,7 +21,7 @@ subroutine this_image_check()\n   integer,save :: z(4)[*], i\n \n   j = this_image(a,dim=3) ! { dg-error \"not a valid codimension index\" }\n-  j = this_image(dim=3) ! { dg-error \"DIM argument without ARRAY argument\" }\n+  j = this_image(dim=3) ! { dg-error \"DIM argument without COARRAY argument\" }\n   i = image_index(i, [ 1 ]) ! { dg-error \"Expected coarray variable\" }\n   i = image_index(z, 2) ! { dg-error \"must be a rank one array\" }\n end subroutine this_image_check"}]}