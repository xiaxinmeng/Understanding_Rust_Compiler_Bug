{"sha": "5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhOGMwMTEwNjdjNTUxNGM1ZTg5MWZkOGI0ZDg1NGViNGZjMmU3MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-08-19T14:17:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-08-19T14:17:22Z"}, "message": "layout.adb (Set_Elem_Alignment): Cap the alignment of access types to that of a regular access type for...\n\n\t* layout.adb (Set_Elem_Alignment): Cap the alignment of access types\n\tto that of a regular access type for non-strict-alignment platforms.\n\t* gcc-interface/utils.c (finish_fat_pointer_type): Do not set the\n\talignment for non-strict-alignment platforms.\n\nFrom-SVN: r190515", "tree": {"sha": "47a00b258127a7a74d5fefaab458140baa840190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47a00b258127a7a74d5fefaab458140baa840190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/comments", "author": null, "committer": null, "parents": [{"sha": "08cb7d42bfd7810c05761df53348d582acc4eea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cb7d42bfd7810c05761df53348d582acc4eea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cb7d42bfd7810c05761df53348d582acc4eea1"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "06259ebe1fc2458f59a050f879fafcdafffdcd11", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "patch": "@@ -1,3 +1,10 @@\n+2012-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* layout.adb (Set_Elem_Alignment): Cap the alignment of access types\n+\tto that of a regular access type for non-strict-alignment platforms.\n+\t* gcc-interface/utils.c (finish_fat_pointer_type): Do not set the\n+\talignment for non-strict-alignment platforms.\n+\n 2012-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Use proper"}, {"sha": "4cca41bbf3909dbf079f199427a454c7c6826efc", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "patch": "@@ -1369,7 +1369,8 @@ void\n finish_fat_pointer_type (tree record_type, tree field_list)\n {\n   /* Make sure we can put it into a register.  */\n-  TYPE_ALIGN (record_type) = MIN (BIGGEST_ALIGNMENT, 2 * POINTER_SIZE);\n+  if (STRICT_ALIGNMENT)\n+    TYPE_ALIGN (record_type) = MIN (BIGGEST_ALIGNMENT, 2 * POINTER_SIZE);\n \n   /* Show what it really is.  */\n   TYPE_FAT_POINTER_P (record_type) = 1;"}, {"sha": "60a44a90f87426ece9950c390abd540f6abd16b7", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da8c011067c5514c5e891fd8b4d854eb4fc2e71/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=5da8c011067c5514c5e891fd8b4d854eb4fc2e71", "patch": "@@ -3118,6 +3118,19 @@ package body Layout is\n \n          if Esize (E) / SSU > Ttypes.Maximum_Alignment then\n             S := Ttypes.Maximum_Alignment;\n+\n+         --  If this is an access type and the target doesn't have strict\n+         --  alignment and we are not doing front end layout, then cap the\n+         --  alignment to that of a regular access type. This will avoid\n+         --  giving fat pointers twice the usual alignment for no practical\n+         --  benefit since the misalignment doesn't really matter.\n+\n+         elsif Is_Access_Type (E)\n+           and then not Target_Strict_Alignment\n+           and then not Frontend_Layout_On_Target\n+         then\n+            S := System_Address_Size / SSU;\n+\n          else\n             S := UI_To_Int (Esize (E)) / SSU;\n          end if;"}]}