{"sha": "7ae01728007dcfcdec117706191adeb922cf7b76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlMDE3MjgwMDdkY2ZjZGVjMTE3NzA2MTkxYWRlYjkyMmNmN2I3Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-11T16:51:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-11T16:51:14Z"}, "message": "PR c++/92105 - decltype(decltype) error cascade.\n\nThe primary change here is to do the CPP_DECLTYPE replacement even when we\nget an error, so we don't keep trying and giving the same parse error each\ntime.  We also commit to the tentative firewall parse more often, leading to\nbetter diagnostics.\n\n\t* parser.c (cp_parser_decltype_expr): Don't tentative_firewall here.\n\t(cp_parser_decltype): Do it here.  Remember a non-tentative error.\n\nFrom-SVN: r279237", "tree": {"sha": "c7f78a1d65960375235d14476bfb315fee35b9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f78a1d65960375235d14476bfb315fee35b9af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ae01728007dcfcdec117706191adeb922cf7b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae01728007dcfcdec117706191adeb922cf7b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae01728007dcfcdec117706191adeb922cf7b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae01728007dcfcdec117706191adeb922cf7b76/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e5def817a5142dd3eeb91ce4acf9ea22a43ad94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5def817a5142dd3eeb91ce4acf9ea22a43ad94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5def817a5142dd3eeb91ce4acf9ea22a43ad94"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "7051a42831f537636b5dfd37fd49a1ba817cded2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ae01728007dcfcdec117706191adeb922cf7b76", "patch": "@@ -1,5 +1,9 @@\n 2019-12-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/92105 - decltype(decltype) error cascade.\n+\t* parser.c (cp_parser_decltype_expr): Don't tentative_firewall here.\n+\t(cp_parser_decltype): Do it here.  Remember a non-tentative error.\n+\n \tPR c++/57082 - new X{} and private destructor.\n \t* init.c (build_new_1): Also pass tf_no_cleanup to\n \tbuild_special_member_call."}, {"sha": "16d1359c47df92c409c1f7077e30b1f1e024506b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7ae01728007dcfcdec117706191adeb922cf7b76", "patch": "@@ -14637,11 +14637,6 @@ cp_parser_decltype_expr (cp_parser *parser,\n   cp_token *id_expr_start_token;\n   tree expr;\n \n-  /* Since we're going to preserve any side-effects from this parse, set up a\n-     firewall to protect our callers from cp_parser_commit_to_tentative_parse\n-     in the expression.  */\n-  tentative_firewall firewall (parser);\n-\n   /* First, try parsing an id-expression.  */\n   id_expr_start_token = cp_lexer_peek_token (parser->lexer);\n   cp_parser_parse_tentatively (parser);\n@@ -14733,9 +14728,6 @@ cp_parser_decltype_expr (cp_parser *parser,\n          expression.  */\n       cp_parser_abort_tentative_parse (parser);\n \n-      /* Commit to the tentative_firewall so we get syntax errors.  */\n-      cp_parser_commit_to_tentative_parse (parser);\n-\n       /* Parse a full expression.  */\n       expr = cp_parser_expression (parser, /*pidk=*/NULL, /*cast_p=*/false,\n \t\t\t\t   /*decltype_p=*/true);\n@@ -14773,6 +14765,17 @@ cp_parser_decltype (cp_parser *parser)\n   if (!parens.require_open (parser))\n     return error_mark_node;\n \n+  /* Since we're going to preserve any side-effects from this parse, set up a\n+     firewall to protect our callers from cp_parser_commit_to_tentative_parse\n+     in the expression.  */\n+  tentative_firewall firewall (parser);\n+\n+  /* If in_declarator_p, a reparse as an expression might succeed (60361).\n+     Otherwise, commit now for better diagnostics.  */\n+  if (cp_parser_uncommitted_to_tentative_parse_p (parser)\n+      && !parser->in_declarator_p)\n+    cp_parser_commit_to_topmost_tentative_parse (parser);\n+\n   push_deferring_access_checks (dk_deferred);\n \n   tree expr = NULL_TREE;\n@@ -14833,10 +14836,16 @@ cp_parser_decltype (cp_parser *parser)\n     }\n \n   /* Parse to the closing `)'.  */\n-  if (!parens.require_close (parser))\n+  if (expr == error_mark_node || !parens.require_close (parser))\n     {\n       cp_parser_skip_to_closing_parenthesis (parser, true, false,\n \t\t\t\t\t     /*consume_paren=*/true);\n+      expr = error_mark_node;\n+    }\n+\n+  /* If we got a parse error while tentative, bail out now.  */\n+  if (cp_parser_error_occurred (parser))\n+    {\n       pop_deferring_access_checks ();\n       return error_mark_node;\n     }\n@@ -14859,6 +14868,11 @@ cp_parser_decltype (cp_parser *parser)\n   start_token->u.tree_check_value->value = expr;\n   start_token->u.tree_check_value->checks = get_deferred_access_checks ();\n   start_token->keyword = RID_MAX;\n+\n+  location_t loc = start_token->location;\n+  loc = make_location (loc, loc, parser->lexer);\n+  start_token->location = loc;\n+\n   cp_lexer_purge_tokens_after (parser->lexer, start_token);\n \n   pop_to_parent_deferring_access_checks ();"}, {"sha": "302cb64aafc76e36158bad72f8d120151c6b823f", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-err1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-err1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-err1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-err1.C?ref=7ae01728007dcfcdec117706191adeb922cf7b76", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/92105\n+// { dg-do compile { target c++11 } }\n+\n+// Test that we get exactly one \"expected\" error.\n+\n+decltype(decltype) x = 42;\t// { dg-bogus \"expected.*expected\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } .-1 }"}, {"sha": "fe7247269f5d9aac1ae7a2e2a0083c60c224701b", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae01728007dcfcdec117706191adeb922cf7b76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype10.C?ref=7ae01728007dcfcdec117706191adeb922cf7b76", "patch": "@@ -6,4 +6,4 @@ template<int> struct A\n   static int i;\n };\n \n-template<int N> int A<N>::i(decltype (A::i;\t// { dg-error \"expected primary-expression before\" }\n+template<int N> int A<N>::i(decltype (A::i;\t// { dg-error \"expected\" }"}]}