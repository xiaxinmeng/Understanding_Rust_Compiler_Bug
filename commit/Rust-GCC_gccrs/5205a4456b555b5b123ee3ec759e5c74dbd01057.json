{"sha": "5205a4456b555b5b123ee3ec759e5c74dbd01057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwNWE0NDU2YjU1NWI1YjEyM2VlM2VjNzU5ZTVjNzRkYmQwMTA1Nw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-01-05T12:45:54Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2020-01-05T12:45:54Z"}, "message": "Guard inclusion of vxAtomicLib.h from gthr-vxworks.h\n\n2020-01-05  Olivier Hainque  <hainque@adacore.com>\n\n        * config/gthr-vxworks.h: Guard #include vxAtomicLib.h\n\tby IN_LIBGCC2.\n\nFrom-SVN: r279885", "tree": {"sha": "bb215d99f84cd13fcab6012d93ec4db2d3724b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb215d99f84cd13fcab6012d93ec4db2d3724b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5205a4456b555b5b123ee3ec759e5c74dbd01057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5205a4456b555b5b123ee3ec759e5c74dbd01057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5205a4456b555b5b123ee3ec759e5c74dbd01057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5205a4456b555b5b123ee3ec759e5c74dbd01057/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72036b59a0143c61acd2652a832e3903e180d0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72036b59a0143c61acd2652a832e3903e180d0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72036b59a0143c61acd2652a832e3903e180d0f9"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "ae2099d4e5bf9df8fab08729a7e528e9a43b963f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5205a4456b555b5b123ee3ec759e5c74dbd01057/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5205a4456b555b5b123ee3ec759e5c74dbd01057/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5205a4456b555b5b123ee3ec759e5c74dbd01057", "patch": "@@ -1,3 +1,8 @@\n+2020-01-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/gthr-vxworks.h: Guard #include vxAtomicLib.h\n+\tby IN_LIBGCC2.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "8b55fc554075e7a253656107e803268bec5e0f53", "filename": "libgcc/config/gthr-vxworks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5205a4456b555b5b123ee3ec759e5c74dbd01057/libgcc%2Fconfig%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5205a4456b555b5b123ee3ec759e5c74dbd01057/libgcc%2Fconfig%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgthr-vxworks.h?ref=5205a4456b555b5b123ee3ec759e5c74dbd01057", "patch": "@@ -70,7 +70,14 @@ typedef volatile unsigned char __vx_tas_t;\n #define __TAS(x) vxAtomicCas ((x), 0, 1)\n typedef atomic_t __vx_tas_t;\n \n+/* Our implementation will need the system headers to use the vxAtomic\n+   primitives.  Other includers won't and could actually be incompatible\n+   with this inclusion, for instance libstdc++ sources compiled in C++\n+   98 mode while AtomicLib for C++ requires C++ 11 at least.  */\n+\n+#if defined(IN_LIBGCC2)\n #include <vxAtomicLib.h>\n+#endif\n \n #endif\n "}]}