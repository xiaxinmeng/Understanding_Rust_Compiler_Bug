{"sha": "089b05b1031d0394f3922486f41cdc89149af796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5YjA1YjEwMzFkMDM5NGYzOTIyNDg2ZjQxY2RjODkxNDlhZjc5Ng==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2015-12-11T14:43:26Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-12-11T14:43:26Z"}, "message": "S/390: Wide int support.\n\ngcc/ChangeLog\n\n\t* config/s390/s390.c (s390_rtx_costs)\n\t(s390_cannot_force_const_mem, legitimate_pic_operand_p)\n\t(s390_preferred_reload_class, s390_reload_symref_address)\n\t(legitimate_reload_constant_p, print_operand): Wide int support.\n\t* config/s390/predicates.md (\"const0_operand\", \"constm1_operand\")\n\t(\"consttable_operand\"): Likewise.\n\t(\"larl_operand\"): Add a comment.\n\t* config/s390/s390.h (TARGET_SUPPORTS_WIDE_INT): Enable wide int\n\tsupport.\n\nFrom-SVN: r231566", "tree": {"sha": "2346879efb6b2f822203cb57a43fd595cd831299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2346879efb6b2f822203cb57a43fd595cd831299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/089b05b1031d0394f3922486f41cdc89149af796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089b05b1031d0394f3922486f41cdc89149af796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089b05b1031d0394f3922486f41cdc89149af796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089b05b1031d0394f3922486f41cdc89149af796/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "653b8b8d89fa0243b7e769a22f172b3264da58f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653b8b8d89fa0243b7e769a22f172b3264da58f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653b8b8d89fa0243b7e769a22f172b3264da58f4"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "792c56b5346c312ae65a22b60aed32bf2f02248b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089b05b1031d0394f3922486f41cdc89149af796/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089b05b1031d0394f3922486f41cdc89149af796/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=089b05b1031d0394f3922486f41cdc89149af796", "patch": "@@ -1,3 +1,15 @@\n+2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_rtx_costs)\n+\t(s390_cannot_force_const_mem, legitimate_pic_operand_p)\n+\t(s390_preferred_reload_class, s390_reload_symref_address)\n+\t(legitimate_reload_constant_p, print_operand): Wide int support.\n+\t* config/s390/predicates.md (\"const0_operand\", \"constm1_operand\")\n+\t(\"consttable_operand\"): Likewise.\n+\t(\"larl_operand\"): Add a comment.\n+\t* config/s390/s390.h (TARGET_SUPPORTS_WIDE_INT): Enable wide int\n+\tsupport.\n+\n 2015-12-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.h (TARGET_SUPPORTS_WIDE_INT): Define.\n@@ -30,7 +42,7 @@\n \t(\"*setmem_long_and_31z\"): New define_insn.\n \t(\"setmem_long_<P:mode>\"): New expanders.\n \t* (<modesize>): New mode attribute\n-\t\n+\n 2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"movstr\", \"*movstr\"): Fix warning."}, {"sha": "5c462c4fac5b0150954b67e5afc493f4cf64554c", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=089b05b1031d0394f3922486f41cdc89149af796", "patch": "@@ -26,12 +26,12 @@\n \n ;; Return true if OP a const 0 operand (int/float/vector).\n (define_predicate \"const0_operand\"\n-  (and (match_code \"const_int,const_double,const_vector\")\n+  (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n ;; Return true if OP an all ones operand (int/float/vector).\n (define_predicate \"constm1_operand\"\n-  (and (match_code \"const_int, const_double,const_vector\")\n+  (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (match_test \"op == CONSTM1_RTX (mode)\")))\n \n ;; Return true if OP is a 4 bit mask operand\n@@ -42,7 +42,7 @@\n ;; Return true if OP is constant.\n \n (define_special_predicate \"consttable_operand\"\n-  (and (match_code \"symbol_ref, label_ref, const, const_int, const_double, const_vector\")\n+  (and (match_code \"symbol_ref, label_ref, const, const_int, const_wide_int, const_double, const_vector\")\n        (match_test \"CONSTANT_P (op)\")))\n \n ;; Return true if OP is a valid S-type operand.\n@@ -121,6 +121,9 @@\n ;;  Return true if OP a valid operand for the LARL instruction.\n \n (define_predicate \"larl_operand\"\n+; Note: Although CONST_INT and CONST_DOUBLE are not handled in this predicate,\n+; at least one of them needs to appear or otherwise safe_predicate_mode will\n+; assume that a VOIDmode LABEL_REF is not accepted either (see genrecog.c).\n   (match_code \"label_ref, symbol_ref, const, const_int, const_double\")\n {\n   /* Allow labels and local symbols.  */"}, {"sha": "bc6f05b56cdfe29d54308a86ceaf461aa064a399", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=089b05b1031d0394f3922486f41cdc89149af796", "patch": "@@ -1323,7 +1323,7 @@ s390_tm_ccmode (rtx op1, rtx op2, bool mixed)\n {\n   int bit0, bit1;\n \n-  /* ??? Fixme: should work on CONST_DOUBLE as well.  */\n+  /* ??? Fixme: should work on CONST_WIDE_INT as well.  */\n   if (GET_CODE (op1) != CONST_INT || GET_CODE (op2) != CONST_INT)\n     return VOIDmode;\n \n@@ -3355,6 +3355,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case LABEL_REF:\n     case SYMBOL_REF:\n     case CONST_DOUBLE:\n+    case CONST_WIDE_INT:\n     case MEM:\n       *total = 0;\n       return true;\n@@ -3662,7 +3663,7 @@ tls_symbolic_reference_mentioned_p (rtx op)\n \n /* Return true if OP is a legitimate general operand when\n    generating PIC code.  It is given that flag_pic is on\n-   and that OP satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n+   and that OP satisfies CONSTANT_P.  */\n \n int\n legitimate_pic_operand_p (rtx op)\n@@ -3677,7 +3678,7 @@ legitimate_pic_operand_p (rtx op)\n }\n \n /* Returns true if the constant value OP is a legitimate general operand.\n-   It is given that OP satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n+   It is given that OP satisfies CONSTANT_P.  */\n \n static bool\n s390_legitimate_constant_p (machine_mode mode, rtx op)\n@@ -3731,6 +3732,7 @@ s390_cannot_force_const_mem (machine_mode mode, rtx x)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_WIDE_INT:\n     case CONST_VECTOR:\n       /* Accept all non-symbolic constants.  */\n       return false;\n@@ -3831,8 +3833,9 @@ legitimate_reload_constant_p (rtx op)\n     return true;\n \n   /* Accept double-word operands that can be split.  */\n-  if (GET_CODE (op) == CONST_INT\n-      && trunc_int_for_mode (INTVAL (op), word_mode) != INTVAL (op))\n+  if (GET_CODE (op) == CONST_WIDE_INT\n+      || (GET_CODE (op) == CONST_INT\n+\t  && trunc_int_for_mode (INTVAL (op), word_mode) != INTVAL (op)))\n     {\n       machine_mode dword_mode = word_mode == SImode ? DImode : TImode;\n       rtx hi = operand_subword (op, 0, 0, dword_mode);\n@@ -3896,6 +3899,7 @@ s390_preferred_reload_class (rtx op, reg_class_t rclass)\n       case CONST_VECTOR:\n       case CONST_DOUBLE:\n       case CONST_INT:\n+      case CONST_WIDE_INT:\n \tif (reg_class_subset_p (GENERAL_REGS, rclass)\n \t    && legitimate_reload_constant_p (op))\n \t  return GENERAL_REGS;\n@@ -4047,6 +4051,7 @@ s390_reload_symref_address (rtx reg, rtx mem, rtx scratch, bool tomem)\n   /* Reload might have pulled a constant out of the literal pool.\n      Force it back in.  */\n   if (CONST_INT_P (mem) || GET_CODE (mem) == CONST_DOUBLE\n+      || GET_CODE (mem) == CONST_WIDE_INT\n       || GET_CODE (mem) == CONST_VECTOR\n       || GET_CODE (mem) == CONST)\n     mem = force_const_mem (GET_MODE (reg), mem);\n@@ -7238,15 +7243,16 @@ print_operand (FILE *file, rtx x, int code)\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, ival);\n       break;\n \n-    case CONST_DOUBLE:\n-      gcc_assert (GET_MODE (x) == VOIDmode);\n+    case CONST_WIDE_INT:\n       if (code == 'b')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x) & 0xff);\n+        fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t CONST_WIDE_INT_ELT (x, 0) & 0xff);\n       else if (code == 'x')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x) & 0xffff);\n+        fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t CONST_WIDE_INT_ELT (x, 0) & 0xffff);\n       else if (code == 'h')\n         fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t ((CONST_DOUBLE_LOW (x) & 0xffff) ^ 0x8000) - 0x8000);\n+\t\t ((CONST_WIDE_INT_ELT (x, 0) & 0xffff) ^ 0x8000) - 0x8000);\n       else\n \t{\n \t  if (code == 0)"}, {"sha": "52ed7a4a477981066c1741e18c013b40abaf2c34", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089b05b1031d0394f3922486f41cdc89149af796/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=089b05b1031d0394f3922486f41cdc89149af796", "patch": "@@ -155,6 +155,8 @@ enum processor_flags\n #define SWITCHABLE_TARGET 1\n #endif\n \n+#define TARGET_SUPPORTS_WIDE_INT 1\n+\n /* Use the ABI introduced with IBM z13:\n    - pass vector arguments <= 16 bytes in VRs\n    - align *all* vector types to 8 bytes  */"}]}