{"sha": "ef4195d63d08c669014ec5330f1b4eacd9778736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0MTk1ZDYzZDA4YzY2OTAxNGVjNTMzMGYxYjRlYWNkOTc3ODczNg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-10T18:06:34Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-10T18:06:34Z"}, "message": "[multiple changes]\n\n2008-02-10  Danny Smith  <dannysmith@users.sourceforge.net>\n\n\tPR gcc/35063\n\t* gthr-win32.h (__gthread_mutex_destroy_function): New function\n\tto CloseHandle after unlocking to prevent accumulation of handle\n\tcount. \n\n2008-02-10  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/35063\n\t* io/unit.c (destroy_unit_mutex): New function that uses\n\t__gthread_mutex_destroy_function or pthread_mutex_destroy after\n\tunlocking and before free_mem for final closure of I/O unit.\n\t(delete_root): Use new function.\n\t(free_internal_unit): Likewise.\n\t(close_unit_1): Likewise.\n\nFrom-SVN: r132217", "tree": {"sha": "cb9b409978e20058c0a784dab93cc4c41074e52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb9b409978e20058c0a784dab93cc4c41074e52c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4195d63d08c669014ec5330f1b4eacd9778736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4195d63d08c669014ec5330f1b4eacd9778736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4195d63d08c669014ec5330f1b4eacd9778736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4195d63d08c669014ec5330f1b4eacd9778736/comments", "author": null, "committer": null, "parents": [{"sha": "39caa164347d4dedef97ccf05cdb66da6514bee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39caa164347d4dedef97ccf05cdb66da6514bee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39caa164347d4dedef97ccf05cdb66da6514bee6"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "53b283c2c3ea9600c380c141833dbb730d2d4d8b", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4195d63d08c669014ec5330f1b4eacd9778736/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4195d63d08c669014ec5330f1b4eacd9778736/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ef4195d63d08c669014ec5330f1b4eacd9778736", "patch": "@@ -1,3 +1,10 @@\n+2008-02-10  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR gcc/35063\n+\t* gthr-win32.h (__gthread_mutex_destroy_function): New function\n+\tto CloseHandle after unlocking to prevent accumulation of handle\n+\tcount. \n+\n 2008-02-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* configure.ac: Enable fortran for cris-*-elf and crisv32-*-elf."}, {"sha": "6a32c1a134c022dffcf4418fd1db2265c89e0e81", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4195d63d08c669014ec5330f1b4eacd9778736/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4195d63d08c669014ec5330f1b4eacd9778736/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=ef4195d63d08c669014ec5330f1b4eacd9778736", "patch": "@@ -359,6 +359,9 @@ typedef struct {\n   __gthread_recursive_mutex_init_function\n #define __GTHREAD_RECURSIVE_MUTEX_INIT_DEFAULT {-1, 0, 0, 0}\n \n+#define __GTHREAD_MUTEX_DESTROY_FUNCTION \\\n+  __gthread_mutex_destroy_function\n+\n #if __MINGW32_MAJOR_VERSION >= 1 || \\\n   (__MINGW32_MAJOR_VERSION == 0 && __MINGW32_MINOR_VERSION > 2)\n #define MINGW32_SUPPORTS_MT_EH 1\n@@ -615,6 +618,12 @@ __gthread_mutex_init_function (__gthread_mutex_t *mutex)\n   mutex->sema = CreateSemaphore (NULL, 0, 65535, NULL);\n }\n \n+static inline void\n+__gthread_mutex_destroy_function (__gthread_mutex_t *mutex)\n+{\n+  CloseHandle ((HANDLE) mutex->sema);\n+}\n+\n static inline int\n __gthread_mutex_lock (__gthread_mutex_t *mutex)\n {"}, {"sha": "6260ed30b4412b2ae714beef246ddccf89baa6b7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4195d63d08c669014ec5330f1b4eacd9778736/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4195d63d08c669014ec5330f1b4eacd9778736/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ef4195d63d08c669014ec5330f1b4eacd9778736", "patch": "@@ -1,3 +1,13 @@\n+2008-02-10  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/35063\n+\t* io/unit.c (destroy_unit_mutex): New function that uses\n+\t__gthread_mutex_destroy_function or pthread_mutex_destroy after\n+\tunlocking and before free_mem for final closure of I/O unit.\n+\t(delete_root): Use new function.\n+\t(free_internal_unit): Likewise.\n+\t(close_unit_1): Likewise.\n+\n 2008-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/35001"}, {"sha": "2ec776f0d688e2c81184ce2180cdaaad55d55de4", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4195d63d08c669014ec5330f1b4eacd9778736/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4195d63d08c669014ec5330f1b4eacd9778736/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=ef4195d63d08c669014ec5330f1b4eacd9778736", "patch": "@@ -204,6 +204,22 @@ insert_unit (int n)\n }\n \n \n+/* destroy_unit_mutex()-- Destroy the mutex and free memory of unit.  */\n+\n+static void\n+destroy_unit_mutex (gfc_unit * u)\n+{\n+#ifdef __GTHREAD_MUTEX_DESTROY_FUNCTION\n+  __GTHREAD_MUTEX_DESTROY_FUNCTION (&u->lock);\n+#else\n+#ifdef __CYGWIN__\n+  pthread_mutex_destroy (&u->lock);\n+#endif\n+#endif\n+  free_mem (u);\n+}\n+\n+\n static gfc_unit *\n delete_root (gfc_unit * t)\n {\n@@ -341,7 +357,7 @@ get_external_unit (int n, int do_create)\n \t  __gthread_mutex_lock (&unit_lock);\n \t  __gthread_mutex_unlock (&p->lock);\n \t  if (predec_waiting_locked (p) == 0)\n-\t    free_mem (p);\n+\t    destroy_unit_mutex (p);\n \t  goto retry;\n \t}\n \n@@ -455,14 +471,18 @@ free_internal_unit (st_parameter_dt *dtp)\n   if (!is_internal_unit (dtp))\n     return;\n \n-  if (dtp->u.p.current_unit->ls != NULL)\n-      free_mem (dtp->u.p.current_unit->ls);\n-  \n-  sclose (dtp->u.p.current_unit->s);\n-\n   if (dtp->u.p.current_unit != NULL)\n-    free_mem (dtp->u.p.current_unit);\n+    {\n+      if (dtp->u.p.current_unit->ls != NULL)\n+\tfree_mem (dtp->u.p.current_unit->ls);\n+  \n+      if (dtp->u.p.current_unit->s)\n+\tfree_mem (dtp->u.p.current_unit->s);\n+  \n+      destroy_unit_mutex (dtp->u.p.current_unit);\n+    }\n }\n+      \n \n \n /* get_unit()-- Returns the unit structure associated with the integer\n@@ -612,7 +632,7 @@ close_unit_1 (gfc_unit *u, int locked)\n      avoid freeing the memory, the last such thread will free it\n      instead.  */\n   if (u->waiting == 0)\n-    free_mem (u);\n+    destroy_unit_mutex (u);\n \n   if (!locked)\n     __gthread_mutex_unlock (&unit_lock);"}]}