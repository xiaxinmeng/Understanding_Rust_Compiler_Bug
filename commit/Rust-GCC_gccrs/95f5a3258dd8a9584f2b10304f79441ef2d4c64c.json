{"sha": "95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmNWEzMjU4ZGQ4YTk1ODRmMmIxMDMwNGY3OTQ0MWVmMmQ0YzY0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-04T09:33:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-04T09:33:18Z"}, "message": "veclower: Don't ICE on .VEC_CONVERT calls with no lhs [PR96426]\n\n.VEC_CONVERT is a const internal call, so normally if the lhs is not used,\nwe'd DCE it far before getting to veclower, but with -O0 (or perhaps\n-fno-tree-dce and some other -fno-* options) it can happen.\nBut as the internal fn needs the lhs to know the type to which the\nconversion is done (and I think that is a reasonable representation, having\nsome magic another argument and having to create constants with that type\nlooks overkill to me), we just should DCE those calls ourselves.\nDuring veclower, we can't really remove insns, as the callers would be\nupset, so this just replaces it with a GIMPLE_NOP.\n\n2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/96426\n\t* tree-vect-generic.c (expand_vector_conversion): Replace .VEC_CONVERT\n\tcall with GIMPLE_NOP if there is no lhs.\n\n\t* gcc.c-torture/compile/pr96426.c: New test.", "tree": {"sha": "d3bd5a0c62f3338a88dc24aaff47a8f01ebce092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3bd5a0c62f3338a88dc24aaff47a8f01ebce092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f5a3258dd8a9584f2b10304f79441ef2d4c64c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fabe0ede9db9fa95832b2329d3d6156711905e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe0ede9db9fa95832b2329d3d6156711905e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabe0ede9db9fa95832b2329d3d6156711905e20"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "bd573fe5366087d07e7c7a8cca5a070cfb15af8e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr96426.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f5a3258dd8a9584f2b10304f79441ef2d4c64c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96426.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f5a3258dd8a9584f2b10304f79441ef2d4c64c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96426.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr96426.c?ref=95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/96426 */\n+\n+typedef long long V __attribute__((vector_size(16)));\n+typedef double W __attribute__((vector_size(16)));\n+\n+void\n+foo (V *v)\n+{\n+  __builtin_convertvector (*v, W);\n+}"}, {"sha": "6d5d65195ae6e5b8a5c8343c5f3ab67907b10f8f", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f5a3258dd8a9584f2b10304f79441ef2d4c64c/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f5a3258dd8a9584f2b10304f79441ef2d4c64c/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=95f5a3258dd8a9584f2b10304f79441ef2d4c64c", "patch": "@@ -1775,6 +1775,12 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n   gimple *stmt = gsi_stmt (*gsi);\n   gimple *g;\n   tree lhs = gimple_call_lhs (stmt);\n+  if (lhs == NULL_TREE)\n+    {\n+      g = gimple_build_nop ();\n+      gsi_replace (gsi, g, false);\n+      return;\n+    }\n   tree arg = gimple_call_arg (stmt, 0);\n   tree ret_type = TREE_TYPE (lhs);\n   tree arg_type = TREE_TYPE (arg);"}]}