{"sha": "a701efba7e27b3a5f1a6c11071c30140de97a5b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMWVmYmE3ZTI3YjNhNWYxYTZjMTEwNzFjMzAxNDBkZTk3YTViMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1997-12-15T17:55:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-15T17:55:11Z"}, "message": "toplev.c (rest_of_compilation): Don't call save_for_inline_copy if all we're doing is dealing with -Wreturn-type.\n\n        * toplev.c (rest_of_compilation): Don't call save_for_inline_copy\n        if all we're doing is dealing with -Wreturn-type.\n\nFrom-SVN: r17104", "tree": {"sha": "333dcad5f45552a48c6cdbee76e91587d27c6497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333dcad5f45552a48c6cdbee76e91587d27c6497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a701efba7e27b3a5f1a6c11071c30140de97a5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a701efba7e27b3a5f1a6c11071c30140de97a5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a701efba7e27b3a5f1a6c11071c30140de97a5b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a701efba7e27b3a5f1a6c11071c30140de97a5b0/comments", "author": null, "committer": null, "parents": [{"sha": "5e21ac7a624b32a8cd3c6261368a0b5e5068a81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21ac7a624b32a8cd3c6261368a0b5e5068a81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e21ac7a624b32a8cd3c6261368a0b5e5068a81d"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "44b7c09b3f38af52d43c268090e2711b1357eafb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a701efba7e27b3a5f1a6c11071c30140de97a5b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a701efba7e27b3a5f1a6c11071c30140de97a5b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a701efba7e27b3a5f1a6c11071c30140de97a5b0", "patch": "@@ -1,3 +1,8 @@\n+Mon Dec 15  Mark Mitchell  <mmitchell@usa.net> 11:41:32 1997\n+\n+\t* toplev.c (rest_of_compilation): Don't call save_for_inline_copy\n+\tif all we're doing is dealing with -Wreturn-type.\n+\n Mon Dec 15 09:44:39 1997  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (zero_extendqihi2, zero_extendqisi2, zero_extendqidi2):"}, {"sha": "a2d3f81801b4ab32ef1cac702ecfc524b13720bc", "filename": "gcc/toplev.c", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a701efba7e27b3a5f1a6c11071c30140de97a5b0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a701efba7e27b3a5f1a6c11071c30140de97a5b0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a701efba7e27b3a5f1a6c11071c30140de97a5b0", "patch": "@@ -3120,35 +3120,48 @@ rest_of_compilation (decl)\n \t{\n \t  DECL_DEFER_OUTPUT (decl) = 1;\n \n-\t  /* If -Wreturn-type, we have to do a bit of compilation.  */\n-\t  if (! warn_return_type)\n+\t  /* If -Wreturn-type, we have to do a bit of compilation.\n+\t     However, if we just fall through we will call\n+\t     save_for_inline_copying() which results in excessive\n+\t     memory use.  Instead, we just want to call\n+\t     jump_optimize() to figure out whether or not we can fall\n+\t     off the end of the function; we do the minimum amount of\n+\t     work necessary to make that safe.  And, we set optimize\n+\t     to zero to keep jump_optimize from working too hard.  */\n+\t  if (warn_return_type)\n \t    {\n+\t      int saved_optimize = optimize;\n+\t      optimize = 0;\n+\t      find_exception_handler_labels ();\n+\t      jump_optimize (get_insns(), 0, 0, 0);\n+\t      optimize = saved_optimize;\n+\t    }\n+\n #ifdef DWARF_DEBUGGING_INFO\n-\t      /* Generate the DWARF info for the \"abstract\" instance\n-\t\t of a function which we may later generate inlined and/or\n-\t\t out-of-line instances of.  */\n-\t      if (write_symbols == DWARF_DEBUG)\n-\t\t{\n-\t\t  set_decl_abstract_flags (decl, 1);\n-\t\t  TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 0));\n-\t\t  set_decl_abstract_flags (decl, 0);\n-\t\t}\n+\t  /* Generate the DWARF info for the \"abstract\" instance\n+\t     of a function which we may later generate inlined and/or\n+\t     out-of-line instances of.  */\n+\t  if (write_symbols == DWARF_DEBUG)\n+\t    {\n+\t      set_decl_abstract_flags (decl, 1);\n+\t      TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 0));\n+\t      set_decl_abstract_flags (decl, 0);\n+\t    }\n #endif\n #ifdef DWARF2_DEBUGGING_INFO\n-\t      /* Generate the DWARF2 info for the \"abstract\" instance\n-\t\t of a function which we may later generate inlined and/or\n-\t\t out-of-line instances of.  */\n-\t      if (write_symbols == DWARF2_DEBUG)\n-\t\t{\n-\t\t  set_decl_abstract_flags (decl, 1);\n-\t\t  TIMEVAR (symout_time, dwarf2out_decl (decl));\n-\t\t  set_decl_abstract_flags (decl, 0);\n-\t\t}\n-#endif\n-\t      TIMEVAR (integration_time, save_for_inline_nocopy (decl));\n-\t      RTX_INTEGRATED_P (DECL_SAVED_INSNS (decl)) = inlinable;\n-\t      goto exit_rest_of_compilation;\n+\t  /* Generate the DWARF2 info for the \"abstract\" instance\n+\t     of a function which we may later generate inlined and/or\n+\t     out-of-line instances of.  */\n+\t  if (write_symbols == DWARF2_DEBUG)\n+\t    {\n+\t      set_decl_abstract_flags (decl, 1);\n+\t      TIMEVAR (symout_time, dwarf2out_decl (decl));\n+\t      set_decl_abstract_flags (decl, 0);\n \t    }\n+#endif\n+\t  TIMEVAR (integration_time, save_for_inline_nocopy (decl));\n+\t  RTX_INTEGRATED_P (DECL_SAVED_INSNS (decl)) = inlinable;\n+\t  goto exit_rest_of_compilation;\n \t}\n \n       /* If we have to compile the function now, save its rtl and subdecls"}]}