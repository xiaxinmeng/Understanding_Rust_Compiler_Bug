{"sha": "e38992e8d312b679eb3f4b9973567805a96511cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4OTkyZThkMzEyYjY3OWViM2Y0Yjk5NzM1Njc4MDVhOTY1MTFjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-18T20:42:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-18T20:42:00Z"}, "message": "conflict.c (conflict_graph_add): Pass enum type to htab_find_slot.\n\n\t* gcc/conflict.c (conflict_graph_add): Pass enum type to\n\thtab_find_slot.\n\t* gcc/cpperror.c (hashtab.h): Now include.\n\t* gcc/cppexp.c (hashtab.h): Likewise.\n\t* gcc/cpplex.c (hashtab.h): Likewise.\n\t* gcc/cppfiles.c (hashtab.h): Likewise.\n\t(find_include_file, _cpp_calc_hash, cpp_read_file): Pass enum type\n\tto htab_find_slot_with_hash.\n\t* gcc/cpphash.c (hashtab.h): Now include.\n\t(_cpp_lookup_slot): INSERT is now enum insert_option.\n\t* gcc/cpphash.h (_cpp_lookup_slot): Likewise.\n\t* gcc/cppinit.c (hashtab.h): Include earlier.\n\t(initialize_builtins): Pass enum to htab_find_slot.\n\t* gcc/cpplib.c (hashtab.h): Now include.\n\t(do_define, do_undef): Pass enum type to _cpp_lookup_slot.\n\t(do_pragma_poison, do_assert): Likewise.\n\t* gcc/emit-rtl.c (gen_rtx_CONST_INT): Pass enum to\n\thtab_find_slot_with_hash.\n\t* gcc/simplify-rtx.c (cselib_lookup_mem, cselib_lookup): Likewise.\n\t* gcc/tree.c (type_hash_add): Likewise.\n\t(build1): Minor cleanup.\n\t* include/hashtab.h (enum insert_option): New type.\n\t(htab_find_slot, htab_find_slot_with_hash): Use it.\n\t* libiberty/hashtab.c: Various minor cleanups.\n\t(htab_find_slot_with_hash): INSERT is now enum insert_option.\n\t(htab_find_slot): Likewise.\n\nFrom-SVN: r33236", "tree": {"sha": "83c55501d7538240d73d1cd61690beae93dbce4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c55501d7538240d73d1cd61690beae93dbce4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e38992e8d312b679eb3f4b9973567805a96511cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38992e8d312b679eb3f4b9973567805a96511cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38992e8d312b679eb3f4b9973567805a96511cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38992e8d312b679eb3f4b9973567805a96511cb/comments", "author": null, "committer": null, "parents": [{"sha": "0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c"}], "stats": {"total": 254, "additions": 149, "deletions": 105}, "files": [{"sha": "8f96af39e41544da98016d355ee6724f5161f83c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -1,3 +1,41 @@\n+Tue Apr 18 14:16:47 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* conflict.c (conflict_graph_add): Pass enum type to htab_find_slot.\n+\t* cpperror.c (hashtab.h): Now include.\n+\t* cppexp.c (hashtab.h): Likewise.\n+\t* cpplex.c (hashtab.h): Likewise.\n+\t* cppfiles.c (hashtab.h): Likewise.\n+\t(find_include_file, _cpp_calc_hash, cpp_read_file): Pass enum type\n+\tto htab_find_slot_with_hash.\n+\t* cpphash.c (hashtab.h): Now include.\n+\t(_cpp_lookup_slot): INSERT is now enum insert_option.\n+\t* cpphash.h (_cpp_lookup_slot): Likewise.\n+\t* cppinit.c (hashtab.h): Include earlier.\n+\t(initialize_builtins): Pass enum to htab_find_slot.\n+\t* cpplib.c (hashtab.h): Now include.\n+\t(do_define, do_undef): Pass enum type to _cpp_lookup_slot.\n+\t(do_pragma_poison, do_assert): Likewise.\n+\t* emit-rtl.c (gen_rtx_CONST_INT): Pass enum to\n+\thtab_find_slot_with_hash.\n+\t* simplify-rtx.c (cselib_lookup_mem, cselib_lookup): Likewise.\n+\t* tree.c (type_hash_add): Likewise.\n+\t(build1): Minor cleanup.\n+\n+\t* ggc-common.c: Add missing blanks.\n+\t* print-tree.c (print_node): Print DECL_OFFSET_ALIGN.\n+\t* tree.h (DECL_OFFSET_ALIGN): Fix typo in comment.\n+\n+\t* stmt.c (mark_case_node): New function.\n+\t(mark_case_nesting): Call it.\n+\n+\t* expmed.c (emit_store_flag): If comparing two-word integer\n+\twith zero, can optimize NE, EQ, GE, and LT.\n+\n+\t* c-decl.c (mark_binding_level): Use 'for' instead of `while'.\n+\t* conflict.c: Minor cleanups.\n+\t* optabs.c: Add blank line\n+\t* simplify-rtx.c: Minor cleanups.\n+\n 2000-04-18  Stan Cox  <scox@cygnus.com>\n \n \t* gengenrtl.c (genlegend): Fix misspelling.\n@@ -20,23 +58,6 @@\n \t(OLD_CC): Likewise.\n \t* config/m68k/x-ccur (X_CFLAGS): Likewise.\n \n-Tue Apr 18 14:16:47 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n-\n-\t* ggc-common.c: Add missing blanks.\n-\t* print-tree.c (print_node): Print DECL_OFFSET_ALIGN.\n-\t* tree.h (DECL_OFFSET_ALIGN): Fix typo in comment.\n-\n-\t* stmt.c (mark_case_node): New function.\n-\t(mark_case_nesting): Call it.\n-\n-\t* expmed.c (emit_store_flag): If comparing two-word integer\n-\twith zero, can optimize NE, EQ, GE, and LT.\n-\n-\t* c-decl.c (mark_binding_level): Use 'for' instead of `while'.\n-\t* conflict.c: Minor cleanups.\n-\t* optabs.c: Add blank line\n-\t* simplify-rtx.c: Minor cleanups.\n-\n 2000-04-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cpplex.c (_cpp_lex_token): Don't call CPP_BUMP_LINE when the"}, {"sha": "e798b780715c06c6a711e825d18e382b36153865", "filename": "gcc/cpperror.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -25,6 +25,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"hashtab.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"intl.h\""}, {"sha": "91ffc5d20e719add38e684ccfdf9159ba19e7345", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -1,5 +1,6 @@\n /* Parse C expressions for cpplib.\n    Copyright (C) 1987, 92, 94, 95, 97, 98, 1999, 2000 Free Software Foundation.\n+   Contributed by Per Bothner, 1994.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -14,19 +15,14 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.\n-\n- In other words, you are welcome to use, share and improve this program.\n- You are forbidden to forbid anyone else to use, share and improve\n- what you give them.   Help stamp out software-hoarding!\n-\n-Written by Per Bothner 1994.  */\n+Boston, MA 02111-1307, USA.  */\n \n /* Parse a C expression from text in a string  */\n    \n #include \"config.h\"\n #include \"system.h\"\n #include \"cpplib.h\"\n+#include \"hashtab.h\"\n #include \"cpphash.h\"\n \n #ifndef CHAR_TYPE_SIZE"}, {"sha": "f7cdd3197e80966b091ed644212b72191bfe4a0d", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -18,17 +18,13 @@ GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n-Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-\n- In other words, you are welcome to use, share and improve this program.\n- You are forbidden to forbid anyone else to use, share and improve\n- what you give them.   Help stamp out software-hoarding!  */\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"hashtab.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-#include \"hashtab.h\"\n #include \"intl.h\"\n #include \"mkdeps.h\"\n \n@@ -263,8 +259,8 @@ find_include_file (pfile, fname, search_start, ihash, before)\n   dummy.hash = _cpp_calc_hash (fname, strlen (fname));\n   path = (fname[0] == '/') ? ABSOLUTE_PATH : search_start;\n   slot = (IHASH **) htab_find_slot_with_hash (pfile->all_include_files,\n-\t\t\t\t\t      (const void *)&dummy,\n-\t\t\t\t\t      dummy.hash, 1);\n+\t\t\t\t\t      (const void *) &dummy,\n+\t\t\t\t\t      dummy.hash, INSERT);\n \n   if (*slot && (ih = redundant_include_p (pfile, *slot, path)))\n     {\n@@ -333,8 +329,8 @@ _cpp_fake_ihash (pfile, fname)\n   dummy.nshort = fname;\n   dummy.hash = _cpp_calc_hash (fname, strlen (fname));\n   slot = (IHASH **) htab_find_slot_with_hash (pfile->all_include_files,\n-\t\t\t\t\t      (const void *)&dummy,\n-\t\t\t\t\t      dummy.hash, 1);\n+\t\t\t\t\t      (const void *) &dummy,\n+\t\t\t\t\t      dummy.hash, INSERT);\n   if (*slot)\n     return (*slot)->name;\n   ih = make_IHASH (fname, 0, ABSOLUTE_PATH, dummy.hash, slot);\n@@ -670,10 +666,10 @@ cpp_read_file (pfile, fname)\n     dummy.hash = _cpp_calc_hash (fname, strlen (fname));\n   slot = (IHASH **) htab_find_slot_with_hash (pfile->all_include_files,\n \t\t\t\t\t      (const void *) &dummy,\n-\t\t\t\t\t      dummy.hash, 1);\n+\t\t\t\t\t      dummy.hash, INSERT);\n   if (*slot && (ih = redundant_include_p (pfile, *slot, ABSOLUTE_PATH)))\n     {\n-      if (ih == (IHASH *)-1)\n+      if (ih == (IHASH *) -1)\n \treturn 1;  /* Already included.  */\n     }\n   else"}, {"sha": "6f28295bca9f639dc6dcac8aef9a3096dfd9a2b6", "filename": "gcc/cpphash.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -26,8 +26,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"config.h\"\n #include \"system.h\"\n #include \"cpplib.h\"\n-#include \"cpphash.h\"\n #include \"hashtab.h\"\n+#include \"cpphash.h\"\n+\n #undef abort\n \n static unsigned int hash_HASHNODE PARAMS ((const void *));\n@@ -200,12 +201,13 @@ _cpp_lookup (pfile, name, len)\n }\n \n /* Find the hashtable slot for name \"name\".  Used to insert or delete.  */\n+\n HASHNODE **\n _cpp_lookup_slot (pfile, name, len, insert, hash)\n      cpp_reader *pfile;\n      const U_CHAR *name;\n      int len;\n-     int insert;\n+     enum insert_option insert;\n      unsigned long *hash;\n {\n   const U_CHAR *bp;\n@@ -214,7 +216,9 @@ _cpp_lookup_slot (pfile, name, len, insert, hash)\n \n   if (len < 0)\n     {\n-      for (bp = name; is_idchar (*bp); bp++);\n+      for (bp = name; is_idchar (*bp); bp++)\n+\t;\n+\n       len = bp - name;\n     }\n \n@@ -223,7 +227,7 @@ _cpp_lookup_slot (pfile, name, len, insert, hash)\n   dummy.hash = _cpp_calc_hash (name, len);\n \n   slot = (HASHNODE **) htab_find_slot_with_hash (pfile->hashtab,\n-\t\t\t\t\t\t (void *)&dummy,\n+\t\t\t\t\t\t (void *) &dummy,\n \t\t\t\t\t\t dummy.hash, insert);\n   if (insert)\n     *hash = dummy.hash;"}, {"sha": "9779fad17649f024a38c43383130c24e302f88d6", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -274,7 +274,8 @@ extern unsigned int _cpp_calc_hash\tPARAMS ((const U_CHAR *, size_t));\n extern HASHNODE *_cpp_lookup\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t const U_CHAR *, int));\n extern HASHNODE **_cpp_lookup_slot\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t const U_CHAR *, int, int,\n+\t\t\t\t\t\t const U_CHAR *, int,\n+\t\t\t\t\t\t enum insert_option,\n \t\t\t\t\t\t unsigned long *));\n extern void _cpp_free_definition\tPARAMS ((DEFINITION *));\n extern DEFINITION *_cpp_create_definition PARAMS ((cpp_reader *, int));"}, {"sha": "6feb0609562742fac1ea91ee831f591cafe471b3", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -21,14 +21,13 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-\n+#include \"hashtab.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"output.h\"\n #include \"prefix.h\"\n #include \"intl.h\"\n #include \"version.h\"\n-#include \"hashtab.h\"\n #include \"mkdeps.h\"\n \n /* Predefined symbols, built-in macros, and the default include path. */\n@@ -683,7 +682,7 @@ initialize_builtins (pfile)\n       hp = _cpp_make_hashnode (b->name, len, b->type,\n \t\t\t       _cpp_calc_hash (b->name, len));\n       hp->value.cpval = val;\n-      *(htab_find_slot (pfile->hashtab, (void *)hp, 1)) = hp;\n+      *(htab_find_slot (pfile->hashtab, (void *) hp, INSERT)) = hp;\n \n       if ((b->flags & DUMP) && CPP_OPTION (pfile, debug_output))\n \tdump_special_to_buffer (pfile, b->name);"}, {"sha": "9d0a792ef4e9682339a19a3d5df1fb624a030c54", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -22,6 +22,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"intl.h\"\n+#include \"hashtab.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n "}, {"sha": "87f245c1673c69183f812872b4eb088670e82744", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -22,6 +22,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n \n+#include \"hashtab.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"hashtab.h\"\n@@ -392,7 +393,7 @@ do_define (pfile)\n \tgoto out;\n     }\n \n-  slot = _cpp_lookup_slot (pfile, sym, len, 1, &hash);\n+  slot = _cpp_lookup_slot (pfile, sym, len, INSERT, &hash);\n   if (*slot)\n     {\n       int ok;\n@@ -770,7 +771,7 @@ do_undef (pfile)\n   name = pfile->token_buffer + here;\n   CPP_SET_WRITTEN (pfile, here);\n \n-  slot = _cpp_lookup_slot (pfile, name, len, 0, 0);\n+  slot = _cpp_lookup_slot (pfile, name, len, NO_INSERT, 0);\n   if (slot)\n     {\n       HASHNODE *hp = *slot;\n@@ -1028,7 +1029,7 @@ do_pragma_poison (pfile)\n \n       p = pfile->token_buffer + written;\n       len = strlen (p);\n-      slot = _cpp_lookup_slot (pfile, p, len, 1, &hash);\n+      slot = _cpp_lookup_slot (pfile, p, len, INSERT, &hash);\n       if (*slot)\n \t{\n \t  HASHNODE *hp = *slot;\n@@ -1586,14 +1587,14 @@ do_assert (pfile)\n \n   sym = pfile->token_buffer + old_written;\n   blen = (U_CHAR *) strchr (sym, '(') - sym;\n-  tslot = _cpp_lookup_slot (pfile, sym, tlen, 1, &thash);\n+  tslot = _cpp_lookup_slot (pfile, sym, tlen, INSERT, &thash);\n   if (*tslot)\n     {\n       cpp_warning (pfile, \"%s re-asserted\", sym);\n       goto error;\n     }\n \n-  bslot = _cpp_lookup_slot (pfile, sym, blen, 1, &bhash);\n+  bslot = _cpp_lookup_slot (pfile, sym, blen, INSERT, &bhash);\n   if (! *bslot)\n     {\n       *bslot = base = _cpp_make_hashnode (sym, blen, T_ASSERT, bhash);"}, {"sha": "9044fb56350ba786a403bc401ddaa4b34dfb666d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -248,7 +248,8 @@ gen_rtx_CONST_INT (mode, arg)\n #endif\n \n   /* Look up the CONST_INT in the hash table.  */\n-  slot = htab_find_slot_with_hash (const_int_htab, &arg, (hashval_t) arg, 1);\n+  slot = htab_find_slot_with_hash (const_int_htab, &arg,\n+\t\t\t\t   (hashval_t) arg, INSERT);\n   if (*slot == 0)\n     {\n       if (!ggc_p)"}, {"sha": "a9595573ee7e4b81f0e3eaa71fe042857390376a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -2662,7 +2662,7 @@ cselib_lookup_mem (x, create)\n \n   mem_elt = new_cselib_val (++next_unknown_value, GET_MODE (x));\n   add_mem_for_addr (addr, mem_elt, x);\n-  slot = htab_find_slot_with_hash (hash_table, x, mem_elt->value, 1);\n+  slot = htab_find_slot_with_hash (hash_table, x, mem_elt->value, INSERT);\n   *slot = mem_elt;\n   return mem_elt;\n }\n@@ -2782,7 +2782,7 @@ cselib_lookup (x, mode, create)\n       e = new_cselib_val (++next_unknown_value, GET_MODE (x));\n       e->locs = new_elt_loc_list (e->locs, x);\n       REG_VALUES (i) = new_elt_list (REG_VALUES (i), e);\n-      slot = htab_find_slot_with_hash (hash_table, x, e->value, 1);\n+      slot = htab_find_slot_with_hash (hash_table, x, e->value, INSERT);\n       *slot = e;\n       return e;\n     }\n@@ -2795,7 +2795,8 @@ cselib_lookup (x, mode, create)\n   if (! hashval)\n     return 0;\n \n-  slot = htab_find_slot_with_hash (hash_table, x, hashval, create);\n+  slot = htab_find_slot_with_hash (hash_table, x, hashval,\n+\t\t\t\t   create ? INSERT : NO_INSERT);\n   if (slot == 0)\n     return 0;\n "}, {"sha": "06c2894bb0f56a8ba26cc292cc7563b09c7a6681", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -1,3 +1,8 @@\n+Tue Apr 18 16:22:30 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* hashtab.h (enum insert_option): New type.\n+\t(htab_find_slot, htab_find_slot_with_hash): Use it.\n+\n 2000-04-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* symcat.h: Honor autoconf macro HAVE_STRINGIZE.  Add"}, {"sha": "a516c45f52d474a25e7d478d67fe3124911d6516", "filename": "include/hashtab.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -102,6 +102,9 @@ struct htab\n \n typedef struct htab *htab_t;\n \n+/* An enum saying whether we insert into the hash table or not.  */\n+enum insert_option {NO_INSERT, INSERT};\n+\n /* The prototypes of the package functions. */\n \n extern htab_t\thtab_create\tPARAMS ((size_t, htab_hash,\n@@ -110,11 +113,13 @@ extern void\thtab_delete\tPARAMS ((htab_t));\n extern void\thtab_empty\tPARAMS ((htab_t));\n \n extern void    *htab_find\tPARAMS ((htab_t, const void *));\n-extern void   **htab_find_slot\tPARAMS ((htab_t, const void *, int));\n-extern void    *htab_find_with_hash\t\tPARAMS ((htab_t, const void *,\n-\t\t\t\t\t\t\t hashval_t));\n-extern void   **htab_find_slot_with_hash\tPARAMS ((htab_t, const void *,\n-\t\t\t\t\t\t\t hashval_t, int));\n+extern void   **htab_find_slot\tPARAMS ((htab_t, const void *,\n+\t\t\t\t\t enum insert_option));\n+extern void    *htab_find_with_hash\t  PARAMS ((htab_t, const void *,\n+\t\t\t\t\t\t   hashval_t));\n+extern void   **htab_find_slot_with_hash  PARAMS ((htab_t, const void *,\n+\t\t\t\t\t\t   hashval_t,\n+\t\t\t\t\t\t   enum insert_option));\n extern void\thtab_clear_slot\tPARAMS ((htab_t, void **));\n extern void\thtab_remove_elt\tPARAMS ((htab_t, void *));\n "}, {"sha": "238e877b9bfbb4191adc0cae5ca756daa7f0e01f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -1,3 +1,9 @@\n+Tue Apr 18 16:23:31 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* hashtab.c: Various minor cleanups.\n+\t(htab_find_slot_with_hash): INSERT is now enum insert_option.\n+\t(htab_find_slot): Likewise.\n+\n 2000-04-16  Dave Pitts  <dpitts@cozx.com>\n \n \t* cplus-dem.c (cplus_demangle_opname): Changed to use islower."}, {"sha": "2d1c09d95228e7208e5b8b10f5c1fa6073980730", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 53, "deletions": 47, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38992e8d312b679eb3f4b9973567805a96511cb/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38992e8d312b679eb3f4b9973567805a96511cb/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=e38992e8d312b679eb3f4b9973567805a96511cb", "patch": "@@ -58,28 +58,32 @@ Boston, MA 02111-1307, USA.  */\n static unsigned long higher_prime_number PARAMS ((unsigned long));\n \n /* The following function returns the nearest prime number which is\n-   greater than a given source number. */\n+   greater than a given source number, N. */\n \n static unsigned long\n higher_prime_number (n)\n      unsigned long n;\n {\n   unsigned long i;\n \n-  n |= 0x01;  /* Force N to be odd.  */\n+  /* Ensure we have a larger number and then force to odd.  */\n+  n++;  \n+  n |= 0x01; \n+\n+  /* All odd numbers < 9 are prime.  */\n   if (n < 9)\n-    return n; /* All odd numbers < 9 are prime.  */\n+    return n;\n+\n+  /* Otherwise find the next prime using a sieve.  */\n \n  next:\n-  n += 2;\n-  i = 3;\n-  do\n-    {\n-      if (n % i == 0)\n-\tgoto next;\n-      i += 2;\n-    }\n-  while ((i * i) <= n);\n+\n+  for (i = 3; i * i <= n; i += 2)\n+    if (n % i == 0)\n+      {\n+\t n += 2;\n+\t goto next;\n+       }\n \n   return n;\n }\n@@ -116,13 +120,12 @@ htab_delete (htab)\n      htab_t htab;\n {\n   int i;\n+\n   if (htab->del_f)\n     for (i = htab->size - 1; i >= 0; i--)\n-      {\n-\tif (htab->entries[i] != EMPTY_ENTRY\n-\t    && htab->entries[i] != DELETED_ENTRY)\n-\t  (*htab->del_f) (htab->entries[i]);\n-      }\n+      if (htab->entries[i] != EMPTY_ENTRY\n+\t  && htab->entries[i] != DELETED_ENTRY)\n+\t(*htab->del_f) (htab->entries[i]);\n \n   free (htab->entries);\n   free (htab);\n@@ -135,13 +138,12 @@ htab_empty (htab)\n      htab_t htab;\n {\n   int i;\n+\n   if (htab->del_f)\n     for (i = htab->size - 1; i >= 0; i--)\n-      {\n-\tif (htab->entries[i] != EMPTY_ENTRY\n-\t    && htab->entries[i] != DELETED_ENTRY)\n-\t  (*htab->del_f) (htab->entries[i]);\n-      }\n+      if (htab->entries[i] != EMPTY_ENTRY\n+\t  && htab->entries[i] != DELETED_ENTRY)\n+\t(*htab->del_f) (htab->entries[i]);\n \n   memset (htab->entries, 0, htab->size * sizeof (void *));\n }\n@@ -152,6 +154,7 @@ htab_empty (htab)\n       hash table.\n    This function also assumes there are no deleted entries in the table.\n    HASH is the hash value for the element to be inserted.  */\n+\n static void **\n find_empty_slot_for_expand (htab, hash)\n      htab_t htab;\n@@ -164,10 +167,10 @@ find_empty_slot_for_expand (htab, hash)\n   for (;;)\n     {\n       void **slot = htab->entries + index;\n+\n       if (*slot == EMPTY_ENTRY)\n \treturn slot;\n-\n-      if (*slot == DELETED_ENTRY)\n+      else if (*slot == DELETED_ENTRY)\n \tabort ();\n \n       index += hash2;\n@@ -203,14 +206,18 @@ htab_expand (htab)\n   do\n     {\n       void *x = *p;\n+\n       if (x != EMPTY_ENTRY && x != DELETED_ENTRY)\n \t{\n \t  void **q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));\n+\n \t  *q = x;\n \t}\n+\n       p++;\n     }\n   while (p < olimit);\n+\n   free (oentries);\n }\n \n@@ -255,6 +262,7 @@ htab_find_with_hash (htab, element, hash)\n \n /* Like htab_find_slot_with_hash, but compute the hash value from the\n    element.  */\n+\n void *\n htab_find (htab, element)\n      htab_t htab;\n@@ -274,14 +282,14 @@ htab_find_slot_with_hash (htab, element, hash, insert)\n      htab_t htab;\n      const void *element;\n      hashval_t hash;\n-     int insert;\n+     enum insert_option insert;\n {\n   void **first_deleted_slot;\n   unsigned int index;\n   hashval_t hash2;\n   size_t size;\n \n-  if (insert && htab->size * 3 <= htab->n_elements * 4)\n+  if (insert == INSERT && htab->size * 3 <= htab->n_elements * 4)\n     htab_expand (htab);\n \n   size = htab->size;\n@@ -296,7 +304,7 @@ htab_find_slot_with_hash (htab, element, hash, insert)\n       void *entry = htab->entries[index];\n       if (entry == EMPTY_ENTRY)\n \t{\n-\t  if (!insert)\n+\t  if (insert == NO_INSERT)\n \t    return NULL;\n \n \t  htab->n_elements++;\n@@ -315,11 +323,8 @@ htab_find_slot_with_hash (htab, element, hash, insert)\n \t  if (!first_deleted_slot)\n \t    first_deleted_slot = &htab->entries[index];\n \t}\n-      else\n-\t{\n-\t  if ((*htab->eq_f) (entry, element))\n-\t    return &htab->entries[index];\n-\t}\n+      else  if ((*htab->eq_f) (entry, element))\n+\treturn &htab->entries[index];\n       \n       htab->collisions++;\n       index += hash2;\n@@ -330,11 +335,12 @@ htab_find_slot_with_hash (htab, element, hash, insert)\n \n /* Like htab_find_slot_with_hash, but compute the hash value from the\n    element.  */\n+\n void **\n htab_find_slot (htab, element, insert)\n      htab_t htab;\n      const void *element;\n-     int insert;\n+     enum insert_option insert;\n {\n   return htab_find_slot_with_hash (htab, element, (*htab->hash_f) (element),\n \t\t\t\t   insert);\n@@ -351,7 +357,7 @@ htab_remove_elt (htab, element)\n {\n   void **slot;\n \n-  slot = htab_find_slot (htab, element, 0);\n+  slot = htab_find_slot (htab, element, NO_INSERT);\n   if (*slot == EMPTY_ENTRY)\n     return;\n \n@@ -374,8 +380,10 @@ htab_clear_slot (htab, slot)\n   if (slot < htab->entries || slot >= htab->entries + htab->size\n       || *slot == EMPTY_ENTRY || *slot == DELETED_ENTRY)\n     abort ();\n+\n   if (htab->del_f)\n     (*htab->del_f) (*slot);\n+\n   *slot = DELETED_ENTRY;\n   htab->n_deleted++;\n }\n@@ -391,20 +399,21 @@ htab_traverse (htab, callback, info)\n      htab_trav callback;\n      void *info;\n {\n-  void **slot, **limit;\n-  slot = htab->entries;\n-  limit = slot + htab->size;\n+  void **slot = htab->entries;\n+  void **limit = slot + htab->size;\n+\n   do\n     {\n       void *x = *slot;\n+\n       if (x != EMPTY_ENTRY && x != DELETED_ENTRY)\n \tif (!(*callback) (slot, info))\n \t  break;\n     }\n   while (++slot < limit);\n }\n \n-/* The following function returns current size of given hash table. */\n+/* Return the current size of given hash table. */\n \n size_t\n htab_size (htab)\n@@ -413,8 +422,7 @@ htab_size (htab)\n   return htab->size;\n }\n \n-/* The following function returns current number of elements in given\n-   hash table. */\n+/* Return the current number of elements in given hash table. */\n \n size_t\n htab_elements (htab)\n@@ -423,17 +431,15 @@ htab_elements (htab)\n   return htab->n_elements - htab->n_deleted;\n }\n \n-/* The following function returns number of percents of fixed\n-   collisions during all work with given hash table. */\n+/* Return the fraction of fixed collisions during all work with given\n+   hash table. */\n \n double\n htab_collisions (htab)\n      htab_t htab;\n {\n-  int searches;\n-\n-  searches = htab->searches;\n-  if (searches == 0)\n+  if (htab->searches == 0)\n     return 0.0;\n-  return (double)htab->collisions / (double)searches;\n+\n+  return (double) htab->collisions / (double) htab->searches;\n }"}]}