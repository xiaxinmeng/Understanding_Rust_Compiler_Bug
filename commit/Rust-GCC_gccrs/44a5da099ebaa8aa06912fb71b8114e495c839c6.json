{"sha": "44a5da099ebaa8aa06912fb71b8114e495c839c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhNWRhMDk5ZWJhYThhYTA2OTEyZmI3MWI4MTE0ZTQ5NWM4MzljNg==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2001-11-22T14:22:09Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-11-22T14:22:09Z"}, "message": "* local-alloc.c (combine_regs): Handle SUBREG_REG being a MEM.\n\nFrom-SVN: r47268", "tree": {"sha": "8f02c75db182e66ff83fd6f610385066081d10c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f02c75db182e66ff83fd6f610385066081d10c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a5da099ebaa8aa06912fb71b8114e495c839c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a5da099ebaa8aa06912fb71b8114e495c839c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a5da099ebaa8aa06912fb71b8114e495c839c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a5da099ebaa8aa06912fb71b8114e495c839c6/comments", "author": null, "committer": null, "parents": [{"sha": "0bf93a511e83170a0d12dacba7af1ef4443d4539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf93a511e83170a0d12dacba7af1ef4443d4539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf93a511e83170a0d12dacba7af1ef4443d4539"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "80a3f1c9bd875b9a192837f5ad36556f5157bc2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a5da099ebaa8aa06912fb71b8114e495c839c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a5da099ebaa8aa06912fb71b8114e495c839c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44a5da099ebaa8aa06912fb71b8114e495c839c6", "patch": "@@ -1,3 +1,7 @@\n+2001-11-22  Graham Stott  <grahams@redhat.com>\n+\n+\t* local-alloc.c (combine_regs): Handle SUBREG_REG being a MEM.\n+\n Thu Nov 22 06:49:14 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/i386/i386.md (leave, leave_rex64): Have RTL reflect what"}, {"sha": "43f74bca1758f57f0690fe94fdec7f660dab286c", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a5da099ebaa8aa06912fb71b8114e495c839c6/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a5da099ebaa8aa06912fb71b8114e495c839c6/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=44a5da099ebaa8aa06912fb71b8114e495c839c6", "patch": "@@ -1801,20 +1801,29 @@ combine_regs (usedreg, setreg, may_save_copy, insn_number, insn, already_dead)\n \n   while (GET_CODE (usedreg) == SUBREG)\n     {\n-      if (GET_MODE_SIZE (GET_MODE (SUBREG_REG (usedreg))) > UNITS_PER_WORD)\n-\tmay_save_copy = 0;\n-      if (REGNO (SUBREG_REG (usedreg)) < FIRST_PSEUDO_REGISTER)\n-\toffset += subreg_regno_offset (REGNO (SUBREG_REG (usedreg)),\n-\t\t\t\t       GET_MODE (SUBREG_REG (usedreg)),\n-\t\t\t\t       SUBREG_BYTE (usedreg),\n-\t\t\t\t       GET_MODE (usedreg));\n-      else\n-\toffset += (SUBREG_BYTE (usedreg)\n-\t\t   / REGMODE_NATURAL_SIZE (GET_MODE (usedreg)));\n-      usedreg = SUBREG_REG (usedreg);\n+      rtx subreg = SUBREG_REG (usedreg);\n+\n+      if (GET_CODE (subreg) == REG)\n+\t{\n+\t  if (GET_MODE_SIZE (GET_MODE (subreg)) > UNITS_PER_WORD)\n+\t    may_save_copy = 0;\n+\n+\t  if (REGNO (subreg) < FIRST_PSEUDO_REGISTER)\n+\t    offset += subreg_regno_offset (REGNO (subreg),\n+\t\t\t\t\t   GET_MODE (subreg),\n+\t\t\t\t\t   SUBREG_BYTE (usedreg),\n+\t\t\t\t\t   GET_MODE (usedreg));\n+\t  else\n+\t    offset += (SUBREG_BYTE (usedreg)\n+\t\t      / REGMODE_NATURAL_SIZE (GET_MODE (usedreg)));\n+\t}\n+\n+      usedreg = subreg;\n     }\n+\n   if (GET_CODE (usedreg) != REG)\n     return 0;\n+\n   ureg = REGNO (usedreg);\n   if (ureg < FIRST_PSEUDO_REGISTER)\n     usize = HARD_REGNO_NREGS (ureg, GET_MODE (usedreg));\n@@ -1825,20 +1834,29 @@ combine_regs (usedreg, setreg, may_save_copy, insn_number, insn, already_dead)\n \n   while (GET_CODE (setreg) == SUBREG)\n     {\n-      if (GET_MODE_SIZE (GET_MODE (SUBREG_REG (setreg))) > UNITS_PER_WORD)\n-\tmay_save_copy = 0;\n-      if (REGNO (SUBREG_REG (setreg)) < FIRST_PSEUDO_REGISTER)\n-\toffset -= subreg_regno_offset (REGNO (SUBREG_REG (setreg)),\n-\t\t\t\t       GET_MODE (SUBREG_REG (setreg)),\n-\t\t\t\t       SUBREG_BYTE (setreg),\n-\t\t\t\t       GET_MODE (setreg));\n-      else\n-\toffset -= (SUBREG_BYTE (setreg)\n-\t\t   / REGMODE_NATURAL_SIZE (GET_MODE (setreg)));\n-      setreg = SUBREG_REG (setreg);\n+      rtx subreg = SUBREG_REG (setreg);\n+\n+      if (GET_CODE (subreg) == REG)\n+\t{\n+\t  if (GET_MODE_SIZE (GET_MODE (subreg)) > UNITS_PER_WORD)\n+\t    may_save_copy = 0;\n+\n+\t  if (REGNO (subreg) < FIRST_PSEUDO_REGISTER)\n+\t    offset -= subreg_regno_offset (REGNO (subreg),\n+\t\t\t\t\t   GET_MODE (subreg),\n+\t\t\t\t\t   SUBREG_BYTE (setreg),\n+\t\t\t\t\t   GET_MODE (setreg));\n+\t  else\n+\t    offset -= (SUBREG_BYTE (setreg)\n+\t\t      / REGMODE_NATURAL_SIZE (GET_MODE (setreg)));\n+\t}\n+\n+      setreg = subreg;\n     }\n+\n   if (GET_CODE (setreg) != REG)\n     return 0;\n+\n   sreg = REGNO (setreg);\n   if (sreg < FIRST_PSEUDO_REGISTER)\n     ssize = HARD_REGNO_NREGS (sreg, GET_MODE (setreg));"}]}