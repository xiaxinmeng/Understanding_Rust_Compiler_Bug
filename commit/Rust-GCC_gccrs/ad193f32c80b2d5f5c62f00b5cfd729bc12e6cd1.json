{"sha": "ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxOTNmMzJjODBiMmQ1ZjVjNjJmMDBiNWNmZDcyOWJjMTJlNmNkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-15T10:37:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-15T10:37:27Z"}, "message": "re PR tree-optimization/52267 (a&~N where N has all the bits set up till a specific point can be folded to ((unsigned)a) < N)\n\n\tPR tree-optimization/52267\n\t* tree-vrp.c (masked_increment): New function.\n\t(register_edge_assert_for_2): Derive ASSERT_EXPRs\n\tfrom (X & CST1) cmp CST2 tests.\n\n\t* gcc.dg/pr52267.c: New test.\n\t* gcc.dg/tree-ssa/vrp65.c: New test.\n\t* gcc.dg/tree-ssa/vrp66.c: New test.\n\nFrom-SVN: r185427", "tree": {"sha": "77aecfd6b916ce801be2e438b3519d7a71e36ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77aecfd6b916ce801be2e438b3519d7a71e36ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b00587cc213a16fa28499416d970e63f3a7fedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b00587cc213a16fa28499416d970e63f3a7fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b00587cc213a16fa28499416d970e63f3a7fedb"}], "stats": {"total": 1547, "additions": 1546, "deletions": 1}, "files": [{"sha": "208227d328b18bf2d307338127cfea1e868a5889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -1,3 +1,10 @@\n+2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52267\n+\t* tree-vrp.c (masked_increment): New function.\n+\t(register_edge_assert_for_2): Derive ASSERT_EXPRs\n+\tfrom (X & CST1) cmp CST2 tests.\n+\n 2012-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52580"}, {"sha": "9405556d9e05e66e90f16526fb1fe887293c6e56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -1,3 +1,10 @@\n+2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52267\n+\t* gcc.dg/pr52267.c: New test.\n+\t* gcc.dg/tree-ssa/vrp65.c: New test.\n+\t* gcc.dg/tree-ssa/vrp66.c: New test.\n+\n 2012-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52580"}, {"sha": "9ed88c0c43a3b93b9e05708a8928b5fa75bc77aa", "filename": "gcc/testsuite/gcc.dg/pr52267.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52267.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52267.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52267.c?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/52267 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  if (a > 3 || a < 0)\n+    return a;\n+  a &= 3;\n+  return a & 3;\n+}\n+\n+int\n+bar (int a)\n+{\n+  if (a & ~3)\n+    return a;\n+  return a & 3;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"& 3\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"& -4\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d1090685d2e58d10b69f1aad9b88853f480f0851", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp65.c", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp65.c?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -0,0 +1,376 @@\n+/* PR tree-optimization/52267 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error (void);\n+\n+#define BITSM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define BITSH ((sizeof (int) - sizeof (short)) * __CHAR_BIT__)\n+\n+void\n+f1 (unsigned int s)\n+{\n+  if ((s & (7U << (BITSM1 - 2))) != 0)\n+    {\n+      if (s <= (1U << (BITSM1 - 2)) - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (1U << (BITSM1 - 2)))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f2 (int s)\n+{\n+  if ((s & (7U << (BITSM1 - 2))) == 0)\n+    {\n+      if (s >= (1 << (BITSM1 - 2)) || s < 0)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= 0 && s <= (1 << (BITSM1 - 2)) - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f3 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) == 0)\n+    {\n+      if (s >= -15552U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s <= 0x3f)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f4 (int s)\n+{\n+  if ((s & 0x3cc0) == 0)\n+    {\n+      if (s >= -15552 && s < 0)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (/* s <= 0x3fU */ s == 0 || s == 0x20 || s == 0x3f)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f5 (int s)\n+{\n+  if ((s & 0x3cc0U) == 0)\n+    {\n+      if (s >= -15552 && s < 0)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (/* s <= 0x3fU */ s == 0 || s == 0x20 || s == 0x3f)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f6 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) == 0x3cc0)\n+    {\n+      if (s <= 0x3cbf)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -64U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f7 (int s)\n+{\n+  if ((s & 0x3cc0) == 0x3cc0)\n+    {\n+      if (s >= 0 && s <= 0x3cbf)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -64 && s < 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f8 (int s)\n+{\n+  if ((s & 0x3cc0U) == 0x3cc0)\n+    {\n+      if (s >= 0 && s <= 0x3cbf)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -64 && s < 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f9 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) >= 0x1cc0)\n+    {\n+      if (s <= 0x1cbf)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -8256U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f10 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) > 0x1cc0)\n+    {\n+      if (s <= 0x1fff)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -8192U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f11 (int s)\n+{\n+  if ((s & 0x3cc0) >= 0x1cc0)\n+    {\n+      if (s >= 0 && s <= 0x1cbf)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -8256 && s < 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f12 (int s)\n+{\n+  if ((s & 0x3cc0) > 0x1cc0)\n+    {\n+      if (s >= 0 && s <= 0x1fff)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= -8192 && s < 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f13 (unsigned int s)\n+{\n+  if ((s & (0xe071U << BITSH)) > (0xb030U << BITSH))\n+    {\n+      if (s <= ((0xc000U << BITSH) - 1))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (0xc000U << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f14 (unsigned int s)\n+{\n+  if ((s & (0xe071U << BITSH)) > (0xa030U << BITSH))\n+    {\n+      if (s <= ((0xa031U << BITSH) - 1))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (0xbfbfU << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f15 (int s)\n+{\n+  if ((s & ((-0x1f8f) << BITSH)) > ((-0x4fd0) << BITSH))\n+    {\n+      if (s <= ((-0x4000 << BITSH) - 1))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s > ((-0x4000 << BITSH) - 1))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f16 (int s)\n+{\n+  if ((s & ((-0x1f8f) << BITSH)) >= ((-0x4fd0) << BITSH))\n+    {\n+      if (s <= ((-0x4000 << BITSH) - 1))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s > ((-0x4000 << BITSH) - 1))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f17 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != -__INT_MAX__ - 1)\n+    {\n+      if (s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (-0x4000 << BITSH) - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f18 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != ((-0x4000 << BITSH) | 1))\n+    {\n+      if (s == -1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s < ((-0x4000 << BITSH) | 1) || s >= 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f19 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != ((0x4000 << BITSH) | 1))\n+    {\n+      if (s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s <= (0x4000 << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f20 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != -__INT_MAX__ - 1)\n+    {\n+      if (s < (-0x7000 << BITSH))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (-0x7000 << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f21 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != (-0x1000 << BITSH))\n+    {\n+      if (s >= (-0x1000 << BITSH) && s < 0)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s < (-0x1000 << BITSH) || s >= 0)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f22 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != (0x7000 << BITSH))\n+    {\n+      if (s >= (0x7000 << BITSH))\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s < (0x7000 << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f23 (unsigned int s)\n+{\n+  if ((s & (0xf000U << BITSH)) != (0x7000 << BITSH))\n+    {\n+      if (/* s >= (0x7000 << BITSH) && s < (0x8000U << BITSH) */\n+\t  s == (0x7000 << BITSH) || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s < (0x7000 << BITSH) || s >= (0x8000U << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f24 (unsigned int s)\n+{\n+  if ((s & (0xf000U << BITSH)) != (0x8000U << BITSH))\n+    {\n+      if (/* s >= (0x8000U << BITSH) && s < (0x9000U << BITSH) */\n+\t  s == (0x8000U << BITSH) || s == (0x9000U << BITSH) - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s >= (0x9000U << BITSH) || s < (0x8000U << BITSH))\n+\tlink_error ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "19e0450ac5b4e3b27be5767c2f2225f52d94825d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp66.c", "status": "added", "additions": 861, "deletions": 0, "changes": 861, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp66.c?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -0,0 +1,861 @@\n+/* PR tree-optimization/52267 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+#define BITSM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+#define BITSH ((sizeof (int) - sizeof (short)) * __CHAR_BIT__)\n+\n+void\n+f1 (unsigned int s)\n+{\n+  if ((s & (7U << (BITSM1 - 2))) != 0)\n+    {\n+      if (s == (0xc000U << BITSH) - 1 || s == (0xf000U << BITSH) - 1\n+\t  || s == (0x9000U << BITSH) - 1 || s == (0xa031U << BITSH) - 1\n+\t  || s == (0xbfbfU << BITSH) || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0x9000U << BITSH)\n+\t  || s == (0xc000U << BITSH) + 1 || s == -1U || s == -15U\n+\t  || s == -15550U || s == -15552U || s == (0x7000 << BITSH) - 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == 1U + __INT_MAX__ || s == -32U\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == -5U || s == -63U\n+\t  || s == -64U || s == -65U || s == 6U + __INT_MAX__ || s == -8189U\n+\t  || s == -8191U || s == -8192U || s == -8193U || s == -8250U\n+\t  || s == -8255U || s == -8256U || s == -8257U || s == __INT_MAX__\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f || s == 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == 2 || s == 24 || s == 5)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f2 (int s)\n+{\n+  if ((s & (7U << (BITSM1 - 2))) == 0)\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f || s == 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == 2 || s == 24 || s == 5)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == -1 || s == -15 || s == -15550\n+\t  || s == -15552 || s == (0x7000 << BITSH) - 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == -__INT_MAX__ - 1 || s == -32 || s == (3 << (BITSM1 - 2)) + 2\n+\t  || s == -5 || s == -63 || s == -64 || s == -65\n+\t  || s == -__INT_MAX__ + 4 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == __INT_MAX__ || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f3 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) == 0)\n+    {\n+      if (s == 0 || s == 0x20 || s == 0x3f || s == (0xbfbfU << BITSH)\n+\t  || s == (0xc000U << BITSH) || s == (0xf000U << BITSH)\n+\t  || s == (0x9000U << BITSH) || s == (0xc000U << BITSH) + 1 || s == 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == 1U + __INT_MAX__ || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == 6U + __INT_MAX__\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x3cbf || s == 0x3cc0 || s == (0xc000U << BITSH) - 1\n+\t  || s == (0xf000U << BITSH) - 1 || s == (0x9000U << BITSH) - 1\n+\t  || s == (0xa031U << BITSH) - 1 || s == -1U || s == -15U\n+\t  || s == -15550U || s == -15552U || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == -32U || s == -5U\n+\t  || s == -63U || s == -64U || s == -65U || s == -8189U || s == -8191U\n+\t  || s == -8192U || s == -8193U || s == -8250U || s == -8255U\n+\t  || s == -8256U || s == -8257U || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f4 (int s)\n+{\n+  if ((s & 0x3cc0) == 0)\n+    {\n+      if (s == 0 || s == 0x20 || s == 0x3f || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -__INT_MAX__ + 4\n+\t  || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x3cbf || s == 0x3cc0 || s == (-0x4000 << BITSH) - 1\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == -1 || s == -15 || s == -15550\n+\t  || s == -15552 || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == -32 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f5 (int s)\n+{\n+  if ((s & 0x3cc0U) == 0)\n+    {\n+      if (s == 0 || s == 0x20 || s == 0x3f || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -__INT_MAX__ + 4\n+\t  || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x3cbf || s == 0x3cc0 || s == (-0x4000 << BITSH) - 1\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == -1 || s == -15 || s == -15550\n+\t  || s == -15552 || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == -32 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f6 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) == 0x3cc0)\n+    {\n+      if (s == 0x3cc0 || s == (0xc000U << BITSH) - 1\n+\t  || s == (0xf000U << BITSH) - 1 || s == (0x9000U << BITSH) - 1\n+\t  || s == (0xa031U << BITSH) - 1 || s == -1U || s == -15U\n+\t  || s == (0x7000 << BITSH) - 1 || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -32U || s == -5U || s == -63U || s == -64U\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3f || s == (0xbfbfU << BITSH)\n+\t  || s == (0xc000U << BITSH) || s == (0xf000U << BITSH)\n+\t  || s == (0x9000U << BITSH) || s == (0xc000U << BITSH) + 1 || s == 1\n+\t  || s == -15550U || s == -15552U || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == 1U + __INT_MAX__ || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -65U\n+\t  || s == 6U + __INT_MAX__ || s == -8189U || s == -8191U\n+\t  || s == -8192U || s == -8193U || s == -8250U || s == -8255U\n+\t  || s == -8256U || s == -8257U || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f7 (int s)\n+{\n+  if ((s & 0x3cc0) == 0x3cc0)\n+    {\n+      if (s == 0x3cc0 || s == (-0x4000 << BITSH) - 1\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == -1 || s == -15\n+\t  || s == (0x7000 << BITSH) - 1 || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -32 || s == -5 || s == -63 || s == -64 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3f || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == -15550 || s == -15552 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == -__INT_MAX__ - 1 || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -65\n+\t  || s == -__INT_MAX__ + 4 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f8 (int s)\n+{\n+  if ((s & 0x3cc0U) == 0x3cc0)\n+    {\n+      if (s == 0x3cc0 || s == (-0x4000 << BITSH) - 1\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == -1 || s == -15\n+\t  || s == (0x7000 << BITSH) - 1 || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -32 || s == -5 || s == -63 || s == -64 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3f || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == -15550 || s == -15552 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == -__INT_MAX__ - 1 || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -65\n+\t  || s == -__INT_MAX__ + 4 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f9 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) >= 0x1cc0)\n+    {\n+      if (s == 0x1cc0 || s == 0x1fff || s == 0x2000 || s == 0x3cbf\n+\t  || s == 0x3cc0 || s == (0xc000U << BITSH) - 1\n+\t  || s == (0xf000U << BITSH) - 1 || s == (0x9000U << BITSH) - 1\n+\t  || s == (0xa031U << BITSH) - 1 || s == -1U || s == -15U\n+\t  || s == (0x7000 << BITSH) - 1 || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -32U || s == -5U || s == -63U || s == -64U || s == -65U\n+\t  || s == -8189U || s == -8191U || s == -8192U || s == -8193U\n+\t  || s == -8250U || s == -8255U || s == -8256U || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x20 || s == 0x3f\n+\t  || s == (0xbfbfU << BITSH) || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0x9000U << BITSH)\n+\t  || s == (0xc000U << BITSH) + 1 || s == 1 || s == -15550U\n+\t  || s == -15552U || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == 1U + __INT_MAX__ || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5\n+\t  || s == 6U + __INT_MAX__ || s == -8257U || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f10 (unsigned int s)\n+{\n+  if ((s & 0x3cc0) > 0x1cc0)\n+    {\n+      if (s == 0x2000 || s == 0x3cbf || s == 0x3cc0\n+\t  || s == (0xc000U << BITSH) - 1 || s == (0xf000U << BITSH) - 1\n+\t  || s == (0x9000U << BITSH) - 1 || s == (0xa031U << BITSH) - 1\n+\t  || s == -1U || s == -15U || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == -32U || s == -5U\n+\t  || s == -63U || s == -64U || s == -65U || s == -8189U || s == -8191U\n+\t  || s == -8192U || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x20\n+\t  || s == 0x3f || s == (0xbfbfU << BITSH) || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0x9000U << BITSH)\n+\t  || s == (0xc000U << BITSH) + 1 || s == 1 || s == -15550U\n+\t  || s == -15552U || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == 1U + __INT_MAX__ || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5\n+\t  || s == 6U + __INT_MAX__ || s == -8193U || s == -8250U\n+\t  || s == -8255U || s == -8256U || s == -8257U\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f11 (int s)\n+{\n+  if ((s & 0x3cc0) >= 0x1cc0)\n+    {\n+      if (s == 0x1cc0 || s == 0x1fff || s == 0x2000 || s == 0x3cbf\n+\t  || s == 0x3cc0 || s == (-0x4000 << BITSH) - 1\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == -1 || s == -15\n+\t  || s == (0x7000 << BITSH) - 1 || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -32 || s == -5 || s == -63 || s == -64 || s == -65\n+\t  || s == -8189 || s == -8191 || s == -8192 || s == -8193\n+\t  || s == -8250 || s == -8255 || s == -8256 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x20 || s == 0x3f\n+\t  || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == 1 || s == -15550\n+\t  || s == -15552 || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -__INT_MAX__ + 4\n+\t  || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f12 (int s)\n+{\n+  if ((s & 0x3cc0) > 0x1cc0)\n+    {\n+      if (s == 0x2000 || s == 0x3cbf || s == 0x3cc0\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == -1 || s == -15 || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == -32 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -8189 || s == -8191 || s == -8192\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x20\n+\t  || s == 0x3f || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == 1 || s == -15550\n+\t  || s == -15552 || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -__INT_MAX__ + 4\n+\t  || s == -8193 || s == -8250 || s == -8255 || s == -8256\n+\t  || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f13 (unsigned int s)\n+{\n+  if ((s & (0xe071U << BITSH)) > (0xb030U << BITSH))\n+    {\n+      if (s == (0xf000U << BITSH) - 1 || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0xc000U << BITSH) + 1\n+\t  || s == -1U || s == -15U || s == -15550U || s == -15552U\n+\t  || s == -32U || s == -5U || s == -63U || s == -64U || s == -65U\n+\t  || s == -8189U || s == -8191U || s == -8192U || s == -8193U\n+\t  || s == -8250U || s == -8255U || s == -8256U || s == -8257U)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (0xc000U << BITSH) - 1 || s == (0x9000U << BITSH) - 1\n+\t  || s == (0xa031U << BITSH) - 1 || s == (0xbfbfU << BITSH)\n+\t  || s == (0x9000U << BITSH) || s == 1 || s == (0x7000 << BITSH) - 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == 1U + __INT_MAX__ || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5\n+\t  || s == 6U + __INT_MAX__ || s == __INT_MAX__\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f14 (unsigned int s)\n+{\n+  if ((s & (0xe071U << BITSH)) > (0xa030U << BITSH))\n+    {\n+      if (s == (0xc000U << BITSH) - 1 || s == (0xf000U << BITSH) - 1\n+\t  || s == (0xbfbfU << BITSH) || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0xc000U << BITSH) + 1\n+\t  || s == -1U || s == -15U || s == -15550U || s == -15552U\n+\t  || s == -32U || s == -5U || s == -63U || s == -64U || s == -65U\n+\t  || s == -8189U || s == -8191U || s == -8192U || s == -8193U\n+\t  || s == -8250U || s == -8255U || s == -8256U || s == -8257U)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (0x9000U << BITSH) - 1 || s == (0xa031U << BITSH) - 1\n+\t  || s == (0x9000U << BITSH) || s == 1 || s == (0x7000 << BITSH) - 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == 1U + __INT_MAX__ || s == 2\n+\t  || s == 24 || s == (3 << (BITSM1 - 2)) + 2 || s == 5\n+\t  || s == 6U + __INT_MAX__ || s == __INT_MAX__\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f15 (int s)\n+{\n+  if ((s & ((-0x1f8f) << BITSH)) > ((-0x4fd0) << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == -1 || s == -15 || s == -15550 || s == -15552\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == 2 || s == 24 || s == -32 || s == (3 << (BITSM1 - 2)) + 2\n+\t  || s == 5 || s == -5 || s == -63 || s == -64 || s == -65\n+\t  || s == -8189 || s == -8191 || s == -8192 || s == -8193\n+\t  || s == -8250 || s == -8255 || s == -8256 || s == -8257\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x4000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == (-0x4041 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == -__INT_MAX__ - 1\n+\t  || s == -__INT_MAX__ + 4 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f16 (int s)\n+{\n+  if ((s & ((-0x1f8f) << BITSH)) >= ((-0x4fd0) << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x1000 << BITSH) - 1 || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == -1 || s == -15 || s == -15550 || s == -15552\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == 2 || s == 24 || s == -32 || s == (3 << (BITSM1 - 2)) + 2\n+\t  || s == 5 || s == -5 || s == -63 || s == -64 || s == -65\n+\t  || s == -8189 || s == -8191 || s == -8192 || s == -8193\n+\t  || s == -8250 || s == -8255 || s == -8256 || s == -8257\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x4000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == (-0x4041 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == -__INT_MAX__ - 1\n+\t  || s == -__INT_MAX__ + 4 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f17 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != -__INT_MAX__ - 1)\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == 1 || s == -1 || s == -15\n+\t  || s == -15550 || s == -15552 || s == (0x7000 << BITSH) - 1\n+\t  || s == (0x7000 << BITSH) || s == (1 << (BITSM1 - 2))\n+\t  || s == (1 << (BITSM1 - 2)) - 1 || s == 2 || s == 24 || s == -32\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -__INT_MAX__ + 4 || s == -8189\n+\t  || s == -8191 || s == -8192 || s == -8193 || s == -8250\n+\t  || s == -8255 || s == -8256 || s == -8257 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x4041 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == -__INT_MAX__ - 1 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f18 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != ((-0x4000 << BITSH) | 1))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x7000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == 1 || s == -15550 || s == -15552\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24 || s == -32\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -64\n+\t  || s == -__INT_MAX__ + 4 || s == -8192 || s == -8250 || s == -8256\n+\t  || s == __INT_MAX__ || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x1000 << BITSH) - 1 || s == (-0x4000 << BITSH) + 1\n+\t  || s == -1 || s == -15 || s == -5 || s == -63 || s == -65\n+\t  || s == -8189 || s == -8191 || s == -8193 || s == -8255\n+\t  || s == -8257)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f19 (int s)\n+{\n+  if ((s & ((-0x4000 << BITSH) | 1)) != ((0x4000 << BITSH) | 1))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == 1 || s == -1 || s == -15\n+\t  || s == -15550 || s == -15552 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24 || s == -32\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -__INT_MAX__ + 4 || s == -8189\n+\t  || s == -8191 || s == -8192 || s == -8193 || s == -8250\n+\t  || s == -8255 || s == -8256 || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (0x7000 << BITSH) - 1 || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f20 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != -__INT_MAX__ - 1)\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x5fcf << BITSH) - 1 || s == (-0x4041 << BITSH)\n+\t  || s == (-0x4000 << BITSH) || s == (-0x1000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == -1 || s == -15 || s == -15550 || s == -15552\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == 2 || s == 24 || s == -32 || s == (3 << (BITSM1 - 2)) + 2\n+\t  || s == 5 || s == -5 || s == -63 || s == -64 || s == -65\n+\t  || s == -8189 || s == -8191 || s == -8192 || s == -8193\n+\t  || s == -8250 || s == -8255 || s == -8256 || s == -8257\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x7000 << BITSH) - 1 || s == -__INT_MAX__ - 1\n+\t  || s == -__INT_MAX__ + 4 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f21 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != (-0x1000 << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x7000 << BITSH) || s == (-0x4000 << BITSH) + 1 || s == 1\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -__INT_MAX__ + 4\n+\t  || s == __INT_MAX__ || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (-0x1000 << BITSH) || s == -1 || s == -15 || s == -15550\n+\t  || s == -15552 || s == -32 || s == -5 || s == -63 || s == -64\n+\t  || s == -65 || s == -8189 || s == -8191 || s == -8192 || s == -8193\n+\t  || s == -8250 || s == -8255 || s == -8256 || s == -8257)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f22 (int s)\n+{\n+  if ((s & (-0x1000 << BITSH)) != (0x7000 << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (-0x4000 << BITSH) - 1 || s == (-0x1000 << BITSH) - 1\n+\t  || s == (-0x7000 << BITSH) - 1 || s == (-0x5fcf << BITSH) - 1\n+\t  || s == (-0x4041 << BITSH) || s == (-0x4000 << BITSH)\n+\t  || s == (-0x1000 << BITSH) || s == (-0x7000 << BITSH)\n+\t  || s == (-0x4000 << BITSH) + 1 || s == 1 || s == -1 || s == -15\n+\t  || s == -15550 || s == -15552 || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == -__INT_MAX__ - 1 || s == 2 || s == 24 || s == -32\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -5 || s == -63\n+\t  || s == -64 || s == -65 || s == -__INT_MAX__ + 4 || s == -8189\n+\t  || s == -8191 || s == -8192 || s == -8193 || s == -8250\n+\t  || s == -8255 || s == -8256 || s == -8257 || s == -__INT_MAX__ + 7)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (0x7000 << BITSH) || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f23 (unsigned int s)\n+{\n+  if ((s & (0xf000U << BITSH)) != (0x7000 << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (0xc000U << BITSH) - 1 || s == (0xf000U << BITSH) - 1\n+\t  || s == (0x9000U << BITSH) - 1 || s == (0xa031U << BITSH) - 1\n+\t  || s == (0xbfbfU << BITSH) || s == (0xc000U << BITSH)\n+\t  || s == (0xf000U << BITSH) || s == (0x9000U << BITSH)\n+\t  || s == (0xc000U << BITSH) + 1 || s == 1 || s == -1U || s == -15U\n+\t  || s == -15550U || s == -15552U || s == (0x7000 << BITSH) - 1\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == 1U + __INT_MAX__ || s == 2 || s == 24 || s == -32U\n+\t  || s == (3 << (BITSM1 - 2)) + 2 || s == 5 || s == -5U || s == -63U\n+\t  || s == -64U || s == -65U || s == 6U + __INT_MAX__ || s == -8189U\n+\t  || s == -8191U || s == -8192U || s == -8193U || s == -8250U\n+\t  || s == -8255U || s == -8256U || s == -8257U\n+\t  || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (0x7000 << BITSH) || s == __INT_MAX__)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+void\n+f24 (unsigned int s)\n+{\n+  if ((s & (0xf000U << BITSH)) != (0x8000U << BITSH))\n+    {\n+      if (s == 0 || s == 0x1cbf || s == 0x1cc0 || s == 0x1fff || s == 0x2000\n+\t  || s == 0x20 || s == 0x3cbf || s == 0x3cc0 || s == 0x3f\n+\t  || s == (0xc000U << BITSH) - 1 || s == (0xf000U << BITSH) - 1\n+\t  || s == (0xa031U << BITSH) - 1 || s == (0xbfbfU << BITSH)\n+\t  || s == (0xc000U << BITSH) || s == (0xf000U << BITSH)\n+\t  || s == (0x9000U << BITSH) || s == (0xc000U << BITSH) + 1 || s == 1\n+\t  || s == -1U || s == -15U || s == -15550U || s == -15552U\n+\t  || s == (0x7000 << BITSH) - 1 || s == (0x7000 << BITSH)\n+\t  || s == (1 << (BITSM1 - 2)) || s == (1 << (BITSM1 - 2)) - 1\n+\t  || s == 2 || s == 24 || s == -32U || s == (3 << (BITSM1 - 2)) + 2\n+\t  || s == 5 || s == -5U || s == -63U || s == -64U || s == -65U\n+\t  || s == -8189U || s == -8191U || s == -8192U || s == -8193U\n+\t  || s == -8250U || s == -8255U || s == -8256U || s == -8257U\n+\t  || s == __INT_MAX__)\n+\treturn;\n+    }\n+  else\n+    {\n+      if (s == (0x9000U << BITSH) - 1 || s == 1U + __INT_MAX__\n+\t  || s == 6U + __INT_MAX__ || s == __INT_MAX__ + 9U)\n+\treturn;\n+    }\n+  abort ();\n+}\n+\n+int svals[] = {\n+  0,\n+  0x1cbf,\n+  0x1cc0,\n+  0x1fff,\n+  0x2000,\n+  0x20,\n+  0x3cbf,\n+  0x3cc0,\n+  0x3f,\n+  (-0x4000 << BITSH) - 1,\n+  (-0x1000 << BITSH) - 1,\n+  (-0x7000 << BITSH) - 1,\n+  (-0x5fcf << BITSH) - 1,\n+  (-0x4041 << BITSH),\n+  (-0x4000 << BITSH),\n+  (-0x1000 << BITSH),\n+  (-0x7000 << BITSH),\n+  (-0x4000 << BITSH) + 1,\n+  1,\n+  -1,\n+  -15,\n+  -15550,\n+  -15552,\n+  (0x7000 << BITSH) - 1,\n+  (0x7000 << BITSH),\n+  (1 << (BITSM1 - 2)),\n+  (1 << (BITSM1 - 2)) - 1,\n+  -__INT_MAX__ - 1,\n+  2,\n+  24,\n+  -32,\n+  (3 << (BITSM1 - 2)) + 2,\n+  5,\n+  -5,\n+  -63,\n+  -64,\n+  -65,\n+  -__INT_MAX__ + 4,\n+  -8189,\n+  -8191,\n+  -8192,\n+  -8193,\n+  -8250,\n+  -8255,\n+  -8256,\n+  -8257,\n+  __INT_MAX__,\n+  -__INT_MAX__ + 7,\n+};\n+\n+unsigned int uvals[] = {\n+  0,\n+  0x1cbf,\n+  0x1cc0,\n+  0x1fff,\n+  0x2000,\n+  0x20,\n+  0x3cbf,\n+  0x3cc0,\n+  0x3f,\n+  (0xc000U << BITSH) - 1,\n+  (0xf000U << BITSH) - 1,\n+  (0x9000U << BITSH) - 1,\n+  (0xa031U << BITSH) - 1,\n+  (0xbfbfU << BITSH),\n+  (0xc000U << BITSH),\n+  (0xf000U << BITSH),\n+  (0x9000U << BITSH),\n+  (0xc000U << BITSH) + 1,\n+  1,\n+  -1U,\n+  -15U,\n+  -15550U,\n+  -15552U,\n+  (0x7000 << BITSH) - 1,\n+  (0x7000 << BITSH),\n+  (1 << (BITSM1 - 2)),\n+  (1 << (BITSM1 - 2)) - 1,\n+  1U + __INT_MAX__,\n+  2,\n+  24,\n+  -32U,\n+  (3 << (BITSM1 - 2)) + 2,\n+  5,\n+  -5U,\n+  -63U,\n+  -64U,\n+  -65U,\n+  6U + __INT_MAX__,\n+  -8189U,\n+  -8191U,\n+  -8192U,\n+  -8193U,\n+  -8250U,\n+  -8255U,\n+  -8256U,\n+  -8257U,\n+  __INT_MAX__,\n+  __INT_MAX__ + 9U,\n+};\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < sizeof (svals) / sizeof (svals[0]); i++)\n+    {\n+      f2 (svals[i]);\n+      f4 (svals[i]);\n+      f5 (svals[i]);\n+      f7 (svals[i]);\n+      f8 (svals[i]);\n+      f11 (svals[i]);\n+      f12 (svals[i]);\n+      f15 (svals[i]);\n+      f16 (svals[i]);\n+      f17 (svals[i]);\n+      f18 (svals[i]);\n+      f19 (svals[i]);\n+      f20 (svals[i]);\n+      f21 (svals[i]);\n+      f22 (svals[i]);\n+    }\n+  for (i = 0; i < sizeof (uvals) / sizeof (uvals[0]); i++)\n+    {\n+      f1 (uvals[i]);\n+      f3 (uvals[i]);\n+      f6 (uvals[i]);\n+      f9 (uvals[i]);\n+      f10 (uvals[i]);\n+      f13 (uvals[i]);\n+      f14 (uvals[i]);\n+      f23 (uvals[i]);\n+      f24 (uvals[i]);\n+    }\n+  return 0;\n+}"}, {"sha": "ae0ef4dfb29d88f3474a4c912bb0b747c9fafab5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 271, "deletions": 1, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ad193f32c80b2d5f5c62f00b5cfd729bc12e6cd1", "patch": "@@ -4338,6 +4338,34 @@ extract_code_and_val_from_cond_with_ops (tree name, enum tree_code cond_code,\n   return true;\n }\n \n+/* Find out smallest RES where RES > VAL && (RES & MASK) == RES, if any\n+   (otherwise return VAL).  VAL and MASK must be zero-extended for\n+   precision PREC.  If SGNBIT is non-zero, first xor VAL with SGNBIT\n+   (to transform signed values into unsigned) and at the end xor\n+   SGNBIT back.  */\n+\n+static double_int\n+masked_increment (double_int val, double_int mask, double_int sgnbit,\n+\t\t  unsigned int prec)\n+{\n+  double_int bit = double_int_one, res;\n+  unsigned int i;\n+\n+  val = double_int_xor (val, sgnbit);\n+  for (i = 0; i < prec; i++, bit = double_int_add (bit, bit))\n+    {\n+      res = mask;\n+      if (double_int_zero_p (double_int_and (res, bit)))\n+\tcontinue;\n+      res = double_int_sub (bit, double_int_one);\n+      res = double_int_and_not (double_int_add (val, bit), res);\n+      res = double_int_and (res, mask);\n+      if (double_int_ucmp (res, val) > 0)\n+\treturn double_int_xor (res, sgnbit);\n+    }\n+  return double_int_xor (val, sgnbit);\n+}\n+\n /* Try to register an edge assertion for SSA name NAME on edge E for\n    the condition COND contributing to the conditional jump pointed to by BSI.\n    Invert the condition COND if INVERT is true.\n@@ -4466,7 +4494,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n       && TREE_CODE (val) == INTEGER_CST)\n     {\n       gimple def_stmt = SSA_NAME_DEF_STMT (name);\n-      tree name2 = NULL_TREE, cst2 = NULL_TREE;\n+      tree name2 = NULL_TREE, names[2], cst2 = NULL_TREE;\n       tree val2 = NULL_TREE;\n       double_int mask = double_int_zero;\n       unsigned int prec = TYPE_PRECISION (TREE_TYPE (val));\n@@ -4591,6 +4619,248 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      retval = true;\n \t    }\n \t}\n+\n+      /* Add asserts for NAME cmp CST and NAME being defined as\n+\t NAME = NAME2 & CST2.\n+\n+\t Extract CST2 from the and.  */\n+      names[0] = NULL_TREE;\n+      names[1] = NULL_TREE;\n+      cst2 = NULL_TREE;\n+      if (is_gimple_assign (def_stmt)\n+\t  && gimple_assign_rhs_code (def_stmt) == BIT_AND_EXPR)\n+\t{\n+\t  name2 = gimple_assign_rhs1 (def_stmt);\n+\t  cst2 = gimple_assign_rhs2 (def_stmt);\n+\t  if (TREE_CODE (name2) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n+\t      && TREE_CODE (cst2) == INTEGER_CST\n+\t      && !integer_zerop (cst2)\n+\t      && prec <= 2 * HOST_BITS_PER_WIDE_INT\n+\t      && (prec > 1\n+\t\t  || TYPE_UNSIGNED (TREE_TYPE (val))))\n+\t    {\n+\t      gimple def_stmt2 = SSA_NAME_DEF_STMT (name2);\n+\t      if (gimple_assign_cast_p (def_stmt2))\n+\t\t{\n+\t\t  names[1] = gimple_assign_rhs1 (def_stmt2);\n+\t\t  if (!CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2))\n+\t\t      || !INTEGRAL_TYPE_P (TREE_TYPE (names[1]))\n+\t\t      || (TYPE_PRECISION (TREE_TYPE (name2))\n+\t\t\t  != TYPE_PRECISION (TREE_TYPE (names[1])))\n+\t\t      || !live_on_edge (e, names[1])\n+\t\t      || has_single_use (names[1]))\n+\t\t    names[1] = NULL_TREE;\n+\t\t}\n+\t      if (live_on_edge (e, name2)\n+\t\t  && !has_single_use (name2))\n+\t\tnames[0] = name2;\n+\t    }\n+\t}\n+      if (names[0] || names[1])\n+\t{\n+\t  double_int minv, maxv = double_int_zero, valv, cst2v;\n+\t  double_int tem, sgnbit;\n+\t  bool valid_p = false, valn = false, cst2n = false;\n+\t  enum tree_code ccode = comp_code;\n+\n+\t  valv = double_int_zext (tree_to_double_int (val), prec);\n+\t  cst2v = double_int_zext (tree_to_double_int (cst2), prec);\n+\t  if (!TYPE_UNSIGNED (TREE_TYPE (val)))\n+\t    {\n+\t      valn = double_int_negative_p (double_int_sext (valv, prec));\n+\t      cst2n = double_int_negative_p (double_int_sext (cst2v, prec));\n+\t    }\n+\t  /* If CST2 doesn't have most significant bit set,\n+\t     but VAL is negative, we have comparison like\n+\t     if ((x & 0x123) > -4) (always true).  Just give up.  */\n+\t  if (!cst2n && valn)\n+\t    ccode = ERROR_MARK;\n+\t  if (cst2n)\n+\t    sgnbit = double_int_zext (double_int_lshift (double_int_one,\n+\t\t\t\t\t\t\t prec - 1, prec,\n+\t\t\t\t\t\t\t false), prec);\n+\t  else\n+\t    sgnbit = double_int_zero;\n+\t  minv = double_int_and (valv, cst2v);\n+\t  switch (ccode)\n+\t    {\n+\t    case EQ_EXPR:\n+\t      /* Minimum unsigned value for equality is VAL & CST2\n+\t\t (should be equal to VAL, otherwise we probably should\n+\t\t have folded the comparison into false) and\n+\t\t maximum unsigned value is VAL | ~CST2.  */\n+\t      maxv = double_int_ior (valv, double_int_not (cst2v));\n+\t      maxv = double_int_zext (maxv, prec);\n+\t      valid_p = true;\n+\t      break;\n+\t    case NE_EXPR:\n+\t      tem = double_int_ior (valv, double_int_not (cst2v));\n+\t      tem = double_int_zext (tem, prec);\n+\t      /* If VAL is 0, handle (X & CST2) != 0 as (X & CST2) > 0U.  */\n+\t      if (double_int_zero_p (valv))\n+\t\t{\n+\t\t  cst2n = false;\n+\t\t  sgnbit = double_int_zero;\n+\t\t  goto gt_expr;\n+\t\t}\n+\t      /* If (VAL | ~CST2) is all ones, handle it as\n+\t\t (X & CST2) < VAL.  */\n+\t      if (double_int_equal_p (tem, double_int_mask (prec)))\n+\t\t{\n+\t\t  cst2n = false;\n+\t\t  valn = false;\n+\t\t  sgnbit = double_int_zero;\n+\t\t  goto lt_expr;\n+\t\t}\n+\t      if (!cst2n\n+\t\t  && double_int_negative_p (double_int_sext (cst2v, prec)))\n+\t\tsgnbit = double_int_zext (double_int_lshift (double_int_one,\n+\t\t\t\t\t\t\t     prec - 1, prec,\n+\t\t\t\t\t\t\t     false), prec);\n+\t      if (!double_int_zero_p (sgnbit))\n+\t\t{\n+\t\t  if (double_int_equal_p (valv, sgnbit))\n+\t\t    {\n+\t\t      cst2n = true;\n+\t\t      valn = true;\n+\t\t      goto gt_expr;\n+\t\t    }\n+\t\t  if (double_int_equal_p (tem, double_int_mask (prec - 1)))\n+\t\t    {\n+\t\t      cst2n = true;\n+\t\t      goto lt_expr;\n+\t\t    }\n+\t\t  if (!cst2n)\n+\t\t    sgnbit = double_int_zero;\n+\t\t}\n+\t      break;\n+\t    case GE_EXPR:\n+\t      /* Minimum unsigned value for >= if (VAL & CST2) == VAL\n+\t\t is VAL and maximum unsigned value is ~0.  For signed\n+\t\t comparison, if CST2 doesn't have most significant bit\n+\t\t set, handle it similarly.  If CST2 has MSB set,\n+\t\t the minimum is the same, and maximum is ~0U/2.  */\n+\t      if (!double_int_equal_p (minv, valv))\n+\t\t{\n+\t\t  /* If (VAL & CST2) != VAL, X & CST2 can't be equal to\n+\t\t     VAL.  */\n+\t\t  minv = masked_increment (valv, cst2v, sgnbit, prec);\n+\t\t  if (double_int_equal_p (minv, valv))\n+\t\t    break;\n+\t\t}\n+\t      maxv = double_int_mask (prec - (cst2n ? 1 : 0));\n+\t      valid_p = true;\n+\t      break;\n+\t    case GT_EXPR:\n+\t    gt_expr:\n+\t      /* Find out smallest MINV where MINV > VAL\n+\t\t && (MINV & CST2) == MINV, if any.  If VAL is signed and\n+\t\t CST2 has MSB set, compute it biased by 1 << (prec - 1).  */\n+\t      minv = masked_increment (valv, cst2v, sgnbit, prec);\n+\t      if (double_int_equal_p (minv, valv))\n+\t\tbreak;\n+\t      maxv = double_int_mask (prec - (cst2n ? 1 : 0));\n+\t      valid_p = true;\n+\t      break;\n+\t    case LE_EXPR:\n+\t      /* Minimum unsigned value for <= is 0 and maximum\n+\t\t unsigned value is VAL | ~CST2 if (VAL & CST2) == VAL.\n+\t\t Otherwise, find smallest VAL2 where VAL2 > VAL\n+\t\t && (VAL2 & CST2) == VAL2 and use (VAL2 - 1) | ~CST2\n+\t\t as maximum.\n+\t\t For signed comparison, if CST2 doesn't have most\n+\t\t significant bit set, handle it similarly.  If CST2 has\n+\t\t MSB set, the maximum is the same and minimum is INT_MIN.  */\n+\t      if (double_int_equal_p (minv, valv))\n+\t\tmaxv = valv;\n+\t      else\n+\t\t{\n+\t\t  maxv = masked_increment (valv, cst2v, sgnbit, prec);\n+\t\t  if (double_int_equal_p (maxv, valv))\n+\t\t    break;\n+\t\t  maxv = double_int_sub (maxv, double_int_one);\n+\t\t}\n+\t      maxv = double_int_ior (maxv, double_int_not (cst2v));\n+\t      maxv = double_int_zext (maxv, prec);\n+\t      minv = sgnbit;\n+\t      valid_p = true;\n+\t      break;\n+\t    case LT_EXPR:\n+\t    lt_expr:\n+\t      /* Minimum unsigned value for < is 0 and maximum\n+\t\t unsigned value is (VAL-1) | ~CST2 if (VAL & CST2) == VAL.\n+\t\t Otherwise, find smallest VAL2 where VAL2 > VAL\n+\t\t && (VAL2 & CST2) == VAL2 and use (VAL2 - 1) | ~CST2\n+\t\t as maximum.\n+\t\t For signed comparison, if CST2 doesn't have most\n+\t\t significant bit set, handle it similarly.  If CST2 has\n+\t\t MSB set, the maximum is the same and minimum is INT_MIN.  */\n+\t      if (double_int_equal_p (minv, valv))\n+\t\t{\n+\t\t  if (double_int_equal_p (valv, sgnbit))\n+\t\t    break;\n+\t\t  maxv = valv;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  maxv = masked_increment (valv, cst2v, sgnbit, prec);\n+\t\t  if (double_int_equal_p (maxv, valv))\n+\t\t    break;\n+\t\t}\n+\t      maxv = double_int_sub (maxv, double_int_one);\n+\t      maxv = double_int_ior (maxv, double_int_not (cst2v));\n+\t      maxv = double_int_zext (maxv, prec);\n+\t      minv = sgnbit;\n+\t      valid_p = true;\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  if (valid_p\n+\t      && !double_int_equal_p (double_int_zext (double_int_sub (maxv,\n+\t\t\t\t\t\t\t\t       minv),\n+\t\t\t\t\t\t       prec),\n+\t\t\t\t      double_int_mask (prec)))\n+\t    {\n+\t      tree tmp, new_val, type;\n+\t      int i;\n+\n+\t      for (i = 0; i < 2; i++)\n+\t\tif (names[i])\n+\t\t  {\n+\t\t    double_int maxv2 = maxv;\n+\t\t    tmp = names[i];\n+\t\t    type = TREE_TYPE (names[i]);\n+\t\t    if (!TYPE_UNSIGNED (type))\n+\t\t      {\n+\t\t\ttype = build_nonstandard_integer_type (prec, 1);\n+\t\t\ttmp = build1 (NOP_EXPR, type, names[i]);\n+\t\t      }\n+\t\t    if (!double_int_zero_p (minv))\n+\t\t      {\n+\t\t\ttmp = build2 (PLUS_EXPR, type, tmp,\n+\t\t\t\t      double_int_to_tree (type,\n+\t\t\t\t\t\t\t  double_int_neg (minv)));\n+\t\t\tmaxv2 = double_int_sub (maxv, minv);\n+\t\t      }\n+\t\t    new_val = double_int_to_tree (type, maxv2);\n+\n+\t\t    if (dump_file)\n+\t\t      {\n+\t\t\tfprintf (dump_file, \"Adding assert for \");\n+\t\t\tprint_generic_expr (dump_file, names[i], 0);\n+\t\t\tfprintf (dump_file, \" from \");\n+\t\t\tprint_generic_expr (dump_file, tmp, 0);\n+\t\t\tfprintf (dump_file, \"\\n\");\n+\t\t      }\n+\n+\t\t    register_new_assert_for (names[i], tmp, LE_EXPR,\n+\t\t\t\t\t     new_val, NULL, e, bsi);\n+\t\t    retval = true;\n+\t\t  }\n+\t    }\n+\t}\n     }\n \n   return retval;"}]}