{"sha": "85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4MzZjMGI2MzM5YzZlNWU1NjM2MDE2ZTZiN2FkM2UzOWU4NDNlMQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-05-31T02:45:04Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-05-31T02:45:04Z"}, "message": "c++config (__USE_MALLOC): Do not define it.\n\n\t* include/bits/c++config (__USE_MALLOC): Do not define it.\n\tDocument why not and give pointers to more information.\n\n\t* docs/html/23_containers/howto.html: Update documentation\n\tto reflect recent understanding of problem.\n\t* docs/html/17_intro/howto.html: Likewise.\n\nFrom-SVN: r42732", "tree": {"sha": "126aefb8df025937b18f4a001d9394c23a071104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126aefb8df025937b18f4a001d9394c23a071104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/comments", "author": null, "committer": null, "parents": [{"sha": "fe7cd37f13155d6f96342972a110869f20c48bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7cd37f13155d6f96342972a110869f20c48bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7cd37f13155d6f96342972a110869f20c48bb1"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "efbefbd8bd6936b1d0ce5391a9e3a59388e43c8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "patch": "@@ -1,3 +1,12 @@\n+2001-05-30  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* include/bits/c++config (__USE_MALLOC): Do not define it.\n+\tDocument why not and give pointers to more information.\n+\n+\t* docs/html/23_containers/howto.html: Update documentation\n+\tto reflect recent understanding of problem.\n+\t* docs/html/17_intro/howto.html: Likewise.\n+\n 2001-05-30  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/doxygen/user.cfg.in:  Minor addition."}, {"sha": "3b1cf13d6c44118a92a77799d41775bbd4251903", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 17</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2001/05/30 08:30:02 ljrittle Exp $ -->\n+<!-- $Id: howto.html,v 1.4 2001/05/30 21:54:57 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -67,6 +67,48 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       means for a library (not a general program).  We currently use the\n       <A HREF=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n       definition that SGI</A> uses for their STL subset.\n+      <EM>Please see the many cautions given in HOWTOs on containers.</EM>\n+   </P>\n+   <P>\n+      Here is another attempt at explaining the dangers of using the\n+      STL with threading support without understanding some important\n+      details.  The STL implementation is currently configured to use\n+      the high-speed caching memory allocator.  If you absolutely\n+      think you must change this on a global basis for your platform\n+      to support multi-threading, then please consult all commentary\n+      in include/bits/c++config and the HOWTOs on containers.  Be\n+      fully aware that you may change the external or internal ABI of\n+      libstdc++-v3 when you provide -D__USE_MALLOC on the command line\n+      or make a change to that configuration file. [Placeholder in\n+      case other patches don't make it before the 3.0 release: That\n+      memory allocator can appear buggy in multithreaded C++ programs\n+      (and has been reported to leak memory), if STL is misconfigured\n+      for your platform.  You may need to provide -D_PTHREADS on the\n+      command line in this case to ensure the memory allocator for\n+      containers is really protected by a mutex.  Also, be aware that\n+      you just changed the ABI of libstdc++-v3 when you did that thus\n+      your entire application and all libraries must be compiled with\n+      compatible flags.  The STL implementation doesn't currently\n+      protect you from changing the mutex locking implementation to\n+      one that doesn't really play together with the implementation\n+      you may have compiled other application code with.]\n+   </P>\n+   <P>\n+      If you don't like caches of objects being retained inside the\n+      STL, then you might be tempted to define __USE_MALLOC either on\n+      the command line or by rebuilding c++config.h.  Please note,\n+      once you define __USE_MALLOC, only the malloc allocator is\n+      visible to application code (i.e. the typically higher-speed\n+      allocator is not even available in this configuration).  There\n+      is a better way: It is possible to force the malloc-based\n+      allocator on a per-case-basis for some application code even\n+      when the above macro symbol is not defined.  The author of this\n+      comment believes that is a better way to tune an application for\n+      high-speed using this implementation of the STL.  Here is one\n+      possible example displaying the forcing of the malloc-based\n+      allocator over the typically higher-speed default allocator:\n+\n+      std::list <void*, std::malloc_alloc> my_malloc_based_list;\n    </P>\n    <P>A recent journal article has described &quot;atomic integer\n       operations,&quot; which would allow us to, well, perform updates\n@@ -82,7 +124,13 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       &quot;Thread Next&quot; to move down the thread.  This farm is in\n       latest-to-oldest order.\n       <UL>\n-        <LI>\n+        <LI><A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n+\tinspired this most recent updating of issues with threading\n+\tand the SGI STL library.  It also contains some example\n+\tPOSIX-multithreaded STL code.</A>\n+\t<LI> <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00136.html\">\n+\tan early analysis of why __USE_MALLOC should be disable for\n+\tthe 3.0 release of libstdc++.</A>\n       </UL>\n       <BR>\n       Here are discussions that took place before the current snapshot;\n@@ -144,7 +192,7 @@ <H2><A NAME=\"4\"><TT>&lt;foo&gt;</TT> vs <TT>&lt;foo.h&gt;</TT></A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.3 2001/05/30 08:30:02 ljrittle Exp $\n+<BR> $Id: howto.html,v 1.4 2001/05/30 21:54:57 pme Exp $\n </EM></P>\n \n "}, {"sha": "bc05128bd99d5b32e2025961e029ad67a709bdff", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 23</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2001/05/30 08:30:01 ljrittle Exp $ -->\n+<!-- $Id: howto.html,v 1.4 2001/05/30 21:55:01 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -199,6 +199,27 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n       (&quot;For most clients,&quot;...), pointing\n       out that locking must nearly always be done outside the container,\n       by client code (that'd be you, not us *grin*).\n+      <EM>However, please take caution when considering the discussion\n+      about the user-level configuration of the mutex lock\n+      implementation inside the STL container-memory allocator on that\n+      page.  For the sake of this discussion, libstdc++-v3 configures\n+      the SGI STL implementation, not you.  We attempt to configure\n+      the mutex lock as is best for your platform.  In particular,\n+      past advice was for people using g++ to explicitly define\n+      _PTHREADS on the command line to get a thread-safe STL.  This\n+      may or may not be required for your port.  It may or may not be\n+      a good idea for your port.  Extremely big caution: if you\n+      compile some of your application code against the STL with one\n+      set of threading flags and macros and another portion of the\n+      code with different flags and macros that influence the\n+      selection of the mutex lock, you may well end up with multiple\n+      locking mechanisms in use which don't impact each other in the\n+      manner that they should.  Everything might link and all code\n+      might have been built with a perfectly reasonable thread model\n+      but you may have two internal ABIs in play within the\n+      application.  This might produce races, memory leaks and fatal\n+      crashes.  In any multithreaded application using STL, this\n+      is the first thing to study well before blaming the allocator.</EM>\n    </P>\n    <P>You didn't read it, did you?  *sigh*  I'm serious, go read the\n       SGI page.  It's really good and doesn't take long, and makes most\n@@ -237,7 +258,7 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.3 2001/05/30 08:30:01 ljrittle Exp $\n+<BR> $Id: howto.html,v 1.4 2001/05/30 21:55:01 pme Exp $\n </EM></P>\n \n "}, {"sha": "d3d99baa926a78e87b27ad6011e15636914969b2", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85836c0b6339c6e5e5636016e6b7ad3e39e843e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=85836c0b6339c6e5e5636016e6b7ad3e39e843e1", "patch": "@@ -101,9 +101,14 @@\n # define __STL_UNWIND(action) \n #endif\n \n-// This is the \"underlying allocator\" for STL.  The alternatives are\n-// homegrown schemes involving a kind of mutex and free list; see stl_alloc.h.\n-#define __USE_MALLOC\n+// Default to the typically high-speed, pool-based allocator (as\n+// libstdc++-v2) instead of the malloc-based allocator (libstdc++-v3\n+// snapshots).  See libstdc++-v3/docs/html/17_intro/howto.html for\n+// details on why you don't want to override this setting.  Ensure\n+// that threads are properly configured on your platform before\n+// assigning blame to the STL container-memory allocator.  After doing\n+// so, please report any possible issues to libstdc++@gcc.gnu.org .\n+// Do not blindly #define __USE_MALLOC here or on the command line.\n \n // The remainder of the prewritten config is mostly automatic; all the\n // user hooks are listed above."}]}