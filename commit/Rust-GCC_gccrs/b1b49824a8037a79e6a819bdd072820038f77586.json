{"sha": "b1b49824a8037a79e6a819bdd072820038f77586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiNDk4MjRhODAzN2E3OWU2YTgxOWJkZDA3MjgyMDAzOGY3NzU4Ng==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@linaro.org", "date": "2015-11-25T06:51:55Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2015-11-25T06:51:55Z"}, "message": "2015-11-24  Michael Collison  <michael.collison@linaro.org>\n\n\t* config/aarch64/aarch64-simd.md (widen_ssum, widen_usum)\n\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal): New patterns\n\t* config/aarch64/iterators.md (Vhalf, VDBLW): New mode attributes.\n\t* gcc.target/aarch64/saddw-1.c: New test.\n\t* gcc.target/aarch64/saddw-2.c: New test.\n\t* gcc.target/aarch64/uaddw-1.c: New test.\n\t* gcc.target/aarch64/uaddw-2.c: New test.\n\t* gcc.target/aarch64/uaddw-3.c: New test.\n\t* lib/target-support.exp\n\t(check_effective_target_vect_widen_sum_hi_to_si_pattern):\n\tAdd aarch64 to list of support targets.\n\nFrom-SVN: r230853", "tree": {"sha": "88d0eae87204e062b364d5247d32b001eec132a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d0eae87204e062b364d5247d32b001eec132a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1b49824a8037a79e6a819bdd072820038f77586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b49824a8037a79e6a819bdd072820038f77586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b49824a8037a79e6a819bdd072820038f77586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b49824a8037a79e6a819bdd072820038f77586/comments", "author": null, "committer": null, "parents": [{"sha": "17a0986a9bae3f3f51c61ef73f4c28031f4a6c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a0986a9bae3f3f51c61ef73f4c28031f4a6c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a0986a9bae3f3f51c61ef73f4c28031f4a6c58"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "fd78249b010274159ed02693166c04b728b5c134", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Michael Collison  <michael.collison@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd.md (widen_ssum, widen_usum)\n+\t(aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal): New patterns\n+\t* config/aarch64/iterators.md (Vhalf, VDBLW): New mode attributes.\n+\n 2015-11-24  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* frame-header-opt.c (gate): Check for optimize > 0."}, {"sha": "79be6beec49066496ff93ae489c05e266b4850e2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -2777,6 +2777,62 @@\n \n ;; <su><addsub>w<q>.\n \n+(define_expand \"widen_ssum<mode>3\"\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"\")\n+\t(plus:<VDBLW> (sign_extend:<VDBLW> \n+\t\t        (match_operand:VQW 1 \"register_operand\" \"\"))\n+\t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n+\n+    emit_insn (gen_aarch64_saddw<mode>_internal (temp, operands[2],\n+\t\t\t\t\t\toperands[1], p));\n+    emit_insn (gen_aarch64_saddw2<mode> (operands[0], temp, operands[1]));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"widen_ssum<mode>3\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+\t(plus:<VWIDE> (sign_extend:<VWIDE>\n+\t\t        (match_operand:VD_BHSI 1 \"register_operand\" \"\"))\n+\t\t      (match_operand:<VWIDE> 2 \"register_operand\" \"\")))]\n+  \"TARGET_SIMD\"\n+{\n+  emit_insn (gen_aarch64_saddw<mode> (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"widen_usum<mode>3\"\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"\")\n+\t(plus:<VDBLW> (zero_extend:<VDBLW> \n+\t\t        (match_operand:VQW 1 \"register_operand\" \"\"))\n+\t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+    rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n+\n+    emit_insn (gen_aarch64_uaddw<mode>_internal (temp, operands[2],\n+\t\t\t\t\t\t operands[1], p));\n+    emit_insn (gen_aarch64_uaddw2<mode> (operands[0], temp, operands[1]));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"widen_usum<mode>3\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+\t(plus:<VWIDE> (zero_extend:<VWIDE>\n+\t\t        (match_operand:VD_BHSI 1 \"register_operand\" \"\"))\n+\t\t      (match_operand:<VWIDE> 2 \"register_operand\" \"\")))]\n+  \"TARGET_SIMD\"\n+{\n+  emit_insn (gen_aarch64_uaddw<mode> (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n@@ -2787,6 +2843,18 @@\n   [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n )\n \n+(define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n+\t\t\t(ANY_EXTEND:<VWIDE>\n+\t\t\t  (vec_select:<VHALF>\n+\t\t\t   (match_operand:VQW 2 \"register_operand\" \"w\")\n+\t\t\t   (match_operand:VQW 3 \"vect_par_cnst_lo_half\" \"\")))))]\n+  \"TARGET_SIMD\"\n+  \"<ANY_EXTEND:su><ADDSUB:optab>w\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vhalftype>\"\n+  [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n+)\n+\n (define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>w2<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")"}, {"sha": "d6a57f68b805f1f710c25615bfb42c8965dd6e4c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -479,6 +479,13 @@\n \t\t\t (V4SF \"V2SF\")  (V4HF \"V2HF\")\n \t\t\t (V8HF \"V4HF\")  (V2DF  \"DF\")])\n \n+;; Half modes of all vector modes, in lower-case.\n+(define_mode_attr Vhalf [(V8QI \"v4qi\")  (V16QI \"v8qi\")\n+\t\t\t (V4HI \"v2hi\")  (V8HI  \"v4hi\")\n+\t\t\t (V2SI \"si\")    (V4SI  \"v2si\")\n+\t\t\t (V2DI \"di\")    (V2SF  \"sf\")\n+\t\t\t (V4SF \"v2sf\")  (V2DF  \"df\")])\n+\n ;; Double modes of vector modes.\n (define_mode_attr VDBL [(V8QI \"V16QI\") (V4HI \"V8HI\")\n \t\t\t(V4HF \"V8HF\")\n@@ -496,6 +503,11 @@\n \t\t\t(SI   \"v2si\")  (DI   \"v2di\")\n \t\t\t(DF   \"v2df\")])\n \n+;; Modes with double-width elements.\n+(define_mode_attr VDBLW [(V8QI \"V4HI\") (V16QI \"V8HI\")\n+                  (V4HI \"V2SI\") (V8HI \"V4SI\")\n+                  (V2SI \"DI\")   (V4SI \"V2DI\")])\n+\n ;; Narrowed modes for VDN.\n (define_mode_attr VNARROWD [(V4HI \"V8QI\") (V2SI \"V4HI\")\n \t\t\t    (DI   \"V2SI\")])"}, {"sha": "cff124d30a05bee6c2a680e90b5acbfa0d3756dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -1,3 +1,14 @@\n+2015-11-24  Michael Collison  <michael.collison@linaro.org>\n+\n+\t* gcc.target/aarch64/saddw-1.c: New test.\n+\t* gcc.target/aarch64/saddw-2.c: New test.\n+\t* gcc.target/aarch64/uaddw-1.c: New test.\n+\t* gcc.target/aarch64/uaddw-2.c: New test.\n+\t* gcc.target/aarch64/uaddw-3.c: New test.\n+\t* lib/target-support.exp\n+\t(check_effective_target_vect_widen_sum_hi_to_si_pattern):\n+\tAdd aarch64 to list of support targets.\n+\n 2015-11-24  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* gcc.target/mips/frame-header-4.c: New test."}, {"sha": "7500fb82444e60bf9c1246bf4e3d28466339d7a4", "filename": "gcc/testsuite/gcc.target/aarch64/saddw-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int \n+t6(int len, void * dummy, short * __restrict x)\n+{\n+  len = len & ~31;\n+  int result = 0;\n+  __asm volatile (\"\");\n+  for (int i = 0; i < len; i++)\n+    result += x[i];\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"saddw\" } } */\n+/* { dg-final { scan-assembler \"saddw2\" } } */"}, {"sha": "5d9c8d9edc2103263b55ebe450fdeb92688aa693", "filename": "gcc/testsuite/gcc.target/aarch64/saddw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int \n+t6(int len, void * dummy, int * __restrict x)\n+{\n+  len = len & ~31;\n+  long long result = 0;\n+  __asm volatile (\"\");\n+  for (int i = 0; i < len; i++)\n+    result += x[i];\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"saddw\" } } */\n+/* { dg-final { scan-assembler \"saddw2\" } } */"}, {"sha": "3d55ecfdb323d72472c26296b9b51f20f7ff1f62", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int \n+t6(int len, void * dummy, unsigned short * __restrict x)\n+{\n+  len = len & ~31;\n+  unsigned int result = 0;\n+  __asm volatile (\"\");\n+  for (int i = 0; i < len; i++)\n+    result += x[i];\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"uaddw\" } } */\n+/* { dg-final { scan-assembler \"uaddw2\" } } */"}, {"sha": "fd3b578c0bb23c4aaf5098fa01f487b7cebc0b67", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int \n+t6(int len, void * dummy, unsigned short * __restrict x)\n+{\n+  len = len & ~31;\n+  unsigned int result = 0;\n+  __asm volatile (\"\");\n+  for (int i = 0; i < len; i++)\n+    result += x[i];\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"uaddw\" } } */\n+/* { dg-final { scan-assembler \"uaddw2\" } } */\n+"}, {"sha": "499af5115212c0b4a12a2137016e03bbc323938a", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int \n+t6(int len, void * dummy, char * __restrict x)\n+{\n+  len = len & ~31;\n+  unsigned short result = 0;\n+  __asm volatile (\"\");\n+  for (int i = 0; i < len; i++)\n+    result += x[i];\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"uaddw\" } } */\n+/* { dg-final { scan-assembler \"uaddw2\" } } */"}, {"sha": "254c4e3cac3bf051542370748e16e4941d938943", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b49824a8037a79e6a819bdd072820038f77586/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b1b49824a8037a79e6a819bdd072820038f77586", "patch": "@@ -4163,6 +4163,7 @@ proc check_effective_target_vect_widen_sum_hi_to_si_pattern { } {\n     } else {\n         set et_vect_widen_sum_hi_to_si_pattern_saved 0\n         if { [istarget powerpc*-*-*]\n+             || [istarget aarch64*-*-*]\n              || [istarget ia64-*-*] } {\n             set et_vect_widen_sum_hi_to_si_pattern_saved 1\n         }"}]}