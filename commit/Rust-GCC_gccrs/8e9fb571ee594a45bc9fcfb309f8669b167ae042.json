{"sha": "8e9fb571ee594a45bc9fcfb309f8669b167ae042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5ZmI1NzFlZTU5NGE0NWJjOWZjZmIzMDlmODY2OWIxNjdhZTA0Mg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-11T13:28:55Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-11T13:28:55Z"}, "message": "loop.c (strength_reduce): Don't do biv increment -> DEST_REG giv conversion if we don't know the lifetime.\n\n\t* loop.c (strength_reduce): Don't do biv increment -> DEST_REG giv\n\tconversion if we don't know the lifetime.\n\nFrom-SVN: r25702", "tree": {"sha": "46f9d0495caaa9b9462960a85495a05e0c7fad55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46f9d0495caaa9b9462960a85495a05e0c7fad55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9fb571ee594a45bc9fcfb309f8669b167ae042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9fb571ee594a45bc9fcfb309f8669b167ae042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9fb571ee594a45bc9fcfb309f8669b167ae042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9fb571ee594a45bc9fcfb309f8669b167ae042/comments", "author": null, "committer": null, "parents": [{"sha": "3900dc09bc97e0b8a1dd4653d85072d825a1318f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3900dc09bc97e0b8a1dd4653d85072d825a1318f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3900dc09bc97e0b8a1dd4653d85072d825a1318f"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "ebb8f19ec54666827f3661adcc7e349965e7295d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9fb571ee594a45bc9fcfb309f8669b167ae042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9fb571ee594a45bc9fcfb309f8669b167ae042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e9fb571ee594a45bc9fcfb309f8669b167ae042", "patch": "@@ -1,3 +1,8 @@\n+Thu Mar 11 21:25:59 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (strength_reduce): Don't do biv increment -> DEST_REG giv\n+\tconversion if we don't know the lifetime.\n+\n Thu Mar 11 20:37:59 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload.1c (delete_address_reloads_1):  Check for reloads of"}, {"sha": "a2023b22d193c2de0a34244a74f539c595bd0ceb", "filename": "gcc/loop.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9fb571ee594a45bc9fcfb309f8669b167ae042/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9fb571ee594a45bc9fcfb309f8669b167ae042/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8e9fb571ee594a45bc9fcfb309f8669b167ae042", "patch": "@@ -4198,13 +4198,46 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t  VARRAY_GROW (may_not_optimize, nregs);\n \t\t}\n     \n-\t      validate_change (v->insn, &SET_DEST (set), dest_reg, 1);\n-\t      validate_change (next->insn, next->location, add_val, 1);\n-\t      if (! apply_change_group ())\n+\t      if (! validate_change (next->insn, next->location, add_val, 0))\n \t\t{\n \t\t  vp = &v->next_iv;\n \t\t  continue;\n \t\t}\n+\n+\t      /* Here we can try to eliminate the increment by combining\n+\t\t it into the uses.  */\n+\n+\t      /* Set last_use_insn so that we can check against it.  */\n+\n+\t      for (last_use_insn = v->insn, p = NEXT_INSN (v->insn);\n+\t\t   p != next->insn;\n+\t\t   p = next_insn_in_loop (p, scan_start, end, loop_top))\n+\t\t{\n+\t\t  rtx note;\n+    \n+\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t    continue;\n+\t\t  if (reg_mentioned_p (old_reg, PATTERN (p)))\n+\t\t    {\n+\t\t      last_use_insn = p;\n+\t\t    }\n+\t\t}\n+\n+\t      /* If we can't get the LUIDs for the insns, we can't\n+\t\t calculate the lifetime.  This is likely from unrolling\n+\t\t of an inner loop, so there is little point in making this\n+\t\t a DEST_REG giv anyways.  */\n+\t      if (INSN_UID (v->insn) >= max_uid_for_loop\n+\t\t  || INSN_UID (last_use_insn) >= max_uid_for_loop\n+\t\t  || ! validate_change (v->insn, &SET_DEST (set), dest_reg, 0))\n+\t\t{\n+\t\t  /* Change the increment at NEXT back to what it was.  */\n+\t\t  if (! validate_change (next->insn, next->location,\n+\t\t      next->add_val, 0))\n+\t\t    abort ();\n+\t\t  vp = &v->next_iv;\n+\t\t  continue;\n+\t\t}\n \t      next->add_val = add_val;\n \t      v->dest_reg = dest_reg;\n \t      v->giv_type = DEST_REG;"}]}