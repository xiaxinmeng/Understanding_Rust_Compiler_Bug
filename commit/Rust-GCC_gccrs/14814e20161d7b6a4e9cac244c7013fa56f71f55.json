{"sha": "14814e20161d7b6a4e9cac244c7013fa56f71f55", "node_id": "C_kwDOANBUbNoAKDE0ODE0ZTIwMTYxZDdiNmE0ZTljYWMyNDRjNzAxM2ZhNTZmNzFmNTU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-05T16:31:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-05T16:31:35Z"}, "message": "aarch64: Fix -fpack-struct + <arm_neon.h> [PR103147]\n\nThis PR is about -fpack-struct causing a crash when <arm_neon.h>\nis included.  The new register_tuple_type code was expecting a\nnormal unpacked structure layout instead of a packed one.\n\nFor SVE we got around this by temporarily suppressing -fpack-struct,\nso that the tuple types always have their normal ABI.  However:\n\n(a) The SVE ACLE tuple types are defined to be abstract.  The fact\n    that GCC uses structures is an internal implementation detail.\n\n(b) In contrast, the ACLE explicitly defines the Advanced SIMD\n    tuple types to be particular structures.\n\n(c) Clang and previous versions of GCC are consistent in applying\n    -fpack-struct to these tuple structures.\n\nThis patch therefore honours -fpack-struct and -fpack-struct=.  It also\nadds tests for some other combinations, such as -mgeneral-regs-only and\n-fpack-struct -mstrict-align.\n\ngcc/\n\tPR target/103147\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_switcher): New class.\n\t* config/aarch64/aarch64-sve-builtins.h (sve_switcher): Inherit\n\tfrom aarch64_simd_switcher.\n\t* config/aarch64/aarch64-builtins.cc (aarch64_simd_tuple_modes):\n\tNew variable.\n\t(aarch64_lookup_simd_builtin_type): Use it instead of TYPE_MODE.\n\t(register_tuple_type): Add more asserts.  Expect the alignment\n\tof the structure to be subject to flag_pack_struct and\n\tmaximum_field_alignment.  Set aarch64_simd_tuple_modes.\n\t(aarch64_simd_switcher::aarch64_simd_switcher): New function.\n\t(aarch64_simd_switcher::~aarch64_simd_switcher): Likewise.\n\t(handle_arm_neon_h): Hold an aarch64_simd_switcher throughout.\n\t(aarch64_general_init_builtins): Hold an aarch64_simd_switcher\n\twhile calling aarch64_init_simd_builtins.\n\t* config/aarch64/aarch64-sve-builtins.cc (sve_switcher::sve_switcher)\n\t(sve_switcher::~sve_switcher): Remove code now performed by\n\taarch64_simd_switcher.\n\ngcc/testsuite/\n\tPR target/103147\n\t* gcc.target/aarch64/pr103147-1.c: New test.\n\t* gcc.target/aarch64/pr103147-2.c: Likewise.\n\t* gcc.target/aarch64/pr103147-3.c: Likewise.\n\t* gcc.target/aarch64/pr103147-4.c: Likewise.\n\t* gcc.target/aarch64/pr103147-5.c: Likewise.\n\t* gcc.target/aarch64/pr103147-6.c: Likewise.\n\t* gcc.target/aarch64/pr103147-7.c: Likewise.\n\t* gcc.target/aarch64/pr103147-8.c: Likewise.\n\t* gcc.target/aarch64/pr103147-9.c: Likewise.\n\t* gcc.target/aarch64/pr103147-10.c: Likewise.\n\t* g++.target/aarch64/pr103147-1.C: Likewise.\n\t* g++.target/aarch64/pr103147-2.C: Likewise.\n\t* g++.target/aarch64/pr103147-3.C: Likewise.\n\t* g++.target/aarch64/pr103147-4.C: Likewise.\n\t* g++.target/aarch64/pr103147-5.C: Likewise.\n\t* g++.target/aarch64/pr103147-6.C: Likewise.\n\t* g++.target/aarch64/pr103147-7.C: Likewise.\n\t* g++.target/aarch64/pr103147-8.C: Likewise.\n\t* g++.target/aarch64/pr103147-9.C: Likewise.\n\t* g++.target/aarch64/pr103147-10.C: Likewise.", "tree": {"sha": "318912f70236fbabbff538bebc1aa62955087ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/318912f70236fbabbff538bebc1aa62955087ec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14814e20161d7b6a4e9cac244c7013fa56f71f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14814e20161d7b6a4e9cac244c7013fa56f71f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14814e20161d7b6a4e9cac244c7013fa56f71f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14814e20161d7b6a4e9cac244c7013fa56f71f55/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bc70cc17b0105e2c463a98c9ff76039d03ff60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bc70cc17b0105e2c463a98c9ff76039d03ff60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bc70cc17b0105e2c463a98c9ff76039d03ff60"}], "stats": {"total": 407, "additions": 382, "deletions": 25}, "files": [{"sha": "6ebeee75d0ab432585c925db7a552bc44d1291c7", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -716,6 +716,7 @@ static GTY(()) struct aarch64_simd_type_info aarch64_simd_types [] = {\n };\n #undef ENTRY\n \n+static machine_mode aarch64_simd_tuple_modes[ARM_NEON_H_TYPES_LAST][3];\n static GTY(()) tree aarch64_simd_tuple_types[ARM_NEON_H_TYPES_LAST][3];\n \n static GTY(()) tree aarch64_simd_intOI_type_node = NULL_TREE;\n@@ -844,7 +845,7 @@ aarch64_lookup_simd_builtin_type (machine_mode mode,\n \treturn aarch64_simd_types[i].itype;\n       if (aarch64_simd_tuple_types[i][0] != NULL_TREE)\n \tfor (int j = 0; j < 3; j++)\n-\t  if (TYPE_MODE (aarch64_simd_tuple_types[i][j]) == mode\n+\t  if (aarch64_simd_tuple_modes[i][j] == mode\n \t      && aarch64_simd_types[i].q == q)\n \t    return aarch64_simd_tuple_types[i][j];\n     }\n@@ -1297,8 +1298,10 @@ register_tuple_type (unsigned int num_vectors, unsigned int type_index)\n     }\n \n   unsigned int alignment\n-\t= (known_eq (GET_MODE_SIZE (type->mode), 16) ? 128 : 64);\n-  gcc_assert (TYPE_MODE_RAW (array_type) == TYPE_MODE (array_type)\n+    = known_eq (GET_MODE_SIZE (type->mode), 16) ? 128 : 64;\n+  machine_mode tuple_mode = TYPE_MODE_RAW (array_type);\n+  gcc_assert (VECTOR_MODE_P (tuple_mode)\n+\t      && TYPE_MODE (array_type) == tuple_mode\n \t      && TYPE_ALIGN (array_type) == alignment);\n \n   tree field = build_decl (input_location, FIELD_DECL,\n@@ -1309,14 +1312,13 @@ register_tuple_type (unsigned int num_vectors, unsigned int type_index)\n \t\t\t\t\t\t  make_array_slice (&field,\n \t\t\t\t\t\t\t\t    1));\n   gcc_assert (TYPE_MODE_RAW (t) == TYPE_MODE (t)\n-\t      && TYPE_ALIGN (t) == alignment);\n-\n-  if (num_vectors == 2)\n-    aarch64_simd_tuple_types[type_index][0] = t;\n-  else if (num_vectors == 3)\n-    aarch64_simd_tuple_types[type_index][1] = t;\n-  else if (num_vectors == 4)\n-    aarch64_simd_tuple_types[type_index][2] = t;\n+\t      && (flag_pack_struct\n+\t\t  || maximum_field_alignment\n+\t\t  || (TYPE_MODE_RAW (t) == tuple_mode\n+\t\t      && TYPE_ALIGN (t) == alignment)));\n+\n+  aarch64_simd_tuple_modes[type_index][num_vectors - 2] = tuple_mode;\n+  aarch64_simd_tuple_types[type_index][num_vectors - 2] = t;\n }\n \n static bool\n@@ -1325,10 +1327,31 @@ aarch64_scalar_builtin_type_p (aarch64_simd_type t)\n   return (t == Poly8_t || t == Poly16_t || t == Poly64_t || t == Poly128_t);\n }\n \n+/* Enable AARCH64_FL_* flags EXTRA_FLAGS on top of the base Advanced SIMD\n+   set.  */\n+aarch64_simd_switcher::aarch64_simd_switcher (unsigned int extra_flags)\n+  : m_old_isa_flags (aarch64_isa_flags),\n+    m_old_general_regs_only (TARGET_GENERAL_REGS_ONLY)\n+{\n+  /* Changing the ISA flags should be enough here.  We shouldn't need to\n+     pay the compile-time cost of a full target switch.  */\n+  aarch64_isa_flags = AARCH64_FL_FP | AARCH64_FL_SIMD | extra_flags;\n+  global_options.x_target_flags &= ~MASK_GENERAL_REGS_ONLY;\n+}\n+\n+aarch64_simd_switcher::~aarch64_simd_switcher ()\n+{\n+  if (m_old_general_regs_only)\n+    global_options.x_target_flags |= MASK_GENERAL_REGS_ONLY;\n+  aarch64_isa_flags = m_old_isa_flags;\n+}\n+\n /* Implement #pragma GCC aarch64 \"arm_neon.h\".  */\n void\n handle_arm_neon_h (void)\n {\n+  aarch64_simd_switcher simd;\n+\n   /* Register the AdvSIMD vector tuple types.  */\n   for (unsigned int i = 0; i < ARM_NEON_H_TYPES_LAST; i++)\n     for (unsigned int count = 2; count <= 4; ++count)\n@@ -1703,8 +1726,10 @@ aarch64_general_init_builtins (void)\n \n   aarch64_init_bf16_types ();\n \n-  if (TARGET_SIMD)\n+  {\n+    aarch64_simd_switcher simd;\n     aarch64_init_simd_builtins ();\n+  }\n \n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();"}, {"sha": "c6f13ee836ca41dc1583979608c5e14709f84f95", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -746,6 +746,19 @@ const unsigned int AARCH64_BUILTIN_SHIFT = 1;\n /* Mask that selects the aarch64_builtin_class part of a function code.  */\n const unsigned int AARCH64_BUILTIN_CLASS = (1 << AARCH64_BUILTIN_SHIFT) - 1;\n \n+/* RAII class for enabling enough features to define built-in types\n+   and implement the arm_neon.h pragma.  */\n+class aarch64_simd_switcher\n+{\n+public:\n+  aarch64_simd_switcher (unsigned int extra_flags = 0);\n+  ~aarch64_simd_switcher ();\n+\n+private:\n+  unsigned long m_old_isa_flags;\n+  bool m_old_general_regs_only;\n+};\n+\n void aarch64_post_cfi_startproc (void);\n poly_int64 aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);"}, {"sha": "9d78b270e478b8da30416a67f4e1855b69d71cf4", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -871,20 +871,14 @@ registered_function_hasher::equal (value_type value, const compare_type &key)\n }\n \n sve_switcher::sve_switcher ()\n-  : m_old_isa_flags (aarch64_isa_flags)\n+  : aarch64_simd_switcher (AARCH64_FL_F16 | AARCH64_FL_SVE)\n {\n   /* Changing the ISA flags and have_regs_of_mode should be enough here.\n      We shouldn't need to pay the compile-time cost of a full target\n      switch.  */\n-  aarch64_isa_flags = (AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16\n-\t\t       | AARCH64_FL_SVE);\n-\n   m_old_maximum_field_alignment = maximum_field_alignment;\n   maximum_field_alignment = 0;\n \n-  m_old_general_regs_only = TARGET_GENERAL_REGS_ONLY;\n-  global_options.x_target_flags &= ~MASK_GENERAL_REGS_ONLY;\n-\n   memcpy (m_old_have_regs_of_mode, have_regs_of_mode,\n \t  sizeof (have_regs_of_mode));\n   for (int i = 0; i < NUM_MACHINE_MODES; ++i)\n@@ -896,9 +890,6 @@ sve_switcher::~sve_switcher ()\n {\n   memcpy (have_regs_of_mode, m_old_have_regs_of_mode,\n \t  sizeof (have_regs_of_mode));\n-  if (m_old_general_regs_only)\n-    global_options.x_target_flags |= MASK_GENERAL_REGS_ONLY;\n-  aarch64_isa_flags = m_old_isa_flags;\n   maximum_field_alignment = m_old_maximum_field_alignment;\n }\n "}, {"sha": "24594d584974e9ebf6a38ea880c06607e7948e15", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -651,16 +651,14 @@ class function_shape\n \n /* RAII class for enabling enough SVE features to define the built-in\n    types and implement the arm_sve.h pragma.  */\n-class sve_switcher\n+class sve_switcher : public aarch64_simd_switcher\n {\n public:\n   sve_switcher ();\n   ~sve_switcher ();\n \n private:\n-  unsigned long m_old_isa_flags;\n   unsigned int m_old_maximum_field_alignment;\n-  bool m_old_general_regs_only;\n   bool m_old_have_regs_of_mode[MAX_MACHINE_MODE];\n };\n "}, {"sha": "4264c17f89aa135a24cfaa1feaf0fcc095fd19a2", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-1.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct\" } */\n+\n+#include <arm_neon.h>\n+\n+static_assert(alignof(int32x2_t) == 8, \"int32x2_t alignment\");\n+static_assert(alignof(int32x4_t) == 16, \"int32x4_t alignment\");\n+static_assert(alignof(int32x2x2_t) == 1, \"int32x2x2_t alignment\");\n+static_assert(alignof(int32x4x2_t) == 1, \"int32x4x2_t alignment\");\n+static_assert(alignof(int32x2x3_t) == 1, \"int32x2x3_t alignment\");\n+static_assert(alignof(int32x4x3_t) == 1, \"int32x4x3_t alignment\");\n+static_assert(alignof(int32x2x4_t) == 1, \"int32x2x4_t alignment\");\n+static_assert(alignof(int32x4x4_t) == 1, \"int32x4x4_t alignment\");"}, {"sha": "914fdf9c6924350107bb425a0c126fa1a91d269b", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-10.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-10.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-options \"-O2 -fpack-struct -mstrict-align\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+extern \"C\" {\n+\n+/*\n+** ld2:\n+**\t...\n+**\tld2\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld2 (int32x4x2_t *a, int32_t *b)\n+{\n+  *a = vld2q_s32 (b);\n+}\n+\n+/*\n+** ld3:\n+**\t...\n+**\tld3\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld3 (int32x4x3_t *a, int32_t *b)\n+{\n+  *a = vld3q_s32 (b);\n+}\n+\n+/*\n+** ld4:\n+**\t...\n+**\tld4\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld4 (int32x4x4_t *a, int32_t *b)\n+{\n+  *a = vld4q_s32 (b);\n+}\n+\n+/*\n+** ret:\n+**\t...\n+**\tldp\tq0, q1, \\[x0\\]\n+**\tldr\tq2, \\[x0, #?32\\]\n+**\t...\n+*/\n+int32x4x3_t\n+ret (int32x4_t *ptr)\n+{\n+  return (int32x4x3_t) { ptr[0], ptr[1], ptr[2] };\n+}\n+\n+/*\n+** arg:\n+**\t...\n+**\tstp\td0, d1, \\[x0\\]\n+**\t...\n+*/\n+void\n+arg (int32x2x2_t arg, int32x2_t *ptr)\n+{\n+  ptr[0] = arg.val[0];\n+  ptr[1] = arg.val[1];\n+}\n+\n+}"}, {"sha": "565f2d237b341cd0403e690c4b4cec2df56dc260", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-2.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=1\" } */\n+\n+#include <arm_neon.h>\n+\n+static_assert(alignof(int32x2_t) == 8, \"int32x2_t alignment\");\n+static_assert(alignof(int32x4_t) == 16, \"int32x4_t alignment\");\n+static_assert(alignof(int32x2x2_t) == 1, \"int32x2x2_t alignment\");\n+static_assert(alignof(int32x4x2_t) == 1, \"int32x4x2_t alignment\");\n+static_assert(alignof(int32x2x3_t) == 1, \"int32x2x3_t alignment\");\n+static_assert(alignof(int32x4x3_t) == 1, \"int32x4x3_t alignment\");\n+static_assert(alignof(int32x2x4_t) == 1, \"int32x2x4_t alignment\");\n+static_assert(alignof(int32x4x4_t) == 1, \"int32x4x4_t alignment\");"}, {"sha": "579ca3770d8a636ba721577c19081af1728edd08", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-3.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=2\" } */\n+\n+#include <arm_neon.h>\n+\n+static_assert(alignof(int32x2_t) == 8, \"int32x2_t alignment\");\n+static_assert(alignof(int32x4_t) == 16, \"int32x4_t alignment\");\n+static_assert(alignof(int32x2x2_t) == 2, \"int32x2x2_t alignment\");\n+static_assert(alignof(int32x4x2_t) == 2, \"int32x4x2_t alignment\");\n+static_assert(alignof(int32x2x3_t) == 2, \"int32x2x3_t alignment\");\n+static_assert(alignof(int32x4x3_t) == 2, \"int32x4x3_t alignment\");\n+static_assert(alignof(int32x2x4_t) == 2, \"int32x2x4_t alignment\");\n+static_assert(alignof(int32x4x4_t) == 2, \"int32x4x4_t alignment\");"}, {"sha": "752a47cd061dffd8e89019bb4fbff00f8d434675", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-4.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=8\" } */\n+\n+#include <arm_neon.h>\n+\n+static_assert(alignof(int32x2_t) == 8, \"int32x2_t alignment\");\n+static_assert(alignof(int32x4_t) == 16, \"int32x4_t alignment\");\n+static_assert(alignof(int32x2x2_t) == 8, \"int32x2x2_t alignment\");\n+static_assert(alignof(int32x4x2_t) == 8, \"int32x4x2_t alignment\");\n+static_assert(alignof(int32x2x3_t) == 8, \"int32x2x3_t alignment\");\n+static_assert(alignof(int32x4x3_t) == 8, \"int32x4x3_t alignment\");\n+static_assert(alignof(int32x2x4_t) == 8, \"int32x2x4_t alignment\");\n+static_assert(alignof(int32x4x4_t) == 8, \"int32x4x4_t alignment\");"}, {"sha": "fbcdfd45e9ec15b1b6f8607f7db34c02a51444c4", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-5.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=16\" } */\n+\n+#include <arm_neon.h>\n+\n+static_assert(alignof(int32x2_t) == 8, \"int32x2_t alignment\");\n+static_assert(alignof(int32x4_t) == 16, \"int32x4_t alignment\");\n+static_assert(alignof(int32x2x2_t) == 8, \"int32x2x2_t alignment\");\n+static_assert(alignof(int32x4x2_t) == 16, \"int32x4x2_t alignment\");\n+static_assert(alignof(int32x2x3_t) == 8, \"int32x2x3_t alignment\");\n+static_assert(alignof(int32x4x3_t) == 16, \"int32x4x3_t alignment\");\n+static_assert(alignof(int32x2x4_t) == 8, \"int32x2x4_t alignment\");\n+static_assert(alignof(int32x4x4_t) == 16, \"int32x4x4_t alignment\");"}, {"sha": "15a606f976c85b97cb3aa7fedf5eaca8a7f6c3d9", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-6.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-6.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+#include <arm_neon.h>"}, {"sha": "40a7e4d6ffc4ba4f770da2b195c8aeb6094a6b79", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-7.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-7.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-fpack-struct\" } */\n+\n+#pragma GCC aarch64 \"arm_neon.h\""}, {"sha": "65459945c706cc9d4011ac87aa1031b811bf6214", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-8.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-8.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+#pragma GCC aarch64 \"arm_neon.h\""}, {"sha": "2d60c7dda602c18b138fec9c964340dd5c75fb98", "filename": "gcc/testsuite/g++.target/aarch64/pr103147-9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr103147-9.C?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+/* { dg-excess-errors \"arm_neon.h\" } */\n+\n+#include <arm_neon.h>\n+\n+int32x4x4_t\n+test (int32_t *ptr) /* { dg-error \"-mgeneral-regs-only\" } */\n+{\n+  return vld4q_s32 (ptr);\n+}"}, {"sha": "7b1f6414099def283b5edb8604cdd520230b7838", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-1.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct\" } */\n+\n+#include <arm_neon.h>\n+\n+int assert1[__alignof__(int32x2_t) == 8 ? 1 : -1];\n+int assert2[__alignof__(int32x4_t) == 16 ? 1 : -1];\n+int assert3[__alignof__(int32x2x2_t) == 1 ? 1 : -1];\n+int assert4[__alignof__(int32x4x2_t) == 1 ? 1 : -1];\n+int assert5[__alignof__(int32x2x3_t) == 1 ? 1 : -1];\n+int assert6[__alignof__(int32x4x3_t) == 1 ? 1 : -1];\n+int assert7[__alignof__(int32x2x4_t) == 1 ? 1 : -1];\n+int assert8[__alignof__(int32x4x4_t) == 1 ? 1 : -1];"}, {"sha": "b2c34e4155dbe0c824c87cf56d11e1e353c564a1", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-10.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-10.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-options \"-O2 -fpack-struct -mstrict-align\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+** ld2:\n+**\t...\n+**\tld2\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld2 (int32x4x2_t *a, int32_t *b)\n+{\n+  *a = vld2q_s32 (b);\n+}\n+\n+/*\n+** ld3:\n+**\t...\n+**\tld3\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld3 (int32x4x3_t *a, int32_t *b)\n+{\n+  *a = vld3q_s32 (b);\n+}\n+\n+/*\n+** ld4:\n+**\t...\n+**\tld4\t.*\n+**\t...\n+** (\n+**\tstrb\t.*\n+** |\n+**\tbl\tmemcpy\n+** )\n+**\t...\n+*/\n+void\n+ld4 (int32x4x4_t *a, int32_t *b)\n+{\n+  *a = vld4q_s32 (b);\n+}\n+\n+/*\n+** ret:\n+**\t...\n+**\tldp\tq0, q1, \\[x0\\]\n+**\tldr\tq2, \\[x0, #?32\\]\n+**\t...\n+*/\n+int32x4x3_t\n+ret (int32x4_t *ptr)\n+{\n+  return (int32x4x3_t) { ptr[0], ptr[1], ptr[2] };\n+}\n+\n+/*\n+** arg:\n+**\t...\n+**\tstp\td0, d1, \\[x0\\]\n+**\t...\n+*/\n+void\n+arg (int32x2x2_t arg, int32x2_t *ptr)\n+{\n+  ptr[0] = arg.val[0];\n+  ptr[1] = arg.val[1];\n+}"}, {"sha": "a6775f3e3992d3c080b865b1dabd15c9453f1458", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-2.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=1\" } */\n+\n+#include <arm_neon.h>\n+\n+int assert1[__alignof__(int32x2_t) == 8 ? 1 : -1];\n+int assert2[__alignof__(int32x4_t) == 16 ? 1 : -1];\n+int assert3[__alignof__(int32x2x2_t) == 1 ? 1 : -1];\n+int assert4[__alignof__(int32x4x2_t) == 1 ? 1 : -1];\n+int assert5[__alignof__(int32x2x3_t) == 1 ? 1 : -1];\n+int assert6[__alignof__(int32x4x3_t) == 1 ? 1 : -1];\n+int assert7[__alignof__(int32x2x4_t) == 1 ? 1 : -1];\n+int assert8[__alignof__(int32x4x4_t) == 1 ? 1 : -1];"}, {"sha": "ff76e25dc55b77196ac85f6c9298a1f514f9a828", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-3.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=2\" } */\n+\n+#include <arm_neon.h>\n+\n+int assert1[__alignof__(int32x2_t) == 8 ? 1 : -1];\n+int assert2[__alignof__(int32x4_t) == 16 ? 1 : -1];\n+int assert3[__alignof__(int32x2x2_t) == 2 ? 1 : -1];\n+int assert4[__alignof__(int32x4x2_t) == 2 ? 1 : -1];\n+int assert5[__alignof__(int32x2x3_t) == 2 ? 1 : -1];\n+int assert6[__alignof__(int32x4x3_t) == 2 ? 1 : -1];\n+int assert7[__alignof__(int32x2x4_t) == 2 ? 1 : -1];\n+int assert8[__alignof__(int32x4x4_t) == 2 ? 1 : -1];"}, {"sha": "93331cf8c0acaf39f397254a6726d4da44e95875", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-4.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=8\" } */\n+\n+#include <arm_neon.h>\n+\n+int assert1[__alignof__(int32x2_t) == 8 ? 1 : -1];\n+int assert2[__alignof__(int32x4_t) == 16 ? 1 : -1];\n+int assert3[__alignof__(int32x2x2_t) == 8 ? 1 : -1];\n+int assert4[__alignof__(int32x4x2_t) == 8 ? 1 : -1];\n+int assert5[__alignof__(int32x2x3_t) == 8 ? 1 : -1];\n+int assert6[__alignof__(int32x4x3_t) == 8 ? 1 : -1];\n+int assert7[__alignof__(int32x2x4_t) == 8 ? 1 : -1];\n+int assert8[__alignof__(int32x4x4_t) == 8 ? 1 : -1];"}, {"sha": "a534bcb7c3f3b0e735c4ac64d331337e964d1111", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-5.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-fpack-struct=16\" } */\n+\n+#include <arm_neon.h>\n+\n+int assert1[__alignof__(int32x2_t) == 8 ? 1 : -1];\n+int assert2[__alignof__(int32x4_t) == 16 ? 1 : -1];\n+int assert3[__alignof__(int32x2x2_t) == 8 ? 1 : -1];\n+int assert4[__alignof__(int32x4x2_t) == 16 ? 1 : -1];\n+int assert5[__alignof__(int32x2x3_t) == 8 ? 1 : -1];\n+int assert6[__alignof__(int32x4x3_t) == 16 ? 1 : -1];\n+int assert7[__alignof__(int32x2x4_t) == 8 ? 1 : -1];\n+int assert8[__alignof__(int32x4x4_t) == 16 ? 1 : -1];"}, {"sha": "15a606f976c85b97cb3aa7fedf5eaca8a7f6c3d9", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-6.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-6.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+#include <arm_neon.h>"}, {"sha": "40a7e4d6ffc4ba4f770da2b195c8aeb6094a6b79", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-7.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-7.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-fpack-struct\" } */\n+\n+#pragma GCC aarch64 \"arm_neon.h\""}, {"sha": "65459945c706cc9d4011ac87aa1031b811bf6214", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-8.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-8.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+#pragma GCC aarch64 \"arm_neon.h\""}, {"sha": "2d60c7dda602c18b138fec9c964340dd5c75fb98", "filename": "gcc/testsuite/gcc.target/aarch64/pr103147-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14814e20161d7b6a4e9cac244c7013fa56f71f55/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103147-9.c?ref=14814e20161d7b6a4e9cac244c7013fa56f71f55", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+/* { dg-excess-errors \"arm_neon.h\" } */\n+\n+#include <arm_neon.h>\n+\n+int32x4x4_t\n+test (int32_t *ptr) /* { dg-error \"-mgeneral-regs-only\" } */\n+{\n+  return vld4q_s32 (ptr);\n+}"}]}