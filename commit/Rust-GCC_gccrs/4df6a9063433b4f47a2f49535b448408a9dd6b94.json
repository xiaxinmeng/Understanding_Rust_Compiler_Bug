{"sha": "4df6a9063433b4f47a2f49535b448408a9dd6b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRmNmE5MDYzNDMzYjRmNDdhMmY0OTUzNWI0NDg0MDhhOWRkNmI5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-30T23:27:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-30T23:27:23Z"}, "message": "re PR tree-optimization/88274 (ICE in check, at tree-vrp.c:188)\n\n\tPR tree-optimization/88274\n\t* tree-ssa-reassoc.c (optimize_range_tests_xor,\n\toptimize_range_tests_diff): If type has smaller precision than\n\tcorresponding mode or if it has non-standard min/max, compute\n\teverything in a standard type for the precision.\n\nFrom-SVN: r266701", "tree": {"sha": "192c96fb9b81b88f5c5727e9b4e6f1b331f4986c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192c96fb9b81b88f5c5727e9b4e6f1b331f4986c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4df6a9063433b4f47a2f49535b448408a9dd6b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df6a9063433b4f47a2f49535b448408a9dd6b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df6a9063433b4f47a2f49535b448408a9dd6b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df6a9063433b4f47a2f49535b448408a9dd6b94/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e26584b265dc2af4e95d23c4bdd89462ea508b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26584b265dc2af4e95d23c4bdd89462ea508b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26584b265dc2af4e95d23c4bdd89462ea508b69"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "a759eeb4695bf1ed719fcc7239109d7dce58de96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df6a9063433b4f47a2f49535b448408a9dd6b94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df6a9063433b4f47a2f49535b448408a9dd6b94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4df6a9063433b4f47a2f49535b448408a9dd6b94", "patch": "@@ -1,5 +1,11 @@\n 2018-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/88274\n+\t* tree-ssa-reassoc.c (optimize_range_tests_xor,\n+\toptimize_range_tests_diff): If type has smaller precision than\n+\tcorresponding mode or if it has non-standard min/max, compute\n+\teverything in a standard type for the precision.\n+\n \tPR testsuite/85368\n \t* params.def (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT): New param.\n \t* tree-ssa-ifcombine.c (ifcombine_ifandif): If"}, {"sha": "a9f45bfd891c65b32e2dd36506211c9c8a06ead2", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df6a9063433b4f47a2f49535b448408a9dd6b94/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df6a9063433b4f47a2f49535b448408a9dd6b94/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=4df6a9063433b4f47a2f49535b448408a9dd6b94", "patch": "@@ -2537,8 +2537,23 @@ optimize_range_tests_xor (enum tree_code opcode, tree type,\n   if (!tree_int_cst_equal (lowxor, highxor))\n     return false;\n \n+  exp = rangei->exp;\n+  scalar_int_mode mode = as_a <scalar_int_mode> (TYPE_MODE (type));\n+  int prec = GET_MODE_PRECISION (mode);\n+  if (TYPE_PRECISION (type) < prec\n+      || (wi::to_wide (TYPE_MIN_VALUE (type))\n+\t  != wi::min_value (prec, TYPE_SIGN (type)))\n+      || (wi::to_wide (TYPE_MAX_VALUE (type))\n+\t  != wi::max_value (prec, TYPE_SIGN (type))))\n+    {\n+      type = build_nonstandard_integer_type (prec, TYPE_UNSIGNED (type));\n+      exp = fold_convert (type, exp);\n+      lowxor = fold_convert (type, lowxor);\n+      lowi = fold_convert (type, lowi);\n+      highi = fold_convert (type, highi);\n+    }\n   tem = fold_build1 (BIT_NOT_EXPR, type, lowxor);\n-  exp = fold_build2 (BIT_AND_EXPR, type, rangei->exp, tem);\n+  exp = fold_build2 (BIT_AND_EXPR, type, exp, tem);\n   lowj = fold_build2 (BIT_AND_EXPR, type, lowi, tem);\n   highj = fold_build2 (BIT_AND_EXPR, type, highi, tem);\n   if (update_range_test (rangei, rangej, NULL, 1, opcode, ops, exp,\n@@ -2581,7 +2596,16 @@ optimize_range_tests_diff (enum tree_code opcode, tree type,\n   if (!integer_pow2p (tem1))\n     return false;\n \n-  type = unsigned_type_for (type);\n+  scalar_int_mode mode = as_a <scalar_int_mode> (TYPE_MODE (type));\n+  int prec = GET_MODE_PRECISION (mode);\n+  if (TYPE_PRECISION (type) < prec\n+      || (wi::to_wide (TYPE_MIN_VALUE (type))\n+\t  != wi::min_value (prec, TYPE_SIGN (type)))\n+      || (wi::to_wide (TYPE_MAX_VALUE (type))\n+\t  != wi::max_value (prec, TYPE_SIGN (type))))\n+    type = build_nonstandard_integer_type (prec, 1);\n+  else\n+    type = unsigned_type_for (type);\n   tem1 = fold_convert (type, tem1);\n   tem2 = fold_convert (type, tem2);\n   lowi = fold_convert (type, lowi);"}]}