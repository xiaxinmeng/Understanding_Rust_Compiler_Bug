{"sha": "cd5660ab1229ff6b47987f81769d908970ea0950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1NjYwYWIxMjI5ZmY2YjQ3OTg3ZjgxNzY5ZDkwODk3MGVhMDk1MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-09-02T15:53:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-09-02T15:53:08Z"}, "message": "[AArch64] Use CC_Z and CC_NZ with csinc and similar instructions.\n\n\t* config/aarch64/predicates.md (aarch64_comparison_operation):\n\tNew special predicate.\n\t* config/aarch64/aarch64.md (*csinc2<mode>_insn): Use\n\taarch64_comparison_operation instead of matching an operator.\n\tUpdate operand numbers.\n\t(csinc3<mode>_insn): Likewise.\n\t(*csinv3<mode>_insn): Likewise.\n\t(*csneg3<mode>_insn): Likewise.\n\t(ffs<mode>2): Update gen_csinc3<mode>_insn callsite.\n\t* config/aarch64/aarch64.c (aarch64_get_condition_code):\n\tReturn -1 instead of aborting on invalid condition codes.\n\t(aarch64_print_operand): Update aarch64_get_condition_code callsites\n\tto assert that the returned condition code is valid.\n\t* config/aarch64/aarch64-protos.h (aarch64_get_condition_code): Export.\n\nFrom-SVN: r214824", "tree": {"sha": "4a49b13722470fe0ae6029e3f651362067132e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a49b13722470fe0ae6029e3f651362067132e2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5660ab1229ff6b47987f81769d908970ea0950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5660ab1229ff6b47987f81769d908970ea0950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5660ab1229ff6b47987f81769d908970ea0950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5660ab1229ff6b47987f81769d908970ea0950/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cec362c90b53bec41a0571220216401978b3a6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec362c90b53bec41a0571220216401978b3a6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec362c90b53bec41a0571220216401978b3a6ad"}], "stats": {"total": 137, "additions": 86, "deletions": 51}, "files": [{"sha": "35148ffd927754c7867cffb0b47afb555f3638ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd5660ab1229ff6b47987f81769d908970ea0950", "patch": "@@ -1,3 +1,20 @@\n+2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/predicates.md (aarch64_comparison_operation):\n+\tNew special predicate.\n+\t* config/aarch64/aarch64.md (*csinc2<mode>_insn): Use\n+\taarch64_comparison_operation instead of matching an operator.\n+\tUpdate operand numbers.\n+\t(csinc3<mode>_insn): Likewise.\n+\t(*csinv3<mode>_insn): Likewise.\n+\t(*csneg3<mode>_insn): Likewise.\n+\t(ffs<mode>2): Update gen_csinc3<mode>_insn callsite.\n+\t* config/aarch64/aarch64.c (aarch64_get_condition_code):\n+\tReturn -1 instead of aborting on invalid condition codes.\n+\t(aarch64_print_operand): Update aarch64_get_condition_code callsites\n+\tto assert that the returned condition code is valid.\n+\t* config/aarch64/aarch64-protos.h (aarch64_get_condition_code): Export.\n+\n 2014-09-02  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* Makefile.in (TAGS): Handle constructs in common.opt, rtl.def,"}, {"sha": "6878f7d316220480acf0dbdee3545f5fcf987c7e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cd5660ab1229ff6b47987f81769d908970ea0950", "patch": "@@ -173,6 +173,7 @@ struct tune_params\n };\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n+int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, enum machine_mode);\n bool aarch64_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t       enum machine_mode,"}, {"sha": "c48cdf0a0b10b6a99860f7085247f5b755134c1b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cd5660ab1229ff6b47987f81769d908970ea0950", "patch": "@@ -3587,7 +3587,7 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n   return CCmode;\n }\n \n-static unsigned\n+int\n aarch64_get_condition_code (rtx x)\n {\n   enum machine_mode mode = GET_MODE (XEXP (x, 0));\n@@ -3614,7 +3614,7 @@ aarch64_get_condition_code (rtx x)\n \tcase UNLE: return AARCH64_LE;\n \tcase UNGT: return AARCH64_HI;\n \tcase UNGE: return AARCH64_PL;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return -1;\n \t}\n       break;\n \n@@ -3631,7 +3631,7 @@ aarch64_get_condition_code (rtx x)\n \tcase GTU: return AARCH64_HI;\n \tcase LEU: return AARCH64_LS;\n \tcase LTU: return AARCH64_CC;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return -1;\n \t}\n       break;\n \n@@ -3650,7 +3650,7 @@ aarch64_get_condition_code (rtx x)\n \tcase GTU: return AARCH64_CC;\n \tcase LEU: return AARCH64_CS;\n \tcase LTU: return AARCH64_HI;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return -1;\n \t}\n       break;\n \n@@ -3661,7 +3661,7 @@ aarch64_get_condition_code (rtx x)\n \tcase EQ: return AARCH64_EQ;\n \tcase GE: return AARCH64_PL;\n \tcase LT: return AARCH64_MI;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return -1;\n \t}\n       break;\n \n@@ -3670,12 +3670,12 @@ aarch64_get_condition_code (rtx x)\n \t{\n \tcase NE: return AARCH64_NE;\n \tcase EQ: return AARCH64_EQ;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return -1;\n \t}\n       break;\n \n     default:\n-      gcc_unreachable ();\n+      return -1;\n       break;\n     }\n }\n@@ -3793,39 +3793,48 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       break;\n \n     case 'm':\n-      /* Print a condition (eq, ne, etc).  */\n-\n-      /* CONST_TRUE_RTX means always -- that's the default.  */\n-      if (x == const_true_rtx)\n-\treturn;\n+      {\n+        int cond_code;\n+        /* Print a condition (eq, ne, etc).  */\n \n-      if (!COMPARISON_P (x))\n-\t{\n-\t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+        /* CONST_TRUE_RTX means always -- that's the default.  */\n+        if (x == const_true_rtx)\n \t  return;\n-\t}\n \n-      fputs (aarch64_condition_codes[aarch64_get_condition_code (x)], f);\n+        if (!COMPARISON_P (x))\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t    return;\n+\t  }\n+\n+        cond_code = aarch64_get_condition_code (x);\n+        gcc_assert (cond_code >= 0);\n+        fputs (aarch64_condition_codes[cond_code], f);\n+      }\n       break;\n \n     case 'M':\n-      /* Print the inverse of a condition (eq <-> ne, etc).  */\n-\n-      /* CONST_TRUE_RTX means never -- that's the default.  */\n-      if (x == const_true_rtx)\n-\t{\n-\t  fputs (\"nv\", f);\n-\t  return;\n-\t}\n+      {\n+        int cond_code;\n+        /* Print the inverse of a condition (eq <-> ne, etc).  */\n \n-      if (!COMPARISON_P (x))\n-\t{\n-\t  output_operand_lossage (\"invalid operand for '%%%c'\", code);\n-\t  return;\n-\t}\n+        /* CONST_TRUE_RTX means never -- that's the default.  */\n+        if (x == const_true_rtx)\n+\t  {\n+\t    fputs (\"nv\", f);\n+\t    return;\n+\t  }\n \n-      fputs (aarch64_condition_codes[AARCH64_INVERSE_CONDITION_CODE\n-\t\t\t\t  (aarch64_get_condition_code (x))], f);\n+        if (!COMPARISON_P (x))\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t    return;\n+\t  }\n+        cond_code = aarch64_get_condition_code (x);\n+        gcc_assert (cond_code >= 0);\n+        fputs (aarch64_condition_codes[AARCH64_INVERSE_CONDITION_CODE\n+                                       (cond_code)], f);\n+      }\n       break;\n \n     case 'b':"}, {"sha": "b5be79ce36038eee58d49682f9ba154ffaab81c1", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=cd5660ab1229ff6b47987f81769d908970ea0950", "patch": "@@ -2598,9 +2598,8 @@\n \n (define_insn \"*csinc2<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (plus:GPI (match_operator:GPI 2 \"aarch64_comparison_operator\"\n-\t\t  [(match_operand:CC 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t (match_operand:GPI 1 \"register_operand\" \"r\")))]\n+        (plus:GPI (match_operand 2 \"aarch64_comparison_operation\" \"\")\n+                  (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"csinc\\\\t%<w>0, %<w>1, %<w>1, %M2\"\n   [(set_attr \"type\" \"csel\")]\n@@ -2609,37 +2608,34 @@\n (define_insn \"csinc3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (if_then_else:GPI\n-\t  (match_operator:GPI 1 \"aarch64_comparison_operator\"\n-\t   [(match_operand:CC 2 \"cc_register\" \"\") (const_int 0)])\n-\t  (plus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (plus:GPI (match_operand:GPI 2 \"register_operand\" \"r\")\n \t\t    (const_int 1))\n-\t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n+\t  (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n-  \"csinc\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n+  \"csinc\\\\t%<w>0, %<w>3, %<w>2, %M1\"\n   [(set_attr \"type\" \"csel\")]\n )\n \n (define_insn \"*csinv3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (if_then_else:GPI\n-\t  (match_operator:GPI 1 \"aarch64_comparison_operator\"\n-\t   [(match_operand:CC 2 \"cc_register\" \"\") (const_int 0)])\n-\t  (not:GPI (match_operand:GPI 3 \"register_operand\" \"r\"))\n-\t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (not:GPI (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n-  \"csinv\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n+  \"csinv\\\\t%<w>0, %<w>3, %<w>2, %M1\"\n   [(set_attr \"type\" \"csel\")]\n )\n \n (define_insn \"*csneg3<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (if_then_else:GPI\n-\t  (match_operator:GPI 1 \"aarch64_comparison_operator\"\n-\t   [(match_operand:CC 2 \"cc_register\" \"\") (const_int 0)])\n-\t  (neg:GPI (match_operand:GPI 3 \"register_operand\" \"r\"))\n-\t  (match_operand:GPI 4 \"aarch64_reg_or_zero\" \"rZ\")))]\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (neg:GPI (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")))]\n   \"\"\n-  \"csneg\\\\t%<w>0, %<w>4, %<w>3, %M1\"\n+  \"csneg\\\\t%<w>0, %<w>3, %<w>2, %M1\"\n   [(set_attr \"type\" \"csel\")]\n )\n \n@@ -2896,7 +2892,7 @@\n \n     emit_insn (gen_rbit<mode>2 (operands[0], operands[1]));\n     emit_insn (gen_clz<mode>2 (operands[0], operands[0]));\n-    emit_insn (gen_csinc3<mode>_insn (operands[0], x, ccreg, operands[0], const0_rtx));\n+    emit_insn (gen_csinc3<mode>_insn (operands[0], x, operands[0], const0_rtx));\n     DONE;\n   }\n )"}, {"sha": "c1510cac7495a1c697347a1e40877c399a6ab089", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5660ab1229ff6b47987f81769d908970ea0950/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=cd5660ab1229ff6b47987f81769d908970ea0950", "patch": "@@ -202,6 +202,18 @@\n (define_special_predicate \"aarch64_comparison_operator\"\n   (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,ordered,unlt,unle,unge,ungt\"))\n \n+(define_special_predicate \"aarch64_comparison_operation\"\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,ordered,unlt,unle,unge,ungt\")\n+{\n+  if (XEXP (op, 1) != const0_rtx)\n+    return false;\n+  rtx op0 = XEXP (op, 0);\n+  if (!REG_P (op0) || REGNO (op0) != CC_REGNUM)\n+    return false;\n+  return aarch64_get_condition_code (op) >= 0;\n+})\n+\n+\n ;; True if the operand is memory reference suitable for a load/store exclusive.\n (define_predicate \"aarch64_sync_memory_operand\"\n   (and (match_operand 0 \"memory_operand\")"}]}