{"sha": "357351e5a702dde74fbccf7ba88027e166b0111c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3MzUxZTVhNzAyZGRlNzRmYmNjZjdiYTg4MDI3ZTE2NmIwMTExYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-01T18:42:49Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-01T18:42:49Z"}, "message": "c-decl.c (duplicate_decls, [...]): Remove trailing period from diagnostics.\n\n\t* c-decl.c (duplicate_decls, parmlist_tags_warning): Remove\n\ttrailing period from diagnostics.\n\t* c-lex.c (cb_file_change): Similarly.\n\t* cppmacro.c (check_trad_stringification): Similarly.\n\t* gcc.c (do_spec_1): Similarly.\n\t* genattr.c (main): Similarly.\n\t* genattrtab.c (main, operate_exp, make_length_attrs): Similarly.\n\t* gencodes.c (main): Similarly.\n\t* genconfig.c (main): Similarly.\n\t* genconstants.c (main): Similarly.\n\t* genemit.c (main): Similarly.\n\t* genextract.c (main): Similarly.\n\t* genopinit.c (main): Similarly.\n\t* genoutput.c (main): Similarly.\n\t* genpeep.c (main): Similarly.\n\t* genrecog.c (main): Similarly.\n\t* mips-tfile.c (add_file, error): Similarly.\n\t* profile.c (init_branch_prob): Similarly.\n\t* reload1.c (spill_failure): Similarly.\n\t* stmt.c (parse_output_constraint): Similarly.\n\t* varasm.c (assemble_variable): Similarly.\ncp:\n\t* class.c (finish_struct): Similarly.\n\t* decl.c (check_tag_decl): Similarly.\n\t* lex.c (cxx_set_yydebug): Similarly.\n\t* typeck2.c (friendly_abort): Similarly.\njava:\n\t* expr.c (expand_byte_code): Similarly.\n\t* jcf-parse.c (load_class, jcf_parse): Similarly.\n\t* jcf-write.c (generate_classfile): Similarly.\n\t* lex.c (java_lex): Similarly.\n\nFrom-SVN: r47517", "tree": {"sha": "02b11de5e6c77cacd32adb6c82a5a850db7e4da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02b11de5e6c77cacd32adb6c82a5a850db7e4da8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357351e5a702dde74fbccf7ba88027e166b0111c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357351e5a702dde74fbccf7ba88027e166b0111c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357351e5a702dde74fbccf7ba88027e166b0111c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357351e5a702dde74fbccf7ba88027e166b0111c/comments", "author": null, "committer": null, "parents": [{"sha": "2203610302a49bd13423676ab292ddefc6e1219c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2203610302a49bd13423676ab292ddefc6e1219c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2203610302a49bd13423676ab292ddefc6e1219c"}], "stats": {"total": 120, "additions": 79, "deletions": 41}, "files": [{"sha": "fe9fc31dd152824ad046d5f50becf74fa6777282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1,3 +1,27 @@\n+2001-12-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-decl.c (duplicate_decls, parmlist_tags_warning): Remove\n+\ttrailing period from diagnostics.\n+\t* c-lex.c (cb_file_change): Similarly.\n+\t* cppmacro.c (check_trad_stringification): Similarly.\n+\t* gcc.c (do_spec_1): Similarly.\n+\t* genattr.c (main): Similarly.\n+\t* genattrtab.c (main, operate_exp, make_length_attrs): Similarly.\n+\t* gencodes.c (main): Similarly.\n+\t* genconfig.c (main): Similarly.\n+\t* genconstants.c (main): Similarly.\n+\t* genemit.c (main): Similarly.\n+\t* genextract.c (main): Similarly.\n+\t* genopinit.c (main): Similarly.\n+\t* genoutput.c (main): Similarly.\n+\t* genpeep.c (main): Similarly.\n+\t* genrecog.c (main): Similarly.\n+\t* mips-tfile.c (add_file, error): Similarly.\n+\t* profile.c (init_branch_prob): Similarly.\n+\t* reload1.c (spill_failure): Similarly.\n+\t* stmt.c (parse_output_constraint): Similarly.\n+\t* varasm.c (assemble_variable): Similarly.\n+\n 2001-12-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* m68k.c (init_FPA_table): Provide static prototype."}, {"sha": "63b2680f308022de7dea08b5232b474270db3aa1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1621,13 +1621,13 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t      if (TREE_CHAIN (t) == 0\n \t\t  && TYPE_MAIN_VARIANT (type) != void_type_node)\n \t\t{\n-\t\t  error (\"A parameter list with an ellipsis can't match an empty parameter name list declaration.\");\n+\t\t  error (\"A parameter list with an ellipsis can't match an empty parameter name list declaration\");\n \t\t  break;\n \t\t}\n \n \t      if (simple_type_promotes_to (type) != NULL_TREE)\n \t\t{\n-\t\t  error (\"An argument type that has a default promotion can't match an empty parameter name list declaration.\");\n+\t\t  error (\"An argument type that has a default promotion can't match an empty parameter name list declaration\");\n \t\t  break;\n \t\t}\n \t    }\n@@ -5300,7 +5300,7 @@ parmlist_tags_warning ()\n \t}\n       if (! already)\n \t{\n-\t  warning (\"its scope is only this definition or declaration, which is probably not what you want.\");\n+\t  warning (\"its scope is only this definition or declaration, which is probably not what you want\");\n \t  already = 1;\n \t}\n     }"}, {"sha": "d207833a7c970223c194e7e183fb23d274b810cf", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -297,7 +297,7 @@ cb_file_change (pfile, new_map)\n \t{\n \t  warning_with_file_and_line\n \t    (input_filename, lineno,\n-\t     \"This file contains more '%c's than '%c's.\",\n+\t     \"This file contains more '%c's than '%c's\",\n \t     indent_level > input_file_stack->indent_level ? '{' : '}',\n \t     indent_level > input_file_stack->indent_level ? '}' : '{');\n \t}"}, {"sha": "c67d24429178ac120695dc96ffdd746c47146446", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -3772,7 +3772,7 @@ c_set_yydebug (value)\n #if YYDEBUG != 0\n   yydebug = value;\n #else\n-  warning (\"YYDEBUG not defined.\");\n+  warning (\"YYDEBUG not defined\");\n #endif\n }\n "}, {"sha": "4d66a5db7a57ceba0c9d5c62dbc1a00288dd1ec4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1,3 +1,10 @@\n+2001-12-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* class.c (finish_struct): Remove trailing periods from messages.\n+\t* decl.c (check_tag_decl): Similarly.\n+\t* lex.c (cxx_set_yydebug): Similarly.\n+\t* typeck2.c (friendly_abort): Similarly.\n+\n 2001-11-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/3048"}, {"sha": "736273b8c96e2252d4a7ed8c1c993b33f1fd0355", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -5258,7 +5258,7 @@ finish_struct (t, attributes)\n   if (current_class_type)\n     popclass ();\n   else\n-    error (\"trying to finish struct, but kicked out due to previous parse errors.\");\n+    error (\"trying to finish struct, but kicked out due to previous parse errors\");\n \n   if (processing_template_decl)\n     {"}, {"sha": "c10a0c7c1c70f900a110a35d9621e7aa0de114be", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -7054,7 +7054,7 @@ check_tag_decl (declspecs)\n          --end example]  */\n       if (saw_typedef)\n         {\n-          error (\"Missing type-name in typedef-declaration.\");\n+          error (\"missing type-name in typedef-declaration\");\n           return NULL_TREE;\n         }\n       /* Anonymous unions are objects, so they can have specifiers.  */;"}, {"sha": "1a748a513ba8312b11d81b80577f9ef79d296c15", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -905,7 +905,7 @@ cxx_set_yydebug (value)\n   extern int yydebug;\n   yydebug = value;\n #else\n-  warning (\"YYDEBUG not defined.\");\n+  warning (\"YYDEBUG not defined\");\n #endif\n }\n "}, {"sha": "03d8f2df1a5008594bdaa62401afd7d7d8dbfed0", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -267,7 +267,7 @@ friendly_abort (where, file, line, func)\n     /* Say nothing.  */;\n   else if (where > 0)\n     {\n-      error (\"Internal error #%d.\", where);\n+      error (\"Internal error #%d\", where);\n \n       /* Uncount this error, so internal_error will do the right thing.  */\n       --errorcount;"}, {"sha": "d6f021b67b59e52f04d2927be2100d540b138e99", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1480,7 +1480,7 @@ check_trad_stringification (pfile, macro, string)\n \t      && !memcmp (p, NODE_NAME (node), len))\n \t    {\n \t      cpp_warning (pfile,\n-\t   \"macro argument \\\"%s\\\" would be stringified with -traditional.\",\n+\t   \"macro argument \\\"%s\\\" would be stringified with -traditional\",\n \t\t\t   NODE_NAME (node));\n \t      break;\n \t    }"}, {"sha": "7b3a85e89bd56517cd59408ec4331ebc3629383f", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -4255,7 +4255,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \tswitch (c = *p++)\n \t  {\n \t  case 0:\n-\t    fatal (\"Invalid specification!  Bug in cc.\");\n+\t    fatal (\"Invalid specification!  Bug in cc\");\n \n \t  case 'b':\n \t    obstack_grow (&obstack, input_basename, basename_length);"}, {"sha": "03b0b1f5668e7765686122423e9977a832b69930", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -208,7 +208,7 @@ main (argc, argv)\n   progname = \"genattr\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n@@ -297,7 +297,7 @@ main (argc, argv)\n \t    }\n \t  else if (unit->multiplicity != multiplicity\n \t\t   || unit->simultaneity != simultaneity)\n-\t    fatal (\"Differing specifications given for `%s' function unit.\",\n+\t    fatal (\"Differing specifications given for `%s' function unit\",\n \t\t   unit->name);\n \n \t  extend_range (&unit->ready_cost, ready_cost, ready_cost);"}, {"sha": "d2c91fcf0c117f8c57efc324aab0d595a5b2b1bd", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1438,7 +1438,7 @@ make_canonical (attr, exp)\n       if (! strcmp (XSTR (exp, 0), \"*\"))\n \t{\n \t  if (attr == 0 || attr->default_val == 0)\n-\t    fatal (\"(attr_value \\\"*\\\") used in invalid context.\");\n+\t    fatal (\"(attr_value \\\"*\\\") used in invalid context\");\n \t  exp = attr->default_val->value;\n \t}\n \n@@ -1827,7 +1827,7 @@ operate_exp (op, left, right)\n     }\n \n   else\n-    fatal (\"Badly formed attribute value.\");\n+    fatal (\"Badly formed attribute value\");\n   /* NOTREACHED */\n   return NULL;\n }\n@@ -2454,7 +2454,7 @@ make_length_attrs ()\n     return;\n \n   if (! length_attr->is_numeric)\n-    fatal (\"length attribute must be numeric.\");\n+    fatal (\"length attribute must be numeric\");\n \n   length_attr->is_const = 0;\n   length_attr->is_special = 1;\n@@ -6065,7 +6065,7 @@ main (argc, argv)\n   progname = \"genattrtab\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "d5d5c4bfda95efce63e179accc38638f15835997", "filename": "gcc/gencodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -54,7 +54,7 @@ main (argc, argv)\n   progname = \"gencodes\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "2dc045955386b2b92fdc8bc4adc198009c9a4ae8", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -275,7 +275,7 @@ main (argc, argv)\n   progname = \"genconfig\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "9043caea569337df707d30019367b844cc566b2f", "filename": "gcc/genconstants.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -61,7 +61,7 @@ main (argc, argv)\n   progname = \"genconstants\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "605e84b536b7b6f3659eeb8090b87467395384d4", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -787,7 +787,7 @@ main (argc, argv)\n   progname = \"genemit\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "79e87552e932a6b35de5a9a19ec55eacee20bc26", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -360,7 +360,7 @@ main (argc, argv)\n   progname = \"genextract\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "1942ab9cfcc8334572c621d49236ce3248f37d06", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -228,7 +228,7 @@ main (argc, argv)\n   obstack_init (&obstack);\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "760b8353d11e0317c016b221bd8539fa44fcafd1", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -317,7 +317,7 @@ main (argc, argv)\n   progname = \"genopinit\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "53322776c1f92b43bdf07a0030b499ca62c290a1", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -951,7 +951,7 @@ main (argc, argv)\n   progname = \"genoutput\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "2d81ada942a7b07fa938a97e4477f34a53b9b7bb", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -383,7 +383,7 @@ main (argc, argv)\n   progname = \"genpeep\";\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "e721e41e100ff24858e31f299b5e4dfff3abe834", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -2687,7 +2687,7 @@ main (argc, argv)\n   memset (&peephole2_tree, 0, sizeof peephole2_tree);\n \n   if (argc <= 1)\n-    fatal (\"No input file name.\");\n+    fatal (\"No input file name\");\n \n   if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);"}, {"sha": "1c0f009f8c0bf4cd492e248b385339615e0450ec", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1,3 +1,10 @@\n+2001-12-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c (expand_byte_code): Remove trailing periods from messages.\n+\t* jcf-parse.c (load_class, jcf_parse): Similarly.\n+\t* jcf-write.c (generate_classfile): Similarly.\n+\t* lex.c (java_lex): Similarly.\n+\n 2001-11-30  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* class.c (add_interface_do): Set BINFO_VPTR_FIELD."}, {"sha": "182d247f8903a476996be5cc91c3d445765eea3a", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -2747,7 +2747,7 @@ expand_byte_code (jcf, method)\n \t  if (dead_code_index != -1)\n \t    {\n               /* We've just reached the end of a region of dead code.  */\n-              warning (\"Unreachable bytecode from %d to before %d.\",\n+              warning (\"Unreachable bytecode from %d to before %d\",\n                        dead_code_index, PC);\n               dead_code_index = -1;\n             }\n@@ -2784,7 +2784,7 @@ expand_byte_code (jcf, method)\n   if (dead_code_index != -1)\n     {\n       /* We've just reached the end of a region of dead code.  */\n-      warning (\"Unreachable bytecode from %d to the end of the method.\", \n+      warning (\"Unreachable bytecode from %d to the end of the method\", \n               dead_code_index);\n     }\n }"}, {"sha": "b52d7b1fdbec143c8a31ab76fcba4ad07919d5c8", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -682,7 +682,7 @@ load_class (class_or_name, verbose)\n     }\n \n   if (!class_loaded && verbose)\n-    error (\"Cannot find file for class %s.\", IDENTIFIER_POINTER (saved));\n+    error (\"Cannot find file for class %s\", IDENTIFIER_POINTER (saved));\n }\n \n /* Parse the .class file JCF. */\n@@ -750,7 +750,7 @@ jcf_parse (jcf)\n \t -fforce-classes-archive-check was specified. */\n       if (!jcf->right_zip\n \t  && (!flag_emit_class_files || flag_force_classes_archive_check))\n-\tfatal_error (\"The `java.lang.Object' that was found in `%s' didn't have the special zero-length `gnu.gcj.gcj-compiled' attribute. This generally means that your classpath is incorrect set. Use `info gcj \\\"Input Options\\\"' to see the info page describing how to set the classpath.\", jcf->filename);\n+\tfatal_error (\"The `java.lang.Object' that was found in `%s' didn't have the special zero-length `gnu.gcj.gcj-compiled' attribute. This generally means that your classpath is incorrectly set. Use `info gcj \\\"Input Options\\\"' to see the info page describing how to set the classpath.\", jcf->filename);\n     }\n   else\n     all_class_list = tree_cons (NULL_TREE,"}, {"sha": "1b9ff7ba7eb210434b7b69dd7dc0c0277a69d181", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -2952,7 +2952,7 @@ generate_classfile (clas, state)\n \t  tree init = DECL_INITIAL (part);\n \t  static tree ConstantValue_node = NULL_TREE;\n \t  if (TREE_TYPE (part) != TREE_TYPE (init))\n-\t    fatal_error (\"field initializer type mismatch.\");\n+\t    fatal_error (\"field initializer type mismatch\");\n \t  ptr = append_chunk (NULL, 8, state);\n \t  if (ConstantValue_node == NULL_TREE)\n \t    ConstantValue_node = get_identifier (\"ConstantValue\");"}, {"sha": "38e1716f2631b2d69a5c2db71f7c0fad4c3ed48b", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1312,7 +1312,7 @@ java_lex (java_lval)\n       if (c == '\\n' || c == UEOF) /* ULT */\n \t{\n \t  lineno--;\t\t/* Refer to the line the terminator was seen */\n-\t  java_lex_error (\"String not terminated at end of line.\", 0);\n+\t  java_lex_error (\"String not terminated at end of line\", 0);\n \t  lineno++;\n \t}\n "}, {"sha": "70f580a76b70e0723d64703d62fb46e0138fb685", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -2526,7 +2526,7 @@ add_file (file_start, file_end_p1)\n \t\t  (shash_t **) 0);\n \n       if (file_end_p1 - file_start > (long) PAGE_USIZE-2)\n-\tfatal (\"Filename goes over one page boundary.\");\n+\tfatal (\"Filename goes over one page boundary\");\n \n       /* Push the start of the filename. We assume that the filename\n          will be stored at string offset 1.  */\n@@ -5608,7 +5608,7 @@ error VPARAMS ((const char *format, ...))\n void\n fancy_abort ()\n {\n-  fatal (\"Internal abort.\");\n+  fatal (\"Internal abort\");\n }\n \f\n "}, {"sha": "caad5df588a94c240399e05960aca1b1e3cfcaca", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -972,7 +972,7 @@ init_branch_prob (filename)\n       strip_off_ending (da_file_name, len);\n       strcat (da_file_name, \".da\");\n       if ((da_file = fopen (da_file_name, \"rb\")) == 0)\n-\twarning (\"file %s not found, execution counts assumed to be zero.\",\n+\twarning (\"file %s not found, execution counts assumed to be zero\",\n \t\t da_file_name);\n \n       /* The first word in the .da file gives the number of instrumented"}, {"sha": "a14e963b7597365a4efcda60d7c3d1fd398185cb", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1888,11 +1888,11 @@ spill_failure (insn, class)\n {\n   static const char *const reg_class_names[] = REG_CLASS_NAMES;\n   if (asm_noperands (PATTERN (insn)) >= 0)\n-    error_for_asm (insn, \"Can't find a register in class `%s' while reloading `asm'.\",\n+    error_for_asm (insn, \"Can't find a register in class `%s' while reloading `asm'\",\n \t\t   reg_class_names[class]);\n   else\n     {\n-      error (\"Unable to find a register to spill in class `%s'.\",\n+      error (\"Unable to find a register to spill in class `%s'\",\n \t     reg_class_names[class]);\n       fatal_insn (\"This is the insn:\", insn);\n     }"}, {"sha": "2b176bb9e9a58b90d2d59b85a774481a51186fc5", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1390,7 +1390,7 @@ parse_output_constraint (constraint_p,\n       {\n       case '+':\n       case '=':\n-\terror (\"operand constraint contains '+' or '=' at illegal position.\");\n+\terror (\"operand constraint contains incorrectly positioned '+' or '='\");\n \treturn false;\n \t\n       case '%':"}, {"sha": "875430f7fc0ba3d4b88fd3d524624957ad98bf18", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357351e5a702dde74fbccf7ba88027e166b0111c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=357351e5a702dde74fbccf7ba88027e166b0111c", "patch": "@@ -1597,7 +1597,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (align > MAX_OFILE_ALIGNMENT)\n     {\n       warning_with_decl (decl,\n-\t\"alignment of `%s' is greater than maximum object file alignment. Using %d.\",\n+\t\"alignment of `%s' is greater than maximum object file alignment. Using %d\",\n                     MAX_OFILE_ALIGNMENT/BITS_PER_UNIT);\n       align = MAX_OFILE_ALIGNMENT;\n     }\n@@ -1648,7 +1648,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #if !defined(ASM_OUTPUT_ALIGNED_COMMON) && !defined(ASM_OUTPUT_ALIGNED_DECL_COMMON) && !defined(ASM_OUTPUT_ALIGNED_BSS)\n       if ((unsigned HOST_WIDE_INT) DECL_ALIGN (decl) / BITS_PER_UNIT > rounded)\n          warning_with_decl\n-           (decl, \"requested alignment for %s is greater than implemented alignment of %d.\",rounded);\n+           (decl, \"requested alignment for %s is greater than implemented alignment of %d\",rounded);\n #endif\n \n       asm_emit_uninitialised (decl, name, size, rounded);"}]}