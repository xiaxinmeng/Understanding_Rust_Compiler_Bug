{"sha": "f714575791328145af8d338ebca8dfb224ba7235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxNDU3NTc5MTMyODE0NWFmOGQzMzhlYmNhOGRmYjIyNGJhNzIzNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-03-13T02:32:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-13T02:32:08Z"}, "message": "ctype_noninline.h: Cast to unsigned char.\n\n\n2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n            Per Liboriussen  <liborius@stofanet.dk>\n\n\t* config/os/gnu-linux/bits/ctype_noninline.h: Cast to\n\tunsigned char.\n\t* config/os/gnu-linux/bits/ctype_inline.h: Same.\n\n\t* config/os/irix/irix6.5/bits/ctype_inline.h: Same.\n\n\t* config/os/solaris/solaris2.5/bits/ctype_inline.h: Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h: Same.\n\n\t* config/os/solaris/solaris2.6/bits/ctype_inline.h: Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h: Same.\n\n\t* config/os/solaris/solaris2.7/bits/ctype_inline.h: Same.\n\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h: Same.\n\n\t* testsuite/22_locale/ctype_members_char.cc (main): Add tests.\n\nCo-Authored-By: Per Liboriussen <liborius@stofanet.dk>\n\nFrom-SVN: r50708", "tree": {"sha": "963bf466ee49369ab341966ebf5574140d28294e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/963bf466ee49369ab341966ebf5574140d28294e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f714575791328145af8d338ebca8dfb224ba7235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f714575791328145af8d338ebca8dfb224ba7235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f714575791328145af8d338ebca8dfb224ba7235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f714575791328145af8d338ebca8dfb224ba7235/comments", "author": null, "committer": null, "parents": [{"sha": "4e9bb42b21a8399500c0021fa991a79c8c0574fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9bb42b21a8399500c0021fa991a79c8c0574fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9bb42b21a8399500c0021fa991a79c8c0574fa"}], "stats": {"total": 135, "additions": 86, "deletions": 49}, "files": [{"sha": "c055900584eb4e988fe291e049758c95c729064b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,3 +1,23 @@\n+2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n+            Per Liboriussen  <liborius@stofanet.dk>\n+\t\n+\t* config/os/gnu-linux/bits/ctype_noninline.h: Cast to\n+\tunsigned char.\n+\t* config/os/gnu-linux/bits/ctype_inline.h: Same.\n+\n+\t* config/os/irix/irix6.5/bits/ctype_inline.h: Same.\n+\n+\t* config/os/solaris/solaris2.5/bits/ctype_inline.h: Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h: Same.\n+\n+\t* config/os/solaris/solaris2.6/bits/ctype_inline.h: Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h: Same.\n+\n+\t* config/os/solaris/solaris2.7/bits/ctype_inline.h: Same.\n+\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h: Same.\n+\n+\t* testsuite/22_locale/ctype_members_char.cc (main): Add tests.\n+\t\n 2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/basic_string.tcc (string::_S_construct(_InIter,"}, {"sha": "af409c87629b10a189841c98b76f46a3551b3d5b", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_inline.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,23 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { return _M_table[__c] & __m; }\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n-      *__vec++ = _M_table[*__low++];\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !(_M_table[*__low] & __m))\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -61,7 +62,8 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && (_M_table[*__low] & __m) != 0)\n+    while (__low < __high \n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "18324d167dda1cef7dee0a65529963c4362d9267", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -71,29 +71,29 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[static_cast<int>(__c)]; }\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_toupper[static_cast<int>(*__low)];\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[static_cast<int>(__c)]; }\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_tolower[static_cast<int>(*__low)];\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;"}, {"sha": "b7ab12dbf14607bdbe75a6ef5408e8043fd4b4bf", "filename": "libstdc++-v3/config/os/irix/irix6.5/bits/ctype_inline.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_inline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,23 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { return (_M_table)[__c] & __m; }\n+  { return (_M_table)[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n-      *__vec++ = (_M_table)[*__low++];\n+      *__vec++ = (_M_table)[static_cast<unsigned char>(*__low++)];\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !((_M_table)[*__low] & __m))\n+    while (__low < __high \n+\t   && !((_M_table)[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -61,12 +62,8 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && ((_M_table + 1)[*__low] & __m) != 0)\n+    while (__low < __high \n+\t   && ((_M_table + 1)[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }\n-\n-\n-\n-\n-"}, {"sha": "93a04aa1b6d750c25a114372850cd7b2ba5d3f9f", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_inline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,23 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { return (_M_table + 1)[(unsigned char)(__c)] & __m; }\n+  { return (_M_table + 1)[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n-      *__vec++ = (_M_table + 1)[(unsigned char) (*__low++)];\n+      *__vec++ = (_M_table + 1)[static_cast<unsigned char>(*__low++)];\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !((_M_table + 1)[(unsigned char)(*__low)] & __m))\n+    while (__low < __high \n+\t   && !((_M_table + 1)[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -62,7 +63,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high \n-\t   && ((_M_table + 1)[(unsigned char)(*__low)] & __m) != 0)\n+\t   && ((_M_table + 1)[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "f466afbc1cee643ae926db94fab56fa0d8d02f26", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -52,7 +52,7 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return ((_M_table + 258)[static_cast<int>(__c)]); }\n+  { return ((_M_table + 258)[static_cast<unsigned char>(__c)]); }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n@@ -67,7 +67,7 @@\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return ((_M_table + 258)[static_cast<int>(__c)]); }\n+  { return ((_M_table + 258)[static_cast<unsigned char>(__c)]); }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n@@ -79,5 +79,3 @@\n       }\n     return __high;\n   }\n-\n-"}, {"sha": "0bd56a19702151496854cdad38656395de7cd19c", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_inline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,7 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { return _M_table[__c] & __m; }\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n@@ -46,7 +46,7 @@\n     const int __bitmasksize = sizeof(mask) * 8;\n     for (;__low < __high; ++__vec, ++__low)\n       {\n-\tmask __m = _M_table[*__low];\n+\tmask __m = _M_table[static_cast<unsigned char>(*__low)];\n \tint __i = 0; // Lowest bitmask value from ctype_base.\n \twhile (__i < __bitmasksize && !(__m & static_cast<mask>(1 << __i)))\n \t  ++__i;\n@@ -59,7 +59,8 @@\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !(_M_table[*__low] & __m))\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -69,7 +70,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high \n-\t   && (_M_table[*__low] & __m) != 0)\n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "b22ad9a137433ffd3ee92b7c0b1d723dde1f28c9", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_noninline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -52,29 +52,29 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[(int) __c]; }\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_toupper[(int) *__low];\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[(int) __c]; }\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_tolower[(int) *__low];\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;"}, {"sha": "af409c87629b10a189841c98b76f46a3551b3d5b", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_inline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,22 +37,23 @@\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { return _M_table[__c] & __m; }\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n-      *__vec++ = _M_table[*__low++];\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high && !(_M_table[*__low] & __m))\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n   }\n@@ -62,7 +63,7 @@\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high \n-\t   && (_M_table[*__low] & __m) != 0)\n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "61462a909453e8dad17b0aef4c50eeb1347e38c0", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_noninline.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -53,32 +53,30 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[(int) __c]; }\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_toupper[(int) *__low];\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[(int) __c]; }\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_tolower[(int) *__low];\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n-\n-"}, {"sha": "d1e47b6bbbd5bc4c5e6e9158219359e6da44007c", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f714575791328145af8d338ebca8dfb224ba7235/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=f714575791328145af8d338ebca8dfb224ba7235", "patch": "@@ -243,8 +243,25 @@ class comma_ctype: public std::ctype<char>\n   { classic_table(); }\n };\n \n-// libstdc++/5280\n+// Per Liboriussen <liborius@stofanet.dk>\n void test03()\n+{\n+  bool test = true;\n+  std::ctype_base::mask maskdata[256];\n+  for (int i = 0; i < 256; ++i)\n+    maskdata[i] = std::ctype_base::alpha;\n+  std::ctype<char>* f = new std::ctype<char>(maskdata);\n+  std::locale global;\n+  std::locale loc(global, f);\n+  for (int i = 0; i < 256; ++i) \n+    {\n+      char ch = i;\n+      VERIFY( std::isalpha(ch, loc) );\n+    }\n+}\n+\n+// libstdc++/5280\n+void test04()\n {\n #ifdef _GLIBCPP_HAVE_SETENV \n   // Set the global locale to non-\"C\".\n@@ -257,6 +274,7 @@ void test03()\n     {\n       test01();\n       test02();\n+      test03();\n       setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n     }\n #endif\n@@ -267,5 +285,6 @@ int main()\n   test01();\n   test02();\n   test03();\n+  test04();\n   return 0;\n }"}]}