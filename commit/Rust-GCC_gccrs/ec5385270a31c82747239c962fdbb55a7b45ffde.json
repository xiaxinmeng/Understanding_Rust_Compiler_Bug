{"sha": "ec5385270a31c82747239c962fdbb55a7b45ffde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1Mzg1MjcwYTMxYzgyNzQ3MjM5Yzk2MmZkYmI1NWE3YjQ1ZmZkZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-06-30T21:54:47Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-06-30T21:54:47Z"}, "message": "re PR target/71677 (PowerPC ISA 3.0 DImode load/store needs a fix)\n\n2016-06-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71677\n\t* config/rs6000/constraints.md (wY constraint): New constraint to\n\tmatch the requirements for the LXSD and STXSD instructions.\n\t* config/rs6000/predicates.md (offsettable_mem_14bit_operand): New\n\tpredicate to match the requirements for the LXSD and STXSD\n\tinstructions.\n\t* config/rs6000/rs6000.md (mov<mode>_hardfloat32, FMOVE64 case):\n\tUse constaint wY for LXSD/STXSD instructions instead of 'o' or 'Y'\n\tto make sure that the bottom 2 bits of offset are 0, the address\n\tform is offsettable, and no updating is done in the address mode.\n\t(mov<mode>_hardfloat64, FMOVE64 case): Likewise.\n\t(movdi_internal32): Likewise\n\t(movdi_internal64): Likewise.\n\nFrom-SVN: r237898", "tree": {"sha": "074b75dd2a88754b99e336800ee0dc60494c4223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074b75dd2a88754b99e336800ee0dc60494c4223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5385270a31c82747239c962fdbb55a7b45ffde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5385270a31c82747239c962fdbb55a7b45ffde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5385270a31c82747239c962fdbb55a7b45ffde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5385270a31c82747239c962fdbb55a7b45ffde/comments", "author": null, "committer": null, "parents": [{"sha": "55a0f21aba28fac542ec1b092089140f00eec2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a0f21aba28fac542ec1b092089140f00eec2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a0f21aba28fac542ec1b092089140f00eec2ed"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "bc39710bd24738814cbf0a68bdadf8c142068ee0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec5385270a31c82747239c962fdbb55a7b45ffde", "patch": "@@ -1,3 +1,19 @@\n+2016-06-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71677\n+\t* config/rs6000/constraints.md (wY constraint): New constraint to\n+\tmatch the requirements for the LXSD and STXSD instructions.\n+\t* config/rs6000/predicates.md (offsettable_mem_14bit_operand): New\n+\tpredicate to match the requirements for the LXSD and STXSD\n+\tinstructions.\n+\t* config/rs6000/rs6000.md (mov<mode>_hardfloat32, FMOVE64 case):\n+\tUse constaint wY for LXSD/STXSD instructions instead of 'o' or 'Y'\n+\tto make sure that the bottom 2 bits of offset are 0, the address\n+\tform is offsettable, and no updating is done in the address mode.\n+\t(mov<mode>_hardfloat64, FMOVE64 case): Likewise.\n+\t(movdi_internal32): Likewise\n+\t(movdi_internal64): Likewise.\n+\n 2016-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71707"}, {"sha": "18713256b9be7e7b052bb10138902d4bee2a5a5e", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=ec5385270a31c82747239c962fdbb55a7b45ffde", "patch": "@@ -185,6 +185,11 @@\n   \"Vector constant that can be loaded with XXSPLTIB & sign extension.\"\n   (match_test \"xxspltib_constant_split (op, mode)\"))\n \n+;; ISA 3.0 D-form instruction that has the bottom 2 bits 0 (LXSD or STXSD).\n+(define_memory_constraint \"wY\"\n+  \"Offsettable memory operand, with bottom 2 bits 0\"\n+  (match_operand 0 \"offsettable_mem_14bit_operand\"))\n+\n ;; Altivec style load/store that ignores the bottom bits of the address\n (define_memory_constraint \"wZ\"\n   \"Indexed or indirect memory operand, ignoring the bottom 4 bits\""}, {"sha": "0d10e9ab5c19865f81d1f72725909aae4dd414d0", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=ec5385270a31c82747239c962fdbb55a7b45ffde", "patch": "@@ -734,6 +734,15 @@\n   (and (match_operand 0 \"memory_operand\")\n        (match_test \"offsettable_nonstrict_memref_p (op)\")))\n \n+;; Return 1 if the operand is an offsettable memory operand for ISA 3.0\n+;; scalar LXSD/STXSD that must have the bottom 2 bits 0 and no update\n+;; form\n+(define_predicate \"offsettable_mem_14bit_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"offsettable_nonstrict_memref_p (op)\")\n+       (match_test \"mem_operand_gpr (op, mode)\")\n+       (not (match_test \"update_address_mem  (op, mode)\"))))\n+\n ;; Return 1 if the operand is suitable for load/store quad memory.\n ;; This predicate only checks for non-atomic loads/stores (not lqarx/stqcx).\n (define_predicate \"quad_memory_operand\""}, {"sha": "a7615b1964b5aa56d4a054e4b6edbbe1cc460ebf", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5385270a31c82747239c962fdbb55a7b45ffde/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ec5385270a31c82747239c962fdbb55a7b45ffde", "patch": "@@ -6775,8 +6775,8 @@\n ;; except for 0.0 which can be created on VSX with an xor instruction.\n \n (define_insn \"*mov<mode>_hardfloat32\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_av>,Z,<f64_p9>,o,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,Z,<f64_av>,o,<f64_p9>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_av>,Z,<f64_p9>,wY,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n+\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,Z,<f64_av>,wY,<f64_p9>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -6814,8 +6814,8 @@\n ; ld/std require word-aligned displacements -> 'Y' constraint.\n ; List Y->r and r->Y before r->r for reload.\n (define_insn \"*mov<mode>_hardfloat64\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,o,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r,*c*l,!r,*h,r,wg,r,<f64_dm>\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,o,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r,r,h,0,wg,r,<f64_dm>,r\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,wY,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r,*c*l,!r,*h,r,wg,r,<f64_dm>\")\n+\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,wY,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r,r,h,0,wg,r,<f64_dm>,r\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -7856,13 +7856,13 @@\n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\"\n          \"=Y,        r,         r,         ?m,        ?*d,        ?*d,\n-          r,         ?Y,        ?Z,        ?*wb,      ?*wv,       ?wi,\n+          r,         ?wY,       ?Z,        ?*wb,      ?*wv,       ?wi,\n           ?wo,       ?wo,       ?wv,       ?wi,       ?wi,        ?wv,\n           ?wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n           \"r,        Y,         r,         d,         m,          d,\n-           IJKnGHF,  wb,        wv,        Y,         Z,          wi,\n+           IJKnGHF,  wb,        wv,        wY,        Z,          wi,\n            Oj,       wM,        OjwM,      Oj,        wM,         wS,\n            wB\"))]\n \n@@ -7932,14 +7932,14 @@\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=Y,        r,         r,         r,         r,          r,\n-                ?m,        ?*d,       ?*d,       ?Y,        ?Z,         ?*wb,\n+                ?m,        ?*d,       ?*d,       ?wY,       ?Z,         ?*wb,\n                 ?*wv,      ?wi,       ?wo,       ?wo,       ?wv,        ?wi,\n                 ?wi,       ?wv,       ?wv,       r,         *h,         *h,\n                 ?*r,       ?*wg,      ?*r,       ?*wj\")\n \n \t(match_operand:DI 1 \"input_operand\"\n                 \"r,        Y,         r,         I,         L,          nF,\n-                 d,        m,         d,         wb,        wv,         Y,\n+                 d,        m,         d,         wb,        wv,         wY,\n                  Z,        wi,        Oj,        wM,        OjwM,       Oj,\n                  wM,       wS,        wB,        *h,        r,          0,\n                  wg,       r,         wj,        r\"))]"}]}