{"sha": "ae808627c355ab7fd2a703b379af52ac76f3be73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4MDg2MjdjMzU1YWI3ZmQyYTcwM2IzNzlhZjUyYWM3NmYzYmU3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-06-28T12:19:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-06-28T12:19:27Z"}, "message": "builtins.c (c_strlen): Add only_value argument.\n\n\t* builtins.c (c_strlen): Add only_value argument.\n\tHandle COND_EXPR and COMPOUND_EXPR.\n\t(expand_builtin_strlen): Optimize also strlen (i++ ? \"foo\" : \"bar\").\n\tAdjust c_strlen callers.\n\t(expand_builtin_strcpy, expand_builtin_strncpy,\n\texpand_builtin_strcmp, expand_builtin_strncmp,\n\texpand_builtin_fputs, expand_builtin_sprintf,\n\tfold_builtin): Adjust c_strlen callers.\n\n\t* gcc.c-torture/execute/builtins/string-8.c: New test.\n\t* gcc.c-torture/execute/builtins/string-8-lib.c: New.\n\t* gcc.c-torture/execute/stdio-opt-1.c (main): Add new tests.\n\t* gcc.c-torture/execute/string-opt-7.c (main): Add new test.\n\nFrom-SVN: r68634", "tree": {"sha": "7fc785a0955781bbb3aa4a98aab0dd79c676a433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc785a0955781bbb3aa4a98aab0dd79c676a433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae808627c355ab7fd2a703b379af52ac76f3be73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae808627c355ab7fd2a703b379af52ac76f3be73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae808627c355ab7fd2a703b379af52ac76f3be73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae808627c355ab7fd2a703b379af52ac76f3be73/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a487649ce8e6ab118a384e9f4aece4a406fecb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a487649ce8e6ab118a384e9f4aece4a406fecb42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a487649ce8e6ab118a384e9f4aece4a406fecb42"}], "stats": {"total": 140, "additions": 127, "deletions": 13}, "files": [{"sha": "565830330bce3be5d8b1278a6116459db7f997a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -1,3 +1,14 @@\n+2003-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (c_strlen): Add only_value argument.\n+\tHandle COND_EXPR and COMPOUND_EXPR.\n+\t(expand_builtin_strlen): Optimize also strlen (i++ ? \"foo\" : \"bar\").\n+\tAdjust c_strlen callers.\n+\t(expand_builtin_strcpy, expand_builtin_strncpy,\n+\texpand_builtin_strcmp, expand_builtin_strncmp,\n+\texpand_builtin_fputs, expand_builtin_sprintf,\n+\tfold_builtin): Adjust c_strlen callers.\n+\n 2003-06-28  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* bb-reorder.c (find_traces_1_round): Do not send basic block"}, {"sha": "7297f676839c5c06f9c68da3ab71ab7d20b670a7", "filename": "gcc/builtins.c", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -85,7 +85,7 @@ static REAL_VALUE_TYPE dconstpi;\n static REAL_VALUE_TYPE dconste;\n \n static int get_pointer_alignment (tree, unsigned int);\n-static tree c_strlen (tree);\n+static tree c_strlen (tree, int);\n static const char *c_getstr (tree);\n static rtx c_readstr (const char *, enum machine_mode);\n static int target_char_cast (tree, char *);\n@@ -242,19 +242,42 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n    way, because it could contain a zero byte in the middle.\n    TREE_STRING_LENGTH is the size of the character array, not the string.\n \n+   ONLY_VALUE should be non-zero if the result is not going to be emitted\n+   into the instruction stream and zero if it si going to be expanded.\n+   E.g. with i++ ? \"foo\" : \"bar\", if ONLY_VALUE is non-zero, constant 3\n+   is returned, otherwise NULL, since\n+   len = c_strlen (src, 1); if (len) expand_expr (len, ...); would not\n+   evaluate the side-effects.\n+\n    The value returned is of type `ssizetype'.\n \n    Unfortunately, string_constant can't access the values of const char\n    arrays with initializers, so neither can we do so here.  */\n \n static tree\n-c_strlen (tree src)\n+c_strlen (tree src, int only_value)\n {\n   tree offset_node;\n   HOST_WIDE_INT offset;\n   int max;\n   const char *ptr;\n \n+  STRIP_NOPS (src);\n+  if (TREE_CODE (src) == COND_EXPR\n+      && (only_value || !TREE_SIDE_EFFECTS (TREE_OPERAND (src, 0))))\n+    {\n+      tree len1, len2;\n+\n+      len1 = c_strlen (TREE_OPERAND (src, 1), only_value);\n+      len2 = c_strlen (TREE_OPERAND (src, 2), only_value);\n+      if (tree_int_cst_equal (len1, len2))      \n+\treturn len1;\n+    }\n+\n+  if (TREE_CODE (src) == COMPOUND_EXPR\n+      && (only_value || !TREE_SIDE_EFFECTS (TREE_OPERAND (src, 0))))\n+    return c_strlen (TREE_OPERAND (src, 1), only_value);\n+\n   src = string_constant (src, &offset_node);\n   if (src == 0)\n     return 0;\n@@ -2176,10 +2199,22 @@ expand_builtin_strlen (tree arglist, rtx target,\n       int align;\n \n       /* If the length can be computed at compile-time, return it.  */\n-      len = c_strlen (src);\n+      len = c_strlen (src, 0);\n       if (len)\n \treturn expand_expr (len, target, target_mode, EXPAND_NORMAL);\n \n+      /* If the length can be computed at compile-time and is constant\n+\t integer, but there are side-effects in src, evaluate\n+\t src for side-effects, then return len.\n+\t E.g. x = strlen (i++ ? \"xfoo\" + 1 : \"bar\");\n+\t can be optimized into: i++; x = 3;  */\n+      len = c_strlen (src, 1);\n+      if (len && TREE_CODE (len) == INTEGER_CST)\n+\t{\n+\t  expand_expr (src, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t  return expand_expr (len, target, target_mode, EXPAND_NORMAL);\n+\t}\n+\n       align = get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n \n       /* If SRC is not a pointer type, don't do this operation inline.  */\n@@ -2759,7 +2794,7 @@ expand_builtin_strcpy (tree arglist, rtx target, enum machine_mode mode)\n     return 0;\n \n   src = TREE_VALUE (TREE_CHAIN (arglist));\n-  len = c_strlen (src);\n+  len = c_strlen (src, 1);\n   if (len == 0 || TREE_SIDE_EFFECTS (len))\n     return 0;\n \n@@ -2802,7 +2837,7 @@ expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n          because the latter will potentially produce pessimized code\n          when used to produce the return value.  */\n       src = TREE_VALUE (TREE_CHAIN (arglist));\n-      if (! c_getstr (src) || ! (len = c_strlen (src)))\n+      if (! c_getstr (src) || ! (len = c_strlen (src, 0)))\n \treturn 0;\n \n       dst = TREE_VALUE (arglist);\n@@ -2841,7 +2876,7 @@ expand_builtin_strncpy (tree arglist, rtx target, enum machine_mode mode)\n     return 0;\n   else\n     {\n-      tree slen = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n+      tree slen = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)), 1);\n       tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n       tree fn;\n \n@@ -3267,8 +3302,8 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n     enum machine_mode insn_mode\n       = insn_data[(int) CODE_FOR_cmpstrsi].operand[0].mode;\n \n-    len1 = c_strlen (arg1);\n-    len2 = c_strlen (arg2);\n+    len1 = c_strlen (arg1, 1);\n+    len2 = c_strlen (arg2, 1);\n \n     if (len1)\n       len1 = size_binop (PLUS_EXPR, ssize_int (1), len1);\n@@ -3414,8 +3449,8 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n     enum machine_mode insn_mode\n       = insn_data[(int) CODE_FOR_cmpstrsi].operand[0].mode;\n \n-    len1 = c_strlen (arg1);\n-    len2 = c_strlen (arg2);\n+    len1 = c_strlen (arg1, 1);\n+    len2 = c_strlen (arg2, 1);\n \n     if (len1)\n       len1 = size_binop (PLUS_EXPR, ssize_int (1), len1);\n@@ -4210,7 +4245,7 @@ expand_builtin_fputs (tree arglist, int ignore, int unlocked)\n \n   /* Get the length of the string passed to fputs.  If the length\n      can't be determined, punt.  */\n-  if (!(len = c_strlen (TREE_VALUE (arglist)))\n+  if (!(len = c_strlen (TREE_VALUE (arglist), 1))\n       || TREE_CODE (len) != INTEGER_CST)\n     return 0;\n \n@@ -4549,7 +4584,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n \n       if (target != const0_rtx)\n \t{\n-\t  len = c_strlen (arg);\n+\t  len = c_strlen (arg, 1);\n \t  if (! len || TREE_CODE (len) != INTEGER_CST)\n \t    return 0;\n \t}\n@@ -5441,7 +5476,7 @@ fold_builtin (tree exp)\n     case BUILT_IN_STRLEN:\n       if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n \t{\n-\t  tree len = c_strlen (TREE_VALUE (arglist));\n+\t  tree len = c_strlen (TREE_VALUE (arglist), 0);\n \t  if (len)\n \t    {\n \t      /* Convert from the internal \"sizetype\" type to \"size_t\".  */"}, {"sha": "bc2058a0ee2f0521183efe8f8fe3d89b64500844", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -1,3 +1,10 @@\n+2003-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/builtins/string-8.c: New test.\n+\t* gcc.c-torture/execute/builtins/string-8-lib.c: New.\n+\t* gcc.c-torture/execute/stdio-opt-1.c (main): Add new tests.\n+\t* gcc.c-torture/execute/string-opt-7.c (main): Add new test.\n+\n 2003-06-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10468"}, {"sha": "9753c2498f1afd86dcc4a1db5232a91276a8234c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-8-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8-lib.c?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strlen.c\""}, {"sha": "220b6ed8e2ebde880447788c1a7774e7724bd74c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-8.c?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Test strlen optimizations on conditional expressions.\n+      \n+   Written by Jakub Jelinek, June 23, 2003.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern char *strcpy (char *, const char *);\n+extern int memcmp (const void *, const void *, size_t);\n+extern void abort (void);\n+extern void exit (int);\n+extern int inside_main;\n+\n+size_t g, h, i, j, k, l;\n+\n+size_t\n+foo (void)\n+{\n+  if (l)\n+    abort ();\n+  return ++l;\n+}\n+\n+void\n+main_test (void)\n+{\n+  if (strlen (i ? \"foo\" + 1 : j ? \"bar\" + 1 : \"baz\" + 1) != 2)\n+    abort ();\n+  if (strlen (g++ ? \"foo\" : \"bar\") != 3 || g != 1)\n+    abort ();\n+  if (strlen (h++ ? \"xfoo\" + 1 : \"bar\") != 3 || h != 1)\n+    abort ();\n+  if (strlen ((i++, \"baz\")) != 3 || i != 1)\n+    abort ();\n+  /* The following calls might not optimize strlen call away.  */\n+  inside_main = 0;\n+  if (strlen (j ? \"foo\" + k++ : \"bar\" + k++) != 3 || k != 1)\n+    abort ();\n+  if (strlen (foo () ? \"foo\" : \"bar\") != 3 || l != 1)\n+    abort ();\n+}"}, {"sha": "8cfb4ebe08ea30da0e99ba1cc1fa3236c9add18e", "filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -12,6 +12,8 @@ extern void abort(void);\n    If stdio.h provides one, that is okay.  */\n extern int fputs();\n \n+int i;\n+\n int main()\n {\n   FILE *s_array[] = {stdout, NULL}, **s_ptr = s_array;\n@@ -51,6 +53,15 @@ int main()\n   __builtin_fputc ('\\n', *s_ptr);\n   __builtin_fwrite (\"hello\\n\", 1, 6, *s_ptr);\n \n+  /* Check side-effects in conditional expression.  */\n+  s_ptr = s_array;\n+  fputs (i++ ? \"f\" : \"x\", *s_ptr++);\n+  if (s_ptr != s_array+1 || *s_ptr != 0 || i != 1)\n+    abort();\n+  fputs (--i ? \"\\n\" : \"\\n\", *--s_ptr);\n+  if (s_ptr != s_array || i != 0)\n+    abort();\n+\n   return 0;\n }\n "}, {"sha": "5b915d7a7d33f8437aff926e1cc8f6f335338ed7", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-7.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae808627c355ab7fd2a703b379af52ac76f3be73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c?ref=ae808627c355ab7fd2a703b379af52ac76f3be73", "patch": "@@ -12,6 +12,8 @@ extern int strcmp (const char *, const char *);\n extern int strncmp (const char *, const char *, size_t);\n extern void *memset (void *, int, size_t);\n \n+int i;\n+\n int main ()\n {\n   const char *const src = \"hello world\";\n@@ -62,6 +64,12 @@ int main ()\n   if (__builtin_strncpy (dst, src, 4) != dst || strncmp (dst, src, 4))\n     abort();\n \n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst, i++ ? \"xfoo\" + 1 : \"bar\", 4) != dst\n+      || strcmp (dst, \"bar\")\n+      || i != 1)\n+    abort ();\n+\n   return 0;\n }\n "}]}