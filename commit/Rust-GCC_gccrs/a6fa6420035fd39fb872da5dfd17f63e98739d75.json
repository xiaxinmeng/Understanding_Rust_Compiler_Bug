{"sha": "a6fa6420035fd39fb872da5dfd17f63e98739d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmYTY0MjAwMzVmZDM5ZmI4NzJkYTVkZmQxN2Y2M2U5ODczOWQ3NQ==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-06-30T07:59:40Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-06-30T07:59:40Z"}, "message": "Fix 980628-*.f:\n\nMon Jun 29 09:47:33 1998  Craig Burley  <burley@gnu.org>\n\tFix 980628-*.f:\n\t* bld.h: New `pad' field and accessor macros for\n\tACCTER, ARRTER, and CONTER ops.\n\t* bld.c (ffebld_new_accter, ffebld_new_arrter,\n\tffebld_new_conter_with_orig): Initialize `pad' field\n\tto zero.\n\t* com.c (ffecom_transform_common_): Include initial\n\tpadding (aka modulo aka offset) in size calculation.\n\tCopy initial padding value into FFE initialization expression\n\tso the GBE transformation of that expression includes it.\n\tMake array low bound 0 instead of 1, for consistency.\n\t(ffecom_transform_equiv_): Include initial\n\tpadding (aka modulo aka offset) in size calculation.\n\tCopy initial padding value into FFE initialization expression\n\tso the GBE transformation of that expression includes it.\n\tMake array low bound 0 instead of 1, for consistency.\n\t(ffecom_expr_, case FFEBLD_opACCTER): Delete unused `size'\n\tvariable.\n\tTrack destination offset separately, allowing for\n\tinitial padding.\n\tDon't bother setting initial PURPOSE offset if zero.\n\tInclude initial padding in size calculation.\n\t(ffecom_expr_, case FFEBLD_opARRTER): Allow for\n\tinitial padding.\n\tInclude initial padding in size calculation.\n\tMake array low bound 0 instead of 1, for consistency.\n\t(ffecom_finish_global_): Make array low bound 0 instead\n\tof 1, for consistency.\n\t(ffecom_notify_init_storage): Copy `pad' field from old\n\tACCTER to new ARRTER.\n\t(ffecom_notify_init_symbol): Ditto.\n\t* data.c (ffedata_gather_): Initialize `pad' field in new\n\tARRTER to 0.\n\t(ffedata_value_): Ditto.\n\t* equiv.c (ffeequiv_layout_local_): When lowering start\n\tof equiv area, extend lowering to maintain needed alignment.\n\t* target.c (ffetarget_align): Handle negative offset correctly.\n\t* global.c (ffeglobal_pad_common): Warn about non-zero\n\tpadding only the first time its seen.\n\tIf new padding larger than old, update old.\n\t(ffeglobal_save_common): Use correct type for size throughout.\n\t* global.h: Use correct type for size throughout.\n\t(ffeglobal_common_pad): New macro.\n\t(ffeglobal_pad): Delete this unused and broken macro.\n\nFrom-SVN: r20817", "tree": {"sha": "badf945c7c86aa03d0d5e89459b31761502c8973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/badf945c7c86aa03d0d5e89459b31761502c8973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fa6420035fd39fb872da5dfd17f63e98739d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fa6420035fd39fb872da5dfd17f63e98739d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fa6420035fd39fb872da5dfd17f63e98739d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fa6420035fd39fb872da5dfd17f63e98739d75/comments", "author": null, "committer": null, "parents": [{"sha": "145836925d8c2f944add7dca7c6ea1629778a8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145836925d8c2f944add7dca7c6ea1629778a8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145836925d8c2f944add7dca7c6ea1629778a8b3"}], "stats": {"total": 299, "additions": 239, "deletions": 60}, "files": [{"sha": "b4821f7863297a26a04b35627c929ef3845faffa", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -1,3 +1,51 @@\n+Mon Jun 29 09:47:33 1998  Craig Burley  <burley@gnu.org>\n+\n+\tFix 980628-*.f:\n+\t* bld.h: New `pad' field and accessor macros for\n+\tACCTER, ARRTER, and CONTER ops.\n+\t* bld.c (ffebld_new_accter, ffebld_new_arrter,\n+\tffebld_new_conter_with_orig): Initialize `pad' field\n+\tto zero.\n+\t* com.c (ffecom_transform_common_): Include initial\n+\tpadding (aka modulo aka offset) in size calculation.\n+\tCopy initial padding value into FFE initialization expression\n+\tso the GBE transformation of that expression includes it.\n+\tMake array low bound 0 instead of 1, for consistency.\n+\t(ffecom_transform_equiv_): Include initial\n+\tpadding (aka modulo aka offset) in size calculation.\n+\tCopy initial padding value into FFE initialization expression\n+\tso the GBE transformation of that expression includes it.\n+\tMake array low bound 0 instead of 1, for consistency.\n+\t(ffecom_expr_, case FFEBLD_opACCTER): Delete unused `size'\n+\tvariable.\n+\tTrack destination offset separately, allowing for\n+\tinitial padding.\n+\tDon't bother setting initial PURPOSE offset if zero.\n+\tInclude initial padding in size calculation.\n+\t(ffecom_expr_, case FFEBLD_opARRTER): Allow for\n+\tinitial padding.\n+\tInclude initial padding in size calculation.\n+\tMake array low bound 0 instead of 1, for consistency.\n+\t(ffecom_finish_global_): Make array low bound 0 instead\n+\tof 1, for consistency.\n+\t(ffecom_notify_init_storage): Copy `pad' field from old\n+\tACCTER to new ARRTER.\n+\t(ffecom_notify_init_symbol): Ditto.\n+\t* data.c (ffedata_gather_): Initialize `pad' field in new\n+\tARRTER to 0.\n+\t(ffedata_value_): Ditto.\n+\t* equiv.c (ffeequiv_layout_local_): When lowering start\n+\tof equiv area, extend lowering to maintain needed alignment.\n+\t* target.c (ffetarget_align): Handle negative offset correctly.\n+\n+\t* global.c (ffeglobal_pad_common): Warn about non-zero\n+\tpadding only the first time its seen.\n+\tIf new padding larger than old, update old.\n+\t(ffeglobal_save_common): Use correct type for size throughout.\n+\t* global.h: Use correct type for size throughout.\n+\t(ffeglobal_common_pad): New macro.\n+\t(ffeglobal_pad): Delete this unused and broken macro.\n+\n Fri Jun 26 11:54:19 1998  Craig Burley  <burley@gnu.org>\n \n \t* g77spec.c (lang_specific_driver): Put `-lg2c' in"}, {"sha": "6e756928919921b9bc0984a706e5d87bc53bce76", "filename": "gcc/f/bld.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -5507,6 +5507,7 @@ ffebld_new_accter (ffebldConstantArray a, ffebit b)\n   x->op = FFEBLD_opACCTER;\n   x->u.accter.array = a;\n   x->u.accter.bits = b;\n+  x->u.accter.pad = 0;\n   return x;\n }\n \n@@ -5529,6 +5530,7 @@ ffebld_new_arrter (ffebldConstantArray a, ffetargetOffset size)\n   x->op = FFEBLD_opARRTER;\n   x->u.arrter.array = a;\n   x->u.arrter.size = size;\n+  x->u.arrter.pad = 0;\n   return x;\n }\n \n@@ -5550,6 +5552,7 @@ ffebld_new_conter_with_orig (ffebldConstant c, ffebld o)\n   x->op = FFEBLD_opCONTER;\n   x->u.conter.expr = c;\n   x->u.conter.orig = o;\n+  x->u.conter.pad = 0;\n   return x;\n }\n "}, {"sha": "d3b613efac24aa986b03bb1789315bd38c0080c1", "filename": "gcc/f/bld.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -418,18 +418,21 @@ struct _ffebld_\n \t  {\n \t    ffebldConstant expr;\n \t    ffebld orig;\t/* Original expression, or NULL if none. */\n+\t    ffetargetAlign pad;\t/* Initial padding (for DATA, etc.). */\n \t  }\n \tconter;\n \tstruct\n \t  {\n \t    ffebldConstantArray array;\n \t    ffetargetOffset size;\n+\t    ffetargetAlign pad;\t/* Initial padding (for DATA, etc.). */\n \t  }\n \tarrter;\n \tstruct\n \t  {\n \t    ffebldConstantArray array;\n \t    ffebit bits;\n+\t    ffetargetAlign pad;\t/* Initial padding (for DATA, etc.). */\n \t  }\n \taccter;\n \tstruct\n@@ -732,13 +735,17 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n \n #define ffebld_accter(b) ((b)->u.accter.array)\n #define ffebld_accter_bits(b) ((b)->u.accter.bits)\n+#define ffebld_accter_pad(b) ((b)->u.accter.pad)\n #define ffebld_accter_set_bits(b,bt) ((b)->u.accter.bits = (bt))\n+#define ffebld_accter_set_pad(b,p) ((b)->u.accter.pad = (p))\n #define ffebld_accter_size(b) ffebit_size((b)->u.accter.bits)\n #define ffebld_append_item(b,i) (**(b) = ffebld_new_item((i),NULL),\t      \\\n \t\t\t\t *(b) = &((**(b))->u.item.trail))\n #define ffebld_arity(b) ffebld_arity_op(ffebld_op(b))\n #define ffebld_arity_op(o) (ffebld_arity_op_[o])\n #define ffebld_arrter(b) ((b)->u.arrter.array)\n+#define ffebld_arrter_pad(b) ((b)->u.arrter.pad)\n+#define ffebld_arrter_set_pad(b,p) ((b)->u.arrter.pad = (p))\n #define ffebld_arrter_set_size(b,s) ((b)->u.arrter.size = (s))\n #define ffebld_arrter_size(b) ((b)->u.arrter.size)\n #if FFEBLD_whereconstCURRENT_ == FFEBLD_whereconstPROGUNIT_\n@@ -827,7 +834,9 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_constant_union(c) ((c)->u)\n #define ffebld_conter(b) ((b)->u.conter.expr)\n #define ffebld_conter_orig(b) ((b)->u.conter.orig)\n+#define ffebld_conter_pad(b) ((b)->u.conter.pad)\n #define ffebld_conter_set_orig(b,o) ((b)->u.conter.orig = (o))\n+#define ffebld_conter_set_pad(b,p) ((b)->u.conter.pad = (p))\n #define ffebld_copy(b) (b)\t/* ~~~Someday really make a copy. */\n #define ffebld_cu_ptr_typeless(u) &(u).typeless\n #define ffebld_cu_ptr_hollerith(u) &(u).hollerith"}, {"sha": "e6e4f6ec33b23edac5d773f60a6df890a82124a4", "filename": "gcc/f/com.c", "status": "modified", "additions": 100, "deletions": 21, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -2771,10 +2771,12 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \tffebitCount i;\n \tffebit bits = ffebld_accter_bits (expr);\n \tffetargetOffset source_offset = 0;\n-\tsize_t size;\n+\tffetargetOffset dest_offset = ffebld_accter_pad (expr);\n \ttree purpose;\n \n-\tsize = ffetype_size (ffeinfo_type (bt, kt));\n+\tassert (dest_offset == 0\n+\t\t|| (bt == FFEINFO_basictypeCHARACTER\n+\t\t    && kt == FFEINFO_kindtypeCHARACTER1));\n \n \tlist = item = NULL;\n \tfor (;;)\n@@ -2797,8 +2799,9 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \n \t\t    t = ffecom_constantunion (&cu, bt, kt, tree_type);\n \n-\t\t    if (i == 0)\n-\t\t      purpose = build_int_2 (source_offset, 0);\n+\t\t    if (i == 0\n+\t\t\t&& dest_offset != 0)\n+\t\t      purpose = build_int_2 (dest_offset, 0);\n \t\t    else\n \t\t      purpose = NULL_TREE;\n \n@@ -2812,10 +2815,12 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t\t  }\n \t      }\n \t    source_offset += length;\n+\t    dest_offset += length;\n \t  }\n       }\n \n-      item = build_int_2 (ffebld_accter_size (expr), 0);\n+      item = build_int_2 ((ffebld_accter_size (expr)\n+\t\t\t   + ffebld_accter_pad (expr)) - 1, 0);\n       ffebit_kill (ffebld_accter_bits (expr));\n       TREE_TYPE (item) = ffecom_integer_type_node;\n       item\n@@ -2833,7 +2838,18 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n       {\n \tffetargetOffset i;\n \n-\tlist = item = NULL_TREE;\n+\tlist = NULL_TREE;\n+\tif (ffebld_arrter_pad (expr) == 0)\n+\t  item = NULL_TREE;\n+\telse\n+\t  {\n+\t    assert (bt == FFEINFO_basictypeCHARACTER\n+\t\t    && kt == FFEINFO_kindtypeCHARACTER1);\n+\n+\t    /* Becomes PURPOSE first time through loop.  */\n+\t    item = build_int_2 (ffebld_arrter_pad (expr), 0);\n+\t  }\n+\n \tfor (i = 0; i < ffebld_arrter_size (expr); ++i)\n \t  {\n \t    ffebldConstantUnion cu\n@@ -2842,7 +2858,8 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t    t = ffecom_constantunion (&cu, bt, kt, tree_type);\n \n \t    if (list == NULL_TREE)\n-\t      list = item = build_tree_list (NULL_TREE, t);\n+\t      /* Assume item is PURPOSE first time through loop.  */\n+\t      list = item = build_tree_list (item, t);\n \t    else\n \t      {\n \t\tTREE_CHAIN (item) = build_tree_list (NULL_TREE, t);\n@@ -2851,13 +2868,14 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t  }\n       }\n \n-      item = build_int_2 (ffebld_arrter_size (expr), 0);\n+      item = build_int_2 ((ffebld_arrter_size (expr)\n+\t\t\t  + ffebld_arrter_pad (expr)) - 1, 0);\n       TREE_TYPE (item) = ffecom_integer_type_node;\n       item\n \t= build_array_type\n \t  (tree_type,\n \t   build_range_type (ffecom_integer_type_node,\n-\t\t\t     ffecom_integer_one_node,\n+\t\t\t     ffecom_integer_zero_node,\n \t\t\t     item));\n       list = build (CONSTRUCTOR, item, NULL_TREE, list);\n       TREE_CONSTANT (list) = 1;\n@@ -6654,11 +6672,13 @@ ffecom_finish_global_ (ffeglobal global)\n \n   /* Give the array a size now.  */\n \n-  size = build_int_2 (ffeglobal_common_size (global), 0);\n+  size = build_int_2 ((ffeglobal_common_size (global)\n+\t\t      + ffeglobal_common_pad (global)) - 1,\n+\t\t      0);\n \n   cbtype = TREE_TYPE (cbt);\n   TYPE_DOMAIN (cbtype) = build_range_type (integer_type_node,\n-\t\t\t\t\t   integer_one_node,\n+\t\t\t\t\t   integer_zero_node,\n \t\t\t\t\t   size);\n   if (!TREE_TYPE (size))\n     TREE_TYPE (size) = TYPE_DOMAIN (cbtype);\n@@ -9199,6 +9219,7 @@ ffecom_transform_common_ (ffesymbol s)\n   tree cbt;\n   tree cbtype;\n   tree init;\n+  tree high;\n   bool is_init = ffestorag_is_init (st);\n \n   assert (st != NULL);\n@@ -9231,7 +9252,30 @@ ffecom_transform_common_ (ffesymbol s)\n     {\n       if (ffestorag_init (st) != NULL)\n \t{\n-\t  init = ffecom_expr (ffestorag_init (st));\n+\t  ffebld sexp;\n+\n+\t  /* Set the padding for the expression, so ffecom_expr\n+\t     knows to insert that many zeros.  */\n+\t  switch (ffebld_op (sexp = ffestorag_init (st)))\n+\t    {\n+\t    case FFEBLD_opCONTER:\n+\t      ffebld_conter_set_pad (sexp, ffestorag_modulo (st));\n+\t      break;\n+\n+\t    case FFEBLD_opARRTER:\n+\t      ffebld_arrter_set_pad (sexp, ffestorag_modulo (st));\n+\t      break;\n+\n+\t    case FFEBLD_opACCTER:\n+\t      ffebld_accter_set_pad (sexp, ffestorag_modulo (st));\n+\t      break;\n+\n+\t    default:\n+\t      assert (\"bad op for cmn init (pad)\" == NULL);\n+\t      break;\n+\t    }\n+\n+\t  init = ffecom_expr (sexp);\n \t  if (init == error_mark_node)\n \t    {\t\t\t/* Hopefully the back end complained! */\n \t      init = NULL_TREE;\n@@ -9250,13 +9294,16 @@ ffecom_transform_common_ (ffesymbol s)\n \n   /* cbtype must be permanently allocated!  */\n \n+  /* Allocate the MAX of the areas so far, seen filewide.  */\n+  high = build_int_2 ((ffeglobal_common_size (g)\n+\t\t       + ffeglobal_common_pad (g)) - 1, 0);\n+  TREE_TYPE (high) = ffecom_integer_type_node;\n+\n   if (init)\n     cbtype = build_array_type (char_type_node,\n \t\t\t       build_range_type (integer_type_node,\n-\t\t\t\t\t\t integer_one_node,\n-\t\t\t\t\t\t build_int_2\n-\t\t\t\t\t\t (ffeglobal_common_size (g),\n-\t\t\t\t\t\t  0)));\n+\t\t\t\t\t\t integer_zero_node,\n+\t\t\t\t\t\t high));\n   else\n     cbtype = build_array_type (char_type_node, NULL_TREE);\n \n@@ -9308,7 +9355,8 @@ ffecom_transform_common_ (ffesymbol s)\n \t\t\t      DECL_SIZE (cbt),\n \t\t\t      size_int (BITS_PER_UNIT));\n       assert (TREE_INT_CST_HIGH (size_tree) == 0);\n-      assert (TREE_INT_CST_LOW (size_tree) == ffeglobal_common_size (g));\n+      assert (TREE_INT_CST_LOW (size_tree)\n+\t      == ffeglobal_common_size (g) + ffeglobal_common_pad (g));\n     }\n \n   ffeglobal_set_hook (g, cbt);\n@@ -9346,7 +9394,30 @@ ffecom_transform_equiv_ (ffestorag eqst)\n     {\n       if (ffestorag_init (eqst) != NULL)\n \t{\n-\t  init = ffecom_expr (ffestorag_init (eqst));\n+\t  ffebld sexp;\n+\n+\t  /* Set the padding for the expression, so ffecom_expr\n+\t     knows to insert that many zeros.  */\n+\t  switch (ffebld_op (sexp = ffestorag_init (eqst)))\n+\t    {\n+\t    case FFEBLD_opCONTER:\n+\t      ffebld_conter_set_pad (sexp, ffestorag_modulo (eqst));\n+\t      break;\n+\n+\t    case FFEBLD_opARRTER:\n+\t      ffebld_arrter_set_pad (sexp, ffestorag_modulo (eqst));\n+\t      break;\n+\n+\t    case FFEBLD_opACCTER:\n+\t      ffebld_accter_set_pad (sexp, ffestorag_modulo (eqst));\n+\t      break;\n+\n+\t    default:\n+\t      assert (\"bad op for eqv init (pad)\" == NULL);\n+\t      break;\n+\t    }\n+\n+\t  init = ffecom_expr (sexp);\n \t  if (init == error_mark_node)\n \t    init = NULL_TREE;\t/* Hopefully the back end complained! */\n \t}\n@@ -9365,12 +9436,13 @@ ffecom_transform_equiv_ (ffestorag eqst)\n \n   yes = suspend_momentary ();\n \n-  high = build_int_2 (ffestorag_size (eqst), 0);\n+  high = build_int_2 ((ffestorag_size (eqst)\n+\t\t       + ffestorag_modulo (eqst)) - 1, 0);\n   TREE_TYPE (high) = ffecom_integer_type_node;\n \n   eqtype = build_array_type (char_type_node,\n \t\t\t     build_range_type (ffecom_integer_type_node,\n-\t\t\t\t\t       ffecom_integer_one_node,\n+\t\t\t\t\t       ffecom_integer_zero_node,\n \t\t\t\t\t       high));\n \n   eqt = build_decl (VAR_DECL,\n@@ -9429,7 +9501,8 @@ ffecom_transform_equiv_ (ffestorag eqst)\n \t\t\t    DECL_SIZE (eqt),\n \t\t\t    size_int (BITS_PER_UNIT));\n     assert (TREE_INT_CST_HIGH (size_tree) == 0);\n-    assert (TREE_INT_CST_LOW (size_tree) == ffestorag_size (eqst));\n+    assert (TREE_INT_CST_LOW (size_tree)\n+\t    == ffestorag_size (eqst) + ffestorag_modulo (eqst));\n   }\n \n   ffestorag_set_hook (eqst, eqt);\n@@ -12842,6 +12915,7 @@ ffecom_notify_init_storage (ffestorag st)\n   ffebld init;\t\t\t/* The initialization expression. */\n #if 0 && FFECOM_targetCURRENT == FFECOM_targetGCC\n   ffetargetOffset size;\t\t/* The size of the entity. */\n+  ffetargetAlign pad;\t\t/* Its initial padding. */\n #endif\n \n   if (ffestorag_init (st) == NULL)\n@@ -12854,10 +12928,12 @@ ffecom_notify_init_storage (ffestorag st)\n #if 0 && FFECOM_targetCURRENT == FFECOM_targetGCC\n       /* For GNU backend, just turn ACCTER into ARRTER and proceed. */\n       size = ffebld_accter_size (init);\n+      pad = ffebld_accter_pad (init);\n       ffebit_kill (ffebld_accter_bits (init));\n       ffebld_set_op (init, FFEBLD_opARRTER);\n       ffebld_set_arrter (init, ffebld_accter (init));\n       ffebld_arrter_set_size (init, size);\n+      ffebld_arrter_set_pad (init, size);\n #endif\n \n #if FFECOM_TWOPASS\n@@ -12928,6 +13004,7 @@ ffecom_notify_init_symbol (ffesymbol s)\n   ffebld init;\t\t\t/* The initialization expression. */\n #if 0 && FFECOM_targetCURRENT == FFECOM_targetGCC\n   ffetargetOffset size;\t\t/* The size of the entity. */\n+  ffetargetAlign pad;\t\t/* Its initial padding. */\n #endif\n \n   if (ffesymbol_storage (s) == NULL)\n@@ -12943,10 +13020,12 @@ ffecom_notify_init_symbol (ffesymbol s)\n #if 0 && FFECOM_targetCURRENT == FFECOM_targetGCC\n       /* For GNU backend, just turn ACCTER into ARRTER and proceed. */\n       size = ffebld_accter_size (init);\n+      pad = ffebld_accter_pad (init);\n       ffebit_kill (ffebld_accter_bits (init));\n       ffebld_set_op (init, FFEBLD_opARRTER);\n       ffebld_set_arrter (init, ffebld_accter (init));\n       ffebld_arrter_set_size (init, size);\n+      ffebld_arrter_set_pad (init, size);\n #endif\n \n #if FFECOM_TWOPASS"}, {"sha": "a8acd5c64cdd06710471fd437abf1da7bb5f8ecc", "filename": "gcc/f/data.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fdata.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -1276,6 +1276,7 @@ ffedata_gather_ (ffestorag mst, ffestorag st)\n \t\t\t     ffebld_accter (ffestorag_init (mst)));\n \t  ffebld_arrter_set_size (ffestorag_init (mst),\n \t\t\t\t  ffedata_storage_size_);\n+\t  ffebld_arrter_set_pad (ffestorag_init (mst), 0);\n \t  ffecom_notify_init_storage (mst);\n \t}\n \n@@ -1316,6 +1317,7 @@ ffedata_gather_ (ffestorag mst, ffestorag st)\n \t\t\t     ffebld_accter (ffestorag_init (mst)));\n \t  ffebld_arrter_set_size (ffestorag_init (mst),\n \t\t\t\t  ffedata_storage_size_);\n+\t  ffebld_arrter_set_pad (ffestorag_init (mst), 0);\n \t  ffecom_notify_init_storage (mst);\n \t}\n \n@@ -1377,6 +1379,7 @@ ffedata_gather_ (ffestorag mst, ffestorag st)\n \t\t\t     ffebld_accter (ffestorag_init (mst)));\n \t  ffebld_arrter_set_size (ffestorag_init (mst),\n \t\t\t\t  ffedata_storage_size_);\n+\t  ffebld_arrter_set_pad (ffestorag_init (mst), 0);\n \t  ffecom_notify_init_storage (mst);\n \t}\n \n@@ -1658,6 +1661,8 @@ ffedata_value_ (ffebld value, ffelexToken token)\n \t\t ffebld_accter (ffestorag_init (ffedata_storage_)));\n \t      ffebld_arrter_set_size (ffestorag_init (ffedata_storage_),\n \t\t\t\t      ffedata_storage_size_);\n+\t      ffebld_arrter_set_pad (ffestorag_init (ffedata_storage_),\n+\t\t\t\t     0);\n \t      ffecom_notify_init_storage (ffedata_storage_);\n \t    }\n \t}\n@@ -1794,6 +1799,7 @@ ffedata_value_ (ffebld value, ffelexToken token)\n \t\t\t  ffebld_accter (ffesymbol_init (ffedata_symbol_)));\n \t  ffebld_arrter_set_size (ffesymbol_init (ffedata_symbol_),\n \t\t\t\t  ffedata_symbolsize_);\n+\t  ffebld_arrter_set_pad (ffestorag_init (ffedata_symbol_), 0);\n \t  ffecom_notify_init_symbol (ffedata_symbol_);\n \t}\n     }"}, {"sha": "9fd856bd0244cde2204f692c0ba77eea917cc546", "filename": "gcc/f/equiv.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fequiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fequiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fequiv.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -435,18 +435,26 @@ ffeequiv_layout_local_ (ffeequiv eq)\n \t\t{\n \t\t  ffetargetOffset new_size;\n \n+\t\t  /* First, calculate the initial padding necessary\n+\t\t     to preserve the current alignment/modulo requirements\n+\t\t     for the storage area.  */\n+\t\t  pad = (-item_offset) % ffestorag_alignment (st);\n+\t\t  if (pad != 0)\n+\t\t    pad = ffestorag_alignment (st) - pad;\n+\n \t\t  /* Increase size of equiv area to start for lower offset relative\n \t\t     to root symbol.  */\n-\n-\t\t  if (!ffetarget_offset_add (&new_size,\n-\t\t\t\t\t     ffestorag_offset (st) - item_offset,\n+\t\t  if (! ffetarget_offset_add (&new_size,\n+\t\t\t\t\t     (ffestorag_offset (st)\n+\t\t\t\t\t      - item_offset)\n+\t\t\t\t\t     + pad,\n \t\t\t\t\t     ffestorag_size (st)))\n \t\t    ffetarget_offset_overflow (ffesymbol_text (s));\n \t\t  else\n \t\t    ffestorag_set_size (st, new_size);\n \n \t\t  ffestorag_set_symbol (st, item_sym);\n-\t\t  ffestorag_set_offset (st, item_offset);\n+\t\t  ffestorag_set_offset (st, item_offset - pad);\n \n #if FFEEQUIV_DEBUG\n \t\t  fprintf (stderr, \" [eq offset=%\" ffetargetOffset_f"}, {"sha": "8be7d0c4c66cdf922b40abd033d20fa4d69e345c", "filename": "gcc/f/global.c", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -437,6 +437,20 @@ ffeglobal_pad_common (ffesymbol s, ffetargetAlign pad, ffewhereLine wl,\n       g->u.common.pad = pad;\n       g->u.common.pad_where_line = ffewhere_line_use (wl);\n       g->u.common.pad_where_col = ffewhere_column_use (wc);\n+\n+      if (pad != 0)\n+\t{\n+\t  char padding[20];\n+\n+\t  sprintf (&padding[0], \"%\" ffetargetAlign_f \"u\", pad);\n+\t  ffebad_start (FFEBAD_COMMON_INIT_PAD);\n+\t  ffebad_string (ffesymbol_text (s));\n+\t  ffebad_string (padding);\n+\t  ffebad_string ((pad == 1)\n+\t\t\t ? FFECOM_SIZE_UNIT : FFECOM_SIZE_UNITS);\n+\t  ffebad_here (0, wl, wc);\n+\t  ffebad_finish ();\n+\t}\n     }\n   else\n     {\n@@ -459,22 +473,15 @@ ffeglobal_pad_common (ffesymbol s, ffetargetAlign pad, ffewhereLine wl,\n \t  ffebad_here (1, g->u.common.pad_where_line, g->u.common.pad_where_col);\n \t  ffebad_finish ();\n \t}\n-    }\n-#endif\n-\n-  if (pad != 0)\n-    {\t\t\t\t/* Warn about initial padding in common area. */\n-      char padding[20];\n \n-      sprintf (&padding[0], \"%\" ffetargetAlign_f \"u\", pad);\n-      ffebad_start (FFEBAD_COMMON_INIT_PAD);\n-      ffebad_string (ffesymbol_text (s));\n-      ffebad_string (padding);\n-      ffebad_string ((pad == 1)\n-\t\t     ? FFECOM_SIZE_UNIT : FFECOM_SIZE_UNITS);\n-      ffebad_here (0, wl, wc);\n-      ffebad_finish ();\n+      if (g->u.common.pad < pad)\n+\t{\n+\t  g->u.common.pad = pad;\n+\t  g->u.common.pad_where_line = ffewhere_line_use (wl);\n+\t  g->u.common.pad_where_col = ffewhere_column_use (wc);\n+\t}\n     }\n+#endif\n }\n \n /* Collect info for a global's argument.  */\n@@ -1424,7 +1431,7 @@ ffeglobal_save_common (ffesymbol s, bool save, ffewhereLine wl,\n /* ffeglobal_size_common -- Establish size of COMMON area\n \n    ffesymbol s;\t // the common area\n-   long size;  // size in units\n+   ffetargetOffset size;  // size in units\n    if (ffeglobal_size_common(s,size))  // new size is largest seen\n \n    In global-enabled mode, set the size if it current size isn't known or is\n@@ -1435,7 +1442,7 @@ ffeglobal_save_common (ffesymbol s, bool save, ffewhereLine wl,\n \n #if FFEGLOBAL_ENABLED\n bool\n-ffeglobal_size_common (ffesymbol s, long size)\n+ffeglobal_size_common (ffesymbol s, ffetargetOffset size)\n {\n   ffeglobal g;\n \n@@ -1452,13 +1459,18 @@ ffeglobal_size_common (ffesymbol s, long size)\n       return TRUE;\n     }\n \n-  if ((g->u.common.size < size) && (g->tick > 0) && (g->tick < ffe_count_2))\n+  if ((g->tick > 0) && (g->tick < ffe_count_2)\n+      && (g->u.common.size < size))\n     {\n       char oldsize[40];\n       char newsize[40];\n \n-      sprintf (&oldsize[0], \"%ld\", g->u.common.size);\n-      sprintf (&newsize[0], \"%ld\", size);\n+      /* Common block initialized in a previous program unit, which\n+\t effectively freezes its size, but now the program is trying\n+\t to enlarge it.  */\n+\n+      sprintf (&oldsize[0], \"%\" ffetargetOffset_f \"d\", g->u.common.size);\n+      sprintf (&newsize[0], \"%\" ffetargetOffset_f \"d\", size);\n \n       ffebad_start (FFEBAD_COMMON_ENLARGED);\n       ffebad_string (ffesymbol_text (s));\n@@ -1490,8 +1502,8 @@ ffeglobal_size_common (ffesymbol s, long size)\n \t that way.  Warnings about differing sizes must therefore\n \t always be issued.  */\n \n-      sprintf (&oldsize[0], \"%ld\", g->u.common.size);\n-      sprintf (&newsize[0], \"%ld\", size);\n+      sprintf (&oldsize[0], \"%\" ffetargetOffset_f \"d\", g->u.common.size);\n+      sprintf (&newsize[0], \"%\" ffetargetOffset_f \"d\", size);\n \n       ffebad_start (FFEBAD_COMMON_DIFF_SIZE);\n       ffebad_string (ffesymbol_text (s));\n@@ -1513,6 +1525,7 @@ ffeglobal_size_common (ffesymbol s, long size)\n       g->u.common.size = size;\n       return TRUE;\n     }\n+\n   return FALSE;\n }\n "}, {"sha": "38cf8d55cfc001c368df506ece217b9a4d020061", "filename": "gcc/f/global.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fglobal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fglobal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.h?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -108,7 +108,7 @@ struct _ffeglobal_\n       ffewhereLine save_where_line;\n       ffewhereColumn save_where_col;\n       bool have_size;\t\t/* Size info avail for COMMON? */\n-      long size;\t\t/* Size info for COMMON. */\n+      ffetargetOffset size;\t/* Size info for COMMON. */\n       bool blank;\t\t/* TRUE if blank COMMON. */\n     } common;\n     struct {\n@@ -148,7 +148,7 @@ void ffeglobal_ref_intrinsic (ffesymbol s, ffelexToken t, bool explicit);\n bool ffeglobal_ref_progunit_ (ffesymbol s, ffelexToken t, ffeglobalType type);\n void ffeglobal_save_common (ffesymbol s, bool save, ffewhereLine wl,\n \t\t\t    ffewhereColumn wc);\n-bool ffeglobal_size_common (ffesymbol s, long size);\n+bool ffeglobal_size_common (ffesymbol s, ffetargetOffset size);\n void ffeglobal_terminate_1 (void);\n \n /* Define macros. */\n@@ -164,6 +164,7 @@ void ffeglobal_terminate_1 (void);\n #define ffeglobal_common_init(g) ((g)->tick != 0)\n #define ffeglobal_common_have_pad(g) ((g)->u.common.have_pad)\n #define ffeglobal_common_have_size(g) ((g)->u.common.have_size)\n+#define ffeglobal_common_pad(g) ((g)->u.common.pad)\n #define ffeglobal_common_size(g) ((g)->u.common.size)\n #define ffeglobal_hook(g) ((g)->hook)\n #define ffeglobal_init_0()\n@@ -178,7 +179,6 @@ void ffeglobal_terminate_1 (void);\n       ffeglobal_new_progunit_(s,t,FFEGLOBAL_typeMAIN)\n #define ffeglobal_new_subroutine(s,t) \\\n       ffeglobal_new_progunit_(s,t,FFEGLOBAL_typeSUBR)\n-#define ffeglobal_pad(g) ((g)->pad)\n #define ffeglobal_ref_blockdata(s,t) \\\n       ffeglobal_ref_progunit_(s,t,FFEGLOBAL_typeBDATA)\n #define ffeglobal_ref_external(s,t) \\"}, {"sha": "b64ba3d3d1fc420485d7c2e70363191deaa1091e", "filename": "gcc/f/news.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fnews.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fnews.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fnews.texi?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -57,6 +57,13 @@ in the SunOS4 @samp{-lm} library\n when the generated code wants to link to the one\n in @code{libf2c} (@code{libg2c}).\n \n+@item\n+@code{g77} no longer produces incorrect code\n+and initial values\n+for @samp{EQUIVALENCE} and @samp{COMMON}\n+aggregates that, due to ``unnatural'' ordering of members\n+vis-a-vis their types, require initial padding.\n+\n @item\n @code{g77} no longer crashes when compiling code\n containing specification statements such as"}, {"sha": "2244dbc1fad803485e7016052781b2db962c1a5b", "filename": "gcc/f/target.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -217,14 +217,16 @@ ffetarget_align (ffetargetAlign *updated_alignment,\n   assert (*updated_modulo < *updated_alignment);\n   assert (modulo < alignment);\n \n-  /* The easy case: similar alignment requirements. */\n-\n+  /* The easy case: similar alignment requirements.  */\n   if (*updated_alignment == alignment)\n     {\n       if (modulo > *updated_modulo)\n \tpad = alignment - (modulo - *updated_modulo);\n       else\n \tpad = *updated_modulo - modulo;\n+      if (offset < 0)\n+\t/* De-negatize offset, since % wouldn't do the expected thing.  */\n+\toffset = alignment - ((- offset) % alignment);\n       pad = (offset + pad) % alignment;\n       if (pad != 0)\n \tpad = alignment - pad;\n@@ -240,7 +242,12 @@ ffetarget_align (ffetargetAlign *updated_alignment,\n \n   cnt = ua / alignment;\n \n-  min_pad = ~(ffetargetAlign) 0;/* Set to largest value. */\n+  if (offset < 0)\n+    /* De-negatize offset, since % wouldn't do the expected thing.  */\n+    offset = ua - ((- offset) % ua);\n+\n+  /* Set to largest value.  */\n+  min_pad = ~(ffetargetAlign) 0;\n \n   /* Find all combinations of modulo values the two alignment requirements\n      have; pick the combination that results in the smallest padding\n@@ -251,21 +258,20 @@ ffetarget_align (ffetargetAlign *updated_alignment,\n     {\n       for (m = modulo, j = 0; j < cnt; m += alignment, ++j)\n \t{\n-\t  if (m > um)\t\t/* This code is similar to the \"easy case\"\n-\t\t\t\t   code above. */\n+\t  /* This code is similar to the \"easy case\" code above. */\n+\t  if (m > um)\n \t    pad = ua - (m - um);\n \t  else\n \t    pad = um - m;\n \t  pad = (offset + pad) % ua;\n-\t  if (pad != 0)\n-\t    pad = ua - pad;\n-\t  else\n-\t    {\t\t\t/* A zero pad means we've got something\n-\t\t\t\t   useful. */\n+\t  if (pad == 0)\n+\t    {\n+\t      /* A zero pad means we've got something useful.  */\n \t      *updated_alignment = ua;\n \t      *updated_modulo = um;\n \t      return 0;\n \t    }\n+\t  pad = ua - pad;\n \t  if (pad < min_pad)\n \t    {\t\t\t/* New minimum padding value. */\n \t      min_pad = pad;"}, {"sha": "fbec2902f45b07e0ec805aebd81328ceaac3eda1", "filename": "gcc/f/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fa6420035fd39fb872da5dfd17f63e98739d75/gcc%2Ff%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fversion.c?ref=a6fa6420035fd39fb872da5dfd17f63e98739d75", "patch": "@@ -1 +1 @@\n-char *ffe_version_string = \"0.5.23\";\n+char *ffe_version_string = \"0.5.24-19980629\";"}]}