{"sha": "8b9482b2d77da5b8db979845b49b3b91bcf898e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5NDgyYjJkNzdkYTViOGRiOTc5ODQ1YjQ5YjNiOTFiY2Y4OThlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-11T11:49:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-11T11:49:13Z"}, "message": "re PR libstdc++/89641 (std::atomic<T> no longer works)\n\n\tPR libstdc++/89641\n\t* include/std/atomic (atomic<T>::store, atomic<T>::load,\n\tatomic<T>::exchange, atomic<T>::compare_exchange_weak,\n\tatomic<T>::compare_exchange_strong): Cast __m or __s and __f to int.\n\t* include/bits/atomic_base.h (__atomic_base<T>::operator++,\n\t__atomic_base<T>::operator--, __atomic_base<T>::operator+=,\n\t__atomic_base<T>::operator-=, __atomic_base<T>::operator&=,\n\t__atomic_base<T>::operator|=, __atomic_base<T>::operator^=,\n\t__atomic_base<T*>::operator++, __atomic_base<T*>::operator--,\n\t__atomic_base<T*>::operator+=, __atomic_base<T*>::operator-=): Cast\n\tmemory_order_seq_cst to int.\n\nFrom-SVN: r269582", "tree": {"sha": "5f76822dbb06a25bd266e93181e836d4a1c93b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f76822dbb06a25bd266e93181e836d4a1c93b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9482b2d77da5b8db979845b49b3b91bcf898e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9482b2d77da5b8db979845b49b3b91bcf898e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9482b2d77da5b8db979845b49b3b91bcf898e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9482b2d77da5b8db979845b49b3b91bcf898e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52eba77915ed77da53928905a731840249cf45d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eba77915ed77da53928905a731840249cf45d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52eba77915ed77da53928905a731840249cf45d5"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "cee2c9d1d572aa92646e60b5e791893d57b937a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b9482b2d77da5b8db979845b49b3b91bcf898e9", "patch": "@@ -1,3 +1,17 @@\n+2019-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/89641\n+\t* include/std/atomic (atomic<T>::store, atomic<T>::load,\n+\tatomic<T>::exchange, atomic<T>::compare_exchange_weak,\n+\tatomic<T>::compare_exchange_strong): Cast __m or __s and __f to int.\n+\t* include/bits/atomic_base.h (__atomic_base<T>::operator++,\n+\t__atomic_base<T>::operator--, __atomic_base<T>::operator+=,\n+\t__atomic_base<T>::operator-=, __atomic_base<T>::operator&=,\n+\t__atomic_base<T>::operator|=, __atomic_base<T>::operator^=,\n+\t__atomic_base<T*>::operator++, __atomic_base<T*>::operator--,\n+\t__atomic_base<T*>::operator+=, __atomic_base<T*>::operator-=): Cast\n+\tmemory_order_seq_cst to int.\n+\n 2019-03-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/using.xml: Use link element instead of xref."}, {"sha": "e30caef91bf1e08b86eaadba0dec4fd86ba9fc04", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=8b9482b2d77da5b8db979845b49b3b91bcf898e9", "patch": "@@ -316,59 +316,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __int_type\n       operator++() noexcept\n-      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator++() volatile noexcept\n-      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator--() noexcept\n-      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator--() volatile noexcept\n-      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator+=(__int_type __i) noexcept\n-      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator+=(__int_type __i) volatile noexcept\n-      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator-=(__int_type __i) noexcept\n-      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator-=(__int_type __i) volatile noexcept\n-      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator&=(__int_type __i) noexcept\n-      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator&=(__int_type __i) volatile noexcept\n-      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator|=(__int_type __i) noexcept\n-      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator|=(__int_type __i) volatile noexcept\n-      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator^=(__int_type __i) noexcept\n-      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       __int_type\n       operator^=(__int_type __i) volatile noexcept\n-      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }\n+      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }\n \n       bool\n       is_lock_free() const noexcept\n@@ -652,42 +652,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __pointer_type\n       operator++() noexcept\n       { return __atomic_add_fetch(&_M_p, _M_type_size(1),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator++() volatile noexcept\n       { return __atomic_add_fetch(&_M_p, _M_type_size(1),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator--() noexcept\n       { return __atomic_sub_fetch(&_M_p, _M_type_size(1),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator--() volatile noexcept\n       { return __atomic_sub_fetch(&_M_p, _M_type_size(1),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator+=(ptrdiff_t __d) noexcept\n       { return __atomic_add_fetch(&_M_p, _M_type_size(__d),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator+=(ptrdiff_t __d) volatile noexcept\n       { return __atomic_add_fetch(&_M_p, _M_type_size(__d),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator-=(ptrdiff_t __d) noexcept\n       { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       __pointer_type\n       operator-=(ptrdiff_t __d) volatile noexcept\n       { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),\n-\t\t\t\t  memory_order_seq_cst); }\n+\t\t\t\t  int(memory_order_seq_cst)); }\n \n       bool\n       is_lock_free() const noexcept"}, {"sha": "699431e97271959380620455411dd1a90b8746b1", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9482b2d77da5b8db979845b49b3b91bcf898e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=8b9482b2d77da5b8db979845b49b3b91bcf898e9", "patch": "@@ -240,18 +240,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n-      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }\n+      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }\n \n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept\n-      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }\n+      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), int(__m)); }\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n \talignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n \t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n-\t__atomic_load(std::__addressof(_M_i), __ptr, __m);\n+\t__atomic_load(std::__addressof(_M_i), __ptr, int(__m));\n \treturn *__ptr;\n       }\n \n@@ -260,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n         alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n \t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n-\t__atomic_load(std::__addressof(_M_i), __ptr, __m);\n+\t__atomic_load(std::__addressof(_M_i), __ptr, int(__m));\n \treturn *__ptr;\n       }\n \n@@ -270,7 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n \t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n-\t\t\t  __ptr, __m);\n+\t\t\t  __ptr, int(__m));\n \treturn *__ptr;\n       }\n \n@@ -281,7 +281,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n \t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n-\t\t\t  __ptr, __m);\n+\t\t\t  __ptr, int(__m));\n \treturn *__ptr;\n       }\n \n@@ -292,7 +292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n-\t\t\t\t\t true, __s, __f);\n+\t\t\t\t\t true, int(__s), int(__f));\n       }\n \n       bool\n@@ -302,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n-\t\t\t\t\t true, __s, __f);\n+\t\t\t\t\t true, int(__s), int(__f));\n       }\n \n       bool\n@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n-\t\t\t\t\t false, __s, __f);\n+\t\t\t\t\t false, int(__s), int(__f));\n       }\n \n       bool\n@@ -334,7 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __atomic_compare_exchange(std::__addressof(_M_i),\n \t\t\t\t\t std::__addressof(__e),\n \t\t\t\t\t std::__addressof(__i),\n-\t\t\t\t\t false, __s, __f);\n+\t\t\t\t\t false, int(__s), int(__f));\n       }\n \n       bool"}]}