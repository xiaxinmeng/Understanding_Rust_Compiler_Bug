{"sha": "6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhZDRlMTcwOWVjNzNiMGM3OTc4ZTVmYWI5ZWQ2MjNiN2FjMDQzYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-08-15T11:14:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-08-15T11:14:01Z"}, "message": "decl2.c (mark_member_pointers): Rename to...\n\n\t* decl2.c (mark_member_pointers): Rename to...\n\t(mark_member_pointers_and_eh_tinfos): ... this one; deal with eh tinfos\n\t(lower_function): Update call.\n\t* except.c (eh_type_info): Break out from ...\n\t(build_eh_type): ... here; tinfo is already used.\n        (finish_eh_spec_block): Mark tinfos as used.\n        * semantics.c (finish_handler_params): Mark tinfo as used.\n\t* cp-tree.h(eh_type_info): Declare.\n\nFrom-SVN: r70477", "tree": {"sha": "8cd74d2974a5e98a27d6bd910f280b5e804031ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd74d2974a5e98a27d6bd910f280b5e804031ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/comments", "author": null, "committer": null, "parents": [{"sha": "68ea098a059c352835b2090a02a163f47560ef17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ea098a059c352835b2090a02a163f47560ef17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ea098a059c352835b2090a02a163f47560ef17"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "bee756c8f5d95d846e7473d9c716d3a713572d0a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "patch": "@@ -1,3 +1,14 @@\n+2003-08-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* decl2.c (mark_member_pointers): Rename to...\n+\t(mark_member_pointers_and_eh_tinfos): ... this one; deal with eh tinfos\n+\t(lower_function): Update call.\n+\t* except.c (eh_type_info): Break out from ...\n+\t(build_eh_type): ... here; tinfo is already used.\n+        (finish_eh_spec_block): Mark tinfos as used.\n+        * semantics.c (finish_handler_params): Mark tinfo as used.\n+\t* cp-tree.h(eh_type_info): Declare.\n+\n 2003-08-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (instantiate_class_template): Set location before"}, {"sha": "eae862a33800f8c5180c877855cb951c54ed4931", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "patch": "@@ -3829,6 +3829,7 @@ extern void mark_all_runtime_matches            (void);\n extern int nothrow_libfn_p\t\t\t(tree);\n extern void check_handlers\t\t\t(tree);\n extern void choose_personality_routine\t\t(enum languages);\n+extern tree eh_type_info\t\t\t(tree);\n \n /* in expr.c */\n extern rtx cxx_expand_expr\t\t\t(tree, rtx,"}, {"sha": "eb32f49378d6a7277c343414b5bc1a77fe361985", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "patch": "@@ -2562,12 +2562,49 @@ generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n /* Callgraph code does not understand the member pointers.  Mark the methods\n    referenced as used.  */\n static tree\n-mark_member_pointers (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t      void *data ATTRIBUTE_UNUSED)\n+mark_member_pointers_and_eh_handlers (tree *tp,\n+\t\t\t\t      int *walk_subtrees,\n+\t\t      \t\t      void *data ATTRIBUTE_UNUSED)\n {\n-  if (TREE_CODE (*tp) == PTRMEM_CST\n-      && TYPE_PTRMEMFUNC_P (TREE_TYPE (*tp)))\n-    cgraph_mark_needed_node (cgraph_node (PTRMEM_CST_MEMBER (*tp)), 1);\n+  /* Avoid useless walking of complex type and declaration nodes.  */\n+  if (TYPE_P (*tp) || DECL_P (*tp))\n+    {\n+      *walk_subtrees = 0;\n+      return 0;\n+    }\n+  switch (TREE_CODE (*tp))\n+    {\n+    case PTRMEM_CST:\n+      if (TYPE_PTRMEMFUNC_P (TREE_TYPE (*tp)))\n+\tcgraph_mark_needed_node (cgraph_node (PTRMEM_CST_MEMBER (*tp)), 1);\n+      break;\n+\n+    /* EH handlers will emit EH tables referencing typeinfo.  */\n+    case HANDLER:\n+      if (HANDLER_TYPE (*tp))\n+\t{\n+\t  tree tinfo = eh_type_info (HANDLER_TYPE (*tp));\n+\n+\t  cgraph_varpool_mark_needed_node (cgraph_varpool_node (tinfo));\n+\t}\n+      break;\n+\n+    case EH_SPEC_BLOCK:\n+\t{\n+\t  tree type;\n+\n+\t  for (type = EH_SPEC_RAISES ((*tp)); type;\n+\t       type = TREE_CHAIN (type))\n+\t    {\n+\t       tree tinfo = eh_type_info (TREE_VALUE (type));\n+\n+\t       cgraph_varpool_mark_needed_node (cgraph_varpool_node (tinfo));\n+\t    }\n+\t}\n+      break;\n+    default:\n+      break;\n+    }\n   return 0;\n }\n \n@@ -2576,7 +2613,8 @@ mark_member_pointers (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n void\n lower_function (tree fn)\n {\n-  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn), mark_member_pointers,\n+  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t  \t\tmark_member_pointers_and_eh_handlers,\n \t\t\t\tNULL);\n }\n "}, {"sha": "1303919de370f7e15b24ecd2572c836c743a127f", "filename": "gcc/cp/except.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "patch": "@@ -115,11 +115,9 @@ prepare_eh_type (tree type)\n   return type;\n }\n \n-/* Build the address of a typeinfo decl for use in the runtime\n-   matching field of the exception model.  */\n-\n-static tree\n-build_eh_type_type (tree type)\n+/* Return the type info for TYPE as used by EH machinery.  */\n+tree\n+eh_type_info (tree type)\n {\n   tree exp;\n \n@@ -131,12 +129,23 @@ build_eh_type_type (tree type)\n   else\n     exp = get_tinfo_decl (type);\n \n-  mark_used (exp);\n-  exp = build1 (ADDR_EXPR, ptr_type_node, exp);\n-\n   return exp;\n }\n \n+/* Build the address of a typeinfo decl for use in the runtime\n+   matching field of the exception model.  */\n+\n+static tree\n+build_eh_type_type (tree type)\n+{\n+  tree exp = eh_type_info (type);\n+\n+  if (!exp)\n+    return NULL;\n+\n+  return build1 (ADDR_EXPR, ptr_type_node, exp);\n+}\n+\n tree\n build_exc_ptr (void)\n {\n@@ -470,8 +479,13 @@ finish_eh_spec_block (tree raw_raises, tree eh_spec_block)\n   for (raises = NULL_TREE;\n        raw_raises && TREE_VALUE (raw_raises);\n        raw_raises = TREE_CHAIN (raw_raises))\n-    raises = tree_cons (NULL_TREE, prepare_eh_type (TREE_VALUE (raw_raises)),\n-\t\t\traises);\n+    {\n+      tree type = prepare_eh_type (TREE_VALUE (raw_raises));\n+      tree tinfo = eh_type_info (type);\n+\n+      mark_used (tinfo);\n+      raises = tree_cons (NULL_TREE, type, raises);\n+    }\n \n   EH_SPEC_RAISES (eh_spec_block) = raises;\n }"}, {"sha": "932bb982816500568cdd333e681b56622a1b5085", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad4e1709ec73b0c7978e5fab9ed623b7ac043b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6cad4e1709ec73b0c7978e5fab9ed623b7ac043b", "patch": "@@ -956,6 +956,8 @@ finish_handler_parms (tree decl, tree handler)\n     type = expand_start_catch_block (decl);\n \n   HANDLER_TYPE (handler) = type;\n+  if (type)\n+    mark_used (eh_type_info (type));\n }\n \n /* Finish a handler, which may be given by HANDLER.  The BLOCKs are"}]}