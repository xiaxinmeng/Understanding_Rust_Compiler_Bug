{"sha": "531ea24eef795133abdbfd4bb49e69196ea3668f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxZWEyNGVlZjc5NTEzM2FiZGJmZDRiYjQ5ZTY5MTk2ZWEzNjY4Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-11-14T14:43:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-14T14:43:14Z"}, "message": "alpha.c (output_prolog [*]): Prefix entry labels with '$' to keep them from being propogated to the object file.\n\n        * alpha.c (output_prolog [*]): Prefix entry labels with '$' to\n        keep them from being propogated to the object file.\n        (alpha_write_linkage): Likewise.\n        * alpha.md (call_vms): Likewise.\n        (call_value_vms): Likewise.\n        (unnamed osf call insns): Likewise.\n\n        * alpha.h (ASM_OUTPUT_INTERNAL_LABEL): Don't omit L from local label.\n        (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\nFrom-SVN: r16490", "tree": {"sha": "7ff8b3d62ff051ca5182786ec6bb1556b2fefc6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff8b3d62ff051ca5182786ec6bb1556b2fefc6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/531ea24eef795133abdbfd4bb49e69196ea3668f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531ea24eef795133abdbfd4bb49e69196ea3668f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531ea24eef795133abdbfd4bb49e69196ea3668f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531ea24eef795133abdbfd4bb49e69196ea3668f/comments", "author": null, "committer": null, "parents": [{"sha": "202f590eca3f213c602c3422d9506787a3aaeb66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202f590eca3f213c602c3422d9506787a3aaeb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202f590eca3f213c602c3422d9506787a3aaeb66"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "61e6835318eb42ad4594f6e291810322b9de1e54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=531ea24eef795133abdbfd4bb49e69196ea3668f", "patch": "@@ -1,5 +1,15 @@\n Fri Nov 14 07:24:20 1997  Richard Henderson  <rth@cygnus.com>\n \n+\t* alpha.c (output_prolog [*]): Prefix entry labels with '$' to\n+\tkeep them from being propogated to the object file.\n+\t(alpha_write_linkage): Likewise.\n+\t* alpha.md (call_vms): Likewise.\n+\t(call_value_vms): Likewise.\n+\t(unnamed osf call insns): Likewise.\n+\n+\t* alpha.h (ASM_OUTPUT_INTERNAL_LABEL): Don't omit L from local label.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\n \t* alpha.c (call_operand): Any reg is valid for WinNT.\n \t* alpha.md (call_nt, call_value_nt): Don't force address into $27.\n \t(anon nt calls): Add 'R' alternative."}, {"sha": "ae119f3cc989eb3547378d54c0640a0892b54f28", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=531ea24eef795133abdbfd4bb49e69196ea3668f", "patch": "@@ -2071,7 +2071,7 @@ output_prolog (file, size)\n   /* Offset during register save.  */\n   int reg_offset;\n   /* Label for the procedure entry.  */\n-  char *entry_label = (char *) alloca (strlen (alpha_function_name) + 5);\n+  char *entry_label = (char *) alloca (strlen (alpha_function_name) + 6);\n   int i;\n \n   sa_size = alpha_sa_size ();\n@@ -2084,7 +2084,7 @@ output_prolog (file, size)\n   fprintf (file, \"\\t.ent \");\n   assemble_name (file, alpha_function_name);\n   fprintf (file, \"\\n\");\n-  sprintf (entry_label, \"%s..en\", alpha_function_name);\n+  sprintf (entry_label, \"$%s..en\", alpha_function_name);\n   ASM_OUTPUT_LABEL (file, entry_label);\n   inside_function = TRUE;\n \n@@ -2138,14 +2138,15 @@ output_prolog (file, size)\n \n       fprintf (file, \"\\tlda $22,4096($30)\\n\");\n \n+      fputc ('$', file);\n       assemble_name (file, alpha_function_name);\n       fprintf (file, \"..sc:\\n\");\n \n       fprintf (file, \"\\tstq $31,-8192($22)\\n\");\n       fprintf (file, \"\\tsubq $23,1,$23\\n\");\n       fprintf (file, \"\\tlda $22,-8192($22)\\n\");\n \n-      fprintf (file, \"\\tbne $23,\");\n+      fprintf (file, \"\\tbne $23,$\");\n       assemble_name (file, alpha_function_name);\n       fprintf (file, \"..sc\\n\");\n \n@@ -2220,7 +2221,7 @@ output_prolog (file, size)\n   link_section ();\n   fprintf (file, \"\\t.align 3\\n\");\n   ASM_OUTPUT_LABEL (file, alpha_function_name);\n-  fprintf (file, \"\\t.pdesc \");\n+  fprintf (file, \"\\t.pdesc $\");\n   assemble_name (file, alpha_function_name);\n   fprintf (file, \"..en,%s\\n\", is_stack_procedure ? \"stack\" : \"reg\");\n   alpha_need_linkage (alpha_function_name, 1);\n@@ -2446,6 +2447,7 @@ output_prolog (file, size)\n \tfprintf (file, \"\\tldgp $29,0($27)\\n\");\n \n       /* Put a label after the GP load so we can enter the function at it.  */\n+      fputc ('$', file);\n       assemble_name (file, alpha_function_name);\n       fprintf (file, \"..ng:\\n\");\n     }\n@@ -2493,14 +2495,15 @@ output_prolog (file, size)\n \n       fprintf (file, \"\\tlda $4,4096($30)\\n\");\n \n+      fputc ('$', file);\n       assemble_name (file, alpha_function_name);\n       fprintf (file, \"..sc:\\n\");\n \n       fprintf (file, \"\\tstq $31,-8192($4)\\n\");\n       fprintf (file, \"\\tsubq $5,1,$5\\n\");\n       fprintf (file, \"\\tlda $4,-8192($4)\\n\");\n \n-      fprintf (file, \"\\tbne $5,\");\n+      fprintf (file, \"\\tbne $5,$\");\n       assemble_name (file, alpha_function_name);\n       fprintf (file, \"..sc\\n\");\n \n@@ -3310,11 +3313,11 @@ alpha_write_linkage (stream)\n \t  || ! TREE_SYMBOL_REFERENCED (get_identifier (lptr->name)))\n \tcontinue;\n \n-      fprintf (stream, \"%s..lk:\\n\", lptr->name);\n+      fprintf (stream, \"$%s..lk:\\n\", lptr->name);\n       if (lptr->kind == KIND_LOCAL)   \n \t{\n \t  /*  Local and used, build linkage pair.  */\n-\t  fprintf (stream, \"\\t.quad %s..en\\n\", lptr->name);\n+\t  fprintf (stream, \"\\t.quad $%s..en\\n\", lptr->name);\n \t  fprintf (stream, \"\\t.quad %s\\n\", lptr->name);\n \t}\n       else"}, {"sha": "34c96d8d352bd9012c65d01209acebac02d3e91e", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=531ea24eef795133abdbfd4bb49e69196ea3668f", "patch": "@@ -1850,10 +1850,7 @@ literal_section ()\t\t\t\t\t\t\\\n    PREFIX is the class of label and NUM is the number within the class.  */\n \n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n-  if ((PREFIX)[0] == 'L')\t\t\t\t\\\n-    fprintf (FILE, \"$%s%d:\\n\", & (PREFIX)[1], NUM + 32); \\\n-  else\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM);\n+  fprintf (FILE, \"$%s%d:\\n\", PREFIX, NUM)\n \n /* This is how to output a label for a jump table.  Arguments are the same as\n    for ASM_OUTPUT_INTERNAL_LABEL, except the insn for the jump table is\n@@ -1868,10 +1865,7 @@ literal_section ()\t\t\t\t\t\t\\\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  if ((PREFIX)[0] == 'L')\t\t\t\t\\\n-    sprintf (LABEL, \"*$%s%d\", & (PREFIX)[1], NUM + 32);\t\\\n-  else\t\t\t\t\t\t\t\\\n-    sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n+  sprintf (LABEL, \"*$%s%d\", PREFIX, NUM)\n \n /* Check a floating-point value for validity for a particular machine mode.  */\n "}, {"sha": "bd4f43d09098c4766f594a5e89d20f5007f3de83", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531ea24eef795133abdbfd4bb49e69196ea3668f/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=531ea24eef795133abdbfd4bb49e69196ea3668f", "patch": "@@ -3257,12 +3257,13 @@\n     {\n       extern char *savealloc ();\n       char *symbol = XSTR (operands[0], 0);\n-      char *linksym = savealloc (strlen (symbol) + 5);\n+      char *linksym = savealloc (strlen (symbol) + 6);\n       rtx linkage;\n \n       alpha_need_linkage (symbol, 0);\n \n-      strcpy (linksym, symbol);\n+      linksym[0] = '$';\n+      strcpy (linksym+1, symbol);\n       strcat (linksym, \\\"..lk\\\");\n       linkage = gen_rtx (SYMBOL_REF, Pmode, linksym);\n \n@@ -3361,11 +3362,12 @@\n     {\n       extern char *savealloc ();\n       char *symbol = XSTR (operands[1], 0);\n-      char *linksym = savealloc (strlen (symbol) + 5);\n+      char *linksym = savealloc (strlen (symbol) + 6);\n       rtx linkage;\n \n       alpha_need_linkage (symbol, 0);\n-      strcpy (linksym, symbol);\n+      linksym[0] = '$';\n+      strcpy (linksym+1, symbol);\n       strcat (linksym, \\\"..lk\\\");\n       linkage = gen_rtx (SYMBOL_REF, Pmode, linksym);\n \n@@ -3391,7 +3393,7 @@\n   \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS\"\n   \"@\n    jsr $26,($27),0\\;ldgp $29,0($26)\n-   bsr $26,%0..ng\n+   bsr $26,$%0..ng\n    jsr $26,%0\\;ldgp $29,0($26)\"\n   [(set_attr \"type\" \"jsr\")])\n       \n@@ -3428,7 +3430,7 @@\n   \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS\"\n   \"@\n    jsr $26,($27),0\\;ldgp $29,0($26)\n-   bsr $26,%1..ng\n+   bsr $26,$%1..ng\n    jsr $26,%1\\;ldgp $29,0($26)\"\n   [(set_attr \"type\" \"jsr\")])\n "}]}