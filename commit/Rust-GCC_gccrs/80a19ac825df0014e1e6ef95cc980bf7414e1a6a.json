{"sha": "80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBhMTlhYzgyNWRmMDAxNGUxZTZlZjk1Y2M5ODBiZjc0MTRlMWE2YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-02-24T06:32:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-02-24T06:32:16Z"}, "message": "cp-demangle.c (d_print_comp): Don't push more than one of the same CV-qualifier on the top of the stack.\n\n\t* cp-demangle.c (d_print_comp) [RESTRICT, VOLATILE, CONST]: Don't\n\tpush more than one of the same CV-qualifier on the top of the\n\tstack.\n\t(d_print_comp) [ARRAY_TYPE]: If the array itself is CV-qualified,\n\tmove the CV-qualifiers to apply to the element type instead.\n\t(d_print_array_type): When checking the modifiers, keep looking\n\tpast ones which have been printed already.\n\t* testsuite/demangle-expected: Add three test cases.\n\nFrom-SVN: r78354", "tree": {"sha": "d92e6da7e262ab02a8de7cc9f2be4dd030961202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92e6da7e262ab02a8de7cc9f2be4dd030961202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/comments", "author": null, "committer": null, "parents": [{"sha": "e8ed4ac21eab7729d8fc57f313317c5a414f78ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ed4ac21eab7729d8fc57f313317c5a414f78ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ed4ac21eab7729d8fc57f313317c5a414f78ce"}], "stats": {"total": 136, "additions": 115, "deletions": 21}, "files": [{"sha": "aa881733ccc2bd00bd9494774c4370f9713464ef", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "patch": "@@ -1,3 +1,14 @@\n+2004-02-24  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* cp-demangle.c (d_print_comp) [RESTRICT, VOLATILE, CONST]: Don't\n+\tpush more than one of the same CV-qualifier on the top of the\n+\tstack.\n+\t(d_print_comp) [ARRAY_TYPE]: If the array itself is CV-qualified,\n+\tmove the CV-qualifiers to apply to the element type instead.\n+\t(d_print_array_type): When checking the modifiers, keep looking\n+\tpast ones which have been printed already.\n+\t* testsuite/demangle-expected: Add three test cases.\n+\n 2004-02-23  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* cp-demangle.c (__cxa_demangle): Adjust last patch to handle"}, {"sha": "18735becca2ad1740ce30998043ae8bf49508500", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 86, "deletions": 21, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "patch": "@@ -3050,6 +3050,30 @@ d_print_comp (dpi, dc)\n     case DEMANGLE_COMPONENT_RESTRICT:\n     case DEMANGLE_COMPONENT_VOLATILE:\n     case DEMANGLE_COMPONENT_CONST:\n+      {\n+\tstruct d_print_mod *pdpm;\n+\n+\t/* When printing arrays, it's possible to have cases where the\n+\t   same CV-qualifier gets pushed on the stack multiple times.\n+\t   We only need to print it once.  */\n+\n+\tfor (pdpm = dpi->modifiers; pdpm != NULL; pdpm = pdpm->next)\n+\t  {\n+\t    if (! pdpm->printed)\n+\t      {\n+\t\tif (pdpm->mod->type != DEMANGLE_COMPONENT_RESTRICT\n+\t\t    && pdpm->mod->type != DEMANGLE_COMPONENT_VOLATILE\n+\t\t    && pdpm->mod->type != DEMANGLE_COMPONENT_CONST)\n+\t\t  break;\n+\t\tif (pdpm->mod->type == dc->type)\n+\t\t  {\n+\t\t    d_print_comp (dpi, d_left (dc));\n+\t\t    return;\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n+      /* Fall through.  */\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n@@ -3125,24 +3149,65 @@ d_print_comp (dpi, dc)\n \n     case DEMANGLE_COMPONENT_ARRAY_TYPE:\n       {\n-\tstruct d_print_mod dpm;\n+\tstruct d_print_mod *hold_modifiers;\n+\tstruct d_print_mod adpm[4];\n+\tunsigned int i;\n+\tstruct d_print_mod *pdpm;\n \n \t/* We must pass this type down as a modifier in order to print\n-\t   multi-dimensional arrays correctly.  */\n+\t   multi-dimensional arrays correctly.  If the array itself is\n+\t   CV-qualified, we act as though the element type were\n+\t   CV-qualified.  We do this by copying the modifiers down\n+\t   rather than fiddling pointers, so that we don't wind up\n+\t   with a d_print_mod higher on the stack pointing into our\n+\t   stack frame after we return.  */\n \n-\tdpm.next = dpi->modifiers;\n-\tdpi->modifiers = &dpm;\n-\tdpm.mod = dc;\n-\tdpm.printed = 0;\n-\tdpm.templates = dpi->templates;\n+\thold_modifiers = dpi->modifiers;\n+\n+\tadpm[0].next = hold_modifiers;\n+\tdpi->modifiers = &adpm[0];\n+\tadpm[0].mod = dc;\n+\tadpm[0].printed = 0;\n+\tadpm[0].templates = dpi->templates;\n+\n+\ti = 1;\n+\tpdpm = hold_modifiers;\n+\twhile (pdpm != NULL\n+\t       && (pdpm->mod->type == DEMANGLE_COMPONENT_RESTRICT\n+\t\t   || pdpm->mod->type == DEMANGLE_COMPONENT_VOLATILE\n+\t\t   || pdpm->mod->type == DEMANGLE_COMPONENT_CONST))\n+\t  {\n+\t    if (! pdpm->printed)\n+\t      {\n+\t\tif (i >= sizeof adpm / sizeof adpm[0])\n+\t\t  {\n+\t\t    d_print_error (dpi);\n+\t\t    return;\n+\t\t  }\n+\n+\t\tadpm[i] = *pdpm;\n+\t\tadpm[i].next = dpi->modifiers;\n+\t\tdpi->modifiers = &adpm[i];\n+\t\tpdpm->printed = 1;\n+\t\t++i;\n+\t      }\n+\n+\t    pdpm = pdpm->next;\n+\t  }\n \n \td_print_comp (dpi, d_right (dc));\n \n-\tdpi->modifiers = dpm.next;\n+\tdpi->modifiers = hold_modifiers;\n \n-\tif (dpm.printed)\n+\tif (adpm[0].printed)\n \t  return;\n \n+\twhile (i > 1)\n+\t  {\n+\t    --i;\n+\t    d_print_mod (dpi, adpm[i].mod);\n+\t  }\n+\n \td_print_array_type (dpi, dc, dpi->modifiers);\n \n \treturn;\n@@ -3643,19 +3708,19 @@ d_print_array_type (dpi, dc, mods)\n       need_paren = 0;\n       for (p = mods; p != NULL; p = p->next)\n \t{\n-\t  if (p->printed)\n-\t    break;\n-\n-\t  if (p->mod->type == DEMANGLE_COMPONENT_ARRAY_TYPE)\n-\t    {\n-\t      need_space = 0;\n-\t      break;\n-\t    }\n-\t  else\n+\t  if (! p->printed)\n \t    {\n-\t      need_paren = 1;\n-\t      need_space = 1;\n-\t      break;\n+\t      if (p->mod->type == DEMANGLE_COMPONENT_ARRAY_TYPE)\n+\t\t{\n+\t\t  need_space = 0;\n+\t\t  break;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  need_paren = 1;\n+\t\t  need_space = 1;\n+\t\t  break;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "5ede7ab9ef880d192477d3767320167d87a3d454", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a19ac825df0014e1e6ef95cc980bf7414e1a6a/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=80a19ac825df0014e1e6ef95cc980bf7414e1a6a", "patch": "@@ -3681,6 +3681,24 @@ _ZNK5boost6spirit5matchI13rcs_deltatextEcvMNS0_4impl5dummyEFvvEEv\n boost::spirit::match<rcs_deltatext>::operator void (boost::spirit::impl::dummy::*)()() const\n boost::spirit::match<rcs_deltatext>::operator void (boost::spirit::impl::dummy::*)()\n #\n+# Multi-dimensional arrays with qualifiers on the inner dimensions.\n+--format=gnu-v3 --no-params\n+_Z3fooIA6_KiEvA9_KT_rVPrS4_\n+void foo<int const [6]>(int const [9][6], int restrict const (* volatile restrict) [9][6])\n+foo<int const [6]>\n+#\n+# From PR libstdc++/12736\n+--format=gnu-v3 --no-params\n+_Z3fooIA3_iEvRKT_\n+void foo<int [3]>(int const (&) [3])\n+foo<int [3]>\n+#\n+# Related to PR libstdc++/12736\n+--format=gnu-v3 --no-params\n+_Z3fooIPA3_iEvRKT_\n+void foo<int (*) [3]>(int (* const&) [3])\n+foo<int (*) [3]>\n+#\n # Test GNU V3 constructor and destructor identification.\n # 0 means it is not a constructor/destructor.\n # Other integers correspond to enum gnu_v3_{c,d}tor_kinds in demangle.h."}]}