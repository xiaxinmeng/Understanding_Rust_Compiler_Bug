{"sha": "8d0e5316e7e054e85102d36b96d24cce21b26bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwZTUzMTZlN2UwNTRlODUxMDJkMzZiOTZkMjRjY2UyMWIyNmJjZA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2007-10-21T10:01:16Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-10-21T10:01:16Z"}, "message": "vect-ifcvt-5.c: Require vect_int.\n\n\t* gcc.dg/vect/vect-ifcvt-5.c: Require vect_int.\n\t* gcc.dg/vect/vect-16.c: Fix comment.\n\t* gcc.dg/vect/pr33369.c: Require vect_int.\n\t* gcc.dg/vect/slp-33.c: Add spaces.\n\t* gcc.dg/vect/no-scevccp-outer-18.c: Enable only for vect_interleave\n\ttargets.\n\t* gcc.dg/vect/vect-ifcvt-6.c: Require vect_int.\n\t* gcc.dg/vect/no-scevccp-outer-19.c: Enable only for vect_unpack\n\ttargets.\n\t* gcc.dg/vect/vect-ifcvt-7.c: Require vect_int.\n\t* gcc.dg/vect/vect-strided-store-u16-i4.c: Add vect_unpack to\n\ttargets.\n\t* gcc.dg/vect/slp-10.c: Add spaces.\n\t* gcc.dg/vect/no-scevccp-outer-21.c: Enable only for vect_pack_trunc\n\ttargets.\n\t* gcc.dg/vect/slp-36.c: Require vect_int.\n\t* gcc.dg/vect/vect-ifcvt-9.c, gcc.dg/vect/vect-strided-store-u32-i2.c,\n\tgcc.dg/vect/vect-ifcvt-2.c, gcc.dg/vect/vect-ifcvt-3.c,\n\tgcc.dg/vect/vect-82.c, gcc.dg/vect/vect-83.c: Likewise.\n\t* gcc.dg/vect/no-scevccp-outer-16.c: Enable only for vect_unpack\n\ttargets.\n\t* gcc.dg/vect/no-scevccp-outer-17.c: Likewise.\n\t* gcc.dg/vect/pr25413.c: Use vector alignment_reachable_for_64bit\n\tinstead of vector_alignment_reachable_for_double.\n\t* lib/target-supports.exp (vect_aligned_arrays): Add spu-*-*.\n\t(natural_alignment): Split into...\n\t(natural_alignment_32, natural_alignment_64): New.\n\t(vector_alignment_reachable): Depend on natural_alignment_32.\n\t(vector_alignment_reachable_for_double): Rename to ...\n\t(vector_alignment_reachable_for_64bit): And depend on\n\tnatural_alignment_64.\n\n\nCo-Authored-By: Revital Eres <eres@il.ibm.com>\n\nFrom-SVN: r129529", "tree": {"sha": "3c6ae7f6a879a287a20effa9e27ce095fd6d997d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6ae7f6a879a287a20effa9e27ce095fd6d997d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0e5316e7e054e85102d36b96d24cce21b26bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0e5316e7e054e85102d36b96d24cce21b26bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0e5316e7e054e85102d36b96d24cce21b26bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0e5316e7e054e85102d36b96d24cce21b26bcd/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43029c1033d4e420ff02f1529fa9f99616a20021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43029c1033d4e420ff02f1529fa9f99616a20021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43029c1033d4e420ff02f1529fa9f99616a20021"}], "stats": {"total": 155, "additions": 111, "deletions": 44}, "files": [{"sha": "4ed9bce2034b8601fc89fac5db5352349add4e35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,3 +1,38 @@\n+2007-10-21  Ira Rosen  <irar@il.ibm.com>\n+            Revital Eres  <eres@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-ifcvt-5.c: Require vect_int.\n+\t* gcc.dg/vect/vect-16.c: Fix comment.\n+\t* gcc.dg/vect/pr33369.c: Require vect_int.\n+\t* gcc.dg/vect/slp-33.c: Add spaces.\n+\t* gcc.dg/vect/no-scevccp-outer-18.c: Enable only for vect_interleave\n+\ttargets.\n+\t* gcc.dg/vect/vect-ifcvt-6.c: Require vect_int.\n+\t* gcc.dg/vect/no-scevccp-outer-19.c: Enable only for vect_unpack\n+\ttargets.\n+\t* gcc.dg/vect/vect-ifcvt-7.c: Require vect_int.\n+\t* gcc.dg/vect/vect-strided-store-u16-i4.c: Add vect_unpack to\n+\ttargets.\n+\t* gcc.dg/vect/slp-10.c: Add spaces.\n+\t* gcc.dg/vect/no-scevccp-outer-21.c: Enable only for vect_pack_trunc\n+\ttargets.\n+\t* gcc.dg/vect/slp-36.c: Require vect_int.\n+\t* gcc.dg/vect/vect-ifcvt-9.c, gcc.dg/vect/vect-strided-store-u32-i2.c,\n+\tgcc.dg/vect/vect-ifcvt-2.c, gcc.dg/vect/vect-ifcvt-3.c,\n+\tgcc.dg/vect/vect-82.c, gcc.dg/vect/vect-83.c: Likewise.\n+\t* gcc.dg/vect/no-scevccp-outer-16.c: Enable only for vect_unpack\n+\ttargets.\n+\t* gcc.dg/vect/no-scevccp-outer-17.c: Likewise.\n+\t* gcc.dg/vect/pr25413.c: Use vector alignment_reachable_for_64bit\n+\tinstead of vector_alignment_reachable_for_double.\n+\t* lib/target-supports.exp (vect_aligned_arrays): Add spu-*-*.\n+\t(natural_alignment): Split into...\n+\t(natural_alignment_32, natural_alignment_64): New.\n+\t(vector_alignment_reachable): Depend on natural_alignment_32.\n+\t(vector_alignment_reachable_for_double): Rename to ...\n+\t(vector_alignment_reachable_for_64bit): And depend on\n+\tnatural_alignment_64.\n+\n 2007-10-21  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* gcc.dg/vect/vect.exp: Extend -mpaired-single handling to all"}, {"sha": "ea58d395c3dc4c2b8715dcd35d9afde71badb486", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-16.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -58,5 +58,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { ! {vect_unpack } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c11a1aa49de3aee97532ad5ea801f9244e978aee", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-17.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -64,5 +64,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { ! {vect_unpack } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7a6788a0da216541f9648e2f67b52150c5f97fe4", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-18.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -47,5 +47,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { target vect_interleave } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "58bcf0870f590ff66ec602ea219442f3c0d1471e", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-19.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -48,5 +48,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { ! {vect_unpack } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f955e4a12d681738e334d5a60d26cd6eba4e8440", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-21.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -58,5 +58,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { ! { vect_pack_trunc } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1cb33e3b9dcbfc064668c9c953840f8bf48ba572", "filename": "gcc/testsuite/gcc.dg/vect/pr25413.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -32,8 +32,8 @@ int main (void)\n   return 0;\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vector_alignment_reachable_for_double } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vector_alignment_reachable_for_double } } } } */\n-/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" { target { ! vector_alignment_reachable_for_double } } } } */\n-/* { dg-final { scan-tree-dump-times \"not vectorized: unsupported unaligned store\" 1 \"vect\" { target { ! vector_alignment_reachable_for_double } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vector_alignment_reachable_for_64bit } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vector_alignment_reachable_for_64bit } } } } */\n+/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" { target { ! vector_alignment_reachable_for_64bit } } } } */\n+/* { dg-final { scan-tree-dump-times \"not vectorized: unsupported unaligned store\" 1 \"vect\" { target { ! vector_alignment_reachable_for_64bit } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1aaf4e366e205d87477c93fe49ad74018ce089df", "filename": "gcc/testsuite/gcc.dg/vect/pr33369.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33369.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33369.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33369.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_shift } */\n \n typedef struct tagPOINT"}, {"sha": "36dc0cca823a5c296ce72a421bb2bf820cd61f66", "filename": "gcc/testsuite/gcc.dg/vect/slp-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -106,9 +106,9 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_intfloat_cvt && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && {!{vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_intfloat_cvt && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && {!{vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "7ee7a0b04207829dce7f0968f44b342d664bdde9", "filename": "gcc/testsuite/gcc.dg/vect/slp-33.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -104,9 +104,9 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_intfloat_cvt && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && {!{vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && {! {vect_int_mult}}} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_intfloat_cvt && vect_int_mult} } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && {!{vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && {! {vect_int_mult}}} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "8480c4a05f1b3e6d2f3765c421035ea4c4cd5327", "filename": "gcc/testsuite/gcc.dg/vect/slp-36.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-36.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_shift } */\n \n #define N 32"}, {"sha": "698370529040ea07df30d760789d8eac4e96e9ae", "filename": "gcc/testsuite/gcc.dg/vect/vect-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -14,7 +14,6 @@ int main1 ()\n   float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   float diff;\n \n-  /* Not vectorizable yet (reduction).  */\n   diff = 0;\n   for (i = 0; i < N; i++) {\n     diff += (b[i] - c[i]);\n@@ -34,5 +33,6 @@ int main (void)\n   return main1 ();\n }\n \n+/* Requires fast-math.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e962f8f61fe435e6d7bc8d9d4cc4b7e2f993f8e4", "filename": "gcc/testsuite/gcc.dg/vect/vect-82.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "4cebd7f1b8adcae531a1263305984df979778432", "filename": "gcc/testsuite/gcc.dg/vect/vect-83.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "a89bd8f88f7de3dd65fb971e72fe049185704556", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-2.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "902b1549fa0f882c2e8e6c798b1ba757313ef744", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-3.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "879741062aadfcf31f184ccfa0110315ccb69951", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-5.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "f2330bd6aa9545ebc47622405cb5bcea4e8bea6b", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-6.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "fa89d8328901aa70ef4e79f9ac1eef9ab062df01", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-7.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "f9a92b80d6574c150f7e513eed72d7598fe1099b", "filename": "gcc/testsuite/gcc.dg/vect/vect-ifcvt-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ifcvt-9.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "5c02c0da2142eed84874ac82d78cc14ad68bb5a3", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-store-u16-i4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u16-i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u16-i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u16-i4.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -65,8 +65,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target { vect_interleave } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { ! { vect_interleave } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\"  { target { vect_interleave && vect_pack_trunc  } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target { { ! { vect_interleave } } && { vect_pack_trunc } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n \n "}, {"sha": "ecc567c19444467be066cffb7953371eca73bc42", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-store-u32-i2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u32-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u32-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-u32-i2.c?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n #include <stdio.h>"}, {"sha": "e4e9c589e2f275d0a0b2a3dac456cd5c32430ee5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0e5316e7e054e85102d36b96d24cce21b26bcd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8d0e5316e7e054e85102d36b96d24cce21b26bcd", "patch": "@@ -1507,7 +1507,6 @@ proc check_effective_target_vect_floatint_cvt { } {\n     return $et_vect_floatint_cvt_saved\n }\n \n-\n # Return 1 is this is an arm target using 32-bit instructions\n proc check_effective_target_arm32 { } {\n     return [check_no_compiler_messages arm32 assembly {\n@@ -2144,37 +2143,59 @@ proc check_effective_target_vect_aligned_arrays { } {\n \tverbose \"check_effective_target_vect_aligned_arrays: using cached result\" 2\n     } else {\n \tset et_vect_aligned_arrays_saved 0\n-\tif { ([istarget x86_64-*-*]\n-\t      || [istarget i?86-*-*]) && [is-effective-target lp64] } {\n+        if { (([istarget x86_64-*-*]\n+              || [istarget i?86-*-*]) && [is-effective-target lp64])\n+              || [istarget spu-*-*] } {\n \t    set et_vect_aligned_arrays_saved 1\n \t}\n     }\n     verbose \"check_effective_target_vect_aligned_arrays: returning $et_vect_aligned_arrays_saved\" 2\n     return $et_vect_aligned_arrays_saved\n }\n \n-# Return 1 if types are naturally aligned (aligned to their type-size),\n-# 0 otherwise.\n+# Return 1 if types of size 32 bit or less are naturally aligned\n+# (aligned to their type-size), 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_natural_alignment_32 { } {\n+    global et_natural_alignment_32\n+\n+    if [info exists et_natural_alignment_32_saved] {\n+        verbose \"check_effective_target_natural_alignment_32: using cached result\" 2\n+    } else {\n+        # FIXME: 32bit powerpc: guaranteed only if MASK_ALIGN_NATURAL/POWER.\n+        set et_natural_alignment_32_saved 1\n+        if { ([istarget *-*-darwin*] && [is-effective-target lp64]) } {\n+            set et_natural_alignment_32_saved 0\n+        }\n+    }\n+    verbose \"check_effective_target_natural_alignment_32: returning $et_natural_alignment_32_saved\" 2\n+    return $et_natural_alignment_32_saved\n+}\n+\n+# Return 1 if types of size 64 bit or less are naturally aligned (aligned to their\n+# type-size), 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n-proc check_effective_target_natural_alignment { } {\n-    global et_natural_alignment\n+proc check_effective_target_natural_alignment_64 { } {\n+    global et_natural_alignment_64\n \n-    if [info exists et_natural_alignment_saved] {\n-        verbose \"check_effective_target_natural_alignment: using cached result\" 2\n+    if [info exists et_natural_alignment_64_saved] {\n+        verbose \"check_effective_target_natural_alignment_64: using cached result\" 2\n     } else {\n-\t# FIXME: 32bit powerpc: guaranteed only if MASK_ALIGN_NATURAL/POWER.\n-        set et_natural_alignment_saved 1\n-        if { ([istarget *-*-darwin*] && [is-effective-target lp64]) } { \n-            set et_natural_alignment_saved 0\n+        set et_natural_alignment_64_saved 0\n+        if { ([is-effective-target lp64] && ![istarget *-*-darwin*])\n+             || [istarget spu-*-*] } {\n+            set et_natural_alignment_64_saved 1\n         }\n     }\n-    verbose \"check_effective_target_natural_alignment: returning $et_natural_alignment_saved\" 2\n-    return $et_natural_alignment_saved\n+    verbose \"check_effective_target_natural_alignment_64: returning $et_natural_alignment_64_saved\" 2\n+    return $et_natural_alignment_64_saved\n }\n \n-# Return 1 if vector alignment is reachable, 0 otherwise.\n+# Return 1 if vector alignment (for types of size 32 bit or less) is reachable, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n@@ -2185,7 +2206,7 @@ proc check_effective_target_vector_alignment_reachable { } {\n         verbose \"check_effective_target_vector_alignment_reachable: using cached result\" 2\n     } else {\n         if { [check_effective_target_vect_aligned_arrays]\n-             || [check_effective_target_natural_alignment] } {\n+             || [check_effective_target_natural_alignment_32] } {\n             set et_vector_alignment_reachable_saved 1\n         } else {\n             set et_vector_alignment_reachable_saved 0\n@@ -2195,24 +2216,25 @@ proc check_effective_target_vector_alignment_reachable { } {\n     return $et_vector_alignment_reachable_saved\n }\n \n-# Return 1 if vector alignment for soubles  is reachable, 0 otherwise.\n+# Return 1 if vector alignment for 64 bit is reachable, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n-proc check_effective_target_vector_alignment_reachable_for_double { } {\n-    global et_vector_alignment_reachable_for_double\n+proc check_effective_target_vector_alignment_reachable_for_64bit { } {\n+    global et_vector_alignment_reachable_for_64bit\n \n-    if [info exists et_vector_alignment_reachable_for_double_saved] {\n-        verbose \"check_effective_target_vector_alignment_reachable_for_double: using cached result\" 2\n+    if [info exists et_vector_alignment_reachable_for_64bit_saved] {\n+        verbose \"check_effective_target_vector_alignment_reachable_for_64bit: using cached result\" 2\n     } else {\n-        if { [check_effective_target_vect_aligned_arrays] } {\n-            set et_vector_alignment_reachable_for_double_saved 1\n+        if { [check_effective_target_vect_aligned_arrays] \n+             || [check_effective_target_natural_alignment_64] } {\n+            set et_vector_alignment_reachable_for_64bit_saved 1\n         } else {\n-            set et_vector_alignment_reachable_for_double_saved 0\n+            set et_vector_alignment_reachable_for_64bit_saved 0\n         }\n     }\n-    verbose \"check_effective_target_vector_alignment_reachable_for_double: returning $et_vector_alignment_reachable_for_double_saved\" 2\n-    return $et_vector_alignment_reachable_for_double_saved\n+    verbose \"check_effective_target_vector_alignment_reachable_for_64bit: returning $et_vector_alignment_reachable_for_64bit_saved\" 2\n+    return $et_vector_alignment_reachable_for_64bit_saved\n }\n \n # Return 1 if the target supports vector conditional operations, 0 otherwise."}]}