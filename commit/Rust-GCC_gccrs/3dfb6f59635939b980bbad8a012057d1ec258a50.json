{"sha": "3dfb6f59635939b980bbad8a012057d1ec258a50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmYjZmNTk2MzU5MzliOTgwYmJhZDhhMDEyMDU3ZDFlYzI1OGE1MA==", "commit": {"author": {"name": "Seongbae Park", "email": "seongbae.park@gmail.com", "date": "2008-05-28T18:14:32Z"}, "committer": {"name": "Seongbae Park", "email": "spark@gcc.gnu.org", "date": "2008-05-28T18:14:32Z"}, "message": "value-prof.c (tree_ic_transform): Print counts.\n\ngcc/ChangeLog:\n2008-05-28  Seongbae Park <seongbae.park@gmail.com>\n\n\t* value-prof.c (tree_ic_transform): Print counts.\n\t* tree-profile.c (tree_gen_ic_func_profiler):\n\tClear __gcov_indreict_call_callee variable\n\tto avoid misattribution of the profile.\n\ngcc/testsuite/ChangeLog:\n2008-05-28  Seongbae Park <seongbae.park@gmail.com>\n\n\t* gcc.dg/tree-prof/ic-misattribution-1.c: New test.\n\t* gcc.dg/tree-prof/ic-misattribution-1a.c: New test.\n\t* lib/profopt.exp (profopt-get-options): Support\n\tdg-additional-sources.\n\t(profopt-execute): Handle additional sources.\n\nFrom-SVN: r136118", "tree": {"sha": "171dcca9d608250fae06f8b432066dcd65c03996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171dcca9d608250fae06f8b432066dcd65c03996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfb6f59635939b980bbad8a012057d1ec258a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfb6f59635939b980bbad8a012057d1ec258a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfb6f59635939b980bbad8a012057d1ec258a50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfb6f59635939b980bbad8a012057d1ec258a50/comments", "author": null, "committer": null, "parents": [{"sha": "5a976da002caf3838a1f986098ce655fb881efb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a976da002caf3838a1f986098ce655fb881efb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a976da002caf3838a1f986098ce655fb881efb8"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "7bffba370762619bc6517accecaa917a295e1d8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -1,3 +1,10 @@\n+2008-05-28  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* value-prof.c (tree_ic_transform): Print counts.\n+\t* tree-profile.c (tree_gen_ic_func_profiler):\n+\tClear __gcov_indreict_call_callee variable\n+\tto avoid misattribution of the profile.\n+\n 2008-05-28  Rafael Espindola  <espindola@google.com>\n \n \t* see.c (see_def_extension_not_merged): Use copy_rtx_if_shared to avoid"}, {"sha": "b715c2d00ca238d3cf8202e70cf77dafd3853673", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -1,3 +1,11 @@\n+2008-05-28  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* gcc.dg/tree-prof/ic-misattribution-1.c: New test.\n+\t* gcc.dg/tree-prof/ic-misattribution-1a.c: New test.\n+\t* lib/profopt.exp (profopt-get-options): Support\n+\tdg-additional-sources.\n+\t(profopt-execute): Handle additional sources.\n+\n 2008-05-28  Rafael Espindola  <espindola@google.com>\n \n \t* gcc.dg/20080528-1.c: New test."}, {"sha": "c36dd8dd05240f9dba78a1059884a1abb9ba8fad", "filename": "gcc/testsuite/gcc.dg/tree-prof/ic-misattribution-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O2 -fdump-tree-tree_profile\" } */\n+/* { dg-additional-sources \"ic-misattribution-1a.c\" } */\n+\n+extern void other_caller (void);\n+\n+void\n+callee (void)\n+{\n+  return;\n+}\n+\n+void\n+caller(void (*func) (void))\n+{\n+  func ();\n+}\n+\n+/* { dg-final-use { scan-tree-dump \"hist->count 1 hist->all 1\" \"tree_profile\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "ac54ab1385142e02e422b8c1ee80878aeff303a7", "filename": "gcc/testsuite/gcc.dg/tree-prof/ic-misattribution-1a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1a.c?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-DEMPTY\" } */\n+/* This file is only needed in combination with ic-misattribution-1.c\n+   but there's no easy way to make this file ignored. */\n+extern void callee (void);\n+extern void caller (void (*func) (void));\n+\n+typedef void (*func_t) (void);\n+func_t func;\n+\n+int\n+main ()\n+{\n+#ifdef EMPTY\n+#else\n+  func = callee;\n+  caller (callee);\n+  func ();\n+#endif\n+  return 0;\n+}"}, {"sha": "967b7906f0ea87de20cf329ccdc6af5aea370d34", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -184,6 +184,7 @@ proc profopt-get-options { src } {\n \t     || ![string compare \"dg-skip-if\" $cmd] \\\n \t     || ![string compare \"dg-final-generate\" $cmd] \\\n \t     || ![string compare \"dg-final-use\" $cmd] \\\n+             || ![string compare \"dg-additional-sources\" $cmd] \\\n \t     || [string match \"dg-require-*\" $cmd]  } {\n \t    set status [catch \"$op\" errmsg]\n \t    if { $status != 0 } {\n@@ -266,9 +267,11 @@ proc profopt-execute { src } {\n \t    return\n \t}\n \n+        set extra_options [dg-additional-files-options \"\" \"$src\"]\n+\n \t# Compile for profiling.\n \n-\tset options \"\"\n+\tset options \"$extra_options\"\n \tlappend options \"additional_flags=$option $extra_flags $profile_option\"\n \tset optstr \"$option $profile_option\"\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname1\" executable $options]\n@@ -317,7 +320,7 @@ proc profopt-execute { src } {\n \n \t# Compile with feedback-directed optimizations.\n \n-\tset options \"\"\n+\tset options \"$extra_options\"\n \tlappend options \"additional_flags=$option $extra_flags $feedback_option\"\n \tset optstr \"$option $feedback_option\"\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options]\n@@ -364,7 +367,7 @@ proc profopt-execute { src } {\n \n \t# Compile with normal optimizations.\n \n-\tset options \"\"\n+\tset options \"$extra_options\"\n \tlappend options \"additional_flags=$option\"\n \tset optstr \"$option\"\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname3\" \"executable\" $options]"}, {"sha": "6121837e49628a1fc5bd385db1c7674efaab7101", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -308,7 +308,7 @@ tree_gen_ic_func_profiler (void)\n   edge e;\n   basic_block bb;\n   edge_iterator ei;\n-  tree stmt1;\n+  tree stmt1, stmt2;\n   tree tree_uid, cur_func;\n \n   if (flag_unit_at_a_time)\n@@ -321,8 +321,11 @@ tree_gen_ic_func_profiler (void)\n   \n   FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR->succs)\n     {\n+      tree void0;\n+\n       bb = split_edge (e);\n       bsi = bsi_start (bb);\n+\n       cur_func = force_gimple_operand_bsi (&bsi,\n \t\t\t\t\t   build_addr (current_function_decl, \n \t\t\t\t\t\t       current_function_decl),\n@@ -335,6 +338,16 @@ tree_gen_ic_func_profiler (void)\n \t\t\t       cur_func,\n \t\t\t       ic_void_ptr_var);\n       bsi_insert_after (&bsi, stmt1, BSI_NEW_STMT);\n+\n+      gcc_assert (EDGE_COUNT (bb->succs) == 1);\n+      bb = split_edge (EDGE_I (bb->succs, 0));\n+      bsi = bsi_start (bb);\n+      /* Set __gcov_indirect_call_callee to 0,\n+         so that calls from other modules won't get misattributed\n+\t to the last caller of the current callee. */\n+      void0 = build_int_cst (build_pointer_type (void_type_node), 0);\n+      stmt2 = build_gimple_modify_stmt (ic_void_ptr_var, void0);\n+      bsi_insert_after (&bsi, stmt2, BSI_NEW_STMT);\n     }\n }\n "}, {"sha": "8b0087a850f8fe593a197d56c4b75998c84c4d0b", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfb6f59635939b980bbad8a012057d1ec258a50/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=3dfb6f59635939b980bbad8a012057d1ec258a50", "patch": "@@ -1198,6 +1198,7 @@ tree_ic_transform (tree stmt)\n       print_generic_stmt (dump_file, stmt, TDF_SLIM);\n       fprintf (dump_file, \" to \");\n       print_generic_stmt (dump_file, modify, TDF_SLIM);\n+      fprintf (dump_file, \"hist->count %llu hist->all %llu\\n\", count, all);\n     }\n \n   return true;"}]}