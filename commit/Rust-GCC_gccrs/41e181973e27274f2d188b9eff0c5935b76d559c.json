{"sha": "41e181973e27274f2d188b9eff0c5935b76d559c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlMTgxOTczZTI3Mjc0ZjJkMTg4YjllZmYwYzU5MzViNzZkNTU5Yw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-11-15T19:26:21Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-11-15T19:26:21Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add support for folding of vector compares.\n\n\n2017-11-15  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n[gcc]\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n\tfolding of vector compares.\n\t(fold_build_vec_cmp): New helper function.\n\t(fold_compare_helper): New helper function.\n\t(builtin_function_type): Add compare builtins to the list of functions\n\thaving unsigned arguments.  Cosmetic updates to comment indentation.\n\t* config/rs6000/vsx.md (vcmpneb, vcmpneh, vcmpnew): Update to specify\n\tthe not+eq combination.\n\n[testsuite]\n\n\t* gcc.target/powerpc/builtins-3-p9.c: Add -O1, update\n\texpected codegen checks.\n\t* gcc.target/powerpc/vec-cmp-sel.c: Mark vars as volatile.\n\t* gcc.target/powerpc/vsu/vec-cmpne-0.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-1.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-2.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-3.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-4.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-5.c: Add -O1.\n\t* gcc.target/powerpc/vsu/vec-cmpne-6.c: Add -O1.\n\nFrom-SVN: r254782", "tree": {"sha": "4f4e564f0e1698d7b5af440260aef1da0aba83a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4e564f0e1698d7b5af440260aef1da0aba83a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e181973e27274f2d188b9eff0c5935b76d559c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e181973e27274f2d188b9eff0c5935b76d559c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e181973e27274f2d188b9eff0c5935b76d559c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e181973e27274f2d188b9eff0c5935b76d559c/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e6c42983787bcec345526ab04a4e541e0b0afb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6c42983787bcec345526ab04a4e541e0b0afb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6c42983787bcec345526ab04a4e541e0b0afb2"}], "stats": {"total": 191, "additions": 155, "deletions": 36}, "files": [{"sha": "7b271b57d284006a865518b96eebc0f06eddad65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,3 +1,14 @@\n+2017-11-15  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n+\tfolding of vector compares.\n+\t(fold_build_vec_cmp): New helper function.\n+\t(fold_compare_helper): New helper function.\n+\t(builtin_function_type): Add compare builtins to the list of functions\n+\thaving unsigned arguments.  Cosmetic updates to comment indentation.\n+\t* config/rs6000/vsx.md (vcmpneb, vcmpneh, vcmpnew): Update to specify\n+\tthe not+eq combination.\n+\n 2017-11-15  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/82726"}, {"sha": "731613bdf9b2302a6a69d568bfa8487f4d16cffa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -16176,6 +16176,36 @@ rs6000_builtin_valid_without_lhs (enum rs6000_builtins fn_code)\n     }\n }\n \n+/* Helper function to handle the gimple folding of a vector compare\n+   operation.  This sets up true/false vectors, and uses the\n+   VEC_COND_EXPR operation.\n+   CODE indicates which comparison is to be made. (EQ, GT, ...).\n+   TYPE indicates the type of the result.  */\n+static tree\n+fold_build_vec_cmp (tree_code code, tree type,\n+\t\t    tree arg0, tree arg1)\n+{\n+  tree cmp_type = build_same_sized_truth_vector_type (type);\n+  tree zero_vec = build_zero_cst (type);\n+  tree minus_one_vec = build_minus_one_cst (type);\n+  tree cmp = fold_build2 (code, cmp_type, arg0, arg1);\n+  return fold_build3 (VEC_COND_EXPR, type, cmp, minus_one_vec, zero_vec);\n+}\n+\n+/* Helper function to handle the in-between steps for the\n+   vector compare built-ins.  */\n+static void\n+fold_compare_helper (gimple_stmt_iterator *gsi, tree_code code, gimple *stmt)\n+{\n+  tree arg0 = gimple_call_arg (stmt, 0);\n+  tree arg1 = gimple_call_arg (stmt, 1);\n+  tree lhs = gimple_call_lhs (stmt);\n+  tree cmp = fold_build_vec_cmp (code, TREE_TYPE (lhs), arg0, arg1);\n+  gimple *g = gimple_build_assign (lhs, cmp);\n+  gimple_set_location (g, gimple_location (stmt));\n+  gsi_replace (gsi, g, true);\n+}\n+\n /* Fold a machine-dependent built-in in GIMPLE.  (For folding into\n    a constant, use rs6000_fold_builtin.)  */\n \n@@ -16671,6 +16701,53 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n        return true;\n       }\n \n+    /* Vector compares; EQ, NE, GE, GT, LE.  */\n+    case ALTIVEC_BUILTIN_VCMPEQUB:\n+    case ALTIVEC_BUILTIN_VCMPEQUH:\n+    case ALTIVEC_BUILTIN_VCMPEQUW:\n+    case P8V_BUILTIN_VCMPEQUD:\n+\tfold_compare_helper (gsi, EQ_EXPR, stmt);\n+\treturn true;\n+\n+    case P9V_BUILTIN_CMPNEB:\n+    case P9V_BUILTIN_CMPNEH:\n+    case P9V_BUILTIN_CMPNEW:\n+      fold_compare_helper (gsi, NE_EXPR, stmt);\n+      return true;\n+\n+    case VSX_BUILTIN_CMPGE_16QI:\n+    case VSX_BUILTIN_CMPGE_U16QI:\n+    case VSX_BUILTIN_CMPGE_8HI:\n+    case VSX_BUILTIN_CMPGE_U8HI:\n+    case VSX_BUILTIN_CMPGE_4SI:\n+    case VSX_BUILTIN_CMPGE_U4SI:\n+    case VSX_BUILTIN_CMPGE_2DI:\n+    case VSX_BUILTIN_CMPGE_U2DI:\n+      fold_compare_helper (gsi, GE_EXPR, stmt);\n+      return true;\n+\n+    case ALTIVEC_BUILTIN_VCMPGTSB:\n+    case ALTIVEC_BUILTIN_VCMPGTUB:\n+    case ALTIVEC_BUILTIN_VCMPGTSH:\n+    case ALTIVEC_BUILTIN_VCMPGTUH:\n+    case ALTIVEC_BUILTIN_VCMPGTSW:\n+    case ALTIVEC_BUILTIN_VCMPGTUW:\n+    case P8V_BUILTIN_VCMPGTUD:\n+    case P8V_BUILTIN_VCMPGTSD:\n+      fold_compare_helper (gsi, GT_EXPR, stmt);\n+      return true;\n+\n+    case VSX_BUILTIN_CMPLE_16QI:\n+    case VSX_BUILTIN_CMPLE_U16QI:\n+    case VSX_BUILTIN_CMPLE_8HI:\n+    case VSX_BUILTIN_CMPLE_U8HI:\n+    case VSX_BUILTIN_CMPLE_4SI:\n+    case VSX_BUILTIN_CMPLE_U4SI:\n+    case VSX_BUILTIN_CMPLE_2DI:\n+    case VSX_BUILTIN_CMPLE_U2DI:\n+      fold_compare_helper (gsi, LE_EXPR, stmt);\n+      return true;\n+\n     default:\n \tif (TARGET_DEBUG_BUILTIN)\n \t   fprintf (stderr, \"gimple builtin intrinsic not matched:%d %s %s\\n\",\n@@ -18090,7 +18167,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n      are type correct.  */\n   switch (builtin)\n     {\n-      /* unsigned 1 argument functions.  */\n+    /* unsigned 1 argument functions.  */\n     case CRYPTO_BUILTIN_VSBOX:\n     case P8V_BUILTIN_VGBBD:\n     case MISC_BUILTIN_CDTBCD:\n@@ -18099,7 +18176,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[1] = 1;\n       break;\n \n-      /* unsigned 2 argument functions.  */\n+    /* unsigned 2 argument functions.  */\n     case ALTIVEC_BUILTIN_VMULEUB:\n     case ALTIVEC_BUILTIN_VMULEUH:\n     case ALTIVEC_BUILTIN_VMULEUW:\n@@ -18134,7 +18211,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[2] = 1;\n       break;\n \n-      /* unsigned 3 argument functions.  */\n+    /* unsigned 3 argument functions.  */\n     case ALTIVEC_BUILTIN_VPERM_16QI_UNS:\n     case ALTIVEC_BUILTIN_VPERM_8HI_UNS:\n     case ALTIVEC_BUILTIN_VPERM_4SI_UNS:\n@@ -18165,7 +18242,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[3] = 1;\n       break;\n \n-      /* signed permute functions with unsigned char mask.  */\n+    /* signed permute functions with unsigned char mask.  */\n     case ALTIVEC_BUILTIN_VPERM_16QI:\n     case ALTIVEC_BUILTIN_VPERM_8HI:\n     case ALTIVEC_BUILTIN_VPERM_4SI:\n@@ -18181,29 +18258,46 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[3] = 1;\n       break;\n \n-      /* unsigned args, signed return.  */\n+    /* unsigned args, signed return.  */\n     case VSX_BUILTIN_XVCVUXDSP:\n     case VSX_BUILTIN_XVCVUXDDP_UNS:\n     case ALTIVEC_BUILTIN_UNSFLOAT_V4SI_V4SF:\n       h.uns_p[1] = 1;\n       break;\n \n-      /* signed args, unsigned return.  */\n+    /* signed args, unsigned return.  */\n     case VSX_BUILTIN_XVCVDPUXDS_UNS:\n     case ALTIVEC_BUILTIN_FIXUNS_V4SF_V4SI:\n     case MISC_BUILTIN_UNPACK_TD:\n     case MISC_BUILTIN_UNPACK_V1TI:\n       h.uns_p[0] = 1;\n       break;\n \n-      /* unsigned arguments for 128-bit pack instructions.  */\n+    /* unsigned arguments, bool return (compares).  */\n+    case ALTIVEC_BUILTIN_VCMPEQUB:\n+    case ALTIVEC_BUILTIN_VCMPEQUH:\n+    case ALTIVEC_BUILTIN_VCMPEQUW:\n+    case P8V_BUILTIN_VCMPEQUD:\n+    case VSX_BUILTIN_CMPGE_U16QI:\n+    case VSX_BUILTIN_CMPGE_U8HI:\n+    case VSX_BUILTIN_CMPGE_U4SI:\n+    case VSX_BUILTIN_CMPGE_U2DI:\n+    case ALTIVEC_BUILTIN_VCMPGTUB:\n+    case ALTIVEC_BUILTIN_VCMPGTUH:\n+    case ALTIVEC_BUILTIN_VCMPGTUW:\n+    case P8V_BUILTIN_VCMPGTUD:\n+      h.uns_p[1] = 1;\n+      h.uns_p[2] = 1;\n+      break;\n+\n+    /* unsigned arguments for 128-bit pack instructions.  */\n     case MISC_BUILTIN_PACK_TD:\n     case MISC_BUILTIN_PACK_V1TI:\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;\n       break;\n \n-\t/* unsigned second arguments (vector shift right).  */\n+    /* unsigned second arguments (vector shift right).  */\n     case ALTIVEC_BUILTIN_VSRB:\n     case ALTIVEC_BUILTIN_VSRH:\n     case ALTIVEC_BUILTIN_VSRW:"}, {"sha": "6ea16be4f23fec9936177db72dc17cf9c1c1049c", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -4600,12 +4600,12 @@\n   DONE;\n })\n \n-;; Vector Compare Not Equal Byte\n+;; Vector Compare Not Equal Byte (specified/not+eq:)\n (define_insn \"vcmpneb\"\n   [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"altivec_register_operand\" \"v\")]\n-\t UNSPEC_VCMPNEB))]\n+\t (not:V16QI\n+\t   (eq:V16QI (match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n+\t\t     (match_operand:V16QI 2 \"altivec_register_operand\" \"v\"))))]\n   \"TARGET_P9_VECTOR\"\n   \"vcmpneb %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n@@ -4621,12 +4621,12 @@\n   \"vcmpnezb %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-;; Vector Compare Not Equal Half Word\n+;; Vector Compare Not Equal Half Word (specified/not+eq:)\n (define_insn \"vcmpneh\"\n   [(set (match_operand:V8HI 0 \"altivec_register_operand\" \"=v\")\n-\t(unspec:V8HI [(match_operand:V8HI 1 \"altivec_register_operand\" \"v\")\n-\t\t      (match_operand:V8HI 2 \"altivec_register_operand\" \"v\")]\n-\t UNSPEC_VCMPNEH))]\n+\t(not:V8HI\n+\t  (eq:V8HI (match_operand:V8HI 1 \"altivec_register_operand\" \"v\")\n+\t\t   (match_operand:V8HI 2 \"altivec_register_operand\" \"v\"))))]\n   \"TARGET_P9_VECTOR\"\n   \"vcmpneh %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n@@ -4641,13 +4641,12 @@\n   \"vcmpnezh %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-;; Vector Compare Not Equal Word\n+;; Vector Compare Not Equal Word (specified/not+eq:)\n (define_insn \"vcmpnew\"\n   [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"=v\")\n-\t(unspec:V4SI\n-\t [(match_operand:V4SI 1 \"altivec_register_operand\" \"v\")\n-\t  (match_operand:V4SI 2 \"altivec_register_operand\" \"v\")]\n-\t UNSPEC_VCMPNEH))]\n+\t(not:V4SI\n+\t  (eq:V4SI (match_operand:V4SI 1 \"altivec_register_operand\" \"v\")\n+\t\t   (match_operand:V4SI 2 \"altivec_register_operand\" \"v\"))))]\n   \"TARGET_P9_VECTOR\"\n   \"vcmpnew %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])"}, {"sha": "3d18653a4d5ee37cadd17f0678f1c5835d893dc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,3 +1,16 @@\n+2017-11-15  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3-p9.c: Add -O1, update\n+\texpected codegen checks.\n+\t* gcc.target/powerpc/vec-cmp-sel.c: Mark vars as volatile.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-0.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-1.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-2.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-3.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-4.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-5.c: Add -O1.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-6.c: Add -O1.\n+\n 2017-11-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78240"}, {"sha": "9dc53da58ade30b382d3381c8c63bc7ad71c3e56", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-p9.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n \n@@ -53,19 +53,20 @@ test_vull_bperm_vull_vuc (vector unsigned long long x,\n      test_ne_short             1 vcmpneh\n      test_ne_int               1 vcmpnew\n      test_ne_long              1 vcmpequd, 1 xxlnor inst\n-     test_nabs_long_long       1 xxspltib, 1 vsubudm, 1 vminsd\n      test_neg_long_long        1 vnegd\n      test_vull_bperm_vull_vuc  1 vbpermd\n-\n+     test_nabs_long_long (-O0) 1 xxspltib, 1 vsubudm, 1 vminsd\n+     test_nabs_long_long (-O1) 1 vnegd, vminsd\n+*/\n \n /* { dg-final { scan-assembler-times \"vcmpneb\"  1 } } */\n /* { dg-final { scan-assembler-times \"vcmpneh\"  1 } } */\n /* { dg-final { scan-assembler-times \"vcmpnew\"  1 } } */\n /* { dg-final { scan-assembler-times \"vcmpequd\" 1 } } */\n /* { dg-final { scan-assembler-times \"xxlnor\"   1 } } */\n-/* { dg-final { scan-assembler-times \"xxspltib\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vsubudm\"  1 } } */\n+/* { dg-final { scan-assembler-times \"xxspltib\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\"  0 } } */\n /* { dg-final { scan-assembler-times \"vminsd\"   1 } } */\n-/* { dg-final { scan-assembler-times \"vnegd\"    1 } } */\n+/* { dg-final { scan-assembler-times \"vnegd\"    2 } } */\n /* { dg-final { scan-assembler-times \"vbpermd\"  1 } } */\n "}, {"sha": "f74a117ace4469da26d5c7edecd93c3cee55e2cd", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cmp-sel.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp-sel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp-sel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp-sel.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -12,9 +12,10 @@\n \n #include <altivec.h>\n \n+volatile vector signed long long x = { 25399, -12900 };\n+volatile vector signed long long y = { 12178, -9987 };\n+\n vector signed long long foo () {\n-  vector signed long long x = { 25399, -12900 };\n-  vector signed long long y = { 12178, -9987 };\n   vector bool long long b = vec_cmpge (x, y);\n   vector signed long long z = vec_sel (y, x, b);\n   return z;"}, {"sha": "5c09c70ae28ab9f2231861d2e51178d72d7d2b97", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-0.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "a74f7398543d80fc487399c3036ba36f7d64356f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-1.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "f7f1e0d7fb256203016f00b1151dde75d9978fe4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-2.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "8ec94bd4a507ba933617bda4cebdfbb5555285da", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-3.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "2f47697d3840802d9175d1834a97e3627f1207d8", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-4.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "116708599965aa29d70824364b2032cdb8f49712", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-5.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}, {"sha": "031a48f1ca32dea97519678927606669adae8473", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e181973e27274f2d188b9eff0c5935b76d559c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-6.c?ref=41e181973e27274f2d188b9eff0c5935b76d559c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n \n #include <altivec.h>\n "}]}