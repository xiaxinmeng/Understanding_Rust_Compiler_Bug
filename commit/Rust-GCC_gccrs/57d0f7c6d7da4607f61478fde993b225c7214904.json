{"sha": "57d0f7c6d7da4607f61478fde993b225c7214904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkMGY3YzZkN2RhNDYwN2Y2MTQ3OGZkZTk5M2IyMjVjNzIxNDkwNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-12T10:34:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-12T10:34:26Z"}, "message": "ada-tree.h (TYPE_RETURN_BY_DIRECT_REF_P): Change from using TYPE_LANG_FLAG_4 to using TYPE_LANG_FLAG_0.\n\n\t* gcc-interface/ada-tree.h (TYPE_RETURN_BY_DIRECT_REF_P): Change from\n\tusing TYPE_LANG_FLAG_4 to using TYPE_LANG_FLAG_0.\n\t(TYPE_ALIGN_OK): Move around.\n\t(TYPE_PADDING_FOR_COMPONENT): Remove superfluous parentheses.\n\t* gcc-interface/decl.c (change_qualified_type): Move to...\n\t(gnat_to_gnu_entity): Adjust comment.\n\t* gcc-interface/gigi.h (change_qualified_type): ...here; make inline.\n\t(ceil_pow2): Use ceil_log2.\n\t* gcc-interface/utils.c (finish_subprog_decl): Add couple of comments\n\tand do not set TREE_SIDE_EFFECTS.\n\t(handle_noreturn_attribute): Use change_qualified_type.\n\nFrom-SVN: r261486", "tree": {"sha": "9d410fe98ce08d5b812d1848043326a4bb760c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d410fe98ce08d5b812d1848043326a4bb760c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d0f7c6d7da4607f61478fde993b225c7214904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d0f7c6d7da4607f61478fde993b225c7214904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d0f7c6d7da4607f61478fde993b225c7214904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d0f7c6d7da4607f61478fde993b225c7214904/comments", "author": null, "committer": null, "parents": [{"sha": "541bb35d87856ebb8bf768da3ded9410bdcb8310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541bb35d87856ebb8bf768da3ded9410bdcb8310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541bb35d87856ebb8bf768da3ded9410bdcb8310"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "cbe3233c68a6dc79648d24405f063c0005103604", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57d0f7c6d7da4607f61478fde993b225c7214904", "patch": "@@ -1,3 +1,17 @@\n+2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (TYPE_RETURN_BY_DIRECT_REF_P): Change from\n+\tusing TYPE_LANG_FLAG_4 to using TYPE_LANG_FLAG_0.\n+\t(TYPE_ALIGN_OK): Move around.\n+\t(TYPE_PADDING_FOR_COMPONENT): Remove superfluous parentheses.\n+\t* gcc-interface/decl.c (change_qualified_type): Move to...\n+\t(gnat_to_gnu_entity): Adjust comment.\n+\t* gcc-interface/gigi.h (change_qualified_type): ...here; make inline.\n+\t(ceil_pow2): Use ceil_log2.\n+\t* gcc-interface/utils.c (finish_subprog_decl): Add couple of comments\n+\tand do not set TREE_SIDE_EFFECTS.\n+\t(handle_noreturn_attribute): Use change_qualified_type.\n+\n 2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Do not get"}, {"sha": "90033d140fd3aea2795aa841c904936239c44f02", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=57d0f7c6d7da4607f61478fde993b225c7214904", "patch": "@@ -83,6 +83,12 @@ do {\t\t\t\t\t\t\t \\\n   ((TREE_CODE (NODE) == INTEGER_TYPE || TREE_CODE (NODE) == ARRAY_TYPE) \\\n    && TYPE_PACKED_ARRAY_TYPE_P (NODE))\n \n+/* For FUNCTION_TYPEs, nonzero if the function returns by direct reference,\n+   i.e. the callee returns a pointer to a memory location it has allocated\n+   and the caller only needs to dereference the pointer.  */\n+#define TYPE_RETURN_BY_DIRECT_REF_P(NODE) \\\n+  TYPE_LANG_FLAG_0 (FUNCTION_TYPE_CHECK (NODE))\n+\n /* For INTEGER_TYPE, nonzero if this is a modular type with a modulus that\n    is not equal to two to the power of its mode's size.  */\n #define TYPE_MODULAR_P(NODE) TYPE_LANG_FLAG_1 (INTEGER_TYPE_CHECK (NODE))\n@@ -152,12 +158,6 @@ do {\t\t\t\t\t\t\t \\\n #define TYPE_CONVENTION_FORTRAN_P(NODE) \\\n   TYPE_LANG_FLAG_4 (ARRAY_TYPE_CHECK (NODE))\n \n-/* For FUNCTION_TYPEs, nonzero if the function returns by direct reference,\n-   i.e. the callee returns a pointer to a memory location it has allocated\n-   and the caller only needs to dereference the pointer.  */\n-#define TYPE_RETURN_BY_DIRECT_REF_P(NODE) \\\n-  TYPE_LANG_FLAG_4 (FUNCTION_TYPE_CHECK (NODE))\n-\n /* For RECORD_TYPE, UNION_TYPE and ENUMERAL_TYPE, nonzero if this is a dummy\n    type, made to correspond to a private or incomplete type.  */\n #define TYPE_DUMMY_P(NODE) \\\n@@ -186,6 +186,9 @@ do {\t\t\t\t\t\t\t \\\n /* True for a dummy type if TYPE appears in a profile.  */\n #define TYPE_DUMMY_IN_PROFILE_P(NODE) TYPE_LANG_FLAG_6 (NODE)\n \n+/* True if objects of this type are guaranteed to be properly aligned.  */\n+#define TYPE_ALIGN_OK(NODE) TYPE_LANG_FLAG_7 (NODE)\n+\n /* True for types that implement a packed array and for original packed array\n    types.  */\n #define TYPE_IMPL_PACKED_ARRAY_P(NODE) \\\n@@ -199,9 +202,6 @@ do {\t\t\t\t\t\t\t \\\n    alignment value the type ought to have.  */\n #define TYPE_MAX_ALIGN(NODE) (TYPE_PRECISION (RECORD_OR_UNION_CHECK (NODE)))\n \n-/* True if objects of tagged types are guaranteed to be properly aligned.  */\n-#define TYPE_ALIGN_OK(NODE) TYPE_LANG_FLAG_7 (NODE)\n-\n /* For an UNCONSTRAINED_ARRAY_TYPE, this is the record containing both the\n    template and the object.\n \n@@ -238,7 +238,7 @@ do {\t\t\t\t\t\t\t \\\n /* For an ARRAY_TYPE with variable size, this is the padding type built for\n    the array type when it is itself the component type of another array.  */\n #define TYPE_PADDING_FOR_COMPONENT(NODE) \\\n-  (TYPE_LANG_SLOT_1 (ARRAY_TYPE_CHECK (NODE)))\n+  TYPE_LANG_SLOT_1 (ARRAY_TYPE_CHECK (NODE))\n \n /* For a VECTOR_TYPE, this is the representative array type.  */\n #define TYPE_REPRESENTATIVE_ARRAY(NODE) \\"}, {"sha": "82a44922c18f8d3c116ac5d4f4bda6be504d50db", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=57d0f7c6d7da4607f61478fde993b225c7214904", "patch": "@@ -210,7 +210,6 @@ static tree gnat_to_gnu_subprog_type (Entity_Id, bool, bool, tree *);\n static int adjust_packed (tree, tree, int);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n static tree gnu_ext_name_for_subprog (Entity_Id, tree);\n-static tree change_qualified_type (tree, int);\n static void set_nonaliased_component_on_array_type (tree);\n static void set_reverse_storage_order_on_array_type (tree);\n static bool same_discriminant_p (Entity_Id, Entity_Id);\n@@ -4447,7 +4446,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If this is not an unconstrained array type, set some flags.  */\n       if (TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE)\n \t{\n-\t  /* Tell the middle-end that objects of tagged types are guaranteed to\n+\t  /* Record the property that objects of tagged types are guaranteed to\n \t     be properly aligned.  This is necessary because conversions to the\n \t     class-wide type are translated into conversions to the root type,\n \t     which can be less aligned than some of its derived types.  */\n@@ -6065,19 +6064,6 @@ gnu_ext_name_for_subprog (Entity_Id gnat_subprog, tree gnu_entity_name)\n   return gnu_ext_name;\n }\n \n-/* Like build_qualified_type, but TYPE_QUALS is added to the existing\n-   qualifiers on TYPE.  */\n-\n-static tree\n-change_qualified_type (tree type, int type_quals)\n-{\n-  /* Qualifiers must be put on the associated array type.  */\n-  if (TREE_CODE (type) == UNCONSTRAINED_ARRAY_TYPE)\n-    return type;\n-\n-  return build_qualified_type (type, TYPE_QUALS (type) | type_quals);\n-}\n-\n /* Set TYPE_NONALIASED_COMPONENT on an array type built by means of\n    build_nonshared_array_type.  */\n "}, {"sha": "8950f8e10b1526c1654e6e1a3c21a93d9b71f8db", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=57d0f7c6d7da4607f61478fde993b225c7214904", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2017, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2018, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1075,7 +1075,7 @@ maybe_vector_array (tree exp)\n static inline unsigned HOST_WIDE_INT\n ceil_pow2 (unsigned HOST_WIDE_INT x)\n {\n-  return (unsigned HOST_WIDE_INT) 1 << (floor_log2 (x - 1) + 1);\n+  return (unsigned HOST_WIDE_INT) 1 << ceil_log2 (x);\n }\n \n /* Return true if EXP, a CALL_EXPR, is an atomic load.  */\n@@ -1172,3 +1172,16 @@ maybe_debug_type (tree type)\n \n   return type;\n }\n+\n+/* Like build_qualified_type, but TYPE_QUALS is added to the existing\n+   qualifiers on TYPE.  */\n+\n+static inline tree\n+change_qualified_type (tree type, int type_quals)\n+{\n+  /* Qualifiers must be put on the associated array type.  */\n+  if (TREE_CODE (type) == UNCONSTRAINED_ARRAY_TYPE)\n+    return type;\n+\n+  return build_qualified_type (type, TYPE_QUALS (type) | type_quals);\n+}"}, {"sha": "e456cc63373599895001109e692836a801a073a4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d0f7c6d7da4607f61478fde993b225c7214904/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=57d0f7c6d7da4607f61478fde993b225c7214904", "patch": "@@ -3327,8 +3327,11 @@ finish_subprog_decl (tree decl, tree asm_name, tree type)\n   DECL_BY_REFERENCE (result_decl) = TREE_ADDRESSABLE (type);\n   DECL_RESULT (decl) = result_decl;\n \n+  /* Propagate the \"const\" property.  */\n   TREE_READONLY (decl) = TYPE_READONLY (type);\n-  TREE_SIDE_EFFECTS (decl) = TREE_THIS_VOLATILE (decl) = TYPE_VOLATILE (type);\n+\n+  /* Propagate the \"noreturn\" property.  */\n+  TREE_THIS_VOLATILE (decl) = TYPE_VOLATILE (type);\n \n   if (asm_name)\n     {\n@@ -6226,8 +6229,7 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t   && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n     TREE_TYPE (*node)\n       = build_pointer_type\n-\t(build_type_variant (TREE_TYPE (type),\n-\t\t\t     TYPE_READONLY (TREE_TYPE (type)), 1));\n+\t(change_qualified_type (TREE_TYPE (type), TYPE_QUAL_VOLATILE));\n   else\n     {\n       warning (OPT_Wattributes, \"%qs attribute ignored\","}]}