{"sha": "76e06b73eeb9c3c01a6e360825454e1810c96b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlMDZiNzNlZWI5YzNjMDFhNmUzNjA4MjU0NTRlMTgxMGM5NmI1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-03T18:16:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-03T18:16:09Z"}, "message": "re PR tree-optimization/61403 (An opportunity for x86 gcc vectorizer (~40% gain))\n\n\tPR tree-optimization/61403\n\t* config/i386/i386.c (expand_vec_perm_palignr): Fix a spelling\n\terror in comment.  Also optimize 256-bit vectors for AVX2\n\tor AVX (floating vectors only), provided the first permutation\n\tcan be performed in one insn.\n\n\t* gcc.dg/torture/vshuf-32.inc: Add a new test 29.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r215866", "tree": {"sha": "2c961bb0d0ad39f2f4cb513d06c39347a9bd3159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c961bb0d0ad39f2f4cb513d06c39347a9bd3159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e06b73eeb9c3c01a6e360825454e1810c96b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e06b73eeb9c3c01a6e360825454e1810c96b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e06b73eeb9c3c01a6e360825454e1810c96b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e06b73eeb9c3c01a6e360825454e1810c96b55/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7705dfd11ffaabc5eeb7e7da66e138258a6594ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7705dfd11ffaabc5eeb7e7da66e138258a6594ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7705dfd11ffaabc5eeb7e7da66e138258a6594ea"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "708dca159b70cf3f8bd22d75a7674b23c0038e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76e06b73eeb9c3c01a6e360825454e1810c96b55", "patch": "@@ -1,3 +1,12 @@\n+2014-10-03  Jakub Jelinek  <jakub@redhat.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/61403\n+\t* config/i386/i386.c (expand_vec_perm_palignr): Fix a spelling\n+\terror in comment.  Also optimize 256-bit vectors for AVX2\n+\tor AVX (floating vectors only), provided the first permutation\n+\tcan be performed in one insn.\n+\n 2014-10-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.c (class driver): New class."}, {"sha": "2f36c52507d007433169030a8db8e28a6f2c4302", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=76e06b73eeb9c3c01a6e360825454e1810c96b55", "patch": "@@ -43422,7 +43422,7 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool single_insn_only_p)\n \n /* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n    the permutation using the SSE4_1 pblendv instruction.  Potentially\n-   reduces permutaion from 2 pshufb and or to 1 pshufb and pblendv.  */\n+   reduces permutation from 2 pshufb and or to 1 pshufb and pblendv.  */\n \n static bool\n expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n@@ -43432,11 +43432,14 @@ expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n   enum machine_mode vmode = d->vmode;\n   bool ok;\n \n-  /* Use the same checks as in expand_vec_perm_blend, but skipping\n-     AVX and AVX2 as they require more than 2 instructions.  */\n+  /* Use the same checks as in expand_vec_perm_blend.  */\n   if (d->one_operand_p)\n     return false;\n-  if (TARGET_SSE4_1 && GET_MODE_SIZE (vmode) == 16)\n+  if (TARGET_AVX2 && GET_MODE_SIZE (vmode) == 32)\n+    ;\n+  else if (TARGET_AVX && (vmode == V4DFmode || vmode == V8SFmode))\n+    ;\n+  else if (TARGET_SSE4_1 && GET_MODE_SIZE (vmode) == 16)\n     ;\n   else\n     return false;\n@@ -43458,7 +43461,7 @@ expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n      respective lanes and 8 >= 8, but 2 not.  */\n   if (which != 1 && which != 2)\n     return false;\n-  if (d->testing_p)\n+  if (d->testing_p && GET_MODE_SIZE (vmode) == 16)\n     return true;\n \n   /* First we apply one operand permutation to the part where\n@@ -43474,7 +43477,12 @@ expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n     dcopy.perm[i] = d->perm[i] & (nelt - 1);\n \n   ok = expand_vec_perm_1 (&dcopy);\n-  gcc_assert (ok);\n+  if (GET_MODE_SIZE (vmode) != 16 && !ok)\n+    return false;\n+  else\n+    gcc_assert (ok);\n+  if (d->testing_p)\n+    return true;\n \n   /* Next we put permuted elements into their positions.  */\n   dcopy1 = *d;"}, {"sha": "f8671a6a905b0a57906fff70bfc8e17525ad9d2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76e06b73eeb9c3c01a6e360825454e1810c96b55", "patch": "@@ -1,3 +1,8 @@\n+2014-10-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61403\n+\t* gcc.dg/torture/vshuf-32.inc: Add a new test 29.\n+\n 2014-10-03  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/gomp/appendix-a/a.35.4.c: Fix implicit declarations."}, {"sha": "ca975a2cdff78f3dae0da9a6ce6a750ffd96c899", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-32.inc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e06b73eeb9c3c01a6e360825454e1810c96b55/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-32.inc?ref=76e06b73eeb9c3c01a6e360825454e1810c96b55", "patch": "@@ -28,7 +28,8 @@ T (24,\t0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 1, 4, 7, 10, 13, 16, 19, 22, 25,\n T (25,\t11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42) \\\n T (26,\t21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52) \\\n T (27,\t22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53) \\\n-T (28,\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0, 1, 2, 3, 4, 5, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 16, 17, 18, 19, 20, 21)\n+T (28,\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0, 1, 2, 3, 4, 5, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 16, 17, 18, 19, 20, 21) \\\n+T (29,\t0, 43, 2, 3, 57, 5, 6, 7, 8, 53, 40, 11, 12, 13, 42, 15, 16, 40, 18, 19, 20, 21, 22, 23, 24, 25, 36, 58, 36, 29, 30, 31)\n #define EXPTESTS \\\n T (116,\t13, 38, 47, 3, 17, 8, 38, 20, 59, 61, 39, 26, 7, 49, 63, 43, 57, 16, 40, 19, 4, 32, 27, 7, 52, 19, 46, 55, 36, 41, 48, 6) \\\n T (117,\t39, 35, 59, 20, 56, 18, 58, 63, 57, 14, 2, 16, 5, 61, 35, 4, 53, 9, 52, 51, 27, 33, 61, 12, 3, 35, 36, 40, 37, 7, 45, 42) \\"}]}