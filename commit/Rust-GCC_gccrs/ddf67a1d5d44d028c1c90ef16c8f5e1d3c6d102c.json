{"sha": "ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmNjdhMWQ1ZDQ0ZDAyOGMxYzkwZWYxNmM4ZjVlMWQzYzZkMTAyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:48:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:48:36Z"}, "message": "[multiple changes]\n\n2011-08-29  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Scan_Make_Arg): Take any option as is in packages Compiler,\n\tBinder or Linker of the main project file.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb (Add_Scopes_To_Clean): Exclude any entity within a generic\n\tunit.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch9.adb: Partial revert of previous change for Alfa mode\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch11.adb: Minor expansion of comment.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Add_ALFA_Scope): Treat generic entities.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Arithmetic_Op): If the node has a universal\n\tinterpretation, set the type before resolving the operands, because\n\tlegality checks on an exponention operand need to know the type of the\n\tcontext.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Do not set delayed\n\tcleanups on a master if the instance is within a generic unit.\n\tComplement to the corresponding fix to inline.adb for K520-030.\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch7.adb (Build_Raise_Statement): Raise PE instead of the current\n\toccurrence.\n\t* exp_intr.adb: Minor comment fix.\n\n2011-08-29  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Fix cases where\n\tDelay_Required was used as an uninitialized variable.\n\nFrom-SVN: r178233", "tree": {"sha": "bdea3a0b0de9cd409e4fa3488b77a5a34819faea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdea3a0b0de9cd409e4fa3488b77a5a34819faea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/comments", "author": null, "committer": null, "parents": [{"sha": "690943fcd4d667a4de8614a565bc13a66816c94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690943fcd4d667a4de8614a565bc13a66816c94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690943fcd4d667a4de8614a565bc13a66816c94a"}], "stats": {"total": 155, "additions": 109, "deletions": 46}, "files": [{"sha": "42da6aed86d394442dccca0ea6989df3cadc7003", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -1,3 +1,49 @@\n+2011-08-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): Take any option as is in packages Compiler,\n+\tBinder or Linker of the main project file.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Add_Scopes_To_Clean): Exclude any entity within a generic\n+\tunit.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch9.adb: Partial revert of previous change for Alfa mode\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch11.adb: Minor expansion of comment.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Add_ALFA_Scope): Treat generic entities.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Arithmetic_Op): If the node has a universal\n+\tinterpretation, set the type before resolving the operands, because\n+\tlegality checks on an exponention operand need to know the type of the\n+\tcontext.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Do not set delayed\n+\tcleanups on a master if the instance is within a generic unit.\n+\tComplement to the corresponding fix to inline.adb for K520-030.\n+\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Raise_Statement): Raise PE instead of the current\n+\toccurrence.\n+\t* exp_intr.adb: Minor comment fix.\n+\n+2011-08-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Fix cases where\n+\tDelay_Required was used as an uninitialized variable.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cdlili.adb, a-cdlili.ads, a-coinve.adb, a-coinve.ads,"}, {"sha": "caf66cca0e027426e2421d1ece15b41808f463b2", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -1667,7 +1667,9 @@ package body Exp_Ch11 is\n       else\n          --  Bypass expansion to a run-time call when back-end exception\n          --  handling is active, unless the target is a VM, CodePeer or\n-         --  GNATprove.\n+         --  GNATprove. In CodePeer, raising an exception is treated as an\n+         --  error, while in GNATprove all code with exceptions falls outside\n+         --  the subset of code which can be formally analyzed.\n \n          if VM_Target = No_VM\n            and then not CodePeer_Mode"}, {"sha": "984bdb869894193add647537a653986e97fa10b5", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -3104,24 +3104,35 @@ package body Exp_Ch7 is\n       E_Id      : Entity_Id;\n       Raised_Id : Entity_Id) return Node_Id\n    is\n-      Proc_Id : Entity_Id;\n+      Stmt : Node_Id;\n \n    begin\n       --  Standard run-time, .NET/JVM targets\n+      --  Call Raise_From_Controlled_Operation (E_Id).\n \n       if RTE_Available (RE_Raise_From_Controlled_Operation) then\n-         Proc_Id := RTE (RE_Raise_From_Controlled_Operation);\n+         Stmt :=\n+           Make_Procedure_Call_Statement (Loc,\n+              Name                   =>\n+                New_Reference_To (RTE (RE_Raise_From_Controlled_Operation),\n+                                  Loc),\n+              Parameter_Associations =>\n+                New_List (New_Reference_To (E_Id, Loc)));\n \n       --  Restricted runtime: exception messages are not supported and hence\n       --  Raise_From_Controlled_Operation is not supported.\n+      --  Simply raise Program_Error.\n \n       else\n-         Proc_Id := RTE (RE_Reraise_Occurrence);\n+         Stmt :=\n+           Make_Raise_Program_Error (Loc,\n+             Reason => PE_Finalize_Raised_Exception);\n+\n       end if;\n \n       --  Generate:\n       --    if Raised_Id and then not Abort_Id then\n-      --       <Proc_Id> (<Params>);\n+      --       Raise_From_Controlled_Operation (E_Id);\n       --    end if;\n \n       return\n@@ -3133,11 +3144,7 @@ package body Exp_Ch7 is\n                 Make_Op_Not (Loc,\n                   Right_Opnd => New_Reference_To (Abort_Id, Loc))),\n \n-          Then_Statements => New_List (\n-            Make_Procedure_Call_Statement (Loc,\n-              Name                   => New_Reference_To (Proc_Id, Loc),\n-              Parameter_Associations =>\n-                New_List (New_Reference_To (E_Id, Loc)))));\n+          Then_Statements => New_List (Stmt));\n    end Build_Raise_Statement;\n \n    -----------------------------"}, {"sha": "57193cbf74f223ce9b15045636ac615402c38d11", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -4878,6 +4878,12 @@ package body Exp_Ch9 is\n       Ldecl2 : Node_Id;\n \n    begin\n+      --  In formal verification mode, do not expand tasking constructs\n+\n+      if ALFA_Mode then\n+         return;\n+      end if;\n+\n       if Expander_Active then\n \n          --  If we have no handled statement sequence, we may need to build\n@@ -10571,12 +10577,6 @@ package body Exp_Ch9 is\n       Decl_Stack : Node_Id;\n \n    begin\n-      --  Do not expand tasking constructs in formal verification mode\n-\n-      if ALFA_Mode then\n-         return;\n-      end if;\n-\n       --  If already expanded, nothing to do\n \n       if Present (Corresponding_Record_Type (Tasktyp)) then"}, {"sha": "7ce12d61b8ab4a3bd539d0b6bd488eda641f60d3", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -1232,7 +1232,7 @@ package body Exp_Intr is\n \n       --  Generate:\n       --    if Raised and then not Abort then\n-      --       Reraise_Occurrence (E);               --  for .NET and\n+      --       raise Program_Error;                  --  for .NET and\n       --                                             --  restricted RTS\n       --         <or>\n       --       Raise_From_Controlled_Operation (E);  --  all other cases"}, {"sha": "0eb8dce6f4feb20e6774de7bdf0f987034617eb2", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -496,16 +496,18 @@ package body Inline is\n          return;\n       end if;\n \n-      --  If the instance appears within a generic subprogram there is nothing\n-      --  to finalize either.\n+      --  If the instance is within a generic unit, no finalization code\n+      --  can be generated. Note that at this point all bodies have been\n+      --  analyzed, and the scope stack itself is not present, and the flag\n+      --  Inside_A_Generic is not set.\n \n       declare\n          S : Entity_Id;\n \n       begin\n          S := Scope (Inst);\n          while Present (S) and then S /= Standard_Standard loop\n-            if Is_Generic_Subprogram (S) then\n+            if Is_Generic_Unit (S) then\n                return;\n             end if;\n "}, {"sha": "9aabe7cf95c964c80bc0144f62f13aca414e1ee5", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -282,10 +282,10 @@ package body ALFA is\n       end if;\n \n       case Ekind (E) is\n-         when E_Function =>\n+         when E_Function | E_Generic_Function =>\n             Typ := 'V';\n \n-         when E_Procedure =>\n+         when E_Procedure | E_Generic_Procedure =>\n             Typ := 'U';\n \n          when E_Subprogram_Body =>\n@@ -308,7 +308,7 @@ package body ALFA is\n                end if;\n             end;\n \n-         when E_Package | E_Package_Body =>\n+         when E_Package | E_Package_Body | E_Generic_Package =>\n             Typ := 'K';\n \n          when E_Void =>"}, {"sha": "c7e1d070d0f9d96f474b7672f851d0523dfcac67", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -7373,15 +7373,15 @@ package body Make is\n \n          end if;\n \n-      --  Then check if we are dealing with -cargs/-bargs/-largs/-margs\n-\n-      elsif Argv = \"-bargs\"\n-              or else\n-            Argv = \"-cargs\"\n-              or else\n-            Argv = \"-largs\"\n-              or else\n-            Argv = \"-margs\"\n+      --  Then check if we are dealing with -cargs/-bargs/-largs/-margs. These\n+      --  options are taken as is when found in package Compiler, Binder or\n+      --  Linker of the main project file.\n+\n+      elsif (And_Save or else Program_Args = None)\n+        and then (Argv = \"-bargs\" or else\n+                  Argv = \"-cargs\" or else\n+                  Argv = \"-largs\" or else\n+                  Argv = \"-margs\")\n       then\n          case Argv (2) is\n             when 'c' => Program_Args := Compiler;"}, {"sha": "8df2d05fbf8df41f369529034aaa8abf8f41a2e2", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -3528,15 +3528,13 @@ package body Sem_Ch12 is\n                            Enclosing_Master := Scope (Enclosing_Master);\n                         end if;\n \n-                     elsif Ekind (Enclosing_Master) = E_Generic_Package then\n-                        Enclosing_Master := Scope (Enclosing_Master);\n-\n-                     elsif Is_Generic_Subprogram (Enclosing_Master)\n+                     elsif Is_Generic_Unit (Enclosing_Master)\n                        or else Ekind (Enclosing_Master) = E_Void\n                      then\n                         --  Cleanup actions will eventually be performed on the\n-                        --  enclosing instance, if any. Enclosing scope is void\n-                        --  in the formal part of a generic subprogram.\n+                        --  enclosing subprogram or package instance, if any.\n+                        --  Enclosing scope is void in the formal part of a\n+                        --  generic subprogram.\n \n                         exit Scope_Loop;\n "}, {"sha": "5113904ccf950366f222584f46f68d8bd68c0f94", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -710,7 +710,7 @@ package body Sem_Ch13 is\n       --  or attribute definition node in either case to activate special\n       --  processing (e.g. not traversing the list of homonyms for inline).\n \n-      Delay_Required : Boolean;\n+      Delay_Required : Boolean := False;\n       --  Set True if delay is required\n \n    begin\n@@ -904,7 +904,7 @@ package body Sem_Ch13 is\n \n                   --  Never need to delay for boolean aspects\n \n-                  Delay_Required := False;\n+                  pragma Assert (not Delay_Required);\n \n                --  Library unit aspects. These are boolean aspects, but we\n                --  have to do special things with the insertion, since the\n@@ -944,7 +944,7 @@ package body Sem_Ch13 is\n \n                   --  If not package declaration, no delay is required\n \n-                  Delay_Required := False;\n+                  pragma Assert (not Delay_Required);\n \n                --  Aspects related to container iterators. These aspects denote\n                --  subprograms, and thus must be delayed.\n@@ -1046,7 +1046,8 @@ package body Sem_Ch13 is\n                   --  to take care of it right away.\n \n                   if Nkind_In (Expr, N_Integer_Literal, N_String_Literal) then\n-                     Delay_Required := False;\n+                     pragma Assert (not Delay_Required);\n+                     null;\n                   else\n                      Delay_Required := True;\n                      Set_Is_Delayed_Aspect (Aspect);\n@@ -1073,7 +1074,7 @@ package body Sem_Ch13 is\n                   --  We don't have to play the delay game here, since the only\n                   --  values are check names which don't get analyzed anyway.\n \n-                  Delay_Required := False;\n+                  pragma Assert (not Delay_Required);\n \n                --  Aspects corresponding to pragmas with two arguments, where\n                --  the second argument is a local name referring to the entity,\n@@ -1095,7 +1096,7 @@ package body Sem_Ch13 is\n                   --  We don't have to play the delay game here, since the only\n                   --  values are ON/OFF which don't get analyzed anyway.\n \n-                  Delay_Required := False;\n+                  pragma Assert (not Delay_Required);\n \n                --  Default_Value and Default_Component_Value aspects. These\n                --  are specially handled because they have no corresponding\n@@ -1146,6 +1147,8 @@ package body Sem_Ch13 is\n \n                   Set_From_Aspect_Specification (Aitem, True);\n \n+                  pragma Assert (not Delay_Required);\n+\n                when Aspect_Priority | Aspect_Interrupt_Priority => declare\n                   Pname : Name_Id;\n \n@@ -1164,6 +1167,8 @@ package body Sem_Ch13 is\n                         New_List (Relocate_Node (Expr)));\n \n                   Set_From_Aspect_Specification (Aitem, True);\n+\n+                  pragma Assert (not Delay_Required);\n                end;\n \n                --  Aspects Pre/Post generate Precondition/Postcondition pragmas\n@@ -1523,7 +1528,7 @@ package body Sem_Ch13 is\n                            Prepend (Aitem, To => L);\n                         end;\n \n-                  --  For all other cases, insert in sequence\n+                     --  For all other cases, insert in sequence\n \n                      when others =>\n                         Insert_After (Ins_Node, Aitem);"}, {"sha": "433678a81b92f518a12ae56c8e28e78219169b36", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ddf67a1d5d44d028c1c90ef16c8f5e1d3c6d102c", "patch": "@@ -4640,13 +4640,16 @@ package body Sem_Res is\n       --  universal real, since in this case we don't do a conversion to a\n       --  specific fixed-point type (instead the expander handles the case).\n \n+      --  Set the type of the node to its universal interpretation because\n+      --  legality checks on an exponentiation operand need the context.\n+\n       elsif (B_Typ = Universal_Integer or else B_Typ = Universal_Real)\n         and then Present (Universal_Interpretation (L))\n         and then Present (Universal_Interpretation (R))\n       then\n+         Set_Etype (N, B_Typ);\n          Resolve (L, Universal_Interpretation (L));\n          Resolve (R, Universal_Interpretation (R));\n-         Set_Etype (N, B_Typ);\n \n       elsif (B_Typ = Universal_Real\n               or else Etype (N) = Universal_Fixed"}]}