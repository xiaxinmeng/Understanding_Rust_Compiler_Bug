{"sha": "8f96c7ac27203b9c74a1d244c52ce242b65e8681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NmM3YWMyNzIwM2I5Yzc0YTFkMjQ0YzUyY2UyNDJiNjVlODY4MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-03-09T19:37:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-09T19:37:02Z"}, "message": "call.c (add_function_candidate): Check for proper number of args before checking the validity of those args.\n\n\t* call.c (add_function_candidate): Check for proper number of args\n\tbefore checking the validity of those args.\n\nFrom-SVN: r25660", "tree": {"sha": "e76fcf35fd811414c2922db3992bb03de0cefd7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76fcf35fd811414c2922db3992bb03de0cefd7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f96c7ac27203b9c74a1d244c52ce242b65e8681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f96c7ac27203b9c74a1d244c52ce242b65e8681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f96c7ac27203b9c74a1d244c52ce242b65e8681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f96c7ac27203b9c74a1d244c52ce242b65e8681/comments", "author": null, "committer": null, "parents": [{"sha": "19f019c25c29269223cb246c2a86cb48ec792bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f019c25c29269223cb246c2a86cb48ec792bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f019c25c29269223cb246c2a86cb48ec792bbd"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "3ec99ada9e1db3587c5ea139d82057f5b65d408d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f96c7ac27203b9c74a1d244c52ce242b65e8681/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f96c7ac27203b9c74a1d244c52ce242b65e8681/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f96c7ac27203b9c74a1d244c52ce242b65e8681", "patch": "@@ -1,3 +1,8 @@\n+1999-03-09  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (add_function_candidate): Check for proper number of args\n+\tbefore checking the validity of those args.\n+\n 1999-03-06  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h (struct lang_type): Add anon_union field."}, {"sha": "e6b11251457519f2dc8ccaf32c2cb295b4bc40b6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f96c7ac27203b9c74a1d244c52ce242b65e8681/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f96c7ac27203b9c74a1d244c52ce242b65e8681/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8f96c7ac27203b9c74a1d244c52ce242b65e8681", "patch": "@@ -1134,24 +1134,60 @@ add_function_candidate (candidates, fn, arglist, flags)\n   tree parmlist = TYPE_ARG_TYPES (TREE_TYPE (fn));\n   int i, len;\n   tree convs;\n-  tree parmnode = parmlist;\n-  tree argnode = arglist;\n+  tree parmnode, argnode;\n   int viable = 1;\n \n   /* The `this' and `in_chrg' arguments to constructors are not considered\n      in overload resolution.  */\n   if (DECL_CONSTRUCTOR_P (fn))\n     {\n-      parmnode = TREE_CHAIN (parmnode);\n-      argnode = TREE_CHAIN (argnode);\n+      parmlist = TREE_CHAIN (parmlist);\n+      arglist = TREE_CHAIN (arglist);\n       if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n \t{\n-\t  parmnode = TREE_CHAIN (parmnode);\n-\t  argnode = TREE_CHAIN (argnode);\n+\t  parmlist = TREE_CHAIN (parmlist);\n+\t  arglist = TREE_CHAIN (arglist);\n \t}\n     }\n \n-  len = list_length (argnode);\n+  len = list_length (arglist);\n+\n+  /* 13.3.2 - Viable functions [over.match.viable]\n+     First, to be a viable function, a candidate function shall have enough\n+     parameters to agree in number with the arguments in the list.\n+\n+     We need to check this first; otherwise, checking the ICSes might cause\n+     us to produce an ill-formed template instantiation.  */\n+\n+  parmnode = parmlist;\n+  for (i = 0; i < len; ++i)\n+    {\n+      if (parmnode == NULL_TREE || parmnode == void_list_node)\n+\tbreak;\n+      parmnode = TREE_CHAIN (parmnode);\n+    }\n+\n+  if (i < len && parmnode)\n+    viable = 0;\n+\n+  /* Make sure there are default args for the rest of the parms.  */\n+  else for (; parmnode && parmnode != void_list_node;\n+\t    parmnode = TREE_CHAIN (parmnode))\n+    if (! TREE_PURPOSE (parmnode))\n+      {\n+\tviable = 0;\n+\tbreak;\n+      }\n+\n+  if (! viable)\n+    goto out;\n+\n+  /* Second, for F to be a viable function, there shall exist for each\n+     argument an implicit conversion sequence that converts that argument\n+     to the corresponding parameter of F.  */\n+\n+  parmnode = parmlist;\n+  argnode = arglist;\n   convs = make_scratch_vec (len);\n \n   for (i = 0; i < len; ++i)\n@@ -1196,7 +1232,10 @@ add_function_candidate (candidates, fn, arglist, flags)\n \n       TREE_VEC_ELT (convs, i) = t;\n       if (! t)\n-\tbreak;\n+\t{\n+\t  viable = 0;\n+\t  break;\n+\t}\n \n       if (ICS_BAD_FLAG (t))\n \tviable = -1;\n@@ -1206,18 +1245,7 @@ add_function_candidate (candidates, fn, arglist, flags)\n       argnode = TREE_CHAIN (argnode);\n     }\n \n-  if (i < len)\n-    viable = 0;\n-\n-  /* Make sure there are default args for the rest of the parms.  */\n-  for (; parmnode && parmnode != void_list_node;\n-       parmnode = TREE_CHAIN (parmnode))\n-    if (! TREE_PURPOSE (parmnode))\n-      {\n-\tviable = 0;\n-\tbreak;\n-      }\n-\n+ out:\n   return add_candidate (candidates, fn, convs, viable);\n }\n "}]}