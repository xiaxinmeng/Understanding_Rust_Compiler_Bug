{"sha": "a62828520413d90d5dd11c43068b31a46d4fbd75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyODI4NTIwNDEzZDkwZDVkZDExYzQzMDY4YjMxYTQ2ZDRmYmQ3NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-08-01T08:22:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T08:22:22Z"}, "message": "2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb New flags No_Predicate_On_Actual and\n\tNo_Dynamic_Predicate_On_Actual, to enforce the generic contract\n\ton generic units that contain constructs that forbid subtypes\n\twith predicates.\n\t* sem_ch3.adb (Analyze_Subtype_Declaration, Process_Subtype):\n\tInherit flags indicating the presence of predicates in subtype\n\tdeclarations with and without constraints.\n\t(Inherit_Predicate_Flags): Utility for the above.\n\t* sem_util.adb (Bad_Predicated_Subtype_Use): In a generic context,\n\tindicate that the actual cannot have predicates, and preserve\n\twarning. In an instance, report error if actual has predicates\n\tand the construct appears in a package declaration.\n\t* sem_ch12.adb (Diagnose_Predicated_Actual): Report error\n\tfor an actual with predicates, if the corresponding formal\n\tcarries No_Predicate_On_Actual or (in the case of a loop)\n\tNo_Dynamic_Predicate_On_Actual.\n\t* sem_ch13.adb (Build_Predicate_Functions); Do not build a\n\tStatic_Predicate function if the type is non-static (in the\n\tpresence of previous errors),\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Set flag\n\tNo_Dynamic_Predicate_On_Actual in a generic context, to enforce\n\tgeneric contract on actuals that cannot have predicates.\n\nFrom-SVN: r213418", "tree": {"sha": "efca47fc8a07665edf55f42f6a080abec3a50aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efca47fc8a07665edf55f42f6a080abec3a50aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a62828520413d90d5dd11c43068b31a46d4fbd75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62828520413d90d5dd11c43068b31a46d4fbd75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62828520413d90d5dd11c43068b31a46d4fbd75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62828520413d90d5dd11c43068b31a46d4fbd75/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd29c0247aa4af7492782e6c933c713c6732b4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd29c0247aa4af7492782e6c933c713c6732b4b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd29c0247aa4af7492782e6c933c713c6732b4b0"}], "stats": {"total": 204, "additions": 189, "deletions": 15}, "files": [{"sha": "1c81d98d2daeb878088873f54f65d90a041966d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -1,3 +1,28 @@\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb New flags No_Predicate_On_Actual and\n+\tNo_Dynamic_Predicate_On_Actual, to enforce the generic contract\n+\ton generic units that contain constructs that forbid subtypes\n+\twith predicates.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration, Process_Subtype):\n+\tInherit flags indicating the presence of predicates in subtype\n+\tdeclarations with and without constraints.\n+\t(Inherit_Predicate_Flags): Utility for the above.\n+\t* sem_util.adb (Bad_Predicated_Subtype_Use): In a generic context,\n+\tindicate that the actual cannot have predicates, and preserve\n+\twarning. In an instance, report error if actual has predicates\n+\tand the construct appears in a package declaration.\n+\t* sem_ch12.adb (Diagnose_Predicated_Actual): Report error\n+\tfor an actual with predicates, if the corresponding formal\n+\tcarries No_Predicate_On_Actual or (in the case of a loop)\n+\tNo_Dynamic_Predicate_On_Actual.\n+\t* sem_ch13.adb (Build_Predicate_Functions); Do not build a\n+\tStatic_Predicate function if the type is non-static (in the\n+\tpresence of previous errors),\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Set flag\n+\tNo_Dynamic_Predicate_On_Actual in a generic context, to enforce\n+\tgeneric contract on actuals that cannot have predicates.\n+\n 2014-08-01  Pascal Obry  <obry@adacore.com>\n \n \t* a-direct.adb (C_Size): Returns an int64."}, {"sha": "0c229a723b9ffcbb62d5f9fdaf559981ab8e5012", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -567,15 +567,12 @@ package body Einfo is\n    --    (SSO_Set_Low_By_Default)        Flag273\n \n    --    Is_Generic_Actual_Subprogram    Flag274\n+   --    No_Predicate_On_Actual          Flag275\n+   --    No_Dynamic_Predicate_On_Actual  Flag276\n \n    --    (unused)                        Flag2\n    --    (unused)                        Flag3\n \n-   --    (unused)                        Flag132\n-   --    (unused)                        Flag133\n-\n-   --    (unused)                        Flag275\n-   --    (unused)                        Flag276\n    --    (unused)                        Flag277\n    --    (unused)                        Flag278\n    --    (unused)                        Flag279\n@@ -2557,12 +2554,24 @@ package body Einfo is\n       return Node12 (Id);\n    end Next_Inlined_Subprogram;\n \n+   function No_Dynamic_Predicate_On_Actual (Id : E) return Boolean is\n+   begin\n+      pragma Assert (Is_Discrete_Type (Id));\n+      return Flag276 (Id);\n+   end No_Dynamic_Predicate_On_Actual;\n+\n    function No_Pool_Assigned (Id : E) return B is\n    begin\n       pragma Assert (Is_Access_Type (Id));\n       return Flag131 (Root_Type (Id));\n    end No_Pool_Assigned;\n \n+   function No_Predicate_On_Actual (Id : E) return Boolean is\n+   begin\n+      pragma Assert (Is_Discrete_Type (Id));\n+      return Flag275 (Id);\n+   end No_Predicate_On_Actual;\n+\n    function No_Return (Id : E) return B is\n    begin\n       return Flag113 (Id);\n@@ -5344,12 +5353,24 @@ package body Einfo is\n       Set_Node12 (Id, V);\n    end Set_Next_Inlined_Subprogram;\n \n+   procedure Set_No_Dynamic_Predicate_On_Actual (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Discrete_Type (Id));\n+      Set_Flag276 (Id, V);\n+   end Set_No_Dynamic_Predicate_On_Actual;\n+\n    procedure Set_No_Pool_Assigned (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Access_Type (Id) and then Is_Base_Type (Id));\n       Set_Flag131 (Id, V);\n    end Set_No_Pool_Assigned;\n \n+   procedure Set_No_Predicate_On_Actual (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Discrete_Type (Id));\n+      Set_Flag275 (Id, V);\n+   end Set_No_Predicate_On_Actual;\n+\n    procedure Set_No_Return (Id : E; V : B := True) is\n    begin\n       pragma Assert\n@@ -8435,7 +8456,9 @@ package body Einfo is\n       W (\"Needs_Debug_Info\",                Flag147 (Id));\n       W (\"Needs_No_Actuals\",                Flag22  (Id));\n       W (\"Never_Set_In_Source\",             Flag115 (Id));\n+      W (\"No_Dynamic_Predicate_On_actual\",  Flag276 (Id));\n       W (\"No_Pool_Assigned\",                Flag131 (Id));\n+      W (\"No_Predicate_On_actual\",          Flag275 (Id));\n       W (\"No_Return\",                       Flag113 (Id));\n       W (\"No_Strict_Aliasing\",              Flag136 (Id));\n       W (\"Non_Binary_Modulus\",              Flag58  (Id));"}, {"sha": "c8dd25bf4accd4f581e949efe8b89da3447b35f3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -3347,13 +3347,21 @@ package Einfo is\n --       interpreted as true. Currently this is set for derived Boolean\n --       types which have a convention of C, C++ or Fortran.\n \n+--    No_Dynamic_Predicate_On_Actual (Flag276)\n+--       Defined on generic formal types that are used in loops and quantified\n+--       expressions. The corresponing actual cannot have dynamic predicates.\n+\n --    No_Pool_Assigned (Flag131) [root type only]\n --       Defined in access types. Set if a storage size clause applies to the\n --       variable with a static expression value of zero. This flag is used to\n --       generate errors if any attempt is made to allocate or free an instance\n --       of such an access type. This is set only in the root type, since\n --       derived types must have the same pool.\n \n+--    No_Predicate_On_Actual (Flag275)\n+--       Defined on generic formal types that are used in the spec of a generic\n+--       package, in constructs that forbid discrete types with predicates.\n+\n --    No_Return (Flag113)\n --       Defined in all entities. Always false except in the case of procedures\n --       and generic procedures for which a pragma No_Return is given.\n@@ -5566,6 +5574,8 @@ package Einfo is\n    --    Has_Enumeration_Rep_Clause          (Flag66)\n    --    Has_Pragma_Ordered                  (Flag198)  (base type only)\n    --    Nonzero_Is_True                     (Flag162)  (base type only)\n+   --    No_Predicate_On_Actual              (Flag275)\n+   --    No_Dynamic_Predicate_On_Actual      (Flag276)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -5780,6 +5790,8 @@ package Einfo is\n    --    Non_Binary_Modulus                  (Flag58)   (base type only)\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Shift_Operator                  (Flag267)  (base type only)\n+   --    No_Predicate_On_Actual              (Flag275)\n+   --    No_Dynamic_Predicate_On_Actual      (Flag276)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -6082,6 +6094,8 @@ package Einfo is\n    --    Static_Discrete_Predicate           (List25)\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Shift_Operator                  (Flag267)  (base type only)\n+   --    No_Predicate_On_Actual              (Flag275)\n+   --    No_Dynamic_Predicate_On_Actual      (Flag276)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -6751,7 +6765,9 @@ package Einfo is\n    function Needs_No_Actuals                    (Id : E) return B;\n    function Never_Set_In_Source                 (Id : E) return B;\n    function Next_Inlined_Subprogram             (Id : E) return E;\n+   function No_Dynamic_Predicate_On_Actual      (Id : E) return B;\n    function No_Pool_Assigned                    (Id : E) return B;\n+   function No_Predicate_On_Actual              (Id : E) return B;\n    function No_Return                           (Id : E) return B;\n    function No_Strict_Aliasing                  (Id : E) return B;\n    function Non_Binary_Modulus                  (Id : E) return B;\n@@ -7389,7 +7405,9 @@ package Einfo is\n    procedure Set_Needs_No_Actuals                (Id : E; V : B := True);\n    procedure Set_Never_Set_In_Source             (Id : E; V : B := True);\n    procedure Set_Next_Inlined_Subprogram         (Id : E; V : E);\n+   procedure Set_No_Dynamic_Predicate_On_Actual  (Id : E; V : B := True);\n    procedure Set_No_Pool_Assigned                (Id : E; V : B := True);\n+   procedure Set_No_Predicate_On_Actual          (Id : E; V : B := True);\n    procedure Set_No_Return                       (Id : E; V : B := True);\n    procedure Set_No_Strict_Aliasing              (Id : E; V : B := True);\n    procedure Set_Non_Binary_Modulus              (Id : E; V : B := True);\n@@ -8175,7 +8193,9 @@ package Einfo is\n    pragma Inline (Next_Index);\n    pragma Inline (Next_Inlined_Subprogram);\n    pragma Inline (Next_Literal);\n+   pragma Inline (No_Dynamic_Predicate_On_Actual);\n    pragma Inline (No_Pool_Assigned);\n+   pragma Inline (No_Predicate_On_Actual);\n    pragma Inline (No_Return);\n    pragma Inline (No_Strict_Aliasing);\n    pragma Inline (Non_Binary_Modulus);\n@@ -8612,7 +8632,9 @@ package Einfo is\n    pragma Inline (Set_Needs_No_Actuals);\n    pragma Inline (Set_Never_Set_In_Source);\n    pragma Inline (Set_Next_Inlined_Subprogram);\n+   pragma Inline (Set_No_Dynamic_Predicate_On_Actual);\n    pragma Inline (Set_No_Pool_Assigned);\n+   pragma Inline (Set_No_Predicate_On_Actual);\n    pragma Inline (Set_No_Return);\n    pragma Inline (Set_No_Strict_Aliasing);\n    pragma Inline (Set_Non_Binary_Modulus);"}, {"sha": "db449d88320ff07917e201f8d42bfea5fa76d16f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -10810,6 +10810,13 @@ package body Sem_Ch12 is\n       Loc        : Source_Ptr;\n       Subt       : Entity_Id;\n \n+      procedure Diagnose_Predicated_Actual;\n+      --  There are a number of constructs in which a discrete type with\n+      --  predicates is illegal, e.g. as an index in an array type declaration.\n+      --  If a generic type is used is such a construct in a generic package\n+      --  declaration, it carries the flag No_Predicate_On_Actual. it is part\n+      --  of the generic contract that the actual cannot have predicates.\n+\n       procedure Validate_Array_Type_Instance;\n       procedure Validate_Access_Subprogram_Instance;\n       procedure Validate_Access_Type_Instance;\n@@ -10827,6 +10834,29 @@ package body Sem_Ch12 is\n       --  Check that base types are the same and that the subtypes match\n       --  statically. Used in several of the above.\n \n+      ---------------------------------\n+      --  Diagnose_Predicated_Actual --\n+      ---------------------------------\n+\n+      procedure Diagnose_Predicated_Actual is\n+      begin\n+         if No_Predicate_On_Actual (A_Gen_T)\n+           and then Has_Predicates (Act_T)\n+         then\n+            Error_Msg_NE\n+              (\"actual for& cannot be a type with predicate\",\n+                 Instantiation_Node, A_Gen_T);\n+\n+         elsif No_Dynamic_Predicate_On_Actual (A_Gen_T)\n+           and then Has_Predicates (Act_T)\n+           and then not Has_Static_Predicate_Aspect (Act_T)\n+         then\n+            Error_Msg_NE\n+              (\"actual for& cannot be a type with a dynamic predicate\",\n+                 Instantiation_Node, A_Gen_T);\n+         end if;\n+      end Diagnose_Predicated_Actual;\n+\n       --------------------\n       -- Subtypes_Match --\n       --------------------\n@@ -11995,6 +12025,8 @@ package body Sem_Ch12 is\n                   Abandon_Instantiation (Actual);\n                end if;\n \n+               Diagnose_Predicated_Actual;\n+\n             when N_Formal_Signed_Integer_Type_Definition =>\n                if not Is_Signed_Integer_Type (Act_T) then\n                   Error_Msg_NE\n@@ -12003,6 +12035,8 @@ package body Sem_Ch12 is\n                   Abandon_Instantiation (Actual);\n                end if;\n \n+               Diagnose_Predicated_Actual;\n+\n             when N_Formal_Modular_Type_Definition =>\n                if not Is_Modular_Integer_Type (Act_T) then\n                   Error_Msg_NE\n@@ -12011,6 +12045,8 @@ package body Sem_Ch12 is\n                   Abandon_Instantiation (Actual);\n                end if;\n \n+               Diagnose_Predicated_Actual;\n+\n             when N_Formal_Floating_Point_Definition =>\n                if not Is_Floating_Point_Type (Act_T) then\n                   Error_Msg_NE"}, {"sha": "cc03f9213375530a9c247ba43d28166e3acc6ffa", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -8255,6 +8255,15 @@ package body Sem_Ch13 is\n                --  For discrete subtype, build the static predicate list\n \n                if Is_Discrete_Type (Typ) then\n+                  if not Is_Static_Subtype (Typ) then\n+\n+                     --  This can only happen in the presence of previous\n+                     --  semantic errors.\n+\n+                     pragma Assert (Serious_Errors_Detected > 0);\n+                     return;\n+                  end if;\n+\n                   Build_Discrete_Static_Predicate (Typ, Expr, Object_Name);\n \n                   --  If we don't get a static predicate list, it means that we\n@@ -10123,7 +10132,7 @@ package body Sem_Ch13 is\n       end if;\n \n       --  For a record type, deal with variant parts. This has to be delayed\n-      --  to this point, because of the issue of statically precicated\n+      --  to this point, because of the issue of statically predicated\n       --  subtypes, which we have to ensure are frozen before checking\n       --  choices, since we need to have the static choice list set.\n "}, {"sha": "9e8969f9ac53a7ddeb2983d90f7b05748fc46985", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -586,6 +586,10 @@ package body Sem_Ch3 is\n    --  copying the record declaration for the derived base. In the tagged case\n    --  the value returned is irrelevant.\n \n+   procedure Inherit_Predicate_Flags (Subt, Par : Entity_Id);\n+   --  Propagate static and dynamic predicate flags from a parent to the\n+   --  subtype in a subtype declaration with and without constraints.\n+\n    function Is_Valid_Constraint_Kind\n      (T_Kind          : Type_Kind;\n       Constraint_Kind : Node_Kind) return Boolean;\n@@ -4514,14 +4518,13 @@ package body Sem_Ch3 is\n \n             when Enumeration_Kind =>\n                Set_Ekind                (Id, E_Enumeration_Subtype);\n-               Set_Has_Dynamic_Predicate_Aspect\n-                                        (Id, Has_Dynamic_Predicate_Aspect (T));\n                Set_First_Literal        (Id, First_Literal (Base_Type (T)));\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Character_Type    (Id, Is_Character_Type  (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n+               Inherit_Predicate_Flags  (Id, T);\n \n             when Ordinary_Fixed_Point_Kind =>\n                Set_Ekind                (Id, E_Ordinary_Fixed_Point_Subtype);\n@@ -4544,13 +4547,15 @@ package body Sem_Ch3 is\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n+               Inherit_Predicate_Flags  (Id, T);\n \n             when Modular_Integer_Kind =>\n                Set_Ekind                (Id, E_Modular_Integer_Subtype);\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n+               Inherit_Predicate_Flags  (Id, T);\n \n             when Class_Wide_Kind =>\n                Set_Ekind                (Id, E_Class_Wide_Subtype);\n@@ -16793,6 +16798,18 @@ package body Sem_Ch3 is\n       return Assoc_List;\n    end Inherit_Components;\n \n+   -----------------------------\n+   -- Inherit_Predicate_Flags --\n+   -----------------------------\n+\n+   procedure Inherit_Predicate_Flags (Subt, Par : Entity_Id) is\n+   begin\n+      Set_Has_Static_Predicate_Aspect (Subt,\n+          Has_Static_Predicate_Aspect (Par));\n+      Set_Has_Dynamic_Predicate_Aspect (Subt,\n+          Has_Dynamic_Predicate_Aspect (Par));\n+   end Inherit_Predicate_Flags;\n+\n    -----------------------\n    -- Is_Null_Extension --\n    -----------------------\n@@ -19653,6 +19670,7 @@ package body Sem_Ch3 is\n \n             when Enumeration_Kind =>\n                Constrain_Enumeration (Def_Id, S);\n+               Inherit_Predicate_Flags (Def_Id, Subtype_Mark_Id);\n \n             when Ordinary_Fixed_Point_Kind =>\n                Constrain_Ordinary_Fixed (Def_Id, S);\n@@ -19662,6 +19680,7 @@ package body Sem_Ch3 is\n \n             when Integer_Kind =>\n                Constrain_Integer (Def_Id, S);\n+               Inherit_Predicate_Flags (Def_Id, Subtype_Mark_Id);\n \n             when E_Record_Type     |\n                  E_Record_Subtype  |"}, {"sha": "56db2bcc7b2ccc3f0a36b0569e3ad04ed7e370ea", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -2509,6 +2509,9 @@ package body Sem_Ch5 is\n             Bad_Predicated_Subtype_Use\n               (\"cannot use subtype& with non-static predicate for loop \" &\n                \"iteration\", DS, Entity (DS), Suggest_Static => True);\n+\n+         elsif Inside_A_Generic and then Is_Generic_Formal (Entity (DS)) then\n+            Set_No_Dynamic_Predicate_On_Actual (Entity (DS));\n          end if;\n       end if;\n "}, {"sha": "237cc86f774238153e977762c5e3ddfd2b89623e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62828520413d90d5dd11c43068b31a46d4fbd75/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a62828520413d90d5dd11c43068b31a46d4fbd75", "patch": "@@ -781,15 +781,52 @@ package body Sem_Util is\n       Typ            : Entity_Id;\n       Suggest_Static : Boolean := False)\n    is\n+      Gen            : Entity_Id;\n    begin\n-      if Has_Predicates (Typ) then\n+      if Inside_A_Generic then\n+         Gen := Current_Scope;\n+         while Present (Gen) and then  Ekind (Gen) /= E_Generic_Package loop\n+            Gen := Scope (Gen);\n+         end loop;\n+\n+         if No (Gen) then\n+            return;\n+         end if;\n+\n+         if Is_Generic_Formal (Typ) then\n+            Set_No_Predicate_On_Actual (Typ);\n+         end if;\n+\n+      elsif Has_Predicates (Typ) then\n          if Is_Generic_Actual_Type (Typ) then\n-            Error_Msg_Warn := SPARK_Mode /= On;\n-            Error_Msg_FE (Msg & \"<<\", N, Typ);\n-            Error_Msg_F (\"\\Program_Error [<<\", N);\n-            Insert_Action (N,\n-              Make_Raise_Program_Error (Sloc (N),\n-                Reason => PE_Bad_Predicated_Generic_Type));\n+\n+            --  The restriction on loop parameters is only that the type\n+            --  should have no dynamic predicates.\n+\n+            if Nkind (Parent (N)) = N_Loop_Parameter_Specification\n+              and then not Has_Dynamic_Predicate_Aspect (Typ)\n+              and then Is_Static_Subtype (Typ)\n+            then\n+               return;\n+            end if;\n+\n+            Gen := Current_Scope;\n+            while not Is_Generic_Instance (Gen) loop\n+               Gen := Scope (Gen);\n+            end loop;\n+\n+            pragma Assert (Present (Gen));\n+\n+            if Ekind (Gen) = E_Package and then In_Package_Body (Gen) then\n+               Error_Msg_Warn := SPARK_Mode /= On;\n+               Error_Msg_FE (Msg & \"<<\", N, Typ);\n+               Error_Msg_F (\"\\Program_Error [<<\", N);\n+               Insert_Action (N,\n+                 Make_Raise_Program_Error (Sloc (N),\n+                   Reason => PE_Bad_Predicated_Generic_Type));\n+            else\n+               Error_Msg_FE (Msg & \"<<\", N, Typ);\n+            end if;\n \n          else\n             Error_Msg_FE (Msg, N, Typ);"}]}