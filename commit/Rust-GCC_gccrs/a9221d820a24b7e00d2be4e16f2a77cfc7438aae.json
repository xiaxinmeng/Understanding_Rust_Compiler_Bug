{"sha": "a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyMjFkODIwYTI0YjdlMDBkMmJlNGUxNmYyYTc3Y2ZjNzQzOGFhZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-21T15:58:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-21T15:58:32Z"}, "message": "[AArch64][committed] Fix gcc.target/aarch64/vec_init_1.c for tiny and large mcmodels\n\nThis recently-committed test fails the INS scan for tiny and large memory models.\nThat is because instead of the:\nmake_vector:\n         adrp    x1, a\n         adrp    x0, b\n         movi    v0.4s, 0\n         ldr     s2, [x1, #:lo12:a]\n         ldr     s1, [x0, #:lo12:b]\n         ins     v0.s[2], v2.s[0]\n         ins     v0.s[3], v1.s[0]\n         ret\n\nThat we generate for the default small model, we end up with a simple register\naddressing mode with no addend/offset for the lane load:\nmake_vector:\n         movi    v0.4s, 0\n         adr     x1, a\n         adr     x0, b\n         ld1     {v0.s}[2], [x1]\n         ld1     {v0.s}[3], [x0]\n         ret\n\nand\n\nmake_vector:\n         movi    v0.4s, 0\n         adrp    x0, .LC0\n         ldr     x1, [x0, #:lo12:.LC0]\n         adrp    x0, .LC1\n         ldr     x0, [x0, #:lo12:.LC1]\n         ld1     {v0.s}[2], [x1]\n         ld1     {v0.s}[3], [x0]\n         ret\n\nSo we end up merging the load and the lane insert.\nThis patch adjusts the testcase to scan for the right thing accordingly.\nChecked that the testcase passes with -mcmodel=tiny, -mcmodel=small, -mcmodel=large.\n\n\t* gcc.target/aarch64/vec_init_1.c: Scan for LD1 instead of INS for\n\ttiny and large memory models.\n\nFrom-SVN: r260474", "tree": {"sha": "a3aab623cd113ffb3586b1e418cb94ea6e83a0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3aab623cd113ffb3586b1e418cb94ea6e83a0ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9221d820a24b7e00d2be4e16f2a77cfc7438aae/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc3d037ed1d1fcdd58d6e38105ffad1dc18c2435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3d037ed1d1fcdd58d6e38105ffad1dc18c2435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3d037ed1d1fcdd58d6e38105ffad1dc18c2435"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "781ae5d4eb03420c33a312cf289fb88520840abf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9221d820a24b7e00d2be4e16f2a77cfc7438aae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9221d820a24b7e00d2be4e16f2a77cfc7438aae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "patch": "@@ -1,3 +1,8 @@\n+2018-05-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/vec_init_1.c: Scan for LD1 instead of INS for\n+\ttiny and large memory models.\n+\n 2018-04-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/suppress_initialization.adb,"}, {"sha": "c8b48dac45259c1a708e6818338def650fc995c2", "filename": "gcc/testsuite/gcc.target/aarch64/vec_init_1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9221d820a24b7e00d2be4e16f2a77cfc7438aae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_init_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9221d820a24b7e00d2be4e16f2a77cfc7438aae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_init_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_init_1.c?ref=a9221d820a24b7e00d2be4e16f2a77cfc7438aae", "patch": "@@ -25,7 +25,11 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"ins\\\\t\" 2 } } */\n+/* For memory models that don't have an addend on the lane value\n+   load we can merge the load and lane insert into an LD1.\n+   For others we expect LDR + INS sequences.  */\n+/* { dg-final { scan-assembler-times \"ld1\\\\t\" 2 { target { aarch64_tiny || aarch64_large } } } } */\n+/* { dg-final { scan-assembler-times \"ins\\\\t\" 2 { target aarch64_small } } } */\n /* What we want to check, is that make_vector does not stp the whole vector\n    to the stack.  Unfortunately here we scan the body of main() too, which may\n    be a bit fragile - the test is currently passing only because of the option"}]}