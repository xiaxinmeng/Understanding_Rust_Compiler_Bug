{"sha": "4b940ccee19496d8f494b7ad0b850f08c177d5bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5NDBjY2VlMTk0OTZkOGY0OTRiN2FkMGI4NTBmMDhjMTc3ZDViZg==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-02-03T15:49:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:30Z"}, "message": "libstc++: Implement hmin and hmax\n\nFrom 9.7.4 in Parallelism TS 2. For some reason I overlooked these two\nfunctions. Implement them via call to _S_reduce.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h: Add __detail::_Minimum and\n\t__detail::_Maximum to use them as _BinaryOperation to _S_reduce.\n\tAdd hmin and hmax overloads for simd and const_where_expression.\n\t* include/experimental/bits/simd_scalar.h\n\t(_SimdImplScalar::_S_reduce): Make unused _BinaryOperation\n\tparameter const-ref to allow calling _S_reduce with an rvalue.\n\t* testsuite/experimental/simd/tests/reductions.cc: Add tests for\n\thmin and hmax. Since the compiler statically determined that all\n\ttests pass, repeat the test after a call to make_value_unknown.", "tree": {"sha": "ac685840bdb79eb56722242d0abf0b4a62d2b828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac685840bdb79eb56722242d0abf0b4a62d2b828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b940ccee19496d8f494b7ad0b850f08c177d5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b940ccee19496d8f494b7ad0b850f08c177d5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b940ccee19496d8f494b7ad0b850f08c177d5bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b940ccee19496d8f494b7ad0b850f08c177d5bf/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af60e4bd4b69f39173a8347aa2dcdaa40227ec67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af60e4bd4b69f39173a8347aa2dcdaa40227ec67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af60e4bd4b69f39173a8347aa2dcdaa40227ec67"}], "stats": {"total": 107, "additions": 105, "deletions": 2}, "files": [{"sha": "c452778832fa936aa9e7fe239f4306482dbfa02d", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=4b940ccee19496d8f494b7ad0b850f08c177d5bf", "patch": "@@ -204,6 +204,33 @@ template <size_t _Np>\n template <size_t _X>\n   using _SizeConstant = integral_constant<size_t, _X>;\n \n+namespace __detail\n+{\n+  struct _Minimum\n+  {\n+    template <typename _Tp>\n+      _GLIBCXX_SIMD_INTRINSIC constexpr\n+      _Tp\n+      operator()(_Tp __a, _Tp __b) const\n+      {\n+\tusing std::min;\n+\treturn min(__a, __b);\n+      }\n+  };\n+\n+  struct _Maximum\n+  {\n+    template <typename _Tp>\n+      _GLIBCXX_SIMD_INTRINSIC constexpr\n+      _Tp\n+      operator()(_Tp __a, _Tp __b) const\n+      {\n+\tusing std::max;\n+\treturn max(__a, __b);\n+      }\n+  };\n+} // namespace __detail\n+\n // unrolled/pack execution helpers\n // __execute_n_times{{{\n template <typename _Fp, size_t... _I>\n@@ -3408,7 +3435,7 @@ template <typename _Tp, typename _Ap>\n \n // }}}1\n // reductions [simd.reductions] {{{1\n-  template <typename _Tp, typename _Abi, typename _BinaryOperation = plus<>>\n+template <typename _Tp, typename _Abi, typename _BinaryOperation = plus<>>\n   _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR _Tp\n   reduce(const simd<_Tp, _Abi>& __v,\n \t _BinaryOperation __binary_op = _BinaryOperation())\n@@ -3454,6 +3481,61 @@ template <typename _M, typename _V>\n   reduce(const const_where_expression<_M, _V>& __x, bit_xor<> __binary_op)\n   { return reduce(__x, 0, __binary_op); }\n \n+template <typename _Tp, typename _Abi>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR _Tp\n+  hmin(const simd<_Tp, _Abi>& __v) noexcept\n+  {\n+    return _Abi::_SimdImpl::_S_reduce(__v, __detail::_Minimum());\n+  }\n+\n+template <typename _Tp, typename _Abi>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR _Tp\n+  hmax(const simd<_Tp, _Abi>& __v) noexcept\n+  {\n+    return _Abi::_SimdImpl::_S_reduce(__v, __detail::_Maximum());\n+  }\n+\n+template <typename _M, typename _V>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR\n+  typename _V::value_type\n+  hmin(const const_where_expression<_M, _V>& __x) noexcept\n+  {\n+    using _Tp = typename _V::value_type;\n+    constexpr _Tp __id_elem =\n+#ifdef __FINITE_MATH_ONLY__\n+      __finite_max_v<_Tp>;\n+#else\n+      __value_or<__infinity, _Tp>(__finite_max_v<_Tp>);\n+#endif\n+    _V __tmp = __id_elem;\n+    _V::_Impl::_S_masked_assign(__data(__get_mask(__x)), __data(__tmp),\n+\t\t\t\t__data(__get_lvalue(__x)));\n+    return _V::abi_type::_SimdImpl::_S_reduce(__tmp, __detail::_Minimum());\n+  }\n+\n+template <typename _M, typename _V>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR\n+  typename _V::value_type\n+  hmax(const const_where_expression<_M, _V>& __x) noexcept\n+  {\n+    using _Tp = typename _V::value_type;\n+    constexpr _Tp __id_elem =\n+#ifdef __FINITE_MATH_ONLY__\n+      __finite_min_v<_Tp>;\n+#else\n+      [] {\n+\tif constexpr (__value_exists_v<__infinity, _Tp>)\n+\t  return -__infinity_v<_Tp>;\n+\telse\n+\t  return __finite_min_v<_Tp>;\n+      }();\n+#endif\n+    _V __tmp = __id_elem;\n+    _V::_Impl::_S_masked_assign(__data(__get_mask(__x)), __data(__tmp),\n+\t\t\t\t__data(__get_lvalue(__x)));\n+    return _V::abi_type::_SimdImpl::_S_reduce(__tmp, __detail::_Maximum());\n+  }\n+\n // }}}1\n // algorithms [simd.alg] {{{\n template <typename _Tp, typename _Ap>"}, {"sha": "48e13f6c7195b33834dfb58299ea608b90d86a3b", "filename": "libstdc++-v3/include/experimental/bits/simd_scalar.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_scalar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_scalar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_scalar.h?ref=4b940ccee19496d8f494b7ad0b850f08c177d5bf", "patch": "@@ -182,7 +182,7 @@ struct _SimdImplScalar\n   // _S_reduce {{{2\n   template <typename _Tp, typename _BinaryOperation>\n     static constexpr inline _Tp\n-    _S_reduce(const simd<_Tp, simd_abi::scalar>& __x, _BinaryOperation&)\n+    _S_reduce(const simd<_Tp, simd_abi::scalar>& __x, const _BinaryOperation&)\n     { return __x._M_data; }\n \n   // _S_min, _S_max {{{2"}, {"sha": "1f20961825b76d3b3b4faf5793070ba07b5bf4ee", "filename": "libstdc++-v3/testsuite/experimental/simd/tests/reductions.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b940ccee19496d8f494b7ad0b850f08c177d5bf/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Ftests%2Freductions.cc?ref=4b940ccee19496d8f494b7ad0b850f08c177d5bf", "patch": "@@ -57,6 +57,8 @@ template <typename V>\n     }\n \n     {\n+      COMPARE(hmin(V(1)), T(1));\n+      COMPARE(hmax(V(1)), T(1));\n       const V z([](T i) { return i + 1; });\n       COMPARE(std::experimental::reduce(z,\n \t\t\t\t\t[](auto a, auto b) {\n@@ -79,6 +81,25 @@ template <typename V>\n \t\t\t\t\t}),\n \t      T(V::size() == 1 ? 117 : 2))\n \t<< \"z: \" << z;\n+      COMPARE(hmin(z), T(1));\n+      COMPARE(hmax(z), T(V::size()));\n+      if (V::size() > 1)\n+\t{\n+\t  COMPARE(hmin(where(z > 1, z)), T(2));\n+\t  COMPARE(hmax(where(z > 1, z)), T(V::size()));\n+\t}\n+      COMPARE(hmin(where(z < 4, z)), T(1));\n+      COMPARE(hmax(where(z < 4, z)), std::min(T(V::size()), T(3)));\n+      const V zz = make_value_unknown(z);\n+      COMPARE(hmin(zz), T(1));\n+      COMPARE(hmax(zz), T(V::size()));\n+      if (V::size() > 1)\n+\t{\n+\t  COMPARE(hmin(where(zz > 1, zz)), T(2));\n+\t  COMPARE(hmax(where(zz > 1, zz)), T(V::size()));\n+\t}\n+      COMPARE(hmin(where(zz < 4, zz)), T(1));\n+      COMPARE(hmax(where(zz < 4, zz)), std::min(T(V::size()), T(3)));\n     }\n \n     test_values<V>({}, {1000}, [](V x) {"}]}