{"sha": "3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "node_id": "C_kwDOANBUbNoAKDNlMWNiYTEyYThkNzFlNzAyMzVhOWE5YjhmMWEyMzdhNTYxZGIzZTc", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-11T14:58:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-11T15:03:25Z"}, "message": "Fix problematic interaction between bitfields, unions, SSO and SRA\n\nThe handling of bitfields by the SRA pass is peculiar and this must be taken\ninto account to support the scalar_storage_order attribute.\n\ngcc/\n\tPR tree-optimization/108199\n\t* tree-sra.cc (sra_modify_expr): Deal with reverse storage order\n\tfor bit-field references.\n\ngcc/testsuite/\n\t* gcc.dg/sso-17.c: New test.", "tree": {"sha": "ab50dad9a88b4fbfaf9d650658644084fad4bc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab50dad9a88b4fbfaf9d650658644084fad4bc95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7/comments", "author": null, "committer": null, "parents": [{"sha": "de99049f6fe5341024d4d939ac50d063280f90db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de99049f6fe5341024d4d939ac50d063280f90db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de99049f6fe5341024d4d939ac50d063280f90db"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "67e2d3793fde4f83160f5cae3ba967ef62f9c229", "filename": "gcc/testsuite/gcc.dg/sso-17.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-17.c?ref=3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"big-endian\")))\n+#else\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"little-endian\")))\n+#endif\n+\n+typedef unsigned long long u64;\n+\n+union DST {\n+  u64 val;\n+\n+  struct {\n+    u64 x : 1;\n+    u64 y : 1;\n+    u64 r: 62;\n+  } REV_ENDIANNESS;\n+} REV_ENDIANNESS;\n+\n+\n+struct SRC {\n+  u64 a;\n+} REV_ENDIANNESS;\n+\n+[[gnu::noipa]]\n+void foo () {__builtin_abort();}\n+\n+[[gnu::noinline]]\n+int bar(struct SRC *src)\n+{\n+  union DST dst;\n+  \n+  dst.val = src->a;\n+\n+  if (dst.y) {\n+    foo();\n+  }\n+  return 0;\n+}\n+\n+int main(void)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  struct SRC t = {-1ull & (~(0x01ull<<62))};\n+#else\n+  struct SRC t = {-1ull & (~(0x01ull<<1))};\n+#endif\n+  bar(&t);\n+  return 0;\n+}"}, {"sha": "ad0c738645d7f30e5efcb9ea09f3b5b7819ee237", "filename": "gcc/tree-sra.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7/gcc%2Ftree-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cba12a8d71e70235a9a9b8f1a237a561db3e7/gcc%2Ftree-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.cc?ref=3e1cba12a8d71e70235a9a9b8f1a237a561db3e7", "patch": "@@ -3858,7 +3858,23 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write)\n \t    }\n \t}\n       else\n-\t*expr = repl;\n+\t{\n+\t  /* If we are going to replace a scalar field in a structure with\n+\t     reverse storage order by a stand-alone scalar, we are going to\n+\t     effectively byte-swap the scalar and we also need to byte-swap\n+\t     the portion of it represented by the bit-field.  */\n+\t  if (bfr && REF_REVERSE_STORAGE_ORDER (bfr))\n+\t    {\n+\t      REF_REVERSE_STORAGE_ORDER (bfr) = 0;\n+\t      TREE_OPERAND (bfr, 2)\n+\t\t= size_binop (MINUS_EXPR, TYPE_SIZE (TREE_TYPE (repl)),\n+\t\t\t      size_binop (PLUS_EXPR, TREE_OPERAND (bfr, 1),\n+\t\t\t\t\t\t     TREE_OPERAND (bfr, 2)));\n+\t    }\n+\n+\t  *expr = repl;\n+\t}\n+\n       sra_stats.exprs++;\n     }\n   else if (write && access->grp_to_be_debug_replaced)"}]}