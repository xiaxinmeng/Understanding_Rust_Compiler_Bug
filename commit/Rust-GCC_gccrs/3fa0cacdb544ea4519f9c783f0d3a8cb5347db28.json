{"sha": "3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhMGNhY2RiNTQ0ZWE0NTE5ZjljNzgzZjBkM2E4Y2I1MzQ3ZGIyOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-03T16:22:09Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-03T16:22:09Z"}, "message": "simplify-rtx.c (simplify_relational_operation_1): Implement some canonicalization transformations that attempt to simplify...\n\n\n\t* simplify-rtx.c (simplify_relational_operation_1): Implement some\n\tcanonicalization transformations that attempt to simplify integer\n\tconstant comparisons to become comparisons against zero.\n\nFrom-SVN: r121544", "tree": {"sha": "bfb24c386a49e21499491718ab79c1846ad1b956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb24c386a49e21499491718ab79c1846ad1b956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28/comments", "author": null, "committer": null, "parents": [{"sha": "5041541e41d601397af25539d0c94cccff320188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5041541e41d601397af25539d0c94cccff320188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5041541e41d601397af25539d0c94cccff320188"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "e6cfa7cf548490d2be34580c21f0471524aec256", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "patch": "@@ -1,3 +1,9 @@\n+2007-02-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_relational_operation_1): Implement some\n+\tcanonicalization transformations that attempt to simplify integer\n+\tconstant comparisons to become comparisons against zero.\n+\n 2007-02-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_cabs): Fold cabs(x+xi) into"}, {"sha": "f04f0521e35a3b65bd1ba39d82a684c086d59ff5", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa0cacdb544ea4519f9c783f0d3a8cb5347db28/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3fa0cacdb544ea4519f9c783f0d3a8cb5347db28", "patch": "@@ -3595,28 +3595,68 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n {\n   enum rtx_code op0code = GET_CODE (op0);\n \n-  if (GET_CODE (op1) == CONST_INT)\n+  if (op1 == const0_rtx && COMPARISON_P (op0))\n     {\n-      if (INTVAL (op1) == 0 && COMPARISON_P (op0))\n+      /* If op0 is a comparison, extract the comparison arguments\n+         from it.  */\n+      if (code == NE)\n \t{\n-\t  /* If op0 is a comparison, extract the comparison arguments\n-\t     from it.  */\n-\t  if (code == NE)\n-\t    {\n-\t      if (GET_MODE (op0) == mode)\n-\t\treturn simplify_rtx (op0);\n-\t      else\n-\t\treturn simplify_gen_relational (GET_CODE (op0), mode, VOIDmode,\n-\t\t\t\t\t        XEXP (op0, 0), XEXP (op0, 1));\n-\t    }\n-\t  else if (code == EQ)\n-\t    {\n-\t      enum rtx_code new_code = reversed_comparison_code (op0, NULL_RTX);\n-\t      if (new_code != UNKNOWN)\n-\t        return simplify_gen_relational (new_code, mode, VOIDmode,\n-\t\t\t\t\t        XEXP (op0, 0), XEXP (op0, 1));\n-\t    }\n+\t  if (GET_MODE (op0) == mode)\n+\t    return simplify_rtx (op0);\n+\t  else\n+\t    return simplify_gen_relational (GET_CODE (op0), mode, VOIDmode,\n+\t\t\t\t\t    XEXP (op0, 0), XEXP (op0, 1));\n \t}\n+      else if (code == EQ)\n+\t{\n+\t  enum rtx_code new_code = reversed_comparison_code (op0, NULL_RTX);\n+\t  if (new_code != UNKNOWN)\n+\t    return simplify_gen_relational (new_code, mode, VOIDmode,\n+\t\t\t\t\t    XEXP (op0, 0), XEXP (op0, 1));\n+\t}\n+    }\n+\n+  if (op1 == const0_rtx)\n+    {\n+      /* Canonicalize (GTU x 0) as (NE x 0).  */\n+      if (code == GTU)\n+        return simplify_gen_relational (NE, mode, cmp_mode, op0, op1);\n+      /* Canonicalize (LEU x 0) as (EQ x 0).  */\n+      if (code == LEU)\n+        return simplify_gen_relational (EQ, mode, cmp_mode, op0, op1);\n+    }\n+  else if (op1 == const1_rtx)\n+    {\n+      switch (code)\n+        {\n+        case GE:\n+\t  /* Canonicalize (GE x 1) as (GT x 0).  */\n+\t  return simplify_gen_relational (GT, mode, cmp_mode,\n+\t\t\t\t\t  op0, const0_rtx);\n+\tcase GEU:\n+\t  /* Canonicalize (GEU x 1) as (NE x 0).  */\n+\t  return simplify_gen_relational (NE, mode, cmp_mode,\n+\t\t\t\t\t  op0, const0_rtx);\n+\tcase LT:\n+\t  /* Canonicalize (LT x 1) as (LE x 0).  */\n+\t  return simplify_gen_relational (LE, mode, cmp_mode,\n+\t\t\t\t\t  op0, const0_rtx);\n+\tcase LTU:\n+\t  /* Canonicalize (LTU x 1) as (EQ x 0).  */\n+\t  return simplify_gen_relational (EQ, mode, cmp_mode,\n+\t\t\t\t\t  op0, const0_rtx);\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  else if (op1 == constm1_rtx)\n+    {\n+      /* Canonicalize (LE x -1) as (LT x 0).  */\n+      if (code == LE)\n+        return simplify_gen_relational (LT, mode, cmp_mode, op0, const0_rtx);\n+      /* Canonicalize (GT x -1) as (GE x 0).  */\n+      if (code == GT)\n+        return simplify_gen_relational (GE, mode, cmp_mode, op0, const0_rtx);\n     }\n \n   /* (eq/ne (plus x cst1) cst2) simplifies to (eq/ne x (cst2 - cst1))  */"}]}