{"sha": "700e542971251b11623cce877075567815f72965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwZTU0Mjk3MTI1MWIxMTYyM2NjZTg3NzA3NTU2NzgxNWY3Mjk2NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-09T07:35:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-23T06:46:06Z"}, "message": "tree-optimization/99971 - improve BB vect dependence analysis\n\nWe can use TBAA even when we have a DR, do so.  For the testcase\nthat means fully vectorizing it instead of only vectorizing\nthe first store group resulting in suboptimal code.\n\n2021-04-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99971\n\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n\tAlways use TBAA for loads.\n\n\t* g++.dg/vect/slp-pr99971.cc: New testcase.", "tree": {"sha": "7a7da8c380e72602b855075b61bb8f604e84ed24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a7da8c380e72602b855075b61bb8f604e84ed24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700e542971251b11623cce877075567815f72965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700e542971251b11623cce877075567815f72965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700e542971251b11623cce877075567815f72965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700e542971251b11623cce877075567815f72965/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342de04d993beaa644d0b0087c20bef5dad5bf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342de04d993beaa644d0b0087c20bef5dad5bf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342de04d993beaa644d0b0087c20bef5dad5bf5f"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "bec6418d4e801ea7cf9b34148c805c8931233e0c", "filename": "gcc/testsuite/g++.dg/vect/slp-pr99971.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700e542971251b11623cce877075567815f72965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr99971.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700e542971251b11623cce877075567815f72965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr99971.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr99971.cc?ref=700e542971251b11623cce877075567815f72965", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-require-effective-target vect_int }\n+\n+struct A\n+{\n+  unsigned int a, b, c, d;\n+\n+  A& operator+= (A const& that)\n+    {\n+      a += that.a;\n+      b += that.b;\n+      c += that.c;\n+      d += that.d;\n+      return *this;\n+    }\n+\n+  A& operator-= (A const& that)\n+    {\n+      a -= that.a;\n+      b -= that.b;\n+      c -= that.c;\n+      d -= that.d;\n+      return *this;\n+    }\n+};\n+\n+void test(A& x, A const& y1, A const& y2)\n+{\n+  x += y1;\n+  x -= y2;\n+}\n+\n+// We want to SLP vectorize a single connected SLP subgraph with two instances\n+// { dg-final { scan-tree-dump-not \"removing SLP instance\" \"slp2\" } }\n+// { dg-final { scan-tree-dump-times \"SLPing BB part\" 1 \"slp2\" } }\n+// { dg-final { scan-tree-dump-times \"Vectorizing SLP\" 2 \"slp2\" } }"}, {"sha": "b317df532a9a92a619de9572378437d09c632ab0", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700e542971251b11623cce877075567815f72965/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700e542971251b11623cce877075567815f72965/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=700e542971251b11623cce877075567815f72965", "patch": "@@ -780,16 +780,20 @@ vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n \t\t stmt we have to resort to the alias oracle.  */\n \t      stmt_vec_info stmt_info = vinfo->lookup_stmt (stmt);\n \t      data_reference *dr_b = STMT_VINFO_DATA_REF (stmt_info);\n-\t      if (!dr_b)\n+\n+\t      /* We are hoisting a load - this means we can use\n+\t\t TBAA for disambiguation.  */\n+\t      if (!ref_initialized_p)\n+\t\tao_ref_init (&ref, DR_REF (dr_a));\n+\t      if (stmt_may_clobber_ref_p_1 (stmt, &ref, true))\n \t\t{\n-\t\t  /* We are hoisting a load - this means we can use\n-\t\t     TBAA for disambiguation.  */\n-\t\t  if (!ref_initialized_p)\n-\t\t    ao_ref_init (&ref, DR_REF (dr_a));\n-\t\t  if (stmt_may_clobber_ref_p_1 (stmt, &ref, true))\n+\t\t  if (!dr_b)\n \t\t    return false;\n-\t\t  continue;\n+\t\t  /* Resort to dependence checking below.  */\n \t\t}\n+\t      else\n+\t\t/* No dependence.  */\n+\t\tcontinue;\n \n \t      bool dependent = false;\n \t      /* If we run into a store of this same instance (we've just"}]}