{"sha": "896db49a442a15a1fa1f641cd0385da1ba1794e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2ZGI0OWE0NDJhMTVhMWZhMWY2NDFjZDAzODVkYTFiYTE3OTRlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-12T14:05:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-12T14:08:43Z"}, "message": "More PRE compile-time optimizations\n\nThis fixes a bug in bitmap_list_view which could end up with\na NULL head->current which makes followup searches fail.  Oops.\n\nIt also further optimizes the PRE DFS walk by removing useless\nstuff and special-casing bitmaps with just one element for\nEXECUTE_IF_AND_IN_BITMAP which makes a quite big difference.\n\n2020-11-12  Richard Biener  <rguenther@suse.de>\n\n\t* bitmap.c (bitmap_list_view): Restore head->current.\n\t* tree-ssa-pre.c (pre_expr_DFS): Elide expr_visited bitmap.\n\tSpecial-case value expression bitmaps with one element.\n\t(bitmap_find_leader): Likewise.\n\t(sorted_array_from_bitmap_set): Elide expr_visited bitmap.", "tree": {"sha": "fbbdbc6276cb75d899d8eefbefbd25ec59a48166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbdbc6276cb75d899d8eefbefbd25ec59a48166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896db49a442a15a1fa1f641cd0385da1ba1794e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896db49a442a15a1fa1f641cd0385da1ba1794e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896db49a442a15a1fa1f641cd0385da1ba1794e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896db49a442a15a1fa1f641cd0385da1ba1794e3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb808c583de59ea568fd240144cd9db07272f45e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb808c583de59ea568fd240144cd9db07272f45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb808c583de59ea568fd240144cd9db07272f45e"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "c849b0d22f56f2e2de702fc99b1f12761e40429a", "filename": "gcc/bitmap.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896db49a442a15a1fa1f641cd0385da1ba1794e3/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896db49a442a15a1fa1f641cd0385da1ba1794e3/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=896db49a442a15a1fa1f641cd0385da1ba1794e3", "patch": "@@ -678,6 +678,11 @@ bitmap_list_view (bitmap head)\n     }\n \n   head->tree_form = false;\n+  if (!head->current)\n+    {\n+      head->current = head->first;\n+      head->indx = head->current ? head->current->indx : 0;\n+    }\n }\n \n /* Convert bitmap HEAD from linked-list view to splay-tree view."}, {"sha": "e25cec7ffa1d11532a8b1a2ab823cc63adac4100", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896db49a442a15a1fa1f641cd0385da1ba1794e3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896db49a442a15a1fa1f641cd0385da1ba1794e3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=896db49a442a15a1fa1f641cd0385da1ba1794e3", "patch": "@@ -806,37 +806,41 @@ bitmap_set_free (bitmap_set_t set)\n }\n \n static void\n-pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n-\t      bitmap val_visited, vec<pre_expr> &post);\n+pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap val_visited,\n+\t      vec<pre_expr> &post);\n \n /* DFS walk leaders of VAL to their operands with leaders in SET, collecting\n    expressions in SET in postorder into POST.  */\n \n static void\n-pre_expr_DFS (unsigned val, bitmap_set_t set, bitmap expr_visited,\n-\t      bitmap val_visited, vec<pre_expr> &post)\n+pre_expr_DFS (unsigned val, bitmap_set_t set, bitmap val_visited,\n+\t      vec<pre_expr> &post)\n {\n   unsigned int i;\n   bitmap_iterator bi;\n \n   /* Iterate over all leaders and DFS recurse.  Borrowed from\n      bitmap_find_leader.  */\n   bitmap exprset = value_expressions[val];\n+  if (!exprset->first->next)\n+    {\n+      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n+\tif (bitmap_bit_p (&set->expressions, i))\n+\t  pre_expr_DFS (expression_for_id (i), set, val_visited, post);\n+      return;\n+    }\n+\n   EXECUTE_IF_AND_IN_BITMAP (exprset, &set->expressions, 0, i, bi)\n-    pre_expr_DFS (expression_for_id (i),\n-\t\t  set, expr_visited, val_visited, post);\n+    pre_expr_DFS (expression_for_id (i), set, val_visited, post);\n }\n \n /* DFS walk EXPR to its operands with leaders in SET, collecting\n    expressions in SET in postorder into POST.  */\n \n static void\n-pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n-\t      bitmap val_visited, vec<pre_expr> &post)\n+pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap val_visited,\n+\t      vec<pre_expr> &post)\n {\n-  if (!bitmap_set_bit (expr_visited, get_expression_id (expr)))\n-    return;\n-\n   switch (expr->kind)\n     {\n     case NARY:\n@@ -851,7 +855,7 @@ pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n \t       recursed already.  Avoid the costly bitmap_find_leader.  */\n \t    if (bitmap_bit_p (&set->values, op_val_id)\n \t\t&& bitmap_set_bit (val_visited, op_val_id))\n-\t      pre_expr_DFS (op_val_id, set, expr_visited, val_visited, post);\n+\t      pre_expr_DFS (op_val_id, set, val_visited, post);\n \t  }\n \tbreak;\n       }\n@@ -873,8 +877,7 @@ pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n \t\tunsigned op_val_id = VN_INFO (op[n])->value_id;\n \t\tif (bitmap_bit_p (&set->values, op_val_id)\n \t\t    && bitmap_set_bit (val_visited, op_val_id))\n-\t\t  pre_expr_DFS (op_val_id,\n-\t\t\t\tset, expr_visited, val_visited, post);\n+\t\t  pre_expr_DFS (op_val_id, set, val_visited, post);\n \t      }\n \t  }\n \tbreak;\n@@ -896,13 +899,11 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n   /* Pre-allocate enough space for the array.  */\n   result.create (bitmap_count_bits (&set->expressions));\n \n-  auto_bitmap expr_visited (&grand_bitmap_obstack);\n   auto_bitmap val_visited (&grand_bitmap_obstack);\n-  bitmap_tree_view (expr_visited);\n   bitmap_tree_view (val_visited);\n   FOR_EACH_VALUE_ID_IN_SET (set, i, bi)\n     if (bitmap_set_bit (val_visited, i))\n-      pre_expr_DFS (i, set, expr_visited, val_visited, result);\n+      pre_expr_DFS (i, set, val_visited, result);\n \n   return result;\n }\n@@ -1883,6 +1884,11 @@ bitmap_find_leader (bitmap_set_t set, unsigned int val)\n       bitmap_iterator bi;\n       bitmap exprset = value_expressions[val];\n \n+      if (!exprset->first->next)\n+\tEXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n+\t  if (bitmap_bit_p (&set->expressions, i))\n+\t    return expression_for_id (i);\n+\n       EXECUTE_IF_AND_IN_BITMAP (exprset, &set->expressions, 0, i, bi)\n \treturn expression_for_id (i);\n     }"}]}