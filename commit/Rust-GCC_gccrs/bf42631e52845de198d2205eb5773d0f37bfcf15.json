{"sha": "bf42631e52845de198d2205eb5773d0f37bfcf15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MjYzMWU1Mjg0NWRlMTk4ZDIyMDVlYjU3NzNkMGYzN2JmY2YxNQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2014-11-10T07:46:45Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-10T07:46:45Z"}, "message": "tree-if-conv.c (add_to_predicate_list): Check unconditionally that bb is always executed to early exit.\n\ngcc/\n\n\t* tree-if-conv.c (add_to_predicate_list): Check unconditionally\n\tthat bb is always executed to early exit. Use predicate of\n\tcd-equivalent block for join blocks if it exists.\n\t(if_convertible_loop_p_1): Recompute POST_DOMINATOR tree.\n\t(tree_if_conversion): Free post-dominance information.\n\ngcc/testsuite/\n\n\t* gcc.dg/tree-ssa/ifc-cd.c: New test.\n\nFrom-SVN: r217277", "tree": {"sha": "c18e47a85076dc4c56d37b18abc1ca527b94adf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c18e47a85076dc4c56d37b18abc1ca527b94adf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf42631e52845de198d2205eb5773d0f37bfcf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42631e52845de198d2205eb5773d0f37bfcf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf42631e52845de198d2205eb5773d0f37bfcf15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42631e52845de198d2205eb5773d0f37bfcf15/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d1301f28c1830acfdffaef0d93e3741b095a31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1301f28c1830acfdffaef0d93e3741b095a31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1301f28c1830acfdffaef0d93e3741b095a31c"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "d3f061eaff7c6c8f0894775f37faccfe476a969a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf42631e52845de198d2205eb5773d0f37bfcf15", "patch": "@@ -1,3 +1,11 @@\n+2014-11-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* tree-if-conv.c (add_to_predicate_list): Check unconditionally\n+\tthat bb is always executed to early exit. Use predicate of\n+\tcd-equivalent block for join blocks if it exists.\n+\t(if_convertible_loop_p_1): Recompute POST_DOMINATOR tree.\n+\t(tree_if_conversion): Free post-dominance information.\n+\n 2014-11-09  Jason Merrill  <jason@redhat.com>\n \n \t* config/i386/avx512vldqintrin.h (_mm256_broadcast_f32x2): __mmask8."}, {"sha": "cd049812ee9ffe79cd13d8ae8907e5530e75f48c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf42631e52845de198d2205eb5773d0f37bfcf15", "patch": "@@ -1,3 +1,7 @@\n+2014-11-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* gcc.dg/tree-ssa/ifc-cd.c: New test.\n+\n 2014-11-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/63305"}, {"sha": "8d45bba43fc5d440b1ffa0cf36510efa30f5056d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-cd.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c?ref=bf42631e52845de198d2205eb5773d0f37bfcf15", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt-details -ftree-loop-if-convert-stores\" } */\n+\n+void foo (int *x1, int *x2, int *x3, int *x4, int *y)\n+{\n+  int i;\n+  int a1, a2, a3, b1, b2;\n+\n+  for (i=0; i<128; i++)\n+    {\n+      a1 = x1[i];\n+      a2 = x2[i];\n+      a3 = x3[i];\n+      y[i] = 0;\n+      if (x4[i] == 0)\n+\t{\n+\t  b1 = a1 + 1;\n+\t  if (a2 > 0)\n+\t    b1++;\n+\t  a1++;\n+\t  if (a3 < 0)\n+\t    b1--;\n+\t  y[i] = b1;\n+\t}\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Use predicate of bb\" 8 \"ifcvt\" } } */\n+/* { dg-final { cleanup-tree-dump \"ifcvt\" } } */"}, {"sha": "0e7a144ed4628a795e6b5124aa5503fb7c068dd9", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42631e52845de198d2205eb5773d0f37bfcf15/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=bf42631e52845de198d2205eb5773d0f37bfcf15", "patch": "@@ -407,25 +407,44 @@ fold_build_cond_expr (tree type, tree cond, tree rhs, tree lhs)\n }\n \n /* Add condition NC to the predicate list of basic block BB.  LOOP is\n-   the loop to be if-converted.  */\n+   the loop to be if-converted. Use predicate of cd-equivalent block\n+   for join bb if it exists: we call basic blocks bb1 and bb2 \n+   cd-equivalent if they are executed under the same condition.  */\n \n static inline void\n add_to_predicate_list (struct loop *loop, basic_block bb, tree nc)\n {\n   tree bc, *tp;\n+  basic_block dom_bb;\n \n   if (is_true_predicate (nc))\n     return;\n \n-  if (!is_predicated (bb))\n-    {\n-      /* If dominance tells us this basic block is always executed, don't\n-\t record any predicates for it.  */\n-      if (dominated_by_p (CDI_DOMINATORS, loop->latch, bb))\n-\treturn;\n+  /* If dominance tells us this basic block is always executed,\n+     don't record any predicates for it.  */\n+  if (dominated_by_p (CDI_DOMINATORS, loop->latch, bb))\n+    return;\n \n-      bc = nc;\n+  dom_bb = get_immediate_dominator (CDI_DOMINATORS, bb);\n+  /* We use notion of cd equivalence to get simpler predicate for\n+     join block, e.g. if join block has 2 predecessors with predicates\n+     p1 & p2 and p1 & !p2, we'd like to get p1 for it instead of\n+     p1 & p2 | p1 & !p2.  */\n+  if (dom_bb != loop->header\n+      && get_immediate_dominator (CDI_POST_DOMINATORS, dom_bb) == bb)\n+    {\n+      gcc_assert (flow_bb_inside_loop_p (loop, dom_bb));\n+      bc = bb_predicate (dom_bb);\n+      gcc_assert (!is_true_predicate (bc));\n+      set_bb_predicate (bb, bc);\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Use predicate of bb#%d for bb#%d\\n\",\n+\t\t dom_bb->index, bb->index);\n+      return;\n     }\n+\n+  if (!is_predicated (bb))\n+    bc = nc;\n   else\n     {\n       bc = bb_predicate (bb);\n@@ -1187,6 +1206,7 @@ if_convertible_loop_p_1 (struct loop *loop,\n     return false;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n+  calculate_dominance_info (CDI_POST_DOMINATORS);\n \n   /* Allow statements that can be handled during if-conversion.  */\n   ifc_bbs = get_loop_body_in_if_conv_order (loop);\n@@ -2159,6 +2179,7 @@ tree_if_conversion (struct loop *loop)\n       free (ifc_bbs);\n       ifc_bbs = NULL;\n     }\n+  free_dominance_info (CDI_POST_DOMINATORS);\n \n   return todo;\n }"}]}