{"sha": "db995e100b35afe9ee652d45252844e3abddfbec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5OTVlMTAwYjM1YWZlOWVlNjUyZDQ1MjUyODQ0ZTNhYmRkZmJlYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2017-08-22T07:52:42Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2017-08-22T07:52:42Z"}, "message": "re PR target/81910 ([avr] ICE with \"address\" attribute on type)\n\ngcc/\n\tPR target/81910\n\t* config/avr/avr.c (avr_handle_addr_attribute): Early return if\n\tnot VAR_P. Filter attribute warnings with OPT_Wattributes.\n\t(avr_attribute_table) <io, io_low, address>: Initialize\n\t.decl_required with true.\n\nFrom-SVN: r251256", "tree": {"sha": "8fb151205187254573f793deebf51e4c06b70ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb151205187254573f793deebf51e4c06b70ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db995e100b35afe9ee652d45252844e3abddfbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db995e100b35afe9ee652d45252844e3abddfbec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db995e100b35afe9ee652d45252844e3abddfbec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db995e100b35afe9ee652d45252844e3abddfbec/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef016bff7ed63c87dedfcdeac0e00653de3565a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef016bff7ed63c87dedfcdeac0e00653de3565a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef016bff7ed63c87dedfcdeac0e00653de3565a"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "5866bb0d8a86720db15e498c4010e18c73857d3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db995e100b35afe9ee652d45252844e3abddfbec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db995e100b35afe9ee652d45252844e3abddfbec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db995e100b35afe9ee652d45252844e3abddfbec", "patch": "@@ -1,3 +1,11 @@\n+2017-08-22  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/81910\n+\t* config/avr/avr.c (avr_handle_addr_attribute): Early return if\n+\tnot VAR_P. Filter attribute warnings with OPT_Wattributes.\n+\t(avr_attribute_table) <io, io_low, address>: Initialize\n+\t.decl_required with true.\n+\n 2017-08-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-cpus.def (-mvsx-scalar-float): Delete"}, {"sha": "c91f6c485c32de08c4619dafa23c51d5fb4d5eea", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db995e100b35afe9ee652d45252844e3abddfbec/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db995e100b35afe9ee652d45252844e3abddfbec/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=db995e100b35afe9ee652d45252844e3abddfbec", "patch": "@@ -9790,10 +9790,12 @@ avr_handle_addr_attribute (tree *node, tree name, tree args,\n   bool io_p = (strncmp (IDENTIFIER_POINTER (name), \"io\", 2) == 0);\n   location_t loc = DECL_SOURCE_LOCATION (*node);\n \n-  if (TREE_CODE (*node) != VAR_DECL)\n+  if (!VAR_P (*node))\n     {\n-      warning_at (loc, 0, \"%qE attribute only applies to variables\", name);\n+      warning_at (loc, OPT_Wattributes, \"%qE attribute only applies to \"\n+\t\t  \"variables\", name);\n       *no_add = true;\n+      return NULL_TREE;\n     }\n \n   if (args != NULL_TREE)\n@@ -9803,8 +9805,8 @@ avr_handle_addr_attribute (tree *node, tree name, tree args,\n       tree arg = TREE_VALUE (args);\n       if (TREE_CODE (arg) != INTEGER_CST)\n \t{\n-\t  warning (0, \"%qE attribute allows only an integer constant argument\",\n-\t\t   name);\n+\t  warning_at (loc, OPT_Wattributes, \"%qE attribute allows only an \"\n+\t\t      \"integer constant argument\", name);\n \t  *no_add = true;\n \t}\n       else if (io_p\n@@ -9813,19 +9815,20 @@ avr_handle_addr_attribute (tree *node, tree name, tree args,\n \t\t\t? low_io_address_operand : io_address_operand)\n \t\t\t (GEN_INT (TREE_INT_CST_LOW (arg)), QImode)))\n \t{\n-\t  warning_at (loc, 0, \"%qE attribute address out of range\", name);\n+\t  warning_at (loc, OPT_Wattributes, \"%qE attribute address \"\n+\t\t      \"out of range\", name);\n \t  *no_add = true;\n \t}\n       else\n \t{\n \t  tree attribs = DECL_ATTRIBUTES (*node);\n-\t  const char *names[] = { \"io\", \"io_low\", \"address\", NULL } ;\n+\t  const char *names[] = { \"io\", \"io_low\", \"address\", NULL };\n \t  for (const char **p = names; *p; p++)\n \t    {\n \t      tree other = lookup_attribute (*p, attribs);\n \t      if (other && TREE_VALUE (other))\n \t\t{\n-\t\t  warning_at (loc, 0,\n+\t\t  warning_at (loc, OPT_Wattributes,\n \t\t\t      \"both %s and %qE attribute provide address\",\n \t\t\t      *p, name);\n \t\t  *no_add = true;\n@@ -9836,7 +9839,8 @@ avr_handle_addr_attribute (tree *node, tree name, tree args,\n     }\n \n   if (*no_add == false && io_p && !TREE_THIS_VOLATILE (*node))\n-    warning_at (loc, 0, \"%qE attribute on non-volatile variable\", name);\n+    warning_at (loc, OPT_Wattributes, \"%qE attribute on non-volatile variable\",\n+\t\tname);\n \n   return NULL_TREE;\n }\n@@ -9886,11 +9890,11 @@ avr_attribute_table[] =\n     false },\n   { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute,\n     false },\n-  { \"io\",        0, 1, false, false, false,  avr_handle_addr_attribute,\n+  { \"io\",        0, 1, true, false, false,  avr_handle_addr_attribute,\n     false },\n-  { \"io_low\",    0, 1, false, false, false,  avr_handle_addr_attribute,\n+  { \"io_low\",    0, 1, true, false, false,  avr_handle_addr_attribute,\n     false },\n-  { \"address\",   1, 1, false, false, false,  avr_handle_addr_attribute,\n+  { \"address\",   1, 1, true, false, false,  avr_handle_addr_attribute,\n     false },\n   { \"absdata\",   0, 0, true, false, false,  avr_handle_absdata_attribute,\n     false },"}]}