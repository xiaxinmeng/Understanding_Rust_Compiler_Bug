{"sha": "86f66562b73c61ae927b301d5dd907d7564c2e3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmNjY1NjJiNzNjNjFhZTkyN2IzMDFkNWRkOTA3ZDc1NjRjMmUzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-03T22:58:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-03T22:58:43Z"}, "message": "PR libstdc++/82644 define TR1 hypergeometric functions in strict modes\n\nFollowing a recent change for PR 82644 the non-standard hypergeomtric\nfunctions are not defined by <cmath> when __STRICT_ANSI__ is defined\n(e.g. for -std=c++17, or -std=c++14 -D__STDCPP_WANT_MATH_SPEC_FUNCS__).\nThat caused errors in <tr1/cmath> because the using-declarations for\ntr1::hyperg et al are invalid in strict modes.\n\nThe solution is to define the TR1 hypergeometric functions inline in\n<tr1/cmath> if __STRICT_ANSI__ is defined.\n\n\tPR libstdc++/82644\n\t* include/tr1/cmath [__STRICT_ANSI__] (hypergf, hypergl, hyperg): Use\n\tinline definitions instead of using-declarations.\n\t[__STRICT_ANSI__] (conf_hypergf, conf_hypergl, conf_hyperg): Likewise.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t07_conf_hyperg/compile_cxx17.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t17_hyperg/compile_cxx17.cc: New.\n\nFrom-SVN: r259912", "tree": {"sha": "e3c52abc2451d4043866f85f82c0270c1e76bf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c52abc2451d4043866f85f82c0270c1e76bf2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86f66562b73c61ae927b301d5dd907d7564c2e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f66562b73c61ae927b301d5dd907d7564c2e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f66562b73c61ae927b301d5dd907d7564c2e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f66562b73c61ae927b301d5dd907d7564c2e3f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c072e217f59a92136af99839ff7cab9065a4fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c072e217f59a92136af99839ff7cab9065a4fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c072e217f59a92136af99839ff7cab9065a4fa0"}], "stats": {"total": 187, "additions": 144, "deletions": 43}, "files": [{"sha": "ed616dfa8f1a4ce1eff20e80f808ca717e210e3a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86f66562b73c61ae927b301d5dd907d7564c2e3f", "patch": "@@ -1,5 +1,14 @@\n 2018-05-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/82644\n+\t* include/tr1/cmath [__STRICT_ANSI__] (hypergf, hypergl, hyperg): Use\n+\tinline definitions instead of using-declarations.\n+\t[__STRICT_ANSI__] (conf_hypergf, conf_hypergl, conf_hyperg): Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t07_conf_hyperg/compile_cxx17.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t17_hyperg/compile_cxx17.cc: New.\n+\n \tPR libstdc++/84769\n \t* include/std/variant (visit): Qualify std::get call.\n "}, {"sha": "c07dd5c73a56aab0bb3516f114addc932d6540d0", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 73, "deletions": 43, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=86f66562b73c61ae927b301d5dd907d7564c2e3f", "patch": "@@ -1160,10 +1160,6 @@ namespace tr1\n   using std::comp_ellint_3l;\n   using std::comp_ellint_3;\n \n-  using __gnu_cxx::conf_hypergf;\n-  using __gnu_cxx::conf_hypergl;\n-  using __gnu_cxx::conf_hyperg;\n-\n   using std::cyl_bessel_if;\n   using std::cyl_bessel_il;\n   using std::cyl_bessel_i;\n@@ -1200,10 +1196,6 @@ namespace tr1\n   using std::hermitel;\n   using std::hermite;\n \n-  using __gnu_cxx::hypergf;\n-  using __gnu_cxx::hypergl;\n-  using __gnu_cxx::hyperg;\n-\n   using std::laguerref;\n   using std::laguerrel;\n   using std::laguerre;\n@@ -1246,7 +1238,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #include <tr1/beta_function.tcc>\n #include <tr1/ell_integral.tcc>\n #include <tr1/exp_integral.tcc>\n-#include <tr1/hypergeometric.tcc>\n #include <tr1/legendre_function.tcc>\n #include <tr1/modified_bessel_func.tcc>\n #include <tr1/poly_hermite.tcc>\n@@ -1371,23 +1362,6 @@ namespace tr1\n       return __detail::__comp_ellint_3<__type>(__k, __nu);\n     }\n \n-  inline float\n-  conf_hypergf(float __a, float __c, float __x)\n-  { return __detail::__conf_hyperg<float>(__a, __c, __x); }\n-\n-  inline long double\n-  conf_hypergl(long double __a, long double __c, long double __x)\n-  { return __detail::__conf_hyperg<long double>(__a, __c, __x); }\n-\n-  ///  5.2.1.7  Confluent hypergeometric functions.\n-  template<typename _Tpa, typename _Tpc, typename _Tp>\n-    inline typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type\n-    conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type __type;\n-      return __detail::__conf_hyperg<__type>(__a, __c, __x);\n-    }\n-\n   inline float\n   cyl_bessel_if(float __nu, float __x)\n   { return __detail::__cyl_bessel_i<float>(__nu, __x); }\n@@ -1541,23 +1515,6 @@ namespace tr1\n       return __detail::__poly_hermite<__type>(__n, __x);\n     }\n \n-  inline float\n-  hypergf(float __a, float __b, float __c, float __x)\n-  { return __detail::__hyperg<float>(__a, __b, __c, __x); }\n-\n-  inline long double\n-  hypergl(long double __a, long double __b, long double __c, long double __x)\n-  { return __detail::__hyperg<long double>(__a, __b, __c, __x); }\n-\n-  ///  5.2.1.17  Hypergeometric functions.\n-  template<typename _Tpa, typename _Tpb, typename _Tpc, typename _Tp>\n-    inline typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type\n-    hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type __type;\n-      return __detail::__hyperg<__type>(__a, __b, __c, __x);\n-    }\n-\n   inline float\n   laguerref(unsigned int __n, float __x)\n   { return __detail::__laguerre<float>(__n, __x); }\n@@ -1668,4 +1625,77 @@ namespace tr1\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n+#if _GLIBCXX_USE_STD_SPEC_FUNCS && !defined(__STRICT_ANSI__)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+namespace tr1\n+{\n+  using __gnu_cxx::conf_hypergf;\n+  using __gnu_cxx::conf_hypergl;\n+  using __gnu_cxx::conf_hyperg;\n+\n+  using __gnu_cxx::hypergf;\n+  using __gnu_cxx::hypergl;\n+  using __gnu_cxx::hyperg;\n+} // namespace tr1\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#else // ! (_GLIBCXX_USE_STD_SPEC_FUNCS && !defined(__STRICT_ANSI__))\n+\n+#include <bits/stl_algobase.h>\n+#include <limits>\n+#include <tr1/type_traits>\n+\n+#include <tr1/hypergeometric.tcc>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+namespace tr1\n+{\n+  inline float\n+  conf_hypergf(float __a, float __c, float __x)\n+  { return __detail::__conf_hyperg<float>(__a, __c, __x); }\n+\n+  inline long double\n+  conf_hypergl(long double __a, long double __c, long double __x)\n+  { return __detail::__conf_hyperg<long double>(__a, __c, __x); }\n+\n+  ///  5.2.1.7  Confluent hypergeometric functions.\n+  template<typename _Tpa, typename _Tpc, typename _Tp>\n+    inline typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type\n+    conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type __type;\n+      return __detail::__conf_hyperg<__type>(__a, __c, __x);\n+    }\n+\n+  inline float\n+  hypergf(float __a, float __b, float __c, float __x)\n+  { return __detail::__hyperg<float>(__a, __b, __c, __x); }\n+\n+  inline long double\n+  hypergl(long double __a, long double __b, long double __c, long double __x)\n+  { return __detail::__hyperg<long double>(__a, __b, __c, __x); }\n+\n+  ///  5.2.1.17  Hypergeometric functions.\n+  template<typename _Tpa, typename _Tpb, typename _Tpc, typename _Tp>\n+    inline typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type\n+    hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type __type;\n+      return __detail::__hyperg<__type>(__a, __b, __c, __x);\n+    }\n+\n+} // namespace tr1\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // _GLIBCXX_USE_STD_SPEC_FUNCS && !defined(__STRICT_ANSI__)\n+\n #endif // _GLIBCXX_TR1_CMATH"}, {"sha": "f0b0f96af276ad2e69f3ed62019576570ec94a0b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/07_conf_hyperg/compile_cxx17.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcompile_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcompile_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcompile_cxx17.cc?ref=86f66562b73c61ae927b301d5dd907d7564c2e3f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <tr1/cmath>\n+\n+void\n+test01()\n+{\n+  // For C++17 most TR1 special functions re-use the C++17 functions\n+  // in namespace std, but in strict -std=c++17 mode the hypergeometric\n+  // functions are not defined in namespace std. This test ensures they\n+  // are still available in namespace std::tr1.\n+  (void) std::tr1::conf_hyperg(1.0, 2.0, 3.0);\n+}"}, {"sha": "048328b6c00a6077fa5fc50e337e180381e040dc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/17_hyperg/compile_cxx17.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcompile_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f66562b73c61ae927b301d5dd907d7564c2e3f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcompile_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcompile_cxx17.cc?ref=86f66562b73c61ae927b301d5dd907d7564c2e3f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <tr1/cmath>\n+\n+void\n+test01()\n+{\n+  // For C++17 most TR1 special functions re-use the C++17 functions\n+  // in namespace std, but in strict -std=c++17 mode the hypergeometric\n+  // functions are not defined in namespace std. This test ensures they\n+  // are still available in namespace std::tr1.\n+  (void) std::tr1::hyperg(1.0, 2.0, 3.0, 4.0);\n+}"}]}