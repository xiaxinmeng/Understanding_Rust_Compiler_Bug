{"sha": "bbe836bc7c557b3f4119e03d24cb61f23906cba9", "node_id": "C_kwDOANBUbNoAKGJiZTgzNmJjN2M1NTdiM2Y0MTE5ZTAzZDI0Y2I2MWYyMzkwNmNiYTk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-03T16:22:11Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-04T05:58:47Z"}, "message": "Remove some deprecated irange methods.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* ipa-cp.cc (ipcp_vr_lattice::meet_with_1): Use operator!=.\n\t* ipa-prop.cc (struct ipa_vr_ggc_hash_traits): Same.\n\t* tree-ssa-loop-unswitch.cc (struct unswitch_predicate): Use set\n\twith two arguments.\n\t(find_unswitching_predicates_for_bb): Same.\n\t* tree-vrp.cc (range_fold_unary_symbolics_p): Same.\n\t* value-range-equiv.cc (value_range_equiv::equal_p): Use operator==.\n\t* value-range.cc (irange::equal_p): Rename to...\n\t(irange::operator==): ...this.\n\t* value-range.h (irange::set): Remove.\n\t(irange::operator==): Remove.\n\t(irange::set_zero): Use set with two arguments.\n\t* vr-values.cc (vr_values::extract_range_from_binary_expr): Same.\n\t(vr_values::extract_range_from_unary_expr): Same.\n\t(check_for_binary_op_overflow): Same.\n\t(bounds_of_var_in_loop): Same.", "tree": {"sha": "ed5536607b0f5a76297de799c4a46d06fe10a464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5536607b0f5a76297de799c4a46d06fe10a464"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe836bc7c557b3f4119e03d24cb61f23906cba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe836bc7c557b3f4119e03d24cb61f23906cba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe836bc7c557b3f4119e03d24cb61f23906cba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe836bc7c557b3f4119e03d24cb61f23906cba9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3731dd0bea8994c3d7b5a4879f89f3e7a0eb2cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3731dd0bea8994c3d7b5a4879f89f3e7a0eb2cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3731dd0bea8994c3d7b5a4879f89f3e7a0eb2cf4"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "543a9334e2c1ffab4c8cb374f7de02e3bd979cd7", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -1020,7 +1020,7 @@ ipcp_vr_lattice::meet_with_1 (const value_range *other_vr)\n \n   value_range save (m_vr);\n   m_vr.union_ (*other_vr);\n-  return !m_vr.equal_p (save);\n+  return m_vr != save;\n }\n \n /* Return true if value range information in the lattice is yet unknown.  */"}, {"sha": "fb8f97397dc40292a68a3a810f19b0c81850e616", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -126,7 +126,7 @@ struct ipa_vr_ggc_hash_traits : public ggc_cache_remove <value_range *>\n   static bool\n   equal (const value_range *a, const value_range *b)\n     {\n-      return (a->equal_p (*b)\n+      return (*a == *b\n \t      && types_compatible_p (a->type (), b->type ()));\n     }\n   static const bool empty_zero_p = true;"}, {"sha": "3a827f2f904533ebd73f0b79ff88f0fc08d0b8bc", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -139,7 +139,7 @@ struct unswitch_predicate\n \tauto range_op = range_op_handler (code, TREE_TYPE (lhs));\n \tint_range<2> rhs_range (TREE_TYPE (rhs));\n \tif (CONSTANT_CLASS_P (rhs))\n-\t  rhs_range.set (rhs);\n+\t  rhs_range.set (rhs, rhs);\n \tif (!range_op.op1_range (true_range, TREE_TYPE (lhs),\n \t\t\t\t int_range<2> (boolean_true_node,\n \t\t\t\t\t       boolean_true_node), rhs_range)\n@@ -535,7 +535,7 @@ find_unswitching_predicates_for_bb (basic_block bb, class loop *loop,\n \t  else\n \t    {\n \t      cmp = fold_build2 (EQ_EXPR, boolean_type_node, idx, low);\n-\t      lab_range.set (low);\n+\t      lab_range.set (low, low);\n \t    }\n \n \t  /* Combine the expression with the existing one.  */"}, {"sha": "ed881be7e5ff4d32cc35457117c917213199fc1b", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -1024,7 +1024,8 @@ range_fold_unary_symbolics_p (value_range *vr,\n \t{\n \t  /* ~X is simply -1 - X.  */\n \t  value_range minusone;\n-\t  minusone.set (build_int_cst (vr0->type (), -1));\n+\t  tree t = build_int_cst (vr0->type (), -1);\n+\t  minusone.set (t, t);\n \t  range_fold_binary_expr (vr, MINUS_EXPR, expr_type, &minusone, vr0);\n \t  return true;\n \t}"}, {"sha": "bd58e5a90bc7fa41c5c03fda5efc696d961741cb", "filename": "gcc/value-range-equiv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range-equiv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range-equiv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-equiv.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -162,7 +162,7 @@ bool\n value_range_equiv::equal_p (const value_range_equiv &other,\n \t\t\t    bool ignore_equivs) const\n {\n-  return (value_range::equal_p (other)\n+  return (value_range::operator== (other)\n \t  && (ignore_equivs || vr_bitmap_equal_p (m_equiv, other.m_equiv)));\n }\n "}, {"sha": "574c51002b5a1ea04d62b5b59ccfb778e433ed6a", "filename": "gcc/value-range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -688,7 +688,7 @@ irange::legacy_equal_p (const irange &other) const\n }\n \n bool\n-irange::equal_p (const irange &other) const\n+irange::operator== (const irange &other) const\n {\n   if (legacy_mode_p ())\n     {"}, {"sha": "fd6703138accf968a290ba14db29f1b082ef7936", "filename": "gcc/value-range.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -157,8 +157,6 @@ class GTY((user)) irange : public vrange\n   void normalize_symbolics ();\t\t\t// DEPRECATED\n   void normalize_addresses ();\t\t\t// DEPRECATED\n   bool may_contain_p (tree) const;\t\t// DEPRECATED\n-  void set (tree);\t\t\t\t// DEPRECATED\n-  bool equal_p (const irange &) const;\t\t// DEPRECATED\n   bool legacy_verbose_union_ (const class irange *);\t// DEPRECATED\n   bool legacy_verbose_intersect (const irange *);\t// DEPRECATED\n \n@@ -719,12 +717,6 @@ int_range<N>::operator= (const int_range &src)\n   return *this;\n }\n \n-inline void\n-irange::set (tree val)\n-{\n-  set (val, val);\n-}\n-\n inline void\n irange::set_undefined ()\n {\n@@ -765,12 +757,6 @@ irange::set_varying (tree type)\n     m_base[0] = m_base[1] = error_mark_node;\n }\n \n-inline bool\n-irange::operator== (const irange &r) const\n-{\n-  return equal_p (r);\n-}\n-\n // Return the lower bound of a sub-range.  PAIR is the sub-range in\n // question.\n \n@@ -846,7 +832,7 @@ irange::set_zero (tree type)\n {\n   tree z = build_int_cst (type, 0);\n   if (legacy_mode_p ())\n-    set (z);\n+    set (z, z);\n   else\n     irange_set (z, z);\n }"}, {"sha": "6b9c630fed34ee1d87a5dd8b3839aaaaa61abc2c", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe836bc7c557b3f4119e03d24cb61f23906cba9/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=bbe836bc7c557b3f4119e03d24cb61f23906cba9", "patch": "@@ -831,14 +831,14 @@ vr_values::extract_range_from_binary_expr (value_range_equiv *vr,\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(get_value_range (op0));\n   else if (is_gimple_min_invariant (op0))\n-    vr0.set (op0);\n+    vr0.set (op0, op0);\n   else\n     vr0.set_varying (TREE_TYPE (op0));\n \n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *(get_value_range (op1));\n   else if (is_gimple_min_invariant (op1))\n-    vr1.set (op1);\n+    vr1.set (op1, op1);\n   else\n     vr1.set_varying (TREE_TYPE (op1));\n \n@@ -936,7 +936,7 @@ vr_values::extract_range_from_binary_expr (value_range_equiv *vr,\n \n       /* Try with [OP0, OP0] and VR1.  */\n       else\n-\tn_vr0.set (op0);\n+\tn_vr0.set (op0, op0);\n \n       range_fold_binary_expr (vr, code, expr_type, &n_vr0, &vr1);\n     }\n@@ -976,7 +976,7 @@ vr_values::extract_range_from_unary_expr (value_range_equiv *vr,\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(get_value_range (op0));\n   else if (is_gimple_min_invariant (op0))\n-    vr0.set (op0);\n+    vr0.set (op0, op0);\n   else\n     vr0.set_varying (type);\n \n@@ -1064,14 +1064,14 @@ check_for_binary_op_overflow (range_query *query,\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *query->get_value_range (op0, s);\n   else if (TREE_CODE (op0) == INTEGER_CST)\n-    vr0.set (op0);\n+    vr0.set (op0, op0);\n   else\n     vr0.set_varying (TREE_TYPE (op0));\n \n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *query->get_value_range (op1, s);\n   else if (TREE_CODE (op1) == INTEGER_CST)\n-    vr1.set (op1);\n+    vr1.set (op1, op1);\n   else\n     vr1.set_varying (TREE_TYPE (op1));\n \n@@ -1747,7 +1747,7 @@ bounds_of_var_in_loop (tree *min, tree *max, range_query *query,\n \t      if (TREE_CODE (init) == SSA_NAME)\n \t\tquery->range_of_expr (vr0, init, stmt);\n \t      else if (is_gimple_min_invariant (init))\n-\t\tvr0.set (init);\n+\t\tvr0.set (init, init);\n \t      else\n \t\tvr0.set_varying (TREE_TYPE (init));\n \t      tree tem = wide_int_to_tree (TREE_TYPE (init), wtmp);\n@@ -1763,7 +1763,7 @@ bounds_of_var_in_loop (tree *min, tree *max, range_query *query,\n \t\t  if (TREE_CODE (init) == SSA_NAME)\n \t\t    query->range_of_expr (initvr, init, stmt);\n \t\t  else if (is_gimple_min_invariant (init))\n-\t\t    initvr.set (init);\n+\t\t    initvr.set (init, init);\n \t\t  else\n \t\t    return false;\n \n@@ -3291,14 +3291,14 @@ simplify_using_ranges::simplify_bit_ops_using_ranges\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(query->get_value_range (op0, stmt));\n   else if (is_gimple_min_invariant (op0))\n-    vr0.set (op0);\n+    vr0.set (op0, op0);\n   else\n     return false;\n \n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *(query->get_value_range (op1, stmt));\n   else if (is_gimple_min_invariant (op1))\n-    vr1.set (op1);\n+    vr1.set (op1, op1);\n   else\n     return false;\n "}]}