{"sha": "aff95ee7cc2c046d69ff6f79990930fb22e0e808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmOTVlZTdjYzJjMDQ2ZDY5ZmY2Zjc5OTkwOTMwZmIyMmUwZTgwOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-18T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-18T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "c43f37859615730e064b1483e4655b7afc411ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c43f37859615730e064b1483e4655b7afc411ff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff95ee7cc2c046d69ff6f79990930fb22e0e808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff95ee7cc2c046d69ff6f79990930fb22e0e808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff95ee7cc2c046d69ff6f79990930fb22e0e808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff95ee7cc2c046d69ff6f79990930fb22e0e808/comments", "author": null, "committer": null, "parents": [{"sha": "4f2ab6b89e170f1343f935761481c3745fe603b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2ab6b89e170f1343f935761481c3745fe603b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2ab6b89e170f1343f935761481c3745fe603b1"}], "stats": {"total": 758, "additions": 757, "deletions": 1}, "files": [{"sha": "e7cc9276eeb5ecd70fefa6dbfa0a00a233430e4c", "filename": "contrib/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,13 @@\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Print 'Backported from master'\n+\theading to backported commits.\n+\t* gcc-changelog/test_email.py: Test it.\n+\t* gcc-changelog/test_patches.txt: Add new patch.\n+\t* gcc-changelog/git_repository.py: Add commit_to_date hook.\n+\t* gcc-changelog/git_email.py: Add fuzzy implementation\n+\tof commit_to_date_hook.\n+\n 2020-06-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* prepare-commit-msg: Use the gcc-config.mklog-hook-type Git"}, {"sha": "312234a2be06773a3dd1cc55dc970651b64d0be1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,143 @@\n+2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gimplify.c (omp_notice_threadprivate_variable)\n+\t(omp_default_clause, omp_notice_variable): 'inform' after 'error'\n+\tdiagnostic.  Adjust all users.\n+\n+2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* hsa-gen.c (gen_hsa_insns_for_call): Move 'function_decl ==\n+\tNULL_TREE' check earlier.\n+\n+2020-06-17  Forrest Timour  <forrest.timour@gmail.com>\n+\n+\t* doc/extend.texi (attribute access): Fix a typo.\n+\n+2020-06-17  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Kaipeng Zhou  <zhoukaipeng3@huawei.com>\n+\n+\tPR tree-optimization/95199\n+\t* tree-vect-stmts.c: Eliminate common stmts for bump and offset in\n+\tstrided load/store operations and remove redundant code.\n+\n+2020-06-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* coretypes.h (first_type): New alias template.\n+\t* recog.h (insn_gen_fn::operator()): Use it instead of a decltype.\n+\tRemove spurious \u201c...\u201d and split the function type out into a typedef.\n+\n+2020-06-17  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_fix_long_loop_prediction): Exit early\n+\tfor PARALLELs.\n+\n+2020-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Set the passed\n+\tin *vectype parameter.\n+\t(vect_build_slp_tree_2): Set SLP_TREE_VECTYPE from what\n+\tvect_build_slp_tree_1 computed.\n+\t(vect_analyze_slp_instance): Set SLP_TREE_VECTYPE.\n+\t(vect_slp_analyze_node_operations_1): Use the SLP node vector type.\n+\t(vect_schedule_slp_instance): Likewise.\n+\t* tree-vect-stmts.c (vect_is_simple_use): Take the vector type\n+\tfrom SLP_TREE_VECTYPE.\n+\n+2020-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95717\n+\t* tree-vect-loop-manip.c (slpeel_tree_duplicate_loop_to_edge_cfg):\n+\tMove BB SSA updating before exit/latch PHI current def copying.\n+\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Add new file.\n+\t* expr.c (expand_expr_real_2): Add gcc_unreachable as we should\n+\tnot meet this condition.\n+\t(do_store_flag): Likewise.\n+\t* gimplify.c (gimplify_expr): Gimplify first argument of\n+\tVEC_COND_EXPR to be a SSA name.\n+\t* internal-fn.c (vec_cond_mask_direct): New.\n+\t(vec_cond_direct): Likewise.\n+\t(vec_condu_direct): Likewise.\n+\t(vec_condeq_direct): Likewise.\n+\t(expand_vect_cond_optab_fn):  New.\n+\t(expand_vec_cond_optab_fn): Likewise.\n+\t(expand_vec_condu_optab_fn): Likewise.\n+\t(expand_vec_condeq_optab_fn): Likewise.\n+\t(expand_vect_cond_mask_optab_fn): Likewise.\n+\t(expand_vec_cond_mask_optab_fn): Likewise.\n+\t(direct_vec_cond_mask_optab_supported_p): Likewise.\n+\t(direct_vec_cond_optab_supported_p): Likewise.\n+\t(direct_vec_condu_optab_supported_p): Likewise.\n+\t(direct_vec_condeq_optab_supported_p): Likewise.\n+\t* internal-fn.def (VCOND): New OPTAB.\n+\t(VCONDU): Likewise.\n+\t(VCONDEQ): Likewise.\n+\t(VCOND_MASK): Likewise.\n+\t* optabs.c (get_rtx_code): Make it global.\n+\t(expand_vec_cond_mask_expr): Removed.\n+\t(expand_vec_cond_expr): Removed.\n+\t* optabs.h (expand_vec_cond_expr): Likewise.\n+\t(vector_compare_rtx): Make it global.\n+\t* passes.def: Add new pass_gimple_isel pass.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Add check\n+\tfor VEC_COND_EXPR about first argument.\n+\t* tree-pass.h (make_pass_gimple_isel): New.\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Prevent\n+\tpropagation of the first argument of a VEC_COND_EXPR.\n+\t* tree-ssa-reassoc.c (ovce_extract_ops): Support SSA_NAME as\n+\tfirst argument of a VEC_COND_EXPR.\n+\t(optimize_vec_cond_expr): Likewise.\n+\t* tree-vect-generic.c (expand_vector_divmod): Make SSA_NAME\n+\tfor a first argument of created VEC_COND_EXPR.\n+\t(expand_vector_condition): Fix coding style.\n+\t* tree-vect-stmts.c (vectorizable_condition): Gimplify\n+\tfirst argument.\n+\t* gimple-isel.cc: New file.\n+\n+2020-06-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-hsa.h (TEXT_SECTION_ASM_OP): Use \".text\".\n+\t(BSS_SECTION_ASM_OP): Use \".bss\".\n+\t(ASM_SPEC): Remove \"-mattr=-code-object-v3\".\n+\t(LINK_SPEC): Add \"--export-dynamic\".\n+\t* config/gcn/gcn-opts.h (processor_type): Replace PROCESSOR_VEGA with\n+\tPROCESSOR_VEGA10 and PROCESSOR_VEGA20.\n+\t* config/gcn/gcn-run.c (HSA_RUNTIME_LIB): Use \".so.1\" variant.\n+\t(load_image): Remove obsolete relocation handling.\n+\tAdd \".kd\" suffix to the symbol names.\n+\t* config/gcn/gcn.c (MAX_NORMAL_SGPR_COUNT): Set to 62.\n+\t(gcn_option_override): Update gcn_isa test.\n+\t(gcn_kernel_arg_types): Update all the assembler directives.\n+\tRemove the obsolete options.\n+\t(gcn_conditional_register_usage): Update MAX_NORMAL_SGPR_COUNT usage.\n+\t(gcn_omp_device_kind_arch_isa): Handle PROCESSOR_VEGA10 and\n+\tPROCESSOR_VEGA20.\n+\t(output_file_start): Rework assembler file header.\n+\t(gcn_hsa_declare_function_name): Rework kernel metadata.\n+\t* config/gcn/gcn.h (GCN_KERNEL_ARG_TYPES): Set to 16.\n+\t* config/gcn/gcn.opt (PROCESSOR_VEGA): Remove enum.\n+\t(PROCESSOR_VEGA10): New enum value.\n+\t(PROCESSOR_VEGA20): New enum value.\n+\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-dump.c (print_version): Collapse lisence header to 2 lines\n+\tin --version.\n+\t* gcov-tool.c (print_version): Likewise.\n+\t* gcov.c (print_version): Likewise.\n+\n+2020-06-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/95524\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_vec_shift_qihi_constant): New function.\n+\t* config/i386/i386-protos.h\n+\t(ix86_expand_vec_shift_qihi_constant): Declare.\n+\t* config/i386/sse.md (<shift_insn><mode>3): Optimize shift\n+\tV*QImode by constant.\n+\n 2020-06-16  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/95649"}, {"sha": "e94346fce1023312c7889d184d566bb625d29cf2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1 +1 @@\n-20200617\n+20200618"}, {"sha": "0ff94f9d48f33099ba76d68eb93edd99de56c33f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 399, "deletions": 0, "changes": 399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,402 @@\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Apply_Universal_Integer_Attribute_Checks): Do not do\n+\tanything when the type of the node is already Universal_Integer.\n+\n+2020-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch10.adb (Expand_With_Clause): Add missing handling of\n+\tN_Generic_Subprogram_Declaration, N_Subprogram_Declaration,\n+\tN_Subprogram_Body.\n+\n+2020-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: (Check_Inherited_Indexing): Check that a type\n+\tderived from an indexable container type cannot specify an\n+\tindexing aspect if the same aspect is not specified for the\n+\tparent type (RM 4.1.6 (6/5), AI12-160). Add a check that a\n+\tspecified indexing aspect for a derived type is confirming.\n+\n+2020-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Protected_Subp_Specification): Add ???\n+\tcomment about the flag Has_Nested_Subprogram not being set here.\n+\t(Expand_N_Protected_Body): If the original body for a protected\n+\tsubprogram has the flag Has_Nested_Subprogram set, then set that\n+\tflag on the new unprotected subprogram body that's created for\n+\tit, and reset the Scope fields of its top level declarations,\n+\twhich have been effectively taken from the original protected\n+\tsubprogram body. Add ??? comment about unclear testing of\n+\tCorresponding_Spec.\n+\n+2020-06-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* aspects.ads (type Aspect_Id): Add Aspect_Yield as a Boolean\n+\taspect, and update the Is_Representation_Aspect, Aspect_Names,\n+\tand Aspect_Delay arrays.\n+\t* einfo.ads, einfo.adb (Has_Yield_Aspect, Yield_Aspect): New\n+\tsubprograms.\n+\t* exp_ch6.adb (Add_Return, Expand_Non_Function_Return,\n+\tExpand_Simple_Function_Return): Add calls to Yield.\n+\t* exp_ch9.adb (Build_Accept_Body, Expand_N_Accept_Statement):\n+\tAdd calls to Yield.\n+\t* rtsfind.ads (RE_Yield): Adding support to generate calls to\n+\tthe runtime service Ada.Dispatching.Yield\n+\t* sem_ch13.adb (Analyze_Aspect_Yield): New subprogram.\n+\t* sem_ch3.adb (Derive_Subprogram): Inherit attribute\n+\tHas_Yield_Aspect.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Check consistency\n+\tof Has_Yield in the actual subprogram of a generic\n+\tinstantiation.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Check that if the\n+\tYield aspect is specified for a dispatching subprogram that\n+\tinherits the aspect, the specified value shall be confirming.\n+\t* sem_prag.adb (Analyze_Pragma [Pragma_Implemented]): Check that\n+\tthe implementation kind By_Protected_Procedure cannot be applied\n+\tto a procedure that has aspect Yield.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Replace all occurrences of\n+\tthe original right operand with the relocated version.\n+\n+2020-06-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Has_BIP_Extra_Formal): New subprogram.\n+\t(Needs_BIP_Task_Actuals): Add support for the subprogram type\n+\tinternally generated for dispatching calls.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Adding code to\n+\texplicitly duplicate the extra formals of the target subprogram.\n+\t* freeze.adb (Check_Extra_Formals): New subprogram.\n+\t(Freeze_Subprogram): Fix decoration of Extra_Formals.\n+\t* sem_ch3.adb (Derive_Subprogram): Fix decoration of\n+\tExtra_Formals.\n+\n+2020-06-17  Bob Duff  <duff@adacore.com>\n+\n+\t* par.adb (P_Basic_Declarative_Items): Update comment about\n+\tDeclare_Expression.\n+\t* par-ch3.adb (P_Declarative_Items): Pass in Declare_Expression\n+\tflag, and if True, skip the call to Style.Check_Indentation.\n+\t* par-ch4.adb (P_Declare_Expression): Fix incorrect comment.\n+\n+2020-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion): Change error message to make\n+\tit more user-friendly.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Apply_Length_Check_On_Assignment): Declare.\n+\t* checks.adb (Apply_Length_Check_On_Assignment): New procedure\n+\tto apply a length check to an expression in an assignment.\n+\t* exp_ch5.adb (Expand_Assign_Array): Call it instead of calling\n+\tApply_Length_Check to generate a length check.\n+\t* sem_ch5.adb (Analyze_Assignment): Likewise.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb (Is_Relaxed_Initialization_State): Add reference to\n+\tSPARK RM.\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Likewise.\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Reject\n+\taspect on completions of private types and deferred constants.\n+\t* sem_util.ads, sem_util.adb (Has_Relaxed_Initialization):\n+\tAdjust comments; support queries for constants.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cstand.adb (Stloc): Change to a renaming.\n+\t(Staloc): Likewise.\n+\t(Build_Unsigned_Integer_Type): Remove Nam parameter, use local\n+\tconstants and do not call Make_Name.\n+\t(Make_Dummy_Index): Use local constants.\n+\t(Create_Standard): Pass the name of entities as parameter in\n+\tcalls to New_Standard_Entity and remove calls to Make_Name.\n+\tAdjust calls to Build_Unsigned_Integer_Type.\n+\t(Identifier_For): Use local constant.\n+\t(Make_Component): Pass the name of the component as parameter\n+\tin call to New_Standard_Entity and remove call to Make_Name.\n+\t(Make_Formal): Likewise.  Rename Formal_Name parameter into\n+\tNam and use local constant.\n+\t(Make_Name): Delete.\n+\t(New_Operator): Use local constant.\n+\t(New_Standard_Entity): Rename S parameter into Nam and build\n+\tthe name here.  Remove call to Make_Name.\n+\t(Register_Float_Type): Pass the name of the type as parameter\n+\tin call to New_Standard_Entity and remove call to Make_Name.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_First>:\n+\tRemove condition added for scalar types.\n+\n+2020-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch3.ads (Build_Access_Subprogram_Wrapper_Body): Adjust\n+\tcolon columns; reformat comment.\n+\t* exp_ch3.adb\n+\t(Build_Access_Subprogram_Wrapper_Body): Likewise.\n+\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Reformat spec\n+\tcomment and reformat comment in body.\n+\t(Analyze_Full_Type_Declaration): Reformat comment.\n+\t(Replace_Type_Name): Fixed three typos, plus reformatting of\n+\tcomment.\n+\t* sem_prag.adb (Analyze_Pre_Post_Condition): Fix typos.\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Edit comments:\n+\tremove hyphen, add missing word.\n+\n+2020-06-17  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-cbdlli.adb, libgnat/a-cbhama.adb,\n+\tlibgnat/a-cbhase.adb, libgnat/a-cbmutr.adb,\n+\tlibgnat/a-cborma.adb, libgnat/a-cborse.adb,\n+\tlibgnat/a-cdlili.adb, libgnat/a-chtgbk.adb,\n+\tlibgnat/a-chtgke.adb, libgnat/a-cidlli.adb,\n+\tlibgnat/a-cihama.adb, libgnat/a-cihase.adb,\n+\tlibgnat/a-cimutr.adb, libgnat/a-ciorma.adb,\n+\tlibgnat/a-ciorse.adb, libgnat/a-cobove.adb,\n+\tlibgnat/a-cohama.adb, libgnat/a-cohase.adb,\n+\tlibgnat/a-coinve.adb, libgnat/a-comutr.adb,\n+\tlibgnat/a-convec.adb, libgnat/a-coorma.adb,\n+\tlibgnat/a-coorse.adb, libgnat/a-crbtgk.adb,\n+\tlibgnat/a-crbtgo.adb, libgnat/a-rbtgso.adb: Move tampering\n+\tchecks earlier.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Get_Integer_Type): Use standard types without\n+\ta specific size.\n+\t* sem_res.adb (Resolve_Unchecked_Type_Conversion): Remove a\n+\tredundant intermediate conversion to Universal_Integer.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Get_Iterable_Type_Primitive): Fix\n+\tcomment and enforce it with an assertion in the body.\n+\n+2020-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): For an\n+\taccess_to_subprogram declaration that has aspect specifications,\n+\tcall Build_Access_ Subprogram_Wrapper at once, so that pre- and\n+\tpostcondition aspects are analyzed in the context of a\n+\tsubprogram declaration.\n+\t(Build_Access_Subprogram_Wrapper): Examine aspect specifications\n+\tof an Access_To_Subprogram declaration. If pre- or\n+\tpostconditions are declared for it, create declaration for\n+\tsubprogram wrapper and add the corresponding aspect\n+\tspecifications to it. Replace occurrences of the type name by\n+\tthat of the generated subprogram, so that attributes 'Old and\n+\t'Result can appear in a postcondition.\n+\t* exp_ch3.adb (Build_Access_Subprogram_Wrapper_Body): Moved\n+\there from sem_prag.adb.\n+\t* exp_ch3.ads (Build_Access_Subprogram_Wrapper_Body): Visible\n+\tsubprogram.\n+\t* sem_prag.adb (Build_Access_Subprogram_Wrapper / _Body): Moved\n+\tto sem_ch3.adb and exp_ch3.adb.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* atree.adb (Preserve_Comes_From_Source): Rewrite using\n+\tSet_Comes_From_Source and Comes_From_Source, which enforce that\n+\tthe parameters are valid.\n+\t* exp_ch4.adb, exp_ch5.adb, sem_ch12.adb, sem_ch6.adb,\n+\tsem_res.adb: Rewrite using Preserve_Comes_From_Source.\n+\n+2020-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbre.ads: Remove obsolete\n+\tcomments.\n+\n+2020-06-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* aspects.ads (type Aspect_Id): Add Aspect_Static as a Boolean\n+\taspect, and update the Is_Representation_Aspect, Aspect_Names,\n+\tand Aspect_Delay arrays.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): In the case of a\n+\treturn for a static expression function, capture a copy of the\n+\texpression of the return statement before it's expanded and\n+\treset its Analyzed flags. Then, just before leaving this\n+\tprocedure, if the expression was rewritten, set the\n+\tOriginal_Node of the rewritten expression to the new copy and\n+\talso set the Expression of the associated static expression\n+\tfunction to designate that copy. This ensures that later copies\n+\tof the expression made via New_Copy_Tree will fully copy all\n+\tnodes of the expression tree.\n+\t* inline.ads (Inline_Static_Expression_Function_Call): New\n+\tprocedure to evaluate and produce the result of a static call to\n+\ta static expression function.\n+\t* inline.adb: Add with and use for Sem_Res.\n+\t(Establish_Actual_Mapping_For_Inlined_Call): New procedure\n+\textracted from code in Expand_Inlined_Call that traverses the\n+\tactuals and formals of an inlined call and in some cases creates\n+\ttemporaries for holding the actuals, plus establishes an\n+\tassociation between formals and actuals (via the Renamed_Object\n+\tfields of the formals).\n+\t(Formal_Is_Used_Once): Function removed from Expand_Inlined_Call\n+\tand now nested in the above procedure.\n+\t(Expand_Inlined_Call): Code for doing the formal/actual\n+\ttraversal is moved to Create_Actual_Temporaries and replaced\n+\twith a call to that new procedure.\n+\t(Inline_Static_Expression_Function_Call): New procedure to\n+\tevaluate a static call to a static expression function,\n+\tsubstituting actuals for their corresponding formals and\n+\tproducing a fully folded and static result expression. The\n+\tfunction has subsidiary functions Replace_Formal and Reset_Sloc\n+\tthat take care of doing the mapping of formals to actuals and\n+\tresetting the Slocs of subnodes of the mapped expression to that\n+\tof the call so errors will be flagged on the call rather than\n+\tfunction.\n+\t* sem_ch6.adb (Analyze_Expression_Function): In the case of a\n+\tstatic expression function, perform an additional preanalysis of\n+\tthe function's expression to ensure that it's a potentially\n+\tstatic expression (according to the requirements of\n+\t6.8(3.2/5-3.4/5)), and issue an error if it's not. The global\n+\tflag Checking_Potentially_Static_Expression is set and unset\n+\taround this checking.\n+\t* sem_ch13.adb (Analyze_Aspect_Static): New procedure to enforce\n+\tselected requirements of the new aspect Static on expression\n+\tfunctions, including checking that the language version is\n+\tAda_2020 and that the entity to which it applies is an\n+\texpression function whose formal parameters are of a static\n+\tsubtype and have mode 'in', its result subtype is a static\n+\tsubtype, and it has no pre- or postcondition aspects. A ???\n+\tcomment is added to indicate the need for adding checking that\n+\ttype invariants don't apply to the result type if the function\n+\tis a boundary entity.\n+\t(Analyze_One_Aspect): Call Analyze_Aspect_Static for aspect\n+\tStatic.\n+\t* sem_elab.adb (Build_Call_Marker): Return without creating a\n+\tcall marker when the subprogram is a static expression function,\n+\tsince no ABE checking is needed for such functions.\n+\t* sem_eval.ads (Checking_Potentially_Static_Expression): New\n+\tfunction to return whether the checking for potentially static\n+\texpressions is enabled.\n+\t(Set_Checking_Potentially_Static_Expression): New procedure to\n+\tenable or disable checking of potentially static expressions.\n+\t* sem_eval.adb (Checking_For_Potentially_Static_Expression): New\n+\tglobal flag for determining whether preanalysis of potentially\n+\tstatic expression is being done, which affects the behavior of\n+\tcertain static evaluation routines.\n+\t(Checking_Potentially_Static_Expression): New function to return\n+\twhether the checking for potentially static expressions is\n+\tenabled.\n+\t(Eval_Call): When evaluating a call within a static expression\n+\tfunction with checking of potentially static expression\n+\tfunctions enabled, substitutes a static value in place of the\n+\tcall to allow folding of the expression.\n+\t(Eval_Entity_Name): When evaluating a formal parameter of a\n+\tstatic expression function with checking of potentially static\n+\texpression functions enabled, substitutes a static value in\n+\tplace of the reference to the formal to allow folding of the\n+\texpression.\n+\t(Set_Checking_Potentially_Static_Expression): New procedure to\n+\tenable or disable checking of potentially static expressions.\n+\t* sem_res.adb (Resolve_Call): Test for a recursive call\n+\toccurring within a static expression function and issue an error\n+\tfor such a call. Prevent the establishment of a transient scope\n+\tin the case this is a call to a (string-returning) static\n+\texpression function. When calling a static expression function,\n+\tif no error has been posted on the function, call\n+\tInline_Static_Expression_Function_Call to convert the call into\n+\tits equivalent static value.\n+\t* sem_util.ads (Is_Static_Expression_Function): New function\n+\treturning whether the subprogram entity passed to it is a static\n+\texpression function.\n+\t(Is_Static_Expression_Function_Call): New function to determine\n+\twhether the call node passed to it is a static call to a static\n+\texpression function.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Suppress\n+\tcompile-time Constraint_Error reporting when checking for a\n+\tpotentially static expression.\n+\t(Is_Static_Expression_Function): New function returning whether\n+\tthe subprogram entity passed to it is a static expression\n+\tfunction by testing for the presence of aspect Static.\n+\t(Has_All_Static_Actuals): New function in\n+\tIs_Static_Expression_Function_Call that traverses the actual\n+\tparameters of a function call and returns True only when all of\n+\tthe actuals are given by static expressions. In the case of a\n+\tstring-returning function, we call Resolve on each actual to\n+\tensure that their Is_Static_Expression flag properly reflects\n+\twhether they're static, to allow suppressing creation of a\n+\ttransient scope within Resolve_Call. A prominent ??? comment is\n+\tadded to explain this rather unconventional call to Resolve.\n+\t(Is_Static_Expression_Function_Call): New function that\n+\tdetermines whether a node passed to it is a call to a static\n+\texpression function all of whose actual parameters are given by\n+\tstatic expressions.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Optimize_Length_Comparison): New local variable to\n+\trecord whether this may be a dynamic superflat case.\n+\t(Is_Optimizable): Accept 0 as lower bound and set it in this case,\n+\tbut return false if the operand is not a length too.\n+\t(Rewrite_For_Equal_Lengths): New procedure.\n+\tOptimize the comparison of two lengths in the superflat case when\n+\tthe arrays have the same bounds.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst (Bit): Sharpen\n+\tthe comparison with System.Storage_Unit.\n+\t(Descriptor_Size): Clear confusion about alignment and padding.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_First>:\n+\tDo not replace the bound for an array type if it is public.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Optimize_Length_Comparison): Make sure the base\n+\ttypes are the same when comparing Y'Last and X'Last directly.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_First>:\n+\tReplace it with a direct reference to an entity which is not a\n+\tdiscriminant for constrained array types.  Add same condition\n+\tfor scalar types.\n+\t<Attribute_Last>: Merge with above implementation.\n+\t* exp_ch4.adb (Optimize_Length_Comparison): Be prepared for a\n+\tsecond entity whose length is compared.  Rename Prepare_64 to\n+\tConvert_To_Long_Long_Integer.  If the second entity is present,\n+\tcompute the difference of the 'First attributes and compare the\n+\tsum of 'Last of the second entity with this difference against\n+\t'Last of the first entity.  Add a special case when the 'First\n+\tattributes are equal.  Suppress overflow checks in all cases.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst, lib-writ.ads,\n+\tpar-prag.adb, sem_ch12.adb, sem_ch8.adb, sem_prag.adb: Fix\n+\tcasing of GNATprove.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Generate_Range_Check): Simplify redundant\n+\tcondition.\n+\t* sem_ch3.adb (Check_Initialization, Process_Discriminants):\n+\tLikewise.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Likewise.\n+\n+2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Build_Conversion): Also preserve the\n+\tConversion_OK flag of an inner conversion.\n+\n+2020-06-17  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Enable expansion\n+\tthat creates a renaming that removes side effects from the\n+\titerated object in the GNATprove mode; then analyze reference to\n+\tthis renaming (it is required for GNATprove and harmless for\n+\tGNAT).\n+\n 2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sinfo.ads (Conversion_OK): Document use for 'Pos and 'Val."}, {"sha": "a7c04f43bbaec05ffd2ecb93d5cddf9186ba0cdb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,8 @@\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c-common.c (get_atomic_generic_size): Check cv-qualifiers in\n+\tpointer arguments.\n+\n 2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (c_omp_check_loop_iv_exprs): Add an int argument."}, {"sha": "4d9759ea6825234ea127dc378e51a6a34a8aae7c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,36 @@\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/66159\n+\t* parser.c (cp_parser_elaborated_type_specifier): Do not warn\n+\tunless in a declaration.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (copy_fndecl_with_name): Declare.\n+\t* class.c (copy_fndecl_with_name): Split out from...\n+\t(build_clone): ...here.\n+\t(add_implicitly_declared_members): Add op== to TYPE_FIELDS.\n+\t* method.c (implicitly_declare_fn): Use copy_fndecl_with_name.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_new_op_1): Don't look for a CALL_EXPR when\n+\tcalling a consteval function.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (grokfield): Pass SD_DEFAULTED and SD_DELETED.\n+\t* decl.c (duplicate_decls): Reduce error for delete\n+\tafter earlier declaration to pedwarn.\n+\n+2020-06-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95508\n+\t* constexpr.c (maybe_fold_non_dependent_expr): New.\n+\t* cp-tree.h (maybe_fold_non_dependent_expr): Declare.\n+\t* typeck.c (cp_build_array_ref): Call maybe_fold_non_dependent_expr\n+\tinstead of maybe_constant_value.\n+\n 2020-06-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95369"}, {"sha": "6d58dc81c7dd14118d1c95b75fb4d5dd41156309", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,105 @@\n+2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/default-1.c: Update.\n+\t* c-c++-common/gomp/defaultmap-3.c: Likewise.\n+\t* c-c++-common/gomp/order-4.c: Likewise.\n+\t* g++.dg/gomp/parallel-2.C: Likewise.\n+\t* g++.dg/gomp/predetermined-1.C: Likewise.\n+\t* g++.dg/gomp/sharing-1.C: Likewise.\n+\t* gcc.dg/gomp/appendix-a/a.24.1.c: Likewise.\n+\t* gcc.dg/gomp/parallel-2.c: Likewise.\n+\t* gcc.dg/gomp/pr44085.c: Likewise.\n+\t* gcc.dg/gomp/sharing-1.c: Likewise.\n+\t* gcc.dg/gomp/vla-1.c: Likewise.\n+\t* gfortran.dg/gomp/appendix-a/a.24.1.f90: Likewise.\n+\t* gfortran.dg/gomp/crayptr3.f90: Likewise.\n+\t* gfortran.dg/gomp/pr33439.f90: Likewise.\n+\t* gfortran.dg/gomp/pr44036-1.f90: Likewise.\n+\t* gfortran.dg/gomp/pr44085.f90: Likewise.\n+\t* gfortran.dg/gomp/pr44536.f90: Likewise.\n+\t* gfortran.dg/gomp/pr94672.f90: Likewise.\n+\t* gfortran.dg/gomp/sharing-1.f90: Likewise.\n+\t* gfortran.dg/gomp/sharing-2.f90: Likewise.\n+\t* gfortran.dg/gomp/sharing-3.f90: Likewise.\n+\n+2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/hsa-indirect-call-1.c: New file.\n+\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/66159\n+\t* g++.dg/warn/forward-inner.C: Check alias-declaration using\n+\telaborated-type-specifier.\n+\n+2020-06-17  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Kaipeng Zhou  <zhoukaipeng3@huawei.com>\n+\t    Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Kaipeng Zhou  <zhoukaipeng3@huawei.com>\n+\n+\tPR tree-optimization/95199\n+\t* gcc.target/aarch64/sve/pr95199.c: New test.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/spaceship-synth9.C: New test.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-ca107.C: New test.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/consteval17.C: New test.\n+\n+2020-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/pr62101.C: Expect error.\n+\t* g++.dg/cpp0x/pr80259.C: Expect error.\n+\t* g++.dg/cpp2a/concepts-friend8.C: New test.\n+\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c-c++-common/pr95378.c: New test.\n+\n+2020-06-17  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/20200617.c: New test.\n+\n+2020-06-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95508\n+\t* g++.dg/template/conv16.C: New test.\n+\n+2020-06-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR testsuite/95716\n+\t* g++.dg/ext/pr85503.C: Give ai::cv public access.\n+\n+2020-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95717\n+\t* g++.dg/torture/pr95717.C: New testcase.\n+\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/95720\n+\t* gcc.misc-tests/gcov-pr94029.c: Remove not needed remove-gcda.\n+\t* lib/gcov.exp: Delete properly .gcov files.\n+\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/vect/vec-cond-expr-eh.C: New test.\n+\n+2020-06-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx2-shiftqihi-constant-1.c: New test.\n+\t* gcc.target/i386/avx2-shiftqihi-constant-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-shiftqihi-constant-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-shiftqihi-constant-2.c: Ditto.\n+\t* gcc.target/i386/sse2-shiftqihi-constant-1.c: Ditto.\n+\t* gcc.target/i386/sse2-shiftqihi-constant-2.c: Ditto.\n+\n 2020-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* g++.dg/torture/pr95493-1.C: New test."}, {"sha": "a569a41c08c2e0bb0dad58f2680d4cd81f50de2a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,18 @@\n+2020-06-17  Samuel Thibault  <samuel.thibault@gnu.org>\n+\n+\t* config.host (md_unwind_header) <i[34567]86-*-gnu*>: Set to\n+\t'i386/gnu-unwind.h'\n+\t* config/i386/gnu-unwind.h: New file.\n+\n+2020-06-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* libgcov-util.c (read_gcda_finalize): Remove const operator.\n+\t(merge_wrapper): Add both counts and use them properly.\n+\t(topn_to_memory_representation): New function.\n+\t(gcov_merge): Covert on disk representation to in memory\n+\trepresentation.\n+\t* libgcov.h: Remove const operator.\n+\n 2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* configure: Regenerate."}, {"sha": "e5514df4beec77fe9e41b08de65fa408818d4f76", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,19 @@\n+2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR lto/94848\n+\t* testsuite/libgomp.fortran/use_device_ptr-optional-3.f90: Add\n+\t'dg-do run'.\n+\n+2020-06-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (init_environment_variables): Use \".so.1\"\n+\tvariant for HSA_RUNTIME_LIB name.\n+\t(find_executable_symbol_1): Delete.\n+\t(find_executable_symbol): Delete.\n+\t(init_kernel_properties): Add \".kd\" suffix to symbol names.\n+\t(find_load_offset): Delete.\n+\t(create_and_finalize_hsa_program): Remove relocation handling.\n+\n 2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-fortran/routine-10.f90: New test."}, {"sha": "76262375d82e03c1fef1d2f8b9bb634a04f98a75", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff95ee7cc2c046d69ff6f79990930fb22e0e808/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aff95ee7cc2c046d69ff6f79990930fb22e0e808", "patch": "@@ -1,3 +1,39 @@\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94540\n+\t* include/bits/stl_uninitialized.h (__uninitialized_default_1<true>):\n+\tConstruct the first value at *__first instead of on the stack.\n+\t(__uninitialized_default_n_1<true>): Likewise.\n+\tImprove comments on several of the non-standard algorithms.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_default/94540.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_default_n/94540.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct/94540.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct_n/94540.cc:\n+\tNew test.\n+\t* testsuite/23_containers/vector/cons/94540.cc: New test.\n+\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_default_n/sizes.cc:\n+\tReplace Value type with int so trivial code path is used.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct_n/sizes.cc:\n+\tLikewise.\n+\n+2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_uninitialized.h (uninitialized_fill_n): Only\n+\tuse std::fill_n when the size is an integral type.\n+\t(__uninitialized_default_n): Likewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_default_n/sizes.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/sizes.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct_n/sizes.cc:\n+\tNew test.\n+\n 2020-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/95282"}]}