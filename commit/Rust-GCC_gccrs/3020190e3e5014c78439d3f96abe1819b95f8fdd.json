{"sha": "3020190e3e5014c78439d3f96abe1819b95f8fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyMDE5MGUzZTUwMTRjNzg0MzlkM2Y5NmFiZTE4MTliOTVmOGZkZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-22T12:14:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-22T12:14:45Z"}, "message": "target.h (enum opt_levels, [...]): New.\n\n\t* target.h (enum opt_levels, struct default_options): New.\n\t* target.def (handle_ofast): Remove hook.\n\t(target_option.optimization): Change to\n\ttarget_option.optimization_table.\n\t* doc/tm.texi.in (TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t(CAN_DEBUG_WITHOUT_FP): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* opts.c (maybe_default_option, maybe_default_options,\n\tdefault_options_table): New.\n\t(default_options_optimization): Take extra parameters.  Don't\n\tassert that global_options and global_options_set are in use.  Use\n\tmaybe_default_options.\n\t(decode_options): Pass extra parameters to\n\tdefault_options_optimization.\n\t* common.opt (falign-loops): Use value 0 with Var.\n\t(frerun-cse-after-loop, ftree-ter): Remove Init.\n\t* system.h (CAN_DEBUG_WITHOUT_FP, TARGET_HANDLE_OFAST,\n\tTARGET_OPTION_OPTIMIZATION): Remove.\n\t* targhooks.c (empty_optimization_table): New.\n\t* targhooks.h (empty_optimization_table): Declare.\n\t* toplev.c (process_options): Don't set flag_rerun_cse_after_loop.\n\t* config/alpha/alpha.c (alpha_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/alpha/alpha.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/arm/arm.c (arm_option_optimization: Change to\n\tarm_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/arm/arm.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/avr/avr.c (avr_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/avr/avr.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/cris/cris.c (cris_option_optimization): Change to\n\tcris_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/crx/crx.c (crx_option_optimization): Change to\n\tcrx_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/crx/crx.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/fr30/fr30.c (fr30_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/fr30/fr30.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/frv/frv.c (frv_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/frv/frv.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/h8300/h8300.c (h8300_option_optimization): Change to\n\th8300_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/h8300/h8300.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/i386/i386.c (ix86_option_optimization): Change to\n\tix86_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/i386/sol2-10.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define\n\tas initializer.\n\t* config/ia64/ia64.c (ia64_option_optimization): Change to\n\tia64_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/ia64/ia64.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/ia64/vms.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define as\n\tinitializer.\n\t* config/iq2000/iq2000.c (iq2000_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/iq2000/iq2000.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/lm32/lm32.c (lm32_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/lm32/lm32.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/m32r/m32r.c (m32r_option_optimization): Change to\n\tm32r_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/m32r/m32r.h (SUBTARGET_OPTIMIZATION_OPTIONS,\n\tCAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/mcore/mcore.c (mcore_option_optimization): Change to\n\tmcore_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/mep/mep.c (mep_option_optimization): Change to\n\tmep_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/mep/mep.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/microblaze/microblaze.c\n\t(microblaze_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/microblaze/microblaze.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/mips/mips.c (mips_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/mips/mips.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/mmix/mmix.c (mmix_option_optimization): Change to\n\tmmix_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/mmix/mmix.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/mn10300/mn10300.c (mn10300_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/mn10300/mn10300.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/pa/pa.c (pa_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/pa/pa.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/pdp11/pdp11.c (pdp11_option_optimization): Change to\n\tpdp11_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/picochip/picochip.c (picochip_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/picochip/picochip.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/rs6000/rs6000.c (rs6000_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/rs6000/rs6000.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/rx/rx.c (rx_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/rx/rx.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/s390/s390.c (s390_option_optimization): Change to\n\ts390_option_optimization_table.\n\t(s390_option_override): Update comment.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/s390/s390.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/score/score.c (score_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/score/score.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/sh/sh.c (sh_option_optimization): Change to\n\tsh_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t(sh_option_override): Set MASK_SAVE_ALL_TARGET_REGS here.\n\t(sh_option_override, expand_block_move, multcosts, find_barrier,\n\tbarrier_align): Use optimize_size instead of TARGET_SMALLCODE.\n\t* config/sh/sh.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t(LOOP_ALIGN, TRAMPOLINE_ALIGNMENT, MOVE_BY_PIECES_P,\n\tSTORE_BY_PIECES_P, SH_DYNAMIC_SHIFT_COST): Use optimize_size\n\tinstead of TARGET_SMALLCODE.\n\t* config/sh/sh.opt (mspace): Make into an alias for -Os.\n\t* config/sparc/sparc.c (sparc_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/sparc/sparc.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/stormy16/stormy16.c (xstorym16_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n\t* config/stormy16/stormy16.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/v850/v850.c (v850_option_optimization): Change to\n\tv850_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/v850/v850.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\t* config/xtensa/xtensa.c (xtensa_option_optimization): Change to\n\txtensa_option_optimization_table.\n\t(TARGET_OPTION_OPTIMIZATION): Change to\n\tTARGET_OPTION_OPTIMIZATION_TABLE.\n\t* config/xtensa/xtensa.h (CAN_DEBUG_WITHOUT_FP): Remove.\n\nFrom-SVN: r165823", "tree": {"sha": "1f0b71dcd99544ab6999d99dbfef93415004de5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0b71dcd99544ab6999d99dbfef93415004de5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3020190e3e5014c78439d3f96abe1819b95f8fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3020190e3e5014c78439d3f96abe1819b95f8fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3020190e3e5014c78439d3f96abe1819b95f8fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3020190e3e5014c78439d3f96abe1819b95f8fdd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26df19ce4f23305c36afaa49cce1aa88a7199eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26df19ce4f23305c36afaa49cce1aa88a7199eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26df19ce4f23305c36afaa49cce1aa88a7199eda"}], "stats": {"total": 1345, "additions": 806, "deletions": 539}, "files": [{"sha": "32dc3d3c1d8a1eeea510ec788474ed5db84d269b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1,3 +1,161 @@\n+2010-10-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.h (enum opt_levels, struct default_options): New.\n+\t* target.def (handle_ofast): Remove hook.\n+\t(target_option.optimization): Change to\n+\ttarget_option.optimization_table.\n+\t* doc/tm.texi.in (TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t(CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* opts.c (maybe_default_option, maybe_default_options,\n+\tdefault_options_table): New.\n+\t(default_options_optimization): Take extra parameters.  Don't\n+\tassert that global_options and global_options_set are in use.  Use\n+\tmaybe_default_options.\n+\t(decode_options): Pass extra parameters to\n+\tdefault_options_optimization.\n+\t* common.opt (falign-loops): Use value 0 with Var.\n+\t(frerun-cse-after-loop, ftree-ter): Remove Init.\n+\t* system.h (CAN_DEBUG_WITHOUT_FP, TARGET_HANDLE_OFAST,\n+\tTARGET_OPTION_OPTIMIZATION): Remove.\n+\t* targhooks.c (empty_optimization_table): New.\n+\t* targhooks.h (empty_optimization_table): Declare.\n+\t* toplev.c (process_options): Don't set flag_rerun_cse_after_loop.\n+\t* config/alpha/alpha.c (alpha_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/alpha/alpha.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/arm/arm.c (arm_option_optimization: Change to\n+\tarm_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/arm/arm.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/avr/avr.c (avr_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/avr/avr.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/cris/cris.c (cris_option_optimization): Change to\n+\tcris_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/crx/crx.c (crx_option_optimization): Change to\n+\tcrx_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/crx/crx.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/fr30/fr30.c (fr30_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/fr30/fr30.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/frv/frv.c (frv_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/frv/frv.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/h8300/h8300.c (h8300_option_optimization): Change to\n+\th8300_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/h8300/h8300.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/i386/i386.c (ix86_option_optimization): Change to\n+\tix86_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/i386/sol2-10.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define\n+\tas initializer.\n+\t* config/ia64/ia64.c (ia64_option_optimization): Change to\n+\tia64_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/ia64/ia64.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/ia64/vms.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define as\n+\tinitializer.\n+\t* config/iq2000/iq2000.c (iq2000_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/iq2000/iq2000.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/lm32/lm32.c (lm32_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/lm32/lm32.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/m32r/m32r.c (m32r_option_optimization): Change to\n+\tm32r_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/m32r/m32r.h (SUBTARGET_OPTIMIZATION_OPTIONS,\n+\tCAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/mcore/mcore.c (mcore_option_optimization): Change to\n+\tmcore_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/mep/mep.c (mep_option_optimization): Change to\n+\tmep_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/mep/mep.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/microblaze/microblaze.c\n+\t(microblaze_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/microblaze/microblaze.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/mips/mips.c (mips_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/mips/mips.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/mmix/mmix.c (mmix_option_optimization): Change to\n+\tmmix_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/mmix/mmix.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/mn10300/mn10300.c (mn10300_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/mn10300/mn10300.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/pa/pa.c (pa_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/pa/pa.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/pdp11/pdp11.c (pdp11_option_optimization): Change to\n+\tpdp11_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/picochip/picochip.c (picochip_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/picochip/picochip.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/rs6000/rs6000.c (rs6000_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/rs6000/rs6000.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/rx/rx.c (rx_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/rx/rx.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/s390/s390.c (s390_option_optimization): Change to\n+\ts390_option_optimization_table.\n+\t(s390_option_override): Update comment.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/s390/s390.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/score/score.c (score_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/score/score.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/sh/sh.c (sh_option_optimization): Change to\n+\tsh_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t(sh_option_override): Set MASK_SAVE_ALL_TARGET_REGS here.\n+\t(sh_option_override, expand_block_move, multcosts, find_barrier,\n+\tbarrier_align): Use optimize_size instead of TARGET_SMALLCODE.\n+\t* config/sh/sh.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t(LOOP_ALIGN, TRAMPOLINE_ALIGNMENT, MOVE_BY_PIECES_P,\n+\tSTORE_BY_PIECES_P, SH_DYNAMIC_SHIFT_COST): Use optimize_size\n+\tinstead of TARGET_SMALLCODE.\n+\t* config/sh/sh.opt (mspace): Make into an alias for -Os.\n+\t* config/sparc/sparc.c (sparc_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/sparc/sparc.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/stormy16/stormy16.c (xstorym16_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): New.\n+\t* config/stormy16/stormy16.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/v850/v850.c (v850_option_optimization): Change to\n+\tv850_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/v850/v850.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\t* config/xtensa/xtensa.c (xtensa_option_optimization): Change to\n+\txtensa_option_optimization_table.\n+\t(TARGET_OPTION_OPTIMIZATION): Change to\n+\tTARGET_OPTION_OPTIMIZATION_TABLE.\n+\t* config/xtensa/xtensa.h (CAN_DEBUG_WITHOUT_FP): Remove.\n+\n 2010-10-21  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tBased on the CFString implementation in FSF apple/trunk branch."}, {"sha": "a74d60da620b906fb17f8e2d3b5684e78cd155fc", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -589,7 +589,7 @@ falign-labels=\n Common RejectNegative Joined UInteger\n \n falign-loops\n-Common Report Var(align_loops) Optimization UInteger\n+Common Report Var(align_loops,0) Optimization UInteger\n Align the start of loops\n \n falign-loops=\n@@ -1318,7 +1318,7 @@ Common Report Var(flag_reorder_functions) Optimization\n Reorder functions to improve code placement\n \n frerun-cse-after-loop\n-Common Report Var(flag_rerun_cse_after_loop) Init(2) Optimization\n+Common Report Var(flag_rerun_cse_after_loop) Optimization\n Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt\n@@ -1681,7 +1681,7 @@ Common Report Var(flag_tree_sra) Optimization\n Perform scalar replacement of aggregates\n \n ftree-ter\n-Common Report Var(flag_tree_ter) Init(1) Optimization\n+Common Report Var(flag_tree_ter) Optimization\n Replace temporary expressions in the SSA->normal pass\n \n ftree-lrs"}, {"sha": "78c54123ab14851dd4efb4725ee5ece5cb22efd3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -208,6 +208,13 @@ static void unicosmk_gen_dsib (unsigned long *);\n static void unicosmk_output_ssib (FILE *, const char *);\n static int unicosmk_need_dex (rtx);\n \f\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options alpha_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -11140,6 +11147,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE alpha_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE alpha_option_optimization_table\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE alpha_mangle_type"}, {"sha": "21db01c8ec5fd436f85d793d3d14e8851b27bdb8", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009\n+   2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n@@ -223,10 +223,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n     for (i = 32; i < 63; i++)\t\t\t\\\n       fixed_regs[i] = call_used_regs[i] = 1;\t\\\n }\n-\n-\n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n "}, {"sha": "ea72bebd06f0a2061b7d518288c245e9893c02eb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -217,7 +217,6 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n-static void arm_option_optimization (int, int);\n static bool arm_handle_option (size_t, const char *, int);\n static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n@@ -286,6 +285,15 @@ static const struct attribute_spec arm_attribute_table[] =\n #endif\n   { NULL,           0, 0, false, false, false, NULL }\n };\n+\n+/* Set default optimization options.  */\n+static const struct default_options arm_option_optimization_table[] =\n+  {\n+    /* Enable section anchors by default at -O1 or higher.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -333,8 +341,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_HELP arm_target_help\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION arm_option_optimization\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE arm_option_optimization_table\n \n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n@@ -22819,15 +22827,6 @@ arm_order_regs_for_local_alloc (void)\n             sizeof (thumb_core_reg_alloc_order));\n }\n \n-/* Set default optimization options.  */\n-static void\n-arm_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n-{\n-  /* Enable section anchors by default at -O1 or higher.  */\n-  if (level > 0)\n-    flag_section_anchors = 1;\n-}\n-\n /* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n \n bool"}, {"sha": "4b6717f2c3ba9108e8f9ab3a214378a61e381eb7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -494,10 +494,6 @@ extern int arm_arch_hwdiv;\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif\n \n-/* The frame pointer register used in gcc has nothing to do with debugging;\n-   that is controlled by the APCS-FRAME option.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* Nonzero if PIC code requires explicit qualifiers to generate\n    PLT and GOT relocs rather than the assembler doing so implicitly.\n    Subtargets can override these if required.  */"}, {"sha": "7016d483501438ba42b38ce200fd64ceedad6ba3", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -133,6 +133,13 @@ static const struct attribute_spec avr_attribute_table[] =\n   { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options avr_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -208,6 +215,9 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE avr_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE avr_option_optimization_table\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n static void"}, {"sha": "9ad914e4e68785f54fbea404fe1c6d653dd3cbcb", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -124,8 +124,6 @@ extern GTY(()) section *progmem_section;\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n \n-#define CAN_DEBUG_WITHOUT_FP\n-\n #define BITS_BIG_ENDIAN 0\n #define BYTES_BIG_ENDIAN 0\n #define WORDS_BIG_ENDIAN 0"}, {"sha": "11e307138e4c7d6ba7e1eba528fb2d62938046b0", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -132,7 +132,6 @@ static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n-static void cris_option_optimization (int, int);\n static void cris_option_override (void);\n \n static bool cris_frame_pointer_required (void);\n@@ -150,6 +149,14 @@ int cris_max_stackframe = 0;\n /* This is the parsed result of the \"-march=\" option, if given.  */\n int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options cris_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n #undef TARGET_ASM_ALIGNED_SI_OP\n@@ -218,8 +225,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE cris_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION cris_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE cris_option_optimization_table\n \n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE cris_asm_trampoline_template\n@@ -2422,15 +2429,6 @@ cris_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n-\n-static void\n-cris_option_optimization (int level, int size)\n-{\n-  if (level >= 2 || size)\n-    flag_omit_frame_pointer = 1;\n-}\n-\n /* The TARGET_OPTION_OVERRIDE worker.\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n "}, {"sha": "3dd642d902533cfb840a23173e09b261718cdae2", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -130,7 +130,6 @@ static bool crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_U\n static int crx_address_cost (rtx, bool);\n static bool crx_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool crx_can_eliminate (const int, const int);\n-static void crx_option_optimization (int, int);\n \n /*****************************************************************************/\n /* RTL VALIDITY\t\t\t\t\t\t\t\t     */\n@@ -177,8 +176,17 @@ static const struct attribute_spec crx_attribute_table[] = {\n \n /* Option handling.  */\n \n-#undef\tTARGET_OPTION_OPTIMIZATION\n-#define\tTARGET_OPTION_OPTIMIZATION\tcrx_option_optimization\n+#undef\tTARGET_OPTION_OPTIMIZATION_TABLE\n+#define\tTARGET_OPTION_OPTIMIZATION_TABLE\tcrx_option_optimization_table\n+\n+static const struct default_options crx_option_optimization_table[] =\n+  {\n+    /* Put each function in its own section so that PAGE-instruction\n+       relaxation can do its best.  */\n+    { OPT_LEVELS_1_PLUS, OPT_ffunction_sections, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n /* Initialize 'targetm' variable which contains pointers to functions and data\n  * relating to the target machine.  */\n@@ -1447,13 +1455,3 @@ crx_expand_epilogue (void)\n   else\n     emit_jump_insn (gen_pop_and_popret_return (GEN_INT (sum_regs)));\n }\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n-static void\n-crx_option_optimization (int level, int size)\n-{\n-  /* Put each function in its own section so that PAGE-instruction\n-     relaxation can do its best.  */\n-  if (level || size)\n-    flag_function_sections = 1;\n-}"}, {"sha": "6982eb2cdc4a5e264c6c6bb23b7ab6d22058a53a", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -54,9 +54,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define TARGET_VERSION fputs (\" (CRX/ELF)\", stderr);\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /*****************************************************************************/\n /* STORAGE LAYOUT\t\t\t\t\t\t\t     */\n /*****************************************************************************/"}, {"sha": "04e90f23fc278f3fee6d4b9aa7a5201f392252fc", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1,6 +1,6 @@\n /* FR30 specific functions.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n    This file is part of GCC.\n@@ -142,6 +142,13 @@ static void fr30_trampoline_init (rtx, tree, rtx);\n #if UNITS_PER_WORD == 4\n #define WORD_ALIGN(SIZE) (((SIZE) + 3) & ~3)\n #endif\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options fr30_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -175,6 +182,9 @@ static void fr30_trampoline_init (rtx, tree, rtx);\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE fr30_option_optimization_table\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n "}, {"sha": "c5c405c159f703a3a6b22cbc8a9781cabd7d20a3", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1,7 +1,7 @@\n /*{{{  Comment.  */ \n \n /* Definitions of FR30 target. \n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2007, 2008, 2009\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -50,8 +50,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_VERSION fprintf (stderr, \" (fr30)\");\n \n-#define CAN_DEBUG_WITHOUT_FP\n-\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"crt0.o%s crti.o%s crtbegin.o%s\"\n "}, {"sha": "4cbcfcac8a1d17d44d45380090ca5d0a58d26b1e", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -397,6 +397,13 @@ static bool frv_frame_pointer_required\t\t(void);\n static bool frv_can_eliminate\t\t\t(const int, const int);\n static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options frv_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -431,6 +438,8 @@ static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n #define TARGET_HANDLE_OPTION frv_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE frv_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE frv_option_optimization_table\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN"}, {"sha": "99e66434a89ffe4f5c0719d0ad43f8e1bacf7170", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -328,13 +328,6 @@\n         #endif  */\n #define TARGET_VERSION fprintf (stderr, _(\" (frv)\"))\n \n-/* Define this macro if debugging can be performed even without a frame\n-   pointer.  If this macro is defined, GCC will turn on the\n-   `-fomit-frame-pointer' option whenever `-O' is specified.  */\n-/* Frv needs a specific frame layout that includes the frame pointer.  */\n-\n-#define CAN_DEBUG_WITHOUT_FP\n-\n #define LABEL_ALIGN_AFTER_BARRIER(LABEL) (TARGET_ALIGN_LABELS ? 3 : 0)\n \f\n /* Small Data Area Support.  */"}, {"sha": "b9bc95caccf1fbf271435f931b383ba0f4378882", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -303,17 +303,16 @@ enum h8_cpu\n   H8_S\n };\n \n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n \n-static void\n-h8300_option_optimization (int level ATTRIBUTE_UNUSED,\n-\t\t\t   int size ATTRIBUTE_UNUSED)\n-{\n-  /* Basic block reordering is only beneficial on targets with cache\n-     and/or variable-cycle branches where (cycle count taken != cycle\n-     count not taken).  */\n-  flag_reorder_blocks = 0;\n-}\n+static const struct default_options h8300_option_optimization_table[] =\n+  {\n+    /* Basic block reordering is only beneficial on targets with cache\n+       and/or variable-cycle branches where (cycle count taken !=\n+       cycle count not taken).  */\n+    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n /* Initialize various cpu specific globals at start up.  */\n \n@@ -5937,7 +5936,7 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE h8300_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION h8300_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE h8300_option_optimization_table\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "593106b960d5faedf5a5b61367e088abaadc7548", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -125,9 +125,6 @@ extern const char * const *h8_reg_names;\n #define TARGET_DEFAULT (MASK_QUICKCALL)\n #endif\n \n-/* Show we can debug even without a frame pointer.  */\n-/* #define CAN_DEBUG_WITHOUT_FP */\n-\n /* We want dwarf2 info available to gdb...  */\n #define DWARF2_DEBUGGING_INFO        1\n /* ... but we don't actually support full dwarf2 EH.  */"}, {"sha": "199550d26724881968103cd481b8842c40845028", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -4529,20 +4529,19 @@ x86_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n   ASM_OUTPUT_SKIP (file, size ? size : 1);\n }\n \f\n-static void\n-ix86_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n-{\n-  /* For -O2 and beyond, turn off -fschedule-insns by default.  It tends to\n-     make the problem with not enough registers even worse.  */\n+static const struct default_options ix86_option_optimization_table[] =\n+  {\n+    /* Turn off -fschedule-insns by default.  It tends to make the\n+       problem with not enough registers even worse.  */\n #ifdef INSN_SCHEDULING\n-  if (level > 1)\n-    flag_schedule_insns = 0;\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n #endif\n \n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n-  SUBTARGET_OPTIMIZATION_OPTIONS;\n+    SUBTARGET_OPTIMIZATION_OPTIONS,\n #endif\n-}\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n \n@@ -33241,8 +33240,8 @@ ix86_autovectorize_vector_sizes (void)\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ix86_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION ix86_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE ix86_option_optimization_table\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT ix86_option_init_struct\n "}, {"sha": "bd3416c29b2c424ce7baf0fc2f3d8171550baaab", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -91,13 +91,8 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_SUBTARGET_DEFAULT \\\n \t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n-#define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (optimize >= 1)\t\t\t\t\\\n-\ttarget_flags |= MASK_OMIT_LEAF_FRAME_POINTER;\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n+#define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\t\\\n+  { OPT_LEVELS_1_PLUS, OPT_momit_leaf_frame_pointer, NULL, 1 }\n \n #define MULTILIB_DEFAULTS { \"m32\" }\n "}, {"sha": "96031504f3fdafbf4b340d99ad67471608df49e5", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -202,7 +202,6 @@ static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n static void ia64_option_override (void);\n-static void ia64_option_optimization (int, int);\n static void ia64_option_default_params (void);\n static bool ia64_can_eliminate (const int, const int);\n static enum machine_mode hfa_element_mode (const_tree, bool);\n@@ -341,6 +340,16 @@ static const struct attribute_spec ia64_attribute_table[] =\n   { NULL,\t       0, 0, false, false, false, NULL }\n };\n \n+/* Implement overriding of the optimization options.  */\n+static const struct default_options ia64_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n+    SUBTARGET_OPTIMIZATION_OPTIONS,\n+#endif\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE ia64_attribute_table\n@@ -373,8 +382,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ia64_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION ia64_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE ia64_option_optimization_table\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n@@ -10835,16 +10844,6 @@ ia64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n   return NULL;\n }\n \n-/* Implement overriding of the optimization options.  */\n-static void\n-ia64_option_optimization (int level ATTRIBUTE_UNUSED,\n-\t\t\t  int size ATTRIBUTE_UNUSED)\n-{\n-#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n-  SUBTARGET_OPTIMIZATION_OPTIONS;\n-#endif\n-}\n-\n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n static void\n ia64_option_default_params (void)"}, {"sha": "b4c3758f996d45a220033139ed2ac0a148d3bbc4", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -993,9 +993,6 @@ enum reg_class\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer */\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* If defined, this macro specifies a table of register pairs used to eliminate\n    unneeded registers that point into the stack frame.  */\n "}, {"sha": "4ec816166fd21a2a7d54b8fd0e161ac0ad4971ed", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -184,10 +184,8 @@ typedef struct crtl_name_spec\n     } while (0)\n \n #undef SUBTARGET_OPTIMIZATION_OPTIONS\n-#define SUBTARGET_OPTIMIZATION_OPTIONS                     \\\n-  do {                                                     \\\n-       flag_merge_constants = 0;                           \\\n-  } while (0)\n+#define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\\\n+  { OPT_LEVELS_ALL, OPT_fmerge_constants, NULL, 0 }\n \n /* Define this to be nonzero if static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1"}, {"sha": "f6caf6084a16129bc54b16a5175f847c04d22c00", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -175,6 +175,13 @@ static void iq2000_print_operand      (FILE *, rtx, int);\n static void iq2000_print_operand_address (FILE *, rtx);\n static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options iq2000_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n #undef  TARGET_EXPAND_BUILTIN\n@@ -185,6 +192,8 @@ static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n #define TARGET_HANDLE_OPTION\t\tiq2000_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tiq2000_option_override\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE iq2000_option_optimization_table\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS\t\tiq2000_rtx_costs\n #undef  TARGET_ADDRESS_COST"}, {"sha": "d07bf31a7557510117d237c7e62f8ba53b5ba4e8", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -68,8 +68,6 @@\n #ifndef TARGET_VERSION\n #define TARGET_VERSION TARGET_VERSION_INTERNAL (stderr)\n #endif\n-\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Storage Layout.  */\n "}, {"sha": "bcab220613d5371b570251205f6be83a6755781a", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -77,8 +77,17 @@ lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n static HOST_WIDE_INT lm32_compute_frame_size (int size);\n static void lm32_option_override (void);\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options lm32_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE lm32_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE lm32_option_optimization_table\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n #undef TARGET_RTX_COSTS"}, {"sha": "6800e0f0200bc0469f02982b2d309a0b4e9bf8e5", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -536,8 +536,6 @@ do {                                                            \\\n \n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n-#define CAN_DEBUG_WITHOUT_FP\n-\n #define DEFAULT_GDB_EXTENSIONS 1\n \n /*--------*/"}, {"sha": "f03df26b5710dacc3ad19373f4de67aa3515600d", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -64,7 +64,6 @@ enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n /* Forward declaration.  */\n static bool  m32r_handle_option (size_t, const char *, int);\n static void  m32r_option_override (void);\n-static void  m32r_option_optimization (int, int);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n@@ -113,6 +112,13 @@ static const struct attribute_spec m32r_attribute_table[] =\n   { \"model\",     1, 1, true,  false, false, m32r_handle_model_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n+\n+static const struct default_options m32r_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ATTRIBUTE_TABLE\n@@ -154,8 +160,8 @@ static const struct attribute_spec m32r_attribute_table[] =\n #define TARGET_HANDLE_OPTION m32r_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE m32r_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION m32r_option_optimization\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE m32r_option_optimization_table\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n@@ -278,18 +284,6 @@ m32r_option_override (void)\n   SUBTARGET_OVERRIDE_OPTIONS;\n }\n \n-static void\n-m32r_option_optimization (int level, int size)\n-{\n-  if (level == 1)\n-    flag_regmove = 1;\n-\n-  if (size)\n-    flag_omit_frame_pointer = 1;\n-\n-  SUBTARGET_OPTIMIZATION_OPTIONS;\n-}\n-\n /* Vectors to keep interesting information about registers where it can easily\n    be got.  We use to use the actual mode value as the bit number, but there\n    is (or may be) more than 32 modes now.  Instead we use two tables: one"}, {"sha": "3c0c85d730265f016b57736cbf0584a70540435a", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -305,15 +305,6 @@ extern enum m32r_sdata m32r_sdata;\n #ifndef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\n #endif\n-\n-#ifndef SUBTARGET_OPTIMIZATION_OPTIONS\n-#define SUBTARGET_OPTIMIZATION_OPTIONS\n-#endif\n-\n-/* Define this macro if debugging can be performed even without a\n-   frame pointer.  If this macro is defined, GCC will turn on the\n-   `-fomit-frame-pointer' option whenever `-O' is specified.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Target machine storage layout.  */\n "}, {"sha": "9bacc5caee061d46dfca085609471c68bb7bd62c", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -145,7 +145,6 @@ static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n static void       mcore_option_override\t\t(void);\n-static void       mcore_option_optimization\t(int, int);\n \f\n /* MCore specific attributes.  */\n \n@@ -157,6 +156,23 @@ static const struct attribute_spec mcore_attribute_table[] =\n   { \"naked\",     0, 0, true,  false, false, mcore_handle_naked_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n+\n+/* What options are we going to default to specific settings when\n+   -O* happens; the user can subsequently override these settings.\n+  \n+   Omitting the frame pointer is a very good idea on the MCore.\n+   Scheduling isn't worth anything on the current MCore implementation.  */\n+\n+static const struct default_options mcore_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_ffunction_cse, NULL, 0 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns2, NULL, 0 },\n+    { OPT_LEVELS_SIZE, OPT_mhardlit, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_EXTERNAL_LIBCALL\n@@ -224,8 +240,8 @@ static const struct attribute_spec mcore_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mcore_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION mcore_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mcore_option_optimization_table\n \n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n@@ -2692,33 +2708,6 @@ mcore_option_override (void)\n     target_flags |= MASK_M340;\n }\n \n-/* What options are we going to default to specific settings when\n-   -O* happens; the user can subsequently override these settings.\n-  \n-   Omitting the frame pointer is a very good idea on the MCore.\n-   Scheduling isn't worth anything on the current MCore implementation.  */\n-\n-static void\n-mcore_option_optimization (int level, int size)\n-{\n-  if (level)\n-    {\n-      flag_no_function_cse = 1;\n-      flag_omit_frame_pointer = 1;\n-\n-      if (level >= 2)\n-        {\n-          flag_caller_saves = 0;\n-          flag_schedule_insns = 0;\n-          flag_schedule_insns_after_reload = 0;\n-        }\n-    }\n-  if (size)\n-    {\n-      target_flags &= ~MASK_HARDLIT;\n-    }\n-}\n-\n \f\n /* Compute the number of word sized registers needed to \n    hold a function argument of mode MODE and type TYPE.  */"}, {"sha": "c55624b2eb15e42b8e2360d27170cb9db040a69a", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -295,16 +295,20 @@ mep_conditional_register_usage (void)\n     global_regs[i] = 1;\n }\n \n-static void\n-mep_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n-{\n-  /* The first scheduling pass often increases register pressure and tends\n-     to result in more spill code.  Only run it when specifically asked.  */\n-  flag_schedule_insns = 0;\n \n-  /* Using $fp doesn't gain us much, even when debugging is important.  */\n-  flag_omit_frame_pointer = 1;\n-}\n+static const struct default_options mep_option_optimization_table[] =\n+  {\n+    /* The first scheduling pass often increases register pressure and\n+       tends to result in more spill code.  Only run it when\n+       specifically asked.  */\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n+\n+    /* Using $fp doesn't gain us much, even when debugging is\n+       important.  */\n+    { OPT_LEVELS_ALL, OPT_fomit_frame_pointer, NULL, 1 },\n+\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n static void\n mep_option_override (void)\n@@ -7426,8 +7430,8 @@ mep_asm_init_sections (void)\n #define TARGET_HANDLE_OPTION            mep_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmep_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION\tmep_option_optimization\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE\tmep_option_optimization_table\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n #undef  TARGET_ALLOCATE_INITIAL_VALUE"}, {"sha": "b6a64995827997b271fcec9509ef3807a8f4f0e2", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -159,8 +159,6 @@ crtbegin.o%s\"\n #define COPROC_SELECTION_TABLE \\\n {\"default\", ISA_EXT1}\n /* end-coproc-selection-table */\n-\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n \n #define BITS_BIG_ENDIAN 0"}, {"sha": "1c1d788dcfd631356268c8012e14582f8d5df15b", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1423,6 +1423,13 @@ microblaze_option_override (void)\n     }\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options microblaze_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Return true if FUNC is an interrupt function as specified\n    by the \"interrupt_handler\" attribute.  */\n \n@@ -3028,6 +3035,9 @@ microblaze_adjust_cost (rtx insn ATTRIBUTE_UNUSED, rtx link,\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmicroblaze_option_override \n \n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE microblaze_option_optimization_table\n+\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n "}, {"sha": "0145cb359520718d9321d8c2ee1210f180745b51", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -61,9 +61,6 @@ extern enum pipeline_type microblaze_pipe;\n #define SWITCH_TAKES_ARG(CHAR)\t\t\t\t\t\t\\\n   (DEFAULT_SWITCH_TAKES_ARG (CHAR) || (CHAR) == 'G')\n \n-/*  We can debug without having a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n #define DRIVER_SELF_SPECS    \t\t\t\t\\\n \t\"%{mxl-soft-mul:%<mno-xl-soft-mul}\", \t\t\\\n \t\"%{mno-xl-barrel-shift:%<mxl-barrel-shift}\", \t\\"}, {"sha": "881bb783768711c7b092da91ca5a4ca3c158d9d9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -15876,6 +15876,13 @@ mips_option_override (void)\n   mips_set_mips16_mode (false);\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options mips_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Swap the register information for registers I and I + 1, which\n    currently have the wrong endianness.  Note that the registers'\n    fixedness and call-clobberedness might have been set on the\n@@ -16390,6 +16397,8 @@ mips_shift_truncation_mask (enum machine_mode mode)\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mips_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mips_option_optimization_table\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS mips_legitimize_address"}, {"sha": "1b4747f7b59264f49985734f8fd87f36f9f09b3a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1082,9 +1082,6 @@ enum mips_code_readable_setting {\n   (DEFAULT_SWITCH_TAKES_ARG (CHAR) || (CHAR) == 'G')\n \n #define CONDITIONAL_REGISTER_USAGE mips_conditional_register_usage ()\n-\n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Tell collect what flags to pass to nm.  */\n #ifndef NM_FLAGS"}, {"sha": "4944a390f24f9e99ce670e3f10e96ca6b0dc66ac", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -114,7 +114,6 @@ rtx mmix_compare_op1;\n static int mmix_output_destination_register;\n \n static void mmix_option_override (void);\n-static void mmix_option_optimization (int, int);\n static void mmix_asm_output_source_filename (FILE *, const char *);\n static void mmix_output_shiftvalue_op_from_str\n   (FILE *, const char *, HOST_WIDEST_INT);\n@@ -160,6 +159,15 @@ static bool mmix_frame_pointer_required (void);\n static void mmix_asm_trampoline_template (FILE *);\n static void mmix_trampoline_init (rtx, tree, rtx);\n \n+/* TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options mmix_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n \n@@ -251,8 +259,8 @@ static void mmix_trampoline_init (rtx, tree, rtx);\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mmix_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION mmix_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mmix_option_optimization_table\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -276,18 +284,6 @@ mmix_option_override (void)\n     }\n }\n \n-/* TARGET_OPTION_OPTIMIZATION.  */\n-\n-static void\n-mmix_option_optimization (int level, int size)\n-{\n-  if (level >= 1)\n-    flag_regmove = 1;\n-\n-  if (size || level > 1)\n-    flag_omit_frame_pointer = 1;\n-}\n-\n /* INIT_EXPANDERS.  */\n \n void"}, {"sha": "251c88b938f72fd3ded1e1450754ef46b113cde1", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -147,10 +147,6 @@ struct GTY(()) machine_function\n #define TARGET_VERSION \\\n   fprintf (stderr, \" (MMIX)\")\n \n-/* This one will have to wait a little bit; right now we can't debug\n-   neither with or without a frame-pointer.  */\n-/* #define CAN_DEBUG_WITHOUT_FP */\n-\n \n /* Node: Per-Function Data */\n #define INIT_EXPANDERS mmix_init_expanders ()"}, {"sha": "2187463d083e0b2645290e9c437ffad87956cc53", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -71,6 +71,13 @@ enum processor_type mn10300_processor = PROCESSOR_DEFAULT;\n \t\t\t\t|| df_regs_ever_live_p (17)))\n \n static int mn10300_address_cost (rtx, bool);\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options mn10300_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -2280,6 +2287,8 @@ mn10300_select_cc_mode (rtx x)\n #define TARGET_HANDLE_OPTION mn10300_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mn10300_option_override\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mn10300_option_optimization_table\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mn10300_encode_section_info"}, {"sha": "96a07e8fcdf1ef501f77752b9bb32aa163b8f967", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -493,10 +493,6 @@ enum reg_class\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   OFFSET = mn10300_initial_offset (FROM, TO)\n \n-/* We can debug without frame pointers on the mn10300, so eliminate\n-   them whenever possible.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* We use d0/d1 for passing parameters, so allocate 8 bytes of space\n    for a register flushback area.  */\n #define REG_PARM_STACK_SPACE(DECL) 8"}, {"sha": "076d2dec7557fbc57cfdd3053fa82384cd95130a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -222,11 +222,20 @@ static GTY((length (\"n_deferred_plabels\"))) struct deferred_plabel *\n   deferred_plabels;\n static size_t n_deferred_plabels = 0;\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options pa_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n \f\n /* Initialize the GCC target structure.  */\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE pa_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE pa_option_optimization_table\n \n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\""}, {"sha": "46c210ef7fb0d17d056913d4fedee7d327eee59e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -226,9 +226,6 @@ do {\t\t\t\t\t\t\t\t\\\n #define PTRDIFF_TYPE \"int\"\n #define WCHAR_TYPE \"unsigned int\"\n #define WCHAR_TYPE_SIZE 32\n-\n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n typedef struct GTY(()) machine_function"}, {"sha": "7bfc9e22e2caf804dfc0c0722ef27a70ecbf937b", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -145,7 +145,6 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n static bool pdp11_handle_option (size_t, const char *, int);\n-static void pdp11_option_optimization (int, int);\n static void pdp11_option_init_struct (struct gcc_options *);\n static rtx find_addr_reg (rtx); \n static const char *singlemove_string (rtx *);\n@@ -162,6 +161,14 @@ static rtx pdp11_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t       const_tree, bool);\n static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options pdp11_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_3_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -188,8 +195,8 @@ static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n   (MASK_FPU | MASK_45 | MASK_ABSHI_BUILTIN | TARGET_UNIX_ASM_DEFAULT)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION pdp11_handle_option\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION pdp11_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE pdp11_option_optimization_table\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT pdp11_option_init_struct\n \n@@ -233,18 +240,6 @@ pdp11_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n     }\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n-\n-static void\n-pdp11_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n-{\n-  if (level >= 3)\n-    {\n-      flag_omit_frame_pointer = 1;\n-      /* flag_unroll_loops = 1; */\n-    }\n-}\n-\n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n \n static void"}, {"sha": "f8584f31c045c4f66b0f5097a8e9bc687bd687e2", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -198,6 +198,13 @@ static struct recog_data picochip_saved_recog_data;\n /* Determine which ALU to use for the instruction in\n    picochip_current_prescan_insn. */\n static char picochip_get_vliw_alu_id (void);\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options picochip_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -326,6 +333,9 @@ static char picochip_get_vliw_alu_id (void);\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE picochip_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE picochip_option_optimization_table\n+\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n "}, {"sha": "9584efac7ce21d6fb793b3f56c1f5f20579bb669", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -84,8 +84,6 @@ extern enum picochip_dfa_type picochip_schedule_type;\n #define TARGET_HAS_MAC_UNIT (picochip_has_mac_unit)\n #define TARGET_HAS_MULTIPLY (picochip_has_mac_unit || picochip_has_mul_unit)\n \n-#define CAN_DEBUG_WITHOUT_FP 1\n-\n #define TARGET_VERSION fprintf(stderr, \"(picoChip)\");\n \f\n /* Storage Layout */"}, {"sha": "f265dce42fe1045bbc47170ac9836c0587f04c81", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1363,6 +1363,13 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #endif\n   { NULL,        0, 0, false, false, false, NULL }\n };\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options rs6000_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n #ifndef MASK_STRICT_ALIGN\n #define MASK_STRICT_ALIGN 0\n@@ -1608,6 +1615,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function"}, {"sha": "c31702574399d5e4c398f6022b914f0902d64e1a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -625,9 +625,6 @@ extern unsigned char rs6000_recip_bits[];\n /* The default CPU for TARGET_OPTION_OVERRIDE.  */\n #define OPTION_TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* Target pragma.  */\n #define REGISTER_TARGET_PRAGMAS() do {\t\t\t\t\\\n   c_register_pragma (0, \"longcall\", rs6000_pragma_longcall);\t\\"}, {"sha": "5348a661631885723b207ff3ddd25a926151b03d", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -2253,6 +2253,13 @@ rx_option_override (void)\n   rx_override_options_after_change ();\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options rx_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n \f\n static bool\n rx_allocate_stack_slots_for_args (void)\n@@ -2850,6 +2857,9 @@ rx_memory_move_cost (enum machine_mode mode, enum reg_class regclass, bool in)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\t\trx_option_override\n \n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE\trx_option_optimization_table\n+\n #undef  TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE\t\trx_promote_function_mode\n "}, {"sha": "b39c1e5abca3768f65509dd70009ecc3334db1ef", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -609,8 +609,6 @@ extern int rx_float_compare_mode;\n /* Like REG_P except that this macro is true for SET expressions.  */\n #define SET_P(rtl)    (GET_CODE (rtl) == SET)\n \f\n-#define CAN_DEBUG_WITHOUT_FP 1\n-\n /* The AS100 assembler does not support .leb128 and .uleb128, but\n    the compiler-build-time configure tests will have enabled their\n    use because GAS supports them.  So default to generating STABS"}, {"sha": "290ae69376381928580736f5cc0282fd415bca27", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1490,23 +1490,20 @@ s390_init_machine_status (void)\n }\n \n /* Change optimizations to be performed, depending on the\n-   optimization level.\n+   optimization level.  */\n \n-   LEVEL is the optimization level specified; 2 if `-O2' is\n-   specified, 1 if `-O' is specified, and 0 if neither is specified.\n+static const struct default_options s390_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n \n-   SIZE is nonzero if `-Os' is specified and zero otherwise.  */\n+    /* ??? There are apparently still problems with -fcaller-saves.  */\n+    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n \n-static void\n-s390_option_optimization (int level ATTRIBUTE_UNUSED, int size)\n-{\n-  /* ??? There are apparently still problems with -fcaller-saves.  */\n-  flag_caller_saves = 0;\n+    /* Use MVCLE instructions to decrease code size if requested.  */\n+    { OPT_LEVELS_SIZE, OPT_mmvcle, NULL, 1 },\n \n-  /* Use MVCLE instructions to decrease code size if requested.  */\n-  if (size != 0)\n-    target_flags |= MASK_MVCLE;\n-}\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n \n@@ -1730,7 +1727,7 @@ s390_option_override (void)\n \t\t\t global_options.x_param_values,\n \t\t\t global_options_set.x_param_values);\n \n-  /* This cannot reside in s390_option_optimization since HAVE_prefetch\n+  /* This cannot reside in s390_option_optimization_table since HAVE_prefetch\n      requires the arch flags to be evaluated already.  Since prefetching\n      is beneficial on s390, we enable it if available.  */\n   if (flag_prefetch_loop_arrays < 0 && HAVE_prefetch && optimize >= 3)\n@@ -10510,8 +10507,8 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE s390_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION s390_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE s390_option_optimization_table\n \n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT s390_option_init_struct"}, {"sha": "3e9861458edd8bccadb253a5403ce23efb5dfae4", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -158,9 +158,6 @@ extern int s390_arch_flags;\n #define TARGET_VERSION fprintf (stderr, \" (S/390)\");\n #endif\n \n-/* Frame pointer is not used for debugging.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* Constants needed to control the TEST DATA CLASS (TDC) instruction.  */\n #define S390_TDC_POSITIVE_ZERO                     (1 << 11)\n #define S390_TDC_NEGATIVE_ZERO                     (1 << 10)"}, {"sha": "210ebc3a58a410f9429f57d9ab35e2cc88e731a7", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -53,6 +53,13 @@\n \n static void score_option_override (void);\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options score_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n #undef  TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START           score_asm_file_start\n \n@@ -71,6 +78,8 @@ static void score_option_override (void);\n #define TARGET_HANDLE_OPTION            score_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE          score_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE score_option_optimization_table\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS\tscore_legitimize_address"}, {"sha": "0db4c6c10c61bd8ba72bb399e93f49c39e18b25e", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -98,9 +98,6 @@\n #define TARGET_VERSION \\\n       fprintf (stderr, \"Sunplus S+core rev=%s\", SCORE_GCC_VERSION);\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n /* Target machine storage layout.  */\n #define BITS_BIG_ENDIAN        0\n #define BYTES_BIG_ENDIAN       (TARGET_LITTLE_ENDIAN == 0)"}, {"sha": "40587b5ab84e766915ceb224e58c2e9576b4a2d4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -183,7 +183,6 @@ static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n-static void sh_option_optimization (int, int);\n static void sh_option_init_struct (struct gcc_options *);\n static void sh_option_default_params (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n@@ -323,6 +322,23 @@ static const struct attribute_spec sh_attribute_table[] =\n #endif\n   { NULL,                0, 0, false, false, false, NULL }\n };\n+\n+/* Set default optimization options.  */\n+static const struct default_options sh_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS_SPEED_ONLY, OPT_mdiv_, \"inv:minlat\", 1 },\n+    { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n+    { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n+    { OPT_LEVELS_SIZE, OPT_mcbranchdi, NULL, 0 },\n+    /* We can't meaningfully test TARGET_SHMEDIA here, because -m\n+       options haven't been parsed yet, hence we'd read only the\n+       default.  sh_target_reg_class will return NO_REGS if this is\n+       not SHMEDIA, so it's OK to always set\n+       flag_branch_target_load_optimize.  */\n+    { OPT_LEVELS_2_PLUS, OPT_fbranch_target_load_optimize, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -342,8 +358,8 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sh_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION sh_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE sh_option_optimization_table\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT sh_option_init_struct\n #undef TARGET_OPTION_DEFAULT_PARAMS\n@@ -702,34 +718,6 @@ sh_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n     }\n }\n \f\n-/* Set default optimization options.  */\n-static void\n-sh_option_optimization (int level, int size)\n-{\n-  if (level)\n-    {\n-      if (!size)\n-\tsh_div_str = \"inv:minlat\";\n-    }\n-  if (size)\n-    {\n-      target_flags |= MASK_SMALLCODE;\n-      sh_div_str = SH_DIV_STR_FOR_SIZE ;\n-    }\n-  else\n-    TARGET_CBRANCHDI4 = 1;\n-  /* We can't meaningfully test TARGET_SHMEDIA here, because -m options\n-     haven't been parsed yet, hence we'd read only the default.\n-     sh_target_reg_class will return NO_REGS if this is not SHMEDIA, so\n-     it's OK to always set flag_branch_target_load_optimize.  */\n-  if (level > 1)\n-    {\n-      flag_branch_target_load_optimize = 1;\n-      if (!size)\n-\ttarget_flags |= MASK_SAVE_ALL_TARGET_REGS;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n static void\n sh_option_init_struct (struct gcc_options *opts)\n@@ -756,6 +744,8 @@ sh_option_override (void)\n   int regno;\n \n   SUBTARGET_OVERRIDE_OPTIONS;\n+  if (optimize > 1 && !optimize_size)\n+    target_flags |= MASK_SAVE_ALL_TARGET_REGS;\n   if (flag_finite_math_only == 2)\n     flag_finite_math_only\n       = !flag_signaling_nans && TARGET_SH2E && ! TARGET_IEEE;\n@@ -991,7 +981,7 @@ sh_option_override (void)\n      SH2 .. SH5 : align to cache line start.  */\n   if (align_functions == 0)\n     align_functions\n-      = TARGET_SMALLCODE ? FUNCTION_BOUNDARY/8 : (1 << CACHE_LOG);\n+      = optimize_size ? FUNCTION_BOUNDARY/8 : (1 << CACHE_LOG);\n   /* The linker relaxation code breaks when a function contains\n      alignments that are larger than that at the start of a\n      compilation unit.  */\n@@ -1555,7 +1545,7 @@ expand_block_move (rtx *operands)\n \t  emit_insn (gen_block_move_real_i4 (func_addr_rtx));\n \t  return 1;\n \t}\n-      else if (! TARGET_SMALLCODE)\n+      else if (! optimize_size)\n \t{\n \t  const char *entry_name;\n \t  rtx func_addr_rtx = gen_reg_rtx (Pmode);\n@@ -1594,7 +1584,7 @@ expand_block_move (rtx *operands)\n \n   /* This is the same number of bytes as a memcpy call, but to a different\n      less common function name, so this will occasionally use more space.  */\n-  if (! TARGET_SMALLCODE)\n+  if (! optimize_size)\n     {\n       rtx func_addr_rtx = gen_reg_rtx (Pmode);\n       int final_switch, while_loop;\n@@ -2975,21 +2965,21 @@ multcosts (rtx x ATTRIBUTE_UNUSED)\n        Using a multiply first and splitting it later if it's a loss\n        doesn't work because of different sign / zero extension semantics\n        of multiplies vs. shifts.  */\n-    return TARGET_SMALLCODE ? 2 : 3;\n+    return optimize_size ? 2 : 3;\n \n   if (TARGET_SH2)\n     {\n       /* We have a mul insn, so we can never take more than the mul and the\n \t read of the mac reg, but count more because of the latency and extra\n \t reg usage.  */\n-      if (TARGET_SMALLCODE)\n+      if (optimize_size)\n \treturn 2;\n       return 3;\n     }\n \n   /* If we're aiming at small code, then just count the number of\n      insns in a multiply call sequence.  */\n-  if (TARGET_SMALLCODE)\n+  if (optimize_size)\n     return 5;\n \n   /* Otherwise count all the insns in the routine we'd be calling too.  */\n@@ -4660,7 +4650,7 @@ find_barrier (int num_mova, rtx mova, rtx from)\n       /* For the SH1, we generate alignments even after jumps-around-jumps.  */\n       else if (JUMP_P (from)\n \t       && ! TARGET_SH2\n-\t       && ! TARGET_SMALLCODE)\n+\t       && ! optimize_size)\n \tnew_align = 4;\n \n       /* There is a possibility that a bf is transformed into a bf/s by the\n@@ -5258,13 +5248,13 @@ barrier_align (rtx barrier_or_label)\n       pat = PATTERN (prev);\n       /* If this is a very small table, we want to keep the alignment after\n \t the table to the minimum for proper code alignment.  */\n-      return ((TARGET_SMALLCODE\n+      return ((optimize_size\n \t       || ((unsigned) XVECLEN (pat, 1) * GET_MODE_SIZE (GET_MODE (pat))\n \t\t   <= (unsigned) 1 << (CACHE_LOG - 2)))\n \t      ? 1 << TARGET_SHMEDIA : align_jumps_log);\n     }\n \n-  if (TARGET_SMALLCODE)\n+  if (optimize_size)\n     return 0;\n \n   if (! TARGET_SH2 || ! optimize)"}, {"sha": "969636822daff1044662bf3492893be09de135b9", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -98,8 +98,6 @@ do { \\\n \t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\"); \\\n } while (0)\n \n-#define CAN_DEBUG_WITHOUT_FP \n-\n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed\n    via the stack pointer) in functions that seem suitable.  */\n@@ -623,7 +621,7 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n   barrier_align (LABEL_AFTER_BARRIER)\n \n #define LOOP_ALIGN(A_LABEL) \\\n-  ((! optimize || TARGET_HARD_SH4 || TARGET_SMALLCODE) \\\n+  ((! optimize || TARGET_HARD_SH4 || optimize_size) \\\n    ? 0 : sh_loop_align (A_LABEL))\n \n #define LABEL_ALIGN(A_LABEL) \\\n@@ -1781,7 +1779,7 @@ struct sh_args {\n \n /* Alignment required for a trampoline in bits .  */\n #define TRAMPOLINE_ALIGNMENT \\\n-  ((CACHE_LOG < 3 || (TARGET_SMALLCODE && ! TARGET_HARVARD)) ? 32 \\\n+  ((CACHE_LOG < 3 || (optimize_size && ! TARGET_HARVARD)) ? 32 \\\n    : TARGET_SHMEDIA ? 256 : 64)\n \n /* A C expression whose value is RTL representing the value of the return\n@@ -1813,11 +1811,11 @@ struct sh_args {\n \n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, MOVE_MAX_PIECES + 1) \\\n-   < (TARGET_SMALLCODE ? 2 : ((ALIGN >= 32) ? 16 : 2)))\n+   < (optimize_size ? 2 : ((ALIGN >= 32) ? 16 : 2)))\n \n #define STORE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (TARGET_SMALLCODE ? 2 : ((ALIGN >= 32) ? 16 : 2)))\n+   < (optimize_size ? 2 : ((ALIGN >= 32) ? 16 : 2)))\n \n #define SET_BY_PIECES_P(SIZE, ALIGN) STORE_BY_PIECES_P(SIZE, ALIGN)\n \n@@ -2597,7 +2595,7 @@ extern int current_function_interrupt;\n #define ACCUMULATE_OUTGOING_ARGS TARGET_ACCUMULATE_OUTGOING_ARGS\n \n #define SH_DYNAMIC_SHIFT_COST \\\n-  (TARGET_HARD_SH4 ? 1 : TARGET_SH3 ? (TARGET_SMALLCODE ? 1 : 2) : 20)\n+  (TARGET_HARD_SH4 ? 1 : TARGET_SH3 ? (optimize_size ? 1 : 2) : 20)\n \n \n #define NUM_MODES_FOR_MODE_SWITCHING { FP_MODE_NONE }"}, {"sha": "e94f53a5cbd62ca16a0d16243a853856e116e2be", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -320,7 +320,7 @@ Target Mask(HITACHI) MaskExists\n Follow Renesas (formerly Hitachi) / SuperH calling conventions\n \n mspace\n-Target Report RejectNegative Mask(SMALLCODE)\n+Target RejectNegative Alias(Os)\n Deprecated.  Use -Os instead\n \n multcost="}, {"sha": "1898732308a9ec45fd3855d59792e85d4573b9ea", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -477,6 +477,13 @@ enum processor_type sparc_cpu;\n /* Whether\fan FPU option was specified.  */\n static bool fpu_option_set = false;\n \n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options sparc_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Initialize the GCC target structure.  */\n \n /* The default is to use .half rather than .short for aligned HI objects.  */\n@@ -612,6 +619,8 @@ static bool fpu_option_set = false;\n #define TARGET_HANDLE_OPTION sparc_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sparc_option_override\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE sparc_option_optimization_table\n \n #if TARGET_GNU_TLS && defined(HAVE_AS_SPARC_UA_PCREL)\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL"}, {"sha": "8919542e3150ef3159b86a2fb4ff9a24bb868e41", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -496,9 +496,6 @@ extern enum cmodel sparc_cmodel;\n /* ??? This should be 32 bits for v9 but what can we do?  */\n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n-\n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Mask of all CPU selection flags.  */\n #define MASK_ISA \\"}, {"sha": "7143c178f1cde51e19e726d54c0d9cec73537696", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 target functions.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n    This file is part of GCC.\n@@ -2623,6 +2623,13 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return (size == -1 || size > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS);\n }\n \f\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options xstorym16_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\f\n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\"\n #undef  TARGET_ASM_ALIGNED_SI_OP\n@@ -2671,6 +2678,9 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT xstormy16_trampoline_init\n \n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE xstorym16_option_optimization_table\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-stormy16.h\""}, {"sha": "24402133e203c6dbe0c999913d4e1bc7b63d5667", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -53,8 +53,6 @@\n   while (0)\n \n #define TARGET_VERSION fprintf (stderr, \" (xstormy16 cpu core)\");\n-\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Storage Layout.  */\n "}, {"sha": "560fe34a91f0c5ec2c0710f2eb2253df510e4f2e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -141,20 +141,20 @@ v850_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n \n-static void\n-v850_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n-{\n-  if (level)\n+static const struct default_options v850_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Note - we no longer enable MASK_EP when optimizing.  This is\n        because of a hardware bug which stops the SLD and SST instructions\n        from correctly detecting some hazards.  If the user is sure that\n        their hardware is fixed or that their program will not encounter\n        the conditions that trigger the bug then they can enable -mep by\n        hand.  */\n-    target_flags |= MASK_PROLOG_FUNCTION;\n-}\n+    { OPT_LEVELS_1_PLUS, OPT_mprolog_function, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \n /* Handle the TARGET_PASS_BY_REFERENCE target hook.\n    Specify whether to pass the argument by reference.  */\n@@ -3202,8 +3202,8 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef  TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING v850_strict_argument_naming\n \n-#undef  TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION v850_option_optimization\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE v850_option_optimization_table\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "9c5b802727e69a049c7c2064f3f1218772bbf582", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -137,9 +137,6 @@ enum small_memory_type {\n };\n \n extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n-\n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Target machine storage layout */\n "}, {"sha": "a01fb0b3019504b5ee3e1577de982eca6119fea6", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -119,7 +119,6 @@ const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =\n };\n \n static void xtensa_option_override (void);\n-static void xtensa_option_optimization (int, int);\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);\n static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n@@ -160,6 +159,20 @@ static void xtensa_trampoline_init (rtx, tree, rtx);\n \n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options xtensa_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Reordering blocks for Xtensa is not a good idea unless the\n+       compiler understands the range of conditional branches.\n+       Currently all branch relaxation for Xtensa is handled in the\n+       assembler, so GCC cannot do a good job of reordering blocks.\n+       Do not enable reordering unless it is explicitly requested.  */\n+    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n \f\n \n /* This macro generates the assembly code for function exit,\n@@ -255,8 +268,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE xtensa_option_override\n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION xtensa_option_optimization\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE xtensa_option_optimization_table\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2171,20 +2184,6 @@ xtensa_option_override (void)\n     }\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION.  */\n-\n-static void\n-xtensa_option_optimization (int level ATTRIBUTE_UNUSED,\n-\t\t\t    int size ATTRIBUTE_UNUSED)\n-{\n-  /* Reordering blocks for Xtensa is not a good idea unless the\n-     compiler understands the range of conditional branches.\n-     Currently all branch relaxation for Xtensa is handled in the\n-     assembler, so GCC cannot do a good job of reordering blocks.  Do\n-     not enable reordering unless it is explicitly requested.  */\n-  flag_reorder_blocks = 0;\n-}\n-\n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand X.  X is an RTL\n    expression."}, {"sha": "96173eebda3cdaa5af0df7b7e2fdadd73fc0e0b7", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -100,9 +100,6 @@ extern unsigned xtensa_current_frame_size;\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Show we can debug even without a frame pointer.  */\n-#define CAN_DEBUG_WITHOUT_FP\n-\n \n /* Target machine storage layout */\n "}, {"sha": "ca90d7d1c4a123ed5c282a655905438aa7ee94a7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -795,26 +795,19 @@ used to alter option flag variables which only exist in those\n frontends.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_OPTION_OPTIMIZATION (int @var{level}, int @var{size})\n+@deftypevr {Target Hook} {const struct default_options *} TARGET_OPTION_OPTIMIZATION_TABLE\n Some machines may desire to change what optimizations are performed for\n-various optimization levels.   This hook, if defined, is executed once\n+various optimization levels.   This variable, if defined, describes\n+options to enable at particular sets of optimization levels.  These\n+options are processed once\n just after the optimization level is determined and before the remainder\n-of the command options have been parsed.  Values set in this macro are\n-used as the default values for the other command line options.\n+of the command options have been parsed, so may be overridden by other\n+options passed explicily.\n \n-@var{level} is the optimization level specified; 2 if @option{-O2} is\n-specified, 1 if @option{-O} is specified, and 0 if neither is specified.\n-\n-@var{size} is nonzero if @option{-Os} is specified and zero otherwise.\n-\n-This macro is run once at program startup and when the optimization\n+This processing is run once at program startup and when the optimization\n options are changed via @code{#pragma GCC optimize} or by using the\n @code{optimize} attribute.\n-\n-@strong{Do not examine @code{write_symbols} in\n-this hook!}  The debugging options are not supposed to alter the\n-generated code.\n-@end deftypefn\n+@end deftypevr\n \n @deftypefn {Target Hook} void TARGET_OPTION_INIT_STRUCT (struct gcc_options *@var{opts})\n Set target-dependent initial values of fields in @var{opts}.\n@@ -831,12 +824,6 @@ chance to display extra information on the target specific command\n line options found in its @file{.opt} file.\n @end deftypefn\n \n-@defmac CAN_DEBUG_WITHOUT_FP\n-Define this macro if debugging can be performed even without a frame\n-pointer.  If this macro is defined, GCC will turn on the\n-@option{-fomit-frame-pointer} option whenever @option{-O} is specified.\n-@end defmac\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}, {"sha": "5bb1d9a4d5cda5f6d0ea34d153f0fc640d1b99fa", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -793,26 +793,19 @@ used to alter option flag variables which only exist in those\n frontends.\n @end defmac\n \n-@hook TARGET_OPTION_OPTIMIZATION\n+@hook TARGET_OPTION_OPTIMIZATION_TABLE\n Some machines may desire to change what optimizations are performed for\n-various optimization levels.   This hook, if defined, is executed once\n+various optimization levels.   This variable, if defined, describes\n+options to enable at particular sets of optimization levels.  These\n+options are processed once\n just after the optimization level is determined and before the remainder\n-of the command options have been parsed.  Values set in this macro are\n-used as the default values for the other command line options.\n+of the command options have been parsed, so may be overridden by other\n+options passed explicily.\n \n-@var{level} is the optimization level specified; 2 if @option{-O2} is\n-specified, 1 if @option{-O} is specified, and 0 if neither is specified.\n-\n-@var{size} is nonzero if @option{-Os} is specified and zero otherwise.\n-\n-This macro is run once at program startup and when the optimization\n+This processing is run once at program startup and when the optimization\n options are changed via @code{#pragma GCC optimize} or by using the\n @code{optimize} attribute.\n-\n-@strong{Do not examine @code{write_symbols} in\n-this hook!}  The debugging options are not supposed to alter the\n-generated code.\n-@end deftypefn\n+@end deftypevr\n \n @hook TARGET_OPTION_INIT_STRUCT\n \n@@ -825,12 +818,6 @@ chance to display extra information on the target specific command\n line options found in its @file{.opt} file.\n @end deftypefn\n \n-@defmac CAN_DEBUG_WITHOUT_FP\n-Define this macro if debugging can be performed even without a frame\n-pointer.  If this macro is defined, GCC will turn on the\n-@option{-fomit-frame-pointer} option whenever @option{-O} is specified.\n-@end defmac\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}, {"sha": "1a39b628a86f1de585a289050d6e70ffd9815034", "filename": "gcc/opts.c", "status": "modified", "additions": 215, "deletions": 127, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -717,24 +717,206 @@ decode_cmdline_options_to_array_default_mask (unsigned int argc,\n \t\t\t\t   decoded_options, decoded_options_count);\n }\n \n+/* If indicated by the optimization level LEVEL (-Os if SIZE is set,\n+   -Ofast if FAST is set), apply the option DEFAULT_OPT to OPTS and\n+   OPTS_SET, diagnostic context DC, with language mask LANG_MASK and\n+   option handlers HANDLERS.  */\n+\n+static void\n+maybe_default_option (struct gcc_options *opts,\n+\t\t      struct gcc_options *opts_set,\n+\t\t      const struct default_options *default_opt,\n+\t\t      int level, bool size, bool fast,\n+\t\t      unsigned int lang_mask,\n+\t\t      const struct cl_option_handlers *handlers,\n+\t\t      diagnostic_context *dc)\n+{\n+  const struct cl_option *option = &cl_options[default_opt->opt_index];\n+  bool enabled;\n+\n+  if (size)\n+    gcc_assert (level == 2);\n+  if (fast)\n+    gcc_assert (level == 3);\n+\n+  switch (default_opt->levels)\n+    {\n+    case OPT_LEVELS_ALL:\n+      enabled = true;\n+      break;\n+\n+    case OPT_LEVELS_0_ONLY:\n+      enabled = (level == 0);\n+      break;\n+\n+    case OPT_LEVELS_1_PLUS:\n+      enabled = (level >= 1);\n+      break;\n+\n+    case OPT_LEVELS_1_PLUS_SPEED_ONLY:\n+      enabled = (level >= 1 && !size);\n+      break;\n+\n+    case OPT_LEVELS_2_PLUS:\n+      enabled = (level >= 2);\n+      break;\n+\n+    case OPT_LEVELS_2_PLUS_SPEED_ONLY:\n+      enabled = (level >= 2 && !size);\n+      break;\n+\n+    case OPT_LEVELS_3_PLUS:\n+      enabled = (level >= 3);\n+      break;\n+\n+    case OPT_LEVELS_3_PLUS_AND_SIZE:\n+      enabled = (level >= 3 || size);\n+      break;\n+\n+    case OPT_LEVELS_SIZE:\n+      enabled = size;\n+      break;\n+\n+    case OPT_LEVELS_FAST:\n+      enabled = fast;\n+      break;\n+\n+    case OPT_LEVELS_NONE:\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (enabled)\n+    handle_generated_option (opts, opts_set, default_opt->opt_index,\n+\t\t\t     default_opt->arg, default_opt->value,\n+\t\t\t     lang_mask, DK_UNSPECIFIED, handlers, dc);\n+  else if (default_opt->arg == NULL\n+\t   && !(option->flags & CL_REJECT_NEGATIVE))\n+    handle_generated_option (opts, opts_set, default_opt->opt_index,\n+\t\t\t     default_opt->arg, !default_opt->value,\n+\t\t\t     lang_mask, DK_UNSPECIFIED, handlers, dc);\n+}\n+\n+/* As indicated by the optimization level LEVEL (-Os if SIZE is set,\n+   -Ofast if FAST is set), apply the options in array DEFAULT_OPTS to\n+   OPTS and OPTS_SET, diagnostic context DC, with language mask\n+   LANG_MASK and option handlers HANDLERS.  */\n+\n+static void\n+maybe_default_options (struct gcc_options *opts,\n+\t\t       struct gcc_options *opts_set,\n+\t\t       const struct default_options *default_opts,\n+\t\t       int level, bool size, bool fast,\n+\t\t       unsigned int lang_mask,\n+\t\t       const struct cl_option_handlers *handlers,\n+\t\t       diagnostic_context *dc)\n+{\n+  size_t i;\n+\n+  for (i = 0; default_opts[i].levels != OPT_LEVELS_NONE; i++)\n+    maybe_default_option (opts, opts_set, &default_opts[i],\n+\t\t\t  level, size, fast, lang_mask, handlers, dc);\n+}\n+\n+/* Table of options enabled by default at different levels.  */\n+\n+static const struct default_options default_options_table[] =\n+  {\n+    /* -O1 optimizations.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fdefer_pop, NULL, 1 },\n+#ifdef DELAY_SLOTS\n+    { OPT_LEVELS_1_PLUS, OPT_fdelayed_branch, NULL, 1 },\n+#endif\n+    { OPT_LEVELS_1_PLUS, OPT_fguess_branch_probability, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fcprop_registers, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fforward_propagate, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fif_conversion, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fif_conversion2, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fipa_pure_const, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fipa_reference, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fipa_profile, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fmerge_constants, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fsplit_wide_types, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_ccp, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_bit_ccp, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_dce, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_dominator_opts, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_dse, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_ter, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_sra, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_copyrename, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_fre, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_copy_prop, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_sink, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_ftree_ch, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fcombine_stack_adjustments, NULL, 1 },\n+\n+    /* -O2 optimizations.  */\n+    { OPT_LEVELS_2_PLUS, OPT_finline_small_functions, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fpartial_inlining, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fthread_jumps, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fcrossjumping, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_foptimize_sibling_calls, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fcse_follow_jumps, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_frerun_cse_after_loop, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fcaller_saves, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fpeephole2, NULL, 1 },\n+#ifdef INSN_SCHEDULING\n+  /* Only run the pre-regalloc scheduling pass if optimizing for speed.  */\n+    { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_fschedule_insns, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fschedule_insns2, NULL, 1 },\n+#endif\n+    { OPT_LEVELS_2_PLUS, OPT_fregmove, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fstrict_aliasing, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fstrict_overflow, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_freorder_blocks, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_freorder_functions, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ftree_vrp, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ftree_builtin_call_dce, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ftree_pre, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ftree_switch_conversion, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fipa_cp, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fipa_sra, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_falign_loops, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_falign_jumps, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_falign_labels, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_falign_functions, NULL, 1 },\n+\n+    /* -O3 optimizations.  */\n+    { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_fpredictive_commoning, NULL, 1 },\n+    /* Inlining of functions reducing size is a good idea with -Os\n+       regardless of them being declared inline.  */\n+    { OPT_LEVELS_3_PLUS_AND_SIZE, OPT_finline_functions, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_funswitch_loops, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_fgcse_after_reload, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_ftree_vectorize, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_fipa_cp_clone, NULL, 1 },\n+\n+    /* -Ofast adds optimizations to -O3.  */\n+    { OPT_LEVELS_FAST, OPT_ffast_math, NULL, 1 },\n+\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n /* Default the options in OPTS and OPTS_SET based on the optimization\n    settings in DECODED_OPTIONS and DECODED_OPTIONS_COUNT.  */\n static void\n default_options_optimization (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set,\n \t\t\t      struct cl_decoded_option *decoded_options,\n-\t\t\t      unsigned int decoded_options_count)\n+\t\t\t      unsigned int decoded_options_count,\n+\t\t\t      unsigned int lang_mask,\n+\t\t\t      const struct cl_option_handlers *handlers,\n+\t\t\t      diagnostic_context *dc)\n {\n   unsigned int i;\n-  int opt1;\n   int opt2;\n-  int opt3;\n-  int opt1_max;\n   int ofast = 0;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set = &global_options_set);\n-\n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n   for (i = 1; i < decoded_options_count; i++)\n@@ -745,8 +927,8 @@ default_options_optimization (struct gcc_options *opts,\n \tcase OPT_O:\n \t  if (*opt->arg == '\\0')\n \t    {\n-\t      optimize = 1;\n-\t      optimize_size = 0;\n+\t      opts->x_optimize = 1;\n+\t      opts->x_optimize_size = 0;\n \t      ofast = 0;\n \t    }\n \t  else\n@@ -757,27 +939,27 @@ default_options_optimization (struct gcc_options *opts,\n \t\t       \"-O\");\n \t      else\n \t\t{\n-\t\t  optimize = optimize_val;\n-\t\t  if ((unsigned int) optimize > 255)\n-\t\t    optimize = 255;\n-\t\t  optimize_size = 0;\n+\t\t  opts->x_optimize = optimize_val;\n+\t\t  if ((unsigned int) opts->x_optimize > 255)\n+\t\t    opts->x_optimize = 255;\n+\t\t  opts->x_optimize_size = 0;\n \t\t  ofast = 0;\n \t\t}\n \t    }\n \t  break;\n \n \tcase OPT_Os:\n-\t  optimize_size = 1;\n+\t  opts->x_optimize_size = 1;\n \n \t  /* Optimizing for size forces optimize to be 2.  */\n-\t  optimize = 2;\n+\t  opts->x_optimize = 2;\n \t  ofast = 0;\n \t  break;\n \n \tcase OPT_Ofast:\n \t  /* -Ofast only adds flags to -O3.  */\n-\t  optimize_size = 0;\n-\t  optimize = 3;\n+\t  opts->x_optimize_size = 0;\n+\t  opts->x_optimize = 3;\n \t  ofast = 1;\n \t  break;\n \n@@ -787,69 +969,12 @@ default_options_optimization (struct gcc_options *opts,\n \t}\n     }\n \n-  /* -O1 optimizations.  */\n-  opt1 = (optimize >= 1);\n-  flag_defer_pop = opt1;\n-#ifdef DELAY_SLOTS\n-  flag_delayed_branch = opt1;\n-#endif\n-#ifdef CAN_DEBUG_WITHOUT_FP\n-  flag_omit_frame_pointer = opt1;\n-#endif\n-  flag_guess_branch_prob = opt1;\n-  flag_cprop_registers = opt1;\n-  flag_forward_propagate = opt1;\n-  flag_if_conversion = opt1;\n-  flag_if_conversion2 = opt1;\n-  flag_ipa_pure_const = opt1;\n-  flag_ipa_reference = opt1;\n-  flag_ipa_profile = opt1;\n-  flag_merge_constants = opt1;\n-  flag_split_wide_types = opt1;\n-  flag_tree_ccp = opt1;\n-  flag_tree_bit_ccp = opt1;\n-  flag_tree_dce = opt1;\n-  flag_tree_dom = opt1;\n-  flag_tree_dse = opt1;\n-  flag_tree_ter = opt1;\n-  flag_tree_sra = opt1;\n-  flag_tree_copyrename = opt1;\n-  flag_tree_fre = opt1;\n-  flag_tree_copy_prop = opt1;\n-  flag_tree_sink = opt1;\n-  flag_tree_ch = opt1;\n-  flag_combine_stack_adjustments = opt1;\n-\n-  /* -O2 optimizations.  */\n-  opt2 = (optimize >= 2);\n-  flag_inline_small_functions = opt2;\n-  flag_indirect_inlining = opt2;\n-  flag_partial_inlining = opt2;\n-  flag_thread_jumps = opt2;\n-  flag_crossjumping = opt2;\n-  flag_optimize_sibling_calls = opt2;\n-  flag_cse_follow_jumps = opt2;\n-  flag_gcse = opt2;\n-  flag_expensive_optimizations = opt2;\n-  flag_rerun_cse_after_loop = opt2;\n-  flag_caller_saves = opt2;\n-  flag_peephole2 = opt2;\n-#ifdef INSN_SCHEDULING\n-  /* Only run the pre-regalloc scheduling pass if optimizing for speed.  */\n-  flag_schedule_insns = opt2 && ! optimize_size;\n-  flag_schedule_insns_after_reload = opt2;\n-#endif\n-  flag_regmove = opt2;\n-  flag_strict_aliasing = opt2;\n-  flag_strict_overflow = opt2;\n-  flag_reorder_blocks = opt2;\n-  flag_reorder_functions = opt2;\n-  flag_tree_vrp = opt2;\n-  flag_tree_builtin_call_dce = opt2;\n-  flag_tree_pre = opt2;\n-  flag_tree_switch_conversion = opt2;\n-  flag_ipa_cp = opt2;\n-  flag_ipa_sra = opt2;\n+  maybe_default_options (opts, opts_set, default_options_table,\n+\t\t\t opts->x_optimize, opts->x_optimize_size,\n+\t\t\t ofast, lang_mask, handlers, dc);\n+\n+  /* -O2 param settings.  */\n+  opt2 = (opts->x_optimize >= 2);\n \n   /* Track fields in field-sensitive alias analysis.  */\n   maybe_set_param_value\n@@ -863,58 +988,20 @@ default_options_optimization (struct gcc_options *opts,\n      opt2 ? default_param_value (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP) : 1000,\n      opts->x_param_values, opts_set->x_param_values);\n \n-  /* -O3 optimizations.  */\n-  opt3 = (optimize >= 3);\n-  flag_tree_loop_distribute_patterns = opt3;\n-  flag_predictive_commoning = opt3;\n-  flag_inline_functions = opt3;\n-  flag_unswitch_loops = opt3;\n-  flag_gcse_after_reload = opt3;\n-  flag_tree_vectorize = opt3;\n-  flag_ipa_cp_clone = opt3;\n-  if (flag_ipa_cp_clone)\n-    flag_ipa_cp = 1;\n-\n-  /* Just -O1/-O0 optimizations.  */\n-  opt1_max = (optimize <= 1);\n-  align_loops = opt1_max;\n-  align_jumps = opt1_max;\n-  align_labels = opt1_max;\n-  align_functions = opt1_max;\n-\n-  if (optimize_size)\n-    {\n-      /* Inlining of functions reducing size is a good idea regardless of them\n-\t being declared inline.  */\n-      flag_inline_functions = 1;\n-\n-      /* Basic optimization options.  */\n-      optimize_size = 1;\n-      if (optimize > 2)\n-\toptimize = 2;\n-\n-      /* We want to crossjump as much as possible.  */\n-      maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1,\n-\t\t\t     opts->x_param_values, opts_set->x_param_values);\n-    }\n+  if (opts->x_optimize_size)\n+    /* We want to crossjump as much as possible.  */\n+    maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1,\n+\t\t\t   opts->x_param_values, opts_set->x_param_values);\n   else\n     maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS,\n \t\t\t   default_param_value (PARAM_MIN_CROSSJUMP_INSNS),\n \t\t\t   opts->x_param_values, opts_set->x_param_values);\n \n-  /* -Ofast adds optimizations to -O3.  */\n-  if (ofast)\n-    {\n-      /* Which is -ffast-math for now.  */\n-      set_fast_math_flags (1);\n-      /* Allow targets to enable extra options with -Ofast\n-\t before general options processing so disabling them\n-\t again afterwards works.  */\n-      targetm.handle_ofast ();\n-    }\n-\n   /* Allow default optimizations to be specified on a per-machine basis.  */\n-  targetm.target_option.optimization (optimize, optimize_size);\n+  maybe_default_options (opts, opts_set,\n+\t\t\t targetm.target_option.optimization_table,\n+\t\t\t opts->x_optimize, opts->x_optimize_size,\n+\t\t\t ofast, lang_mask, handlers, dc);\n }\n \n static void finish_options (struct gcc_options *, struct gcc_options *);\n@@ -949,7 +1036,8 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t\t   global_dc);\n \n   default_options_optimization (opts, opts_set,\n-\t\t\t\tdecoded_options, decoded_options_count);\n+\t\t\t\tdecoded_options, decoded_options_count,\n+\t\t\t\tlang_mask, &handlers, global_dc);\n \n #ifdef ENABLE_LTO\n   /* Clear any options currently held for LTO.  */"}, {"sha": "f67639c7721dc2584fb9b9a4a857468cbf9a947d", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -719,7 +719,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tOPTIMIZATION_OPTIONS CLASS_LIKELY_SPILLED_P\t\t\t\\\n \tUSING_SJLJ_EXCEPTIONS TARGET_UNWIND_INFO\t\t\t\\\n \tLABEL_ALIGN_MAX_SKIP LOOP_ALIGN_MAX_SKIP\t\t\t\\\n-\tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP\n+\tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP \\\n+\tCAN_DEBUG_WITHOUT_FP\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have\n@@ -784,7 +785,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLANG_HOOKS_MAYBE_BUILD_CLEANUP LANG_HOOKS_UPDATE_DECL_AFTER_SAVING \\\n \tLANG_HOOKS_POPLEVEL LANG_HOOKS_TRUTHVALUE_CONVERSION \\\n \tTARGET_PROMOTE_FUNCTION_ARGS TARGET_PROMOTE_FUNCTION_RETURN \\\n-\tLANG_HOOKS_MISSING_ARGUMENT LANG_HOOKS_HASH_TYPES\n+\tLANG_HOOKS_MISSING_ARGUMENT LANG_HOOKS_HASH_TYPES \\\n+\tTARGET_HANDLE_OFAST TARGET_OPTION_OPTIMIZATION\n \n /* Hooks into libgcc2.  */\n  #pragma GCC poison LIBGCC2_DOUBLE_TYPE_SIZE"}, {"sha": "cc69c9193d4f38f57fc9fee1cabbf2583d03b16b", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -961,13 +961,6 @@ DEFHOOK\n  bool, (size_t code, const char *arg, int value),\n  hook_bool_size_t_constcharptr_int_true)\n \n-/* ??? Documenting this hook requires a GFDL license grant.  */\n-DEFHOOK_UNDOC\n-(handle_ofast,\n- \"Handle target-specific parts of specifying -Ofast.\",\n- void, (void),\n- hook_void_void)\n-\n /* Display extra, target specific information in response to a\n    --target-help switch.  */\n DEFHOOK\n@@ -2384,11 +2377,10 @@ DEFHOOK\n  hook_void_void)\n \n /* Set default optimizations for the target.  */\n-DEFHOOK\n-(optimization,\n+DEFHOOKPOD\n+(optimization_table,\n  \"\",\n- void, (int level, int size),\n- hook_void_int_int)\n+ const struct default_options *, empty_optimization_table)\n \n DEFHOOK\n (default_params,"}, {"sha": "f93699ffb1b5994425f5453277b142d8c66f3618", "filename": "gcc/target.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -128,6 +128,41 @@ enum vect_cost_for_stmt\n   vec_perm\n };\n \n+/* Sets of optimization levels at which an option may be enabled by\n+   default_options_optimization.  */\n+enum opt_levels\n+{\n+  OPT_LEVELS_NONE, /* No levels (mark end of array).  */\n+  OPT_LEVELS_ALL, /* All levels (used by targets to disable options\n+\t\t     enabled in target-independent code).  */\n+  OPT_LEVELS_0_ONLY, /* -O0 only.  */\n+  OPT_LEVELS_1_PLUS, /* -O1 and above, including -Os.  */\n+  OPT_LEVELS_1_PLUS_SPEED_ONLY, /* -O1 and above, but not -Os.  */\n+  OPT_LEVELS_2_PLUS, /* -O2 and above, including -Os.  */\n+  OPT_LEVELS_2_PLUS_SPEED_ONLY, /* -O2 and above, but not -Os.  */\n+  OPT_LEVELS_3_PLUS, /* -O3 and above.  */\n+  OPT_LEVELS_3_PLUS_AND_SIZE, /* -O3 and above and -Os.  */\n+  OPT_LEVELS_SIZE, /* -Os only.  */\n+  OPT_LEVELS_FAST /* -Ofast only.  */\n+};\n+\n+/* Description of options to enable by default at given levels.  */\n+struct default_options\n+{\n+  /* The levels at which to enable the option.  */\n+  enum opt_levels levels;\n+\n+  /* The option index and argument or enabled/disabled sense of the\n+     option, as passed to handle_generated_option.  If ARG is NULL and\n+     the option allows a negative form, the option is considered to be\n+     passed in negative form when the optimization level is not one of\n+     those in LEVELS (in order to handle changes to the optimization\n+     level with the \"optimize\" attribute).  */\n+  size_t opt_index;\n+  const char *arg;\n+  int value;\n+};\n+\n /* The target structure.  This holds all the backend hooks.  */\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;"}, {"sha": "b6aefdbe58fb8b1c7b2314af3f91e8f6d5b2e947", "filename": "gcc/targhooks.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1333,4 +1333,9 @@ sjlj_except_unwind_info (void)\n   return UI_SJLJ;\n }\n \n+const struct default_options empty_optimization_table[] =\n+  {\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n #include \"gt-targhooks.h\""}, {"sha": "e89ac8ec432287fa1f2c199a3ed8d8ea7745df10", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -167,3 +167,5 @@ extern int default_label_align_after_barrier_max_skip (rtx);\n extern int default_loop_align_max_skip (rtx);\n extern int default_label_align_max_skip (rtx);\n extern int default_jump_align_max_skip (rtx);\n+\n+extern const struct default_options empty_optimization_table[];"}, {"sha": "596fb89832e3ee53aa8685394ad6acae255b8cbd", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3020190e3e5014c78439d3f96abe1819b95f8fdd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3020190e3e5014c78439d3f96abe1819b95f8fdd", "patch": "@@ -1822,11 +1822,7 @@ process_options (void)\n   if (flag_unroll_all_loops)\n     flag_unroll_loops = 1;\n \n-  /* The loop unrolling code assumes that cse will be run after loop.\n-     web and rename-registers also help when run after loop unrolling.  */\n-  if (flag_rerun_cse_after_loop == AUTODETECT_VALUE)\n-    flag_rerun_cse_after_loop = flag_unroll_loops || flag_peel_loops;\n-\n+  /* web and rename-registers help when run after loop unrolling.  */\n   if (flag_web == AUTODETECT_VALUE)\n     flag_web = flag_unroll_loops || flag_peel_loops;\n "}]}