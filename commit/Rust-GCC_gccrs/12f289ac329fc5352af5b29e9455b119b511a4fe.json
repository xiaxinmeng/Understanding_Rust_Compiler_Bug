{"sha": "12f289ac329fc5352af5b29e9455b119b511a4fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmMjg5YWMzMjlmYzUzNTJhZjViMjllOTQ1NWIxMTliNTExYTRmZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-10-08T12:52:52Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-10-08T12:52:52Z"}, "message": "Fix for powerpc/c4x problem with missed loop optimizations.\n\n\t* loop.c (get_condition): Allow combine when either compare is\n\tVOIDmode.\n\nFrom-SVN: r22922", "tree": {"sha": "f6f01b92297685e3cc1ad90741078d39edbdaacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f01b92297685e3cc1ad90741078d39edbdaacd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f289ac329fc5352af5b29e9455b119b511a4fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f289ac329fc5352af5b29e9455b119b511a4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f289ac329fc5352af5b29e9455b119b511a4fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f289ac329fc5352af5b29e9455b119b511a4fe/comments", "author": null, "committer": null, "parents": [{"sha": "1636b950f9efe5813f05777ea5a3b18046b0c618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1636b950f9efe5813f05777ea5a3b18046b0c618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1636b950f9efe5813f05777ea5a3b18046b0c618"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "73e72b1bb820fa3cc39bc73e000af6e95f93b62b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f289ac329fc5352af5b29e9455b119b511a4fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f289ac329fc5352af5b29e9455b119b511a4fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12f289ac329fc5352af5b29e9455b119b511a4fe", "patch": "@@ -1,3 +1,8 @@\n+Thu Oct  8 12:50:47 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* loop.c (get_condition): Allow combine when either compare is\n+\tVOIDmode.\n+\n Thu Oct 8 11:31:01 PDT 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "dc4eaa9466dd057a2472420eb0b5ef011c20722e", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f289ac329fc5352af5b29e9455b119b511a4fe/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f289ac329fc5352af5b29e9455b119b511a4fe/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=12f289ac329fc5352af5b29e9455b119b511a4fe", "patch": "@@ -7765,7 +7765,14 @@ get_condition (jump, earliest)\n \t     like Alpha that have an IEEE compliant EQ instruction, and\n \t     a non-IEEE compliant BEQ instruction.  The use of CCmode is\n \t     actually artificial, simply to prevent the combination, but\n-\t     should not affect other platforms.  */\n+\t     should not affect other platforms.\n+\n+\t     However, we must allow VOIDmode comparisons to match either\n+\t     CCmode or non-CCmode comparison, because some ports have\n+\t     modeless comparisons inside branch patterns.\n+\n+\t     ??? This mode check should perhaps look more like the mode check\n+\t     in simplify_comparison in combine.  */\n \n \t  if ((GET_CODE (SET_SRC (set)) == COMPARE\n \t       || (((code == NE\n@@ -7783,8 +7790,9 @@ get_condition (jump, earliest)\n #endif\n \t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<'))\n-\t      && ((GET_MODE_CLASS (mode) == MODE_CC)\n-\t\t  == (GET_MODE_CLASS (inner_mode) == MODE_CC)))\n+\t      && (((GET_MODE_CLASS (mode) == MODE_CC)\n+\t\t   == (GET_MODE_CLASS (inner_mode) == MODE_CC))\n+\t\t  || mode == VOIDmode || inner_mode == VOIDmode))\n \t    x = SET_SRC (set);\n \t  else if (((code == EQ\n \t\t     || (code == GE\n@@ -7801,8 +7809,10 @@ get_condition (jump, earliest)\n #endif\n \t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<'\n-\t           && ((GET_MODE_CLASS (mode) == MODE_CC)\n-\t\t       == (GET_MODE_CLASS (inner_mode) == MODE_CC)))\n+\t           && (((GET_MODE_CLASS (mode) == MODE_CC)\n+\t\t\t== (GET_MODE_CLASS (inner_mode) == MODE_CC))\n+\t\t       || mode == VOIDmode || inner_mode == VOIDmode))\n+\n \t    {\n \t      /* We might have reversed a LT to get a GE here.  But this wasn't\n \t\t actually the comparison of data, so we don't flag that we"}]}