{"sha": "954224d7318d36379c7c997d51cc72ce1e62a7e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0MjI0ZDczMThkMzYzNzljN2M5OTdkNTFjYzcyY2UxZTYyYTdlNw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-05-16T12:52:22Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-05-16T12:52:22Z"}, "message": "Some patterns are using '%w2' for immediate operands...\n\nSome patterns are using '%w2' for immediate operands, which means that a zero\nimmediate is actually emitted as 'wzr' or 'xzr'.  This not only changes an\nimmediate operand into a register operand but may emit illegal instructions\nfrom legal RTL (eg. ORR x0, SP, xzr rather than ORR x0, SP, 0).\n\n\t* config/aarch64/aarch64.md\n\t(add<mode>3_compareC_cconly_imm): Remove use of %w.\n\t(add<mode>3_compareC_imm): Likewise.\n\t(<optab>si3_uxtw): Split into register and immediate variants.\n\t(andsi3_compare0_uxtw): Likewise.\n\t(and<mode>3_compare0): Likewise.\n\t(and<mode>3nr_compare0): Likewise.\n\t(stack_protect_test_<mode>): Don't use %x for memory operands.\n\nFrom-SVN: r236285", "tree": {"sha": "fdeba8af3678fe80c94540dd5ebc68408e453993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdeba8af3678fe80c94540dd5ebc68408e453993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954224d7318d36379c7c997d51cc72ce1e62a7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954224d7318d36379c7c997d51cc72ce1e62a7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954224d7318d36379c7c997d51cc72ce1e62a7e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954224d7318d36379c7c997d51cc72ce1e62a7e7/comments", "author": null, "committer": null, "parents": [{"sha": "e6e89f0d17162bbefd16000f65110d49a4541d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e89f0d17162bbefd16000f65110d49a4541d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e89f0d17162bbefd16000f65110d49a4541d41"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "ec7cf67a5222297e0c86af3f85a4c1d317a627d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954224d7318d36379c7c997d51cc72ce1e62a7e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954224d7318d36379c7c997d51cc72ce1e62a7e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=954224d7318d36379c7c997d51cc72ce1e62a7e7", "patch": "@@ -1,3 +1,14 @@\n+2016-05-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(add<mode>3_compareC_cconly_imm): Remove use of %w.\n+\t(add<mode>3_compareC_imm): Likewise.\n+\t(<optab>si3_uxtw): Split into register and immediate variants.\n+\t(andsi3_compare0_uxtw): Likewise.\n+\t(and<mode>3_compare0): Likewise.\n+\t(and<mode>3nr_compare0): Likewise.\n+\t(stack_protect_test_<mode>): Don't use %x for memory operands.\n+\n 2016-05-16  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config/mips/mips-cpus.def (p5600): Add multi-line brackets."}, {"sha": "223a4cc6d31236865b79770b85fb48cb60383328", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954224d7318d36379c7c997d51cc72ce1e62a7e7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954224d7318d36379c7c997d51cc72ce1e62a7e7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=954224d7318d36379c7c997d51cc72ce1e62a7e7", "patch": "@@ -1786,7 +1786,7 @@\n   \"aarch64_zero_extend_const_eq (<DWI>mode, operands[2],\n \t\t\t\t <MODE>mode, operands[1])\"\n   \"@\n-  cmn\\\\t%<w>0, %<w>1\n+  cmn\\\\t%<w>0, %1\n   cmp\\\\t%<w>0, #%n1\"\n   [(set_attr \"type\" \"alus_imm\")]\n )\n@@ -1818,11 +1818,11 @@\n   \"aarch64_zero_extend_const_eq (<DWI>mode, operands[3],\n                                  <MODE>mode, operands[2])\"\n   \"@\n-  adds\\\\t%<w>0, %<w>1, %<w>2\n+  adds\\\\t%<w>0, %<w>1, %2\n   subs\\\\t%<w>0, %<w>1, #%n2\"\n   [(set_attr \"type\" \"alus_imm\")]\n )\n- \n+\n (define_insn \"add<mode>3_compareC\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(ne:CC_C\n@@ -3425,7 +3425,9 @@\n          (LOGICAL:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n \t\t     (match_operand:SI 2 \"aarch64_logical_operand\" \"r,K\"))))]\n   \"\"\n-  \"<logical>\\\\t%w0, %w1, %w2\"\n+  \"@\n+   <logical>\\\\t%w0, %w1, %w2\n+   <logical>\\\\t%w0, %w1, %2\"\n   [(set_attr \"type\" \"logic_reg,logic_imm\")]\n )\n \n@@ -3438,7 +3440,9 @@\n    (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n \t(and:GPI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ands\\\\t%<w>0, %<w>1, %<w>2\"\n+  \"@\n+   ands\\\\t%<w>0, %<w>1, %<w>2\n+   ands\\\\t%<w>0, %<w>1, %2\"\n   [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n@@ -3452,7 +3456,9 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (and:SI (match_dup 1) (match_dup 2))))]\n   \"\"\n-  \"ands\\\\t%w0, %w1, %w2\"\n+  \"@\n+   ands\\\\t%w0, %w1, %w2\n+   ands\\\\t%w0, %w1, %2\"\n   [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n@@ -3806,7 +3812,9 @@\n \t\t  (match_operand:GPI 1 \"aarch64_logical_operand\" \"r,<lconst>\"))\n \t (const_int 0)))]\n   \"\"\n-  \"tst\\\\t%<w>0, %<w>1\"\n+  \"@\n+   tst\\\\t%<w>0, %<w>1\n+   tst\\\\t%<w>0, %1\"\n   [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n@@ -5201,7 +5209,7 @@\n \t UNSPEC_SP_TEST))\n    (clobber (match_scratch:PTR 3 \"=&r\"))]\n   \"\"\n-  \"ldr\\t%<w>3, %x1\\;ldr\\t%<w>0, %x2\\;eor\\t%<w>0, %<w>3, %<w>0\"\n+  \"ldr\\t%<w>3, %1\\;ldr\\t%<w>0, %2\\;eor\\t%<w>0, %<w>3, %<w>0\"\n   [(set_attr \"length\" \"12\")\n    (set_attr \"type\" \"multiple\")])\n "}]}