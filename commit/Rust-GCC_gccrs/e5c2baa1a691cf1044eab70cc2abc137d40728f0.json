{"sha": "e5c2baa1a691cf1044eab70cc2abc137d40728f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjMmJhYTFhNjkxY2YxMDQ0ZWFiNzBjYzJhYmMxMzdkNDA3MjhmMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-30T01:13:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-30T01:13:02Z"}, "message": "(singlemove_string): Handle SFmode CONST_DOUBLE as a source operand.\n\nFrom-SVN: r4595", "tree": {"sha": "405e938b6561cc221f1bcbe2d61e785b9f8dd02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/405e938b6561cc221f1bcbe2d61e785b9f8dd02b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5c2baa1a691cf1044eab70cc2abc137d40728f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c2baa1a691cf1044eab70cc2abc137d40728f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c2baa1a691cf1044eab70cc2abc137d40728f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c2baa1a691cf1044eab70cc2abc137d40728f0/comments", "author": null, "committer": null, "parents": [{"sha": "ae98fe096541c1e0c7fcf776d267dcbb3f6844b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae98fe096541c1e0c7fcf776d267dcbb3f6844b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae98fe096541c1e0c7fcf776d267dcbb3f6844b6"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "11c79d451778c43f0ac9a62db7bcbf960f1db307", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c2baa1a691cf1044eab70cc2abc137d40728f0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c2baa1a691cf1044eab70cc2abc137d40728f0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e5c2baa1a691cf1044eab70cc2abc137d40728f0", "patch": "@@ -891,21 +891,46 @@ read_only_operand (operand)\n      \n \f\n /* Return the best assembler insn template\n-   for moving operands[1] into operands[0] as a fullword.  */\n+   for moving operands[1] into operands[0] as a fullword. \n+\n+   For CONST_DOUBLE and CONST_INT we should also check for\n+   other values we can load directly via zdepi, ldil, etc. \n+   ??? Do this for 2.5.  */\n \n char *\n singlemove_string (operands)\n      rtx *operands;\n {\n   if (GET_CODE (operands[0]) == MEM)\n     return \"stw %r1,%0\";\n-  if (GET_CODE (operands[1]) == MEM)\n+  else if (GET_CODE (operands[1]) == MEM)\n     return \"ldw %1,%0\";\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    if (INT_14_BITS (operands[1]))\n-      return (INTVAL (operands[1]) == 0 ? \"copy 0,%0\" : \"ldi %1,%0\");\n-    else\n-      return \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n+  else if (GET_CODE (operands[1]) == CONST_DOUBLE\n+\t   && GET_MODE (operands[1]) == SFmode)\n+    {\n+      int i;\n+      union real_extract u;\n+      union float_extract { float f; int i; } v;\n+\n+      bcopy (&CONST_DOUBLE_LOW (operands[1]), &u, sizeof u);\n+      v.f = REAL_VALUE_TRUNCATE (SFmode, u.d);\n+      i = v.i;\n+\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode, i);\n+\n+      if (INT_14_BITS (operands[1]))\n+\treturn (INTVAL (operands[1]) == 0 ? \"copy 0,%0\" : \"ldi %1,%0\");\n+      else\n+\treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n+    }\n+\n+  else if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      if (INT_14_BITS (operands[1]))\n+\treturn (INTVAL (operands[1]) == 0 ? \"copy 0,%0\" : \"ldi %1,%0\");\n+      else\n+\treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n+    }\n   return \"copy %1,%0\";\n }\n \f"}]}