{"sha": "f26a415e758433b7054154f8b4e960a2e4235065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2YTQxNWU3NTg0MzNiNzA1NDE1NGY4YjRlOTYwYTJlNDIzNTA2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-11-17T21:49:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-11-17T21:49:18Z"}, "message": "LITERAL_ZERO_P obsoleted by delayed folding.\n\n\t* cp-tree.h (LITERAL_ZERO_P): Remove.\n\t* parser.c (cp_parser_postfix_expression, literal_zeros)\n\t(cp_parser_parenthesized_expression_list): Don't mess with it.\n\nFrom-SVN: r230507", "tree": {"sha": "80b75f56ad2c3c76b8419fe4453b7b7657d8271c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b75f56ad2c3c76b8419fe4453b7b7657d8271c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f26a415e758433b7054154f8b4e960a2e4235065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26a415e758433b7054154f8b4e960a2e4235065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26a415e758433b7054154f8b4e960a2e4235065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26a415e758433b7054154f8b4e960a2e4235065/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2bebddd224cddee49a9e436aac395a1f7716f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2bebddd224cddee49a9e436aac395a1f7716f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2bebddd224cddee49a9e436aac395a1f7716f5"}], "stats": {"total": 86, "additions": 13, "deletions": 73}, "files": [{"sha": "b46362dfe7d6269cc5a6175a17113acbeac53c03", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f26a415e758433b7054154f8b4e960a2e4235065", "patch": "@@ -1,5 +1,9 @@\n 2015-11-17  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (LITERAL_ZERO_P): Remove.\n+\t* parser.c (cp_parser_postfix_expression, literal_zeros)\n+\t(cp_parser_parenthesized_expression_list): Don't mess with it.\n+\n \t* parser.c (cp_parser_unary_expression): Fold -constant here.\n \t* typeck.c (cp_build_unary_op): Not here.\n "}, {"sha": "160bf1e0584326a1f58e7e7a8eb70a74c2d0af2f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f26a415e758433b7054154f8b4e960a2e4235065", "patch": "@@ -4517,10 +4517,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define SIZEOF_EXPR_TYPE_P(NODE) \\\n   TREE_LANG_FLAG_0 (SIZEOF_EXPR_CHECK (NODE))\n \n-/* True if INTEGER_CST is a zero literal seen in function argument list.  */\n-#define LITERAL_ZERO_P(NODE) \\\n-  (INTEGER_CST_CHECK (NODE)->base.nothrow_flag)\n-\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types {\n   none_type = 0, /* Not a tag type.  */"}, {"sha": "0e1116bbf9c3d5eaa3c4e4ecbab9befb6b9f9418", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 69, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26a415e758433b7054154f8b4e960a2e4235065/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f26a415e758433b7054154f8b4e960a2e4235065", "patch": "@@ -1976,7 +1976,7 @@ static tree cp_parser_postfix_open_square_expression\n static tree cp_parser_postfix_dot_deref_expression\n   (cp_parser *, enum cpp_ttype, tree, bool, cp_id_kind *, location_t);\n static vec<tree, va_gc> *cp_parser_parenthesized_expression_list\n-  (cp_parser *, int, bool, bool, bool *, bool = false);\n+  (cp_parser *, int, bool, bool, bool *);\n /* Values for the second parameter of cp_parser_parenthesized_expression_list.  */\n enum { non_attr = 0, normal_attr = 1, id_attr = 2 };\n static void cp_parser_pseudo_destructor_name\n@@ -6502,8 +6502,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    args = (cp_parser_parenthesized_expression_list\n \t\t    (parser, non_attr,\n \t\t     /*cast_p=*/false, /*allow_expansion_p=*/true,\n-\t\t     /*non_constant_p=*/NULL,\n-\t\t     /*want_literal_zero_p=*/warn_memset_transposed_args));\n+\t\t     /*non_constant_p=*/NULL));\n \t    if (is_builtin_constant_p)\n \t      {\n \t\tparser->integral_constant_expression_p\n@@ -6577,22 +6576,14 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t    && DECL_BUILT_IN_CLASS (postfix_expression) == BUILT_IN_NORMAL\n \t\t    && DECL_FUNCTION_CODE (postfix_expression) == BUILT_IN_MEMSET\n \t\t    && vec_safe_length (args) == 3\n+\t\t    && TREE_CODE ((*args)[2]) == INTEGER_CST\n \t\t    && integer_zerop ((*args)[2])\n-\t\t    && LITERAL_ZERO_P ((*args)[2])\n-\t\t    && !(integer_zerop ((*args)[1])\n-\t\t\t && LITERAL_ZERO_P ((*args)[1])))\n+\t\t    && !(TREE_CODE ((*args)[1]) == INTEGER_CST\n+\t\t\t && integer_zerop ((*args)[1])))\n \t\t  warning (OPT_Wmemset_transposed_args,\n \t\t\t   \"%<memset%> used with constant zero length \"\n \t\t\t   \"parameter; this could be due to transposed \"\n \t\t\t   \"parameters\");\n-\n-\t\t/* Replace LITERAL_ZERO_P INTEGER_CSTs with normal ones\n-\t\t   to avoid leaking those into folder and middle-end.  */\n-\t\tunsigned int i;\n-\t\ttree arg;\n-\t\tFOR_EACH_VEC_SAFE_ELT (args, i, arg)\n-\t\t  if (TREE_CODE (arg) == INTEGER_CST && LITERAL_ZERO_P (arg))\n-\t\t    (*args)[i] = build_int_cst (TREE_TYPE (arg), 0);\n \t      }\n \n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)\n@@ -7085,10 +7076,6 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n   return postfix_expression;\n }\n \n-/* Cache of LITERAL_ZERO_P constants.  */\n-\n-static GTY(()) tree literal_zeros[itk_none];\n-\n /* Parse a parenthesized expression-list.\n \n    expression-list:\n@@ -7113,18 +7100,14 @@ static GTY(()) tree literal_zeros[itk_none];\n    plain identifier argument, normal_attr for an attribute that wants\n    an expression, or non_attr if we aren't parsing an attribute list.  If\n    NON_CONSTANT_P is non-NULL, *NON_CONSTANT_P indicates whether or\n-   not all of the expressions in the list were constant.\n-   WANT_LITERAL_ZERO_P is true if the caller is interested in\n-   LITERAL_ZERO_P INTEGER_CSTs.  FIXME: once we don't fold everything\n-   immediately, this can be removed.  */\n+   not all of the expressions in the list were constant.  */\n \n static vec<tree, va_gc> *\n cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t\t\t\t\t int is_attribute_list,\n \t\t\t\t\t bool cast_p,\n                                          bool allow_expansion_p,\n-\t\t\t\t\t bool *non_constant_p,\n-\t\t\t\t\t bool want_literal_zero_p)\n+\t\t\t\t\t bool *non_constant_p)\n {\n   vec<tree, va_gc> *expression_list;\n   bool fold_expr_p = is_attribute_list != non_attr;\n@@ -7187,51 +7170,8 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t\t  *non_constant_p = true;\n \t      }\n \t    else\n-\t      {\n-\t\texpr = NULL_TREE;\n-\t\tcp_token *tok = cp_lexer_peek_token (parser->lexer);\n-\t\tswitch (tok->type)\n-\t\t  {\n-\t\t  case CPP_NUMBER:\n-\t\t  case CPP_CHAR:\n-\t\t  case CPP_WCHAR:\n-\t\t  case CPP_CHAR16:\n-\t\t  case CPP_CHAR32:\n-\t\t  case CPP_UTF8CHAR:\n-\t\t    /* If a parameter is literal zero alone, remember it\n-\t\t       for -Wmemset-transposed-args warning.  */\n-\t\t    if (integer_zerop (tok->u.value)\n-\t\t\t&& !TREE_OVERFLOW (tok->u.value)\n-\t\t\t&& want_literal_zero_p\n-\t\t\t&& (cp_lexer_peek_nth_token (parser->lexer, 2)->type\n-\t\t\t    == CPP_COMMA\n-\t\t\t    || cp_lexer_peek_nth_token (parser->lexer, 2)->type\n-\t\t\t       == CPP_CLOSE_PAREN))\n-\t\t      {\n-\t\t\tunsigned int i;\n-\t\t\tfor (i = 0; i < itk_none; ++i)\n-\t\t\t  if (TREE_TYPE (tok->u.value) == integer_types[i])\n-\t\t\t    break;\n-\t\t\tif (i < itk_none && literal_zeros[i])\n-\t\t\t  expr = literal_zeros[i];\n-\t\t\telse\n-\t\t\t  {\n-\t\t\t    expr = copy_node (tok->u.value);\n-\t\t\t    LITERAL_ZERO_P (expr) = 1;\n-\t\t\t    if (i < itk_none)\n-\t\t\t      literal_zeros[i] = expr;\n-\t\t\t  }\n-\t\t\t/* Consume the 0 token (or '\\0', 0LL etc.).  */\n-\t\t\tcp_lexer_consume_token (parser->lexer);\n-\t\t      }\n-\t\t    break;\n-\t\t  default:\n-\t\t    break;\n-\t\t  }\n-\t\tif (expr == NULL_TREE)\n-\t\t  expr = cp_parser_assignment_expression (parser, /*pidk=*/NULL,\n-\t\t\t\t\t\t\t  cast_p);\n-\t      }\n+\t      expr = cp_parser_assignment_expression (parser, /*pidk=*/NULL,\n+\t\t\t\t\t\t      cast_p);\n \n \t    if (fold_expr_p)\n \t      expr = instantiate_non_dependent_expr (expr);"}]}