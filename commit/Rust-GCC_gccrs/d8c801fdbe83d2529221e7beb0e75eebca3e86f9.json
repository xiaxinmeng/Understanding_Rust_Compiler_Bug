{"sha": "d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjODAxZmRiZTgzZDI1MjkyMjFlN2JlYjBlNzVlZWJjYTNlODZmOQ==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-10-22T18:48:33Z"}, "committer": {"name": "Changpeng Fang", "email": "cfang@gcc.gnu.org", "date": "2010-10-22T18:48:33Z"}, "message": "Update processsor_costs table for bdver1\n\n\t* gcc/config/i386/i386.c (processor_costs bdver1_cost): Update\n\tinsn costs and architectural parameters for bdver1.\n\nFrom-SVN: r165851", "tree": {"sha": "0a6ce4bde3a5e81882190e4bace346b9a7587a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6ce4bde3a5e81882190e4bace346b9a7587a14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c801fdbe83d2529221e7beb0e75eebca3e86f9/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59dd34c40837ec0eadb3b08206c9d2cf558bc482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dd34c40837ec0eadb3b08206c9d2cf558bc482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59dd34c40837ec0eadb3b08206c9d2cf558bc482"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "5731ffe83e9191931406615f320552c00498d51b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c801fdbe83d2529221e7beb0e75eebca3e86f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c801fdbe83d2529221e7beb0e75eebca3e86f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "patch": "@@ -1,3 +1,8 @@\n+2010-10-22  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\t* gcc/config/i386/i386.c (processor_costs bdver1_cost): Update\n+\tinsn costs and architectural parameters for bdver1.\n+\n 2010-10-22  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.h (gimple_register_canonical_type): Declare."}, {"sha": "547fe5f41fd198b7a62594f062d339e05c18b894", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c801fdbe83d2529221e7beb0e75eebca3e86f9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c801fdbe83d2529221e7beb0e75eebca3e86f9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d8c801fdbe83d2529221e7beb0e75eebca3e86f9", "patch": "@@ -821,14 +821,14 @@ struct processor_costs amdfam10_cost = {\n \n struct processor_costs bdver1_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction */\n   COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n   COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n-  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+  {COSTS_N_INSNS (4),\t\t\t/* cost of starting multiply for QI */\n    COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n-   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n-   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n-   COSTS_N_INSNS (5)},\t\t\t/*\t\t\t      other */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (6),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (6)},\t\t\t/*\t\t\t      other */\n   0,\t\t\t\t\t/* cost of multiply per each bit set */\n   {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI */\n    COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI */\n@@ -840,26 +840,26 @@ struct processor_costs bdver1_cost = {\n   8,\t\t\t\t\t/* \"large\" insn */\n   9,\t\t\t\t\t/* MOVE_RATIO */\n   4,\t\t\t\t     /* cost for loading QImode using movzbl */\n-  {3, 4, 3},\t\t\t\t/* cost of loading integer registers\n+  {5, 5, 4},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {3, 4, 3},\t\t\t\t/* cost of storing integer registers */\n-  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n-  {4, 4, 12},\t\t\t\t/* cost of loading fp registers\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {5, 5, 12},\t\t\t\t/* cost of loading fp registers\n \t\t   \t\t\t   in SFmode, DFmode and XFmode */\n-  {6, 6, 8},\t\t\t\t/* cost of storing fp registers\n+  {4, 4, 8},\t\t\t\t/* cost of storing fp registers\n  \t\t   \t\t\t   in SFmode, DFmode and XFmode */\n   2,\t\t\t\t\t/* cost of moving MMX register */\n-  {3, 3},\t\t\t\t/* cost of loading MMX registers\n+  {4, 4},\t\t\t\t/* cost of loading MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   {4, 4},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2,\t\t\t\t\t/* cost of moving SSE register */\n-  {4, 4, 3},\t\t\t\t/* cost of loading SSE registers\n+  {4, 4, 4},\t\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  {4, 4, 5},\t\t\t\t/* cost of storing SSE registers\n+  {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  2,\t\t\t\t\t/* MMX or SSE register to integer */\n   \t\t\t\t\t/* On K8:\n \t\t\t\t\t    MOVD reg64, xmmreg Double FSTORE 4\n \t\t\t\t\t    MOVD reg32, xmmreg Double FSTORE 4\n@@ -868,8 +868,8 @@ struct processor_costs bdver1_cost = {\n \t\t\t\t\t\t\t       1/1  1/1\n \t\t\t\t\t    MOVD reg32, xmmreg Double FADD 3\n \t\t\t\t\t\t\t       1/1  1/1 */\n-  64,\t\t\t\t\t/* size of l1 cache.  */\n-  1024,\t\t\t\t\t/* size of l2 cache.  */\n+  16,\t\t\t\t\t/* size of l1 cache.  */\n+  2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   /* New AMD processors never drop prefetches; if they cannot be performed\n      immediately, they are queued.  We set number of simultaneous prefetches\n@@ -878,12 +878,12 @@ struct processor_costs bdver1_cost = {\n      time).  */\n   100,\t\t\t\t\t/* number of parallel prefetches */\n   2,\t\t\t\t\t/* Branch cost */\n-  COSTS_N_INSNS (4),\t\t\t/* cost of FADD and FSUB insns.  */\n-  COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n-  COSTS_N_INSNS (19),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (42),\t\t\t/* cost of FDIV instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n-  COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+  COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n \n   /*  BDVER1 has optimized REP instruction for medium sized blocks, but for\n       very small blocks it is better to use loop. For large blocks, libcall\n@@ -893,15 +893,15 @@ struct processor_costs bdver1_cost = {\n   {{libcall, {{8, loop}, {24, unrolled_loop},\n \t      {2048, rep_prefix_4_byte}, {-1, libcall}}},\n    {libcall, {{48, unrolled_loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n-  4,\t\t\t\t\t/* scalar_stmt_cost.  */\n-  2,\t\t\t\t\t/* scalar load_cost.  */\n-  2,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  4,\t\t\t\t\t/* scalar load_cost.  */\n+  4,\t\t\t\t\t/* scalar_store_cost.  */\n   6,\t\t\t\t\t/* vec_stmt_cost.  */\n   0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n   2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n-  2,\t\t\t\t\t/* vec_align_load_cost.  */\n-  2,\t\t\t\t\t/* vec_unalign_load_cost.  */\n-  2,\t\t\t\t\t/* vec_store_cost.  */\n+  4,\t\t\t\t\t/* vec_align_load_cost.  */\n+  4,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  4,\t\t\t\t\t/* vec_store_cost.  */\n   2,\t\t\t\t\t/* cond_taken_branch_cost.  */\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };"}]}