{"sha": "4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1OWZkOWVlZWExNzhhMGRlMGM1ZmQ2ZTY3ZjY0MjYxNGE3ZWMwMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-02-20T03:49:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-02-20T03:49:14Z"}, "message": "c-common.c (decl_attributes): Set DECL_SIZE_UNIT.\n\n\t* c-common.c (decl_attributes): Set DECL_SIZE_UNIT.\n\t* c-decl.c (duplicate_decls, finish_enum): Likewise.\n\t(finish_decl): Remove -Wlarger-than code from here.\n\t* flags.h (id_clash_len): Now int.\n\t(larger_than_size): Now HOST_WIDE_INT.\n\t* fold-const.c (size_int_wide): No more HIGH parm; NUMBER is signed.\n\tClean up checking to see if in table.\n\t(make_bit_field_ref): Remove extra parm to bitsize_int.\n\t* ggc-common.c (ggc_mark_tree_children): Mark DECL_SIZE_UNIT.\n\t* print-tree.c (print_node): Print DECL_SIZE_UNIT and TYPE_SIZE_UNIT.\n\t* stmt.c (expand_decl): Use DECL_SIZE_UNIT for stack checking size\n\tand for computing size of decl.\n\t* stor-layout.c (layout_decl): Set DECL_SIZE_UNIT.\n\tMove -Wlarger-than code to here.\n\t(layout_record): Remove extra arg to bitsize_int.\n\tSet TYPE_BINFO_SIZE_UNIT.\n\t(layout_union): Remove extra arg to bitsize_int.\n\tUse proper type for size of QUAL_UNION.\n\t(layout_type): Remove extra arg to bitsize_int.\n\t* toplev.c (id_clash_len): Now int.\n\t(larger_than_size): Now HOST_WIDE_INT.\n\t(decode_W_option): Clean up id-clash and larger-than- cases.\n\t* tree.c (get_identifier, maybe_get_identifier): Remove unneeded casts.\n\t(expr_align, case FUNCTION_DECL): DECL_ALIGN is not defined.\n\t* tree.h (BINFO_SIZE_UNIT, TYPE_BINFO_SIZE_UNIT, DECL_SIZE_UNIT): New.\n\t(struct tree_decl): New field size_unit.\n\t(size_int_wide): No HIGH operand; NUMBER is now signed.\n\t(size_int_2): Deleted.\n\t(size_int, bitsize_int): Don't use it and rework args.\n\t* varasm.c (assemble_variable, output_constructor): Use DECL_SIZE_UNIT.\n\t* ch/decl.c (layout_enum): Set DECL_SIZE_UNIT.\n\t* ch/satisfy.c (safe_satisfy_decl): Likewise.\n\t* cp/class.c (build_primary_vtable, layout_vtable_decl): Likewise.\n\t(avoid_overlap, build_base_field): Likewise.\n\t(build_base_field, build_base_fields, is_empty_class):\n\tTest DECL_SIZE with integer_zero.\n\t(layout_class_type): Set CLASSTYPE_SIZE_UNIT.\n\t* cp/cp-tree.h (struct lang_type): New field size_unit.\n\t(CLASSTYPE_SIZE_UNIT): New macro.\n\t* cp/decl.c (init_decl_processing): Set DECL_SIZE_UNIT.\n\t(cp_finish_decl): Delete -Wlarger-than processing.\n\t* cp/optimize.c (remap_decl): Walk DECL_SIZE_UNIT.\n\t* cp/pt.c (tsubst_decl): Set DECL_SIZE_UNIT.\n\t* cp/tree.c (make_binfo): binfo vector is one entry longer.\n\t(walk_tree): Walk DECL_SIZE_UNIT.\n\t* f/com.c (ffecom_sym_transform): Use DECL_SIZE_UNIT.\n\t(ffecom_transform_common_, ffecom_transform_equiv_): Likewise.\n\t(duplicate_decls): Likewise.\n\t(ffecom_tree_canonize_ptr_): Delete extra arg to bitsize_int.\n\t(finish_decl): Delete -Wlarger-than processing.\n\t* java/class.c (build_class_ref, push_super_field): Set DECL_SIZE_UNIT.\n\t* java/constants.c (build_constants_constructor): Likewise.\n\nFrom-SVN: r32070", "tree": {"sha": "184d476ebb1253e2b1865e25daf8a3b21075a0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/184d476ebb1253e2b1865e25daf8a3b21075a0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4559fd9eeea178a0de0c5fd6e67f642614a7ec03/comments", "author": null, "committer": null, "parents": [{"sha": "7d52ae23dc2fd9e8637ff8fd6ef53d771a5b3918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d52ae23dc2fd9e8637ff8fd6ef53d771a5b3918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d52ae23dc2fd9e8637ff8fd6ef53d771a5b3918"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "95ee9809fded0ae7d6656cfbc1b12fa20bc58aa3", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4559fd9eeea178a0de0c5fd6e67f642614a7ec03/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4559fd9eeea178a0de0c5fd6e67f642614a7ec03/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "patch": "@@ -1,5 +1,6 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 88, 89, 92-99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n+   1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -3768,11 +3769,11 @@ expand_decl (decl)\n \t\t\t   / BITS_PER_UNIT));\n     }\n \n-  else if (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST\n+  else if (TREE_CODE (DECL_SIZE_UNIT (decl)) == INTEGER_CST\n \t   && ! (flag_stack_check && ! STACK_CHECK_BUILTIN\n-\t\t && (TREE_INT_CST_HIGH (DECL_SIZE (decl)) != 0\n-\t\t     || (TREE_INT_CST_LOW (DECL_SIZE (decl))\n-\t\t\t > STACK_CHECK_MAX_VAR_SIZE * BITS_PER_UNIT))))\n+\t\t && (TREE_INT_CST_HIGH (DECL_SIZE_UNIT (decl)) != 0\n+\t\t     || (TREE_INT_CST_LOW (DECL_SIZE_UNIT (decl))\n+\t\t\t > STACK_CHECK_MAX_VAR_SIZE))))\n     {\n       /* Variable of fixed size that goes on the stack.  */\n       rtx oldaddr = 0;\n@@ -3842,10 +3843,7 @@ expand_decl (decl)\n \t\t     const0_rtx, VOIDmode, 0);\n \n       /* Compute the variable's size, in bytes.  */\n-      size = expand_expr (size_binop (CEIL_DIV_EXPR,\n-\t\t\t\t      DECL_SIZE (decl),\n-\t\t\t\t      size_int (BITS_PER_UNIT)),\n-\t\t\t  NULL_RTX, VOIDmode, 0);\n+      size = expand_expr (DECL_SIZE_UNIT (decl), NULL_RTX, VOIDmode, 0);\n       free_temp_slots ();\n \n       /* Allocate space on the stack for the variable.  Note that"}, {"sha": "8a0fc8801e8ced158d3e4de62b1172ce371fe546", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4559fd9eeea178a0de0c5fd6e67f642614a7ec03/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4559fd9eeea178a0de0c5fd6e67f642614a7ec03/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4559fd9eeea178a0de0c5fd6e67f642614a7ec03", "patch": "@@ -1,5 +1,6 @@\n /* Top level of GNU C compiler\n-   Copyright (C) 1987, 88, 89, 92-98, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1224,14 +1225,14 @@ int warn_cast_align;\n    characters.  The value N is in `id_clash_len'.  */\n \n int warn_id_clash;\n-unsigned id_clash_len;\n+int id_clash_len;\n \n /* Nonzero means warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes. The value N is in `larger_than_size'.  */\n  \n int warn_larger_than;\n-unsigned larger_than_size;\n+HOST_WIDE_INT larger_than_size;\n \n /* Nonzero means warn if inline function is too large.  */\n \n@@ -4094,8 +4095,8 @@ decode_f_option (arg)\n   else if (!strncmp (arg, \"align-loops=\", 12))\n     align_loops = read_integral_parameter (arg + 12, arg - 2, align_loops);\n   else if (!strncmp (arg, \"align-functions=\", 16))\n-    align_functions =\n-      read_integral_parameter (arg + 16, arg - 2, align_functions);\n+    align_functions\n+      = read_integral_parameter (arg + 16, arg - 2, align_functions);\n   else if (!strncmp (arg, \"align-jumps=\", 12))\n     align_jumps = read_integral_parameter (arg + 12, arg - 2, align_jumps);\n   else if (!strncmp (arg, \"align-labels=\", 13))\n@@ -4132,6 +4133,7 @@ decode_f_option (arg)\n /* Parse a -W... comand line switch.  ARG is the value after the -W.\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n+\n static int\n decode_W_option (arg)\n      const char * arg;\n@@ -4158,23 +4160,17 @@ decode_W_option (arg)\n \n   if (!strncmp (arg, \"id-clash-\", 9))\n     {\n-      const int id_clash_val = read_integral_parameter (arg + 9, arg - 2, -1);\n+      id_clash_len = read_integral_parameter (arg + 9, arg - 2, -1);\n       \n-      if (id_clash_val != -1)\n-\t{\n-\t  id_clash_len = id_clash_val;\n-\t  warn_id_clash = 1;\n-\t}\n+      if (id_clash_len != -1)\n+\twarn_id_clash = 1;\n     }\n   else if (!strncmp (arg, \"larger-than-\", 12))\n     {\n-      const int larger_than_val =\n-\tread_integral_parameter (arg + 12, arg - 2, -1);\n-      if (larger_than_val != -1)\n-\t{\n-\t  larger_than_size = larger_than_val;\n-\t  warn_larger_than = 1;\n-\t}\n+      larger_than_size = read_integral_parameter (arg + 12, arg - 2, -1);\n+\n+      if (larger_than_size != -1)\n+\twarn_larger_than = 1;\n     }\n   else\n     return 0;"}]}