{"sha": "d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac", "node_id": "C_kwDOANBUbNoAKGQ0ODM2YWM5YWNkMGM5OTFhNGZlMWRlYzk0Mzg3NzNhMmM0ZWI1YWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-26T07:57:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-26T07:57:34Z"}, "message": "reassoc: Don't call fold_convert if !fold_convertible_p [PR105374]\n\nAs mentioned in the PR, we ICE because maybe_fold_*_comparisons returns\nan expression with V4SImode type and we try to fold_convert it to\nV4BImode, which isn't allowed.\n\nIMHO no matter whether we change maybe_fold_*_comparisons we should\nplay safe on the reassoc side and punt if we can't convert like\nwe punt for many other reasons.  This fixes the testcase on ARM.\n\nTestcase not included, not exactly sure where and what directives it\nshould have in gcc.target/arm/ testsuite.  Christophe, do you think you\ncould handle that incrementally?\n\n2022-04-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105374\n\t* tree-ssa-reassoc.cc (eliminate_redundant_comparison): Punt if\n\t!fold_convertible_p rather than assuming fold_convert must succeed.", "tree": {"sha": "4c74da4417607abbd05b8ce961f90f27e7cfb440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c74da4417607abbd05b8ce961f90f27e7cfb440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b45ae16fffc856b5d84aeea12040dd82452cd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b45ae16fffc856b5d84aeea12040dd82452cd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b45ae16fffc856b5d84aeea12040dd82452cd07"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "43b25371d4b02c6e3410783f856db394f8a9738b", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=d4836ac9acd0c991a4fe1dec9438773a2c4eb5ac", "patch": "@@ -2254,7 +2254,11 @@ eliminate_redundant_comparison (enum tree_code opcode,\n \t BIT_AND_EXPR or BIT_IOR_EXPR was of a wider integer type,\n \t we need to convert.  */\n       if (!useless_type_conversion_p (TREE_TYPE (curr->op), TREE_TYPE (t)))\n-\tt = fold_convert (TREE_TYPE (curr->op), t);\n+\t{\n+\t  if (!fold_convertible_p (TREE_TYPE (curr->op), t))\n+\t    continue;\n+\t  t = fold_convert (TREE_TYPE (curr->op), t);\n+\t}\n \n       if (TREE_CODE (t) != INTEGER_CST\n \t  && !operand_equal_p (t, curr->op, 0))"}]}