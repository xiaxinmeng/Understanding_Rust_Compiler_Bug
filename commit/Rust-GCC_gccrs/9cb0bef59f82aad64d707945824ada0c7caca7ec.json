{"sha": "9cb0bef59f82aad64d707945824ada0c7caca7ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiMGJlZjU5ZjgyYWFkNjRkNzA3OTQ1ODI0YWRhMGM3Y2FjYTdlYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-17T15:48:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-17T15:48:44Z"}, "message": "mauve.exp (test_mauve): Call `prune_warnings'.\n\n\t* libjava.mauve/mauve.exp (test_mauve): Call `prune_warnings'.\n\t(test_mauve_sim): Likewise.\n\t(test_mauve): Redirect stderr in system call.\n\t(test_mauve_sim): Likewise.\n\t* lib/libjava.exp (test_libjava_from_source): Call\n\t`prune_warnings'.\n\t(test_libjava_from_javac): Likewise.\n\t(bytecompile_file): Redirect stderr in system call.\n\t* lib/libjava.exp (libjava_find_program): New proc.\n\t(find_jvscan): Use it.\n\t(find_gcjh): New proc.\n\n\t* libjava.compile/compile.exp: Use \"\", not $options.\n\nFrom-SVN: r33959", "tree": {"sha": "f6eb8f0a23d651340d1dfae97afaac010e6169a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6eb8f0a23d651340d1dfae97afaac010e6169a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cb0bef59f82aad64d707945824ada0c7caca7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb0bef59f82aad64d707945824ada0c7caca7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb0bef59f82aad64d707945824ada0c7caca7ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb0bef59f82aad64d707945824ada0c7caca7ec/comments", "author": null, "committer": null, "parents": [{"sha": "e0125cf32b14239950bbc5b15dd73f18b9d76c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0125cf32b14239950bbc5b15dd73f18b9d76c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0125cf32b14239950bbc5b15dd73f18b9d76c16"}], "stats": {"total": 145, "additions": 84, "deletions": 61}, "files": [{"sha": "5abc88e57965f1b6365b2a84c912132c81c981d7", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=9cb0bef59f82aad64d707945824ada0c7caca7ec", "patch": "@@ -1,3 +1,19 @@\n+2000-05-17  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* libjava.mauve/mauve.exp (test_mauve): Call `prune_warnings'.\n+\t(test_mauve_sim): Likewise.\n+\t(test_mauve): Redirect stderr in system call.\n+\t(test_mauve_sim): Likewise.\n+\t* lib/libjava.exp (test_libjava_from_source): Call\n+\t`prune_warnings'.\n+\t(test_libjava_from_javac): Likewise.\n+\t(bytecompile_file): Redirect stderr in system call.\n+\t* lib/libjava.exp (libjava_find_program): New proc.\n+\t(find_jvscan): Use it.\n+\t(find_gcjh): New proc.\n+\n+\t* libjava.compile/compile.exp: Use \"\", not $options.\n+\n 2000-05-16  Tom Tromey  <tromey@cygnus.com>\n \n \t* libjava.lang/instance.out: New file."}, {"sha": "3d1e8c8b5a1da2a85365715066d60a49ed44e211", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=9cb0bef59f82aad64d707945824ada0c7caca7ec", "patch": "@@ -21,21 +21,31 @@ proc libjava_read_xfail {file} {\n     return $tokens\n }\n \n-# Find `jv-scan'.  FIXME: this relies on DejaGnu internals.  These\n-# should probably be exposed in a better way.\n-proc find_jvscan {} {\n+# Find a particular executable.  FIXME: this relies on DejaGnu\n+# internals.  These should probably be exposed in a better way.\n+proc libjava_find_program {prog} {\n     global tool_root_dir\n \n-    set file [lookfor_file $tool_root_dir jv-scan]\n+    set file [lookfor_file $tool_root_dir $prog]\n     if { $file == \"\" } {\n-\tset file [lookfor_file $tool_root_dir gcc/jv-scan];\n+\tset file [lookfor_file $tool_root_dir gcc/$prog];\n     }\n     if {$file == \"\"} {\n-\tset file jv-scan\n+\tset file $prog\n     }\n     return $file\n }\n \n+# Find `jv-scan'.\n+proc find_jvscan {} {\n+    return [libjava_find_program jv-scan]\n+}\n+\n+# Find `gcjh'.\n+proc find_gcjh {} {\n+    return [libjava_find_program gcjh]\n+}\n+\n proc bytecompile_file { file objdir {classpath {}} } {\n     global env\n     global SUN_JAVAC\n@@ -61,7 +71,9 @@ proc bytecompile_file { file objdir {classpath {}} } {\n     if {$classpath != \"\"} then {\n         set env(CLASSPATH) $classpath\n     }\n-    if {[catch {system \"cd $dirname; $SUN_JAVAC $file -d $objdir\"} msg]} then {\n+    if {[catch {\n+\tsystem \"cd $dirname; $SUN_JAVAC $file -d $objdir 2>&1\"\n+    } msg]} then {\n \tverbose \"couldn't compile $file: $msg\"\n \tset r 0\n     } else {\n@@ -270,20 +282,6 @@ proc libjava_arguments {{mode compile}} {\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n-#   `no-link'     don't try to link the program\n-#   `no-exec'     don't try to run the test\n-#   `xfail-gcj'   compilation from source will fail\n-#   `xfail-javac' compilation with javac will fail\n-#   `xfail-gcjC'  compilation with gcj -C will fail\n-#   `shouldfail'  compilation from source is supposed to fail\n-#                 This is different from xfail, which marks a known\n-#                 failure that we just havne't fixed.\n-#                 A compilation marked this way should fail with any\n-#                 front end.\n-#   `xfail-byte'  compilation from bytecode will fail\n-#   `xfail-exec'  exec will fail\n-#   `xfail-output' output will be wrong\n-#   \n #\n proc test_libjava_from_source { options srcfile compile_args inpfile resultfile exec_args } {\n     global base_dir\n@@ -333,7 +331,8 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \tset errname \"$errname $compile_args\"\n     }\n \n-    set x [target_compile $srcfile \"$executable\" $target $args]\n+    set x [prune_warnings \\\n+\t     [target_compile $srcfile \"$executable\" $target $args]]\n     if {[info exists opts(xfail-gcj)]} {\n \tsetup_xfail *-*-*\n     }\n@@ -419,19 +418,6 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n-#   `no-link'     don't try to link the program\n-#   `no-exec' don't try to run the test\n-#   `xfail-gcj'   compilation from source will fail\n-#   `xfail-javac' compilation with javac will fail\n-#   `xfail-gcjC'  compilation with gcj -C will fail\n-#   `shouldfail'  compilation from source is supposed to fail\n-#                 This is different from xfail, which marks a known\n-#                 failure that we just havne't fixed.\n-#                 A compilation marked this way should fail with any\n-#                 front end.\n-#   `xfail-byte'  compilation from bytecode will fail\n-#   `xfail-exec'  exec will fail\n-#   `xfail-output' output will be wrong\n #\n proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile exec_args } {\n     global base_dir\n@@ -488,12 +474,14 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     set jvscan [find_jvscan]\n     verbose \"jvscan is $jvscan\"\n     set main_name [string trim \\\n-\t\t     [target_compile $srcfile \"\" none \\\n-\t\t\t\"compiler=$jvscan additional_flags=--print-main\"]]\n+\t\t     [prune_warnings \\\n+\t\t\t[target_compile $srcfile \"\" none \\\n+\t\t\t   \"compiler=$jvscan additional_flags=--print-main\"]]]\n     verbose \"main name is $main_name\"\n     set class_out [string trim \\\n-\t\t     [target_compile $srcfile \"\" none \\\n-\t\t\t\"compiler=$jvscan additional_flags=--list-class\"]]\n+\t\t     [prune_warnings \\\n+\t\t\t[target_compile $srcfile \"\" none \\\n+\t\t\t   \"compiler=$jvscan additional_flags=--list-class\"]]]\n     verbose \"class list is $class_out\"\n \n     if {[string match \"*parse error*\" $main_name]\n@@ -559,13 +547,15 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     if {$mode == \"compile\"} {\n \tforeach c_file $class_files {\n \t    set executable [file rootname [file tail $c_file]].o\n-\t    set x [target_compile $c_file \"$executable\" $type $args]\n+\t    set x [prune_warnings \\\n+\t\t     [target_compile $c_file \"$executable\" $type $args]]\n \t    if {$x != \"\"} {\n \t\tbreak\n \t    }\n \t}\n     } else {\n-\tset x [target_compile $class_files \"$executable\" $type $args]\n+\tset x [prune_warnings \\\n+\t\t [target_compile $class_files \"$executable\" $type $args]]\n     }\n     if {[info exists opts(xfail-byte)]} {\n \tsetup_xfail *-*-*"}, {"sha": "4a358a6d37d15dc25c78c22e50374256fe0d3eda", "filename": "libjava/testsuite/libjava.compile/compile.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flibjava.compile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flibjava.compile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2Fcompile.exp?ref=9cb0bef59f82aad64d707945824ada0c7caca7ec", "patch": "@@ -11,8 +11,8 @@ foreach x $srcfiles {\n     }\n     lappend args no-exec\n \n-    test_libjava $options \"$x\" \"\" \"\" \"\" $args\n-    test_libjava $options \"$x\" \"-O\" \"\" \"\" $args\n+    test_libjava \"\" \"$x\" \"\" \"\" \"\" $args\n+    test_libjava \"\" \"$x\" \"-O\" \"\" \"\" $args\n }\n \n # Local Variables:"}, {"sha": "04f637a747d9fb852ca28f45eaadc0f8850fa9ec", "filename": "libjava/testsuite/libjava.mauve/mauve.exp", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb0bef59f82aad64d707945824ada0c7caca7ec/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp?ref=9cb0bef59f82aad64d707945824ada0c7caca7ec", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1998, 1999 Free Software Foundation.\n+# Copyright (C) 1998, 1999, 2000 Free Software Foundation.\n # Written by Tom Tromey <tromey@cygnus.com>.\n # Incorporate Mauve into libjava's DejaGNU test suite framework.\n \n@@ -90,7 +90,9 @@ proc test_mauve {} {\n     # before they're installed.\n     set env(GCJ) \"$GCJ_UNDER_TEST -B$objdir/../ -I$objdir/../libgcj.zip\"\n \n-  if {[catch {system \"$env(MAUVEDIR)/configure --with-gcj\"} msg]} then {\n+  if {[catch {\n+    system \"$env(MAUVEDIR)/configure --with-gcj 2>@ stdout\"\n+  } msg]} then {\n     fail \"Mauve configure\"\n     verbose \"configure failed with $msg\"\n     return\n@@ -105,7 +107,9 @@ proc test_mauve {} {\n   puts -nonewline $fd $c\n   close $fd\n \n-  if {[catch {system \"make KEYS=libgcj classes.stamp\"} msg]} then {\n+  if {[catch {\n+    system \"make KEYS=libgcj classes.stamp 2>&1\"\n+  } msg]} then {\n     fail \"Mauve build\"\n     verbose \"build failed with $msg\"\n     return\n@@ -132,7 +136,9 @@ proc test_mauve {} {\n   foreach base {DejaGNUTestHarness gnu/testlet/SimpleTestHarness gnu/testlet/TestHarness gnu/testlet/Testlet gnu/testlet/ResourceNotFoundException gnu/testlet/config} {\n     set file $base.class\n     set obj $base.o\n-    if {[target_compile [pwd]/$file $obj object $compile_args] != \"\"} then {\n+    set x [prune_warnings \\\n+\t     [target_compile [pwd]/$file $obj object $compile_args]]\n+    if {$x != \"\"} then {\n       fail \"Compile $obj\"\n       set ok 0\n     } else {\n@@ -155,8 +161,9 @@ proc test_mauve {} {\n       if {! [file exists $obj]} then {\n \tverbose \"compiling $obj for test of $class\"\n \tset srcfile [file rootname $obj].class\n-\tif {[target_compile [pwd]/$srcfile $obj object $compile_args]\n-\t    != \"\"} then {\n+\tset x [prune_warnings \\\n+\t\t [target_compile [pwd]/$srcfile $obj object $compile_args]]\n+\tif {$x != \"\"} then {\n \t  fail \"Compile $obj for $class\"\n \t  set ok 0\n \t  break\n@@ -168,8 +175,9 @@ proc test_mauve {} {\n       continue\n     }\n \n-    if {[target_compile [concat $uses($file) $objlist] \\\n-\t   $Executable executable $link_args] != \"\"} then {\n+    set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n+\t\t\t     $Executable executable $link_args]]\n+    if {$x != \"\"} then {\n       fail \"Link for $class\"\n       continue\n     }\n@@ -223,7 +231,9 @@ proc test_mauve_sim {} {\n   set full_srcdir [pwd]\n   cd $here/mauve-build\n \n-  if {[catch {system \"$env(MAUVEDIR)/configure --with-gcj\"} msg]} then {\n+  if {[catch {\n+    system \"$env(MAUVEDIR)/configure --with-gcj 2>&1\"\n+  } msg]} then {\n     fail \"Mauve configure\"\n     verbose \"configure failed with $msg\"\n     return\n@@ -238,7 +248,9 @@ proc test_mauve_sim {} {\n   puts -nonewline $fd $c\n   close $fd\n \n-  if {[catch {system \"make KEYS=libgcj classes.stamp\"} msg]} then {\n+  if {[catch {\n+    system \"make KEYS=libgcj classes.stamp 2>&1\"\n+  } msg]} then {\n     fail \"Mauve build\"\n     verbose \"build failed with $msg\"\n     return\n@@ -260,7 +272,9 @@ proc test_mauve_sim {} {\n \t\t  gnu/testlet/config} {\n     set file $base.class\n     set obj $base.o\n-    if {[target_compile [pwd]/$file $obj object $compile_args] != \"\"} then {\n+    set x [prune_warnings \\\n+\t     [target_compile [pwd]/$file $obj object $compile_args]]\n+    if {$x != \"\"} then {\n       fail \"Compile $obj\"\n       set ok 0\n     } else {\n@@ -286,8 +300,9 @@ proc test_mauve_sim {} {\n       if {! [file exists $obj]} then {\n \tverbose \"compiling $obj for test of $class\"\n \tset srcfile [file rootname $obj].class\n-\tif {[target_compile [pwd]/$srcfile $obj object $compile_args]\n-\t    != \"\"} then {\n+\tset x [prune_warnings \\\n+\t\t [target_compile [pwd]/$srcfile $obj object $compile_args]]\n+\tif {$x != \"\"} then {\n \t  fail \"Compile $obj for $class\"\n \t  set ok 0\n \t  break\n@@ -320,15 +335,17 @@ proc test_mauve_sim {} {\n \treturn\n     }\n \n-    if {[target_compile gnu/testlet/DejaGNUTestHarness.class \\\n-\t    gnu/testlet/DejaGNUTestHarness.o object $compile_args]\n-      != \"\"} then {\n+    set x [prune_warnings \\\n+\t     [target_compile gnu/testlet/DejaGNUTestHarness.class \\\n+\t\tgnu/testlet/DejaGNUTestHarness.o object $compile_args]]\n+    if {$x != \"\"} then {\n \tfail \"Compile DejaGNUTestHarness.java\"\n \tcontinue\n       }\n \n-    if {[target_compile [concat $uses($file) $objlist] \\\n-\t   $Executable executable $link_args] != \"\"} then {\n+    set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n+\t\t\t     $Executable executable $link_args]]\n+    if {$x != \"\"} then {\n       fail \"Link for $class\"\n       continue\n     }"}]}