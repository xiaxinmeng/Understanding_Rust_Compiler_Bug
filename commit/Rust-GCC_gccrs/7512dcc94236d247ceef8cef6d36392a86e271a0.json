{"sha": "7512dcc94236d247ceef8cef6d36392a86e271a0", "node_id": "C_kwDOANBUbNoAKDc1MTJkY2M5NDIzNmQyNDdjZWVmOGNlZjZkMzYzOTJhODZlMjcxYTA", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-12-06T16:37:27Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-03T09:29:52Z"}, "message": "ada: Simplify [Small_]Integer_Type_For\n\nMake Small_Integer_Type_For call Integer_Type_For,\nso they share most of the code.\n\nRemove Standard_Long_Integer from consideration,\nbecause that's different on different machines (32- or 64-bit).\nStandard_Integer or Standard_Long_Long_Integer will be\nchosen.\n\ngcc/ada/\n\n\t* exp_util.adb (Integer_Type_For): Assertion and comment.\n\t(Small_Integer_Type_For): Remove some code and call\n\tInteger_Type_For instead.\n\t* sem_util.ads (Rep_To_Pos_Flag): Improve comments. \"Standard_...\"\n\tseems overly pedantic here.\n\t* exp_attr.adb (Succ, Pred): Clean up: make the code as similar as\n\tpossible.\n\t* exp_ch4.adb: Minor: named notation.", "tree": {"sha": "7c7bd8fdd70250907dc78c7bf8b24eb24aa188be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7bd8fdd70250907dc78c7bf8b24eb24aa188be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7512dcc94236d247ceef8cef6d36392a86e271a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7512dcc94236d247ceef8cef6d36392a86e271a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7512dcc94236d247ceef8cef6d36392a86e271a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7512dcc94236d247ceef8cef6d36392a86e271a0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930b81af5b0207585819ea9988a0f50d009940a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930b81af5b0207585819ea9988a0f50d009940a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930b81af5b0207585819ea9988a0f50d009940a7"}], "stats": {"total": 84, "additions": 29, "deletions": 55}, "files": [{"sha": "50cb307a152b5d21df7277a4bad2b4f00adb4c82", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=7512dcc94236d247ceef8cef6d36392a86e271a0", "patch": "@@ -5638,9 +5638,7 @@ package body Exp_Attr is\n                          Make_Integer_Literal (Loc, 1))));\n \n             else\n-               --  Add Boolean parameter True, to request program error if\n-               --  we have a bad representation on our hands. If checks are\n-               --  suppressed, then add False instead\n+               --  Add Boolean parameter depending on check suppression\n \n                Append_To (Exprs, Rep_To_Pos_Flag (Ptyp, Loc));\n                Rewrite (N,\n@@ -5650,13 +5648,13 @@ package body Exp_Attr is\n                        (Enum_Pos_To_Rep (Etyp), Loc),\n                    Expressions => New_List (\n                      Make_Op_Subtract (Loc,\n-                    Left_Opnd =>\n-                      Make_Function_Call (Loc,\n-                        Name =>\n-                          New_Occurrence_Of\n-                            (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n-                          Parameter_Associations => Exprs),\n-                    Right_Opnd => Make_Integer_Literal (Loc, 1)))));\n+                       Left_Opnd =>\n+                         Make_Function_Call (Loc,\n+                           Name =>\n+                             New_Occurrence_Of\n+                               (TSS (Etyp, TSS_Rep_To_Pos), Loc),\n+                           Parameter_Associations => Exprs),\n+                       Right_Opnd => Make_Integer_Literal (Loc, 1)))));\n             end if;\n \n             --  Suppress checks since they have all been done above\n@@ -6771,9 +6769,7 @@ package body Exp_Attr is\n                          Make_Integer_Literal (Loc, 1))));\n \n             else\n-               --  Add Boolean parameter True, to request program error if\n-               --  we have a bad representation on our hands. Add False if\n-               --  checks are suppressed.\n+               --  Add Boolean parameter depending on check suppression\n \n                Append_To (Exprs, Rep_To_Pos_Flag (Ptyp, Loc));\n                Rewrite (N,\n@@ -6797,7 +6793,8 @@ package body Exp_Attr is\n             Analyze_And_Resolve (N, Typ, Suppress => All_Checks);\n \n          --  For floating-point, we transform 'Succ into a call to the Succ\n-         --  floating-point attribute function in Fat_xxx (xxx is root type)\n+         --  floating-point attribute function in Fat_xxx (xxx is root type).\n+         --  Note that this function takes care of the overflow case.\n \n          elsif Is_Floating_Point_Type (Ptyp) then\n             Expand_Fpt_Attribute_R (N);"}, {"sha": "148b160b792e5197808db726a2c81123f9b46b55", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7512dcc94236d247ceef8cef6d36392a86e271a0", "patch": "@@ -11836,7 +11836,7 @@ package body Exp_Ch4 is\n \n          if Is_Fixed_Point_Type (Etype (Expr)) then\n             Ityp := Small_Integer_Type_For\n-                      (Esize (Base_Type (Etype (Expr))), False);\n+                      (Esize (Base_Type (Etype (Expr))), Uns => False);\n \n             --  Generate a temporary with the integer type to facilitate in the\n             --  C backend the code generation for the unchecked conversion.\n@@ -12206,7 +12206,7 @@ package body Exp_Ch4 is\n             declare\n                Expr_Id : constant Entity_Id := Make_Temporary (Loc, 'T', Conv);\n                Int_Typ : constant Entity_Id :=\n-                           Small_Integer_Type_For (RM_Size (Btyp), False);\n+                 Small_Integer_Type_For (RM_Size (Btyp), Uns => False);\n \n             begin\n                --  Generate a temporary with the integer value. Required in the"}, {"sha": "5ab0d3039ca9d195b20e8b9617ed8d6ab23cf6f4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7512dcc94236d247ceef8cef6d36392a86e271a0", "patch": "@@ -8122,6 +8122,10 @@ package body Exp_Util is\n \n    function Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id is\n    begin\n+      pragma Assert\n+        (Standard_Long_Integer_Size in\n+         Standard_Integer_Size | Standard_Long_Long_Integer_Size);\n+      --  So we don't need to check for Standard_Long_Integer_Size below\n       pragma Assert (S <= System_Max_Integer_Size);\n \n       --  This is the canonical 32-bit type\n@@ -14023,7 +14027,8 @@ package body Exp_Util is\n    function Small_Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id\n    is\n    begin\n-      pragma Assert (S <= System_Max_Integer_Size);\n+      --  The only difference between this and Integer_Type_For is that this\n+      --  can return small (8- or 16-bit) types.\n \n       if S <= Standard_Short_Short_Integer_Size then\n          if Uns then\n@@ -14039,36 +14044,8 @@ package body Exp_Util is\n             return Standard_Short_Integer;\n          end if;\n \n-      elsif S <= Standard_Integer_Size then\n-         if Uns then\n-            return Standard_Unsigned;\n-         else\n-            return Standard_Integer;\n-         end if;\n-\n-      elsif S <= Standard_Long_Integer_Size then\n-         if Uns then\n-            return Standard_Long_Unsigned;\n-         else\n-            return Standard_Long_Integer;\n-         end if;\n-\n-      elsif S <= Standard_Long_Long_Integer_Size then\n-         if Uns then\n-            return Standard_Long_Long_Unsigned;\n-         else\n-            return Standard_Long_Long_Integer;\n-         end if;\n-\n-      elsif S <= Standard_Long_Long_Long_Integer_Size then\n-         if Uns then\n-            return Standard_Long_Long_Long_Unsigned;\n-         else\n-            return Standard_Long_Long_Long_Integer;\n-         end if;\n-\n       else\n-         raise Program_Error;\n+         return Integer_Type_For (S, Uns);\n       end if;\n    end Small_Integer_Type_For;\n "}, {"sha": "b61695ea72985a39d45c1c2eca054cde6cab0f3c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7512dcc94236d247ceef8cef6d36392a86e271a0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7512dcc94236d247ceef8cef6d36392a86e271a0", "patch": "@@ -2976,16 +2976,16 @@ package Sem_Util is\n \n    function Rep_To_Pos_Flag (E : Entity_Id; Loc : Source_Ptr) return Node_Id;\n    --  This is used to construct the second argument in a call to Rep_To_Pos\n-   --  which is Standard_True if range checks are enabled (E is an entity to\n-   --  which the Range_Checks_Suppressed test is applied), and Standard_False\n-   --  if range checks are suppressed. Loc is the location for the node that\n-   --  is returned (which is a New_Occurrence of the appropriate entity).\n+   --  which is True if range checks are enabled (E is an entity to which the\n+   --  Range_Checks_Suppressed test is applied), and False if range checks are\n+   --  suppressed. Loc is the location for the node that is returned (which is\n+   --  a New_Occurrence of the appropriate entity).\n    --\n-   --  Note: one might think that it would be fine to always use True and\n-   --  to ignore the suppress in this case, but it is generally better to\n-   --  believe a request to suppress exceptions if possible, and further\n-   --  more there is at least one case in the generated code (the code for\n-   --  array assignment in a loop) that depends on this suppression.\n+   --  Note: one might think that it would be fine to always use True and to\n+   --  ignore the suppress in this case, but there is at least one case in the\n+   --  generated code (the code for array assignment in a loop) that depends on\n+   --  this suppression. Anyway, it is generally better to believe a request to\n+   --  suppress exceptions if possible.\n \n    procedure Require_Entity (N : Node_Id);\n    --  N is a node which should have an entity value if it is an entity name."}]}