{"sha": "f189f5bbab73b5d04faee4f4d2198f023c9e1522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4OWY1YmJhYjczYjVkMDRmYWVlNGY0ZDIxOThmMDIzYzllMTUyMg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-28T12:22:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-28T12:22:11Z"}, "message": "Merge #398\n\n398: ReferenceTypes and Tuple can hold Type Parameters r=philberty a=philberty\n\nWe need to perform internal substitutions on Reference and Tuple Types in order to type check them.\r\n\r\nThese types cannot hold substitution parameters so they need to be performed with the internal substitution mapper.\r\n\r\nFixes #396 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "e8e59b34c0c4bba0c932b172b6adc76d557f3b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e59b34c0c4bba0c932b172b6adc76d557f3b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f189f5bbab73b5d04faee4f4d2198f023c9e1522", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiVNzCRBK7hj4Ov3rIwAA5G8IACJ8zjtbssoes/5Sa/hGxROs\nv2CfrmCHuT8CnuwpV2lDZCbKv4TUtG3oC2U3N+o5SBX5zkHTprh/s0K20f99gqXj\nM75DNDXDw4NAsyQ1phBRmyuBQB+H97aY5Oc53LGbM25JpoFMDPLp4oV/MUZrwwmY\nHYODjuKQrp09VyQAPb6w0kOQ6/OMGaeD+z4wAkeVjC1KcXrklB4aQg1Lx9O7EC8S\nZasjEKpTJiTwC4gXZdnMCQXj3iEMkkSSteWV6vg+XCuopmkPYx5n3C4ikGD4R88H\ndrYQVV7sXAwnC6nWfDdl1OZ8RAQJKw3iJN74okep11wTqZAlqNFYvvFrWUn6clA=\n=VECy\n-----END PGP SIGNATURE-----\n", "payload": "tree e8e59b34c0c4bba0c932b172b6adc76d557f3b6b\nparent 62bcc93ece6cda0dec8803f66b5a45005089e8ab\nparent e547f7da588f596bf26923b12ba873878e05d51c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619612531 +0000\ncommitter GitHub <noreply@github.com> 1619612531 +0000\n\nMerge #398\n\n398: ReferenceTypes and Tuple can hold Type Parameters r=philberty a=philberty\n\nWe need to perform internal substitutions on Reference and Tuple Types in order to type check them.\r\n\r\nThese types cannot hold substitution parameters so they need to be performed with the internal substitution mapper.\r\n\r\nFixes #396 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f189f5bbab73b5d04faee4f4d2198f023c9e1522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f189f5bbab73b5d04faee4f4d2198f023c9e1522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f189f5bbab73b5d04faee4f4d2198f023c9e1522/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62bcc93ece6cda0dec8803f66b5a45005089e8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bcc93ece6cda0dec8803f66b5a45005089e8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62bcc93ece6cda0dec8803f66b5a45005089e8ab"}, {"sha": "e547f7da588f596bf26923b12ba873878e05d51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e547f7da588f596bf26923b12ba873878e05d51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e547f7da588f596bf26923b12ba873878e05d51c"}], "stats": {"total": 145, "additions": 138, "deletions": 7}, "files": [{"sha": "739f1b5fda8982ac22693f9bfaba5d5cd75d4b03", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=f189f5bbab73b5d04faee4f4d2198f023c9e1522", "patch": "@@ -153,8 +153,24 @@ class SubstMapperInternal : public TyTy::TyVisitor\n       resolved = concrete;\n   }\n \n+  // these don't support generic arguments but might contain a type param\n+  void visit (TyTy::TupleType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  void visit (TyTy::ReferenceType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  void visit (TyTy::ParamType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  // nothing to do for these\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n-  void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n@@ -165,8 +181,6 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::ISizeType &) override { gcc_unreachable (); }\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n-  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n "}, {"sha": "b75c139d5d7c8f6b75d6f3415b6c3fcb2d8509e6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f189f5bbab73b5d04faee4f4d2198f023c9e1522", "patch": "@@ -452,7 +452,8 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t    field->get_field_type ()->set_ty_ref (argt->get_ref ());\n \t  }\n       }\n-    else if (fty->has_subsititions_defined ())\n+    else if (fty->has_subsititions_defined ()\n+\t     || fty->contains_type_parameters ())\n       {\n \tBaseType *concrete\n \t  = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -539,6 +540,29 @@ TupleType::clone ()\n \t\t\tget_combined_refs ());\n }\n \n+TupleType *\n+TupleType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  TupleType *tuple = static_cast<TupleType *> (clone ());\n+  tuple->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  for (size_t i = 0; i < tuple->fields.size (); i++)\n+    {\n+      TyVar &field = fields.at (i);\n+      if (field.get_tyty ()->contains_type_parameters ())\n+\t{\n+\t  BaseType *concrete\n+\t    = Resolver::SubstMapperInternal::Resolve (field.get_tyty (),\n+\t\t\t\t\t\t      mappings);\n+\t  tuple->fields[i] = TyVar (concrete->get_ty_ref ());\n+\t}\n+    }\n+\n+  return tuple;\n+}\n+\n void\n FnType::accept_vis (TyVisitor &vis)\n {\n@@ -558,7 +582,7 @@ FnType::as_string () const\n     }\n \n   std::string ret_str = type->as_string ();\n-  return \"fn (\" + params_str + \") -> \" + ret_str;\n+  return \"fn\" + subst_as_string () + \" (\" + params_str + \") -> \" + ret_str;\n }\n \n BaseType *\n@@ -667,7 +691,8 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t  fty->set_ty_ref (argt->get_ref ());\n \t}\n     }\n-  else if (fty->has_subsititions_defined ())\n+  else if (fty->needs_generic_substitutions ()\n+\t   || fty->contains_type_parameters ())\n     {\n       BaseType *concrete\n \t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -688,6 +713,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n   for (auto &param : fn->get_params ())\n     {\n       auto fty = param.second;\n+\n       bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n       if (is_param_ty)\n \t{\n@@ -718,7 +744,8 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t      fty->set_ty_ref (argt->get_ref ());\n \t    }\n \t}\n-      else if (fty->has_subsititions_defined ())\n+      else if (fty->has_subsititions_defined ()\n+\t       || fty->contains_type_parameters ())\n \t{\n \t  BaseType *concrete\n \t    = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -1210,6 +1237,22 @@ ReferenceType::clone ()\n \t\t\t    get_combined_refs ());\n }\n \n+ReferenceType *\n+ReferenceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  ReferenceType *ref = static_cast<ReferenceType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_base ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->base = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n ParamType::accept_vis (TyVisitor &vis)\n {\n@@ -1289,6 +1332,20 @@ ParamType::is_equal (const BaseType &other) const\n   return resolve ()->is_equal (other);\n }\n \n+ParamType *\n+ParamType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  ParamType *p = static_cast<ParamType *> (clone ());\n+\n+  SubstitutionArg arg = SubstitutionArg::error ();\n+  bool ok = mappings.get_argument_for_symbol (this, &arg);\n+  rust_assert (ok);\n+\n+  p->set_ty_ref (arg.get_tyty ()->get_ref ());\n+\n+  return p;\n+}\n+\n BaseType *\n StrType::clone ()\n {"}, {"sha": "bcc694bc6e7ec06ae59272bb9bf285abd54345db", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f189f5bbab73b5d04faee4f4d2198f023c9e1522", "patch": "@@ -122,6 +122,8 @@ class BaseType\n \n   virtual bool needs_generic_substitutions () const { return false; }\n \n+  virtual bool contains_type_parameters () const { return false; }\n+\n   std::string mappings_str () const\n   {\n     std::string buffer = \"Ref: \" + std::to_string (get_ref ())\n@@ -242,6 +244,7 @@ class ErrorType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n };\n \n+class SubstitutionArgumentMappings;\n class ParamType : public BaseType\n {\n public:\n@@ -278,6 +281,18 @@ class ParamType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n+  bool contains_type_parameters () const override final\n+  {\n+    if (can_resolve ())\n+      {\n+\tauto r = resolve ();\n+\treturn r->contains_type_parameters ();\n+      }\n+    return true;\n+  }\n+\n+  ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   std::string symbol;\n   HIR::GenericParam &param;\n@@ -364,6 +379,18 @@ class TupleType : public BaseType\n \n   std::string get_name () const override final { return as_string (); }\n \n+  bool contains_type_parameters () const override final\n+  {\n+    for (auto &f : fields)\n+      {\n+\tif (f.get_tyty ()->contains_type_parameters ())\n+\t  return true;\n+      }\n+    return false;\n+  }\n+\n+  TupleType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   std::vector<TyVar> fields;\n };\n@@ -1212,6 +1239,13 @@ class ReferenceType : public BaseType\n \n   BaseType *clone () final override;\n \n+  bool contains_type_parameters () const override final\n+  {\n+    return get_base ()->contains_type_parameters ();\n+  }\n+\n+  ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar base;\n };"}, {"sha": "dc4e935cac77429ddb91b971adde4fc4b1b259ed", "filename": "gcc/testsuite/rust.test/compile/generics21.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs?ref=f189f5bbab73b5d04faee4f4d2198f023c9e1522", "patch": "@@ -0,0 +1,13 @@\n+fn callee<T>(t: &T) -> i32 {\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    32\n+}\n+\n+fn caller(t: i32) -> i32 {\n+    callee(&t)\n+}\n+\n+fn main() {\n+    let a;\n+    a = caller(123);\n+}"}, {"sha": "465ebb0f5e145f5c5e25eef38a156ebf3d70e7f8", "filename": "gcc/testsuite/rust.test/compile/generics22.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics22.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f189f5bbab73b5d04faee4f4d2198f023c9e1522/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics22.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics22.rs?ref=f189f5bbab73b5d04faee4f4d2198f023c9e1522", "patch": "@@ -0,0 +1,13 @@\n+fn callee<T>(t: (T, bool)) -> i32 {\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    32\n+}\n+\n+fn caller(t: i32) -> i32 {\n+    callee((t, false))\n+}\n+\n+fn main() {\n+    let a;\n+    a = caller(123);\n+}"}]}