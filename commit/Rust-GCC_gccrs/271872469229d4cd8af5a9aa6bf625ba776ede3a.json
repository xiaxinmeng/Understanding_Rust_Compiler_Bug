{"sha": "271872469229d4cd8af5a9aa6bf625ba776ede3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxODcyNDY5MjI5ZDRjZDhhZjVhOWFhNmJmNjI1YmE3NzZlZGUzYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-01-18T15:09:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-18T15:09:43Z"}, "message": "tree.c (find_tree_t, find_tree): Remove.\n\n\t* tree.c (find_tree_t, find_tree): Remove.\n\t* cp-tree.h: Remove the prototype for find_tree.\n\nFrom-SVN: r109892", "tree": {"sha": "be7f36902eb44f36ceb6f4c89775fdacc8bc3e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7f36902eb44f36ceb6f4c89775fdacc8bc3e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271872469229d4cd8af5a9aa6bf625ba776ede3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271872469229d4cd8af5a9aa6bf625ba776ede3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271872469229d4cd8af5a9aa6bf625ba776ede3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271872469229d4cd8af5a9aa6bf625ba776ede3a/comments", "author": null, "committer": null, "parents": [{"sha": "b6438f2ed0fa323eedc921df2aeecb8f3d18924c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6438f2ed0fa323eedc921df2aeecb8f3d18924c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6438f2ed0fa323eedc921df2aeecb8f3d18924c"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "1ed12d615e8d02f677bad859a1e2fac5d2155b81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=271872469229d4cd8af5a9aa6bf625ba776ede3a", "patch": "@@ -1,3 +1,8 @@\n+2006-01-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree.c (find_tree_t, find_tree): Remove.\n+\t* cp-tree.h: Remove the prototype for find_tree.\n+\n 2006-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* search.c (lookup_conversions_r): Fix a pasto."}, {"sha": "bcd115dddf1ad7d2dbcea9b4545d125ad3038faa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=271872469229d4cd8af5a9aa6bf625ba776ede3a", "patch": "@@ -4287,7 +4287,6 @@ extern special_function_kind special_function_p (tree);\n extern int count_trees\t\t\t\t(tree);\n extern int char_type_p\t\t\t\t(tree);\n extern void verify_stmt_tree\t\t\t(tree);\n-extern tree find_tree\t\t\t\t(tree, tree);\n extern linkage_kind decl_linkage\t\t(tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \t\t\t      void*, struct pointer_set_t*);"}, {"sha": "9d1a6195a7922807b7e4eacdd1fab2645709b9a7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271872469229d4cd8af5a9aa6bf625ba776ede3a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=271872469229d4cd8af5a9aa6bf625ba776ede3a", "patch": "@@ -46,7 +46,6 @@ static cp_lvalue_kind lvalue_p_1 (tree, int);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n-static tree find_tree_r (tree *, int *, void *);\n static tree build_local_temp (tree);\n \n static tree handle_java_interface_attribute (tree *, tree, tree, int, bool *);\n@@ -1037,27 +1036,6 @@ verify_stmt_tree (tree t)\n   htab_delete (statements);\n }\n \n-/* Called from find_tree via walk_tree.  */\n-\n-static tree\n-find_tree_r (tree* tp,\n-\t     int* walk_subtrees ATTRIBUTE_UNUSED ,\n-\t     void* data)\n-{\n-  if (*tp == (tree) data)\n-    return (tree) data;\n-\n-  return NULL_TREE;\n-}\n-\n-/* Returns X if X appears in the tree structure rooted at T.  */\n-\n-tree\n-find_tree (tree t, tree x)\n-{\n-  return walk_tree_without_duplicates (&t, find_tree_r, x);\n-}\n-\n /* Check if the type T depends on a type with no linkage and if so, return\n    it.  If RELAXED_P then do not consider a class type declared within\n    a TREE_PUBLIC function to have no linkage.  */"}]}