{"sha": "0cdb609f43eb6131053fb88e32fdc5490f4ef293", "node_id": "C_kwDOANBUbNoAKDBjZGI2MDlmNDNlYjYxMzEwNTNmYjg4ZTMyZmRjNTQ5MGY0ZWYyOTM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T16:20:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T16:20:23Z"}, "message": "value-relation: Small tweaks to tables\n\nAs I said earlier, all these tables are used solely in value-relation.cc\nand never modified, plus because VREL_LAST is small especially the\ntwo-dimensional arrays are vast a lot of .data (or .rodata) space\n- 576 bytes each.  The following patch makes those arrays static const\nand uses unsigned char instead of relation_kind so that the\ntwo-dimensional arrays shrink to 144 bytes.\n\n2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\t* value-relation.cc (kind_string): Add const.\n\t(rr_negate_table, rr_swap_table, rr_intersect_table,\n\trr_union_table, rr_transitive_table): Add static const, change\n\telement type from relation_kind to unsigned char.\n\t(relation_negate, relation_swap, relation_intersect, relation_union,\n\trelation_transitive): Cast rr_*_table element to relation_kind.\n\t(relation_to_code): Add static const.\n\t(relation_tests): Assert VREL_LAST is smaller than UCHAR_MAX.", "tree": {"sha": "a41cbcd66ac11c3fec6ed161a4f31935a0f4c491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a41cbcd66ac11c3fec6ed161a4f31935a0f4c491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdb609f43eb6131053fb88e32fdc5490f4ef293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdb609f43eb6131053fb88e32fdc5490f4ef293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdb609f43eb6131053fb88e32fdc5490f4ef293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdb609f43eb6131053fb88e32fdc5490f4ef293/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2dddefeed258119fc24d288b697d58da9e8b7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dddefeed258119fc24d288b697d58da9e8b7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dddefeed258119fc24d288b697d58da9e8b7e3"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "5ca8a7eb0d9aa482fc74d44efaacb93a78c38169", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdb609f43eb6131053fb88e32fdc5490f4ef293/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdb609f43eb6131053fb88e32fdc5490f4ef293/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=0cdb609f43eb6131053fb88e32fdc5490f4ef293", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"dominance.h\"\n \n-static const char *kind_string[VREL_LAST] =\n+static const char *const kind_string[VREL_LAST] =\n { \"varying\", \"undefined\", \"<\", \"<=\", \">\", \">=\", \"==\", \"!=\", \"pe8\", \"pe16\",\n   \"pe32\", \"pe64\" };\n \n@@ -45,7 +45,7 @@ print_relation (FILE *f, relation_kind rel)\n }\n \n // This table is used to negate the operands.  op1 REL op2 -> !(op1 REL op2).\n-relation_kind rr_negate_table[VREL_LAST] = {\n+static const unsigned char rr_negate_table[VREL_LAST] = {\n   VREL_VARYING, VREL_UNDEFINED, VREL_GE, VREL_GT, VREL_LE, VREL_LT, VREL_NE,\n   VREL_EQ };\n \n@@ -54,11 +54,11 @@ relation_kind rr_negate_table[VREL_LAST] = {\n relation_kind\n relation_negate (relation_kind r)\n {\n-  return rr_negate_table [r];\n+  return relation_kind (rr_negate_table [r]);\n }\n \n // This table is used to swap the operands.  op1 REL op2 -> op2 REL op1.\n-relation_kind rr_swap_table[VREL_LAST] = {\n+static const unsigned char rr_swap_table[VREL_LAST] = {\n   VREL_VARYING, VREL_UNDEFINED, VREL_GT, VREL_GE, VREL_LT, VREL_LE, VREL_EQ,\n   VREL_NE };\n \n@@ -67,12 +67,12 @@ relation_kind rr_swap_table[VREL_LAST] = {\n relation_kind\n relation_swap (relation_kind r)\n {\n-  return rr_swap_table [r];\n+  return relation_kind (rr_swap_table [r]);\n }\n \n // This table is used to perform an intersection between 2 relations.\n \n-relation_kind rr_intersect_table[VREL_LAST][VREL_LAST] = {\n+static const unsigned char rr_intersect_table[VREL_LAST][VREL_LAST] = {\n // VREL_VARYING\n   { VREL_VARYING, VREL_UNDEFINED, VREL_LT, VREL_LE, VREL_GT, VREL_GE, VREL_EQ,\n     VREL_NE },\n@@ -104,13 +104,13 @@ relation_kind rr_intersect_table[VREL_LAST][VREL_LAST] = {\n relation_kind\n relation_intersect (relation_kind r1, relation_kind r2)\n {\n-  return rr_intersect_table[r1][r2];\n+  return relation_kind (rr_intersect_table[r1][r2]);\n }\n \n \n // This table is used to perform a union between 2 relations.\n \n-relation_kind rr_union_table[VREL_LAST][VREL_LAST] = {\n+static const unsigned char rr_union_table[VREL_LAST][VREL_LAST] = {\n // VREL_VARYING\n   { VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING,\n     VREL_VARYING, VREL_VARYING, VREL_VARYING },\n@@ -141,14 +141,14 @@ relation_kind rr_union_table[VREL_LAST][VREL_LAST] = {\n relation_kind\n relation_union (relation_kind r1, relation_kind r2)\n {\n-  return rr_union_table[r1][r2];\n+  return relation_kind (rr_union_table[r1][r2]);\n }\n \n \n // This table is used to determine transitivity between 2 relations.\n // (A relation0 B) and (B relation1 C) implies  (A result C)\n \n-relation_kind rr_transitive_table[VREL_LAST][VREL_LAST] = {\n+static const unsigned char rr_transitive_table[VREL_LAST][VREL_LAST] = {\n // VREL_VARYING\n   { VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING, VREL_VARYING,\n     VREL_VARYING, VREL_VARYING, VREL_VARYING },\n@@ -180,12 +180,12 @@ relation_kind rr_transitive_table[VREL_LAST][VREL_LAST] = {\n relation_kind\n relation_transitive (relation_kind r1, relation_kind r2)\n {\n-  return rr_transitive_table[r1][r2];\n+  return relation_kind (rr_transitive_table[r1][r2]);\n }\n \n // This vector maps a relation to the equivalent tree code.\n \n-tree_code relation_to_code [VREL_LAST] = {\n+static const tree_code relation_to_code [VREL_LAST] = {\n   ERROR_MARK, ERROR_MARK, LT_EXPR, LE_EXPR, GT_EXPR, GE_EXPR, EQ_EXPR,\n   NE_EXPR };\n \n@@ -1727,6 +1727,8 @@ namespace selftest\n void\n relation_tests ()\n {\n+  // rr_*_table tables use unsigned char rather than relation_kind.\n+  ASSERT_LT (VREL_LAST, UCHAR_MAX);\n   // Verify commutativity of relation_intersect and relation_union.\n   for (relation_kind r1 = VREL_VARYING; r1 < VREL_PE8;\n        r1 = relation_kind (r1 + 1))"}]}