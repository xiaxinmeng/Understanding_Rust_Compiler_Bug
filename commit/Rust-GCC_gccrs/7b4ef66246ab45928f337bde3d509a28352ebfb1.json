{"sha": "7b4ef66246ab45928f337bde3d509a28352ebfb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0ZWY2NjI0NmFiNDU5MjhmMzM3YmRlM2Q1MDlhMjgzNTJlYmZiMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-08-12T21:00:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-08-12T21:00:00Z"}, "message": "re PR rtl-optimization/49994 (ICE: in maybe_record_trace_start, at dwarf2cfi.c:2234 with -fsched2-use-superblocks)\n\nPR rtl-opt/49994\n        * sched-init.h (struct deps_desc): Add sched_before_next_jump.\n        * sched-deps.c (init_deps): Clear it.\n        (deps_analyze_insn): Consume it.\n        (sched_analyze_insn): Fill it.\n\nFrom-SVN: r177721", "tree": {"sha": "d173152d41fb9553ecaf105fbe4cff33fa1e10b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d173152d41fb9553ecaf105fbe4cff33fa1e10b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b4ef66246ab45928f337bde3d509a28352ebfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4ef66246ab45928f337bde3d509a28352ebfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4ef66246ab45928f337bde3d509a28352ebfb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4ef66246ab45928f337bde3d509a28352ebfb1/comments", "author": null, "committer": null, "parents": [{"sha": "c789cb7756423b73379c821307c7005a14ab8adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c789cb7756423b73379c821307c7005a14ab8adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c789cb7756423b73379c821307c7005a14ab8adc"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "3aa3a5d7a386dd2b49ee9db4e61dbb87c176cc3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -1,3 +1,11 @@\n+2011-08-12  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/49994\n+\t* sched-init.h (struct deps_desc): Add sched_before_next_jump.\n+\t* sched-deps.c (init_deps): Clear it.\n+\t(deps_analyze_insn): Consume it.\n+\t(sched_analyze_insn): Fill it.\n+\n 2011-08-12  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n         PR target/48328"}, {"sha": "ed592c8278a25a499745a7cf1db3dc2763607037", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -2696,6 +2696,18 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n     add_dependence_list (insn, deps->last_function_call_may_noreturn,\n \t\t\t 1, REG_DEP_ANTI);\n \n+  /* We must avoid creating a situation in which two successors of the\n+     current block have different unwind info after scheduling.  If at any\n+     point the two paths re-join this leads to incorrect unwind info.  */\n+  /* ??? There are certain situations involving a forced frame pointer in\n+     which, with extra effort, we could fix up the unwind info at a later\n+     CFG join.  However, it seems better to notice these cases earlier\n+     during prologue generation and avoid marking the frame pointer setup\n+     as frame-related at all.  */\n+  if (RTX_FRAME_RELATED_P (insn))\n+    deps->sched_before_next_jump\n+      = alloc_INSN_LIST (insn, deps->sched_before_next_jump);\n+\n   if (code == COND_EXEC)\n     {\n       sched_analyze_2 (deps, COND_EXEC_TEST (x), insn);\n@@ -3302,12 +3314,11 @@ deps_analyze_insn (struct deps_desc *deps, rtx insn)\n   if (NONDEBUG_INSN_P (insn))\n     sched_get_condition_with_rev (insn, NULL);\n \n-  if (NONJUMP_INSN_P (insn) || DEBUG_INSN_P (insn) || JUMP_P (insn))\n+  if (JUMP_P (insn))\n     {\n       /* Make each JUMP_INSN (but not a speculative check)\n          a scheduling barrier for memory references.  */\n       if (!deps->readonly\n-          && JUMP_P (insn)\n           && !(sel_sched_p ()\n                && sel_insn_is_speculation_check (insn)))\n         {\n@@ -3326,6 +3337,15 @@ deps_analyze_insn (struct deps_desc *deps, rtx insn)\n \t    }\n         }\n \n+      /* For each insn which shouldn't cross a jump, add a dependence.  */\n+      add_dependence_list_and_free (deps, insn,\n+\t\t\t\t    &deps->sched_before_next_jump, 1,\n+\t\t\t\t    REG_DEP_ANTI);\n+\n+      sched_analyze_insn (deps, PATTERN (insn), insn);\n+    }\n+  else if (NONJUMP_INSN_P (insn) || DEBUG_INSN_P (insn))\n+    {\n       sched_analyze_insn (deps, PATTERN (insn), insn);\n     }\n   else if (CALL_P (insn))\n@@ -3571,6 +3591,7 @@ init_deps (struct deps_desc *deps, bool lazy_reg_last)\n   deps->last_function_call = 0;\n   deps->last_function_call_may_noreturn = 0;\n   deps->sched_before_next_call = 0;\n+  deps->sched_before_next_jump = 0;\n   deps->in_post_call_group_p = not_post_call;\n   deps->last_debug_insn = 0;\n   deps->last_reg_pending_barrier = NOT_A_BARRIER;"}, {"sha": "6797397b9bba8e1f538528edb760372929b2e91c", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -496,6 +496,9 @@ struct deps_desc\n      scheduling is done.  */\n   rtx sched_before_next_call;\n \n+  /* Similarly, a list of insns which should not cross a branch.  */\n+  rtx sched_before_next_jump;\n+\n   /* Used to keep post-call pseudo/hard reg movements together with\n      the call.  */\n   enum post_call_group in_post_call_group_p;"}, {"sha": "902466110a573c3ff38ad78ebc7d9eebeb269626", "filename": "gcc/testsuite/gcc.dg/pr49994-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-1.c?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fsched2-use-superblocks -g\" } */\n+\n+void x (int a)\n+{\n+  __label__ xlab;\n+  void y (int b)\n+  {\n+    switch (b)\n+      {\n+      case 1:\n+\tgoto xlab;\n+      case 2:\n+\tgoto xlab;\n+      }\n+  }\n+  y (a);\n+xlab:;\n+}"}, {"sha": "92764fe6156698f4715a43cca27881ddebf21615", "filename": "gcc/testsuite/gcc.dg/pr49994-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-2.c?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-omit-frame-pointer -fschedule-insns2 -fsched2-use-superblocks -g\" } */\n+\n+int\n+bar (int i)\n+{\n+  while (i)\n+    if (i)\n+      return i;\n+}\n+\n+void\n+foo ()\n+{\n+  bar (0);\n+}"}, {"sha": "874db966653c9fd12be7118589c936c5e210eb56", "filename": "gcc/testsuite/gcc.dg/pr49994-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4ef66246ab45928f337bde3d509a28352ebfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49994-3.c?ref=7b4ef66246ab45928f337bde3d509a28352ebfb1", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsched2-use-superblocks -g\" } */\n+\n+void *\n+foo (int offset)\n+{\n+  switch (offset)\n+    {\n+    case 0:\n+      return __builtin_return_address (0);\n+    case 1:\n+      return __builtin_return_address (1);\n+    case 2:\n+      return __builtin_return_address (2);\n+    case 3:\n+      return __builtin_return_address (3);\n+    case 4:\n+      return __builtin_return_address (4);\n+    }\n+  return 0;\n+}"}]}