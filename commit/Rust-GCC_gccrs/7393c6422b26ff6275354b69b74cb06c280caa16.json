{"sha": "7393c6422b26ff6275354b69b74cb06c280caa16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5M2M2NDIyYjI2ZmY2Mjc1MzU0YjY5Yjc0Y2IwNmMyODBjYWExNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-08-16T01:15:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-16T01:15:37Z"}, "message": "calls.c (ECF_SP_DEPRESSED): New macro.\n\n\t* calls.c (ECF_SP_DEPRESSED): New macro.\n\t(calls_function_1): Treat calling sp-depressed function as alloca.\n\t(emit_call_1): Don't adjust SP if calling sp-depressed function.\n\t(expand_call): Set ECF_SP_DEPRESSED if TYPE_RETURNS_STACK_DEPRESSED.\n\tIf sp-depressed, ensure block saves and restores SP.\n\t* fold-const.c (extract_muldiv): Only check TYPE_IS_SIZETYPE\n\tfor INTEGER_TYPE.\n\t* function.c (keep_stack_depressed): New function.\n\t(thread_prologue_and_epilogue_insns): Call it.\n\t* print-tree.c (print_node): Use HOST_WIDE_INT_PRINT_UNSIGNED\n\tto print DECL_OFFSET_ALIGN.\n\tPrint no-force-blk and transparent-union flags properly.\n\t* stmt.c (expand_goto_internal): Don't restore stack if last block\n\tand function returns with sp depressed.\n\t(fixup_gotos): Likewise.\n\t(save_stack_pointer): New function, from code in expand_decl.\n\t(expand_decl): Call new function.\n\t* tree.h (TYPE_IS_SIZETYPE): Call INTEGER_TYPE_CHECK.\n\t(TYPE_RETURNS_STACK_DEPRESSED): New macro.\n\t(save_stack_pointer): New declaration.\n\nFrom-SVN: r35734", "tree": {"sha": "fae62ef4946025fccda89bb881cd3b03f4785068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae62ef4946025fccda89bb881cd3b03f4785068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7393c6422b26ff6275354b69b74cb06c280caa16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393c6422b26ff6275354b69b74cb06c280caa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7393c6422b26ff6275354b69b74cb06c280caa16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393c6422b26ff6275354b69b74cb06c280caa16/comments", "author": null, "committer": null, "parents": [{"sha": "81baa09a56392e03742b4b253b9fd82b3ecbd783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81baa09a56392e03742b4b253b9fd82b3ecbd783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81baa09a56392e03742b4b253b9fd82b3ecbd783"}], "stats": {"total": 194, "additions": 170, "deletions": 24}, "files": [{"sha": "1a08964e375a8d55fe58d895b65a61c5c3383ed2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -1,5 +1,26 @@\n Tue Aug 15 17:33:05 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* calls.c (ECF_SP_DEPRESSED): New macro.\n+\t(calls_function_1): Treat calling sp-depressed function as alloca.\n+\t(emit_call_1): Don't adjust SP if calling sp-depressed function.\n+\t(expand_call): Set ECF_SP_DEPRESSED if TYPE_RETURNS_STACK_DEPRESSED.\n+\tIf sp-depressed, ensure block saves and restores SP.\n+\t* fold-const.c (extract_muldiv): Only check TYPE_IS_SIZETYPE\n+\tfor INTEGER_TYPE.\n+\t* function.c (keep_stack_depressed): New function.\n+\t(thread_prologue_and_epilogue_insns): Call it.\n+\t* print-tree.c (print_node): Use HOST_WIDE_INT_PRINT_UNSIGNED\n+\tto print DECL_OFFSET_ALIGN.\n+\tPrint no-force-blk and transparent-union flags properly.\n+\t* stmt.c (expand_goto_internal): Don't restore stack if last block\n+\tand function returns with sp depressed.\n+\t(fixup_gotos): Likewise.\n+\t(save_stack_pointer): New function, from code in expand_decl.\n+\t(expand_decl): Call new function.\n+\t* tree.h (TYPE_IS_SIZETYPE): Call INTEGER_TYPE_CHECK.\n+\t(TYPE_RETURNS_STACK_DEPRESSED): New macro.\n+\t(save_stack_pointer): New declaration.\n+\n \t* diagnostic.c (fatal_function): New variable.\n \t(set_fatal_function): New function.\n \t(fatal): Call it."}, {"sha": "cd4fed72825f20e26d7e22b8e7a4def776eb0153", "filename": "gcc/calls.c", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -184,6 +184,9 @@ static int calls_function_1\tPARAMS ((tree, int));\n /* Nonzero if this is a call to \"pure\" function (like const function,\n    but may read memory.  */\n #define ECF_PURE\t\t512\n+/* Nonzero if this is a call to a function that returns with the stack\n+   pointer depressed.  */\n+#define ECF_SP_DEPRESSED\t1024\n \n static void emit_call_1\t\tPARAMS ((rtx, tree, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, HOST_WIDE_INT, rtx,\n@@ -278,6 +281,9 @@ calls_function_1 (exp, which)\n     case CALL_EXPR:\n       if (which == 0)\n \treturn 1;\n+      else if (TYPE_RETURNS_STACK_DEPRESSED\n+\t       (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n+\treturn 1;\n       else if (TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR\n \t       && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n \t\t   == FUNCTION_DECL)\n@@ -428,8 +434,8 @@ prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen)\n    We restore `inhibit_defer_pop' to that value.\n \n    CALL_FUSAGE is either empty or an EXPR_LIST of USE expressions that\n-   denote registers used by the called function.  */\n-\n+   denote registers used by the called function.   */\n+  \n static void\n emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \t     struct_value_size, next_arg_reg, valreg, old_inhibit_defer_pop,\n@@ -495,7 +501,7 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n    even if the call has no arguments to pop.  */\n #if defined (HAVE_call) && defined (HAVE_call_value)\n   if (HAVE_call && HAVE_call_value && HAVE_call_pop && HAVE_call_value_pop\n-      && n_popped > 0)\n+      && n_popped > 0 && ! (ecf_flags & ECF_SP_DEPRESSED))\n #else\n   if (HAVE_call_pop && HAVE_call_value_pop)\n #endif\n@@ -624,10 +630,10 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \t If returning from the subroutine does pop the args, indicate that the\n \t stack pointer will be changed.  */\n \n-      if (rounded_stack_size != 0)\n+      if (rounded_stack_size != 0 && ! (ecf_flags & ECF_SP_DEPRESSED))\n \t{\n \t  if (flag_defer_pop && inhibit_defer_pop == 0\n-\t      && !(ecf_flags & (ECF_CONST | ECF_PURE)))\n+\t      && ! (ecf_flags & (ECF_CONST | ECF_PURE)))\n \t    pending_stack_adjust += rounded_stack_size;\n \t  else\n \t    adjust_stack (rounded_stack_size_rtx);\n@@ -756,6 +762,7 @@ special_function_p (fndecl, flags)\n }\n \n /* Return nonzero when tree represent call to longjmp.  */\n+\n int\n setjmp_call_p (fndecl)\n      tree fndecl;\n@@ -764,11 +771,13 @@ setjmp_call_p (fndecl)\n }\n \n /* Detect flags (function attributes) from the function type node.  */\n+\n static int\n flags_from_decl_or_type (exp)\n      tree exp;\n {\n   int flags = 0;\n+\n   /* ??? We can't set IS_MALLOC for function types?  */\n   if (DECL_P (exp))\n     {\n@@ -784,7 +793,7 @@ flags_from_decl_or_type (exp)\n \tflags |= ECF_NOTHROW;\n     }\n \n-  if (TREE_READONLY (exp) && !TREE_THIS_VOLATILE (exp))\n+  if (TREE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp))\n     flags |= ECF_CONST;\n \n   if (TREE_THIS_VOLATILE (exp))\n@@ -2131,7 +2140,7 @@ expand_call (exp, target, ignore)\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   int old_stack_allocated;\n   rtx call_fusage;\n-  register tree p;\n+  register tree p = TREE_OPERAND (exp, 0);\n   register int i;\n   /* The alignment of the stack, in bits.  */\n   HOST_WIDE_INT preferred_stack_boundary;\n@@ -2183,9 +2192,13 @@ expand_call (exp, target, ignore)\n   /* If we don't have specific function to call, see if we have a \n      attributes set in the type.  */\n   else\n+    flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+\n+  /* Mark if the function returns with the stack pointer depressed.  */\n+  if (TYPE_RETURNS_STACK_DEPRESSED (TREE_TYPE (TREE_TYPE (p))))\n     {\n-      p = TREE_OPERAND (exp, 0);\n-      flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+      flags |= ECF_SP_DEPRESSED;\n+      flags &= ~ (ECF_PURE | ECF_CONST);\n     }\n \n #ifdef REG_PARM_STACK_SPACE\n@@ -3271,7 +3284,7 @@ expand_call (exp, target, ignore)\n       /* If size of args is variable or this was a constructor call for a stack\n \t argument, restore saved stack-pointer value.  */\n \n-      if (old_stack_level)\n+      if (old_stack_level && ! (flags & ECF_SP_DEPRESSED))\n \t{\n \t  emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);\n \t  pending_stack_adjust = old_pending_adj;\n@@ -3412,6 +3425,17 @@ expand_call (exp, target, ignore)\n \n   currently_expanding_call--;\n \n+  /* If this function returns with the stack pointer depressed, ensure\n+     this block saves and restores the stack pointer, show it was\n+     changed, and adjust for any outgoing arg space.  */\n+  if (flags & ECF_SP_DEPRESSED)\n+    {\n+      clear_pending_stack_adjust ();\n+      emit_insn (gen_rtx (CLOBBER, VOIDmode, stack_pointer_rtx));\n+      emit_move_insn (virtual_stack_dynamic_rtx, stack_pointer_rtx);\n+      save_stack_pointer ();\n+    }\n+\n   return target;\n }\n \f"}, {"sha": "88ee674c4f0a5beb6608169d9d53e4b01e24caf2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -4402,7 +4402,8 @@ extract_muldiv (t, c, code, wide_type)\n \t   || TREE_CODE_CLASS (TREE_CODE (op0)) == '2'\n \t   || TREE_CODE_CLASS (TREE_CODE (op0)) == 'e')\n \t  && TREE_UNSIGNED (TREE_TYPE (op0))\n-\t  && ! TYPE_IS_SIZETYPE (TREE_TYPE (op0))\n+\t  && ! (TREE_CODE (TREE_TYPE (op0)) == INTEGER_TYPE\n+\t\t&& TYPE_IS_SIZETYPE (TREE_TYPE (op0)))\n \t  && (GET_MODE_SIZE (TYPE_MODE (ctype))\n               > GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op0)))))\n \tbreak;\n@@ -4527,7 +4528,7 @@ extract_muldiv (t, c, code, wide_type)\n \t the operation since it will change the result if the original\n \t computation overflowed.  */\n       if (TREE_UNSIGNED (ctype)\n-\t  && ! TYPE_IS_SIZETYPE (ctype)\n+\t  && ! (TREE_CODE (ctype) == INTEGER_TYPE && TYPE_IS_SIZETYPE (ctype))\n \t  && ctype != type)\n \tbreak;\n \n@@ -4591,7 +4592,7 @@ extract_muldiv (t, c, code, wide_type)\n \t this since it will change the result if the original computation\n \t overflowed.  */\n       if ((! TREE_UNSIGNED (ctype)\n-\t   || TYPE_IS_SIZETYPE (ctype))\n+\t   || (TREE_CODE (ctype) == INTEGER_TYPE && TYPE_IS_SIZETYPE (ctype)))\n \t  && ((code == MULT_EXPR && tcode == EXACT_DIV_EXPR)\n \t      || (tcode == MULT_EXPR\n \t\t  && code != TRUNC_MOD_EXPR && code != CEIL_MOD_EXPR"}, {"sha": "975ecdd66d6af10c8a54a0a5dc202ef049ea936a", "filename": "gcc/function.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -294,6 +294,9 @@ static void emit_return_into_block PARAMS ((basic_block, rtx));\n static void put_addressof_into_stack PARAMS ((rtx, struct hash_table *));\n static boolean purge_addressof_1 PARAMS ((rtx *, rtx, int, int,\n \t\t\t\t\t  struct hash_table *));\n+#ifdef HAVE_epilogue\n+static void keep_stack_depressed PARAMS ((rtx));\n+#endif\n static int is_addressof\t\tPARAMS ((rtx *, void *));\n static struct hash_entry *insns_for_mem_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t struct hash_table *,\n@@ -6808,6 +6811,68 @@ emit_return_into_block (bb, line_note)\n }\n #endif /* HAVE_return */\n \n+#ifdef HAVE_epilogue\n+\n+/* Modify SEQ, a SEQUENCE that is part of the epilogue, to no modifications\n+   to the stack pointer.  */\n+\n+static void\n+keep_stack_depressed (seq)\n+     rtx seq;\n+{\n+  int i;\n+  rtx sp_from_reg = 0;\n+  int sp_modified_unknown = 0;\n+\n+  /* If the epilogue is just a single instruction, it's OK as is */\n+\n+  if (GET_CODE (seq) != SEQUENCE) return;\n+\n+  /* Scan all insns in SEQ looking for ones that modified the stack\n+     pointer.  Record if it modified the stack pointer by copying it\n+     from the frame pointer or if it modified it in some other way.\n+     Then modify any subsequent stack pointer references to take that\n+     into account.  We start by only allowing SP to be copied from a\n+     register (presumably FP) and then be subsequently referenced.  */\n+\n+  for (i = 0; i < XVECLEN (seq, 0); i++)\n+    {\n+      rtx insn = XVECEXP (seq, 0, i);\n+\n+      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\tcontinue;\n+\n+      if (reg_set_p (stack_pointer_rtx, insn))\n+\t{\n+\t  rtx set = single_set (insn);\n+\n+\t  /* If SP is set as a side-effect, we can't support this.  */\n+\t  if (set == 0)\n+\t    abort ();\n+\n+\t  if (GET_CODE (SET_SRC (set)) == REG)\n+\t    sp_from_reg = SET_SRC (set);\n+\t  else\n+\t    sp_modified_unknown = 1;\n+\n+\t  /* Don't allow the SP modification to happen.  */\n+\t  PUT_CODE (insn, NOTE);\n+\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n+\t  NOTE_SOURCE_FILE (insn) = 0;\n+\t}\n+      else if (reg_referenced_p (stack_pointer_rtx, PATTERN (insn)))\n+\t{\n+\t  if (sp_modified_unknown)\n+\t    abort ();\n+\n+\t  else if (sp_from_reg != 0)\n+\t    PATTERN (insn)\n+\t      = replace_rtx (PATTERN (insn), stack_pointer_rtx, sp_from_reg);\n+\t}\n+    }\n+}\n+#endif\n+\n /* Generate the prologue and epilogue RTL if the machine supports it.  Thread\n    this into place with notes indicating where the prologue ends and where\n    the epilogue begins.  Update the basic block information when possible.  */\n@@ -6990,6 +7055,12 @@ thread_prologue_and_epilogue_insns (f)\n       epilogue_end = emit_note (NULL, NOTE_INSN_EPILOGUE_BEG);\n \n       seq = gen_epilogue ();\n+\n+      /* If this function returns with the stack depressed, massage\n+\t the epilogue to actually do that.  */\n+      if (TYPE_RETURNS_STACK_DEPRESSED (TREE_TYPE (current_function_decl)))\n+\tkeep_stack_depressed (seq);\n+\n       emit_jump_insn (seq);\n \n       /* Retain a map of the epilogue insns.  */"}, {"sha": "6ecfcd2263ba7559b2d16ba9774cd416793eee9a", "filename": "gcc/stmt.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -903,7 +903,15 @@ expand_goto_internal (body, label, last_insn)\n \t     deleted as dead by flow.  */\n \t  clear_pending_stack_adjust ();\n \t  do_pending_stack_adjust ();\n-\t  emit_stack_restore (SAVE_BLOCK, stack_level, NULL_RTX);\n+\n+\t  /* Don't do this adjust if it's to the end label and this function\n+\t     is to return with a depressed stack pointer.  */\n+\t  if (label == return_label\n+\t      && (TYPE_RETURNS_STACK_DEPRESSED\n+\t\t  (TREE_TYPE (current_function_decl))))\n+\t    ;\n+\t  else\n+\t    emit_stack_restore (SAVE_BLOCK, stack_level, NULL_RTX);\n \t}\n \n       if (body != 0 && DECL_TOO_LATE (body))\n@@ -1182,7 +1190,10 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \n \t  /* Restore stack level for the biggest contour that this\n \t     jump jumps out of.  */\n-\t  if (f->stack_level)\n+\t  if (f->stack_level\n+\t      && ! (f->target_rtl == return_label\n+\t\t    && (TYPE_RETURNS_STACK_DEPRESSED \n+\t\t\t(TREE_TYPE (current_function_decl)))))\n \t    emit_stack_restore (SAVE_BLOCK, f->stack_level, f->before_jump);\n \n \t  /* Finish up the sequence containing the insns which implement the\n@@ -3667,6 +3678,23 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n   pop_temp_slots ();\n }\n \f\n+/* Generate code to save the stack pointer at the start of the current block\n+   and set up to restore it on exit.  */\n+\n+void\n+save_stack_pointer ()\n+{\n+  struct nesting *thisblock = block_stack;\n+\n+  if (thisblock->data.block.stack_level == 0)\n+    {\n+      emit_stack_save (thisblock->next ? SAVE_BLOCK : SAVE_FUNCTION,\n+\t\t       &thisblock->data.block.stack_level,\n+\t\t       thisblock->data.block.first_insn);\n+      stack_block_stack = thisblock;\n+    }\n+}\n+\f\n /* Generate RTL for the automatic variable declaration DECL.\n    (Other kinds of declarations are simply ignored if seen here.)  */\n \n@@ -3777,14 +3805,8 @@ expand_decl (decl)\n \n       /* Record the stack pointer on entry to block, if have\n \t not already done so.  */\n-      if (thisblock->data.block.stack_level == 0)\n-\t{\n-\t  do_pending_stack_adjust ();\n-\t  emit_stack_save (thisblock->next ? SAVE_BLOCK : SAVE_FUNCTION,\n-\t\t\t   &thisblock->data.block.stack_level,\n-\t\t\t   thisblock->data.block.first_insn);\n-\t  stack_block_stack = thisblock;\n-\t}\n+      do_pending_stack_adjust ();\n+      save_stack_pointer ();\n \n       /* In function-at-a-time mode, variable_size doesn't expand this,\n \t so do it now.  */"}, {"sha": "001e776cf2da500c73fa30da826ca59c7402429d", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393c6422b26ff6275354b69b74cb06c280caa16/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7393c6422b26ff6275354b69b74cb06c280caa16", "patch": "@@ -954,7 +954,13 @@ struct tree_block\n /* In an INTEGER_TYPE, it means the type represents a size.  We use this\n    both for validity checking and to permit optimziations that are unsafe\n    for other types.  */\n-#define TYPE_IS_SIZETYPE(NODE) (TYPE_CHECK (NODE)->type.no_force_blk_flag)\n+#define TYPE_IS_SIZETYPE(NODE) \\\n+  (INTEGER_TYPE_CHECK (NODE)->type.no_force_blk_flag)\n+\n+/* In a FUNCTION_TYPE, indicates that the function returns with the stack\n+   pointer depressed.  */\n+#define TYPE_RETURNS_STACK_DEPRESSED(NODE) \\\n+  (FUNCTION_TYPE_CHECK(NODE)->type.no_force_blk_flag)\n \n /* Nonzero in a type considered volatile as a whole.  */\n #define TYPE_VOLATILE(NODE) ((NODE)->common.volatile_flag)\n@@ -2811,6 +2817,7 @@ extern int drop_through_at_end_p\tPARAMS ((void));\n extern void expand_start_target_temps\tPARAMS ((void));\n extern void expand_end_target_temps\tPARAMS ((void));\n extern void expand_elseif\t\tPARAMS ((tree));\n+extern void save_stack_pointer\t\tPARAMS ((void));\n extern void expand_decl\t\t\tPARAMS ((tree));\n extern int expand_decl_cleanup\t\tPARAMS ((tree, tree));\n extern void expand_anon_union_decl\tPARAMS ((tree, tree, tree));"}]}