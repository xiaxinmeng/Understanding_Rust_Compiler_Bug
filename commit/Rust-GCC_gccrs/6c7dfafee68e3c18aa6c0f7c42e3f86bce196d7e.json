{"sha": "6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3ZGZhZmVlNjhlM2MxOGFhNmMwZjdjNDJlM2Y4NmJjZTE5NmQ3ZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-29T11:51:59Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-29T11:51:59Z"}, "message": "re PR target/50566 ([avr]: Add support for better logging similar to -mdeb)\n\n\tPR target/50566\n\t* config.gcc (extra_objs): Add avr-log.o for $target in:\n\tavr-*-rtems*, avr-*-*.\n\t* config/avr/t-avr (avr-log.o): New rule to compile...\n\t* config/avr/avr-log.c: ...this new file.\n\t* config/avr/avr.opt (mlog=): New option.\n\t* config/avr/avr-protos.h (avr_edump, avr_fdump): New macros.\n\t(avr_log_set_caller_e, avr_log_set_caller_f): New prototypes.\n\t(avr_log_set_avr_log): New prototype.\n\t(avr_log_t): New typedef.\n\t(avr_log): New declaration.\n\t* config/avr/avr.c (avr_option_override): Call avr_log_set_avr_log.\n\nFrom-SVN: r179344", "tree": {"sha": "a686f9d9d2c7a4dd98ad61ff4e2b8ce052f3bc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a686f9d9d2c7a4dd98ad61ff4e2b8ce052f3bc0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec7773c94d61d2b47632b9394abbc78417afa21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec7773c94d61d2b47632b9394abbc78417afa21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec7773c94d61d2b47632b9394abbc78417afa21"}], "stats": {"total": 368, "additions": 366, "deletions": 2}, "files": [{"sha": "5cf8ceaad107b78d90017bd2b8da3efa6c67f689", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -1,3 +1,18 @@\n+2011-09-29  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50566\n+\t* config.gcc (extra_objs): Add avr-log.o for $target in:\n+\tavr-*-rtems*, avr-*-*.\n+\t* config/avr/t-avr (avr-log.o): New rule to compile...\n+\t* config/avr/avr-log.c: ...this new file.\n+\t* config/avr/avr.opt (mlog=): New option.\n+\t* config/avr/avr-protos.h (avr_edump, avr_fdump): New macros.\n+\t(avr_log_set_caller_e, avr_log_set_caller_f): New prototypes.\n+\t(avr_log_set_avr_log): New prototype.\n+\t(avr_log_t): New typedef.\n+\t(avr_log): New declaration.\n+\t* config/avr/avr.c (avr_option_override): Call avr_log_set_avr_log.\n+\n 2011-09-29  Artjoms Sinkarovs <artyom.shinkaroff@gmail.com>\n \n \t* expr.c (do_store_flag): Expand vector comparison by"}, {"sha": "24564025aef5b762862aa79b54d3232486d5694b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -939,14 +939,14 @@ avr-*-rtems*)\n \tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n-\textra_objs=\"avr-devices.o\"\n+\textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n avr-*-*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h newlib-stdint.h\"\n \tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n-\textra_objs=\"avr-devices.o\"\n+\textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n bfin*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h\""}, {"sha": "87cbd2357ac8c7df1c42340f35114a5e58f5424f", "filename": "gcc/config/avr/avr-log.c", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -0,0 +1,319 @@\n+/* Subroutines for log output for Atmel AVR back end.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay (avr@gjlay.de)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"tree.h\"\n+#include \"output.h\"\n+#include \"input.h\"\n+#include \"function.h\"\n+#include \"tm_p.h\"\n+#include \"tree-pass.h\"\n+\n+/* This file supplies some functions for AVR back-end developers\n+   with a printf-like interface.  The functions are called through\n+   macros avr_edump or avr_fdump from avr-protos.h:\n+\n+      avr_edump (const char * fmt, ...);\n+\n+      avr_fdump (FILE * stream, const char * fmt, ...);\n+\n+   avr_edump (fmt, ...) is a shortcut for avr_fdump (stderr, fmt, ...)\n+\n+  == known %-codes ==\n+  \n+  r: rtx\n+  t: tree\n+  T: tree (brief)\n+  C: enum rtx_code\n+  m: enum machine_mode\n+  R: enum reg_class\n+  L: insn list\n+  H: location_t\n+\n+  == no arguments ==\n+  \n+  A: call abort()\n+  f: current_function_name()\n+  F: caller (via __FUNCTION__)\n+  P: Pass name and number\n+  ?: Print caller, current function and pass info\n+\n+  == same as printf ==\n+  \n+  %: %\n+  c: char\n+  s: string\n+  d: int (decimal)\n+  x: int (hex)\n+*/\n+\n+/* Set according to -mlog= option.  */\n+avr_log_t avr_log;\n+\n+/* The caller as of __FUNCTION__ */\n+static const char *avr_log_caller = \"?\";\n+\n+/* The worker function implementing the %-codes */\n+static void avr_log_vadump (FILE*, const char*, va_list);\n+\n+/* As we have no variadic macros, avr_edump maps to a call to\n+   avr_log_set_caller_e which saves __FUNCTION__ to avr_log_caller and\n+   returns a function pointer to avr_log_fdump_e.  avr_fdump_e\n+   gets the printf-like arguments and calls avr_log_vadump, the\n+   worker function. avr_fdump works the same way.  */\n+\n+/* Provide avr_log_fdump_e/f so that avr_log_set_caller_e/_f can return\n+   their address.  */\n+\n+static int\n+avr_log_fdump_e (const char *fmt, ...)\n+{\n+  va_list ap;\n+        \n+  va_start (ap, fmt);\n+  avr_log_vadump (stderr, fmt, ap);\n+  va_end (ap);\n+    \n+  return 1;\n+}\n+\n+static int\n+avr_log_fdump_f (FILE *stream, const char *fmt, ...)\n+{\n+  va_list ap;\n+        \n+  va_start (ap, fmt);\n+  if (stream)\n+    avr_log_vadump (stream, fmt, ap);\n+  va_end (ap);\n+    \n+  return 1;\n+}\n+\n+/* Macros avr_edump/avr_fdump map to calls of the following two functions,\n+   respectively.  You don't need to call them directly.  */\n+\n+int (*\n+avr_log_set_caller_e (const char *caller)\n+     )(const char*, ...)\n+{\n+  avr_log_caller = caller;\n+  \n+  return avr_log_fdump_e;\n+}\n+\n+int (*\n+avr_log_set_caller_f (const char *caller)\n+     )(FILE*, const char*, ...)\n+{\n+  avr_log_caller = caller;\n+\n+  return avr_log_fdump_f;\n+}\n+\n+/* Worker function implementing the %-codes and forwarning to\n+   respective print/dump function.  */\n+\n+static void\n+avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n+{\n+  char bs[3] = {'\\\\', '?', '\\0'};\n+\n+  while (*fmt)\n+    {\n+      switch (*fmt++)\n+        {\n+        default:\n+          fputc (*(fmt-1), file);\n+          break;\n+          \n+        case '\\\\':\n+          bs[1] = *fmt++;\n+          fputs (bs, file);\n+          break;\n+          \n+        case '%':\n+          switch (*fmt++)\n+            {\n+            case '%':\n+              fputc ('%', file);\n+              break;\n+              \n+            case 't':\n+              {\n+                tree t = va_arg (ap, tree);\n+                if (NULL_TREE == t)\n+                  fprintf (file, \"<NULL-TREE>\");\n+                else\n+                  {\n+                    if (stderr == file)\n+                      debug_tree (t);\n+                    else\n+                      {\n+                        print_node (file, \"\", t, 0);\n+                        putc ('\\n', file);\n+                      }\n+                  }\n+                break;\n+              }\n+              \n+            case 'T':\n+              print_node_brief (file, \"\", va_arg (ap, tree), 3);\n+              break;\n+              \n+            case 'd':\n+              fprintf (file, \"%d\", va_arg (ap, int));\n+              break;\n+              \n+            case 'x':\n+              fprintf (file, \"%x\", va_arg (ap, int));\n+              break;\n+                        \n+            case 'c':\n+              fputc (va_arg (ap, int), file);\n+              break;\n+                        \n+            case 'r':\n+              print_inline_rtx (file, va_arg (ap, rtx), 0);\n+              break;\n+                        \n+            case 'L':\n+              {\n+                rtx insn = va_arg (ap, rtx);\n+\n+                while (insn)\n+                  {\n+                    print_inline_rtx (file, insn, 0);\n+                    fprintf (file, \"\\n\");\n+                    insn = NEXT_INSN (insn);\n+                  }\n+                break;\n+              }\n+                        \n+            case 'f':\n+              if (cfun && cfun->decl)\n+                fputs (current_function_name(), file);\n+              break;\n+                        \n+            case 's':\n+              {\n+                const char *str = va_arg (ap, char*);\n+                fputs (str ? str : \"(null)\", file);\n+              }\n+              break;\n+                        \n+            case 'm':\n+              fputs (GET_MODE_NAME (va_arg (ap, enum machine_mode)), file);\n+              break;\n+              \n+            case 'C':\n+              fputs (rtx_name[va_arg (ap, enum rtx_code)], file);\n+              break;\n+              \n+            case 'R':\n+              fputs (reg_class_names[va_arg (ap, enum reg_class)], file);\n+              break;\n+              \n+            case 'F':\n+              fputs (avr_log_caller, file);\n+              break;\n+              \n+            case 'H':\n+              {\n+                location_t loc = va_arg (ap, location_t);\n+                \n+                if (BUILTINS_LOCATION == loc)\n+                  fprintf (file, \"<BUILTIN-LOCATION\");\n+                else if (UNKNOWN_LOCATION == loc)\n+                  fprintf (file, \"<UNKNOWN-LOCATION>\");\n+                else\n+                  fprintf (file, \"%s:%d\",\n+                           LOCATION_FILE (loc), LOCATION_LINE (loc));\n+                \n+                break;\n+              }\n+              \n+            case '!':\n+              if (!current_pass)\n+                return;\n+              /* FALLTHRU */\n+              \n+            case '?':\n+              avr_log_fdump_f (file, \"%F[%f:%P]\");\n+              break;\n+                        \n+            case 'P':\n+              if (current_pass)\n+                fprintf (file, \"%s(%d)\", \n+                         current_pass->name,\n+                         current_pass->static_pass_number);\n+              else\n+                fprintf (file, \"pass=?\");\n+                        \n+              break;\n+                        \n+            case 'A':\n+              fflush (file);\n+              abort();\n+              \n+            default:\n+              fputc (*(fmt-1), file);\n+            }\n+          break; /* % */\n+        }\n+    }\n+    \n+  fflush (file);\n+}\n+\n+\n+/* Called from avr.c:avr_option_override().\n+   Parse argument of -mlog= and set respective fields in avr_log.  */\n+\n+void\n+avr_log_set_avr_log (void)\n+{\n+  if (avr_log_details)\n+    {\n+      /* Adding , at beginning and end of string makes searching easier.  */\n+      \n+      char *str = (char*) alloca (3 + strlen (avr_log_details));\n+      \n+      str[0] = ',';\n+      strcat (stpcpy (str+1, avr_log_details), \",\");\n+      \n+#define SET_DUMP_DETAIL(S)                                              \\\n+      avr_log.S = (TARGET_ALL_DEBUG                                     \\\n+                   || NULL != strstr (str, \",\" #S \",\")                  \\\n+                   || NULL != strstr (str, \",all,\"))\n+\n+      SET_DUMP_DETAIL (rtx_costs);\n+      SET_DUMP_DETAIL (legitimate_address_p);\n+      SET_DUMP_DETAIL (legitimize_address);\n+      SET_DUMP_DETAIL (legitimize_reload_address);\n+      SET_DUMP_DETAIL (constraints);\n+\n+#undef SET_DUMP_DETAIL\n+    }\n+}"}, {"sha": "e34666c66780a56792d8d8c800a3f07333f78886", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -111,3 +111,24 @@ extern rtx avr_incoming_return_addr_rtx (void);\n #ifdef REAL_VALUE_TYPE\n extern void asm_output_float (FILE *file, REAL_VALUE_TYPE n);\n #endif\n+\n+/* From avr-log.c */\n+\n+#define avr_edump (avr_log_set_caller_e (__FUNCTION__))\n+#define avr_fdump (avr_log_set_caller_f (__FUNCTION__))\n+\n+extern int (*avr_log_set_caller_e (const char*))(const char*, ...);\n+extern int (*avr_log_set_caller_f (const char*))(FILE*, const char*, ...);\n+\n+extern void avr_log_set_avr_log (void);\n+\n+typedef struct\n+{\n+  unsigned rtx_costs :1;\n+  unsigned legitimate_address_p :1;\n+  unsigned legitimize_address :1;\n+  unsigned legitimize_reload_address :1;\n+  unsigned constraints :1;\n+} avr_log_t;\n+\n+extern avr_log_t avr_log;"}, {"sha": "f3abf6c22b072f3e0f7ebcbebd9e489a85d88fe2", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -359,6 +359,8 @@ avr_option_override (void)\n   zero_reg_rtx = gen_rtx_REG (QImode, ZERO_REGNO);\n \n   init_machine_status = avr_init_machine_status;\n+\n+  avr_log_set_avr_log();\n }\n \n /* Function to set up the backend function structure.  */"}, {"sha": "1128dd3bf0293acc7922ad472d9013ec2fa4cbca", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -29,6 +29,9 @@ Target RejectNegative Joined Var(avr_mcu_index) Init(0) Enum(avr_mcu)\n mdeb\n Target Report Undocumented Mask(ALL_DEBUG)\n \n+mlog=\n+Target RejectNegative Joined Undocumented Var(avr_log_details)\n+\n mint8\n Target Report Mask(INT8)\n Use an 8-bit 'int' type"}, {"sha": "30e8d96447e56175aff762bbe9239feaf45abfdc", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=6c7dfafee68e3c18aa6c0f7c42e3f86bce196d7e", "patch": "@@ -30,6 +30,10 @@ avr-c.o: $(srcdir)/config/avr/avr-c.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n+avr-log.o: $(srcdir)/config/avr/avr-log.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(INPUT_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n $(srcdir)/config/avr/avr-tables.opt: $(srcdir)/config/avr/genopt.sh \\\n   $(srcdir)/config/avr/avr-mcus.def\n \t$(SHELL) $(srcdir)/config/avr/genopt.sh $(srcdir)/config/avr > \\"}]}