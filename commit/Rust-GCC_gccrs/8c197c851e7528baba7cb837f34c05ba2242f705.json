{"sha": "8c197c851e7528baba7cb837f34c05ba2242f705", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxOTdjODUxZTc1MjhiYWJhN2NiODM3ZjM0YzA1YmEyMjQyZjcwNQ==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-01-16T14:20:48Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-01-16T14:26:11Z"}, "message": "[GCC][PATCH][AArch64]Add ACLE intrinsics for dot product (usdot - vector, <us/su>dot - by element) for AArch64 AdvSIMD ARMv8.6 Extension\n\ngcc/ChangeLog:\n\n2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c: (enum aarch64_type_qualifiers):\n\tNew qualifier_lane_quadtup_index, TYPES_TERNOP_SSUS,\n\tTYPES_QUADOPSSUS_LANE_QUADTUP, TYPES_QUADOPSSSU_LANE_QUADTUP.\n\t(aarch64_simd_expand_args): Add case SIMD_ARG_LANE_QUADTUP_INDEX.\n\t(aarch64_simd_expand_builtin): Add qualifier_lane_quadtup_index.\n\t* config/aarch64/aarch64-simd-builtins.def (usdot, usdot_lane,\n\tusdot_laneq, sudot_lane,sudot_laneq): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_usdot): New.\n\t(aarch64_<sur>dot_lane): New.\n\t* config/aarch64/arm_neon.h (vusdot_s32): New.\n\t(vusdotq_s32): New.\n\t(vusdot_lane_s32): New.\n\t(vsudot_lane_s32): New.\n\t* config/aarch64/iterators.md (DOTPROD_I8MM): New iterator.\n\t(UNSPEC_USDOT, UNSPEC_SUDOT): New unspecs.\n\ngcc/testsuite/ChangeLog:\n\n2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-1.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-2.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-3.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-4.c: New test.", "tree": {"sha": "96b1e6c14a4349f673fcf43f52ab6e3e7ecde6be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b1e6c14a4349f673fcf43f52ab6e3e7ecde6be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c197c851e7528baba7cb837f34c05ba2242f705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c197c851e7528baba7cb837f34c05ba2242f705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c197c851e7528baba7cb837f34c05ba2242f705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c197c851e7528baba7cb837f34c05ba2242f705/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545f5fad17ff0decb2a145d2ea513580630858c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545f5fad17ff0decb2a145d2ea513580630858c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545f5fad17ff0decb2a145d2ea513580630858c3"}], "stats": {"total": 534, "additions": 531, "deletions": 3}, "files": [{"sha": "49dcecb6777e6522ebf5bfc12cd21f0e9d4d6564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -1,3 +1,21 @@\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c: (enum aarch64_type_qualifiers):\n+\tNew qualifier_lane_quadtup_index, TYPES_TERNOP_SSUS,\n+\tTYPES_QUADOPSSUS_LANE_QUADTUP, TYPES_QUADOPSSSU_LANE_QUADTUP.\n+\t(aarch64_simd_expand_args): Add case SIMD_ARG_LANE_QUADTUP_INDEX.\n+\t(aarch64_simd_expand_builtin): Add qualifier_lane_quadtup_index.\n+\t* config/aarch64/aarch64-simd-builtins.def (usdot, usdot_lane,\n+\tusdot_laneq, sudot_lane,sudot_laneq): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_usdot): New.\n+\t(aarch64_<sur>dot_lane): New.\n+\t* config/aarch64/arm_neon.h (vusdot_s32): New.\n+\t(vusdotq_s32): New.\n+\t(vusdot_lane_s32): New.\n+\t(vsudot_lane_s32): New.\n+\t* config/aarch64/iterators.md (DOTPROD_I8MM): New iterator.\n+\t(UNSPEC_USDOT, UNSPEC_SUDOT): New unspecs.\n+\n 2020-01-16  Martin Liska  <mliska@suse.cz>\n \n \t* value-prof.c (dump_histogram_value): Fix"}, {"sha": "f50c4857e1cfec5b74e46a81d8068afa86312d88", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -110,6 +110,9 @@ enum aarch64_type_qualifiers\n   /* Lane indices selected in pairs. - must be in range, and flipped for\n      bigendian.  */\n   qualifier_lane_pair_index = 0x800,\n+  /* Lane indices selected in quadtuplets. - must be in range, and flipped for\n+     bigendian.  */\n+  qualifier_lane_quadtup_index = 0x1000,\n };\n \n typedef struct\n@@ -176,6 +179,10 @@ aarch64_types_ternopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned,\n       qualifier_unsigned, qualifier_immediate };\n #define TYPES_TERNOPUI (aarch64_types_ternopu_imm_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_ternop_ssus_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned, qualifier_none };\n+#define TYPES_TERNOP_SSUS (aarch64_types_ternop_ssus_qualifiers)\n \n \n static enum aarch64_type_qualifiers\n@@ -194,6 +201,19 @@ aarch64_types_quadopu_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_lane_index };\n #define TYPES_QUADOPU_LANE (aarch64_types_quadopu_lane_qualifiers)\n \n+static enum aarch64_type_qualifiers\n+aarch64_types_quadopssus_lane_quadtup_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned,\n+      qualifier_none, qualifier_lane_quadtup_index };\n+#define TYPES_QUADOPSSUS_LANE_QUADTUP \\\n+\t(aarch64_types_quadopssus_lane_quadtup_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_quadopsssu_lane_quadtup_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_unsigned, qualifier_lane_quadtup_index };\n+#define TYPES_QUADOPSSSU_LANE_QUADTUP \\\n+\t(aarch64_types_quadopsssu_lane_quadtup_qualifiers)\n+\n static enum aarch64_type_qualifiers\n aarch64_types_quadopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n@@ -1288,6 +1308,7 @@ typedef enum\n   SIMD_ARG_LANE_INDEX,\n   SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX,\n   SIMD_ARG_LANE_PAIR_INDEX,\n+  SIMD_ARG_LANE_QUADTUP_INDEX,\n   SIMD_ARG_STOP\n } builtin_simd_arg;\n \n@@ -1377,9 +1398,25 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\t  op[opc] = gen_int_mode (ENDIAN_LANE_N (nunits / 2, lane),\n \t\t\t\t\t  SImode);\n \t\t}\n-\t      /* Fall through - if the lane index isn't a constant then\n-\t\t the next case will error.  */\n-\t      /* FALLTHRU */\n+\t      /* If the lane index isn't a constant then error out.  */\n+\t      goto constant_arg;\n+\t    case SIMD_ARG_LANE_QUADTUP_INDEX:\n+\t      /* Must be a previous operand into which this is an index and\n+\t\t index is restricted to nunits / 4.  */\n+\t      gcc_assert (opc > 0);\n+\t      if (CONST_INT_P (op[opc]))\n+\t\t{\n+\t\t  machine_mode vmode = insn_data[icode].operand[opc - 1].mode;\n+\t\t  unsigned int nunits\n+\t\t    = GET_MODE_NUNITS (vmode).to_constant ();\n+\t\t  aarch64_simd_lane_bounds (op[opc], 0, nunits / 4, exp);\n+\t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n+\t\t  int lane = INTVAL (op[opc]);\n+\t\t  op[opc] = gen_int_mode (ENDIAN_LANE_N (nunits / 4, lane),\n+\t\t\t\t\t  SImode);\n+\t\t}\n+\t      /* If the lane index isn't a constant then error out.  */\n+\t      goto constant_arg;\n \t    case SIMD_ARG_CONSTANT:\n constant_arg:\n \t      if (!(*insn_data[icode].operand[opc].predicate)\n@@ -1492,6 +1529,8 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n \targs[k] = SIMD_ARG_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_lane_pair_index)\n \targs[k] = SIMD_ARG_LANE_PAIR_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_lane_quadtup_index)\n+\targs[k] = SIMD_ARG_LANE_QUADTUP_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_struct_load_store_lane_index)\n \targs[k] = SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_immediate)"}, {"sha": "4744dd1f6b2f20327db810277ff65c59ce5abdec", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -212,10 +212,15 @@\n   /* Implemented by aarch64_<sur><dotprod>{_lane}{q}<dot_mode>.  */\n   BUILTIN_VB (TERNOP, sdot, 0)\n   BUILTIN_VB (TERNOPU, udot, 0)\n+  BUILTIN_VB (TERNOP_SSUS, usdot, 0)\n   BUILTIN_VB (QUADOP_LANE, sdot_lane, 0)\n   BUILTIN_VB (QUADOPU_LANE, udot_lane, 0)\n   BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0)\n   BUILTIN_VB (QUADOPU_LANE, udot_laneq, 0)\n+  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_lane, 0)\n+  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_laneq, 0)\n+  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_lane, 0)\n+  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_laneq, 0)\n \n   /* Implemented by aarch64_fcadd<rot><mode>.   */\n   BUILTIN_VHSDF (BINOP, fcadd90, 0)"}, {"sha": "9e56e8caf3569b4b15f77f627ce6e6a839008083", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -506,6 +506,20 @@\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n \n+;; These instructions map to the __builtins for the armv8.6a I8MM usdot\n+;; (vector) Dot Product operation.\n+(define_insn \"aarch64_usdot<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS\n+\t  (unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:<VSI2QI> 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_USDOT)\n+\t  (match_operand:VS 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n+  \"usdot\\\\t%0.<Vtype>, %2.<Vdottype>, %3.<Vdottype>\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n ;; These expands map to the Dot Product optab the vectorizer checks for.\n ;; The auto-vectorizer expects a dot product builtin that also does an\n ;; accumulation into the provided register.\n@@ -573,6 +587,26 @@\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n \n+;; These instructions map to the __builtins for the armv8.6a I8MM usdot, sudot\n+;; (by element) Dot Product operations.\n+(define_insn \"aarch64_<DOTPROD_I8MM:sur>dot_lane<VB:isquadop><VS:vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS\n+\t  (unspec:VS [(match_operand:<VS:VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:VB 3 \"register_operand\" \"w\")\n+\t\t      (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t  DOTPROD_I8MM)\n+\t  (match_operand:VS 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n+  {\n+    int nunits = GET_MODE_NUNITS (<VB:MODE>mode).to_constant ();\n+    int lane = INTVAL (operands[4]);\n+    operands[4] = gen_int_mode (ENDIAN_LANE_N (nunits / 4, lane), SImode);\n+    return \"<DOTPROD_I8MM:sur>dot\\\\t%0.<VS:Vtype>, %2.<VS:Vdottype>, %3.4b[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_dot<VS:q>\")]\n+)\n+\n (define_expand \"copysign<mode>3\"\n   [(match_operand:VHSDF 0 \"register_operand\")\n    (match_operand:VHSDF 1 \"register_operand\")"}, {"sha": "c96214003dd2478820ca2093f6cabc8fcf3f9b92", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -34611,6 +34611,89 @@ vrnd64xq_f64 (float64x2_t __a)\n \n #include \"arm_bf16.h\"\n \n+/* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+i8mm\")\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_s32 (int32x2_t __r, uint8x8_t __a, int8x8_t __b)\n+{\n+  return __builtin_aarch64_usdotv8qi_ssus (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_aarch64_usdotv16qi_ssus (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_lane_s32 (int32x2_t __r, uint8x8_t __a, int8x8_t __b, const int __index)\n+{\n+  return __builtin_aarch64_usdot_lanev8qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_laneq_s32 (int32x2_t __r, uint8x8_t __a, int8x16_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_usdot_laneqv8qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_lane_s32 (int32x4_t __r, uint8x16_t __a, int8x8_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_usdot_lanev16qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_laneq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b,\n+\t\t   const int __index)\n+{\n+  return __builtin_aarch64_usdot_laneqv16qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudot_lane_s32 (int32x2_t __r, int8x8_t __a, uint8x8_t __b, const int __index)\n+{\n+  return __builtin_aarch64_sudot_lanev8qi_sssus (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudot_laneq_s32 (int32x2_t __r, int8x8_t __a, uint8x16_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_sudot_laneqv8qi_sssus (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudotq_lane_s32 (int32x4_t __r, int8x16_t __a, uint8x8_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_sudot_lanev16qi_sssus (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudotq_laneq_s32 (int32x4_t __r, int8x16_t __a, uint8x16_t __b,\n+\t\t   const int __index)\n+{\n+  return __builtin_aarch64_sudot_laneqv16qi_sssus (__r, __a, __b, __index);\n+}\n+\n+#pragma GCC pop_options\n+\n #undef __aarch64_vget_lane_any\n \n #undef __aarch64_vdup_lane_any"}, {"sha": "83720d9802a0ef454214d04c473b0c60f0abdc2a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -799,6 +799,8 @@\n     UNSPEC_USUBLT\t; Used in aarch64-sve2.md.\n     UNSPEC_USUBWB\t; Used in aarch64-sve2.md.\n     UNSPEC_USUBWT\t; Used in aarch64-sve2.md.\n+    UNSPEC_USDOT\t; Used in aarch64-simd.md.\n+    UNSPEC_SUDOT\t; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -1463,6 +1465,8 @@\n \n (define_mode_attr f16quad [(V2SF \"\") (V4SF \"q\")])\n \n+(define_mode_attr isquadop [(V8QI \"\") (V16QI \"q\")])\n+\n (define_code_attr f16mac [(plus \"a\") (minus \"s\")])\n \n ;; Map smax to smin and umax to umin.\n@@ -2045,6 +2049,8 @@\n \n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n+(define_int_iterator DOTPROD_I8MM [UNSPEC_USDOT UNSPEC_SUDOT])\n+\n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n \t\t\t       UNSPEC_SUBHN UNSPEC_RSUBHN])\n \n@@ -2738,6 +2744,7 @@\n \t\t      (UNSPEC_URSHL  \"ur\") (UNSPEC_SRSHL  \"sr\")\n \t\t      (UNSPEC_UQRSHL  \"u\") (UNSPEC_SQRSHL  \"s\")\n \t\t      (UNSPEC_SDOT \"s\") (UNSPEC_UDOT \"u\")\n+\t\t      (UNSPEC_USDOT \"us\") (UNSPEC_SUDOT \"su\")\n ])\n \n (define_int_attr r [(UNSPEC_SQDMULH \"\") (UNSPEC_SQRDMULH \"r\")"}, {"sha": "8b01aa06a40df665a59a51caf6b32a352eb09484", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -1,3 +1,10 @@\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-1.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-2.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-3.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-4.c: New test.\n+\n 2020-01-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tPR tree-optimization/92429"}, {"sha": "ac4f821e77143e93ecb23db71b7100b37df770f2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-1.c?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -0,0 +1,136 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/* Unsigned-Signed Dot Product instructions.  */\n+\n+/*\n+**ufoo:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.8b\n+**\tret\n+*/\n+int32x2_t ufoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**ufooq:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.16b\n+**\tret\n+*/\n+int32x4_t ufooq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_s32 (r, x, y);\n+}\n+\n+/*\n+**ufoo_lane:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.4b\\[0\\]\n+**\tret\n+*/\n+int32x2_t ufoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**ufoo_laneq:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.4b\\[2\\]\n+**\tret\n+*/\n+int32x2_t ufoo_laneq (int32x2_t r, uint8x8_t x, int8x16_t y)\n+{\n+  return vusdot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**ufooq_lane:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.4b\\[1\\]\n+**\tret\n+*/\n+int32x4_t ufooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  return vusdotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**ufooq_laneq:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t ufooq_laneq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_lane:\n+**\tsudot\tv0\\.2s, v1\\.8b, v2\\.4b\\[0\\]\n+**\tret\n+*/\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  return vsudot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**sfoo_laneq:\n+**\tsudot\tv0\\.2s, v1\\.8b, v2\\.4b\\[2\\]\n+**\tret\n+*/\n+int32x2_t sfoo_laneq (int32x2_t r, int8x8_t x, uint8x16_t y)\n+{\n+  return vsudot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**sfooq_lane:\n+**\tsudot\tv0\\.4s, v1\\.16b, v2\\.4b\\[1\\]\n+**\tret\n+*/\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  return vsudotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**sfooq_laneq:\n+**\tsudot\tv0\\.4s, v1\\.16b, v2\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t sfooq_laneq (int32x4_t r, int8x16_t x, uint8x16_t y)\n+{\n+  return vsudotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+/*\n+**ufoo_untied:\n+**\tmov\tv0\\.8b, v1\\.8b\n+**\tusdot\tv0\\.2s, v2\\.8b, v3\\.8b\n+**\tret\n+*/\n+int32x2_t ufoo_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**ufooq_laneq_untied:\n+**\tmov\tv0\\.16b, v1\\.16b\n+**\tusdot\tv0\\.4s, v2\\.16b, v3\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t ufooq_laneq_untied (int32x2_t unused, int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+"}, {"sha": "96bca2356e4d5d93378d2c8de3778fe28751117e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -0,0 +1,137 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"-mbig-endian -save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/* Unsigned-Signed Dot Product instructions.  */\n+\n+/*\n+**ufoo:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.8b\n+**\tret\n+*/\n+int32x2_t ufoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**ufooq:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.16b\n+**\tret\n+*/\n+int32x4_t ufooq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_s32 (r, x, y);\n+}\n+\n+/*\n+**ufoo_lane:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.4b\\[0\\]\n+**\tret\n+*/\n+int32x2_t ufoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**ufoo_laneq:\n+**\tusdot\tv0\\.2s, v1\\.8b, v2\\.4b\\[2\\]\n+**\tret\n+*/\n+int32x2_t ufoo_laneq (int32x2_t r, uint8x8_t x, int8x16_t y)\n+{\n+  return vusdot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**ufooq_lane:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.4b\\[1\\]\n+**\tret\n+*/\n+int32x4_t ufooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  return vusdotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**ufooq_laneq:\n+**\tusdot\tv0\\.4s, v1\\.16b, v2\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t ufooq_laneq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_lane:\n+**\tsudot\tv0\\.2s, v1\\.8b, v2\\.4b\\[0\\]\n+**\tret\n+*/\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  return vsudot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**sfoo_laneq:\n+**\tsudot\tv0\\.2s, v1\\.8b, v2\\.4b\\[2\\]\n+**\tret\n+*/\n+int32x2_t sfoo_laneq (int32x2_t r, int8x8_t x, uint8x16_t y)\n+{\n+  return vsudot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**sfooq_lane:\n+**\tsudot\tv0\\.4s, v1\\.16b, v2\\.4b\\[1\\]\n+**\tret\n+*/\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  return vsudotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**sfooq_laneq:\n+**\tsudot\tv0\\.4s, v1\\.16b, v2\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t sfooq_laneq (int32x4_t r, int8x16_t x, uint8x16_t y)\n+{\n+  return vsudotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+/*\n+**ufoo_untied:\n+**\tmov\tv0\\.8b, v1\\.8b\n+**\tusdot\tv0\\.2s, v2\\.8b, v3\\.8b\n+**\tret\n+*/\n+int32x2_t ufoo_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**ufooq_laneq_untied:\n+**\tmov\tv0\\.16b, v1\\.16b\n+**\tusdot\tv0\\.4s, v2\\.16b, v3\\.4b\\[3\\]\n+**\tret\n+*/\n+int32x4_t ufooq_laneq_untied (int32x2_t unused, int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+"}, {"sha": "18ecabef8dc6b99872d71c8e412b6f4b4809e901", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-3.c?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"--save-temps\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+int32x2_t ufoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vusdot_lane_s32 (r, x, y, -1);\n+}\n+\n+int32x2_t ufoo_laneq (int32x2_t r, uint8x8_t x, int8x16_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vusdot_laneq_s32 (r, x, y, -1);\n+}\n+\n+int32x4_t ufooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vusdotq_lane_s32 (r, x, y, 2);\n+}\n+\n+int32x4_t ufooq_laneq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vusdotq_laneq_s32 (r, x, y, 4);\n+}"}, {"sha": "66c87d48694bad9624b491aec4cd1a38b75fbb95", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c197c851e7528baba7cb837f34c05ba2242f705/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-4.c?ref=8c197c851e7528baba7cb837f34c05ba2242f705", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"--save-temps\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vsudot_lane_s32 (r, x, y, -1);\n+}\n+\n+int32x2_t sfoo_laneq (int32x2_t r, int8x8_t x, uint8x16_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vsudot_laneq_s32 (r, x, y, -1);\n+}\n+\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vsudotq_lane_s32 (r, x, y, 2);\n+}\n+\n+int32x4_t sfooq_laneq (int32x4_t r, int8x16_t x, uint8x16_t y)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vsudotq_laneq_s32 (r, x, y, 4);\n+}"}]}