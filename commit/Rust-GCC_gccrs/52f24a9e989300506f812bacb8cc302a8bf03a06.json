{"sha": "52f24a9e989300506f812bacb8cc302a8bf03a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmMjRhOWU5ODkzMDA1MDZmODEyYmFjYjhjYzMwMmE4YmYwM2EwNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-27T20:24:03Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-27T20:33:57Z"}, "message": "PR c++/94346 - [9/10 Regression] ICE due to handle_copy_attribute since r9-3982\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/94346\n\t* c-attribs.c (handle_copy_attribute): Avoid passing expressions\n\tto decl_attributes.  Make handling of different kinds of entities\n\tmore robust.\n\ngcc/c-c++-common/ChangeLog:\n\n\tPR c++/94346\n\t* c-c++-common/attr-copy.c: New test.", "tree": {"sha": "771a900ca9fd395bf4d99d442ba34800aa4ac8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/771a900ca9fd395bf4d99d442ba34800aa4ac8e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f24a9e989300506f812bacb8cc302a8bf03a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f24a9e989300506f812bacb8cc302a8bf03a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f24a9e989300506f812bacb8cc302a8bf03a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f24a9e989300506f812bacb8cc302a8bf03a06/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7fc15f54b321b2522ae26abebb86957de5c6fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7fc15f54b321b2522ae26abebb86957de5c6fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7fc15f54b321b2522ae26abebb86957de5c6fae"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "07ff55939915a2474dc75c7d601fc85d0580f4e4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=52f24a9e989300506f812bacb8cc302a8bf03a06", "patch": "@@ -1,3 +1,10 @@\n+2020-03-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94346\n+\t* c-attribs.c (handle_copy_attribute): Avoid passing expressions\n+\tto decl_attributes.  Make handling of different kinds of entities\n+\tmore robust.\n+\n 2020-03-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/94098"}, {"sha": "1483b3540dc58fea16864d061263240db92c5f69", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=52f24a9e989300506f812bacb8cc302a8bf03a06", "patch": "@@ -2526,17 +2526,21 @@ handle_copy_attribute (tree *node, tree name, tree args,\n       && !FUNCTION_POINTER_TYPE_P (TREE_TYPE (ref)))\n     ref = TREE_TYPE (ref);\n \n+  tree reftype = TYPE_P (ref) ? ref : TREE_TYPE (ref);\n+\n   if (DECL_P (decl))\n     {\n       if ((VAR_P (decl)\n \t   && (TREE_CODE (ref) == FUNCTION_DECL\n \t       || (EXPR_P (ref)\n-\t\t   && POINTER_TYPE_P (TREE_TYPE (ref))\n-\t\t   && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (ref))))))\n+\t\t   && POINTER_TYPE_P (reftype)\n+\t\t   && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (reftype)))))\n \t  || (TREE_CODE (decl) == FUNCTION_DECL\n \t      && (VAR_P (ref)\n \t\t  || (EXPR_P (ref)\n-\t\t      && !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (ref))))))\n+\t\t      && !FUNC_OR_METHOD_TYPE_P (reftype)\n+\t\t      && (!POINTER_TYPE_P (reftype)\n+\t\t\t  || !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (reftype)))))))\n \t{\n \t  /* It makes no sense to try to copy function attributes\n \t     to a variable, or variable attributes to a function.  */\n@@ -2586,7 +2590,7 @@ handle_copy_attribute (tree *node, tree name, tree args,\n \t  /* Create a copy of just the one attribute ar AT, including\n \t     its argumentsm and add it to DECL.  */\n \t  tree attr = tree_cons (atname, copy_list (atargs), NULL_TREE);\n-\t  decl_attributes (node, attr, flags, ref);\n+\t  decl_attributes (node, attr, flags,  EXPR_P (ref) ? NULL_TREE : ref);\n \t}\n \n       /* Proceed to copy type attributes below.  */\n@@ -2606,15 +2610,11 @@ handle_copy_attribute (tree *node, tree name, tree args,\n \n   /* Similarly, a function declared with attribute noreturn has it\n      attached on to it, but a C11 _Noreturn function does not.  */\n-  tree reftype = ref;\n   if (DECL_P (ref)\n       && TREE_THIS_VOLATILE (ref)\n-      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (reftype)))\n+      && FUNC_OR_METHOD_TYPE_P (reftype))\n     TREE_THIS_VOLATILE (decl) = true;\n \n-  if (DECL_P (ref) || EXPR_P (ref))\n-    reftype = TREE_TYPE (ref);\n-\n   if (POINTER_TYPE_P (reftype))\n     reftype = TREE_TYPE (reftype);\n \n@@ -2623,9 +2623,10 @@ handle_copy_attribute (tree *node, tree name, tree args,\n \n   tree attrs = TYPE_ATTRIBUTES (reftype);\n \n-  /* Copy type attributes from REF to DECL.  */\n+  /* Copy type attributes from REF to DECL.  Pass in REF if it's a DECL\n+     or a type but not if it's an expression.  */\n   for (tree at = attrs; at; at = TREE_CHAIN (at))\n-    decl_attributes (node, at, flags, ref);\n+    decl_attributes (node, at, flags, EXPR_P (ref) ? NULL_TREE : ref);\n \n   return NULL_TREE;\n }"}, {"sha": "65d953c3277f8ff283d32bf9fba49a11e840e3b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52f24a9e989300506f812bacb8cc302a8bf03a06", "patch": "@@ -1,3 +1,8 @@\n+2020-03-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94346\n+\t* c-c++-common/attr-copy.c: New test.\n+\n 2020-03-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/94098"}, {"sha": "284088a8b97bb5e82e692112c5c53eb2cd57976f", "filename": "gcc/testsuite/c-c++-common/attr-copy.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f24a9e989300506f812bacb8cc302a8bf03a06/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c?ref=52f24a9e989300506f812bacb8cc302a8bf03a06", "patch": "@@ -0,0 +1,43 @@\n+/* PR c++/94346 - ICE due to handle_copy_attribute\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define ATTR(...) __attribute__ ((__VA_ARGS__))\n+\n+#if __cplusplus > 199711L\n+#  define SA(expr) static_assert (expr, #expr)\n+#elif __cplusplus\n+#  define SA(expr)\t\t\t\t\t\t\t\\\n+  typedef __attribute__ ((unused)) char Assert[!(expr) ? -1 : 1]\n+#else\n+#  define SA(expr) _Static_assert (expr, #expr)\n+#endif\n+\n+typedef struct ATTR (packed) A { ATTR (packed) unsigned bf: 1; } A;\n+\n+int bar (void);\n+\n+struct C\n+{\n+  char c;\n+  ATTR (copy ((bar (), ((struct A *)(0))[0]))) int i;\n+};\n+\n+/* Verify the attribute has been copied.  */\n+SA (__builtin_offsetof (struct C, i) == 1);\n+\n+\n+\n+/* Verify attribute copy can copy from the type a comma expression.  */\n+ATTR (alloc_size (1)) void* alloc1 (int);\n+\n+ATTR (copy ((bar (), alloc1))) void* alloc2 (int, int);\n+\n+ATTR (copy ((bar (), alloc1))) void alloc3 (int);  /* { dg-warning \"'alloc_size' attribute ignored on a function returning 'void'\" } */\n+\n+\n+typedef ATTR (alloc_size (1)) void* F (int);\n+\n+ATTR (copy ((bar (), (F*)0))) void* alloc4 (int, int);\n+\n+ATTR (copy ((bar (), (F*)0))) void alloc5 (int, int);  /* { dg-warning \"'alloc_size' attribute ignored on a function returning 'void'\" } */"}]}