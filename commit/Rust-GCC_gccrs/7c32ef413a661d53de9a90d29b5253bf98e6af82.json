{"sha": "7c32ef413a661d53de9a90d29b5253bf98e6af82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzMmVmNDEzYTY2MWQ1M2RlOWE5MGQyOWI1MjUzYmY5OGU2YWY4Mg==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-05-13T05:41:37Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-13T05:41:37Z"}, "message": "[NDS32] Add DSP extension instructions.\n\ngcc/\n\t* config.gcc (nds32be-*-*): Handle --with-ext-dsp.\n\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n\tAdd enum values for DSP extension instructions.\n\t* config/nds32/constraints.md (Iu06, IU06, CVp5, CVs5, CVs2, CVhi):\n\tNew constraints.\n\t* config/nds32/iterators.md (shifts, shiftrt, sat_plus, all_plus,\n\tsat_minus, all_minus, plus_minus, extend, sumax, sumin, sumin_max):\n\tNew code iterators.\n\t(su, zs, uk, opcode, add_rsub, add_sub): New code attributes.\n\t* config/nds32/nds32-dspext.md: New file for DSP implementation.\n\t* config/nds32/nds32-intrinsic.c: Implementation of DSP extension.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32-md-auxiliary.c: Likewise.\n\t* config/nds32/nds32-memory-manipulation.c: Consider DSP extension.\n\t* config/nds32/nds32-predicates.c (const_vector_to_hwint): New.\n\t(nds32_valid_CVp5_p, nds32_valid_CVs5_p): New.\n\t(nds32_valid_CVs2_p, nds32_valid_CVhi_p): New.\n\t* config/nds32/nds32-protos.h: New declarations for DSP extension.\n\t* config/nds32/nds32-utils.c (extract_mac_non_acc_rtx): New case\n\tTYPE_DMAC in switch statement.\n\t* config/nds32/nds32.c: New checking and implementation for DSP\n\textension instructions.\n\t* config/nds32/nds32.h: Likewise.\n\t* config/nds32/nds32.md: Likewise.\n\t* config/nds32/nds32.opt (mhw-abs, mext-dsp): New options.\n\t* config/nds32/predicates.md: Implement new predicates for DSP\n\textension.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\n\nFrom-SVN: r260206", "tree": {"sha": "118e0d1bd13dc5dd978e2397987235b3e96477d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118e0d1bd13dc5dd978e2397987235b3e96477d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c32ef413a661d53de9a90d29b5253bf98e6af82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c32ef413a661d53de9a90d29b5253bf98e6af82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c32ef413a661d53de9a90d29b5253bf98e6af82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c32ef413a661d53de9a90d29b5253bf98e6af82/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab22e6ce3fbb53d663961e6f40ac12ebde7a421f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab22e6ce3fbb53d663961e6f40ac12ebde7a421f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab22e6ce3fbb53d663961e6f40ac12ebde7a421f"}], "stats": {"total": 8186, "additions": 8151, "deletions": 35}, "files": [{"sha": "7b788ca6292b00e75b68f6e0ad4b772133805967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -1,3 +1,36 @@\n+2018-05-13  Monk Chiang  <sh.chiang04@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32be-*-*): Handle --with-ext-dsp.\n+\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n+\tAdd enum values for DSP extension instructions.\n+\t* config/nds32/constraints.md (Iu06, IU06, CVp5, CVs5, CVs2, CVhi):\n+\tNew constraints.\n+\t* config/nds32/iterators.md (shifts, shiftrt, sat_plus, all_plus,\n+\tsat_minus, all_minus, plus_minus, extend, sumax, sumin, sumin_max):\n+\tNew code iterators.\n+\t(su, zs, uk, opcode, add_rsub, add_sub): New code attributes.\n+\t* config/nds32/nds32-dspext.md: New file for DSP implementation.\n+\t* config/nds32/nds32-intrinsic.c: Implementation of DSP extension.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32-md-auxiliary.c: Likewise.\n+\t* config/nds32/nds32-memory-manipulation.c: Consider DSP extension.\n+\t* config/nds32/nds32-predicates.c (const_vector_to_hwint): New.\n+\t(nds32_valid_CVp5_p, nds32_valid_CVs5_p): New.\n+\t(nds32_valid_CVs2_p, nds32_valid_CVhi_p): New.\n+\t* config/nds32/nds32-protos.h: New declarations for DSP extension.\n+\t* config/nds32/nds32-utils.c (extract_mac_non_acc_rtx): New case\n+\tTYPE_DMAC in switch statement.\n+\t* config/nds32/nds32.c: New checking and implementation for DSP\n+\textension instructions.\n+\t* config/nds32/nds32.h: Likewise.\n+\t* config/nds32/nds32.md: Likewise.\n+\t* config/nds32/nds32.opt (mhw-abs, mext-dsp): New options.\n+\t* config/nds32/predicates.md: Implement new predicates for DSP\n+\textension.\n+\n 2018-05-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.md (mov<mode>_softfloat, FMOVE32):"}, {"sha": "fec118c0bdbfb9afc0a48b743c0bf3b2aa92a803", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -2346,6 +2346,11 @@ nds32be-*-*)\n \ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file} nds32/nds32_intrinsic.h\"\n \ttmake_file=\"nds32/t-nds32 nds32/t-mlibs\"\n+\n+\t# Handle --with-ext-dsp\n+\tif test x${with_ext_dsp} = xyes; then\n+\t\ttm_defines=\"${tm_defines} TARGET_DEFAULT_EXT_DSP=1\"\n+\tfi\n \t;;\n nios2-*-*)\n \ttm_file=\"elfos.h ${tm_file}\""}, {"sha": "cba989f99a6a8f3b03a6983edef77c146b9a68bc", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -49,6 +49,16 @@\n   UNSPEC_FFB\n   UNSPEC_FFMISM\n   UNSPEC_FLMISM\n+  UNSPEC_KDMBB\n+  UNSPEC_KDMBT\n+  UNSPEC_KDMTB\n+  UNSPEC_KDMTT\n+  UNSPEC_KHMBB\n+  UNSPEC_KHMBT\n+  UNSPEC_KHMTB\n+  UNSPEC_KHMTT\n+  UNSPEC_KSLRAW\n+  UNSPEC_KSLRAWU\n   UNSPEC_SVA\n   UNSPEC_SVS\n   UNSPEC_WSBH\n@@ -62,6 +72,19 @@\n   UNSPEC_UASTORE_HW\n   UNSPEC_UASTORE_W\n   UNSPEC_UASTORE_DW\n+  UNSPEC_ROUND\n+  UNSPEC_VEC_COMPARE\n+  UNSPEC_KHM\n+  UNSPEC_KHMX\n+  UNSPEC_CLIP_OV\n+  UNSPEC_CLIPS_OV\n+  UNSPEC_BITREV\n+  UNSPEC_KABS\n+  UNSPEC_LOOP_END\n+  UNSPEC_TLS_DESC\n+  UNSPEC_TLS_IE\n+  UNSPEC_KADDH\n+  UNSPEC_KSUBH\n ])\n \n ;; The unspec_volatile operation index.\n@@ -139,6 +162,8 @@\n   UNSPEC_VOLATILE_UNALIGNED_FEATURE\n   UNSPEC_VOLATILE_ENABLE_UNALIGNED\n   UNSPEC_VOLATILE_DISABLE_UNALIGNED\n+  UNSPEC_VOLATILE_RDOV\n+  UNSPEC_VOLATILE_CLROV\n ])\n \n ;; ------------------------------------------------------------------------"}, {"sha": "500f1a42b5cf149008ad9fcb69fa83e6157fa44c", "filename": "gcc/config/nds32/constraints.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstraints.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -127,6 +127,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (ival, -31, 0)\")))\n \n+(define_constraint \"Iu06\"\n+  \"Unsigned immediate 6-bit value\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival < (1 << 6) && ival >= 0\")))\n+\n ;; Ip05 is special and dedicated for v3 movpi45 instruction.\n ;; movpi45 has imm5u field but the range is 16 ~ 47.\n (define_constraint \"Ip05\"\n@@ -136,10 +141,10 @@\n \t\t    && ival >= (0 + 16)\n \t\t    && (TARGET_ISA_V3 || TARGET_ISA_V3M)\")))\n \n-(define_constraint \"Iu06\"\n+(define_constraint \"IU06\"\n   \"Unsigned immediate 6-bit value constraint for addri36.sp instruction\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival < (1 << 6)\n+       (match_test \"ival < (1 << 8)\n \t\t    && ival >= 0\n \t\t    && (ival % 4 == 0)\n \t\t    && (TARGET_ISA_V3 || TARGET_ISA_V3M)\")))\n@@ -302,6 +307,25 @@\n        (match_test \"(TARGET_ISA_V3 || TARGET_ISA_V3M)\n \t\t    && (IN_RANGE (exact_log2 (ival + 1), 1, 8))\")))\n \n+(define_constraint \"CVp5\"\n+  \"Unsigned immediate 5-bit value for movpi45 instruction with range 16-47\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"nds32_valid_CVp5_p (op)\")))\n+\n+(define_constraint \"CVs5\"\n+  \"Signed immediate 5-bit value\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"nds32_valid_CVs5_p (op)\")))\n+\n+(define_constraint \"CVs2\"\n+  \"Signed immediate 20-bit value\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"nds32_valid_CVs2_p (op)\")))\n+\n+(define_constraint \"CVhi\"\n+  \"The immediate value that can be simply set high 20-bit\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"nds32_valid_CVhi_p (op)\")))\n \n (define_memory_constraint \"U33\"\n   \"Memory constraint for 333 format\""}, {"sha": "f4fb58181b1961e66c4335ecdac936b1f9df8bbc", "filename": "gcc/config/nds32/iterators.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fiterators.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -68,6 +68,28 @@\n ;; shifts\n (define_code_iterator shift_rotate [ashift ashiftrt lshiftrt rotatert])\n \n+(define_code_iterator shifts [ashift ashiftrt lshiftrt])\n+\n+(define_code_iterator shiftrt [ashiftrt lshiftrt])\n+\n+(define_code_iterator sat_plus [ss_plus us_plus])\n+\n+(define_code_iterator all_plus [plus ss_plus us_plus])\n+\n+(define_code_iterator sat_minus [ss_minus us_minus])\n+\n+(define_code_iterator all_minus [minus ss_minus us_minus])\n+\n+(define_code_iterator plus_minus [plus minus])\n+\n+(define_code_iterator extend [sign_extend zero_extend])\n+\n+(define_code_iterator sumax [smax umax])\n+\n+(define_code_iterator sumin [smin umin])\n+\n+(define_code_iterator sumin_max [smax umax smin umin])\n+\n ;;----------------------------------------------------------------------------\n ;; Code attributes.\n ;;----------------------------------------------------------------------------\n@@ -76,5 +98,23 @@\n (define_code_attr shift\n   [(ashift \"ashl\") (ashiftrt \"ashr\") (lshiftrt \"lshr\") (rotatert \"rotr\")])\n \n+(define_code_attr su\n+  [(ashiftrt \"\") (lshiftrt \"u\") (sign_extend \"s\") (zero_extend \"u\")])\n+\n+(define_code_attr zs\n+  [(sign_extend \"s\") (zero_extend \"z\")])\n+\n+(define_code_attr uk\n+  [(plus \"\") (ss_plus \"k\") (us_plus \"uk\")\n+   (minus \"\") (ss_minus \"k\") (us_minus \"uk\")])\n+\n+(define_code_attr opcode\n+  [(plus \"add\") (minus \"sub\") (smax \"smax\") (umax \"umax\") (smin \"smin\") (umin \"umin\")])\n+\n+(define_code_attr add_rsub\n+  [(plus \"a\") (minus \"rs\")])\n+\n+(define_code_attr add_sub\n+  [(plus \"a\") (minus \"s\")])\n \n ;;----------------------------------------------------------------------------"}, {"sha": "4151353370ddab219a2bc031d53a0f723d664a66", "filename": "gcc/config/nds32/nds32-dspext.md", "status": "added", "additions": 5264, "deletions": 0, "changes": 5264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-dspext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-dspext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-dspext.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82"}, {"sha": "c2ad927b05dcc63ffbbd4b3535309091023570cb", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 743, "deletions": 1, "changes": 744, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -519,6 +519,7 @@ static struct builtin_description bdesc_noarg[] =\n {\n   NDS32_BUILTIN(unspec_fmfcfg, \"fmfcfg\", FMFCFG)\n   NDS32_BUILTIN(unspec_fmfcsr, \"fmfcsr\", FMFCSR)\n+  NDS32_BUILTIN(unspec_volatile_rdov, \"rdov\", RDOV)\n   NDS32_BUILTIN(unspec_get_current_sp, \"get_current_sp\", GET_CURRENT_SP)\n   NDS32_BUILTIN(unspec_return_address, \"return_address\", RETURN_ADDRESS)\n   NDS32_BUILTIN(unspec_get_all_pending_int, \"get_all_pending_int\",\n@@ -558,6 +559,31 @@ static struct builtin_description bdesc_1arg[] =\n   NDS32_NO_TARGET_BUILTIN(unspec_ret_itoff, \"ret_itoff\", RET_ITOFF)\n   NDS32_NO_TARGET_BUILTIN(unspec_set_current_sp,\n \t\t\t  \"set_current_sp\", SET_CURRENT_SP)\n+  NDS32_BUILTIN(kabsv2hi2, \"kabs16\", KABS16)\n+  NDS32_BUILTIN(kabsv2hi2, \"v_kabs16\", V_KABS16)\n+  NDS32_BUILTIN(kabsv4qi2, \"kabs8\", KABS8)\n+  NDS32_BUILTIN(kabsv4qi2, \"v_kabs8\", V_KABS8)\n+  NDS32_BUILTIN(sunpkd810, \"sunpkd810\", SUNPKD810)\n+  NDS32_BUILTIN(sunpkd810, \"v_sunpkd810\", V_SUNPKD810)\n+  NDS32_BUILTIN(sunpkd820, \"sunpkd820\", SUNPKD820)\n+  NDS32_BUILTIN(sunpkd820, \"v_sunpkd820\", V_SUNPKD820)\n+  NDS32_BUILTIN(sunpkd830, \"sunpkd830\", SUNPKD830)\n+  NDS32_BUILTIN(sunpkd830, \"v_sunpkd830\", V_SUNPKD830)\n+  NDS32_BUILTIN(sunpkd831, \"sunpkd831\", SUNPKD831)\n+  NDS32_BUILTIN(sunpkd831, \"v_sunpkd831\", V_SUNPKD831)\n+  NDS32_BUILTIN(zunpkd810, \"zunpkd810\", ZUNPKD810)\n+  NDS32_BUILTIN(zunpkd810, \"v_zunpkd810\", V_ZUNPKD810)\n+  NDS32_BUILTIN(zunpkd820, \"zunpkd820\", ZUNPKD820)\n+  NDS32_BUILTIN(zunpkd820, \"v_zunpkd820\", V_ZUNPKD820)\n+  NDS32_BUILTIN(zunpkd830, \"zunpkd830\", ZUNPKD830)\n+  NDS32_BUILTIN(zunpkd830, \"v_zunpkd830\", V_ZUNPKD830)\n+  NDS32_BUILTIN(zunpkd831, \"zunpkd831\", ZUNPKD831)\n+  NDS32_BUILTIN(zunpkd831, \"v_zunpkd831\", V_ZUNPKD831)\n+  NDS32_BUILTIN(unspec_kabs, \"kabs\", KABS)\n+  NDS32_BUILTIN(unaligned_loadv2hi, \"get_unaligned_u16x2\", UALOAD_U16)\n+  NDS32_BUILTIN(unaligned_loadv2hi, \"get_unaligned_s16x2\", UALOAD_S16)\n+  NDS32_BUILTIN(unaligned_loadv4qi, \"get_unaligned_u8x4\", UALOAD_U8)\n+  NDS32_BUILTIN(unaligned_loadv4qi, \"get_unaligned_s8x4\", UALOAD_S8)\n };\n \n /* Intrinsics that take just one argument. and the argument is immediate.  */\n@@ -593,6 +619,28 @@ static struct builtin_description bdesc_2arg[] =\n   NDS32_BUILTIN(unspec_ffb, \"ffb\", FFB)\n   NDS32_BUILTIN(unspec_ffmism, \"ffmsim\", FFMISM)\n   NDS32_BUILTIN(unspec_flmism, \"flmism\", FLMISM)\n+  NDS32_BUILTIN(unspec_kaddw, \"kaddw\", KADDW)\n+  NDS32_BUILTIN(unspec_kaddh, \"kaddh\", KADDH)\n+  NDS32_BUILTIN(unspec_ksubw, \"ksubw\", KSUBW)\n+  NDS32_BUILTIN(unspec_ksubh, \"ksubh\", KSUBH)\n+  NDS32_BUILTIN(unspec_kdmbb, \"kdmbb\", KDMBB)\n+  NDS32_BUILTIN(unspec_kdmbb, \"v_kdmbb\", V_KDMBB)\n+  NDS32_BUILTIN(unspec_kdmbt, \"kdmbt\", KDMBT)\n+  NDS32_BUILTIN(unspec_kdmbt, \"v_kdmbt\", V_KDMBT)\n+  NDS32_BUILTIN(unspec_kdmtb, \"kdmtb\", KDMTB)\n+  NDS32_BUILTIN(unspec_kdmtb, \"v_kdmtb\", V_KDMTB)\n+  NDS32_BUILTIN(unspec_kdmtt, \"kdmtt\", KDMTT)\n+  NDS32_BUILTIN(unspec_kdmtt, \"v_kdmtt\", V_KDMTT)\n+  NDS32_BUILTIN(unspec_khmbb, \"khmbb\", KHMBB)\n+  NDS32_BUILTIN(unspec_khmbb, \"v_khmbb\", V_KHMBB)\n+  NDS32_BUILTIN(unspec_khmbt, \"khmbt\", KHMBT)\n+  NDS32_BUILTIN(unspec_khmbt, \"v_khmbt\", V_KHMBT)\n+  NDS32_BUILTIN(unspec_khmtb, \"khmtb\", KHMTB)\n+  NDS32_BUILTIN(unspec_khmtb, \"v_khmtb\", V_KHMTB)\n+  NDS32_BUILTIN(unspec_khmtt, \"khmtt\", KHMTT)\n+  NDS32_BUILTIN(unspec_khmtt, \"v_khmtt\", V_KHMTT)\n+  NDS32_BUILTIN(unspec_kslraw, \"kslraw\", KSLRAW)\n+  NDS32_BUILTIN(unspec_kslrawu, \"kslraw_u\", KSLRAW_U)\n   NDS32_BUILTIN(rotrsi3, \"rotr\", ROTR)\n   NDS32_BUILTIN(unspec_sva, \"sva\", SVA)\n   NDS32_BUILTIN(unspec_svs, \"svs\", SVS)\n@@ -603,7 +651,202 @@ static struct builtin_description bdesc_2arg[] =\n   NDS32_NO_TARGET_BUILTIN(unaligned_store_hw, \"unaligned_store_hw\", UASTORE_HW)\n   NDS32_NO_TARGET_BUILTIN(unaligned_storesi, \"unaligned_store_hw\", UASTORE_W)\n   NDS32_NO_TARGET_BUILTIN(unaligned_storedi, \"unaligned_store_hw\", UASTORE_DW)\n-\n+  NDS32_BUILTIN(addv2hi3, \"add16\", ADD16)\n+  NDS32_BUILTIN(addv2hi3, \"v_uadd16\", V_UADD16)\n+  NDS32_BUILTIN(addv2hi3, \"v_sadd16\", V_SADD16)\n+  NDS32_BUILTIN(raddv2hi3, \"radd16\", RADD16)\n+  NDS32_BUILTIN(raddv2hi3, \"v_radd16\", V_RADD16)\n+  NDS32_BUILTIN(uraddv2hi3, \"uradd16\", URADD16)\n+  NDS32_BUILTIN(uraddv2hi3, \"v_uradd16\", V_URADD16)\n+  NDS32_BUILTIN(kaddv2hi3, \"kadd16\", KADD16)\n+  NDS32_BUILTIN(kaddv2hi3, \"v_kadd16\", V_KADD16)\n+  NDS32_BUILTIN(ukaddv2hi3, \"ukadd16\", UKADD16)\n+  NDS32_BUILTIN(ukaddv2hi3, \"v_ukadd16\", V_UKADD16)\n+  NDS32_BUILTIN(subv2hi3, \"sub16\", SUB16)\n+  NDS32_BUILTIN(subv2hi3, \"v_usub16\", V_USUB16)\n+  NDS32_BUILTIN(subv2hi3, \"v_ssub16\", V_SSUB16)\n+  NDS32_BUILTIN(rsubv2hi3, \"rsub16\", RSUB16)\n+  NDS32_BUILTIN(rsubv2hi3, \"v_rsub16\", V_RSUB16)\n+  NDS32_BUILTIN(ursubv2hi3, \"ursub16\", URSUB16)\n+  NDS32_BUILTIN(ursubv2hi3, \"v_ursub16\", V_URSUB16)\n+  NDS32_BUILTIN(ksubv2hi3, \"ksub16\", KSUB16)\n+  NDS32_BUILTIN(ksubv2hi3, \"v_ksub16\", V_KSUB16)\n+  NDS32_BUILTIN(uksubv2hi3, \"uksub16\", UKSUB16)\n+  NDS32_BUILTIN(uksubv2hi3, \"v_uksub16\", V_UKSUB16)\n+  NDS32_BUILTIN(cras16_1, \"cras16\", CRAS16)\n+  NDS32_BUILTIN(cras16_1, \"v_ucras16\", V_UCRAS16)\n+  NDS32_BUILTIN(cras16_1, \"v_scras16\", V_SCRAS16)\n+  NDS32_BUILTIN(rcras16_1, \"rcras16\", RCRAS16)\n+  NDS32_BUILTIN(rcras16_1, \"v_rcras16\", V_RCRAS16)\n+  NDS32_BUILTIN(urcras16_1, \"urcras16\", URCRAS16)\n+  NDS32_BUILTIN(urcras16_1, \"v_urcras16\", V_URCRAS16)\n+  NDS32_BUILTIN(kcras16_1, \"kcras16\", KCRAS16)\n+  NDS32_BUILTIN(kcras16_1, \"v_kcras16\", V_KCRAS16)\n+  NDS32_BUILTIN(ukcras16_1, \"ukcras16\", UKCRAS16)\n+  NDS32_BUILTIN(ukcras16_1, \"v_ukcras16\", V_UKCRAS16)\n+  NDS32_BUILTIN(crsa16_1, \"crsa16\", CRSA16)\n+  NDS32_BUILTIN(crsa16_1, \"v_ucrsa16\", V_UCRSA16)\n+  NDS32_BUILTIN(crsa16_1, \"v_scrsa16\", V_SCRSA16)\n+  NDS32_BUILTIN(rcrsa16_1, \"rcrsa16\", RCRSA16)\n+  NDS32_BUILTIN(rcrsa16_1, \"v_rcrsa16\", V_RCRSA16)\n+  NDS32_BUILTIN(urcrsa16_1, \"urcrsa16\", URCRSA16)\n+  NDS32_BUILTIN(urcrsa16_1, \"v_urcrsa16\", V_URCRSA16)\n+  NDS32_BUILTIN(kcrsa16_1, \"kcrsa16\", KCRSA16)\n+  NDS32_BUILTIN(kcrsa16_1, \"v_kcrsa16\", V_KCRSA16)\n+  NDS32_BUILTIN(ukcrsa16_1, \"ukcrsa16\", UKCRSA16)\n+  NDS32_BUILTIN(ukcrsa16_1, \"v_ukcrsa16\", V_UKCRSA16)\n+  NDS32_BUILTIN(addv4qi3, \"add8\", ADD8)\n+  NDS32_BUILTIN(addv4qi3, \"v_uadd8\", V_UADD8)\n+  NDS32_BUILTIN(addv4qi3, \"v_sadd8\", V_SADD8)\n+  NDS32_BUILTIN(raddv4qi3, \"radd8\", RADD8)\n+  NDS32_BUILTIN(raddv4qi3, \"v_radd8\", V_RADD8)\n+  NDS32_BUILTIN(uraddv4qi3, \"uradd8\", URADD8)\n+  NDS32_BUILTIN(uraddv4qi3, \"v_uradd8\", V_URADD8)\n+  NDS32_BUILTIN(kaddv4qi3, \"kadd8\", KADD8)\n+  NDS32_BUILTIN(kaddv4qi3, \"v_kadd8\", V_KADD8)\n+  NDS32_BUILTIN(ukaddv4qi3, \"ukadd8\", UKADD8)\n+  NDS32_BUILTIN(ukaddv4qi3, \"v_ukadd8\", V_UKADD8)\n+  NDS32_BUILTIN(subv4qi3, \"sub8\", SUB8)\n+  NDS32_BUILTIN(subv4qi3, \"v_usub8\", V_USUB8)\n+  NDS32_BUILTIN(subv4qi3, \"v_ssub8\", V_SSUB8)\n+  NDS32_BUILTIN(rsubv4qi3, \"rsub8\", RSUB8)\n+  NDS32_BUILTIN(rsubv4qi3, \"v_rsub8\", V_RSUB8)\n+  NDS32_BUILTIN(ursubv4qi3, \"ursub8\", URSUB8)\n+  NDS32_BUILTIN(ursubv4qi3, \"v_ursub8\", V_URSUB8)\n+  NDS32_BUILTIN(ksubv4qi3, \"ksub8\", KSUB8)\n+  NDS32_BUILTIN(ksubv4qi3, \"v_ksub8\", V_KSUB8)\n+  NDS32_BUILTIN(uksubv4qi3, \"uksub8\", UKSUB8)\n+  NDS32_BUILTIN(uksubv4qi3, \"v_uksub8\", V_UKSUB8)\n+  NDS32_BUILTIN(ashrv2hi3, \"sra16\", SRA16)\n+  NDS32_BUILTIN(ashrv2hi3, \"v_sra16\", V_SRA16)\n+  NDS32_BUILTIN(sra16_round, \"sra16_u\", SRA16_U)\n+  NDS32_BUILTIN(sra16_round, \"v_sra16_u\", V_SRA16_U)\n+  NDS32_BUILTIN(lshrv2hi3, \"srl16\", SRL16)\n+  NDS32_BUILTIN(lshrv2hi3, \"v_srl16\", V_SRL16)\n+  NDS32_BUILTIN(srl16_round, \"srl16_u\", SRL16_U)\n+  NDS32_BUILTIN(srl16_round, \"v_srl16_u\", V_SRL16_U)\n+  NDS32_BUILTIN(ashlv2hi3, \"sll16\", SLL16)\n+  NDS32_BUILTIN(ashlv2hi3, \"v_sll16\", V_SLL16)\n+  NDS32_BUILTIN(kslli16, \"ksll16\", KSLL16)\n+  NDS32_BUILTIN(kslli16, \"v_ksll16\", V_KSLL16)\n+  NDS32_BUILTIN(kslra16, \"kslra16\", KSLRA16)\n+  NDS32_BUILTIN(kslra16, \"v_kslra16\", V_KSLRA16)\n+  NDS32_BUILTIN(kslra16_round, \"kslra16_u\", KSLRA16_U)\n+  NDS32_BUILTIN(kslra16_round, \"v_kslra16_u\", V_KSLRA16_U)\n+  NDS32_BUILTIN(cmpeq16, \"cmpeq16\", CMPEQ16)\n+  NDS32_BUILTIN(cmpeq16, \"v_scmpeq16\", V_SCMPEQ16)\n+  NDS32_BUILTIN(cmpeq16, \"v_ucmpeq16\", V_UCMPEQ16)\n+  NDS32_BUILTIN(scmplt16, \"scmplt16\", SCMPLT16)\n+  NDS32_BUILTIN(scmplt16, \"v_scmplt16\", V_SCMPLT16)\n+  NDS32_BUILTIN(scmple16, \"scmple16\", SCMPLE16)\n+  NDS32_BUILTIN(scmple16, \"v_scmple16\", V_SCMPLE16)\n+  NDS32_BUILTIN(ucmplt16, \"ucmplt16\", UCMPLT16)\n+  NDS32_BUILTIN(ucmplt16, \"v_ucmplt16\", V_UCMPLT16)\n+  NDS32_BUILTIN(ucmplt16, \"ucmple16\", UCMPLE16)\n+  NDS32_BUILTIN(ucmplt16, \"v_ucmple16\", V_UCMPLE16)\n+  NDS32_BUILTIN(cmpeq8, \"cmpeq8\", CMPEQ8)\n+  NDS32_BUILTIN(cmpeq8, \"v_scmpeq8\", V_SCMPEQ8)\n+  NDS32_BUILTIN(cmpeq8, \"v_ucmpeq8\", V_UCMPEQ8)\n+  NDS32_BUILTIN(scmplt8, \"scmplt8\", SCMPLT8)\n+  NDS32_BUILTIN(scmplt8, \"v_scmplt8\", V_SCMPLT8)\n+  NDS32_BUILTIN(scmple8, \"scmple8\", SCMPLE8)\n+  NDS32_BUILTIN(scmple8, \"v_scmple8\", V_SCMPLE8)\n+  NDS32_BUILTIN(ucmplt8, \"ucmplt8\", UCMPLT8)\n+  NDS32_BUILTIN(ucmplt8, \"v_ucmplt8\", V_UCMPLT8)\n+  NDS32_BUILTIN(ucmplt8, \"ucmple8\", UCMPLE8)\n+  NDS32_BUILTIN(ucmplt8, \"v_ucmple8\", V_UCMPLE8)\n+  NDS32_BUILTIN(sminv2hi3, \"smin16\", SMIN16)\n+  NDS32_BUILTIN(sminv2hi3, \"v_smin16\", V_SMIN16)\n+  NDS32_BUILTIN(uminv2hi3, \"umin16\", UMIN16)\n+  NDS32_BUILTIN(uminv2hi3, \"v_umin16\", V_UMIN16)\n+  NDS32_BUILTIN(smaxv2hi3, \"smax16\", SMAX16)\n+  NDS32_BUILTIN(smaxv2hi3, \"v_smax16\", V_SMAX16)\n+  NDS32_BUILTIN(umaxv2hi3, \"umax16\", UMAX16)\n+  NDS32_BUILTIN(umaxv2hi3, \"v_umax16\", V_UMAX16)\n+  NDS32_BUILTIN(khm16, \"khm16\", KHM16)\n+  NDS32_BUILTIN(khm16, \"v_khm16\", V_KHM16)\n+  NDS32_BUILTIN(khmx16, \"khmx16\", KHMX16)\n+  NDS32_BUILTIN(khmx16, \"v_khmx16\", V_KHMX16)\n+  NDS32_BUILTIN(sminv4qi3, \"smin8\", SMIN8)\n+  NDS32_BUILTIN(sminv4qi3, \"v_smin8\", V_SMIN8)\n+  NDS32_BUILTIN(uminv4qi3, \"umin8\", UMIN8)\n+  NDS32_BUILTIN(uminv4qi3, \"v_umin8\", V_UMIN8)\n+  NDS32_BUILTIN(smaxv4qi3, \"smax8\", SMAX8)\n+  NDS32_BUILTIN(smaxv4qi3, \"v_smax8\", V_SMAX8)\n+  NDS32_BUILTIN(umaxv4qi3, \"umax8\", UMAX8)\n+  NDS32_BUILTIN(umaxv4qi3, \"v_umax8\", V_UMAX8)\n+  NDS32_BUILTIN(raddsi3, \"raddw\", RADDW)\n+  NDS32_BUILTIN(uraddsi3, \"uraddw\", URADDW)\n+  NDS32_BUILTIN(rsubsi3, \"rsubw\", RSUBW)\n+  NDS32_BUILTIN(ursubsi3, \"ursubw\", URSUBW)\n+  NDS32_BUILTIN(sraiu, \"sra_u\", SRA_U)\n+  NDS32_BUILTIN(kssl, \"ksll\", KSLL)\n+  NDS32_BUILTIN(pkbb, \"pkbb16\", PKBB16)\n+  NDS32_BUILTIN(pkbb, \"v_pkbb16\", V_PKBB16)\n+  NDS32_BUILTIN(pkbt, \"pkbt16\", PKBT16)\n+  NDS32_BUILTIN(pkbt, \"v_pkbt16\", V_PKBT16)\n+  NDS32_BUILTIN(pktb, \"pktb16\", PKTB16)\n+  NDS32_BUILTIN(pktb, \"v_pktb16\", V_PKTB16)\n+  NDS32_BUILTIN(pktt, \"pktt16\", PKTT16)\n+  NDS32_BUILTIN(pktt, \"v_pktt16\", V_PKTT16)\n+  NDS32_BUILTIN(smulsi3_highpart, \"smmul\", SMMUL)\n+  NDS32_BUILTIN(smmul_round, \"smmul_u\", SMMUL_U)\n+  NDS32_BUILTIN(smmwb, \"smmwb\", SMMWB)\n+  NDS32_BUILTIN(smmwb, \"v_smmwb\", V_SMMWB)\n+  NDS32_BUILTIN(smmwb_round, \"smmwb_u\", SMMWB_U)\n+  NDS32_BUILTIN(smmwb_round, \"v_smmwb_u\", V_SMMWB_U)\n+  NDS32_BUILTIN(smmwt, \"smmwt\", SMMWT)\n+  NDS32_BUILTIN(smmwt, \"v_smmwt\", V_SMMWT)\n+  NDS32_BUILTIN(smmwt_round, \"smmwt_u\", SMMWT_U)\n+  NDS32_BUILTIN(smmwt_round, \"v_smmwt_u\", V_SMMWT_U)\n+  NDS32_BUILTIN(smbb, \"smbb\", SMBB)\n+  NDS32_BUILTIN(smbb, \"v_smbb\", V_SMBB)\n+  NDS32_BUILTIN(smbt, \"smbt\", SMBT)\n+  NDS32_BUILTIN(smbt, \"v_smbt\", V_SMBT)\n+  NDS32_BUILTIN(smtt, \"smtt\", SMTT)\n+  NDS32_BUILTIN(smtt, \"v_smtt\", V_SMTT)\n+  NDS32_BUILTIN(kmda, \"kmda\", KMDA)\n+  NDS32_BUILTIN(kmda, \"v_kmda\", V_KMDA)\n+  NDS32_BUILTIN(kmxda, \"kmxda\", KMXDA)\n+  NDS32_BUILTIN(kmxda, \"v_kmxda\", V_KMXDA)\n+  NDS32_BUILTIN(smds, \"smds\", SMDS)\n+  NDS32_BUILTIN(smds, \"v_smds\", V_SMDS)\n+  NDS32_BUILTIN(smdrs, \"smdrs\", SMDRS)\n+  NDS32_BUILTIN(smdrs, \"v_smdrs\", V_SMDRS)\n+  NDS32_BUILTIN(smxdsv, \"smxds\", SMXDS)\n+  NDS32_BUILTIN(smxdsv, \"v_smxds\", V_SMXDS)\n+  NDS32_BUILTIN(smal1, \"smal\", SMAL)\n+  NDS32_BUILTIN(smal1, \"v_smal\", V_SMAL)\n+  NDS32_BUILTIN(bitrev, \"bitrev\", BITREV)\n+  NDS32_BUILTIN(wext, \"wext\", WEXT)\n+  NDS32_BUILTIN(adddi3, \"sadd64\", SADD64)\n+  NDS32_BUILTIN(adddi3, \"uadd64\", UADD64)\n+  NDS32_BUILTIN(radddi3, \"radd64\", RADD64)\n+  NDS32_BUILTIN(uradddi3, \"uradd64\", URADD64)\n+  NDS32_BUILTIN(kadddi3, \"kadd64\", KADD64)\n+  NDS32_BUILTIN(ukadddi3, \"ukadd64\", UKADD64)\n+  NDS32_BUILTIN(subdi3, \"ssub64\", SSUB64)\n+  NDS32_BUILTIN(subdi3, \"usub64\", USUB64)\n+  NDS32_BUILTIN(rsubdi3, \"rsub64\", RSUB64)\n+  NDS32_BUILTIN(ursubdi3, \"ursub64\", URSUB64)\n+  NDS32_BUILTIN(ksubdi3, \"ksub64\", KSUB64)\n+  NDS32_BUILTIN(uksubdi3, \"uksub64\", UKSUB64)\n+  NDS32_BUILTIN(smul16, \"smul16\", SMUL16)\n+  NDS32_BUILTIN(smul16, \"v_smul16\", V_SMUL16)\n+  NDS32_BUILTIN(smulx16, \"smulx16\", SMULX16)\n+  NDS32_BUILTIN(smulx16, \"v_smulx16\", V_SMULX16)\n+  NDS32_BUILTIN(umul16, \"umul16\", UMUL16)\n+  NDS32_BUILTIN(umul16, \"v_umul16\", V_UMUL16)\n+  NDS32_BUILTIN(umulx16, \"umulx16\", UMULX16)\n+  NDS32_BUILTIN(umulx16, \"v_umulx16\", V_UMULX16)\n+  NDS32_BUILTIN(kwmmul, \"kwmmul\", KWMMUL)\n+  NDS32_BUILTIN(kwmmul_round, \"kwmmul_u\", KWMMUL_U)\n+  NDS32_NO_TARGET_BUILTIN(unaligned_storev2hi,\n+\t\t\t  \"put_unaligned_u16x2\", UASTORE_U16)\n+  NDS32_NO_TARGET_BUILTIN(unaligned_storev2hi,\n+\t\t\t  \"put_unaligned_s16x2\", UASTORE_S16)\n+  NDS32_NO_TARGET_BUILTIN(unaligned_storev4qi, \"put_unaligned_u8x4\", UASTORE_U8)\n+  NDS32_NO_TARGET_BUILTIN(unaligned_storev4qi, \"put_unaligned_s8x4\", UASTORE_S8)\n };\n \n /* Two-argument intrinsics with an immediate second argument.  */\n@@ -617,6 +860,22 @@ static struct builtin_description bdesc_2argimm[] =\n   NDS32_BUILTIN(unspec_clips, \"clips\", CLIPS)\n   NDS32_NO_TARGET_BUILTIN(unspec_teqz, \"teqz\", TEQZ)\n   NDS32_NO_TARGET_BUILTIN(unspec_tnez, \"tnez\", TNEZ)\n+  NDS32_BUILTIN(ashrv2hi3, \"srl16\", SRL16)\n+  NDS32_BUILTIN(ashrv2hi3, \"v_srl16\", V_SRL16)\n+  NDS32_BUILTIN(srl16_round, \"srl16_u\", SRL16_U)\n+  NDS32_BUILTIN(srl16_round, \"v_srl16_u\", V_SRL16_U)\n+  NDS32_BUILTIN(kslli16, \"ksll16\", KSLL16)\n+  NDS32_BUILTIN(kslli16, \"v_ksll16\", V_KSLL16)\n+  NDS32_BUILTIN(sclip16, \"sclip16\", SCLIP16)\n+  NDS32_BUILTIN(sclip16, \"v_sclip16\", V_SCLIP16)\n+  NDS32_BUILTIN(uclip16, \"uclip16\", UCLIP16)\n+  NDS32_BUILTIN(uclip16, \"v_uclip16\", V_UCLIP16)\n+  NDS32_BUILTIN(sraiu, \"sra_u\", SRA_U)\n+  NDS32_BUILTIN(kssl, \"ksll\", KSLL)\n+  NDS32_BUILTIN(bitrev, \"bitrev\", BITREV)\n+  NDS32_BUILTIN(wext, \"wext\", WEXT)\n+  NDS32_BUILTIN(uclip32, \"uclip32\", UCLIP32)\n+  NDS32_BUILTIN(sclip32, \"sclip32\", SCLIP32)\n };\n \n /* Intrinsics that take three arguments.  */\n@@ -625,6 +884,67 @@ static struct builtin_description bdesc_3arg[] =\n   NDS32_BUILTIN(unspec_pbsada, \"pbsada\", PBSADA)\n   NDS32_NO_TARGET_BUILTIN(bse, \"bse\", BSE)\n   NDS32_NO_TARGET_BUILTIN(bsp, \"bsp\", BSP)\n+  NDS32_BUILTIN(kmabb, \"kmabb\", KMABB)\n+  NDS32_BUILTIN(kmabb, \"v_kmabb\", V_KMABB)\n+  NDS32_BUILTIN(kmabt, \"kmabt\", KMABT)\n+  NDS32_BUILTIN(kmabt, \"v_kmabt\", V_KMABT)\n+  NDS32_BUILTIN(kmatt, \"kmatt\", KMATT)\n+  NDS32_BUILTIN(kmatt, \"v_kmatt\", V_KMATT)\n+  NDS32_BUILTIN(kmada, \"kmada\", KMADA)\n+  NDS32_BUILTIN(kmada, \"v_kmada\", V_KMADA)\n+  NDS32_BUILTIN(kmaxda, \"kmaxda\", KMAXDA)\n+  NDS32_BUILTIN(kmaxda, \"v_kmaxda\", V_KMAXDA)\n+  NDS32_BUILTIN(kmads, \"kmads\", KMADS)\n+  NDS32_BUILTIN(kmads, \"v_kmads\", V_KMADS)\n+  NDS32_BUILTIN(kmadrs, \"kmadrs\", KMADRS)\n+  NDS32_BUILTIN(kmadrs, \"v_kmadrs\", V_KMADRS)\n+  NDS32_BUILTIN(kmaxds, \"kmaxds\", KMAXDS)\n+  NDS32_BUILTIN(kmaxds, \"v_kmaxds\", V_KMAXDS)\n+  NDS32_BUILTIN(kmsda, \"kmsda\", KMSDA)\n+  NDS32_BUILTIN(kmsda, \"v_kmsda\", V_KMSDA)\n+  NDS32_BUILTIN(kmsxda, \"kmsxda\", KMSXDA)\n+  NDS32_BUILTIN(kmsxda, \"v_kmsxda\", V_KMSXDA)\n+  NDS32_BUILTIN(bpick1, \"bpick\", BPICK)\n+  NDS32_BUILTIN(smar64_1, \"smar64\", SMAR64)\n+  NDS32_BUILTIN(smsr64, \"smsr64\", SMSR64)\n+  NDS32_BUILTIN(umar64_1, \"umar64\", UMAR64)\n+  NDS32_BUILTIN(umsr64, \"umsr64\", UMSR64)\n+  NDS32_BUILTIN(kmar64_1, \"kmar64\", KMAR64)\n+  NDS32_BUILTIN(kmsr64, \"kmsr64\", KMSR64)\n+  NDS32_BUILTIN(ukmar64_1, \"ukmar64\", UKMAR64)\n+  NDS32_BUILTIN(ukmsr64, \"ukmsr64\", UKMSR64)\n+  NDS32_BUILTIN(smalbb, \"smalbb\", SMALBB)\n+  NDS32_BUILTIN(smalbb, \"v_smalbb\", V_SMALBB)\n+  NDS32_BUILTIN(smalbt, \"smalbt\", SMALBT)\n+  NDS32_BUILTIN(smalbt, \"v_smalbt\", V_SMALBT)\n+  NDS32_BUILTIN(smaltt, \"smaltt\", SMALTT)\n+  NDS32_BUILTIN(smaltt, \"v_smaltt\", V_SMALTT)\n+  NDS32_BUILTIN(smalda1, \"smalda\", SMALDA)\n+  NDS32_BUILTIN(smalda1, \"v_smalda\", V_SMALDA)\n+  NDS32_BUILTIN(smalxda1, \"smalxda\", SMALXDA)\n+  NDS32_BUILTIN(smalxda1, \"v_smalxda\", V_SMALXDA)\n+  NDS32_BUILTIN(smalds1, \"smalds\", SMALDS)\n+  NDS32_BUILTIN(smalds1, \"v_smalds\", V_SMALDS)\n+  NDS32_BUILTIN(smaldrs3, \"smaldrs\", SMALDRS)\n+  NDS32_BUILTIN(smaldrs3, \"v_smaldrs\", V_SMALDRS)\n+  NDS32_BUILTIN(smalxds1, \"smalxds\", SMALXDS)\n+  NDS32_BUILTIN(smalxds1, \"v_smalxds\", V_SMALXDS)\n+  NDS32_BUILTIN(smslda1, \"smslda\", SMSLDA)\n+  NDS32_BUILTIN(smslda1, \"v_smslda\", V_SMSLDA)\n+  NDS32_BUILTIN(smslxda1, \"smslxda\", SMSLXDA)\n+  NDS32_BUILTIN(smslxda1, \"v_smslxda\", V_SMSLXDA)\n+  NDS32_BUILTIN(kmmawb, \"kmmawb\", KMMAWB)\n+  NDS32_BUILTIN(kmmawb, \"v_kmmawb\", V_KMMAWB)\n+  NDS32_BUILTIN(kmmawb_round, \"kmmawb_u\", KMMAWB_U)\n+  NDS32_BUILTIN(kmmawb_round, \"v_kmmawb_u\", V_KMMAWB_U)\n+  NDS32_BUILTIN(kmmawt, \"kmmawt\", KMMAWT)\n+  NDS32_BUILTIN(kmmawt, \"v_kmmawt\", V_KMMAWT)\n+  NDS32_BUILTIN(kmmawt_round, \"kmmawt_u\", KMMAWT_U)\n+  NDS32_BUILTIN(kmmawt_round, \"v_kmmawt_u\", V_KMMAWT_U)\n+  NDS32_BUILTIN(kmmac, \"kmmac\", KMMAC)\n+  NDS32_BUILTIN(kmmac_round, \"kmmac_u\", KMMAC_U)\n+  NDS32_BUILTIN(kmmsb, \"kmmsb\", KMMSB)\n+  NDS32_BUILTIN(kmmsb_round, \"kmmsb_u\", KMMSB_U)\n };\n \n /* Three-argument intrinsics with an immediate third argument.  */\n@@ -634,6 +954,7 @@ static struct builtin_description bdesc_3argimm[] =\n   NDS32_NO_TARGET_BUILTIN(prefetch_hw, \"prefetch_hw\", DPREF_HW)\n   NDS32_NO_TARGET_BUILTIN(prefetch_w, \"prefetch_w\", DPREF_W)\n   NDS32_NO_TARGET_BUILTIN(prefetch_dw, \"prefetch_dw\", DPREF_DW)\n+  NDS32_BUILTIN(insb, \"insb\", INSB)\n };\n \n /* Intrinsics that load a value.  */\n@@ -676,6 +997,11 @@ nds32_expand_builtin_impl (tree exp,\n   unsigned i;\n   struct builtin_description *d;\n \n+  if (!NDS32_EXT_DSP_P ()\n+      && fcode > NDS32_BUILTIN_DSP_BEGIN\n+      && fcode < NDS32_BUILTIN_DSP_END)\n+    error (\"don't support DSP extension instructions\");\n+\n   switch (fcode)\n     {\n     /* FPU Register Transfer.  */\n@@ -812,6 +1138,9 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL:\n       emit_insn (gen_cctl_l1d_wball_one_lvl());\n       return target;\n+    case NDS32_BUILTIN_CLROV:\n+      emit_insn (gen_unspec_volatile_clrov ());\n+      return target;\n     case NDS32_BUILTIN_STANDBY_NO_WAKE_GRANT:\n       emit_insn (gen_unspec_standby_no_wake_grant ());\n       return target;\n@@ -947,10 +1276,18 @@ nds32_init_builtins_impl (void)\n \t\t\tNDS32_BUILTIN_ ## CODE, BUILT_IN_MD, NULL, NULL_TREE)\n \n   /* Looking for return type and argument can be found in tree.h file.  */\n+  tree ptr_char_type_node = build_pointer_type (char_type_node);\n   tree ptr_uchar_type_node = build_pointer_type (unsigned_char_type_node);\n   tree ptr_ushort_type_node = build_pointer_type (short_unsigned_type_node);\n+  tree ptr_short_type_node = build_pointer_type (short_integer_type_node);\n   tree ptr_uint_type_node = build_pointer_type (unsigned_type_node);\n   tree ptr_ulong_type_node = build_pointer_type (long_long_unsigned_type_node);\n+  tree v4qi_type_node = build_vector_type (intQI_type_node, 4);\n+  tree u_v4qi_type_node = build_vector_type (unsigned_intQI_type_node, 4);\n+  tree v2hi_type_node = build_vector_type (intHI_type_node, 2);\n+  tree u_v2hi_type_node = build_vector_type (unsigned_intHI_type_node, 2);\n+  tree v2si_type_node = build_vector_type (intSI_type_node, 2);\n+  tree u_v2si_type_node = build_vector_type (unsigned_intSI_type_node, 2);\n \n   /* Cache.  */\n   ADD_NDS32_BUILTIN1 (\"isync\", void, ptr_uint, ISYNC);\n@@ -1050,6 +1387,31 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN2 (\"se_ffmism\", integer, unsigned, unsigned, FFMISM);\n   ADD_NDS32_BUILTIN2 (\"se_flmism\", integer, unsigned, unsigned, FLMISM);\n \n+  /* SATURATION  */\n+  ADD_NDS32_BUILTIN2 (\"kaddw\", integer, integer, integer, KADDW);\n+  ADD_NDS32_BUILTIN2 (\"ksubw\", integer, integer, integer, KSUBW);\n+  ADD_NDS32_BUILTIN2 (\"kaddh\", integer, integer, integer, KADDH);\n+  ADD_NDS32_BUILTIN2 (\"ksubh\", integer, integer, integer, KSUBH);\n+  ADD_NDS32_BUILTIN2 (\"kdmbb\", integer, unsigned, unsigned, KDMBB);\n+  ADD_NDS32_BUILTIN2 (\"v_kdmbb\", integer, v2hi, v2hi, V_KDMBB);\n+  ADD_NDS32_BUILTIN2 (\"kdmbt\", integer, unsigned, unsigned, KDMBT);\n+  ADD_NDS32_BUILTIN2 (\"v_kdmbt\", integer, v2hi, v2hi, V_KDMBT);\n+  ADD_NDS32_BUILTIN2 (\"kdmtb\", integer, unsigned, unsigned, KDMTB);\n+  ADD_NDS32_BUILTIN2 (\"v_kdmtb\", integer, v2hi, v2hi, V_KDMTB);\n+  ADD_NDS32_BUILTIN2 (\"kdmtt\", integer, unsigned, unsigned, KDMTT);\n+  ADD_NDS32_BUILTIN2 (\"v_kdmtt\", integer, v2hi, v2hi, V_KDMTT);\n+  ADD_NDS32_BUILTIN2 (\"khmbb\", integer, unsigned, unsigned, KHMBB);\n+  ADD_NDS32_BUILTIN2 (\"v_khmbb\", integer, v2hi, v2hi, V_KHMBB);\n+  ADD_NDS32_BUILTIN2 (\"khmbt\", integer, unsigned, unsigned, KHMBT);\n+  ADD_NDS32_BUILTIN2 (\"v_khmbt\", integer, v2hi, v2hi, V_KHMBT);\n+  ADD_NDS32_BUILTIN2 (\"khmtb\", integer, unsigned, unsigned, KHMTB);\n+  ADD_NDS32_BUILTIN2 (\"v_khmtb\", integer, v2hi, v2hi, V_KHMTB);\n+  ADD_NDS32_BUILTIN2 (\"khmtt\", integer, unsigned, unsigned, KHMTT);\n+  ADD_NDS32_BUILTIN2 (\"v_khmtt\", integer, v2hi, v2hi, V_KHMTT);\n+  ADD_NDS32_BUILTIN2 (\"kslraw\", integer, integer, integer, KSLRAW);\n+  ADD_NDS32_BUILTIN2 (\"kslraw_u\", integer, integer, integer, KSLRAW_U);\n+  ADD_NDS32_BUILTIN0 (\"rdov\", unsigned, RDOV);\n+  ADD_NDS32_BUILTIN0 (\"clrov\", void, CLROV);\n \n   /* ROTR  */\n   ADD_NDS32_BUILTIN2 (\"rotr\", unsigned, unsigned, unsigned, ROTR);\n@@ -1109,4 +1471,384 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN0 (\"enable_unaligned\", void, ENABLE_UNALIGNED);\n   ADD_NDS32_BUILTIN0 (\"disable_unaligned\", void, DISABLE_UNALIGNED);\n \n+  /* DSP Extension: SIMD 16bit Add and Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"add16\", unsigned, unsigned, unsigned, ADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_uadd16\", u_v2hi, u_v2hi, u_v2hi, V_UADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_sadd16\", v2hi, v2hi, v2hi, V_SADD16);\n+  ADD_NDS32_BUILTIN2 (\"radd16\", unsigned, unsigned, unsigned, RADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_radd16\", v2hi, v2hi, v2hi, V_RADD16);\n+  ADD_NDS32_BUILTIN2 (\"uradd16\", unsigned, unsigned, unsigned, URADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_uradd16\", u_v2hi, u_v2hi, u_v2hi, V_URADD16);\n+  ADD_NDS32_BUILTIN2 (\"kadd16\", unsigned, unsigned, unsigned, KADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_kadd16\", v2hi, v2hi, v2hi, V_KADD16);\n+  ADD_NDS32_BUILTIN2 (\"ukadd16\", unsigned, unsigned, unsigned, UKADD16);\n+  ADD_NDS32_BUILTIN2 (\"v_ukadd16\", u_v2hi, u_v2hi, u_v2hi, V_UKADD16);\n+  ADD_NDS32_BUILTIN2 (\"sub16\", unsigned, unsigned, unsigned, SUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_usub16\", u_v2hi, u_v2hi, u_v2hi, V_USUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_ssub16\", v2hi, v2hi, v2hi, V_SSUB16);\n+  ADD_NDS32_BUILTIN2 (\"rsub16\", unsigned, unsigned, unsigned, RSUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_rsub16\", v2hi, v2hi, v2hi, V_RSUB16);\n+  ADD_NDS32_BUILTIN2 (\"ursub16\", unsigned, unsigned, unsigned, URSUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_ursub16\", u_v2hi, u_v2hi, u_v2hi, V_URSUB16);\n+  ADD_NDS32_BUILTIN2 (\"ksub16\", unsigned, unsigned, unsigned, KSUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_ksub16\", v2hi, v2hi, v2hi, V_KSUB16);\n+  ADD_NDS32_BUILTIN2 (\"uksub16\", unsigned, unsigned, unsigned, UKSUB16);\n+  ADD_NDS32_BUILTIN2 (\"v_uksub16\", u_v2hi, u_v2hi, u_v2hi, V_UKSUB16);\n+  ADD_NDS32_BUILTIN2 (\"cras16\", unsigned, unsigned, unsigned, CRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_ucras16\", u_v2hi, u_v2hi, u_v2hi, V_UCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_scras16\", v2hi, v2hi, v2hi, V_SCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"rcras16\", unsigned, unsigned, unsigned, RCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_rcras16\", v2hi, v2hi, v2hi, V_RCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"urcras16\", unsigned, unsigned, unsigned, URCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_urcras16\", u_v2hi, u_v2hi, u_v2hi, V_URCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"kcras16\", unsigned, unsigned, unsigned, KCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_kcras16\", v2hi, v2hi, v2hi, V_KCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"ukcras16\", unsigned, unsigned, unsigned, UKCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"v_ukcras16\", u_v2hi, u_v2hi, u_v2hi, V_UKCRAS16);\n+  ADD_NDS32_BUILTIN2 (\"crsa16\", unsigned, unsigned, unsigned, CRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_ucrsa16\", u_v2hi, u_v2hi, u_v2hi, V_UCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_scrsa16\", v2hi, v2hi, v2hi, V_SCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"rcrsa16\", unsigned, unsigned, unsigned, RCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_rcrsa16\", v2hi, v2hi, v2hi, V_RCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"urcrsa16\", unsigned, unsigned, unsigned, URCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_urcrsa16\", u_v2hi, u_v2hi, u_v2hi, V_URCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"kcrsa16\", unsigned, unsigned, unsigned, KCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_kcrsa16\", v2hi, v2hi, v2hi, V_KCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"ukcrsa16\", unsigned, unsigned, unsigned, UKCRSA16);\n+  ADD_NDS32_BUILTIN2 (\"v_ukcrsa16\", u_v2hi, u_v2hi, u_v2hi, V_UKCRSA16);\n+\n+  /* DSP Extension: SIMD 8bit Add and Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"add8\", integer, integer, integer, ADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_uadd8\", u_v4qi, u_v4qi, u_v4qi, V_UADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_sadd8\", v4qi, v4qi, v4qi, V_SADD8);\n+  ADD_NDS32_BUILTIN2 (\"radd8\", unsigned, unsigned, unsigned, RADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_radd8\", v4qi, v4qi, v4qi, V_RADD8);\n+  ADD_NDS32_BUILTIN2 (\"uradd8\", unsigned, unsigned, unsigned, URADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_uradd8\", u_v4qi, u_v4qi, u_v4qi, V_URADD8);\n+  ADD_NDS32_BUILTIN2 (\"kadd8\", unsigned, unsigned, unsigned, KADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_kadd8\", v4qi, v4qi, v4qi, V_KADD8);\n+  ADD_NDS32_BUILTIN2 (\"ukadd8\", unsigned, unsigned, unsigned, UKADD8);\n+  ADD_NDS32_BUILTIN2 (\"v_ukadd8\", u_v4qi, u_v4qi, u_v4qi, V_UKADD8);\n+  ADD_NDS32_BUILTIN2 (\"sub8\", integer, integer, integer, SUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_usub8\", u_v4qi, u_v4qi, u_v4qi, V_USUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_ssub8\", v4qi, v4qi, v4qi, V_SSUB8);\n+  ADD_NDS32_BUILTIN2 (\"rsub8\", unsigned, unsigned, unsigned, RSUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_rsub8\", v4qi, v4qi, v4qi, V_RSUB8);\n+  ADD_NDS32_BUILTIN2 (\"ursub8\", unsigned, unsigned, unsigned, URSUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_ursub8\", u_v4qi, u_v4qi, u_v4qi, V_URSUB8);\n+  ADD_NDS32_BUILTIN2 (\"ksub8\", unsigned, unsigned, unsigned, KSUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_ksub8\", v4qi, v4qi, v4qi, V_KSUB8);\n+  ADD_NDS32_BUILTIN2 (\"uksub8\", unsigned, unsigned, unsigned, UKSUB8);\n+  ADD_NDS32_BUILTIN2 (\"v_uksub8\", u_v4qi, u_v4qi, u_v4qi, V_UKSUB8);\n+\n+  /* DSP Extension: SIMD 16bit Shift.  */\n+  ADD_NDS32_BUILTIN2 (\"sra16\", unsigned, unsigned, unsigned, SRA16);\n+  ADD_NDS32_BUILTIN2 (\"v_sra16\", v2hi, v2hi, unsigned, V_SRA16);\n+  ADD_NDS32_BUILTIN2 (\"sra16_u\", unsigned, unsigned, unsigned, SRA16_U);\n+  ADD_NDS32_BUILTIN2 (\"v_sra16_u\", v2hi, v2hi, unsigned, V_SRA16_U);\n+  ADD_NDS32_BUILTIN2 (\"srl16\", unsigned, unsigned, unsigned, SRL16);\n+  ADD_NDS32_BUILTIN2 (\"v_srl16\", u_v2hi, u_v2hi, unsigned, V_SRL16);\n+  ADD_NDS32_BUILTIN2 (\"srl16_u\", unsigned, unsigned, unsigned, SRL16_U);\n+  ADD_NDS32_BUILTIN2 (\"v_srl16_u\", u_v2hi, u_v2hi, unsigned, V_SRL16_U);\n+  ADD_NDS32_BUILTIN2 (\"sll16\", unsigned, unsigned, unsigned, SLL16);\n+  ADD_NDS32_BUILTIN2 (\"v_sll16\", u_v2hi, u_v2hi, unsigned, V_SLL16);\n+  ADD_NDS32_BUILTIN2 (\"ksll16\", unsigned, unsigned, unsigned, KSLL16);\n+  ADD_NDS32_BUILTIN2 (\"v_ksll16\", v2hi, v2hi, unsigned, V_KSLL16);\n+  ADD_NDS32_BUILTIN2 (\"kslra16\", unsigned, unsigned, unsigned, KSLRA16);\n+  ADD_NDS32_BUILTIN2 (\"v_kslra16\", v2hi, v2hi, unsigned, V_KSLRA16);\n+  ADD_NDS32_BUILTIN2 (\"kslra16_u\", unsigned, unsigned, unsigned, KSLRA16_U);\n+  ADD_NDS32_BUILTIN2 (\"v_kslra16_u\", v2hi, v2hi, unsigned, V_KSLRA16_U);\n+\n+  /* DSP Extension: 16bit Compare.  */\n+  ADD_NDS32_BUILTIN2 (\"cmpeq16\", unsigned, unsigned, unsigned, CMPEQ16);\n+  ADD_NDS32_BUILTIN2 (\"v_scmpeq16\", u_v2hi, v2hi, v2hi, V_SCMPEQ16);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmpeq16\", u_v2hi, u_v2hi, u_v2hi, V_UCMPEQ16);\n+  ADD_NDS32_BUILTIN2 (\"scmplt16\", unsigned, unsigned, unsigned, SCMPLT16);\n+  ADD_NDS32_BUILTIN2 (\"v_scmplt16\", u_v2hi, v2hi, v2hi, V_SCMPLT16);\n+  ADD_NDS32_BUILTIN2 (\"scmple16\", unsigned, unsigned, unsigned, SCMPLE16);\n+  ADD_NDS32_BUILTIN2 (\"v_scmple16\", u_v2hi, v2hi, v2hi, V_SCMPLE16);\n+  ADD_NDS32_BUILTIN2 (\"ucmplt16\", unsigned, unsigned, unsigned, UCMPLT16);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmplt16\", u_v2hi, u_v2hi, u_v2hi, V_UCMPLT16);\n+  ADD_NDS32_BUILTIN2 (\"ucmple16\", unsigned, unsigned, unsigned, UCMPLE16);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmple16\", u_v2hi, u_v2hi, u_v2hi, V_UCMPLE16);\n+\n+  /* DSP Extension: 8bit Compare.  */\n+  ADD_NDS32_BUILTIN2 (\"cmpeq8\", unsigned, unsigned, unsigned, CMPEQ8);\n+  ADD_NDS32_BUILTIN2 (\"v_scmpeq8\", u_v4qi, v4qi, v4qi, V_SCMPEQ8);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmpeq8\", u_v4qi, u_v4qi, u_v4qi, V_UCMPEQ8);\n+  ADD_NDS32_BUILTIN2 (\"scmplt8\", unsigned, unsigned, unsigned, SCMPLT8);\n+  ADD_NDS32_BUILTIN2 (\"v_scmplt8\", u_v4qi, v4qi, v4qi, V_SCMPLT8);\n+  ADD_NDS32_BUILTIN2 (\"scmple8\", unsigned, unsigned, unsigned, SCMPLE8);\n+  ADD_NDS32_BUILTIN2 (\"v_scmple8\", u_v4qi, v4qi, v4qi, V_SCMPLE8);\n+  ADD_NDS32_BUILTIN2 (\"ucmplt8\", unsigned, unsigned, unsigned, UCMPLT8);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmplt8\", u_v4qi, u_v4qi, u_v4qi, V_UCMPLT8);\n+  ADD_NDS32_BUILTIN2 (\"ucmple8\", unsigned, unsigned, unsigned, UCMPLE8);\n+  ADD_NDS32_BUILTIN2 (\"v_ucmple8\", u_v4qi, u_v4qi, u_v4qi, V_UCMPLE8);\n+\n+  /* DSP Extension: SIMD 16bit MISC.  */\n+  ADD_NDS32_BUILTIN2 (\"smin16\", unsigned, unsigned, unsigned, SMIN16);\n+  ADD_NDS32_BUILTIN2 (\"v_smin16\", v2hi, v2hi, v2hi, V_SMIN16);\n+  ADD_NDS32_BUILTIN2 (\"umin16\", unsigned, unsigned, unsigned, UMIN16);\n+  ADD_NDS32_BUILTIN2 (\"v_umin16\", u_v2hi, u_v2hi, u_v2hi, V_UMIN16);\n+  ADD_NDS32_BUILTIN2 (\"smax16\", unsigned, unsigned, unsigned, SMAX16);\n+  ADD_NDS32_BUILTIN2 (\"v_smax16\", v2hi, v2hi, v2hi, V_SMAX16);\n+  ADD_NDS32_BUILTIN2 (\"umax16\", unsigned, unsigned, unsigned, UMAX16);\n+  ADD_NDS32_BUILTIN2 (\"v_umax16\", u_v2hi, u_v2hi, u_v2hi, V_UMAX16);\n+  ADD_NDS32_BUILTIN2 (\"sclip16\", unsigned, unsigned, unsigned, SCLIP16);\n+  ADD_NDS32_BUILTIN2 (\"v_sclip16\", v2hi, v2hi, unsigned, V_SCLIP16);\n+  ADD_NDS32_BUILTIN2 (\"uclip16\", unsigned, unsigned, unsigned, UCLIP16);\n+  ADD_NDS32_BUILTIN2 (\"v_uclip16\", v2hi, v2hi, unsigned, V_UCLIP16);\n+  ADD_NDS32_BUILTIN2 (\"khm16\", unsigned, unsigned, unsigned, KHM16);\n+  ADD_NDS32_BUILTIN2 (\"v_khm16\", v2hi, v2hi, v2hi, V_KHM16);\n+  ADD_NDS32_BUILTIN2 (\"khmx16\", unsigned, unsigned, unsigned, KHMX16);\n+  ADD_NDS32_BUILTIN2 (\"v_khmx16\", v2hi, v2hi, v2hi, V_KHMX16);\n+  ADD_NDS32_BUILTIN1 (\"kabs16\", unsigned, unsigned, KABS16);\n+  ADD_NDS32_BUILTIN1 (\"v_kabs16\", v2hi, v2hi, V_KABS16);\n+  ADD_NDS32_BUILTIN2 (\"smul16\", long_long_unsigned, unsigned, unsigned, SMUL16);\n+  ADD_NDS32_BUILTIN2 (\"v_smul16\", v2si, v2hi, v2hi, V_SMUL16);\n+  ADD_NDS32_BUILTIN2 (\"smulx16\",\n+\t\t      long_long_unsigned, unsigned, unsigned, SMULX16);\n+  ADD_NDS32_BUILTIN2 (\"v_smulx16\", v2si, v2hi, v2hi, V_SMULX16);\n+  ADD_NDS32_BUILTIN2 (\"umul16\", long_long_unsigned, unsigned, unsigned, UMUL16);\n+  ADD_NDS32_BUILTIN2 (\"v_umul16\", u_v2si, u_v2hi, u_v2hi, V_UMUL16);\n+  ADD_NDS32_BUILTIN2 (\"umulx16\",\n+\t\t      long_long_unsigned, unsigned, unsigned, UMULX16);\n+  ADD_NDS32_BUILTIN2 (\"v_umulx16\", u_v2si, u_v2hi, u_v2hi, V_UMULX16);\n+\n+  /* DSP Extension: SIMD 8bit MISC.  */\n+  ADD_NDS32_BUILTIN2 (\"smin8\", unsigned, unsigned, unsigned, SMIN8);\n+  ADD_NDS32_BUILTIN2 (\"v_smin8\", v4qi, v4qi, v4qi, V_SMIN8);\n+  ADD_NDS32_BUILTIN2 (\"umin8\", unsigned, unsigned, unsigned, UMIN8);\n+  ADD_NDS32_BUILTIN2 (\"v_umin8\", u_v4qi, u_v4qi, u_v4qi, V_UMIN8);\n+  ADD_NDS32_BUILTIN2 (\"smax8\", unsigned, unsigned, unsigned, SMAX8);\n+  ADD_NDS32_BUILTIN2 (\"v_smax8\", v4qi, v4qi, v4qi, V_SMAX8);\n+  ADD_NDS32_BUILTIN2 (\"umax8\", unsigned, unsigned, unsigned, UMAX8);\n+  ADD_NDS32_BUILTIN2 (\"v_umax8\", u_v4qi, u_v4qi, u_v4qi, V_UMAX8);\n+  ADD_NDS32_BUILTIN1 (\"kabs8\", unsigned, unsigned, KABS8);\n+  ADD_NDS32_BUILTIN1 (\"v_kabs8\", v4qi, v4qi, V_KABS8);\n+\n+  /* DSP Extension: 8bit Unpacking.  */\n+  ADD_NDS32_BUILTIN1 (\"sunpkd810\", unsigned, unsigned, SUNPKD810);\n+  ADD_NDS32_BUILTIN1 (\"v_sunpkd810\", v2hi, v4qi, V_SUNPKD810);\n+  ADD_NDS32_BUILTIN1 (\"sunpkd820\", unsigned, unsigned, SUNPKD820);\n+  ADD_NDS32_BUILTIN1 (\"v_sunpkd820\", v2hi, v4qi, V_SUNPKD820);\n+  ADD_NDS32_BUILTIN1 (\"sunpkd830\", unsigned, unsigned, SUNPKD830);\n+  ADD_NDS32_BUILTIN1 (\"v_sunpkd830\", v2hi, v4qi, V_SUNPKD830);\n+  ADD_NDS32_BUILTIN1 (\"sunpkd831\", unsigned, unsigned, SUNPKD831);\n+  ADD_NDS32_BUILTIN1 (\"v_sunpkd831\", v2hi, v4qi, V_SUNPKD831);\n+  ADD_NDS32_BUILTIN1 (\"zunpkd810\", unsigned, unsigned, ZUNPKD810);\n+  ADD_NDS32_BUILTIN1 (\"v_zunpkd810\", u_v2hi, u_v4qi, V_ZUNPKD810);\n+  ADD_NDS32_BUILTIN1 (\"zunpkd820\", unsigned, unsigned, ZUNPKD820);\n+  ADD_NDS32_BUILTIN1 (\"v_zunpkd820\", u_v2hi, u_v4qi, V_ZUNPKD820);\n+  ADD_NDS32_BUILTIN1 (\"zunpkd830\", unsigned, unsigned, ZUNPKD830);\n+  ADD_NDS32_BUILTIN1 (\"v_zunpkd830\", u_v2hi, u_v4qi, V_ZUNPKD830);\n+  ADD_NDS32_BUILTIN1 (\"zunpkd831\", unsigned, unsigned, ZUNPKD831);\n+  ADD_NDS32_BUILTIN1 (\"v_zunpkd831\", u_v2hi, u_v4qi, V_ZUNPKD831);\n+\n+  /* DSP Extension: 32bit Add and Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"raddw\", integer, integer, integer, RADDW);\n+  ADD_NDS32_BUILTIN2 (\"uraddw\", unsigned, unsigned, unsigned, URADDW);\n+  ADD_NDS32_BUILTIN2 (\"rsubw\", integer, integer, integer, RSUBW);\n+  ADD_NDS32_BUILTIN2 (\"ursubw\", unsigned, unsigned, unsigned, URSUBW);\n+\n+  /* DSP Extension: 32bit Shift.  */\n+  ADD_NDS32_BUILTIN2 (\"sra_u\", integer, integer, unsigned, SRA_U);\n+  ADD_NDS32_BUILTIN2 (\"ksll\", integer, integer, unsigned, KSLL);\n+\n+  /* DSP Extension: 16bit Packing.  */\n+  ADD_NDS32_BUILTIN2 (\"pkbb16\", unsigned, unsigned, unsigned, PKBB16);\n+  ADD_NDS32_BUILTIN2 (\"v_pkbb16\", u_v2hi, u_v2hi, u_v2hi, V_PKBB16);\n+  ADD_NDS32_BUILTIN2 (\"pkbt16\", unsigned, unsigned, unsigned, PKBT16);\n+  ADD_NDS32_BUILTIN2 (\"v_pkbt16\", u_v2hi, u_v2hi, u_v2hi, V_PKBT16);\n+  ADD_NDS32_BUILTIN2 (\"pktb16\", unsigned, unsigned, unsigned, PKTB16);\n+  ADD_NDS32_BUILTIN2 (\"v_pktb16\", u_v2hi, u_v2hi, u_v2hi, V_PKTB16);\n+  ADD_NDS32_BUILTIN2 (\"pktt16\", unsigned, unsigned, unsigned, PKTT16);\n+  ADD_NDS32_BUILTIN2 (\"v_pktt16\", u_v2hi, u_v2hi, u_v2hi, V_PKTT16);\n+\n+  /* DSP Extension: Signed MSW 32x32 Multiply and ADD.  */\n+  ADD_NDS32_BUILTIN2 (\"smmul\", integer, integer, integer, SMMUL);\n+  ADD_NDS32_BUILTIN2 (\"smmul_u\", integer, integer, integer, SMMUL_U);\n+  ADD_NDS32_BUILTIN3 (\"kmmac\", integer, integer, integer, integer, KMMAC);\n+  ADD_NDS32_BUILTIN3 (\"kmmac_u\", integer, integer, integer, integer, KMMAC_U);\n+  ADD_NDS32_BUILTIN3 (\"kmmsb\", integer, integer, integer, integer, KMMSB);\n+  ADD_NDS32_BUILTIN3 (\"kmmsb_u\", integer, integer, integer, integer, KMMSB_U);\n+  ADD_NDS32_BUILTIN2 (\"kwmmul\", integer, integer, integer, KWMMUL);\n+  ADD_NDS32_BUILTIN2 (\"kwmmul_u\", integer, integer, integer, KWMMUL_U);\n+\n+  /* DSP Extension: Most Significant Word 32x16 Multiply and ADD.  */\n+  ADD_NDS32_BUILTIN2 (\"smmwb\", integer, integer, unsigned, SMMWB);\n+  ADD_NDS32_BUILTIN2 (\"v_smmwb\", integer, integer, v2hi, V_SMMWB);\n+  ADD_NDS32_BUILTIN2 (\"smmwb_u\", integer, integer, unsigned, SMMWB_U);\n+  ADD_NDS32_BUILTIN2 (\"v_smmwb_u\", integer, integer, v2hi, V_SMMWB_U);\n+  ADD_NDS32_BUILTIN2 (\"smmwt\", integer, integer, unsigned, SMMWT);\n+  ADD_NDS32_BUILTIN2 (\"v_smmwt\", integer, integer, v2hi, V_SMMWT);\n+  ADD_NDS32_BUILTIN2 (\"smmwt_u\", integer, integer, unsigned, SMMWT_U);\n+  ADD_NDS32_BUILTIN2 (\"v_smmwt_u\", integer, integer, v2hi, V_SMMWT_U);\n+  ADD_NDS32_BUILTIN3 (\"kmmawb\", integer, integer, integer, unsigned, KMMAWB);\n+  ADD_NDS32_BUILTIN3 (\"v_kmmawb\", integer, integer, integer, v2hi, V_KMMAWB);\n+  ADD_NDS32_BUILTIN3 (\"kmmawb_u\",\n+\t\t      integer, integer, integer, unsigned, KMMAWB_U);\n+  ADD_NDS32_BUILTIN3 (\"v_kmmawb_u\",\n+\t\t      integer, integer, integer, v2hi, V_KMMAWB_U);\n+  ADD_NDS32_BUILTIN3 (\"kmmawt\", integer, integer, integer, unsigned, KMMAWT);\n+  ADD_NDS32_BUILTIN3 (\"v_kmmawt\", integer, integer, integer, v2hi, V_KMMAWT);\n+  ADD_NDS32_BUILTIN3 (\"kmmawt_u\",\n+\t\t      integer, integer, integer, unsigned, KMMAWT_U);\n+  ADD_NDS32_BUILTIN3 (\"v_kmmawt_u\",\n+\t\t      integer, integer, integer, v2hi, V_KMMAWT_U);\n+\n+  /* DSP Extension: Signed 16bit Multiply with ADD/Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"smbb\", integer, unsigned, unsigned, SMBB);\n+  ADD_NDS32_BUILTIN2 (\"v_smbb\", integer, v2hi, v2hi, V_SMBB);\n+  ADD_NDS32_BUILTIN2 (\"smbt\", integer, unsigned, unsigned, SMBT);\n+  ADD_NDS32_BUILTIN2 (\"v_smbt\", integer, v2hi, v2hi, V_SMBT);\n+  ADD_NDS32_BUILTIN2 (\"smtt\", integer, unsigned, unsigned, SMTT);\n+  ADD_NDS32_BUILTIN2 (\"v_smtt\", integer, v2hi, v2hi, V_SMTT);\n+  ADD_NDS32_BUILTIN2 (\"kmda\", integer, unsigned, unsigned, KMDA);\n+  ADD_NDS32_BUILTIN2 (\"v_kmda\", integer, v2hi, v2hi, V_KMDA);\n+  ADD_NDS32_BUILTIN2 (\"kmxda\", integer, unsigned, unsigned, KMXDA);\n+  ADD_NDS32_BUILTIN2 (\"v_kmxda\", integer, v2hi, v2hi, V_KMXDA);\n+  ADD_NDS32_BUILTIN2 (\"smds\", integer, unsigned, unsigned, SMDS);\n+  ADD_NDS32_BUILTIN2 (\"v_smds\", integer, v2hi, v2hi, V_SMDS);\n+  ADD_NDS32_BUILTIN2 (\"smdrs\", integer, unsigned, unsigned, SMDRS);\n+  ADD_NDS32_BUILTIN2 (\"v_smdrs\", integer, v2hi, v2hi, V_SMDRS);\n+  ADD_NDS32_BUILTIN2 (\"smxds\", integer, unsigned, unsigned, SMXDS);\n+  ADD_NDS32_BUILTIN2 (\"v_smxds\", integer, v2hi, v2hi, V_SMXDS);\n+  ADD_NDS32_BUILTIN3 (\"kmabb\", integer, integer, unsigned, unsigned, KMABB);\n+  ADD_NDS32_BUILTIN3 (\"v_kmabb\", integer, integer, v2hi, v2hi, V_KMABB);\n+  ADD_NDS32_BUILTIN3 (\"kmabt\", integer, integer, unsigned, unsigned, KMABT);\n+  ADD_NDS32_BUILTIN3 (\"v_kmabt\", integer, integer, v2hi, v2hi, V_KMABT);\n+  ADD_NDS32_BUILTIN3 (\"kmatt\", integer, integer, unsigned, unsigned, KMATT);\n+  ADD_NDS32_BUILTIN3 (\"v_kmatt\", integer, integer, v2hi, v2hi, V_KMATT);\n+  ADD_NDS32_BUILTIN3 (\"kmada\", integer, integer, unsigned, unsigned, KMADA);\n+  ADD_NDS32_BUILTIN3 (\"v_kmada\", integer, integer, v2hi, v2hi, V_KMADA);\n+  ADD_NDS32_BUILTIN3 (\"kmaxda\", integer, integer, unsigned, unsigned, KMAXDA);\n+  ADD_NDS32_BUILTIN3 (\"v_kmaxda\", integer, integer, v2hi, v2hi, V_KMAXDA);\n+  ADD_NDS32_BUILTIN3 (\"kmads\", integer, integer, unsigned, unsigned, KMADS);\n+  ADD_NDS32_BUILTIN3 (\"v_kmads\", integer, integer, v2hi, v2hi, V_KMADS);\n+  ADD_NDS32_BUILTIN3 (\"kmadrs\", integer, integer, unsigned, unsigned, KMADRS);\n+  ADD_NDS32_BUILTIN3 (\"v_kmadrs\", integer, integer, v2hi, v2hi, V_KMADRS);\n+  ADD_NDS32_BUILTIN3 (\"kmaxds\", integer, integer, unsigned, unsigned, KMAXDS);\n+  ADD_NDS32_BUILTIN3 (\"v_kmaxds\", integer, integer, v2hi, v2hi, V_KMAXDS);\n+  ADD_NDS32_BUILTIN3 (\"kmsda\", integer, integer, unsigned, unsigned, KMSDA);\n+  ADD_NDS32_BUILTIN3 (\"v_kmsda\", integer, integer, v2hi, v2hi, V_KMSDA);\n+  ADD_NDS32_BUILTIN3 (\"kmsxda\", integer, integer, unsigned, unsigned, KMSXDA);\n+  ADD_NDS32_BUILTIN3 (\"v_kmsxda\", integer, integer, v2hi, v2hi, V_KMSXDA);\n+\n+  /* DSP Extension: Signed 16bit Multiply with 64bit ADD/Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"smal\", long_long_integer,\n+\t\t      long_long_integer, unsigned, SMAL);\n+  ADD_NDS32_BUILTIN2 (\"v_smal\", long_long_integer,\n+\t\t      long_long_integer, v2hi, V_SMAL);\n+\n+  /* DSP Extension: 32bit MISC.  */\n+  ADD_NDS32_BUILTIN2 (\"bitrev\", unsigned, unsigned, unsigned, BITREV);\n+  ADD_NDS32_BUILTIN2 (\"wext\", unsigned, long_long_integer, unsigned, WEXT);\n+  ADD_NDS32_BUILTIN3 (\"bpick\", unsigned, unsigned, unsigned, unsigned, BPICK);\n+  ADD_NDS32_BUILTIN3 (\"insb\", unsigned, unsigned, unsigned, unsigned, INSB);\n+\n+  /* DSP Extension: 64bit Add and Subtract.  */\n+  ADD_NDS32_BUILTIN2 (\"sadd64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, SADD64);\n+  ADD_NDS32_BUILTIN2 (\"uadd64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, UADD64);\n+  ADD_NDS32_BUILTIN2 (\"radd64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, RADD64);\n+  ADD_NDS32_BUILTIN2 (\"uradd64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, URADD64);\n+  ADD_NDS32_BUILTIN2 (\"kadd64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, KADD64);\n+  ADD_NDS32_BUILTIN2 (\"ukadd64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, UKADD64);\n+  ADD_NDS32_BUILTIN2 (\"ssub64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, SSUB64);\n+  ADD_NDS32_BUILTIN2 (\"usub64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, USUB64);\n+  ADD_NDS32_BUILTIN2 (\"rsub64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, RSUB64);\n+  ADD_NDS32_BUILTIN2 (\"ursub64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, URSUB64);\n+  ADD_NDS32_BUILTIN2 (\"ksub64\", long_long_integer,\n+\t\t      long_long_integer, long_long_integer, KSUB64);\n+  ADD_NDS32_BUILTIN2 (\"uksub64\", long_long_unsigned,\n+\t\t      long_long_unsigned, long_long_unsigned, UKSUB64);\n+\n+  /* DSP Extension: 32bit Multiply with 64bit Add/Subtract.  */\n+  ADD_NDS32_BUILTIN3 (\"smar64\", long_long_integer,\n+\t\t      long_long_integer, integer, integer, SMAR64);\n+  ADD_NDS32_BUILTIN3 (\"smsr64\", long_long_integer,\n+\t\t      long_long_integer, integer, integer, SMSR64);\n+  ADD_NDS32_BUILTIN3 (\"umar64\", long_long_unsigned,\n+\t\t      long_long_unsigned, unsigned, unsigned, UMAR64);\n+  ADD_NDS32_BUILTIN3 (\"umsr64\", long_long_unsigned,\n+\t\t      long_long_unsigned, unsigned, unsigned, UMSR64);\n+  ADD_NDS32_BUILTIN3 (\"kmar64\", long_long_integer,\n+\t\t      long_long_integer, integer, integer, KMAR64);\n+  ADD_NDS32_BUILTIN3 (\"kmsr64\", long_long_integer,\n+\t\t      long_long_integer, integer, integer, KMSR64);\n+  ADD_NDS32_BUILTIN3 (\"ukmar64\", long_long_unsigned,\n+\t\t      long_long_unsigned, unsigned, unsigned, UKMAR64);\n+  ADD_NDS32_BUILTIN3 (\"ukmsr64\", long_long_unsigned,\n+\t\t      long_long_unsigned, unsigned, unsigned, UKMSR64);\n+\n+  /* DSP Extension: Signed 16bit Multiply with 64bit Add/Subtract.  */\n+  ADD_NDS32_BUILTIN3 (\"smalbb\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALBB);\n+  ADD_NDS32_BUILTIN3 (\"v_smalbb\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALBB);\n+  ADD_NDS32_BUILTIN3 (\"smalbt\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALBT);\n+  ADD_NDS32_BUILTIN3 (\"v_smalbt\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALBT);\n+  ADD_NDS32_BUILTIN3 (\"smaltt\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALTT);\n+  ADD_NDS32_BUILTIN3 (\"v_smaltt\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALTT);\n+  ADD_NDS32_BUILTIN3 (\"smalda\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALDA);\n+  ADD_NDS32_BUILTIN3 (\"v_smalda\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALDA);\n+  ADD_NDS32_BUILTIN3 (\"smalxda\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALXDA);\n+  ADD_NDS32_BUILTIN3 (\"v_smalxda\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALXDA);\n+  ADD_NDS32_BUILTIN3 (\"smalds\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALDS);\n+  ADD_NDS32_BUILTIN3 (\"v_smalds\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALDS);\n+  ADD_NDS32_BUILTIN3 (\"smaldrs\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALDRS);\n+  ADD_NDS32_BUILTIN3 (\"v_smaldrs\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALDRS);\n+  ADD_NDS32_BUILTIN3 (\"smalxds\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMALXDS);\n+  ADD_NDS32_BUILTIN3 (\"v_smalxds\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMALXDS);\n+  ADD_NDS32_BUILTIN3 (\"smslda\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMSLDA);\n+  ADD_NDS32_BUILTIN3 (\"v_smslda\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMSLDA);\n+  ADD_NDS32_BUILTIN3 (\"smslxda\", long_long_integer,\n+\t\t      long_long_integer, unsigned, unsigned, SMSLXDA);\n+  ADD_NDS32_BUILTIN3 (\"v_smslxda\", long_long_integer,\n+\t\t      long_long_integer, v2hi, v2hi, V_SMSLXDA);\n+\n+  /* DSP Extension: augmented baseline.  */\n+  ADD_NDS32_BUILTIN2 (\"uclip32\", unsigned, integer, unsigned, UCLIP32);\n+  ADD_NDS32_BUILTIN2 (\"sclip32\", integer, integer, unsigned, SCLIP32);\n+  ADD_NDS32_BUILTIN1 (\"kabs\", integer, integer, KABS);\n+\n+  /* DSP Extension: vector type unaligned Load/Store  */\n+  ADD_NDS32_BUILTIN1 (\"get_unaligned_u16x2\", u_v2hi, ptr_ushort, UALOAD_U16);\n+  ADD_NDS32_BUILTIN1 (\"get_unaligned_s16x2\", v2hi, ptr_short, UALOAD_S16);\n+  ADD_NDS32_BUILTIN1 (\"get_unaligned_u8x4\", u_v4qi, ptr_uchar, UALOAD_U8);\n+  ADD_NDS32_BUILTIN1 (\"get_unaligned_s8x4\", v4qi, ptr_char, UALOAD_S8);\n+  ADD_NDS32_BUILTIN2 (\"put_unaligned_u16x2\", void, ptr_ushort,\n+\t\t      u_v2hi, UASTORE_U16);\n+  ADD_NDS32_BUILTIN2 (\"put_unaligned_s16x2\", void, ptr_short,\n+\t\t      v2hi, UASTORE_S16);\n+  ADD_NDS32_BUILTIN2 (\"put_unaligned_u8x4\", void, ptr_uchar,\n+\t\t      u_v4qi, UASTORE_U8);\n+  ADD_NDS32_BUILTIN2 (\"put_unaligned_s8x4\", void, ptr_char,\n+\t\t      v4qi, UASTORE_S8);\n }"}, {"sha": "02f72853685683992d9613318a36be3b3732c06f", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -1037,6 +1037,187 @@\n    (set_attr \"length\" \"4\")]\n )\n \n+;; SATURATION\n+\n+(define_insn \"unspec_kaddw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ss_plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"kaddw\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_ksubw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ss_minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"ksubw\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kaddh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_KADDH))]\n+  \"\"\n+  \"kaddh\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_ksubh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_KSUBH))]\n+  \"\"\n+  \"ksubh\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kaddh_dsp\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t    (const_int 15)] UNSPEC_CLIPS))]\n+  \"NDS32_EXT_DSP_P ()\"\n+  \"kaddh\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_ksubh_dsp\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t    (const_int 15)] UNSPEC_CLIPS))]\n+  \"NDS32_EXT_DSP_P ()\"\n+  \"ksubh\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kdmbb\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KDMBB))]\n+  \"\"\n+  \"kdmbb\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kdmbt\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KDMBT))]\n+  \"\"\n+  \"kdmbt\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kdmtb\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KDMTB))]\n+  \"\"\n+  \"kdmtb\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kdmtt\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KDMTT))]\n+  \"\"\n+  \"kdmtt\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_khmbb\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KHMBB))]\n+  \"\"\n+  \"khmbb\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_khmbt\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KHMBT))]\n+  \"\"\n+  \"khmbt\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_khmtb\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KHMTB))]\n+  \"\"\n+  \"khmtb\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_khmtt\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=r\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"r\")] UNSPEC_KHMTT))]\n+  \"\"\n+  \"khmtt\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"mul\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kslraw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_KSLRAW))]\n+  \"\"\n+  \"kslraw\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_kslrawu\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_KSLRAWU))]\n+  \"\"\n+  \"kslraw.u\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_volatile_rdov\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_RDOV))]\n+  \"\"\n+  \"rdov\\t%0\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_volatile_clrov\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_CLROV)]\n+  \"\"\n+  \"clrov\"\n+  [(set_attr \"type\"   \"misc\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n ;; System\n \n (define_insn \"unspec_sva\"\n@@ -1495,4 +1676,15 @@\n   DONE;\n })\n \n+;; abs alias kabs\n+\n+(define_insn \"unspec_kabs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_KABS))]\n+  \"\"\n+  \"kabs\\t%0, %1\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n ;; ------------------------------------------------------------------------"}, {"sha": "96966115402ec6f6fea1f5a78d85c5f2ca08973f", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 497, "deletions": 2, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -261,6 +261,118 @@ output_cond_branch_compare_zero (int code, const char *suffix,\n   output_asm_insn (pattern, operands);\n }\n \n+static void\n+nds32_split_shiftrtdi3 (rtx dst, rtx src, rtx shiftamount, bool logic_shift_p)\n+{\n+  rtx src_high_part;\n+  rtx dst_high_part, dst_low_part;\n+\n+  dst_high_part = nds32_di_high_part_subreg (dst);\n+  src_high_part = nds32_di_high_part_subreg (src);\n+  dst_low_part = nds32_di_low_part_subreg (dst);\n+\n+  if (CONST_INT_P (shiftamount))\n+    {\n+      if (INTVAL (shiftamount) < 32)\n+\t{\n+\t  if (logic_shift_p)\n+\t    {\n+\t      emit_insn (gen_uwext (dst_low_part, src,\n+\t\t\t\t\t\t  shiftamount));\n+\t      emit_insn (gen_lshrsi3 (dst_high_part, src_high_part,\n+\t\t\t\t\t\t     shiftamount));\n+\t    }\n+\t  else\n+\t    {\n+\t      emit_insn (gen_wext (dst_low_part, src,\n+\t\t\t\t\t\t shiftamount));\n+\t      emit_insn (gen_ashrsi3 (dst_high_part, src_high_part,\n+\t\t\t\t\t\t     shiftamount));\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  rtx new_shift_amout = gen_int_mode(INTVAL (shiftamount) - 32, SImode);\n+\n+\t  if (logic_shift_p)\n+\t    {\n+\t      emit_insn (gen_lshrsi3 (dst_low_part, src_high_part,\n+\t\t\t\t\t\t    new_shift_amout));\n+\t      emit_move_insn (dst_high_part, const0_rtx);\n+\t    }\n+\t  else\n+\t    {\n+\t      emit_insn (gen_ashrsi3 (dst_low_part, src_high_part,\n+\t\t\t\t\t\t    new_shift_amout));\n+\t      emit_insn (gen_ashrsi3 (dst_high_part, src_high_part,\n+\t\t\t\t\t\t     GEN_INT (31)));\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      rtx dst_low_part_l32, dst_high_part_l32;\n+      rtx dst_low_part_g32, dst_high_part_g32;\n+      rtx new_shift_amout, select_reg;\n+      dst_low_part_l32 = gen_reg_rtx (SImode);\n+      dst_high_part_l32 = gen_reg_rtx (SImode);\n+      dst_low_part_g32 = gen_reg_rtx (SImode);\n+      dst_high_part_g32 = gen_reg_rtx (SImode);\n+      new_shift_amout = gen_reg_rtx (SImode);\n+      select_reg = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_andsi3 (shiftamount, shiftamount, GEN_INT (0x3f)));\n+\n+      if (logic_shift_p)\n+\t{\n+\t  /*\n+\t     if (shiftamount < 32)\n+\t       dst_low_part = wext (src, shiftamount)\n+\t       dst_high_part = src_high_part >> shiftamount\n+\t     else\n+\t       dst_low_part = src_high_part >> (shiftamount & 0x1f)\n+\t       dst_high_part = 0\n+\t  */\n+\t  emit_insn (gen_uwext (dst_low_part_l32, src, shiftamount));\n+\t  emit_insn (gen_lshrsi3 (dst_high_part_l32, src_high_part,\n+\t\t\t\t\t\t     shiftamount));\n+\n+\t  emit_insn (gen_andsi3 (new_shift_amout, shiftamount, GEN_INT (0x1f)));\n+\t  emit_insn (gen_lshrsi3 (dst_low_part_g32, src_high_part,\n+\t\t\t\t\t\t    new_shift_amout));\n+\t  emit_move_insn (dst_high_part_g32, const0_rtx);\n+\t}\n+      else\n+\t{\n+\t  /*\n+\t     if (shiftamount < 32)\n+\t       dst_low_part = wext (src, shiftamount)\n+\t       dst_high_part = src_high_part >> shiftamount\n+\t     else\n+\t       dst_low_part = src_high_part >> (shiftamount & 0x1f)\n+\t       # shift 31 for sign extend\n+\t       dst_high_part = src_high_part >> 31\n+\t  */\n+\t  emit_insn (gen_wext (dst_low_part_l32, src, shiftamount));\n+\t  emit_insn (gen_ashrsi3 (dst_high_part_l32, src_high_part,\n+\t\t\t\t\t\t     shiftamount));\n+\n+\t  emit_insn (gen_andsi3 (new_shift_amout, shiftamount, GEN_INT (0x1f)));\n+\t  emit_insn (gen_ashrsi3 (dst_low_part_g32, src_high_part,\n+\t\t\t\t\t\t    new_shift_amout));\n+\t  emit_insn (gen_ashrsi3 (dst_high_part_g32, src_high_part,\n+\t\t\t\t\t\t     GEN_INT (31)));\n+\t}\n+\n+      emit_insn (gen_slt_compare (select_reg, shiftamount, GEN_INT (32)));\n+\n+      emit_insn (gen_cmovnsi (dst_low_part, select_reg,\n+\t\t\t      dst_low_part_l32, dst_low_part_g32));\n+      emit_insn (gen_cmovnsi (dst_high_part, select_reg,\n+\t\t\t      dst_high_part_l32, dst_high_part_g32));\n+  }\n+}\n+\n /* ------------------------------------------------------------------------ */\n \n /* Auxiliary function for expand RTL pattern.  */\n@@ -1195,6 +1307,58 @@ nds32_emit_v3pop_fpr_callee_saved (int base)\n     }\n }\n \n+enum nds32_expand_result_type\n+nds32_expand_extv (rtx *operands)\n+{\n+  gcc_assert (CONST_INT_P (operands[2]) && CONST_INT_P (operands[3]));\n+  HOST_WIDE_INT width = INTVAL (operands[2]);\n+  HOST_WIDE_INT bitpos = INTVAL (operands[3]);\n+  rtx dst = operands[0];\n+  rtx src = operands[1];\n+\n+  if (MEM_P (src)\n+      && width == 32\n+      && (bitpos % BITS_PER_UNIT)  == 0\n+      && GET_MODE_BITSIZE (GET_MODE (dst)) == width)\n+    {\n+      rtx newmem = adjust_address (src, GET_MODE (dst),\n+\t\t\t\t   bitpos / BITS_PER_UNIT);\n+\n+      rtx base_addr = force_reg (Pmode, XEXP (newmem, 0));\n+\n+      emit_insn (gen_unaligned_loadsi (dst, base_addr));\n+\n+      return EXPAND_DONE;\n+    }\n+  return EXPAND_FAIL;\n+}\n+\n+enum nds32_expand_result_type\n+nds32_expand_insv (rtx *operands)\n+{\n+  gcc_assert (CONST_INT_P (operands[1]) && CONST_INT_P (operands[2]));\n+  HOST_WIDE_INT width = INTVAL (operands[1]);\n+  HOST_WIDE_INT bitpos = INTVAL (operands[2]);\n+  rtx dst = operands[0];\n+  rtx src = operands[3];\n+\n+  if (MEM_P (dst)\n+      && width == 32\n+      && (bitpos % BITS_PER_UNIT)  == 0\n+      && GET_MODE_BITSIZE (GET_MODE (src)) == width)\n+    {\n+      rtx newmem = adjust_address (dst, GET_MODE (src),\n+\t\t\t\t      bitpos / BITS_PER_UNIT);\n+\n+      rtx base_addr = force_reg (Pmode, XEXP (newmem, 0));\n+\n+      emit_insn (gen_unaligned_storesi (base_addr, src));\n+\n+      return EXPAND_DONE;\n+    }\n+  return EXPAND_FAIL;\n+}\n+\n /* ------------------------------------------------------------------------ */\n \n /* Function to return memory format.  */\n@@ -2424,7 +2588,10 @@ nds32_expand_unaligned_load (rtx *operands, enum machine_mode mode)\n     }\n   else\n     {\n-      reg[0] = operands[0];\n+      if (VECTOR_MODE_P (mode))\n+\treg[0] = gen_reg_rtx (SImode);\n+      else\n+\treg[0] = operands[0];\n     }\n \n   for (num_reg = (mode == DImode) ? 2 : 1; num_reg > 0; num_reg--)\n@@ -2466,6 +2633,8 @@ nds32_expand_unaligned_load (rtx *operands, enum machine_mode mode)\n \t  offset = offset + offset_adj;\n \t}\n     }\n+    if (VECTOR_MODE_P (mode))\n+      convert_move (operands[0], reg[0], false);\n }\n \n void\n@@ -2508,7 +2677,13 @@ nds32_expand_unaligned_store (rtx *operands, enum machine_mode mode)\n     }\n   else\n     {\n-      reg[0] = operands[1];\n+      if (VECTOR_MODE_P (mode))\n+\t{\n+\t  reg[0] = gen_reg_rtx (SImode);\n+\t  convert_move (reg[0], operands[1], false);\n+\t}\n+      else\n+\treg[0] = operands[1];\n     }\n \n   for (num_reg = (mode == DImode) ? 2 : 1; num_reg > 0; num_reg--)\n@@ -2765,6 +2940,36 @@ nds32_output_cbranchsi4_greater_less_zero (rtx_insn *insn, rtx *operands)\n   return \"\";\n }\n \n+const char *\n+nds32_output_unpkd8 (rtx output, rtx input,\n+\t\t     rtx high_idx_rtx, rtx low_idx_rtx,\n+\t\t     bool signed_p)\n+{\n+  char pattern[100];\n+  rtx output_operands[2];\n+  HOST_WIDE_INT high_idx, low_idx;\n+  high_idx = INTVAL (high_idx_rtx);\n+  low_idx = INTVAL (low_idx_rtx);\n+\n+  gcc_assert (high_idx >= 0 && high_idx <= 3);\n+  gcc_assert (low_idx >= 0 && low_idx <= 3);\n+\n+  /* We only have 10, 20, 30 and 31.  */\n+  if ((low_idx != 0 || high_idx == 0) &&\n+      !(low_idx == 1 && high_idx == 3))\n+    return \"#\";\n+\n+  char sign_char = signed_p ? 's' : 'z';\n+\n+  sprintf (pattern,\n+\t   \"%cunpkd8\" HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_DEC \"\\t%%0, %%1\",\n+\t   sign_char, high_idx, low_idx);\n+  output_operands[0] = output;\n+  output_operands[1] = input;\n+  output_asm_insn (pattern, output_operands);\n+  return \"\";\n+}\n+\n /* Return true if SYMBOL_REF X binds locally.  */\n \n static bool\n@@ -2815,6 +3020,91 @@ nds32_output_call (rtx insn, rtx *operands, rtx symbol, const char *long_call,\n   return \"\";\n }\n \n+bool\n+nds32_need_split_sms_p (rtx in0_idx0, rtx in1_idx0,\n+\t\t\trtx in0_idx1, rtx in1_idx1)\n+{\n+  /* smds or smdrs.  */\n+  if (INTVAL (in0_idx0) == INTVAL (in1_idx0)\n+      && INTVAL (in0_idx1) == INTVAL (in1_idx1)\n+      && INTVAL (in0_idx0) != INTVAL (in0_idx1))\n+    return false;\n+\n+  /* smxds.  */\n+  if (INTVAL (in0_idx0) != INTVAL (in0_idx1)\n+      && INTVAL (in1_idx0) != INTVAL (in1_idx1))\n+    return false;\n+\n+  return true;\n+}\n+\n+const char *\n+nds32_output_sms (rtx in0_idx0, rtx in1_idx0,\n+\t\t  rtx in0_idx1, rtx in1_idx1)\n+{\n+  if (nds32_need_split_sms_p (in0_idx0, in1_idx0,\n+\t\t\t      in0_idx1, in1_idx1))\n+    return \"#\";\n+  /* out = in0[in0_idx0] * in1[in1_idx0] - in0[in0_idx1] * in1[in1_idx1] */\n+\n+  /* smds or smdrs.  */\n+  if (INTVAL (in0_idx0) == INTVAL (in1_idx0)\n+      && INTVAL (in0_idx1) == INTVAL (in1_idx1)\n+      && INTVAL (in0_idx0) != INTVAL (in0_idx1))\n+    {\n+      if (INTVAL (in0_idx0) == 0)\n+\t{\n+\t  if (TARGET_BIG_ENDIAN)\n+\t    return \"smds\\t%0, %1, %2\";\n+\t  else\n+\t    return \"smdrs\\t%0, %1, %2\";\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_BIG_ENDIAN)\n+\t    return \"smdrs\\t%0, %1, %2\";\n+\t  else\n+\t    return \"smds\\t%0, %1, %2\";\n+\t}\n+    }\n+\n+  if (INTVAL (in0_idx0) != INTVAL (in0_idx1)\n+      && INTVAL (in1_idx0) != INTVAL (in1_idx1))\n+    {\n+      if (INTVAL (in0_idx0) == 1)\n+\t{\n+\t  if (TARGET_BIG_ENDIAN)\n+\t    return \"smxds\\t%0, %2, %1\";\n+\t  else\n+\t    return \"smxds\\t%0, %1, %2\";\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_BIG_ENDIAN)\n+\t    return \"smxds\\t%0, %1, %2\";\n+\t  else\n+\t    return \"smxds\\t%0, %2, %1\";\n+\t}\n+    }\n+\n+  gcc_unreachable ();\n+  return \"\";\n+}\n+\n+void\n+nds32_split_sms (rtx out, rtx in0, rtx in1,\n+\t\t rtx in0_idx0, rtx in1_idx0,\n+\t\t rtx in0_idx1, rtx in1_idx1)\n+{\n+  rtx result0 = gen_reg_rtx (SImode);\n+  rtx result1 = gen_reg_rtx (SImode);\n+  emit_insn (gen_mulhisi3v (result0, in0, in1,\n+\t\t\t    in0_idx0, in1_idx0));\n+  emit_insn (gen_mulhisi3v (result1, in0, in1,\n+\t\t\t    in0_idx1, in1_idx1));\n+  emit_insn (gen_subsi3 (out, result0, result1));\n+}\n+\n /* Spilt a doubleword instrucion to two single word instructions.  */\n void\n nds32_spilt_doubleword (rtx *operands, bool load_p)\n@@ -2924,6 +3214,192 @@ nds32_spilt_doubleword (rtx *operands, bool load_p)\n     }\n }\n \n+void\n+nds32_split_ashiftdi3 (rtx dst, rtx src, rtx shiftamount)\n+{\n+  rtx src_high_part, src_low_part;\n+  rtx dst_high_part, dst_low_part;\n+\n+  dst_high_part = nds32_di_high_part_subreg (dst);\n+  dst_low_part = nds32_di_low_part_subreg (dst);\n+\n+  src_high_part = nds32_di_high_part_subreg (src);\n+  src_low_part = nds32_di_low_part_subreg (src);\n+\n+  /* We need to handle shift more than 32 bit!!!! */\n+  if (CONST_INT_P (shiftamount))\n+    {\n+      if (INTVAL (shiftamount) < 32)\n+\t{\n+\t  rtx ext_start;\n+\t  ext_start = gen_int_mode(32 - INTVAL (shiftamount), SImode);\n+\n+\t  emit_insn (gen_wext (dst_high_part, src, ext_start));\n+\t  emit_insn (gen_ashlsi3 (dst_low_part, src_low_part, shiftamount));\n+\t}\n+      else\n+\t{\n+\t  rtx new_shift_amout = gen_int_mode(INTVAL (shiftamount) - 32, SImode);\n+\n+\t  emit_insn (gen_ashlsi3 (dst_high_part, src_low_part,\n+\t\t\t\t\t\t new_shift_amout));\n+\n+\t  emit_move_insn (dst_low_part, GEN_INT (0));\n+\t}\n+    }\n+  else\n+    {\n+      rtx dst_low_part_l32, dst_high_part_l32;\n+      rtx dst_low_part_g32, dst_high_part_g32;\n+      rtx new_shift_amout, select_reg;\n+      dst_low_part_l32 = gen_reg_rtx (SImode);\n+      dst_high_part_l32 = gen_reg_rtx (SImode);\n+      dst_low_part_g32 = gen_reg_rtx (SImode);\n+      dst_high_part_g32 = gen_reg_rtx (SImode);\n+      new_shift_amout = gen_reg_rtx (SImode);\n+      select_reg = gen_reg_rtx (SImode);\n+\n+      rtx ext_start;\n+      ext_start = gen_reg_rtx (SImode);\n+\n+      /*\n+\t if (shiftamount < 32)\n+\t   dst_low_part = src_low_part << shiftamout\n+\t   dst_high_part = wext (src, 32 - shiftamount)\n+\t   # wext can't handle wext (src, 32) since it's only take rb[0:4]\n+\t   # for extract.\n+\t   dst_high_part = shiftamount == 0 ? src_high_part : dst_high_part\n+\t else\n+\t   dst_low_part = 0\n+\t   dst_high_part = src_low_part << shiftamount & 0x1f\n+      */\n+\n+      emit_insn (gen_subsi3 (ext_start,\n+\t\t\t     gen_int_mode (32, SImode),\n+\t\t\t     shiftamount));\n+      emit_insn (gen_wext (dst_high_part_l32, src, ext_start));\n+\n+      /* Handle for shiftamout == 0.  */\n+      emit_insn (gen_cmovzsi (dst_high_part_l32, shiftamount,\n+\t\t\t      src_high_part, dst_high_part_l32));\n+\n+      emit_insn (gen_ashlsi3 (dst_low_part_l32, src_low_part, shiftamount));\n+\n+      emit_move_insn (dst_low_part_g32, const0_rtx);\n+      emit_insn (gen_andsi3 (new_shift_amout, shiftamount, GEN_INT (0x1f)));\n+      emit_insn (gen_ashlsi3 (dst_high_part_g32, src_low_part,\n+\t\t\t\t\t\t new_shift_amout));\n+\n+      emit_insn (gen_slt_compare (select_reg, shiftamount, GEN_INT (32)));\n+\n+      emit_insn (gen_cmovnsi (dst_low_part, select_reg,\n+\t\t\t      dst_low_part_l32, dst_low_part_g32));\n+      emit_insn (gen_cmovnsi (dst_high_part, select_reg,\n+\t\t\t      dst_high_part_l32, dst_high_part_g32));\n+    }\n+}\n+\n+void\n+nds32_split_ashiftrtdi3 (rtx dst, rtx src, rtx shiftamount)\n+{\n+  nds32_split_shiftrtdi3 (dst, src, shiftamount, false);\n+}\n+\n+void\n+nds32_split_lshiftrtdi3 (rtx dst, rtx src, rtx shiftamount)\n+{\n+  nds32_split_shiftrtdi3 (dst, src, shiftamount, true);\n+}\n+\n+void\n+nds32_split_rotatertdi3 (rtx dst, rtx src, rtx shiftamount)\n+{\n+  rtx dst_low_part_l32, dst_high_part_l32;\n+  rtx dst_low_part_g32, dst_high_part_g32;\n+  rtx select_reg, low5bit, low5bit_inv, minus32sa;\n+  rtx dst_low_part_g32_tmph;\n+  rtx dst_low_part_g32_tmpl;\n+  rtx dst_high_part_l32_tmph;\n+  rtx dst_high_part_l32_tmpl;\n+\n+  rtx src_low_part, src_high_part;\n+  rtx dst_high_part, dst_low_part;\n+\n+  shiftamount = force_reg (SImode, shiftamount);\n+\n+  emit_insn (gen_andsi3 (shiftamount,\n+\t\t\t shiftamount,\n+\t\t\t gen_int_mode (0x3f, SImode)));\n+\n+  dst_high_part = nds32_di_high_part_subreg (dst);\n+  dst_low_part = nds32_di_low_part_subreg (dst);\n+\n+  src_high_part = nds32_di_high_part_subreg (src);\n+  src_low_part = nds32_di_low_part_subreg (src);\n+\n+  dst_low_part_l32 = gen_reg_rtx (SImode);\n+  dst_high_part_l32 = gen_reg_rtx (SImode);\n+  dst_low_part_g32 = gen_reg_rtx (SImode);\n+  dst_high_part_g32 = gen_reg_rtx (SImode);\n+  low5bit = gen_reg_rtx (SImode);\n+  low5bit_inv = gen_reg_rtx (SImode);\n+  minus32sa = gen_reg_rtx (SImode);\n+  select_reg = gen_reg_rtx (SImode);\n+\n+  dst_low_part_g32_tmph = gen_reg_rtx (SImode);\n+  dst_low_part_g32_tmpl = gen_reg_rtx (SImode);\n+\n+  dst_high_part_l32_tmph = gen_reg_rtx (SImode);\n+  dst_high_part_l32_tmpl = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_slt_compare (select_reg, shiftamount, GEN_INT (32)));\n+\n+  /* if shiftamount < 32\n+       dst_low_part = wext(src, shiftamount)\n+     else\n+       dst_low_part = ((src_high_part >> (shiftamount & 0x1f))\n+\t\t       | (src_low_part << (32 - (shiftamount & 0x1f))))\n+  */\n+  emit_insn (gen_andsi3 (low5bit, shiftamount, gen_int_mode (0x1f, SImode)));\n+  emit_insn (gen_subsi3 (low5bit_inv, gen_int_mode (32, SImode), low5bit));\n+\n+  emit_insn (gen_wext (dst_low_part_l32, src, shiftamount));\n+\n+  emit_insn (gen_lshrsi3 (dst_low_part_g32_tmpl, src_high_part, low5bit));\n+  emit_insn (gen_ashlsi3 (dst_low_part_g32_tmph, src_low_part, low5bit_inv));\n+\n+  emit_insn (gen_iorsi3 (dst_low_part_g32,\n+\t\t\t dst_low_part_g32_tmpl,\n+\t\t\t dst_low_part_g32_tmph));\n+\n+  emit_insn (gen_cmovnsi (dst_low_part, select_reg,\n+\t\t\t  dst_low_part_l32, dst_low_part_g32));\n+\n+  /* if shiftamount < 32\n+       dst_high_part = ((src_high_part >> shiftamount)\n+\t\t\t| (src_low_part << (32 - shiftamount)))\n+       dst_high_part = shiftamount == 0 ? src_high_part : dst_high_part\n+     else\n+       dst_high_part = wext(src, shiftamount & 0x1f)\n+  */\n+\n+  emit_insn (gen_subsi3 (minus32sa, gen_int_mode (32, SImode), shiftamount));\n+\n+  emit_insn (gen_lshrsi3 (dst_high_part_l32_tmpl, src_high_part, shiftamount));\n+  emit_insn (gen_ashlsi3 (dst_high_part_l32_tmph, src_low_part, minus32sa));\n+\n+  emit_insn (gen_iorsi3 (dst_high_part_l32,\n+\t\t\t dst_high_part_l32_tmpl,\n+\t\t\t dst_high_part_l32_tmph));\n+\n+  emit_insn (gen_cmovzsi (dst_high_part_l32, shiftamount,\n+\t\t\t  src_high_part, dst_high_part_l32));\n+\n+  emit_insn (gen_wext (dst_high_part_g32, src, low5bit));\n+\n+  emit_insn (gen_cmovnsi (dst_high_part, select_reg,\n+\t\t\t  dst_high_part_l32, dst_high_part_g32));\n+}\n /* Return true X is need use long call.  */\n bool\n nds32_long_call_p (rtx symbol)\n@@ -2976,3 +3452,22 @@ nds32_expand_constant (machine_mode mode, HOST_WIDE_INT val,\n       emit_move_insn (target, gen_rtx_fmt_ee (AND, mode, source, temp));\n     }\n }\n+\n+/* Auxiliary functions for manipulation DI mode.  */\n+rtx nds32_di_high_part_subreg(rtx reg)\n+{\n+  unsigned high_part_offset = subreg_highpart_offset (SImode, DImode);\n+\n+  return simplify_gen_subreg (\n+\t   SImode, reg,\n+\t   DImode, high_part_offset);\n+}\n+\n+rtx nds32_di_low_part_subreg(rtx reg)\n+{\n+  unsigned low_part_offset = subreg_lowpart_offset (SImode, DImode);\n+\n+  return simplify_gen_subreg (\n+\t   SImode, reg,\n+\t   DImode, low_part_offset);\n+}"}, {"sha": "d02aabfc88fe0b598db650a66210818da39dd51a", "filename": "gcc/config/nds32/nds32-memory-manipulation.c", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -449,29 +449,44 @@ nds32_gen_dup_4_byte_to_word_value (rtx value)\n     }\n   else\n     {\n-      /* ! prepare word\n-\t andi    $tmp1, $value, 0xff       ! $tmp1  <- 0x000000ab\n-\t slli    $tmp2, $tmp1, 8           ! $tmp2  <- 0x0000ab00\n-\t or      $tmp3, $tmp1, $tmp2       ! $tmp3  <- 0x0000abab\n-\t slli    $tmp4, $tmp3, 16          ! $tmp4  <- 0xabab0000\n-\t or      $val4word, $tmp3, $tmp4   ! $value4word  <- 0xabababab  */\n-\n-      rtx tmp1, tmp2, tmp3, tmp4, final_value;\n-      tmp1 = expand_binop (SImode, and_optab, value,\n-\t\t\t   gen_int_mode (0xff, SImode),\n-\t\t\t   NULL_RTX, 0, OPTAB_WIDEN);\n-      tmp2 = expand_binop (SImode, ashl_optab, tmp1,\n-\t\t\t   gen_int_mode (8, SImode),\n-\t\t\t   NULL_RTX, 0, OPTAB_WIDEN);\n-      tmp3 = expand_binop (SImode, ior_optab, tmp1, tmp2,\n-\t\t\t   NULL_RTX, 0, OPTAB_WIDEN);\n-      tmp4 = expand_binop (SImode, ashl_optab, tmp3,\n-\t\t\t   gen_int_mode (16, SImode),\n-\t\t\t   NULL_RTX, 0, OPTAB_WIDEN);\n-\n-      final_value = expand_binop (SImode, ior_optab, tmp3, tmp4,\n-\t\t\t\t  NULL_RTX, 0, OPTAB_WIDEN);\n-      emit_move_insn (value4word, final_value);\n+      if (NDS32_EXT_DSP_P ())\n+\t{\n+\t  /* ! prepare word\n+\t     insb    $tmp, $value, 1         ! $tmp  <- 0x0000abab\n+\t     pkbb16  $tmp6, $tmp2, $tmp2   ! $value4word  <- 0xabababab */\n+\t  rtx tmp = gen_reg_rtx (SImode);\n+\n+\t  convert_move (tmp, value, true);\n+\n+\t  emit_insn (\n+\t    gen_insvsi_internal (tmp, gen_int_mode (0x8, SImode), tmp));\n+\n+\t  emit_insn (gen_pkbbsi_1 (value4word, tmp, tmp));\n+\t}\n+      else\n+\t{\n+\t  /* ! prepare word\n+\t     andi    $tmp1, $value, 0xff       ! $tmp1  <- 0x000000ab\n+\t     slli    $tmp2, $tmp1, 8           ! $tmp2  <- 0x0000ab00\n+\t     or      $tmp3, $tmp1, $tmp2       ! $tmp3  <- 0x0000abab\n+\t     slli    $tmp4, $tmp3, 16          ! $tmp4  <- 0xabab0000\n+\t     or      $val4word, $tmp3, $tmp4   ! $value4word  <- 0xabababab  */\n+\n+\t  rtx tmp1, tmp2, tmp3, tmp4;\n+\t  tmp1 = expand_binop (SImode, and_optab, value,\n+\t\t\t       gen_int_mode (0xff, SImode),\n+\t\t\t       NULL_RTX, 0, OPTAB_WIDEN);\n+\t  tmp2 = expand_binop (SImode, ashl_optab, tmp1,\n+\t\t\t       gen_int_mode (8, SImode),\n+\t\t\t       NULL_RTX, 0, OPTAB_WIDEN);\n+\t  tmp3 = expand_binop (SImode, ior_optab, tmp1, tmp2,\n+\t\t\t       NULL_RTX, 0, OPTAB_WIDEN);\n+\t  tmp4 = expand_binop (SImode, ashl_optab, tmp3,\n+\t\t\t       gen_int_mode (16, SImode),\n+\t\t\t       NULL_RTX, 0, OPTAB_WIDEN);\n+\n+\t  emit_insn (gen_iorsi3 (value4word, tmp3, tmp4));\n+\t}\n     }\n \n   return value4word;"}, {"sha": "2363b9679766aed8ce7b16ca3f04859438f311ba", "filename": "gcc/config/nds32/nds32-predicates.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -518,4 +518,81 @@ nds32_const_double_range_ok_p (rtx op, machine_mode mode,\n \n   return val >= lower && val < upper;\n }\n+\n+HOST_WIDE_INT\n+const_vector_to_hwint (rtx op)\n+{\n+  HOST_WIDE_INT hwint = 0;\n+  HOST_WIDE_INT mask;\n+  int i;\n+  int shift_adv;\n+  int shift = 0;\n+  int nelem;\n+\n+  switch (GET_MODE (op))\n+    {\n+      case V2HImode:\n+\tmask = 0xffff;\n+\tshift_adv = 16;\n+\tnelem = 2;\n+\tbreak;\n+      case V4QImode:\n+\tmask = 0xff;\n+\tshift_adv = 8;\n+\tnelem = 4;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  if (TARGET_BIG_ENDIAN)\n+    {\n+      for (i = 0; i < nelem; ++i)\n+\t{\n+\t  HOST_WIDE_INT val = XINT (XVECEXP (op, 0, nelem - i - 1), 0);\n+\t  hwint |= (val & mask) << shift;\n+\t  shift = shift + shift_adv;\n+\t}\n+    }\n+  else\n+    {\n+      for (i = 0; i < nelem; ++i)\n+\t{\n+\t  HOST_WIDE_INT val = XINT (XVECEXP (op, 0, i), 0);\n+\t  hwint |= (val & mask) << shift;\n+\t  shift = shift + shift_adv;\n+\t}\n+    }\n+\n+  return hwint;\n+}\n+\n+bool\n+nds32_valid_CVp5_p (rtx op)\n+{\n+  HOST_WIDE_INT ival = const_vector_to_hwint (op);\n+  return (ival < ((1 << 5) + 16)) && (ival >= (0 + 16));\n+}\n+\n+bool\n+nds32_valid_CVs5_p (rtx op)\n+{\n+  HOST_WIDE_INT ival = const_vector_to_hwint (op);\n+  return (ival < (1 << 4)) && (ival >= -(1 << 4));\n+}\n+\n+bool\n+nds32_valid_CVs2_p (rtx op)\n+{\n+  HOST_WIDE_INT ival = const_vector_to_hwint (op);\n+  return (ival < (1 << 19)) && (ival >= -(1 << 19));\n+}\n+\n+bool\n+nds32_valid_CVhi_p (rtx op)\n+{\n+  HOST_WIDE_INT ival = const_vector_to_hwint (op);\n+  return (ival != 0) && ((ival & 0xfff) == 0);\n+}\n+\n /* ------------------------------------------------------------------------ */"}, {"sha": "64500e33564d38093f5e731edaee2c282b825914", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -73,6 +73,11 @@ extern unsigned int nds32_dbx_register_number (unsigned int);\n \n extern bool nds32_valid_smw_lwm_base_p (rtx);\n \n+/* Auxiliary functions for manipulation DI mode.  */\n+\n+extern rtx nds32_di_high_part_subreg(rtx);\n+extern rtx nds32_di_low_part_subreg(rtx);\n+\n /* Auxiliary functions for expanding rtl used in nds32-multiple.md.  */\n \n extern rtx nds32_expand_load_multiple (int, int, rtx, rtx, bool, rtx *);\n@@ -159,6 +164,10 @@ extern void nds32_expand_float_cstore (rtx *);\n extern enum nds32_expand_result_type nds32_expand_movcc (rtx *);\n extern void nds32_expand_float_movcc (rtx *);\n \n+/* Auxiliary functions for expand extv/insv instruction.  */\n+\n+extern enum nds32_expand_result_type nds32_expand_extv (rtx *);\n+extern enum nds32_expand_result_type nds32_expand_insv (rtx *);\n \n /* Auxiliary functions to identify long-call symbol.  */\n extern bool nds32_long_call_p (rtx);\n@@ -193,6 +202,8 @@ extern const char *nds32_output_cbranchsi4_equality_reg_or_const_int (rtx_insn *\n \t\t\t\t\t\t\t\t      rtx *);\n extern const char *nds32_output_cbranchsi4_greater_less_zero (rtx_insn *, rtx *);\n \n+extern const char *nds32_output_unpkd8 (rtx, rtx, rtx, rtx, bool);\n+\n extern const char *nds32_output_call (rtx, rtx *, rtx,\n \t\t\t\t      const char *, const char *, bool);\n \n@@ -203,9 +214,19 @@ extern const char *nds32_output_stack_push (rtx);\n extern const char *nds32_output_stack_pop (rtx);\n extern const char *nds32_output_return (void);\n \n+\n+/* Auxiliary functions to split/output sms pattern.  */\n+extern bool nds32_need_split_sms_p (rtx, rtx, rtx, rtx);\n+extern const char *nds32_output_sms (rtx, rtx, rtx, rtx);\n+extern void nds32_split_sms (rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+\n /* Auxiliary functions to split double word RTX pattern.  */\n \n extern void nds32_spilt_doubleword (rtx *, bool);\n+extern void nds32_split_ashiftdi3 (rtx, rtx, rtx);\n+extern void nds32_split_ashiftrtdi3 (rtx, rtx, rtx);\n+extern void nds32_split_lshiftrtdi3 (rtx, rtx, rtx);\n+extern void nds32_split_rotatertdi3 (rtx, rtx, rtx);\n \n /* Auxiliary functions to split large constant RTX pattern.  */\n \n@@ -246,6 +267,14 @@ extern int nds32_address_cost_impl (rtx, machine_mode, addr_space_t, bool);\n /* Auxiliary functions for pre-define marco.  */\n extern void nds32_cpu_cpp_builtins(struct cpp_reader *);\n \n+/* Auxiliary functions for const_vector's constraints.  */\n+\n+extern HOST_WIDE_INT const_vector_to_hwint (rtx);\n+extern bool nds32_valid_CVp5_p (rtx);\n+extern bool nds32_valid_CVs5_p (rtx);\n+extern bool nds32_valid_CVs2_p (rtx);\n+extern bool nds32_valid_CVhi_p (rtx);\n+\n extern bool nds32_split_double_word_load_store_p (rtx *,bool);\n \n namespace nds32 {"}, {"sha": "203cd114a38860df75adde20e8922e61e24f84e1", "filename": "gcc/config/nds32/nds32-utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -413,6 +413,7 @@ extract_mac_non_acc_rtx (rtx_insn *insn)\n   switch (get_attr_type (insn))\n     {\n     case TYPE_MAC:\n+    case TYPE_DMAC:\n       if (REG_P (XEXP (exp, 0)))\n \treturn XEXP (exp, 1);\n       else"}, {"sha": "50eb709aa489188f33d0038063c67554b862ba56", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -1987,6 +1987,16 @@ nds32_function_arg_boundary (machine_mode mode, const_tree type)\n \t  : PARM_BOUNDARY);\n }\n \n+bool\n+nds32_vector_mode_supported_p (machine_mode mode)\n+{\n+  if (mode == V4QImode\n+      || mode == V2HImode)\n+    return NDS32_EXT_DSP_P ();\n+\n+  return false;\n+}\n+\n /* -- How Scalar Function Values Are Returned.  */\n \n static rtx\n@@ -2688,6 +2698,23 @@ nds32_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n     }\n }\n \n+static machine_mode\n+nds32_vectorize_preferred_simd_mode (scalar_mode mode)\n+{\n+  if (!NDS32_EXT_DSP_P ())\n+    return word_mode;\n+\n+  switch (mode)\n+    {\n+    case E_QImode:\n+      return V4QImode;\n+    case E_HImode:\n+      return V2HImode;\n+    default:\n+      return word_mode;\n+    }\n+}\n+\n \f\n /* Condition Code Status.  */\n \n@@ -2978,6 +3005,18 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n \n       /* No need to handle following process, so return immediately.  */\n       return;\n+\n+    case 'v':\n+      gcc_assert (CONST_INT_P (x)\n+\t\t  && (INTVAL (x) == 0\n+\t\t      || INTVAL (x) == 8\n+\t\t      || INTVAL (x) == 16\n+\t\t      || INTVAL (x) == 24));\n+      fprintf (stream, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) / 8);\n+\n+      /* No need to handle following process, so return immediately.  */\n+      return;\n+\n     case 'B':\n       /* Use exact_log2() to search the 1-bit position.  */\n       gcc_assert (CONST_INT_P (x));\n@@ -3168,6 +3207,10 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n       output_addr_const (stream, x);\n       break;\n \n+    case CONST_VECTOR:\n+      fprintf (stream, HOST_WIDE_INT_PRINT_HEX, const_vector_to_hwint (x));\n+      break;\n+\n     default:\n       /* Generally, output_addr_const () is able to handle most cases.\n \t We want to see what CODE could appear,\n@@ -3260,6 +3303,20 @@ nds32_print_operand_address (FILE *stream, machine_mode /*mode*/, rtx x)\n \t\t\t   reg_names[REGNO (XEXP (op0, 0))],\n \t\t\t   sv);\n \t}\n+      else if (GET_CODE (op0) == ASHIFT && REG_P (op1))\n+\t{\n+\t  /* [Ra + Rb << sv]\n+\t     In normal, ASHIFT can be converted to MULT like above case.\n+\t     But when the address rtx does not go through canonicalize_address\n+\t     defined in fwprop, we'll need this case.  */\n+\t  int sv = INTVAL (XEXP (op0, 1));\n+\t  gcc_assert (sv <= 3 && sv >=0);\n+\n+\t  fprintf (stream, \"[%s + %s << %d]\",\n+\t\t   reg_names[REGNO (op1)],\n+\t\t   reg_names[REGNO (XEXP (op0, 0))],\n+\t\t   sv);\n+\t}\n       else\n \t{\n \t  /* The control flow is not supposed to be here.  */\n@@ -3770,6 +3827,8 @@ nds32_cpu_cpp_builtins(struct cpp_reader *pfile)\n     builtin_define (\"__NDS32_GP_DIRECT__\");\n   if (TARGET_VH)\n     builtin_define (\"__NDS32_VH__\");\n+  if (NDS32_EXT_DSP_P ())\n+    builtin_define (\"__NDS32_EXT_DSP__\");\n \n   if (TARGET_BIG_ENDIAN)\n     builtin_define (\"__big_endian__\");\n@@ -5010,6 +5069,9 @@ nds32_use_blocks_for_constant_p (machine_mode mode,\n #undef TARGET_FUNCTION_ARG_BOUNDARY\n #define TARGET_FUNCTION_ARG_BOUNDARY nds32_function_arg_boundary\n \n+#undef TARGET_VECTOR_MODE_SUPPORTED_P\n+#define TARGET_VECTOR_MODE_SUPPORTED_P nds32_vector_mode_supported_p\n+\n /* -- How Scalar Function Values Are Returned.  */\n \n #undef TARGET_FUNCTION_VALUE\n@@ -5087,6 +5149,9 @@ nds32_use_blocks_for_constant_p (machine_mode mode,\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P nds32_legitimate_address_p\n \n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE nds32_vectorize_preferred_simd_mode\n+\n \f\n /* Anchored Addresses.  */\n "}, {"sha": "229012a9965376754214b9ceb0381a79f22bc3af", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 326, "deletions": 4, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -140,6 +140,9 @@ enum nds32_16bit_address_type\n    Check gcc/common/config/nds32/nds32-common.c for the optimizations that\n    apply -malways-align.  */\n #define NDS32_ALIGN_P() (TARGET_ALWAYS_ALIGN)\n+\n+#define NDS32_EXT_DSP_P() (TARGET_EXT_DSP && !TARGET_FORCE_NO_EXT_DSP)\n+\n /* Get alignment according to mode or type information.\n    When 'type' is nonnull, there is no need to look at 'mode'.  */\n #define NDS32_MODE_TYPE_ALIGN(mode, type) \\\n@@ -439,7 +442,30 @@ enum nds32_builtins\n   NDS32_BUILTIN_FFB,\n   NDS32_BUILTIN_FFMISM,\n   NDS32_BUILTIN_FLMISM,\n-\n+  NDS32_BUILTIN_KADDW,\n+  NDS32_BUILTIN_KSUBW,\n+  NDS32_BUILTIN_KADDH,\n+  NDS32_BUILTIN_KSUBH,\n+  NDS32_BUILTIN_KDMBB,\n+  NDS32_BUILTIN_V_KDMBB,\n+  NDS32_BUILTIN_KDMBT,\n+  NDS32_BUILTIN_V_KDMBT,\n+  NDS32_BUILTIN_KDMTB,\n+  NDS32_BUILTIN_V_KDMTB,\n+  NDS32_BUILTIN_KDMTT,\n+  NDS32_BUILTIN_V_KDMTT,\n+  NDS32_BUILTIN_KHMBB,\n+  NDS32_BUILTIN_V_KHMBB,\n+  NDS32_BUILTIN_KHMBT,\n+  NDS32_BUILTIN_V_KHMBT,\n+  NDS32_BUILTIN_KHMTB,\n+  NDS32_BUILTIN_V_KHMTB,\n+  NDS32_BUILTIN_KHMTT,\n+  NDS32_BUILTIN_V_KHMTT,\n+  NDS32_BUILTIN_KSLRAW,\n+  NDS32_BUILTIN_KSLRAW_U,\n+  NDS32_BUILTIN_RDOV,\n+  NDS32_BUILTIN_CLROV,\n   NDS32_BUILTIN_ROTR,\n   NDS32_BUILTIN_SVA,\n   NDS32_BUILTIN_SVS,\n@@ -512,7 +538,295 @@ enum nds32_builtins\n   NDS32_BUILTIN_SET_TRIG_LEVEL,\n   NDS32_BUILTIN_SET_TRIG_EDGE,\n   NDS32_BUILTIN_GET_TRIG_TYPE,\n-\n+  NDS32_BUILTIN_DSP_BEGIN,\n+  NDS32_BUILTIN_ADD16,\n+  NDS32_BUILTIN_V_UADD16,\n+  NDS32_BUILTIN_V_SADD16,\n+  NDS32_BUILTIN_RADD16,\n+  NDS32_BUILTIN_V_RADD16,\n+  NDS32_BUILTIN_URADD16,\n+  NDS32_BUILTIN_V_URADD16,\n+  NDS32_BUILTIN_KADD16,\n+  NDS32_BUILTIN_V_KADD16,\n+  NDS32_BUILTIN_UKADD16,\n+  NDS32_BUILTIN_V_UKADD16,\n+  NDS32_BUILTIN_SUB16,\n+  NDS32_BUILTIN_V_USUB16,\n+  NDS32_BUILTIN_V_SSUB16,\n+  NDS32_BUILTIN_RSUB16,\n+  NDS32_BUILTIN_V_RSUB16,\n+  NDS32_BUILTIN_URSUB16,\n+  NDS32_BUILTIN_V_URSUB16,\n+  NDS32_BUILTIN_KSUB16,\n+  NDS32_BUILTIN_V_KSUB16,\n+  NDS32_BUILTIN_UKSUB16,\n+  NDS32_BUILTIN_V_UKSUB16,\n+  NDS32_BUILTIN_CRAS16,\n+  NDS32_BUILTIN_V_UCRAS16,\n+  NDS32_BUILTIN_V_SCRAS16,\n+  NDS32_BUILTIN_RCRAS16,\n+  NDS32_BUILTIN_V_RCRAS16,\n+  NDS32_BUILTIN_URCRAS16,\n+  NDS32_BUILTIN_V_URCRAS16,\n+  NDS32_BUILTIN_KCRAS16,\n+  NDS32_BUILTIN_V_KCRAS16,\n+  NDS32_BUILTIN_UKCRAS16,\n+  NDS32_BUILTIN_V_UKCRAS16,\n+  NDS32_BUILTIN_CRSA16,\n+  NDS32_BUILTIN_V_UCRSA16,\n+  NDS32_BUILTIN_V_SCRSA16,\n+  NDS32_BUILTIN_RCRSA16,\n+  NDS32_BUILTIN_V_RCRSA16,\n+  NDS32_BUILTIN_URCRSA16,\n+  NDS32_BUILTIN_V_URCRSA16,\n+  NDS32_BUILTIN_KCRSA16,\n+  NDS32_BUILTIN_V_KCRSA16,\n+  NDS32_BUILTIN_UKCRSA16,\n+  NDS32_BUILTIN_V_UKCRSA16,\n+  NDS32_BUILTIN_ADD8,\n+  NDS32_BUILTIN_V_UADD8,\n+  NDS32_BUILTIN_V_SADD8,\n+  NDS32_BUILTIN_RADD8,\n+  NDS32_BUILTIN_V_RADD8,\n+  NDS32_BUILTIN_URADD8,\n+  NDS32_BUILTIN_V_URADD8,\n+  NDS32_BUILTIN_KADD8,\n+  NDS32_BUILTIN_V_KADD8,\n+  NDS32_BUILTIN_UKADD8,\n+  NDS32_BUILTIN_V_UKADD8,\n+  NDS32_BUILTIN_SUB8,\n+  NDS32_BUILTIN_V_USUB8,\n+  NDS32_BUILTIN_V_SSUB8,\n+  NDS32_BUILTIN_RSUB8,\n+  NDS32_BUILTIN_V_RSUB8,\n+  NDS32_BUILTIN_URSUB8,\n+  NDS32_BUILTIN_V_URSUB8,\n+  NDS32_BUILTIN_KSUB8,\n+  NDS32_BUILTIN_V_KSUB8,\n+  NDS32_BUILTIN_UKSUB8,\n+  NDS32_BUILTIN_V_UKSUB8,\n+  NDS32_BUILTIN_SRA16,\n+  NDS32_BUILTIN_V_SRA16,\n+  NDS32_BUILTIN_SRA16_U,\n+  NDS32_BUILTIN_V_SRA16_U,\n+  NDS32_BUILTIN_SRL16,\n+  NDS32_BUILTIN_V_SRL16,\n+  NDS32_BUILTIN_SRL16_U,\n+  NDS32_BUILTIN_V_SRL16_U,\n+  NDS32_BUILTIN_SLL16,\n+  NDS32_BUILTIN_V_SLL16,\n+  NDS32_BUILTIN_KSLL16,\n+  NDS32_BUILTIN_V_KSLL16,\n+  NDS32_BUILTIN_KSLRA16,\n+  NDS32_BUILTIN_V_KSLRA16,\n+  NDS32_BUILTIN_KSLRA16_U,\n+  NDS32_BUILTIN_V_KSLRA16_U,\n+  NDS32_BUILTIN_CMPEQ16,\n+  NDS32_BUILTIN_V_SCMPEQ16,\n+  NDS32_BUILTIN_V_UCMPEQ16,\n+  NDS32_BUILTIN_SCMPLT16,\n+  NDS32_BUILTIN_V_SCMPLT16,\n+  NDS32_BUILTIN_SCMPLE16,\n+  NDS32_BUILTIN_V_SCMPLE16,\n+  NDS32_BUILTIN_UCMPLT16,\n+  NDS32_BUILTIN_V_UCMPLT16,\n+  NDS32_BUILTIN_UCMPLE16,\n+  NDS32_BUILTIN_V_UCMPLE16,\n+  NDS32_BUILTIN_CMPEQ8,\n+  NDS32_BUILTIN_V_SCMPEQ8,\n+  NDS32_BUILTIN_V_UCMPEQ8,\n+  NDS32_BUILTIN_SCMPLT8,\n+  NDS32_BUILTIN_V_SCMPLT8,\n+  NDS32_BUILTIN_SCMPLE8,\n+  NDS32_BUILTIN_V_SCMPLE8,\n+  NDS32_BUILTIN_UCMPLT8,\n+  NDS32_BUILTIN_V_UCMPLT8,\n+  NDS32_BUILTIN_UCMPLE8,\n+  NDS32_BUILTIN_V_UCMPLE8,\n+  NDS32_BUILTIN_SMIN16,\n+  NDS32_BUILTIN_V_SMIN16,\n+  NDS32_BUILTIN_UMIN16,\n+  NDS32_BUILTIN_V_UMIN16,\n+  NDS32_BUILTIN_SMAX16,\n+  NDS32_BUILTIN_V_SMAX16,\n+  NDS32_BUILTIN_UMAX16,\n+  NDS32_BUILTIN_V_UMAX16,\n+  NDS32_BUILTIN_SCLIP16,\n+  NDS32_BUILTIN_V_SCLIP16,\n+  NDS32_BUILTIN_UCLIP16,\n+  NDS32_BUILTIN_V_UCLIP16,\n+  NDS32_BUILTIN_KHM16,\n+  NDS32_BUILTIN_V_KHM16,\n+  NDS32_BUILTIN_KHMX16,\n+  NDS32_BUILTIN_V_KHMX16,\n+  NDS32_BUILTIN_KABS16,\n+  NDS32_BUILTIN_V_KABS16,\n+  NDS32_BUILTIN_SMIN8,\n+  NDS32_BUILTIN_V_SMIN8,\n+  NDS32_BUILTIN_UMIN8,\n+  NDS32_BUILTIN_V_UMIN8,\n+  NDS32_BUILTIN_SMAX8,\n+  NDS32_BUILTIN_V_SMAX8,\n+  NDS32_BUILTIN_UMAX8,\n+  NDS32_BUILTIN_V_UMAX8,\n+  NDS32_BUILTIN_KABS8,\n+  NDS32_BUILTIN_V_KABS8,\n+  NDS32_BUILTIN_SUNPKD810,\n+  NDS32_BUILTIN_V_SUNPKD810,\n+  NDS32_BUILTIN_SUNPKD820,\n+  NDS32_BUILTIN_V_SUNPKD820,\n+  NDS32_BUILTIN_SUNPKD830,\n+  NDS32_BUILTIN_V_SUNPKD830,\n+  NDS32_BUILTIN_SUNPKD831,\n+  NDS32_BUILTIN_V_SUNPKD831,\n+  NDS32_BUILTIN_ZUNPKD810,\n+  NDS32_BUILTIN_V_ZUNPKD810,\n+  NDS32_BUILTIN_ZUNPKD820,\n+  NDS32_BUILTIN_V_ZUNPKD820,\n+  NDS32_BUILTIN_ZUNPKD830,\n+  NDS32_BUILTIN_V_ZUNPKD830,\n+  NDS32_BUILTIN_ZUNPKD831,\n+  NDS32_BUILTIN_V_ZUNPKD831,\n+  NDS32_BUILTIN_RADDW,\n+  NDS32_BUILTIN_URADDW,\n+  NDS32_BUILTIN_RSUBW,\n+  NDS32_BUILTIN_URSUBW,\n+  NDS32_BUILTIN_SRA_U,\n+  NDS32_BUILTIN_KSLL,\n+  NDS32_BUILTIN_PKBB16,\n+  NDS32_BUILTIN_V_PKBB16,\n+  NDS32_BUILTIN_PKBT16,\n+  NDS32_BUILTIN_V_PKBT16,\n+  NDS32_BUILTIN_PKTB16,\n+  NDS32_BUILTIN_V_PKTB16,\n+  NDS32_BUILTIN_PKTT16,\n+  NDS32_BUILTIN_V_PKTT16,\n+  NDS32_BUILTIN_SMMUL,\n+  NDS32_BUILTIN_SMMUL_U,\n+  NDS32_BUILTIN_KMMAC,\n+  NDS32_BUILTIN_KMMAC_U,\n+  NDS32_BUILTIN_KMMSB,\n+  NDS32_BUILTIN_KMMSB_U,\n+  NDS32_BUILTIN_KWMMUL,\n+  NDS32_BUILTIN_KWMMUL_U,\n+  NDS32_BUILTIN_SMMWB,\n+  NDS32_BUILTIN_V_SMMWB,\n+  NDS32_BUILTIN_SMMWB_U,\n+  NDS32_BUILTIN_V_SMMWB_U,\n+  NDS32_BUILTIN_SMMWT,\n+  NDS32_BUILTIN_V_SMMWT,\n+  NDS32_BUILTIN_SMMWT_U,\n+  NDS32_BUILTIN_V_SMMWT_U,\n+  NDS32_BUILTIN_KMMAWB,\n+  NDS32_BUILTIN_V_KMMAWB,\n+  NDS32_BUILTIN_KMMAWB_U,\n+  NDS32_BUILTIN_V_KMMAWB_U,\n+  NDS32_BUILTIN_KMMAWT,\n+  NDS32_BUILTIN_V_KMMAWT,\n+  NDS32_BUILTIN_KMMAWT_U,\n+  NDS32_BUILTIN_V_KMMAWT_U,\n+  NDS32_BUILTIN_SMBB,\n+  NDS32_BUILTIN_V_SMBB,\n+  NDS32_BUILTIN_SMBT,\n+  NDS32_BUILTIN_V_SMBT,\n+  NDS32_BUILTIN_SMTT,\n+  NDS32_BUILTIN_V_SMTT,\n+  NDS32_BUILTIN_KMDA,\n+  NDS32_BUILTIN_V_KMDA,\n+  NDS32_BUILTIN_KMXDA,\n+  NDS32_BUILTIN_V_KMXDA,\n+  NDS32_BUILTIN_SMDS,\n+  NDS32_BUILTIN_V_SMDS,\n+  NDS32_BUILTIN_SMDRS,\n+  NDS32_BUILTIN_V_SMDRS,\n+  NDS32_BUILTIN_SMXDS,\n+  NDS32_BUILTIN_V_SMXDS,\n+  NDS32_BUILTIN_KMABB,\n+  NDS32_BUILTIN_V_KMABB,\n+  NDS32_BUILTIN_KMABT,\n+  NDS32_BUILTIN_V_KMABT,\n+  NDS32_BUILTIN_KMATT,\n+  NDS32_BUILTIN_V_KMATT,\n+  NDS32_BUILTIN_KMADA,\n+  NDS32_BUILTIN_V_KMADA,\n+  NDS32_BUILTIN_KMAXDA,\n+  NDS32_BUILTIN_V_KMAXDA,\n+  NDS32_BUILTIN_KMADS,\n+  NDS32_BUILTIN_V_KMADS,\n+  NDS32_BUILTIN_KMADRS,\n+  NDS32_BUILTIN_V_KMADRS,\n+  NDS32_BUILTIN_KMAXDS,\n+  NDS32_BUILTIN_V_KMAXDS,\n+  NDS32_BUILTIN_KMSDA,\n+  NDS32_BUILTIN_V_KMSDA,\n+  NDS32_BUILTIN_KMSXDA,\n+  NDS32_BUILTIN_V_KMSXDA,\n+  NDS32_BUILTIN_SMAL,\n+  NDS32_BUILTIN_V_SMAL,\n+  NDS32_BUILTIN_BITREV,\n+  NDS32_BUILTIN_WEXT,\n+  NDS32_BUILTIN_BPICK,\n+  NDS32_BUILTIN_INSB,\n+  NDS32_BUILTIN_SADD64,\n+  NDS32_BUILTIN_UADD64,\n+  NDS32_BUILTIN_RADD64,\n+  NDS32_BUILTIN_URADD64,\n+  NDS32_BUILTIN_KADD64,\n+  NDS32_BUILTIN_UKADD64,\n+  NDS32_BUILTIN_SSUB64,\n+  NDS32_BUILTIN_USUB64,\n+  NDS32_BUILTIN_RSUB64,\n+  NDS32_BUILTIN_URSUB64,\n+  NDS32_BUILTIN_KSUB64,\n+  NDS32_BUILTIN_UKSUB64,\n+  NDS32_BUILTIN_SMAR64,\n+  NDS32_BUILTIN_SMSR64,\n+  NDS32_BUILTIN_UMAR64,\n+  NDS32_BUILTIN_UMSR64,\n+  NDS32_BUILTIN_KMAR64,\n+  NDS32_BUILTIN_KMSR64,\n+  NDS32_BUILTIN_UKMAR64,\n+  NDS32_BUILTIN_UKMSR64,\n+  NDS32_BUILTIN_SMALBB,\n+  NDS32_BUILTIN_V_SMALBB,\n+  NDS32_BUILTIN_SMALBT,\n+  NDS32_BUILTIN_V_SMALBT,\n+  NDS32_BUILTIN_SMALTT,\n+  NDS32_BUILTIN_V_SMALTT,\n+  NDS32_BUILTIN_SMALDA,\n+  NDS32_BUILTIN_V_SMALDA,\n+  NDS32_BUILTIN_SMALXDA,\n+  NDS32_BUILTIN_V_SMALXDA,\n+  NDS32_BUILTIN_SMALDS,\n+  NDS32_BUILTIN_V_SMALDS,\n+  NDS32_BUILTIN_SMALDRS,\n+  NDS32_BUILTIN_V_SMALDRS,\n+  NDS32_BUILTIN_SMALXDS,\n+  NDS32_BUILTIN_V_SMALXDS,\n+  NDS32_BUILTIN_SMUL16,\n+  NDS32_BUILTIN_V_SMUL16,\n+  NDS32_BUILTIN_SMULX16,\n+  NDS32_BUILTIN_V_SMULX16,\n+  NDS32_BUILTIN_UMUL16,\n+  NDS32_BUILTIN_V_UMUL16,\n+  NDS32_BUILTIN_UMULX16,\n+  NDS32_BUILTIN_V_UMULX16,\n+  NDS32_BUILTIN_SMSLDA,\n+  NDS32_BUILTIN_V_SMSLDA,\n+  NDS32_BUILTIN_SMSLXDA,\n+  NDS32_BUILTIN_V_SMSLXDA,\n+  NDS32_BUILTIN_UCLIP32,\n+  NDS32_BUILTIN_SCLIP32,\n+  NDS32_BUILTIN_KABS,\n+  NDS32_BUILTIN_UALOAD_U16,\n+  NDS32_BUILTIN_UALOAD_S16,\n+  NDS32_BUILTIN_UALOAD_U8,\n+  NDS32_BUILTIN_UALOAD_S8,\n+  NDS32_BUILTIN_UASTORE_U16,\n+  NDS32_BUILTIN_UASTORE_S16,\n+  NDS32_BUILTIN_UASTORE_U8,\n+  NDS32_BUILTIN_UASTORE_S8,\n+  NDS32_BUILTIN_DSP_END,\n   NDS32_BUILTIN_UNALIGNED_FEATURE,\n   NDS32_BUILTIN_ENABLE_UNALIGNED,\n   NDS32_BUILTIN_DISABLE_UNALIGNED,\n@@ -576,6 +890,13 @@ enum nds32_builtins\n #endif\n \n #define TARGET_CONFIG_FPU_DEFAULT NDS32_CONFIG_FPU_2\n+\n+#ifdef TARGET_DEFAULT_EXT_DSP\n+#  define NDS32_EXT_DSP_SPEC \" %{!mno-ext-dsp:-mext-dsp}\"\n+#else\n+#  define NDS32_EXT_DSP_SPEC \"\"\n+#endif\n+\n /* ------------------------------------------------------------------------ */\n \f\n /* Controlling the Compilation Driver.  */\n@@ -591,7 +912,7 @@ enum nds32_builtins\n   {\"float\", \"%{!mfloat-abi=*:-mfloat-abi=%(VALUE)}\" }\n \n #define CC1_SPEC \\\n-  \"\"\n+  NDS32_EXT_DSP_SPEC\n \n #define ASM_SPEC \\\n   \" %{mbig-endian:-EB} %{mlittle-endian:-EL}\" \\\n@@ -603,7 +924,8 @@ enum nds32_builtins\n   \" %{mext-fpu-sp:-mfpu-sp-ext}\" \\\n   \" %{mno-ext-fpu-sp:-mno-fpu-sp-ext}\" \\\n   \" %{mext-fpu-dp:-mfpu-dp-ext}\" \\\n-  \" %{mno-ext-fpu-sp:-mno-fpu-dp-ext}\"\n+  \" %{mno-ext-fpu-sp:-mno-fpu-dp-ext}\" \\\n+  \" %{mext-dsp:-mdsp-ext}\"\n \n /* If user issues -mrelax, we need to pass '--relax' to linker.  */\n #define LINK_SPEC \\"}, {"sha": "7249520028d186097bc256c93ee6ccc16f4e09c6", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -68,12 +68,13 @@\n ;; Insn type, it is used to default other attribute values.\n (define_attr \"type\"\n   \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,pbsad,pbsada,mul,mac,div,branch,mmu,misc,\\\n-   falu,fmuls,fmuld,fmacs,fmacd,fdivs,fdivd,fsqrts,fsqrtd,fcmp,fabs,fcpy,fcmov,fmfsr,fmfdr,fmtsr,fmtdr,fload,fstore\"\n+   falu,fmuls,fmuld,fmacs,fmacd,fdivs,fdivd,fsqrts,fsqrtd,fcmp,fabs,fcpy,fcmov,fmfsr,fmfdr,fmtsr,fmtdr,fload,fstore,\\\n+   dalu,dalu64,daluround,dcmp,dclip,dmul,dmac,dinsb,dpack,dbpick,dwext\"\n   (const_string \"unknown\"))\n \n ;; Insn sub-type\n (define_attr \"subtype\"\n-  \"simple,shift\"\n+  \"simple,shift,saturation\"\n   (const_string \"simple\"))\n \n ;; Length, in bytes, default is 4-bytes.\n@@ -133,6 +134,7 @@\n \n ;; ----------------------------------------------------------------------------\n \n+(include \"nds32-dspext.md\")\n \n ;; Move instructions.\n \n@@ -351,13 +353,58 @@\n \n \n ;; ----------------------------------------------------------------------------\n+(define_expand \"extv\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+        (sign_extract (match_operand 1 \"nonimmediate_operand\" \"\")\n+                      (match_operand 2 \"const_int_operand\" \"\")\n+                      (match_operand 3 \"const_int_operand\" \"\")))]\n+  \"\"\n+{\n+  enum nds32_expand_result_type result = nds32_expand_extv (operands);\n+  switch (result)\n+    {\n+    case EXPAND_DONE:\n+      DONE;\n+      break;\n+    case EXPAND_FAIL:\n+      FAIL;\n+      break;\n+    case EXPAND_CREATE_TEMPLATE:\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n+\n+(define_expand \"insv\"\n+  [(set (zero_extract (match_operand 0 \"nonimmediate_operand\" \"\")\n+                      (match_operand 1 \"const_int_operand\" \"\")\n+                      (match_operand 2 \"const_int_operand\" \"\"))\n+        (match_operand 3 \"register_operand\" \"\"))]\n+  \"\"\n+{\n+  enum nds32_expand_result_type result = nds32_expand_insv (operands);\n+  switch (result)\n+    {\n+    case EXPAND_DONE:\n+      DONE;\n+      break;\n+    case EXPAND_FAIL:\n+      FAIL;\n+      break;\n+    case EXPAND_CREATE_TEMPLATE:\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n \n ;; Arithmetic instructions.\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"               \"=   d,   l,   d,   l, d, l,   k,   l,    r, r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\"      \"%   0,   l,   0,   l, 0, l,   0,   k,    r, r\")\n-\t\t (match_operand:SI 2 \"nds32_rimm15s_operand\" \" In05,In03,Iu05,Iu03, r, l,Is10,Iu06, Is15, r\")))]\n+\t\t (match_operand:SI 2 \"nds32_rimm15s_operand\" \" In05,In03,Iu05,Iu03, r, l,Is10,IU06, Is15, r\")))]\n   \"\"\n {\n   switch (which_alternative)"}, {"sha": "2c72a01e35e56db2ce1c11412995a0b8926b1153", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -90,6 +90,10 @@ mcmov\n Target Report Mask(CMOV)\n Generate conditional move instructions.\n \n+mhw-abs\n+Target Report Mask(HW_ABS)\n+Generate hardware abs instructions.\n+\n mext-perf\n Target Report Mask(EXT_PERF)\n Generate performance extension instructions.\n@@ -102,6 +106,10 @@ mext-string\n Target Report Mask(EXT_STRING)\n Generate string extension instructions.\n \n+mext-dsp\n+Target Report Mask(EXT_DSP)\n+Generate DSP extension instructions.\n+\n mv3push\n Target Report Mask(V3PUSH)\n Generate v3 push25/pop25 instructions.\n@@ -321,6 +329,10 @@ mext-fpu-dp\n Target Report Mask(FPU_DOUBLE)\n Generate double-precision floating-point instructions.\n \n+mforce-no-ext-dsp\n+Target Undocumented Report Mask(FORCE_NO_EXT_DSP)\n+Force disable hardware loop, even use -mext-dsp.\n+\n malways-save-lp\n Target Var(flag_always_save_lp) Init(0)\n Always save $lp in the stack."}, {"sha": "24cb29154918ab4887d0465ad55ba67bb36220e0", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 668, "deletions": 0, "changes": 668, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -26,6 +26,13 @@\n #ifndef _NDS32_INTRINSIC_H\n #define _NDS32_INTRINSIC_H\n \n+typedef signed char int8x4_t __attribute ((vector_size(4)));\n+typedef short int16x2_t __attribute ((vector_size(4)));\n+typedef int int32x2_t __attribute__((vector_size(8)));\n+typedef unsigned char uint8x4_t __attribute__ ((vector_size (4)));\n+typedef unsigned short uint16x2_t __attribute__ ((vector_size (4)));\n+typedef unsigned int uint32x2_t __attribute__((vector_size(8)));\n+\n /* General instrinsic register names.  */\n enum nds32_intrinsic_registers\n {\n@@ -691,6 +698,55 @@ enum nds32_dpref\n #define __nds32__tlbop_flua() \\\n (__builtin_nds32_tlbop_flua())\n \n+#define __nds32__kaddw(a, b) \\\n+  (__builtin_nds32_kaddw ((a), (b)))\n+#define __nds32__kaddh(a, b) \\\n+  (__builtin_nds32_kaddh ((a), (b)))\n+#define __nds32__ksubw(a, b) \\\n+  (__builtin_nds32_ksubw ((a), (b)))\n+#define __nds32__ksubh(a, b) \\\n+  (__builtin_nds32_ksubh ((a), (b)))\n+#define __nds32__kdmbb(a, b) \\\n+  (__builtin_nds32_kdmbb ((a), (b)))\n+#define __nds32__v_kdmbb(a, b) \\\n+  (__builtin_nds32_v_kdmbb ((a), (b)))\n+#define __nds32__kdmbt(a, b) \\\n+  (__builtin_nds32_kdmbt ((a), (b)))\n+#define __nds32__v_kdmbt(a, b) \\\n+  (__builtin_nds32_v_kdmbt ((a), (b)))\n+#define __nds32__kdmtb(a, b) \\\n+  (__builtin_nds32_kdmtb ((a), (b)))\n+#define __nds32__v_kdmtb(a, b) \\\n+  (__builtin_nds32_v_kdmtb ((a), (b)))\n+#define __nds32__kdmtt(a, b) \\\n+  (__builtin_nds32_kdmtt ((a), (b)))\n+#define __nds32__v_kdmtt(a, b) \\\n+  (__builtin_nds32_v_kdmtt ((a), (b)))\n+#define __nds32__khmbb(a, b) \\\n+  (__builtin_nds32_khmbb ((a), (b)))\n+#define __nds32__v_khmbb(a, b) \\\n+  (__builtin_nds32_v_khmbb ((a), (b)))\n+#define __nds32__khmbt(a, b) \\\n+  (__builtin_nds32_khmbt ((a), (b)))\n+#define __nds32__v_khmbt(a, b) \\\n+  (__builtin_nds32_v_khmbt ((a), (b)))\n+#define __nds32__khmtb(a, b) \\\n+  (__builtin_nds32_khmtb ((a), (b)))\n+#define __nds32__v_khmtb(a, b) \\\n+  (__builtin_nds32_v_khmtb ((a), (b)))\n+#define __nds32__khmtt(a, b) \\\n+  (__builtin_nds32_khmtt ((a), (b)))\n+#define __nds32__v_khmtt(a, b) \\\n+  (__builtin_nds32_v_khmtt ((a), (b)))\n+#define __nds32__kslraw(a, b) \\\n+  (__builtin_nds32_kslraw ((a), (b)))\n+#define __nds32__kslraw_u(a, b) \\\n+  (__builtin_nds32_kslraw_u ((a), (b)))\n+\n+#define __nds32__rdov() \\\n+  (__builtin_nds32_rdov())\n+#define __nds32__clrov() \\\n+  (__builtin_nds32_clrov())\n #define __nds32__gie_dis() \\\n   (__builtin_nds32_gie_dis())\n #define __nds32__gie_en() \\\n@@ -720,10 +776,622 @@ enum nds32_dpref\n #define __nds32__get_trig_type(a) \\\n   (__builtin_nds32_get_trig_type ((a)))\n \n+#define __nds32__get_unaligned_hw(a) \\\n+  (__builtin_nds32_unaligned_load_hw ((a)))\n+#define __nds32__get_unaligned_w(a) \\\n+  (__builtin_nds32_unaligned_load_w ((a)))\n+#define __nds32__get_unaligned_dw(a) \\\n+  (__builtin_nds32_unaligned_load_dw ((a)))\n+#define __nds32__put_unaligned_hw(a, data) \\\n+  (__builtin_nds32_unaligned_store_hw ((a), (data)))\n+#define __nds32__put_unaligned_w(a, data) \\\n+  (__builtin_nds32_unaligned_store_w ((a), (data)))\n+#define __nds32__put_unaligned_dw(a, data) \\\n+  (__builtin_nds32_unaligned_store_dw ((a), (data)))\n+\n+#define __nds32__add16(a, b) \\\n+  (__builtin_nds32_add16 ((a), (b)))\n+#define __nds32__v_uadd16(a, b) \\\n+  (__builtin_nds32_v_uadd16 ((a), (b)))\n+#define __nds32__v_sadd16(a, b) \\\n+  (__builtin_nds32_v_sadd16 ((a), (b)))\n+#define __nds32__radd16(a, b) \\\n+  (__builtin_nds32_radd16 ((a), (b)))\n+#define __nds32__v_radd16(a, b) \\\n+  (__builtin_nds32_v_radd16 ((a), (b)))\n+#define __nds32__uradd16(a, b) \\\n+  (__builtin_nds32_uradd16 ((a), (b)))\n+#define __nds32__v_uradd16(a, b) \\\n+  (__builtin_nds32_v_uradd16 ((a), (b)))\n+#define __nds32__kadd16(a, b) \\\n+  (__builtin_nds32_kadd16 ((a), (b)))\n+#define __nds32__v_kadd16(a, b) \\\n+  (__builtin_nds32_v_kadd16 ((a), (b)))\n+#define __nds32__ukadd16(a, b) \\\n+  (__builtin_nds32_ukadd16 ((a), (b)))\n+#define __nds32__v_ukadd16(a, b) \\\n+  (__builtin_nds32_v_ukadd16 ((a), (b)))\n+#define __nds32__sub16(a, b) \\\n+  (__builtin_nds32_sub16 ((a), (b)))\n+#define __nds32__v_usub16(a, b) \\\n+  (__builtin_nds32_v_usub16 ((a), (b)))\n+#define __nds32__v_ssub16(a, b) \\\n+  (__builtin_nds32_v_ssub16 ((a), (b)))\n+#define __nds32__rsub16(a, b) \\\n+  (__builtin_nds32_rsub16 ((a), (b)))\n+#define __nds32__v_rsub16(a, b) \\\n+  (__builtin_nds32_v_rsub16 ((a), (b)))\n+#define __nds32__ursub16(a, b) \\\n+  (__builtin_nds32_ursub16 ((a), (b)))\n+#define __nds32__v_ursub16(a, b) \\\n+  (__builtin_nds32_v_ursub16 ((a), (b)))\n+#define __nds32__ksub16(a, b) \\\n+  (__builtin_nds32_ksub16 ((a), (b)))\n+#define __nds32__v_ksub16(a, b) \\\n+  (__builtin_nds32_v_ksub16 ((a), (b)))\n+#define __nds32__uksub16(a, b) \\\n+  (__builtin_nds32_uksub16 ((a), (b)))\n+#define __nds32__v_uksub16(a, b) \\\n+  (__builtin_nds32_v_uksub16 ((a), (b)))\n+#define __nds32__cras16(a, b) \\\n+  (__builtin_nds32_cras16 ((a), (b)))\n+#define __nds32__v_ucras16(a, b) \\\n+  (__builtin_nds32_v_ucras16 ((a), (b)))\n+#define __nds32__v_scras16(a, b) \\\n+  (__builtin_nds32_v_scras16 ((a), (b)))\n+#define __nds32__rcras16(a, b) \\\n+  (__builtin_nds32_rcras16 ((a), (b)))\n+#define __nds32__v_rcras16(a, b) \\\n+  (__builtin_nds32_v_rcras16 ((a), (b)))\n+#define __nds32__urcras16(a, b) \\\n+  (__builtin_nds32_urcras16 ((a), (b)))\n+#define __nds32__v_urcras16(a, b) \\\n+  (__builtin_nds32_v_urcras16 ((a), (b)))\n+#define __nds32__kcras16(a, b) \\\n+  (__builtin_nds32_kcras16 ((a), (b)))\n+#define __nds32__v_kcras16(a, b) \\\n+  (__builtin_nds32_v_kcras16 ((a), (b)))\n+#define __nds32__ukcras16(a, b) \\\n+  (__builtin_nds32_ukcras16 ((a), (b)))\n+#define __nds32__v_ukcras16(a, b) \\\n+  (__builtin_nds32_v_ukcras16 ((a), (b)))\n+#define __nds32__crsa16(a, b) \\\n+  (__builtin_nds32_crsa16 ((a), (b)))\n+#define __nds32__v_ucrsa16(a, b) \\\n+  (__builtin_nds32_v_ucrsa16 ((a), (b)))\n+#define __nds32__v_scrsa16(a, b) \\\n+  (__builtin_nds32_v_scrsa16 ((a), (b)))\n+#define __nds32__rcrsa16(a, b) \\\n+  (__builtin_nds32_rcrsa16 ((a), (b)))\n+#define __nds32__v_rcrsa16(a, b) \\\n+  (__builtin_nds32_v_rcrsa16 ((a), (b)))\n+#define __nds32__urcrsa16(a, b) \\\n+  (__builtin_nds32_urcrsa16 ((a), (b)))\n+#define __nds32__v_urcrsa16(a, b) \\\n+  (__builtin_nds32_v_urcrsa16 ((a), (b)))\n+#define __nds32__kcrsa16(a, b) \\\n+  (__builtin_nds32_kcrsa16 ((a), (b)))\n+#define __nds32__v_kcrsa16(a, b) \\\n+  (__builtin_nds32_v_kcrsa16 ((a), (b)))\n+#define __nds32__ukcrsa16(a, b) \\\n+  (__builtin_nds32_ukcrsa16 ((a), (b)))\n+#define __nds32__v_ukcrsa16(a, b) \\\n+  (__builtin_nds32_v_ukcrsa16 ((a), (b)))\n+\n+#define __nds32__add8(a, b) \\\n+  (__builtin_nds32_add8 ((a), (b)))\n+#define __nds32__v_uadd8(a, b) \\\n+  (__builtin_nds32_v_uadd8 ((a), (b)))\n+#define __nds32__v_sadd8(a, b) \\\n+  (__builtin_nds32_v_sadd8 ((a), (b)))\n+#define __nds32__radd8(a, b) \\\n+  (__builtin_nds32_radd8 ((a), (b)))\n+#define __nds32__v_radd8(a, b) \\\n+  (__builtin_nds32_v_radd8 ((a), (b)))\n+#define __nds32__uradd8(a, b) \\\n+  (__builtin_nds32_uradd8 ((a), (b)))\n+#define __nds32__v_uradd8(a, b) \\\n+  (__builtin_nds32_v_uradd8 ((a), (b)))\n+#define __nds32__kadd8(a, b) \\\n+  (__builtin_nds32_kadd8 ((a), (b)))\n+#define __nds32__v_kadd8(a, b) \\\n+  (__builtin_nds32_v_kadd8 ((a), (b)))\n+#define __nds32__ukadd8(a, b) \\\n+  (__builtin_nds32_ukadd8 ((a), (b)))\n+#define __nds32__v_ukadd8(a, b) \\\n+  (__builtin_nds32_v_ukadd8 ((a), (b)))\n+#define __nds32__sub8(a, b) \\\n+  (__builtin_nds32_sub8 ((a), (b)))\n+#define __nds32__v_usub8(a, b) \\\n+  (__builtin_nds32_v_usub8 ((a), (b)))\n+#define __nds32__v_ssub8(a, b) \\\n+  (__builtin_nds32_v_ssub8 ((a), (b)))\n+#define __nds32__rsub8(a, b) \\\n+  (__builtin_nds32_rsub8 ((a), (b)))\n+#define __nds32__v_rsub8(a, b) \\\n+  (__builtin_nds32_v_rsub8 ((a), (b)))\n+#define __nds32__ursub8(a, b) \\\n+  (__builtin_nds32_ursub8 ((a), (b)))\n+#define __nds32__v_ursub8(a, b) \\\n+  (__builtin_nds32_v_ursub8 ((a), (b)))\n+#define __nds32__ksub8(a, b) \\\n+  (__builtin_nds32_ksub8 ((a), (b)))\n+#define __nds32__v_ksub8(a, b) \\\n+  (__builtin_nds32_v_ksub8 ((a), (b)))\n+#define __nds32__uksub8(a, b) \\\n+  (__builtin_nds32_uksub8 ((a), (b)))\n+#define __nds32__v_uksub8(a, b) \\\n+  (__builtin_nds32_v_uksub8 ((a), (b)))\n+\n+#define __nds32__sra16(a, b) \\\n+  (__builtin_nds32_sra16 ((a), (b)))\n+#define __nds32__v_sra16(a, b) \\\n+  (__builtin_nds32_v_sra16 ((a), (b)))\n+#define __nds32__sra16_u(a, b) \\\n+  (__builtin_nds32_sra16_u ((a), (b)))\n+#define __nds32__v_sra16_u(a, b) \\\n+  (__builtin_nds32_v_sra16_u ((a), (b)))\n+#define __nds32__srl16(a, b) \\\n+  (__builtin_nds32_srl16 ((a), (b)))\n+#define __nds32__v_srl16(a, b) \\\n+  (__builtin_nds32_v_srl16 ((a), (b)))\n+#define __nds32__srl16_u(a, b) \\\n+  (__builtin_nds32_srl16_u ((a), (b)))\n+#define __nds32__v_srl16_u(a, b) \\\n+  (__builtin_nds32_v_srl16_u ((a), (b)))\n+#define __nds32__sll16(a, b) \\\n+  (__builtin_nds32_sll16 ((a), (b)))\n+#define __nds32__v_sll16(a, b) \\\n+  (__builtin_nds32_v_sll16 ((a), (b)))\n+#define __nds32__ksll16(a, b) \\\n+  (__builtin_nds32_ksll16 ((a), (b)))\n+#define __nds32__v_ksll16(a, b) \\\n+  (__builtin_nds32_v_ksll16 ((a), (b)))\n+#define __nds32__kslra16(a, b) \\\n+  (__builtin_nds32_kslra16 ((a), (b)))\n+#define __nds32__v_kslra16(a, b) \\\n+  (__builtin_nds32_v_kslra16 ((a), (b)))\n+#define __nds32__kslra16_u(a, b) \\\n+  (__builtin_nds32_kslra16_u ((a), (b)))\n+#define __nds32__v_kslra16_u(a, b) \\\n+  (__builtin_nds32_v_kslra16_u ((a), (b)))\n+\n+#define __nds32__cmpeq16(a, b) \\\n+  (__builtin_nds32_cmpeq16 ((a), (b)))\n+#define __nds32__v_scmpeq16(a, b) \\\n+  (__builtin_nds32_v_scmpeq16 ((a), (b)))\n+#define __nds32__v_ucmpeq16(a, b) \\\n+  (__builtin_nds32_v_ucmpeq16 ((a), (b)))\n+#define __nds32__scmplt16(a, b) \\\n+  (__builtin_nds32_scmplt16 ((a), (b)))\n+#define __nds32__v_scmplt16(a, b) \\\n+  (__builtin_nds32_v_scmplt16 ((a), (b)))\n+#define __nds32__scmple16(a, b) \\\n+  (__builtin_nds32_scmple16 ((a), (b)))\n+#define __nds32__v_scmple16(a, b) \\\n+  (__builtin_nds32_v_scmple16 ((a), (b)))\n+#define __nds32__ucmplt16(a, b) \\\n+  (__builtin_nds32_ucmplt16 ((a), (b)))\n+#define __nds32__v_ucmplt16(a, b) \\\n+  (__builtin_nds32_v_ucmplt16 ((a), (b)))\n+#define __nds32__ucmple16(a, b) \\\n+  (__builtin_nds32_ucmple16 ((a), (b)))\n+#define __nds32__v_ucmple16(a, b) \\\n+  (__builtin_nds32_v_ucmple16 ((a), (b)))\n+\n+#define __nds32__cmpeq8(a, b) \\\n+  (__builtin_nds32_cmpeq8 ((a), (b)))\n+#define __nds32__v_scmpeq8(a, b) \\\n+  (__builtin_nds32_v_scmpeq8 ((a), (b)))\n+#define __nds32__v_ucmpeq8(a, b) \\\n+  (__builtin_nds32_v_ucmpeq8 ((a), (b)))\n+#define __nds32__scmplt8(a, b) \\\n+  (__builtin_nds32_scmplt8 ((a), (b)))\n+#define __nds32__v_scmplt8(a, b) \\\n+  (__builtin_nds32_v_scmplt8 ((a), (b)))\n+#define __nds32__scmple8(a, b) \\\n+  (__builtin_nds32_scmple8 ((a), (b)))\n+#define __nds32__v_scmple8(a, b) \\\n+  (__builtin_nds32_v_scmple8 ((a), (b)))\n+#define __nds32__ucmplt8(a, b) \\\n+  (__builtin_nds32_ucmplt8 ((a), (b)))\n+#define __nds32__v_ucmplt8(a, b) \\\n+  (__builtin_nds32_v_ucmplt8 ((a), (b)))\n+#define __nds32__ucmple8(a, b) \\\n+  (__builtin_nds32_ucmple8 ((a), (b)))\n+#define __nds32__v_ucmple8(a, b) \\\n+  (__builtin_nds32_v_ucmple8 ((a), (b)))\n+\n+#define __nds32__smin16(a, b) \\\n+  (__builtin_nds32_smin16 ((a), (b)))\n+#define __nds32__v_smin16(a, b) \\\n+  (__builtin_nds32_v_smin16 ((a), (b)))\n+#define __nds32__umin16(a, b) \\\n+  (__builtin_nds32_umin16 ((a), (b)))\n+#define __nds32__v_umin16(a, b) \\\n+  (__builtin_nds32_v_umin16 ((a), (b)))\n+#define __nds32__smax16(a, b) \\\n+  (__builtin_nds32_smax16 ((a), (b)))\n+#define __nds32__v_smax16(a, b) \\\n+  (__builtin_nds32_v_smax16 ((a), (b)))\n+#define __nds32__umax16(a, b) \\\n+  (__builtin_nds32_umax16 ((a), (b)))\n+#define __nds32__v_umax16(a, b) \\\n+  (__builtin_nds32_v_umax16 ((a), (b)))\n+#define __nds32__sclip16(a, b) \\\n+  (__builtin_nds32_sclip16 ((a), (b)))\n+#define __nds32__v_sclip16(a, b) \\\n+  (__builtin_nds32_v_sclip16 ((a), (b)))\n+#define __nds32__uclip16(a, b) \\\n+  (__builtin_nds32_uclip16 ((a), (b)))\n+#define __nds32__v_uclip16(a, b) \\\n+  (__builtin_nds32_v_uclip16 ((a), (b)))\n+#define __nds32__khm16(a, b) \\\n+  (__builtin_nds32_khm16 ((a), (b)))\n+#define __nds32__v_khm16(a, b) \\\n+  (__builtin_nds32_v_khm16 ((a), (b)))\n+#define __nds32__khmx16(a, b) \\\n+  (__builtin_nds32_khmx16 ((a), (b)))\n+#define __nds32__v_khmx16(a, b) \\\n+  (__builtin_nds32_v_khmx16 ((a), (b)))\n+#define __nds32__kabs16(a) \\\n+  (__builtin_nds32_kabs16 ((a)))\n+#define __nds32__v_kabs16(a) \\\n+  (__builtin_nds32_v_kabs16 ((a)))\n+\n+#define __nds32__smin8(a, b) \\\n+  (__builtin_nds32_smin8 ((a), (b)))\n+#define __nds32__v_smin8(a, b) \\\n+  (__builtin_nds32_v_smin8 ((a), (b)))\n+#define __nds32__umin8(a, b) \\\n+  (__builtin_nds32_umin8 ((a), (b)))\n+#define __nds32__v_umin8(a, b) \\\n+  (__builtin_nds32_v_umin8 ((a), (b)))\n+#define __nds32__smax8(a, b) \\\n+  (__builtin_nds32_smax8 ((a), (b)))\n+#define __nds32__v_smax8(a, b) \\\n+  (__builtin_nds32_v_smax8 ((a), (b)))\n+#define __nds32__umax8(a, b) \\\n+  (__builtin_nds32_umax8 ((a), (b)))\n+#define __nds32__v_umax8(a, b) \\\n+  (__builtin_nds32_v_umax8 ((a), (b)))\n+#define __nds32__kabs8(a) \\\n+  (__builtin_nds32_kabs8 ((a)))\n+#define __nds32__v_kabs8(a) \\\n+  (__builtin_nds32_v_kabs8 ((a)))\n+\n+#define __nds32__sunpkd810(a) \\\n+  (__builtin_nds32_sunpkd810 ((a)))\n+#define __nds32__v_sunpkd810(a) \\\n+  (__builtin_nds32_v_sunpkd810 ((a)))\n+#define __nds32__sunpkd820(a) \\\n+  (__builtin_nds32_sunpkd820 ((a)))\n+#define __nds32__v_sunpkd820(a) \\\n+  (__builtin_nds32_v_sunpkd820 ((a)))\n+#define __nds32__sunpkd830(a) \\\n+  (__builtin_nds32_sunpkd830 ((a)))\n+#define __nds32__v_sunpkd830(a) \\\n+  (__builtin_nds32_v_sunpkd830 ((a)))\n+#define __nds32__sunpkd831(a) \\\n+  (__builtin_nds32_sunpkd831 ((a)))\n+#define __nds32__v_sunpkd831(a) \\\n+  (__builtin_nds32_v_sunpkd831 ((a)))\n+#define __nds32__zunpkd810(a) \\\n+  (__builtin_nds32_zunpkd810 ((a)))\n+#define __nds32__v_zunpkd810(a) \\\n+  (__builtin_nds32_v_zunpkd810 ((a)))\n+#define __nds32__zunpkd820(a) \\\n+  (__builtin_nds32_zunpkd820 ((a)))\n+#define __nds32__v_zunpkd820(a) \\\n+  (__builtin_nds32_v_zunpkd820 ((a)))\n+#define __nds32__zunpkd830(a) \\\n+  (__builtin_nds32_zunpkd830 ((a)))\n+#define __nds32__v_zunpkd830(a) \\\n+  (__builtin_nds32_v_zunpkd830 ((a)))\n+#define __nds32__zunpkd831(a) \\\n+  (__builtin_nds32_zunpkd831 ((a)))\n+#define __nds32__v_zunpkd831(a) \\\n+  (__builtin_nds32_v_zunpkd831 ((a)))\n+\n+#define __nds32__raddw(a, b) \\\n+  (__builtin_nds32_raddw ((a), (b)))\n+#define __nds32__uraddw(a, b) \\\n+  (__builtin_nds32_uraddw ((a), (b)))\n+#define __nds32__rsubw(a, b) \\\n+  (__builtin_nds32_rsubw ((a), (b)))\n+#define __nds32__ursubw(a, b) \\\n+  (__builtin_nds32_ursubw ((a), (b)))\n+\n+#define __nds32__sra_u(a, b) \\\n+  (__builtin_nds32_sra_u ((a), (b)))\n+#define __nds32__ksll(a, b) \\\n+  (__builtin_nds32_ksll ((a), (b)))\n+#define __nds32__pkbb16(a, b) \\\n+  (__builtin_nds32_pkbb16 ((a), (b)))\n+#define __nds32__v_pkbb16(a, b) \\\n+  (__builtin_nds32_v_pkbb16 ((a), (b)))\n+#define __nds32__pkbt16(a, b) \\\n+  (__builtin_nds32_pkbt16 ((a), (b)))\n+#define __nds32__v_pkbt16(a, b) \\\n+  (__builtin_nds32_v_pkbt16 ((a), (b)))\n+#define __nds32__pktb16(a, b) \\\n+  (__builtin_nds32_pktb16 ((a), (b)))\n+#define __nds32__v_pktb16(a, b) \\\n+  (__builtin_nds32_v_pktb16 ((a), (b)))\n+#define __nds32__pktt16(a, b) \\\n+  (__builtin_nds32_pktt16 ((a), (b)))\n+#define __nds32__v_pktt16(a, b) \\\n+  (__builtin_nds32_v_pktt16 ((a), (b)))\n+\n+#define __nds32__smmul(a, b) \\\n+  (__builtin_nds32_smmul ((a), (b)))\n+#define __nds32__smmul_u(a, b) \\\n+  (__builtin_nds32_smmul_u ((a), (b)))\n+#define __nds32__kmmac(r, a, b) \\\n+  (__builtin_nds32_kmmac ((r), (a), (b)))\n+#define __nds32__kmmac_u(r, a, b) \\\n+  (__builtin_nds32_kmmac_u ((r), (a), (b)))\n+#define __nds32__kmmsb(r, a, b) \\\n+  (__builtin_nds32_kmmsb ((r), (a), (b)))\n+#define __nds32__kmmsb_u(r, a, b) \\\n+  (__builtin_nds32_kmmsb_u ((r), (a), (b)))\n+#define __nds32__kwmmul(a, b) \\\n+  (__builtin_nds32_kwmmul ((a), (b)))\n+#define __nds32__kwmmul_u(a, b) \\\n+  (__builtin_nds32_kwmmul_u ((a), (b)))\n+\n+#define __nds32__smmwb(a, b) \\\n+  (__builtin_nds32_smmwb ((a), (b)))\n+#define __nds32__v_smmwb(a, b) \\\n+  (__builtin_nds32_v_smmwb ((a), (b)))\n+#define __nds32__smmwb_u(a, b) \\\n+  (__builtin_nds32_smmwb_u ((a), (b)))\n+#define __nds32__v_smmwb_u(a, b) \\\n+  (__builtin_nds32_v_smmwb_u ((a), (b)))\n+#define __nds32__smmwt(a, b) \\\n+  (__builtin_nds32_smmwt ((a), (b)))\n+#define __nds32__v_smmwt(a, b) \\\n+  (__builtin_nds32_v_smmwt ((a), (b)))\n+#define __nds32__smmwt_u(a, b) \\\n+  (__builtin_nds32_smmwt_u ((a), (b)))\n+#define __nds32__v_smmwt_u(a, b) \\\n+  (__builtin_nds32_v_smmwt_u ((a), (b)))\n+#define __nds32__kmmawb(r, a, b) \\\n+  (__builtin_nds32_kmmawb ((r), (a), (b)))\n+#define __nds32__v_kmmawb(r, a, b) \\\n+  (__builtin_nds32_v_kmmawb ((r), (a), (b)))\n+#define __nds32__kmmawb_u(r, a, b) \\\n+  (__builtin_nds32_kmmawb_u ((r), (a), (b)))\n+#define __nds32__v_kmmawb_u(r, a, b) \\\n+  (__builtin_nds32_v_kmmawb_u ((r), (a), (b)))\n+#define __nds32__kmmawt(r, a, b) \\\n+  (__builtin_nds32_kmmawt ((r), (a), (b)))\n+#define __nds32__v_kmmawt(r, a, b) \\\n+  (__builtin_nds32_v_kmmawt ((r), (a), (b)))\n+#define __nds32__kmmawt_u(r, a, b) \\\n+  (__builtin_nds32_kmmawt_u ((r), (a), (b)))\n+#define __nds32__v_kmmawt_u(r, a, b) \\\n+  (__builtin_nds32_v_kmmawt_u ((r), (a), (b)))\n+\n+#define __nds32__smbb(a, b) \\\n+  (__builtin_nds32_smbb ((a), (b)))\n+#define __nds32__v_smbb(a, b) \\\n+  (__builtin_nds32_v_smbb ((a), (b)))\n+#define __nds32__smbt(a, b) \\\n+  (__builtin_nds32_smbt ((a), (b)))\n+#define __nds32__v_smbt(a, b) \\\n+  (__builtin_nds32_v_smbt ((a), (b)))\n+#define __nds32__smtt(a, b) \\\n+  (__builtin_nds32_smtt ((a), (b)))\n+#define __nds32__v_smtt(a, b) \\\n+  (__builtin_nds32_v_smtt ((a), (b)))\n+#define __nds32__kmda(a, b) \\\n+  (__builtin_nds32_kmda ((a), (b)))\n+#define __nds32__v_kmda(a, b) \\\n+  (__builtin_nds32_v_kmda ((a), (b)))\n+#define __nds32__kmxda(a, b) \\\n+  (__builtin_nds32_kmxda ((a), (b)))\n+#define __nds32__v_kmxda(a, b) \\\n+  (__builtin_nds32_v_kmxda ((a), (b)))\n+#define __nds32__smds(a, b) \\\n+  (__builtin_nds32_smds ((a), (b)))\n+#define __nds32__v_smds(a, b) \\\n+  (__builtin_nds32_v_smds ((a), (b)))\n+#define __nds32__smdrs(a, b) \\\n+  (__builtin_nds32_smdrs ((a), (b)))\n+#define __nds32__v_smdrs(a, b) \\\n+  (__builtin_nds32_v_smdrs ((a), (b)))\n+#define __nds32__smxds(a, b) \\\n+  (__builtin_nds32_smxds ((a), (b)))\n+#define __nds32__v_smxds(a, b) \\\n+  (__builtin_nds32_v_smxds ((a), (b)))\n+#define __nds32__kmabb(r, a, b) \\\n+  (__builtin_nds32_kmabb ((r), (a), (b)))\n+#define __nds32__v_kmabb(r, a, b) \\\n+  (__builtin_nds32_v_kmabb ((r), (a), (b)))\n+#define __nds32__kmabt(r, a, b) \\\n+  (__builtin_nds32_kmabt ((r), (a), (b)))\n+#define __nds32__v_kmabt(r, a, b) \\\n+  (__builtin_nds32_v_kmabt ((r), (a), (b)))\n+#define __nds32__kmatt(r, a, b) \\\n+  (__builtin_nds32_kmatt ((r), (a), (b)))\n+#define __nds32__v_kmatt(r, a, b) \\\n+  (__builtin_nds32_v_kmatt ((r), (a), (b)))\n+#define __nds32__kmada(r, a, b) \\\n+  (__builtin_nds32_kmada ((r), (a), (b)))\n+#define __nds32__v_kmada(r, a, b) \\\n+  (__builtin_nds32_v_kmada ((r), (a), (b)))\n+#define __nds32__kmaxda(r, a, b) \\\n+  (__builtin_nds32_kmaxda ((r), (a), (b)))\n+#define __nds32__v_kmaxda(r, a, b) \\\n+  (__builtin_nds32_v_kmaxda ((r), (a), (b)))\n+#define __nds32__kmads(r, a, b) \\\n+  (__builtin_nds32_kmads ((r), (a), (b)))\n+#define __nds32__v_kmads(r, a, b) \\\n+  (__builtin_nds32_v_kmads ((r), (a), (b)))\n+#define __nds32__kmadrs(r, a, b) \\\n+  (__builtin_nds32_kmadrs ((r), (a), (b)))\n+#define __nds32__v_kmadrs(r, a, b) \\\n+  (__builtin_nds32_v_kmadrs ((r), (a), (b)))\n+#define __nds32__kmaxds(r, a, b) \\\n+  (__builtin_nds32_kmaxds ((r), (a), (b)))\n+#define __nds32__v_kmaxds(r, a, b) \\\n+  (__builtin_nds32_v_kmaxds ((r), (a), (b)))\n+#define __nds32__kmsda(r, a, b) \\\n+  (__builtin_nds32_kmsda ((r), (a), (b)))\n+#define __nds32__v_kmsda(r, a, b) \\\n+  (__builtin_nds32_v_kmsda ((r), (a), (b)))\n+#define __nds32__kmsxda(r, a, b) \\\n+  (__builtin_nds32_kmsxda ((r), (a), (b)))\n+#define __nds32__v_kmsxda(r, a, b) \\\n+  (__builtin_nds32_v_kmsxda ((r), (a), (b)))\n+\n+#define __nds32__smal(a, b) \\\n+  (__builtin_nds32_smal ((a), (b)))\n+#define __nds32__v_smal(a, b) \\\n+  (__builtin_nds32_v_smal ((a), (b)))\n+\n+#define __nds32__bitrev(a, b) \\\n+  (__builtin_nds32_bitrev ((a), (b)))\n+#define __nds32__wext(a, b) \\\n+  (__builtin_nds32_wext ((a), (b)))\n+#define __nds32__bpick(r, a, b) \\\n+  (__builtin_nds32_bpick ((r), (a), (b)))\n+#define __nds32__insb(r, a, b) \\\n+  (__builtin_nds32_insb ((r), (a), (b)))\n+\n+#define __nds32__sadd64(a, b) \\\n+  (__builtin_nds32_sadd64 ((a), (b)))\n+#define __nds32__uadd64(a, b) \\\n+  (__builtin_nds32_uadd64 ((a), (b)))\n+#define __nds32__radd64(a, b) \\\n+  (__builtin_nds32_radd64 ((a), (b)))\n+#define __nds32__uradd64(a, b) \\\n+  (__builtin_nds32_uradd64 ((a), (b)))\n+#define __nds32__kadd64(a, b) \\\n+  (__builtin_nds32_kadd64 ((a), (b)))\n+#define __nds32__ukadd64(a, b) \\\n+  (__builtin_nds32_ukadd64 ((a), (b)))\n+#define __nds32__ssub64(a, b) \\\n+  (__builtin_nds32_ssub64 ((a), (b)))\n+#define __nds32__usub64(a, b) \\\n+  (__builtin_nds32_usub64 ((a), (b)))\n+#define __nds32__rsub64(a, b) \\\n+  (__builtin_nds32_rsub64 ((a), (b)))\n+#define __nds32__ursub64(a, b) \\\n+  (__builtin_nds32_ursub64 ((a), (b)))\n+#define __nds32__ksub64(a, b) \\\n+  (__builtin_nds32_ksub64 ((a), (b)))\n+#define __nds32__uksub64(a, b) \\\n+  (__builtin_nds32_uksub64 ((a), (b)))\n+\n+#define __nds32__smar64(r, a, b) \\\n+  (__builtin_nds32_smar64 ((r), (a), (b)))\n+#define __nds32__smsr64(r, a, b) \\\n+  (__builtin_nds32_smsr64 ((r), (a), (b)))\n+#define __nds32__umar64(r, a, b) \\\n+  (__builtin_nds32_umar64 ((r), (a), (b)))\n+#define __nds32__umsr64(r, a, b) \\\n+  (__builtin_nds32_umsr64 ((r), (a), (b)))\n+#define __nds32__kmar64(r, a, b) \\\n+  (__builtin_nds32_kmar64 ((r), (a), (b)))\n+#define __nds32__kmsr64(r, a, b) \\\n+  (__builtin_nds32_kmsr64 ((r), (a), (b)))\n+#define __nds32__ukmar64(r, a, b) \\\n+  (__builtin_nds32_ukmar64 ((r), (a), (b)))\n+#define __nds32__ukmsr64(r, a, b) \\\n+  (__builtin_nds32_ukmsr64 ((r), (a), (b)))\n+\n+#define __nds32__smalbb(r, a, b) \\\n+  (__builtin_nds32_smalbb ((r), (a), (b)))\n+#define __nds32__v_smalbb(r, a, b) \\\n+  (__builtin_nds32_v_smalbb ((r), (a), (b)))\n+#define __nds32__smalbt(r, a, b) \\\n+  (__builtin_nds32_smalbt ((r), (a), (b)))\n+#define __nds32__v_smalbt(r, a, b) \\\n+  (__builtin_nds32_v_smalbt ((r), (a), (b)))\n+#define __nds32__smaltt(r, a, b) \\\n+  (__builtin_nds32_smaltt ((r), (a), (b)))\n+#define __nds32__v_smaltt(r, a, b) \\\n+  (__builtin_nds32_v_smaltt ((r), (a), (b)))\n+#define __nds32__smalda(r, a, b) \\\n+  (__builtin_nds32_smalda ((r), (a), (b)))\n+#define __nds32__v_smalda(r, a, b) \\\n+  (__builtin_nds32_v_smalda ((r), (a), (b)))\n+#define __nds32__smalxda(r, a, b) \\\n+  (__builtin_nds32_smalxda ((r), (a), (b)))\n+#define __nds32__v_smalxda(r, a, b) \\\n+  (__builtin_nds32_v_smalxda ((r), (a), (b)))\n+#define __nds32__smalds(r, a, b) \\\n+  (__builtin_nds32_smalds ((r), (a), (b)))\n+#define __nds32__v_smalds(r, a, b) \\\n+  (__builtin_nds32_v_smalds ((r), (a), (b)))\n+#define __nds32__smaldrs(r, a, b) \\\n+  (__builtin_nds32_smaldrs ((r), (a), (b)))\n+#define __nds32__v_smaldrs(r, a, b) \\\n+  (__builtin_nds32_v_smaldrs ((r), (a), (b)))\n+#define __nds32__smalxds(r, a, b) \\\n+  (__builtin_nds32_smalxds ((r), (a), (b)))\n+#define __nds32__v_smalxds(r, a, b) \\\n+  (__builtin_nds32_v_smalxds ((r), (a), (b)))\n+#define __nds32__smslda(r, a, b) \\\n+  (__builtin_nds32_smslda ((r), (a), (b)))\n+#define __nds32__v_smslda(r, a, b) \\\n+  (__builtin_nds32_v_smslda ((r), (a), (b)))\n+#define __nds32__smslxda(r, a, b) \\\n+  (__builtin_nds32_smslxda ((r), (a), (b)))\n+#define __nds32__v_smslxda(r, a, b) \\\n+  (__builtin_nds32_v_smslxda ((r), (a), (b)))\n+\n+#define __nds32__smul16(a, b) \\\n+  (__builtin_nds32_smul16 ((a), (b)))\n+#define __nds32__v_smul16(a, b) \\\n+  (__builtin_nds32_v_smul16 ((a), (b)))\n+#define __nds32__smulx16(a, b) \\\n+  (__builtin_nds32_smulx16 ((a), (b)))\n+#define __nds32__v_smulx16(a, b) \\\n+  (__builtin_nds32_v_smulx16 ((a), (b)))\n+#define __nds32__umul16(a, b) \\\n+  (__builtin_nds32_umul16 ((a), (b)))\n+#define __nds32__v_umul16(a, b) \\\n+  (__builtin_nds32_v_umul16 ((a), (b)))\n+#define __nds32__umulx16(a, b) \\\n+  (__builtin_nds32_umulx16 ((a), (b)))\n+#define __nds32__v_umulx16(a, b) \\\n+  (__builtin_nds32_v_umulx16 ((a), (b)))\n+\n+#define __nds32__uclip32(a, imm) \\\n+  (__builtin_nds32_uclip32 ((a), (imm)))\n+#define __nds32__sclip32(a, imm) \\\n+  (__builtin_nds32_sclip32 ((a), (imm)))\n+#define __nds32__kabs(a) \\\n+  (__builtin_nds32_kabs ((a)))\n+\n #define __nds32__unaligned_feature() \\\n   (__builtin_nds32_unaligned_feature())\n #define __nds32__enable_unaligned() \\\n   (__builtin_nds32_enable_unaligned())\n #define __nds32__disable_unaligned() \\\n   (__builtin_nds32_disable_unaligned())\n+\n+#define __nds32__get_unaligned_u16x2(a) \\\n+  (__builtin_nds32_get_unaligned_u16x2 ((a)))\n+#define __nds32__get_unaligned_s16x2(a) \\\n+  (__builtin_nds32_get_unaligned_s16x2 ((a)))\n+#define __nds32__get_unaligned_u8x4(a) \\\n+  (__builtin_nds32_get_unaligned_u8x4 ((a)))\n+#define __nds32__get_unaligned_s8x4(a) \\\n+  (__builtin_nds32_get_unaligned_s8x4 ((a)))\n+\n+#define __nds32__put_unaligned_u16x2(a, data) \\\n+  (__builtin_nds32_put_unaligned_u16x2 ((a), (data)))\n+#define __nds32__put_unaligned_s16x2(a, data) \\\n+  (__builtin_nds32_put_unaligned_s16x2 ((a), (data)))\n+#define __nds32__put_unaligned_u8x4(a, data) \\\n+  (__builtin_nds32_put_unaligned_u8x4 ((a), (data)))\n+#define __nds32__put_unaligned_s8x4(a, data) \\\n+  (__builtin_nds32_put_unaligned_s8x4 ((a), (data)))\n+\n+#define NDS32ATTR_SIGNATURE              __attribute__((signature))\n+\n #endif /* nds32_intrinsic.h */"}, {"sha": "e5f7ba4a3da62cdc4dc5f57fbf23d7d334cce627", "filename": "gcc/config/nds32/predicates.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32ef413a661d53de9a90d29b5253bf98e6af82/gcc%2Fconfig%2Fnds32%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpredicates.md?ref=7c32ef413a661d53de9a90d29b5253bf98e6af82", "patch": "@@ -56,14 +56,51 @@\n        (and (match_operand 0 \"const_int_operand\")\n \t    (match_test \"satisfies_constraint_Is11 (op)\"))))\n \n+(define_predicate \"nds32_imm_0_1_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (ior (match_test \"satisfies_constraint_Iv00 (op)\")\n+\t    (match_test \"satisfies_constraint_Iv01 (op)\"))))\n+\n+(define_predicate \"nds32_imm_1_2_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (ior (match_test \"satisfies_constraint_Iv01 (op)\")\n+\t    (match_test \"satisfies_constraint_Iv02 (op)\"))))\n+\n+(define_predicate \"nds32_imm_1_2_4_8_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (ior (ior (match_test \"satisfies_constraint_Iv01 (op)\")\n+\t\t (match_test \"satisfies_constraint_Iv02 (op)\"))\n+\t    (ior (match_test \"satisfies_constraint_Iv04 (op)\")\n+\t\t (match_test \"satisfies_constraint_Iv08 (op)\")))))\n+\n+(define_predicate \"nds32_imm2u_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"satisfies_constraint_Iu02 (op)\")))\n+\n+(define_predicate \"nds32_imm4u_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"satisfies_constraint_Iu04 (op)\")))\n+\n (define_predicate \"nds32_imm5u_operand\"\n   (and (match_operand 0 \"const_int_operand\")\n        (match_test \"satisfies_constraint_Iu05 (op)\")))\n \n+(define_predicate \"nds32_imm6u_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"satisfies_constraint_Iu06 (op)\")))\n+\n+(define_predicate \"nds32_rimm4u_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"nds32_imm4u_operand\")))\n+\n (define_predicate \"nds32_rimm5u_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"nds32_imm5u_operand\")))\n \n+(define_predicate \"nds32_rimm6u_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"nds32_imm6u_operand\")))\n+\n (define_predicate \"nds32_move_operand\"\n   (and (match_operand 0 \"general_operand\")\n        (not (match_code \"high,const,symbol_ref,label_ref\")))\n@@ -78,6 +115,20 @@\n   return true;\n })\n \n+(define_predicate \"nds32_vmove_operand\"\n+  (and (match_operand 0 \"general_operand\")\n+       (not (match_code \"high,const,symbol_ref,label_ref\")))\n+{\n+  /* If the constant op does NOT satisfy Is20 nor Ihig,\n+     we can not perform move behavior by a single instruction.  */\n+  if (GET_CODE (op) == CONST_VECTOR\n+      && !satisfies_constraint_CVs2 (op)\n+      && !satisfies_constraint_CVhi (op))\n+    return false;\n+\n+  return true;\n+})\n+\n (define_predicate \"nds32_and_operand\"\n   (match_operand 0 \"nds32_reg_constant_operand\")\n {\n@@ -127,6 +178,15 @@\n   (ior (match_operand 0 \"nds32_symbolic_operand\")\n        (match_operand 0 \"nds32_general_register_operand\")))\n \n+(define_predicate \"nds32_insv_operand\"\n+  (match_code \"const_int\")\n+{\n+  return INTVAL (op) == 0\n+\t || INTVAL (op) == 8\n+\t || INTVAL (op) == 16\n+\t || INTVAL (op) == 24;\n+})\n+\n (define_predicate \"nds32_lmw_smw_base_operand\"\n   (and (match_code \"mem\")\n        (match_test \"nds32_valid_smw_lwm_base_p (op)\")))"}]}