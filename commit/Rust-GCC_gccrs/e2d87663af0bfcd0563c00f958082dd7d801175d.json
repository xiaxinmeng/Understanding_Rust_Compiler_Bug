{"sha": "e2d87663af0bfcd0563c00f958082dd7d801175d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkODc2NjNhZjBiZmNkMDU2M2MwMGY5NTgwODJkZDdkODAxMTc1ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-05T08:54:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:34:55Z"}, "message": "[Ada] Small cleanup throughout Exp_Ch9\n\ngcc/ada/\n\n\t* exp_ch9.adb (Is_Potentially_Large_Family): Add documentation.\n\t(Actual_Index_Expression): Use Entry_Index_Type.\n\t(Build_Entry_Count_Expression): Likewise.\n\t(Build_Find_Body_Index): Likewise.\n\t(Collect_Entry_Families): Likewise. Use directly the bounds of\n\tthe index type to find out whether the family is large.\n\t(Entry_Index_Expression): Likewise.", "tree": {"sha": "6f696530a64716c3ea72d86cae9bb53a03f12aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f696530a64716c3ea72d86cae9bb53a03f12aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2d87663af0bfcd0563c00f958082dd7d801175d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d87663af0bfcd0563c00f958082dd7d801175d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2d87663af0bfcd0563c00f958082dd7d801175d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d87663af0bfcd0563c00f958082dd7d801175d/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eddd728f5f832869596529490f5db019ee899d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eddd728f5f832869596529490f5db019ee899d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eddd728f5f832869596529490f5db019ee899d53"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "945e1098b3d8c2643669769afcfcc2f1e7a50935", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d87663af0bfcd0563c00f958082dd7d801175d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d87663af0bfcd0563c00f958082dd7d801175d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e2d87663af0bfcd0563c00f958082dd7d801175d", "patch": "@@ -434,6 +434,8 @@ package body Exp_Ch9 is\n       Conctyp    : Entity_Id;\n       Lo         : Node_Id;\n       Hi         : Node_Id) return Boolean;\n+   --  Determine whether an entry family is potentially large because one of\n+   --  its bounds denotes a discrminant.\n \n    function Is_Private_Primitive_Subprogram (Id : Entity_Id) return Boolean;\n    --  Determine whether Id is a function or a procedure and is marked as a\n@@ -585,7 +587,7 @@ package body Exp_Ch9 is\n       --  structure.\n \n       if Present (Index) then\n-         S := Etype (Discrete_Subtype_Definition (Declaration_Node (Ent)));\n+         S := Entry_Index_Type (Ent);\n \n          Expr :=\n            Make_Op_Add (Sloc,\n@@ -612,8 +614,7 @@ package body Exp_Ch9 is\n             Set_Intval (Num, Intval (Num) + 1);\n \n          elsif Ekind (Prev) = E_Entry_Family then\n-            S :=\n-              Etype (Discrete_Subtype_Definition (Declaration_Node (Prev)));\n+            S := Entry_Index_Type (Prev);\n \n             --  The need for the following full view retrieval stems from this\n             --  complex case of nested generics and tasking:\n@@ -1702,7 +1703,7 @@ package body Exp_Ch9 is\n                Next (Comp);\n             end loop;\n \n-            Typ := Etype (Discrete_Subtype_Definition (Parent (Ent)));\n+            Typ := Entry_Index_Type (Ent);\n             Hi := Type_High_Bound (Typ);\n             Lo := Type_Low_Bound  (Typ);\n             Large := Is_Potentially_Large_Family\n@@ -2761,7 +2762,7 @@ package body Exp_Ch9 is\n                Add_If_Clause (Make_Integer_Literal (Loc, 1));\n \n             elsif Ekind (Ent) = E_Entry_Family then\n-               E_Typ := Etype (Discrete_Subtype_Definition (Parent (Ent)));\n+               E_Typ := Entry_Index_Type (Ent);\n                Hi := Convert_Discriminant_Ref (Type_High_Bound (E_Typ));\n                Lo := Convert_Discriminant_Ref (Type_Low_Bound  (E_Typ));\n                Add_If_Clause (Family_Size (Loc, Hi, Lo, Typ, False));\n@@ -5189,23 +5190,21 @@ package body Exp_Ch9 is\n             Efam_Type := Make_Temporary (Loc, 'F');\n \n             declare\n-               Bas : Entity_Id :=\n-                       Base_Type\n-                         (Etype (Discrete_Subtype_Definition (Parent (Efam))));\n-\n-               Bas_Decl : Node_Id := Empty;\n-               Lo, Hi   : Node_Id;\n+               Eityp : constant Entity_Id := Entry_Index_Type (Efam);\n+               Lo    : constant Node_Id   := Type_Low_Bound  (Eityp);\n+               Hi    : constant Node_Id   := Type_High_Bound (Eityp);\n+               Bdecl : Node_Id;\n+               Bityp : Entity_Id;\n \n             begin\n-               Get_Index_Bounds\n-                 (Discrete_Subtype_Definition (Parent (Efam)), Lo, Hi);\n+               Bityp := Base_Type (Eityp);\n \n-               if Is_Potentially_Large_Family (Bas, Conctyp, Lo, Hi) then\n-                  Bas := Make_Temporary (Loc, 'B');\n+               if Is_Potentially_Large_Family (Bityp, Conctyp, Lo, Hi) then\n+                  Bityp := Make_Temporary (Loc, 'B');\n \n-                  Bas_Decl :=\n+                  Bdecl :=\n                     Make_Subtype_Declaration (Loc,\n-                       Defining_Identifier => Bas,\n+                       Defining_Identifier => Bityp,\n                        Subtype_Indication  =>\n                          Make_Subtype_Indication (Loc,\n                            Subtype_Mark =>\n@@ -5218,9 +5217,9 @@ package body Exp_Ch9 is\n                                  Make_Integer_Literal\n                                    (Loc, Entry_Family_Bound - 1)))));\n \n-                  Insert_After (Current_Node, Bas_Decl);\n-                  Current_Node := Bas_Decl;\n-                  Analyze (Bas_Decl);\n+                  Insert_After (Current_Node, Bdecl);\n+                  Current_Node := Bdecl;\n+                  Analyze (Bdecl);\n                end if;\n \n                Efam_Decl :=\n@@ -5229,7 +5228,7 @@ package body Exp_Ch9 is\n                    Type_Definition =>\n                      Make_Unconstrained_Array_Definition (Loc,\n                        Subtype_Marks =>\n-                         (New_List (New_Occurrence_Of (Bas, Loc))),\n+                         (New_List (New_Occurrence_Of (Bityp, Loc))),\n \n                     Component_Definition =>\n                       Make_Component_Definition (Loc,\n@@ -5258,10 +5257,8 @@ package body Exp_Ch9 is\n                         Constraint   =>\n                           Make_Index_Or_Discriminant_Constraint (Loc,\n                             Constraints => New_List (\n-                              New_Occurrence_Of\n-                                (Etype (Discrete_Subtype_Definition\n-                                          (Parent (Efam))), Loc)))))));\n-\n+                              New_Occurrence_Of (Entry_Index_Type (Efam),\n+                                                 Loc)))))));\n          end if;\n \n          Next_Entity (Efam);\n@@ -5625,7 +5622,7 @@ package body Exp_Ch9 is\n       --  using the index subtype which may mention a discriminant.\n \n       if Present (Index) then\n-         S := Etype (Discrete_Subtype_Definition (Declaration_Node (Ent)));\n+         S := Entry_Index_Type (Ent);\n \n          Expr :=\n            Make_Op_Add (Sloc,\n@@ -5655,7 +5652,7 @@ package body Exp_Ch9 is\n             Set_Intval (Num, Intval (Num) + 1);\n \n          elsif Ekind (Prev) = E_Entry_Family then\n-            S := Etype (Discrete_Subtype_Definition (Declaration_Node (Prev)));\n+            S := Entry_Index_Type (Prev);\n             Lo := Type_Low_Bound  (S);\n             Hi := Type_High_Bound (S);\n "}]}