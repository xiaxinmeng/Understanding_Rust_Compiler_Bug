{"sha": "eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2MzdlNzYwNDdhM2IxZDk3ODdiMWM3NWRlNWRhM2RiMmZlOGFlYQ==", "commit": {"author": {"name": "Delia Burduv", "email": "delia.burduv@arm.com", "date": "2020-03-06T10:38:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-06T10:42:48Z"}, "message": "ACLE intrinsics: BFloat16 load intrinsics for AArch32\n\n2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n\n\t* config/arm/arm_neon.h (vld2_bf16): New.\n\t(vld2q_bf16): New.\n\t(vld3_bf16): New.\n\t(vld3q_bf16): New.\n\t(vld4_bf16): New.\n\t(vld4q_bf16): New.\n\t(vld2_dup_bf16): New.\n\t(vld2q_dup_bf16): New.\n\t(vld3_dup_bf16): New.\n\t(vld3q_dup_bf16): New.\n\t(vld4_dup_bf16): New.\n\t(vld4q_dup_bf16): New.\n\t* config/arm/arm_neon_builtins.def\n\t(vld2): Changed to VAR13 and added v4bf, v8bf\n\t(vld2_dup): Changed to VAR8 and added v4bf, v8bf\n\t(vld3): Changed to VAR13 and added v4bf, v8bf\n\t(vld3_dup): Changed to VAR8 and added v4bf, v8bf\n\t(vld4): Changed to VAR13 and added v4bf, v8bf\n\t(vld4_dup): Changed to VAR8 and added v4bf, v8bf\n\t* config/arm/iterators.md (VDXBF2): New iterator.\n\t*config/arm/neon.md (neon_vld2): Use new iterators.\n\t(neon_vld2_dup<mode): Use new iterators.\n\t(neon_vld3<mode>): Likewise.\n\t(neon_vld3qa<mode>): Likewise.\n\t(neon_vld3qb<mode>): Likewise.\n\t(neon_vld3_dup<mode>): Likewise.\n\t(neon_vld4<mode>): Likewise.\n\t(neon_vld4qa<mode>): Likewise.\n\t(neon_vld4qb<mode>): Likewise.\n\t(neon_vld4_dup<mode>): Likewise.\n\t(neon_vld2_dupv8bf): New.\n\t(neon_vld3_dupv8bf): Likewise.\n\t(neon_vld4_dupv8bf): Likewise.\n\n\t* gcc.target/arm/simd/bf16_vldn_1.c: New test.", "tree": {"sha": "7adf506603cb8c1607979087b7a9b7e6a776d19f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7adf506603cb8c1607979087b7a9b7e6a776d19f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/comments", "author": null, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff229375721d1763a18ec76403aa1215b2932fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff229375721d1763a18ec76403aa1215b2932fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff229375721d1763a18ec76403aa1215b2932fb3"}], "stats": {"total": 409, "additions": 387, "deletions": 22}, "files": [{"sha": "82534420f4126d3cc1e8f406a33992ceb6e85ec2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -1,3 +1,39 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* config/arm/arm_neon.h (vld2_bf16): New.\n+\t(vld2q_bf16): New.\n+\t(vld3_bf16): New.\n+\t(vld3q_bf16): New.\n+\t(vld4_bf16): New.\n+\t(vld4q_bf16): New.\n+\t(vld2_dup_bf16): New.\n+\t(vld2q_dup_bf16): New.\n+\t(vld3_dup_bf16): New.\n+\t(vld3q_dup_bf16): New.\n+\t(vld4_dup_bf16): New.\n+\t(vld4q_dup_bf16): New.\n+\t* config/arm/arm_neon_builtins.def\n+\t(vld2): Changed to VAR13 and added v4bf, v8bf\n+\t(vld2_dup): Changed to VAR8 and added v4bf, v8bf\n+\t(vld3): Changed to VAR13 and added v4bf, v8bf\n+\t(vld3_dup): Changed to VAR8 and added v4bf, v8bf\n+\t(vld4): Changed to VAR13 and added v4bf, v8bf\n+\t(vld4_dup): Changed to VAR8 and added v4bf, v8bf\n+\t* config/arm/iterators.md (VDXBF2): New iterator.\n+\t*config/arm/neon.md (neon_vld2): Use new iterators.\n+\t(neon_vld2_dup<mode): Use new iterators.\n+\t(neon_vld3<mode>): Likewise.\n+\t(neon_vld3qa<mode>): Likewise.\n+\t(neon_vld3qb<mode>): Likewise.\n+\t(neon_vld3_dup<mode>): Likewise.\n+\t(neon_vld4<mode>): Likewise.\n+\t(neon_vld4qa<mode>): Likewise.\n+\t(neon_vld4qb<mode>): Likewise.\n+\t(neon_vld4_dup<mode>): Likewise.\n+\t(neon_vld2_dupv8bf): New.\n+\t(neon_vld3_dupv8bf): Likewise.\n+\t(neon_vld4_dupv8bf): Likewise.\n+\n 2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n \n \t* config/arm/arm_neon.h (bfloat16x4x2_t): New typedef."}, {"sha": "f5ccf185038e4982e0200af4f5e9967a4fbb1304", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -19557,6 +19557,114 @@ vst4q_bf16 (bfloat16_t * __ptr, bfloat16x8x4_t __val)\n   return __builtin_neon_vst4v8bf (__ptr, __bu.__o);\n }\n \n+__extension__ extern __inline bfloat16x4x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld2_bf16 (bfloat16_t const * __ptr)\n+{\n+  union { bfloat16x4x2_t __i; __builtin_neon_ti __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2v4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld2q_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2v8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x4x3_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld3_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x4x3_t __i; __builtin_neon_ei __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3v4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x3_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld3q_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x3_t __i; __builtin_neon_ci __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3v8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x4x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld4_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x4x4_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4v4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld4q_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4v8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x4x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld2_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x4x2_t __i; __builtin_neon_ti __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2_dupv4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld2q_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2_dupv8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x4x3_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld3_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x4x3_t __i; __builtin_neon_ei __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3_dupv4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x3_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld3q_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x3_t __i; __builtin_neon_ci __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3_dupv8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x4x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld4_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x4x4_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4_dupv4bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline bfloat16x8x4_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vld4q_dup_bf16 (const bfloat16_t * __ptr)\n+{\n+  union { bfloat16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4_dupv8bf ((const __builtin_neon_hi *) __ptr);\n+  return __rv.__i;\n+}\n+\n #pragma GCC pop_options\n \n #ifdef __cplusplus"}, {"sha": "34c1945c0a1109d721517fee4cd550e65a30889f", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -320,29 +320,29 @@ VAR12 (STORE1, vst1,\n \tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n VAR12 (STORE1LANE, vst1_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n-VAR11 (LOAD1, vld2,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (LOAD1, vld2,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v4bf, v8bf)\n VAR9 (LOAD1LANE, vld2_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n-VAR6 (LOAD1, vld2_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR8 (LOAD1, vld2_dup, v8qi, v4hi, v4hf, v2si, v2sf, di, v4bf, v8bf)\n VAR13 (STORE1, vst2,\n \tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst2_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n-VAR11 (LOAD1, vld3,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (LOAD1, vld3,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v4bf, v8bf)\n VAR9 (LOAD1LANE, vld3_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n-VAR6 (LOAD1, vld3_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR8 (LOAD1, vld3_dup, v8qi, v4hi, v4hf, v2si, v2sf, di, v4bf, v8bf)\n VAR13 (STORE1, vst3,\n \tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst3_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n-VAR11 (LOAD1, vld4,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (LOAD1, vld4,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v4bf, v8bf)\n VAR9 (LOAD1LANE, vld4_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n-VAR6 (LOAD1, vld4_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR8 (LOAD1, vld4_dup, v8qi, v4hi, v4hf, v2si, v2sf, di, v4bf, v8bf)\n VAR13 (STORE1, vst4,\n \tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst4_lane,"}, {"sha": "244085286cb2b0f6f70488c969e3c49772e9d24e", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -87,6 +87,9 @@\n ;; Double-width vector modes plus 64-bit elements, including V4BF.\n (define_mode_iterator VDXBF [V8QI V4HI V4HF (V4BF \"TARGET_BF16_SIMD\") V2SI V2SF DI])\n \n+;; Double-width vector modes plus 64-bit elements, V4BF and V8BF.\n+(define_mode_iterator VDXBF2 [V8QI V4HI V4HF V2SI V2SF DI (V4BF \"TARGET_BF16_SIMD\") (V8BF (\"TARGET_BF16_SIMD\"))])\n+\n ;; Double-width vector modes plus 64-bit elements,\n ;; with V4BFmode added, suitable for moves.\n (define_mode_iterator VDXMOV [V8QI V4HI V4HF V4BF V2SI V2SF DI])"}, {"sha": "ead3e28da77af6e6df5ab94f091bffd61fcc2dbe", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 75, "deletions": 13, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -5428,7 +5428,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld2<mode>\"\n   [(set (match_operand:TI 0 \"s_register_operand\" \"=w\")\n         (unspec:TI [(match_operand:TI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2))]\n   \"TARGET_NEON\"\n {\n@@ -5453,7 +5453,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld2<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n         (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2))]\n   \"TARGET_NEON\"\n   \"vld2.<V_sz_elem>\\t%h0, %A1\"\n@@ -5516,7 +5516,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld2_dup<mode>\"\n   [(set (match_operand:TI 0 \"s_register_operand\" \"=w\")\n         (unspec:TI [(match_operand:<V_two_elem> 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2_DUP))]\n   \"TARGET_NEON\"\n {\n@@ -5531,6 +5531,27 @@ if (BYTES_BIG_ENDIAN)\n                     (const_string \"neon_load1_1reg<q>\")))]\n )\n \n+(define_insn \"neon_vld2_dupv8bf\"\n+  [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n+        (unspec:OI [(match_operand:V2BF 1 \"neon_struct_operand\" \"Um\")\n+                    (unspec:V8BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_VLD2_DUP))]\n+  \"TARGET_BF16_SIMD\"\n+  {\n+    rtx ops[5];\n+    int tabbase = REGNO (operands[0]);\n+\n+    ops[4] = operands[1];\n+    ops[0] = gen_rtx_REG (V4BFmode, tabbase);\n+    ops[1] = gen_rtx_REG (V4BFmode, tabbase + 2);\n+    ops[2] = gen_rtx_REG (V4BFmode, tabbase + 4);\n+    ops[3] = gen_rtx_REG (V4BFmode, tabbase + 6);\n+    output_asm_insn (\"vld2.16\\t{%P0, %P1, %P2, %P3}, %A4\", ops);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"neon_load2_all_lanes_q\")]\n+)\n+\n (define_expand \"vec_store_lanesti<mode>\"\n   [(set (match_operand:TI 0 \"neon_struct_operand\")\n \t(unspec:TI [(match_operand:TI 1 \"s_register_operand\")\n@@ -5637,7 +5658,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld3<mode>\"\n   [(set (match_operand:EI 0 \"s_register_operand\" \"=w\")\n         (unspec:EI [(match_operand:EI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3))]\n   \"TARGET_NEON\"\n {\n@@ -5665,7 +5686,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vld3<mode>\"\n   [(match_operand:CI 0 \"s_register_operand\")\n    (match_operand:CI 1 \"neon_struct_operand\")\n-   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -5680,7 +5701,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld3qa<mode>\"\n   [(set (match_operand:CI 0 \"s_register_operand\" \"=w\")\n         (unspec:CI [(match_operand:EI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3A))]\n   \"TARGET_NEON\"\n {\n@@ -5700,7 +5721,7 @@ if (BYTES_BIG_ENDIAN)\n   [(set (match_operand:CI 0 \"s_register_operand\" \"=w\")\n         (unspec:CI [(match_operand:EI 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:CI 2 \"s_register_operand\" \"0\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3B))]\n   \"TARGET_NEON\"\n {\n@@ -5777,7 +5798,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld3_dup<mode>\"\n   [(set (match_operand:EI 0 \"s_register_operand\" \"=w\")\n         (unspec:EI [(match_operand:<V_three_elem> 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3_DUP))]\n   \"TARGET_NEON\"\n {\n@@ -5800,6 +5821,26 @@ if (BYTES_BIG_ENDIAN)\n                     (const_string \"neon_load3_all_lanes<q>\")\n                     (const_string \"neon_load1_1reg<q>\")))])\n \n+(define_insn \"neon_vld3_dupv8bf\"\n+  [(set (match_operand:CI 0 \"s_register_operand\" \"=w\")\n+        (unspec:CI [(match_operand:V2BF 1 \"neon_struct_operand\" \"Um\")\n+                    (unspec:V8BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_VLD2_DUP))]\n+  \"TARGET_BF16_SIMD\"\n+  {\n+    rtx ops[4];\n+    int tabbase = REGNO (operands[0]);\n+\n+    ops[3] = operands[1];\n+    ops[0] = gen_rtx_REG (V4BFmode, tabbase);\n+    ops[1] = gen_rtx_REG (V4BFmode, tabbase + 2);\n+    ops[2] = gen_rtx_REG (V4BFmode, tabbase + 4);\n+    output_asm_insn (\"vld3.16\\t{%P0[], %P1[], %P2[]}, %A3\", ops);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"neon_load3_all_lanes_q\")]\n+)\n+\n (define_expand \"vec_store_lanesei<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\")\n \t(unspec:EI [(match_operand:EI 1 \"s_register_operand\")\n@@ -5955,7 +5996,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld4<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n         (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4))]\n   \"TARGET_NEON\"\n {\n@@ -5983,7 +6024,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vld4<mode>\"\n   [(match_operand:XI 0 \"s_register_operand\")\n    (match_operand:XI 1 \"neon_struct_operand\")\n-   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -5998,7 +6039,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld4qa<mode>\"\n   [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n         (unspec:XI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4A))]\n   \"TARGET_NEON\"\n {\n@@ -6019,7 +6060,7 @@ if (BYTES_BIG_ENDIAN)\n   [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n         (unspec:XI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:XI 2 \"s_register_operand\" \"0\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4B))]\n   \"TARGET_NEON\"\n {\n@@ -6099,7 +6140,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld4_dup<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n         (unspec:OI [(match_operand:<V_four_elem> 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4_DUP))]\n   \"TARGET_NEON\"\n {\n@@ -6125,6 +6166,27 @@ if (BYTES_BIG_ENDIAN)\n                     (const_string \"neon_load1_1reg<q>\")))]\n )\n \n+(define_insn \"neon_vld4_dupv8bf\"\n+  [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n+        (unspec:XI [(match_operand:V2BF 1 \"neon_struct_operand\" \"Um\")\n+                    (unspec:V8BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_VLD2_DUP))]\n+  \"TARGET_BF16_SIMD\"\n+  {\n+    rtx ops[5];\n+    int tabbase = REGNO (operands[0]);\n+\n+    ops[4] = operands[1];\n+    ops[0] = gen_rtx_REG (V4BFmode, tabbase);\n+    ops[1] = gen_rtx_REG (V4BFmode, tabbase + 2);\n+    ops[2] = gen_rtx_REG (V4BFmode, tabbase + 4);\n+    ops[3] = gen_rtx_REG (V4BFmode, tabbase + 6);\n+    output_asm_insn (\"vld4.16\\t{%P0[], %P1[], %P2[], %P3[]}, %A4\", ops);\n+    return \"\";\n+  }\n+  [(set_attr \"type\" \"neon_load4_all_lanes_q\")]\n+)\n+\n (define_expand \"vec_store_lanesoi<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\")"}, {"sha": "13da5a8581dbe2b35183d80d49305b9826b09264", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -1,3 +1,7 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* gcc.target/arm/simd/bf16_vldn_1.c: New test.\n+\n 2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n \n \t* gcc.target/arm/simd/bf16_vstn_1.c: New test."}, {"sha": "222e7af945383bd93b6b280b516a56e684f1d651", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_vldn_1.c", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vldn_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb637e76047a3b1d9787b1c75de5da3db2fe8aea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vldn_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vldn_1.c?ref=eb637e76047a3b1d9787b1c75de5da3db2fe8aea", "patch": "@@ -0,0 +1,152 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps -O2 -mfloat-abi=hard\" }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_neon.h\"\n+\n+\n+/*\n+**test_vld2_bf16:\n+**\t...\n+**\tvld2.16\t{d0-d1}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x2_t\n+test_vld2_bf16 (bfloat16_t * ptr)\n+{\n+  return vld2_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld2q_bf16:\n+**\t...\n+**\tvld2.16\t{d0-d3}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x2_t\n+test_vld2q_bf16 (bfloat16_t * ptr)\n+{\n+  return vld2q_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld2_dup_bf16:\n+**\t...\n+**\tvld2.16\t{d0\\[\\], d1\\[\\]}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x2_t\n+test_vld2_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld2_dup_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld2q_dup_bf16:\n+**\t...\n+**\tvld2.16\t{d0, d1, d2, d3}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x2_t\n+test_vld2q_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld2q_dup_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld3_bf16:\n+**\t...\n+**\tvld3.16\t{d0-d2}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x3_t\n+test_vld3_bf16 (bfloat16_t * ptr)\n+{\n+  return vld3_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld3q_bf16:\n+**\t...\n+**\tvld3.16\t{d1, d3, d5}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x3_t\n+test_vld3q_bf16 (bfloat16_t * ptr)\n+{\n+  return vld3q_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld3_dup_bf16:\n+**\t...\n+**\tvld3.16\t{d0\\[\\], d1\\[\\], d2\\[\\]}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x3_t\n+test_vld3_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld3_dup_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld3q_dup_bf16:\n+**\t...\n+**\tvld3.16\t{d0\\[\\], d1\\[\\], d2\\[\\]}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x3_t\n+test_vld3q_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld3q_dup_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld4_bf16:\n+**\t...\n+**\tvld4.16\t{d0-d3}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x4_t\n+test_vld4_bf16 (bfloat16_t * ptr)\n+{\n+  return vld4_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld4q_bf16:\n+**\t...\n+**\tvld4.16\t{d1, d3, d5, d7}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x4_t\n+test_vld4q_bf16 (bfloat16_t * ptr)\n+{\n+  return vld4q_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld4_dup_bf16:\n+**\t...\n+**\tvld4.16\t{d0\\[\\], d1\\[\\], d2\\[\\], d3\\[\\]}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x4x4_t\n+test_vld4_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld4_dup_bf16 (ptr);\n+}\n+\n+/*\n+**test_vld4q_dup_bf16:\n+**\t...\n+**\tvld4.16\t{d0\\[\\], d1\\[\\], d2\\[\\], d3\\[\\]}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+bfloat16x8x4_t\n+test_vld4q_dup_bf16 (bfloat16_t * ptr)\n+{\n+  return vld4q_dup_bf16 (ptr);\n+}"}]}