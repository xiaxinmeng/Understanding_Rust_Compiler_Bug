{"sha": "4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzMDVmYTJmZDRjOWQ1NTNiMjZlZmEwMGY4NjhhYTFlNDQxNmE5Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-24T19:43:48Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-26T15:18:30Z"}, "message": "c++: Fix ICE with static_cast when converting from int[] [PR93862]\n\nThis ICEs since my patch for P0388, which allowed conversions to arrays\nof unknown bound, but not the reverse, so these two static_casts are\nill-formed.\n\n[expr.static.cast]/3 says that \"cv1 T1\" and \"cv2 T2\" have to be\nreference-compatible and the comment in build_static_cast_1 says it too\nbut then we actually use reference_related_p...  Fixed thus.\n\n2020-02-26  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93862 - ICE with static_cast when converting from int[].\n\t* call.c (reference_compatible_p): No longer static.\n\t* cp-tree.h (reference_compatible_p): Declare.\n\t* typeck.c (build_static_cast_1): Use reference_compatible_p instead\n\tof reference_related_p.\n\n\t* g++.dg/cpp0x/rv-cast7.C: New test.", "tree": {"sha": "beda3667124a850b4d69abfe295d39726c9d5905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beda3667124a850b4d69abfe295d39726c9d5905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9934ad88d6b27e5cf1a34d88dbefb2bbe928753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9934ad88d6b27e5cf1a34d88dbefb2bbe928753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9934ad88d6b27e5cf1a34d88dbefb2bbe928753"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "5ba298fe5e93a79bb851518f23836324d8c9e250", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -1,3 +1,11 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93862 - ICE with static_cast when converting from int[].\n+\t* call.c (reference_compatible_p): No longer static.\n+\t* cp-tree.h (reference_compatible_p): Declare.\n+\t* typeck.c (build_static_cast_1): Use reference_compatible_p instead\n+\tof reference_related_p.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93803 - ICE with constexpr init and [[no_unique_address]]."}, {"sha": "e07ee85c06ee26ebc472f80c7a9de7d7e83d3384", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -204,7 +204,6 @@ static struct z_candidate *add_candidate\n \t conversion **, tree, tree, int, struct rejection_reason *, int);\n static tree source_type (conversion *);\n static void add_warning (struct z_candidate *, struct z_candidate *);\n-static bool reference_compatible_p (tree, tree);\n static conversion *direct_reference_binding (tree, conversion *);\n static bool promoted_arithmetic_type_p (tree);\n static conversion *conditional_conversion (tree, tree, tsubst_flags_t);\n@@ -1554,7 +1553,7 @@ reference_related_p (tree t1, tree t2)\n \n /* Returns nonzero if T1 is reference-compatible with T2.  */\n \n-static bool\n+bool\n reference_compatible_p (tree t1, tree t2)\n {\n   /* [dcl.init.ref]"}, {"sha": "140d5d88b612d909722edbb385c49dcdf5452566", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -6357,6 +6357,7 @@ extern tree make_temporary_var_for_ref_to_temp\t(tree, tree);\n extern bool type_has_extended_temps\t\t(tree);\n extern tree strip_top_quals\t\t\t(tree);\n extern bool reference_related_p\t\t\t(tree, tree);\n+extern bool reference_compatible_p\t\t(tree, tree);\n extern int remaining_arguments\t\t\t(tree);\n extern tree perform_implicit_conversion\t\t(tree, tree, tsubst_flags_t);\n extern tree perform_implicit_conversion_flags\t(tree, tree, tsubst_flags_t, int);"}, {"sha": "103a1a439ecfb9def0eed20e416eec386475edf0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -7383,7 +7383,7 @@ build_static_cast_1 (location_t loc, tree type, tree expr, bool c_cast_p,\n   if (TYPE_REF_P (type)\n       && TYPE_REF_IS_RVALUE (type)\n       && (clk = real_lvalue_p (expr))\n-      && reference_related_p (TREE_TYPE (type), intype)\n+      && reference_compatible_p (TREE_TYPE (type), intype)\n       && (c_cast_p || at_least_as_qualified_p (TREE_TYPE (type), intype)))\n     {\n       if (processing_template_decl)"}, {"sha": "08146db0cedefd0d914fcf436e583ac4aa9827ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93862 - ICE with static_cast when converting from int[].\n+\t* g++.dg/cpp0x/rv-cast7.C: New test.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1423, Convertibility of nullptr to bool."}, {"sha": "0eea24f9e85e59fb7737948ac9a14ffd636efdc0", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-cast7.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast7.C?ref=4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/93862 - ICE with static_cast when converting from int[].\n+// { dg-do compile { target c++11 } }\n+\n+int(&&intu_rvref)[]{1,2,3,4};\n+int(&int4_lvref)[4] = static_cast<int(&)[4]>(intu_rvref); // { dg-error \"invalid .static_cast.\" }\n+int(&&int4_rvref)[4] = static_cast<int(&&)[4]>(intu_rvref); // { dg-error \"invalid .static_cast.\" }"}]}