{"sha": "dde8b3609b40a5e9073a7638d492b8c29af2e24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlOGIzNjA5YjQwYTVlOTA3M2E3NjM4ZDQ5MmI4YzI5YWYyZTI0Yw==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-09-29T13:14:51Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2011-09-29T13:14:51Z"}, "message": "Change random seeds to 64bit and drop re-crcing\n\nI had some trouble with random build failures in a large LTO project\nand it turned out to be random seed collisions in a highly parallel build\n(thanks to Honza for suggesting that)\n\nThere were multiple problems:\n- The way to generate the random seed is not very random (milliseconds time plus pid)\nand prone to collisions on highly parallel builds\n- It's only 32bit\n- Several users take the existing ascii seed and re-CRC32 it again, which\ndoesn't exactly improve it.\n\nThis patch changes that to:\n- Always use 64bit seeds as numbers (no re-crcing)\n- Change all users to use HOST_WIDE_INT\n- When the user specifies a random seed it's still crc32ed, but only in\nthis case.\n\nPasses bootstrap + testsuite on x86_64-linux.\n\ngcc/cp:\n\n2011-09-26   Andi Kleen <ak@linux.intel.com>\n\n\t* repo.c (finish_repo): Use HOST_WIDE_INT_PRINT_HEX_PURE.\n\ngcc/:\n\n2011-09-26   Andi Kleen <ak@linux.intel.com>\n\n\t* hwint.h (HOST_WIDE_INT_PRINT_HEX_PURE): Add.\n\t* lto-streamer.c (lto_get_section_name): Remove crc32_string.\n \tHandle numerical random seed.\n\t* lto-streamer.h (lto_file_decl_data): Change id to unsigned HOST_WIDE_INT.\n\t* toplev.c (random_seed): Add.\n\t(init_random_seed): Change for numerical random seed.\n\t(get_random_seed): Return as HOST_WIDE_INT.\n\t(set_random_seed): Crc32 existing string.\n\t* toplev.h (get_random_seed): Change to numercal return.\n\t* tree.c (get_file_function_name): Remove CRC. Handle numerical random seed.\n\ngcc/lto/:\n\n2011-09-26   Andi Kleen <ak@linux.intel.com>\n\n\t* lto.c (lto_resolution_read): Remove id dumping.\n\t(lto_section_with_id): Turn id HOST_WIDE_ID.\n\t(create_subid_section_table): Dito.\n\nFrom-SVN: r179347", "tree": {"sha": "572521c2983256f9fae580c8be83c1898f33a849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572521c2983256f9fae580c8be83c1898f33a849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dde8b3609b40a5e9073a7638d492b8c29af2e24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde8b3609b40a5e9073a7638d492b8c29af2e24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde8b3609b40a5e9073a7638d492b8c29af2e24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde8b3609b40a5e9073a7638d492b8c29af2e24c/comments", "author": null, "committer": null, "parents": [{"sha": "4056cc1ba5e5590529b257a12f80270d552019b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4056cc1ba5e5590529b257a12f80270d552019b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4056cc1ba5e5590529b257a12f80270d552019b9"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "c0c963c4daa8d2e90457543f91cbd1b111cbea52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -1,3 +1,16 @@\n+2011-09-26   Andi Kleen <ak@linux.intel.com>\n+\n+\t* hwint.h (HOST_WIDE_INT_PRINT_HEX_PURE): Add.\n+\t* lto-streamer.c (lto_get_section_name): Remove crc32_string.\n+ \tHandle numerical random seed.\n+\t* lto-streamer.h (lto_file_decl_data): Change id to unsigned HOST_WIDE_INT.\n+\t* toplev.c (random_seed): Add.\n+\t(init_random_seed): Change for numerical random seed.\n+\t(get_random_seed): Return as HOST_WIDE_INT.\n+\t(set_random_seed): Crc32 existing string.\n+\t* toplev.h (get_random_seed): Change to numercal return.\n+\t* tree.c (get_file_function_name): Remove CRC. Handle numerical random seed.\n+\n 2011-09-29  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50566"}, {"sha": "0058e432db6b25eb29b00ccc4a84fa9a53a9c283", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -1,3 +1,7 @@\n+2011-09-26   Andi Kleen <ak@linux.intel.com>\n+\n+\t* repo.c (finish_repo): Use HOST_WIDE_INT_PRINT_HEX_PURE.\n+\n 2011-09-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/45278"}, {"sha": "ca971b61b595229a5f3027498bec38abff0a454e", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -263,7 +263,8 @@ finish_repo (void)\n \t anonymous namespaces will get the same mangling when this\n \t file is recompiled.  */\n       if (!strstr (args, \"'-frandom-seed=\"))\n-\tfprintf (repo_file, \" '-frandom-seed=%s'\", get_random_seed (false));\n+\tfprintf (repo_file, \" '-frandom-seed=\" HOST_WIDE_INT_PRINT_HEX_PURE \"'\", \n+\t\t get_random_seed (false));\n       fprintf (repo_file, \"\\n\");\n     }\n "}, {"sha": "f5e0beec11292220b31740230d8a931341c2dfc3", "filename": "gcc/hwint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -102,6 +102,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n #define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n #define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n+#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_WIDE_INT_PRINT \"x\"\n \n /* Set HOST_WIDEST_INT.  This is a 64-bit type unless the compiler\n    in use has no 64-bit type at all; in that case it's 32 bits.  */"}, {"sha": "e3ccb79d813cd080002e7fa0ee3888eb994cfbdf", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -166,13 +166,13 @@ lto_get_section_name (int section_type, const char *name, struct lto_file_decl_d\n      doesn't confuse the reader with merged sections.\n \n      For options don't add a ID, the option reader cannot deal with them\n-     and merging should be ok here.\n-\n-     XXX: use crc64 to minimize collisions? */\n+     and merging should be ok here. */\n   if (section_type == LTO_section_opts)\n     strcpy (post, \"\");\n+  else if (f != NULL) \n+    sprintf (post, \".\" HOST_WIDE_INT_PRINT_HEX_PURE, f->id);\n   else\n-    sprintf (post, \".%x\", f ? f->id : crc32_string(0, get_random_seed (false)));\n+    sprintf (post, \".\" HOST_WIDE_INT_PRINT_HEX_PURE, get_random_seed (false)); \n   return concat (LTO_SECTION_NAME_PREFIX, sep, add, post, NULL);\n }\n "}, {"sha": "2564bd2ec21dfc2df220bda283fc7543488eddf1", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -552,7 +552,7 @@ struct GTY(()) lto_file_decl_data\n   struct lto_file_decl_data *next;\n \n   /* Sub ID for merged objects. */\n-  unsigned id;\n+  unsigned HOST_WIDE_INT id;\n \n   /* Symbol resolutions for this file */\n   VEC(ld_plugin_symbol_resolution_t,heap) * GTY((skip)) resolutions;"}, {"sha": "ab9ea6886cf31a63c0ac0b92e54e676b0df56544", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -1,3 +1,9 @@\n+2011-09-26   Andi Kleen <ak@linux.intel.com>\n+\n+\t* lto.c (lto_resolution_read): Remove id dumping.\n+\t(lto_section_with_id): Turn id HOST_WIDE_ID.\n+\t(create_subid_section_table): Dito.\n+\n 2011-08-28  Dodji Seketeli  <dodji@redhat.com>\n \n \t* lto-lang.c (lto_init): Likewise.  Also, avoid calling"}, {"sha": "77eb1a151884ec27f56016fe69ba471578c46880", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -976,9 +976,6 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n \t}\n \n       file_data = (struct lto_file_decl_data *)nd->value;\n-      if (cgraph_dump_file)\n-\tfprintf (cgraph_dump_file, \"Adding resolution %u %u to id %x\\n\",\n-\t\t index, r, file_data->id);\n       VEC_safe_grow_cleared (ld_plugin_symbol_resolution_t, heap, \n \t\t\t     file_data->resolutions,\n \t\t\t     max_index + 1);\n@@ -990,14 +987,14 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n /* Is the name for a id'ed LTO section? */\n \n static int \n-lto_section_with_id (const char *name, unsigned *id)\n+lto_section_with_id (const char *name, unsigned HOST_WIDE_INT *id)\n {\n   const char *s;\n \n   if (strncmp (name, LTO_SECTION_NAME_PREFIX, strlen (LTO_SECTION_NAME_PREFIX)))\n     return 0;\n   s = strrchr (name, '.');\n-  return s && sscanf (s, \".%x\", id) == 1;\n+  return s && sscanf (s, \".\" HOST_WIDE_INT_PRINT_HEX_PURE, id) == 1;\n }\n \n /* Create file_data of each sub file id */\n@@ -1008,7 +1005,7 @@ create_subid_section_table (void **slot, void *data)\n   struct lto_section_slot s_slot, *new_slot;\n   struct lto_section_slot *ls = *(struct lto_section_slot **)slot;\n   splay_tree file_ids = (splay_tree)data;\n-  unsigned id;\n+  unsigned HOST_WIDE_INT id;\n   splay_tree_node nd;\n   void **hash_slot;\n   char *new_name;\n@@ -1080,7 +1077,7 @@ static int lto_create_files_from_ids (splay_tree_node node, void *data)\n \n   lto_file_finalize (file_data, lw->file);\n   if (cgraph_dump_file)\n-    fprintf (cgraph_dump_file, \"Creating file %s with sub id %x\\n\", \n+    fprintf (cgraph_dump_file, \"Creating file %s with sub id \" HOST_WIDE_INT_PRINT_HEX \"\\n\", \n \t     file_data->file_name, file_data->id);\n   file_data->next = *lw->file_data;\n   *lw->file_data = file_data;"}, {"sha": "78583fc52a683c6511855ffe976ea4fba68751d5", "filename": "gcc/toplev.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -141,6 +141,9 @@ static const char *flag_random_seed;\n    user has specified a particular random seed.  */\n unsigned local_tick;\n \n+/* Random number for this compilation */\n+HOST_WIDE_INT random_seed;\n+\n /* -f flags.  */\n \n /* Generate code for GNU or NeXT Objective-C runtime environment.  */\n@@ -251,7 +254,7 @@ announce_function (tree decl)\n     }\n }\n \n-/* Initialize local_tick with the time of day, or -1 if\n+/* Initialize local_tick with a random number or -1 if\n    flag_random_seed is set.  */\n \n static void\n@@ -286,24 +289,28 @@ init_local_tick (void)\n static void\n init_random_seed (void)\n {\n-  unsigned HOST_WIDE_INT value;\n-  static char random_seed[HOST_BITS_PER_WIDE_INT / 4 + 3];\n-\n-  value = local_tick ^ getpid ();\n+  if (flag_random_seed)\n+    {\n+      char *endp;\n \n-  sprintf (random_seed, HOST_WIDE_INT_PRINT_HEX, value);\n-  flag_random_seed = random_seed;\n+      /* When the driver passed in a hex number don't crc it again */\n+      random_seed = strtoul (flag_random_seed, &endp, 0);\n+      if (!(endp > flag_random_seed && *endp == 0))\n+        random_seed = crc32_string (0, flag_random_seed);\n+    }\n+  else if (!random_seed)\n+    random_seed = local_tick ^ getpid ();  /* Old racey fallback method */\n }\n \n-/* Obtain the random_seed string.  Unless NOINIT, initialize it if\n+/* Obtain the random_seed.  Unless NOINIT, initialize it if\n    it's not provided in the command line.  */\n \n-const char *\n+HOST_WIDE_INT\n get_random_seed (bool noinit)\n {\n   if (!flag_random_seed && !noinit)\n     init_random_seed ();\n-  return flag_random_seed;\n+  return random_seed;\n }\n \n /* Modify the random_seed string to VAL.  Return its previous"}, {"sha": "588cfdbb6d2e0a05e8386ceff94189184d07beba", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -77,7 +77,7 @@ extern bool set_src_pwd\t\t       (const char *);\n \n /* Functions used to manipulate the random seed.  */\n \n-extern const char *get_random_seed (bool);\n+extern HOST_WIDE_INT get_random_seed (bool);\n extern const char *set_random_seed (const char *);\n \n #endif /* ! GCC_TOPLEV_H */"}, {"sha": "3e9750383e19da4cf3f281e26a4e3874dc7878ad", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde8b3609b40a5e9073a7638d492b8c29af2e24c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dde8b3609b40a5e9073a7638d492b8c29af2e24c", "patch": "@@ -8749,11 +8749,11 @@ get_file_function_name (const char *type)\n \tfile = input_filename;\n \n       len = strlen (file);\n-      q = (char *) alloca (9 * 2 + len + 1);\n+      q = (char *) alloca (9 + 17 + len + 1);\n       memcpy (q, file, len + 1);\n \n-      sprintf (q + len, \"_%08X_%08X\", crc32_string (0, name),\n-\t       crc32_string (0, get_random_seed (false)));\n+      snprintf (q + len, 9 + 17 + 1, \"_%08X_\" HOST_WIDE_INT_PRINT_HEX, \n+\t\tcrc32_string (0, name), get_random_seed (false));\n \n       p = q;\n     }"}]}