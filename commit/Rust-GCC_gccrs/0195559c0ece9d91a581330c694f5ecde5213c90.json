{"sha": "0195559c0ece9d91a581330c694f5ecde5213c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5NTU1OWMwZWNlOWQ5MWE1ODEzMzBjNjk0ZjVlY2RlNTIxM2M5MA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-06-25T14:16:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:17Z"}, "message": "Added provisional Motorola 68K target hook", "tree": {"sha": "85a4b13ca3ea28b78fb249882394fbc69a03a9bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a4b13ca3ea28b78fb249882394fbc69a03a9bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0195559c0ece9d91a581330c694f5ecde5213c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0195559c0ece9d91a581330c694f5ecde5213c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0195559c0ece9d91a581330c694f5ecde5213c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0195559c0ece9d91a581330c694f5ecde5213c90/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695a885813daef0f877a8127cf23ec4b6cdb9d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695a885813daef0f877a8127cf23ec4b6cdb9d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695a885813daef0f877a8127cf23ec4b6cdb9d6a"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "0bb3b805f41e1d2049624d516dcb4ab106b223ea", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0195559c0ece9d91a581330c694f5ecde5213c90", "patch": "@@ -393,6 +393,7 @@ fido-*-*)\n \tcpu_type=m68k\n \textra_headers=math-68881.h\n \textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n+\trust_target_objs=\"m68k-rust.o\"\n         ;;\n i[34567]86-*-*)\n \tcpu_type=i386\n@@ -488,6 +489,7 @@ m32r*-*-*)\n m68k-*-*)\n \textra_headers=math-68881.h\n \textra_options=\"${extra_options} m68k/m68k-tables.opt\"\n+\trust_target_objs=\"m68k-rust.o\"\n \t;;\n microblaze*-*-*)\n         cpu_type=microblaze"}, {"sha": "cb2b83cebe058049fb47bfc144592e15382c9540", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=0195559c0ece9d91a581330c694f5ecde5213c90", "patch": "@@ -101,6 +101,9 @@ extern enum attr_op_mem m68k_sched_attr_op_mem (rtx_insn *);\n \n #endif /* RTX_CODE */\n \n+/* Defined in m68k-rust.c  */\n+extern void m68k_rust_target_cpu_info (void);\n+\n extern enum reg_class m68k_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   machine_mode, rtx);\n extern enum reg_class m68k_preferred_reload_class (rtx, enum reg_class);"}, {"sha": "4e4cc07e0dd14bad609e7cc3901c1d1dd50fa541", "filename": "gcc/config/m68k/m68k-rust.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-rust.c?ref=0195559c0ece9d91a581330c694f5ecde5213c90", "patch": "@@ -0,0 +1,63 @@\n+/* Subroutines for the Rust front end for the Motorola 680x0/ColdFire architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for Motorola 680x0/ColdFire targets.  */\n+\n+void m68k_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"m68k\");\n+\n+    /* llvm has no current or historical support for m68k, and llvm forks and mrustc don't suggest any \n+     * true target feature names, so I made up names and features */\n+    // TODO: maybe define subarches as features? probably needed, but not sure how well it interacts\n+    if (TARGET_ALIGN_INT)\n+        rust_add_target_info(\"target_feature\", \"align-int\");\n+    if (TARGET_BITFIELD)\n+        rust_add_target_info(\"target_feature\", \"bitfield\");\n+    if (TARGET_CF_HWDIV)\n+        rust_add_target_info(\"target_feature\", \"div\");\n+    if (TARGET_HARD_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"hard-float\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    if (TARGET_ID_SHARED_LIBRARY)\n+        rust_add_target_info(\"target_feature\", \"id-shared-library\");\n+    if (TARGET_LONG_JUMP_TABLE_OFFSETS)\n+        rust_add_target_info(\"target_feature\", \"long-jump-table-offsets\");\n+    if (TARGET_RTD)\n+        rust_add_target_info(\"target_feature\", \"rtd\");\n+    if (TARGET_SHORT)\n+        rust_add_target_info(\"target_feature\", \"short\");\n+    if (TARGET_PCREL)\n+        rust_add_target_info(\"target_feature\", \"pcrel\");\n+    if (TARGET_SEP_DATA)\n+        rust_add_target_info(\"target_feature\", \"sep-data\");\n+    // TODO: see if can get information about shared-library-id\n+    if (TARGET_STRICT_ALIGNMENT)\n+        rust_add_target_info(\"target_feature\", \"strict-align\");\n+    if (TARGET_XGOT)\n+        rust_add_target_info(\"target_feature\", \"xgot\");   \n+    if (TARGET_XTLS)\n+        rust_add_target_info(\"target_feature\", \"xtls\");\n+}"}, {"sha": "b455a49ce88dad83e90b6083693d6096a3653024", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=0195559c0ece9d91a581330c694f5ecde5213c90", "patch": "@@ -196,6 +196,8 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_CPU_INFO m68k_rust_target_cpu_info\n+\n /* Classify the groups of pseudo-ops used to assemble QI, HI and SI\n    quantities.  */\n #define INT_OP_STANDARD\t0\t/* .byte, .short, .long */"}, {"sha": "4f1ce871968adf7750baa549895bedf96bfa443a", "filename": "gcc/config/m68k/t-opts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Ft-opts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0195559c0ece9d91a581330c694f5ecde5213c90/gcc%2Fconfig%2Fm68k%2Ft-opts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-opts?ref=0195559c0ece9d91a581330c694f5ecde5213c90", "patch": "@@ -6,3 +6,7 @@ $(srcdir)/config/m68k/m68k-tables.opt: $(srcdir)/config/m68k/genopt.sh \\\n   $(srcdir)/config/m68k/m68k-microarchs.def\n \t$(SHELL) $(srcdir)/config/m68k/genopt.sh $(srcdir)/config/m68k > \\\n \t\t$(srcdir)/config/m68k/m68k-tables.opt\n+\n+m68k-rust.o: $(srcdir)/config/m68k/m68k-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}