{"sha": "0aa692fc03e59a5794e4386d7a9e87ec085704a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhNjkyZmMwM2U1OWE1Nzk0ZTQzODZkN2E5ZTg3ZWMwODU3MDRhMQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-02T16:42:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-02T16:42:59Z"}, "message": "sh.c (force_into): New function.\n\n\t* sh.c (force_into): New function.\n\t(expand_block_move): Use it.\n\nFrom-SVN: r25540", "tree": {"sha": "0e4d660fb4bb3bfff571922c818be5d2aa55cf32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4d660fb4bb3bfff571922c818be5d2aa55cf32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa692fc03e59a5794e4386d7a9e87ec085704a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa692fc03e59a5794e4386d7a9e87ec085704a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa692fc03e59a5794e4386d7a9e87ec085704a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa692fc03e59a5794e4386d7a9e87ec085704a1/comments", "author": null, "committer": null, "parents": [{"sha": "4ed9f2126ddc0f9095b464d3f5b27401da11b5fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed9f2126ddc0f9095b464d3f5b27401da11b5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed9f2126ddc0f9095b464d3f5b27401da11b5fb"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "03315c63f8cb2564833bd4d881fb16fd2a1a215a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa692fc03e59a5794e4386d7a9e87ec085704a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa692fc03e59a5794e4386d7a9e87ec085704a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0aa692fc03e59a5794e4386d7a9e87ec085704a1", "patch": "@@ -1,3 +1,8 @@\n+Wed Mar  3 00:00:37 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.c (force_into): New function.\n+\t(expand_block_move): Use it.\n+\n Tue Mar  2 10:39:43 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* cccp.c (struct default_include): Add 'included' field."}, {"sha": "180cce2b2aa9724e9fe2eacbc5d766fe13f8547c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa692fc03e59a5794e4386d7a9e87ec085704a1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa692fc03e59a5794e4386d7a9e87ec085704a1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0aa692fc03e59a5794e4386d7a9e87ec085704a1", "patch": "@@ -305,6 +305,18 @@ print_operand (stream, x, code)\n     }\n }\n \f\n+static void force_into PROTO ((rtx, rtx));\n+\n+/* Like force_operand, but guarantees that VALUE ends up in TARGET.  */\n+static void\n+force_into (value, target)\n+     rtx value, target;\n+{\n+  value = force_operand (value, target);\n+  if (! rtx_equal_p (value, target))\n+    emit_insn (gen_move_insn (target, value));\n+}\n+\n /* Emit code to perform a block move.  Choose the best method.\n \n    OPERANDS[0] is the destination.\n@@ -342,8 +354,8 @@ expand_block_move (operands)\n \t    = copy_to_mode_reg (Pmode,\n \t\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n \t\t\t\t\t\t    IDENTIFIER_POINTER (entry_name)));\n-\t  emit_insn (gen_move_insn (r4, XEXP (operands[0], 0)));\n-\t  emit_insn (gen_move_insn (r5, XEXP (operands[1], 0)));\n+\t  force_into (XEXP (operands[0], 0), r4);\n+\t  force_into (XEXP (operands[1], 0), r5);\n \t  emit_insn (gen_block_move_real_i4 (func_addr_rtx));\n \t  return 1;\n \t}\n@@ -363,8 +375,8 @@ expand_block_move (operands)\n \t    = copy_to_mode_reg (Pmode,\n \t\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n \t\t\t\t\t\t    IDENTIFIER_POINTER (entry_name)));\n-\t  emit_insn (gen_move_insn (r4, XEXP (operands[0], 0)));\n-\t  emit_insn (gen_move_insn (r5, XEXP (operands[1], 0)));\n+\t  force_into (XEXP (operands[0], 0), r4);\n+\t  force_into (XEXP (operands[1], 0), r5);\n \n \t  dwords = bytes >> 3;\n \t  emit_insn (gen_move_insn (r6, GEN_INT (dwords - 1)));\n@@ -389,8 +401,8 @@ expand_block_move (operands)\n \t= copy_to_mode_reg (Pmode,\n \t\t\t    gen_rtx (SYMBOL_REF, Pmode,\n \t\t\t\t     IDENTIFIER_POINTER (entry_name)));\n-      emit_insn (gen_move_insn (r4, XEXP (operands[0], 0)));\n-      emit_insn (gen_move_insn (r5, XEXP (operands[1], 0)));\n+      force_into (XEXP (operands[0], 0), r4);\n+      force_into (XEXP (operands[1], 0), r5);\n       emit_insn (gen_block_move_real (func_addr_rtx));\n       return 1;\n     }\n@@ -411,8 +423,8 @@ expand_block_move (operands)\n \t= copy_to_mode_reg (Pmode,\n \t\t\t    gen_rtx (SYMBOL_REF, Pmode,\n \t\t\t\t     IDENTIFIER_POINTER (entry_name)));\n-      emit_insn (gen_move_insn (r4, XEXP (operands[0], 0)));\n-      emit_insn (gen_move_insn (r5, XEXP (operands[1], 0)));\n+      force_into (XEXP (operands[0], 0), r4);\n+      force_into (XEXP (operands[1], 0), r5);\n \n       /* r6 controls the size of the move.  16 is decremented from it\n \t for each 64 bytes moved.  Then the negative bit left over is used"}]}