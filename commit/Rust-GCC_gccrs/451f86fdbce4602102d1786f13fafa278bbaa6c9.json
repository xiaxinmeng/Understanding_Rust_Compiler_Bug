{"sha": "451f86fdbce4602102d1786f13fafa278bbaa6c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxZjg2ZmRiY2U0NjAyMTAyZDE3ODZmMTNmYWZhMjc4YmJhYTZjOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-23T20:06:46Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-23T20:06:46Z"}, "message": "reload.c (find_reloads_toplev): Use simplify_gen_subreg.\n\ngcc:\n\t* reload.c (find_reloads_toplev): Use simplify_gen_subreg.\n\t* simplify-rtx.c (simplify_subreg): When converting to a non-int\n\tmode, try to convert to an integer mode of matching size first.\n\ngcc/testsuite:\n\t* gcc.c-torture/compile/simd-4.c: New test.\n\nFrom-SVN: r55687", "tree": {"sha": "a4657d0936e95c87f5855af3090630b9fee49cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4657d0936e95c87f5855af3090630b9fee49cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451f86fdbce4602102d1786f13fafa278bbaa6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451f86fdbce4602102d1786f13fafa278bbaa6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451f86fdbce4602102d1786f13fafa278bbaa6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451f86fdbce4602102d1786f13fafa278bbaa6c9/comments", "author": null, "committer": null, "parents": [{"sha": "1d5fa6b42508d546fe875bb6809e645523f01e70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5fa6b42508d546fe875bb6809e645523f01e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5fa6b42508d546fe875bb6809e645523f01e70"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "95b81ebfa93a0dbea8bc1070453ad44970c8e241", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=451f86fdbce4602102d1786f13fafa278bbaa6c9", "patch": "@@ -1,4 +1,8 @@\n-Tue Jul 23 20:56:03 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+Tue Jul 23 21:02:16 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* reload.c (find_reloads_toplev): Use simplify_gen_subreg.\n+\t* simplify-rtx.c (simplify_subreg): When converting to a non-int\n+\tmode, try to convert to an integer mode of matching size first.\n \n \t* simplify-rtx.x (simplify_subreg): When constructing a CONST_VECTOR\n \tfrom individual subregs, check that each subreg has been generated"}, {"sha": "7f3568c7ce4b5083e533883b9703734784c50a77", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=451f86fdbce4602102d1786f13fafa278bbaa6c9", "patch": "@@ -4404,51 +4404,16 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest, insn,\n \n       if (GET_MODE_BITSIZE (GET_MODE (x)) == BITS_PER_WORD\n \t  && regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] < 0\n-\t  && reg_equiv_constant[regno] != 0\n-\t  && (tem = operand_subword (reg_equiv_constant[regno],\n-\t\t\t\t     SUBREG_BYTE (x) / UNITS_PER_WORD, 0,\n-\t\t\t\t     GET_MODE (SUBREG_REG (x)))) != 0)\n+\t  && reg_equiv_constant[regno] != 0)\n \t{\n-\t  /* TEM is now a word sized constant for the bits from X that\n-\t     we wanted.  However, TEM may be the wrong representation.\n-\n-\t     Use gen_lowpart_common to convert a CONST_INT into a\n-\t     CONST_DOUBLE and vice versa as needed according to by the mode\n-\t     of the SUBREG.  */\n-\t  tem = gen_lowpart_common (GET_MODE (x), tem);\n+\t  tem =\n+\t    simplify_gen_subreg (GET_MODE (x), reg_equiv_constant[regno],\n+\t\t\t\t GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n \t  if (!tem)\n \t    abort ();\n \t  return tem;\n \t}\n \n-      /* If the SUBREG is wider than a word, the above test will fail.\n-\t For example, we might have a SImode SUBREG of a DImode SUBREG_REG\n-\t for a 16 bit target, or a DImode SUBREG of a TImode SUBREG_REG for\n-\t a 32 bit target.  We still can - and have to - handle this\n-\t for non-paradoxical subregs of CONST_INTs.  */\n-      if (regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] < 0\n-\t  && reg_equiv_constant[regno] != 0\n-\t  && GET_CODE (reg_equiv_constant[regno]) == CONST_INT\n-\t  && (GET_MODE_SIZE (GET_MODE (x))\n-\t      < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n-\t{\n-\t  int shift = SUBREG_BYTE (x) * BITS_PER_UNIT;\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    shift = (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x)))\n-\t\t     - GET_MODE_BITSIZE (GET_MODE (x))\n-\t\t     - shift);\n-\t  /* Here we use the knowledge that CONST_INTs have a\n-\t     HOST_WIDE_INT field.  */\n-\t  if (shift >= HOST_BITS_PER_WIDE_INT)\n-\t    shift = HOST_BITS_PER_WIDE_INT - 1;\n-\t  return GEN_INT (INTVAL (reg_equiv_constant[regno]) >> shift);\n-\t}\n-\n-      if (regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] < 0\n-\t  && reg_equiv_constant[regno] != 0\n-\t  && GET_MODE (reg_equiv_constant[regno]) == VOIDmode)\n-\tabort ();\n-\n       /* If the subreg contains a reg that will be converted to a mem,\n \t convert the subreg to a narrower memref now.\n \t Otherwise, we would get (subreg (mem ...) ...),"}, {"sha": "1791f2e4d7927bbd6c8fb4b463bfffd8cef03d51", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=451f86fdbce4602102d1786f13fafa278bbaa6c9", "patch": "@@ -2347,8 +2347,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \t      return NULL_RTX;\n \t  return simplify_subreg (outermode, op, new_mode, subbyte);\n \t}\n-      else if (GET_MODE_CLASS (outermode) != MODE_VECTOR_INT\n-\t       && GET_MODE_CLASS (outermode) != MODE_VECTOR_FLOAT)\n+      else if (GET_MODE_CLASS (outermode) == MODE_INT)\n         /* This shouldn't happen, but let's not do anything stupid.  */\n \treturn NULL_RTX;\n     }\n@@ -2387,7 +2386,8 @@ simplify_subreg (outermode, op, innermode, byte)\n \t Later it we should move all simplification code here and rewrite\n \t GEN_LOWPART_IF_POSSIBLE, GEN_HIGHPART, OPERAND_SUBWORD and friends\n \t using SIMPLIFY_SUBREG.  */\n-      if (subreg_lowpart_offset (outermode, innermode) == byte)\n+      if (subreg_lowpart_offset (outermode, innermode) == byte\n+\t  && GET_CODE (op) != CONST_VECTOR)\n \t{\n \t  rtx new = gen_lowpart_if_possible (outermode, op);\n \t  if (new)\n@@ -2406,6 +2406,19 @@ simplify_subreg (outermode, op, innermode, byte)\n \t    return new;\n \t}\n \n+      if (GET_MODE_CLASS (outermode) != MODE_INT)\n+\t{\n+\t  enum machine_mode new_mode = int_mode_for_mode (outermode);\n+\n+\t  if (new_mode != innermode || byte != 0)\n+\t    {\n+\t      op = simplify_subreg (new_mode, op, innermode, byte);\n+\t      if (! op)\n+\t\treturn NULL_RTX;\n+\t      return simplify_subreg (outermode, op, new_mode, 0);\n+\t    }\n+\t}\n+\n       offset = byte * BITS_PER_UNIT;\n       switch (GET_CODE (op))\n \t{"}, {"sha": "2d5649dcbb465c08fb00132c546a6a5a7cc38ae1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=451f86fdbce4602102d1786f13fafa278bbaa6c9", "patch": "@@ -1,3 +1,7 @@\n+Tue Jul 23 21:02:43 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* gcc.c-torture/compile/simd-4.c: New test.\n+\n 2002-07-22  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/7347, c++/7348"}, {"sha": "6ede943c47d6bf8860b4af6a14b723f2e1647814", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451f86fdbce4602102d1786f13fafa278bbaa6c9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c?ref=451f86fdbce4602102d1786f13fafa278bbaa6c9", "patch": "@@ -0,0 +1,15 @@\n+typedef float floatvect2 __attribute__((mode(V4SF)));\n+\n+typedef union\n+{\n+    floatvect2 vector;\n+    float f[2];\n+}resfloatvect2;\n+\n+void tempf(floatvect2 *x, floatvect2 *y)\n+{\n+        floatvect2 temp= *x;\n+        floatvect2 temp1=*y;\n+        resfloatvect2 temp2;\n+        *x=temp+temp1;\n+}"}]}