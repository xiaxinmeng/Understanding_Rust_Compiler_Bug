{"sha": "64e1ab11680d7fe72372d70add25ee519406d3d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlMWFiMTE2ODBkN2ZlNzIzNzJkNzBhZGQyNWVlNTE5NDA2ZDNkMQ==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-11-15T16:33:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-15T16:33:59Z"}, "message": "build_hacking.xml: Fix documentation typos.\n\n2013-11-15  Ond\u0159ej B\u00edlka <neleai@seznam.cz>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* doc/xml/manual/build_hacking.xml: Fix documentation typos.\n\t* doc/xml/manual/configure.xml: Likewise.\n\t* include/bits/atomic_base.h: Fix typos in comments.\n\t* include/bits/random.h: Likewise.\n\t* include/ext/cast.h: Likewise.\n\t* libsupc++/cxxabi.h: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/testcase.h:\n\tLikewise.\n\t* testsuite/util/exception/safety.h: Likewise.\n\t* testsuite/util/testsuite_containers.h: Likewise.\n\t* testsuite/util/testsuite_hooks.cc: Likewise.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r204850", "tree": {"sha": "fb5c265ca6cbc7dc8bfdb3a994ed99c20cc046ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5c265ca6cbc7dc8bfdb3a994ed99c20cc046ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64e1ab11680d7fe72372d70add25ee519406d3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e1ab11680d7fe72372d70add25ee519406d3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e1ab11680d7fe72372d70add25ee519406d3d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e1ab11680d7fe72372d70add25ee519406d3d1/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff90a89e480d318bbb1a09fca1ea76c1a86e3ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff90a89e480d318bbb1a09fca1ea76c1a86e3ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff90a89e480d318bbb1a09fca1ea76c1a86e3ebb"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "c48ff6567aa5111fe1892d2636c6eee083934d9c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -1,3 +1,19 @@\n+2013-11-15  Ond\u0159ej B\u00edlka <neleai@seznam.cz>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/manual/build_hacking.xml: Fix documentation typos.\n+\t* doc/xml/manual/configure.xml: Likewise.\n+\t* include/bits/atomic_base.h: Fix typos in comments.\n+\t* include/bits/random.h: Likewise.\n+\t* include/ext/cast.h: Likewise.\n+\t* libsupc++/cxxabi.h: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/testcase.h:\n+\tLikewise.\n+\t* testsuite/util/exception/safety.h: Likewise.\n+\t* testsuite/util/testsuite_containers.h: Likewise.\n+\t* testsuite/util/testsuite_hooks.cc: Likewise.\n+\n 2013-11-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/stl_map.h (map): Implement C++11 allocator-aware"}, {"sha": "912658bb2ce4bb59192733e40d389420e7ec5833", "filename": "libstdc++-v3/doc/xml/manual/build_hacking.xml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -142,13 +142,13 @@ in the build directory starts the build process. The <literal>all</literal> targ\n   <para>\n     Most comments should use {octothorpes, shibboleths, hash marks,\n     pound signs, whatever} rather than \"dnl\".  Nearly all comments in\n-    configure.ac should.  Comments inside macros written in ancilliary\n+    configure.ac should.  Comments inside macros written in ancillary\n     .m4 files should.  About the only comments which should\n     <emphasis>not</emphasis> use #, but use dnl instead, are comments\n-    <emphasis>outside</emphasis> our own macros in the ancilliary\n+    <emphasis>outside</emphasis> our own macros in the ancillary\n     files.  The difference is that # comments show up in\n     <code>configure</code> (which is most helpful for debugging),\n-    while dnl'd lines just vanish.  Since the macros in ancilliary\n+    while dnl'd lines just vanish.  Since the macros in ancillary\n     files generate code which appears in odd places, their \"outside\"\n     comments tend to not be useful while reading\n     <code>configure</code>.\n@@ -419,7 +419,7 @@ in the build directory starts the build process. The <literal>all</literal> targ\n    </para>\n    <para>\n      Generates two convenience libraries, one for C++98 and one for\n-     C++11, various compability files for shared and static\n+     C++11, various compatibility files for shared and static\n      libraries, and then collects all the generated bits and creates\n      the final libstdc++ libraries.\n   </para>"}, {"sha": "3246d85193e9ca7119decd5d1c68bc5c32b07039", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -376,7 +376,7 @@\n      to standard error for certain events such as calling a pure virtual\n      function or the invocation of the standard terminate handler.  Those\n      messages cause the library to depend on the demangler and standard I/O\n-     facilites, which might be undesirable in a low-memory environment or\n+     facilities, which might be undesirable in a low-memory environment or\n      when standard error is not available.  This option disables those\n      messages.  This option does not change the library ABI.\n    </para>"}, {"sha": "54bf2133d0d6270a9952a34083acdf49a0f67fc0", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -255,7 +255,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  Base type is POD with data, allowing atomic_flag to derive from\n    *  it and meet the standard layout type requirement. In addition to\n-   *  compatibilty with a C interface, this allows different\n+   *  compatibility with a C interface, this allows different\n    *  implementations of atomic_flag to use the same atomic operation\n    *  functions, via a standard conversion to the __atomic_flag_base\n    *  argument."}, {"sha": "5613bdf5ec01a7841c4a8f06db48f37a5d72fcf2", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -5685,11 +5685,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __d1._M_param == __d2._M_param; }\n \n       /**\n-       * @brief Inserts a %piecewise_constan_distribution random\n+       * @brief Inserts a %piecewise_constant_distribution random\n        *        number distribution @p __x into the output stream @p __os.\n        *\n        * @param __os An output stream.\n-       * @param __x  A %piecewise_constan_distribution random number\n+       * @param __x  A %piecewise_constant_distribution random number\n        *             distribution.\n        *\n        * @returns The output stream with the state of @p __x inserted or in\n@@ -5701,11 +5701,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const std::piecewise_constant_distribution<_RealType1>& __x);\n \n       /**\n-       * @brief Extracts a %piecewise_constan_distribution random\n+       * @brief Extracts a %piecewise_constant_distribution random\n        *        number distribution @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __x A %piecewise_constan_distribution random number\n+       * @param __x A %piecewise_constant_distribution random number\n        *            generator engine.\n        *\n        * @returns The input stream with @p __x extracted or in an error"}, {"sha": "fb220f39f70cd2ea24bd56432b2e1fe422da6410", "filename": "libstdc++-v3/include/ext/cast.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -38,7 +38,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * These functions are here to allow containers to support non standard\n    * pointer types.  For normal pointers, these resolve to the use of the\n    * standard cast operation.  For other types the functions will perform\n-   * the apprpriate cast to/from the custom pointer class so long as that\n+   * the appropriate cast to/from the custom pointer class so long as that\n    * class meets the following conditions:\n    * 1) has a typedef element_type which names tehe type it points to.\n    * 2) has a get() const method which returns element_type*."}, {"sha": "3e29fed57d268b692efdd4118f6f93ceb60675d5", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -144,7 +144,7 @@ namespace __cxxabiv1\n   void\n   __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));\n \n-  // Exception handling auxillary.\n+  // Exception handling auxiliary.\n   void \n   __cxa_bad_cast() __attribute__((__noreturn__));\n "}, {"sha": "c2423bd74caa16115d270f71ff7a931f15ab6621", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_illegal_resize.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -38,7 +38,7 @@\n \n /**\n  * This example shows the case where a hash-based container object is\n- * resized to a value which it cannot accomodate at runtime. Illegal\n+ * resized to a value which it cannot accommodate at runtime. Illegal\n  * runtime resizes cause an exception.\n  */\n "}, {"sha": "44e1a46bdbd804f20fa5880043cbcd936d426459", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/testcase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2Ftestcase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2Ftestcase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2Ftestcase.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -21,7 +21,7 @@\n \n //\n //  These are little PODs for special function inputs and\n-//  expexted results for the testsuite.\n+//  expected results for the testsuite.\n //\n \n //  5.2.1.1  Associated Laguerre polynomials."}, {"sha": "eaefc9394cb05bb583b1688f10573f0d5b97dd24", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -1198,7 +1198,7 @@ namespace __gnu_test\n \t  try\n \t    {\n \t      // An exception while assigning might leave the container empty\n-\t      // making future attemps less relevant. So we copy it before to\n+\t      // making future attempts less relevant. So we copy it before to\n \t      // always assign to a non empty container. It also check for copy\n \t      // constructor exception safety at the same time.\n \t      _Tp __clone(__container);"}, {"sha": "e8f7e2d2d7e8806b13be144dc17e76869b522b0a", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -255,7 +255,7 @@ template<typename _Tp>\n   void \n   linkage_check_cxx98_cxx11_erase(_Tp& container)\n   {\n-    // Crashing when exteral reference and internal reference symbols are\n+    // Crashing when external reference and internal reference symbols are\n     // equivalently mangled but have different size return types in C++98\n     // and C++11 signatures.\n     erase_external(container); \t\t// C++98\n@@ -266,7 +266,7 @@ template<typename _Tp>\n   void \n   linkage_check_cxx98_cxx11_erase_iterators(_Tp& container)\n   {\n-    // Crashing when exteral reference and internal reference symbols are\n+    // Crashing when external reference and internal reference symbols are\n     // equivalently mangled but have different size return types in C++98\n     // and C++11 signatures.\n     erase_external_iterators(container);// C++98"}, {"sha": "20fedbc3fc90856c4f7c3d2f6d0daa254e58c123", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e1ab11680d7fe72372d70add25ee519406d3d1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc?ref=64e1ab11680d7fe72372d70add25ee519406d3d1", "patch": "@@ -237,7 +237,7 @@ namespace __gnu_test\n   semaphore::semaphore() \n   {\n #ifdef _GLIBCXX_SYSV_SEM\n-    // Remeber the PID for the process that created the semaphore set\n+    // Remember the PID for the process that created the semaphore set\n     // so that only one process will destroy the set.\n     pid_ = getpid();\n "}]}