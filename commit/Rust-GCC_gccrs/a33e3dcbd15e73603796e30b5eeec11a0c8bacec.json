{"sha": "a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "node_id": "C_kwDOANBUbNoAKGEzM2UzZGNiZDE1ZTczNjAzNzk2ZTMwYjVlZWVjMTFhMGM4YmFjZWM", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-13T21:05:04Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-13T21:09:12Z"}, "message": "RA: Clear reg equiv caller_save_p flag when clearing defined_p flag\n\nIRA can invalidate initially setup equivalence in setup_reg_equiv.\nFlag caller_saved was not cleared during invalidation although\ninit_insns were cleared.  It resulted in segmentation fault in\nget_equiv.  Clearing the flag solves the problem.  For more\nprecaution I added clearing the flag in other places too although it\nmight be not necessary.\n\n        PR rtl-optimization/108774\n\ngcc/ChangeLog:\n\n\t* ira.cc (ira_update_equiv_info_by_shuffle_insn): Clear equiv\n\tcaller_save_p flag when clearing defined_p flag.\n\t(setup_reg_equiv): Ditto.\n\t* lra-constraints.cc (lra_constraints): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr108774.c: New.", "tree": {"sha": "40cb5595c5aa328ac6e3409ab809e247d1413281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40cb5595c5aa328ac6e3409ab809e247d1413281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce7e2a83e18a27fe9c659f8667fc24f0df4ea9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce7e2a83e18a27fe9c659f8667fc24f0df4ea9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce7e2a83e18a27fe9c659f8667fc24f0df4ea9a"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "6c7f4901e4cceb985f8d91087cd4da4a611d22b3", "filename": "gcc/ira.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Fira.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Fira.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.cc?ref=a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "patch": "@@ -2725,6 +2725,7 @@ ira_update_equiv_info_by_shuffle_insn (int to_regno, int from_regno, rtx_insn *i\n \t  return;\n \t}\n       ira_reg_equiv[to_regno].defined_p = false;\n+      ira_reg_equiv[to_regno].caller_save_p = false;\n       ira_reg_equiv[to_regno].memory\n \t= ira_reg_equiv[to_regno].constant\n \t= ira_reg_equiv[to_regno].invariant\n@@ -4193,6 +4194,7 @@ setup_reg_equiv (void)\n \t\t\tif (ira_reg_equiv[i].memory == NULL_RTX)\n \t\t\t  {\n \t\t\t    ira_reg_equiv[i].defined_p = false;\n+\t\t\t    ira_reg_equiv[i].caller_save_p = false;\n \t\t\t    ira_reg_equiv[i].init_insns = NULL;\n \t\t\t    break;\n \t\t\t  }\n@@ -4203,6 +4205,7 @@ setup_reg_equiv (void)\n \t      }\n \t  }\n \tira_reg_equiv[i].defined_p = false;\n+\tira_reg_equiv[i].caller_save_p = false;\n \tira_reg_equiv[i].init_insns = NULL;\n \tbreak;\n       }"}, {"sha": "dbfaf0485a5a2d0d354f652ced022668da0dbc39", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "patch": "@@ -5100,7 +5100,8 @@ lra_constraints (bool first_p)\n \t\t\t && (targetm.preferred_reload_class\n \t\t\t     (x, lra_get_allocno_class (i)) == NO_REGS))\n \t\t\t|| contains_symbol_ref_p (x))))\n-\t      ira_reg_equiv[i].defined_p = false;\n+\t      ira_reg_equiv[i].defined_p\n+\t\t= ira_reg_equiv[i].caller_save_p = false;\n \t    if (contains_reg_p (x, false, true))\n \t      ira_reg_equiv[i].profitable_p = false;\n \t    if (get_equiv (reg) != reg)"}, {"sha": "482bc490cdeff0327255b4a96fc68354a5ed6dde", "filename": "gcc/testsuite/gcc.target/i386/pr108774.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108774.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33e3dcbd15e73603796e30b5eeec11a0c8bacec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108774.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108774.c?ref=a33e3dcbd15e73603796e30b5eeec11a0c8bacec", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/108774 */\n+/* { dg-do compile  { target x86_64-*-* } } */\n+/* { dg-options \"-Os -ftrapv -mcmodel=large\" } */\n+\n+int i, j;\n+\n+void\n+foo (void)\n+{\n+  i = ((1 << j) - 1) >> j;\n+}"}]}