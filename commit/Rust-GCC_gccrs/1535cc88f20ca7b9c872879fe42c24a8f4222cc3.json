{"sha": "1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzNWNjODhmMjBjYTdiOWM4NzI4NzlmZTQyYzI0YThmNDIyMmNjMw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-20T22:56:14Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-20T22:56:14Z"}, "message": "jv-scan.c (help): Document --complexity.\n\n\t* jv-scan.c (help): Document --complexity.\n\t(options): Added --complexity.\n\t(flag_complexity): New global.\n\t(main): Call `report'.\n\t* parse-scan.y (complexity): New global.\n\t(if_then_statement, if_then_else_statement,\n\tif_then_else_statement_nsi, switch_block_statement_group,\n\twhile_expression, do_statement, for_begin, continue_statement,\n\tthrow_statement, catch_clause, finally, method_invocation,\n\tconditional_and_expression, conditional_or_expression,\n\tconditional_expression): Update complexity.\n\t(reset_report): Reset complexity.\n\t(report): New function.\n\nFrom-SVN: r37595", "tree": {"sha": "158d5ceeea8eedf88fb1e8dfb9d60f780c6684e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/158d5ceeea8eedf88fb1e8dfb9d60f780c6684e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/comments", "author": null, "committer": null, "parents": [{"sha": "d828bc4251657e7064abb66cd50ed7fa7a131a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d828bc4251657e7064abb66cd50ed7fa7a131a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d828bc4251657e7064abb66cd50ed7fa7a131a25"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "8d233cd778f8813c8f0972619af238aed392d343", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "patch": "@@ -1,3 +1,19 @@\n+2000-11-20  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* jv-scan.c (help): Document --complexity.\n+\t(options): Added --complexity.\n+\t(flag_complexity): New global.\n+\t(main): Call `report'.\n+\t* parse-scan.y (complexity): New global.\n+\t(if_then_statement, if_then_else_statement,\n+\tif_then_else_statement_nsi, switch_block_statement_group,\n+\twhile_expression, do_statement, for_begin, continue_statement,\n+\tthrow_statement, catch_clause, finally, method_invocation,\n+\tconditional_and_expression, conditional_or_expression,\n+\tconditional_expression): Update complexity.\n+\t(reset_report): Reset complexity.\n+\t(report): New function.\n+\n 2000-11-20  Tom Tromey  <tromey@cygnus.com>\n \n \t* lex.c (yylex): Added STRICT_TK case."}, {"sha": "e1ef70a4b2997b577c76cef3be48e489249df579", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "patch": "@@ -39,6 +39,7 @@ Boston, MA 02111-1307, USA.  */\n void fatal PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void warning PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n void gcc_obstack_init PARAMS ((struct obstack *obstack));\n+void report PARAMS ((void));\n \n static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n@@ -61,6 +62,7 @@ char *exec_name;\n int flag_find_main = 0;\n int flag_dump_class = 0;\n int flag_list_filename = 0;\n+int flag_complexity = 0;\n \n int pedantic = 0;\n \n@@ -81,6 +83,7 @@ static struct option options[] =\n   { \"list-filename\", no_argument,   &flag_list_filename, 1 },\n   { \"list-class\", no_argument,      &flag_dump_class, 1 },\n   { \"encoding\",  required_argument, NULL, OPT_ENCODING },\n+  { \"complexity\", no_argument,\t    &flag_complexity, 1 },\n   { NULL,        no_argument,       NULL, 0 }\n };\n \n@@ -96,6 +99,7 @@ help ()\n {\n   printf (\"Usage: jv-scan [OPTION]... FILE...\\n\\n\");\n   printf (\"Print useful information read from Java source files.\\n\\n\");\n+  printf (\"  --complexity            Print cyclomatic complexity of input file\\n\");\n   printf (\"  --encoding NAME         Specify encoding of input file\\n\");\n   printf (\"  --print-main            Print name of class containing `main'\\n\");\n   printf (\"  --list-class            List all classes defined in file\\n\");\n@@ -169,12 +173,12 @@ DEFUN (main, (argc, argv),\n     }\n \n   /* No flags? Do nothing */\n-  if (!flag_find_main && !flag_dump_class)\n+  if (! flag_find_main && ! flag_dump_class && ! flag_complexity)\n     return 0;\n \n   /* Check on bad usage */\n-  if (flag_find_main && flag_dump_class)\n-    fatal (\"Options `--print-main' and `--list-class' can't be turned on at the same time\");\n+  if (flag_find_main + flag_dump_class + flag_complexity > 1)\n+    fatal (\"Only one of `--print-main', `--list-class', and `--complexity' allowed\");\n \n   if (output_file && !(out = fopen (output_file, \"w\")))\n     fatal (\"Can't open output file `%s'\", output_file);\n@@ -205,6 +209,7 @@ DEFUN (main, (argc, argv),\n \n \t    java_init_lex (finput, encoding);\n \t    yyparse ();\n+\t    report ();\n \t    if (ftell (out) != ft)\n \t      fputc ('\\n', out);\n \t    ft = ftell (out);"}, {"sha": "20522da4e37421a0b18ae5f4b15bf44e48308cd2", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1535cc88f20ca7b9c872879fe42c24a8f4222cc3/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=1535cc88f20ca7b9c872879fe42c24a8f4222cc3", "patch": "@@ -75,6 +75,9 @@ static int previous_output;\n /* Record modifier uses  */\n static int modifier_value;\n \n+/* Record (almost) cyclomatic complexity.  */\n+static int complexity; \n+\n /* Keeps track of number of bracket pairs after a variable declarator\n    id.  */\n static int bracket_count; \n@@ -101,6 +104,8 @@ static void report_main_declaration PARAMS ((struct method_declarator *));\n static void push_class_context PARAMS ((const char *));\n static void pop_class_context PARAMS ((void));\n \n+void report PARAMS ((void)); \n+\n #include \"lex.h\"\n #include \"parse.h\"\n %}\n@@ -727,15 +732,17 @@ statement_expression:\n ;\n \n if_then_statement:\n-\tIF_TK OP_TK expression CP_TK statement\n+\tIF_TK OP_TK expression CP_TK statement { ++complexity; }\n ;\n \n if_then_else_statement:\n \tIF_TK OP_TK expression CP_TK statement_nsi ELSE_TK statement\n+\t{ ++complexity; }\n ;\n \n if_then_else_statement_nsi:\n \tIF_TK OP_TK expression CP_TK statement_nsi ELSE_TK statement_nsi\n+\t{ ++complexity; }\n ;\n \n switch_statement:\n@@ -755,7 +762,7 @@ switch_block_statement_groups:\n ;\n \n switch_block_statement_group:\n-\tswitch_labels block_statements\n+\tswitch_labels block_statements { ++complexity; }\n ;\n \n \n@@ -770,7 +777,7 @@ switch_label:\n ;\n \n while_expression:\n-\tWHILE_TK OP_TK expression CP_TK\n+\tWHILE_TK OP_TK expression CP_TK { ++complexity; }\n ;\n \n while_statement:\n@@ -787,6 +794,7 @@ do_statement_begin:\n \n do_statement: \n \tdo_statement_begin statement WHILE_TK OP_TK expression CP_TK SC_TK\n+\t{ ++complexity; }\n ;\n \n for_statement:\n@@ -804,7 +812,7 @@ for_header:\n ;\n \n for_begin:\n-\tfor_header for_init\n+\tfor_header for_init { ++complexity; }\n ;\n for_init:\t\t\t/* Can be empty */\n |\tstatement_expression_list\n@@ -825,9 +833,11 @@ break_statement:\n |\tBREAK_TK identifier SC_TK\n ;\n \n+/* `continue' with a label is considered for complexity but ordinary\n+   continue is not.  */\n continue_statement:\n \tCONTINUE_TK SC_TK\n-|       CONTINUE_TK identifier SC_TK\n+\t|       CONTINUE_TK identifier SC_TK { ++complexity; }\n ;\n \n return_statement:\n@@ -836,7 +846,7 @@ return_statement:\n ;\n \n throw_statement:\n-\tTHROW_TK expression SC_TK\n+\tTHROW_TK expression SC_TK { ++complexity; }\n ;\n \n synchronized_statement:\n@@ -861,11 +871,11 @@ catches:\n ;\n \n catch_clause:\n-\tCATCH_TK OP_TK formal_parameter CP_TK block\n+\tCATCH_TK OP_TK formal_parameter CP_TK block { ++complexity; }\n ;\n \n finally:\n-\tFINALLY_TK block\n+\tFINALLY_TK block { ++complexity; }\n ;\n \n /* 19.12 Production from 15: Expressions  */\n@@ -958,15 +968,18 @@ field_access:\n |\tSUPER_TK DOT_TK identifier\n ;\n \n+/* We include method invocation in the complexity measure on the\n+   theory that most method calls are virtual and therefore involve a\n+   decision point.  */\n method_invocation:\n \tname OP_TK CP_TK\n-\t\t{ USE_ABSORBER; }\n+\t\t{ USE_ABSORBER; ++complexity; }\n |\tname OP_TK argument_list CP_TK\n-\t\t{ USE_ABSORBER; }\n-|\tprimary DOT_TK identifier OP_TK CP_TK\n-|\tprimary DOT_TK identifier OP_TK argument_list CP_TK\n-|\tSUPER_TK DOT_TK identifier OP_TK CP_TK\n-|\tSUPER_TK DOT_TK identifier OP_TK argument_list CP_TK\n+\t\t{ USE_ABSORBER; ++complexity; }\n+|\tprimary DOT_TK identifier OP_TK CP_TK { ++complexity; }\n+|\tprimary DOT_TK identifier OP_TK argument_list CP_TK { ++complexity; }\n+|\tSUPER_TK DOT_TK identifier OP_TK CP_TK { ++complexity; }\n+|\tSUPER_TK DOT_TK identifier OP_TK argument_list CP_TK { ++complexity; }\n ;\n \n array_access:\n@@ -1074,16 +1087,19 @@ inclusive_or_expression:\n conditional_and_expression:\n \tinclusive_or_expression\n |\tconditional_and_expression BOOL_AND_TK inclusive_or_expression\n+\t{ ++complexity; }\n ;\n \n conditional_or_expression:\n \tconditional_and_expression\n |\tconditional_or_expression BOOL_OR_TK conditional_and_expression\n+\t{ ++complexity; }\n ;\n \n conditional_expression:\t\t/* Error handling here is weak */\n \tconditional_or_expression\n |\tconditional_or_expression REL_QM_TK expression REL_CL_TK conditional_expression\n+\t{ ++complexity; }\n ;\n \n assignment_expression:\n@@ -1238,13 +1254,22 @@ report_main_declaration (declarator)\n     }\n }\n \n+void\n+report ()\n+{\n+  extern int flag_complexity;\n+  if (flag_complexity)\n+    fprintf (out, \"%s %d\\n\", input_filename, complexity);\n+}\n+\n /* Reset global status used by the report functions.  */\n \n void reset_report ()\n {\n   previous_output = 0;\n   package_name = NULL;\n   current_class = NULL;\n+  complexity = 0;\n }\n \n void"}]}