{"sha": "233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzODExNTU5YWQzYjg5ZTk5NGNkMGY1YzZmMDllY2MxZDliYjliZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-31T20:26:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-31T20:26:07Z"}, "message": "cp-tree.h (CLASSTYPE_VBASECLASSES): Update documentation.\n\n\t* cp-tree.h (CLASSTYPE_VBASECLASSES): Update documentation.\n\t(CLASSTYPE_N_BASECLASSES): Likewise.\n\t(BINFO_FOR_VBASE): New macro.\n\t(get_vbase_types): Change prototype.\n\t* class.c (build_vbase_path): Use BINFO_FOR_VBASE.\n\t(prepare_fresh_vtable): Likewise.\n\t(finish_vtbls): Likewise.\n\t(get_class_offset_1): Likewise.\n\t(modify_all_indirect_vtables): Likewise.\n\t(build_vbase_pointer_fields): Likewise.\n\t* decl.c (xref_basetypes): Don't set CLASSTYPE_VBASECLASSES here.\n\t* init.c (sort_base_init): Use BINFO_FOR_VBASE.\n\t(expand_member_init): Likewise.\n\t* search.c (get_base_distance): Likewise.\n\t(lookup_field_queue_p): Likewise.\n\t(virtual_context): Likewise.\n\t(get_vbase_types): Don't return a value.  Set\n\tCLASSTYPE_VBASECLASSES here.\n\t* typeck.c (get_delta_difference): Use BINFO_FOR_VBASE.\n\nFrom-SVN: r31150", "tree": {"sha": "3ecc620b71d50e42a7df478679c7d85a735fc9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ecc620b71d50e42a7df478679c7d85a735fc9fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/comments", "author": null, "committer": null, "parents": [{"sha": "8b4d03b1f9a01f5fe3840662b1c6f0d27cc1578a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4d03b1f9a01f5fe3840662b1c6f0d27cc1578a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4d03b1f9a01f5fe3840662b1c6f0d27cc1578a"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "cd44cf9d76498f3252b3f4931bcfa88dc551dfae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -1,3 +1,25 @@\n+1999-12-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (CLASSTYPE_VBASECLASSES): Update documentation.\n+\t(CLASSTYPE_N_BASECLASSES): Likewise.\n+\t(BINFO_FOR_VBASE): New macro.\n+\t(get_vbase_types): Change prototype.\n+\t* class.c (build_vbase_path): Use BINFO_FOR_VBASE.\n+\t(prepare_fresh_vtable): Likewise.\n+\t(finish_vtbls): Likewise.\n+\t(get_class_offset_1): Likewise.\n+\t(modify_all_indirect_vtables): Likewise.\n+\t(build_vbase_pointer_fields): Likewise.\n+\t* decl.c (xref_basetypes): Don't set CLASSTYPE_VBASECLASSES here.\n+\t* init.c (sort_base_init): Use BINFO_FOR_VBASE.\n+\t(expand_member_init): Likewise.\n+\t* search.c (get_base_distance): Likewise.\n+\t(lookup_field_queue_p): Likewise.\n+\t(virtual_context): Likewise.\n+\t(get_vbase_types): Don't return a value.  Set\n+\tCLASSTYPE_VBASECLASSES here.\n+\t* typeck.c (get_delta_difference): Use BINFO_FOR_VBASE.\n+\t\n 1999-12-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (fixup_inline_methods): Clear CLASSTYPE_INLINE_FRIENDS."}, {"sha": "10dff6e657a9c7acb2222cf252577115d887bc48", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -331,8 +331,8 @@ build_vbase_path (code, type, expr, path, nonnull)\n     {\n       if (last_virtual)\n \t{\n-\t  offset = BINFO_OFFSET (binfo_member (last_virtual,\n-\t\t\t\t\t       CLASSTYPE_VBASECLASSES (basetype)));\n+\t  offset = BINFO_OFFSET (BINFO_FOR_VBASE (last_virtual, \n+\t\t\t\t\t\t  basetype));\n \t  offset = size_binop (PLUS_EXPR, offset, BINFO_OFFSET (last));\n \t}\n       else\n@@ -884,8 +884,7 @@ prepare_fresh_vtable (binfo, for_type)\n \n   if (TREE_VIA_VIRTUAL (binfo))\n     {\n-      tree binfo1 = binfo_member (BINFO_TYPE (binfo), \n-\t\t\t\t  CLASSTYPE_VBASECLASSES (for_type));\n+      tree binfo1 = BINFO_FOR_VBASE (BINFO_TYPE (binfo), for_type);\n \n       /* XXX - This should never happen, if it does, the caller should\n \t ensure that the binfo is from for_type's binfos, not from any\n@@ -911,8 +910,8 @@ prepare_fresh_vtable (binfo, for_type)\n   import_export_vtable (new_decl, for_type, 0);\n \n   if (TREE_VIA_VIRTUAL (binfo))\n-    my_friendly_assert (binfo == binfo_member (BINFO_TYPE (binfo),\n-\t\t\t\t   CLASSTYPE_VBASECLASSES (current_class_type)),\n+    my_friendly_assert (binfo == BINFO_FOR_VBASE (BINFO_TYPE (binfo),\n+\t\t\t\t\t\t  current_class_type),\n \t\t\t170);\n   SET_BINFO_NEW_VTABLE_MARKED (binfo);\n }\n@@ -2321,8 +2320,7 @@ finish_vtbls (binfo, do_self, t)\n       int is_not_base_vtable\n \t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (TREE_VIA_VIRTUAL (base_binfo))\n-\tbase_binfo = binfo_member (BINFO_TYPE (base_binfo), \n-\t\t\t\t   CLASSTYPE_VBASECLASSES (t));\n+\tbase_binfo = BINFO_FOR_VBASE (BINFO_TYPE (base_binfo), t);\n       finish_vtbls (base_binfo, is_not_base_vtable, t);\n     }\n }\n@@ -2375,8 +2373,7 @@ get_class_offset_1 (parent, binfo, context, t, fndecl)\n       tree nrval;\n \n       if (TREE_VIA_VIRTUAL (base_binfo))\n-\tbase_binfo = binfo_member (BINFO_TYPE (base_binfo),\n-\t\t\t\t   CLASSTYPE_VBASECLASSES (t));\n+\tbase_binfo = BINFO_FOR_VBASE (BINFO_TYPE (base_binfo), t);\n       nrval = get_class_offset_1 (parent, base_binfo, context, t, fndecl);\n       /* See if we have a new value */\n       if (nrval && (nrval != error_mark_node || rval==0))\n@@ -2699,7 +2696,7 @@ modify_all_indirect_vtables (binfo, do_self, via_virtual, t, fndecl)\n       if (TREE_VIA_VIRTUAL (base_binfo))\n \t{\n \t  via_virtual = 1;\n-\t  base_binfo = binfo_member (BINFO_TYPE (base_binfo), CLASSTYPE_VBASECLASSES (t));\n+\t  base_binfo = BINFO_FOR_VBASE (BINFO_TYPE (base_binfo), t);\n \t}\n       modify_all_indirect_vtables (base_binfo, is_not_base_vtable, via_virtual, t, fndecl);\n     }\n@@ -3769,10 +3766,7 @@ build_vbase_pointer_fields (rec, empty_p)\n \t    {\n \t      tree other_base_binfo = TREE_VEC_ELT (binfos, j);\n \t      if (! TREE_VIA_VIRTUAL (other_base_binfo)\n-\t\t  && binfo_member (basetype,\n-\t\t\t\t   CLASSTYPE_VBASECLASSES (BINFO_TYPE\n-\t\t\t\t\t\t\t   (other_base_binfo))\n-\t\t\t\t   ))\n+\t\t  && BINFO_FOR_VBASE (basetype, BINFO_TYPE (other_base_binfo)))\n \t\tgoto got_it;\n \t    }\n \t  FORMAT_VBASE_NAME (name, basetype);"}, {"sha": "3b3596f98ce3f47d79fcbe0d7714152f0dc76f8b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -1406,16 +1406,22 @@ struct lang_type\n /* The number of virtual functions defined for this\n    _CLASSTYPE node.  */\n #define CLASSTYPE_VSIZE(NODE) (TYPE_LANG_SPECIFIC(NODE)->vsize)\n-/* The direct and indirect virtual base classes that this type uses in\n-   depth-first left-to-right order.  */\n+\n+/* A chain of BINFOs for the direct and indirect virtual base classes\n+   that this type uses in depth-first left-to-right order.  */\n #define CLASSTYPE_VBASECLASSES(NODE) (TYPE_LANG_SPECIFIC(NODE)->vbases)\n+\n+/* The BINFO (if any) for the virtual baseclass T of the class C.  */\n+#define BINFO_FOR_VBASE(T, C) \\\n+  (binfo_member (T, CLASSTYPE_VBASECLASSES (C)))\n+\n /* The virtual function pointer fields that this type contains.  */\n #define CLASSTYPE_VFIELDS(NODE) (TYPE_LANG_SPECIFIC(NODE)->vfields)\n \n-/* Number of baseclasses defined for this type.\n-   0 means no base classes.  */\n+/* Number of direct baseclasses of NODE.  */\n #define CLASSTYPE_N_BASECLASSES(NODE) \\\n-  (TYPE_BINFO_BASETYPES (NODE) ? TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES(NODE)) : 0)\n+  (TYPE_BINFO_BASETYPES (NODE) ? \\\n+   TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES(NODE)) : 0)\n \n /* Used for keeping search-specific information.  Any search routine\n    which uses this must define what exactly this slot is used for.  */\n@@ -3877,7 +3883,7 @@ extern void get_pure_virtuals\t\t        PROTO((tree));\n extern tree init_vbase_pointers\t\t\tPROTO((tree, tree));\n extern void expand_indirect_vtbls_init\t\tPROTO((tree, tree, tree));\n extern void clear_search_slots\t\t\tPROTO((tree));\n-extern tree get_vbase_types\t\t\tPROTO((tree));\n+extern void get_vbase_types\t\t\tPROTO((tree));\n extern void maybe_suppress_debug_info\t\tPROTO((tree));\n extern void note_debug_info_needed\t\tPROTO((tree));\n extern void push_class_decls\t\t\tPROTO((tree));"}, {"sha": "f0b7f8acab2954f0fb3a44ecb58d2e9cc6fcf6d8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -12522,7 +12522,7 @@ xref_basetypes (code_type_node, name, ref, binfo)\n \n   /* Now that we know all the base-classes, set up the list of virtual\n      bases.  */\n-  CLASSTYPE_VBASECLASSES (ref) = get_vbase_types (ref);\n+  get_vbase_types (ref);\n }\n   \n \f"}, {"sha": "893ee545688327fb8e3e354de399e3a1babc65d6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -388,10 +388,7 @@ sort_base_init (t, rbase_ptr, vbase_ptr)\n \t     this constructor is the top-level constructor called.  */\n \t  if (TREE_VIA_VIRTUAL (binfo))\n \t    {\n-\t      tree v = CLASSTYPE_VBASECLASSES (t);\n-\t      while (BINFO_TYPE (v) != BINFO_TYPE (binfo))\n-\t\tv = TREE_CHAIN (v);\n-\n+\t      tree v = BINFO_FOR_VBASE (BINFO_TYPE (binfo), t);\n \t      vbases = tree_cons (v, TREE_VALUE (x), vbases);\n \t      continue;\n \t    }\n@@ -916,7 +913,7 @@ expand_member_init (exp, name, init)\n \t       && ! current_template_parms\n \t       && ! vec_binfo_member (basetype,\n \t\t\t\t      TYPE_BINFO_BASETYPES (type))\n-\t       && ! binfo_member (basetype, CLASSTYPE_VBASECLASSES (type)))\n+\t       && ! BINFO_FOR_VBASE (basetype, type))\n \t{\n \t  if (IDENTIFIER_CLASS_VALUE (name))\n \t    goto try_member;"}, {"sha": "798099a4d9efd7ffd626c350a18ded2faa07c3b7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -485,8 +485,7 @@ get_base_distance (parent, binfo, protect, path_ptr)\n      tree, deal with it.  This happens when we are called from\n      expand_upcast_fixups.  */\n   if (rval == -1 && TREE_CODE (parent) == TREE_VEC\n-      && parent == binfo_member (BINFO_TYPE (parent),\n-\t\t\t\t CLASSTYPE_VBASECLASSES (type)))\n+      && parent == BINFO_FOR_VBASE (BINFO_TYPE (parent), type))\n     {\n       my_friendly_assert (BINFO_INHERITANCE_CHAIN (parent) == binfo, 980827);\n       new_binfo = parent;\n@@ -1287,8 +1286,7 @@ lookup_field_queue_p (binfo, data)\n     return NULL_TREE;\n \n   if (TREE_VIA_VIRTUAL (binfo))\n-    return binfo_member (BINFO_TYPE (binfo),\n-\t\t\t CLASSTYPE_VBASECLASSES (lfi->type));\n+    return BINFO_FOR_VBASE (BINFO_TYPE (binfo), lfi->type);\n   else\n     return binfo;\n }\n@@ -2557,7 +2555,7 @@ virtual_context (fndecl, t, vbase)\n \t      /* Not sure if checking path == vbase is necessary here, but just in\n \t\t case it is.  */\n \t      if (TREE_VIA_VIRTUAL (path) || path == vbase)\n-\t\treturn binfo_member (BINFO_TYPE (path), CLASSTYPE_VBASECLASSES (t));\n+\t\treturn BINFO_FOR_VBASE (BINFO_TYPE (path), t);\n \t      path = BINFO_INHERITANCE_CHAIN (path);\n \t    }\n \t}\n@@ -2886,7 +2884,7 @@ dfs_get_vbase_types (binfo, data)\n    depth-first search order.  The list is freshly allocated, so\n    no modification is made to  the current binfo hierarchy.  */\n \n-tree\n+void\n get_vbase_types (type)\n      tree type;\n {\n@@ -2906,7 +2904,7 @@ get_vbase_types (type)\n   for (vbases = vbase_types; vbases; vbases = TREE_CHAIN (vbases))\n     CLEAR_BINFO_VBASE_MARKED (vbases);\n \n-  return vbase_types;\n+  CLASSTYPE_VBASECLASSES (type) = vbase_types;\n }\n \f\n /* Debug info for C++ classes can get very large; try to avoid"}, {"sha": "808d702141cacb6cf85c43f59e04fc7d4ca5c452", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233811559ad3b89e994cd0f5c6f09ecc1d9bb9be/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=233811559ad3b89e994cd0f5c6f09ecc1d9bb9be", "patch": "@@ -6045,8 +6045,7 @@ get_delta_difference (from, to, force)\n \treturn delta;\n       if (binfo_from_vbase (binfo))\n \t{\n-\t  binfo = binfo_member (BINFO_TYPE (binfo),\n-\t\t\t\tCLASSTYPE_VBASECLASSES (from));\n+\t  binfo = BINFO_FOR_VBASE (BINFO_TYPE (binfo), from);\n \t  cp_warning (\"pointer to member cast to virtual base `%T'\",\n \t\t      BINFO_TYPE (binfo));\n \t  warning (\"  will only work if you are very careful\");"}]}