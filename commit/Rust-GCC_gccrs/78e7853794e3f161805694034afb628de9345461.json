{"sha": "78e7853794e3f161805694034afb628de9345461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlNzg1Mzc5NGUzZjE2MTgwNTY5NDAzNGFmYjYyOGRlOTM0NTQ2MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-08T19:13:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-08T19:13:04Z"}, "message": "c-parse.in: Take string literals in assembler constructs, not expressions.\n\n\t* c-parse.in: Take string literals in assembler constructs,\n\tnot expressions.\n\t* c-typeck.c (build_asm_stmt, simple_asm_stmt): No need to\n\tcheck the strings are STRING_CSTs.\n\nFrom-SVN: r47795", "tree": {"sha": "9dd5e947d351d17759c2d2a3ed6897d33603a496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dd5e947d351d17759c2d2a3ed6897d33603a496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e7853794e3f161805694034afb628de9345461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7853794e3f161805694034afb628de9345461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e7853794e3f161805694034afb628de9345461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7853794e3f161805694034afb628de9345461/comments", "author": null, "committer": null, "parents": [{"sha": "46af705afa95d7876d1048e8425b1180acd238a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46af705afa95d7876d1048e8425b1180acd238a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46af705afa95d7876d1048e8425b1180acd238a6"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "d66fb52f7ef825d1ca3585dac2ccc70728606fe0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7853794e3f161805694034afb628de9345461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7853794e3f161805694034afb628de9345461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e7853794e3f161805694034afb628de9345461", "patch": "@@ -1,3 +1,10 @@\n+2001-12-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-parse.in: Take string literals in assembler constructs,\n+\tnot expressions.\n+\t* c-typeck.c (build_asm_stmt, simple_asm_stmt): No need to\n+\tcheck the strings are STRING_CSTs.\n+\n 2001-12-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c (c_lex): Peek a token ahead for a string to concatenate,"}, {"sha": "324300d00e88ce15732083ae33494319ca454d14", "filename": "gcc/c-parse.in", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7853794e3f161805694034afb628de9345461/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7853794e3f161805694034afb628de9345461/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=78e7853794e3f161805694034afb628de9345461", "patch": "@@ -99,7 +99,7 @@ end ifobjc\n    yylval is the node for the constant.  */\n %token CONSTANT\n \n-/* String constants as arrays of the appropriate character type.  */\n+/* A STRING_CST with type an array of the appropriate character type.  */\n %token STRING OBJC_STRING\n \n /* \"...\", used for functions with variable arglists.  */\n@@ -348,14 +348,8 @@ extdef:\n ifobjc\n \t| objcdef\n end ifobjc\n-\t| ASM_KEYWORD '(' expr ')' ';'\n-\t\t{ STRIP_NOPS ($3);\n-\t\t  if ((TREE_CODE ($3) == ADDR_EXPR\n-\t\t       && TREE_CODE (TREE_OPERAND ($3, 0)) == STRING_CST)\n-\t\t      || TREE_CODE ($3) == STRING_CST)\n-\t\t    assemble_asm ($3);\n-\t\t  else\n-\t\t    error (\"argument of `asm' is not a constant string\"); }\n+\t| ASM_KEYWORD '(' STRING ')' ';'\n+\t\t{ assemble_asm ($3); }\n \t| extension extdef\n \t\t{ RESTORE_WARN_FLAGS ($1); }\n \t;\n@@ -2306,20 +2300,20 @@ stmt:\n \t| RETURN expr ';'\n                 { stmt_count++;\n \t\t  $$ = c_expand_return ($2); }\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ')' ';'\n+\t| ASM_KEYWORD maybe_type_qual '(' STRING ')' ';'\n \t\t{ stmt_count++;\n \t\t  $$ = simple_asm_stmt ($4); }\n \t/* This is the case with just output operands.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ')' ';'\n+\t| ASM_KEYWORD maybe_type_qual '(' STRING ':' asm_operands ')' ';'\n \t\t{ stmt_count++;\n \t\t  $$ = build_asm_stmt ($2, $4, $6, NULL_TREE, NULL_TREE); }\n \t/* This is the case with input operands as well.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n+\t| ASM_KEYWORD maybe_type_qual '(' STRING ':' asm_operands ':'\n \t  asm_operands ')' ';'\n \t\t{ stmt_count++;\n \t\t  $$ = build_asm_stmt ($2, $4, $6, $8, NULL_TREE); }\n \t/* This is the case with clobbered registers as well.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n+\t| ASM_KEYWORD maybe_type_qual '(' STRING ':' asm_operands ':'\n   \t  asm_operands ':' asm_clobbers ')' ';'\n \t\t{ stmt_count++;\n \t\t  $$ = build_asm_stmt ($2, $4, $6, $8, $10); }"}, {"sha": "a2a06bac7bf3a6f0a47f3921510f8788b4021b2b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7853794e3f161805694034afb628de9345461/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7853794e3f161805694034afb628de9345461/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=78e7853794e3f161805694034afb628de9345461", "patch": "@@ -6820,27 +6820,16 @@ process_init_element (value)\n \f\n /* Build a simple asm-statement, from one string literal.  */\n tree\n-simple_asm_stmt (expr)\n-     tree expr;\n+simple_asm_stmt (string)\n+     tree string;\n {\n-  STRIP_NOPS (expr);\n-\n-  if (TREE_CODE (expr) == ADDR_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+  tree stmt;\n \n-  if (TREE_CODE (expr) == STRING_CST)\n-    {\n-      tree stmt;\n-\n-      stmt = add_stmt (build_stmt (ASM_STMT, NULL_TREE, expr,\n-\t\t\t\t   NULL_TREE, NULL_TREE,\n-\t\t\t\t   NULL_TREE));\n-      ASM_INPUT_P (stmt) = 1;\n-      return stmt;\n-    }\n-\n-  error (\"argument of `asm' is not a constant string\");\n-  return NULL_TREE;\n+  stmt = add_stmt (build_stmt (ASM_STMT, NULL_TREE, string,\n+\t\t\t       NULL_TREE, NULL_TREE,\n+\t\t\t       NULL_TREE));\n+  ASM_INPUT_P (stmt) = 1;\n+  return stmt;\n }\n \n /* Build an asm-statement, whose components are a CV_QUALIFIER, a\n@@ -6856,12 +6845,6 @@ build_asm_stmt (cv_qualifier, string, outputs, inputs, clobbers)\n {\n   tree tail;\n \n-  if (TREE_CODE (string) != STRING_CST)\n-    {\n-      error (\"asm template is not a string constant\");\n-      return NULL_TREE;\n-    }\n-\n   if (cv_qualifier != NULL_TREE\n       && cv_qualifier != ridpointers[(int) RID_VOLATILE])\n     {"}]}