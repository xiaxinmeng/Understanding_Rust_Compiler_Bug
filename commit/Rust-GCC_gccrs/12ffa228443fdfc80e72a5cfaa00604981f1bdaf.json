{"sha": "12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmZmEyMjg0NDNmZGZjODBlNzJhNWNmYWEwMDYwNDk4MWYxYmRhZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-01-30T22:39:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-01-30T22:39:36Z"}, "message": "PR libstdc++/36104 part four\n\n2011-01-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/36104 part four\n\t* include/bits/c++config (_GLIBCXX_STD): Remove.\n\t(_GLIBCXX_STD_D, _GLIBCXX_PR): Now _GLIBCXX_STD_C.\n\t(_GLIBCXX_P): Now _GLIBCXX_STD_A.\n\t(_GLIBCXX_NAMESPACE_DEBUG, _GLIBCXX_NAMESPACE_PARALLEL,\n\t _GLIBCXX_NAMESPACE_PROFILE, _GLIBCXX_NAMESPACE_VERSION): Remove.\n\t(_GLIBCXX_INLINE_DEBUG, _GLIBCXX_INLINE_PARALLEL,\n\t _GLIBCXX_INLINE_PROFILE): Remove.\n\t(_GLIBCXX_BEGIN_NAMESPACE(X)): Remove.\n\t(_GLIBCXX_END_NAMESPACE): Remove.\n\t(_GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y)): Remove.\n\t(_GLIBCXX_END_NESTED_NAMESPACE): Remove.\n\t(_GLIBCXX_BEGIN_NAMESPACE_ALGO): Add.\n\t(_GLIBCXX_END_NAMESPACE_ALGO): Add.\n\t(_GLIBCXX_BEGIN_NAMESPACE_CONTAINER): Add.\n\t(_GLIBCXX_END_NAMESPACE_CONTAINER): Add.\n\t(_GLIBCXX_BEGIN_NAMESPACE_VERSION): Add.\n\t(_GLIBCXX_END_NAMESPACE_VERSION): Add.\n\t(_GLIBCXX_BEGIN_LDBL_NAMESPACE): To _GLIBCXX_BEGIN_NAMESPACE_LDBL.\n\t(_GLIBCXX_END_LDBL_NAMESPACE): To _GLIBCXX_END_NAMESPACE_LDBL.\n\t(_GLIBCXX_VISIBILITY_ATTR): Revert to _GLIBCXX_VISIBILITY.\n\t* include/*: Use new macros for namespace scope.\n\t* config/*: Same.\n\t* src/*: Same.\n\n\t* src/Makefile.am (sources): Remove debug_list.cc, add\n\tcompatibility-debug_list-2.cc.\n\t(parallel_sources): Remove parallel_list.cc, add\n\tcompatibility-parallel_list-2.cc.\n\t(compatibility-parallel_list-2.[o,lo]): New rule.\n\t* src/Makefile.in: Regenerate.\n\t* src/debug_list.cc: Remove.\n\t* src/parallel_list.cc: Remove.\n\t* src/compatibility-list-2.cc: New.\n\t* src/compatibility-debug_list-2.cc: New.\n\t* src/compatibility-parallel_list-2.cc: New.\n\n\t* doc/doxygen/user.cfg.in: Adjust macros.\n\n\t* testsuite/20_util/auto_ptr/assign_neg.cc: Adjust line numbers, macros.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n\t* testsuite/20_util/forward/c_neg.cc: Same.\n\t* testsuite/20_util/forward/f_neg.cc: Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Same.\n\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Same.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Same.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/forward_list/capacity/1.cc: Same.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Same.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Same.\n\t* testsuite/23_containers/list/capacity/29134.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Same.\n\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/25_algorithms/sort/35588.cc: Same.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Same.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Same.\n\t* testsuite/ext/profile/profiler_algos.cc: Same.\n\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Same.\n\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Same.\n\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Same.\n\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Same.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc: Same.\n\nFrom-SVN: r169421", "tree": {"sha": "6d218bc4cbdbfc108085ab6c6b673c951b45797c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d218bc4cbdbfc108085ab6c6b673c951b45797c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/comments", "author": null, "committer": null, "parents": [{"sha": "c4c8962b49da1e2f98eba05f45211ad4b03eabd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c8962b49da1e2f98eba05f45211ad4b03eabd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c8962b49da1e2f98eba05f45211ad4b03eabd8"}], "stats": {"total": 4999, "additions": 3210, "deletions": 1789}, "files": [{"sha": "62bbf8b9452215745a58fd1d9c221d8674dcebd9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 124, "deletions": 29, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,10 +1,105 @@\n+2011-01-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/36104 part four\n+\t* include/bits/c++config (_GLIBCXX_STD): Remove.\n+\t(_GLIBCXX_STD_D, _GLIBCXX_PR): Now _GLIBCXX_STD_C.\n+\t(_GLIBCXX_P): Now _GLIBCXX_STD_A.\n+\t(_GLIBCXX_NAMESPACE_DEBUG, _GLIBCXX_NAMESPACE_PARALLEL,\n+\t _GLIBCXX_NAMESPACE_PROFILE, _GLIBCXX_NAMESPACE_VERSION): Remove.\n+\t(_GLIBCXX_INLINE_DEBUG, _GLIBCXX_INLINE_PARALLEL,\n+\t _GLIBCXX_INLINE_PROFILE): Remove.\n+\t(_GLIBCXX_BEGIN_NAMESPACE(X)): Remove.\n+\t(_GLIBCXX_END_NAMESPACE): Remove.\n+\t(_GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y)): Remove.\n+\t(_GLIBCXX_END_NESTED_NAMESPACE): Remove.\n+\t(_GLIBCXX_BEGIN_NAMESPACE_ALGO): Add.\n+\t(_GLIBCXX_END_NAMESPACE_ALGO): Add.\n+\t(_GLIBCXX_BEGIN_NAMESPACE_CONTAINER): Add.\n+\t(_GLIBCXX_END_NAMESPACE_CONTAINER): Add.\n+\t(_GLIBCXX_BEGIN_NAMESPACE_VERSION): Add.\n+\t(_GLIBCXX_END_NAMESPACE_VERSION): Add.\n+\t(_GLIBCXX_BEGIN_LDBL_NAMESPACE): To _GLIBCXX_BEGIN_NAMESPACE_LDBL.\n+\t(_GLIBCXX_END_LDBL_NAMESPACE): To _GLIBCXX_END_NAMESPACE_LDBL.\n+\t(_GLIBCXX_VISIBILITY_ATTR): Revert to _GLIBCXX_VISIBILITY.\n+\t* include/*: Use new macros for namespace scope.\n+\t* config/*: Same.\n+\t* src/*: Same.\n+\n+\t* src/Makefile.am (sources): Remove debug_list.cc, add\n+\tcompatibility-debug_list-2.cc.\n+\t(parallel_sources): Remove parallel_list.cc, add\n+\tcompatibility-parallel_list-2.cc.\n+\t(compatibility-parallel_list-2.[o,lo]): New rule.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/debug_list.cc: Remove.\n+\t* src/parallel_list.cc: Remove.\n+\t* src/compatibility-list-2.cc: New.\n+\t* src/compatibility-debug_list-2.cc: New.\n+\t* src/compatibility-parallel_list-2.cc: New.\n+\n+\t* doc/doxygen/user.cfg.in: Adjust macros.\n+\n+\t* testsuite/20_util/auto_ptr/assign_neg.cc: Adjust line numbers, macros.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n+\t* testsuite/20_util/forward/c_neg.cc: Same.\n+\t* testsuite/20_util/forward/f_neg.cc: Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Same.\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Same.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Same.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/forward_list/capacity/1.cc: Same.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Same.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Same.\n+\t* testsuite/23_containers/list/capacity/29134.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Same.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/25_algorithms/sort/35588.cc: Same.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Same.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Same.\n+\t* testsuite/ext/profile/profiler_algos.cc: Same.\n+\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Same.\n+\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Same.\n+\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Same.\n+\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Same.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc: Same.\n+\n 2011-01-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/abi.xml: Adjust link to C++ ABI specification.\n \tImprove description of one such reference.\n \n 2011-01-30  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* doc/xml/manual/codecvt.xml: Fix link to The Austin Common\n \tStandards Revision Group.\n \t* doc/xml/manual/locale.xml: Ditto.\n@@ -18,20 +113,20 @@\n \n 2011-01-26  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/numeric (inner_product, partial_sum):\n-        Qualify subsequent call with __gnu_parallel instead of\n-        _GLIBCXX_STD_P to reenable parallel execution without ambiguity.\n-        * include/parallel/algobase.h (equal): Likewise.\n-        * include/parallel/algo.h (find_first_of, search_n, merge,\n-        nth_element, partial_sort, max_element, min_element): Likewise.\n-        * testsuite/25_algorithms/headers/algorithm/\n-        parallel_algorithm_mixed1.cc (main): Add respective test cases.\n-        * testsuite/25_algorithms/headers/algorithm/\n-        parallel_algorithm_mixed2.cc (main): Likewise.\n-        * testsuite/26_numerics/headers/numeric/\n-        parallel_numeric_mixed1.cc (main): Likewise.\n-        * testsuite/26_numerics/headers/numeric/\n-        parallel_numeric_mixed2.cc (main): Likewise.\n+\t* include/parallel/numeric (inner_product, partial_sum):\n+\tQualify subsequent call with __gnu_parallel instead of\n+\t_GLIBCXX_STD_P to reenable parallel execution without ambiguity.\n+\t* include/parallel/algobase.h (equal): Likewise.\n+\t* include/parallel/algo.h (find_first_of, search_n, merge,\n+\tnth_element, partial_sort, max_element, min_element): Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_mixed1.cc (main): Add respective test cases.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_mixed2.cc (main): Likewise.\n+\t* testsuite/26_numerics/headers/numeric/\n+\tparallel_numeric_mixed1.cc (main): Likewise.\n+\t* testsuite/26_numerics/headers/numeric/\n+\tparallel_numeric_mixed2.cc (main): Likewise.\n \n 2011-01-24  Graham Reed  <greed@pobox.com>\n \n@@ -41,23 +136,23 @@\n \n 2011-01-24  Johannes Singler  <singler@kit.edu>\n \n-        PR libstdc++/47433\n-        * include/parallel/losertree.h\n-        (_LoserTree<>::__delete_min_insert):\n-        Do not qualify swap with std:: for value type,\n-        but include a using directive instead.\n-        (_LoserTreeUnguarded<>::__delete_min_insert): Likewise.\n-        * include/parallel/balanced_quicksort.h (__qsb_divide):\n-        Use std::iter_swap instead of std::swap.\n-        (__qsb_local_sort_with_helping): Likewise.\n-        * include/parallel/partition.h (__parallel_partition):\n-        Likewise. (__parallel_nth_element): Likewise.\n+\tPR libstdc++/47433\n+\t* include/parallel/losertree.h\n+\t(_LoserTree<>::__delete_min_insert):\n+\tDo not qualify swap with std:: for value type,\n+\tbut include a using directive instead.\n+\t(_LoserTreeUnguarded<>::__delete_min_insert): Likewise.\n+\t* include/parallel/balanced_quicksort.h (__qsb_divide):\n+\tUse std::iter_swap instead of std::swap.\n+\t(__qsb_local_sort_with_helping): Likewise.\n+\t* include/parallel/partition.h (__parallel_partition):\n+\tLikewise. (__parallel_nth_element): Likewise.\n \n 2011-01-24  Johannes Singler  <singler@kit.edu>\n \n-        PR libstdc++/47437\n-        * include/parallel/multiway_merge.h (_UnguardedIterator):\n-        Remove useless \"mutable\" from reference declaration.\n+\tPR libstdc++/47437\n+\t* include/parallel/multiway_merge.h (_UnguardedIterator):\n+\tRemove useless \"mutable\" from reference declaration.\n \n 2011-01-21  Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "ab9380c3705886ba9b8d3e15da3859f61cc9a53a", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,8 @@ GLIBCXX_5.0 {\n     _ZNSt2_69has_facetINS_*;\n \n     # hash \n-    _ZNSt2_68__detail12__prime_listE;\n+    _ZNSt8__detail2_612__prime_listE;\n+    _ZNSt3tr18__detail2_612__prime_listE;\n \n     # thread/mutex/condition_variable/future\n     __once_proxy;\n@@ -71,6 +72,13 @@ GLIBCXX_5.0 {\n \n     _ZTv0_n*;\n \n+    # std::__detail::_List_node_base\n+    _ZNSt8__detail2_615_List_node_base7_M_hook*;\n+    _ZNSt8__detail2_615_List_node_base9_M_unhookEv;\n+    _ZNSt8__detail2_615_List_node_base10_M_reverseEv;\n+    _ZNSt8__detail2_615_List_node_base11_M_transfer*;\n+    _ZNSt8__detail2_615_List_node_base4swapER*;\n+\n     # std::__convert_to_v\n     _ZNSt2_614__convert_to_v*;\n \n@@ -102,19 +110,6 @@ GLIBCXX_5.0 {\n     _ZN9__gnu_cxx2_618stdio_sync_filebufI[cw]NSt2_611char_traitsI[cw]EEE[5-9]*;\n \n     # debug mode\n-# xxx cxx1998?\n-    _ZN10__gnu_norm15_List_node_base4hook*;\n-    _ZN10__gnu_norm15_List_node_base4swap*;\n-    _ZN10__gnu_norm15_List_node_base6unhookEv;\n-    _ZN10__gnu_norm15_List_node_base7reverseEv;\n-    _ZN10__gnu_norm15_List_node_base8transfer*;\n-\n-    _ZNSt6__norm15_List_node_base4hook*;\n-    _ZNSt6__norm15_List_node_base4swap*;\n-    _ZNSt6__norm15_List_node_base6unhookEv;\n-    _ZNSt6__norm15_List_node_base7reverseEv;\n-    _ZNSt6__norm15_List_node_base8transfer*;\n-\n     _ZN11__gnu_debug19_Safe_sequence_base12_M_get_mutexEv;\n     _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n     _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n@@ -136,6 +131,10 @@ GLIBCXX_5.0 {\n     _ZNK11__gnu_debug16_Error_formatter8_M_error*;\n     _ZNK11__gnu_debug16_Error_formatter17_M_get_max_lengthEv;\n \n+    # parallel mode\n+    _ZN14__gnu_parallel9_Settings3getEv;\n+    _ZN14__gnu_parallel9_Settings3setERS0_;\n+\n   local:\n     *;\n };"}, {"sha": "67571395cc5ecb2edcee8c10ec3697ee8e7e6827", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1199,6 +1199,12 @@ GLIBCXX_3.4.15 {\n     # std::placeholders\n     _ZNSt12placeholders*;\n \n+    _ZNSt8__detail15_List_node_base7_M_hook*;\n+    _ZNSt8__detail15_List_node_base9_M_unhookEv;\n+    _ZNSt8__detail15_List_node_base10_M_reverseEv;\n+    _ZNSt8__detail15_List_node_base11_M_transfer*;\n+    _ZNSt8__detail15_List_node_base4swapERS0_S1_;\n+\n } GLIBCXX_3.4.14;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "148a8b61c12a3d1c29180729ea8a97a8d6ee8a3f", "filename": "libstdc++-v3/config/cpu/cris/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -24,7 +24,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n@@ -83,4 +85,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __exchange_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "581c41fda0de9776e1bb97edbacdfb101585c6e8", "filename": "libstdc++-v3/config/cpu/generic/atomicity_builtins/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -26,7 +26,9 @@\n #include <bits/c++config.h>\n #include <bits/atomic_word.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word \n   __attribute__ ((__unused__))\n@@ -38,4 +40,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __sync_fetch_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "dc0a5a0659545567a268f0d2f85834611c2f1579", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@ namespace\n   }\n } // anonymous namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word\n   __attribute__ ((__unused__))\n@@ -54,4 +56,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __exchange_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "a2ec4f2e97e7f3a55ab7863a6e925943aa1da528", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -25,7 +25,9 @@\n #include <bits/c++config.h>\n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<int _Inst>\n     struct _Atomicity_lock\n@@ -88,4 +90,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "97205e42fe5edebc2c43283989c520ca2df9913c", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -24,7 +24,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<int __inst>\n     struct _Atomicity_lock\n@@ -67,4 +69,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __exchange_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "602cbb7114b05f63bc0112700a49b8f48f9d3749", "filename": "libstdc++-v3/config/cpu/i486/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -24,7 +24,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word \n   __attribute__ ((__unused__))\n@@ -45,5 +47,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t  : \"=m\" (*__mem) : \"ir\" (__val), \"m\" (*__mem));\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n "}, {"sha": "9dfbf00ec969bf6235fdd19ec4aafa8bad52c905", "filename": "libstdc++-v3/config/cpu/ia64/atomic_word.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -29,7 +29,7 @@\n \n typedef int _Atomic_word;\n \n-namespace __gnu_cxx\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n   // Test the first byte of __g and ensure that no loads are hoisted across\n   // the test."}, {"sha": "5711255844b716766240b21d113ea9d97fb9f105", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -24,7 +24,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if ( defined(__mc68020__) || defined(__mc68030__) \\\n       || defined(__mc68040__) || defined(__mc68060__) ) \\\n@@ -126,4 +128,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     __exchange_and_add(__mem, __val);\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ece63ce2a48cc4d07cf8df12b6c512e2c29d7ab4", "filename": "libstdc++-v3/config/cpu/sh/atomicity.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -27,7 +27,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef int _Atomic_word;\n \n@@ -66,7 +68,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t: \"r0\");\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #else /* !__SH4A__ */\n \n@@ -80,7 +83,9 @@ namespace\n   __gnu_cxx::__mutex atomic_mutex;\n } // anonymous namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word\n   __attribute__ ((__unused__))\n@@ -98,6 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __exchange_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* !__SH4A__ */"}, {"sha": "c032e540e350c9186312d382801d97345cfe431f", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -25,7 +25,9 @@\n \n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __arch64__\n   _Atomic_word\n@@ -119,4 +121,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   }  \n #endif /* __arch32__ */\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "1b7e1bba5a9475e8d3e3c1b6033e17ba2dc5eb1b", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -179,7 +179,9 @@ namespace\n } // anonymous namespace\n \n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Definitions for __basic_file<char>.\n   __basic_file<char>::__basic_file(__c_lock* /*__lock*/) throw()\n@@ -378,5 +380,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return 0;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n "}, {"sha": "f543a8976d7c63a1aee2e8c543e8c79253d5fc6b", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <bits/c++io.h>  // for __c_lock and __c_file\n #include <ios>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Generic declaration.\n   template<typename _CharT>\n@@ -103,6 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       showmanyc();\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\t"}, {"sha": "0843df78d59820ac3f5863a51918dd5656d713d7", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,13 +36,16 @@\n #include <cstdio>\n #include <bits/gthr.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef __gthread_mutex_t __c_lock;\n \n   // for basic_file.h\n   typedef FILE __c_file;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4b42bc2c00e16108bbd786ba421efae4f33020eb", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,7 @@\n #include <cstring>\n #include <cstdio>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files."}, {"sha": "fb9b425daabf47b0a943d7afa377bf7a28f72235", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <ieeefp.h>\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n@@ -229,9 +231,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::facet::_S_lc_ctype_c_locale(__c_locale, const char*)\n   { return __c_locale(); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n@@ -243,13 +248,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       \"LC_MESSAGES\"\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n // XXX GLIBCXX_ABI Deprecated\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "2c7600047e24555d8d82c51f4cb9a8da9f2cc430", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -43,7 +43,9 @@\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef int*\t\t\t__c_locale;\n \n@@ -85,6 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __ret;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f0de79e79230d75afd4d59ca2fb1d14aa12a827b", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <climits>  // For MB_LEN_MAX\n #include <cstring>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specializations.\n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -214,4 +216,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "da12ccd138f0e609f00d152637ce6cb3e43ec85b", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -32,7 +32,9 @@\n #include <locale>\n #include <cstring>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return wcsxfrm(__to, __from, __n); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "e6ced3973091b562e6064adc15cc8679d702d1b6", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <cstring>\n #include <cstdio>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n@@ -266,4 +268,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "b8610ddb3b7c66d41a88c057092a867bb356c00d", "filename": "libstdc++-v3/config/locale/generic/messages_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n \n #include <locale>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specializations\n   template<>\n@@ -45,4 +47,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return __dfault; }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f66d4be3b13616bd9b7970fe5da57939553d8f86", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Non-virtual member functions.\n   template<typename _CharT>\n@@ -87,4 +89,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n      }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "91f014fee838810aa99d60af85d659f1d24f4975", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,7 +31,9 @@\n \n #include <locale>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n@@ -165,4 +167,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { delete _M_data; }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d7d6647d57e923eaad40fe1a23b67fd691c0cccf", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n \n #include <locale>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<> \n     void\n@@ -99,5 +101,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { delete _M_data; }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n "}, {"sha": "30310752b242c27369c453146d8c52df42e5d288", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <cstdlib>\n #include <cstring>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n@@ -206,4 +208,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ff26bef230dc425162810e41076436ae38d052a0", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n@@ -88,4 +90,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _S_destroy_c_locale(_M_c_locale_timepunct); \n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "adfeb621977bac02b9d57c0fbbbff95c5be5409f", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n #include <langinfo.h>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n@@ -169,9 +171,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __changed;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n@@ -189,13 +194,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       \"LC_IDENTIFICATION\" \n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n // XXX GLIBCXX_ABI Deprecated\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "eb0d6714e1e51940c2808979a327df75be4453d0", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -46,14 +46,19 @@\n #define _GLIBCXX_NUM_CATEGORIES 6\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   extern \"C\" __typeof(uselocale) __uselocale;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef __locale_t\t\t__c_locale;\n \n@@ -104,6 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __ret;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "a1029f09a72d3421aaa59edc0bd40848bfdf7ce4", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <climits>  // For MB_LEN_MAX\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specializations.\n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -302,4 +304,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "00056ad5a4862c3e2c4d83157ecca0ac1d4b6e8f", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,7 +31,9 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n@@ -67,4 +69,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "8a478e97aae4ed8846cddad7e25c2f383ead744d", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <cstdio>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n@@ -300,4 +302,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "4154e89381104516968b94ef6a4f47b051192c9a", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,7 +31,9 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specializations.\n   template<>\n@@ -80,4 +82,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f81a19fc8a7ff380a69ae9674fcdd9f5103b67f8", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n \n #include <libintl.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Non-virtual member functions.\n   template<typename _CharT>\n@@ -125,4 +127,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t }\n      }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "214c4af7d768e06507a83d0c9a534e0980cea4bd", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -32,7 +32,9 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n@@ -929,4 +931,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "934511acb02793b8991336cef5e37d724a96746b", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -32,7 +32,9 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<> \n     void\n@@ -212,4 +214,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n  #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "197474605080f0a949303259d335ef8aebe4c016", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     void\n@@ -395,4 +397,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "3d8e0e91bcbb12dffb30d089da0e3f5703531aa3", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n@@ -85,4 +87,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _S_destroy_c_locale(_M_c_locale_timepunct); \n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "13af608d9ed710d6bb886fbe58a00dcb238139c4", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,7 @@\n \n #include <locale>\n \n-namespace std \n+namespace std _GLIBCXX_VISIBILITY(default) \n {\n   void\n   locale::facet::_S_create_c_locale(__c_locale&, const char*, __c_locale*)"}, {"sha": "027a52d93db9bb8f324155bc7b3d77a67e93ff8b", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,9 +38,12 @@\n #include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #include <nl_types.h> \t\t// For messages\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef int*\t\t\t__c_locale;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n "}, {"sha": "2b4ab2e49e6cad41150de56fdd1e660abb5ebaff", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.cc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,7 @@\n \n #include <locale>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   // Specializations\n   template<>"}, {"sha": "8c658ab8672dc8fce947584e655c1b85f7ac14a5", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Non-virtual member functions.\n   template<typename _CharT>\n@@ -69,4 +71,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     messages<_CharT>::do_close(catalog __c) const \n     { catclose(reinterpret_cast<nl_catd>(__c)); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "1bd51f1c041d9a91c0db6e1b963a2e414962b2a0", "filename": "libstdc++-v3/config/os/aix/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,9 @@ extern \"C\"\n #include <sys/atomic_op.h>\n }\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word\n   __attribute__ ((__unused__))\n@@ -50,4 +52,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add (volatile _Atomic_word* __mem, int __val) throw ()\n   { (void) ::fetch_and_add(const_cast<atomic_p>(__mem), __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "865105aecc1439b1138c2c06021dfe2db6d6621a", "filename": "libstdc++-v3/config/os/aix/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -52,4 +54,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISALPHA | _ISDIGIT;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "14f22be1d866b0e359bc2328446ff2f34aee4544", "filename": "libstdc++-v3/config/os/aix/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -77,4 +79,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "926b2337455767df6c3c64f0daf1a3b7012f38ed", "filename": "libstdc++-v3/config/os/bionic/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n \n // Support for Solaris 2.5.1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -54,4 +56,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _U | _L | _N;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "e7b8d5c83059f9d13e95fc725c0ca3d8a0c51075", "filename": "libstdc++-v3/config/os/bionic/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "36f71e065083a94f88dfe70e2734d40155645619", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "aa3a83ecfaa32b5d30c0d4d38d5687f0169a0d62", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -145,4 +147,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "5d01ad6af847121f8b9aaa76f319fec767f3d57a", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "de10c3fbcb8d0827adadfbcbdf72418fff690cc9", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -145,4 +147,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d75cb79aaf6d7a619acc9d5cbee0040684597d71", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n   \n #include <sys/param.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -72,4 +74,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "a08d4314f304f591d4d61d136ee35150ccc4cc5a", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -68,7 +70,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n \n "}, {"sha": "aa156f8dd39cc7844b8839465df77f9ffa81a070", "filename": "libstdc++-v3/config/os/djgpp/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -26,7 +26,9 @@\n // ISO C++ 14882: 22.1  Locales\n //\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -51,4 +53,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask graph = __dj_ISALPHA | __dj_ISDIGIT | __dj_ISPUNCT;  // Graphical\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "217bbf8758ac6ab0a6e33cbe2942001e8ebae78c", "filename": "libstdc++-v3/config/os/djgpp/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -71,4 +73,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "4e87208d831f3744e188ffb4e72ee39aae253045", "filename": "libstdc++-v3/config/os/djgpp/error_constants.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <bits/c++config.h>\n #include <cerrno>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Most of the commented-out error codes are socket-related and could be\n // replaced by Winsock WSA-prefixed equivalents.\n@@ -119,6 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n  //   wrong_protocol_type = \t\t\tEPROTOTYPE\n    };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "72aa6f2ccb02d63fa35bc2d47d2f66bc4eae38b1", "filename": "libstdc++-v3/config/os/generic/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -29,7 +29,9 @@\n \n // Default information, may not be appropriate for specific host.\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -53,4 +55,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= (1 << 2) | (1 << 3);  // alpha|digit\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ae54f2968bedd00c7f909d90b835d9d7e56114d9", "filename": "libstdc++-v3/config/os/generic/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n \n // Constructing a synthetic \"C\" table should be seriously considered...\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -162,4 +164,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "88ea56506c23a7f891fb8c838ca7029b02848f08", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <bits/c++config.h>\n #include <cerrno>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   enum class errc\n     {\n@@ -170,6 +172,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       wrong_protocol_type = \t\t\tEPROTOTYPE\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "eb2b14c58d35f9a56822b986facc286bbe01eb4c", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n // Information as gleaned from /usr/include/ctype.h\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -58,4 +60,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "7e83a9e75d202ddde1c80d0bb45135829c95455a", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "8e2114f1f433450e4b4b51ca7b6d46e827c27ff4", "filename": "libstdc++-v3/config/os/hpux/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n   \n // Default information, may not be appropriate for specific host.\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -52,4 +54,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum     = _ISALPHA | _ISDIGIT;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/hpux/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "a41f30124af84468f0af6bede1e5b62879ff8b0e", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -63,7 +63,9 @@\n    We also force _GLIBCXX_USE_LONG_LONG here so that we don't have\n    to bastardize configure to deal with this sillyness.  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_EXTERN_C\n \n #ifndef __LP64__\n@@ -79,7 +81,8 @@ _GLIBCXX_BEGIN_EXTERN_C\n #endif\n \n _GLIBCXX_END_EXTERN_C\n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #define _GLIBCXX_USE_LONG_LONG 1\n "}, {"sha": "0160a1616495338a22b3591ddecbcf5361baeec8", "filename": "libstdc++-v3/config/os/irix/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -25,7 +25,9 @@\n #include <mutex.h>\n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _Atomic_word\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n@@ -35,4 +37,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n   { __exchange_and_add(__mem, __val); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "32a8716bc032d087cd5750f91420d8b5461973c8", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n // Information as gleaned from /usr/include/ctype.h on irix 6.5\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -58,4 +60,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f08eea812ea78157d8f2d5b40d59c5a4a8184153", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "5fbdff8e7f0cb8e818bfddbc24df3ba397f14ccc", "filename": "libstdc++-v3/config/os/mingw32/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n //  masks here, based on the generic masks, and the corresponding\n //  classic_table in ctype_noninline.h.\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -58,4 +60,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum\t= (1 << 2) | (1 << 3);  // alpha|digit\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f1b9f6c6617a2f40d87cdc5963f6243f5e1d87cc", "filename": "libstdc++-v3/config/os/mingw32/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -69,4 +71,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f2a9116ba9ea5a463feddcf8119abe0a25ffde04", "filename": "libstdc++-v3/config/os/mingw32/error_constants.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <cerrno>\n \n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Most of the commented-out error codes are socket-related and could be\n // replaced by Winsock WSA-prefixed equivalents.\n@@ -120,6 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n  //   wrong_protocol_type = \t\t\tEPROTOTYPE\n    };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4dd150292dfa4beeeb77b103c3780c2588bdc091", "filename": "libstdc++-v3/config/os/newlib/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n \n // Support for Solaris 2.5.1\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -54,4 +56,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _U | _L | _N;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "18726dbbd16217341de2f3f90fe188a1164cf86a", "filename": "libstdc++-v3/config/os/newlib/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "36aa073435a1b5f5d2af1e6f184d42411bc0e61f", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n // Information as gleaned from /usr/include/ctype.h.\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -57,4 +59,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _DI | _LO | _UP | _XA;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "b38bc827c6d984fbfd7bf62411ec32ba81e3f249", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -68,4 +70,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "1ae3874a6dbb1f7d2279f577225b27501b3a7fcb", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n // only works with solaris2.7 and solaris2.8. Thanks for not changing\n // things, sun engineers!\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -54,4 +56,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISALPHA | _ISDIGIT;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "1c1d37ebce237f63e0b34617c4c374d393d24a4a", "filename": "libstdc++-v3/config/os/tpf/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -52,4 +54,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "1785f8cd91995223f163a6a70d058ef2ba6c7eed", "filename": "libstdc++-v3/config/os/tpf/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d6a742b73402a3a3f472ccb3ee7ad51ae1ac0b02", "filename": "libstdc++-v3/config/os/uclibc/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n // Information as gleaned from /usr/include/ctype.h\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -60,4 +62,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "0f640696009860aab1c8acd35c28bb01045262c0", "filename": "libstdc++-v3/config/os/uclibc/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -70,4 +72,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f1f92ae435011ba7357b2ab95d43edd5b40f4952", "filename": "libstdc++-v3/config/os/vxworks/ctype_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n   \n // Information extracted from target/h/ctype.h.\n   \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n@@ -53,4 +55,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const mask alnum \t= _C_UPPER | _C_LOWER | _C_NUMBER;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "49092083cc31b28d04cd389de6ffb3335b790216", "filename": "libstdc++-v3/config/os/vxworks/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   bool\n   ctype<char>::\n@@ -72,4 +74,5 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d9990c97842d0a21d9291c12f82a29d1bf7650fb", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1542,17 +1542,17 @@ PREDEFINED             = __cplusplus \\\n                          \"_GLIBCXX_CONST= \" \\\n                          \"_GLIBCXX_NORETURN= \" \\\n                          \"_GLIBCXX_NOTHROW= \" \\\n-                         \"_GLIBCXX_STD_D= \" \\\n-                         \"_GLIBCXX_STD_P= \" \\\n-                         \"_GLIBCXX_STD_PR= \" \\\n-                         _GLIBCXX_STD=std \\\n-                         \"_GLIBCXX_TR1= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE_TR1= \" \\\n-                         \"_GLIBCXX_END_NAMESPACE_TR1= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE(name)=namespace name {  \" \\\n-                         \"_GLIBCXX_BEGIN_NESTED_NAMESPACE(name, unused)=namespace name {  \" \\\n-                         _GLIBCXX_END_NAMESPACE=} \\\n-                         _GLIBCXX_END_NESTED_NAMESPACE=} \\\n+                         \"_GLIBCXX_STD_C= \" \\\n+                         \"_GLIBCXX_STD_A= \" \\\n+\t\t\t \"_GLIBCXX_VISIBILITY(V)= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE_VERSION= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE_ALGO= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE_LDBL= \" \\\n+                         \"_GLIBCXX_END_NAMESPACE_VERSION= \" \\\n+                         \"_GLIBCXX_END_NAMESPACE_ALGO= \" \\\n+                         \"_GLIBCXX_END_NAMESPACE_CONTAINER= \" \\\n+                         \"_GLIBCXX_END_NAMESPACE_LDBL= \" \\\n                          \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n                          _GLIBCXX_DEPRECATED \\\n                          _GLIBCXX_CONSTEXPR=constexpr \\"}, {"sha": "e14906b36feaf0a22c7acd0d87e339f3b6c34ad3", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <bits/c++config.h>\n #include <debug/debug.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  A wrapper class to provide auto_ptr with reference semantics.\n@@ -287,6 +289,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef void element_type;\n     } _GLIBCXX_DEPRECATED_ATTR;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _BACKWARD_AUTO_PTR_H */"}, {"sha": "faadd0ddebdcbb38eae45f8c59155b9e322bf830", "filename": "libstdc++-v3/include/backward/binders.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -57,7 +57,9 @@\n #ifndef _BACKWARD_BINDERS_H\n #define _BACKWARD_BINDERS_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.6 binders\n   /** @defgroup binders Binder Classes\n@@ -164,6 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     } \n   /** @}  */\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _BACKWARD_BINDERS_H */"}, {"sha": "a76eb730101eabdfe015e092b948eb7f016b4c9a", "filename": "libstdc++-v3/include/backward/hash_fun.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_fun.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -59,7 +59,9 @@\n \n #include <bits/c++config.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n \n@@ -163,6 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return __x; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "24c439e047679005d3190c3bdeb16e9dd7d9b299", "filename": "libstdc++-v3/include/backward/hash_map", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -65,7 +65,9 @@\n #include <backward/hashtable.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::equal_to;\n   using std::allocator;\n@@ -497,9 +499,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t hash_multimap<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { __hm1.swap(__hm2); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specialization of insert_iterator so that it will work for hash_map\n   // and hash_multimap.\n@@ -589,6 +594,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return *this; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f110fec68f392cb93580b42d4c6f651afc505b3d", "filename": "libstdc++-v3/include/backward/hash_set", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -65,7 +65,9 @@\n #include <backward/hashtable.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::equal_to;\n   using std::allocator;\n@@ -465,9 +467,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { __hs1.swap(__hs2); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specialization of insert_iterator so that it will work for hash_set\n   // and hash_multiset.\n@@ -557,6 +562,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator++(int) { return *this; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "0bcaec4fdc23a21bc2763c0f01ad16e4b5650235", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -66,7 +66,9 @@\n #include <bits/stl_function.h>\n #include <backward/hash_fun.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -1141,6 +1143,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "964c455873a2b9eb6f4a20682c96a4b51c05ca95", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,7 +51,9 @@\n #include <ostream>\n #include <string>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Class strstreambuf, a streambuf class that manages an array of char.\n   // Note that this class is not a template.\n@@ -172,6 +174,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     strstreambuf _M_buf;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "8632bf5dd630436e4f3e3b7b48f25919bdb126f8", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n #include <bits/stl_iterator_base_types.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /*\n     adjacent_find\n@@ -577,9 +579,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _FIter \n     upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n+_GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _FIter>\n     _FIter \n@@ -802,7 +804,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     _OIter \n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_ALGO\n+} // namespace std\n \n #ifdef _GLIBCXX_PARALLEL\n # include <parallel/algorithmfwd.h>"}, {"sha": "9018b5aa59a6bab9f84062fac7e32bb22fbb075b", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,7 +51,9 @@\n #include <type_traits> // For _GLIBCXX_HAS_NESTED_TYPE\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup allocators Allocators\n@@ -232,6 +234,7 @@ _GLIBCXX_HAS_NESTED_TYPE(allocator_type)\n \n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "42ff462701f6a90b1af87cc3adef5af776c095d2", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // 0 == __atomic0 == Never lock-free\n namespace __atomic0\n@@ -732,6 +734,7 @@ namespace __atomic0\n #undef _ATOMIC_CMPEXCHNG_\n } // namespace __atomic0\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "26017139cc8150be77483e68631b68e2c7cc4080", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // 2 == __atomic2 == Always lock-free\n // Assumed:\n@@ -747,6 +749,7 @@ namespace __atomic2\n     };\n } // namespace __atomic2\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "7316d01a15206f92324f2291b5c31299aaa1f878", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n #include <stdbool.h>\n #include <stdint.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup atomics Atomics\n@@ -284,6 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group atomics\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "29d8ae5d3ed0d7223f62ff394e0314d735ac972d", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -39,7 +39,9 @@\n #include <bits/locale_facets.h>\n #include <bits/streambuf_iterator.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Facet>\n     inline const _Facet&\n@@ -465,7 +467,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_cache_locale(const locale& __loc);\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #include <bits/basic_ios.tcc>\n "}, {"sha": "98b227fb95ac5f12c0cf3653eaf71a817c8e8797", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     void\n@@ -182,6 +184,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "102ef77a68da86723037ce00a2e954b541ce00c1", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,9 @@\n #include <debug/debug.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @class basic_string basic_string.h <string>\n@@ -2745,14 +2747,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    wchar_t __delim);\n #endif  \n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99) \\\n      && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))\n \n #include <ext/string_conversions.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 21.4 Numeric Conversions [string.conversions].\n   inline int\n@@ -2959,15 +2964,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* __GXX_EXPERIMENTAL_CXX0X__ && _GLIBCXX_USE_C99 ... */\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n #include <bits/functional_hash.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 1182.\n \n@@ -3020,7 +3028,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* __GXX_EXPERIMENTAL_CXX0X__ */\n "}, {"sha": "880fc6b349466616e4db9dab8657a541b1c6c4a0", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -43,7 +43,9 @@\n \n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     const typename basic_string<_CharT, _Traits, _Alloc>::size_type\n@@ -1161,6 +1163,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f1bc16abc389e6d054e0df1b187056ae9cbbf8cf", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -45,7 +45,9 @@\n #include <bits/c++config.h>\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define _IsUnused __attribute__ ((__unused__))\n \n@@ -779,7 +781,8 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     typename _BackInsertionSequence::value_type __t;\n   };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #undef _IsUnused\n "}, {"sha": "101d6b50d230ebe6b663b88c112a6ec7f8b311fc", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 215, "deletions": 213, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,6 +35,11 @@\n #define __GLIBCXX__\n \n // Macros for various attributes.\n+//   _GLIBCXX_PURE\n+//   _GLIBCXX_CONST\n+//   _GLIBCXX_NORETURN\n+//   _GLIBCXX_NOTHROW\n+//   _GLIBCXX_VISIBILITY\n #ifndef _GLIBCXX_PURE\n # define _GLIBCXX_PURE __attribute__ ((__pure__))\n #endif\n@@ -55,22 +60,22 @@\n # endif\n #endif\n \n-// Macros for visibility.\n-// _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n-// _GLIBCXX_VISIBILITY_ATTR\n+// Macros for visibility attributes.\n+//   _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n+//   _GLIBCXX_VISIBILITY\n #define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n \n #if _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n-# define _GLIBCXX_VISIBILITY_ATTR(V) __attribute__ ((__visibility__ (#V)))\n+# define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))\n #else\n // If this is not supplied by the OS-specific or CPU-specific\n // headers included below, it will be defined to an empty default.\n-# define _GLIBCXX_VISIBILITY_ATTR(V) _GLIBCXX_PSEUDO_VISIBILITY(V)\n+# define _GLIBCXX_VISIBILITY(V) _GLIBCXX_PSEUDO_VISIBILITY(V)\n #endif\n \n-// Macros for deprecated.\n-// _GLIBCXX_DEPRECATED\n-// _GLIBCXX_DEPRECATED_ATTR\n+// Macros for deprecated attributes.\n+//   _GLIBCXX_DEPRECATED\n+//   _GLIBCXX_DEPRECATED_ATTR\n #ifndef _GLIBCXX_DEPRECATED\n # define _GLIBCXX_DEPRECATED 1\n #endif\n@@ -83,22 +88,6 @@\n \n #if __cplusplus\n \n-namespace std\n-{\n-  typedef __SIZE_TYPE__ \tsize_t;\n-  typedef __PTRDIFF_TYPE__\tptrdiff_t;\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  typedef decltype(nullptr)\tnullptr_t;\n-#endif\n-}\n-\n-// Macros for C compatibility. In particular, define extern \"C\"\n-// linkage only when using C++.\n-# define _GLIBCXX_BEGIN_EXTERN_C extern \"C\" {\n-# define _GLIBCXX_END_EXTERN_C }\n-\n-\n // Macro for constexpr, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_CONSTEXPR\n # ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -110,201 +99,255 @@ namespace std\n # endif\n #endif\n \n-// Macros for activating various inline namespaces.\n-//\n-// _GLIBCXX_NAMESPACE_DEBUG\n-// _GLIBCXX_NAMESPACE_PARALLEL\n-// _GLIBCXX_NAMESPACE_PROFILE\n-// _GLIBCXX_NAMESPACE_VERSION\n+// Macro for extern template, ie controling template linkage via use\n+// of extern keyword on template declaration. As documented in the g++\n+// manual, it inhibits all implicit instantiations and is used\n+// throughout the library to avoid multiple weak definitions for\n+// required types that are already explicitly instantiated in the\n+// library binary. This substantially reduces the binary size of\n+// resulting executables.\n+// Special case: _GLIBCXX_EXTERN_TEMPLATE == -1 disallows extern\n+// templates only in basic_string, thus activating its debug-mode\n+// checks even at -O0.\n+#ifndef _GLIBCXX_EXTERN_TEMPLATE\n+# define _GLIBCXX_EXTERN_TEMPLATE 1\n+#endif\n \n-// Guide to libstdc++ namespaces.\n /*\n+  Outline of libstdc++ namespaces.\n+\n   namespace std\n   {\n     namespace __debug { }\n     namespace __parallel { }\n     namespace __profile { }\n-    namespace __norm { } // __normative, __shadow, __replaced\n     namespace __cxx1998 { }\n \n-    namespace tr1 { }\n+    namespace __detail { }\n+\n+    namespace rel_ops { }\n+\n+    namespace tr1\n+    {\n+      namespace placeholders { }\n+      namespace regex_constants { }\n+      namespace __detail { }\n+    }\n+\n+    namespace decimal { }\n+\n+    namespace chrono { }\n+    namespace placeholders { }\n+    namespace regex_constants { }\n+    namespace this_thread { }\n   }\n-*/\n \n-#ifdef _GLIBCXX_DEBUG\n-# define _GLIBCXX_INLINE_DEBUG 1\n-#endif\n+  namespace abi { }\n \n-#ifdef _GLIBCXX_PARALLEL\n-# define _GLIBCXX_INLINE_PARALLEL 1\n-#endif\n+  namespace __gnu_cxx\n+  {\n+    namespace __detail { }\n+  }\n+\n+  For full details see:\n+  http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html\n+*/\n+namespace std\n+{\n+  typedef __SIZE_TYPE__ \tsize_t;\n+  typedef __PTRDIFF_TYPE__\tptrdiff_t;\n \n-// Namespace association for profile.\n-#ifdef _GLIBCXX_PROFILE\n-# define _GLIBCXX_INLINE_PROFILE 1\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  typedef decltype(nullptr)\tnullptr_t;\n #endif\n+}\n \n+\n+// Defined if inline namespaces are used for versioning.\n #define _GLIBCXX_INLINE_VERSION\n \n-// Defined if inline namespaces modes are active.\n-#if _GLIBCXX_INLINE_DEBUG \\\n-  || _GLIBCXX_INLINE_PARALLEL \\\n-  || _GLIBCXX_INLINE_PROFILE \\\n-  || _GLIBCXX_INLINE_VERSION\n-# define _GLIBCXX_USE_INLINE_NAMESPACES 1\n-#endif\n+// Inline namespace for symbol versioning.\n+#if _GLIBCXX_INLINE_VERSION\n+namespace std\n+{\n+  inline namespace _6 { }\n \n-// Macros for namespace scope. Either namespace std:: or the name\n-// of some nested namespace within it.\n-// _GLIBCXX_STD\n-// _GLIBCXX_STD_D\n-// _GLIBCXX_STD_P\n-// _GLIBCXX_STD_PR\n-//\n-// Macros for enclosing namespaces and possibly nested namespaces.\n-// _GLIBCXX_BEGIN_NAMESPACE\n-// _GLIBCXX_END_NAMESPACE\n-// _GLIBCXX_BEGIN_NESTED_NAMESPACE\n-// _GLIBCXX_END_NESTED_NAMESPACE\n-#ifndef _GLIBCXX_USE_INLINE_NAMESPACES\n-# define _GLIBCXX_STD_D _GLIBCXX_STD\n-# define _GLIBCXX_STD_P _GLIBCXX_STD\n-# define _GLIBCXX_STD_PR _GLIBCXX_STD\n-# define _GLIBCXX_STD std\n-# define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y) _GLIBCXX_BEGIN_NAMESPACE(X)\n-# define _GLIBCXX_END_NESTED_NAMESPACE _GLIBCXX_END_NAMESPACE\n-# define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n-# define _GLIBCXX_END_NAMESPACE }\n+  namespace __detail { inline namespace _6 { } }\n+\n+\n+  namespace rel_ops { inline namespace _6 { } }\n+\n+  namespace tr1\n+  {\n+    inline namespace _6 { }\n+    namespace placeholders { inline namespace _6 { } }\n+    namespace regex_constants { inline namespace _6 { } }\n+    namespace __detail { inline namespace _6 { } }\n+  }\n+\n+  namespace decimal { inline namespace _6 { } }\n+\n+  namespace chrono { inline namespace _6 { } }\n+  namespace placeholders { inline namespace _6 { } }\n+  namespace regex_constants { inline namespace _6 { } }\n+  namespace this_thread { inline namespace _6 { } }\n+}\n+\n+namespace __gnu_cxx\n+{\n+  inline namespace _6 { }\n+  namespace __detail { inline namespace _6 { } }\n+}\n+# define _GLIBCXX_BEGIN_NAMESPACE_VERSION namespace _6 {\n+# define _GLIBCXX_END_NAMESPACE_VERSION }\n #else\n+# define _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+# define _GLIBCXX_END_NAMESPACE_VERSION\n+#endif\n \n-# if _GLIBCXX_INLINE_VERSION // && not anything else\n-#  define _GLIBCXX_STD_D _GLIBCXX_STD\n-#  define _GLIBCXX_STD_P _GLIBCXX_STD\n-#  define _GLIBCXX_STD _6\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, _6)\n-#  define _GLIBCXX_END_NAMESPACE _GLIBCXX_END_NESTED_NAMESPACE\n-# endif\n \n-//  debug\n-# if _GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PARALLEL && !_GLIBCXX_INLINE_PROFILE\n-#  define _GLIBCXX_STD_D __norm\n-#  define _GLIBCXX_STD_P _GLIBCXX_STD\n-#  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n-#  define _GLIBCXX_END_NAMESPACE }\n-#  define _GLIBCXX_EXTERN_TEMPLATE -1\n+// Inline namespaces for special modes: debug, parallel, profile.\n+#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PARALLEL) \\\n+    || defined(_GLIBCXX_PROFILE)\n+namespace std\n+{\n+  // Non-inline namespace for components replaced by alternates in active mode.\n+  namespace __cxx1998\n+  {\n+#if _GLIBCXX_INLINE_VERSION\n+ inline namespace _6 { }\n+#endif\n+  }\n+\n+  // Inline namespace for debug mode.\n+# ifdef _GLIBCXX_DEBUG\n+  inline namespace __debug { }\n # endif\n \n-// parallel\n-# if _GLIBCXX_INLINE_PARALLEL && !_GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PROFILE\n-#  define _GLIBCXX_STD_D _GLIBCXX_STD\n-#  define _GLIBCXX_STD_P __norm\n-#  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n-#  define _GLIBCXX_END_NAMESPACE }\n+  // Inline namespaces for parallel mode.\n+# ifdef _GLIBCXX_PARALLEL\n+  inline namespace __parallel { }\n # endif\n \n-// debug + parallel\n-# if _GLIBCXX_INLINE_PARALLEL && _GLIBCXX_INLINE_DEBUG  && !_GLIBCXX_INLINE_PROFILE\n-#  define _GLIBCXX_STD_D __norm\n-#  define _GLIBCXX_STD_P __norm\n-#  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n-#  define _GLIBCXX_END_NAMESPACE }\n-#  define _GLIBCXX_EXTERN_TEMPLATE -1\n+  // Inline namespaces for profile mode\n+# ifdef _GLIBCXX_PROFILE\n+  inline namespace __profile { }\n # endif\n+}\n \n-// profile\n-# if _GLIBCXX_INLINE_PROFILE\n-#  if _GLIBCXX_INLINE_PARALLEL || _GLIBCXX_INLINE_DEBUG\n-#   error Cannot use -D_GLIBCXX_PROFILE with -D_GLIBCXX_DEBUG or \\\n-    -D_GLIBCXX_PARALLEL\n-#  endif\n-#  define _GLIBCXX_STD_D __norm\n-#  define _GLIBCXX_STD_P _GLIBCXX_STD\n-#  define _GLIBCXX_STD_PR __norm\n-#  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n-#  define _GLIBCXX_END_NAMESPACE }\n+// Check for invalid usage and unsupported mixed-mode use.\n+# if defined(_GLIBCXX_DEBUG) && defined(_GLIBCXX_PARALLEL)\n+#  error illegal use of multiple inlined namespaces\n+# endif\n+# if defined(_GLIBCXX_PROFILE) && defined(_GLIBCXX_DEBUG)\n+#  error illegal use of multiple inlined namespaces\n+# endif\n+# if defined(_GLIBCXX_PROFILE) && defined(_GLIBCXX_PARALLEL)\n+#  error illegal use of multiple inlined namespaces\n # endif\n \n+// Check for invalid use due to lack for weak symbols.\n # if __NO_INLINE__ && !__GXX_WEAK__\n #  warning currently using inlined namespace mode which may fail \\\n    without inlining due to lack of weak symbols\n # endif\n+#endif\n+\n+// Macros for namespace scope. Either namespace std:: or the name\n+// of some nested namespace within it corresponding to the active mode.\n+// _GLIBCXX_STD_A\n+// _GLIBCXX_STD_C\n+//\n+// Macros for opening/closing conditional namespaces.\n+// _GLIBCXX_BEGIN_NAMESPACE_ALGO\n+// _GLIBCXX_END_NAMESPACE_ALGO\n+// _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+// _GLIBCXX_END_NAMESPACE_CONTAINER\n+#if defined(_GLIBCXX_DEBUG) or defined(_GLIBCXX_PROFILE)\n+# define _GLIBCXX_STD_C __cxx1998\n+# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER \\\n+\t namespace _GLIBCXX_STD_C { _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+# define _GLIBCXX_END_NAMESPACE_CONTAINER \\\n+\t } _GLIBCXX_END_NAMESPACE_VERSION\n+# undef _GLIBCXX_EXTERN_TEMPLATE\n+# define _GLIBCXX_EXTERN_TEMPLATE -1\n+#endif\n \n-# define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y)  namespace X { namespace Y _GLIBCXX_VISIBILITY_ATTR(default) {\n-# define _GLIBCXX_END_NESTED_NAMESPACE } }\n+#ifdef _GLIBCXX_PARALLEL\n+# define _GLIBCXX_STD_A __cxx1998\n+# define _GLIBCXX_BEGIN_NAMESPACE_ALGO \\\n+\t namespace _GLIBCXX_STD_A { _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+# define _GLIBCXX_END_NAMESPACE_ALGO \\\n+\t } _GLIBCXX_END_NAMESPACE_VERSION\n #endif\n \n-// Inline namespaces for debug mode.\n-#if _GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PROFILE\n-namespace std\n-{\n-  namespace __norm { }\n-  inline namespace __debug { }\n-  inline namespace __cxx1998 { }\n-}\n+#ifndef _GLIBCXX_STD_A\n+# define _GLIBCXX_STD_A std\n #endif\n \n-// Inline namespaces for parallel mode.\n-#if _GLIBCXX_INLINE_PARALLEL\n-namespace std\n-{\n-  namespace __norm { }\n-  inline namespace __parallel { }\n-  inline namespace __cxx1998 { }\n-}\n+#ifndef _GLIBCXX_STD_C\n+# define _GLIBCXX_STD_C std\n #endif\n \n-// Inline namespaces for profile mode\n-#if _GLIBCXX_INLINE_PROFILE\n-namespace std\n-{\n-  namespace __norm { }\n-  inline namespace __profile { }\n-  inline namespace __cxx1998 { }\n-}\n+#ifndef _GLIBCXX_BEGIN_NAMESPACE_ALGO\n+# define _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #endif\n \n-// Inline namespaces for versioning mode.\n-#if _GLIBCXX_INLINE_VERSION\n-namespace std\n-{\n-  inline namespace _6 { }\n-}\n+#ifndef _GLIBCXX_END_NAMESPACE_ALGO\n+# define _GLIBCXX_END_NAMESPACE_ALGO\n+#endif\n \n-namespace __gnu_cxx\n-{\n-  inline namespace _6 { }\n-}\n+#ifndef _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n+#endif\n \n-namespace std\n-{\n-  namespace tr1\n-  {\n-    inline namespace _6 { }\n-  }\n-}\n+#ifndef _GLIBCXX_END_NAMESPACE_CONTAINER\n+# define _GLIBCXX_END_NAMESPACE_CONTAINER\n #endif\n \n-// XXX GLIBCXX_ABI Deprecated\n-// Define if compatibility should be provided for -mlong-double-64\n+// GLIBCXX_ABI Deprecated\n+// Define if compatibility should be provided for -mlong-double-64.\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n \n-// Inline namespaces for long double 128 mode.\n+// Inline namespace for long double 128 mode.\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n namespace std\n {\n   inline namespace __gnu_cxx_ldbl128 { }\n }\n-# define _GLIBCXX_LDBL_NAMESPACE __gnu_cxx_ldbl128::\n-# define _GLIBCXX_BEGIN_LDBL_NAMESPACE namespace __gnu_cxx_ldbl128 {\n-# define _GLIBCXX_END_LDBL_NAMESPACE }\n+# define _GLIBCXX_NAMESPACE_LDBL __gnu_cxx_ldbl128::\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL namespace __gnu_cxx_ldbl128 {\n+# define _GLIBCXX_END_NAMESPACE_LDBL }\n #else\n-# define _GLIBCXX_LDBL_NAMESPACE\n-# define _GLIBCXX_BEGIN_LDBL_NAMESPACE\n-# define _GLIBCXX_END_LDBL_NAMESPACE\n+# define _GLIBCXX_NAMESPACE_LDBL\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL\n+# define _GLIBCXX_END_NAMESPACE_LDBL\n+#endif\n+\n+// Assert.\n+#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PARALLEL)\n+# define __glibcxx_assert(_Condition)\n+#else\n+namespace std\n+{\n+  // Avoid the use of assert, because we're trying to keep the <cassert>\n+  // include out of the mix.\n+  inline void\n+  __replacement_assert(const char* __file, int __line,\n+\t\t       const char* __function, const char* __condition)\n+  {\n+    __builtin_printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n+\t\t     __function, __condition);\n+    __builtin_abort();\n+  }\n+}\n+#define __glibcxx_assert(_Condition)\t\t\t\t   \t \\\n+  do \t\t\t\t\t\t\t\t\t \\\n+  {\t\t\t\t\t\t\t      \t\t \\\n+    if (! (_Condition))                                                  \\\n+      std::__replacement_assert(__FILE__, __LINE__, __PRETTY_FUNCTION__, \\\n+\t\t\t\t#_Condition);\t\t\t\t \\\n+  } while (false)\n #endif\n \n // Macros for race detectors.\n@@ -328,23 +371,23 @@ namespace std\n // The annotations in this example tell the race detector that all memory\n // accesses occurred when the refcount was positive do not race with\n // memory accesses which occurred after the refcount became zero.\n-\n #ifndef _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE\n # define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A)\n #endif\n #ifndef _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER\n # define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A)\n #endif\n \n+// Macros for C linkage: define extern \"C\" linkage only when using C++.\n+# define _GLIBCXX_BEGIN_EXTERN_C extern \"C\" {\n+# define _GLIBCXX_END_EXTERN_C }\n+\n #else // !__cplusplus\n # define _GLIBCXX_BEGIN_EXTERN_C\n # define _GLIBCXX_END_EXTERN_C\n-# undef _GLIBCXX_BEGIN_NAMESPACE\n-# undef _GLIBCXX_END_NAMESPACE\n-# define _GLIBCXX_BEGIN_NAMESPACE(X)\n-# define _GLIBCXX_END_NAMESPACE\n #endif\n \n+\n // First includes.\n \n // Pick up any OS-specific definitions.\n@@ -356,21 +399,7 @@ namespace std\n // If platform uses neither visibility nor psuedo-visibility,\n // specify empty default for namespace annotation macros.\n #ifndef _GLIBCXX_PSEUDO_VISIBILITY\n-#define _GLIBCXX_PSEUDO_VISIBILITY(V)\n-#endif\n-\n-// Allow use of the GNU syntax extension, \"extern template.\" This\n-// extension is fully documented in the g++ manual, but in a nutshell,\n-// it inhibits all implicit instantiations and is used throughout the\n-// library to avoid multiple weak definitions for required types that\n-// are already explicitly instantiated in the library binary. This\n-// substantially reduces the binary size of resulting executables.\n-\n-// Special case: _GLIBCXX_EXTERN_TEMPLATE == -1 disallows extern\n-// templates only in basic_string, thus activating its debug-mode\n-// checks even at -O0.\n-#ifndef _GLIBCXX_EXTERN_TEMPLATE\n-# define _GLIBCXX_EXTERN_TEMPLATE 1\n+# define _GLIBCXX_PSEUDO_VISIBILITY(V)\n #endif\n \n // Certain function definitions that are meant to be overridable from\n@@ -380,33 +409,6 @@ namespace std\n # define _GLIBCXX_WEAK_DEFINITION\n #endif\n \n-// Assert.\n-// Avoid the use of assert, because we're trying to keep the <cassert>\n-// include out of the mix.\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PARALLEL)\n-#define __glibcxx_assert(_Condition)\n-#else\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-  // Avoid the use of assert, because we're trying to keep the <cassert>\n-  // include out of the mix.\n-  inline void\n-  __replacement_assert(const char* __file, int __line,\n-\t\t       const char* __function, const char* __condition)\n-  {\n-    __builtin_printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n-\t\t     __function, __condition);\n-    __builtin_abort();\n-  }\n-_GLIBCXX_END_NAMESPACE\n-\n-#define __glibcxx_assert(_Condition)\t\t\t\t   \t\\\n-  do \t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t      \t\t\\\n-    if (! (_Condition))                                                 \\\n-      std::__replacement_assert(__FILE__, __LINE__, \t\t\t\\\n-\t\t\t\t__PRETTY_FUNCTION__, #_Condition);\t\\\n-  } while (false)\n-#endif\n \n // The remainder of the prewritten config is automatic; all the\n // user hooks are listed above.\n@@ -428,4 +430,4 @@ _GLIBCXX_END_NAMESPACE\n #undef min\n #undef max\n \n-// End of prewritten config; the discovered settings follow.\n+// End of prewritten config; the settings discovered at configure time follow."}, {"sha": "07251df0fd33fee693506f0d74dc564f69971d19", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,9 @@\n #include <bits/postypes.h>      // For streampos\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Mapping from character type to associated types.\n@@ -203,9 +205,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __s;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 21.1\n   /**\n@@ -364,14 +369,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n      && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n \n #include <cstdint>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     struct char_traits<char16_t>\n@@ -559,7 +567,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif \n "}, {"sha": "42cc471d9cd22745694a76340d3f11e4cead5e4f", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -39,7 +39,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Empty base class for codecvt facet [22.2.1.5].\n   class codecvt_base\n@@ -499,6 +501,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _CODECVT_H"}, {"sha": "166890fb8fd1740ffc5d5a4b949833df2da5f9df", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -66,14 +66,19 @@\n //\n \n // Forward declaration hack, should really include this from somewhere.\n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Iterator, typename _Container>\n     class __normal_iterator;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct __true_type { };\n   struct __false_type { };\n@@ -414,6 +419,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "389fc80d945fd7b456f6f11ec1196e37b6cec746", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-// 2009, 2010\n+// 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,7 +58,9 @@\n #ifndef _DEQUE_TCC\n #define _DEQUE_TCC 1\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template <typename _Tp, typename _Alloc>\n@@ -1038,6 +1040,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     }\n #endif\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif"}, {"sha": "39c25322817fe55bbd431bed9e815838694c7c53", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.h> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,9 @@\n #include <memory>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief  A helper basic node class for %forward_list.\n@@ -1295,6 +1297,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t forward_list<_Tp, _Alloc>& __ly)\n     { __lx.swap(__ly); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE // namespace std\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif // _FORWARD_LIST_H"}, {"sha": "2c319db7c1ec971a7e0d3f23802c9f9a501fcd62", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.tcc> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,9 @@\n #ifndef _FORWARD_LIST_TCC\n #define _FORWARD_LIST_TCC 1\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_base<_Tp, _Alloc>::\n@@ -494,7 +496,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n           }\n       }\n  \n-_GLIBCXX_END_NESTED_NAMESPACE // namespace std\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _FORWARD_LIST_TCC */\n "}, {"sha": "edaff970374ae6a43a997a3358e4dd06f87fe1d5", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n \n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     void\n@@ -979,6 +981,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "d8e6ae76d49a085fb7672ada512e4faeb03d69f5", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n #include <bits/c++config.h>\n #include <bits/exception_defines.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Helper for exception objects in <except>\n   void\n@@ -99,6 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_bad_function_call() __attribute__((__noreturn__));\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "e77cb4e17bfbf32bbf44fc052f35ac9d4ab4ba92", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #include <bits/hash_bytes.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** @defgroup hashes Hashes\n    *  @ingroup functors\n@@ -183,6 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group hashes\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _FUNCTIONAL_HASH_H"}, {"sha": "47d177510a368c3188838106222c86fc5bed8c1a", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup numeric_arrays\n@@ -177,6 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group numeric_arrays\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _GSLICE_H */"}, {"sha": "1ae047df2cc5e51d157d2e1a301e4f5f12caa0d0", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup numeric_arrays\n@@ -211,6 +213,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n   // @} group numeric_arrays\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _GSLICE_ARRAY_H */"}, {"sha": "2ee85524eff7496895139a109eac1ee749d4eac9", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #include <bits/hashtable_policy.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Class template _Hashtable, class definition.\n \n@@ -1229,6 +1231,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE // namespace std\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif // _HASHTABLE_H"}, {"sha": "f6e187616ee2c39d7bf7390a371796918792ee74", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,10 +31,12 @@\n #ifndef _HASHTABLE_POLICY_H\n #define _HASHTABLE_POLICY_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n namespace __detail\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // Helper function: return distance(first, last) for forward\n   // iterators, or 0 for input iterators.\n   template<class _Iterator>\n@@ -977,8 +979,9 @@ namespace __detail\n \t}\n       return true;\n     }\n-} // namespace __detail\n \n-_GLIBCXX_END_NAMESPACE // namespace std\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __detail\n+} // namespace std\n \n #endif // _HASHTABLE_POLICY_H"}, {"sha": "d7b7b08271c3a93a867847fb0a82dacb1c1a0020", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup numeric_arrays\n@@ -205,6 +207,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n   // @} group numeric_arrays\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _INDIRECT_ARRAY_H */"}, {"sha": "8825657a2aeccb5425f7e21023f8cc6c4ef9b2d8", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,9 @@\n #include <bits/localefwd.h>\n #include <bits/locale_classes.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // The following definitions of bitmask types are enums, not ints,\n   // as permitted (but not required) in the standard, in order to provide\n@@ -969,6 +971,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __base;\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _IOS_BASE_H */"}, {"sha": "5666b11be3da8b98cfadb340515bbbb75a5446ba", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n \n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>::sentry::\n@@ -1087,6 +1089,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "01c1bc6449590f0a1cf4861d3d21ea1c83b970bf", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // List implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,7 +57,9 @@\n #ifndef _LIST_TCC\n #define _LIST_TCC 1\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n     void\n@@ -461,7 +463,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  }\n       }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _LIST_TCC */\n "}, {"sha": "80ba735268b023ef5970dd571da604b171fe8143", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,9 @@\n #include <string>\n #include <ext/atomicity.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 22.1.1 Class locale\n   /**\n@@ -815,7 +817,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ~collate_byname() { }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n # include <bits/locale_classes.tcc>\n "}, {"sha": "e60401343e059999d728d77268bbee4abe972eeb", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Facet>\n     locale::\n@@ -266,6 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "41732f3c4a9e6b6d665d714946597b342544c761", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -49,7 +49,9 @@\n #include <ext/numeric_traits.h>\n #include <bits/streambuf_iterator.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -1503,12 +1505,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n // Include host and configuration specific ctype inlines.\n #include <bits/ctype_inline.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 22.2.2  The numeric category.\n   class __num_base\n@@ -1892,7 +1897,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ~numpunct_byname() { }\n     };\n \n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   /**\n    *  @brief  Primary class template num_get.\n@@ -2512,7 +2517,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template <typename _CharT, typename _OutIter>\n     locale::id num_put<_CharT, _OutIter>::id;\n \n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n \n   // Subclause convenience interfaces, inlines.\n   // NB: These are inline because, when used in a loop, some compilers\n@@ -2597,7 +2602,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n # include <bits/locale_facets.tcc>\n "}, {"sha": "114d852e2ae39364d285f6b52e63e4a6fa9e5878", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Routine to access a cache for the facet.  If the cache didn't\n   // exist before, it gets constructed on the fly.\n@@ -137,7 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __verify_grouping(const char* __grouping, size_t __grouping_size,\n \t\t    const string& __grouping_tmp) throw ();\n \n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _InIter>\n     _InIter\n@@ -782,7 +784,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __len = static_cast<int>(__w);\n     }\n \n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _ValueT>\n     int\n@@ -826,7 +828,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       return __bufend - __buf;\n     }\n \n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _OutIter>\n     void\n@@ -1177,7 +1179,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       return __s;\n     }\n \n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n \n   // Construct correctly padded string, as per 22.2.2.2.2\n   // Assumes\n@@ -1278,8 +1280,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class numpunct<char>;\n   extern template class numpunct_byname<char>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE num_get<char>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE num_put<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL num_get<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL num_put<char>;\n   extern template class ctype_byname<char>;\n \n   extern template\n@@ -1317,8 +1319,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n #ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class numpunct<wchar_t>;\n   extern template class numpunct_byname<wchar_t>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE num_get<wchar_t>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE num_put<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL num_get<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL num_put<wchar_t>;\n   extern template class ctype_byname<wchar_t>;\n \n   extern template\n@@ -1355,6 +1357,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "be7c1a42fd5ca7ce4b91bae4b261a012a21a8318", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,9 @@\n \n #include <ctime>\t// For struct tm\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Time format ordering data.\n@@ -339,12 +341,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t const tm*) const throw ();\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n   // Include host and configuration specific timepunct functions.\n   #include <bits/time_members.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Primary class template time_get.\n@@ -1346,7 +1351,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, bool _Intl>\n     const bool moneypunct_byname<_CharT, _Intl>::intl;\n \n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   /**\n    *  @brief  Primary class template money_get.\n@@ -1654,7 +1659,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n   template<typename _CharT, typename _OutIter>\n     locale::id money_put<_CharT, _OutIter>::id;\n \n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n \n   /**\n    *  @brief  Messages facet base class providing catalog typedef.\n@@ -1919,7 +1924,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       { }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n // Include host and configuration specific messages functions.\n #include <bits/messages_members.h>"}, {"sha": "3039907d750fd35f57d4a11d35d29f8ec602492e", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -32,7 +32,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, bool _Intl>\n     struct __use_cache<__moneypunct_cache<_CharT, _Intl> >\n@@ -122,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _InIter>\n     template<bool _Intl>\n@@ -608,7 +610,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n     { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n \t            : _M_insert<false>(__s, __io, __fill, __digits); }\n \n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n \n   // NB: Not especially useful. Without an ios_base object or some\n   // kind of locale reference, we are left clawing at the air where\n@@ -1219,8 +1221,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;\n   extern template class moneypunct_byname<char, true>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE money_get<char>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE money_put<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL money_get<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL money_put<char>;\n   extern template class __timepunct<char>;\n   extern template class time_put<char>;\n   extern template class time_put_byname<char>;\n@@ -1294,8 +1296,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   extern template class moneypunct<wchar_t, true>;\n   extern template class moneypunct_byname<wchar_t, false>;\n   extern template class moneypunct_byname<wchar_t, true>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE money_get<wchar_t>;\n-  extern template class _GLIBCXX_LDBL_NAMESPACE money_put<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL money_get<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL money_put<wchar_t>;\n   extern template class __timepunct<wchar_t>;\n   extern template class time_put<wchar_t>;\n   extern template class time_put_byname<wchar_t>;\n@@ -1366,6 +1368,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "38e7dd31426d5501d238c00b4b8c4dfb220ac6c7", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -43,7 +43,9 @@\n #include <iosfwd>            // For ostreambuf_iterator, istreambuf_iterator\n #include <cctype>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** \n    *  @defgroup locales Locales\n@@ -138,12 +140,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class codecvt_byname;\n \n   // 22.2.2 and 22.2.3 numeric\n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n   template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\n     class num_get;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class num_put;\n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n   template<typename _CharT> class numpunct;\n   template<typename _CharT> class numpunct_byname;\n \n@@ -166,12 +168,12 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \n   // 22.2.6 money\n   class money_base;\n-_GLIBCXX_BEGIN_LDBL_NAMESPACE\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n   template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n     class money_get;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class money_put;\n-_GLIBCXX_END_LDBL_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_LDBL\n   template<typename _CharT, bool _Intl = false>\n     class moneypunct;\n   template<typename _CharT, bool _Intl = false>\n@@ -184,6 +186,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   template<typename _CharT>\n     class messages_byname;\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "8b652a8387253139f174ab024ded65a3fec5cd2f", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup numeric_arrays\n@@ -201,6 +203,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n   // @} group numeric_arrays\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _MASK_ARRAY_H */"}, {"sha": "f5918999cf9ccdb87b82eea3150a04a92b7cc787", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <bits/c++config.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Used, in C++03 mode too, by allocators, etc.\n   template<typename _Tp>\n@@ -44,12 +46,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <type_traits> // Brings in std::declval too.\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n   /// forward (as per N3143)\n   template<typename _Tp>\n@@ -91,7 +96,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     addressof(_Tp& __r)\n     { return std::__addressof(__r); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #define _GLIBCXX_MOVE(__val) std::move(__val)\n #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)\n@@ -100,7 +106,9 @@ _GLIBCXX_END_NAMESPACE\n #define _GLIBCXX_FORWARD(_Tp, __val) (__val)\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Swaps two values.\n@@ -131,6 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tswap(__a[__n], __b[__n]);\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _MOVE_H */"}, {"sha": "6c59e3e416250300f96c80f5f9f577e27446e736", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n \n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>::sentry::\n@@ -402,6 +404,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "97608a00d06b9fa652ca769dfc85c404748654e9", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n #include <iosfwd>\n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     inline void\n@@ -122,6 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _OSTREAM_INSERT_H */"}, {"sha": "69235d9a099144e5235202c9bd729463430a82e7", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -67,7 +67,9 @@\n \n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // The types streamoff, streampos and wstreampos and the class\n   // template fpos<> are described in clauses 21.1.2, 21.1.3, 27.1.2,\n@@ -236,6 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   typedef fpos<mbstate_t> u32streampos;\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "5c406a648c34388a138dc76be4660ce4c198537a", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n \n #include <vector>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [26.4] Random number generation\n \n@@ -55,11 +57,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _RealType\n     generate_canonical(_UniformRandomNumberGenerator& __g);\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n   /*\n    * Implementation-space details.\n    */\n   namespace __detail\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n     template<typename _UIntType, size_t __w,\n \t     bool = __w < static_cast<size_t>\n \t\t\t  (std::numeric_limits<_UIntType>::digits)>\n@@ -116,8 +122,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       private:\n \t_Engine& _M_g;\n       };\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    * @addtogroup random_generators Random Number Generators\n    * @ingroup random\n@@ -5376,6 +5386,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /* @} */ // group random_utilities\n \n   /* @} */ // group random\n-_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif"}, {"sha": "20f7667e2989f53c78aaad155435064d64ef6098", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,13 +32,15 @@\n \n #include <numeric> // std::accumulate and std::partial_sum\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n   /*\n    * (Further) implementation-space details.\n    */\n   namespace __detail\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n     // General case for x = (ax + c) mod m -- use Schrage's algorithm to\n     // avoid integer overflow.\n     //\n@@ -100,8 +102,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  *__result = __unary_op(*__first);\n \treturn __result;\n       }\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     constexpr _UIntType\n@@ -2818,6 +2823,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n       return __sum / __tmp;\n     }\n-_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "0463791b7181ff336556f1d4148ffbf8d150677d", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Return an iterator pointing to the first element of\n@@ -95,7 +97,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     end(_Tp (&__arr)[_Nm])\n     { return __arr + _Nm; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "f21530f743e2b4d7f0f86a9b83dec95d1ba6b95b", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n /**\n  * @defgroup regex Regular Expressions\n@@ -2421,5 +2423,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   \n   //@} // group regex\n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n "}, {"sha": "5cfd1929cffa493f6c7133786190ad9535df2a4f", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __regex\n {\n@@ -1111,6 +1113,7 @@ namespace __regex\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n /* vim: set ts=8 sw=2 sts=2: */"}, {"sha": "1cdd93c5578145c2b0be622248c474d42c61f42c", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,14 +30,16 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n /**\n  * @namespace std::regex_constants\n  * @brief ISO C++-0x entities sub namespace for regex.\n  */\n namespace regex_constants\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    * @name 5.1 Regular Expression Syntax Options\n    */\n@@ -293,7 +295,7 @@ namespace regex_constants\n \n   //@}\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace regex_constants\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n "}, {"sha": "d9d5556744891c6de882399376e5ab86a344838c", "filename": "libstdc++-v3/include/bits/regex_cursor.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __regex\n {\n@@ -88,4 +90,5 @@ namespace __regex\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ffbedd51fae2d10c0f54d3f553c966dee094ab45", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,10 +30,12 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n namespace regex_constants\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    * @name 5.3 Error Types\n    */\n@@ -114,7 +116,10 @@ namespace regex_constants\n   static const error_type error_stack(_S_error_stack);\n \n   //@}\n-}\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace regex_constants\n+\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [7.8] Class regex_error\n   /**\n@@ -155,4 +160,5 @@ namespace regex_constants\n   __throw_regex_error(regex_constants::error_type __ecode)\n   { throw regex_error(__ecode); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std"}, {"sha": "04d06e5f0f67ae4d9cb5b5c54e8457602584ae81", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _BiIter>\n     class sub_match;\n@@ -124,6 +126,7 @@ namespace __regex\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #include <bits/regex_grep_matcher.tcc>"}, {"sha": "1c1259450220cc041d15681ca67176f9e5c67f05", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n \n #include <regex>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace\n {\n@@ -175,4 +177,5 @@ namespace __regex\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "b1ae3fb3ea0d7415af5176835ab62b641f21b918", "filename": "libstdc++-v3/include/bits/regex_nfa.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -28,7 +28,9 @@\n  *  Do not attempt to use it directly. @headername{regex}\n  */\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __regex\n {\n@@ -398,7 +400,8 @@ namespace __regex\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #include <bits/regex_nfa.tcc>\n "}, {"sha": "211ddc7aed4451af2c19754f0923ad7c4a9d17f8", "filename": "libstdc++-v3/include/bits/regex_nfa.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -29,7 +29,9 @@\n  */\n #include <regex>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __regex\n {\n@@ -169,4 +171,5 @@ _M_clone()\n \n } // namespace __regex\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "628863c12644b6aa3442f58081412c06f1769c2d", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,7 +51,9 @@\n \n #include <bits/shared_ptr_base.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup pointer_abstractions\n@@ -557,6 +559,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group pointer_abstractions\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _SHARED_PTR_H"}, {"sha": "fa85280a4908864deba6ad759d9af5751ca0194a", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -49,7 +49,9 @@\n #ifndef _SHARED_PTR_BASE_H\n #define _SHARED_PTR_BASE_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n  /**\n    *  @brief  Exception possibly thrown by @c shared_ptr.\n@@ -1376,6 +1378,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return std::hash<_Tp*>()(__s.get()); }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _SHARED_PTR_BASE_H"}, {"sha": "3afae22d6c4b7c1669e2f216df8ed4db7ae93d32", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup numeric_arrays\n@@ -267,6 +269,7 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n   // @} group numeric_arrays\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _SLICE_ARRAY_H */"}, {"sha": "8956e9ee758626f5990695122321dbac80842ab3", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template <class _CharT, class _Traits, class _Alloc>\n     typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type\n@@ -268,6 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "707021bdc8f96ef1af9d65e33348ca7d24e5a227", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -70,7 +70,9 @@\n \n // See concept_check.h for the __glibcxx_*_requires macros.\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Swaps the median value of *__a, *__b and *__c to *__a\n   template<typename _Iterator>\n@@ -327,7 +329,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       _Integer __count, const _Tp& __val,\n \t       std::forward_iterator_tag)\n     {\n-      __first = _GLIBCXX_STD_P::find(__first, __last, __val);\n+      __first = _GLIBCXX_STD_A::find(__first, __last, __val);\n       while (__first != __last)\n \t{\n \t  typename iterator_traits<_ForwardIterator>::difference_type\n@@ -343,7 +345,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    return __first;\n \t  if (__i == __last)\n \t    return __last;\n-\t  __first = _GLIBCXX_STD_P::find(++__i, __last, __val);\n+\t  __first = _GLIBCXX_STD_A::find(++__i, __last, __val);\n \t}\n       return __last;\n     }\n@@ -506,7 +508,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  while (1)\n \t    {\n \t      _ForwardIterator1 __new_result\n-\t\t= _GLIBCXX_STD_P::search(__first1, __last1, __first2, __last2);\n+\t\t= _GLIBCXX_STD_A::search(__first1, __last1, __first2, __last2);\n \t      if (__new_result == __last1)\n \t\treturn __result;\n \t      else\n@@ -535,7 +537,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  while (1)\n \t    {\n \t      _ForwardIterator1 __new_result\n-\t\t= _GLIBCXX_STD_P::search(__first1, __last1, __first2,\n+\t\t= _GLIBCXX_STD_A::search(__first1, __last1, __first2,\n \t\t\t\t\t __last2, __comp);\n \t      if (__new_result == __last1)\n \t\treturn __result;\n@@ -569,7 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _RevIterator1 __rlast1(__first1);\n       _RevIterator2 __rlast2(__first2);\n-      _RevIterator1 __rresult = _GLIBCXX_STD_P::search(_RevIterator1(__last1),\n+      _RevIterator1 __rresult = _GLIBCXX_STD_A::search(_RevIterator1(__last1),\n \t\t\t\t\t\t       __rlast1,\n \t\t\t\t\t\t       _RevIterator2(__last2),\n \t\t\t\t\t\t       __rlast2);\n@@ -745,7 +747,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _InputIterator, typename _Predicate>\n     inline bool\n     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n-    { return __last == _GLIBCXX_STD_P::find_if(__first, __last, __pred); }\n+    { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }\n \n   /**\n    *  @brief  Checks that a predicate is false for at least an element\n@@ -1093,7 +1095,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      __first = _GLIBCXX_STD_P::find(__first, __last, __value);\n+      __first = _GLIBCXX_STD_A::find(__first, __last, __value);\n       if(__first == __last)\n         return __first;\n       _ForwardIterator __result = __first;\n@@ -1136,7 +1138,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      __first = _GLIBCXX_STD_P::find_if(__first, __last, __pred);\n+      __first = _GLIBCXX_STD_A::find_if(__first, __last, __pred);\n       if(__first == __last)\n         return __first;\n       _ForwardIterator __result = __first;\n@@ -1176,7 +1178,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       // Skip the beginning, if already unique.\n-      __first = _GLIBCXX_STD_P::adjacent_find(__first, __last);\n+      __first = _GLIBCXX_STD_A::adjacent_find(__first, __last);\n       if (__first == __last)\n \treturn __last;\n \n@@ -1218,7 +1220,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       // Skip the beginning, if already unique.\n-      __first = _GLIBCXX_STD_P::adjacent_find(__first, __last, __binary_pred);\n+      __first = _GLIBCXX_STD_A::adjacent_find(__first, __last, __binary_pred);\n       if (__first == __last)\n \treturn __last;\n \n@@ -2274,7 +2276,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{\n \t  if (__depth_limit == 0)\n \t    {\n-\t      _GLIBCXX_STD_P::partial_sort(__first, __last, __last);\n+\t      _GLIBCXX_STD_A::partial_sort(__first, __last, __last);\n \t      return;\n \t    }\n \t  --__depth_limit;\n@@ -2296,7 +2298,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{\n \t  if (__depth_limit == 0)\n \t    {\n-\t      _GLIBCXX_STD_P::partial_sort(__first, __last, __last, __comp);\n+\t      _GLIBCXX_STD_A::partial_sort(__first, __last, __last, __comp);\n \t      return;\n \t    }\n \t  --__depth_limit;\n@@ -2830,7 +2832,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n-\t  _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t  _GLIBCXX_STD_A::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n@@ -2893,7 +2895,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n-\t  _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n+\t  _GLIBCXX_STD_A::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__buffer_end),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__middle),\n \t\t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n@@ -3155,7 +3157,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       while (__last - __first >= __two_step)\n \t{\n-\t  __result = _GLIBCXX_STD_P::merge(\n+\t  __result = _GLIBCXX_STD_A::merge(\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n@@ -3165,7 +3167,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       __step_size = std::min(_Distance(__last - __first), __step_size);\n-      _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+      _GLIBCXX_STD_A::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n \t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n \t\t\t\t\t\t\t__step_size),\n \t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n@@ -3186,7 +3188,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       while (__last - __first >= __two_step)\n \t{\n-\t  __result = _GLIBCXX_STD_P::merge(\n+\t  __result = _GLIBCXX_STD_A::merge(\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n \t\t\t_GLIBCXX_MAKE_MOVE_ITERATOR(__first + __step_size),\n@@ -3196,7 +3198,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n       __step_size = std::min(_Distance(__last - __first), __step_size);\n \n-      _GLIBCXX_STD_P::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+      _GLIBCXX_STD_A::merge(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n \t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n \t\t\t\t\t\t\t__step_size),\n \t\t\t    _GLIBCXX_MAKE_MOVE_ITERATOR(__first +\n@@ -4143,7 +4145,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       std::advance(__last2, std::distance(__first1, __last1));\n       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)\n \t{\n-\t  if (__scan != _GLIBCXX_STD_P::find(__first1, __scan, *__scan))\n+\t  if (__scan != _GLIBCXX_STD_A::find(__first1, __scan, *__scan))\n \t    continue; // We've seen this one before.\n \n \t  auto __matches = std::count(__first2, __last2, *__scan);\n@@ -4190,7 +4192,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{\n \t  using std::placeholders::_1;\n \n-\t  if (__scan != _GLIBCXX_STD_P::find_if(__first1, __scan,\n+\t  if (__scan != _GLIBCXX_STD_A::find_if(__first1, __scan,\n \t\t\t\t\t\tstd::bind(__pred, _1, *__scan)))\n \t    continue; // We've seen this one before.\n \t  \n@@ -4246,9 +4248,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n+_GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   /**\n    *  @brief Apply a function to every element of a sequence.\n@@ -4557,15 +4559,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       // Test for a pattern of length 1.\n       _ForwardIterator2 __p1(__first2);\n       if (++__p1 == __last2)\n-\treturn _GLIBCXX_STD_P::find(__first1, __last1, *__first2);\n+\treturn _GLIBCXX_STD_A::find(__first1, __last1, *__first2);\n \n       // General case.\n       _ForwardIterator2 __p;\n       _ForwardIterator1 __current = __first1;\n \n       for (;;)\n \t{\n-\t  __first1 = _GLIBCXX_STD_P::find(__first1, __last1, *__first2);\n+\t  __first1 = _GLIBCXX_STD_A::find(__first1, __last1, *__first2);\n \t  if (__first1 == __last1)\n \t    return __last1;\n \n@@ -4695,7 +4697,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       if (__count <= 0)\n \treturn __first;\n       if (__count == 1)\n-\treturn _GLIBCXX_STD_P::find(__first, __last, __val);\n+\treturn _GLIBCXX_STD_A::find(__first, __last, __val);\n       return std::__search_n(__first, __last, __count, __val,\n \t\t\t     std::__iterator_category(__first));\n     }\n@@ -6166,6 +6168,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return __result;\n     }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_ALGO\n+} // namespace std\n \n #endif /* _STL_ALGO_H */"}, {"sha": "626d5bf1c8d5decf0bec86ea86b3ba25d97c8adf", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Core algorithmic facilities -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -70,7 +70,9 @@\n #include <debug/debug.h>\n #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n@@ -987,9 +989,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __lg(long long __n)\n   { return sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n+_GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   /**\n    *  @brief Tests a range for element-wise equality.\n@@ -1196,7 +1198,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_ALGO\n+} // namespace std\n \n // NB: This file is included within many other C++ includes, as a way\n // of getting the base algorithms. So, make sure that parallel bits"}, {"sha": "3cd53e7fad77a8266239ef7ee16ac4e60e5653c4", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // vector<bool> specialization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,7 +59,9 @@\n \n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   typedef unsigned long _Bit_type;\n   enum { _S_word_bit = int(__CHAR_BIT__ * sizeof(_Bit_type)) };\n@@ -446,12 +448,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       }\n     };\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n // Declare a partial specialization of vector<T, Alloc>.\n #include <bits/stl_vector.h>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief  A specialization of vector for booleans which offers fixed time\n@@ -1026,25 +1031,29 @@ template<typename _Alloc>\n     { this->_M_impl._M_finish = __pos; }\n   };\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n #include <bits/functional_hash.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 1182.\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>\n-    struct hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>\n-    : public __hash_base<size_t, _GLIBCXX_STD_D::vector<bool, _Alloc>>\n+    struct hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>\n+    : public __hash_base<size_t, _GLIBCXX_STD_C::vector<bool, _Alloc>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const;\n+      operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const;\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}// namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "2efba9378b19c00d4446d7c37c886e09ca65f235", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n #include <new>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * Constructs an object in existing memory by invoking an allocated\n@@ -151,7 +153,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Destroy(__first, __last);\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_CONSTRUCT_H */\n "}, {"sha": "0d9b5b44cb9239c6da7c3a485eb3f8b65bf2176d", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Deque implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,7 +62,9 @@\n #include <bits/stl_iterator_base_funcs.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief This function controls the size of memory nodes.\n@@ -1971,6 +1973,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n #undef _GLIBCXX_DEQUE_BUF_SIZE\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_DEQUE_H */"}, {"sha": "7660d15b3aec35c3d8e155aa381d55311d7437ee", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -57,7 +57,9 @@\n #ifndef _STL_FUNCTION_H\n #define _STL_FUNCTION_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.1 base classes\n   /** @defgroup functors Function Objects\n@@ -722,7 +724,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /** @}  */\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_DEPRECATED\n # include <backward/binders.h>"}, {"sha": "b00fc69fcb534499379cb2dcebbf2d519f4f746f", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -59,7 +59,9 @@\n #include <debug/debug.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup heap_algorithms Heap\n@@ -573,6 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return std::is_heap_until(__first, __last, __comp) == __last; }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_HEAP_H */"}, {"sha": "b23107d3577dd0190ce12af41f7ea7ab6dfec9ad", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -65,7 +65,9 @@\n #include <ext/type_traits.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup iterators\n@@ -680,9 +682,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group iterators\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // This iterator adapter is @a normal in the sense that it does not\n   // change the semantics of any of the operators of its iterator\n@@ -892,11 +897,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      __n, const __normal_iterator<_Iterator, _Container>& __i)\n     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup iterators\n@@ -1112,7 +1120,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group iterators\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)\n #else"}, {"sha": "836aa9223ba43fef2c83b42578546be195a97454", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -64,7 +64,9 @@\n \n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator>\n     inline typename iterator_traits<_InputIterator>::difference_type\n@@ -195,6 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_ITERATOR_BASE_FUNCS_H */"}, {"sha": "9944dc44102b63b88e0ca421d26bd7f15b2469d4", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -68,7 +68,9 @@\n # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @defgroup iterators Iterators\n@@ -220,7 +222,8 @@ _GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n       { return __it.base(); }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_ITERATOR_BASE_TYPES_H */\n "}, {"sha": "126de00b3b08a5aa4e0d321443049dfdb13366ba", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 50, "deletions": 36, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // List implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,47 +60,58 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n-\n-  // Supporting structures are split into common and templated types; the\n-  // latter publicly inherits from the former in an effort to reduce code\n-  // duplication.  This results in some \"needless\" static_cast'ing later on,\n-  // but it's all safe downcasting.\n-\n-  /// Common part of a node in the %list. \n-  struct _List_node_base\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  namespace __detail\n   {\n-    _List_node_base* _M_next;\n-    _List_node_base* _M_prev;\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-    static void\n-    swap(_List_node_base& __x, _List_node_base& __y) throw ();\n+    // Supporting structures are split into common and templated\n+    // types; the latter publicly inherits from the former in an\n+    // effort to reduce code duplication.  This results in some\n+    // \"needless\" static_cast'ing later on, but it's all safe\n+    // downcasting.\n \n-    void\n-    _M_transfer(_List_node_base * const __first,\n-\t\t_List_node_base * const __last) throw ();\n-\n-    void\n-    _M_reverse() throw ();\n+    /// Common part of a node in the %list. \n+    struct _List_node_base\n+    {\n+      _List_node_base* _M_next;\n+      _List_node_base* _M_prev;\n+      \n+      static void\n+      swap(_List_node_base& __x, _List_node_base& __y) throw ();\n+      \n+      void\n+      _M_transfer(_List_node_base* const __first,\n+\t\t  _List_node_base* const __last) throw ();\n+      \n+      void\n+      _M_reverse() throw ();\n+      \n+      void\n+      _M_hook(_List_node_base* const __position) throw ();\n+      \n+      void\n+      _M_unhook() throw ();\n+    };\n \n-    void\n-    _M_hook(_List_node_base * const __position) throw ();\n+  _GLIBCXX_END_NAMESPACE_VERSION\n+  } // namespace detail\n \n-    void\n-    _M_unhook() throw ();\n-  };\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// An actual node in the %list.\n   template<typename _Tp>\n-    struct _List_node : public _List_node_base\n+    struct _List_node : public __detail::_List_node_base\n     {\n       ///< User's data.\n       _Tp _M_data;\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename... _Args>\n         _List_node(_Args&&... __args)\n-\t: _List_node_base(), _M_data(std::forward<_Args>(__args)...) { }\n+\t: __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...) \n+        { }\n #endif\n     };\n \n@@ -125,7 +136,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_node() { }\n \n       explicit\n-      _List_iterator(_List_node_base* __x)\n+      _List_iterator(__detail::_List_node_base* __x)\n       : _M_node(__x) { }\n \n       // Must downcast from _List_node_base to _List_node to get to _M_data.\n@@ -176,7 +187,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_node != __x._M_node; }\n \n       // The only member points to the %list element.\n-      _List_node_base* _M_node;\n+      __detail::_List_node_base* _M_node;\n     };\n \n   /**\n@@ -201,7 +212,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_node() { }\n \n       explicit\n-      _List_const_iterator(const _List_node_base* __x)\n+      _List_const_iterator(const __detail::_List_node_base* __x)\n       : _M_node(__x) { }\n \n       _List_const_iterator(const iterator& __x)\n@@ -256,7 +267,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_node != __x._M_node; }\n \n       // The only member points to the %list element.\n-      const _List_node_base* _M_node;\n+      const __detail::_List_node_base* _M_node;\n     };\n \n   template<typename _Val>\n@@ -298,7 +309,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       struct _List_impl \n       : public _Node_alloc_type\n       {\n-\t_List_node_base _M_node;\n+\t__detail::_List_node_base _M_node;\n \n \t_List_impl()\n \t: _Node_alloc_type(), _M_node()\n@@ -351,7 +362,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_impl(__x._M_get_Node_allocator())\n       {\n \t_M_init();\n-\t_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);\t\n+\t__detail::_List_node_base::swap(this->_M_impl._M_node, \n+\t\t\t\t\t__x._M_impl._M_node);\t\n       }\n #endif\n \n@@ -1164,7 +1176,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       void\n       swap(list& __x)\n       {\n-\t_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);\n+\t__detail::_List_node_base::swap(this->_M_impl._M_node, \n+\t\t\t\t\t__x._M_impl._M_node);\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 431. Swapping containers with unequal allocators.\n@@ -1611,6 +1624,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_LIST_H */"}, {"sha": "a84b4b61dfb195bd0b922fc2a960a73b5d7aa1a2", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Map implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,7 +61,9 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n@@ -928,6 +930,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t map<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_MAP_H */"}, {"sha": "ca37f359e1b8b8c105f7a7e89c0eb4b40b3dc624", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,7 +60,9 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n@@ -846,6 +848,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n          multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_MULTIMAP_H */"}, {"sha": "9a48916c3c34810d23f7423ee72bf9e0c8c889c0", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,7 +60,9 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief A standard container made up of elements, which can be retrieved\n@@ -730,6 +732,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t multiset<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_MULTISET_H */"}, {"sha": "1b6998d97354353297fb357319ed4af58ab1709d", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Numeric functions implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -63,7 +63,9 @@\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Create a range of sequentially increasing values.\n@@ -94,11 +96,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   /**\n    *  @brief  Accumulate values in a range.\n@@ -375,6 +380,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return ++__result;\n     }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_ALGO\n+} // namespace std\n \n #endif /* _STL_NUMERIC_H */"}, {"sha": "8d137b29a13dc95fd38f36ff65fda24d12b53b85", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -63,7 +63,9 @@\n #include <type_traits> // for std::__decay_and_strip too\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /// piecewise_construct_t\n@@ -271,6 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return pair<_T1, _T2>(__x, __y); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_PAIR_H */"}, {"sha": "5f20072b62f6070272f9267983e55aa0e0e27f0e", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  A standard container giving FIFO behavior.\n@@ -551,6 +553,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : public uses_allocator<_Sequence, _Alloc>::type { };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_QUEUE_H */"}, {"sha": "87c9a660b94a5129958b57c9846141b6016fb980", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -57,7 +57,9 @@\n #ifndef _STL_RAW_STORAGE_ITERATOR_H\n #define _STL_RAW_STORAGE_ITERATOR_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  This iterator class lets algorithms store their results into\n@@ -101,6 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4e79e54b35966e9852e7f1787283d7f2bc4a0d5a", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // std::rel_ops implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005, 2008, 2010\n+// Copyright (C) 2001, 2002, 2004, 2005, 2008, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -65,10 +65,12 @@\n #ifndef _STL_RELOPS_H\n #define _STL_RELOPS_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n   namespace rel_ops\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n     /** @namespace std::rel_ops\n      *  @brief  The generated relational operators are sequestered here.\n      */\n@@ -125,8 +127,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator>=(const _Tp& __x, const _Tp& __y)\n       { return !(__x < __y); }\n \n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace rel_ops\n \n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif /* _STL_RELOPS_H */"}, {"sha": "77d0f8022c3fa54d5cf65e059669ff7bb3ca2135", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Set implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,7 +60,9 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief A standard container made up of unique keys, which can be\n@@ -91,7 +93,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __glibcxx_class_requires(_Key, _SGIAssignableConcept)\n       __glibcxx_class_requires4(_Compare, bool, _Key, _Key,\n \t\t\t\t_BinaryFunctionConcept)\n-      __glibcxx_class_requires2(_Key, _Alloc_value_type, _SameTypeConcept)\t\n+      __glibcxx_class_requires2(_Key, _Alloc_value_type, _SameTypeConcept)\n \n     public:\n       // typedefs:\n@@ -156,9 +158,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  otherwise (where N is distance(first,last)).\n        */\n       template<typename _InputIterator>\n-        set(_InputIterator __first, _InputIterator __last)\n+\tset(_InputIterator __first, _InputIterator __last)\n \t: _M_t()\n-        { _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  Builds a %set from a range.\n@@ -172,11 +174,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  otherwise (where N is distance(first,last)).\n        */\n       template<typename _InputIterator>\n-        set(_InputIterator __first, _InputIterator __last,\n+\tset(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, __a)\n-        { _M_t._M_insert_unique(__first, __last); }\n+\t{ _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  %Set copy constructor.\n@@ -384,7 +386,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  std::swap(s1,s2) will feed to this function.\n        */\n       void\n-      swap(set& __x)\t\n+      swap(set& __x)\n       { _M_t.swap(__x._M_t); }\n \n       // insert/erase\n@@ -435,7 +437,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *\n        *  For more on @a hinting, see:\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n-       *  \n+       *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n@@ -458,9 +460,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Complexity similar to that of the range constructor.\n        */\n       template<typename _InputIterator>\n-        void\n-        insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t._M_insert_unique(__first, __last); }\n+\tvoid\n+\tinsert(_InputIterator __first, _InputIterator __last)\n+\t{ _M_t._M_insert_unique(__first, __last); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n@@ -482,7 +484,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  @brief Erases an element from a %set.\n        *  @param  position  An iterator pointing to the element to be erased.\n        *  @return An iterator pointing to the element immediately following\n-       *          @a position prior to the element being erased. If no such \n+       *          @a position prior to the element being erased. If no such\n        *          element exists, end() is returned.\n        *\n        *  This function erases an element, pointed to by the given iterator,\n@@ -670,12 +672,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       //@}\n \n       template<typename _K1, typename _C1, typename _A1>\n-        friend bool\n-        operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n+\tfriend bool\n+\toperator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n \n       template<typename _K1, typename _C1, typename _A1>\n-        friend bool\n-        operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n+\tfriend bool\n+\toperator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);\n     };\n \n \n@@ -746,6 +748,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n-\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} //namespace std\n #endif /* _STL_SET_H */"}, {"sha": "73c8bbd5d4607de49881ba7259c7ca80285de765", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  A standard container giving FILO behavior.\n@@ -292,6 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : public uses_allocator<_Seq, _Alloc>::type { };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_STACK_H */"}, {"sha": "a99dac93095ed1cff265317394954a59bdafad7e", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -60,7 +60,9 @@\n #include <bits/stl_algobase.h>\n #include <bits/stl_construct.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Allocates a temporary buffer.\n@@ -264,7 +266,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_TEMPBUF_H */\n "}, {"sha": "1960f9c8a45e8a40288786a0dae5fda0af99f961", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -65,7 +65,9 @@\n #include <bits/stl_function.h>\n #include <bits/cpp_type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Red-black tree class, designed for use in implementing STL\n   // associative containers (set, multiset, map, and multimap). The\n@@ -1585,6 +1587,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return true;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f15be3aee3b60798853e6d833e9a271523cf8388", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -58,7 +58,9 @@\n #ifndef _STL_UNINITIALIZED_H\n #define _STL_UNINITIALIZED_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<bool _TrivialValueTypes>\n     struct __uninitialized_copy\n@@ -632,6 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t std::__iterator_category(__first)); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _STL_UNINITIALIZED_H */"}, {"sha": "5f71aa5cd007c57af599ae0cee45b56d2276a007", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Vector implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,7 +62,9 @@\n #include <bits/concept_check.h>\n #include <initializer_list>\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// See bits/stl_deque.h's _Deque_base for an explanation.\n   template<typename _Tp, typename _Alloc>\n@@ -1319,6 +1321,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _STL_VECTOR_H */"}, {"sha": "57ca96111464fd34434f9eb50549dcf8804fcab9", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #include <debug/debug.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup iterators\n@@ -213,6 +215,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group iterators\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "253f308dc88bd6ea85c94f325bcacfcabd38fda3", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n     streamsize\n@@ -169,6 +171,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "6032a29e6f80c54bef6879347083fe4bf5d1e223", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n #include <streambuf>\n #include <debug/debug.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n      \n   /**\n    * @addtogroup iterators\n@@ -394,6 +396,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n // @} group iterators\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "5f2d49c55790217a27b0df02b24ae095731fc18c", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n \n #include <bits/c++config.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Alloc>\n     class allocator;\n@@ -80,6 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   /** @}  */\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\t// _STRINGFWD_H"}, {"sha": "339176a4bd538e8e79d9bf0e3cfb96d417f4c23d", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n #include <utility>\n #include <tuple>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup pointer_abstractions\n@@ -501,6 +503,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group pointer_abstractions\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _UNIQUE_PTR_H */"}, {"sha": "c77bab12fbafaa92391e8081a631e6a701674389", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // unordered_map implementation -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,9 +30,11 @@\n #ifndef _UNORDERED_MAP_H\n #define _UNORDERED_MAP_H\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n-  // XXX When we get typedef templates these class definitions\n+  // NB: When we get typedef templates these class definitions\n   // will be unnecessary.\n   template<class _Key, class _Tp,\n \t   class _Hash = hash<_Key>,\n@@ -401,6 +403,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t       const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n     { return !(__x == __y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _UNORDERED_MAP_H */"}, {"sha": "38350bc390d0109e66aec2b65b2bfe197597fee5", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // unordered_set implementation -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,9 +30,11 @@\n #ifndef _UNORDERED_SET_H\n #define _UNORDERED_SET_H\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n-  // XXX When we get typedef templates these class definitions\n+  // NB: When we get typedef templates these class definitions\n   // will be unnecessary.\n   template<class _Value,\n \t   class _Hash = hash<_Value>,\n@@ -392,7 +394,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t       const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n     { return !(__x == __y); }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #endif /* _UNORDERED_SET_H */\n "}, {"sha": "6440fae43d90897dcba9fcce736de42d5d4a2920", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #pragma GCC system_header\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   //\n   // gslice_array closure.\n@@ -544,6 +546,7 @@ _DEFINE_EXPR_BINARY_FUNCTION(pow, _Pow)\n \n #undef _DEFINE_EXPR_BINARY_FUNCTION\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _CPP_VALARRAY_AFTER_H */"}, {"sha": "cba9f3fbdbed9c45897eb7083ea2ef4748c4bdba", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <cstdlib>\n #include <new>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   //\n   // Helper functions on raw pointers\n@@ -685,7 +687,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #undef _DEFINE_ARRAY_FUNCTION\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n # include <bits/valarray_array.tcc>\n "}, {"sha": "7720707656c7b0f71ec91192c5180ebf732c3d37", "filename": "libstdc++-v3/include/bits/valarray_array.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #ifndef _VALARRAY_ARRAY_TCC\n #define _VALARRAY_ARRAY_TCC 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     void\n@@ -237,6 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _VALARRAY_ARRAY_TCC */"}, {"sha": "0755f768b7893bc8d7f6383fdf4deeb85d39cd3d", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n \n #include <bits/slice_array.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   //\n   // Implementing a loosened valarray return value is tricky.\n@@ -726,6 +728,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _CPP_VALARRAY_BEFORE_H */"}, {"sha": "3aaee392e55fca50d459c0a8da32e53cad03bcf1", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,7 +57,9 @@\n #ifndef _VECTOR_TCC\n #define _VECTOR_TCC 1\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n     void\n@@ -729,20 +731,23 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t}\n     }\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Alloc>\n     size_t\n-    hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>::\n-    operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const\n+    hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>::\n+    operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const\n     {\n       size_t __hash = 0;\n-      using _GLIBCXX_STD_D::_S_word_bit;\n-      using _GLIBCXX_STD_D::_Bit_type;\n+      using _GLIBCXX_STD_C::_S_word_bit;\n+      using _GLIBCXX_STD_C::_Bit_type;\n \n       const size_t __words = __b.size() / _S_word_bit;\n       if (__words)\n@@ -768,7 +773,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __hash;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "1e9ade9f0ad05d4ceb18159e12029f58481a26e1", "filename": "libstdc++-v3/include/c/cmath", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -74,7 +74,7 @@\n #undef islessgreater\n #undef isunordered\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   inline double\n   abs(double __x)"}, {"sha": "2324b5b9689908271afffb4c448f19f093ae4a93", "filename": "libstdc++-v3/include/c/cwchar", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,7 @@\n // Need to do a bit of trickery here with mbstate_t as char_traits\n // assumes it is in wchar.h, regardless of wchar_t specializations.\n #ifndef _GLIBCXX_HAVE_MBSTATE_T\n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   extern \"C\"\n   {"}, {"sha": "2096e393cc77339d207631748ea6c78ff5bf75d8", "filename": "libstdc++-v3/include/c_compatibility/fenv.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -52,8 +52,8 @@\n #undef fesetenv\n #undef feupdateenv\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   // types\n   using ::fenv_t;\n   using ::fexcept_t;\n@@ -72,8 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::feholdexcept;\n   using ::fesetenv;\n   using ::feupdateenv;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif // _GLIBCXX_USE_C99_FENV_TR1\n "}, {"sha": "54c220c2f68c354be4ea450717f7ba9502d8a9af", "filename": "libstdc++-v3/include/c_compatibility/inttypes.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -50,8 +50,8 @@\n \n #ifdef _GLIBCXX_USE_C99_INTTYPES_TR1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   // types\n   using ::imaxdiv_t;\n \n@@ -76,8 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::wcstoimax;\n   using ::wcstoumax;\n #endif\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif _GLIBCXX_USE_C99_INTTYPES_TR1\n "}, {"sha": "32538c6c82b119d7fc1df086daeeb2381fd48efb", "filename": "libstdc++-v3/include/c_compatibility/stdint.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -58,8 +58,8 @@\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::int8_t;\n   using ::int16_t;\n   using ::int32_t;\n@@ -95,8 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   using ::uintmax_t;\n   using ::uintptr_t;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n "}, {"sha": "0fed691ecefcd106ae4838b85eb815b724f7dee5", "filename": "libstdc++-v3/include/c_global/cctype", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,8 +61,8 @@\n #undef tolower\n #undef toupper\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::isalnum;\n   using ::isalpha;\n   using ::iscntrl;\n@@ -76,20 +76,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::isxdigit;\n   using ::tolower;\n   using ::toupper;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n #ifdef _GLIBCXX_USE_C99_CTYPE_TR1\n \n #undef isblank\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::isblank;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99_CTYPE_TR1\n "}, {"sha": "35010a0ba205e2939dc2b3a7a9a3ad3cba4b7406", "filename": "libstdc++-v3/include/c_global/cfenv", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -55,8 +55,8 @@\n #undef fesetenv\n #undef feupdateenv\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   // types\n   using ::fenv_t;\n   using ::fexcept_t;\n@@ -75,8 +75,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::feholdexcept;\n   using ::fesetenv;\n   using ::feupdateenv;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99_FENV_TR1\n "}, {"sha": "df733407bd378974f9ffd8259cbe67c919034bb7", "filename": "libstdc++-v3/include/c_global/cinttypes", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -52,8 +52,8 @@\n \n #ifdef _GLIBCXX_USE_C99_INTTYPES_TR1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   // types\n   using ::imaxdiv_t;\n \n@@ -78,8 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::wcstoimax;\n   using ::wcstoumax;\n #endif\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99_INTTYPES_TR1\n "}, {"sha": "3f16bffe666d5f826969eebbe33ac8525e91464e", "filename": "libstdc++-v3/include/c_global/clocale", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -50,12 +50,11 @@\n #undef setlocale\n #undef localeconv\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::lconv;\n   using ::setlocale;\n   using ::localeconv;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "a333eb583c058dcd3905e1eaa022a868437581f9", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -74,7 +74,9 @@\n #undef tan\n #undef tanh\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline double\n   abs(double __x)\n@@ -462,7 +464,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n@@ -481,7 +484,9 @@ _GLIBCXX_END_NAMESPACE\n #undef islessgreater\n #undef isunordered\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   inline int\n@@ -840,7 +845,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n@@ -955,7 +961,9 @@ _GLIBCXX_END_NAMESPACE\n #undef truncf\n #undef truncl\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // types\n   using ::double_t;\n@@ -1648,7 +1656,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return trunc(__type(__x));\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _GLIBCXX_USE_C99_MATH_TR1\n "}, {"sha": "2832801e4dc1146e2d58b6509caf415e19e707d7", "filename": "libstdc++-v3/include/c_global/csetjmp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -54,11 +54,10 @@\n #define setjmp(env) setjmp (env)\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::jmp_buf;\n   using ::longjmp;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "98f0d665267f1520aea943592c627414253812d8", "filename": "libstdc++-v3/include/c_global/csignal", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -49,12 +49,11 @@\n // Get rid of those macros defined in <signal.h> in lieu of real functions.\n #undef raise\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::sig_atomic_t;\n   using ::signal;\n   using ::raise;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "fb27389bc304266d2f7746d24f668842b7a86895", "filename": "libstdc++-v3/include/c_global/cstdarg", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,10 +51,9 @@\n #define va_end(ap) va_end (ap)\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::va_list;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "ce8143ea2bd4035c40c6eee331b8b5104e3a2166", "filename": "libstdc++-v3/include/c_global/cstdint", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -60,8 +60,8 @@\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::int8_t;\n   using ::int16_t;\n   using ::int32_t;\n@@ -97,8 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   using ::uintmax_t;\n   using ::uintptr_t;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99_STDINT_TR1\n "}, {"sha": "049704d83b9031138eda3f13c56b1c9b80474646", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -89,8 +89,8 @@\n #undef vprintf\n #undef vsprintf\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::FILE;\n   using ::fpos_t;\n \n@@ -135,8 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::vfprintf;\n   using ::vprintf;\n   using ::vsprintf;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #if _GLIBCXX_USE_C99\n \n@@ -146,8 +145,8 @@ _GLIBCXX_END_NAMESPACE\n #undef vsnprintf\n #undef vsscanf\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx\n+{\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n   (snprintf)(char * __restrict, std::size_t, const char * __restrict, ...)\n@@ -170,18 +169,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::vsnprintf;\n   using ::vsscanf;\n #endif\n+} // namespace __gnu_cxx\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::__gnu_cxx::snprintf;\n   using ::__gnu_cxx::vfscanf;\n   using ::__gnu_cxx::vscanf;\n   using ::__gnu_cxx::vsnprintf;\n   using ::__gnu_cxx::vsscanf;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99\n "}, {"sha": "aa7530d380aba4a5ed6f4da1db7164f427f3b147", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -54,13 +54,12 @@\n #define EXIT_SUCCESS 0\n #define EXIT_FAILURE 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   extern \"C\" void abort(void) throw () _GLIBCXX_NORETURN;\n   extern \"C\" int atexit(void (*)()) throw ();\n   extern \"C\" void exit(int) throw () _GLIBCXX_NORETURN;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #else\n \n@@ -96,7 +95,9 @@ _GLIBCXX_END_NAMESPACE\n #undef wcstombs\n #undef wctomb\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::div_t;\n   using ::ldiv_t;\n@@ -140,7 +141,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99\n \n@@ -153,7 +155,9 @@ _GLIBCXX_END_NAMESPACE\n #undef strtof\n #undef strtold\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::lldiv_t;\n@@ -193,10 +197,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::strtof;\n   using ::strtold;\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __gnu_cxx\n \n+namespace std\n+{\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::__gnu_cxx::lldiv_t;\n #endif\n@@ -212,13 +217,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::__gnu_cxx::strtoll;\n   using ::__gnu_cxx::strtoull;\n   using ::__gnu_cxx::strtold;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   // types\n   using std::lldiv_t;\n@@ -240,8 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using std::div;\n #endif\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "ea33fa122604aa5713bfef8e9afd380043ad1028", "filename": "libstdc++-v3/include/c_global/cstring", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -70,7 +70,9 @@\n #undef strtok\n #undef strxfrm\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::memchr;\n   using ::memcmp;\n@@ -117,6 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_strstr(__s1, __s2); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "085e792c8f0571a2136cb9296b69697d0ed8d7ab", "filename": "libstdc++-v3/include/c_global/ctime", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -57,8 +57,8 @@\n #undef localtime\n #undef strftime\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::clock_t;\n   using ::time_t;\n   using ::tm;\n@@ -72,7 +72,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::gmtime;\n   using ::localtime;\n   using ::strftime;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif"}, {"sha": "5a33965777e2a8df2094c6048720766a5623bdae", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,11 +61,10 @@ extern \"C\"\n }\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::mbstate_t;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n // Get rid of those macros defined in <wchar.h> in lieu of real functions.\n #undef btowc\n@@ -135,8 +134,8 @@ _GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n   using ::wint_t;\n \n   using ::btowc;\n@@ -208,6 +207,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::wcsstr;\n   using ::wmemchr;\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n #ifndef __CORRECT_ISO_CPP_WCHAR_H_PROTO\n   inline wchar_t*\n   wcschr(wchar_t* __p, wchar_t __c)\n@@ -230,16 +231,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99\n \n #undef wcstold\n #undef wcstoll\n #undef wcstoull\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx\n+{\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" long double\n     (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) throw ();\n@@ -257,16 +259,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::wcstoll;\n   using ::wcstoull;\n #endif\n+} // namespace __gnu_cxx\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::__gnu_cxx::wcstold;\n   using ::__gnu_cxx::wcstoll;\n   using ::__gnu_cxx::wcstoull;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif\n \n@@ -276,8 +276,8 @@ _GLIBCXX_END_NAMESPACE\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n #if _GLIBCXX_HAVE_WCSTOF\n   using std::wcstof;\n #endif\n@@ -296,8 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using std::wcstoll;\n   using std::wcstoull;\n #endif\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif // _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "e417b68741788e813e88916c6fd3609ccf5b9ba8", "filename": "libstdc++-v3/include/c_global/cwctype", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -79,8 +79,8 @@\n \n #if _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::wctrans_t;\n   using ::wctype_t;\n   using ::wint_t;\n@@ -105,22 +105,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::towupper;\n   using ::wctrans;\n   using ::wctype;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif //_GLIBCXX_USE_WCHAR_T\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n #if _GLIBCXX_HAVE_ISWBLANK\n   using std::iswblank;\n #endif  \n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif // _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "7aa4b3108a04be8c9107e7673841d46c15492205", "filename": "libstdc++-v3/include/c_std/cctype", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -60,8 +60,8 @@\n #undef tolower\n #undef toupper\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::isalnum;\n   using ::isalpha;\n   using ::iscntrl;\n@@ -75,7 +75,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::isxdigit;\n   using ::tolower;\n   using ::toupper;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "c376313699548e949813974191dbd29262969b4a", "filename": "libstdc++-v3/include/c_std/clocale", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -49,12 +49,11 @@\n #undef setlocale\n #undef localeconv\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::lconv;\n   using ::setlocale;\n   using ::localeconv;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "13eef40840216cfeb226c1b0ed25f966a52114fd", "filename": "libstdc++-v3/include/c_std/cmath", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -75,7 +75,9 @@\n #undef tan\n #undef tanh\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline double\n   abs(double __x)\n@@ -442,7 +444,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n@@ -461,7 +464,9 @@ _GLIBCXX_END_NAMESPACE\n #undef islessgreater\n #undef isunordered\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n@@ -572,7 +577,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __builtin_isunordered(__type(__f1), __type(__f2));\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif"}, {"sha": "e2cb388403e95f49443ee44dd691b285fe2d5626", "filename": "libstdc++-v3/include/c_std/csetjmp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -53,11 +53,10 @@\n #define setjmp(env) setjmp (env)\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::jmp_buf;\n   using ::longjmp;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "c1cff8e368207de8f3ba87b4b55e0665d8625139", "filename": "libstdc++-v3/include/c_std/csignal", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -48,12 +48,11 @@\n // Get rid of those macros defined in <signal.h> in lieu of real functions.\n #undef raise\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::sig_atomic_t;\n   using ::signal;\n   using ::raise;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "5053e4f80be1f3f1b8a4a10958438a6632c5ddd0", "filename": "libstdc++-v3/include/c_std/cstdarg", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -50,10 +50,9 @@\n #define va_end(ap) va_end (ap)\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::va_list;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif"}, {"sha": "510f599d876d4992e070baca0d6f2767564fab13", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -88,8 +88,8 @@\n #undef vprintf\n #undef vsprintf\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::FILE;\n   using ::fpos_t;\n \n@@ -134,8 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::vfprintf;\n   using ::vprintf;\n   using ::vsprintf;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #if _GLIBCXX_USE_C99\n \n@@ -145,8 +144,8 @@ _GLIBCXX_END_NAMESPACE\n #undef vsnprintf\n #undef vsscanf\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx\n+{\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n   (snprintf)(char * __restrict, std::size_t, const char * __restrict, ...)\n@@ -169,18 +168,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::vsnprintf;\n   using ::vsscanf;\n #endif\n+} // namespace __gnu_cxx\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::__gnu_cxx::snprintf;\n   using ::__gnu_cxx::vfscanf;\n   using ::__gnu_cxx::vscanf;\n   using ::__gnu_cxx::vsnprintf;\n   using ::__gnu_cxx::vsscanf;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif\n "}, {"sha": "c3fe8aa4507d51375474c2914fb3e812b3a136e0", "filename": "libstdc++-v3/include/c_std/cstdlib", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -53,13 +53,12 @@\n #define EXIT_SUCCESS 0\n #define EXIT_FAILURE 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   extern \"C\" void abort(void) throw () _GLIBCXX_NORETURN;\n   extern \"C\" int atexit(void (*)()) throw ();\n   extern \"C\" void exit(int) throw () _GLIBCXX_NORETURN;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #else\n \n@@ -95,7 +94,9 @@ _GLIBCXX_END_NAMESPACE\n #undef wcstombs\n #undef wctomb\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::div_t;\n   using ::ldiv_t;\n@@ -139,7 +140,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99\n \n@@ -152,7 +154,9 @@ _GLIBCXX_END_NAMESPACE\n #undef strtof\n #undef strtold\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::lldiv_t;\n@@ -192,10 +196,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::strtof;\n   using ::strtold;\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __gnu_cxx\n \n+namespace std\n+{\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::__gnu_cxx::lldiv_t;\n #endif\n@@ -211,8 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::__gnu_cxx::strtoll;\n   using ::__gnu_cxx::strtoull;\n   using ::__gnu_cxx::strtold;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif // _GLIBCXX_USE_C99\n "}, {"sha": "6dd8ab6c27f456b804e6702110db1f594714f473", "filename": "libstdc++-v3/include/c_std/cstring", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -70,7 +70,9 @@\n #undef strerror\n #undef strlen\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::memcpy;\n   using ::memmove;\n@@ -117,6 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_strstr(__s1, __s2); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "766d0929b724cfc970d6427a661918b4535f3d6a", "filename": "libstdc++-v3/include/c_std/ctime", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -56,8 +56,8 @@\n #undef localtime\n #undef strftime\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::clock_t;\n   using ::time_t;\n   using ::tm;\n@@ -71,7 +71,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::gmtime;\n   using ::localtime;\n   using ::strftime;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif"}, {"sha": "8480dac46a8ac4ee5139135d4e9bd5c3109e445e", "filename": "libstdc++-v3/include/c_std/cwchar", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,11 +61,10 @@ extern \"C\"\n }\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::mbstate_t;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n // Get rid of those macros defined in <wchar.h> in lieu of real functions.\n #undef btowc\n@@ -135,7 +134,9 @@ _GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::wint_t;\n \n@@ -226,16 +227,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if _GLIBCXX_USE_C99\n \n #undef wcstold\n #undef wcstoll\n #undef wcstoull\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx\n+{\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" long double\n     (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) throw ();\n@@ -253,16 +255,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using ::wcstoll;\n   using ::wcstoull;\n #endif\n+} // namespace __gnu_cxx\n \n-_GLIBCXX_END_NAMESPACE\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::__gnu_cxx::wcstold;\n   using ::__gnu_cxx::wcstoll;\n   using ::__gnu_cxx::wcstoull;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif\n "}, {"sha": "efaa338b9741b1eff0a75e9ae8f23721c16126fd", "filename": "libstdc++-v3/include/c_std/cwctype", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -78,8 +78,8 @@\n \n #if _GLIBCXX_USE_WCHAR_T\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std\n+{\n   using ::wint_t;\t  // cwchar\n \n   using ::wctype_t;\n@@ -105,8 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   using ::towupper;\n   using ::wctrans;\n   using ::wctype;\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace std\n \n #endif //_GLIBCXX_USE_WCHAR_T\n "}, {"sha": "c1875454255fead29e30c4a9a45de193f6501883", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,19 +34,19 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::bitset with additional safety/checking/debug instrumentation.\n   template<size_t _Nb>\n     class bitset\n-    : public _GLIBCXX_STD_D::bitset<_Nb>\n+    : public _GLIBCXX_STD_C::bitset<_Nb>\n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n     , public __gnu_debug::_Safe_sequence_base\n #endif\n     {\n-      typedef _GLIBCXX_STD_D::bitset<_Nb> _Base;\n+      typedef _GLIBCXX_STD_C::bitset<_Nb> _Base;\n \n     public:\n       // In C++0x we rely on normal reference type to preserve the property\n@@ -410,7 +410,7 @@ namespace __debug\n     {\n       size_t\n       operator()(const __debug::bitset<_Nb>& __b) const\n-      { return std::hash<_GLIBCXX_STD_D::bitset<_Nb>>()(__b._M_base()); }\n+      { return std::hash<_GLIBCXX_STD_C::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif\n "}, {"sha": "6ea8e2addba5ea8ccf2f9297bb42691002a8b09f", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -44,7 +44,7 @@\n  * @namespace std::__debug\n  * @brief GNU debug code, replaces standard behavior with debug behavior.\n  */\n-namespace std \n+namespace std\n { \n   namespace __debug { } \n }"}, {"sha": "ee17f204132b40e6bb86af31f3f17504f3c5d038", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,17 +34,17 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::deque with safety/checking/debug instrumentation.\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class deque\n-    : public _GLIBCXX_STD_D::deque<_Tp, _Allocator>,\n+    : public _GLIBCXX_STD_C::deque<_Tp, _Allocator>,\n       public __gnu_debug::_Safe_sequence<deque<_Tp, _Allocator> >\n     {\n-      typedef  _GLIBCXX_STD_D::deque<_Tp, _Allocator> _Base;\n+      typedef  _GLIBCXX_STD_C::deque<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<deque> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "70bd75a86b9def7f4422d2f69beb378f3f8b7177", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,17 +35,17 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::forward_list with safety/checking/debug instrumentation.\n   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n     class forward_list\n-    : public _GLIBCXX_STD_D::forward_list<_Tp, _Alloc>,\n+    : public _GLIBCXX_STD_C::forward_list<_Tp, _Alloc>,\n       public __gnu_debug::_Safe_sequence<forward_list<_Tp, _Alloc> >\n     {\n-      typedef _GLIBCXX_STD_D::forward_list<_Tp, _Alloc> _Base;\n+      typedef _GLIBCXX_STD_C::forward_list<_Tp, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<forward_list> _Safe_base;\n \n       typedef typename _Base::iterator       _Base_iterator;"}, {"sha": "a7a2c5499180d6fe56ec96d7b70da057b245f766", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,17 +34,17 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::list with safety/checking/debug instrumentation.\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class list\n-    : public _GLIBCXX_STD_D::list<_Tp, _Allocator>,\n+    : public _GLIBCXX_STD_C::list<_Tp, _Allocator>,\n       public __gnu_debug::_Safe_sequence<list<_Tp, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::list<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::list<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<list>  _Safe_base;\n \n       typedef typename _Base::iterator       _Base_iterator;"}, {"sha": "c550db14984fd09ed8ae850e610cd6e4768c7a04", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,18 +34,18 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::map with safety/checking/debug instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class map\n-    : public _GLIBCXX_STD_D::map<_Key, _Tp, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<map<_Key, _Tp, _Compare, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::map<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<map> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "a9d742b0445007e059662cae7d7572366c98eb6b", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,19 +34,19 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::multimap with safety/checking/debug instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap\n-    : public _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<multimap<_Key, _Tp,\n \t\t\t\t\t\t  _Compare, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multimap> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "6808fb80411fd19004ae29c091657378b626ac01", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,18 +34,18 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::multiset with safety/checking/debug instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class multiset\n-    : public _GLIBCXX_STD_D::multiset<_Key, _Compare, _Allocator>,\n+    : public _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<multiset<_Key, _Compare, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::multiset<_Key, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multiset> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "7ca4c7788816129ea7b09c531bed970a24833911", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,18 +34,18 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n-namespace std \n+namespace std _GLIBCXX_VISIBILITY(default) \n {\n namespace __debug\n {\n   /// Class std::set with safety/checking/debug instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class set\n-    : public _GLIBCXX_STD_D::set<_Key,_Compare,_Allocator>,\n+    : public _GLIBCXX_STD_C::set<_Key,_Compare,_Allocator>,\n       public __gnu_debug::_Safe_sequence<set<_Key, _Compare, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::set<_Key, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::set<_Key, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<set> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "2d7e100c43eba3d61421305837ed5cec0e12b9be", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,7 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n@@ -48,11 +48,11 @@ namespace __debug\n \t   typename _Pred = std::equal_to<_Key>,\n \t   typename _Alloc = std::allocator<_Key> >\n     class unordered_map\n-    : public _GLIBCXX_STD_D::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>,\n+    : public _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>,\n       public __gnu_debug::_Safe_sequence<unordered_map<_Key, _Tp, _Hash,\n \t\t\t\t\t\t       _Pred, _Alloc> >\n     {\n-      typedef _GLIBCXX_STD_D::unordered_map<_Key, _Tp, _Hash,\n+      typedef _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash,\n \t\t\t\t\t    _Pred, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<unordered_map> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n@@ -335,12 +335,12 @@ namespace __debug\n \t   typename _Pred = std::equal_to<_Key>,\n \t   typename _Alloc = std::allocator<_Key> >\n     class unordered_multimap\n-    : public _GLIBCXX_STD_D::unordered_multimap<_Key, _Tp, _Hash,\n+    : public _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t_Pred, _Alloc>,\n       public __gnu_debug::_Safe_sequence<unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t\t    _Pred, _Alloc> >\n     {\n-      typedef _GLIBCXX_STD_D::unordered_multimap<_Key, _Tp, _Hash,\n+      typedef _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t _Pred, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<unordered_multimap> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "e30f976d3d624f53d4b31df40fd0a29a826996ff", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,7 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n@@ -48,11 +48,11 @@ namespace __debug\n \t   typename _Pred = std::equal_to<_Value>,\n \t   typename _Alloc = std::allocator<_Value> >\n     class unordered_set\n-    : public _GLIBCXX_STD_D::unordered_set<_Value, _Hash, _Pred, _Alloc>,\n+    : public _GLIBCXX_STD_C::unordered_set<_Value, _Hash, _Pred, _Alloc>,\n       public __gnu_debug::_Safe_sequence<unordered_set<_Value, _Hash,\n \t\t\t\t\t\t       _Pred, _Alloc> >\n     {\n-      typedef _GLIBCXX_STD_D::unordered_set<_Value, _Hash,\n+      typedef _GLIBCXX_STD_C::unordered_set<_Value, _Hash,\n \t\t\t\t\t    _Pred, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<unordered_set> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n@@ -325,11 +325,11 @@ namespace __debug\n \t   typename _Pred = std::equal_to<_Value>,\n \t   typename _Alloc = std::allocator<_Value> >\n     class unordered_multiset\n-    : public _GLIBCXX_STD_D::unordered_multiset<_Value, _Hash, _Pred, _Alloc>,\n+    : public _GLIBCXX_STD_C::unordered_multiset<_Value, _Hash, _Pred, _Alloc>,\n       public __gnu_debug::_Safe_sequence<unordered_multiset<_Value, _Hash,\n \t\t\t\t\t\t\t    _Pred, _Alloc> >\n     {\n-      typedef _GLIBCXX_STD_D::unordered_multiset<_Value, _Hash,\n+      typedef _GLIBCXX_STD_C::unordered_multiset<_Value, _Hash,\n \t\t\t\t\t\t _Pred, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<unordered_multiset> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "e2dd71a7e84ffa8c3d20c526703e1006932f201a", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,18 +35,18 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __debug\n {\n   /// Class std::vector with safety/checking/debug instrumentation.\n   template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n     class vector\n-    : public _GLIBCXX_STD_D::vector<_Tp, _Allocator>,\n+    : public _GLIBCXX_STD_C::vector<_Tp, _Allocator>,\n       public __gnu_debug::_Safe_sequence<vector<_Tp, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::vector<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<vector>              _Safe_base;\n \n       typedef typename _Base::iterator _Base_iterator;\n@@ -595,7 +595,7 @@ namespace __debug\n     {\n       size_t\n       operator()(const __debug::vector<bool, _Alloc>& __b) const\n-      { return std::hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>()\n+      { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n \t  (__b._M_base()); }\n     };\n #endif"}, {"sha": "d65b814ea65ad69038ad3b5e935418ae3dfc6e08", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // <decimal> -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n // terms of the GNU General Public License as published by the\n@@ -40,7 +40,7 @@\n that is currently not available.\n #endif\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   /**\n     * @defgroup decimal Decimal Floating-Point Arithmetic\n@@ -55,6 +55,8 @@ namespace std\n     */\n namespace decimal\n {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   class decimal32;\n   class decimal64;\n   class decimal128;\n@@ -473,6 +475,7 @@ namespace decimal\n \n #define _GLIBCXX_USE_DECIMAL_ 1\n \n+  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace decimal\n   // @} group decimal\n } // namespace std"}, {"sha": "f8f05734ba8f76223a8bef40020518bade9913b0", "filename": "libstdc++-v3/include/decimal/decimal.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // decimal classes -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n \n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file bits/decimal.h\n+/** @file decimal/decimal.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{decimal}\n  */\n \n // ISO/IEC TR 24733\n@@ -35,10 +35,12 @@\n \n #pragma GCC system_header\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace decimal\n {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // ISO/IEC TR 24733  3.2.[234].1  Construct/copy/destroy.\n \n   inline decimal32::decimal32(decimal64 __r)\t: __val(__r.__getval()) {}\n@@ -459,7 +461,7 @@ namespace decimal\n #undef _DEFINE_DECIMAL_COMPARISON_LHS\n #undef _DEFINE_DECIMAL_COMPARISON_RHS\n #undef _DEFINE_DECIMAL_COMPARISONS\n-\n+  _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace decimal\n } // namespace std\n "}, {"sha": "bfe454cecd40c5c7c59532380ffc0848d6cc2040", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n \n #include <algorithm>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::ptrdiff_t;\n   using std::min;\n@@ -588,6 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn __b;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _EXT_ALGORITHM */"}, {"sha": "9c61d7431b1adf55b9649e1d9ae1b1548375c0ad", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n #include <tr1/array>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n  using std::size_t;\n  using std::ptrdiff_t;\n@@ -149,6 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t       const array_allocator<_Tp, _Array>&)\n     { return false; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f0c775216c5d9739104a9ca40a9bbbfc1a3a95ee", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <bits/gthr.h>\n #include <bits/atomic_word.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Functions for portable atomic access.\n   // To abstract locking primitives across all thread policies, use:\n@@ -98,7 +100,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n   }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n // Even if the CPU doesn't need a memory barrier, we need to ensure\n // that the compiler doesn't reorder memory accesses across the"}, {"sha": "4993c2c5780314e44be6989f32f95f4c40a16cb9", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,13 +43,14 @@\n  */\n #define _BALLOC_ALIGN_BYTES 8\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n   using std::size_t;\n   using std::ptrdiff_t;\n \n   namespace __detail\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /** @class  __mini_vector bitmap_allocator.h bitmap_allocator.h\n      *\n      *  @brief  __mini_vector<> is a stripped down version of the\n@@ -504,8 +505,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       size_t __mask = 1 << __pos;\n       *__pbmap |= __mask;\n     }\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace __detail\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /** @brief  Generic Version of the bsf instruction.\n    */\n   inline size_t \n@@ -1100,7 +1105,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     bitmap_allocator<_Tp>::_S_mut;\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __gnu_cxx\n \n #endif \n "}, {"sha": "f3384f9a596f0e76512978767b3f2739ba0f9461", "filename": "libstdc++-v3/include/ext/cast.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -30,7 +30,9 @@\n #ifndef _GLIBCXX_CAST_H\n #define _GLIBCXX_CAST_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * These functions are here to allow containers to support non standard\n@@ -113,6 +115,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     { return _ToType(reinterpret_cast<typename _Caster<_ToType>::\n \t\t     type>(__arg)); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // __GLIBCXX_CAST_H"}, {"sha": "38b95efc107c935eece5a64ca1de43b1195ec52b", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <locale>\n #include <iconv.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Extension to use iconv for dealing with character encodings.\n   // This includes conversions and comparisons between various character\n@@ -213,10 +215,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename std::fpos<state_type>\t\tpos_type;\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using __gnu_cxx::encoding_state;\n \n@@ -503,6 +508,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     do_max_length() const throw()\n     { return 1; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "fc8f63f827e88644856b7bbe93b26e665c8c39b8", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,9 @@\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Available locking policies:\n   // _S_single    single-threaded code that doesn't need to be locked.\n@@ -381,6 +383,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   };\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "12a5ea6ba9273cc2b6127cbfde657594bf924533", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -45,7 +45,9 @@\n \n #include <stdexcept>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n \n@@ -119,6 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "058d330c106bfd491f76ae18b75486b5c2b02f16", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,7 +33,9 @@\n #include <locale>\n #include <ext/codecvt_specializations.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// class enc_filebuf.\n   template<typename _CharT>\n@@ -57,6 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __glibcxx_class_requires(state_type, _SGIAssignableConcept)\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "dfb76ac0959155026931997e92180342e1444b26", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n #include <limits>\n #include <ext/pointer.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @brief An example allocator which uses a non-standard pointer type.\n@@ -173,6 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __larg._M_real_alloc = __tmp;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _EXTPTR_ALLOCATOR_H */"}, {"sha": "7e8acdfb4e636ef4db52e316cf4e2a3b6fe8f758", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n \n #include <functional>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::unary_function;\n@@ -418,7 +420,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\n "}, {"sha": "3e8f438ad3142ed1f73c52537839ea76b733e6db", "filename": "libstdc++-v3/include/ext/iterator", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -61,7 +61,9 @@\n #include <bits/concept_check.h>\n #include <iterator>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // There are two signatures for distance.  In addition to the one\n   // taking two iterators and returning a result, there is another\n@@ -107,7 +109,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __distance(__first, __last, __n, std::__iterator_category(__first));\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\n "}, {"sha": "3aa994d9f70e8a3e1f56dc23666c6ac62b158318", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n #include <bits/functexcept.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -129,6 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator!=(const malloc_allocator<_Tp>&, const malloc_allocator<_Tp>&)\n     { return false; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "ddcfe22b5bed06d72ecfb7e037ca47a8032f7899", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -62,7 +62,9 @@\n #include <memory>\n #include <bits/stl_tempbuf.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::ptrdiff_t;\n   using std::pair;\n@@ -189,7 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~temporary_buffer() { }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\n "}, {"sha": "91eac24f223b4239a6dffd4372b1a0e177e6b4e4", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -36,7 +36,9 @@\n #include <ext/atomicity.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -746,6 +748,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #undef __thread_default\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "35d5cdccd58ea2aa24aa0ad688f9158fc980aea1", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n #include <bits/functexcept.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -126,6 +128,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)\n     { return false; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "d4a367fca52f849d3f09be393f7c8fbc078448a9", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -63,7 +63,9 @@\n \n #include <ext/functional> // For identity_element\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Returns __x ** __n, where __n >= 0.  _Note that \"multiplication\"\n   // is required to be associative, but not necessarily commutative.\n@@ -140,7 +142,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t*__first++ = __value++;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\n "}, {"sha": "e84e2982147887de6be8a5c70c5b2ed708ae410d", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Compile time constants for builtin types.\n   // Sadly std::numeric_limits member functions cannot be used for this.\n@@ -125,7 +127,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t\t__numeric_traits_floating<_Value> >::__type\n     { };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #undef __glibcxx_floating\n #undef __glibcxx_max_digits10"}, {"sha": "9dc763595607f675bfc5bbae0b45dd1c1c475434", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -75,7 +75,7 @@ namespace __gnu_pbds\n       typedef typename std::allocator<Key> \t\tkey_allocator;\n       typedef typename key_allocator::size_type \tsize_type;\n       typedef Const_Key_Reference \t\t\tconst_key_reference;\n-      typedef std::__norm::list<Key> \t\t       \tkey_set;\n+      typedef std::_GLIBCXX_STD_C::list<Key> \t\tkey_set;\n       typedef typename key_set::iterator \t\tkey_set_iterator;\n       typedef typename key_set::const_iterator \t\tconst_key_set_iterator;\n       typedef __gnu_cxx::throw_allocator_random<Key>\tkey_db_allocator;"}, {"sha": "3c9f0988a688ad37868bc431afb4f455aee72700", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #include <string>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // POD character abstraction.\n   // NB: The char_type parameter is a subset of int_type, as to allow\n@@ -79,9 +81,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator<(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n     { return lhs.value < rhs.value; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// char_traits<__gnu_cxx::character> specialization.\n   template<typename V, typename I, typename S>\n@@ -177,6 +182,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return eq_int_type(__c, eof()) ? int_type() : __c; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "158ae52e3b81857cadf9fb64aab783290fc994f9", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -43,7 +43,9 @@\n #include <ext/cast.h>\n #include <ext/type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** \n    * @brief A storage policy for use with _Pointer_adapter<> which yields a\n@@ -562,6 +564,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n                const _Pointer_adapter<_StoreT>& __p)\n     { return (__os << __p.get()); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _POINTER_H"}, {"sha": "66ddced8054effbdddbd14cb7170569f8b96c77a", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,7 +51,9 @@\n #include <ext/concurrence.h>\n #include <bits/move.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -258,6 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4293a7555777b8b993b5c9aec38f3e0020681e82", "filename": "libstdc++-v3/include/ext/rb_tree", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -60,7 +60,9 @@\n \n #include <bits/stl_tree.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::_Rb_tree;\n   using std::allocator;\n@@ -88,6 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~rb_tree() { }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4a27ff6ef5bb8834bb794dc10a53957c02fd142e", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <ext/atomicity.h>\n #include <bits/stl_iterator_base_funcs.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  Documentation?  What's that?\n@@ -725,6 +727,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     }\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _RC_STRING_BASE_H */"}, {"sha": "42921516e40bfbf16ee27eec7b1d9a048f4ca5b1", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -62,8 +62,8 @@\n \n #include <ext/memory> // For uninitialized_copy_n\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n   namespace __detail\n   {\n     enum { _S_max_rope_depth = 45 };\n@@ -75,6 +75,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::allocator;\n   using std::_Destroy;\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   // See libstdc++/36832.\n   template<typename _ForwardIterator, typename _Allocator>\n     void\n@@ -2917,13 +2919,16 @@ protected:\n     swap(rope<_CharT, _Alloc>& __x, rope<_CharT, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n { \n namespace tr1\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   template<>\n     struct hash<__gnu_cxx::crope>\n     {\n@@ -2950,6 +2955,8 @@ namespace tr1\n \treturn 13 * __str[0] + 5 * __str[__size - 1] + __size;\n       }\n     };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace tr1\n } // namespace std\n "}, {"sha": "467b8fd93d2da3b98a713dad61c30fb2d4e23d86", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -49,7 +49,9 @@\n #include <ext/memory> // For uninitialized_copy_n\n #include <ext/numeric> // For power\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::printf;\n@@ -1698,4 +1700,5 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   { _Rope_rotate(__first, __middle, __last); }\n # endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "e678190bf1de1cca42e29ef6d84333ceab202357", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -51,7 +51,9 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using std::size_t;\n   using std::ptrdiff_t;\n@@ -1021,9 +1023,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n       }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Specialization of insert_iterator so that insertions will be constant\n   // time rather than linear time.\n@@ -1072,6 +1077,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return *this; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "053f514838dec997b6022c616bceb0a35b854cce", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,7 +31,9 @@\n #ifndef _SSO_STRING_BASE_H\n #define _SSO_STRING_BASE_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class __sso_string_base\n@@ -570,6 +572,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_set_length(_M_length() - __n);\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _SSO_STRING_BASE_H */"}, {"sha": "5ab2ff7adb831ccc8975ecbbf76f39b26f9c3140", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n \n #include <fstream>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Provides a layer of compatibility for C/POSIX.\n@@ -154,6 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "4b6014954181c98856c35f26559e1af40648a1c6", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <cwchar>\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Provides a layer of compatibility for C.\n@@ -282,6 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "f85ab99235c8048d0395dd28d188a64c6d8be741", "filename": "libstdc++-v3/include/ext/string_conversions.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -39,7 +39,9 @@\n #include <cstdio>\n #include <cerrno>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Helper for all the sto* functions.\n   template<typename _TRet, typename _Ret = _TRet, typename _CharT,\n@@ -93,6 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return _String(__s, __s + __len);\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _STRING_CONVERSIONS_H"}, {"sha": "778b8dec165c14cfc64bf9de9b5c208c8d357094", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -64,7 +64,9 @@\n # include <tr1/random>\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief Thown by exception safety machinery.\n@@ -721,13 +723,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       ~throw_allocator_random() throw() { }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n # include <bits/functional_hash.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n   /// Explicit specialization of std::hash for __gnu_cxx::throw_value_limit.\n   template<>"}, {"sha": "92747268a06f87e20e014c37202410780e1424a9", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,9 @@\n #include <bits/c++config.h>\n #include <bits/cpp_type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Define a nested type if some predicate holds.\n   template<bool, typename>\n@@ -199,6 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif "}, {"sha": "7f94ecd728235f4421103b1933e74134db932527", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -45,7 +45,9 @@\n \n #include <ext/type_traits.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n /** @namespace __gnu_cxx::typelist\n  *  @brief GNU typelist extensions for public compile-time use.\n@@ -127,10 +129,13 @@ namespace typelist\n     struct create6;\n } // namespace typelist\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace typelist\n {\n@@ -363,7 +368,8 @@ namespace detail\n } // namespace detail\n } // namespace typelist\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>\n #define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n@@ -381,7 +387,9 @@ _GLIBCXX_END_NAMESPACE\n #define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n #define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace typelist\n {\n@@ -539,7 +547,8 @@ namespace typelist\n       typedef node<_GLIBCXX_TYPELIST_CHAIN6(T1,T2,T3,T4,T5,T6)>\ttype;\n     };\n } // namespace typelist\n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n \n #endif"}, {"sha": "46959787c2d8cacd91fbb3ab02054728101fc9e8", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n #include <ext/rc_string_base.h>\n #include <ext/sso_string_base.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @class __versa_string vstring.h\n@@ -2420,9 +2422,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Read stream into a string.\n@@ -2505,13 +2510,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str)\n     { return getline(__is, __str, __is.widen('\\n')); }      \n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99))\n \n #include <ext/string_conversions.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 21.4 Numeric Conversions [string.conversions].\n   inline int\n@@ -2718,7 +2726,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif\n "}, {"sha": "e36058bcebf9fc85cb9c6bffdfed32df1670adf9", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,7 +35,9 @@\n \n #include <bits/cxxabi_forced.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n@@ -537,9 +539,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __r;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n            template <typename, typename, typename> class _Base>\n@@ -691,6 +696,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __in;\n     }      \n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _VSTRING_TCC"}, {"sha": "ce8cf53fb6079e6f4d0c8ffae015ecf87424bca1", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,7 +37,9 @@\n #include <bits/char_traits.h>\n #include <bits/allocator.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class __sso_string_base;\n@@ -82,6 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _VSTRING_FWD_H */"}, {"sha": "fdf39812052f455b31b0a5e111b4bd9b322226bb", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -44,7 +44,9 @@\n #include <bits/move.h>\n #include <bits/range_access.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     struct __vstring_utility\n@@ -176,6 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _VSTRING_UTIL_H */"}, {"sha": "89b7f6d827f45a81dd1d15828cc6411f7eb3a44c", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -58,7 +58,7 @@\n #include <parallel/unique_copy.h>\n #include <parallel/set_operations.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __parallel\n {\n@@ -67,7 +67,7 @@ namespace __parallel\n     inline _Function\n     for_each(_IIter __begin, _IIter __end, _Function __f, \n              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::for_each(__begin, __end, __f); }\n+    { return _GLIBCXX_STD_A::for_each(__begin, __end, __f); }\n \n \n   // Sequential fallback for input iterator case\n@@ -130,14 +130,14 @@ namespace __parallel\n     inline _IIter\n     find(_IIter __begin, _IIter __end, const _Tp& __val, \n          __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::find(__begin, __end, __val); }\n+    { return _GLIBCXX_STD_A::find(__begin, __end, __val); }\n \n   // Sequential fallback for input iterator case\n   template<typename _IIter, typename _Tp, typename _IteratorTag>\n     inline _IIter\n     __find_switch(_IIter __begin, _IIter __end, const _Tp& __val,\n                 _IteratorTag)\n-    { return _GLIBCXX_STD_P::find(__begin, __end, __val); }\n+    { return _GLIBCXX_STD_A::find(__begin, __end, __val); }\n \n   // Parallel find for random access iterators\n   template<typename _RAIter, typename _Tp>\n@@ -157,7 +157,7 @@ namespace __parallel\n                    __gnu_parallel::__find_if_selector()).first;\n         }\n       else\n-        return _GLIBCXX_STD_P::find(__begin, __end, __val);\n+        return _GLIBCXX_STD_A::find(__begin, __end, __val);\n     }\n \n   // Public interface\n@@ -175,14 +175,14 @@ namespace __parallel\n     inline _IIter\n     find_if(_IIter __begin, _IIter __end, _Predicate __pred, \n             __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::find_if(__begin, __end, __pred); }\n+    { return _GLIBCXX_STD_A::find_if(__begin, __end, __pred); }\n \n   // Sequential fallback for input iterator case\n   template<typename _IIter, typename _Predicate, typename _IteratorTag>\n     inline _IIter\n     __find_if_switch(_IIter __begin, _IIter __end, _Predicate __pred, \n                    _IteratorTag)\n-    { return _GLIBCXX_STD_P::find_if(__begin, __end, __pred); }\n+    { return _GLIBCXX_STD_A::find_if(__begin, __end, __pred); }\n \n   // Parallel find_if for random access iterators\n   template<typename _RAIter, typename _Predicate>\n@@ -195,7 +195,7 @@ namespace __parallel\n                                              __gnu_parallel::\n                                              __find_if_selector()).first;\n       else\n-        return _GLIBCXX_STD_P::find_if(__begin, __end, __pred);\n+        return _GLIBCXX_STD_A::find_if(__begin, __end, __pred);\n     }\n \n   // Public interface\n@@ -214,7 +214,7 @@ namespace __parallel\n     find_first_of(_IIter __begin1, _IIter __end1, \n                   _FIterator __begin2, _FIterator __end2, \n                   __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::find_first_of(__begin1, __end1, __begin2, __end2);\n+    { return _GLIBCXX_STD_A::find_first_of(__begin1, __end1, __begin2, __end2);\n       }\n \n   // Sequential fallback\n@@ -224,7 +224,7 @@ namespace __parallel\n     find_first_of(_IIter __begin1, _IIter __end1,\n                   _FIterator __begin2, _FIterator __end2,\n                   _BinaryPredicate __comp, __gnu_parallel::sequential_tag)\n-  { return _GLIBCXX_STD_P::find_first_of(\n+  { return _GLIBCXX_STD_A::find_first_of(\n              __begin1, __end1, __begin2, __end2, __comp); }\n \n   // Sequential fallback for input iterator type\n@@ -301,15 +301,15 @@ namespace __parallel\n     inline _OutputIterator\n     unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out,\n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::unique_copy(__begin1, __end1, __out); }\n+    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, __out); }\n \n   // Sequential fallback\n   template<typename _IIter, typename _OutputIterator,\n            typename _Predicate>\n     inline _OutputIterator\n     unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out,\n                 _Predicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::unique_copy(__begin1, __end1, __out, __pred); }\n+    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, __out, __pred); }\n \n   // Sequential fallback for input iterator case\n   template<typename _IIter, typename _OutputIterator,\n@@ -318,7 +318,7 @@ namespace __parallel\n     __unique_copy_switch(_IIter __begin, _IIter __last, \n                        _OutputIterator __out, _Predicate __pred, \n                        _IteratorTag1, _IteratorTag2)\n-    { return _GLIBCXX_STD_P::unique_copy(__begin, __last, __out, __pred); }\n+    { return _GLIBCXX_STD_A::unique_copy(__begin, __last, __out, __pred); }\n \n   // Parallel unique_copy for random access iterators\n   template<typename _RAIter, typename RandomAccessOutputIterator,\n@@ -334,7 +334,7 @@ namespace __parallel\n         return __gnu_parallel::__parallel_unique_copy(\n                  __begin, __last, __out, __pred);\n       else\n-        return _GLIBCXX_STD_P::unique_copy(__begin, __last, __out, __pred);\n+        return _GLIBCXX_STD_A::unique_copy(__begin, __last, __out, __pred);\n     }\n \n   // Public interface\n@@ -376,7 +376,7 @@ namespace __parallel\n     set_union(_IIter1 __begin1, _IIter1 __end1,\n               _IIter2 __begin2, _IIter2 __end2,\n               _OutputIterator __out, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_union(\n+    { return _GLIBCXX_STD_A::set_union(\n                __begin1, __end1, __begin2, __end2, __out); }\n \n   // Sequential fallback\n@@ -387,7 +387,7 @@ namespace __parallel\n               _IIter2 __begin2, _IIter2 __end2,\n               _OutputIterator __out, _Predicate __pred,\n               __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_union(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::set_union(__begin1, __end1,\n                                        __begin2, __end2, __out, __pred); }\n \n   // Sequential fallback for input iterator case\n@@ -399,7 +399,7 @@ namespace __parallel\n       _IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2,\n       _OutputIterator __result, _Predicate __pred,\n       _IteratorTag1, _IteratorTag2, _IteratorTag3)\n-    { return _GLIBCXX_STD_P::set_union(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::set_union(__begin1, __end1,\n                                        __begin2, __end2, __result, __pred); }\n \n   // Parallel set_union for random access iterators\n@@ -420,7 +420,7 @@ namespace __parallel\n         return __gnu_parallel::__parallel_set_union(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n       else\n-        return _GLIBCXX_STD_P::set_union(__begin1, __end1,\n+        return _GLIBCXX_STD_A::set_union(__begin1, __end1,\n                                          __begin2, __end2, __result, __pred);\n     }\n \n@@ -477,7 +477,7 @@ namespace __parallel\n     set_intersection(_IIter1 __begin1, _IIter1 __end1,\n                      _IIter2 __begin2, _IIter2 __end2,\n                      _OutputIterator __out, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_intersection(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::set_intersection(__begin1, __end1,\n                                               __begin2, __end2, __out); }\n \n   // Sequential fallback.\n@@ -488,7 +488,7 @@ namespace __parallel\n                      _IIter2 __begin2, _IIter2 __end2,\n                      _OutputIterator __out, _Predicate __pred, \n                      __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_intersection(\n+    { return _GLIBCXX_STD_A::set_intersection(\n                __begin1, __end1, __begin2, __end2, __out, __pred); }\n \n   // Sequential fallback for input iterator case\n@@ -501,7 +501,7 @@ namespace __parallel\n                               _IIter2 __begin2, _IIter2 __end2,\n                               _OutputIterator __result, _Predicate __pred,\n                               _IteratorTag1, _IteratorTag2, _IteratorTag3)\n-    { return _GLIBCXX_STD_P::set_intersection(__begin1, __end1, __begin2,\n+    { return _GLIBCXX_STD_A::set_intersection(__begin1, __end1, __begin2,\n                                               __end2, __result, __pred); }\n \n   // Parallel set_intersection for random access iterators\n@@ -526,7 +526,7 @@ namespace __parallel\n         return __gnu_parallel::__parallel_set_intersection(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n       else\n-        return _GLIBCXX_STD_P::set_intersection(\n+        return _GLIBCXX_STD_A::set_intersection(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n     }\n \n@@ -584,7 +584,7 @@ namespace __parallel\n                              _IIter2 __begin2, _IIter2 __end2,\n                              _OutputIterator __out,\n                              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_symmetric_difference(\n+    { return _GLIBCXX_STD_A::set_symmetric_difference(\n                __begin1, __end1, __begin2, __end2, __out); }\n \n   // Sequential fallback\n@@ -595,7 +595,7 @@ namespace __parallel\n                              _IIter2 __begin2, _IIter2 __end2,\n                              _OutputIterator __out, _Predicate __pred,\n                              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_symmetric_difference(\n+    { return _GLIBCXX_STD_A::set_symmetric_difference(\n                __begin1, __end1, __begin2, __end2, __out, __pred); }\n \n   // Sequential fallback for input iterator case\n@@ -608,7 +608,7 @@ namespace __parallel\n       _IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2,\n       _OutputIterator __result, _Predicate __pred,\n       _IteratorTag1, _IteratorTag2, _IteratorTag3)\n-    { return _GLIBCXX_STD_P::set_symmetric_difference(\n+    { return _GLIBCXX_STD_A::set_symmetric_difference(\n                __begin1, __end1, __begin2, __end2, __result, __pred); }\n \n   // Parallel set_symmetric_difference for random access iterators\n@@ -633,7 +633,7 @@ namespace __parallel\n   return __gnu_parallel::__parallel_set_symmetric_difference(\n            __begin1, __end1, __begin2, __end2, __result, __pred);\n       else\n-        return _GLIBCXX_STD_P::set_symmetric_difference(\n+        return _GLIBCXX_STD_A::set_symmetric_difference(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n     }\n \n@@ -691,7 +691,7 @@ namespace __parallel\n     set_difference(_IIter1 __begin1, _IIter1 __end1, \n                    _IIter2 __begin2, _IIter2 __end2, \n                    _OutputIterator __out, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_difference(\n+    { return _GLIBCXX_STD_A::set_difference(\n                __begin1,__end1, __begin2, __end2, __out); }\n \n   // Sequential fallback.\n@@ -702,7 +702,7 @@ namespace __parallel\n                    _IIter2 __begin2, _IIter2 __end2, \n                    _OutputIterator __out, _Predicate __pred, \n                    __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::set_difference(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::set_difference(__begin1, __end1,\n                                             __begin2, __end2, __out, __pred); }\n \n   // Sequential fallback for input iterator case.\n@@ -714,7 +714,7 @@ namespace __parallel\n                           _IIter2 __begin2, _IIter2 __end2, \n                           _OutputIterator __result, _Predicate __pred, \n                           _IteratorTag1, _IteratorTag2, _IteratorTag3)\n-    { return _GLIBCXX_STD_P::set_difference(\n+    { return _GLIBCXX_STD_A::set_difference(\n                __begin1, __end1, __begin2, __end2, __result, __pred); }\n \n   // Parallel set_difference for random access iterators\n@@ -738,7 +738,7 @@ namespace __parallel\n         return __gnu_parallel::__parallel_set_difference(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n       else\n-        return _GLIBCXX_STD_P::set_difference(\n+        return _GLIBCXX_STD_A::set_difference(\n                  __begin1, __end1, __begin2, __end2, __result, __pred);\n     }\n \n@@ -794,15 +794,15 @@ namespace __parallel\n     inline _FIterator\n     adjacent_find(_FIterator __begin, _FIterator __end, \n                   __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::adjacent_find(__begin, __end); }\n+    { return _GLIBCXX_STD_A::adjacent_find(__begin, __end); }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _BinaryPredicate>\n     inline _FIterator\n     adjacent_find(_FIterator __begin, _FIterator __end, \n                   _BinaryPredicate __binary_pred,\n                   __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::adjacent_find(__begin, __end, __binary_pred); }\n+    { return _GLIBCXX_STD_A::adjacent_find(__begin, __end, __binary_pred); }\n \n   // Parallel algorithm for random access iterators\n   template<typename _RAIter>\n@@ -887,7 +887,7 @@ namespace __parallel\n     inline typename iterator_traits<_IIter>::difference_type\n     count(_IIter __begin, _IIter __end, const _Tp& __value, \n           __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::count(__begin, __end, __value); }\n+    { return _GLIBCXX_STD_A::count(__begin, __end, __value); }\n \n   // Parallel code for random access iterators\n   template<typename _RAIter, typename _Tp>\n@@ -957,7 +957,7 @@ namespace __parallel\n     inline typename iterator_traits<_IIter>::difference_type\n     count_if(_IIter __begin, _IIter __end, _Predicate __pred, \n              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::count_if(__begin, __end, __pred); }\n+    { return _GLIBCXX_STD_A::count_if(__begin, __end, __pred); }\n \n   // Parallel count_if for random access iterators\n   template<typename _RAIter, typename _Predicate>\n@@ -1029,7 +1029,7 @@ namespace __parallel\n     search(_FIterator1 __begin1, _FIterator1 __end1,\n            _FIterator2 __begin2, _FIterator2 __end2,\n            __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::search(__begin1, __end1, __begin2, __end2); }\n+    { return _GLIBCXX_STD_A::search(__begin1, __end1, __begin2, __end2); }\n \n   // Parallel algorithm for random access iterator\n   template<typename _RAIter1, typename _RAIter2>\n@@ -1087,7 +1087,7 @@ namespace __parallel\n     search(_FIterator1 __begin1, _FIterator1 __end1,\n            _FIterator2 __begin2, _FIterator2 __end2,\n            _BinaryPredicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::search(\n+    { return _GLIBCXX_STD_A::search(\n                                __begin1, __end1, __begin2, __end2, __pred); }\n \n   // Parallel algorithm for random access iterator.\n@@ -1141,7 +1141,7 @@ namespace __parallel\n     inline _FIterator\n     search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val); }\n+    { return _GLIBCXX_STD_A::search_n(__begin, __end, __count, __val); }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _Integer, typename _Tp,\n@@ -1150,7 +1150,7 @@ namespace __parallel\n     search_n(_FIterator __begin, _FIterator __end, _Integer __count,\n              const _Tp& __val, _BinaryPredicate __binary_pred,\n              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::search_n(\n+    { return _GLIBCXX_STD_A::search_n(\n                __begin, __end, __count, __val, __binary_pred); }\n \n   // Public interface.\n@@ -1181,7 +1181,7 @@ namespace __parallel\n                    __begin, __end, __ps.begin(), __ps.end(), __binary_pred);\n         }\n       else\n-        return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n+        return _GLIBCXX_STD_A::search_n(__begin, __end, __count, __val,\n                                         __binary_pred);\n     }\n \n@@ -1192,7 +1192,7 @@ namespace __parallel\n     __search_n_switch(_FIterator __begin, _FIterator __end, _Integer __count,\n                       const _Tp& __val, _BinaryPredicate __binary_pred,\n                       _IteratorTag)\n-    { return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n+    { return _GLIBCXX_STD_A::search_n(__begin, __end, __count, __val,\n                                       __binary_pred); }\n \n   // Public interface.\n@@ -1214,7 +1214,7 @@ namespace __parallel\n     inline _OutputIterator\n     transform(_IIter __begin, _IIter __end, _OutputIterator __result, \n               _UnaryOperation __unary_op, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::transform(__begin, __end, __result, __unary_op); }\n+    { return _GLIBCXX_STD_A::transform(__begin, __end, __result, __unary_op); }\n \n   // Parallel unary transform for random access iterators.\n   template<typename _RAIter1, typename _RAIter2,\n@@ -1301,7 +1301,7 @@ namespace __parallel\n     transform(_IIter1 __begin1, _IIter1 __end1,\n               _IIter2 __begin2, _OutputIterator __result,\n               _BinaryOperation __binary_op, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::transform(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::transform(__begin1, __end1,\n                                        __begin2, __result, __binary_op); }\n \n   // Parallel binary transform for random access iterators.\n@@ -1403,7 +1403,7 @@ namespace __parallel\n     inline void\n     replace(_FIterator __begin, _FIterator __end, const _Tp& __old_value, \n             const _Tp& __new_value, __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::replace(__begin, __end, __old_value, __new_value); }\n+    { _GLIBCXX_STD_A::replace(__begin, __end, __old_value, __new_value); }\n \n   // Sequential fallback for input iterator case\n   template<typename _FIterator, typename _Tp, typename _IteratorTag>\n@@ -1459,7 +1459,7 @@ namespace __parallel\n     inline void\n     replace_if(_FIterator __begin, _FIterator __end, _Predicate __pred, \n                const _Tp& __new_value, __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::replace_if(__begin, __end, __pred, __new_value); }\n+    { _GLIBCXX_STD_A::replace_if(__begin, __end, __pred, __new_value); }\n \n   // Sequential fallback for input iterator case\n   template<typename _FIterator, typename _Predicate, typename _Tp,\n@@ -1528,7 +1528,7 @@ namespace __parallel\n     inline void\n     generate(_FIterator __begin, _FIterator __end, _Generator __gen, \n              __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::generate(__begin, __end, __gen); }\n+    { _GLIBCXX_STD_A::generate(__begin, __end, __gen); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _FIterator, typename _Generator, typename _IteratorTag>\n@@ -1590,7 +1590,7 @@ namespace __parallel\n     inline _OutputIterator\n     generate_n(_OutputIterator __begin, _Size __n, _Generator __gen, \n                __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::generate_n(__begin, __n, __gen); }\n+    { return _GLIBCXX_STD_A::generate_n(__begin, __n, __gen); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _OutputIterator, typename _Size, typename _Generator,\n@@ -1640,15 +1640,15 @@ namespace __parallel\n     inline void\n     random_shuffle(_RAIter __begin, _RAIter __end, \n                    __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::random_shuffle(__begin, __end); }\n+    { _GLIBCXX_STD_A::random_shuffle(__begin, __end); }\n \n   // Sequential fallback.\n   template<typename _RAIter, typename _RandomNumberGenerator>\n     inline void\n     random_shuffle(_RAIter __begin, _RAIter __end,\n                    _RandomNumberGenerator& __rand,\n                    __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::random_shuffle(__begin, __end, __rand); }\n+    { _GLIBCXX_STD_A::random_shuffle(__begin, __end, __rand); }\n \n \n   /** @brief Functor wrapper for std::rand(). */\n@@ -1695,7 +1695,7 @@ namespace __parallel\n     inline _FIterator\n     partition(_FIterator __begin, _FIterator __end,\n               _Predicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::partition(__begin, __end, __pred); }\n+    { return _GLIBCXX_STD_A::partition(__begin, __end, __pred); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _FIterator, typename _Predicate, typename _IteratorTag>\n@@ -1744,14 +1744,14 @@ namespace __parallel\n     inline void\n     sort(_RAIter __begin, _RAIter __end, \n          __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::sort(__begin, __end); }\n+    { _GLIBCXX_STD_A::sort(__begin, __end); }\n \n   // Sequential fallback\n   template<typename _RAIter, typename _Compare>\n     inline void\n     sort(_RAIter __begin, _RAIter __end, _Compare __comp,\n          __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::sort<_RAIter, _Compare>(__begin, __end,\n+    { _GLIBCXX_STD_A::sort<_RAIter, _Compare>(__begin, __end,\n                                                              __comp); }\n \n   // Public interface\n@@ -1883,14 +1883,14 @@ namespace __parallel\n   inline void\n   stable_sort(_RAIter __begin, _RAIter __end,\n        __gnu_parallel::sequential_tag)\n-  { _GLIBCXX_STD_P::stable_sort(__begin, __end); }\n+  { _GLIBCXX_STD_A::stable_sort(__begin, __end); }\n \n   // Sequential fallback\n   template<typename _RAIter, typename _Compare>\n   inline void\n   stable_sort(_RAIter __begin, _RAIter __end,\n               _Compare __comp, __gnu_parallel::sequential_tag)\n-  { _GLIBCXX_STD_P::stable_sort<_RAIter, _Compare>(\n+  { _GLIBCXX_STD_A::stable_sort<_RAIter, _Compare>(\n       __begin, __end, __comp); }\n \n   // Public interface\n@@ -2001,7 +2001,7 @@ namespace __parallel\n     merge(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _IIter2 __end2, _OutputIterator __result,\n           __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::merge(\n+    { return _GLIBCXX_STD_A::merge(\n                __begin1, __end1, __begin2, __end2, __result); }\n \n   // Sequential fallback\n@@ -2011,7 +2011,7 @@ namespace __parallel\n     merge(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n           _IIter2 __end2, _OutputIterator __result, _Compare __comp,\n           __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::merge(\n+    { return _GLIBCXX_STD_A::merge(\n                 __begin1, __end1, __begin2, __end2, __result, __comp); }\n \n   // Sequential fallback for input iterator case\n@@ -2023,7 +2023,7 @@ namespace __parallel\n                  _IIter2 __begin2, _IIter2 __end2,\n                  _OutputIterator __result, _Compare __comp,\n                  _IteratorTag1, _IteratorTag2, _IteratorTag3)\n-     { return _GLIBCXX_STD_P::merge(__begin1, __end1, __begin2, __end2,\n+     { return _GLIBCXX_STD_A::merge(__begin1, __end1, __begin2, __end2,\n                                     __result, __comp); }\n \n   // Parallel algorithm for random access iterators\n@@ -2095,15 +2095,15 @@ namespace __parallel\n     inline void\n     nth_element(_RAIter __begin, _RAIter __nth, \n                 _RAIter __end, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::nth_element(__begin, __nth, __end); }\n+    { return _GLIBCXX_STD_A::nth_element(__begin, __nth, __end); }\n \n   // Sequential fallback\n   template<typename _RAIter, typename _Compare>\n     inline void\n     nth_element(_RAIter __begin, _RAIter __nth, \n                 _RAIter __end, _Compare __comp, \n               __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::nth_element(__begin, __nth, __end, __comp); }\n+    { return _GLIBCXX_STD_A::nth_element(__begin, __nth, __end, __comp); }\n \n   // Public interface\n   template<typename _RAIter, typename _Compare>\n@@ -2138,14 +2138,14 @@ namespace __parallel\n     partial_sort(_RAIter __begin, _RAIter __middle, \n                  _RAIter __end, _Compare __comp,\n                  __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::partial_sort(__begin, __middle, __end, __comp); }\n+    { _GLIBCXX_STD_A::partial_sort(__begin, __middle, __end, __comp); }\n \n   // Sequential fallback\n   template<typename _RAIter>\n     inline void\n     partial_sort(_RAIter __begin, _RAIter __middle, \n                  _RAIter __end, __gnu_parallel::sequential_tag)\n-    { _GLIBCXX_STD_P::partial_sort(__begin, __middle, __end); }\n+    { _GLIBCXX_STD_A::partial_sort(__begin, __middle, __end); }\n \n   // Public interface, parallel algorithm for random access iterators\n   template<typename _RAIter, typename _Compare>\n@@ -2180,14 +2180,14 @@ namespace __parallel\n     inline _FIterator\n     max_element(_FIterator __begin, _FIterator __end, \n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::max_element(__begin, __end); }\n+    { return _GLIBCXX_STD_A::max_element(__begin, __end); }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _Compare>\n     inline _FIterator\n     max_element(_FIterator __begin, _FIterator __end, _Compare __comp, \n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::max_element(__begin, __end, __comp); }\n+    { return _GLIBCXX_STD_A::max_element(__begin, __end, __comp); }\n \n   // Sequential fallback for input iterator case\n   template<typename _FIterator, typename _Compare, typename _IteratorTag>\n@@ -2272,14 +2272,14 @@ namespace __parallel\n     inline _FIterator\n     min_element(_FIterator __begin, _FIterator __end, \n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::min_element(__begin, __end); }\n+    { return _GLIBCXX_STD_A::min_element(__begin, __end); }\n \n   // Sequential fallback\n   template<typename _FIterator, typename _Compare>\n     inline _FIterator\n     min_element(_FIterator __begin, _FIterator __end, _Compare __comp, \n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::min_element(__begin, __end, __comp); }\n+    { return _GLIBCXX_STD_A::min_element(__begin, __end, __comp); }\n \n   // Sequential fallback for input iterator case\n   template<typename _FIterator, typename _Compare, typename _IteratorTag>"}, {"sha": "20456b57b2f194347ad83c43ff08c1680e2a7e6c", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -43,7 +43,7 @@\n #include <parallel/find.h>\n #include <parallel/find_selectors.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __parallel\n {\n@@ -54,22 +54,22 @@ namespace __parallel\n     inline pair<_IIter1, _IIter2>\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n              __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2); }\n+    { return _GLIBCXX_STD_A::mismatch(__begin1, __end1, __begin2); }\n \n   // Sequential fallback\n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n     inline pair<_IIter1, _IIter2>\n     mismatch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n              _Predicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2, __pred); }\n+    { return _GLIBCXX_STD_A::mismatch(__begin1, __end1, __begin2, __pred); }\n \n   // Sequential fallback for input iterator case\n   template<typename _IIter1, typename _IIter2,\n            typename _Predicate, typename _IteratorTag1, typename _IteratorTag2>\n     inline pair<_IIter1, _IIter2>\n     __mismatch_switch(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2,\n                       _Predicate __pred, _IteratorTag1, _IteratorTag2)\n-    { return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2, __pred); }\n+    { return _GLIBCXX_STD_A::mismatch(__begin1, __end1, __begin2, __pred); }\n \n   // Parallel mismatch for random access iterators\n   template<typename _RAIter1, typename _RAIter2, typename _Predicate>\n@@ -87,7 +87,7 @@ namespace __parallel\n           return make_pair(__res , __begin2 + (__res - __begin1));\n         }\n       else\n-        return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2, __pred);\n+        return _GLIBCXX_STD_A::mismatch(__begin1, __end1, __begin2, __pred);\n     }\n \n   // Public interface\n@@ -128,14 +128,14 @@ namespace __parallel\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::equal(__begin1, __end1, __begin2); }\n+    { return _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2); }\n \n   // Sequential fallback\n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _Predicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::equal(__begin1, __end1, __begin2, __pred); }\n+    { return _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __pred); }\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2>\n@@ -162,7 +162,7 @@ namespace __parallel\n     lexicographical_compare(_IIter1 __begin1, _IIter1 __end1, \n                             _IIter2 __begin2, _IIter2 __end2, \n                             __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::lexicographical_compare(__begin1, __end1,\n+    { return _GLIBCXX_STD_A::lexicographical_compare(__begin1, __end1,\n                                                      __begin2, __end2); }\n \n   // Sequential fallback\n@@ -171,7 +171,7 @@ namespace __parallel\n     lexicographical_compare(_IIter1 __begin1, _IIter1 __end1, \n                             _IIter2 __begin2, _IIter2 __end2, \n                             _Predicate __pred, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::lexicographical_compare(\n+    { return _GLIBCXX_STD_A::lexicographical_compare(\n                __begin1, __end1, __begin2, __end2, __pred); }\n \n   // Sequential fallback for input iterator case\n@@ -182,7 +182,7 @@ namespace __parallel\n                                      _IIter2 __begin2, _IIter2 __end2, \n                                      _Predicate __pred,\n                                      _IteratorTag1, _IteratorTag2)\n-    { return _GLIBCXX_STD_P::lexicographical_compare(\n+    { return _GLIBCXX_STD_A::lexicographical_compare(\n                __begin1, __end1, __begin2, __end2, __pred); }\n \n   // Parallel lexicographical_compare for random access iterators\n@@ -232,7 +232,7 @@ namespace __parallel\n             }\n         }\n       else\n-        return _GLIBCXX_STD_P::lexicographical_compare(\n+        return _GLIBCXX_STD_A::lexicographical_compare(\n                  __begin1, __end1, __begin2, __end2, __pred);\n     }\n "}, {"sha": "7d4a792cb59083c7422e85491758849978787f75", "filename": "libstdc++-v3/include/parallel/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,7 @@\n #include <parallel/tags.h>\n #include <parallel/settings.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __parallel\n {"}, {"sha": "86adea8161d85ca8ba4193179bb115db11cdc806", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,7 +45,7 @@\n  * @namespace std::__parallel\n  * @brief GNU parallel code, replaces standard behavior with parallel behavior.\n  */\n-namespace std \n+namespace std _GLIBCXX_VISIBILITY(default) \n { \n   namespace __parallel { } \n }\n@@ -68,7 +68,7 @@ namespace __gnu_sequential\n { \n   // Import whatever is the serial version.\n #ifdef _GLIBCXX_PARALLEL\n-  using namespace std::__norm;\n+  using namespace std::_GLIBCXX_STD_A;\n #else\n   using namespace std;\n #endif   "}, {"sha": "64624a742bdc2ea6dad385631023fd82365b37e2", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -46,7 +46,7 @@\n #include <parallel/for_each_selectors.h>\n #include <parallel/partial_sum.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __parallel\n {\n@@ -55,13 +55,13 @@ namespace __parallel\n     inline _Tp\n     accumulate(_IIter __begin, _IIter __end, _Tp __init, \n                __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::accumulate(__begin, __end, __init); }\n+    { return _GLIBCXX_STD_A::accumulate(__begin, __end, __init); }\n \n   template<typename _IIter, typename _Tp, typename _BinaryOperation>\n     inline _Tp\n     accumulate(_IIter __begin, _IIter __end, _Tp __init,\n                _BinaryOperation __binary_op, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::accumulate(__begin, __end, __init, __binary_op); }\n+    { return _GLIBCXX_STD_A::accumulate(__begin, __end, __init, __binary_op); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _IIter, typename _Tp, typename _IteratorTag>\n@@ -169,7 +169,7 @@ namespace __parallel\n     inner_product(_IIter1 __first1, _IIter1 __last1, \n                   _IIter2 __first2, _Tp __init,\n                   __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::inner_product(\n+    { return _GLIBCXX_STD_A::inner_product(\n                                __first1, __last1, __first2, __init); }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n@@ -179,7 +179,7 @@ namespace __parallel\n                   _IIter2 __first2, _Tp __init, _BinaryFunction1 __binary_op1, \n                   _BinaryFunction2 __binary_op2,\n                   __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n+    { return _GLIBCXX_STD_A::inner_product(__first1, __last1, __first2, __init,\n                                            __binary_op1, __binary_op2); }\n \n   // Parallel algorithm for random access iterators.\n@@ -314,15 +314,15 @@ namespace __parallel\n     inline _OutputIterator\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result,\n                 __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::partial_sum(__begin, __end, __result); }\n+    { return _GLIBCXX_STD_A::partial_sum(__begin, __end, __result); }\n \n   // Sequential fallback.\n   template<typename _IIter, typename _OutputIterator,\n \t   typename _BinaryOperation>\n     inline _OutputIterator\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result,\n                 _BinaryOperation __bin_op, __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::partial_sum(__begin, __end, __result, __bin_op); }\n+    { return _GLIBCXX_STD_A::partial_sum(__begin, __end, __result, __bin_op); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _IIter, typename _OutputIterator,\n@@ -332,7 +332,7 @@ namespace __parallel\n     __partial_sum_switch(_IIter __begin, _IIter __end,\n \t\t\t _OutputIterator __result, _BinaryOperation __bin_op,\n \t\t\t _IteratorTag1, _IteratorTag2)\n-    { return _GLIBCXX_STD_P::partial_sum(__begin, __end, __result, __bin_op); }\n+    { return _GLIBCXX_STD_A::partial_sum(__begin, __end, __result, __bin_op); }\n \n   // Parallel algorithm for random access iterators.\n   template<typename _IIter, typename _OutputIterator,\n@@ -385,7 +385,7 @@ namespace __parallel\n     inline _OutputIterator\n     adjacent_difference(_IIter __begin, _IIter __end, _OutputIterator __result,\n                         __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::adjacent_difference(__begin, __end, __result); }\n+    { return _GLIBCXX_STD_A::adjacent_difference(__begin, __end, __result); }\n \n   // Sequential fallback.\n   template<typename _IIter, typename _OutputIterator,\n@@ -394,7 +394,7 @@ namespace __parallel\n     adjacent_difference(_IIter __begin, _IIter __end,\n                         _OutputIterator __result, _BinaryOperation __bin_op,\n                         __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::adjacent_difference(__begin, __end,\n+    { return _GLIBCXX_STD_A::adjacent_difference(__begin, __end,\n \t\t\t\t\t\t __result, __bin_op); }\n \n   // Sequential fallback for input iterator case."}, {"sha": "5ee3d6d4fa70ed88170b4a27164057f5e2745fd8", "filename": "libstdc++-v3/include/parallel/numericfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -34,7 +34,7 @@\n #include <parallel/tags.h>\n #include <parallel/settings.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __parallel\n {"}, {"sha": "ef17443b37e8e1016bd58b2bbdfec73ae12c4c34", "filename": "libstdc++-v3/include/profile/base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -47,7 +47,7 @@\n  * @namespace std::__profile\n  * @brief GNU profile code, replaces standard behavior with profile behavior.\n  */\n-namespace std \n+namespace std _GLIBCXX_VISIBILITY(default) \n { \n   namespace __profile { } \n }"}, {"sha": "a995afa9723c261ccf56589e1dbaaddafb777b84", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,16 +31,16 @@\n \n #include <bitset>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::bitset wrapper with performance instrumentation.\n   template<size_t _Nb>\n     class bitset\n-    : public _GLIBCXX_STD_D::bitset<_Nb>\n+    : public _GLIBCXX_STD_C::bitset<_Nb>\n     {\n-      typedef _GLIBCXX_STD_D::bitset<_Nb> _Base;\n+      typedef _GLIBCXX_STD_C::bitset<_Nb> _Base;\n \n     public:\n       // bit reference:\n@@ -368,7 +368,7 @@ namespace __profile\n     {\n       size_t\n       operator()(const __profile::bitset<_Nb>& __b) const\n-      { return std::hash<_GLIBCXX_STD_D::bitset<_Nb>>()(__b._M_base()); }\n+      { return std::hash<_GLIBCXX_STD_C::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif\n "}, {"sha": "1c0e53c723e9f1a907039cf71d00f6c6b8925e27", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,16 +31,16 @@\n \n #include <deque>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::deque wrapper with performance instrumentation.\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class deque\n-    : public _GLIBCXX_STD_D::deque<_Tp, _Allocator>\n+    : public _GLIBCXX_STD_C::deque<_Tp, _Allocator>\n     {\n-      typedef  _GLIBCXX_STD_D::deque<_Tp, _Allocator> _Base;\n+      typedef  _GLIBCXX_STD_C::deque<_Tp, _Allocator> _Base;\n \n     public:\n       typedef typename _Base::reference             reference;"}, {"sha": "00af855d782b16659b6c81a20abd72d4ec202014", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -35,16 +35,16 @@\n \n #include <forward_list>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::forward_list wrapper with performance instrumentation.\n   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n     class forward_list\n-    : public _GLIBCXX_STD_D::forward_list<_Tp, _Alloc>\n+    : public _GLIBCXX_STD_C::forward_list<_Tp, _Alloc>\n     {\n-      typedef _GLIBCXX_STD_D::forward_list<_Tp, _Alloc> _Base;\n+      typedef _GLIBCXX_STD_C::forward_list<_Tp, _Alloc> _Base;\n \n     public:\n       typedef typename _Base::size_type             size_type;"}, {"sha": "c32b94e23191a911b95464fa9dfcda4b043d42b1", "filename": "libstdc++-v3/include/profile/impl/profiler_node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -48,7 +48,7 @@ namespace __gnu_profile\n {\n   typedef const void* __object_t;\n   typedef void* __instruction_address_t;\n-  typedef std::_GLIBCXX_STD_PR::vector<__instruction_address_t> __stack_npt;\n+  typedef std::_GLIBCXX_STD_C::vector<__instruction_address_t> __stack_npt;\n   typedef __stack_npt* __stack_t;\n \n   std::size_t __stack_max_depth();"}, {"sha": "1e0054208ca5daece1cbeff9f96e72d52fc53efc", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,7 @@\n #include <cstdlib> // atof, atoi, strtol, getenv, atexit, abort\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_PR::unordered_map\n+#define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_C::unordered_map\n #include <unordered_map>\n #else\n #include <tr1/unordered_map>\n@@ -97,7 +97,7 @@ namespace __gnu_profile\n     { return __magnitude < __other.__magnitude; }\n   };\n \n-  typedef std::_GLIBCXX_STD_PR::vector<__warning_data> __warning_vector_t;\n+  typedef std::_GLIBCXX_STD_C::vector<__warning_data> __warning_vector_t;\n \n   // Defined in profiler_<diagnostic name>.h.\n   class __trace_hash_func;\n@@ -128,7 +128,7 @@ namespace __gnu_profile\n     float __value;\n   };\n \n-  typedef std::_GLIBCXX_STD_PR::vector<__cost_factor*> __cost_factor_vector;\n+  typedef std::_GLIBCXX_STD_C::vector<__cost_factor*> __cost_factor_vector;\n \n   _GLIBCXX_PROFILE_DEFINE_DATA(__trace_hash_func*, _S_hash_func, 0);\n   _GLIBCXX_PROFILE_DEFINE_DATA(__trace_hashtable_size*, _S_hashtable_size, 0);"}, {"sha": "733429daad3d120c1ba3a306d3447af087bcb479", "filename": "libstdc++-v3/include/profile/iterator_tracker.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,7 +31,7 @@\n \n #include <ext/type_traits.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {"}, {"sha": "21279d2ccb1dbb60e7a4ccb0c5db6f0399cc3666", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -33,16 +33,16 @@\n #include <profile/base.h> \n #include <profile/iterator_tracker.h> \n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /** @brief List wrapper with performance instrumentation.  */\n template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class list\n-    : public _GLIBCXX_STD_D::list<_Tp, _Allocator>\n+    : public _GLIBCXX_STD_C::list<_Tp, _Allocator>\n     {\n-      typedef _GLIBCXX_STD_D::list<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::list<_Tp, _Allocator> _Base;\n \n     public:\n       typedef typename _Base::reference             reference;"}, {"sha": "d66d2be5d7784a129509b721fc762c32c86f3f24", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -37,17 +37,17 @@\n #include <utility>\n #include <profile/base.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::map wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class map\n-    : public _GLIBCXX_STD_D::map<_Key, _Tp, _Compare, _Allocator>\n+    : public _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator>\n     {\n-      typedef _GLIBCXX_STD_D::map<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator> _Base;\n \n     public:\n       // types:"}, {"sha": "e4c839f54ade3509824a7ffc1406ab994e5939a5", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,17 +31,17 @@\n \n #include <utility>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::multimap wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap\n-    : public _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator>\n+    : public _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator>\n     {\n-      typedef _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n \n     public:\n       // types:"}, {"sha": "c6902a0fed4867b70386f9e7cf84a5d6fff44626", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,17 +31,17 @@\n \n #include <utility>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   /// Class std::multiset wrapper with performance instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class multiset\n-    : public _GLIBCXX_STD_D::multiset<_Key, _Compare, _Allocator>\n+    : public _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator>\n     {\n-      typedef _GLIBCXX_STD_D::multiset<_Key, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator> _Base;\n \n     public:\n       // types:"}, {"sha": "d10a11f2e59673f23be0f76af1bf59a0fab40d11", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -31,17 +31,17 @@\n \n #include <utility>\n \n-namespace std \n+namespace std _GLIBCXX_VISIBILITY(default) \n {\n namespace __profile\n {\n   /// Class std::set wrapper with performance instrumentation.\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n     class set\n-    : public _GLIBCXX_STD_D::set<_Key,_Compare,_Allocator>\n+    : public _GLIBCXX_STD_C::set<_Key,_Compare,_Allocator>\n     {\n-      typedef _GLIBCXX_STD_D::set<_Key, _Compare, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::set<_Key, _Compare, _Allocator> _Base;\n \n     public:\n       // types:"}, {"sha": "cc54009e3f480f12a3251e4b95d1aa4d83361fcf", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,9 +42,9 @@\n #include <profile/base.h>\n \n #define _GLIBCXX_BASE unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>\n-#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE\n+#define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n@@ -320,7 +320,7 @@ namespace __profile\n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n #define _GLIBCXX_BASE unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\n-#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE\n+#define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n \n   /// Class std::unordered_multimap wrapper with performance instrumentation.\n   template<typename _Key, typename _Tp,"}, {"sha": "547fb764d2263763de8f4dfec54b37fbc695aa5c", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,9 +42,9 @@\n #include <profile/base.h>\n \n #define _GLIBCXX_BASE unordered_set<_Key, _Hash, _Pred, _Alloc>\n-#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE\n+#define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n@@ -291,7 +291,7 @@ namespace __profile\n \n #undef _GLIBCXX_BASE\n #undef _GLIBCXX_STD_BASE\n-#define _GLIBCXX_STD_BASE _GLIBCXX_STD_PR::_GLIBCXX_BASE\n+#define _GLIBCXX_STD_BASE _GLIBCXX_STD_C::_GLIBCXX_BASE\n #define _GLIBCXX_BASE unordered_multiset<_Value, _Hash, _Pred, _Alloc>\n \n   /** @brief Unordered_multiset wrapper with performance instrumentation.  */"}, {"sha": "f8a9622e8ba1ec752eec6de244c48430fe96b697", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -39,16 +39,16 @@\n #include <profile/base.h>\n #include <profile/iterator_tracker.h>\n \n-namespace std\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace __profile\n {\n   template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n     class vector\n-    : public _GLIBCXX_STD_PR::vector<_Tp, _Allocator>\n+    : public _GLIBCXX_STD_C::vector<_Tp, _Allocator>\n     {\n-      typedef _GLIBCXX_STD_PR::vector<_Tp, _Allocator> _Base;\n+      typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n \n     public:\n       typedef typename _Base::reference             reference;\n@@ -509,7 +509,7 @@ namespace __profile\n     {\n       size_t\n       operator()(const __profile::vector<bool, _Alloc>& __b) const\n-      { return std::hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>()\n+      { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n \t  (__b._M_base()); }\n     };\n #endif"}, {"sha": "a0bdd24a85a02d9bfded22423d38d34347be55c3", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -38,7 +38,9 @@\n #include <bits/stl_algobase.h>\n #include <bits/range_access.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief A standard container for storing a fixed size sequence of elements.\n@@ -264,7 +266,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     get(const array<_Tp, _Nm>& __arr)\n     { return __arr[_Int]; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "aafa28243e153845456499d81c4c296436fe0239", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,7 +42,9 @@\n #include <bits/atomic_0.h>\n #include <bits/atomic_2.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup atomics\n@@ -1347,6 +1349,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group atomics\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif"}, {"sha": "e0e8f1340f41323045ff4414785277ff39deda09", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -57,7 +57,9 @@\n   ((__n) / _GLIBCXX_BITSET_BITS_PER_WORD + \\\n    ((__n) % _GLIBCXX_BITSET_BITS_PER_WORD == 0 ? 0 : 1))\n \n-_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  Base class, general case.  It is a class invariant that _Nw will be\n@@ -1502,7 +1504,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     }\n   //@}\n \n-_GLIBCXX_END_NESTED_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n \n #undef _GLIBCXX_BITSET_WORDS\n #undef _GLIBCXX_BITSET_BITS_PER_WORD\n@@ -1511,32 +1514,35 @@ _GLIBCXX_END_NESTED_NAMESPACE\n \n #include <bits/functional_hash.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 1182.\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>\n-    struct hash<_GLIBCXX_STD_D::bitset<_Nb>>\n-    : public __hash_base<size_t, _GLIBCXX_STD_D::bitset<_Nb>>\n+    struct hash<_GLIBCXX_STD_C::bitset<_Nb>>\n+    : public __hash_base<size_t, _GLIBCXX_STD_C::bitset<_Nb>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_D::bitset<_Nb>& __b) const\n+      operator()(const _GLIBCXX_STD_C::bitset<_Nb>& __b) const\n       {\n \tconst size_t __clength = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n \treturn std::_Hash_impl::hash(__b._M_getdata(), __clength);\n       }\n     };\n \n   template<>\n-    struct hash<_GLIBCXX_STD_D::bitset<0>>\n-    : public __hash_base<size_t, _GLIBCXX_STD_D::bitset<0>>\n+    struct hash<_GLIBCXX_STD_C::bitset<0>>\n+    : public __hash_base<size_t, _GLIBCXX_STD_C::bitset<0>>\n     {\n       size_t\n-      operator()(const _GLIBCXX_STD_D::bitset<0>&) const\n+      operator()(const _GLIBCXX_STD_C::bitset<0>&) const\n       { return 0; }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "89ded2c80d42dc4e37437ce1eec012e51cc99224", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -42,8 +42,8 @@\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n   /**\n    * @defgroup chrono Time\n    * @ingroup utilities\n@@ -57,13 +57,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   namespace chrono\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n     template<typename _Rep, typename _Period = ratio<1>>\n       struct duration;\n \n     template<typename _Clock, typename _Dur = typename _Clock::duration>\n       struct time_point;\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.8.2.3 specialization of common_type (for duration)\n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n@@ -91,9 +96,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       typedef chrono::time_point<_Clock, __ct> \t\t\ttype;\n     };\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n   namespace chrono\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n     // Primary template for duration_cast impl.\n     template<typename _ToDur, typename _CF, typename _CR,\n \t     bool _NumIsOne = false, bool _DenIsOne = false>\n@@ -212,7 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n-\ttypedef _Rep    \t\t\t\t\trep;\n+\ttypedef _Rep\t\t\t\t\t\trep;\n \ttypedef _Period \t\t\t\t\tperiod;\n \n \tstatic_assert(!__is_duration<_Rep>::value, \"rep cannot be a duration\");\n@@ -649,7 +657,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n       typedef chrono::microseconds    \t\t\t\tduration;\n #else\n-      typedef chrono::seconds         \t\t\t\tduration;\n+      typedef chrono::seconds\t      \t\t\t\tduration;\n #endif\n \n       typedef duration::rep    \t\t\t\t\trep;\n@@ -687,8 +695,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct monotonic_clock\n     {\n       typedef chrono::nanoseconds \t\t\t\tduration;\n-      typedef duration::rep       \t\t\t\trep;\n-      typedef duration::period    \t\t\t\tperiod;\n+      typedef duration::rep\t  \t\t\t\trep;\n+      typedef duration::period\t  \t\t\t\tperiod;\n       typedef chrono::time_point<monotonic_clock, duration> \ttime_point;\n \n       static constexpr bool is_monotonic = true;\n@@ -701,10 +709,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n     typedef system_clock high_resolution_clock;\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace chrono\n \n   // @} group chrono\n-_GLIBCXX_END_NAMESPACE\n+} // namespace\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1\n "}, {"sha": "d36eddca5a6d5a3f03aa21b53833527591d6fb3c", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -46,7 +46,9 @@\n #include <cmath>\n #include <sstream>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup complex_numbers Complex Numbers\n@@ -1494,9 +1496,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // @} group complex_numbers\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // See ext/type_traits.h for the primary template.\n   template<typename _Tp, typename _Up>\n@@ -1520,11 +1525,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Forward declarations.\n   template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);\n@@ -1890,7 +1898,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     conj(_Tp __x)\n     { return __x; }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif  // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "a0a3c08794a16b8c9e7410d3a61c010423470e49", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -40,7 +40,9 @@\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup condition_variables Condition Variables\n@@ -254,7 +256,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n \n   // @} group condition_variables\n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n "}, {"sha": "8ad6e5ca11a3c1b2e8e0775e6edff9b8c78da79a", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -46,7 +46,9 @@\n #include <string>             // For std::string overloads.\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [27.8.1.1] template class basic_filebuf\n   /**\n@@ -913,7 +915,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n     };\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #include <bits/fstream.tcc>\n "}, {"sha": "3ae955023416f0bf93d79909d11dab63aa795833", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -1,7 +1,7 @@\n // <functional> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -58,7 +58,9 @@\n #include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n@@ -835,6 +837,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n   /// The type of placeholder objects defined by libstdc++.\n   template<int _Num> struct _Placeholder { };\n \n+  _GLIBCXX_END_NAMESPACE_VERSION\n+\n   /** @namespace std::placeholders\n    *  @brief ISO C++ 0x entities sub namespace for functional.\n    *  @ingroup binders\n@@ -845,6 +849,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n    */\n   namespace placeholders \n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     extern const _Placeholder<1> _1;\n     extern const _Placeholder<2> _2;\n     extern const _Placeholder<3> _3;\n@@ -874,8 +879,11 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     extern const _Placeholder<27> _27;\n     extern const _Placeholder<28> _28;\n     extern const _Placeholder<29> _29;\n+  _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    *  Partial specialization of is_placeholder that provides the placeholder\n    *  number for the placeholder objects defined by libstdc++.\n@@ -2242,7 +2250,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)\n     { __x.swap(__y); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "f268d4ab06a90ef4b4a3592203403b2eed4104ec", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -45,7 +45,9 @@\n #include <atomic>\n #include <bits/functexcept.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @defgroup futures Futures\n@@ -1375,7 +1377,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        // && _GLIBCXX_ATOMIC_BUILTINS_4\n \n   // @} group futures\n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "91f90e5cb62b0ff1a880b006e1274bd9d4bdf61c", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -45,7 +45,9 @@\n #include <locale>\n #endif\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [27.6.3] standard manipulators\n   // Also see DR 183.\n@@ -344,6 +346,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _GLIBCXX_IOMANIP */"}, {"sha": "8906a1d34b59fc23edc4b4958fb93bb97e002a69", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ffa228443fdfc80e72a5cfaa00604981f1bdaf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=12ffa228443fdfc80e72a5cfaa00604981f1bdaf", "patch": "@@ -41,7 +41,9 @@\n #include <bits/stringfwd.h> \t// For string forward declarations.\n #include <bits/postypes.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @defgroup io I/O\n@@ -204,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n   /** @}  */\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n \n #endif /* _GLIBCXX_IOSFWD */"}]}