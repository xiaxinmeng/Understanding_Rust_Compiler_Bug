{"sha": "33203b4c27d09b22b6cb4cc90970867eba2cda3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyMDNiNGMyN2QwOWIyMmI2Y2I0Y2M5MDk3MDg2N2ViYTJjZGEzZg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T15:32:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T15:32:36Z"}, "message": "[ARM][GCC][4/2x]: MVE intrinsics with binary operands.\n\nThis patch supports following MVE ACLE intrinsics with binary operands.\n\nvsubq_u8, vsubq_n_u8, vrmulhq_u8, vrhaddq_u8, vqsubq_u8, vqsubq_n_u8, vqaddq_u8,\nvqaddq_n_u8, vorrq_u8, vornq_u8, vmulq_u8, vmulq_n_u8, vmulltq_int_u8, vmullbq_int_u8,\nvmulhq_u8, vmladavq_u8, vminvq_u8, vminq_u8, vmaxvq_u8, vmaxq_u8, vhsubq_u8, vhsubq_n_u8,\nvhaddq_u8, vhaddq_n_u8, veorq_u8, vcmpneq_n_u8, vcmphiq_u8, vcmphiq_n_u8, vcmpeqq_u8,\nvcmpeqq_n_u8, vcmpcsq_u8, vcmpcsq_n_u8, vcaddq_rot90_u8, vcaddq_rot270_u8, vbicq_u8,\nvandq_u8, vaddvq_p_u8, vaddvaq_u8, vaddq_n_u8, vabdq_u8, vshlq_r_u8, vrshlq_u8,\nvrshlq_n_u8, vqshlq_u8, vqshlq_r_u8, vqrshlq_u8, vqrshlq_n_u8, vminavq_s8, vminaq_s8,\nvmaxavq_s8, vmaxaq_s8, vbrsrq_n_u8, vshlq_n_u8, vrshrq_n_u8, vqshlq_n_u8, vcmpneq_n_s8,\nvcmpltq_s8, vcmpltq_n_s8, vcmpleq_s8, vcmpleq_n_s8, vcmpgtq_s8, vcmpgtq_n_s8, vcmpgeq_s8,\nvcmpgeq_n_s8, vcmpeqq_s8, vcmpeqq_n_s8, vqshluq_n_s8, vaddvq_p_s8, vsubq_s8, vsubq_n_s8,\nvshlq_r_s8, vrshlq_s8, vrshlq_n_s8, vrmulhq_s8, vrhaddq_s8, vqsubq_s8, vqsubq_n_s8,\nvqshlq_s8, vqshlq_r_s8, vqrshlq_s8, vqrshlq_n_s8, vqrdmulhq_s8, vqrdmulhq_n_s8, vqdmulhq_s8,\nvqdmulhq_n_s8, vqaddq_s8, vqaddq_n_s8, vorrq_s8, vornq_s8, vmulq_s8, vmulq_n_s8, vmulltq_int_s8,\nvmullbq_int_s8, vmulhq_s8, vmlsdavxq_s8, vmlsdavq_s8, vmladavxq_s8, vmladavq_s8, vminvq_s8,\nvminq_s8, vmaxvq_s8, vmaxq_s8, vhsubq_s8, vhsubq_n_s8, vhcaddq_rot90_s8, vhcaddq_rot270_s8,\nvhaddq_s8, vhaddq_n_s8, veorq_s8, vcaddq_rot90_s8, vcaddq_rot270_s8, vbrsrq_n_s8, vbicq_s8,\nvandq_s8, vaddvaq_s8, vaddq_n_s8, vabdq_s8, vshlq_n_s8, vrshrq_n_s8, vqshlq_n_s8, vsubq_u16,\nvsubq_n_u16, vrmulhq_u16, vrhaddq_u16, vqsubq_u16, vqsubq_n_u16, vqaddq_u16, vqaddq_n_u16,\nvorrq_u16, vornq_u16, vmulq_u16, vmulq_n_u16, vmulltq_int_u16, vmullbq_int_u16, vmulhq_u16,\nvmladavq_u16, vminvq_u16, vminq_u16, vmaxvq_u16, vmaxq_u16, vhsubq_u16, vhsubq_n_u16,\nvhaddq_u16, vhaddq_n_u16, veorq_u16, vcmpneq_n_u16, vcmphiq_u16, vcmphiq_n_u16, vcmpeqq_u16,\nvcmpeqq_n_u16, vcmpcsq_u16, vcmpcsq_n_u16, vcaddq_rot90_u16, vcaddq_rot270_u16, vbicq_u16,\nvandq_u16, vaddvq_p_u16, vaddvaq_u16, vaddq_n_u16, vabdq_u16, vshlq_r_u16, vrshlq_u16,\nvrshlq_n_u16, vqshlq_u16, vqshlq_r_u16, vqrshlq_u16, vqrshlq_n_u16, vminavq_s16, vminaq_s16,\nvmaxavq_s16, vmaxaq_s16, vbrsrq_n_u16, vshlq_n_u16, vrshrq_n_u16, vqshlq_n_u16, vcmpneq_n_s16,\nvcmpltq_s16, vcmpltq_n_s16, vcmpleq_s16, vcmpleq_n_s16, vcmpgtq_s16, vcmpgtq_n_s16,\nvcmpgeq_s16, vcmpgeq_n_s16, vcmpeqq_s16, vcmpeqq_n_s16, vqshluq_n_s16, vaddvq_p_s16, vsubq_s16,\nvsubq_n_s16, vshlq_r_s16, vrshlq_s16, vrshlq_n_s16, vrmulhq_s16, vrhaddq_s16, vqsubq_s16,\nvqsubq_n_s16, vqshlq_s16, vqshlq_r_s16, vqrshlq_s16, vqrshlq_n_s16, vqrdmulhq_s16,\nvqrdmulhq_n_s16, vqdmulhq_s16, vqdmulhq_n_s16, vqaddq_s16, vqaddq_n_s16, vorrq_s16, vornq_s16,\nvmulq_s16, vmulq_n_s16, vmulltq_int_s16, vmullbq_int_s16, vmulhq_s16, vmlsdavxq_s16, vmlsdavq_s16,\nvmladavxq_s16, vmladavq_s16, vminvq_s16, vminq_s16, vmaxvq_s16, vmaxq_s16, vhsubq_s16,\nvhsubq_n_s16, vhcaddq_rot90_s16, vhcaddq_rot270_s16, vhaddq_s16, vhaddq_n_s16, veorq_s16,\nvcaddq_rot90_s16, vcaddq_rot270_s16, vbrsrq_n_s16, vbicq_s16, vandq_s16, vaddvaq_s16, vaddq_n_s16,\nvabdq_s16, vshlq_n_s16, vrshrq_n_s16, vqshlq_n_s16, vsubq_u32, vsubq_n_u32, vrmulhq_u32,\nvrhaddq_u32, vqsubq_u32, vqsubq_n_u32, vqaddq_u32, vqaddq_n_u32, vorrq_u32, vornq_u32, vmulq_u32,\nvmulq_n_u32, vmulltq_int_u32, vmullbq_int_u32, vmulhq_u32, vmladavq_u32, vminvq_u32, vminq_u32,\nvmaxvq_u32, vmaxq_u32, vhsubq_u32, vhsubq_n_u32, vhaddq_u32, vhaddq_n_u32, veorq_u32, vcmpneq_n_u32,\nvcmphiq_u32, vcmphiq_n_u32, vcmpeqq_u32, vcmpeqq_n_u32, vcmpcsq_u32, vcmpcsq_n_u32,\nvcaddq_rot90_u32, vcaddq_rot270_u32, vbicq_u32, vandq_u32, vaddvq_p_u32, vaddvaq_u32, vaddq_n_u32,\nvabdq_u32, vshlq_r_u32, vrshlq_u32, vrshlq_n_u32, vqshlq_u32, vqshlq_r_u32, vqrshlq_u32, vqrshlq_n_u32,\nvminavq_s32, vminaq_s32, vmaxavq_s32, vmaxaq_s32, vbrsrq_n_u32, vshlq_n_u32, vrshrq_n_u32,\nvqshlq_n_u32, vcmpneq_n_s32, vcmpltq_s32, vcmpltq_n_s32, vcmpleq_s32, vcmpleq_n_s32, vcmpgtq_s32,\nvcmpgtq_n_s32, vcmpgeq_s32, vcmpgeq_n_s32, vcmpeqq_s32, vcmpeqq_n_s32, vqshluq_n_s32, vaddvq_p_s32,\nvsubq_s32, vsubq_n_s32, vshlq_r_s32, vrshlq_s32, vrshlq_n_s32, vrmulhq_s32, vrhaddq_s32, vqsubq_s32,\nvqsubq_n_s32, vqshlq_s32, vqshlq_r_s32, vqrshlq_s32, vqrshlq_n_s32, vqrdmulhq_s32, vqrdmulhq_n_s32,\nvqdmulhq_s32, vqdmulhq_n_s32, vqaddq_s32, vqaddq_n_s32, vorrq_s32, vornq_s32, vmulq_s32, vmulq_n_s32,\nvmulltq_int_s32, vmullbq_int_s32, vmulhq_s32, vmlsdavxq_s32, vmlsdavq_s32, vmladavxq_s32, vmladavq_s32,\nvminvq_s32, vminq_s32, vmaxvq_s32, vmaxq_s32, vhsubq_s32, vhsubq_n_s32, vhcaddq_rot90_s32,\nvhcaddq_rot270_s32, vhaddq_s32, vhaddq_n_s32, veorq_s32, vcaddq_rot90_s32, vcaddq_rot270_s32,\nvbrsrq_n_s32, vbicq_s32, vandq_s32, vaddvaq_s32, vaddq_n_s32, vabdq_s32, vshlq_n_s32, vrshrq_n_s32,\nvqshlq_n_s32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nIn this patch new constraints \"Ra\" and \"Rg\" are added.\nRa checks the constant is with in the range of 0 to 7 where as Rg checks that the constant is one among\n1, 2, 4 and 8.\n\nAlso a new predicates \"mve_imm_7\" and \"mve_imm_selective_upto_8\" are added, to check the the matching\nconstraint Ra and Rg respectively.\n\nThe above intrinsics are defined using the already defined builtin qualifiers BINOP_NONE_NONE_IMM, BINOP_NONE_NONE_NONE,\nBINOP_NONE_NONE_UNONE, BINOP_UNONE_NONE_IMM, BINOP_UNONE_NONE_NONE, BINOP_UNONE_UNONE_IMM, BINOP_UNONE_UNONE_NONE,\nBINOP_UNONE_UNONE_UNONE.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vsubq_u8): Define macro.\n\t(vsubq_n_u8): Likewise.\n\t(vrmulhq_u8): Likewise.\n\t(vrhaddq_u8): Likewise.\n\t(vqsubq_u8): Likewise.\n\t(vqsubq_n_u8): Likewise.\n\t(vqaddq_u8): Likewise.\n\t(vqaddq_n_u8): Likewise.\n\t(vorrq_u8): Likewise.\n\t(vornq_u8): Likewise.\n\t(vmulq_u8): Likewise.\n\t(vmulq_n_u8): Likewise.\n\t(vmulltq_int_u8): Likewise.\n\t(vmullbq_int_u8): Likewise.\n\t(vmulhq_u8): Likewise.\n\t(vmladavq_u8): Likewise.\n\t(vminvq_u8): Likewise.\n\t(vminq_u8): Likewise.\n\t(vmaxvq_u8): Likewise.\n\t(vmaxq_u8): Likewise.\n\t(vhsubq_u8): Likewise.\n\t(vhsubq_n_u8): Likewise.\n\t(vhaddq_u8): Likewise.\n\t(vhaddq_n_u8): Likewise.\n\t(veorq_u8): Likewise.\n\t(vcmpneq_n_u8): Likewise.\n\t(vcmphiq_u8): Likewise.\n\t(vcmphiq_n_u8): Likewise.\n\t(vcmpeqq_u8): Likewise.\n\t(vcmpeqq_n_u8): Likewise.\n\t(vcmpcsq_u8): Likewise.\n\t(vcmpcsq_n_u8): Likewise.\n\t(vcaddq_rot90_u8): Likewise.\n\t(vcaddq_rot270_u8): Likewise.\n\t(vbicq_u8): Likewise.\n\t(vandq_u8): Likewise.\n\t(vaddvq_p_u8): Likewise.\n\t(vaddvaq_u8): Likewise.\n\t(vaddq_n_u8): Likewise.\n\t(vabdq_u8): Likewise.\n\t(vshlq_r_u8): Likewise.\n\t(vrshlq_u8): Likewise.\n\t(vrshlq_n_u8): Likewise.\n\t(vqshlq_u8): Likewise.\n\t(vqshlq_r_u8): Likewise.\n\t(vqrshlq_u8): Likewise.\n\t(vqrshlq_n_u8): Likewise.\n\t(vminavq_s8): Likewise.\n\t(vminaq_s8): Likewise.\n\t(vmaxavq_s8): Likewise.\n\t(vmaxaq_s8): Likewise.\n\t(vbrsrq_n_u8): Likewise.\n\t(vshlq_n_u8): Likewise.\n\t(vrshrq_n_u8): Likewise.\n\t(vqshlq_n_u8): Likewise.\n\t(vcmpneq_n_s8): Likewise.\n\t(vcmpltq_s8): Likewise.\n\t(vcmpltq_n_s8): Likewise.\n\t(vcmpleq_s8): Likewise.\n\t(vcmpleq_n_s8): Likewise.\n\t(vcmpgtq_s8): Likewise.\n\t(vcmpgtq_n_s8): Likewise.\n\t(vcmpgeq_s8): Likewise.\n\t(vcmpgeq_n_s8): Likewise.\n\t(vcmpeqq_s8): Likewise.\n\t(vcmpeqq_n_s8): Likewise.\n\t(vqshluq_n_s8): Likewise.\n\t(vaddvq_p_s8): Likewise.\n\t(vsubq_s8): Likewise.\n\t(vsubq_n_s8): Likewise.\n\t(vshlq_r_s8): Likewise.\n\t(vrshlq_s8): Likewise.\n\t(vrshlq_n_s8): Likewise.\n\t(vrmulhq_s8): Likewise.\n\t(vrhaddq_s8): Likewise.\n\t(vqsubq_s8): Likewise.\n\t(vqsubq_n_s8): Likewise.\n\t(vqshlq_s8): Likewise.\n\t(vqshlq_r_s8): Likewise.\n\t(vqrshlq_s8): Likewise.\n\t(vqrshlq_n_s8): Likewise.\n\t(vqrdmulhq_s8): Likewise.\n\t(vqrdmulhq_n_s8): Likewise.\n\t(vqdmulhq_s8): Likewise.\n\t(vqdmulhq_n_s8): Likewise.\n\t(vqaddq_s8): Likewise.\n\t(vqaddq_n_s8): Likewise.\n\t(vorrq_s8): Likewise.\n\t(vornq_s8): Likewise.\n\t(vmulq_s8): Likewise.\n\t(vmulq_n_s8): Likewise.\n\t(vmulltq_int_s8): Likewise.\n\t(vmullbq_int_s8): Likewise.\n\t(vmulhq_s8): Likewise.\n\t(vmlsdavxq_s8): Likewise.\n\t(vmlsdavq_s8): Likewise.\n\t(vmladavxq_s8): Likewise.\n\t(vmladavq_s8): Likewise.\n\t(vminvq_s8): Likewise.\n\t(vminq_s8): Likewise.\n\t(vmaxvq_s8): Likewise.\n\t(vmaxq_s8): Likewise.\n\t(vhsubq_s8): Likewise.\n\t(vhsubq_n_s8): Likewise.\n\t(vhcaddq_rot90_s8): Likewise.\n\t(vhcaddq_rot270_s8): Likewise.\n\t(vhaddq_s8): Likewise.\n\t(vhaddq_n_s8): Likewise.\n\t(veorq_s8): Likewise.\n\t(vcaddq_rot90_s8): Likewise.\n\t(vcaddq_rot270_s8): Likewise.\n\t(vbrsrq_n_s8): Likewise.\n\t(vbicq_s8): Likewise.\n\t(vandq_s8): Likewise.\n\t(vaddvaq_s8): Likewise.\n\t(vaddq_n_s8): Likewise.\n\t(vabdq_s8): Likewise.\n\t(vshlq_n_s8): Likewise.\n\t(vrshrq_n_s8): Likewise.\n\t(vqshlq_n_s8): Likewise.\n\t(vsubq_u16): Likewise.\n\t(vsubq_n_u16): Likewise.\n\t(vrmulhq_u16): Likewise.\n\t(vrhaddq_u16): Likewise.\n\t(vqsubq_u16): Likewise.\n\t(vqsubq_n_u16): Likewise.\n\t(vqaddq_u16): Likewise.\n\t(vqaddq_n_u16): Likewise.\n\t(vorrq_u16): Likewise.\n\t(vornq_u16): Likewise.\n\t(vmulq_u16): Likewise.\n\t(vmulq_n_u16): Likewise.\n\t(vmulltq_int_u16): Likewise.\n\t(vmullbq_int_u16): Likewise.\n\t(vmulhq_u16): Likewise.\n\t(vmladavq_u16): Likewise.\n\t(vminvq_u16): Likewise.\n\t(vminq_u16): Likewise.\n\t(vmaxvq_u16): Likewise.\n\t(vmaxq_u16): Likewise.\n\t(vhsubq_u16): Likewise.\n\t(vhsubq_n_u16): Likewise.\n\t(vhaddq_u16): Likewise.\n\t(vhaddq_n_u16): Likewise.\n\t(veorq_u16): Likewise.\n\t(vcmpneq_n_u16): Likewise.\n\t(vcmphiq_u16): Likewise.\n\t(vcmphiq_n_u16): Likewise.\n\t(vcmpeqq_u16): Likewise.\n\t(vcmpeqq_n_u16): Likewise.\n\t(vcmpcsq_u16): Likewise.\n\t(vcmpcsq_n_u16): Likewise.\n\t(vcaddq_rot90_u16): Likewise.\n\t(vcaddq_rot270_u16): Likewise.\n\t(vbicq_u16): Likewise.\n\t(vandq_u16): Likewise.\n\t(vaddvq_p_u16): Likewise.\n\t(vaddvaq_u16): Likewise.\n\t(vaddq_n_u16): Likewise.\n\t(vabdq_u16): Likewise.\n\t(vshlq_r_u16): Likewise.\n\t(vrshlq_u16): Likewise.\n\t(vrshlq_n_u16): Likewise.\n\t(vqshlq_u16): Likewise.\n\t(vqshlq_r_u16): Likewise.\n\t(vqrshlq_u16): Likewise.\n\t(vqrshlq_n_u16): Likewise.\n\t(vminavq_s16): Likewise.\n\t(vminaq_s16): Likewise.\n\t(vmaxavq_s16): Likewise.\n\t(vmaxaq_s16): Likewise.\n\t(vbrsrq_n_u16): Likewise.\n\t(vshlq_n_u16): Likewise.\n\t(vrshrq_n_u16): Likewise.\n\t(vqshlq_n_u16): Likewise.\n\t(vcmpneq_n_s16): Likewise.\n\t(vcmpltq_s16): Likewise.\n\t(vcmpltq_n_s16): Likewise.\n\t(vcmpleq_s16): Likewise.\n\t(vcmpleq_n_s16): Likewise.\n\t(vcmpgtq_s16): Likewise.\n\t(vcmpgtq_n_s16): Likewise.\n\t(vcmpgeq_s16): Likewise.\n\t(vcmpgeq_n_s16): Likewise.\n\t(vcmpeqq_s16): Likewise.\n\t(vcmpeqq_n_s16): Likewise.\n\t(vqshluq_n_s16): Likewise.\n\t(vaddvq_p_s16): Likewise.\n\t(vsubq_s16): Likewise.\n\t(vsubq_n_s16): Likewise.\n\t(vshlq_r_s16): Likewise.\n\t(vrshlq_s16): Likewise.\n\t(vrshlq_n_s16): Likewise.\n\t(vrmulhq_s16): Likewise.\n\t(vrhaddq_s16): Likewise.\n\t(vqsubq_s16): Likewise.\n\t(vqsubq_n_s16): Likewise.\n\t(vqshlq_s16): Likewise.\n\t(vqshlq_r_s16): Likewise.\n\t(vqrshlq_s16): Likewise.\n\t(vqrshlq_n_s16): Likewise.\n\t(vqrdmulhq_s16): Likewise.\n\t(vqrdmulhq_n_s16): Likewise.\n\t(vqdmulhq_s16): Likewise.\n\t(vqdmulhq_n_s16): Likewise.\n\t(vqaddq_s16): Likewise.\n\t(vqaddq_n_s16): Likewise.\n\t(vorrq_s16): Likewise.\n\t(vornq_s16): Likewise.\n\t(vmulq_s16): Likewise.\n\t(vmulq_n_s16): Likewise.\n\t(vmulltq_int_s16): Likewise.\n\t(vmullbq_int_s16): Likewise.\n\t(vmulhq_s16): Likewise.\n\t(vmlsdavxq_s16): Likewise.\n\t(vmlsdavq_s16): Likewise.\n\t(vmladavxq_s16): Likewise.\n\t(vmladavq_s16): Likewise.\n\t(vminvq_s16): Likewise.\n\t(vminq_s16): Likewise.\n\t(vmaxvq_s16): Likewise.\n\t(vmaxq_s16): Likewise.\n\t(vhsubq_s16): Likewise.\n\t(vhsubq_n_s16): Likewise.\n\t(vhcaddq_rot90_s16): Likewise.\n\t(vhcaddq_rot270_s16): Likewise.\n\t(vhaddq_s16): Likewise.\n\t(vhaddq_n_s16): Likewise.\n\t(veorq_s16): Likewise.\n\t(vcaddq_rot90_s16): Likewise.\n\t(vcaddq_rot270_s16): Likewise.\n\t(vbrsrq_n_s16): Likewise.\n\t(vbicq_s16): Likewise.\n\t(vandq_s16): Likewise.\n\t(vaddvaq_s16): Likewise.\n\t(vaddq_n_s16): Likewise.\n\t(vabdq_s16): Likewise.\n\t(vshlq_n_s16): Likewise.\n\t(vrshrq_n_s16): Likewise.\n\t(vqshlq_n_s16): Likewise.\n\t(vsubq_u32): Likewise.\n\t(vsubq_n_u32): Likewise.\n\t(vrmulhq_u32): Likewise.\n\t(vrhaddq_u32): Likewise.\n\t(vqsubq_u32): Likewise.\n\t(vqsubq_n_u32): Likewise.\n\t(vqaddq_u32): Likewise.\n\t(vqaddq_n_u32): Likewise.\n\t(vorrq_u32): Likewise.\n\t(vornq_u32): Likewise.\n\t(vmulq_u32): Likewise.\n\t(vmulq_n_u32): Likewise.\n\t(vmulltq_int_u32): Likewise.\n\t(vmullbq_int_u32): Likewise.\n\t(vmulhq_u32): Likewise.\n\t(vmladavq_u32): Likewise.\n\t(vminvq_u32): Likewise.\n\t(vminq_u32): Likewise.\n\t(vmaxvq_u32): Likewise.\n\t(vmaxq_u32): Likewise.\n\t(vhsubq_u32): Likewise.\n\t(vhsubq_n_u32): Likewise.\n\t(vhaddq_u32): Likewise.\n\t(vhaddq_n_u32): Likewise.\n\t(veorq_u32): Likewise.\n\t(vcmpneq_n_u32): Likewise.\n\t(vcmphiq_u32): Likewise.\n\t(vcmphiq_n_u32): Likewise.\n\t(vcmpeqq_u32): Likewise.\n\t(vcmpeqq_n_u32): Likewise.\n\t(vcmpcsq_u32): Likewise.\n\t(vcmpcsq_n_u32): Likewise.\n\t(vcaddq_rot90_u32): Likewise.\n\t(vcaddq_rot270_u32): Likewise.\n\t(vbicq_u32): Likewise.\n\t(vandq_u32): Likewise.\n\t(vaddvq_p_u32): Likewise.\n\t(vaddvaq_u32): Likewise.\n\t(vaddq_n_u32): Likewise.\n\t(vabdq_u32): Likewise.\n\t(vshlq_r_u32): Likewise.\n\t(vrshlq_u32): Likewise.\n\t(vrshlq_n_u32): Likewise.\n\t(vqshlq_u32): Likewise.\n\t(vqshlq_r_u32): Likewise.\n\t(vqrshlq_u32): Likewise.\n\t(vqrshlq_n_u32): Likewise.\n\t(vminavq_s32): Likewise.\n\t(vminaq_s32): Likewise.\n\t(vmaxavq_s32): Likewise.\n\t(vmaxaq_s32): Likewise.\n\t(vbrsrq_n_u32): Likewise.\n\t(vshlq_n_u32): Likewise.\n\t(vrshrq_n_u32): Likewise.\n\t(vqshlq_n_u32): Likewise.\n\t(vcmpneq_n_s32): Likewise.\n\t(vcmpltq_s32): Likewise.\n\t(vcmpltq_n_s32): Likewise.\n\t(vcmpleq_s32): Likewise.\n\t(vcmpleq_n_s32): Likewise.\n\t(vcmpgtq_s32): Likewise.\n\t(vcmpgtq_n_s32): Likewise.\n\t(vcmpgeq_s32): Likewise.\n\t(vcmpgeq_n_s32): Likewise.\n\t(vcmpeqq_s32): Likewise.\n\t(vcmpeqq_n_s32): Likewise.\n\t(vqshluq_n_s32): Likewise.\n\t(vaddvq_p_s32): Likewise.\n\t(vsubq_s32): Likewise.\n\t(vsubq_n_s32): Likewise.\n\t(vshlq_r_s32): Likewise.\n\t(vrshlq_s32): Likewise.\n\t(vrshlq_n_s32): Likewise.\n\t(vrmulhq_s32): Likewise.\n\t(vrhaddq_s32): Likewise.\n\t(vqsubq_s32): Likewise.\n\t(vqsubq_n_s32): Likewise.\n\t(vqshlq_s32): Likewise.\n\t(vqshlq_r_s32): Likewise.\n\t(vqrshlq_s32): Likewise.\n\t(vqrshlq_n_s32): Likewise.\n\t(vqrdmulhq_s32): Likewise.\n\t(vqrdmulhq_n_s32): Likewise.\n\t(vqdmulhq_s32): Likewise.\n\t(vqdmulhq_n_s32): Likewise.\n\t(vqaddq_s32): Likewise.\n\t(vqaddq_n_s32): Likewise.\n\t(vorrq_s32): Likewise.\n\t(vornq_s32): Likewise.\n\t(vmulq_s32): Likewise.\n\t(vmulq_n_s32): Likewise.\n\t(vmulltq_int_s32): Likewise.\n\t(vmullbq_int_s32): Likewise.\n\t(vmulhq_s32): Likewise.\n\t(vmlsdavxq_s32): Likewise.\n\t(vmlsdavq_s32): Likewise.\n\t(vmladavxq_s32): Likewise.\n\t(vmladavq_s32): Likewise.\n\t(vminvq_s32): Likewise.\n\t(vminq_s32): Likewise.\n\t(vmaxvq_s32): Likewise.\n\t(vmaxq_s32): Likewise.\n\t(vhsubq_s32): Likewise.\n\t(vhsubq_n_s32): Likewise.\n\t(vhcaddq_rot90_s32): Likewise.\n\t(vhcaddq_rot270_s32): Likewise.\n\t(vhaddq_s32): Likewise.\n\t(vhaddq_n_s32): Likewise.\n\t(veorq_s32): Likewise.\n\t(vcaddq_rot90_s32): Likewise.\n\t(vcaddq_rot270_s32): Likewise.\n\t(vbrsrq_n_s32): Likewise.\n\t(vbicq_s32): Likewise.\n\t(vandq_s32): Likewise.\n\t(vaddvaq_s32): Likewise.\n\t(vaddq_n_s32): Likewise.\n\t(vabdq_s32): Likewise.\n\t(vshlq_n_s32): Likewise.\n\t(vrshrq_n_s32): Likewise.\n\t(vqshlq_n_s32): Likewise.\n\t(__arm_vsubq_u8): Define intrinsic.\n\t(__arm_vsubq_n_u8): Likewise.\n\t(__arm_vrmulhq_u8): Likewise.\n\t(__arm_vrhaddq_u8): Likewise.\n\t(__arm_vqsubq_u8): Likewise.\n\t(__arm_vqsubq_n_u8): Likewise.\n\t(__arm_vqaddq_u8): Likewise.\n\t(__arm_vqaddq_n_u8): Likewise.\n\t(__arm_vorrq_u8): Likewise.\n\t(__arm_vornq_u8): Likewise.\n\t(__arm_vmulq_u8): Likewise.\n\t(__arm_vmulq_n_u8): Likewise.\n\t(__arm_vmulltq_int_u8): Likewise.\n\t(__arm_vmullbq_int_u8): Likewise.\n\t(__arm_vmulhq_u8): Likewise.\n\t(__arm_vmladavq_u8): Likewise.\n\t(__arm_vminvq_u8): Likewise.\n\t(__arm_vminq_u8): Likewise.\n\t(__arm_vmaxvq_u8): Likewise.\n\t(__arm_vmaxq_u8): Likewise.\n\t(__arm_vhsubq_u8): Likewise.\n\t(__arm_vhsubq_n_u8): Likewise.\n\t(__arm_vhaddq_u8): Likewise.\n\t(__arm_vhaddq_n_u8): Likewise.\n\t(__arm_veorq_u8): Likewise.\n\t(__arm_vcmpneq_n_u8): Likewise.\n\t(__arm_vcmphiq_u8): Likewise.\n\t(__arm_vcmphiq_n_u8): Likewise.\n\t(__arm_vcmpeqq_u8): Likewise.\n\t(__arm_vcmpeqq_n_u8): Likewise.\n\t(__arm_vcmpcsq_u8): Likewise.\n\t(__arm_vcmpcsq_n_u8): Likewise.\n\t(__arm_vcaddq_rot90_u8): Likewise.\n\t(__arm_vcaddq_rot270_u8): Likewise.\n\t(__arm_vbicq_u8): Likewise.\n\t(__arm_vandq_u8): Likewise.\n\t(__arm_vaddvq_p_u8): Likewise.\n\t(__arm_vaddvaq_u8): Likewise.\n\t(__arm_vaddq_n_u8): Likewise.\n\t(__arm_vabdq_u8): Likewise.\n\t(__arm_vshlq_r_u8): Likewise.\n\t(__arm_vrshlq_u8): Likewise.\n\t(__arm_vrshlq_n_u8): Likewise.\n\t(__arm_vqshlq_u8): Likewise.\n\t(__arm_vqshlq_r_u8): Likewise.\n\t(__arm_vqrshlq_u8): Likewise.\n\t(__arm_vqrshlq_n_u8): Likewise.\n\t(__arm_vminavq_s8): Likewise.\n\t(__arm_vminaq_s8): Likewise.\n\t(__arm_vmaxavq_s8): Likewise.\n\t(__arm_vmaxaq_s8): Likewise.\n\t(__arm_vbrsrq_n_u8): Likewise.\n\t(__arm_vshlq_n_u8): Likewise.\n\t(__arm_vrshrq_n_u8): Likewise.\n\t(__arm_vqshlq_n_u8): Likewise.\n\t(__arm_vcmpneq_n_s8): Likewise.\n\t(__arm_vcmpltq_s8): Likewise.\n\t(__arm_vcmpltq_n_s8): Likewise.\n\t(__arm_vcmpleq_s8): Likewise.\n\t(__arm_vcmpleq_n_s8): Likewise.\n\t(__arm_vcmpgtq_s8): Likewise.\n\t(__arm_vcmpgtq_n_s8): Likewise.\n\t(__arm_vcmpgeq_s8): Likewise.\n\t(__arm_vcmpgeq_n_s8): Likewise.\n\t(__arm_vcmpeqq_s8): Likewise.\n\t(__arm_vcmpeqq_n_s8): Likewise.\n\t(__arm_vqshluq_n_s8): Likewise.\n\t(__arm_vaddvq_p_s8): Likewise.\n\t(__arm_vsubq_s8): Likewise.\n\t(__arm_vsubq_n_s8): Likewise.\n\t(__arm_vshlq_r_s8): Likewise.\n\t(__arm_vrshlq_s8): Likewise.\n\t(__arm_vrshlq_n_s8): Likewise.\n\t(__arm_vrmulhq_s8): Likewise.\n\t(__arm_vrhaddq_s8): Likewise.\n\t(__arm_vqsubq_s8): Likewise.\n\t(__arm_vqsubq_n_s8): Likewise.\n\t(__arm_vqshlq_s8): Likewise.\n\t(__arm_vqshlq_r_s8): Likewise.\n\t(__arm_vqrshlq_s8): Likewise.\n\t(__arm_vqrshlq_n_s8): Likewise.\n\t(__arm_vqrdmulhq_s8): Likewise.\n\t(__arm_vqrdmulhq_n_s8): Likewise.\n\t(__arm_vqdmulhq_s8): Likewise.\n\t(__arm_vqdmulhq_n_s8): Likewise.\n\t(__arm_vqaddq_s8): Likewise.\n\t(__arm_vqaddq_n_s8): Likewise.\n\t(__arm_vorrq_s8): Likewise.\n\t(__arm_vornq_s8): Likewise.\n\t(__arm_vmulq_s8): Likewise.\n\t(__arm_vmulq_n_s8): Likewise.\n\t(__arm_vmulltq_int_s8): Likewise.\n\t(__arm_vmullbq_int_s8): Likewise.\n\t(__arm_vmulhq_s8): Likewise.\n\t(__arm_vmlsdavxq_s8): Likewise.\n\t(__arm_vmlsdavq_s8): Likewise.\n\t(__arm_vmladavxq_s8): Likewise.\n\t(__arm_vmladavq_s8): Likewise.\n\t(__arm_vminvq_s8): Likewise.\n\t(__arm_vminq_s8): Likewise.\n\t(__arm_vmaxvq_s8): Likewise.\n\t(__arm_vmaxq_s8): Likewise.\n\t(__arm_vhsubq_s8): Likewise.\n\t(__arm_vhsubq_n_s8): Likewise.\n\t(__arm_vhcaddq_rot90_s8): Likewise.\n\t(__arm_vhcaddq_rot270_s8): Likewise.\n\t(__arm_vhaddq_s8): Likewise.\n\t(__arm_vhaddq_n_s8): Likewise.\n\t(__arm_veorq_s8): Likewise.\n\t(__arm_vcaddq_rot90_s8): Likewise.\n\t(__arm_vcaddq_rot270_s8): Likewise.\n\t(__arm_vbrsrq_n_s8): Likewise.\n\t(__arm_vbicq_s8): Likewise.\n\t(__arm_vandq_s8): Likewise.\n\t(__arm_vaddvaq_s8): Likewise.\n\t(__arm_vaddq_n_s8): Likewise.\n\t(__arm_vabdq_s8): Likewise.\n\t(__arm_vshlq_n_s8): Likewise.\n\t(__arm_vrshrq_n_s8): Likewise.\n\t(__arm_vqshlq_n_s8): Likewise.\n\t(__arm_vsubq_u16): Likewise.\n\t(__arm_vsubq_n_u16): Likewise.\n\t(__arm_vrmulhq_u16): Likewise.\n\t(__arm_vrhaddq_u16): Likewise.\n\t(__arm_vqsubq_u16): Likewise.\n\t(__arm_vqsubq_n_u16): Likewise.\n\t(__arm_vqaddq_u16): Likewise.\n\t(__arm_vqaddq_n_u16): Likewise.\n\t(__arm_vorrq_u16): Likewise.\n\t(__arm_vornq_u16): Likewise.\n\t(__arm_vmulq_u16): Likewise.\n\t(__arm_vmulq_n_u16): Likewise.\n\t(__arm_vmulltq_int_u16): Likewise.\n\t(__arm_vmullbq_int_u16): Likewise.\n\t(__arm_vmulhq_u16): Likewise.\n\t(__arm_vmladavq_u16): Likewise.\n\t(__arm_vminvq_u16): Likewise.\n\t(__arm_vminq_u16): Likewise.\n\t(__arm_vmaxvq_u16): Likewise.\n\t(__arm_vmaxq_u16): Likewise.\n\t(__arm_vhsubq_u16): Likewise.\n\t(__arm_vhsubq_n_u16): Likewise.\n\t(__arm_vhaddq_u16): Likewise.\n\t(__arm_vhaddq_n_u16): Likewise.\n\t(__arm_veorq_u16): Likewise.\n\t(__arm_vcmpneq_n_u16): Likewise.\n\t(__arm_vcmphiq_u16): Likewise.\n\t(__arm_vcmphiq_n_u16): Likewise.\n\t(__arm_vcmpeqq_u16): Likewise.\n\t(__arm_vcmpeqq_n_u16): Likewise.\n\t(__arm_vcmpcsq_u16): Likewise.\n\t(__arm_vcmpcsq_n_u16): Likewise.\n\t(__arm_vcaddq_rot90_u16): Likewise.\n\t(__arm_vcaddq_rot270_u16): Likewise.\n\t(__arm_vbicq_u16): Likewise.\n\t(__arm_vandq_u16): Likewise.\n\t(__arm_vaddvq_p_u16): Likewise.\n\t(__arm_vaddvaq_u16): Likewise.\n\t(__arm_vaddq_n_u16): Likewise.\n\t(__arm_vabdq_u16): Likewise.\n\t(__arm_vshlq_r_u16): Likewise.\n\t(__arm_vrshlq_u16): Likewise.\n\t(__arm_vrshlq_n_u16): Likewise.\n\t(__arm_vqshlq_u16): Likewise.\n\t(__arm_vqshlq_r_u16): Likewise.\n\t(__arm_vqrshlq_u16): Likewise.\n\t(__arm_vqrshlq_n_u16): Likewise.\n\t(__arm_vminavq_s16): Likewise.\n\t(__arm_vminaq_s16): Likewise.\n\t(__arm_vmaxavq_s16): Likewise.\n\t(__arm_vmaxaq_s16): Likewise.\n\t(__arm_vbrsrq_n_u16): Likewise.\n\t(__arm_vshlq_n_u16): Likewise.\n\t(__arm_vrshrq_n_u16): Likewise.\n\t(__arm_vqshlq_n_u16): Likewise.\n\t(__arm_vcmpneq_n_s16): Likewise.\n\t(__arm_vcmpltq_s16): Likewise.\n\t(__arm_vcmpltq_n_s16): Likewise.\n\t(__arm_vcmpleq_s16): Likewise.\n\t(__arm_vcmpleq_n_s16): Likewise.\n\t(__arm_vcmpgtq_s16): Likewise.\n\t(__arm_vcmpgtq_n_s16): Likewise.\n\t(__arm_vcmpgeq_s16): Likewise.\n\t(__arm_vcmpgeq_n_s16): Likewise.\n\t(__arm_vcmpeqq_s16): Likewise.\n\t(__arm_vcmpeqq_n_s16): Likewise.\n\t(__arm_vqshluq_n_s16): Likewise.\n\t(__arm_vaddvq_p_s16): Likewise.\n\t(__arm_vsubq_s16): Likewise.\n\t(__arm_vsubq_n_s16): Likewise.\n\t(__arm_vshlq_r_s16): Likewise.\n\t(__arm_vrshlq_s16): Likewise.\n\t(__arm_vrshlq_n_s16): Likewise.\n\t(__arm_vrmulhq_s16): Likewise.\n\t(__arm_vrhaddq_s16): Likewise.\n\t(__arm_vqsubq_s16): Likewise.\n\t(__arm_vqsubq_n_s16): Likewise.\n\t(__arm_vqshlq_s16): Likewise.\n\t(__arm_vqshlq_r_s16): Likewise.\n\t(__arm_vqrshlq_s16): Likewise.\n\t(__arm_vqrshlq_n_s16): Likewise.\n\t(__arm_vqrdmulhq_s16): Likewise.\n\t(__arm_vqrdmulhq_n_s16): Likewise.\n\t(__arm_vqdmulhq_s16): Likewise.\n\t(__arm_vqdmulhq_n_s16): Likewise.\n\t(__arm_vqaddq_s16): Likewise.\n\t(__arm_vqaddq_n_s16): Likewise.\n\t(__arm_vorrq_s16): Likewise.\n\t(__arm_vornq_s16): Likewise.\n\t(__arm_vmulq_s16): Likewise.\n\t(__arm_vmulq_n_s16): Likewise.\n\t(__arm_vmulltq_int_s16): Likewise.\n\t(__arm_vmullbq_int_s16): Likewise.\n\t(__arm_vmulhq_s16): Likewise.\n\t(__arm_vmlsdavxq_s16): Likewise.\n\t(__arm_vmlsdavq_s16): Likewise.\n\t(__arm_vmladavxq_s16): Likewise.\n\t(__arm_vmladavq_s16): Likewise.\n\t(__arm_vminvq_s16): Likewise.\n\t(__arm_vminq_s16): Likewise.\n\t(__arm_vmaxvq_s16): Likewise.\n\t(__arm_vmaxq_s16): Likewise.\n\t(__arm_vhsubq_s16): Likewise.\n\t(__arm_vhsubq_n_s16): Likewise.\n\t(__arm_vhcaddq_rot90_s16): Likewise.\n\t(__arm_vhcaddq_rot270_s16): Likewise.\n\t(__arm_vhaddq_s16): Likewise.\n\t(__arm_vhaddq_n_s16): Likewise.\n\t(__arm_veorq_s16): Likewise.\n\t(__arm_vcaddq_rot90_s16): Likewise.\n\t(__arm_vcaddq_rot270_s16): Likewise.\n\t(__arm_vbrsrq_n_s16): Likewise.\n\t(__arm_vbicq_s16): Likewise.\n\t(__arm_vandq_s16): Likewise.\n\t(__arm_vaddvaq_s16): Likewise.\n\t(__arm_vaddq_n_s16): Likewise.\n\t(__arm_vabdq_s16): Likewise.\n\t(__arm_vshlq_n_s16): Likewise.\n\t(__arm_vrshrq_n_s16): Likewise.\n\t(__arm_vqshlq_n_s16): Likewise.\n\t(__arm_vsubq_u32): Likewise.\n\t(__arm_vsubq_n_u32): Likewise.\n\t(__arm_vrmulhq_u32): Likewise.\n\t(__arm_vrhaddq_u32): Likewise.\n\t(__arm_vqsubq_u32): Likewise.\n\t(__arm_vqsubq_n_u32): Likewise.\n\t(__arm_vqaddq_u32): Likewise.\n\t(__arm_vqaddq_n_u32): Likewise.\n\t(__arm_vorrq_u32): Likewise.\n\t(__arm_vornq_u32): Likewise.\n\t(__arm_vmulq_u32): Likewise.\n\t(__arm_vmulq_n_u32): Likewise.\n\t(__arm_vmulltq_int_u32): Likewise.\n\t(__arm_vmullbq_int_u32): Likewise.\n\t(__arm_vmulhq_u32): Likewise.\n\t(__arm_vmladavq_u32): Likewise.\n\t(__arm_vminvq_u32): Likewise.\n\t(__arm_vminq_u32): Likewise.\n\t(__arm_vmaxvq_u32): Likewise.\n\t(__arm_vmaxq_u32): Likewise.\n\t(__arm_vhsubq_u32): Likewise.\n\t(__arm_vhsubq_n_u32): Likewise.\n\t(__arm_vhaddq_u32): Likewise.\n\t(__arm_vhaddq_n_u32): Likewise.\n\t(__arm_veorq_u32): Likewise.\n\t(__arm_vcmpneq_n_u32): Likewise.\n\t(__arm_vcmphiq_u32): Likewise.\n\t(__arm_vcmphiq_n_u32): Likewise.\n\t(__arm_vcmpeqq_u32): Likewise.\n\t(__arm_vcmpeqq_n_u32): Likewise.\n\t(__arm_vcmpcsq_u32): Likewise.\n\t(__arm_vcmpcsq_n_u32): Likewise.\n\t(__arm_vcaddq_rot90_u32): Likewise.\n\t(__arm_vcaddq_rot270_u32): Likewise.\n\t(__arm_vbicq_u32): Likewise.\n\t(__arm_vandq_u32): Likewise.\n\t(__arm_vaddvq_p_u32): Likewise.\n\t(__arm_vaddvaq_u32): Likewise.\n\t(__arm_vaddq_n_u32): Likewise.\n\t(__arm_vabdq_u32): Likewise.\n\t(__arm_vshlq_r_u32): Likewise.\n\t(__arm_vrshlq_u32): Likewise.\n\t(__arm_vrshlq_n_u32): Likewise.\n\t(__arm_vqshlq_u32): Likewise.\n\t(__arm_vqshlq_r_u32): Likewise.\n\t(__arm_vqrshlq_u32): Likewise.\n\t(__arm_vqrshlq_n_u32): Likewise.\n\t(__arm_vminavq_s32): Likewise.\n\t(__arm_vminaq_s32): Likewise.\n\t(__arm_vmaxavq_s32): Likewise.\n\t(__arm_vmaxaq_s32): Likewise.\n\t(__arm_vbrsrq_n_u32): Likewise.\n\t(__arm_vshlq_n_u32): Likewise.\n\t(__arm_vrshrq_n_u32): Likewise.\n\t(__arm_vqshlq_n_u32): Likewise.\n\t(__arm_vcmpneq_n_s32): Likewise.\n\t(__arm_vcmpltq_s32): Likewise.\n\t(__arm_vcmpltq_n_s32): Likewise.\n\t(__arm_vcmpleq_s32): Likewise.\n\t(__arm_vcmpleq_n_s32): Likewise.\n\t(__arm_vcmpgtq_s32): Likewise.\n\t(__arm_vcmpgtq_n_s32): Likewise.\n\t(__arm_vcmpgeq_s32): Likewise.\n\t(__arm_vcmpgeq_n_s32): Likewise.\n\t(__arm_vcmpeqq_s32): Likewise.\n\t(__arm_vcmpeqq_n_s32): Likewise.\n\t(__arm_vqshluq_n_s32): Likewise.\n\t(__arm_vaddvq_p_s32): Likewise.\n\t(__arm_vsubq_s32): Likewise.\n\t(__arm_vsubq_n_s32): Likewise.\n\t(__arm_vshlq_r_s32): Likewise.\n\t(__arm_vrshlq_s32): Likewise.\n\t(__arm_vrshlq_n_s32): Likewise.\n\t(__arm_vrmulhq_s32): Likewise.\n\t(__arm_vrhaddq_s32): Likewise.\n\t(__arm_vqsubq_s32): Likewise.\n\t(__arm_vqsubq_n_s32): Likewise.\n\t(__arm_vqshlq_s32): Likewise.\n\t(__arm_vqshlq_r_s32): Likewise.\n\t(__arm_vqrshlq_s32): Likewise.\n\t(__arm_vqrshlq_n_s32): Likewise.\n\t(__arm_vqrdmulhq_s32): Likewise.\n\t(__arm_vqrdmulhq_n_s32): Likewise.\n\t(__arm_vqdmulhq_s32): Likewise.\n\t(__arm_vqdmulhq_n_s32): Likewise.\n\t(__arm_vqaddq_s32): Likewise.\n\t(__arm_vqaddq_n_s32): Likewise.\n\t(__arm_vorrq_s32): Likewise.\n\t(__arm_vornq_s32): Likewise.\n\t(__arm_vmulq_s32): Likewise.\n\t(__arm_vmulq_n_s32): Likewise.\n\t(__arm_vmulltq_int_s32): Likewise.\n\t(__arm_vmullbq_int_s32): Likewise.\n\t(__arm_vmulhq_s32): Likewise.\n\t(__arm_vmlsdavxq_s32): Likewise.\n\t(__arm_vmlsdavq_s32): Likewise.\n\t(__arm_vmladavxq_s32): Likewise.\n\t(__arm_vmladavq_s32): Likewise.\n\t(__arm_vminvq_s32): Likewise.\n\t(__arm_vminq_s32): Likewise.\n\t(__arm_vmaxvq_s32): Likewise.\n\t(__arm_vmaxq_s32): Likewise.\n\t(__arm_vhsubq_s32): Likewise.\n\t(__arm_vhsubq_n_s32): Likewise.\n\t(__arm_vhcaddq_rot90_s32): Likewise.\n\t(__arm_vhcaddq_rot270_s32): Likewise.\n\t(__arm_vhaddq_s32): Likewise.\n\t(__arm_vhaddq_n_s32): Likewise.\n\t(__arm_veorq_s32): Likewise.\n\t(__arm_vcaddq_rot90_s32): Likewise.\n\t(__arm_vcaddq_rot270_s32): Likewise.\n\t(__arm_vbrsrq_n_s32): Likewise.\n\t(__arm_vbicq_s32): Likewise.\n\t(__arm_vandq_s32): Likewise.\n\t(__arm_vaddvaq_s32): Likewise.\n\t(__arm_vaddq_n_s32): Likewise.\n\t(__arm_vabdq_s32): Likewise.\n\t(__arm_vshlq_n_s32): Likewise.\n\t(__arm_vrshrq_n_s32): Likewise.\n\t(__arm_vqshlq_n_s32): Likewise.\n\t(vsubq): Define polymorphic variant.\n\t(vsubq_n): Likewise.\n\t(vshlq_r): Likewise.\n\t(vrshlq_n): Likewise.\n\t(vrshlq): Likewise.\n\t(vrmulhq): Likewise.\n\t(vrhaddq): Likewise.\n\t(vqsubq_n): Likewise.\n\t(vqsubq): Likewise.\n\t(vqshlq): Likewise.\n\t(vqshlq_r): Likewise.\n\t(vqshluq): Likewise.\n\t(vrshrq_n): Likewise.\n\t(vshlq_n): Likewise.\n\t(vqshluq_n): Likewise.\n\t(vqshlq_n): Likewise.\n\t(vqrshlq_n): Likewise.\n\t(vqrshlq): Likewise.\n\t(vqrdmulhq_n): Likewise.\n\t(vqrdmulhq): Likewise.\n\t(vqdmulhq_n): Likewise.\n\t(vqdmulhq): Likewise.\n\t(vqaddq_n): Likewise.\n\t(vqaddq): Likewise.\n\t(vorrq_n): Likewise.\n\t(vorrq): Likewise.\n\t(vornq): Likewise.\n\t(vmulq_n): Likewise.\n\t(vmulq): Likewise.\n\t(vmulltq_int): Likewise.\n\t(vmullbq_int): Likewise.\n\t(vmulhq): Likewise.\n\t(vminq): Likewise.\n\t(vminaq): Likewise.\n\t(vmaxq): Likewise.\n\t(vmaxaq): Likewise.\n\t(vhsubq_n): Likewise.\n\t(vhsubq): Likewise.\n\t(vhcaddq_rot90): Likewise.\n\t(vhcaddq_rot270): Likewise.\n\t(vhaddq_n): Likewise.\n\t(vhaddq): Likewise.\n\t(veorq): Likewise.\n\t(vcaddq_rot90): Likewise.\n\t(vcaddq_rot270): Likewise.\n\t(vbrsrq_n): Likewise.\n\t(vbicq_n): Likewise.\n\t(vbicq): Likewise.\n\t(vaddq): Likewise.\n\t(vaddq_n): Likewise.\n\t(vandq): Likewise.\n\t(vabdq): Likewise.\n\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_IMM): Use it.\n\t(BINOP_NONE_NONE_NONE): Likewise.\n\t(BINOP_NONE_NONE_UNONE): Likewise.\n\t(BINOP_UNONE_NONE_IMM): Likewise.\n\t(BINOP_UNONE_NONE_NONE): Likewise.\n\t(BINOP_UNONE_UNONE_IMM): Likewise.\n\t(BINOP_UNONE_UNONE_NONE): Likewise.\n\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/constraints.md (Ra): Define constraint to check constant is\n\tin the range of 0 to 7.\n\t(Rg): Define constriant to check the constant is one among 1, 2, 4\n\tand 8.\n\t* config/arm/mve.md (mve_vabdq_<supf>): Define RTL pattern.\n\t(mve_vaddq_n_<supf>): Likewise.\n\t(mve_vaddvaq_<supf>): Likewise.\n\t(mve_vaddvq_p_<supf>): Likewise.\n\t(mve_vandq_<supf>): Likewise.\n\t(mve_vbicq_<supf>): Likewise.\n\t(mve_vbrsrq_n_<supf>): Likewise.\n\t(mve_vcaddq_rot270_<supf>): Likewise.\n\t(mve_vcaddq_rot90_<supf>): Likewise.\n\t(mve_vcmpcsq_n_u): Likewise.\n\t(mve_vcmpcsq_u): Likewise.\n\t(mve_vcmpeqq_n_<supf>): Likewise.\n\t(mve_vcmpeqq_<supf>): Likewise.\n\t(mve_vcmpgeq_n_s): Likewise.\n\t(mve_vcmpgeq_s): Likewise.\n\t(mve_vcmpgtq_n_s): Likewise.\n\t(mve_vcmpgtq_s): Likewise.\n\t(mve_vcmphiq_n_u): Likewise.\n\t(mve_vcmphiq_u): Likewise.\n\t(mve_vcmpleq_n_s): Likewise.\n\t(mve_vcmpleq_s): Likewise.\n\t(mve_vcmpltq_n_s): Likewise.\n\t(mve_vcmpltq_s): Likewise.\n\t(mve_vcmpneq_n_<supf>): Likewise.\n\t(mve_vddupq_n_u): Likewise.\n\t(mve_veorq_<supf>): Likewise.\n\t(mve_vhaddq_n_<supf>): Likewise.\n\t(mve_vhaddq_<supf>): Likewise.\n\t(mve_vhcaddq_rot270_s): Likewise.\n\t(mve_vhcaddq_rot90_s): Likewise.\n\t(mve_vhsubq_n_<supf>): Likewise.\n\t(mve_vhsubq_<supf>): Likewise.\n\t(mve_vidupq_n_u): Likewise.\n\t(mve_vmaxaq_s): Likewise.\n\t(mve_vmaxavq_s): Likewise.\n\t(mve_vmaxq_<supf>): Likewise.\n\t(mve_vmaxvq_<supf>): Likewise.\n\t(mve_vminaq_s): Likewise.\n\t(mve_vminavq_s): Likewise.\n\t(mve_vminq_<supf>): Likewise.\n\t(mve_vminvq_<supf>): Likewise.\n\t(mve_vmladavq_<supf>): Likewise.\n\t(mve_vmladavxq_s): Likewise.\n\t(mve_vmlsdavq_s): Likewise.\n\t(mve_vmlsdavxq_s): Likewise.\n\t(mve_vmulhq_<supf>): Likewise.\n\t(mve_vmullbq_int_<supf>): Likewise.\n\t(mve_vmulltq_int_<supf>): Likewise.\n\t(mve_vmulq_n_<supf>): Likewise.\n\t(mve_vmulq_<supf>): Likewise.\n\t(mve_vornq_<supf>): Likewise.\n\t(mve_vorrq_<supf>): Likewise.\n\t(mve_vqaddq_n_<supf>): Likewise.\n\t(mve_vqaddq_<supf>): Likewise.\n\t(mve_vqdmulhq_n_s): Likewise.\n\t(mve_vqdmulhq_s): Likewise.\n\t(mve_vqrdmulhq_n_s): Likewise.\n\t(mve_vqrdmulhq_s): Likewise.\n\t(mve_vqrshlq_n_<supf>): Likewise.\n\t(mve_vqrshlq_<supf>): Likewise.\n\t(mve_vqshlq_n_<supf>): Likewise.\n\t(mve_vqshlq_r_<supf>): Likewise.\n\t(mve_vqshlq_<supf>): Likewise.\n\t(mve_vqshluq_n_s): Likewise.\n\t(mve_vqsubq_n_<supf>): Likewise.\n\t(mve_vqsubq_<supf>): Likewise.\n\t(mve_vrhaddq_<supf>): Likewise.\n\t(mve_vrmulhq_<supf>): Likewise.\n\t(mve_vrshlq_n_<supf>): Likewise.\n\t(mve_vrshlq_<supf>): Likewise.\n\t(mve_vrshrq_n_<supf>): Likewise.\n\t(mve_vshlq_n_<supf>): Likewise.\n\t(mve_vshlq_r_<supf>): Likewise.\n\t(mve_vsubq_n_<supf>): Likewise.\n\t(mve_vsubq_<supf>): Likewise.\n\t* config/arm/predicates.md (mve_imm_7): Define predicate to check\n\tthe matching constraint Ra.\n\t(mve_imm_selective_upto_8): Define predicate to check the matching\n\tconstraint Rg.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u8.c: Likewise.", "tree": {"sha": "7301d1a1cc1118de2689cfcff42b705aadb8858e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7301d1a1cc1118de2689cfcff42b705aadb8858e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33203b4c27d09b22b6cb4cc90970867eba2cda3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33203b4c27d09b22b6cb4cc90970867eba2cda3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33203b4c27d09b22b6cb4cc90970867eba2cda3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33203b4c27d09b22b6cb4cc90970867eba2cda3f/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71dba7b611f5e8404aa1b4361d319e856665a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71dba7b611f5e8404aa1b4361d319e856665a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71dba7b611f5e8404aa1b4361d319e856665a4a"}], "stats": {"total": 14157, "additions": 14153, "deletions": 4}, "files": [{"sha": "feecf92f746855c48b26976ab9c6b7c040c1747c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 868, "deletions": 0, "changes": 868, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -1,3 +1,871 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vsubq_u8): Define macro.\n+\t(vsubq_n_u8): Likewise.\n+\t(vrmulhq_u8): Likewise.\n+\t(vrhaddq_u8): Likewise.\n+\t(vqsubq_u8): Likewise.\n+\t(vqsubq_n_u8): Likewise.\n+\t(vqaddq_u8): Likewise.\n+\t(vqaddq_n_u8): Likewise.\n+\t(vorrq_u8): Likewise.\n+\t(vornq_u8): Likewise.\n+\t(vmulq_u8): Likewise.\n+\t(vmulq_n_u8): Likewise.\n+\t(vmulltq_int_u8): Likewise.\n+\t(vmullbq_int_u8): Likewise.\n+\t(vmulhq_u8): Likewise.\n+\t(vmladavq_u8): Likewise.\n+\t(vminvq_u8): Likewise.\n+\t(vminq_u8): Likewise.\n+\t(vmaxvq_u8): Likewise.\n+\t(vmaxq_u8): Likewise.\n+\t(vhsubq_u8): Likewise.\n+\t(vhsubq_n_u8): Likewise.\n+\t(vhaddq_u8): Likewise.\n+\t(vhaddq_n_u8): Likewise.\n+\t(veorq_u8): Likewise.\n+\t(vcmpneq_n_u8): Likewise.\n+\t(vcmphiq_u8): Likewise.\n+\t(vcmphiq_n_u8): Likewise.\n+\t(vcmpeqq_u8): Likewise.\n+\t(vcmpeqq_n_u8): Likewise.\n+\t(vcmpcsq_u8): Likewise.\n+\t(vcmpcsq_n_u8): Likewise.\n+\t(vcaddq_rot90_u8): Likewise.\n+\t(vcaddq_rot270_u8): Likewise.\n+\t(vbicq_u8): Likewise.\n+\t(vandq_u8): Likewise.\n+\t(vaddvq_p_u8): Likewise.\n+\t(vaddvaq_u8): Likewise.\n+\t(vaddq_n_u8): Likewise.\n+\t(vabdq_u8): Likewise.\n+\t(vshlq_r_u8): Likewise.\n+\t(vrshlq_u8): Likewise.\n+\t(vrshlq_n_u8): Likewise.\n+\t(vqshlq_u8): Likewise.\n+\t(vqshlq_r_u8): Likewise.\n+\t(vqrshlq_u8): Likewise.\n+\t(vqrshlq_n_u8): Likewise.\n+\t(vminavq_s8): Likewise.\n+\t(vminaq_s8): Likewise.\n+\t(vmaxavq_s8): Likewise.\n+\t(vmaxaq_s8): Likewise.\n+\t(vbrsrq_n_u8): Likewise.\n+\t(vshlq_n_u8): Likewise.\n+\t(vrshrq_n_u8): Likewise.\n+\t(vqshlq_n_u8): Likewise.\n+\t(vcmpneq_n_s8): Likewise.\n+\t(vcmpltq_s8): Likewise.\n+\t(vcmpltq_n_s8): Likewise.\n+\t(vcmpleq_s8): Likewise.\n+\t(vcmpleq_n_s8): Likewise.\n+\t(vcmpgtq_s8): Likewise.\n+\t(vcmpgtq_n_s8): Likewise.\n+\t(vcmpgeq_s8): Likewise.\n+\t(vcmpgeq_n_s8): Likewise.\n+\t(vcmpeqq_s8): Likewise.\n+\t(vcmpeqq_n_s8): Likewise.\n+\t(vqshluq_n_s8): Likewise.\n+\t(vaddvq_p_s8): Likewise.\n+\t(vsubq_s8): Likewise.\n+\t(vsubq_n_s8): Likewise.\n+\t(vshlq_r_s8): Likewise.\n+\t(vrshlq_s8): Likewise.\n+\t(vrshlq_n_s8): Likewise.\n+\t(vrmulhq_s8): Likewise.\n+\t(vrhaddq_s8): Likewise.\n+\t(vqsubq_s8): Likewise.\n+\t(vqsubq_n_s8): Likewise.\n+\t(vqshlq_s8): Likewise.\n+\t(vqshlq_r_s8): Likewise.\n+\t(vqrshlq_s8): Likewise.\n+\t(vqrshlq_n_s8): Likewise.\n+\t(vqrdmulhq_s8): Likewise.\n+\t(vqrdmulhq_n_s8): Likewise.\n+\t(vqdmulhq_s8): Likewise.\n+\t(vqdmulhq_n_s8): Likewise.\n+\t(vqaddq_s8): Likewise.\n+\t(vqaddq_n_s8): Likewise.\n+\t(vorrq_s8): Likewise.\n+\t(vornq_s8): Likewise.\n+\t(vmulq_s8): Likewise.\n+\t(vmulq_n_s8): Likewise.\n+\t(vmulltq_int_s8): Likewise.\n+\t(vmullbq_int_s8): Likewise.\n+\t(vmulhq_s8): Likewise.\n+\t(vmlsdavxq_s8): Likewise.\n+\t(vmlsdavq_s8): Likewise.\n+\t(vmladavxq_s8): Likewise.\n+\t(vmladavq_s8): Likewise.\n+\t(vminvq_s8): Likewise.\n+\t(vminq_s8): Likewise.\n+\t(vmaxvq_s8): Likewise.\n+\t(vmaxq_s8): Likewise.\n+\t(vhsubq_s8): Likewise.\n+\t(vhsubq_n_s8): Likewise.\n+\t(vhcaddq_rot90_s8): Likewise.\n+\t(vhcaddq_rot270_s8): Likewise.\n+\t(vhaddq_s8): Likewise.\n+\t(vhaddq_n_s8): Likewise.\n+\t(veorq_s8): Likewise.\n+\t(vcaddq_rot90_s8): Likewise.\n+\t(vcaddq_rot270_s8): Likewise.\n+\t(vbrsrq_n_s8): Likewise.\n+\t(vbicq_s8): Likewise.\n+\t(vandq_s8): Likewise.\n+\t(vaddvaq_s8): Likewise.\n+\t(vaddq_n_s8): Likewise.\n+\t(vabdq_s8): Likewise.\n+\t(vshlq_n_s8): Likewise.\n+\t(vrshrq_n_s8): Likewise.\n+\t(vqshlq_n_s8): Likewise.\n+\t(vsubq_u16): Likewise.\n+\t(vsubq_n_u16): Likewise.\n+\t(vrmulhq_u16): Likewise.\n+\t(vrhaddq_u16): Likewise.\n+\t(vqsubq_u16): Likewise.\n+\t(vqsubq_n_u16): Likewise.\n+\t(vqaddq_u16): Likewise.\n+\t(vqaddq_n_u16): Likewise.\n+\t(vorrq_u16): Likewise.\n+\t(vornq_u16): Likewise.\n+\t(vmulq_u16): Likewise.\n+\t(vmulq_n_u16): Likewise.\n+\t(vmulltq_int_u16): Likewise.\n+\t(vmullbq_int_u16): Likewise.\n+\t(vmulhq_u16): Likewise.\n+\t(vmladavq_u16): Likewise.\n+\t(vminvq_u16): Likewise.\n+\t(vminq_u16): Likewise.\n+\t(vmaxvq_u16): Likewise.\n+\t(vmaxq_u16): Likewise.\n+\t(vhsubq_u16): Likewise.\n+\t(vhsubq_n_u16): Likewise.\n+\t(vhaddq_u16): Likewise.\n+\t(vhaddq_n_u16): Likewise.\n+\t(veorq_u16): Likewise.\n+\t(vcmpneq_n_u16): Likewise.\n+\t(vcmphiq_u16): Likewise.\n+\t(vcmphiq_n_u16): Likewise.\n+\t(vcmpeqq_u16): Likewise.\n+\t(vcmpeqq_n_u16): Likewise.\n+\t(vcmpcsq_u16): Likewise.\n+\t(vcmpcsq_n_u16): Likewise.\n+\t(vcaddq_rot90_u16): Likewise.\n+\t(vcaddq_rot270_u16): Likewise.\n+\t(vbicq_u16): Likewise.\n+\t(vandq_u16): Likewise.\n+\t(vaddvq_p_u16): Likewise.\n+\t(vaddvaq_u16): Likewise.\n+\t(vaddq_n_u16): Likewise.\n+\t(vabdq_u16): Likewise.\n+\t(vshlq_r_u16): Likewise.\n+\t(vrshlq_u16): Likewise.\n+\t(vrshlq_n_u16): Likewise.\n+\t(vqshlq_u16): Likewise.\n+\t(vqshlq_r_u16): Likewise.\n+\t(vqrshlq_u16): Likewise.\n+\t(vqrshlq_n_u16): Likewise.\n+\t(vminavq_s16): Likewise.\n+\t(vminaq_s16): Likewise.\n+\t(vmaxavq_s16): Likewise.\n+\t(vmaxaq_s16): Likewise.\n+\t(vbrsrq_n_u16): Likewise.\n+\t(vshlq_n_u16): Likewise.\n+\t(vrshrq_n_u16): Likewise.\n+\t(vqshlq_n_u16): Likewise.\n+\t(vcmpneq_n_s16): Likewise.\n+\t(vcmpltq_s16): Likewise.\n+\t(vcmpltq_n_s16): Likewise.\n+\t(vcmpleq_s16): Likewise.\n+\t(vcmpleq_n_s16): Likewise.\n+\t(vcmpgtq_s16): Likewise.\n+\t(vcmpgtq_n_s16): Likewise.\n+\t(vcmpgeq_s16): Likewise.\n+\t(vcmpgeq_n_s16): Likewise.\n+\t(vcmpeqq_s16): Likewise.\n+\t(vcmpeqq_n_s16): Likewise.\n+\t(vqshluq_n_s16): Likewise.\n+\t(vaddvq_p_s16): Likewise.\n+\t(vsubq_s16): Likewise.\n+\t(vsubq_n_s16): Likewise.\n+\t(vshlq_r_s16): Likewise.\n+\t(vrshlq_s16): Likewise.\n+\t(vrshlq_n_s16): Likewise.\n+\t(vrmulhq_s16): Likewise.\n+\t(vrhaddq_s16): Likewise.\n+\t(vqsubq_s16): Likewise.\n+\t(vqsubq_n_s16): Likewise.\n+\t(vqshlq_s16): Likewise.\n+\t(vqshlq_r_s16): Likewise.\n+\t(vqrshlq_s16): Likewise.\n+\t(vqrshlq_n_s16): Likewise.\n+\t(vqrdmulhq_s16): Likewise.\n+\t(vqrdmulhq_n_s16): Likewise.\n+\t(vqdmulhq_s16): Likewise.\n+\t(vqdmulhq_n_s16): Likewise.\n+\t(vqaddq_s16): Likewise.\n+\t(vqaddq_n_s16): Likewise.\n+\t(vorrq_s16): Likewise.\n+\t(vornq_s16): Likewise.\n+\t(vmulq_s16): Likewise.\n+\t(vmulq_n_s16): Likewise.\n+\t(vmulltq_int_s16): Likewise.\n+\t(vmullbq_int_s16): Likewise.\n+\t(vmulhq_s16): Likewise.\n+\t(vmlsdavxq_s16): Likewise.\n+\t(vmlsdavq_s16): Likewise.\n+\t(vmladavxq_s16): Likewise.\n+\t(vmladavq_s16): Likewise.\n+\t(vminvq_s16): Likewise.\n+\t(vminq_s16): Likewise.\n+\t(vmaxvq_s16): Likewise.\n+\t(vmaxq_s16): Likewise.\n+\t(vhsubq_s16): Likewise.\n+\t(vhsubq_n_s16): Likewise.\n+\t(vhcaddq_rot90_s16): Likewise.\n+\t(vhcaddq_rot270_s16): Likewise.\n+\t(vhaddq_s16): Likewise.\n+\t(vhaddq_n_s16): Likewise.\n+\t(veorq_s16): Likewise.\n+\t(vcaddq_rot90_s16): Likewise.\n+\t(vcaddq_rot270_s16): Likewise.\n+\t(vbrsrq_n_s16): Likewise.\n+\t(vbicq_s16): Likewise.\n+\t(vandq_s16): Likewise.\n+\t(vaddvaq_s16): Likewise.\n+\t(vaddq_n_s16): Likewise.\n+\t(vabdq_s16): Likewise.\n+\t(vshlq_n_s16): Likewise.\n+\t(vrshrq_n_s16): Likewise.\n+\t(vqshlq_n_s16): Likewise.\n+\t(vsubq_u32): Likewise.\n+\t(vsubq_n_u32): Likewise.\n+\t(vrmulhq_u32): Likewise.\n+\t(vrhaddq_u32): Likewise.\n+\t(vqsubq_u32): Likewise.\n+\t(vqsubq_n_u32): Likewise.\n+\t(vqaddq_u32): Likewise.\n+\t(vqaddq_n_u32): Likewise.\n+\t(vorrq_u32): Likewise.\n+\t(vornq_u32): Likewise.\n+\t(vmulq_u32): Likewise.\n+\t(vmulq_n_u32): Likewise.\n+\t(vmulltq_int_u32): Likewise.\n+\t(vmullbq_int_u32): Likewise.\n+\t(vmulhq_u32): Likewise.\n+\t(vmladavq_u32): Likewise.\n+\t(vminvq_u32): Likewise.\n+\t(vminq_u32): Likewise.\n+\t(vmaxvq_u32): Likewise.\n+\t(vmaxq_u32): Likewise.\n+\t(vhsubq_u32): Likewise.\n+\t(vhsubq_n_u32): Likewise.\n+\t(vhaddq_u32): Likewise.\n+\t(vhaddq_n_u32): Likewise.\n+\t(veorq_u32): Likewise.\n+\t(vcmpneq_n_u32): Likewise.\n+\t(vcmphiq_u32): Likewise.\n+\t(vcmphiq_n_u32): Likewise.\n+\t(vcmpeqq_u32): Likewise.\n+\t(vcmpeqq_n_u32): Likewise.\n+\t(vcmpcsq_u32): Likewise.\n+\t(vcmpcsq_n_u32): Likewise.\n+\t(vcaddq_rot90_u32): Likewise.\n+\t(vcaddq_rot270_u32): Likewise.\n+\t(vbicq_u32): Likewise.\n+\t(vandq_u32): Likewise.\n+\t(vaddvq_p_u32): Likewise.\n+\t(vaddvaq_u32): Likewise.\n+\t(vaddq_n_u32): Likewise.\n+\t(vabdq_u32): Likewise.\n+\t(vshlq_r_u32): Likewise.\n+\t(vrshlq_u32): Likewise.\n+\t(vrshlq_n_u32): Likewise.\n+\t(vqshlq_u32): Likewise.\n+\t(vqshlq_r_u32): Likewise.\n+\t(vqrshlq_u32): Likewise.\n+\t(vqrshlq_n_u32): Likewise.\n+\t(vminavq_s32): Likewise.\n+\t(vminaq_s32): Likewise.\n+\t(vmaxavq_s32): Likewise.\n+\t(vmaxaq_s32): Likewise.\n+\t(vbrsrq_n_u32): Likewise.\n+\t(vshlq_n_u32): Likewise.\n+\t(vrshrq_n_u32): Likewise.\n+\t(vqshlq_n_u32): Likewise.\n+\t(vcmpneq_n_s32): Likewise.\n+\t(vcmpltq_s32): Likewise.\n+\t(vcmpltq_n_s32): Likewise.\n+\t(vcmpleq_s32): Likewise.\n+\t(vcmpleq_n_s32): Likewise.\n+\t(vcmpgtq_s32): Likewise.\n+\t(vcmpgtq_n_s32): Likewise.\n+\t(vcmpgeq_s32): Likewise.\n+\t(vcmpgeq_n_s32): Likewise.\n+\t(vcmpeqq_s32): Likewise.\n+\t(vcmpeqq_n_s32): Likewise.\n+\t(vqshluq_n_s32): Likewise.\n+\t(vaddvq_p_s32): Likewise.\n+\t(vsubq_s32): Likewise.\n+\t(vsubq_n_s32): Likewise.\n+\t(vshlq_r_s32): Likewise.\n+\t(vrshlq_s32): Likewise.\n+\t(vrshlq_n_s32): Likewise.\n+\t(vrmulhq_s32): Likewise.\n+\t(vrhaddq_s32): Likewise.\n+\t(vqsubq_s32): Likewise.\n+\t(vqsubq_n_s32): Likewise.\n+\t(vqshlq_s32): Likewise.\n+\t(vqshlq_r_s32): Likewise.\n+\t(vqrshlq_s32): Likewise.\n+\t(vqrshlq_n_s32): Likewise.\n+\t(vqrdmulhq_s32): Likewise.\n+\t(vqrdmulhq_n_s32): Likewise.\n+\t(vqdmulhq_s32): Likewise.\n+\t(vqdmulhq_n_s32): Likewise.\n+\t(vqaddq_s32): Likewise.\n+\t(vqaddq_n_s32): Likewise.\n+\t(vorrq_s32): Likewise.\n+\t(vornq_s32): Likewise.\n+\t(vmulq_s32): Likewise.\n+\t(vmulq_n_s32): Likewise.\n+\t(vmulltq_int_s32): Likewise.\n+\t(vmullbq_int_s32): Likewise.\n+\t(vmulhq_s32): Likewise.\n+\t(vmlsdavxq_s32): Likewise.\n+\t(vmlsdavq_s32): Likewise.\n+\t(vmladavxq_s32): Likewise.\n+\t(vmladavq_s32): Likewise.\n+\t(vminvq_s32): Likewise.\n+\t(vminq_s32): Likewise.\n+\t(vmaxvq_s32): Likewise.\n+\t(vmaxq_s32): Likewise.\n+\t(vhsubq_s32): Likewise.\n+\t(vhsubq_n_s32): Likewise.\n+\t(vhcaddq_rot90_s32): Likewise.\n+\t(vhcaddq_rot270_s32): Likewise.\n+\t(vhaddq_s32): Likewise.\n+\t(vhaddq_n_s32): Likewise.\n+\t(veorq_s32): Likewise.\n+\t(vcaddq_rot90_s32): Likewise.\n+\t(vcaddq_rot270_s32): Likewise.\n+\t(vbrsrq_n_s32): Likewise.\n+\t(vbicq_s32): Likewise.\n+\t(vandq_s32): Likewise.\n+\t(vaddvaq_s32): Likewise.\n+\t(vaddq_n_s32): Likewise.\n+\t(vabdq_s32): Likewise.\n+\t(vshlq_n_s32): Likewise.\n+\t(vrshrq_n_s32): Likewise.\n+\t(vqshlq_n_s32): Likewise.\n+\t(__arm_vsubq_u8): Define intrinsic.\n+\t(__arm_vsubq_n_u8): Likewise.\n+\t(__arm_vrmulhq_u8): Likewise.\n+\t(__arm_vrhaddq_u8): Likewise.\n+\t(__arm_vqsubq_u8): Likewise.\n+\t(__arm_vqsubq_n_u8): Likewise.\n+\t(__arm_vqaddq_u8): Likewise.\n+\t(__arm_vqaddq_n_u8): Likewise.\n+\t(__arm_vorrq_u8): Likewise.\n+\t(__arm_vornq_u8): Likewise.\n+\t(__arm_vmulq_u8): Likewise.\n+\t(__arm_vmulq_n_u8): Likewise.\n+\t(__arm_vmulltq_int_u8): Likewise.\n+\t(__arm_vmullbq_int_u8): Likewise.\n+\t(__arm_vmulhq_u8): Likewise.\n+\t(__arm_vmladavq_u8): Likewise.\n+\t(__arm_vminvq_u8): Likewise.\n+\t(__arm_vminq_u8): Likewise.\n+\t(__arm_vmaxvq_u8): Likewise.\n+\t(__arm_vmaxq_u8): Likewise.\n+\t(__arm_vhsubq_u8): Likewise.\n+\t(__arm_vhsubq_n_u8): Likewise.\n+\t(__arm_vhaddq_u8): Likewise.\n+\t(__arm_vhaddq_n_u8): Likewise.\n+\t(__arm_veorq_u8): Likewise.\n+\t(__arm_vcmpneq_n_u8): Likewise.\n+\t(__arm_vcmphiq_u8): Likewise.\n+\t(__arm_vcmphiq_n_u8): Likewise.\n+\t(__arm_vcmpeqq_u8): Likewise.\n+\t(__arm_vcmpeqq_n_u8): Likewise.\n+\t(__arm_vcmpcsq_u8): Likewise.\n+\t(__arm_vcmpcsq_n_u8): Likewise.\n+\t(__arm_vcaddq_rot90_u8): Likewise.\n+\t(__arm_vcaddq_rot270_u8): Likewise.\n+\t(__arm_vbicq_u8): Likewise.\n+\t(__arm_vandq_u8): Likewise.\n+\t(__arm_vaddvq_p_u8): Likewise.\n+\t(__arm_vaddvaq_u8): Likewise.\n+\t(__arm_vaddq_n_u8): Likewise.\n+\t(__arm_vabdq_u8): Likewise.\n+\t(__arm_vshlq_r_u8): Likewise.\n+\t(__arm_vrshlq_u8): Likewise.\n+\t(__arm_vrshlq_n_u8): Likewise.\n+\t(__arm_vqshlq_u8): Likewise.\n+\t(__arm_vqshlq_r_u8): Likewise.\n+\t(__arm_vqrshlq_u8): Likewise.\n+\t(__arm_vqrshlq_n_u8): Likewise.\n+\t(__arm_vminavq_s8): Likewise.\n+\t(__arm_vminaq_s8): Likewise.\n+\t(__arm_vmaxavq_s8): Likewise.\n+\t(__arm_vmaxaq_s8): Likewise.\n+\t(__arm_vbrsrq_n_u8): Likewise.\n+\t(__arm_vshlq_n_u8): Likewise.\n+\t(__arm_vrshrq_n_u8): Likewise.\n+\t(__arm_vqshlq_n_u8): Likewise.\n+\t(__arm_vcmpneq_n_s8): Likewise.\n+\t(__arm_vcmpltq_s8): Likewise.\n+\t(__arm_vcmpltq_n_s8): Likewise.\n+\t(__arm_vcmpleq_s8): Likewise.\n+\t(__arm_vcmpleq_n_s8): Likewise.\n+\t(__arm_vcmpgtq_s8): Likewise.\n+\t(__arm_vcmpgtq_n_s8): Likewise.\n+\t(__arm_vcmpgeq_s8): Likewise.\n+\t(__arm_vcmpgeq_n_s8): Likewise.\n+\t(__arm_vcmpeqq_s8): Likewise.\n+\t(__arm_vcmpeqq_n_s8): Likewise.\n+\t(__arm_vqshluq_n_s8): Likewise.\n+\t(__arm_vaddvq_p_s8): Likewise.\n+\t(__arm_vsubq_s8): Likewise.\n+\t(__arm_vsubq_n_s8): Likewise.\n+\t(__arm_vshlq_r_s8): Likewise.\n+\t(__arm_vrshlq_s8): Likewise.\n+\t(__arm_vrshlq_n_s8): Likewise.\n+\t(__arm_vrmulhq_s8): Likewise.\n+\t(__arm_vrhaddq_s8): Likewise.\n+\t(__arm_vqsubq_s8): Likewise.\n+\t(__arm_vqsubq_n_s8): Likewise.\n+\t(__arm_vqshlq_s8): Likewise.\n+\t(__arm_vqshlq_r_s8): Likewise.\n+\t(__arm_vqrshlq_s8): Likewise.\n+\t(__arm_vqrshlq_n_s8): Likewise.\n+\t(__arm_vqrdmulhq_s8): Likewise.\n+\t(__arm_vqrdmulhq_n_s8): Likewise.\n+\t(__arm_vqdmulhq_s8): Likewise.\n+\t(__arm_vqdmulhq_n_s8): Likewise.\n+\t(__arm_vqaddq_s8): Likewise.\n+\t(__arm_vqaddq_n_s8): Likewise.\n+\t(__arm_vorrq_s8): Likewise.\n+\t(__arm_vornq_s8): Likewise.\n+\t(__arm_vmulq_s8): Likewise.\n+\t(__arm_vmulq_n_s8): Likewise.\n+\t(__arm_vmulltq_int_s8): Likewise.\n+\t(__arm_vmullbq_int_s8): Likewise.\n+\t(__arm_vmulhq_s8): Likewise.\n+\t(__arm_vmlsdavxq_s8): Likewise.\n+\t(__arm_vmlsdavq_s8): Likewise.\n+\t(__arm_vmladavxq_s8): Likewise.\n+\t(__arm_vmladavq_s8): Likewise.\n+\t(__arm_vminvq_s8): Likewise.\n+\t(__arm_vminq_s8): Likewise.\n+\t(__arm_vmaxvq_s8): Likewise.\n+\t(__arm_vmaxq_s8): Likewise.\n+\t(__arm_vhsubq_s8): Likewise.\n+\t(__arm_vhsubq_n_s8): Likewise.\n+\t(__arm_vhcaddq_rot90_s8): Likewise.\n+\t(__arm_vhcaddq_rot270_s8): Likewise.\n+\t(__arm_vhaddq_s8): Likewise.\n+\t(__arm_vhaddq_n_s8): Likewise.\n+\t(__arm_veorq_s8): Likewise.\n+\t(__arm_vcaddq_rot90_s8): Likewise.\n+\t(__arm_vcaddq_rot270_s8): Likewise.\n+\t(__arm_vbrsrq_n_s8): Likewise.\n+\t(__arm_vbicq_s8): Likewise.\n+\t(__arm_vandq_s8): Likewise.\n+\t(__arm_vaddvaq_s8): Likewise.\n+\t(__arm_vaddq_n_s8): Likewise.\n+\t(__arm_vabdq_s8): Likewise.\n+\t(__arm_vshlq_n_s8): Likewise.\n+\t(__arm_vrshrq_n_s8): Likewise.\n+\t(__arm_vqshlq_n_s8): Likewise.\n+\t(__arm_vsubq_u16): Likewise.\n+\t(__arm_vsubq_n_u16): Likewise.\n+\t(__arm_vrmulhq_u16): Likewise.\n+\t(__arm_vrhaddq_u16): Likewise.\n+\t(__arm_vqsubq_u16): Likewise.\n+\t(__arm_vqsubq_n_u16): Likewise.\n+\t(__arm_vqaddq_u16): Likewise.\n+\t(__arm_vqaddq_n_u16): Likewise.\n+\t(__arm_vorrq_u16): Likewise.\n+\t(__arm_vornq_u16): Likewise.\n+\t(__arm_vmulq_u16): Likewise.\n+\t(__arm_vmulq_n_u16): Likewise.\n+\t(__arm_vmulltq_int_u16): Likewise.\n+\t(__arm_vmullbq_int_u16): Likewise.\n+\t(__arm_vmulhq_u16): Likewise.\n+\t(__arm_vmladavq_u16): Likewise.\n+\t(__arm_vminvq_u16): Likewise.\n+\t(__arm_vminq_u16): Likewise.\n+\t(__arm_vmaxvq_u16): Likewise.\n+\t(__arm_vmaxq_u16): Likewise.\n+\t(__arm_vhsubq_u16): Likewise.\n+\t(__arm_vhsubq_n_u16): Likewise.\n+\t(__arm_vhaddq_u16): Likewise.\n+\t(__arm_vhaddq_n_u16): Likewise.\n+\t(__arm_veorq_u16): Likewise.\n+\t(__arm_vcmpneq_n_u16): Likewise.\n+\t(__arm_vcmphiq_u16): Likewise.\n+\t(__arm_vcmphiq_n_u16): Likewise.\n+\t(__arm_vcmpeqq_u16): Likewise.\n+\t(__arm_vcmpeqq_n_u16): Likewise.\n+\t(__arm_vcmpcsq_u16): Likewise.\n+\t(__arm_vcmpcsq_n_u16): Likewise.\n+\t(__arm_vcaddq_rot90_u16): Likewise.\n+\t(__arm_vcaddq_rot270_u16): Likewise.\n+\t(__arm_vbicq_u16): Likewise.\n+\t(__arm_vandq_u16): Likewise.\n+\t(__arm_vaddvq_p_u16): Likewise.\n+\t(__arm_vaddvaq_u16): Likewise.\n+\t(__arm_vaddq_n_u16): Likewise.\n+\t(__arm_vabdq_u16): Likewise.\n+\t(__arm_vshlq_r_u16): Likewise.\n+\t(__arm_vrshlq_u16): Likewise.\n+\t(__arm_vrshlq_n_u16): Likewise.\n+\t(__arm_vqshlq_u16): Likewise.\n+\t(__arm_vqshlq_r_u16): Likewise.\n+\t(__arm_vqrshlq_u16): Likewise.\n+\t(__arm_vqrshlq_n_u16): Likewise.\n+\t(__arm_vminavq_s16): Likewise.\n+\t(__arm_vminaq_s16): Likewise.\n+\t(__arm_vmaxavq_s16): Likewise.\n+\t(__arm_vmaxaq_s16): Likewise.\n+\t(__arm_vbrsrq_n_u16): Likewise.\n+\t(__arm_vshlq_n_u16): Likewise.\n+\t(__arm_vrshrq_n_u16): Likewise.\n+\t(__arm_vqshlq_n_u16): Likewise.\n+\t(__arm_vcmpneq_n_s16): Likewise.\n+\t(__arm_vcmpltq_s16): Likewise.\n+\t(__arm_vcmpltq_n_s16): Likewise.\n+\t(__arm_vcmpleq_s16): Likewise.\n+\t(__arm_vcmpleq_n_s16): Likewise.\n+\t(__arm_vcmpgtq_s16): Likewise.\n+\t(__arm_vcmpgtq_n_s16): Likewise.\n+\t(__arm_vcmpgeq_s16): Likewise.\n+\t(__arm_vcmpgeq_n_s16): Likewise.\n+\t(__arm_vcmpeqq_s16): Likewise.\n+\t(__arm_vcmpeqq_n_s16): Likewise.\n+\t(__arm_vqshluq_n_s16): Likewise.\n+\t(__arm_vaddvq_p_s16): Likewise.\n+\t(__arm_vsubq_s16): Likewise.\n+\t(__arm_vsubq_n_s16): Likewise.\n+\t(__arm_vshlq_r_s16): Likewise.\n+\t(__arm_vrshlq_s16): Likewise.\n+\t(__arm_vrshlq_n_s16): Likewise.\n+\t(__arm_vrmulhq_s16): Likewise.\n+\t(__arm_vrhaddq_s16): Likewise.\n+\t(__arm_vqsubq_s16): Likewise.\n+\t(__arm_vqsubq_n_s16): Likewise.\n+\t(__arm_vqshlq_s16): Likewise.\n+\t(__arm_vqshlq_r_s16): Likewise.\n+\t(__arm_vqrshlq_s16): Likewise.\n+\t(__arm_vqrshlq_n_s16): Likewise.\n+\t(__arm_vqrdmulhq_s16): Likewise.\n+\t(__arm_vqrdmulhq_n_s16): Likewise.\n+\t(__arm_vqdmulhq_s16): Likewise.\n+\t(__arm_vqdmulhq_n_s16): Likewise.\n+\t(__arm_vqaddq_s16): Likewise.\n+\t(__arm_vqaddq_n_s16): Likewise.\n+\t(__arm_vorrq_s16): Likewise.\n+\t(__arm_vornq_s16): Likewise.\n+\t(__arm_vmulq_s16): Likewise.\n+\t(__arm_vmulq_n_s16): Likewise.\n+\t(__arm_vmulltq_int_s16): Likewise.\n+\t(__arm_vmullbq_int_s16): Likewise.\n+\t(__arm_vmulhq_s16): Likewise.\n+\t(__arm_vmlsdavxq_s16): Likewise.\n+\t(__arm_vmlsdavq_s16): Likewise.\n+\t(__arm_vmladavxq_s16): Likewise.\n+\t(__arm_vmladavq_s16): Likewise.\n+\t(__arm_vminvq_s16): Likewise.\n+\t(__arm_vminq_s16): Likewise.\n+\t(__arm_vmaxvq_s16): Likewise.\n+\t(__arm_vmaxq_s16): Likewise.\n+\t(__arm_vhsubq_s16): Likewise.\n+\t(__arm_vhsubq_n_s16): Likewise.\n+\t(__arm_vhcaddq_rot90_s16): Likewise.\n+\t(__arm_vhcaddq_rot270_s16): Likewise.\n+\t(__arm_vhaddq_s16): Likewise.\n+\t(__arm_vhaddq_n_s16): Likewise.\n+\t(__arm_veorq_s16): Likewise.\n+\t(__arm_vcaddq_rot90_s16): Likewise.\n+\t(__arm_vcaddq_rot270_s16): Likewise.\n+\t(__arm_vbrsrq_n_s16): Likewise.\n+\t(__arm_vbicq_s16): Likewise.\n+\t(__arm_vandq_s16): Likewise.\n+\t(__arm_vaddvaq_s16): Likewise.\n+\t(__arm_vaddq_n_s16): Likewise.\n+\t(__arm_vabdq_s16): Likewise.\n+\t(__arm_vshlq_n_s16): Likewise.\n+\t(__arm_vrshrq_n_s16): Likewise.\n+\t(__arm_vqshlq_n_s16): Likewise.\n+\t(__arm_vsubq_u32): Likewise.\n+\t(__arm_vsubq_n_u32): Likewise.\n+\t(__arm_vrmulhq_u32): Likewise.\n+\t(__arm_vrhaddq_u32): Likewise.\n+\t(__arm_vqsubq_u32): Likewise.\n+\t(__arm_vqsubq_n_u32): Likewise.\n+\t(__arm_vqaddq_u32): Likewise.\n+\t(__arm_vqaddq_n_u32): Likewise.\n+\t(__arm_vorrq_u32): Likewise.\n+\t(__arm_vornq_u32): Likewise.\n+\t(__arm_vmulq_u32): Likewise.\n+\t(__arm_vmulq_n_u32): Likewise.\n+\t(__arm_vmulltq_int_u32): Likewise.\n+\t(__arm_vmullbq_int_u32): Likewise.\n+\t(__arm_vmulhq_u32): Likewise.\n+\t(__arm_vmladavq_u32): Likewise.\n+\t(__arm_vminvq_u32): Likewise.\n+\t(__arm_vminq_u32): Likewise.\n+\t(__arm_vmaxvq_u32): Likewise.\n+\t(__arm_vmaxq_u32): Likewise.\n+\t(__arm_vhsubq_u32): Likewise.\n+\t(__arm_vhsubq_n_u32): Likewise.\n+\t(__arm_vhaddq_u32): Likewise.\n+\t(__arm_vhaddq_n_u32): Likewise.\n+\t(__arm_veorq_u32): Likewise.\n+\t(__arm_vcmpneq_n_u32): Likewise.\n+\t(__arm_vcmphiq_u32): Likewise.\n+\t(__arm_vcmphiq_n_u32): Likewise.\n+\t(__arm_vcmpeqq_u32): Likewise.\n+\t(__arm_vcmpeqq_n_u32): Likewise.\n+\t(__arm_vcmpcsq_u32): Likewise.\n+\t(__arm_vcmpcsq_n_u32): Likewise.\n+\t(__arm_vcaddq_rot90_u32): Likewise.\n+\t(__arm_vcaddq_rot270_u32): Likewise.\n+\t(__arm_vbicq_u32): Likewise.\n+\t(__arm_vandq_u32): Likewise.\n+\t(__arm_vaddvq_p_u32): Likewise.\n+\t(__arm_vaddvaq_u32): Likewise.\n+\t(__arm_vaddq_n_u32): Likewise.\n+\t(__arm_vabdq_u32): Likewise.\n+\t(__arm_vshlq_r_u32): Likewise.\n+\t(__arm_vrshlq_u32): Likewise.\n+\t(__arm_vrshlq_n_u32): Likewise.\n+\t(__arm_vqshlq_u32): Likewise.\n+\t(__arm_vqshlq_r_u32): Likewise.\n+\t(__arm_vqrshlq_u32): Likewise.\n+\t(__arm_vqrshlq_n_u32): Likewise.\n+\t(__arm_vminavq_s32): Likewise.\n+\t(__arm_vminaq_s32): Likewise.\n+\t(__arm_vmaxavq_s32): Likewise.\n+\t(__arm_vmaxaq_s32): Likewise.\n+\t(__arm_vbrsrq_n_u32): Likewise.\n+\t(__arm_vshlq_n_u32): Likewise.\n+\t(__arm_vrshrq_n_u32): Likewise.\n+\t(__arm_vqshlq_n_u32): Likewise.\n+\t(__arm_vcmpneq_n_s32): Likewise.\n+\t(__arm_vcmpltq_s32): Likewise.\n+\t(__arm_vcmpltq_n_s32): Likewise.\n+\t(__arm_vcmpleq_s32): Likewise.\n+\t(__arm_vcmpleq_n_s32): Likewise.\n+\t(__arm_vcmpgtq_s32): Likewise.\n+\t(__arm_vcmpgtq_n_s32): Likewise.\n+\t(__arm_vcmpgeq_s32): Likewise.\n+\t(__arm_vcmpgeq_n_s32): Likewise.\n+\t(__arm_vcmpeqq_s32): Likewise.\n+\t(__arm_vcmpeqq_n_s32): Likewise.\n+\t(__arm_vqshluq_n_s32): Likewise.\n+\t(__arm_vaddvq_p_s32): Likewise.\n+\t(__arm_vsubq_s32): Likewise.\n+\t(__arm_vsubq_n_s32): Likewise.\n+\t(__arm_vshlq_r_s32): Likewise.\n+\t(__arm_vrshlq_s32): Likewise.\n+\t(__arm_vrshlq_n_s32): Likewise.\n+\t(__arm_vrmulhq_s32): Likewise.\n+\t(__arm_vrhaddq_s32): Likewise.\n+\t(__arm_vqsubq_s32): Likewise.\n+\t(__arm_vqsubq_n_s32): Likewise.\n+\t(__arm_vqshlq_s32): Likewise.\n+\t(__arm_vqshlq_r_s32): Likewise.\n+\t(__arm_vqrshlq_s32): Likewise.\n+\t(__arm_vqrshlq_n_s32): Likewise.\n+\t(__arm_vqrdmulhq_s32): Likewise.\n+\t(__arm_vqrdmulhq_n_s32): Likewise.\n+\t(__arm_vqdmulhq_s32): Likewise.\n+\t(__arm_vqdmulhq_n_s32): Likewise.\n+\t(__arm_vqaddq_s32): Likewise.\n+\t(__arm_vqaddq_n_s32): Likewise.\n+\t(__arm_vorrq_s32): Likewise.\n+\t(__arm_vornq_s32): Likewise.\n+\t(__arm_vmulq_s32): Likewise.\n+\t(__arm_vmulq_n_s32): Likewise.\n+\t(__arm_vmulltq_int_s32): Likewise.\n+\t(__arm_vmullbq_int_s32): Likewise.\n+\t(__arm_vmulhq_s32): Likewise.\n+\t(__arm_vmlsdavxq_s32): Likewise.\n+\t(__arm_vmlsdavq_s32): Likewise.\n+\t(__arm_vmladavxq_s32): Likewise.\n+\t(__arm_vmladavq_s32): Likewise.\n+\t(__arm_vminvq_s32): Likewise.\n+\t(__arm_vminq_s32): Likewise.\n+\t(__arm_vmaxvq_s32): Likewise.\n+\t(__arm_vmaxq_s32): Likewise.\n+\t(__arm_vhsubq_s32): Likewise.\n+\t(__arm_vhsubq_n_s32): Likewise.\n+\t(__arm_vhcaddq_rot90_s32): Likewise.\n+\t(__arm_vhcaddq_rot270_s32): Likewise.\n+\t(__arm_vhaddq_s32): Likewise.\n+\t(__arm_vhaddq_n_s32): Likewise.\n+\t(__arm_veorq_s32): Likewise.\n+\t(__arm_vcaddq_rot90_s32): Likewise.\n+\t(__arm_vcaddq_rot270_s32): Likewise.\n+\t(__arm_vbrsrq_n_s32): Likewise.\n+\t(__arm_vbicq_s32): Likewise.\n+\t(__arm_vandq_s32): Likewise.\n+\t(__arm_vaddvaq_s32): Likewise.\n+\t(__arm_vaddq_n_s32): Likewise.\n+\t(__arm_vabdq_s32): Likewise.\n+\t(__arm_vshlq_n_s32): Likewise.\n+\t(__arm_vrshrq_n_s32): Likewise.\n+\t(__arm_vqshlq_n_s32): Likewise.\n+\t(vsubq): Define polymorphic variant.\n+\t(vsubq_n): Likewise.\n+\t(vshlq_r): Likewise.\n+\t(vrshlq_n): Likewise.\n+\t(vrshlq): Likewise.\n+\t(vrmulhq): Likewise.\n+\t(vrhaddq): Likewise.\n+\t(vqsubq_n): Likewise.\n+\t(vqsubq): Likewise.\n+\t(vqshlq): Likewise.\n+\t(vqshlq_r): Likewise.\n+\t(vqshluq): Likewise.\n+\t(vrshrq_n): Likewise.\n+\t(vshlq_n): Likewise.\n+\t(vqshluq_n): Likewise.\n+\t(vqshlq_n): Likewise.\n+\t(vqrshlq_n): Likewise.\n+\t(vqrshlq): Likewise.\n+\t(vqrdmulhq_n): Likewise.\n+\t(vqrdmulhq): Likewise.\n+\t(vqdmulhq_n): Likewise.\n+\t(vqdmulhq): Likewise.\n+\t(vqaddq_n): Likewise.\n+\t(vqaddq): Likewise.\n+\t(vorrq_n): Likewise.\n+\t(vorrq): Likewise.\n+\t(vornq): Likewise.\n+\t(vmulq_n): Likewise.\n+\t(vmulq): Likewise.\n+\t(vmulltq_int): Likewise.\n+\t(vmullbq_int): Likewise.\n+\t(vmulhq): Likewise.\n+\t(vminq): Likewise.\n+\t(vminaq): Likewise.\n+\t(vmaxq): Likewise.\n+\t(vmaxaq): Likewise.\n+\t(vhsubq_n): Likewise.\n+\t(vhsubq): Likewise.\n+\t(vhcaddq_rot90): Likewise.\n+\t(vhcaddq_rot270): Likewise.\n+\t(vhaddq_n): Likewise.\n+\t(vhaddq): Likewise.\n+\t(veorq): Likewise.\n+\t(vcaddq_rot90): Likewise.\n+\t(vcaddq_rot270): Likewise.\n+\t(vbrsrq_n): Likewise.\n+\t(vbicq_n): Likewise.\n+\t(vbicq): Likewise.\n+\t(vaddq): Likewise.\n+\t(vaddq_n): Likewise.\n+\t(vandq): Likewise.\n+\t(vabdq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_IMM): Use it.\n+\t(BINOP_NONE_NONE_NONE): Likewise.\n+\t(BINOP_NONE_NONE_UNONE): Likewise.\n+\t(BINOP_UNONE_NONE_IMM): Likewise.\n+\t(BINOP_UNONE_NONE_NONE): Likewise.\n+\t(BINOP_UNONE_UNONE_IMM): Likewise.\n+\t(BINOP_UNONE_UNONE_NONE): Likewise.\n+\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/constraints.md (Ra): Define constraint to check constant is\n+\tin the range of 0 to 7.\n+\t(Rg): Define constriant to check the constant is one among 1, 2, 4\n+\tand 8.\n+\t* config/arm/mve.md (mve_vabdq_<supf>): Define RTL pattern.\n+\t(mve_vaddq_n_<supf>): Likewise.\n+\t(mve_vaddvaq_<supf>): Likewise.\n+\t(mve_vaddvq_p_<supf>): Likewise.\n+\t(mve_vandq_<supf>): Likewise.\n+\t(mve_vbicq_<supf>): Likewise.\n+\t(mve_vbrsrq_n_<supf>): Likewise.\n+\t(mve_vcaddq_rot270_<supf>): Likewise.\n+\t(mve_vcaddq_rot90_<supf>): Likewise.\n+\t(mve_vcmpcsq_n_u): Likewise.\n+\t(mve_vcmpcsq_u): Likewise.\n+\t(mve_vcmpeqq_n_<supf>): Likewise.\n+\t(mve_vcmpeqq_<supf>): Likewise.\n+\t(mve_vcmpgeq_n_s): Likewise.\n+\t(mve_vcmpgeq_s): Likewise.\n+\t(mve_vcmpgtq_n_s): Likewise.\n+\t(mve_vcmpgtq_s): Likewise.\n+\t(mve_vcmphiq_n_u): Likewise.\n+\t(mve_vcmphiq_u): Likewise.\n+\t(mve_vcmpleq_n_s): Likewise.\n+\t(mve_vcmpleq_s): Likewise.\n+\t(mve_vcmpltq_n_s): Likewise.\n+\t(mve_vcmpltq_s): Likewise.\n+\t(mve_vcmpneq_n_<supf>): Likewise.\n+\t(mve_vddupq_n_u): Likewise.\n+\t(mve_veorq_<supf>): Likewise.\n+\t(mve_vhaddq_n_<supf>): Likewise.\n+\t(mve_vhaddq_<supf>): Likewise.\n+\t(mve_vhcaddq_rot270_s): Likewise.\n+\t(mve_vhcaddq_rot90_s): Likewise.\n+\t(mve_vhsubq_n_<supf>): Likewise.\n+\t(mve_vhsubq_<supf>): Likewise.\n+\t(mve_vidupq_n_u): Likewise.\n+\t(mve_vmaxaq_s): Likewise.\n+\t(mve_vmaxavq_s): Likewise.\n+\t(mve_vmaxq_<supf>): Likewise.\n+\t(mve_vmaxvq_<supf>): Likewise.\n+\t(mve_vminaq_s): Likewise.\n+\t(mve_vminavq_s): Likewise.\n+\t(mve_vminq_<supf>): Likewise.\n+\t(mve_vminvq_<supf>): Likewise.\n+\t(mve_vmladavq_<supf>): Likewise.\n+\t(mve_vmladavxq_s): Likewise.\n+\t(mve_vmlsdavq_s): Likewise.\n+\t(mve_vmlsdavxq_s): Likewise.\n+\t(mve_vmulhq_<supf>): Likewise.\n+\t(mve_vmullbq_int_<supf>): Likewise.\n+\t(mve_vmulltq_int_<supf>): Likewise.\n+\t(mve_vmulq_n_<supf>): Likewise.\n+\t(mve_vmulq_<supf>): Likewise.\n+\t(mve_vornq_<supf>): Likewise.\n+\t(mve_vorrq_<supf>): Likewise.\n+\t(mve_vqaddq_n_<supf>): Likewise.\n+\t(mve_vqaddq_<supf>): Likewise.\n+\t(mve_vqdmulhq_n_s): Likewise.\n+\t(mve_vqdmulhq_s): Likewise.\n+\t(mve_vqrdmulhq_n_s): Likewise.\n+\t(mve_vqrdmulhq_s): Likewise.\n+\t(mve_vqrshlq_n_<supf>): Likewise.\n+\t(mve_vqrshlq_<supf>): Likewise.\n+\t(mve_vqshlq_n_<supf>): Likewise.\n+\t(mve_vqshlq_r_<supf>): Likewise.\n+\t(mve_vqshlq_<supf>): Likewise.\n+\t(mve_vqshluq_n_s): Likewise.\n+\t(mve_vqsubq_n_<supf>): Likewise.\n+\t(mve_vqsubq_<supf>): Likewise.\n+\t(mve_vrhaddq_<supf>): Likewise.\n+\t(mve_vrmulhq_<supf>): Likewise.\n+\t(mve_vrshlq_n_<supf>): Likewise.\n+\t(mve_vrshlq_<supf>): Likewise.\n+\t(mve_vrshrq_n_<supf>): Likewise.\n+\t(mve_vshlq_n_<supf>): Likewise.\n+\t(mve_vshlq_r_<supf>): Likewise.\n+\t(mve_vsubq_n_<supf>): Likewise.\n+\t(mve_vsubq_<supf>): Likewise.\n+\t* config/arm/predicates.md (mve_imm_7): Define predicate to check\n+\tthe matching constraint Ra.\n+\t(mve_imm_selective_upto_8): Define predicate to check the matching\n+\tconstraint Rg.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "eb81a02d95b1b93a900ac59ad169a78a52e59c51", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 3656, "deletions": 1, "changes": 3657, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f"}, {"sha": "550a67f920b8e63aa806420736cd898538902e2c", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -93,3 +93,123 @@ VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vrmulhq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vrhaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vorrq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vornq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulltq_int_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmullbq_int_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulhq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmladavq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vminvq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vminq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxvq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvaq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vabdq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_r_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_r_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vminavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vminaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vmaxavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vmaxaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vshlq_r_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrhaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqshlq_r_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vorrq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vornq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulltq_int_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmullbq_int_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmlsdavxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmlsdavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmladavxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmladavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vminvq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vminq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmaxvq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmaxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vaddvaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vabdq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vrshrq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vqshlq_n_s, v16qi, v8hi, v4si)"}, {"sha": "cdf75ab3fc324ac3a9b054beb29be56000f085bf", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -34,7 +34,8 @@\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, DN, Dm, Dl, DL, Do, Dv, Dy, Di,\n ;;\t\t\t Dt, Dp, Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n-;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd, Rf, Rb\n+;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz, Rd, Rf, Rb, Ra,\n+;;\t\t     Rg\n ;; in all states: Pf, Pg\n \n ;; The following memory constraints have been used:\n@@ -58,6 +59,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 16\")))\n \n+(define_constraint \"Ra\"\n+  \"@internal In Thumb-2 state a constant in range 0 to 7\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ival >= 0 && ival <= 7\")))\n+\n (define_constraint \"Rb\"\n   \"@internal In Thumb-2 state a constant in range 1 to 8\"\n   (and (match_code \"const_int\")\n@@ -68,6 +74,12 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_HAVE_MVE && ival >= 1 && ival <= 32\")))\n \n+(define_constraint \"Rg\"\n+  \"@internal In Thumb-2 state a constant is one among 1, 2, 4 and 8\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_HAVE_MVE && ((ival == 1) || (ival == 2)\n+\t\t\t\t       || (ival == 4) || (ival == 8))\")))\n+\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n "}, {"sha": "8e817b890dad9583d8f0b9c3cf1d5c46cffca203", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1203, "deletions": 2, "changes": 1205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -41,7 +41,32 @@\n \t\t\t VCREATEQ_F VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U VBRSRQ_N_F\n \t\t\t VSUBQ_N_F VCREATEQ_U VCREATEQ_S VSHRQ_N_S VSHRQ_N_U\n \t\t\t VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U VADDLVQ_P_S\n-\t\t\t VADDLVQ_P_U VCMPNEQ_U VCMPNEQ_S VSHLQ_S VSHLQ_U])\n+\t\t\t VADDLVQ_P_U VCMPNEQ_U VCMPNEQ_S VSHLQ_S VSHLQ_U VABDQ_S\n+\t\t\t VADDQ_N_S VADDVAQ_S VADDVQ_P_S VANDQ_S VBICQ_S\n+\t\t\t VBRSRQ_N_S VCADDQ_ROT270_S VCADDQ_ROT90_S VCMPEQQ_S\n+\t\t\t VCMPEQQ_N_S VCMPNEQ_N_S VEORQ_S VHADDQ_S VHADDQ_N_S\n+\t\t\t VHSUBQ_S VHSUBQ_N_S VMAXQ_S VMAXVQ_S VMINQ_S VMINVQ_S\n+\t\t\t VMLADAVQ_S VMULHQ_S VMULLBQ_INT_S VMULLTQ_INT_S VMULQ_S\n+\t\t\t VMULQ_N_S VORNQ_S VORRQ_S VQADDQ_S VQADDQ_N_S VQRSHLQ_S\n+\t\t\t VQRSHLQ_N_S VQSHLQ_S VQSHLQ_N_S VQSHLQ_R_S VQSUBQ_S\n+\t\t\t VQSUBQ_N_S VRHADDQ_S VRMULHQ_S VRSHLQ_S VRSHLQ_N_S\n+\t\t\t VRSHRQ_N_S VSHLQ_N_S VSHLQ_R_S VSUBQ_S VSUBQ_N_S\n+\t\t\t VABDQ_U VADDQ_N_U VADDVAQ_U VADDVQ_P_U VANDQ_U VBICQ_U\n+\t\t\t VBRSRQ_N_U VCADDQ_ROT270_U VCADDQ_ROT90_U VCMPEQQ_U\n+\t\t\t VCMPEQQ_N_U VCMPNEQ_N_U VEORQ_U VHADDQ_U VHADDQ_N_U\n+\t\t\t VHSUBQ_U VHSUBQ_N_U VMAXQ_U VMAXVQ_U VMINQ_U VMINVQ_U\n+\t\t\t VMLADAVQ_U VMULHQ_U VMULLBQ_INT_U VMULLTQ_INT_U VMULQ_U\n+\t\t\t VMULQ_N_U VORNQ_U VORRQ_U VQADDQ_U VQADDQ_N_U VQRSHLQ_U\n+\t\t\t VQRSHLQ_N_U VQSHLQ_U VQSHLQ_N_U VQSHLQ_R_U VQSUBQ_U\n+\t\t\t VQSUBQ_N_U VRHADDQ_U VRMULHQ_U VRSHLQ_U VRSHLQ_N_U\n+\t\t\t VRSHRQ_N_U VSHLQ_N_U VSHLQ_R_U VSUBQ_U VSUBQ_N_U\n+\t\t\t VCMPGEQ_N_S VCMPGEQ_S VCMPGTQ_N_S VCMPGTQ_S VCMPLEQ_N_S\n+\t\t\t VCMPLEQ_S VCMPLTQ_N_S VCMPLTQ_S VHCADDQ_ROT270_S\n+\t\t\t VHCADDQ_ROT90_S VMAXAQ_S VMAXAVQ_S VMINAQ_S VMINAVQ_S\n+\t\t\t VMLADAVXQ_S VMLSDAVQ_S VMLSDAVXQ_S VQDMULHQ_N_S\n+\t\t\t VQDMULHQ_S VQRDMULHQ_N_S VQRDMULHQ_S VQSHLUQ_N_S\n+\t\t\t VCMPCSQ_N_U VCMPCSQ_U VCMPHIQ_N_U VCMPHIQ_U VABDQ_M_S\n+\t\t\t VABDQ_M_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -62,13 +87,46 @@\n \t\t       (VCREATEQ_U \"u\") (VCREATEQ_S \"s\") (VSHRQ_N_S \"s\")\n \t\t       (VSHRQ_N_U \"u\") (VCVTQ_N_FROM_F_S \"s\") (VSHLQ_U \"u\")\n \t\t       (VCVTQ_N_FROM_F_U \"u\") (VADDLVQ_P_S \"s\") (VSHLQ_S \"s\")\n-\t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")])\n+\t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")\n+\t\t       (VABDQ_M_S \"s\") (VABDQ_M_U \"u\") (VABDQ_S \"s\")\n+\t\t       (VABDQ_U \"u\") (VADDQ_N_S \"s\") (VADDQ_N_U \"u\")\n+\t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VANDQ_S \"s\")\n+\t\t       (VANDQ_U \"u\") (VBICQ_S \"s\") (VBICQ_U \"u\")\n+\t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\") (VCADDQ_ROT270_S \"s\")\n+\t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n+\t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n+\t\t       (VCMPEQQ_N_S \"s\") (VCMPEQQ_N_U \"u\") (VCMPNEQ_N_S \"s\")\n+\t\t       (VCMPNEQ_N_U \"u\") (VEORQ_S \"s\") (VEORQ_U \"u\")\n+\t\t       (VHADDQ_N_S \"s\") (VHADDQ_N_U \"u\") (VHADDQ_S \"s\")\n+\t\t       (VHADDQ_U \"u\") (VHSUBQ_N_S \"s\")\t(VHSUBQ_N_U \"u\")\n+\t\t       (VHSUBQ_S \"s\") (VMAXQ_S \"s\") (VMAXQ_U \"u\") (VHSUBQ_U \"u\")\n+\t\t       (VMAXVQ_S \"s\") (VMAXVQ_U \"u\") (VMINQ_S \"s\") (VMINQ_U \"u\")\n+\t\t       (VMINVQ_S \"s\") (VMINVQ_U \"u\") (VMLADAVQ_S \"s\")\n+\t\t       (VMLADAVQ_U \"u\") (VMULHQ_S \"s\") (VMULHQ_U \"u\")\n+\t\t       (VMULLBQ_INT_S \"s\") (VMULLBQ_INT_U \"u\") (VQADDQ_S \"s\")\n+\t\t       (VMULLTQ_INT_S \"s\") (VMULLTQ_INT_U \"u\") (VQADDQ_U \"u\")\n+\t\t       (VMULQ_N_S \"s\") (VMULQ_N_U \"u\") (VMULQ_S \"s\")\n+\t\t       (VMULQ_U \"u\") (VORNQ_S \"s\") (VORNQ_U \"u\") (VORRQ_S \"s\")\n+\t\t       (VORRQ_U \"u\") (VQADDQ_N_S \"s\") (VQADDQ_N_U \"u\")\n+\t\t       (VQRSHLQ_N_S \"s\") (VQRSHLQ_N_U \"u\") (VQRSHLQ_S \"s\")\n+\t\t       (VQRSHLQ_U \"u\") (VQSHLQ_N_S \"s\")\t(VQSHLQ_N_U \"u\")\n+\t\t       (VQSHLQ_R_S \"s\") (VQSHLQ_R_U \"u\") (VQSHLQ_S \"s\")\n+\t\t       (VQSHLQ_U \"u\") (VQSUBQ_N_S \"s\") (VQSUBQ_N_U \"u\")\n+\t\t       (VQSUBQ_S \"s\") (VQSUBQ_U \"u\") (VRHADDQ_S \"s\")\n+\t\t       (VRHADDQ_U \"u\") (VRMULHQ_S \"s\") (VRMULHQ_U \"u\")\n+\t\t       (VRSHLQ_N_S \"s\") (VRSHLQ_N_U \"u\") (VRSHLQ_S \"s\")\n+\t\t       (VRSHLQ_U \"u\") (VRSHRQ_N_S \"s\") (VRSHRQ_N_U \"u\")\n+\t\t       (VSHLQ_N_S \"s\") (VSHLQ_N_U \"u\") (VSHLQ_R_S \"s\")\n+\t\t       (VSHLQ_R_U \"u\") (VSUBQ_N_S \"s\") (VSUBQ_N_U \"u\")\n+\t\t       (VSUBQ_S \"s\") (VSUBQ_U \"u\") (VADDVAQ_S \"s\")\n+\t\t       (VADDVAQ_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\")])\n (define_mode_attr MVE_pred2 [(V16QI \"mve_imm_8\") (V8HI \"mve_imm_16\")\n \t\t\t     (V4SI \"mve_imm_32\")])\n (define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")])\n+(define_mode_attr MVE_LANES [(V16QI \"16\") (V8HI \"8\") (V4SI \"4\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -95,6 +153,54 @@\n (define_int_iterator VADDLVQ_P [VADDLVQ_P_S VADDLVQ_P_U])\n (define_int_iterator VCMPNEQ [VCMPNEQ_U VCMPNEQ_S])\n (define_int_iterator VSHLQ [VSHLQ_S VSHLQ_U])\n+(define_int_iterator VABDQ [VABDQ_S VABDQ_U])\n+(define_int_iterator VADDQ_N [VADDQ_N_S VADDQ_N_U])\n+(define_int_iterator VADDVAQ [VADDVAQ_S VADDVAQ_U])\n+(define_int_iterator VADDVQ_P [VADDVQ_P_U VADDVQ_P_S])\n+(define_int_iterator VANDQ [VANDQ_U VANDQ_S])\n+(define_int_iterator VBICQ [VBICQ_S VBICQ_U])\n+(define_int_iterator VBRSRQ_N [VBRSRQ_N_U VBRSRQ_N_S])\n+(define_int_iterator VCADDQ_ROT270 [VCADDQ_ROT270_S VCADDQ_ROT270_U])\n+(define_int_iterator VCADDQ_ROT90 [VCADDQ_ROT90_U VCADDQ_ROT90_S])\n+(define_int_iterator VCMPEQQ [VCMPEQQ_U VCMPEQQ_S])\n+(define_int_iterator VCMPEQQ_N [VCMPEQQ_N_S VCMPEQQ_N_U])\n+(define_int_iterator VCMPNEQ_N [VCMPNEQ_N_U VCMPNEQ_N_S])\n+(define_int_iterator VEORQ [VEORQ_U VEORQ_S])\n+(define_int_iterator VHADDQ [VHADDQ_S VHADDQ_U])\n+(define_int_iterator VHADDQ_N [VHADDQ_N_U VHADDQ_N_S])\n+(define_int_iterator VHSUBQ [VHSUBQ_S VHSUBQ_U])\n+(define_int_iterator VHSUBQ_N [VHSUBQ_N_U VHSUBQ_N_S])\n+(define_int_iterator VMAXQ [VMAXQ_U VMAXQ_S])\n+(define_int_iterator VMAXVQ [VMAXVQ_U VMAXVQ_S])\n+(define_int_iterator VMINQ [VMINQ_S VMINQ_U])\n+(define_int_iterator VMINVQ [VMINVQ_U VMINVQ_S])\n+(define_int_iterator VMLADAVQ [VMLADAVQ_U VMLADAVQ_S])\n+(define_int_iterator VMULHQ [VMULHQ_S VMULHQ_U])\n+(define_int_iterator VMULLBQ_INT [VMULLBQ_INT_U VMULLBQ_INT_S])\n+(define_int_iterator VMULLTQ_INT [VMULLTQ_INT_U VMULLTQ_INT_S])\n+(define_int_iterator VMULQ [VMULQ_U VMULQ_S])\n+(define_int_iterator VMULQ_N [VMULQ_N_U VMULQ_N_S])\n+(define_int_iterator VORNQ [VORNQ_U VORNQ_S])\n+(define_int_iterator VORRQ [VORRQ_S VORRQ_U])\n+(define_int_iterator VQADDQ [VQADDQ_U VQADDQ_S])\n+(define_int_iterator VQADDQ_N [VQADDQ_N_S VQADDQ_N_U])\n+(define_int_iterator VQRSHLQ [VQRSHLQ_S VQRSHLQ_U])\n+(define_int_iterator VQRSHLQ_N [VQRSHLQ_N_S VQRSHLQ_N_U])\n+(define_int_iterator VQSHLQ [VQSHLQ_S VQSHLQ_U])\n+(define_int_iterator VQSHLQ_N [VQSHLQ_N_S VQSHLQ_N_U])\n+(define_int_iterator VQSHLQ_R [VQSHLQ_R_U VQSHLQ_R_S])\n+(define_int_iterator VQSUBQ [VQSUBQ_U VQSUBQ_S])\n+(define_int_iterator VQSUBQ_N [VQSUBQ_N_S VQSUBQ_N_U])\n+(define_int_iterator VRHADDQ [VRHADDQ_S VRHADDQ_U])\n+(define_int_iterator VRMULHQ [VRMULHQ_S VRMULHQ_U])\n+(define_int_iterator VRSHLQ [VRSHLQ_S VRSHLQ_U])\n+(define_int_iterator VRSHLQ_N [VRSHLQ_N_U VRSHLQ_N_S])\n+(define_int_iterator VRSHRQ_N [VRSHRQ_N_S VRSHRQ_N_U])\n+(define_int_iterator VSHLQ_N [VSHLQ_N_U VSHLQ_N_S])\n+(define_int_iterator VSHLQ_R [VSHLQ_R_S VSHLQ_R_U])\n+(define_int_iterator VSUBQ [VSUBQ_S VSUBQ_U])\n+(define_int_iterator VSUBQ_N [VSUBQ_N_S VSUBQ_N_U])\n+\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -856,3 +962,1098 @@\n   \"vshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vabdq_s, vabdq_u])\n+;;\n+(define_insn \"mve_vabdq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VABDQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vabd.<supf>%#<V_sz_elem>\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddq_n_s, vaddq_n_u])\n+;;\n+(define_insn \"mve_vaddq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VADDQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vadd.i%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddvaq_s, vaddvaq_u])\n+;;\n+(define_insn \"mve_vaddvaq_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VADDVAQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vaddva.<supf>%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddvq_p_u, vaddvq_p_s])\n+;;\n+(define_insn \"mve_vaddvq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VADDVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddvt.<supf>%#<V_sz_elem>\t%0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vandq_u, vandq_s])\n+;;\n+(define_insn \"mve_vandq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VANDQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vand %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vbicq_s, vbicq_u])\n+;;\n+(define_insn \"mve_vbicq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VBICQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vbic %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vbrsrq_n_u, vbrsrq_n_s])\n+;;\n+(define_insn \"mve_vbrsrq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VBRSRQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vbrsr.%#<V_sz_elem>\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcaddq_rot270_s, vcaddq_rot270_u])\n+;;\n+(define_insn \"mve_vcaddq_rot270_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCADDQ_ROT270))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcaddq_rot90_u, vcaddq_rot90_s])\n+;;\n+(define_insn \"mve_vcaddq_rot90_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCADDQ_ROT90))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpcsq_n_u])\n+;;\n+(define_insn \"mve_vcmpcsq_n_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPCSQ_N_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.u%#<V_sz_elem>\tcs, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpcsq_u])\n+;;\n+(define_insn \"mve_vcmpcsq_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPCSQ_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.u%#<V_sz_elem>\tcs, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpeqq_n_s, vcmpeqq_n_u])\n+;;\n+(define_insn \"mve_vcmpeqq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPEQQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.i%#<V_sz_elem>\teq, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpeqq_u, vcmpeqq_s])\n+;;\n+(define_insn \"mve_vcmpeqq_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPEQQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.i%#<V_sz_elem>\teq, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgeq_n_s])\n+;;\n+(define_insn \"mve_vcmpgeq_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPGEQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tge, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgeq_s])\n+;;\n+(define_insn \"mve_vcmpgeq_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPGEQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tge, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgtq_n_s])\n+;;\n+(define_insn \"mve_vcmpgtq_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPGTQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tgt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpgtq_s])\n+;;\n+(define_insn \"mve_vcmpgtq_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPGTQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tgt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmphiq_n_u])\n+;;\n+(define_insn \"mve_vcmphiq_n_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPHIQ_N_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.u%#<V_sz_elem>\thi, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmphiq_u])\n+;;\n+(define_insn \"mve_vcmphiq_u<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPHIQ_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.u%#<V_sz_elem>\thi, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpleq_n_s])\n+;;\n+(define_insn \"mve_vcmpleq_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPLEQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tle, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpleq_s])\n+;;\n+(define_insn \"mve_vcmpleq_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPLEQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tle, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpltq_n_s])\n+;;\n+(define_insn \"mve_vcmpltq_n_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPLTQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tlt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpltq_s])\n+;;\n+(define_insn \"mve_vcmpltq_s<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPLTQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.s%#<V_sz_elem>\tlt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpneq_n_u, vcmpneq_n_s])\n+;;\n+(define_insn \"mve_vcmpneq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VCMPNEQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.i%#<V_sz_elem>\tne, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [veorq_u, veorq_s])\n+;;\n+(define_insn \"mve_veorq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VEORQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"veor %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhaddq_n_u, vhaddq_n_s])\n+;;\n+(define_insn \"mve_vhaddq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VHADDQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhadd.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhaddq_s, vhaddq_u])\n+;;\n+(define_insn \"mve_vhaddq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VHADDQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhadd.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhcaddq_rot270_s])\n+;;\n+(define_insn \"mve_vhcaddq_rot270_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VHCADDQ_ROT270_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhcadd.s%#<V_sz_elem>\\t%q0, %q1, %q2, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhcaddq_rot90_s])\n+;;\n+(define_insn \"mve_vhcaddq_rot90_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VHCADDQ_ROT90_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhcadd.s%#<V_sz_elem>\\t%q0, %q1, %q2, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhsubq_n_u, vhsubq_n_s])\n+;;\n+(define_insn \"mve_vhsubq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VHSUBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhsub.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vhsubq_s, vhsubq_u])\n+;;\n+(define_insn \"mve_vhsubq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VHSUBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vhsub.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxaq_s])\n+;;\n+(define_insn \"mve_vmaxaq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMAXAQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmaxa.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxavq_s])\n+;;\n+(define_insn \"mve_vmaxavq_s<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMAXAVQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmaxav.s%#<V_sz_elem>\\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxq_u, vmaxq_s])\n+;;\n+(define_insn \"mve_vmaxq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMAXQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmax.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxvq_u, vmaxvq_s])\n+;;\n+(define_insn \"mve_vmaxvq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMAXVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmaxv.<supf>%#<V_sz_elem>\\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminaq_s])\n+;;\n+(define_insn \"mve_vminaq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMINAQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmina.s%#<V_sz_elem>\\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminavq_s])\n+;;\n+(define_insn \"mve_vminavq_s<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMINAVQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vminav.s%#<V_sz_elem>\\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminq_s, vminq_u])\n+;;\n+(define_insn \"mve_vminq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMINQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmin.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vminvq_u, vminvq_s])\n+;;\n+(define_insn \"mve_vminvq_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMINVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vminv.<supf>%#<V_sz_elem>\\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmladavq_u, vmladavq_s])\n+;;\n+(define_insn \"mve_vmladavq_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMLADAVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmladav.<supf>%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmladavxq_s])\n+;;\n+(define_insn \"mve_vmladavxq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMLADAVXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmladavx.s%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsdavq_s])\n+;;\n+(define_insn \"mve_vmlsdavq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMLSDAVQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsdav.s%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsdavxq_s])\n+;;\n+(define_insn \"mve_vmlsdavxq_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMLSDAVXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsdavx.s%#<V_sz_elem>\\t%0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulhq_s, vmulhq_u])\n+;;\n+(define_insn \"mve_vmulhq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMULHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmulh.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmullbq_int_u, vmullbq_int_s])\n+;;\n+(define_insn \"mve_vmullbq_int_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMULLBQ_INT))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmullb.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulltq_int_u, vmulltq_int_s])\n+;;\n+(define_insn \"mve_vmulltq_int_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMULLTQ_INT))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmullt.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulq_n_u, vmulq_n_s])\n+;;\n+(define_insn \"mve_vmulq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VMULQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmul.i%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmulq_u, vmulq_s])\n+;;\n+(define_insn \"mve_vmulq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VMULQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmul.i%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vornq_u, vornq_s])\n+;;\n+(define_insn \"mve_vornq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VORNQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vorn %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vorrq_s, vorrq_u])\n+;;\n+(define_insn \"mve_vorrq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VORRQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vorr %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqaddq_n_s, vqaddq_n_u])\n+;;\n+(define_insn \"mve_vqaddq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQADDQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqadd.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqaddq_u, vqaddq_s])\n+;;\n+(define_insn \"mve_vqaddq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQADDQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqadd.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmulhq_n_s])\n+;;\n+(define_insn \"mve_vqdmulhq_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQDMULHQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmulh.s%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqdmulhq_s])\n+;;\n+(define_insn \"mve_vqdmulhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQDMULHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmulh.s%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmulhq_n_s])\n+;;\n+(define_insn \"mve_vqrdmulhq_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQRDMULHQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmulh.s%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrdmulhq_s])\n+;;\n+(define_insn \"mve_vqrdmulhq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQRDMULHQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrdmulh.s%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrshlq_n_s, vqrshlq_n_u])\n+;;\n+(define_insn \"mve_vqrshlq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VQRSHLQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshl.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrshlq_s, vqrshlq_u])\n+;;\n+(define_insn \"mve_vqrshlq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQRSHLQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshlq_n_s, vqshlq_n_u])\n+;;\n+(define_insn \"mve_vqshlq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VQSHLQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshlq_r_u, vqshlq_r_s])\n+;;\n+(define_insn \"mve_vqshlq_r_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VQSHLQ_R))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshl.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshlq_s, vqshlq_u])\n+;;\n+(define_insn \"mve_vqshlq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQSHLQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshluq_n_s])\n+;;\n+(define_insn \"mve_vqshluq_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"mve_imm_7\" \"Ra\")]\n+\t VQSHLUQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshlu.s%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqsubq_n_s, vqsubq_n_u])\n+;;\n+(define_insn \"mve_vqsubq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VQSUBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqsub.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqsubq_u, vqsubq_s])\n+;;\n+(define_insn \"mve_vqsubq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VQSUBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqsub.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrhaddq_s, vrhaddq_u])\n+;;\n+(define_insn \"mve_vrhaddq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VRHADDQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrhadd.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmulhq_s, vrmulhq_u])\n+;;\n+(define_insn \"mve_vrmulhq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VRMULHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmulh.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrshlq_n_u, vrshlq_n_s])\n+;;\n+(define_insn \"mve_vrshlq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VRSHLQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrshl.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrshlq_s, vrshlq_u])\n+;;\n+(define_insn \"mve_vrshlq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VRSHLQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrshrq_n_s, vrshrq_n_u])\n+;;\n+(define_insn \"mve_vrshrq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"<MVE_pred2>\" \"<MVE_constraint2>\")]\n+\t VRSHRQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrshr.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshlq_n_u, vshlq_n_s])\n+;;\n+(define_insn \"mve_vshlq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VSHLQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshlq_r_s, vshlq_r_u])\n+;;\n+(define_insn \"mve_vshlq_r_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+\t VSHLQ_R))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshl.<supf>%#<V_sz_elem>\\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vsubq_n_s, vsubq_n_u])\n+;;\n+(define_insn \"mve_vsubq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")]\n+\t VSUBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsub.i%#<V_sz_elem>\\t%q0, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vsubq_s, vsubq_u])\n+;;\n+(define_insn \"mve_vsubq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VSUBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsub.i%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "9c9a84b0f6556aeaa41a7ea572de51db6527cc6c", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -35,6 +35,10 @@\n (define_predicate \"mve_imm_16\"\n   (match_test \"satisfies_constraint_Rd (op)\"))\n \n+;; True for immediates in the range of 0 to 7 for MVE.\n+(define_predicate \"mve_imm_7\"\n+  (match_test \"satisfies_constraint_Ra (op)\"))\n+\n ;; True for immediates in the range of 1 to 8 for MVE.\n (define_predicate \"mve_imm_8\"\n   (match_test \"satisfies_constraint_Rb (op)\"))\n@@ -43,6 +47,10 @@\n (define_predicate \"mve_imm_32\"\n   (match_test \"satisfies_constraint_Rf (op)\"))\n \n+;; True if the immediate is one among 1, 2, 4 or 8 for MVE.\n+(define_predicate \"mve_imm_selective_upto_8\"\n+  (match_test \"satisfies_constraint_Rg (op)\"))\n+\n ; Predicate for stack protector guard's address in\n ; stack_protect_combined_set_insn and stack_protect_combined_test_insn patterns\n (define_predicate \"guard_addr_operand\""}, {"sha": "0635e97ce7527b04f14a28ad0764b63d14bb1b19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -1,3 +1,368 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvaq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmphiq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxaq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminaq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_r_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_u8.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "17b45e79e721872fda21c2230f7f1d491f334f95", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vabdq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s16\"  }  } */"}, {"sha": "9776c7c9a1b9a56b98bee1cdc801de3247e57f03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vabdq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s32\"  }  } */"}, {"sha": "9528a80165d66129b3cc33e6e72f1da44217515a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vabdq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.s8\"  }  } */"}, {"sha": "0005623f118b3fd6eac638938a4954475c20266a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vabdq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u16\"  }  } */"}, {"sha": "a89bea1daeb2aac60ad4ac2f9926ff6ae27b0abe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vabdq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u32\"  }  } */"}, {"sha": "d724fee77075b1af1d532938b6cbbfaf93facc89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vabdq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vabdq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd.u8\"  }  } */"}, {"sha": "55091b4fe8070c88b171506edbeb5801672094d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vaddq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */"}, {"sha": "0b83adfff05d9d0dfb823e51bb39dcca88aa9c01", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vaddq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */"}, {"sha": "250807e6a9770f0f51cbfa41db065b30946990db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vaddq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */"}, {"sha": "c0af7e32954984efd761b63449eb8a1c096f3641", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vaddq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */"}, {"sha": "9ad1da02a4026c4397dff823aa5432f8a6384c1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vaddq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */"}, {"sha": "3a36041fb4242ff3110e03ba61ac8d367e0b2b4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vaddq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */"}, {"sha": "b4b00118c68ba5f9dabdb61e66f2737576de4186", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b)\n+{\n+  return vaddvaq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s16\"  }  } */"}, {"sha": "eba7167adcd96d3810763f0e5b6f7381f1386bc1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b)\n+{\n+  return vaddvaq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s32\"  }  } */"}, {"sha": "2471c99cc8fa85f345d99296b39ae743a32d108a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b)\n+{\n+  return vaddvaq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.s8\"  }  } */"}, {"sha": "0d97fd0f2a44486f2f5f9fd5275cd45dbcc6eb67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b)\n+{\n+  return vaddvaq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u16\"  }  } */"}, {"sha": "4e630c348ff0eacbb4769185c9d6e87828493a88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b)\n+{\n+  return vaddvaq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u32\"  }  } */"}, {"sha": "e7c513730cf4d3455289d64f49456ef60bd5b553", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b)\n+{\n+  return vaddvaq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b)\n+{\n+  return vaddvaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddva.u8\"  }  } */"}, {"sha": "b84d0d27570eddd7b3ed271e3f08a0f20b299662", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s16\"  }  } */"}, {"sha": "0983f4e1c871d65decb993846b497894752e534a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s32\"  }  } */"}, {"sha": "aef7f67d5136a0e37f2f6e216d4772bbc6b98c5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.s8\"  }  } */"}, {"sha": "d4c214e33709aff472b442dc199c45ff3f4f44a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u16\"  }  } */"}, {"sha": "604ca6acfaa54bc33b40d2c30d98dad526fea786", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u32\"  }  } */"}, {"sha": "9caeea95314cab55950ac6a1a4131d43553dd4ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vaddvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddvt.u8\"  }  } */"}, {"sha": "ae989dc02dcea17d680f7b20ad370b063c084152", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vandq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "4106cfbf96ad3e94aae08d468c7df9529c85b922", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vandq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "ed78186970953dc66ce6554283d6f96193259879", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vandq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "842b82925fb78f93433c4fd0564dfcf32337c550", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vandq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "3998cf099961e0ab3e9b88ec2a6e404652740a3f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vandq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "45846bc8feafa3beaae6980afd2421f6ce9ba0b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vandq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vandq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\"  }  } */"}, {"sha": "51daf20b14ef311c735499712aa84a2d12cbd3e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vbicq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "2846494c0b52f48f67998b47fbfc91bc4de1ebc6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vbicq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "ac4753cac420a3d9bbc09d9f01b55edd6161a7ff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vbicq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "3bf72ae1bd58de7681099869ed56ceed251d685f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vbicq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "7a816371bcc45792cc4abd9101c2175fa6ba4a4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vbicq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "d834672dfd79db931ab6fe024648b65c97a85430", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vbicq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vbicq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\"  }  } */"}, {"sha": "f8f8263bc086cd7c523dd1ac1bb5747ee4ffece1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b)\n+{\n+  return vbrsrq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */"}, {"sha": "3ad693324be58fd9764dbe182f540a95231f9d31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vbrsrq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */"}, {"sha": "dd40854ed0f977aee723b1061e456457646a90e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b)\n+{\n+  return vbrsrq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.8\"  }  } */"}, {"sha": "227847afc98ff6ab9f183f325536eb0480574a23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b)\n+{\n+  return vbrsrq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.16\"  }  } */"}, {"sha": "5ee194c67059d4e94547ebb04912aea55d66a6b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b)\n+{\n+  return vbrsrq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.32\"  }  } */"}, {"sha": "3b828a92e843cca76f46c0b4e753e4e1789c45ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b)\n+{\n+  return vbrsrq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b)\n+{\n+  return vbrsrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vbrsr.8\"  }  } */"}, {"sha": "c6490ea12a6a7b7756f5b5a4e0820fcbf97c3185", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcaddq_rot270_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */"}, {"sha": "9a5a33873d03a9ce8665b17aca3bf6960166e50d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcaddq_rot270_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */"}, {"sha": "d23a2aa8a1a52b6f5ea5692027683aa5ff679721", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcaddq_rot270_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */"}, {"sha": "c73aff1e84bf7622c351cbc6f86dc6e03ef5a752", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcaddq_rot270_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */"}, {"sha": "b076c567a2391d909dca29e2f8ce9cdcb43ba2fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcaddq_rot270_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */"}, {"sha": "7805b39466c5700f46377d36f35f2a082776c4f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcaddq_rot270_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */"}, {"sha": "4386ca9451bb5f9100114b894b77ae38ec0b8001", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcaddq_rot90_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */"}, {"sha": "5255f4eaee5131932fed6f0e6a2c8b72333a9fb2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcaddq_rot90_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */"}, {"sha": "c7f64ce1d270f70e09eaa997f08a38fcfd56fc30", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcaddq_rot90_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */"}, {"sha": "c1a06d6729fab8f9015589617c0dee60bd20cfcb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcaddq_rot90_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i16\"  }  } */"}, {"sha": "9f612a4a2fc74e7cc5b62335214187a33c14d3b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcaddq_rot90_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i32\"  }  } */"}, {"sha": "e19076b0c3df472a6da3679aec79a915ef666a86", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcaddq_rot90_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcadd.i8\"  }  } */"}, {"sha": "caa2ce435dd78c36370077fa43e67b2b8be13526", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpcsq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */"}, {"sha": "cc3f4d962e22159df7d304cface21abceb42c3b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpcsq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */"}, {"sha": "768b60da73d1040933e84125448c14eb63443f78", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpcsq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */"}, {"sha": "a474ba661c2fa70a22ad14ee3dee16a9675cb4ee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpcsq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */"}, {"sha": "2a7fae5d29a6e431a938d47becbfc752b9681abb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpcsq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */"}, {"sha": "b370a9162c748deb015b5d7cfa979171aad6c7c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpcsq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpcsq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */"}, {"sha": "ec5ed4a11fe208940504a188bb2cbe11d24739ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpeqq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "02262e7a7611866add1a70793007199b12b22de8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpeqq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "ef91aac45c784817799d7e0586a845de94ee98e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpeqq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "4f776cbc3688594da300c5404879668330160926", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpeqq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "ba5ce37fa22a543d1a48e8d50b1ff3a75912e330", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpeqq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "b6ef1d74de66c916ec5fa3d786d1fb88602cbcba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpeqq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "94f6e68038bcac1a26ddc543fc32581dce75e4b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpeqq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "20ebd7f2073a5e0a7fd75e74117e6e062d9cb811", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpeqq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "a893103765753e1ffd7222aacc2d928d0a691568", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpeqq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "ad1c08f4d74a8d4612bb577bde19a1070e71868e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpeqq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "2faa789172072ec3f8e314f4fb5df8af1c0e1406", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpeqq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "742e24f48f64299d97cc4554f5f2b79a0e339279", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpeqq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpeqq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "2b3bb698a79a0cb45e14920002e76b338b0960bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpgeq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "1cfde96acb4b7b608647430abc58b47159f4a1f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpgeq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "269f2e630338e7d015e77ea2b83b3376e7c294bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpgeq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "1423d389f6a8f97a584075279ae215ca8eb99ab7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpgeq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "49b21434550365844accda2172dc34e3815727de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpgeq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "fe0f6023c7df274bf66435cc662dc32e3a8606b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpgeq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpgeq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "a6fdbf7ddfe877df8d12b2fe1a3270676a14b558", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpgtq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "24cb5ec85facf22a5625503311e7056bcd7e309a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpgtq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "a9fc90702ad97c509933d4ccff0f468cdc0535a3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpgtq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "3e1f84f193e771a9cd6b96d1ada314db20a047b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpgtq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "70c8987ec0f6b5726c6f31881cf8628b65c36a0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpgtq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "a7317161adf44cdc73d22bef923351fd327396d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpgtq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpgtq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "98fa9e566a5ddab368c5205854cb584e9a5a87fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vcmphiq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */"}, {"sha": "f3dc5730b9dc914959cbb31b2a1db56ab26a8e7c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vcmphiq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */"}, {"sha": "84aefb3c513298a89040b11b9b88b911e5ff9ed1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vcmphiq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */"}, {"sha": "fda860f57bfb3bc069ff996d7d284e23813c0251", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmphiq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */"}, {"sha": "c0d0f3fe258b2c1e4ebcc123603ee1b1bf626a25", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmphiq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */"}, {"sha": "938abc30e4be3821194f7c79c7f5375f48cc9cc3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmphiq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmphiq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */"}, {"sha": "8a3893659b667da604605bb8be0a1ebc39f2247f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpleq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "e8c489e15ecbc8504047cbfd86626e06dc653ec4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpleq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "0816bbd216f270ec5c2997894a21ccaa51fc7421", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpleq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "80f270f9697b5e9c473ca7a7b449b65484f3ebe8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpleq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "5148d2acdb120fdadfc2d455be647964dca2ae79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpleq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "24f9f054e0e75c58cee2068922bd34b1bcd279d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpleq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpleq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "a2834160685c98421bc611497f860cb680c12184", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpltq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "cc2427cd2643c31623b2049f95c543f4d3532526", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpltq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "5f4859bc2097354165bca0fb188e6145f247e105", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpltq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "c3e3f34ea6269de0d176c25cc8ce5f9885d73753", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpltq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */"}, {"sha": "c8f82fc1f9eadbcd2893ae84cc827e19e9283e99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpltq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */"}, {"sha": "5dbb4f9290fbec64615736bb96ae48892f4f79ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpltq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpltq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */"}, {"sha": "e1d3b182c92eb51ae7c2e7faca85d45d1a4798d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vcmpneq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "538b9d2c09888b3d839f29df21a245988dd29dff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vcmpneq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "741771632fcf79a651b2a71ae77ed3dbe139b345", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vcmpneq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "31eb156c28f37d41a7c3136dc366be200b9825ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpneq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "10c328f3532985b1f098fdd2854846bd5eff391f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpneq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "2433f43b4d5c02688346f141890014d1bb179c99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpneq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "30b7e3aae7e16a3bc9e728899d15b400c5d3832c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return veorq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "ec14090b24a1da9e482e74993c4cae749022d1a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return veorq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "b0e02b1c49641db3d2223fafc139561095c0543a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return veorq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "2985db84e409c32f715f2b6409c0109fd89d3947", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return veorq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "4c1dae1b5d350d75a656421849ac518129910297", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return veorq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "cc64128e258291b89fd2cd7f33b303977f3bd913", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return veorq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return veorq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"veor\"  }  } */"}, {"sha": "75977c4da22972a8e84849cb0a90bde0bac604b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vhaddq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s16\"  }  } */"}, {"sha": "0bfe84deee4447ba2ccdf7c3c0a19adf642aea96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vhaddq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s32\"  }  } */"}, {"sha": "4901b91da77e90f11da249ee35a1f7b45d0f1307", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vhaddq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s8\"  }  } */"}, {"sha": "88b1e2eca5f92319353df2d15ff7709609beabbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vhaddq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u16\"  }  } */"}, {"sha": "ad492e5bae1f5399d0d061d2459653e4d8f03c00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vhaddq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u32\"  }  } */"}, {"sha": "328f09ab51b7f44bf01d05b6c75c4e7ee6341945", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vhaddq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vhaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u8\"  }  } */"}, {"sha": "fe7b3051a42ec2ba9e856e73b2ad227cd571d6d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vhaddq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s16\"  }  } */"}, {"sha": "ceda8368a9180b836ff7a494b55cc166891ff7c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vhaddq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s32\"  }  } */"}, {"sha": "e117f0cf4ab70849957dbf867332190a5d44c6c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vhaddq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.s8\"  }  } */"}, {"sha": "003e59bc67fcfea6d05032d57f967f69c588961b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vhaddq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u16\"  }  } */"}, {"sha": "f91044dedd7746e7fd91ce12b0d77d003b127c4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vhaddq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u32\"  }  } */"}, {"sha": "975ffa59e77f6211f20e86f4289305e89961485d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vhaddq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vhaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhadd.u8\"  }  } */"}, {"sha": "cea5485f310c68cdcea9012ab244df131817958f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vhcaddq_rot270_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vhcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s16\"  }  } */"}, {"sha": "2e2e3d927efd16948547354cfb1e6a3f63760787", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vhcaddq_rot270_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vhcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s32\"  }  } */"}, {"sha": "6788943ef069f82098dfb95855c852f782225846", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vhcaddq_rot270_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vhcaddq_rot270 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s8\"  }  } */"}, {"sha": "637b2cf2ac3bd66d815f1dfd1e77247a893baa63", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vhcaddq_rot90_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vhcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s16\"  }  } */"}, {"sha": "52358be3cf191cf4ca844fe0394d2a69081f16ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vhcaddq_rot90_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vhcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s32\"  }  } */"}, {"sha": "5db1e5476624544461ee38e9916576536f251de5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vhcaddq_rot90_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vhcaddq_rot90 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhcadd.s8\"  }  } */"}, {"sha": "723c27ae4dd04b352be8f0c7c570a87e4206ec81", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vhsubq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */"}, {"sha": "2d2b13db3e96bac94d023910ac3c2e64a4b0e776", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vhsubq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */"}, {"sha": "4180563ab650c29241d67e506b74675dabf642d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vhsubq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */"}, {"sha": "93e1395b1e7bfd903e56cd942e61607111d84ae0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vhsubq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */"}, {"sha": "06dddd4ef36758397f3009d4370e037140568bab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vhsubq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */"}, {"sha": "ea81c0291359a05459892215ac7537af96e1b9bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vhsubq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vhsubq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */"}, {"sha": "89e6163d270417f0c90abded6862973a28949ed4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vhsubq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */"}, {"sha": "aac6752e00d6825b85546743ab84ea8846e6d7fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vhsubq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */"}, {"sha": "e7008e4b8c48bb94ecad21f4f400738223f29163", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vhsubq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */"}, {"sha": "c2a5e5bb9f539366ca4f44f1f58d950e4a891070", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vhsubq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */"}, {"sha": "634e2cbe075fa414c57ad945694eb8eba10f5637", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vhsubq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */"}, {"sha": "9a95fb6251ef7a41c25f0595280ba3731ab37309", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vhsubq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vhsubq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */"}, {"sha": "36a6626b515ca632357716c190e85c33701157cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b)\n+{\n+  return vmaxaq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b)\n+{\n+  return vmaxaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s16\"  }  } */"}, {"sha": "935f848b1bbf5d6564ec4f106bd7b6226a7e8ad3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b)\n+{\n+  return vmaxaq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b)\n+{\n+  return vmaxaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s32\"  }  } */"}, {"sha": "29a9297bd8fe1223cf8d8935dcbf90ff891d337a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b)\n+{\n+  return vmaxaq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b)\n+{\n+  return vmaxaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxa.s8\"  }  } */"}, {"sha": "acbf404275771eca1081067739579a86563b1cea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, int16x8_t b)\n+{\n+  return vmaxavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, int16x8_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s16\"  }  } */"}, {"sha": "a98318b88041291e9878ba7e2af88097f2ed6dd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b)\n+{\n+  return vmaxavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s32\"  }  } */"}, {"sha": "7007be26bd245fc0319663e9e877c77a15225a79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, int8x16_t b)\n+{\n+  return vmaxavq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, int8x16_t b)\n+{\n+  return vmaxavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxav.s8\"  }  } */"}, {"sha": "8e253285a0a65d3fb6c3b02e83da72c30ea04f45", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmaxq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s16\"  }  } */"}, {"sha": "732f68b608cb8252533dc64b16a16c6c70d5fb26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmaxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s32\"  }  } */"}, {"sha": "824b48d6ed3d0fecb9ba6b61591ba6ee7b96fbc8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmaxq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.s8\"  }  } */"}, {"sha": "07cee0b46b32c520638c9a3656d80d84964ca008", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmaxq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u16\"  }  } */"}, {"sha": "d12df3059ba7a382329740dcfb2e08d84e995f1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmaxq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u32\"  }  } */"}, {"sha": "b78489c52c6b3fd30d634276cf909327d8e3d3cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmaxq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmaxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmax.u8\"  }  } */"}, {"sha": "e52986859bf07d5395457c79b5ec2523c36c5e26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16_t\n+foo (int16_t a, int16x8_t b)\n+{\n+  return vmaxvq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s16\"  }  } */\n+\n+int16_t\n+foo1 (int16_t a, int16x8_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s16\"  }  } */"}, {"sha": "d4413e8a913053ea07ad9426deab4fbbfc42fcb4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b)\n+{\n+  return vmaxvq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s32\"  }  } */"}, {"sha": "df0a4524d0048795d598cbc45ac7234f4c174346", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8_t\n+foo (int8_t a, int8x16_t b)\n+{\n+  return vmaxvq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s8\"  }  } */\n+\n+int8_t\n+foo1 (int8_t a, int8x16_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.s8\"  }  } */"}, {"sha": "9936b28436537e3e75687eb2c909a11232fb86c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, uint16x8_t b)\n+{\n+  return vmaxvq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, uint16x8_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u16\"  }  } */"}, {"sha": "3a93d1fb596308d218e8478259269df654661dba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b)\n+{\n+  return vmaxvq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u32\"  }  } */"}, {"sha": "208e2a32fbcdec60c461db48835cdba21ee30c2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, uint8x16_t b)\n+{\n+  return vmaxvq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, uint8x16_t b)\n+{\n+  return vmaxvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxv.u8\"  }  } */"}, {"sha": "d63314e025a4f80b30983ba7a78c83cf154c52f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b)\n+{\n+  return vminaq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b)\n+{\n+  return vminaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s16\"  }  } */"}, {"sha": "9c0da8401d5fb3fd5d201c330a445be0b4340e4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b)\n+{\n+  return vminaq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b)\n+{\n+  return vminaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s32\"  }  } */"}, {"sha": "775468867090f96a4eff1ccb5089cbd1b8e431b6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b)\n+{\n+  return vminaq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b)\n+{\n+  return vminaq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmina.s8\"  }  } */"}, {"sha": "3fde0f699602215f4e5abf68ffa9b5ce47e7e1ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, int16x8_t b)\n+{\n+  return vminavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, int16x8_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s16\"  }  } */"}, {"sha": "d11604f5ac5b4700579e3d2fd59941a1944d66db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b)\n+{\n+  return vminavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s32\"  }  } */"}, {"sha": "be4485d3249ed49549fa3b37e3d937368d36e761", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, int8x16_t b)\n+{\n+  return vminavq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, int8x16_t b)\n+{\n+  return vminavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminav.s8\"  }  } */"}, {"sha": "c3a6d1b727ab84165a420becf3e0ff22d53baec7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vminq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s16\"  }  } */"}, {"sha": "9f53f043054216163a52740f2fca46b697f1da6d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vminq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s32\"  }  } */"}, {"sha": "7b0a0774c4ca64305d6cb87c56c3932888f8a922", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vminq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.s8\"  }  } */"}, {"sha": "82ace41e6b4e64fbc751fed68156db0456117d03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vminq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u16\"  }  } */"}, {"sha": "7649470cd47067cc0392d3689f5feeba33fafb3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vminq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u32\"  }  } */"}, {"sha": "e2e27c902eb2d2a00a33b779b62d39675617c3cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vminq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vminq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmin.u8\"  }  } */"}, {"sha": "3c3ccd47d650ca0dbb4374f25223bfe6a75e7479", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16_t\n+foo (int16_t a, int16x8_t b)\n+{\n+  return vminvq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s16\"  }  } */\n+\n+int16_t\n+foo1 (int16_t a, int16x8_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s16\"  }  } */"}, {"sha": "0d3282086821a9223ba427610d526a4eec829830", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b)\n+{\n+  return vminvq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s32\"  }  } */"}, {"sha": "bad7e3f2253bae991f2d5dc73c13af7566c44ff8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8_t\n+foo (int8_t a, int8x16_t b)\n+{\n+  return vminvq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s8\"  }  } */\n+\n+int8_t\n+foo1 (int8_t a, int8x16_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.s8\"  }  } */"}, {"sha": "bae99afbcb97690dc1d323451341cd323970d198", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16_t a, uint16x8_t b)\n+{\n+  return vminvq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16_t a, uint16x8_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u16\"  }  } */"}, {"sha": "b706203d2753df5ac693d3f96ce9115af1a67e52", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b)\n+{\n+  return vminvq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u32\"  }  } */"}, {"sha": "f25d32419e7f11a7b602d02a6c7987f97998b5c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8_t a, uint8x16_t b)\n+{\n+  return vminvq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8_t a, uint8x16_t b)\n+{\n+  return vminvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vminv.u8\"  }  } */"}, {"sha": "9e7a8ff1df055b7e99cf8aeeb0579360548c85d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmladavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s16\"  }  } */"}, {"sha": "a7b0c5bbb29253bc5a9c7f6ca2e9e860a87638f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmladavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s32\"  }  } */"}, {"sha": "17ccc3c278a613f6d38a877896a8d3948f3363c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmladavq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.s8\"  }  } */"}, {"sha": "cf7e011511da66e6992f3c37fb39a50bbf0d6c82", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmladavq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u16\"  }  } */"}, {"sha": "0fd673f671195fdbb91f46627a2cd7fa5fa9b368", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmladavq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u32\"  }  } */"}, {"sha": "267d8ed9c3e545e2ad875669926565927d3c7895", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmladavq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmladavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladav.u8\"  }  } */"}, {"sha": "26c4978ccba8c9fa36a7149e24fcfeb81959ff83", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmladavxq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmladavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s16\"  }  } */"}, {"sha": "c27689e847365b6f1e5a623cb5ac1b38733ef182", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmladavxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmladavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s32\"  }  } */"}, {"sha": "c586530bdfb5bc165fdad12d5f1ee314e454f5bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavxq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmladavxq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmladavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavx.s8\"  }  } */"}, {"sha": "17712c7eedf5d4e3f771ae99270db0740f287dd9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsdavq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsdavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s16\"  }  } */"}, {"sha": "e8d3797b46c39ed3cea3600bbbbfd062330cc3c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsdavq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsdavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s32\"  }  } */"}, {"sha": "6d42b895671b0f7f4393d5caee7a7ffff8d67858", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmlsdavq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmlsdavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdav.s8\"  }  } */"}, {"sha": "8fa2995c288ca5ddf139c7b9e77208645c9cc848", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsdavxq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s16\"  }  } */\n+\n+int32_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmlsdavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s16\"  }  } */"}, {"sha": "d284075e8fb677b7c486a702325ea394c2c34b24", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsdavxq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmlsdavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s32\"  }  } */"}, {"sha": "8dcaa94639ddf9f2f3cad6e857914977b59d208a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavxq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavxq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmlsdavxq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s8\"  }  } */\n+\n+int32_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmlsdavxq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavx.s8\"  }  } */"}, {"sha": "4fd4d098702871869cfcbff47cbaa2c8e9466b5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmulhq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s16\"  }  } */"}, {"sha": "636e90e8a058eb0dcb2f9be06f3ae4cc3f4c6253", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmulhq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s32\"  }  } */"}, {"sha": "b894e6e804cbcf0d15edb5a5e8f51ea62d0e8221", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmulhq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.s8\"  }  } */"}, {"sha": "d985f55f2738f694b00e18653f4c143ecd924b3e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulhq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u16\"  }  } */"}, {"sha": "ab81b7c6d2e566059ebb5790282cfafb11582538", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulhq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u32\"  }  } */"}, {"sha": "b193f699c2992e8b5824aa26f30545028f221c7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulhq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmulh.u8\"  }  } */"}, {"sha": "f08143c59026a6852ad5848ae7cd794268c0f21e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmullbq_int_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s16\"  }  } */"}, {"sha": "be3e424f870ea0f2f645389f5f07f7943393206d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmullbq_int_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s32\"  }  } */"}, {"sha": "3c9f38c10764da27b7e64ce7d82123acc0fa030a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmullbq_int_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.s8\"  }  } */"}, {"sha": "1af9ae7382086387e0c55446b34f0634656241ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmullbq_int_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u16\"  }  } */"}, {"sha": "938d0002f9213fcf41e6a0c88e0488b6ba4df6c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmullbq_int_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u32\"  }  } */"}, {"sha": "5ea19ee6956df8cdd30b3f35029f1d22d0b44bcf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmullbq_int_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmullbq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullb.u8\"  }  } */"}, {"sha": "19033a829e0d406076d12385463874cebbcf8fda", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmulltq_int_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s16\"  }  } */"}, {"sha": "f7d6fa61dbaea50a4a980595017ad12b36407bd1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmulltq_int_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s32\"  }  } */"}, {"sha": "dab3ef195e1b359dc3d71f133161724ef3b5b224", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmulltq_int_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.s8\"  }  } */"}, {"sha": "1f0d58759e612abeeda186e009b949176a4e0075", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulltq_int_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u16\"  }  } */"}, {"sha": "71fa3be4db226cb2821d8816d60e7e91b1581ed7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulltq_int_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u32\"  }  } */"}, {"sha": "8ca4abe33a9d36a4fc91767a1cc01dfdee63b8d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulltq_int_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulltq_int (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmullt.u8\"  }  } */"}, {"sha": "b83d7fe44550c70c72411fc952e75314b0a225db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vmulq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */"}, {"sha": "5324c1627c3b97260263503a040a0857a4e582d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vmulq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */"}, {"sha": "b0c6a31eea4ba8b49fe87c44d5afb30298e3f316", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vmulq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */"}, {"sha": "8b4848d07124ce904309426d848221335e68af40", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vmulq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */"}, {"sha": "ff1754cde2ab06a925cfc0896395650629e47dde", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vmulq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */"}, {"sha": "f68b20878bcda99ed45fe37e0d3435842823c8be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vmulq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vmulq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */"}, {"sha": "6fd2651bd963bae23dccd327571386f87c7bee3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vmulq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */"}, {"sha": "e286ed5ad0997804bcf925209ef48c29b401c988", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vmulq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */"}, {"sha": "7c87b3ad12e75052bb47a4c4ab66e64e596ad70a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vmulq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */"}, {"sha": "1cdbbd58844f547a161e83f9efdbbb20a7a798c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i16\"  }  } */"}, {"sha": "d042781372998dc6df1912b3fa8b84631002fbb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i32\"  }  } */"}, {"sha": "33df8f1ca3c7cf778f35888f8d1fd67548dff7e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vmulq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmul.i8\"  }  } */"}, {"sha": "c291a8ca3515c249a9ad8e41bb06df0106717753", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vornq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "066958d2825df755dc94e99f3fa8f210b5d946f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vornq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "4a773a31559e6820fbdf7ea37d35cc976e95fcad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vornq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "ebcf3dd21415be686a5ecd844bc75876c2de5630", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vornq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "742b7ae70e38f18935c1528bac2444d6d5226b7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vornq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "ccd699a2b8dd64e08e83e2e56b96d210c4bde681", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vornq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vornq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorn\"  }  } */"}, {"sha": "60b270067aab96f2076e92bfc9bf56daaf35a777", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vorrq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "d8053ced013173490b0654aeaf52633436ef3dbb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vorrq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "4e7a69a7ecf582a1d764298ac2ac410014d004c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vorrq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "73225bf3d518fab55065c139494efe62530decd8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vorrq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "98753e6333f617f51c4fad18f9da270c903891e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vorrq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "e2e1cf98b4d480e696eb666ee0d5acb7ee543e38", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vorrq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vorrq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vorr\"  }  } */"}, {"sha": "1bf77bcbed2a5e8e672053ab5f62effb93666e8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vqaddq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */"}, {"sha": "8dd65429c663679ac730f38761a215e25552bc00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqaddq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */"}, {"sha": "67cc654c3a805121c634963cbe9b288dd6534ed1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vqaddq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */"}, {"sha": "0ab0065252fee5ba1395653043b3620a19b78a01", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b)\n+{\n+  return vqaddq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */"}, {"sha": "35ce4ebcfe59cc13e1ca255c62c4347c1db2806e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b)\n+{\n+  return vqaddq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */"}, {"sha": "f747a7c53e44131728679b99466bb1db7be9de7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b)\n+{\n+  return vqaddq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b)\n+{\n+  return vqaddq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */"}, {"sha": "64efd37bf47eb2b180ad7024b5bde26c5abfb64c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqaddq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s16\"  }  } */"}, {"sha": "bd1c1bd91d561192d51fdd694a54065366a9cb6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqaddq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s32\"  }  } */"}, {"sha": "9e5e4c526602741d5996130fed545e0059a55645", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vqaddq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.s8\"  }  } */"}, {"sha": "3ee5ff1c65d1c28b3675a1530a01db65eec2a6d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vqaddq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u16\"  }  } */"}, {"sha": "571433f9c78307a7f67589b0ff5a09c2b2af2e64", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vqaddq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u32\"  }  } */"}, {"sha": "cba127e7f28abc45254ef697f0a1b33fcc06ef18", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vqaddq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vqaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqadd.u8\"  }  } */"}, {"sha": "e5adac29713adf333f9df7af2027d99e5a2ed4b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vqdmulhq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vqdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s16\"  }  } */"}, {"sha": "965bbd8ac2edc337c6962772c6df00b06dba77ca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqdmulhq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s32\"  }  } */"}, {"sha": "60d3517157ec8cd8bdc0376918fd8dbb9f068bc0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vqdmulhq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vqdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s8\"  }  } */"}, {"sha": "1a24bfd2add7a2ceaa521be52056a6183afd80f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmulhq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s16\"  }  } */"}, {"sha": "83b74af314e0100dad931886b42211f815d02dff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmulhq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s32\"  }  } */"}, {"sha": "62170b016ef14b73ccb57de5da87838bf31885bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vqdmulhq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vqdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmulh.s8\"  }  } */"}, {"sha": "fdeb2c8590f933954dc7279ceec957d9972bbebb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b)\n+{\n+  return vqrdmulhq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b)\n+{\n+  return vqrdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */"}, {"sha": "825ef081e7a6d0831afbd1c045ae031b38a23723", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqrdmulhq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqrdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */"}, {"sha": "43c293239a3197b8ef766409a9907894a8830734", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b)\n+{\n+  return vqrdmulhq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b)\n+{\n+  return vqrdmulhq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */"}, {"sha": "7a7d5e258c11a75e16be0506b6cb461442484747", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmulhq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */"}, {"sha": "16a2001cfe157c831974ebd9f92069279fa969df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmulhq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */"}, {"sha": "3350abde39e81b3cb37dadddc95977956c3b6c03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmulhq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vqrdmulhq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */"}, {"sha": "c4f7a2de7605166b5dd6603fdcb2f91544502ca8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b)\n+{\n+  return vqrshlq_n_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s16\"  }  } */"}, {"sha": "8478efa3d3e0a01bc4e03a6fcf84f52e66fc47b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqrshlq_n_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s32\"  }  } */"}, {"sha": "af40991864aabd42effd370c2a75208fe89b8b51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b)\n+{\n+  return vqrshlq_n_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s8\"  }  } */"}, {"sha": "20fd1bcd73a9e0b3a657fc53d258f8630aad850f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b)\n+{\n+  return vqrshlq_n_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u16\"  }  } */"}, {"sha": "e235c189def5643355dac49b059fd074c5f97f73", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b)\n+{\n+  return vqrshlq_n_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u32\"  }  } */"}, {"sha": "ecd4a5a8dfa2912e4b04fe4c27570b0143c4f18d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b)\n+{\n+  return vqrshlq_n_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b)\n+{\n+  return vqrshlq_n (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u8\"  }  } */"}, {"sha": "03e9bbedb050b6ffa58caee787607bfa4ec0be2d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqrshlq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s16\"  }  } */"}, {"sha": "6f0cf5496a8d9b74c0ab14bdfc090fcaa00ac0d8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqrshlq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s32\"  }  } */"}, {"sha": "451607ee086d116b75905050a435f8e954ffc126", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vqrshlq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.s8\"  }  } */"}, {"sha": "f59823fc0253e5c945a02caf980e4bc8da91f6b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b)\n+{\n+  return vqrshlq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u16\"  }  } */"}, {"sha": "d3744db5e7d12eb47df3423ae598ba31e709dadb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b)\n+{\n+  return vqrshlq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u32\"  }  } */"}, {"sha": "a3e8da39be9e4db09633bfec48bc7d4cd81b5e54", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b)\n+{\n+  return vqrshlq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b)\n+{\n+  return vqrshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshl.u8\"  }  } */"}, {"sha": "0880cb39c4970d3371ff4929aeb587287ab2f9c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vqshlq_n_s16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */"}, {"sha": "3a56f35371c0abb38652e292bee3e311a4029bd2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vqshlq_n_s32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */"}, {"sha": "28f384c53a63344f32b5e40f967adb9a0c8f9e71", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vqshlq_n_s8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */"}, {"sha": "8beb722661d0bb88526d499fdca8b161f8437b79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vqshlq_n_u16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */"}, {"sha": "ef616dce85d9cff76ba16339b92fcdd43470b09f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vqshlq_n_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */"}, {"sha": "a85ef65a1012e2464c966510704414f85b6a87df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_n_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+  return vqshlq_n_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+  return vqshlq_n (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */"}, {"sha": "46a02f13bddd18701ea2be5b058614a15ad15cc8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b)\n+{\n+  return vqshlq_r_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */"}, {"sha": "e53f613b8c0a0fcf7a21168ae28e7cc7cf7bafd3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b)\n+{\n+  return vqshlq_r_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */"}, {"sha": "1cbd5d6f8330267769b999ff9179fedcfff423d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b)\n+{\n+  return vqshlq_r_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */"}, {"sha": "3503245b137792671acef4b71aa0d0d076eb36f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b)\n+{\n+  return vqshlq_r_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */"}, {"sha": "9d3dbcd11b8088318b558d65f64ae50a4222ddf6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b)\n+{\n+  return vqshlq_r_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */"}, {"sha": "4466e9e566b2d3bfddea465a692d44dc3f50dfc5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_r_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_r_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b)\n+{\n+  return vqshlq_r_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b)\n+{\n+  return vqshlq_r (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */"}, {"sha": "867e7e27505a570313b5265572597e5dd0624e3d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vqshlq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s16\"  }  } */"}, {"sha": "121debf6a971eb33cacc47435d3e69a0dacf9c04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vqshlq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s32\"  }  } */"}, {"sha": "cfcb38f28f18f6687b5f462171c1f655fd0ea071", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_s8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vqshlq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.s8\"  }  } */"}, {"sha": "43b53d0ba0fb9f72a45b9faf5dd4fce1e707390d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b)\n+{\n+  return vqshlq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u16\"  }  } */"}, {"sha": "af63eeb8ebd7ab9d62b9705e12c2cef649353799", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b)\n+{\n+  return vqshlq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u32\"  }  } */"}, {"sha": "691e7be380ef1920cdd9b90e255b214a9470d15d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_u8.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b)\n+{\n+  return vqshlq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b)\n+{\n+  return vqshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshl.u8\"  }  } */"}, {"sha": "79418d9e78689b5f0e25bef8a4885df08b646415", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s16.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (int16x8_t a)\n+{\n+  return vqshluq_n_s16 (a, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshlu.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vqshluq_n (a, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshlu.s16\"  }  } */"}, {"sha": "10e8fa4dea816b7e220a3c55c3767ce283c10596", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33203b4c27d09b22b6cb4cc90970867eba2cda3f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_n_s32.c?ref=33203b4c27d09b22b6cb4cc90970867eba2cda3f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (int32x4_t a)\n+{\n+  return vqshluq_n_s32 (a, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshlu.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vqshluq_n (a, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshlu.s32\"  }  } */"}]}