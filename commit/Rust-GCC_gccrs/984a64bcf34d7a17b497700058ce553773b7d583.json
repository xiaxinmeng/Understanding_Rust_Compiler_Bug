{"sha": "984a64bcf34d7a17b497700058ce553773b7d583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0YTY0YmNmMzRkN2ExN2I0OTc3MDAwNThjZTU1Mzc3M2I3ZDU4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:57:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:57:23Z"}, "message": "[multiple changes]\n\n2005-02-09  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Add to the gnatpp section the paragraph describing\n\tthe difference between compact and incompact layout and add the record\n\trepresentation clause to the example illustrating different layouts.\n\tAdd the description of '-A5' gnatpp option (\"align 'AT' keywords in\n\tcomponent clauses\").\n\n2005-02-09  Florian Villoing  <villoing@adacore.com>\n\n\t* gnat_ugn.texi: Fix typos.\n\tUse @command to display 'gcc', 'gnatbind', etc. insted of @code or\n\t@file.\n\tMake proper use of @ref, @xref and @pxref to avoid duplication of \"see\"\n\tin the generated documentation.\n\n2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Remove all mentions of FSU threads, which are no\n\tlonger supported.\n\tUpdate linker wrapper when linking with non GNU C++.\n\n2005-02-09  Pascal Obry  <obry@adacore.com>\n\n\t* gnat_ugn.texi:\n\tDocument the procedure to debug the DllMain routine on Windows.\n\tAdd note about -funwind-tables and mixed Ada and C/C++ programming in\n\tZCX mode.\n\tDocument new BIND qualifer /RETURN_CODES=VMS.\n\n2005-02-09  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Wordsmithing of \"GNAT and Libraries\" chapter\n\tEdited gnatmetric chapter\n\n2005-02-09  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi:\n\tChanges to document new wide wide character support\n\tFor AI-285\n\tUpdate documentation on Normalize_Scalars and Initialize_Scalars\n\n2005-02-09  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop-mingw.adb, s-soflin.ads: Minor reformatting.\n\n2005-02-09  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-osinte-vxworks.ads (taskPriorityGet): Add this function (imported\n\tfrom the VxWorks kernel) that is needed for getting the active\n\tpriority of the different tasks.\n\n\t* s-atacco.ads, s-atacco.adb (Nothing): Remove this dummy procedure.\n\tUse a pragma Elaborate_Body in the spec file instead.\n\tNoticed by code reading.\n\n2005-02-09  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_util.ads: Minor correction in comment.\n\n2005-02-09  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taprop.ads (Initialize): Update comments. Remove pragma Inline,\n\tsince this procedure is now too complex to be worth inlining.\n\nFrom-SVN: r94826", "tree": {"sha": "836d2cbbc09ee263e60b69f80bcfc2da107d32e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836d2cbbc09ee263e60b69f80bcfc2da107d32e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/984a64bcf34d7a17b497700058ce553773b7d583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984a64bcf34d7a17b497700058ce553773b7d583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984a64bcf34d7a17b497700058ce553773b7d583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984a64bcf34d7a17b497700058ce553773b7d583/comments", "author": null, "committer": null, "parents": [{"sha": "448f26107e8e11cb4ff0c24e53c9c96a2cc14042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448f26107e8e11cb4ff0c24e53c9c96a2cc14042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448f26107e8e11cb4ff0c24e53c9c96a2cc14042"}], "stats": {"total": 1956, "additions": 1162, "deletions": 794}, "files": [{"sha": "f75038cbdc5a670b589c5e59c7453f37223af18b", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -262,9 +262,9 @@ package Exp_Util is\n    --  copy of the subexpression, and returns it. This is intended for use\n    --  when the expansion of an expression needs to repeat part of it. For\n    --  example, replacing a**2 by a*a requires two references to a which\n-   --  may be a complex subexpression. Duplicate_Subexpression guarantees\n-   --  not to duplicate side effects. If necessary, it generates actions\n-   --  to save the expression value in a temporary, inserting these actions\n+   --  may be a complex subexpression. Duplicate_Subexpr guarantees not\n+   --  to duplicate side effects. If necessary, it generates actions to\n+   --  save the expression value in a temporary, inserting these actions\n    --  into the tree using Insert_Actions with Exp as the insertion location.\n    --  The original expression and the returned result then become references\n    --  to this saved value. Exp must be analyzed on entry. On return, Exp\n@@ -349,7 +349,7 @@ package Exp_Util is\n    --  Force the evaluation of the expression right away. Similar behavior\n    --  to Remove_Side_Effects when Variable_Ref is set to TRUE. That is to\n    --  say, it removes the side-effects and capture the values of the\n-   --  variables. Remove_Side_effects guarantees that multiple evaluations\n+   --  variables. Remove_Side_Effects guarantees that multiple evaluations\n    --  of the same expression won't generate multiple side effects, whereas\n    --  Force_Evaluation further guarantees that all evaluations will yield\n    --  the same result."}, {"sha": "ba11f6a71f99687b83ff21907178e6c81c8641d6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 378, "deletions": 38, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -248,6 +248,7 @@ The Implementation of Standard I/O\n * Sequential_IO::\n * Text_IO::\n * Wide_Text_IO::\n+* Wide_Wide_Text_IO::\n * Stream_IO::\n * Shared Files::\n * Open Modes::\n@@ -259,6 +260,8 @@ The GNAT Library\n * Ada.Characters.Latin_9 (a-chlat9.ads)::\n * Ada.Characters.Wide_Latin_1 (a-cwila1.ads)::\n * Ada.Characters.Wide_Latin_9 (a-cwila9.ads)::\n+* Ada.Characters.Wide_Wide_Latin_1 (a-czila1.ads)::\n+* Ada.Characters.Wide_Wide_Latin_9 (a-czila9.ads)::\n * Ada.Command_Line.Remove (a-colire.ads)::\n * Ada.Command_Line.Environment (a-colien.ads)::\n * Ada.Direct_IO.C_Streams (a-diocst.ads)::\n@@ -268,8 +271,10 @@ The GNAT Library\n * Ada.Streams.Stream_IO.C_Streams (a-ssicst.ads)::\n * Ada.Strings.Unbounded.Text_IO (a-suteio.ads)::\n * Ada.Strings.Wide_Unbounded.Wide_Text_IO (a-swuwti.ads)::\n+* Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO (a-szuzti.ads)::\n * Ada.Text_IO.C_Streams (a-tiocst.ads)::\n * Ada.Wide_Text_IO.C_Streams (a-wtcstr.ads)::\n+* Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)::\n * GNAT.Array_Split (g-arrspl.ads)::\n * GNAT.AWK (g-awk.ads)::\n * GNAT.Bounded_Buffers (g-boubuf.ads)::\n@@ -332,6 +337,7 @@ The GNAT Library\n * GNAT.Traceback (g-traceb.ads)::\n * GNAT.Traceback.Symbolic (g-trasym.ads)::\n * GNAT.Wide_String_Split (g-wistsp.ads)::\n+* GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n * Interfaces.CPP (i-cpp.ads)::\n@@ -366,6 +372,11 @@ Wide_Text_IO\n * Wide_Text_IO Stream Pointer Positioning::\n * Wide_Text_IO Reading and Writing Non-Regular Files::\n \n+Wide_Wide_Text_IO\n+\n+* Wide_Wide_Text_IO Stream Pointer Positioning::\n+* Wide_Wide_Text_IO Reading and Writing Non-Regular Files::\n+\n Interfacing to Other Languages\n \n * Interfacing to C::\n@@ -2250,9 +2261,13 @@ as will any declaration of a scalar variable.  For composite variables,\n whether the variable is initialized may also depend on whether the package\n in which the type of the variable is declared is compiled with the pragma.\n \n-The other important difference is that there is control over the value used\n-for initializing scalar objects.  At bind time, you can select whether to\n-initialize with invalid values (like Normalize_Scalars), or with high or\n+The other important difference is that you can control the value used\n+for initializing scalar objects.  At bind time, you can select several\n+options for initialization. You can\n+initialize with invalid values (similar to Normalize_Scalars, though for\n+Initialize_Scalars it is not always possible to determine the invalid\n+values in complex cases like signed component fields with non-standard\n+sizes). You can also initialize with high or\n low values, or with a specified bit pattern.  See the users guide for binder\n options for specifying these cases.\n \n@@ -2263,6 +2278,10 @@ behavior depends on the choice.  Of course the behavior should not change,\n and if it does, then most likely you have an erroneous reference to an\n uninitialized value.\n \n+It is even possible to change the value at execution time eliminating even\n+the need to rebind with a different switch using an environment variable.\n+See the GNAT users guide for details.\n+\n Note that pragma @code{Initialize_Scalars} is particularly useful in\n conjunction with the enhanced validity checking that is now provided\n in GNAT, which checks for invalid values under more conditions.\n@@ -2730,45 +2749,60 @@ are as follows:\n @item Standard.Character\n @noindent\n Objects whose root type is Standard.Character are initialized to\n-Character'Last.  This will be out of range of the subtype only if\n-the subtype range excludes this value.\n+Character'Last unless the subtype range excludes NUL (in which case\n+NUL is used). This choice will always generate an invalid value if\n+one exists.\n \n @item Standard.Wide_Character\n @noindent\n Objects whose root type is Standard.Wide_Character are initialized to\n-Wide_Character'Last.  This will be out of range of the subtype only if\n-the subtype range excludes this value.\n+Wide_Character'Last unless the subtype range excludes NUL (in which case\n+NUL is used). This choice will always generate an invalid value if\n+one exists.\n \n-@item Integer types\n+@item Standard.Wide_Wide_Character\n @noindent\n-Objects of an integer type are initialized to base_type'First, where\n-base_type is the base type of the object type.  This will be out of range\n-of the subtype only if the subtype range excludes this value.  For example,\n-if you declare the subtype:\n-\n-@smallexample @c ada\n-subtype Ityp is integer range 1 .. 10;\n-@end smallexample\n+Objects whose root type is Standard.Wide_Wide_Character are initialized to\n+the invalid value 16#FFFF_FFFF# unless the subtype range excludes NUL (in\n+which case NUL is used). This choice will always generate an invalid value if\n+one exists.\n \n+@item Integer types\n @noindent\n-then objects of type x will be initialized to Integer'First, a negative\n-number that is certainly outside the range of subtype @code{Ityp}.\n-\n-@item Real types\n-Objects of all real types (fixed and floating) are initialized to\n-base_type'First, where base_Type is the base type of the object type.\n-This will be out of range of the subtype only if the subtype range\n-excludes this value.\n+Objects of an integer type are treated differently depending on whether\n+negative values are present in the subtype. If no negative values are\n+present, then all one bits is used as the initial value except in the\n+special case where zero is excluded from the subtype, in which case\n+all zero bits are used. This choice will always generate an invalid\n+value if one exists.\n+\n+For subtypes with negative values present, the largest negative number\n+is used, except in the unusual case where this largest negative number\n+is in the subtype, and the largest positive number is not, in which case\n+the largest positive value is used. This choice will always generate\n+an invalid value if one exists.\n+\n+@item Floating-Point Types\n+Objects of all floating-point types are initialized to all 1-bits. For\n+standard IEEE format, this corresponds to a NaN (not a number) which is\n+indeed an invalid value.\n+\n+@item Fixed-Point Types\n+Objects of all fixed-point types are treated as described above for integers,\n+with the rules applying to the underlying integer value used to represent\n+the fixed-point value.\n \n @item Modular types\n-Objects of a modular type are initialized to typ'Last.  This will be out\n-of range of the subtype only if the subtype excludes this value.\n+Objects of a modular type are initialized to all one bits, except in\n+the special case where zero is excluded from the subtype, in which\n+case all zero bits are used. This choice will always generate an\n+invalid value if one exists.\n \n @item Enumeration types\n Objects of an enumeration type are initialized to all one-bits, i.e.@: to\n-the value @code{2 ** typ'Size - 1}.  This will be out of range of the\n-enumeration subtype in all cases except where the subtype contains\n-exactly 2**8, 2**16, or 2**32 elements.\n+the value @code{2 ** typ'Size - 1} unless the subtype excludes the literal\n+whose Pos value is zero, in which case a code of zero is used. This choice\n+will always generate an invalid value if one exists.\n \n @end table\n \n@@ -7112,8 +7146,9 @@ to be output either by the compiler or binder.\n @item No_Wide_Characters\n @findex No_Wide_Characters\n This restriction ensures at compile time that no uses of the types\n-@code{Wide_Character} or @code{Wide_String}\n-appear, and that no wide character literals\n+@code{Wide_Character} or @code{Wide_String} or corresponding wide\n+wide types\n+appear, and that no wide or wide wide string or character literals\n appear in the program (that is literals representing characters not in\n type @code{Character}.\n \n@@ -10286,6 +10321,16 @@ packages without @samp{Wide_} in the name, but operate with the types\n @code{Wide_String} and @code{Wide_Character} instead of @code{String}\n and @code{Character}.\n \n+@item Ada.Strings.Wide_Wide_Bounded (A.4.7)\n+@itemx Ada.Strings.Wide_Wide_Fixed (A.4.7)\n+@itemx Ada.Strings.Wide_Wide_Maps (A.4.7)\n+@itemx Ada.Strings.Wide_Wide_Maps.Constants (A.4.7)\n+@itemx Ada.Strings.Wide_Wide_Unbounded (A.4.7)\n+These packages provide analogous capabilities to the corresponding\n+packages without @samp{Wide_} in the name, but operate with the types\n+@code{Wide_Wide_String} and @code{Wide_Wide_Character} instead\n+of @code{String} and @code{Character}.\n+\n @item Ada.Synchronous_Task_Control (D.10)\n This package provides some standard facilities for controlling task\n communication in a synchronous manner.\n@@ -10474,8 +10519,72 @@ types are @code{Wide_Character} and @code{Wide_String} instead of\n This package is similar to @code{Ada.Text_IO.Streams}, except that the\n types are @code{Wide_Character} and @code{Wide_String} instead of\n @code{Character} and @code{String}.\n+\n+@item Ada.Wide_Wide_Text_IO (A.11)\n+This package is similar to @code{Ada.Text_IO}, except that the external\n+file supports wide character representations, and the internal types are\n+@code{Wide_Character} and @code{Wide_String} instead of @code{Character}\n+and @code{String}.  It contains generic subpackages listed next.\n+\n+@item Ada.Wide_Wide_Text_IO.Decimal_IO\n+Provides input-output facilities for decimal fixed-point types\n+\n+@item Ada.Wide_Wide_Text_IO.Enumeration_IO\n+Provides input-output facilities for enumeration types.\n+\n+@item Ada.Wide_Wide_Text_IO.Fixed_IO\n+Provides input-output facilities for ordinary fixed-point types.\n+\n+@item Ada.Wide_Wide_Text_IO.Float_IO\n+Provides input-output facilities for float types.  The following\n+predefined instantiations of this generic package are available:\n+\n+@table @code\n+@item Short_Float\n+@code{Short_Float_Wide_Wide_Text_IO}\n+@item Float\n+@code{Float_Wide_Wide_Text_IO}\n+@item Long_Float\n+@code{Long_Float_Wide_Wide_Text_IO}\n @end table\n \n+@item Ada.Wide_Wide_Text_IO.Integer_IO\n+Provides input-output facilities for integer types.  The following\n+predefined instantiations of this generic package are available:\n+\n+@table @code\n+@item Short_Short_Integer\n+@code{Ada.Short_Short_Integer_Wide_Wide_Text_IO}\n+@item Short_Integer\n+@code{Ada.Short_Integer_Wide_Wide_Text_IO}\n+@item Integer\n+@code{Ada.Integer_Wide_Wide_Text_IO}\n+@item Long_Integer\n+@code{Ada.Long_Integer_Wide_Wide_Text_IO}\n+@item Long_Long_Integer\n+@code{Ada.Long_Long_Integer_Wide_Wide_Text_IO}\n+@end table\n+\n+@item Ada.Wide_Wide_Text_IO.Modular_IO\n+Provides input-output facilities for modular (unsigned) types\n+\n+@item Ada.Wide_Wide_Text_IO.Complex_IO (G.1.3)\n+This package is similar to @code{Ada.Text_IO.Complex_IO}, except that the\n+external file supports wide character representations.\n+\n+@item Ada.Wide_Wide_Text_IO.Editing (F.3.4)\n+This package is similar to @code{Ada.Text_IO.Editing}, except that the\n+types are @code{Wide_Character} and @code{Wide_String} instead of\n+@code{Character} and @code{String}.\n+\n+@item Ada.Wide_Wide_Text_IO.Streams (A.12.3)\n+This package is similar to @code{Ada.Text_IO.Streams}, except that the\n+types are @code{Wide_Character} and @code{Wide_String} instead of\n+@code{Character} and @code{String}.\n+@end table\n+\n+\n+\n @node The Implementation of Standard I/O\n @chapter The Implementation of Standard I/O\n \n@@ -10515,6 +10624,7 @@ these additional facilities are also described in this chapter.\n * Sequential_IO::\n * Text_IO::\n * Wide_Text_IO::\n+* Wide_Wide_Text_IO::\n * Stream_IO::\n * Shared Files::\n * Open Modes::\n@@ -10534,14 +10644,20 @@ Ada.Text_IO\n @item\n Ada.Text_IO.Complex_IO\n @item\n-Ada.Text_IO.Text_Streams,\n+Ada.Text_IO.Text_Streams\n @item\n Ada.Wide_Text_IO\n @item\n-Ada.Wide_Text_IO.Complex_IO,\n+Ada.Wide_Text_IO.Complex_IO\n @item\n Ada.Wide_Text_IO.Text_Streams\n @item\n+Ada.Wide_Wide_Text_IO\n+@item\n+Ada.Wide_Wide_Text_IO.Complex_IO\n+@item\n+Ada.Wide_Wide_Text_IO.Text_Streams\n+@item\n Ada.Stream_IO\n @item\n Ada.Sequential_IO\n@@ -10908,6 +11024,10 @@ The package @code{Ada.Strings.Wide_Unbounded.Wide_Text_IO} in library\n files @file{a-swuwti.ads} and @file{a-swuwti.adb} provides similar extended\n @code{Wide_Text_IO} functionality for unbounded wide strings.\n \n+The package @code{Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO} in library\n+files @file{a-szuzti.ads} and @file{a-szuzti.adb} provides similar extended\n+@code{Wide_Wide_Text_IO} functionality for unbounded wide wide strings.\n+\n @node Wide_Text_IO\n @section Wide_Text_IO\n \n@@ -11079,6 +11199,148 @@ treated as data characters), and @code{End_Of_Page} always returns\n @code{False}.  Similarly, the end of file indication is not sticky, so\n it is possible to read beyond an end of file.\n \n+@node Wide_Wide_Text_IO\n+@section Wide_Wide_Text_IO\n+\n+@noindent\n+@code{Wide_Wide_Text_IO} is similar in most respects to Text_IO, except that\n+both input and output files may contain special sequences that represent\n+wide wide character values.  The encoding scheme for a given file may be\n+specified using a FORM parameter:\n+\n+@smallexample\n+WCEM=@var{x}\n+@end smallexample\n+\n+@noindent\n+as part of the FORM string (WCEM = wide character encoding method),\n+where @var{x} is one of the following characters\n+\n+@table @samp\n+@item h\n+Hex ESC encoding\n+@item u\n+Upper half encoding\n+@item s\n+Shift-JIS encoding\n+@item e\n+EUC Encoding\n+@item 8\n+UTF-8 encoding\n+@item b\n+Brackets encoding\n+@end table\n+\n+@noindent\n+The encoding methods match those that\n+can be used in a source\n+program, but there is no requirement that the encoding method used for\n+the source program be the same as the encoding method used for files,\n+and different files may use different encoding methods.\n+\n+The default encoding method for the standard files, and for opened files\n+for which no WCEM parameter is given in the FORM string matches the\n+wide character encoding specified for the main program (the default\n+being brackets encoding if no coding method was specified with -gnatW).\n+\n+@table @asis\n+\n+@item UTF-8 Coding\n+A wide character is represented using\n+UCS Transformation Format 8 (UTF-8) as defined in Annex R of ISO\n+10646-1/Am.2.  Depending on the character value, the representation\n+is a one, two, three, or four byte sequence:\n+\n+@smallexample\n+16#000000#-16#00007f#: 2#0xxxxxxx#\n+16#000080#-16#0007ff#: 2#110xxxxx# 2#10xxxxxx#\n+16#000800#-16#00ffff#: 2#1110xxxx# 2#10xxxxxx# 2#10xxxxxx#\n+16#010000#-16#10ffff#: 2#11110xxx# 2#10xxxxxx# 2#10xxxxxx# 2#10xxxxxx#\n+@end smallexample\n+\n+@noindent\n+where the xxx bits correspond to the left-padded bits of the\n+21-bit character value.  Note that all lower half ASCII characters\n+are represented as ASCII bytes and all upper half characters and\n+other wide characters are represented as sequences of upper-half\n+characters.\n+\n+@item Brackets Coding\n+In this encoding, a wide wide character is represented by the following eight\n+character sequence if is in wide character range\n+\n+@smallexample\n+[ \" a b c d \" ]\n+@end smallexample\n+\n+and by the following ten character sequence if not\n+\n+@smallexample\n+[ \" a b c d e f \" ]\n+@end smallexample\n+\n+@noindent\n+where @code{a}, @code{b}, @code{c}, @code{d}, @code{e}, and @code{f}\n+are the four or six hexadecimal\n+characters (using uppercase letters) of the wide wide character code.  For\n+example, @code{[\"01A345\"]} is used to represent the wide wide character\n+with code @code{16#01A345#}.\n+\n+This scheme is compatible with use of the full Wide_Wide_Character set.\n+On input, brackets coding can also be used for upper half characters,\n+e.g.@: @code{[\"C1\"]} for lower case a.  However, on output, brackets notation\n+is only used for wide characters with a code greater than @code{16#FF#}.\n+\n+@end table\n+\n+@noindent\n+If is also possible to use the other Wide_Character encoding methods,\n+such as Shift-JIS, but the other schemes cannot support the full range\n+of wide wide characters.\n+An attempt to output a character that cannot\n+be represented using the encoding scheme for the file causes\n+Constraint_Error to be raised.  An invalid wide character sequence on\n+input also causes Constraint_Error to be raised.\n+\n+@menu\n+* Wide_Wide_Text_IO Stream Pointer Positioning::\n+* Wide_Wide_Text_IO Reading and Writing Non-Regular Files::\n+@end menu\n+\n+@node Wide_Wide_Text_IO Stream Pointer Positioning\n+@subsection Stream Pointer Positioning\n+\n+@noindent\n+@code{Ada.Wide_Wide_Text_IO} is similar to @code{Ada.Text_IO} in its handling\n+of stream pointer positioning (@pxref{Text_IO}).  There is one additional\n+case:\n+\n+If @code{Ada.Wide_Wide_Text_IO.Look_Ahead} reads a character outside the\n+normal lower ASCII set (i.e.@: a character in the range:\n+\n+@smallexample @c ada\n+Wide_Wide_Character'Val (16#0080#) .. Wide_Wide_Character'Val (16#10FFFF#)\n+@end smallexample\n+\n+@noindent\n+then although the logical position of the file pointer is unchanged by\n+the @code{Look_Ahead} call, the stream is physically positioned past the\n+wide character sequence.  Again this is to avoid the need for buffering\n+or backup, and all @code{Wide_Wide_Text_IO} routines check the internal\n+indication that this situation has occurred so that this is not visible\n+to a normal program using @code{Wide_Wide_Text_IO}.  However, this discrepancy\n+can be observed if the wide text file shares a stream with another file.\n+\n+@node Wide_Wide_Text_IO Reading and Writing Non-Regular Files\n+@subsection Reading and Writing Non-Regular Files\n+\n+@noindent\n+As in the case of Text_IO, when a non-regular file is read, it is\n+assumed that the file contains no page marks (any form characters are\n+treated as data characters), and @code{End_Of_Page} always returns\n+@code{False}.  Similarly, the end of file indication is not sticky, so\n+it is possible to read beyond an end of file.\n+\n @node Stream_IO\n @section Stream_IO\n \n@@ -11399,6 +11661,17 @@ operations.\n         Form : in String := \"\");\n  end Ada.Wide_Text_IO.C_Streams;\n \n+  with Interfaces.C_Streams;\n+  package Ada.Wide_Wide_Text_IO.C_Streams is\n+     function C_Stream (F : File_Type)\n+        return Interfaces.C_Streams.FILEs;\n+     procedure Open\n+       (File : in out File_Type;\n+        Mode : in File_Mode;\n+        C_Stream : in Interfaces.C_Streams.FILEs;\n+        Form : in String := \"\");\n+ end Ada.Wide_Wide_Text_IO.C_Streams;\n+\n  with Interfaces.C_Streams;\n  package Ada.Stream_IO.C_Streams is\n     function C_Stream (F : File_Type)\n@@ -11412,7 +11685,7 @@ operations.\n @end smallexample\n \n @noindent\n-In each of these five packages, the @code{C_Stream} function obtains the\n+In each of these six packages, the @code{C_Stream} function obtains the\n @code{FILE} pointer from a currently opened Ada file.  It is then\n possible to use the @code{Interfaces.C_Streams} package to operate on\n this stream, or the stream can be passed to a C program which can\n@@ -11466,6 +11739,8 @@ of GNAT, and will generate a warning message.\n * Ada.Characters.Latin_9 (a-chlat9.ads)::\n * Ada.Characters.Wide_Latin_1 (a-cwila1.ads)::\n * Ada.Characters.Wide_Latin_9 (a-cwila9.ads)::\n+* Ada.Characters.Wide_Wide_Latin_1 (a-czila1.ads)::\n+* Ada.Characters.Wide_Wide_Latin_9 (a-czila9.ads)::\n * Ada.Command_Line.Remove (a-colire.ads)::\n * Ada.Command_Line.Environment (a-colien.ads)::\n * Ada.Direct_IO.C_Streams (a-diocst.ads)::\n@@ -11475,8 +11750,10 @@ of GNAT, and will generate a warning message.\n * Ada.Streams.Stream_IO.C_Streams (a-ssicst.ads)::\n * Ada.Strings.Unbounded.Text_IO (a-suteio.ads)::\n * Ada.Strings.Wide_Unbounded.Wide_Text_IO (a-swuwti.ads)::\n+* Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO (a-szuzti.ads)::\n * Ada.Text_IO.C_Streams (a-tiocst.ads)::\n * Ada.Wide_Text_IO.C_Streams (a-wtcstr.ads)::\n+* Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)::\n * GNAT.Array_Split (g-arrspl.ads)::\n * GNAT.AWK (g-awk.ads)::\n * GNAT.Bounded_Buffers (g-boubuf.ads)::\n@@ -11539,6 +11816,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Traceback (g-traceb.ads)::\n * GNAT.Traceback.Symbolic (g-trasym.ads)::\n * GNAT.Wide_String_Split (g-wistsp.ads)::\n+* GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n * Interfaces.CPP (i-cpp.ads)::\n@@ -11602,6 +11880,34 @@ instead of @code{Character}.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n (RM A.3(27)).\n \n+@node Ada.Characters.Wide_Wide_Latin_1 (a-czila1.ads)\n+@section @code{Ada.Characters.Wide_Wide_Latin_1} (@file{a-czila1.ads})\n+@cindex @code{Ada.Characters.Wide_Wide_Latin_1} (@file{a-czila1.ads})\n+@cindex Latin_1 constants for Wide_Wide_Character\n+\n+@noindent\n+This child of @code{Ada.Characters}\n+provides a set of definitions corresponding to those in the\n+RM-defined package @code{Ada.Characters.Latin_1} but with the\n+types of the constants being @code{Wide_Wide_Character}\n+instead of @code{Character}.  The provision of such a package\n+is specifically authorized by the Ada Reference Manual\n+(RM A.3(27)).\n+\n+@node Ada.Characters.Wide_Wide_Latin_9 (a-czila9.ads)\n+@section @code{Ada.Characters.Wide_Wide_Latin_9} (@file{a-czila9.ads})\n+@cindex @code{Ada.Characters.Wide_Wide_Latin_9} (@file{a-czila9.ads})\n+@cindex Latin_9 constants for Wide_Wide_Character\n+\n+@noindent\n+This child of @code{Ada.Characters}\n+provides a set of definitions corresponding to those in the\n+GNAT defined package @code{Ada.Characters.Latin_9} but with the\n+types of the constants being @code{Wide_Wide_Character}\n+instead of @code{Character}.  The provision of such a package\n+is specifically authorized by the Ada Reference Manual\n+(RM A.3(27)).\n+\n @node Ada.Command_Line.Remove (a-colire.ads)\n @section @code{Ada.Command_Line.Remove} (@file{a-colire.ads})\n @cindex @code{Ada.Command_Line.Remove} (@file{a-colire.ads})\n@@ -11700,6 +12006,17 @@ This package provides subprograms for Text_IO for unbounded\n wide strings, avoiding the necessity for an intermediate operation\n with ordinary wide strings.\n \n+@node Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO (a-szuzti.ads)\n+@section @code{Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO} (@file{a-szuzti.ads})\n+@cindex @code{Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO} (@file{a-szuzti.ads})\n+@cindex @code{Unbounded_Wide_Wide_String}, IO support\n+@cindex @code{Text_IO}, extensions for unbounded wide wide strings\n+\n+@noindent\n+This package provides subprograms for Text_IO for unbounded\n+wide wide strings, avoiding the necessity for an intermediate operation\n+with ordinary wide wide strings.\n+\n @node Ada.Text_IO.C_Streams (a-tiocst.ads)\n @section @code{Ada.Text_IO.C_Streams} (@file{a-tiocst.ads})\n @cindex @code{Ada.Text_IO.C_Streams} (@file{a-tiocst.ads})\n@@ -11722,6 +12039,18 @@ C streams and @code{Wide_Text_IO}.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n+@node Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)\n+@section @code{Ada.Wide_Wide_Text_IO.C_Streams} (@file{a-ztcstr.ads})\n+@cindex @code{Ada.Wide_Wide_Text_IO.C_Streams} (@file{a-ztcstr.ads})\n+@cindex C Streams, Interfacing with @code{Wide_Wide_Text_IO}\n+\n+@noindent\n+This package provides subprograms that allow interfacing between\n+C streams and @code{Wide_Wide_Text_IO}.  The stream identifier can be\n+extracted from a file opened on the Ada side, and an Ada file\n+can be constructed from a stream opened on the C side.\n+\n+\n @node GNAT.Array_Split (g-arrspl.ads)\n @section @code{GNAT.Array_Split} (@file{g-arrspl.ads})\n @cindex @code{GNAT.Array_Split} (@file{g-arrspl.ads})\n@@ -12336,7 +12665,7 @@ defines a string access and an array of string access types.\n @cindex String splitter\n \n @noindent\n-Useful string-manipulation routines: given a set of separators, split\n+Useful string manipulation routines: given a set of separators, split\n a string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n @code{GNAT.Array_Split}.\n@@ -12406,8 +12735,19 @@ name and line number information.\n @cindex Wide_String splitter\n \n @noindent\n-Useful wide_string-manipulation routines: given a set of separators, split\n-a wide_string wherever the separators appear, and provide direct access\n+Useful wide string manipulation routines: given a set of separators, split\n+a wide string wherever the separators appear, and provide direct access\n+to the resulting slices. This package is instantiated from\n+@code{GNAT.Array_Split}.\n+\n+@node GNAT.Wide_Wide_String_Split (g-zistsp.ads)\n+@section @code{GNAT.Wide_Wide_String_Split} (@file{g-zistsp.ads})\n+@cindex @code{GNAT.Wide_Wide_String_Split} (@file{g-zistsp.ads})\n+@cindex Wide_Wide_String splitter\n+\n+@noindent\n+Useful wide wide string manipulation routines: given a set of separators, split\n+a wide wide string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n @code{GNAT.Array_Split}.\n \n@@ -12610,7 +12950,7 @@ to support the @code{Task_Info} pragma\n \n @noindent\n This package provides routines for converting between\n-wide characters and a representation as a value of type\n+wide and wide wide characters and a representation as a value of type\n @code{Standard.String}, using a specified wide character\n encoding method.  It uses definitions in\n package @code{System.Wch_Con}."}, {"sha": "f112f4dd79cbdd89edf533486b00c42b11a1ece7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 751, "deletions": 728, "changes": 1479, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=984a64bcf34d7a17b497700058ce553773b7d583"}, {"sha": "474a18d84ee5ea6cd55b4d612ef81e5b681d48f5", "filename": "gcc/ada/s-atacco.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-atacco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-atacco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atacco.adb?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,10 +31,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This is a dummy version of this package that is needed to solve bootstrap\n+--  problems when compiling a library that doesn't require s-atacco.adb from\n+--  a compiler that contains one.\n+\n package body System.Address_To_Access_Conversions is\n-   --  This body is now superfluous and should be removed.\n-   procedure Nothing is\n-   begin\n-      null;\n-   end Nothing;\n+\n end System.Address_To_Access_Conversions;"}, {"sha": "6f8bd94b81a492edf93829207ba442476d2b522a", "filename": "gcc/ada/s-atacco.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-atacco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-atacco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atacco.ads?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -41,6 +41,12 @@ generic\n package System.Address_To_Access_Conversions is\n pragma Preelaborate (Address_To_Access_Conversions);\n \n+pragma Elaborate_Body;\n+--  This pragma Elaborate_Body is there to ensure the requirement of what is\n+--  at the moment a dummy null body. The reason this null body is there is\n+--  that we used to have a real body, and it causes bootstrap problems with\n+--  old compilers if we try to remove the corresponding file.\n+\n    pragma Compile_Time_Warning\n      (Object'Unconstrained_Array,\n       \"Object is unconstrained array type\" & ASCII.LF &\n@@ -62,6 +68,4 @@ pragma Preelaborate (Address_To_Access_Conversions);\n    pragma Import (Intrinsic, To_Pointer);\n    pragma Import (Intrinsic, To_Address);\n \n-private\n-   procedure Nothing;   --  For now, until body is removed ???\n end System.Address_To_Access_Conversions;"}, {"sha": "324db3e4d301bc8c6fa0ad624f2bcdcc67a22113", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2004, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2005, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -287,8 +287,10 @@ package System.OS_Interface is\n    function kernelTimeSlice (ticks : int) return int;\n    pragma Import (C, kernelTimeSlice, \"kernelTimeSlice\");\n \n-   function taskPrioritySet\n-     (tid : t_id; newPriority : int) return int;\n+   function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n+   pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n+\n+   function taskPrioritySet (tid : t_id; newPriority : int) return int;\n    pragma Import (C, taskPrioritySet, \"taskPrioritySet\");\n \n    --  Semaphore creation flags."}, {"sha": "256039d924b36d48e0d391edc3b24fe2cf2cf164", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -121,8 +121,7 @@ package System.Soft_Links is\n    --  Handle task abortion (non-tasking case, does nothing). Currently,\n    --  only VMS uses this.\n \n-   procedure Update_Exception_NT\n-     (X : EO := Current_Target_Exception);\n+   procedure Update_Exception_NT (X : EO := Current_Target_Exception);\n    --  Handle exception setting. This routine is provided for targets\n    --  which have built-in exception handling such as the Java Virtual\n    --  Machine. Currently, only JGNAT uses this. See 4jexcept.ads for"}, {"sha": "d6a1a61ca9e7715c71b4d3638799e6c1c676e157", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2004, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -99,7 +99,7 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    Environment_Task_Id : Task_Id;\n-   --  A variable to hold Task_Id for the environment task.\n+   --  A variable to hold Task_Id for the environment task\n \n    Single_RTS_Lock : aliased RTS_Lock;\n    --  This is a lock to allow only one thread of control in the RTS at\n@@ -113,10 +113,10 @@ package body System.Task_Primitives.Operations is\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set.\n+   --  Indicates whether FIFO_Within_Priorities is set\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n-   --  Used to identified fake tasks (i.e., non-Ada Threads).\n+   --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n    ------------------------------------\n    -- The thread local storage index --"}, {"sha": "8cea06be6cca5d1ae5bac94fc94e72b789abf681", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984a64bcf34d7a17b497700058ce553773b7d583/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=984a64bcf34d7a17b497700058ce553773b7d583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,9 +50,9 @@ package System.Task_Primitives.Operations is\n    package OSI renames System.OS_Interface;\n \n    procedure Initialize (Environment_Task : ST.Task_Id);\n-   pragma Inline (Initialize);\n-   --  This must be called once, before any other subprograms of this\n-   --  package are called.\n+   --  Perform initialization and set up of the environment task for proper\n+   --  operation of the tasking run-time. This must be called once, before any\n+   --  other subprograms of this package are called.\n \n    procedure Create_Task\n      (T          : ST.Task_Id;"}]}