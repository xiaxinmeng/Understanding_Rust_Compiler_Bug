{"sha": "e949ee225e28fe925e872c1beaea1532bb9e2328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0OWVlMjI1ZTI4ZmU5MjVlODcyYzFiZWFlYTE1MzJiYjllMjMyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:54:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-23T16:54:50Z"}, "message": "[multiple changes]\n\n2014-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatlink.adb (Gnatlink): Fix problem of generating bad name\n\tmsg on VMS.\n\n2014-01-23  Bob Duff  <duff@adacore.com>\n\n\t* g-dynhta.ads: Minor comment fix.\n\n2014-01-23  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Inherit SPARK_Mode\n\tfrom spec on body only when not already inherited on spec. Set\n\tSPARK_Mode from context on body without previous spec.\t*\n\t* sem_prag.adb (Analyze_Pragma): Check placement of pragma on\n\tlibrary-level entities.  Correct retrieval of entity from\n\tdeclaration, for cases where the declaration is not a unit.\n\t* sem_ch12.adb (Instantiate_Object): Avoid\n\tcalling Is_Volatile_Object on an empty node.\n\nFrom-SVN: r206987", "tree": {"sha": "de62d11e0dffa4caeac9384be337cc8dd6a8ade7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de62d11e0dffa4caeac9384be337cc8dd6a8ade7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e949ee225e28fe925e872c1beaea1532bb9e2328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e949ee225e28fe925e872c1beaea1532bb9e2328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e949ee225e28fe925e872c1beaea1532bb9e2328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e949ee225e28fe925e872c1beaea1532bb9e2328/comments", "author": null, "committer": null, "parents": [{"sha": "545d3e65ad4b45dc1ad7991a18e99b755ce9cbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545d3e65ad4b45dc1ad7991a18e99b755ce9cbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545d3e65ad4b45dc1ad7991a18e99b755ce9cbbf"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "a8851565ead2610f5b096b4bdd42cb2599abc0e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -1,3 +1,23 @@\n+2014-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatlink.adb (Gnatlink): Fix problem of generating bad name\n+\tmsg on VMS.\n+\n+2014-01-23  Bob Duff  <duff@adacore.com>\n+\n+\t* g-dynhta.ads: Minor comment fix.\n+\n+2014-01-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Inherit SPARK_Mode\n+\tfrom spec on body only when not already inherited on spec. Set\n+\tSPARK_Mode from context on body without previous spec.\t*\n+\t* sem_prag.adb (Analyze_Pragma): Check placement of pragma on\n+\tlibrary-level entities.  Correct retrieval of entity from\n+\tdeclaration, for cases where the declaration is not a unit.\n+\t* sem_ch12.adb (Instantiate_Object): Avoid\n+\tcalling Is_Volatile_Object on an empty node.\n+\n 2014-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* gnatlink.adb (Gnatlink): Check for suspicious executable file"}, {"sha": "e731ed359b3b62bcd28cf2c08c1de36f92907577", "filename": "gcc/ada/g-dynhta.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fg-dynhta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fg-dynhta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dynhta.ads?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -56,7 +56,7 @@ package GNAT.Dynamic_HTables is\n    --  A low-level Hash-Table abstraction, not as easy to instantiate as\n    --  Simple_HTable. This mirrors the interface of GNAT.HTable.Static_HTable,\n    --  but does require dynamic allocation (since we allow multiple instances\n-   --  of the table. The model is that each Element contains its own Key that\n+   --  of the table). The model is that each Element contains its own Key that\n    --  can be retrieved by Get_Key. Furthermore, Element provides a link that\n    --  can be used by the HTable for linking elements with same hash codes:\n "}, {"sha": "ea679d9d25cc287565f4ed18f26dd504526343b5", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -1101,9 +1101,9 @@ procedure Gnatlink is\n             --  The following test needs comments, why is it VMS specific.\n             --  The above comment looks out of date ???\n \n-            elsif not (OpenVMS_On_Target\n-                         and then\n-                       Is_Option_Present (Next_Line (Nfirst .. Nlast)))\n+            elsif not\n+              (OpenVMS_On_Target\n+                and then Is_Option_Present (Next_Line (Nfirst .. Nlast)))\n             then\n                if Nlast > Nfirst + 2 and then\n                  Next_Line (Nfirst .. Nfirst + 1) = \"-L\"\n@@ -1832,6 +1832,7 @@ begin\n \n       if FN'Length > 5\n         and then FN (FN'Last - 3 .. FN'Last) = \".exe\"\n+        and then not OpenVMS_On_Target\n       then\n          Check_File_Name (\"install\");\n          Check_File_Name (\"setup\");"}, {"sha": "22b153764b6d673674dfc8d9f83b5cf32cdfec0e", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -9844,7 +9844,10 @@ package body Sem_Ch12 is\n       --  The following check is only relevant when SPARK_Mode is on as it is\n       --  not a standard Ada legality rule.\n \n-      if SPARK_Mode = On and then Is_Volatile_Object (Actual) then\n+      if SPARK_Mode = On\n+        and then Present (Actual)\n+        and then Is_Volatile_Object (Actual)\n+      then\n          Error_Msg_N\n            (\"volatile object cannot act as actual in generic instantiation \"\n             & \"(SPARK RM 7.1.3(4))\", Actual);"}, {"sha": "f46f2e967b9ca2aa914310ce754d771b04b1ae76", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -2997,7 +2997,9 @@ package body Sem_Ch6 is\n \n             --  Set SPARK_Mode from spec if spec had a SPARK_Mode pragma\n \n-            if Present (SPARK_Pragma (Spec_Id)) then\n+            if Present (SPARK_Pragma (Spec_Id))\n+              and then not SPARK_Pragma_Inherited (Spec_Id)\n+            then\n                SPARK_Mode_Pragma := SPARK_Pragma (Spec_Id);\n                SPARK_Mode := Get_SPARK_Mode_From_Pragma (SPARK_Mode_Pragma);\n                Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Spec_Id));\n@@ -3055,6 +3057,12 @@ package body Sem_Ch6 is\n             Generate_Reference\n               (Body_Id, Body_Id, 'b', Set_Ref => False, Force => True);\n             Install_Formals (Body_Id);\n+\n+            --  Set SPARK_Mode from context\n+\n+            Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n+            Set_SPARK_Pragma_Inherited (Body_Id, True);\n+\n             Push_Scope (Body_Id);\n          end if;\n "}, {"sha": "1a847fd03d4751fe2e1809e54a16c9f1a4ff4cd1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e949ee225e28fe925e872c1beaea1532bb9e2328/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e949ee225e28fe925e872c1beaea1532bb9e2328", "patch": "@@ -18485,6 +18485,9 @@ package body Sem_Prag is\n             --  anything. But if the old mode is OFF, then the only allowed\n             --  new mode is also OFF.\n \n+            procedure Check_Library_Level_Entity (E : Entity_Id);\n+            --  Verify that pragma is applied to library-level entity E\n+\n             function Get_SPARK_Mode_Name (Id : SPARK_Mode_Type) return Name_Id;\n             --  Convert a value of type SPARK_Mode_Type to corresponding name\n \n@@ -18513,6 +18516,34 @@ package body Sem_Prag is\n                end if;\n             end Check_Pragma_Conformance;\n \n+            --------------------------------\n+            -- Check_Library_Level_Entity --\n+            --------------------------------\n+\n+            procedure Check_Library_Level_Entity (E : Entity_Id) is\n+               MsgF : String := \"incorrect placement of pragma%\";\n+\n+            begin\n+               if not Is_Library_Level_Entity (E) then\n+                  Error_Msg_Name_1 := Pname;\n+                  Fix_Error (MsgF);\n+                  Error_Msg_N (MsgF, N);\n+\n+                  if Ekind_In (E, E_Generic_Package,\n+                                  E_Package,\n+                                  E_Package_Body)\n+                  then\n+                     Error_Msg_NE\n+                       (\"\\& is not a library-level package\", N, E);\n+                  else\n+                     Error_Msg_NE\n+                       (\"\\& is not a library-level subprogram\", N, E);\n+                  end if;\n+\n+                  raise Pragma_Exit;\n+               end if;\n+            end Check_Library_Level_Entity;\n+\n             -------------------------\n             -- Get_SPARK_Mode_Name --\n             -------------------------\n@@ -18614,7 +18645,8 @@ package body Sem_Prag is\n                   elsif Nkind_In (Stmt, N_Generic_Package_Declaration,\n                                         N_Package_Declaration)\n                   then\n-                     Spec_Id := Defining_Unit_Name (Specification (Stmt));\n+                     Spec_Id := Defining_Entity (Stmt);\n+                     Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance (SPARK_Pragma (Spec_Id));\n \n                      Set_SPARK_Pragma               (Spec_Id, N);\n@@ -18628,7 +18660,8 @@ package body Sem_Prag is\n                   elsif Nkind_In (Stmt, N_Generic_Subprogram_Declaration,\n                                         N_Subprogram_Declaration)\n                   then\n-                     Spec_Id := Defining_Unit_Name (Specification (Stmt));\n+                     Spec_Id := Defining_Entity (Stmt);\n+                     Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance (SPARK_Pragma (Spec_Id));\n \n                      Set_SPARK_Pragma               (Spec_Id, N);\n@@ -18679,11 +18712,12 @@ package body Sem_Prag is\n                --      pragma SPARK_Mode;\n \n                if Nkind (Context) = N_Package_Specification then\n-                  Spec_Id := Defining_Unit_Name (Context);\n+                  Spec_Id := Defining_Entity (Context);\n \n                   --  Pragma applies to private part\n \n                   if List_Containing (N) = Private_Declarations (Context) then\n+                     Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance (SPARK_Aux_Pragma (Spec_Id));\n                      SPARK_Mode_Pragma := N;\n                      SPARK_Mode := Mode_Id;\n@@ -18694,6 +18728,7 @@ package body Sem_Prag is\n                   --  Pragma applies to public part\n \n                   else\n+                     Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance (SPARK_Pragma (Spec_Id));\n                      SPARK_Mode_Pragma := N;\n                      SPARK_Mode := Mode_Id;\n@@ -18711,7 +18746,8 @@ package body Sem_Prag is\n                elsif Nkind_In (Context, N_Function_Specification,\n                                         N_Procedure_Specification)\n                then\n-                  Spec_Id := Defining_Unit_Name (Context);\n+                  Spec_Id := Defining_Entity (Context);\n+                  Check_Library_Level_Entity (Spec_Id);\n                   Check_Pragma_Conformance (SPARK_Pragma (Spec_Id));\n \n                   Set_SPARK_Pragma           (Spec_Id, N);\n@@ -18725,6 +18761,7 @@ package body Sem_Prag is\n                elsif Nkind (Context) = N_Package_Body then\n                   Spec_Id := Corresponding_Spec (Context);\n                   Body_Id := Defining_Entity (Context);\n+                  Check_Library_Level_Entity (Body_Id);\n                   Check_Pragma_Conformance (SPARK_Pragma (Body_Id));\n                   SPARK_Mode_Pragma := N;\n                   SPARK_Mode := Mode_Id;\n@@ -18743,6 +18780,7 @@ package body Sem_Prag is\n                   Spec_Id := Corresponding_Spec (Context);\n                   Context := Specification (Context);\n                   Body_Id := Defining_Entity (Context);\n+                  Check_Library_Level_Entity (Body_Id);\n                   Check_Pragma_Conformance (SPARK_Pragma (Body_Id));\n                   SPARK_Mode_Pragma := N;\n                   SPARK_Mode := Mode_Id;\n@@ -18761,7 +18799,8 @@ package body Sem_Prag is\n                then\n                   Context := Parent (Context);\n                   Spec_Id := Corresponding_Spec (Context);\n-                  Body_Id := Defining_Unit_Name (Context);\n+                  Body_Id := Defining_Entity (Context);\n+                  Check_Library_Level_Entity (Body_Id);\n                   Check_Pragma_Conformance (SPARK_Aux_Pragma (Body_Id));\n                   SPARK_Mode_Pragma := N;\n                   SPARK_Mode := Mode_Id;"}]}