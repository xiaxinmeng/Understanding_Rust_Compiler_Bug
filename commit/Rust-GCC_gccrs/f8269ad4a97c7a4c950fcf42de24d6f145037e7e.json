{"sha": "f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyNjlhZDRhOTdjN2E0Yzk1MGZjZjQyZGUyNGQ2ZjE0NTAzN2U3ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-16T12:03:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-16T12:03:11Z"}, "message": "re PR tree-optimization/64277 (Incorrect warning \"array subscript is above array bounds\")\n\n2015-04-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64277\n\t* tree-vrp.c (check_array_ref): Fix anti-range handling,\n\tsimplify upper bound handling.\n\t(search_for_addr_array): Simplify.\n\t(check_array_bounds): Handle ADDR_EXPRs here.\n\t(check_all_array_refs): Simplify.\n\n\t* gcc.dg/Warray-bounds-14.c: New testcase.\n\t* gcc.dg/Warray-bounds-15.c: Likewise.\n\t* c-c++-common/ubsan/bounds-4.c: Disable -Warray-bounds.\n\t* c-c++-common/ubsan/bounds-6.c: Likewise.\n\nFrom-SVN: r222146", "tree": {"sha": "cf69ae8eeed6f2f7cfd0cbe284c8dd255c21717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf69ae8eeed6f2f7cfd0cbe284c8dd255c21717f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "579cef8f39ea28afa93c2d84f959867a7caa1325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579cef8f39ea28afa93c2d84f959867a7caa1325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579cef8f39ea28afa93c2d84f959867a7caa1325"}], "stats": {"total": 151, "additions": 96, "deletions": 55}, "files": [{"sha": "c4d0c150736d038353433d0f0b2f02f77e459431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -1,3 +1,12 @@\n+2015-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64277\n+\t* tree-vrp.c (check_array_ref): Fix anti-range handling,\n+\tsimplify upper bound handling.\n+\t(search_for_addr_array): Simplify.\n+\t(check_array_bounds): Handle ADDR_EXPRs here.\n+\t(check_all_array_refs): Simplify.\n+\n 2015-04-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (print_reg): Rewrite function."}, {"sha": "5a217e7dc2c5890eb443405313d10d97e17a7189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -1,3 +1,11 @@\n+2015-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64277\n+\t* gcc.dg/Warray-bounds-14.c: New testcase.\n+\t* gcc.dg/Warray-bounds-15.c: Likewise.\n+\t* c-c++-common/ubsan/bounds-4.c: Disable -Warray-bounds.\n+\t* c-c++-common/ubsan/bounds-6.c: Likewise.\n+\n 2015-04-16  Renlin Li  <renlin.li@arm.com>\n \n \t* gcc.target/aarch64/unsigned-unsignedfloat.c: New."}, {"sha": "88e7e14050ecd5ebc2572d097b50539d0ce9cd95", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-4.c?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-unused\" } */\n+/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-array-bounds -Wno-unused\" } */\n \n /* Initializers of TREE_STATICs aren't instrumented.\n    But don't ICE on 'em.  */\n@@ -11,7 +11,7 @@ int *gpi;\n int\n main (void)\n {\n-  gpi = &A[4];\n+  gpi = &A[4]; /* This will warn with -Warray-bounds, but only if VRP runs.  */\n   static int *pi = &A[4];\n   return 0;\n }"}, {"sha": "952354985d7f560406c99ffda2e891c4108a7c97", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-6.c?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=bounds -Wall -Wextra\" } */\n+/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-array-bounds\" } */\n \n /* Test off-by-one.  */\n \n@@ -24,7 +24,7 @@ main (void)\n   a = &u[4].a[10]; // Error\n   a = &u[3].a[9]; // OK\n   a = &u[3].a[10]; // OK\n-  a = &u[3].a[11]; // Error\n+  a = &u[3].a[11]; // Error, warns with -Warray-bounds, but only if VRP runs\n \n   return 0;\n }"}, {"sha": "f3a33f9c7db3f648e01d61b8390d168726bd74ac", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-14.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-14.c?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+int a[10];\n+int foo1 (int i)\n+{\n+  if (i < 0 || i > 9)\n+    return a[i];  /* { dg-warning \"outside array bounds\" } */\n+  return 0;\n+}\n+int foo2 (int i)\n+{\n+  if (i < 0 || i > 8)\n+    return a[i];  /* { dg-bogus \"outside array bounds\" } */\n+  return 0;\n+}\n+int *foo3 (int i)\n+{\n+  if (i < 0 || i > 10)\n+    return &a[i];  /* { dg-warning \"outside array bounds\" } */\n+  return (void *)0;\n+}\n+int *foo4 (int i)\n+{\n+  if (i < 0 || i > 9)\n+    return &a[i];  /* { dg-bogus \"outside array bounds\" } */\n+  return (void *)0;\n+}"}, {"sha": "f50e5ee7cf334c0629ec78c82033dae94aa189c2", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-15.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-15.c?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+int a[10];\n+int *foo1 (int i)\n+{\n+  return &a[10]; /* { dg-bogus \"above array bounds\" } */\n+}\n+int *foo2 (int i)\n+{\n+  return &a[11]; /* { dg-warning \"above array bounds\" } */\n+}\n+int foo3 (int i)\n+{\n+  return a[9]; /* { dg-bogus \"above array bounds\" } */\n+}\n+int foo4 (int i)\n+{\n+  return a[10]; /* { dg-warning \"above array bounds\" } */\n+}"}, {"sha": "41d7316865a3a10c91f4c1ea6ae07eb45db3b856", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 51, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8269ad4a97c7a4c950fcf42de24d6f145037e7e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f8269ad4a97c7a4c950fcf42de24d6f145037e7e", "patch": "@@ -6565,6 +6565,14 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n   up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,\n \t\t\t\t build_int_cst (TREE_TYPE (up_bound), 1));\n \n+  /* Empty array.  */\n+  if (tree_int_cst_equal (low_bound, up_bound_p1))\n+    {\n+      warning_at (location, OPT_Warray_bounds,\n+\t\t  \"array subscript is above array bounds\");\n+      TREE_NO_WARNING (ref) = 1;\n+    }\n+\n   if (TREE_CODE (low_sub) == SSA_NAME)\n     {\n       vr = get_value_range (low_sub);\n@@ -6578,9 +6586,11 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n   if (vr && vr->type == VR_ANTI_RANGE)\n     {\n       if (TREE_CODE (up_sub) == INTEGER_CST\n-          && tree_int_cst_lt (up_bound, up_sub)\n+          && (ignore_off_by_one\n+\t      ? tree_int_cst_lt (up_bound, up_sub)\n+\t      : tree_int_cst_le (up_bound, up_sub))\n           && TREE_CODE (low_sub) == INTEGER_CST\n-          && tree_int_cst_lt (low_sub, low_bound))\n+          && tree_int_cst_le (low_sub, low_bound))\n         {\n           warning_at (location, OPT_Warray_bounds,\n \t\t      \"array subscript is outside array bounds\");\n@@ -6589,10 +6599,8 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n     }\n   else if (TREE_CODE (up_sub) == INTEGER_CST\n \t   && (ignore_off_by_one\n-\t       ? (tree_int_cst_lt (up_bound, up_sub)\n-\t\t  && !tree_int_cst_equal (up_bound_p1, up_sub))\n-\t       : (tree_int_cst_lt (up_bound, up_sub)\n-\t\t  || tree_int_cst_equal (up_bound_p1, up_sub))))\n+\t       ? !tree_int_cst_le (up_sub, up_bound_p1)\n+\t       : !tree_int_cst_le (up_sub, up_bound)))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n@@ -6625,25 +6633,6 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n static void\n search_for_addr_array (tree t, location_t location)\n {\n-  while (TREE_CODE (t) == SSA_NAME)\n-    {\n-      gimple g = SSA_NAME_DEF_STMT (t);\n-\n-      if (gimple_code (g) != GIMPLE_ASSIGN)\n-\treturn;\n-\n-      if (get_gimple_rhs_class (gimple_assign_rhs_code (g))\n-\t  != GIMPLE_SINGLE_RHS)\n-\treturn;\n-\n-      t = gimple_assign_rhs1 (g);\n-    }\n-\n-\n-  /* We are only interested in addresses of ARRAY_REF's.  */\n-  if (TREE_CODE (t) != ADDR_EXPR)\n-    return;\n-\n   /* Check each ARRAY_REFs in the reference chain. */\n   do\n     {\n@@ -6733,12 +6722,11 @@ check_array_bounds (tree *tp, int *walk_subtree, void *data)\n   if (TREE_CODE (t) == ARRAY_REF)\n     check_array_ref (location, t, false /*ignore_off_by_one*/);\n \n-  if (TREE_CODE (t) == MEM_REF\n-      || (TREE_CODE (t) == RETURN_EXPR && TREE_OPERAND (t, 0)))\n-    search_for_addr_array (TREE_OPERAND (t, 0), location);\n-\n-  if (TREE_CODE (t) == ADDR_EXPR)\n-    *walk_subtree = FALSE;\n+  else if (TREE_CODE (t) == ADDR_EXPR)\n+    {\n+      search_for_addr_array (t, location);\n+      *walk_subtree = FALSE;\n+    }\n \n   return NULL_TREE;\n }\n@@ -6768,29 +6756,17 @@ check_all_array_refs (void)\n \t{\n \t  gimple stmt = gsi_stmt (si);\n \t  struct walk_stmt_info wi;\n-\t  if (!gimple_has_location (stmt))\n+\t  if (!gimple_has_location (stmt)\n+\t      || is_gimple_debug (stmt))\n \t    continue;\n \n-\t  if (is_gimple_call (stmt))\n-\t    {\n-\t      size_t i;\n-\t      size_t n = gimple_call_num_args (stmt);\n-\t      for (i = 0; i < n; i++)\n-\t\t{\n-\t\t  tree arg = gimple_call_arg (stmt, i);\n-\t\t  search_for_addr_array (arg, gimple_location (stmt));\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      memset (&wi, 0, sizeof (wi));\n-\t      wi.info = CONST_CAST (void *, (const void *)\n-\t\t\t\t    gimple_location_ptr (stmt));\n+\t  memset (&wi, 0, sizeof (wi));\n+\t  wi.info = CONST_CAST (void *, (const void *)\n+\t\t\t\tgimple_location_ptr (stmt));\n \n-\t      walk_gimple_op (gsi_stmt (si),\n-\t\t\t      check_array_bounds,\n-\t\t\t      &wi);\n-\t    }\n+\t  walk_gimple_op (gsi_stmt (si),\n+\t\t\t  check_array_bounds,\n+\t\t\t  &wi);\n \t}\n     }\n }"}]}