{"sha": "eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyYzU5OGQ1NWEwNTcyMjllYzliZjczMWZlNDFhNGQ4ZTdiYTcwOA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-06-30T16:26:55Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-06-30T16:26:55Z"}, "message": "re PR fortran/20373 (INTRINSIC symbols can be given the wrong type)\n\ngcc/fortran:\n2007-06-30  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/20373\n\t* intrinsic.c (add_functions): Additional function types.\n\t(gfc_convert_type_warn): Remove intrinsic-flag from conversion\n\tfunctions.\n\t* resolve.c (resolve_symbol): Added type checks to explicitly defined\n\tintrinsics.\n\ngcc/testsuite:\n2007-06-28  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/20373\n\t* gfortran.dg/intrinsic.f90: New test.\n\nFrom-SVN: r126153", "tree": {"sha": "ea89ef1757ae0d919e45f810bc9f3980a8e5d304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea89ef1757ae0d919e45f810bc9f3980a8e5d304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df5be068b278d70e30e7b4a86d09b4172681d060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5be068b278d70e30e7b4a86d09b4172681d060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5be068b278d70e30e7b4a86d09b4172681d060"}], "stats": {"total": 99, "additions": 85, "deletions": 14}, "files": [{"sha": "7c0618d266ea508dc2f9ff1a623fda12f12dc648", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "patch": "@@ -1,3 +1,12 @@\n+2007-06-30  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/20373\n+\t* intrinsic.c (add_functions): Additional function types.\n+\t(gfc_convert_type_warn): Remove intrinsic-flag from\n+\tconversion functions.\n+\t* resolve.c (resolve_symbol): Added type checks to \n+\texplicitly defined intrinsics.\n+\n 2007-06-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32555"}, {"sha": "7fbda184af4889deca5d71bd47b68c1781e48830", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "patch": "@@ -1014,7 +1014,7 @@ add_functions (void)\n \n   make_generic (\"aint\", GFC_ISYM_AINT, GFC_STD_F77);\n \n-  add_sym_2 (\"all\", GFC_ISYM_ALL, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"all\", GFC_ISYM_ALL, NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_all,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n@@ -1036,7 +1036,7 @@ add_functions (void)\n \n   make_generic (\"anint\", GFC_ISYM_ANINT, GFC_STD_F77);\n \n-  add_sym_2 (\"any\", GFC_ISYM_ANY, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"any\", GFC_ISYM_ANY, NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_any,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n@@ -1310,7 +1310,7 @@ add_functions (void)\n \n   make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n \n-  add_sym_2 (\"dot_product\", GFC_ISYM_DOT_PRODUCT, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0,\n+  add_sym_2 (\"dot_product\", GFC_ISYM_DOT_PRODUCT, NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr,\n \t     GFC_STD_F95, gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n \t     va, BT_REAL, dr, REQUIRED, vb, BT_REAL, dr, REQUIRED);\n \n@@ -1503,7 +1503,7 @@ add_functions (void)\n \n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_2 (\"and\", GFC_ISYM_AND, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"and\", GFC_ISYM_AND, NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_and, gfc_resolve_and,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -1545,7 +1545,7 @@ add_functions (void)\n \n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_F95);\n \n-  add_sym_2 (\"xor\", GFC_ISYM_XOR, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"xor\", GFC_ISYM_XOR, NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_xor, gfc_resolve_xor,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -1605,7 +1605,7 @@ add_functions (void)\n \n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n-  add_sym_2 (\"or\", GFC_ISYM_OR, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2 (\"or\", GFC_ISYM_OR, NOT_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n \t     gfc_check_and, gfc_simplify_or, gfc_resolve_or,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -2188,7 +2188,7 @@ add_functions (void)\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n-  add_sym_3red (\"sum\", GFC_ISYM_SUM, NOT_ELEMENTAL, ACTUAL_NO, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3red (\"sum\", GFC_ISYM_SUM, NOT_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t\tgfc_check_product_sum, NULL, gfc_resolve_sum,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n@@ -3562,7 +3562,6 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   new->symtree->n.sym->ts = *ts;\n   new->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n   new->symtree->n.sym->attr.function = 1;\n-  new->symtree->n.sym->attr.intrinsic = 1;\n   new->symtree->n.sym->attr.elemental = 1;\n   new->symtree->n.sym->attr.pure = 1;\n   new->symtree->n.sym->attr.referenced = 1;"}, {"sha": "43711cd126df3ef76d6b0b86d78a2fcff0f34b2a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "patch": "@@ -6282,6 +6282,34 @@ resolve_symbol (gfc_symbol *sym)\n      can.  */\n   mp_flag = (sym->result != NULL && sym->result != sym);\n \n+\n+  /* Make sure that the intrinsic is consistent with its internal \n+     representation. This needs to be done before assigning a default \n+     type to avoid spurious warnings.  */\n+  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic)\n+    {\n+      if (gfc_intrinsic_name (sym->name, 0))\n+\t{\n+\t  if (sym->ts.type != BT_UNKNOWN && gfc_option.warn_surprising)\n+\t    gfc_warning (\"Type specified for intrinsic function '%s' at %L is ignored\",\n+\t\t\t sym->name, &sym->declared_at);\n+\t}\n+      else if (gfc_intrinsic_name (sym->name, 1))\n+\t{\n+\t  if (sym->ts.type != BT_UNKNOWN)\n+\t    {\n+\t      gfc_error (\"Intrinsic subroutine '%s' at %L shall not have a type specifier\", \n+\t\t\t sym->name, &sym->declared_at);\n+\t      return;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  gfc_error (\"Intrinsic '%s' at %L does not exist\", sym->name, &sym->declared_at);\n+\t  return;\n+\t}\n+     }\n+\n   /* Assign default type to symbols that need one and don't have one.  */\n   if (sym->ts.type == BT_UNKNOWN)\n     {\n@@ -6418,12 +6446,6 @@ resolve_symbol (gfc_symbol *sym)\n       break;\n     }\n \n-  /* Make sure that intrinsic exist */\n-  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic\n-      && !gfc_intrinsic_name(sym->name, 0)\n-      && !gfc_intrinsic_name(sym->name, 1))\n-    gfc_error(\"Intrinsic at %L does not exist\", &sym->declared_at);\n-\n   /* Resolve array specifier. Check as well some constraints\n      on COMMON blocks.  */\n "}, {"sha": "59237fa91f52fa8ba0463d62dae2a4d202ada735", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "patch": "@@ -1,3 +1,8 @@\n+2007-06-30  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/20373\n+\t* gfortran.dg/intrinsic.f90: New test.\n+\n 2007-06-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32555"}, {"sha": "8bb41fdfdc42a2a6a617520a897a221a393a3446", "filename": "gcc/testsuite/gfortran.dg/intrinsic.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c598d55a057229ec9bf731fe41a4d8e7ba708/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic.f90?ref=eb2c598d55a057229ec9bf731fe41a4d8e7ba708", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-c -Wall\" }\n+\n+subroutine valid\n+  intrinsic :: abs                 ! ok, intrinsic function\n+  intrinsic :: cpu_time            ! ok, intrinsic subroutine\n+end subroutine\n+\n+subroutine warnings\n+  ! the follow three are ok in general, but ANY \n+  ! type is ignored, even the correct one\n+  real, intrinsic :: sin           ! { dg-warning \"is ignored\" }\n+\n+  real :: asin                     ! { dg-warning \"is ignored\" }\n+  intrinsic :: asin\n+\n+  intrinsic :: tan                 ! { dg-warning \"is ignored\" }\n+  real :: tan\n+\n+  ! wrong types here\n+  integer, intrinsic :: cos        ! { dg-warning \"is ignored\" }\n+\n+  integer :: acos                  ! { dg-warning \"is ignored\" }\n+  intrinsic :: acos\n+\n+  ! ordering shall not matter\n+  intrinsic :: atan                ! { dg-warning \"is ignored\" }\n+  integer :: atan\n+end subroutine\n+\n+subroutine errors\n+  intrinsic :: foo                 ! { dg-error \"does not exist\" }\n+  real, intrinsic :: bar           ! { dg-error \"does not exist\" }\n+\n+  real, intrinsic :: mvbits        ! { dg-error \"shall not have a type\" }\n+end subroutine"}]}