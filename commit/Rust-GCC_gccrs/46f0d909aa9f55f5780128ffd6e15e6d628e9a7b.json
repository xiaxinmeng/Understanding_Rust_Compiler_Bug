{"sha": "46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmMGQ5MDlhYTlmNTVmNTc4MDEyOGZmZDZlMTVlNmQ2MjhlOWE3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-10T19:12:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-10T19:12:32Z"}, "message": "re PR c++/68926 (decltype and sfinae to check for template instance availability fails to compile)\n\n\tPR c++/68926\n\n\t* pt.c (resolve_nondeduced_context): Add complain parm.\n\t(do_auto_deduction): Pass it.\n\t* cvt.c (convert_to_void): Likewise.\n\t* decl.c (cp_finish_decl): Likewise.\n\t* init.c (build_new): Likewise.\n\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n\t* semantics.c (finish_decltype_type): Likewise.\n\t* typeck.c (decay_conversion): Likewise.\n\t* cp-tree.h: Adjust declaration.\n\t* call.c (standard_conversion): Add complain parm, pass it along.\n\t(implicit_conversion): Pass it.\n\nFrom-SVN: r233304", "tree": {"sha": "9da088c90297b614b71f8123a6d2364a9718a18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da088c90297b614b71f8123a6d2364a9718a18e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b48faf54877d35a6ca26d2ae08586a7696be5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b48faf54877d35a6ca26d2ae08586a7696be5f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b48faf54877d35a6ca26d2ae08586a7696be5f7"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "3c2858423d332efa5a477839ea21282af70f5989", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -1,5 +1,18 @@\n 2016-02-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/68926\n+\t* pt.c (resolve_nondeduced_context): Add complain parm.\n+\t(do_auto_deduction): Pass it.\n+\t* cvt.c (convert_to_void): Likewise.\n+\t* decl.c (cp_finish_decl): Likewise.\n+\t* init.c (build_new): Likewise.\n+\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n+\t* semantics.c (finish_decltype_type): Likewise.\n+\t* typeck.c (decay_conversion): Likewise.\n+\t* cp-tree.h: Adjust declaration.\n+\t* call.c (standard_conversion): Add complain parm, pass it along.\n+\t(implicit_conversion): Pass it.\n+\n \tPR c++/69657\n \t* name-lookup.c (ambiguous_decl): Call remove_hidden_names.\n \t(lookup_name_real_1): Likewise."}, {"sha": "cb71176c6ca148ecaf49b24f2e16238d3653685a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -190,7 +190,6 @@ static struct z_candidate *add_function_candidate\n \t tree, int, tsubst_flags_t);\n static conversion *implicit_conversion (tree, tree, tree, bool, int,\n \t\t\t\t\ttsubst_flags_t);\n-static conversion *standard_conversion (tree, tree, tree, bool, int);\n static conversion *reference_binding (tree, tree, tree, bool, int,\n \t\t\t\t      tsubst_flags_t);\n static conversion *build_conv (conversion_kind, tree, conversion *);\n@@ -1080,7 +1079,7 @@ strip_top_quals (tree t)\n \n static conversion *\n standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n-\t\t     int flags)\n+\t\t     int flags, tsubst_flags_t complain)\n {\n   enum tree_code fcode, tcode;\n   conversion *conv;\n@@ -1110,7 +1109,7 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       else if (TREE_CODE (to) == BOOLEAN_TYPE)\n \t{\n \t  /* Necessary for eg, TEMPLATE_ID_EXPRs (c++/50961).  */\n-\t  expr = resolve_nondeduced_context (expr);\n+\t  expr = resolve_nondeduced_context (expr, complain);\n \t  from = TREE_TYPE (expr);\n \t}\n     }\n@@ -1149,7 +1148,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t the standard conversion sequence to perform componentwise\n \t conversion.  */\n       conversion *part_conv = standard_conversion\n-\t(TREE_TYPE (to), TREE_TYPE (from), NULL_TREE, c_cast_p, flags);\n+\t(TREE_TYPE (to), TREE_TYPE (from), NULL_TREE, c_cast_p, flags,\n+\t complain);\n \n       if (part_conv)\n \t{\n@@ -1799,7 +1799,7 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   if (TREE_CODE (to) == REFERENCE_TYPE)\n     conv = reference_binding (to, from, expr, c_cast_p, flags, complain);\n   else\n-    conv = standard_conversion (to, from, expr, c_cast_p, flags);\n+    conv = standard_conversion (to, from, expr, c_cast_p, flags, complain);\n \n   if (conv)\n     return conv;"}, {"sha": "3b91089f50d08645519305b797c6616b767bec79", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -6180,7 +6180,7 @@ extern tree get_template_parms_at_level (tree, int);\n extern tree get_template_innermost_arguments\t(const_tree);\n extern tree get_template_argument_pack_elems\t(const_tree);\n extern tree get_function_template_decl\t\t(const_tree);\n-extern tree resolve_nondeduced_context\t\t(tree);\n+extern tree resolve_nondeduced_context\t\t(tree, tsubst_flags_t);\n extern hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n extern tree coerce_template_parms               (tree, tree, tree);\n extern tree coerce_template_parms               (tree, tree, tree, tsubst_flags_t);"}, {"sha": "0d1048cd7fe4259cfc4f7a29420ae8f98f833c1c", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -1253,7 +1253,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \n     default:;\n     }\n-  expr = resolve_nondeduced_context (expr);\n+  expr = resolve_nondeduced_context (expr, complain);\n   {\n     tree probe = expr;\n "}, {"sha": "09bd512313b6f70c0f12177d64bde900189634f1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -6575,7 +6575,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if (TREE_CODE (d_init) == TREE_LIST)\n \td_init = build_x_compound_expr_from_list (d_init, ELK_INIT,\n \t\t\t\t\t\t  tf_warning_or_error);\n-      d_init = resolve_nondeduced_context (d_init);\n+      d_init = resolve_nondeduced_context (d_init, tf_warning_or_error);\n       type = TREE_TYPE (decl) = do_auto_deduction (type, d_init,\n \t\t\t\t\t\t   auto_node,\n                                                    tf_warning_or_error,"}, {"sha": "338f85e2c7de5acc5d846fbb0cc5d3b0fcba2a88", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -3364,7 +3364,7 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n       if (auto_node)\n \t{\n \t  tree d_init = (**init)[0];\n-\t  d_init = resolve_nondeduced_context (d_init);\n+\t  d_init = resolve_nondeduced_context (d_init, complain);\n \t  type = do_auto_deduction (type, d_init, auto_node);\n \t}\n     }"}, {"sha": "a215aa78b4c1ade430fe634880106d34f4ca9ada", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -18575,7 +18575,7 @@ resolve_overloaded_unification (tree tparms,\n    lvalue for the function template specialization.  */\n \n tree\n-resolve_nondeduced_context (tree orig_expr)\n+resolve_nondeduced_context (tree orig_expr, tsubst_flags_t complain)\n {\n   tree expr, offset, baselink;\n   bool addr;\n@@ -18658,16 +18658,16 @@ resolve_nondeduced_context (tree orig_expr)\n \t    {\n \t      tree base\n \t\t= TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (offset, 0)));\n-\t      expr = build_offset_ref (base, expr, addr, tf_warning_or_error);\n+\t      expr = build_offset_ref (base, expr, addr, complain);\n \t    }\n \t  if (addr)\n-\t    expr = cp_build_addr_expr (expr, tf_warning_or_error);\n+\t    expr = cp_build_addr_expr (expr, complain);\n \t  return expr;\n \t}\n-      else if (good == 0 && badargs)\n+      else if (good == 0 && badargs && (complain & tf_error))\n \t/* There were no good options and at least one bad one, so let the\n \t   user know what the problem is.  */\n-\tinstantiate_template (badfn, badargs, tf_warning_or_error);\n+\tinstantiate_template (badfn, badargs, complain);\n     }\n   return orig_expr;\n }\n@@ -23880,7 +23880,7 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  init = resolve_nondeduced_context (init);\n+  init = resolve_nondeduced_context (init, complain);\n \n   if (AUTO_IS_DECLTYPE (auto_node))\n     {"}, {"sha": "69c39055d8b64dea628c4441dc77be738f854728", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -242,7 +242,7 @@ get_tinfo_decl_dynamic (tree exp, tsubst_flags_t complain)\n   if (error_operand_p (exp))\n     return error_mark_node;\n \n-  exp = resolve_nondeduced_context (exp);\n+  exp = resolve_nondeduced_context (exp, complain);\n \n   /* peel back references, so they match.  */\n   type = non_reference (TREE_TYPE (exp));"}, {"sha": "0cf5f930b1e987d60e4bcd92d1881c12715e74f2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -8699,7 +8699,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \n   /* The type denoted by decltype(e) is defined as follows:  */\n \n-  expr = resolve_nondeduced_context (expr);\n+  expr = resolve_nondeduced_context (expr, complain);\n \n   if (invalid_nonstatic_memfn_p (input_location, expr, complain))\n     return error_mark_node;"}, {"sha": "c9fa11290088da425b27813198e6455d07b27428", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -1932,7 +1932,7 @@ decay_conversion (tree exp,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  exp = resolve_nondeduced_context (exp);\n+  exp = resolve_nondeduced_context (exp, complain);\n   if (type_unknown_p (exp))\n     {\n       if (complain & tf_error)"}, {"sha": "0f954328eb471c2321dc98f75035d89f17e1dca2", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae56.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f0d909aa9f55f5780128ffd6e15e6d628e9a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae56.C?ref=46f0d909aa9f55f5780128ffd6e15e6d628e9a7b", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/68926\n+// { dg-do compile { target c++11 } }\n+\n+struct true_type { static constexpr bool value = true; };\n+struct false_type { static constexpr bool value = false; };\n+\n+template<bool Cond> struct enable_if { using type = void; };\n+template<> struct enable_if<false> { };\n+\n+template<typename T, typename U> struct is_same : false_type { };\n+template<typename T> struct is_same<T, T> : true_type { };\n+\n+template<typename T>\n+typename enable_if<is_same<int, T>::value>::type\n+func();\n+\n+template<typename T, typename = decltype(func<T>)>\n+true_type test(T);\n+\n+false_type test(...);\n+\n+int main()\n+{\n+   decltype(test(0))::value;   // ok\n+   decltype(test(0.f))::value; // error\n+}"}]}