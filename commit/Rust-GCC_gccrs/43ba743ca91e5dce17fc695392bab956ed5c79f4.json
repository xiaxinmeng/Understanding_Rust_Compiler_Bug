{"sha": "43ba743ca91e5dce17fc695392bab956ed5c79f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiYTc0M2NhOTFlNWRjZTE3ZmM2OTUzOTJiYWI5NTZlZDVjNzlmNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-09T20:13:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-09T20:13:59Z"}, "message": "loop-invariant.c (replace_uses): New static function.\n\n\t* loop-invariant.c (replace_uses): New static function.\n\t(move_invariant_reg): Use it to ensure we can replace the uses.\n\nFrom-SVN: r158175", "tree": {"sha": "1f528beef181721a7f1de1d4926dfe42df0954a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f528beef181721a7f1de1d4926dfe42df0954a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ba743ca91e5dce17fc695392bab956ed5c79f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ba743ca91e5dce17fc695392bab956ed5c79f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ba743ca91e5dce17fc695392bab956ed5c79f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ba743ca91e5dce17fc695392bab956ed5c79f4/comments", "author": null, "committer": null, "parents": [{"sha": "c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3fd7b4dbf30278f2842842291ab56a6bfd625f9"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "dd63a97edd2ee0e9e84c8f291dcb89bbd41c6898", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ba743ca91e5dce17fc695392bab956ed5c79f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ba743ca91e5dce17fc695392bab956ed5c79f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43ba743ca91e5dce17fc695392bab956ed5c79f4", "patch": "@@ -1,8 +1,14 @@\n-2010-04-09  Hariharan Sandanagobalane <hariharan@picochip.com>\n+2010-04-09  Eric Botcazou  <ebotcazou@adacore.com>\n+            Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+\n+\t* loop-invariant.c (replace_uses): New static function.\n+\t(move_invariant_reg): Use it to ensure we can replace the uses.\n+\n+2010-04-09  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n \t* config/picochip/picochip.c (picochip_rtx_costs): Use correct function\n \ttemplate.\n-\t(picochip_override_options): Enable section anchors only above O1.\n+\t(picochip_override_options): Enable section anchors only above -O1.\n \t(picochip_reorg): Fixed a couple of build warnings.\n \n 2010-04-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n@@ -62,8 +68,7 @@\n \n 2010-04-09  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-pretty-print.c (dump_generic_node): Dump\n-\tTYPE_VECTOR_SUBPARTS.\n+\t* tree-pretty-print.c (dump_generic_node): Dump TYPE_VECTOR_SUBPARTS.\n \n 2010-04-09  Iain Sandoe  <iains@gcc.gnu.org>\n "}, {"sha": "2f38123c7d4454213bacfe6ea0e976fd8fb33d4e", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ba743ca91e5dce17fc695392bab956ed5c79f4/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ba743ca91e5dce17fc695392bab956ed5c79f4/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=43ba743ca91e5dce17fc695392bab956ed5c79f4", "patch": "@@ -1367,6 +1367,32 @@ find_invariants_to_move (bool speed)\n     }\n }\n \n+/* Replace the uses, reached by the definition of invariant INV, by REG.\n+\n+   IN_GROUP is nonzero if this is part of a group of changes that must be\n+   performed as a group.  In that case, the changes will be stored.  The\n+   function `apply_change_group' will validate and apply the changes.  */\n+\n+static int\n+replace_uses (struct invariant *inv, rtx reg, bool in_group)\n+{\n+  /* Replace the uses we know to be dominated.  It saves work for copy\n+     propagation, and also it is necessary so that dependent invariants\n+     are computed right.  */\n+  if (inv->def)\n+    {\n+      struct use *use;\n+      for (use = inv->def->uses; use; use = use->next)\n+\tvalidate_change (use->insn, use->pos, reg, true);\n+\n+      /* If we aren't part of a larger group, apply the changes now.  */\n+      if (!in_group)\n+\treturn apply_change_group ();\n+    }\n+\n+  return 1;\n+}\n+\n /* Move invariant INVNO out of the LOOP.  Returns true if this succeeds, false\n    otherwise.  */\n \n@@ -1378,15 +1404,14 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n   unsigned i;\n   basic_block preheader = loop_preheader_edge (loop)->src;\n   rtx reg, set, dest, note;\n-  struct use *use;\n   bitmap_iterator bi;\n-  int regno;\n+  int regno = -1;\n \n   if (inv->reg)\n     return true;\n   if (!repr->move)\n     return false;\n-  regno = -1;\n+\n   /* If this is a representative of the class of equivalent invariants,\n      really move the invariant.  Otherwise just replace its use with\n      the register used for the representative.  */\n@@ -1402,10 +1427,10 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n \t}\n \n       /* Move the set out of the loop.  If the set is always executed (we could\n-\t omit this condition if we know that the register is unused outside of the\n-\t loop, but it does not seem worth finding out) and it has no uses that\n-\t would not be dominated by it, we may just move it (TODO).  Otherwise we\n-\t need to create a temporary register.  */\n+\t omit this condition if we know that the register is unused outside of\n+\t the loop, but it does not seem worth finding out) and it has no uses\n+\t that would not be dominated by it, we may just move it (TODO).\n+\t Otherwise we need to create a temporary register.  */\n       set = single_set (inv->insn);\n       reg = dest = SET_DEST (set);\n       if (GET_CODE (reg) == SUBREG)\n@@ -1416,9 +1441,14 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n       reg = gen_reg_rtx_and_attrs (dest);\n \n       /* Try replacing the destination by a new pseudoregister.  */\n-      if (!validate_change (inv->insn, &SET_DEST (set), reg, false))\n+      validate_change (inv->insn, &SET_DEST (set), reg, true);\n+\n+      /* As well as all the dominated uses.  */\n+      replace_uses (inv, reg, true);\n+\n+      /* And validate all the changes.  */\n+      if (!apply_change_group ())\n \tgoto fail;\n-      df_insn_rescan (inv->insn);\n \n       emit_insn_after (gen_move_insn (dest, reg), inv->insn);\n       reorder_insns (inv->insn, inv->insn, BB_END (preheader));\n@@ -1441,27 +1471,16 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n \tgoto fail;\n       reg = repr->reg;\n       regno = repr->orig_regno;\n+      if (!replace_uses (inv, reg, false))\n+\tgoto fail;\n       set = single_set (inv->insn);\n       emit_insn_after (gen_move_insn (SET_DEST (set), reg), inv->insn);\n       delete_insn (inv->insn);\n     }\n \n-\n   inv->reg = reg;\n   inv->orig_regno = regno;\n \n-  /* Replace the uses we know to be dominated.  It saves work for copy\n-     propagation, and also it is necessary so that dependent invariants\n-     are computed right.  */\n-  if (inv->def)\n-    {\n-      for (use = inv->def->uses; use; use = use->next)\n-\t{\n-\t  *use->pos = reg;\n-\t  df_insn_rescan (use->insn);\n-\t}\n-    }\n-\n   return true;\n \n fail:"}]}