{"sha": "de46b50562981de0318ae2b817e62b82c78a7659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0NmI1MDU2Mjk4MWRlMDMxOGFlMmI4MTdlNjJiODJjNzhhNzY1OQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-01-16T15:38:03Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-01-16T15:38:03Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_ishft): Fix signed / unsigned issue.\n\n* trans-intrinsic.c (gfc_conv_intrinsic_ishft): Fix signed /\nunsigned issue.  Use build_int_cst instead of converting\ninteger_zero_node.  Remove unnecessary conversion.\n\nFrom-SVN: r93727", "tree": {"sha": "af4b915c81e651ea28f81d0e536e67aabe789f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4b915c81e651ea28f81d0e536e67aabe789f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de46b50562981de0318ae2b817e62b82c78a7659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de46b50562981de0318ae2b817e62b82c78a7659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de46b50562981de0318ae2b817e62b82c78a7659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de46b50562981de0318ae2b817e62b82c78a7659/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083b6717421551de719da50c1457e63e4fa4bbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083b6717421551de719da50c1457e63e4fa4bbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083b6717421551de719da50c1457e63e4fa4bbd9"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "cc89f45c80970f5ef180bccda22068926d8d6048", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b50562981de0318ae2b817e62b82c78a7659/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b50562981de0318ae2b817e62b82c78a7659/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=de46b50562981de0318ae2b817e62b82c78a7659", "patch": "@@ -1,3 +1,9 @@\n+2005-01-16  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ishft): Fix signed /\n+\tunsigned issue.  Use build_int_cst instead of converting\n+\tinteger_zero_node.  Remove unnecessary conversion.\n+\n 2005-01-16  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR 19168"}, {"sha": "e133ec748900db14e239f5b3bf3a9dfb54a39ceb", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b50562981de0318ae2b817e62b82c78a7659/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b50562981de0318ae2b817e62b82c78a7659/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=de46b50562981de0318ae2b817e62b82c78a7659", "patch": "@@ -1785,34 +1785,31 @@ gfc_conv_intrinsic_ishft (gfc_se * se, gfc_expr * expr)\n   type = TREE_TYPE (arg);\n   utype = gfc_unsigned_type (type);\n \n-  /* We convert to an unsigned type because we want a logical shift.\n-     The standard doesn't define the case of shifting negative\n-     numbers, and we try to be compatible with other compilers, most\n-     notably g77, here.  */\n-  arg = convert (utype, arg);\n   width = fold (build1 (ABS_EXPR, TREE_TYPE (arg2), arg2));\n \n   /* Left shift if positive.  */\n   lshift = fold (build2 (LSHIFT_EXPR, type, arg, width));\n \n-  /* Right shift if negative.  */\n-  rshift = convert (type, fold (build2 (RSHIFT_EXPR, utype, arg, width)));\n+  /* Right shift if negative.\n+     We convert to an unsigned type because we want a logical shift.\n+     The standard doesn't define the case of shifting negative\n+     numbers, and we try to be compatible with other compilers, most\n+     notably g77, here.  */\n+  rshift = fold_convert (type, build2 (RSHIFT_EXPR, utype, \n+\t\t\t\t       convert (type, arg), width));\n \n   tmp = fold (build2 (GE_EXPR, boolean_type_node, arg2,\n-\t\t      convert (TREE_TYPE (arg2), integer_zero_node)));\n+\t\t      build_int_cst (TREE_TYPE (arg2), 0)));\n   tmp = fold (build3 (COND_EXPR, type, tmp, lshift, rshift));\n \n   /* The Fortran standard allows shift widths <= BIT_SIZE(I), whereas\n      gcc requires a shift width < BIT_SIZE(I), so we have to catch this\n      special case.  */\n-  num_bits = convert (TREE_TYPE (arg2),\n-\t\t      build_int_cst (NULL, TYPE_PRECISION (type)));\n-  cond = fold (build2 (GE_EXPR, boolean_type_node, width,\n-\t\t       convert (TREE_TYPE (arg2), num_bits)));\n+  num_bits = build_int_cst (TREE_TYPE (arg2), TYPE_PRECISION (type));\n+  cond = fold (build2 (GE_EXPR, boolean_type_node, width, num_bits));\n \n   se->expr = fold (build3 (COND_EXPR, type, cond,\n-\t\t\t   convert (type, integer_zero_node),\n-\t\t\t   tmp));\n+\t\t\t   build_int_cst (type, 0), tmp));\n }\n \n /* Circular shift.  AKA rotate or barrel shift.  */"}]}