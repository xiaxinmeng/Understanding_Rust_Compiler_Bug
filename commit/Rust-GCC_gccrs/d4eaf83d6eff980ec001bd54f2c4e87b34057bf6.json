{"sha": "d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "node_id": "C_kwDOANBUbNoAKGQ0ZWFmODNkNmVmZjk4MGVjMDAxYmQ1NGYyYzRlODdiMzQwNTdiZjY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-25T21:25:21Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-09T14:42:23Z"}, "message": "ada: Simplify finalization of temporaries created for interface objects\n\nThe expansion of (class-wide) interface objects generates a temporary that\nholds the actual data and the objects are rewritten as the renaming of the\ndereference at the interface tag present in it. These temporaries may need\nto be finalized and this is currently done through the renamings, by using\npattern matching to recognize the original source constructs.\n\nNow these temporaries may also need to be adjusted and this is currently\ndone \"naturally\", i.e. by using the standard machinery for them, so there\nis no fundamental reason why the finalization cannot be done this way too.\n\nTherefore this changes removes the special machinery implemented for their\nfinalization and let them be handled by the standard one instead.\n\ngcc/ada/\n\n\t* exp_util.ads (Is_Tag_To_Class_Wide_Conversion): Delete.\n\t(Is_Displacement_Of_Object_Or_Function_Result): Likewise.\n\t* exp_util.adb (Is_Tag_To_Class_Wide_Conversion): Rename to...\n\t(Is_Temporary_For_Interface_Object): ...this.\n\t(Is_Finalizable_Transient): Adjust call to above renaming.\n\t(Is_Displacement_Of_Object_Or_Function_Result): Delete.\n\t(Requires_Cleanup_Actions): Remove special handling of the\n\ttemporaries created for interface objects.\n\t* exp_ch7.adb (Build_Finalizer): Likewise.", "tree": {"sha": "20c6dcccd41d97fe319e521314182d8447ac0258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c6dcccd41d97fe319e521314182d8447ac0258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46034c46f82dec169fe7fc7c2d82d8321d9a9512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46034c46f82dec169fe7fc7c2d82d8321d9a9512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46034c46f82dec169fe7fc7c2d82d8321d9a9512"}], "stats": {"total": 317, "additions": 31, "deletions": 286}, "files": [{"sha": "f29a97a0ceb6248708e78dee75c766d390befac1", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "patch": "@@ -2264,16 +2264,13 @@ package body Exp_Ch7 is\n                --  The object is of the form:\n                --    Obj : [constant] Typ [:= Expr];\n \n-               --  Do not process tag-to-class-wide conversions because they do\n-               --  not yield an object. Do not process the incomplete view of a\n-               --  deferred constant. Note that an object initialized by means\n-               --  of a build-in-place function call may appear as a deferred\n-               --  constant after expansion activities. These kinds of objects\n-               --  must be finalized.\n+               --  Do not process the incomplete view of a deferred constant.\n+               --  Note that an object initialized by means of a BIP function\n+               --  call may appear as a deferred constant after expansion\n+               --  activities. These kinds of objects must be finalized.\n \n                elsif not Is_Imported (Obj_Id)\n                  and then Needs_Finalization (Obj_Typ)\n-                 and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n                  and then not (Ekind (Obj_Id) = E_Constant\n                                 and then not Has_Completion (Obj_Id)\n                                 and then No (BIP_Initialization_Call (Obj_Id)))\n@@ -2388,23 +2385,6 @@ package body Exp_Ch7 is\n                  and then Present (Status_Flag_Or_Transient_Decl (Obj_Id))\n                then\n                   Processing_Actions (Has_No_Init => True);\n-\n-               --  Detect a case where a source object has been initialized by\n-               --  a controlled function call or another object which was later\n-               --  rewritten as a class-wide conversion of Ada.Tags.Displace:\n-\n-               --     Obj1 : CW_Type := Function_Call (...);\n-               --     Obj2 : CW_Type := Src_Obj;\n-\n-               --     Tmp  : ... := Function_Call (...)'reference;\n-               --     Rnn  : access CW_Type := (... Ada.Tags.Displace (Tmp));\n-               --     Obj1 : CW_Type renames Rnn.all;\n-\n-               --     Rnn : access CW_Type := (...Ada.Tags.Displace (Src_Obj));\n-               --     Obj2 : CW_Type renames Rnn.all;\n-\n-               elsif Is_Displacement_Of_Object_Or_Function_Result (Obj_Id) then\n-                  Processing_Actions (Has_No_Init => True);\n                end if;\n \n             --  Inspect the freeze node of an access-to-controlled type and"}, {"sha": "e89c6a91e6095a9f7bde39a38d999f95b05b0304", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 27, "deletions": 250, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "patch": "@@ -168,9 +168,10 @@ package body Exp_Util is\n    --  Force evaluation of bounds of a slice, which may be given by a range\n    --  or by a subtype indication with or without a constraint.\n \n-   function Is_Verifiable_DIC_Pragma (Prag : Node_Id) return Boolean;\n-   --  Determine whether pragma Default_Initial_Condition denoted by Prag has\n-   --  an assertion expression that should be verified at run time.\n+   function Is_Temporary_For_Interface_Object\n+     (Obj_Id : Entity_Id) return Boolean;\n+   --  Determine whether Obj_Id is a temporary created for the handling of a\n+   --  (class-wide) interface object.\n \n    function Is_Uninitialized_Aggregate\n      (Exp : Node_Id;\n@@ -182,6 +183,10 @@ package body Exp_Util is\n    --  the bounds of the aggregate can be propagated directly to the\n    --  object declaration.\n \n+   function Is_Verifiable_DIC_Pragma (Prag : Node_Id) return Boolean;\n+   --  Determine whether pragma Default_Initial_Condition denoted by Prag has\n+   --  an assertion expression that should be verified at run time.\n+\n    function Make_CW_Equivalent_Type\n      (T : Entity_Id;\n       E : Node_Id) return Entity_Id;\n@@ -8185,216 +8190,6 @@ package body Exp_Util is\n       end if;\n    end Is_Captured_Function_Call;\n \n-   --------------------------------------------------\n-   -- Is_Displacement_Of_Object_Or_Function_Result --\n-   --------------------------------------------------\n-\n-   function Is_Displacement_Of_Object_Or_Function_Result\n-     (Obj_Id : Entity_Id) return Boolean\n-   is\n-      function Is_Controlled_Function_Call (N : Node_Id) return Boolean;\n-      --  Determine whether node N denotes a controlled function call\n-\n-      function Is_Controlled_Indexing (N : Node_Id) return Boolean;\n-      --  Determine whether node N denotes a generalized indexing form which\n-      --  involves a controlled result.\n-\n-      function Is_Displace_Call (N : Node_Id) return Boolean;\n-      --  Determine whether node N denotes a call to Ada.Tags.Displace\n-\n-      function Is_Source_Object (N : Node_Id) return Boolean;\n-      --  Determine whether a particular node denotes a source object\n-\n-      function Strip (N : Node_Id) return Node_Id;\n-      --  Examine arbitrary node N by stripping various indirections and return\n-      --  the \"real\" node.\n-\n-      ---------------------------------\n-      -- Is_Controlled_Function_Call --\n-      ---------------------------------\n-\n-      function Is_Controlled_Function_Call (N : Node_Id) return Boolean is\n-         Expr : Node_Id;\n-\n-      begin\n-         --  When a function call appears in Object.Operation format, the\n-         --  original representation has several possible forms depending on\n-         --  the availability and form of actual parameters:\n-\n-         --    Obj.Func                    N_Selected_Component\n-         --    Obj.Func (Actual)           N_Indexed_Component\n-         --    Obj.Func (Formal => Actual) N_Function_Call, whose Name is an\n-         --                                N_Selected_Component\n-\n-         Expr := Original_Node (N);\n-         loop\n-            if Nkind (Expr) = N_Function_Call then\n-               Expr := Name (Expr);\n-\n-            --  \"Obj.Func (Actual)\" case\n-\n-            elsif Nkind (Expr) = N_Indexed_Component then\n-               Expr := Prefix (Expr);\n-\n-            --  \"Obj.Func\" or \"Obj.Func (Formal => Actual) case\n-\n-            elsif Nkind (Expr) = N_Selected_Component then\n-               Expr := Selector_Name (Expr);\n-\n-            else\n-               exit;\n-            end if;\n-         end loop;\n-\n-         return\n-           Nkind (Expr) in N_Has_Entity\n-             and then Present (Entity (Expr))\n-             and then Ekind (Entity (Expr)) = E_Function\n-             and then Needs_Finalization (Etype (Entity (Expr)));\n-      end Is_Controlled_Function_Call;\n-\n-      ----------------------------\n-      -- Is_Controlled_Indexing --\n-      ----------------------------\n-\n-      function Is_Controlled_Indexing (N : Node_Id) return Boolean is\n-         Expr : constant Node_Id := Original_Node (N);\n-\n-      begin\n-         return\n-           Nkind (Expr) = N_Indexed_Component\n-             and then Present (Generalized_Indexing (Expr))\n-             and then Needs_Finalization (Etype (Expr));\n-      end Is_Controlled_Indexing;\n-\n-      ----------------------\n-      -- Is_Displace_Call --\n-      ----------------------\n-\n-      function Is_Displace_Call (N : Node_Id) return Boolean is\n-         Call : constant Node_Id := Strip (N);\n-\n-      begin\n-         return\n-           Present (Call)\n-             and then Nkind (Call) = N_Function_Call\n-             and then Nkind (Name (Call)) in N_Has_Entity\n-             and then Is_RTE (Entity (Name (Call)), RE_Displace);\n-      end Is_Displace_Call;\n-\n-      ----------------------\n-      -- Is_Source_Object --\n-      ----------------------\n-\n-      function Is_Source_Object (N : Node_Id) return Boolean is\n-         Obj : constant Node_Id := Strip (N);\n-\n-      begin\n-         return\n-           Present (Obj)\n-             and then Comes_From_Source (Obj)\n-             and then Nkind (Obj) in N_Has_Entity\n-             and then Is_Object (Entity (Obj));\n-      end Is_Source_Object;\n-\n-      -----------\n-      -- Strip --\n-      -----------\n-\n-      function Strip (N : Node_Id) return Node_Id is\n-         Result : Node_Id;\n-\n-      begin\n-         Result := N;\n-         loop\n-            if Nkind (Result) = N_Explicit_Dereference then\n-               Result := Prefix (Result);\n-\n-            elsif Nkind (Result) in\n-                    N_Type_Conversion | N_Unchecked_Type_Conversion\n-            then\n-               Result := Expression (Result);\n-\n-            else\n-               exit;\n-            end if;\n-         end loop;\n-\n-         return Result;\n-      end Strip;\n-\n-      --  Local variables\n-\n-      Obj_Decl  : constant Node_Id   := Declaration_Node (Obj_Id);\n-      Obj_Typ   : constant Entity_Id := Base_Type (Etype (Obj_Id));\n-      Orig_Decl : constant Node_Id   := Original_Node (Obj_Decl);\n-      Orig_Expr : Node_Id;\n-\n-   --  Start of processing for Is_Displacement_Of_Object_Or_Function_Result\n-\n-   begin\n-      --  Case 1:\n-\n-      --     Obj : CW_Type := Function_Call (...);\n-\n-      --  is rewritten into:\n-\n-      --     Tmp : ... := Function_Call (...)'reference;\n-      --     Rnn : constant access CW_Type := (... Ada.Tags.Displace (Tmp));\n-      --     Obj : CW_Type renames Rnn.all;\n-\n-      --  where the return type of the function and the class-wide type require\n-      --  dispatch table pointer displacement.\n-\n-      --  Case 2:\n-\n-      --     Obj : CW_Type := Container (...);\n-\n-      --  is rewritten into:\n-\n-      --     Tmp : ... := Function_Call (Container, ...)'reference;\n-      --     Rnn : constant access CW_Type := (... Ada.Tags.Displace (Tmp));\n-      --     Obj : CW_Type renames Rnn.all;\n-\n-      --  where the container element type and the class-wide type require\n-      --  dispatch table pointer dispacement.\n-\n-      --  Case 3:\n-\n-      --     Obj : CW_Type := Src_Obj;\n-\n-      --  is rewritten into:\n-\n-      --     Rnn : constant access CW_Type := (...Ada.Tags.Displace (Src_Obj));\n-      --     Obj : CW_Type renames Rnn.all;\n-\n-      --  where the type of the source object and the class-wide type require\n-      --  dispatch table pointer displacement.\n-\n-      if Nkind (Obj_Decl) = N_Object_Renaming_Declaration\n-        and then Is_Class_Wide_Type (Obj_Typ)\n-        and then not Is_Special_Return_Object (Obj_Id)\n-        and then Nkind (Renamed_Object (Obj_Id)) = N_Explicit_Dereference\n-        and then Is_Entity_Name (Prefix (Renamed_Object (Obj_Id)))\n-        and then Ekind (Entity (Prefix (Renamed_Object (Obj_Id)))) = E_Constant\n-        and then\n-          Is_Displace_Call\n-            (Constant_Value (Entity (Prefix (Renamed_Object (Obj_Id)))))\n-        and then Nkind (Orig_Decl) = N_Object_Declaration\n-        and then Comes_From_Source (Orig_Decl)\n-      then\n-         Orig_Expr := Expression (Orig_Decl);\n-\n-         return\n-           Is_Controlled_Function_Call (Orig_Expr)\n-             or else Is_Controlled_Indexing (Orig_Expr)\n-             or else Is_Source_Object (Orig_Expr);\n-\n-      else\n-         return False;\n-      end if;\n-   end Is_Displacement_Of_Object_Or_Function_Result;\n-\n    ------------------------------\n    -- Is_Finalizable_Transient --\n    ------------------------------\n@@ -8845,9 +8640,10 @@ package body Exp_Util is\n \n           and then not Initialized_By_Aliased_BIP_Func_Call (Obj_Id)\n \n-          --  Do not consider conversions of tags to class-wide types\n+          --  Do not consider temporaries created for (class-wide) interface\n+          --  objects because they must exist as long as the object is around.\n \n-          and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n+          and then not Is_Temporary_For_Interface_Object (Obj_Id)\n \n           --  Do not consider iterators because those are treated as normal\n           --  controlled objects and are processed by the usual finalization\n@@ -9356,22 +9152,23 @@ package body Exp_Util is\n         and then Has_Controlling_Result (Id);\n    end Is_Secondary_Stack_Thunk;\n \n-   -------------------------------------\n-   -- Is_Tag_To_Class_Wide_Conversion --\n-   -------------------------------------\n+   ---------------------------------------\n+   -- Is_Temporary_For_Interface_Object --\n+   ---------------------------------------\n \n-   function Is_Tag_To_Class_Wide_Conversion\n+   function Is_Temporary_For_Interface_Object\n      (Obj_Id : Entity_Id) return Boolean\n    is\n-      Expr : constant Node_Id := Expression (Parent (Obj_Id));\n+      Expr : constant Node_Id := Expression (Declaration_Node (Obj_Id));\n \n    begin\n-      return\n-        Is_Class_Wide_Type (Etype (Obj_Id))\n-          and then Present (Expr)\n-          and then Nkind (Expr) = N_Unchecked_Type_Conversion\n-          and then Is_RTE (Etype (Expression (Expr)), RE_Tag);\n-   end Is_Tag_To_Class_Wide_Conversion;\n+      --  This must be kept synchronized with Expand_N_Object_Declaration\n+\n+      return Is_Class_Wide_Type (Etype (Obj_Id))\n+        and then Present (Expr)\n+        and then Nkind (Expr) = N_Unchecked_Type_Conversion\n+        and then Is_RTE (Etype (Expression (Expr)), RE_Tag);\n+   end Is_Temporary_For_Interface_Object;\n \n    --------------------------------\n    -- Is_Uninitialized_Aggregate --\n@@ -12880,16 +12677,13 @@ package body Exp_Util is\n             --  The object is of the form:\n             --    Obj : [constant] Typ [:= Expr];\n             --\n-            --  Do not process tag-to-class-wide conversions because they do\n-            --  not yield an object. Do not process the incomplete view of a\n-            --  deferred constant. Note that an object initialized by means\n-            --  of a build-in-place function call may appear as a deferred\n-            --  constant after expansion activities. These kinds of objects\n-            --  must be finalized.\n+            --  Do not process the incomplete view of a deferred constant.\n+            --  Note that an object initialized by means of a BIP function\n+            --  call may appear as a deferred constant after expansion\n+            --  activities. These kinds of objects must be finalized.\n \n             elsif not Is_Imported (Obj_Id)\n               and then Needs_Finalization (Obj_Typ)\n-              and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n               and then not (Ekind (Obj_Id) = E_Constant\n                              and then not Has_Completion (Obj_Id)\n                              and then No (BIP_Initialization_Call (Obj_Id)))\n@@ -12975,23 +12769,6 @@ package body Exp_Util is\n               and then Present (Status_Flag_Or_Transient_Decl (Obj_Id))\n             then\n                return True;\n-\n-            --  Detect a case where a source object has been initialized by\n-            --  a controlled function call or another object which was later\n-            --  rewritten as a class-wide conversion of Ada.Tags.Displace:\n-\n-            --     Obj1 : CW_Type := Function_Call (...);\n-            --     Obj2 : CW_Type := Src_Obj;\n-\n-            --     Tmp  : ... := Function_Call (...)'reference;\n-            --     Rnn  : access CW_Type := (... Ada.Tags.Displace (Tmp));\n-            --     Obj1 : CW_Type renames Rnn.all;\n-\n-            --     Rnn  : access CW_Type := (... Ada.Tags.Displace (Src_Obj));\n-            --     Obj2 : CW_Type renames Rnn.all;\n-\n-            elsif Is_Displacement_Of_Object_Or_Function_Result (Obj_Id) then\n-               return True;\n             end if;\n \n          --  Inspect the freeze node of an access-to-controlled type and look"}, {"sha": "0b6cb235cda26c3132aa5c4e5133e021456c071d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4eaf83d6eff980ec001bd54f2c4e87b34057bf6/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=d4eaf83d6eff980ec001bd54f2c4e87b34057bf6", "patch": "@@ -765,13 +765,6 @@ package Exp_Util is\n    --    Rnn : constant Ann := Func (...)'reference;\n    --    Rnn.all\n \n-   function Is_Displacement_Of_Object_Or_Function_Result\n-     (Obj_Id : Entity_Id) return Boolean;\n-   --  Determine whether Obj_Id is a source entity that has been initialized by\n-   --  either a controlled function call or the assignment of another source\n-   --  object. In both cases the initialization expression is rewritten as a\n-   --  class-wide conversion of Ada.Tags.Displace.\n-\n    function Is_Finalizable_Transient\n      (Decl     : Node_Id;\n       Rel_Node : Node_Id) return Boolean;\n@@ -851,11 +844,6 @@ package Exp_Util is\n \n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n-   function Is_Tag_To_Class_Wide_Conversion\n-     (Obj_Id : Entity_Id) return Boolean;\n-   --  Determine whether object Obj_Id is the result of a tag-to-class-wide\n-   --  type conversion.\n-\n    function Is_Untagged_Derivation (T : Entity_Id) return Boolean;\n    --  Returns true if type T is not tagged and is a derived type,\n    --  or is a private type whose completion is such a type."}]}