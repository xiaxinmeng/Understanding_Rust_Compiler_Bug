{"sha": "b4519d39bc85072ea1ec7b4ad254481d387a695c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1MTlkMzliYzg1MDcyZWExZWM3YjRhZDI1NDQ4MWQzODdhNjk1Yw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-02-01T00:09:40Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-02-01T00:09:40Z"}, "message": "re PR c/19333 (C front end accepts arrays of incomplete types)\n\ngcc/\n        PR c/19333\n        * c-decl.c (start_decl): Do not warn about arrays of elements with\n        an incomplete type here.\n        (grokdeclarator): Do it here by making a pedwarn an error.\n        * c-typeck.c (push_init_level): If there were previous errors with\n        the constructor type, do not warn about braces for initializers.\n        (process_init_element): Likewise for excess initializer elements.\n\ntestsuite/\n        PR c/19333\n        * testsuite/gcc.c-torture/compile/20011130-1.c: Reorder to make\n        the test case valid.\n        * testsuite/gcc.dg/20030815-1.c: Remove invalid tests.\n        * testsuite/gcc.dg/array-7.c: Adjust expected result.\n        * testsuite/gcc.dg/pr18596-3.c: Likewise.\n        * testsuite/gcc.dg/noncompile/20000901-1.c: Likewise.\n        * testsuite/gcc.dg/noncompile/init-2.c: Likewise.\n        * testsuite/gcc.dg/noncompile/init-4.c: Likewise.\n\nFrom-SVN: r94505", "tree": {"sha": "5108a646eac36fa7b89c3f975f94db1d1aa39c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5108a646eac36fa7b89c3f975f94db1d1aa39c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4519d39bc85072ea1ec7b4ad254481d387a695c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4519d39bc85072ea1ec7b4ad254481d387a695c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4519d39bc85072ea1ec7b4ad254481d387a695c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4519d39bc85072ea1ec7b4ad254481d387a695c/comments", "author": null, "committer": null, "parents": [{"sha": "286972677eedc731d85a7758a86023b9ebdc2b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286972677eedc731d85a7758a86023b9ebdc2b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286972677eedc731d85a7758a86023b9ebdc2b08"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "7275decf14d0fcba2ecd33b966e6aed8ecb5fd94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1,3 +1,13 @@\n+2005-01-31  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR c/19333\n+\t* c-decl.c (start_decl): Do not warn about arrays of elements with\n+\tan incomplete type here.\n+\t(grokdeclarator): Do it here by making a pedwarn an error.\n+\t* c-typeck.c (push_init_level): If there were previous errors with\n+\tthe constructor type, do not warn about braces for initializers.\n+\t(process_init_element): Likewise for excess initializer elements.\n+\n 2005-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c (delete_trivially_dead_insn): Don't iterate."}, {"sha": "ad76f235de9181207a273d73c0cd54241a00f1d3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -3039,11 +3039,6 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t    error (\"variable %qD has initializer but incomplete type\", decl);\n \t    initialized = 0;\n \t  }\n-\telse if (!COMPLETE_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n-\t  {\n-\t    error (\"elements of array %qD have incomplete type\", decl);\n-\t    initialized = 0;\n-\t  }\n \telse if (C_DECL_VARIABLE_SIZE (decl))\n \t  {\n \t    /* Although C99 is unclear about whether incomplete arrays\n@@ -4148,11 +4143,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\titype = build_range_type (sizetype, size_zero_node, NULL_TREE);\n \t      }\n \n-\t    /* If pedantic, complain about arrays of incomplete types.  */\n-\t    if (pedantic && !COMPLETE_TYPE_P (type))\n-\t      pedwarn (\"array type has incomplete element type\");\n-\n-\t    type = build_array_type (type, itype);\n+\t     /* Complain about arrays of incomplete types.  */\n+\t    if (!COMPLETE_TYPE_P (type))\n+\t      {\n+\t\terror (\"array type has incomplete element type\");\n+\t        type = error_mark_node;\n+\t      }\n+\t    else\n+\t      type = build_array_type (type, itype);\n \n \t    if (size_varies)\n \t      C_TYPE_VARIABLE_SIZE (type) = 1;"}, {"sha": "54f9714f514a5fc2c3b5ea9391aae306fb08105e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -4878,7 +4878,8 @@ push_init_level (int implicit)\n     }\n   else\n     {\n-      warning_init (\"braces around scalar initializer\");\n+      if (constructor_type != error_mark_node)\n+\twarning_init (\"braces around scalar initializer\");\n       constructor_fields = constructor_type;\n       constructor_unfilled_fields = constructor_type;\n     }\n@@ -6240,7 +6241,8 @@ process_init_element (struct c_expr value)\n \n       /* Handle the sole element allowed in a braced initializer\n \t for a scalar variable.  */\n-      else if (constructor_fields == 0)\n+      else if (constructor_type != error_mark_node\n+\t       && constructor_fields == 0)\n \t{\n \t  pedwarn_init (\"excess elements in scalar initializer\");\n \t  break;"}, {"sha": "258e232e8882a1a3f01effbe596dae7739bee176", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1,3 +1,15 @@\n+2005-01-31  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR c/19333\n+\t* testsuite/gcc.c-torture/compile/20011130-1.c: Reorder to make\n+\tthe test case valid.\n+\t* testsuite/gcc.dg/20030815-1.c: Remove invalid tests.\n+\t* testsuite/gcc.dg/array-7.c: Adjust expected result.\n+\t* testsuite/gcc.dg/pr18596-3.c: Likewise.\n+\t* testsuite/gcc.dg/noncompile/20000901-1.c: Likewise.\n+\t* testsuite/gcc.dg/noncompile/init-2.c: Likewise.\n+\t* testsuite/gcc.dg/noncompile/init-4.c: Likewise.\n+\n 2005-01-31  Dale Johannesen  <dalej@apple.com>\n \n \t* g++.dg/opt/pr19650.C:  New test.\n@@ -378,7 +390,7 @@\n \t* gfortran.dg/write_to_null.f90: New test.\n \n 2005-01-14  Andrew Pinski  <pinskia@physics.uc.edu>\n-            John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR other/19328\n \t* gcc.dg/attr-alias-2.c: dg-require-alias takes an\n@@ -617,7 +629,7 @@\n \n 2005-01-06  Mark Mitchell  <mark@codesourcery.com>\n \n-        PR c++/19244\n+\tPR c++/19244\n \t* g++.dg/parser/ctor2.C: New test.\n \n 2004-01-06  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n@@ -752,7 +764,7 @@\n 2004-12-30  Alexander Malmberg  <alexander@malmberg.org>\n \t    Ziemowit Laski  <zlaski@apple.com>\n \n-        PR objc/18971\n+\tPR objc/18971\n \t* objc.dg/encode-5.m: New test.\n \n 2004-12-29  Richard Henderson  <rth@redhat.com>\n@@ -1100,7 +1112,7 @@\n \t* cpp/inc/pragma-once-1a.h: Likewise.\n \n 2004-12-15  Bud Davis  <bdavis9659@comcast.net>\n-            Steven G. Kargl  <kargls@comcast.net>\n+\t    Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/17597\n \t* gfortran.dg/list_read_3.f90: New test.\n@@ -1525,7 +1537,7 @@\n \n 2004-11-30  Loren James Rittle  <ljrittle@acm.org>\n \n-        * g++.old-deja/g++.eh/badalloc1.C (arena_size): Bump up to 262144\n+\t* g++.old-deja/g++.eh/badalloc1.C (arena_size): Bump up to 262144\n \tto support new requirements on FreeBSD 5.\n \n 2004-11-30  Devang Patel  <dpatel@apple.com>\n@@ -1651,7 +1663,7 @@\n \n 2004-11-28  Bud Davis  <bdavis9659@comcast.net>\n \n-        * gfortran.dg/direct_io_2.f90: New test.\n+\t* gfortran.dg/direct_io_2.f90: New test.\n \n 2004-11-28  Hans-Peter Nilsson  <hp@bitrange.com>\n \n@@ -1900,7 +1912,7 @@\n \t* gcc.dg/vect/vect.exp (sparc*-*-*): Fix a couple of nits.\n \n 2004-11-19  Mark Mitchell  <mark@codesourcery.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* lib/target-supports.exp (check_visibility_available): Really\n \ttest the compiler.\n@@ -1925,12 +1937,12 @@\n \t* gcc.dg/ppc-mov-1.c: Ditto\n \n 2004-11-18  Daniel Jacobowitz  <dan@codesourcery.com>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/gcc.dg/pragma-init-fini-2.c: New test.\n \n 2004-11-17  Janis Johnson  <janis187@us.ibm.com>\n-            Aldy Hernandez  <aldyh@redhat.com>\n+\t    Aldy Hernandez  <aldyh@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_int): New\n \t(check_effective_target_vect_float): New\n@@ -2224,7 +2236,7 @@\n \t* gcc.dg/vect/pr18400.c: New test.\n \n 2004-11-14  Dorit Naishlos  <dorit@il.ibm.com>\n-            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/18425\n \t* gcc.dg/vect/pr18425.c: New test.\n@@ -2473,7 +2485,7 @@\n \n 2004-11-10  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c:\n+\t* gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c:\n \tNew test for PR tree-optimization/17892.\n \n 2004-11-09  Mark Mitchell  <mark@codesourcery.com>\n@@ -3137,7 +3149,7 @@\n 2004-10-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/16567\n-        * gcc.c-torture/compile/nested-1.c: New test.\n+\t* gcc.c-torture/compile/nested-1.c: New test.\n \n 2004-10-14  Dorit Naishlos  <dorit@il.ibm.com>\n "}, {"sha": "55d4af482f2d87cec01a71f73e74d45fdd422e20", "filename": "gcc/testsuite/gcc.c-torture/compile/20011130-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011130-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011130-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011130-1.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1,5 +1,5 @@\n-extern struct S x[];\n struct S { int i; };\n+extern struct S x[];\n char *bar (const struct S *);\n void foo (void)\n {"}, {"sha": "7bf21bd468501e2a321fe6fa4d709ca9989ad70b", "filename": "gcc/testsuite/gcc.dg/20030815-1.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2F20030815-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2F20030815-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030815-1.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -4,10 +4,6 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-typedef struct a A[1];\n-typedef struct b B[1];\n-typedef struct c C[1];\n-typedef struct d D[1];\n typedef struct a E;\n typedef struct b F;\n typedef struct c G;\n@@ -16,10 +12,6 @@ struct a { int a; };\n struct c { int c; };\n struct d { int d; };\n struct b { int b; };\n-int sa = sizeof (A);\n-int sb = sizeof (B);\n-int sc = sizeof (C);\n-int sd = sizeof (D);\n int se = sizeof (E);\n int sf = sizeof (F);\n int sg = sizeof (G);"}, {"sha": "9e70b26821a8fe4db1781c63e653d126e34603d8", "filename": "gcc/testsuite/gcc.dg/array-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Farray-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Farray-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-7.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -11,4 +11,4 @@ f (void)\n   struct foo { int a; int b; };\n }\n \n-struct foo array[5]; /* { dg-error \"storage size\" } */\n+struct foo array[5]; /* { dg-error \"array type has incomplete element type\" } */"}, {"sha": "ef5c3cbca43dad100da0f18bfac009c917f5e5f9", "filename": "gcc/testsuite/gcc.dg/noncompile/20000901-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1 +1 @@\n-struct foo bar[] = { {\"baz\"} }; /* { dg-error \"have incomplete type|excess elements|near|assumed|storage size\" } */\n+struct foo bar[] = { {\"baz\"} }; /* { dg-error \"array type has incomplete element type\" } */"}, {"sha": "b0699023a7780646bc3d3f2c206d21e644458982", "filename": "gcc/testsuite/gcc.dg/noncompile/init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-2.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1 +1 @@\n-int d[][] = { {1}, {2}, {3} };\t/* { dg-error \"incomplete type|storage size|one element\" } */\n+int d[][] = { {1}, {2}, {3} };\t/* { dg-error \"incomplete element type\" } */"}, {"sha": "782251fa30a26f0e18cf242288e7169116083873", "filename": "gcc/testsuite/gcc.dg/noncompile/init-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -1,2 +1 @@\n-struct a { char *b; } c[D] /* { dg-error \"undeclared\" } */\n-  = { { \"\" } } ;  /* { dg-warning \"braces around scalar initializer|near\" } */\n+struct a { char *b; } c[D]; /* { dg-error \"undeclared\" } */"}, {"sha": "c2a04f84c23b9adf6ff1f0265fc57c3175d07417", "filename": "gcc/testsuite/gcc.dg/pr18596-3.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4519d39bc85072ea1ec7b4ad254481d387a695c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18596-3.c?ref=b4519d39bc85072ea1ec7b4ad254481d387a695c", "patch": "@@ -10,5 +10,3 @@ int foo ()\n   static int j () = /* { dg-error \"invalid storage class\" } */\n \t{ 0, 0.0 };\n }\n-/* { dg-warning \"excess elements\" \"\" { target *-*-* } 11 } */\n-/* { dg-warning \"near initialization\" \"\" { target *-*-* } 11 } */"}]}