{"sha": "c42345448f356031cbb9f6cce1ed918f299f8891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyMzQ1NDQ4ZjM1NjAzMWNiYjlmNmNjZTFlZDkxOGYyOTlmODg5MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-10T17:21:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-10T17:21:34Z"}, "message": "ipa-icf.c (sem_function::equals_wpa): Move here some checks from ...\n\n\t* ipa-icf.c (sem_function::equals_wpa): Move here some checks\n\tfrom ...\n\t(sem_function::equals_wpa): ... here.\n\nFrom-SVN: r221327", "tree": {"sha": "17aba2e4fb9efd28c8f89a72d2a60622d1bdb18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17aba2e4fb9efd28c8f89a72d2a60622d1bdb18e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42345448f356031cbb9f6cce1ed918f299f8891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42345448f356031cbb9f6cce1ed918f299f8891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42345448f356031cbb9f6cce1ed918f299f8891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42345448f356031cbb9f6cce1ed918f299f8891/comments", "author": null, "committer": null, "parents": [{"sha": "fc30054eff136a33c545df9337dfb41ce93623a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc30054eff136a33c545df9337dfb41ce93623a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc30054eff136a33c545df9337dfb41ce93623a3"}], "stats": {"total": 134, "additions": 66, "deletions": 68}, "files": [{"sha": "6802d207a39bc44c8b0d7cb20cbb047929b4f8a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42345448f356031cbb9f6cce1ed918f299f8891/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42345448f356031cbb9f6cce1ed918f299f8891/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c42345448f356031cbb9f6cce1ed918f299f8891", "patch": "@@ -1,3 +1,9 @@\n+2015-03-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-icf.c (sem_function::equals_wpa): Move here some checks\n+\tfrom ...\n+\t(sem_function::equals_wpa): ... here.\n+\n 2015-03-10  Marek Polacek  <polacek@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "1f51cc17c5f1af77e0b35edaf4b653b0e7a39b36", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 60, "deletions": 68, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42345448f356031cbb9f6cce1ed918f299f8891/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42345448f356031cbb9f6cce1ed918f299f8891/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=c42345448f356031cbb9f6cce1ed918f299f8891", "patch": "@@ -406,6 +406,66 @@ sem_function::equals_wpa (sem_item *item,\n   if (arg_types.length () != m_compared_func->arg_types.length ())\n     return return_false_with_msg (\"different number of arguments\");\n \n+  /* Compare special function DECL attributes.  */\n+  if (DECL_FUNCTION_PERSONALITY (decl)\n+      != DECL_FUNCTION_PERSONALITY (item->decl))\n+    return return_false_with_msg (\"function personalities are different\");\n+\n+  if (DECL_DISREGARD_INLINE_LIMITS (decl)\n+      != DECL_DISREGARD_INLINE_LIMITS (item->decl))\n+    return return_false_with_msg (\"DECL_DISREGARD_INLINE_LIMITS are different\");\n+\n+  if (DECL_DECLARED_INLINE_P (decl) != DECL_DECLARED_INLINE_P (item->decl))\n+    return return_false_with_msg (\"inline attributes are different\");\n+\n+  if (DECL_IS_OPERATOR_NEW (decl) != DECL_IS_OPERATOR_NEW (item->decl))\n+    return return_false_with_msg (\"operator new flags are different\");\n+\n+  if (DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl)\n+       != DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (item->decl))\n+    return return_false_with_msg (\"intrument function entry exit \"\n+\t\t\t\t  \"attributes are different\");\n+\n+  if (DECL_NO_LIMIT_STACK (decl) != DECL_NO_LIMIT_STACK (item->decl))\n+    return return_false_with_msg (\"no stack limit attributes are different\");\n+\n+  if (flags_from_decl_or_type (decl) != flags_from_decl_or_type (item->decl))\n+    return return_false_with_msg (\"decl_or_type flags are different\");\n+\n+  /* Checking function TARGET and OPTIMIZATION flags.  */\n+  cl_target_option *tar1 = target_opts_for_fn (decl);\n+  cl_target_option *tar2 = target_opts_for_fn (item->decl);\n+\n+  if (tar1 != tar2 && !cl_target_option_eq (tar1, tar2))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"target flags difference\");\n+\t  cl_target_option_print_diff (dump_file, 2, tar1, tar2);\n+\t}\n+\n+      return return_false_with_msg (\"Target flags are different\");\n+    }\n+\n+  cl_optimization *opt1 = opts_for_fn (decl);\n+  cl_optimization *opt2 = opts_for_fn (item->decl);\n+\n+  if (opt1 != opt2 && memcmp (opt1, opt2, sizeof(cl_optimization)))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"optimization flags difference\");\n+\t  cl_optimization_print_diff (dump_file, 2, opt1, opt2);\n+\t}\n+\n+      return return_false_with_msg (\"optimization flags are different\");\n+    }\n+\n+  /* Result type checking.  */\n+  if (!func_checker::compatible_types_p (result_type,\n+\t\t\t\t\t m_compared_func->result_type))\n+    return return_false_with_msg (\"result types are different\");\n+\n   /* Checking types of arguments.  */\n   for (unsigned i = 0; i < arg_types.length (); i++)\n     {\n@@ -427,11 +487,6 @@ sem_function::equals_wpa (sem_item *item,\n \treturn return_false_with_msg (\"argument restrict flag mismatch\");\n     }\n \n-  /* Result type checking.  */\n-  if (!func_checker::compatible_types_p (result_type,\n-\t\t\t\t\t m_compared_func->result_type))\n-    return return_false_with_msg (\"result types are different\");\n-\n   if (node->num_references () != item->node->num_references ())\n     return return_false_with_msg (\"different number of references\");\n \n@@ -520,45 +575,6 @@ sem_function::equals_private (sem_item *item,\n   if (!equals_wpa (item, ignored_nodes))\n     return false;\n \n-  /* Checking function TARGET and OPTIMIZATION flags.  */\n-  cl_target_option *tar1 = target_opts_for_fn (decl);\n-  cl_target_option *tar2 = target_opts_for_fn (m_compared_func->decl);\n-\n-  if (tar1 != NULL && tar2 != NULL)\n-    {\n-      if (!cl_target_option_eq (tar1, tar2))\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"target flags difference\");\n-\t      cl_target_option_print_diff (dump_file, 2, tar1, tar2);\n-\t    }\n-\n-\t  return return_false_with_msg (\"Target flags are different\");\n-\t}\n-    }\n-  else if (tar1 != NULL || tar2 != NULL)\n-    return return_false_with_msg (\"Target flags are different\");\n-\n-  cl_optimization *opt1 = opts_for_fn (decl);\n-  cl_optimization *opt2 = opts_for_fn (m_compared_func->decl);\n-\n-  if (opt1 != NULL && opt2 != NULL)\n-    {\n-      if (memcmp (opt1, opt2, sizeof(cl_optimization)))\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"optimization flags difference\");\n-\t      cl_optimization_print_diff (dump_file, 2, opt1, opt2);\n-\t    }\n-\n-\t  return return_false_with_msg (\"optimization flags are different\");\n-\t}\n-    }\n-  else if (opt1 != NULL || opt2 != NULL)\n-    return return_false_with_msg (\"optimization flags are different\");\n-\n   /* Checking function arguments.  */\n   tree decl1 = DECL_ATTRIBUTES (decl);\n   tree decl2 = DECL_ATTRIBUTES (m_compared_func->decl);\n@@ -654,30 +670,6 @@ sem_function::equals_private (sem_item *item,\n     if (!compare_phi_node (bb_sorted[i]->bb, m_compared_func->bb_sorted[i]->bb))\n       return return_false_with_msg (\"PHI node comparison returns false\");\n \n-  /* Compare special function DECL attributes.  */\n-  if (DECL_FUNCTION_PERSONALITY (decl) != DECL_FUNCTION_PERSONALITY (item->decl))\n-    return return_false_with_msg (\"function personalities are different\");\n-\n-  if (DECL_DISREGARD_INLINE_LIMITS (decl) != DECL_DISREGARD_INLINE_LIMITS (item->decl))\n-    return return_false_with_msg (\"DECL_DISREGARD_INLINE_LIMITS are different\");\n-\n-  if (DECL_DECLARED_INLINE_P (decl) != DECL_DECLARED_INLINE_P (item->decl))\n-    return return_false_with_msg (\"inline attributes are different\");\n-\n-  if (DECL_IS_OPERATOR_NEW (decl) != DECL_IS_OPERATOR_NEW (item->decl))\n-    return return_false_with_msg (\"operator new flags are different\");\n-\n-  if (DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl)\n-       != DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (item->decl))\n-    return return_false_with_msg (\"intrument function entry exit \"\n-\t\t\t\t  \"attributes are different\");\n-\n-  if (DECL_NO_LIMIT_STACK (decl) != DECL_NO_LIMIT_STACK (item->decl))\n-    return return_false_with_msg (\"no stack limit attributes are different\");\n-\n-  if (flags_from_decl_or_type (decl) != flags_from_decl_or_type (item->decl))\n-    return return_false_with_msg (\"decl_or_type flags are different\");\n-\n   return result;\n }\n "}]}