{"sha": "e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1ZWE3MTBkZDZkNjFjOWVkNWI1MjAwYmQzZDBmNjEzMmFhNjA2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-18T15:53:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-18T15:53:10Z"}, "message": "stl_algobase.h (__copy_normal::copy_n): Uglify to __copy_n.\n\n2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (__copy_normal::copy_n): Uglify\n\tto __copy_n.\n\t(__copy_backward::copy_b): Likewise to __copy_b.\n\t(__copy_backward_normal::copy_b_n): Likewise to __copy_b_n.\n\t(copy, __copy_backward_aux, copy_backward): Adjust.\n\n2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (partial_sort_copy): Add\n\t_BinaryPredicateConcept<_Compare, _InputValueType, _OutputValueType>\n\t(merge, set_union, set_symmetric_difference): Add\n\t_OutputIteratorConcept<_OutputIterator, _ValueType2>.\n\t(binary_search): Remove redundant _BinaryPredicateConcept<_Compare,\n\t_ValueType, _Tp>, taken care by lower_bound.\n\t* include/bits/stl_algo.h: Cosmetic changes.\n\n2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n\t    Howard Hinnant  <hhinnant@apple.com>\n\n\t* include/bits/stl_algo.h (merge, includes, set_union,\n\tset_intersection, set_difference, set_symmetric_difference):\n\tFix concept checks.\n\n2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (partial_sort_copy, lower_bound,\n\tupper_bound, equal_range, binary_search): Fix concept checks.\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\n\nFrom-SVN: r108758", "tree": {"sha": "086f35a686b5b1ceef2e128838f83ecd813c5a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/086f35a686b5b1ceef2e128838f83ecd813c5a3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/comments", "author": null, "committer": null, "parents": [{"sha": "6a60530dd6117831168a4bb9ea402d14667d9c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a60530dd6117831168a4bb9ea402d14667d9c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a60530dd6117831168a4bb9ea402d14667d9c36"}], "stats": {"total": 281, "additions": 174, "deletions": 107}, "files": [{"sha": "0f9c90f70bc5d55ad5a94ca13e3134cf750ef32d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "patch": "@@ -1,3 +1,33 @@\n+2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (__copy_normal::copy_n): Uglify\n+\tto __copy_n.\n+\t(__copy_backward::copy_b): Likewise to __copy_b.\n+\t(__copy_backward_normal::copy_b_n): Likewise to __copy_b_n.\n+\t(copy, __copy_backward_aux, copy_backward): Adjust.\n+\n+2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (partial_sort_copy): Add\n+\t_BinaryPredicateConcept<_Compare, _InputValueType, _OutputValueType>\n+\t(merge, set_union, set_symmetric_difference): Add\n+\t_OutputIteratorConcept<_OutputIterator, _ValueType2>.\n+\t(binary_search): Remove redundant _BinaryPredicateConcept<_Compare,\n+\t_ValueType, _Tp>, taken care by lower_bound.\n+\t* include/bits/stl_algo.h: Cosmetic changes.\n+\n+2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n+\t    Howard Hinnant  <hhinnant@apple.com>\n+\n+\t* include/bits/stl_algo.h (merge, includes, set_union,\n+\tset_intersection, set_difference, set_symmetric_difference):\n+\tFix concept checks.\n+\n+2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (partial_sort_copy, lower_bound,\n+\tupper_bound, equal_range, binary_search): Fix concept checks.\n+\n 2005-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/abi/post: New."}, {"sha": "6cb9c0b7d7a2005ea8f4ccdf82d07564391febd0", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 125, "deletions": 90, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "patch": "@@ -2512,8 +2512,9 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,\n \t\t\t\t  _OutputValueType>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,\n+\t\t\t\t                     _OutputValueType>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_InputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_valid_range(__result_first, __result_last);\n \n@@ -2579,6 +2580,8 @@ namespace std\n \t\t\t\t  _RandomAccessIterator>)\n       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,\n \t\t\t\t  _OutputValueType>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _InputValueType, _OutputValueType>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _OutputValueType, _OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n@@ -2772,13 +2775,8 @@ namespace std\n \t_DistanceType;\n \n       // concept requirements\n-      // Note that these are slightly stricter than those of the 4-argument\n-      // version, defined next.  The difference is in the strictness of the\n-      // comparison operations... so for looser checking, define your own\n-      // comparison function, as was intended.\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n       __glibcxx_requires_partitioned(__first, __last, __val);\n \n       _DistanceType __len = std::distance(__first, __last);\n@@ -2874,10 +2872,8 @@ namespace std\n \t_DistanceType;\n \n       // concept requirements\n-      // See comments on lower_bound.\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned(__first, __last, __val);\n \n       _DistanceType __len = std::distance(__first, __last);\n@@ -3120,16 +3116,19 @@ namespace std\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n \t  _OutputIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -3178,17 +3177,20 @@ namespace std\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n \t  _OutputIterator __result, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n \n@@ -3951,10 +3953,9 @@ namespace std\n \t_DistanceType;\n \n       // concept requirements\n-      // See comments on lower_bound.\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\t\n       __glibcxx_requires_partitioned(__first, __last, __val);\n \n       _DistanceType __len = std::distance(__first, __last);\n@@ -4065,12 +4066,12 @@ namespace std\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n                   const _Tp& __val)\n     {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n       // concept requirements\n-      // See comments on lower_bound.\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_SameTypeConcept<_Tp,\n-\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned(__first, __last, __val);\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val);\n@@ -4097,12 +4098,13 @@ namespace std\n     binary_search(_ForwardIterator __first, _ForwardIterator __last,\n                   const _Tp& __val, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n-      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare, _Tp,\n-\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n+\t\t\t\t  _Tp, _ValueType>)\n       __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);\n@@ -4135,14 +4137,16 @@ namespace std\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -4182,15 +4186,18 @@ namespace std\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n \n@@ -4229,16 +4236,20 @@ namespace std\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n \t      _OutputIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -4291,17 +4302,22 @@ namespace std\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n \t      _OutputIterator __result, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n \n@@ -4352,16 +4368,18 @@ namespace std\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t     _OutputIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -4406,17 +4424,20 @@ namespace std\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t     _OutputIterator __result, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n \n@@ -4460,16 +4481,18 @@ namespace std\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t   _OutputIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -4518,17 +4541,20 @@ namespace std\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t   _OutputIterator __result, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n \n@@ -4572,16 +4598,20 @@ namespace std\n \t\t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t\t     _OutputIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n-      __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n+      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\t\n       __glibcxx_requires_sorted(__first1, __last1);\n       __glibcxx_requires_sorted(__first2, __last2);\n \n@@ -4634,17 +4664,22 @@ namespace std\n \t\t\t     _OutputIterator __result,\n \t\t\t     _Compare __comp)\n     {\n+      typedef typename iterator_traits<_InputIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_InputIterator2>::value_type\n+\t_ValueType2;\n+\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n-      __glibcxx_function_requires(_SameTypeConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t\t\t\t  _ValueType1>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t  _ValueType2>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\t\t\t  _ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t\t\t\t  _ValueType2, _ValueType1>)\n       __glibcxx_requires_sorted_pred(__first1, __last1, __comp);\n       __glibcxx_requires_sorted_pred(__first2, __last2, __comp);\n "}, {"sha": "c3398327346cdf4dca8ea4ccdc541ae3ef08dce0", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=e75ea710dd6d61c9ed5b5200bd3d0f6132aa606a", "patch": "@@ -322,7 +322,7 @@ namespace std\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy_n(_II __first, _II __last, _OI __result)\n+        __copy_n(_II __first, _II __last, _OI __result)\n         { return std::__copy_aux(__first, __last, __result); }\n     };\n \n@@ -331,7 +331,7 @@ namespace std\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy_n(_II __first, _II __last, _OI __result)\n+        __copy_n(_II __first, _II __last, _OI __result)\n         { return std::__copy_aux(__first.base(), __last.base(), __result); }\n     };\n \n@@ -340,7 +340,7 @@ namespace std\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy_n(_II __first, _II __last, _OI __result)\n+        __copy_n(_II __first, _II __last, _OI __result)\n         { return _OI(std::__copy_aux(__first, __last, __result.base())); }\n     };\n \n@@ -349,7 +349,7 @@ namespace std\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy_n(_II __first, _II __last, _OI __result)\n+        __copy_n(_II __first, _II __last, _OI __result)\n         { return _OI(std::__copy_aux(__first.base(), __last.base(),\n \t\t\t\t     __result.base())); }\n     };\n@@ -383,16 +383,16 @@ namespace std\n \n        const bool __in = __is_normal_iterator<_InputIterator>::__value;\n        const bool __out = __is_normal_iterator<_OutputIterator>::__value;\n-       return std::__copy_normal<__in, __out>::copy_n(__first, __last,\n-\t\t\t\t\t\t      __result);\n+       return std::__copy_normal<__in, __out>::__copy_n(__first, __last,\n+\t\t\t\t\t\t\t__result);\n     }\n   \n   template<bool, typename>\n     struct __copy_backward\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         { \n \t  while (__first != __last)\n \t    *--__result = *--__last;\n@@ -405,7 +405,7 @@ namespace std\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         { \n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n@@ -419,7 +419,7 @@ namespace std\n     {\n       template<typename _Tp>\n         static _Tp*\n-        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n         { \n \t  const ptrdiff_t _Num = __last - __first;\n \t  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);\n@@ -439,16 +439,17 @@ namespace std\n \t                     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n-      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,\n-\t\t\t\t\t\t\t       __result);\n+      return std::__copy_backward<__simple, _Category>::__copy_b(__first,\n+\t\t\t\t\t\t\t\t __last,\n+\t\t\t\t\t\t\t\t __result);\n     }\n \n   template<bool, bool>\n     struct __copy_backward_normal\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n         { return std::__copy_backward_aux(__first, __last, __result); }\n     };\n \n@@ -457,7 +458,7 @@ namespace std\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n         { return std::__copy_backward_aux(__first.base(), __last.base(),\n \t\t\t\t\t  __result); }\n     };\n@@ -467,7 +468,7 @@ namespace std\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n         { return _BI2(std::__copy_backward_aux(__first, __last,\n \t\t\t\t\t       __result.base())); }\n     };\n@@ -477,7 +478,7 @@ namespace std\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n         { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),\n \t\t\t\t\t       __result.base())); }\n     };\n@@ -513,8 +514,9 @@ namespace std\n \n       const bool __bi1 = __is_normal_iterator<_BI1>::__value;\n       const bool __bi2 = __is_normal_iterator<_BI2>::__value;\n-      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,\n-\t\t\t\t\t\t\t\t __result);\n+      return std::__copy_backward_normal<__bi1, __bi2>::__copy_b_n(__first,\n+\t\t\t\t\t\t\t\t   __last,\n+\t\t\t\t\t\t\t\t   __result);\n     }\n \n   template<bool>"}]}