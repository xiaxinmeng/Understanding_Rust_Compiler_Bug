{"sha": "84338a14985c5f7b064a181180d221be16019978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzMzhhMTQ5ODVjNWY3YjA2NGExODExODBkMjIxYmUxNjAxOTk3OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-06-21T16:36:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-06-21T16:36:00Z"}, "message": "re PR tree-optimization/90949 (null pointer check removed)\n\n\tPR tree-optimization/90949\n\t* tree-ssa-copy.c (fini_copy_prop): Use reset_flow_sensitive_info.\n\t* tree-ssanames.c (reset_flow_sensitive_info): Reset non-null state.\n\n\t* gcc.c-torture/execute/pr90949.c: New test.\n\nFrom-SVN: r272555", "tree": {"sha": "088907659d2a6de6d4f20dd87360f8ec8a2399af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088907659d2a6de6d4f20dd87360f8ec8a2399af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84338a14985c5f7b064a181180d221be16019978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84338a14985c5f7b064a181180d221be16019978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84338a14985c5f7b064a181180d221be16019978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84338a14985c5f7b064a181180d221be16019978/comments", "author": null, "committer": null, "parents": [{"sha": "1296eaf6ed32a3474f39b34dc0af6583a2d80096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1296eaf6ed32a3474f39b34dc0af6583a2d80096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1296eaf6ed32a3474f39b34dc0af6583a2d80096"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "fa45d9d2185f23efee6281b4b169618f9c978d6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84338a14985c5f7b064a181180d221be16019978/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84338a14985c5f7b064a181180d221be16019978/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84338a14985c5f7b064a181180d221be16019978", "patch": "@@ -1,3 +1,9 @@\n+2019-06-21  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/90949\n+\t* tree-ssa-copy.c (fini_copy_prop): Use reset_flow_sensitive_info.\n+\t* tree-ssanames.c (reset_flow_sensitive_info): Reset non-null state.\n+\n 2019-06-21  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/90914"}, {"sha": "3f99b80dc3a1dd21de9ab4b03904d1d8772bd4d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84338a14985c5f7b064a181180d221be16019978", "patch": "@@ -1,3 +1,8 @@\n+2019-06-21  Jeff Law  <law@redhat.com>\n+\n+        PR tree-optimization/90949\n+\t* gcc.c-torture/execute/pr90949.c: New test.\n+\n 2019-06-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90953 - ICE with -Wmissing-format-attribute."}, {"sha": "8c2ae3972d4fe00ea32b029accff1a26dcc09649", "filename": "gcc/testsuite/gcc.c-torture/execute/pr90949.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr90949.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr90949.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr90949.c?ref=84338a14985c5f7b064a181180d221be16019978", "patch": "@@ -0,0 +1,42 @@\n+void __attribute__ ((noipa, noinline)) my_puts (const char *str) { }\n+\n+void __attribute__ ((noipa, noinline)) my_free (void *p) { }\n+\n+\n+struct Node\n+{\n+  struct Node *child;\n+};\n+\n+struct Node space[2] = { };\n+\n+struct Node * __attribute__ ((noipa, noinline)) my_malloc (int bytes)\n+{\n+  return &space[0];\n+}\n+\n+void\n+walk (struct Node *module, int cleanup)\n+{\n+  if (module == 0)\n+    {\n+      return;\n+    }\n+  if (!cleanup)\n+    {\n+      my_puts (\"No cleanup\");\n+    }\n+  walk (module->child, cleanup);\n+  if (cleanup)\n+    {\n+      my_free (module);\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  struct Node *node = my_malloc (sizeof (struct Node));\n+  node->child = 0;\n+  walk (node, 1);\n+}"}, {"sha": "28ff8d3fbe2a6fc10fa20bbbc9f8f1c503c5e5da", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=84338a14985c5f7b064a181180d221be16019978", "patch": "@@ -545,13 +545,12 @@ fini_copy_prop (void)\n \t      duplicate_ssa_name_ptr_info (copy_of[i].value,\n \t\t\t\t\t   SSA_NAME_PTR_INFO (var));\n \t      /* Points-to information is cfg insensitive,\n-\t\t but alignment info might be cfg sensitive, if it\n-\t\t e.g. is derived from VRP derived non-zero bits.\n-\t\t So, do not copy alignment info if the two SSA_NAMEs\n-\t\t aren't defined in the same basic block.  */\n+\t\t but [E]VRP might record context sensitive alignment\n+\t\t info, non-nullness, etc.  So reset context sensitive\n+\t\t info if the two SSA_NAMEs aren't defined in the same\n+\t\t basic block.  */\n \t      if (var_bb != copy_of_bb)\n-\t\tmark_ptr_info_alignment_unknown\n-\t\t\t\t(SSA_NAME_PTR_INFO (copy_of[i].value));\n+\t\treset_flow_sensitive_info (copy_of[i].value);\n \t    }\n \t  else if (!POINTER_TYPE_P (TREE_TYPE (var))\n \t\t   && SSA_NAME_RANGE_INFO (var)"}, {"sha": "8b80bce894551a2c540968f0dcef7dc7c558eb16", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84338a14985c5f7b064a181180d221be16019978/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=84338a14985c5f7b064a181180d221be16019978", "patch": "@@ -820,7 +820,12 @@ reset_flow_sensitive_info (tree name)\n     {\n       /* points-to info is not flow-sensitive.  */\n       if (SSA_NAME_PTR_INFO (name))\n-\tmark_ptr_info_alignment_unknown (SSA_NAME_PTR_INFO (name));\n+\t{\n+\t  /* [E]VRP can derive context sensitive alignment info and\n+\t     non-nullness properties.  We must reset both.  */\n+\t  mark_ptr_info_alignment_unknown (SSA_NAME_PTR_INFO (name));\n+\t  SSA_NAME_PTR_INFO (name)->pt.null = 1;\n+\t}\n     }\n   else\n     SSA_NAME_RANGE_INFO (name) = NULL;"}]}