{"sha": "ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "node_id": "C_kwDOANBUbNoAKGVlOTE1YzcyZGEyY2FmOTI2OTdkYmVkZjBkOWQ5NzMwY2U5YWNhN2E", "commit": {"author": {"name": "Dimitrije Milosevic", "email": "Dimitrije.Milosevic@Syrmia.com", "date": "2022-07-06T17:55:23Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-07T02:19:58Z"}, "message": "libsanitizer: Cherry-pick 5d8077565e41 from upstream\n\n5d8077565e41: [MIPS][AddressSanitizer] Resolve build issues for the n32 ABI", "tree": {"sha": "56342b1cb04229d3babfe4f2b8485c14c390a955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56342b1cb04229d3babfe4f2b8485c14c390a955"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYsZC0AAKCRCsqtIOGecQ\n4wlnAQDLp8+gpXPo4N0YKeP8Fs/YgmBlTvd/f9rAqdnTm1BN1wD8DdHmT7Zg1qz6\nCjoAeVwFPVsFjPSTQZNytFmGd/s5hg8=\n=k0Y9\n-----END PGP SIGNATURE-----", "payload": "tree 56342b1cb04229d3babfe4f2b8485c14c390a955\nparent 4bc92c3bfab065f5984a020aa490bd0dc74157ec\nauthor Dimitrije Milosevic <Dimitrije.Milosevic@Syrmia.com> 1657130123 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1657160398 +0800\n\nlibsanitizer: Cherry-pick 5d8077565e41 from upstream\n\n5d8077565e41: [MIPS][AddressSanitizer] Resolve build issues for the n32 ABI\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee915c72da2caf92697dbedf0d9d9730ce9aca7a/comments", "author": {"login": "dmilosevic141", "id": 86828432, "node_id": "MDQ6VXNlcjg2ODI4NDMy", "avatar_url": "https://avatars.githubusercontent.com/u/86828432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmilosevic141", "html_url": "https://github.com/dmilosevic141", "followers_url": "https://api.github.com/users/dmilosevic141/followers", "following_url": "https://api.github.com/users/dmilosevic141/following{/other_user}", "gists_url": "https://api.github.com/users/dmilosevic141/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmilosevic141/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmilosevic141/subscriptions", "organizations_url": "https://api.github.com/users/dmilosevic141/orgs", "repos_url": "https://api.github.com/users/dmilosevic141/repos", "events_url": "https://api.github.com/users/dmilosevic141/events{/privacy}", "received_events_url": "https://api.github.com/users/dmilosevic141/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc92c3bfab065f5984a020aa490bd0dc74157ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc92c3bfab065f5984a020aa490bd0dc74157ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc92c3bfab065f5984a020aa490bd0dc74157ec"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "5ba033492e73cc2a9211506f1d15f6ca7b5b0424", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cpp", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee915c72da2caf92697dbedf0d9d9730ce9aca7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee915c72da2caf92697dbedf0d9d9730ce9aca7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp?ref=ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "patch": "@@ -34,7 +34,7 @@\n // format. Struct kernel_stat is defined as 'struct stat' in asm/stat.h. To\n // access stat from asm/stat.h, without conflicting with definition in\n // sys/stat.h, we use this trick.\n-#if defined(__mips64)\n+#if SANITIZER_MIPS64\n #include <asm/unistd.h>\n #include <sys/types.h>\n #define stat kernel_stat\n@@ -124,8 +124,9 @@ const int FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;\n // Are we using 32-bit or 64-bit Linux syscalls?\n // x32 (which defines __x86_64__) has SANITIZER_WORDSIZE == 32\n // but it still needs to use 64-bit syscalls.\n-#if SANITIZER_LINUX && (defined(__x86_64__) || defined(__powerpc64__) ||       \\\n-                        SANITIZER_WORDSIZE == 64)\n+#if SANITIZER_LINUX && (defined(__x86_64__) || defined(__powerpc64__) || \\\n+                        SANITIZER_WORDSIZE == 64 ||                      \\\n+                        (defined(__mips__) && _MIPS_SIM == _ABIN32))\n # define SANITIZER_LINUX_USES_64BIT_SYSCALLS 1\n #else\n # define SANITIZER_LINUX_USES_64BIT_SYSCALLS 0\n@@ -289,7 +290,7 @@ static void stat64_to_stat(struct stat64 *in, struct stat *out) {\n }\n #endif\n \n-#if defined(__mips64)\n+#if SANITIZER_MIPS64\n // Undefine compatibility macros from <sys/stat.h>\n // so that they would not clash with the kernel_stat\n // st_[a|m|c]time fields\n@@ -343,7 +344,8 @@ uptr internal_stat(const char *path, void *buf) {\n #if SANITIZER_FREEBSD\n   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf, 0);\n #    elif SANITIZER_LINUX\n-#      if SANITIZER_WORDSIZE == 64 || SANITIZER_X32\n+#      if SANITIZER_WORDSIZE == 64 || SANITIZER_X32 || \\\n+          (defined(__mips__) && _MIPS_SIM == _ABIN32)\n   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path, (uptr)buf,\n                           0);\n #      else\n@@ -366,7 +368,8 @@ uptr internal_lstat(const char *path, void *buf) {\n   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf,\n                           AT_SYMLINK_NOFOLLOW);\n #    elif SANITIZER_LINUX\n-#      if defined(_LP64) || SANITIZER_X32\n+#      if defined(_LP64) || SANITIZER_X32 ||         \\\n+          (defined(__mips__) && _MIPS_SIM == _ABIN32)\n   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path, (uptr)buf,\n                           AT_SYMLINK_NOFOLLOW);\n #      else\n@@ -1053,7 +1056,7 @@ uptr GetMaxVirtualAddress() {\n   return (1ULL << (MostSignificantSetBitIndex(GET_CURRENT_FRAME()) + 1)) - 1;\n #elif SANITIZER_RISCV64\n   return (1ULL << 38) - 1;\n-# elif defined(__mips64)\n+# elif SANITIZER_MIPS64\n   return (1ULL << 40) - 1;  // 0x000000ffffffffffUL;\n # elif defined(__s390x__)\n   return (1ULL << 53) - 1;  // 0x001fffffffffffffUL;"}, {"sha": "8bd9a32762391d0e15123c01d931231cab45a266", "filename": "libsanitizer/sanitizer_common/sanitizer_platform.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee915c72da2caf92697dbedf0d9d9730ce9aca7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee915c72da2caf92697dbedf0d9d9730ce9aca7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h?ref=ee915c72da2caf92697dbedf0d9d9730ce9aca7a", "patch": "@@ -159,7 +159,7 @@\n \n #if defined(__mips__)\n #  define SANITIZER_MIPS 1\n-#  if defined(__mips64)\n+#  if defined(__mips64) && _MIPS_SIM == _ABI64\n #    define SANITIZER_MIPS32 0\n #    define SANITIZER_MIPS64 1\n #  else"}]}