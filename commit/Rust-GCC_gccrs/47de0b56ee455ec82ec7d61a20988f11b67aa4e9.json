{"sha": "47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "node_id": "C_kwDOANBUbNoAKDQ3ZGUwYjU2ZWU0NTVlYzgyZWM3ZDYxYTIwOTg4ZjExYjY3YWE0ZTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-16T09:19:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-16T09:19:22Z"}, "message": "openmp: Regimplify operands of GIMPLE_COND in a few more places [PR103208]\n\nAs the testcase shows, the non-rectangular loop expansion code didn't\ntry to regimplify operands of GIMPLE_CONDs it built in some cases.\nI have added a helper function which does that and used it in some places\nthat were regimplifying already to simplify those spots, plus added it\nin a couple of other places where it was needed.\n\n2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103208\n\t* omp-expand.c (expand_omp_build_cond): New function.\n\t(expand_omp_for_init_counts, expand_omp_for_init_vars,\n\texpand_omp_for_static_nochunk, expand_omp_for_static_chunk): Use it.\n\n\t* c-c++-common/gomp/loop-11.c: New test.", "tree": {"sha": "ddc094cef4723dd77816e24afa6b9c2db259d0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc094cef4723dd77816e24afa6b9c2db259d0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47de0b56ee455ec82ec7d61a20988f11b67aa4e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eacdfaf7ca07367ede1a0c50aa997953958dabae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eacdfaf7ca07367ede1a0c50aa997953958dabae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eacdfaf7ca07367ede1a0c50aa997953958dabae"}], "stats": {"total": 107, "additions": 48, "deletions": 59}, "files": [{"sha": "c5fa5a01aaca9d8b0b36ab3c50266f2cf02b2d0d", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 43, "deletions": 59, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47de0b56ee455ec82ec7d61a20988f11b67aa4e9/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47de0b56ee455ec82ec7d61a20988f11b67aa4e9/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "patch": "@@ -1208,6 +1208,28 @@ expand_omp_build_assign (gimple_stmt_iterator *gsi_p, tree to, tree from,\n     }\n }\n \n+/* Prepend or append LHS CODE RHS condition before or after *GSI_P.  */\n+\n+static gcond *\n+expand_omp_build_cond (gimple_stmt_iterator *gsi_p, enum tree_code code,\n+\t\t       tree lhs, tree rhs, bool after = false)\n+{\n+  gcond *cond_stmt = gimple_build_cond (code, lhs, rhs, NULL_TREE, NULL_TREE);\n+  if (after)\n+    gsi_insert_after (gsi_p, cond_stmt, GSI_CONTINUE_LINKING);\n+  else\n+    gsi_insert_before (gsi_p, cond_stmt, GSI_SAME_STMT);\n+  if (walk_tree (gimple_cond_lhs_ptr (cond_stmt), expand_omp_regimplify_p,\n+\t\t NULL, NULL)\n+      || walk_tree (gimple_cond_rhs_ptr (cond_stmt), expand_omp_regimplify_p,\n+\t\t    NULL, NULL))\n+    {\n+      gimple_stmt_iterator gsi = gsi_for_stmt (cond_stmt);\n+      gimple_regimplify_operands (cond_stmt, &gsi);\n+    }\n+  return cond_stmt;\n+}\n+\n /* Expand the OpenMP parallel or task directive starting at REGION.  */\n \n static void\n@@ -1868,17 +1890,8 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t  n2 = fold_convert (itype, unshare_expr (fd->loops[i].n2));\n \t  n2 = force_gimple_operand_gsi (gsi, n2, true, NULL_TREE,\n \t\t\t\t\t true, GSI_SAME_STMT);\n-\t  cond_stmt = gimple_build_cond (fd->loops[i].cond_code, n1, n2,\n-\t\t\t\t\t NULL_TREE, NULL_TREE);\n-\t  gsi_insert_before (gsi, cond_stmt, GSI_SAME_STMT);\n-\t  if (walk_tree (gimple_cond_lhs_ptr (cond_stmt),\n-\t\t\t expand_omp_regimplify_p, NULL, NULL)\n-\t      || walk_tree (gimple_cond_rhs_ptr (cond_stmt),\n-\t\t\t    expand_omp_regimplify_p, NULL, NULL))\n-\t    {\n-\t      *gsi = gsi_for_stmt (cond_stmt);\n-\t      gimple_regimplify_operands (cond_stmt, gsi);\n-\t    }\n+\t  cond_stmt = expand_omp_build_cond (gsi, fd->loops[i].cond_code,\n+\t\t\t\t\t     n1, n2);\n \t  e = split_block (entry_bb, cond_stmt);\n \t  basic_block &zero_iter_bb\n \t    = i < fd->collapse ? zero_iter1_bb : zero_iter2_bb;\n@@ -2075,18 +2088,16 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t  n2e = force_gimple_operand_gsi (&gsi2, n2e, true, NULL_TREE,\n \t\t\t\t\t  true, GSI_SAME_STMT);\n \t  gcond *cond_stmt\n-\t    = gimple_build_cond (fd->loops[i].cond_code, n1, n2,\n-\t\t\t\t NULL_TREE, NULL_TREE);\n-\t  gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t    = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t     n1, n2);\n \t  e = split_block (bb1, cond_stmt);\n \t  e->flags = EDGE_TRUE_VALUE;\n \t  e->probability = profile_probability::likely ().guessed ();\n \t  basic_block bb2 = e->dest;\n \t  gsi2 = gsi_after_labels (bb2);\n \n-\t  cond_stmt = gimple_build_cond (fd->loops[i].cond_code, n1e, n2e,\n-\t\t\t\t\t NULL_TREE, NULL_TREE);\n-\t  gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t  cond_stmt = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t\t     n1e, n2e);\n \t  e = split_block (bb2, cond_stmt);\n \t  e->flags = EDGE_TRUE_VALUE;\n \t  e->probability = profile_probability::likely ().guessed ();\n@@ -2137,9 +2148,8 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t  e->probability = profile_probability::unlikely ().guessed ();\n \n \t  gsi2 = gsi_after_labels (bb3);\n-\t  cond_stmt = gimple_build_cond (fd->loops[i].cond_code, n1e, n2e,\n-\t\t\t\t\t NULL_TREE, NULL_TREE);\n-\t  gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t  cond_stmt = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t\t     n1e, n2e);\n \t  e = split_block (bb3, cond_stmt);\n \t  e->flags = EDGE_TRUE_VALUE;\n \t  e->probability = profile_probability::likely ().guessed ();\n@@ -2193,9 +2203,8 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t\t\t\t\t     true, GSI_SAME_STMT);\n \t      expand_omp_build_assign (&gsi2, j ? n2o : n1o, tem);\n \n-\t      cond_stmt = gimple_build_cond (fd->loops[i].cond_code, n1, n2,\n-\t\t\t\t\t     NULL_TREE, NULL_TREE);\n-\t      gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t      cond_stmt = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t\t\t n1, n2);\n \t      e = split_block (gsi_bb (gsi2), cond_stmt);\n \t      e->flags = j ? EDGE_TRUE_VALUE : EDGE_FALSE_VALUE;\n \t      e->probability = profile_probability::unlikely ().guessed ();\n@@ -2298,9 +2307,8 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      if (i == fd->last_nonrect)\n \t\t{\n \t\t  gcond *cond_stmt\n-\t\t    = gimple_build_cond (fd->loops[i].cond_code, n1, n2,\n-\t\t\t\t\t NULL_TREE, NULL_TREE);\n-\t\t  gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t\t    = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t\t     n1, n2);\n \t\t  e = split_block (cur_bb, cond_stmt);\n \t\t  e->flags = EDGE_TRUE_VALUE;\n \t\t  ne = make_edge (cur_bb, next_bb, EDGE_FALSE_VALUE);\n@@ -2354,10 +2362,7 @@ expand_omp_for_init_counts (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      ne = split_block (e->dest, last_stmt (e->dest));\n \t      gsi2 = gsi_after_labels (ne->dest);\n \n-\t      gcond *cond_stmt\n-\t\t= gimple_build_cond (fd->loops[i].cond_code, vs[i], n2,\n-\t\t\t\t     NULL_TREE, NULL_TREE);\n-\t      gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t      expand_omp_build_cond (&gsi2, fd->loops[i].cond_code, vs[i], n2);\n \t      edge e3, e4;\n \t      if (next_bb == entry_bb)\n \t\t{\n@@ -2558,10 +2563,8 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      tree first_inner_iterations = fd->first_inner_iterations;\n \t      tree factor = fd->factor;\n \t      gcond *cond_stmt\n-\t\t= gimple_build_cond (NE_EXPR, factor,\n-\t\t\t\t     build_zero_cst (TREE_TYPE (factor)),\n-\t\t\t\t     NULL_TREE, NULL_TREE);\n-\t      gsi_insert_after (gsi, cond_stmt, GSI_CONTINUE_LINKING);\n+\t\t= expand_omp_build_cond (gsi, NE_EXPR, factor,\n+\t\t\t\t\t build_zero_cst (TREE_TYPE (factor)));\n \t      edge e = split_block (gsi_bb (*gsi), cond_stmt);\n \t      basic_block bb0 = e->src;\n \t      e->flags = EDGE_TRUE_VALUE;\n@@ -2831,9 +2834,8 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      if (j == fd->last_nonrect)\n \t\t{\n \t\t  gcond *cond_stmt\n-\t\t    = gimple_build_cond (fd->loops[j].cond_code, n1, n2,\n-\t\t\t\t\t NULL_TREE, NULL_TREE);\n-\t\t  gsi_insert_before (&gsi2, cond_stmt, GSI_SAME_STMT);\n+\t\t    = expand_omp_build_cond (&gsi2, fd->loops[i].cond_code,\n+\t\t\t\t\t     n1, n2);\n \t\t  e = split_block (cur_bb, cond_stmt);\n \t\t  e->flags = EDGE_TRUE_VALUE;\n \t\t  edge ne = make_edge (cur_bb, next_bb, EDGE_FALSE_VALUE);\n@@ -4909,17 +4911,8 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       n2 = fold_convert (type, unshare_expr (fd->loop.n2));\n       n2 = force_gimple_operand_gsi (&gsi, n2, true, NULL_TREE,\n \t\t\t\t     true, GSI_SAME_STMT);\n-      gcond *cond_stmt = gimple_build_cond (fd->loop.cond_code, n1, n2,\n-\t\t\t\t\t    NULL_TREE, NULL_TREE);\n-      gsi_insert_before (&gsi, cond_stmt, GSI_SAME_STMT);\n-      if (walk_tree (gimple_cond_lhs_ptr (cond_stmt),\n-\t\t     expand_omp_regimplify_p, NULL, NULL)\n-\t  || walk_tree (gimple_cond_rhs_ptr (cond_stmt),\n-\t\t\texpand_omp_regimplify_p, NULL, NULL))\n-\t{\n-\t  gsi = gsi_for_stmt (cond_stmt);\n-\t  gimple_regimplify_operands (cond_stmt, &gsi);\n-\t}\n+      gcond *cond_stmt = expand_omp_build_cond (&gsi, fd->loop.cond_code,\n+\t\t\t\t\t\tn1, n2);\n       ep = split_block (entry_bb, cond_stmt);\n       ep->flags = EDGE_TRUE_VALUE;\n       entry_bb = ep->dest;\n@@ -5713,17 +5706,8 @@ expand_omp_for_static_chunk (struct omp_region *region,\n       n2 = fold_convert (type, unshare_expr (fd->loop.n2));\n       n2 = force_gimple_operand_gsi (&gsi, n2, true, NULL_TREE,\n \t\t\t\t     true, GSI_SAME_STMT);\n-      gcond *cond_stmt = gimple_build_cond (fd->loop.cond_code, n1, n2,\n-\t\t\t\t\t\t NULL_TREE, NULL_TREE);\n-      gsi_insert_before (&gsi, cond_stmt, GSI_SAME_STMT);\n-      if (walk_tree (gimple_cond_lhs_ptr (cond_stmt),\n-\t\t     expand_omp_regimplify_p, NULL, NULL)\n-\t  || walk_tree (gimple_cond_rhs_ptr (cond_stmt),\n-\t\t\texpand_omp_regimplify_p, NULL, NULL))\n-\t{\n-\t  gsi = gsi_for_stmt (cond_stmt);\n-\t  gimple_regimplify_operands (cond_stmt, &gsi);\n-\t}\n+      gcond *cond_stmt = expand_omp_build_cond (&gsi, fd->loop.cond_code,\n+\t\t\t\t\t\tn1, n2);\n       se = split_block (entry_bb, cond_stmt);\n       se->flags = EDGE_TRUE_VALUE;\n       entry_bb = se->dest;"}, {"sha": "5076e65b63dfe95f5a69ab524c6586de9cf53661", "filename": "gcc/testsuite/c-c++-common/gomp/loop-11.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47de0b56ee455ec82ec7d61a20988f11b67aa4e9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47de0b56ee455ec82ec7d61a20988f11b67aa4e9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-11.c?ref=47de0b56ee455ec82ec7d61a20988f11b67aa4e9", "patch": "@@ -0,0 +1,5 @@\n+/* PR tree-optimization/103208 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -fwrapv\" } */\n+\n+#include \"loop-8.c\""}]}