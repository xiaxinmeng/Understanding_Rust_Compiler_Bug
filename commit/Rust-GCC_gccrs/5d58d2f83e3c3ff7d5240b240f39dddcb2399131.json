{"sha": "5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1OGQyZjgzZTNjM2ZmN2Q1MjQwYjI0MGYzOWRkZGNiMjM5OTEzMQ==", "commit": {"author": {"name": "Ralf Corsepius", "email": "ralf.corsepius@rtems.org", "date": "2005-01-13T15:50:07Z"}, "committer": {"name": "Ralf Corsepius", "email": "corsepiu@gcc.gnu.org", "date": "2005-01-13T15:50:07Z"}, "message": "re PR target/19399 (mutexes support broken)\n\n2005-01-13  Ralf Corsepius  <ralf.corsepius@rtems.org>\n\t    Joel Sherrill  <joel@oarcorp.com>\n\n\tPR target/19399\n\t* gthr-rtems.h (__gthread_recursive_mutex_t): New type.\n\t(__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION): Define to\n\trtems_gxx_recursive_mutex_init.\n\t(__gthread_recursive_mutex_lock): New function.\n\t(__gthread_recursive_mutex_trylock): Likewise.\n\t(__gthread_recursive_mutex_unlock): Likewise.\n\nCo-Authored-By: Joel Sherrill <joel@OARcorp.com>\n\nFrom-SVN: r93601", "tree": {"sha": "988f5e5cb4b36f808f334be94f3fd8e18f052914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988f5e5cb4b36f808f334be94f3fd8e18f052914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d58d2f83e3c3ff7d5240b240f39dddcb2399131/comments", "author": null, "committer": null, "parents": [{"sha": "52786878fd5e664ec19bb0121391b04d8e6ebad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52786878fd5e664ec19bb0121391b04d8e6ebad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52786878fd5e664ec19bb0121391b04d8e6ebad0"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "0b8b1a9a3275d2f60c115e3113687f33259605d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d58d2f83e3c3ff7d5240b240f39dddcb2399131/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d58d2f83e3c3ff7d5240b240f39dddcb2399131/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "patch": "@@ -1,3 +1,14 @@\n+2005-01-13  Ralf Corsepius  <ralf.corsepius@rtems.org>\n+\t    Joel Sherrill  <joel@oarcorp.com>\n+\n+\tPR target/19399\n+\t* gthr-rtems.h (__gthread_recursive_mutex_t): New type.\n+\t(__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION): Define to\n+\trtems_gxx_recursive_mutex_init.\n+\t(__gthread_recursive_mutex_lock): New function.\n+\t(__gthread_recursive_mutex_trylock): Likewise.\n+\t(__gthread_recursive_mutex_unlock): Likewise.\n+\n 2005-01-13  Ralf Corsepius <ralf.corsepius@rtems.org>\n \n \t* config/i386/t-rtems-i386: Multilib on -mtune instead of -mcpu."}, {"sha": "a1b58f6cc334154ee7a9a5b7fc66ff6bf651bb41", "filename": "gcc/gthr-rtems.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d58d2f83e3c3ff7d5240b240f39dddcb2399131/gcc%2Fgthr-rtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d58d2f83e3c3ff7d5240b240f39dddcb2399131/gcc%2Fgthr-rtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-rtems.h?ref=5d58d2f83e3c3ff7d5240b240f39dddcb2399131", "patch": "@@ -1,7 +1,8 @@\n /* RTEMS threads compatibility routines for libgcc2 and libobjc.\n    by: Rosimildo da Silva( rdasilva@connecttel.com ) */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1999, 2000, 2002, 2003, 2005 \n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -39,11 +40,13 @@ extern \"C\" {\n #define __GTHREAD_ONCE_INIT  0\n #define __GTHREAD_MUTEX_INIT 0\n #define __GTHREAD_MUTEX_INIT_FUNCTION  rtems_gxx_mutex_init\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION  rtems_gxx_recursive_mutex_init\n \n /* Avoid dependency on rtems specific headers.  */\n typedef void *__gthread_key_t;\n typedef int   __gthread_once_t;\n typedef void *__gthread_mutex_t;\n+typedef void *__gthread_recursive_mutex_t;\n \n /*\n  * External functions provided by RTEMS. They are very similar to their POSIX\n@@ -64,6 +67,11 @@ extern int rtems_gxx_mutex_lock (__gthread_mutex_t *mutex);\n extern int rtems_gxx_mutex_trylock (__gthread_mutex_t *mutex);\n extern int rtems_gxx_mutex_unlock (__gthread_mutex_t *mutex);\n \n+/* recursive mutex support */\n+extern void rtems_gxx_recursive_mutex_init (__gthread_recursive_mutex_t *mutex);\n+extern int rtems_gxx_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex);\n+extern int rtems_gxx_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex);\n+extern int rtems_gxx_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex);\n \n /* RTEMS threading is always active */\n static inline int\n@@ -121,6 +129,24 @@ __gthread_mutex_unlock (__gthread_mutex_t *mutex)\n     return rtems_gxx_mutex_unlock( mutex );\n }\n \n+static inline int\n+__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex)\n+{\n+    return rtems_gxx_recursive_mutex_lock (mutex);\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)\n+{\n+    return rtems_gxx_recursive_mutex_trylock (mutex);\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)\n+{\n+    return rtems_gxx_recursive_mutex_unlock( mutex );\n+}\n+\n #ifdef __cplusplus\n }\n #endif"}]}