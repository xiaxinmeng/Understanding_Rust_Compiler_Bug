{"sha": "fb7fee84813b23487baf0c1094860251229ab5dd", "node_id": "C_kwDOANBUbNoAKGZiN2ZlZTg0ODEzYjIzNDg3YmFmMGMxMDk0ODYwMjUxMjI5YWI1ZGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-02T08:13:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-02T08:13:07Z"}, "message": "openmp: Add testcase for threadprivate random access class iterators\n\nThis adds a testcase for random access class iterators.  The diagnostics\ncan be different between templates and non-templates, as for some\nthreadprivate vars finish_id_expression replaces them with call to their\ncorresponding wrapper, but I think it is not that big deal, we reject\nit in either case.\n\n2021-11-02  Jakub Jelinek  <jakub@redhat.com>\n\n\t* g++.dg/gomp/loop-8.C: New test.", "tree": {"sha": "5aa1c85045243294b981caec0cd18f037c1ef330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa1c85045243294b981caec0cd18f037c1ef330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb7fee84813b23487baf0c1094860251229ab5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7fee84813b23487baf0c1094860251229ab5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7fee84813b23487baf0c1094860251229ab5dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7fee84813b23487baf0c1094860251229ab5dd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "41a1817fdd493c10f2a5deca503a05a07c107fee", "filename": "gcc/testsuite/g++.dg/gomp/loop-8.C", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7fee84813b23487baf0c1094860251229ab5dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7fee84813b23487baf0c1094860251229ab5dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-8.C?ref=fb7fee84813b23487baf0c1094860251229ab5dd", "patch": "@@ -0,0 +1,128 @@\n+typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+\n+template <typename T>\n+class I\n+{\n+public:\n+  typedef ptrdiff_t difference_type;\n+  I ();\n+  ~I ();\n+  I (T *);\n+  I (const I &);\n+  T &operator * ();\n+  T *operator -> ();\n+  T &operator [] (const difference_type &) const;\n+  I &operator = (const I &);\n+  I &operator ++ ();\n+  I operator ++ (int);\n+  I &operator -- ();\n+  I operator -- (int);\n+  I &operator += (const difference_type &);\n+  I &operator -= (const difference_type &);\n+  I operator + (const difference_type &) const;\n+  I operator - (const difference_type &) const;\n+  template <typename S> friend bool operator == (I<S> &, I<S> &);\n+  template <typename S> friend bool operator == (const I<S> &, const I<S> &);\n+  template <typename S> friend bool operator < (I<S> &, I<S> &);\n+  template <typename S> friend bool operator < (const I<S> &, const I<S> &);\n+  template <typename S> friend bool operator <= (I<S> &, I<S> &);\n+  template <typename S> friend bool operator <= (const I<S> &, const I<S> &);\n+  template <typename S> friend bool operator > (I<S> &, I<S> &);\n+  template <typename S> friend bool operator > (const I<S> &, const I<S> &);\n+  template <typename S> friend bool operator >= (I<S> &, I<S> &);\n+  template <typename S> friend bool operator >= (const I<S> &, const I<S> &);\n+  template <typename S> friend typename I<S>::difference_type operator - (I<S> &, I<S> &);\n+  template <typename S> friend typename I<S>::difference_type operator - (const I<S> &, const I<S> &);\n+  template <typename S> friend I<S> operator + (typename I<S>::difference_type , const I<S> &);\n+private:\n+  T *p;\n+};\n+\n+template <typename T> bool operator == (I<T> &, I<T> &);\n+template <typename T> bool operator == (const I<T> &, const I<T> &);\n+template <typename T> bool operator != (I<T> &, I<T> &);\n+template <typename T> bool operator != (const I<T> &, const I<T> &);\n+template <typename T> bool operator < (I<T> &, I<T> &);\n+template <typename T> bool operator < (const I<T> &, const I<T> &);\n+template <typename T> bool operator <= (I<T> &, I<T> &);\n+template <typename T> bool operator <= (const I<T> &, const I<T> &);\n+template <typename T> bool operator > (I<T> &, I<T> &);\n+template <typename T> bool operator > (const I<T> &, const I<T> &);\n+template <typename T> bool operator >= (I<T> &, I<T> &);\n+template <typename T> bool operator >= (const I<T> &, const I<T> &);\n+template <typename T> typename I<T>::difference_type operator - (I<T> &, I<T> &);\n+template <typename T> typename I<T>::difference_type operator - (const I<T> &, const I<T> &);\n+template <typename T> I<T> operator + (typename I<T>::difference_type, const I<T> &);\n+\n+extern I<int> i, j;\n+#pragma omp threadprivate (i, j)\n+extern I<int> k, l;\n+#pragma omp threadprivate (k, l)\n+I<int> k, l;\n+\n+void\n+f1 (I<int> &x, I<int> &y)\n+{\n+  #pragma omp for collapse(2)\n+  for (i = x; i < y; i++)\t// { dg-error \"expected iteration declaration or initialization\" }\n+    for (j = x; j < y; j++)\n+      ;\n+}\n+\n+void\n+f2 (I<int> &x, I<int> &y)\n+{\n+  #pragma omp for collapse(2)\n+  for (k = x; k < y; k++)\t// { dg-error \"expected iteration declaration or initialization\" }\n+    for (l = x; l < y; l++)\n+      ;\n+}\n+\n+template <int N>\n+void\n+f3 (I<int> &x, I<int> &y)\n+{\n+  #pragma omp for collapse(2)\n+  for (i = x; i < y; i++)\t// { dg-error \"'i' is predetermined 'threadprivate' for 'private'\" }\n+    for (j = x; j < y; j++)\t// { dg-error \"'j' is predetermined 'threadprivate' for 'private'\" }\n+      ;\n+}\n+\n+template <int N>\n+void\n+f4 (I<int> &x, I<int> &y)\n+{\n+  #pragma omp for collapse(2)\n+  for (k = x; k < y; k++)\t// { dg-error \"'k' is predetermined 'threadprivate' for 'private'\" }\n+    for (l = x; l < y; l++)\t// { dg-error \"'l' is predetermined 'threadprivate' for 'private'\" }\n+      ;\n+}\n+\n+template <typename T>\n+void\n+f5 (I<T> &x, I<T> &y)\n+{\n+  #pragma omp for collapse(2)\t// { dg-error \"expected iteration declaration or initialization\" }\n+  for (i = x; i < y; i++)\t// { dg-error \"'i' is predetermined 'threadprivate' for 'private'\" }\n+    for (j = x; j < y; j++)\t// { dg-error \"'j' is predetermined 'threadprivate' for 'private'\" }\n+      ;\n+}\n+\n+template <typename T>\n+void\n+f6 (I<T> &x, I<T> &y)\n+{\n+  #pragma omp for collapse(2)\t// { dg-error \"expected iteration declaration or initialization\" }\n+  for (k = x; k < y; k++)\t// { dg-error \"'k' is predetermined 'threadprivate' for 'private'\" }\n+    for (l = x; l < y; l++)\t// { dg-error \"'l' is predetermined 'threadprivate' for 'private'\" }\n+      ;\n+}\n+\n+void\n+test (I<int> &x, I<int> &y)\n+{\n+  f3<0> (x, y);\n+  f4<0> (x, y);\n+  f5 (x, y);\n+  f6 (x, y);\n+}"}]}