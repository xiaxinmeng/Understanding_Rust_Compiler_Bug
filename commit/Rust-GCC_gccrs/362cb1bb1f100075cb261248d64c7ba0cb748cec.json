{"sha": "362cb1bb1f100075cb261248d64c7ba0cb748cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyY2IxYmIxZjEwMDA3NWNiMjYxMjQ4ZDY0YzdiYTBjYjc0OGNlYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-03-13T22:34:03Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-03-13T22:34:03Z"}, "message": "re PR middle-end/19331 (Inefficient code generated for bitfield assignment)\n\n\n\tPR middle-end/19331\n\t* tree.c (get_unwidened): Treat CONVERT_EXPR and NOP_EXPR identically.\n\t* fold-const.c (fold_sign_changed_comparison): Likewise.\n\t(fold_binary): Optimize comparisons against widened operands if\n\tthe extension is represented by a CONVERT_EXPR, same as a NOP_EXPR.\n\nFrom-SVN: r96397", "tree": {"sha": "b32aa07e2c73110ffba0edde92f3970f84f19c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32aa07e2c73110ffba0edde92f3970f84f19c46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362cb1bb1f100075cb261248d64c7ba0cb748cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362cb1bb1f100075cb261248d64c7ba0cb748cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362cb1bb1f100075cb261248d64c7ba0cb748cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362cb1bb1f100075cb261248d64c7ba0cb748cec/comments", "author": null, "committer": null, "parents": [{"sha": "334f3a34cd96d89092c7551dc221ca1150fa4e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334f3a34cd96d89092c7551dc221ca1150fa4e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334f3a34cd96d89092c7551dc221ca1150fa4e07"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "78f5ba5ae5c0eb5e659c826d6f1933f0a97ea385", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=362cb1bb1f100075cb261248d64c7ba0cb748cec", "patch": "@@ -1,3 +1,11 @@\n+2005-03-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/19331\n+\t* tree.c (get_unwidened): Treat CONVERT_EXPR and NOP_EXPR identically.\n+\t* fold-const.c (fold_sign_changed_comparison): Likewise.\n+\t(fold_binary): Optimize comparisons against widened operands if\n+\tthe extension is represented by a CONVERT_EXPR, same as a NOP_EXPR.\n+\n 2005-03-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (struct_value_alias_set): New global variable."}, {"sha": "6a00abe423b1d1df1fbac5d65eae47b13d85c70e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=362cb1bb1f100075cb261248d64c7ba0cb748cec", "patch": "@@ -6148,7 +6148,8 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n   tree arg0_inner, tmp;\n   tree inner_type, outer_type;\n \n-  if (TREE_CODE (arg0) != NOP_EXPR)\n+  if (TREE_CODE (arg0) != NOP_EXPR\n+      && TREE_CODE (arg0) != CONVERT_EXPR)\n     return NULL_TREE;\n \n   outer_type = TREE_TYPE (arg0);\n@@ -6159,7 +6160,8 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n     return NULL_TREE;\n \n   if (TREE_CODE (arg1) != INTEGER_CST\n-      && !(TREE_CODE (arg1) == NOP_EXPR\n+      && !((TREE_CODE (arg1) == NOP_EXPR\n+\t    || TREE_CODE (arg1) == CONVERT_EXPR)\n \t   && TREE_TYPE (TREE_OPERAND (arg1, 0)) == inner_type))\n     return NULL_TREE;\n \n@@ -6180,7 +6182,7 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n   else\n     arg1 = fold_convert (inner_type, arg1);\n \n-  return fold (build (code, type, arg0_inner, arg1));\n+  return fold (build2 (code, type, arg0_inner, arg1));\n }\n \n /* Tries to replace &a[idx] CODE s * delta with &a[idx CODE delta], if s is\n@@ -9150,7 +9152,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t     TREE_OPERAND (arg0, 0), TREE_OPERAND (arg0, 1)));\n \n       else if (TREE_CODE (TREE_TYPE (arg0)) == INTEGER_TYPE\n-\t       && TREE_CODE (arg0) == NOP_EXPR)\n+\t       && (TREE_CODE (arg0) == NOP_EXPR\n+\t\t   || TREE_CODE (arg0) == CONVERT_EXPR))\n \t{\n \t  /* If we are widening one operand of an integer comparison,\n \t     see if the other operand is similarly being widened.  Perhaps we"}, {"sha": "0a99598123ad595ec2bc58f62d9c9664450cd6b0", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362cb1bb1f100075cb261248d64c7ba0cb748cec/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=362cb1bb1f100075cb261248d64c7ba0cb748cec", "patch": "@@ -4729,7 +4729,8 @@ get_unwidened (tree op, tree for_type)\n        && TYPE_UNSIGNED (type));\n   tree win = op;\n \n-  while (TREE_CODE (op) == NOP_EXPR)\n+  while (TREE_CODE (op) == NOP_EXPR\n+\t || TREE_CODE (op) == CONVERT_EXPR)\n     {\n       int bitschange\n \t= TYPE_PRECISION (TREE_TYPE (op))\n@@ -4759,7 +4760,9 @@ get_unwidened (tree op, tree for_type)\n \t  /* TYPE_UNSIGNED says whether this is a zero-extension.\n \t     Let's avoid computing it if it does not affect WIN\n \t     and if UNS will not be needed again.  */\n-\t  if ((uns || TREE_CODE (op) == NOP_EXPR)\n+\t  if ((uns\n+\t       || TREE_CODE (op) == NOP_EXPR\n+\t       || TREE_CODE (op) == CONVERT_EXPR)\n \t      && TYPE_UNSIGNED (TREE_TYPE (op)))\n \t    {\n \t      uns = 1;"}]}