{"sha": "f66369942fcc7a0c39398541e17a82fba7e0518e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY2MzY5OTQyZmNjN2EwYzM5Mzk4NTQxZTE3YTgyZmJhN2UwNTE4ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T09:55:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T09:55:29Z"}, "message": "[multiple changes]\n\n2012-10-29  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):\n\tAdd special case for case expression alternative.\n\t(Is_Signed_Integer_Arithmetic_Op): Remove special case for case\n\texpression alternative.\n\t* exp_ch4.adb Minor reformatting.\n\n2012-10-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_elab.adb: Minor reformatting.\n\n2012-10-29  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.adb: Minor: Remove redundant test.\n\nFrom-SVN: r192914", "tree": {"sha": "35075f04a4eff3f855363e9e27266e1278710f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35075f04a4eff3f855363e9e27266e1278710f45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66369942fcc7a0c39398541e17a82fba7e0518e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66369942fcc7a0c39398541e17a82fba7e0518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66369942fcc7a0c39398541e17a82fba7e0518e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66369942fcc7a0c39398541e17a82fba7e0518e/comments", "author": null, "committer": null, "parents": [{"sha": "e63f29e814a7b2d9e4dbac86a8a3780f1bd50f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63f29e814a7b2d9e4dbac86a8a3780f1bd50f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63f29e814a7b2d9e4dbac86a8a3780f1bd50f80"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "0b7f5412c0650eb51b855114db4412e9a5ab6469", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f66369942fcc7a0c39398541e17a82fba7e0518e", "patch": "@@ -1,3 +1,19 @@\n+2012-10-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):\n+\tAdd special case for case expression alternative.\n+\t(Is_Signed_Integer_Arithmetic_Op): Remove special case for case\n+\texpression alternative.\n+\t* exp_ch4.adb Minor reformatting.\n+\n+2012-10-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_elab.adb: Minor reformatting.\n+\n+2012-10-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb: Minor: Remove redundant test.\n+\n 2012-10-29  Arnaud Charlet  <charlet@adacore.com>\n \n \t* pprint.ads, pprint.adb, adabkend.ads, adabkend.adb,"}, {"sha": "406d292f09e3fce72f334a0301515bb568c5759e", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f66369942fcc7a0c39398541e17a82fba7e0518e", "patch": "@@ -1108,7 +1108,11 @@ package body Checks is\n         or else Nkind (P) in N_Membership_Test\n         or else Nkind (P) in N_Op_Compare\n \n-        --  We may also be a range operand in a membership test\n+        --  This is also true for an alternative in a case expression\n+\n+        or else Nkind (P) = N_Case_Expression_Alternative\n+\n+        --  This is also true for a range operand in a membership test\n \n         or else (Nkind (P) = N_Range\n                   and then Nkind (Parent (P)) in N_Membership_Test)\n@@ -6268,9 +6272,6 @@ package body Checks is\n          when N_If_Expression | N_Case_Expression =>\n             return Is_Signed_Integer_Type (Etype (N));\n \n-         when N_Case_Expression_Alternative =>\n-            return Is_Signed_Integer_Type (Etype (Parent (N)));\n-\n          when others =>\n             return False;\n       end case;"}, {"sha": "ebdbcdeb316b0227cfb3472df39ad098a2235bb2", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f66369942fcc7a0c39398541e17a82fba7e0518e", "patch": "@@ -3877,8 +3877,8 @@ package body Exp_Ch4 is\n          end if;\n \n       --  Right operand is a subtype name and the subtype has a predicate. We\n-      --  have to make sure predicate is checked, and for that we need to use\n-      --  the standard N_In circuitry with appropriate types.\n+      --  have to make sure the predicate is checked, and for that we need to\n+      --  use the standard N_In circuitry with appropriate types.\n \n       else\n          pragma Assert (Present (Predicate_Function (Etype (Rop))));\n@@ -3921,7 +3921,7 @@ package body Exp_Ch4 is\n             --       Bnn\n             --   end\n \n-            --  A bit gruesome, but here goes.\n+            --  A bit gruesome, but there doesn't seem to be a simpler way\n \n             declare\n                Blk : constant Node_Id   := Make_Bignum_Block (Loc);\n@@ -3937,10 +3937,8 @@ package body Exp_Ch4 is\n \n                Nin :=\n                  Make_In (Loc,\n-                   Left_Opnd =>\n-                     Convert_To (Base_Type (Etype (Rop)),\n-                       New_Occurrence_Of (Lnn, Loc)),\n-                   Right_Opnd => New_Occurrence_Of (Etype (Rop), Loc));\n+                   Left_Opnd  => Convert_To (TB, New_Occurrence_Of (Lnn, Loc)),\n+                   Right_Opnd => New_Occurrence_Of (T, Loc));\n                Set_No_Minimize_Eliminate (Nin);\n \n                --  Now decorate the block"}, {"sha": "4065eb386ccaf1dc66e9ce4961d5b18388122133", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f66369942fcc7a0c39398541e17a82fba7e0518e", "patch": "@@ -1137,15 +1137,13 @@ package body Sem_Elab is\n \n       --  Here we definitely have a bad instantiation\n \n-      Error_Msg_NE\n-        (\"?cannot instantiate& before body seen\", N, Ent);\n+      Error_Msg_NE (\"?cannot instantiate& before body seen\", N, Ent);\n \n       if Present (Instance_Spec (N)) then\n          Supply_Bodies (Instance_Spec (N));\n       end if;\n \n-      Error_Msg_N\n-        (\"\\?Program_Error will be raised at run time\", N);\n+      Error_Msg_N (\"\\?Program_Error will be raised at run time\", N);\n       Insert_Elab_Check (N);\n       Set_ABE_Is_Certain (N);\n    end Check_Bad_Instantiation;\n@@ -1997,7 +1995,7 @@ package body Sem_Elab is\n          then\n             return Abandon;\n \n-            --  If we have a function call, check it\n+         --  If we have a function call, check it\n \n          elsif Nkind (N) = N_Function_Call then\n             Check_Elab_Call (N, Outer_Scope);\n@@ -2078,8 +2076,7 @@ package body Sem_Elab is\n \n       Elab_Visited.Append (E);\n \n-      --  If the call is to a function that renames a literal, no check\n-      --  is needed.\n+      --  If the call is to a function that renames a literal, no check needed\n \n       if Ekind (E) = E_Enumeration_Literal then\n          return;\n@@ -2188,12 +2185,10 @@ package body Sem_Elab is\n             Error_Msg_NE\n               (\"?cannot instantiate& before body seen\", N, Orig_Ent);\n          else\n-            Error_Msg_NE\n-              (\"?cannot call& before body seen\", N, Orig_Ent);\n+            Error_Msg_NE (\"?cannot call& before body seen\", N, Orig_Ent);\n          end if;\n \n-         Error_Msg_N\n-           (\"\\?Program_Error will be raised at run time\", N);\n+         Error_Msg_N (\"\\?Program_Error will be raised at run time\", N);\n          Insert_Elab_Check (N);\n \n       --  Call is not at outer level"}, {"sha": "72c5725f44e0a4a2c36cdad9369ca09c910b6897", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66369942fcc7a0c39398541e17a82fba7e0518e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f66369942fcc7a0c39398541e17a82fba7e0518e", "patch": "@@ -6115,9 +6115,7 @@ package body Sem_Res is\n \n       --  Check comparison on unordered enumeration\n \n-      if Comes_From_Source (N)\n-        and then Bad_Unordered_Enumeration_Reference (N, Etype (L))\n-      then\n+      if Bad_Unordered_Enumeration_Reference (N, Etype (L)) then\n          Error_Msg_N (\"comparison on unordered enumeration type?\", N);\n       end if;\n "}]}