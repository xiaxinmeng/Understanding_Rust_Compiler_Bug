{"sha": "06272afbd3a5041d9efc5edee4a38c45b8690258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyNzJhZmJkM2E1MDQxZDllZmM1ZWRlZTRhMzhjNDViODY5MDI1OA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-03-12T10:32:31Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-03-12T10:32:31Z"}, "message": "Implement LWG 2934, optional<const T> doesn't compare with T.\n\n* include/std/optional\n(operator==(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator==(const optional<_Tp>&, const optional<_Up>&).\n(operator!=(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator!=(const optional<_Tp>&, const optional<_Up>&).\n(operator<(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator<(const optional<_Tp>&, const optional<_Up>&.\n(operator>(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator>(const optional<_Tp>&, const optional<_Up>&.\n(operator<=(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator<=(const optional<_Tp>&, const optional<_Up>&).\n(operator>=(const optional<_Tp>&, const optional<_Tp>&)):\nTurn into operator>=(const optional<_Tp>&, const optional<_Up>&).\n(operator==(const optional<_Tp>&, const _Tp&)):\nTurn into operator==(const optional<_Tp>&, const _Up&).\n(operator==(const _Tp&, const optional<_Tp>&)):\nTurn into operator==(const _Up&, const optional<_Tp>&).\n(operator!=(const optional<_Tp>&, const _Tp&)):\nTurn into operator!=(const optional<_Tp>&, const _Up&).\n(operator!=(const _Tp&, const optional<_Tp>&)):\nTurn into operator!=(const _Up&, const optional<_Tp>&).\n(operator<(const optional<_Tp>&, const _Tp&)):\nTurn into operator<(const optional<_Tp>&, const _Up&).\n(operator<(const _Tp&, const optional<_Tp>&)):\nTurn into operator<(const _Up&, const optional<_Tp>&).\n(operator>(const optional<_Tp>&, const _Tp&)):\nTurn into operator>(const optional<_Tp>&, const _Up&).\n(operator>(const _Tp&, const optional<_Tp>&)):\nTurn into operator>(const _Up&, const optional<_Tp>&).\n(operator<=(const optional<_Tp>&, const _Tp&)):\nTurn into operator<=(const optional<_Tp>&, const _Up&).\n(operator<=(const _Tp&, const optional<_Tp>&)):\nTurn into operator<=(const _Up&, const optional<_Tp>&).\n(operator>=(const optional<_Tp>&, const _Tp&)):\nTurn into operator>=(const optional<_Tp>&, const _Up&).\n(operator>=(const _Tp&, const optional<_Tp>&)):\nTurn into operator>=(const _Up&, const optional<_Tp>&).\n* testsuite/20_util/optional/relops/7.cc: New.\n\nFrom-SVN: r246076", "tree": {"sha": "f2c866ed857f85bdb186c217201f942dfc7817a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2c866ed857f85bdb186c217201f942dfc7817a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06272afbd3a5041d9efc5edee4a38c45b8690258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06272afbd3a5041d9efc5edee4a38c45b8690258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06272afbd3a5041d9efc5edee4a38c45b8690258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06272afbd3a5041d9efc5edee4a38c45b8690258/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc5551339d00ffcca2ab5f505bd6a81e946125c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5551339d00ffcca2ab5f505bd6a81e946125c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5551339d00ffcca2ab5f505bd6a81e946125c2"}], "stats": {"total": 222, "additions": 168, "deletions": 54}, "files": [{"sha": "520c05c3e0baeb706417a608cc7599c83314b265", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06272afbd3a5041d9efc5edee4a38c45b8690258", "patch": "@@ -1,3 +1,45 @@\n+2017-03-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2934, optional<const T> doesn't compare with T.\n+\t* include/std/optional\n+\t(operator==(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator==(const optional<_Tp>&, const optional<_Up>&).\n+\t(operator!=(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator!=(const optional<_Tp>&, const optional<_Up>&).\n+\t(operator<(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator<(const optional<_Tp>&, const optional<_Up>&.\n+\t(operator>(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator>(const optional<_Tp>&, const optional<_Up>&.\n+\t(operator<=(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator<=(const optional<_Tp>&, const optional<_Up>&).\n+\t(operator>=(const optional<_Tp>&, const optional<_Tp>&)):\n+\tTurn into operator>=(const optional<_Tp>&, const optional<_Up>&).\n+\t(operator==(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator==(const optional<_Tp>&, const _Up&).\n+\t(operator==(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator==(const _Up&, const optional<_Tp>&).\n+\t(operator!=(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator!=(const optional<_Tp>&, const _Up&).\n+\t(operator!=(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator!=(const _Up&, const optional<_Tp>&).\n+\t(operator<(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator<(const optional<_Tp>&, const _Up&).\n+\t(operator<(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator<(const _Up&, const optional<_Tp>&).\n+\t(operator>(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator>(const optional<_Tp>&, const _Up&).\n+\t(operator>(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator>(const _Up&, const optional<_Tp>&).\n+\t(operator<=(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator<=(const optional<_Tp>&, const _Up&).\n+\t(operator<=(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator<=(const _Up&, const optional<_Tp>&).\n+\t(operator>=(const optional<_Tp>&, const _Tp&)):\n+\tTurn into operator>=(const optional<_Tp>&, const _Up&).\n+\t(operator>=(const _Tp&, const optional<_Tp>&)):\n+\tTurn into operator>=(const _Up&, const optional<_Tp>&).\n+\t* testsuite/20_util/optional/relops/7.cc: New.\n+\n 2017-03-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/17_intro/names.cc: Undefine macros that clash with"}, {"sha": "c70051520179985919933f90372d7e75f8b63b21", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=06272afbd3a5041d9efc5edee4a38c45b8690258", "patch": "@@ -737,52 +737,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     enable_if_t<is_convertible<_Tp, bool>::value, bool>;\n \n   // Comparisons between optional values.\n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator==(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Tp>())>\n+    operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>\n     {\n       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)\n \t     && (!__lhs || *__lhs == *__rhs);\n     }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator!=(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Tp>())>\n+    operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>\n     {\n       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)\n \t|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);\n     }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Tp>())>\n+    operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>\n     {\n       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);\n     }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Tp>())>\n+    operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>\n     {\n       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);\n     }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<=(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Tp>())>\n+    operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>\n     {\n       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);\n     }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>=(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Tp>())>\n+    operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>\n     {\n       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);\n     }\n@@ -849,76 +849,76 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !__rhs; }\n \n   // Comparisons with value type.\n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator==(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Tp>())>\n+    operator==(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>\n     { return __lhs && *__lhs == __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator==(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Tp>())>\n+    operator==(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>\n     { return __rhs && __lhs == *__rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator!=(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Tp>())>\n+    operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>\n     { return !__lhs || *__lhs != __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator!=(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Tp>())>\n+    operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>\n     { return !__rhs || __lhs != *__rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Tp>())>\n+    operator<(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>\n     { return !__lhs || *__lhs < __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Tp>())>\n+    operator<(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>\n     { return __rhs && __lhs < *__rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Tp>())>\n+    operator>(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>\n     { return __lhs && *__lhs > __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Tp>())>\n+    operator>(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>\n     { return !__rhs || __lhs > *__rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<=(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Tp>())>\n+    operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>\n     { return !__lhs || *__lhs <= __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator<=(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Tp>())>\n+    operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>\n     { return __rhs && __lhs <= *__rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>=(const optional<_Tp>& __lhs, const _Tp& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Tp>())>\n+    operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>\n     { return __lhs && *__lhs >= __rhs; }\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     constexpr auto\n-    operator>=(const _Tp& __lhs, const optional<_Tp>& __rhs)\n-    -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Tp>())>\n+    operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)\n+    -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>\n     { return !__rhs || __lhs >= *__rhs; }\n \n   // Swap and creation functions."}, {"sha": "04b4cdae68592c06b7f64b42763e5a5623f11941", "filename": "libstdc++-v3/testsuite/20_util/optional/relops/7.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06272afbd3a5041d9efc5edee4a38c45b8690258/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2F7.cc?ref=06272afbd3a5041d9efc5edee4a38c45b8690258", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+#include <string>\n+\n+int main()\n+{\n+  std::optional<int> o = 42;\n+  std::optional<const int> o2 = 666;\n+  VERIFY(o == 42);\n+  VERIFY(o != 43);\n+  VERIFY(o < 43);\n+  VERIFY(o > 41);\n+  VERIFY(o <= 43);\n+  VERIFY(o >= 41);\n+  VERIFY(o2 == 666);\n+  VERIFY(o2 != 667);\n+  VERIFY(o2 < 667);\n+  VERIFY(o2 > 665);\n+  VERIFY(o2 <= 667);\n+  VERIFY(o2 >= 665);\n+  VERIFY(42 == o);\n+  VERIFY(43 != o);\n+  VERIFY(41< o);\n+  VERIFY(43 > o);\n+  VERIFY(41 <= o);\n+  VERIFY(43 >= o);\n+  VERIFY(666 == o2);\n+  VERIFY(667 != o2);\n+  VERIFY(665 < o2);\n+  VERIFY(667 > o2);\n+  VERIFY(665 <= o2);\n+  VERIFY(667 >= o2);\n+  std::optional<std::string> os = \"jones\";\n+  VERIFY(os == \"jones\");\n+  VERIFY(os != \"bones\");\n+  VERIFY(os < \"kones\");\n+  VERIFY(os > \"hones\");\n+  VERIFY(os <= \"kones\");\n+  VERIFY(os >= \"hones\");\n+  VERIFY(\"jones\" == os);\n+  VERIFY(\"bones\" != os);\n+  VERIFY(\"hones\" < os);\n+  VERIFY(\"kones\" > os);\n+  VERIFY(\"hones\" <= os);\n+  VERIFY(\"kones\" >= os);\n+  std::optional<int> oi = 42;\n+  std::optional<long int> ol = 666;\n+  VERIFY(!(oi == ol));\n+  VERIFY(!(ol == oi));\n+  VERIFY(oi != ol);\n+  VERIFY(ol != oi);\n+}"}]}