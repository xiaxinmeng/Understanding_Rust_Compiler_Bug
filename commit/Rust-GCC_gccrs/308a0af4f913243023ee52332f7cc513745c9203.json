{"sha": "308a0af4f913243023ee52332f7cc513745c9203", "node_id": "C_kwDOANBUbNoAKDMwOGEwYWY0ZjkxMzI0MzAyM2VlNTIzMzJmN2NjNTEzNzQ1YzkyMDM", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-04T15:13:35Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-20T07:35:54Z"}, "message": "libgcc: Add support for HF mode (aka _Float16) in libbid\n\nThis patch adds support for trunc and extend operations between HF\nmode (_Float16) and Decimal Floating Point formats (_Decimal32,\n_Decimal64 and _Decimal128).\n\nFor simplicity we rely on the implicit conversions inserted by the\ncompiler between HF and SD/DF/TF modes.  The existing bid*_to_binary*\nand binary*_to_bid* functions are non-trivial and at this stage it is\nnot clear if there is a performance-critical use case involving _Float16\nand _Decimal* formats.\n\nThe patch also adds two executable tests, to make sure the right\nfunctions are called, available (link phase) and functional.\n\nTested on aarch64 and x86_64. The number of symbol matches in the\ntestcases includes the .global XXX to avoid having to match different\ncall instructions for different targets.\n\n2022-05-04  Christophe Lyon  <christophe.lyon@arm.com>\n\nlibgcc/ChangeLog:\n\n\t* Makefile.in (D32PBIT_FUNCS): Add _hf_to_sd and _sd_to_hf.\n\t(D64PBIT_FUNCS): Add _hf_to_dd and _dd_to_hf.\n\t(D128PBIT_FUNCS): Add _hf_to_td _td_to_hf.\n\nlibgcc/config/libbid/ChangeLog:\n\n\t* bid_gcc_intrinsics.h (LIBGCC2_HAS_HF_MODE): Define according to\n\t__LIBGCC_HAS_HF_MODE__.\n\t(BID_HAS_HF_MODE): Define.\n\t(HFtype): Define.\n\t(__bid_extendhfsd): New prototype.\n\t(__bid_extendhfdd): Likewise.\n\t(__bid_extendhftd): Likewise.\n\t(__bid_truncsdhf): Likewise.\n\t(__bid_truncddhf): Likewise.\n\t(__bid_trunctdhf): Likewise.\n\t* _dd_to_hf.c: New file.\n\t* _hf_to_dd.c: New file.\n\t* _hf_to_sd.c: New file.\n\t* _hf_to_td.c: New file.\n\t* _sd_to_hf.c: New file.\n\t* _td_to_hf.c: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/torture/convert-dfp-2.c: New test.\n\t* gcc.dg/torture/convert-dfp.c: New test.", "tree": {"sha": "3aa44acaea135b1843150f55178c87208f9c3f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa44acaea135b1843150f55178c87208f9c3f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/308a0af4f913243023ee52332f7cc513745c9203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308a0af4f913243023ee52332f7cc513745c9203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308a0af4f913243023ee52332f7cc513745c9203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308a0af4f913243023ee52332f7cc513745c9203/comments", "author": null, "committer": null, "parents": [{"sha": "46c6976da146fbd52c088c1530f25e8b8f56c648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6976da146fbd52c088c1530f25e8b8f56c648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c6976da146fbd52c088c1530f25e8b8f56c648"}], "stats": {"total": 369, "additions": 364, "deletions": 5}, "files": [{"sha": "3e4ecb57ba647c8408868b369b62d3ce893ed1d3", "filename": "gcc/testsuite/gcc.dg/torture/convert-dfp-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp-2.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target float16_runtime } */\n+/* { dg-require-effective-target dfprt } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-add-options float16 } */\n+\n+/* Test conversions from DFP to smaller types.  */\n+\n+_Decimal32 var32;\n+_Decimal64 var64;\n+_Decimal128 var128;\n+_Float16 var16;\n+\n+void __attribute__ ((__noinline__)) foo32 (_Decimal32 param32)\n+{\n+  var16 = param32;\n+}\n+\n+void __attribute__ ((__noinline__)) foo64 (_Decimal64 param64)\n+{\n+  var16 = param64;\n+  var32 = param64;\n+}\n+\n+void __attribute__ ((__noinline__)) foo128 (_Decimal128 param128)\n+{\n+  var16 = param128;\n+  var32 = param128;\n+  var64 = param128;\n+}\n+\n+int main ()\n+{\n+  foo32 (var32);\n+  foo64 (var64);\n+  foo128 (var128);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\t__bid_truncsdhf} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_truncddhf} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_truncddsd2} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_trunctdhf} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_trunctdsd2} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_trunctddd2} 2 { target { dfp_bid } } } } */"}, {"sha": "ec136896ca7bd689931bc76b14b060002ac46f5f", "filename": "gcc/testsuite/gcc.dg/torture/convert-dfp.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fconvert-dfp.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target float16_runtime } */\n+/* { dg-require-effective-target dfprt } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-add-options float16 } */\n+\n+/* Test conversions to/from DFP values.  */\n+\n+extern void abort ();\n+\n+_Decimal32 var32 = 1.2df;\n+\n+int __attribute__ ((__noinline__)) foo32 (_Decimal32 param32, _Decimal64 param64, _Decimal128 param128, _Float16 param16)\n+{\n+  return (param32 == var32)\n+    + (param64 == var32)\n+    + (param128 == var32)\n+    /* Small enough relative difference?  */\n+    + ((((_Decimal32)param16 - var32) / var32) < 0.002df);\n+}\n+\n+_Decimal64 var64 = 1.2dd;\n+\n+int __attribute__ ((__noinline__)) foo64 (_Decimal32 param32, _Decimal64 param64, _Decimal128 param128, _Float16 param16)\n+{\n+  return (param32 == var64)\n+    + (param64 == var64)\n+    + (param128 == var64)\n+    /* Small enough relative difference?  */\n+    + ((((_Decimal64)param16 - var64) / var64) < 0.002dd);\n+}\n+\n+_Decimal128 var128 = 1.2dl;\n+\n+int __attribute__ ((__noinline__)) foo128 (_Decimal32 param32, _Decimal64 param64, _Decimal128 param128, _Float16 param16)\n+{\n+  return (param32 == var128)\n+    + (param64 == var128)\n+    + (param128 == var128)\n+    /* Small enough relative difference?  */\n+    + ((((_Decimal128)param16 - var128) / var128) < 0.002dl);\n+}\n+\n+int main()\n+{\n+  if (foo32 (1.2df, 1.2dd, 1.2dl, (_Float16)1.2) != 4)\n+    abort ();\n+\n+  if (foo64 (1.2df, 1.2dd, 1.2dl, (_Float16)1.2) != 4)\n+    abort ();\n+\n+  if (foo128 (1.2df, 1.2dd, 1.2dl, (_Float16)1.2) != 4)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\t__bid_extendsddd2} 3 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_extendsdtd2} 3 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_extendddtd2} 3 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_extendhfsd} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_extendhfdd} 2 { target { dfp_bid } } } } */\n+/* { dg-final { scan-assembler-times {\\t__bid_extendhftd} 2 { target { dfp_bid } } } } */"}, {"sha": "1fe708a93f7316c557db2b9fc5952a92cf8040fa", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -677,23 +677,26 @@ D32PBIT_FUNCS = _addsub_sd _div_sd _mul_sd _plus_sd _minus_sd \\\n \t_si_to_sd _di_to_sd _usi_to_sd _udi_to_sd \\\n \t_sd_to_sf _sd_to_df _sd_to_xf _sd_to_tf \\\n \t_sf_to_sd _df_to_sd _xf_to_sd _tf_to_sd \\\n-\t_sd_to_dd _sd_to_td _unord_sd _conv_sd\n+\t_sd_to_dd _sd_to_td _unord_sd _conv_sd \\\n+\t_hf_to_sd _sd_to_hf\n \n D64PBIT_FUNCS = _addsub_dd _div_dd _mul_dd _plus_dd _minus_dd \\\n \t_eq_dd _ne_dd _lt_dd _gt_dd _le_dd _ge_dd \\\n \t_dd_to_si _dd_to_di _dd_to_usi _dd_to_udi \\\n \t_si_to_dd _di_to_dd _usi_to_dd _udi_to_dd \\\n \t_dd_to_sf _dd_to_df _dd_to_xf _dd_to_tf \\\n \t_sf_to_dd _df_to_dd _xf_to_dd _tf_to_dd \\\n-\t_dd_to_sd _dd_to_td _unord_dd _conv_dd\n+\t_dd_to_sd _dd_to_td _unord_dd _conv_dd \\\n+\t_hf_to_dd _dd_to_hf\n \n D128PBIT_FUNCS = _addsub_td _div_td _mul_td _plus_td _minus_td \\\n \t_eq_td _ne_td _lt_td _gt_td _le_td _ge_td \\\n \t_td_to_si _td_to_di _td_to_usi _td_to_udi \\\n \t_si_to_td _di_to_td _usi_to_td _udi_to_td \\\n \t_td_to_sf _td_to_df _td_to_xf _td_to_tf \\\n \t_sf_to_td _df_to_td _xf_to_td _tf_to_td \\\n-\t_td_to_sd _td_to_dd _unord_td _conv_td\n+\t_td_to_sd _td_to_dd _unord_td _conv_td \\\n+\t_hf_to_td _td_to_hf\n \n ifeq ($(enable_decimal_float),bid)\n ifneq ($(D32PBIT),)"}, {"sha": "5e58288391e95262231f95025689add96863a05c", "filename": "libgcc/config/libbid/_dd_to_hf.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_dd_to_hf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_dd_to_hf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_dd_to_hf.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+HFtype\n+__bid_truncddhf (_Decimal64 x) {\n+  HFtype res;\n+  union decimal64 ux;\n+\n+  ux.d = x;\n+  res = __bid64_to_binary32 (ux.i);\n+  return (res);\n+}\n+#endif"}, {"sha": "f85100e24f8f63aa17ca014b641560161fe3de6e", "filename": "libgcc/config/libbid/_hf_to_dd.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_dd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_dd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_hf_to_dd.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,36 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+_Decimal64\n+__bid_extendhfdd (HFtype x) {\n+  union decimal64 res;\n+  SFtype xsf = x;\n+  res.i = __binary32_to_bid64 (xsf);\n+  return (res.d);\n+}\n+#endif"}, {"sha": "285b80c6e05d03c90f0366c153ea9d6a0e763176", "filename": "libgcc/config/libbid/_hf_to_sd.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_sd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_sd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_hf_to_sd.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,36 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+_Decimal32\n+__bid_extendhfsd (HFtype x) {\n+  union decimal32 res;\n+  SFtype xsf = x;\n+  res.i = __binary32_to_bid32 (xsf);\n+  return (res.d);\n+}\n+#endif"}, {"sha": "99b661ec7271593200a3b582fe3a416dcabde8d3", "filename": "libgcc/config/libbid/_hf_to_td.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_td.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_hf_to_td.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_hf_to_td.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,36 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+_Decimal128\n+__bid_extendhftd (HFtype x) {\n+  union decimal128 res;\n+  SFtype xsf = x;\n+  res.i = __binary32_to_bid128 (xsf);\n+  return (res.d);\n+}\n+#endif"}, {"sha": "e4e3125d49b836d9017b9f59acfc5263c8958dd3", "filename": "libgcc/config/libbid/_sd_to_hf.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_sd_to_hf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_sd_to_hf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_sd_to_hf.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+HFtype\n+__bid_truncsdhf (_Decimal32 x) {\n+  HFtype res;\n+  union decimal32 ux;\n+\n+  ux.d = x;\n+  res = __bid32_to_binary32 (ux.i);\n+  return (res);\n+}\n+#endif"}, {"sha": "c4ebe586db0b538a25399f26325c76802f93f1a7", "filename": "libgcc/config/libbid/_td_to_hf.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_td_to_hf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2F_td_to_hf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2F_td_to_hf.c?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bid_conf.h\"\n+#include \"bid_functions.h\"\n+#include \"bid_gcc_intrinsics.h\"\n+\n+#if LIBGCC2_HAS_HF_MODE || BID_HAS_HF_MODE\n+HFtype\n+__bid_trunctdhf (_Decimal128 x) {\n+  HFtype res;\n+  union decimal128 ux;\n+\n+  ux.d = x;\n+  res = __bid128_to_binary32 (ux.i);\n+  return (res);\n+}\n+#endif"}, {"sha": "15c050764ac101f25417078e98c7349aa33a395e", "filename": "libgcc/config/libbid/bid_gcc_intrinsics.h", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308a0af4f913243023ee52332f7cc513745c9203/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h?ref=308a0af4f913243023ee52332f7cc513745c9203", "patch": "@@ -31,6 +31,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tm.h\"\n #include \"libgcc_tm.h\"\n \n+#ifdef __LIBGCC_HAS_HF_MODE__\n+#define LIBGCC2_HAS_HF_MODE 1\n+#else\n+#define LIBGCC2_HAS_HF_MODE 0\n+#endif\n+\n #ifdef __LIBGCC_HAS_XF_MODE__\n #define LIBGCC2_HAS_XF_MODE 1\n #else\n@@ -43,6 +49,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LIBGCC2_HAS_TF_MODE 0\n #endif\n \n+#ifndef BID_HAS_HF_MODE\n+#define BID_HAS_HF_MODE LIBGCC2_HAS_HF_MODE\n+#endif\n+\n #ifndef BID_HAS_XF_MODE\n #define BID_HAS_XF_MODE LIBGCC2_HAS_XF_MODE\n #endif\n@@ -53,6 +63,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Some handy typedefs.  */\n \n+#if LIBGCC2_HAS_HF_MODE\n+typedef float HFtype __attribute__ ((mode (HF)));\n+#endif /* LIBGCC2_HAS_HF_MODE */\n typedef float SFtype __attribute__ ((mode (SF)));\n typedef float DFtype __attribute__ ((mode (DF)));\n #if LIBGCC2_HAS_XF_MODE\n@@ -98,6 +111,12 @@ typedef __attribute__ ((aligned(16))) struct\n #endif\n #endif\n \n+#if BID_HAS_HF_MODE\n+#ifndef HFtype\n+#define HFtype _Float16\n+#endif\n+#endif\n+\n #ifndef SFtype\n #define SFtype float\n #endif\n@@ -110,8 +129,7 @@ typedef __attribute__ ((aligned(16))) struct\n #ifndef XFtype\n #define XFtype long double\n #endif\n-\n-#endif   /* IN_LIBGCC2 */\n+#endif\n \n #if BID_HAS_TF_MODE\n #ifndef TFtype\n@@ -249,6 +267,14 @@ extern _Decimal128 __bid_extendxftd (XFtype);\n extern int isinfd32 (_Decimal32);\n extern int isinfd64 (_Decimal64);\n extern int isinfd128 (_Decimal128);\n+#if BID_HAS_HF_MODE\n+extern _Decimal32 __bid_extendhfsd (HFtype);\n+extern _Decimal64 __bid_extendhfdd (HFtype);\n+extern _Decimal128 __bid_extendhftd (HFtype);\n+extern HFtype __bid_truncsdhf (_Decimal32);\n+extern HFtype __bid_truncddhf (_Decimal64);\n+extern HFtype __bid_trunctdhf (_Decimal128);\n+#endif\n #endif  /* BID_HAS_GCC_DECIMAL_INTRINSICS */\n \n extern void __dfp_set_round (int);"}]}