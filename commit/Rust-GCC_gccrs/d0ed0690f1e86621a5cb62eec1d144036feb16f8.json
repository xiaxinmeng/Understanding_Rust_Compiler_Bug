{"sha": "d0ed0690f1e86621a5cb62eec1d144036feb16f8", "node_id": "C_kwDOANBUbNoAKGQwZWQwNjkwZjFlODY2MjFhNWNiNjJlZWMxZDE0NDAzNmZlYjE2Zjg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-15T21:02:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-16T11:58:30Z"}, "message": "c++: co_await and move-only type [PR105406]\n\nHere we were building a temporary MoveOnlyAwaitable to hold the result of\nevaluating 'o', but since 'o' is an lvalue we should build a reference\ninstead.\n\n\tPR c++/105406\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (build_co_await): Handle lvalue 'o'.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/co-await-moveonly1.C: New test.", "tree": {"sha": "a3b71fc7d8d1f8039392fe63d97e6d06d7f2a5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3b71fc7d8d1f8039392fe63d97e6d06d7f2a5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ed0690f1e86621a5cb62eec1d144036feb16f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ed0690f1e86621a5cb62eec1d144036feb16f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ed0690f1e86621a5cb62eec1d144036feb16f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ed0690f1e86621a5cb62eec1d144036feb16f8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46c4be98d1e759a406069487e5dbaad0346e7e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c4be98d1e759a406069487e5dbaad0346e7e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c4be98d1e759a406069487e5dbaad0346e7e7d"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "a2189e43db8901c4eb9e0a73cef8cf30ab4fde06", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ed0690f1e86621a5cb62eec1d144036feb16f8/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ed0690f1e86621a5cb62eec1d144036feb16f8/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=d0ed0690f1e86621a5cb62eec1d144036feb16f8", "patch": "@@ -1024,9 +1024,13 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n     }\n   else\n     {\n-      e_proxy = get_awaitable_var (suspend_kind, o_type);\n+      tree p_type = o_type;\n+      if (glvalue_p (o))\n+\tp_type = cp_build_reference_type (p_type, !lvalue_p (o));\n+      e_proxy = get_awaitable_var (suspend_kind, p_type);\n       o = cp_build_modify_expr (loc, e_proxy, INIT_EXPR, o,\n \t\t\t\ttf_warning_or_error);\n+      e_proxy = convert_from_reference (e_proxy);\n     }\n \n   /* I suppose we could check that this is contextually convertible to bool.  */\n@@ -1120,6 +1124,9 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n     }\n   TREE_VEC_ELT (awaiter_calls, 2) = awrs_call; /* await_resume().  */\n \n+  if (REFERENCE_REF_P (e_proxy))\n+    e_proxy = TREE_OPERAND (e_proxy, 0);\n+\n   tree await_expr = build5_loc (loc, CO_AWAIT_EXPR,\n \t\t\t\tTREE_TYPE (TREE_TYPE (awrs_func)),\n \t\t\t\ta, e_proxy, o, awaiter_calls,"}, {"sha": "e2831c104bf8cea205558214d815a62f05d6b7fb", "filename": "gcc/testsuite/g++.dg/coroutines/co-await-moveonly1.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ed0690f1e86621a5cb62eec1d144036feb16f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-moveonly1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ed0690f1e86621a5cb62eec1d144036feb16f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-moveonly1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-moveonly1.C?ref=d0ed0690f1e86621a5cb62eec1d144036feb16f8", "patch": "@@ -0,0 +1,63 @@\n+// PR c++/105406\n+// { dg-do compile { target c++20 } }\n+\n+#include <coroutine>\n+#include <exception>\n+\n+// A move-only awaitable\n+class MoveOnlyAwaitable {\n+public:\n+    MoveOnlyAwaitable() = default;\n+    MoveOnlyAwaitable(MoveOnlyAwaitable &&) = default;\n+    MoveOnlyAwaitable &operator=(MoveOnlyAwaitable &&) = default;\n+\n+    MoveOnlyAwaitable(const MoveOnlyAwaitable &) = delete;\n+    MoveOnlyAwaitable &operator=(const MoveOnlyAwaitable &) = delete;\n+\n+    bool await_ready() const noexcept { return false; }\n+    void await_suspend(std::coroutine_handle<>) noexcept {}\n+    void await_resume() {}\n+};\n+\n+struct task {\n+    struct promise_type {\n+        auto initial_suspend() const { return std::suspend_never{}; }\n+        auto final_suspend() const noexcept { return std::suspend_never(); }\n+        auto get_return_object() { return task{}; }\n+        void return_void() {}\n+        void unhandled_exception() {}\n+\n+        template<typename T>\n+        T &&await_transform(T &&t) {\n+            return static_cast<T &&>(t);\n+        }\n+\n+\n+    };\n+\n+    bool await_ready() const { return false; }\n+    void await_suspend(std::coroutine_handle<> awaiter) {}\n+    void await_resume() {}\n+};\n+\n+task myCoroutine() {\n+    // GCC: OK\n+    // clang: OK\n+    {\n+        co_await MoveOnlyAwaitable();\n+    }\n+    // GCC: OK\n+    // clang: OK\n+    {\n+        auto moveonly = MoveOnlyAwaitable();\n+        co_await std::move(moveonly);\n+    }\n+\n+    // GCC <= 11.2: OK\n+    // GCC 11.3:ERROR:  error: use of deleted function 'MoveOnlyAwaitable::MoveOnlyAwaitable(const MoveOnlyAwaitable&)\n+    // clang: OK\n+    {\n+        auto moveonly = MoveOnlyAwaitable();\n+        co_await moveonly;\n+    }\n+}"}]}