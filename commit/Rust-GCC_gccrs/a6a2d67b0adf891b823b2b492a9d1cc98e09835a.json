{"sha": "a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhMmQ2N2IwYWRmODkxYjgyM2IyYjQ5MmE5ZDFjYzk4ZTA5ODM1YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-01-15T18:13:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-01-15T18:13:52Z"}, "message": "re PR tree-optimization/59747 (wrong code at -Os and above on x86_64-linux-gnu in 64-bit mode)\n\n\tPR tree-optimization/59747\n\t* ree.c (find_and_remove_re): Properly handle case where a second\n\teliminated extension requires widening a copy created for elimination\n\tof a prior extension.\n\t(combine_set_extension): Ensure that the number of hard regs needed\n\tfor a destination register does not change when we widen it.\n\n\tPR tree-optimization/59747\n\t* gcc.c-torture/execute/pr59747.c: New test.\n\nFrom-SVN: r206638", "tree": {"sha": "e0f2de4b26fbea16dedfb92ad4e491726101c7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0f2de4b26fbea16dedfb92ad4e491726101c7f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/comments", "author": null, "committer": null, "parents": [{"sha": "aefe4056bbf86cd0065d8c6bfcf22dad15536b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefe4056bbf86cd0065d8c6bfcf22dad15536b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefe4056bbf86cd0065d8c6bfcf22dad15536b20"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "856bd46ac5253aa8ea04e9cbb15e4848ecf8202d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "patch": "@@ -1,3 +1,12 @@\n+2014-01-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59747\n+\t* ree.c (find_and_remove_re): Properly handle case where a second\n+\teliminated extension requires widening a copy created for elimination\n+\tof a prior extension.\n+\t(combine_set_extension): Ensure that the number of hard regs needed\n+\tfor a destination register does not change when we widen it.\n+\n 2014-01-15  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config.gcc (*-*-rtems*): Add t-rtems to tmake_file."}, {"sha": "19d821ce05afbf8d6e97264d103eca927374fc10", "filename": "gcc/ree.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "patch": "@@ -297,6 +297,12 @@ combine_set_extension (ext_cand *cand, rtx curr_insn, rtx *orig_set)\n   else\n     new_reg = gen_rtx_REG (cand->mode, REGNO (SET_DEST (*orig_set)));\n \n+  /* We're going to be widening the result of DEF_INSN, ensure that doing so\n+     doesn't change the number of hard registers needed for the result.  */\n+  if (HARD_REGNO_NREGS (REGNO (new_reg), cand->mode)\n+      != HARD_REGNO_NREGS (REGNO (orig_src), GET_MODE (SET_DEST (*orig_set))))\n+\treturn false;\n+\n   /* Merge constants by directly moving the constant into the register under\n      some conditions.  Recall that RTL constants are sign-extended.  */\n   if (GET_CODE (orig_src) == CONST_INT\n@@ -1017,11 +1023,20 @@ find_and_remove_re (void)\n   for (unsigned int i = 0; i < reinsn_copy_list.length (); i += 2)\n     {\n       rtx curr_insn = reinsn_copy_list[i];\n+      rtx def_insn = reinsn_copy_list[i + 1];\n+\n+      /* Use the mode of the destination of the defining insn\n+\t for the mode of the copy.  This is necessary if the\n+\t defining insn was used to eliminate a second extension\n+\t that was wider than the first.  */\n+      rtx sub_rtx = *get_sub_rtx (def_insn);\n       rtx pat = PATTERN (curr_insn);\n-      rtx new_reg = gen_rtx_REG (GET_MODE (SET_DEST (pat)),\n+      rtx new_dst = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n \t\t\t\t REGNO (XEXP (SET_SRC (pat), 0)));\n-      rtx set = gen_rtx_SET (VOIDmode, new_reg, SET_DEST (pat));\n-      emit_insn_after (set, reinsn_copy_list[i + 1]);\n+      rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n+\t\t\t\t REGNO (SET_DEST (pat)));\n+      rtx set = gen_rtx_SET (VOIDmode, new_dst, new_src);\n+      emit_insn_after (set, def_insn);\n     }\n \n   /* Delete all useless extensions here in one sweep.  */"}, {"sha": "dcfb67197f0bf215e75b441a034dc0d36ae86112", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "patch": "@@ -1,3 +1,8 @@\n+2014-01-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59747\n+\t* gcc.c-torture/execute/pr59747.c: New test.\n+\n 2014-01-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59794"}, {"sha": "d45a9082b81adbaac406c586f97c511adaa31889", "filename": "gcc/testsuite/gcc.c-torture/execute/pr59747.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59747.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a2d67b0adf891b823b2b492a9d1cc98e09835a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59747.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59747.c?ref=a6a2d67b0adf891b823b2b492a9d1cc98e09835a", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+int a[6], b, c = 1, d;\n+short e;\n+\n+int __attribute__ ((noinline))\n+fn1 (int p)\n+{\n+  b = a[p];\n+}\n+\n+int\n+main ()\n+{\n+  if (sizeof (long long) != 8)\n+    exit (0);\n+\n+  a[0] = 1;\n+  if (c)\n+    e--;\n+  d = e;\n+  long long f = e;\n+  if (fn1 ((f >> 56) & 1) != 0)\n+    abort ();\n+  exit (0);\n+}"}]}