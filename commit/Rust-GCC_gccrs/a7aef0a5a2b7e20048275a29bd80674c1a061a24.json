{"sha": "a7aef0a5a2b7e20048275a29bd80674c1a061a24", "node_id": "C_kwDOANBUbNoAKGE3YWVmMGE1YTJiN2UyMDA0ODI3NWEyOWJkODA2NzRjMWEwNjFhMjQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-19T00:38:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-19T00:38:25Z"}, "message": "analyzer: fix feasibility false +ve on jumps through function ptrs [PR107582]\n\nPR analyzer/107582 reports a false +ve from\n-Wanalyzer-use-of-uninitialized-value where\nthe analyzer's feasibility checker erroneously decides\nthat point (B) in the code below is reachable, with \"x\" being\nuninitialized there:\n\n    pthread_cleanup_push(func, NULL);\n\n    while (ret != ETIMEDOUT)\n\tret = rand() % 1000;\n\n    /* (A): after the while loop  */\n\n    if (ret != ETIMEDOUT)\n      x = &z;\n\n    pthread_cleanup_pop(1);\n\n    if (ret == ETIMEDOUT)\n      return 0;\n\n    /* (B): after not bailing out  */\n\ndue to these contradictionary conditions somehow both holding:\n  * (ret == ETIMEDOUT), at (A) (skipping the initialization of x), and\n  * (ret != ETIMEDOUT), at (B)\n\nThe root cause is that after the while loop, state merger puts ret in\nthe exploded graph in an UNKNOWN state, and saves the diagnostic at (B).\n\nLater, as we explore the feasibilty of reaching the enode for (B),\ndynamic_call_info_t::update_model is called to push/pop the\nframes for handling the call to \"func\" in pthread_cleanup_pop.\nThe \"ret\" at these nodes in the feasible_graph has a conjured_svalue for\n\"ret\", and a constraint on it being either == *or* != ETIMEDOUT.\n\nHowever dynamic_call_info_t::update_model blithely clobbers the\nmodel with a copy from the exploded_graph, in which \"ret\" is UNKNOWN.\n\nThis patch fixes dynamic_call_info_t::update_model so that it\nsimulates pushing/popping a frame on the model we're working with,\npreserving knowledge of the constraint on \"ret\", and enabling the\nanalyzer to \"know\" that the bail-out must happen.\n\nDoing so fixes the false positive.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107582\n\t* engine.cc (dynamic_call_info_t::update_model): Update the model\n\tby pushing or pop a frame, rather than by clobbering it with the\n\tmodel from the exploded_node's state.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107582\n\t* gcc.dg/analyzer/feasibility-4.c: New test.\n\t* gcc.dg/analyzer/feasibility-pr107582-1.c: New test.\n\t* gcc.dg/analyzer/feasibility-pr107582-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "49c387f4271a447d3bb4946d953faf5018eae5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49c387f4271a447d3bb4946d953faf5018eae5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7aef0a5a2b7e20048275a29bd80674c1a061a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7aef0a5a2b7e20048275a29bd80674c1a061a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7aef0a5a2b7e20048275a29bd80674c1a061a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7aef0a5a2b7e20048275a29bd80674c1a061a24/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4a7881c492790eaad9aec1bcc2c1370f41740f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4a7881c492790eaad9aec1bcc2c1370f41740f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4a7881c492790eaad9aec1bcc2c1370f41740f"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "db1881cd14024e81e252053fe0a45c75ad6c3c4a", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=a7aef0a5a2b7e20048275a29bd80674c1a061a24", "patch": "@@ -2024,16 +2024,22 @@ exploded_node::dump_succs_and_preds (FILE *outf) const\n /* Implementation of custom_edge_info::update_model vfunc\n    for dynamic_call_info_t.\n \n-   Update state for the dynamically discorverd calls */\n+   Update state for a dynamically discovered call (or return), by pushing\n+   or popping the a frame for the appropriate function.  */\n \n bool\n dynamic_call_info_t::update_model (region_model *model,\n \t\t\t\t   const exploded_edge *eedge,\n-\t\t\t\t   region_model_context *) const\n+\t\t\t\t   region_model_context *ctxt) const\n {\n   gcc_assert (eedge);\n-  const program_state &dest_state = eedge->m_dest->get_state ();\n-  *model = *dest_state.m_region_model;\n+  if (m_is_returning_call)\n+    model->update_for_return_gcall (m_dynamic_call, ctxt);\n+  else\n+    {\n+      function *callee = eedge->m_dest->get_function ();\n+      model->update_for_gcall (m_dynamic_call, ctxt, callee);\n+    }\n   return true;\n }\n "}, {"sha": "1a1128089fbbd7a743b58c2072bc5953e43ac6af", "filename": "gcc/testsuite/gcc.dg/analyzer/feasibility-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-4.c?ref=a7aef0a5a2b7e20048275a29bd80674c1a061a24", "patch": "@@ -0,0 +1,42 @@\n+#include \"analyzer-decls.h\"\n+\n+extern int rand (void);\n+\n+void test_1 (void)\n+{\n+  int   ret = 0;\n+  while (ret != 42)\n+    ret = rand() % 1000;\n+\n+  if (ret != 42)\n+    __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}\n+\n+static void empty_local_fn (void) {}\n+extern void external_fn (void);\n+\n+void test_2 (void)\n+{\n+  void (*callback) () = empty_local_fn;\n+  int   ret = 0;\n+  while (ret != 42)\n+    ret = rand() % 1000;\n+\n+  (*callback) ();\n+\n+  if (ret != 42)\n+    __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}\n+\n+void test_3 (void)\n+{\n+  void (*callback) () = external_fn;\n+  int   ret = 0;\n+  while (ret != 42)\n+    ret = rand() % 1000;\n+\n+  (*callback) ();\n+\n+  if (ret != 42)\n+    __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}"}, {"sha": "15799d0284562093db375c896227b434a35cb354", "filename": "gcc/testsuite/gcc.dg/analyzer/feasibility-pr107582-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-1.c?ref=a7aef0a5a2b7e20048275a29bd80674c1a061a24", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target pthread }  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <pthread.h>\n+#include <errno.h>\n+#include <unistd.h>\n+\n+#include \"analyzer-decls.h\"\n+\n+int z;\n+\n+static void func(void * o)\n+{\n+  (void) o;\n+}\n+\n+int main(int    argc,\n+         int ** argv)\n+{\n+  struct timespec now;\n+\n+  int * x;\n+  int   ret = 0;\n+\n+  pthread_cleanup_push(func, NULL);\n+\n+  while (ret != ETIMEDOUT)\n+    ret = rand() % 1000;\n+\n+  if (ret != ETIMEDOUT)\n+    x = &z;\n+\n+  pthread_cleanup_pop(1);\n+\n+  if (ret == ETIMEDOUT)\n+    return 0;\n+\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  printf(\"x = %d\\n\", *x); /* { dg-bogus \"use of uninitialized value 'x'\" } */\n+\n+  return 0;\n+}"}, {"sha": "b86ffd86d5c1838584db455b0267872abb2fb85a", "filename": "gcc/testsuite/gcc.dg/analyzer/feasibility-pr107582-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7aef0a5a2b7e20048275a29bd80674c1a061a24/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-pr107582-2.c?ref=a7aef0a5a2b7e20048275a29bd80674c1a061a24", "patch": "@@ -0,0 +1,34 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"analyzer-decls.h\"\n+\n+int z;\n+\n+static void func(void)\n+{\n+}\n+\n+int main(int    argc,\n+         int ** argv)\n+{\n+  int * x;\n+  int   ret = 0;\n+  void (*callback) () = func;\n+\n+  while (ret != 110)\n+    ret = rand() % 1000;\n+\n+  if (ret != 110)\n+    x = &z;\n+\n+  (*callback) ();\n+\n+  if (ret == 110)\n+    return 0;\n+\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+  printf(\"x = %d\\n\", *x); /* { dg-bogus \"use of uninitialized value 'x'\" } */\n+\n+  return 0;\n+}"}]}