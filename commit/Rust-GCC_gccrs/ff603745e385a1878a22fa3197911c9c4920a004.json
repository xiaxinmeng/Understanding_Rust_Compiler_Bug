{"sha": "ff603745e385a1878a22fa3197911c9c4920a004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2MDM3NDVlMzg1YTE4NzhhMjJmYTMxOTc5MTFjOWM0OTIwYTAwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-03T23:32:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-03T23:32:15Z"}, "message": "cp-tree.h (enum cp_tree_index): Add CPTI_SOURCE_LOCATION_IMPL.\n\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_SOURCE_LOCATION_IMPL.\n\t(source_location_impl): Define.\n\t(enum cp_built_in_function): Add CP_BUILT_IN_SOURCE_LOCATION.\n\t(fold_builtin_source_location): Declare.\n\t* cp-gimplify.c: Include output.h, file-prefix-map.h and cgraph.h.\n\t(cp_gimplify_expr, cp_fold): Handle CP_BUILT_IN_SOURCE_LOCATION.\n\tFormatting fix.\n\t(get_source_location_impl_type): New function.\n\t(struct source_location_table_entry,\n\tstruct source_location_table_entry_hash): New types.\n\t(source_location_table, source_location_id): New variables.\n\t(fold_builtin_source_location): New function.\n\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n\tCP_BUILT_IN_SOURCE_LOCATION.\n\t* tree.c (builtin_valid_in_constant_expr_p): Likewise.  Formatting\n\tfix.\n\t* decl.c (cxx_init_decl_processing): Register\n\t__builtin_source_location.\n\t* name-lookup.c (get_std_name_hint): Add source_location entry.\n\n\t* g++.dg/cpp2a/srcloc1.C: New test.\n\t* g++.dg/cpp2a/srcloc2.C: New test.\n\t* g++.dg/cpp2a/srcloc3.C: New test.\n\t* g++.dg/cpp2a/srcloc4.C: New test.\n\t* g++.dg/cpp2a/srcloc5.C: New test.\n\t* g++.dg/cpp2a/srcloc6.C: New test.\n\t* g++.dg/cpp2a/srcloc7.C: New test.\n\t* g++.dg/cpp2a/srcloc8.C: New test.\n\t* g++.dg/cpp2a/srcloc9.C: New test.\n\t* g++.dg/cpp2a/srcloc10.C: New test.\n\t* g++.dg/cpp2a/srcloc11.C: New test.\n\t* g++.dg/cpp2a/srcloc12.C: New test.\n\t* g++.dg/cpp2a/srcloc13.C: New test.\n\t* g++.dg/cpp2a/srcloc14.C: New test.\n\nFrom-SVN: r278949", "tree": {"sha": "9a2d1f634abe953054189f529753c4803349fed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2d1f634abe953054189f529753c4803349fed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff603745e385a1878a22fa3197911c9c4920a004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff603745e385a1878a22fa3197911c9c4920a004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff603745e385a1878a22fa3197911c9c4920a004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff603745e385a1878a22fa3197911c9c4920a004/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd2a16c741f11935fef856e29e6c71d27fd5c741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2a16c741f11935fef856e29e6c71d27fd5c741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2a16c741f11935fef856e29e6c71d27fd5c741"}], "stats": {"total": 686, "additions": 683, "deletions": 3}, "files": [{"sha": "474a8506e86f6727c6df78e9cca7c7c57e8c867a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -1,3 +1,25 @@\n+2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_SOURCE_LOCATION_IMPL.\n+\t(source_location_impl): Define.\n+\t(enum cp_built_in_function): Add CP_BUILT_IN_SOURCE_LOCATION.\n+\t(fold_builtin_source_location): Declare.\n+\t* cp-gimplify.c: Include output.h, file-prefix-map.h and cgraph.h.\n+\t(cp_gimplify_expr, cp_fold): Handle CP_BUILT_IN_SOURCE_LOCATION.\n+\tFormatting fix.\n+\t(get_source_location_impl_type): New function.\n+\t(struct source_location_table_entry,\n+\tstruct source_location_table_entry_hash): New types.\n+\t(source_location_table, source_location_id): New variables.\n+\t(fold_builtin_source_location): New function.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n+\tCP_BUILT_IN_SOURCE_LOCATION.\n+\t* tree.c (builtin_valid_in_constant_expr_p): Likewise.  Formatting\n+\tfix.\n+\t* decl.c (cxx_init_decl_processing): Register\n+\t__builtin_source_location.\n+\t* name-lookup.c (get_std_name_hint): Add source_location entry.\n+\n 2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (cp_build_addr_expr_1): Use the cp_expr_loc_or_input_loc"}, {"sha": "370633467abfec78b2b57865f2465136328ee69b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -1240,6 +1240,9 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n       return boolean_true_node;\n     }\n \n+  if (fndecl_built_in_p (fun, CP_BUILT_IN_SOURCE_LOCATION, BUILT_IN_FRONTEND))\n+    return fold_builtin_source_location (EXPR_LOCATION (t));\n+\n   /* Be permissive for arguments to built-ins; __builtin_constant_p should\n      return constant false for a non-constant argument.  */\n   constexpr_ctx new_ctx = *ctx;"}, {"sha": "fb12c8a142027eb77ba59c8b9022df99dc02fcc6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 259, "deletions": 2, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -35,6 +35,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n #include \"gcc-rich-location.h\"\n+#include \"output.h\"\n+#include \"file-prefix-map.h\"\n+#include \"cgraph.h\"\n \n /* Forward declarations.  */\n \n@@ -896,8 +899,12 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  tree decl = cp_get_callee_fndecl_nofold (*expr_p);\n \t  if (decl\n \t      && fndecl_built_in_p (decl, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n-\t\t\t\t  BUILT_IN_FRONTEND))\n+\t\t\t\t    BUILT_IN_FRONTEND))\n \t    *expr_p = boolean_false_node;\n+\t  else if (decl\n+\t\t   && fndecl_built_in_p (decl, CP_BUILT_IN_SOURCE_LOCATION,\n+\t\t\t\t\t BUILT_IN_FRONTEND))\n+\t    *expr_p = fold_builtin_source_location (EXPR_LOCATION (*expr_p));\n \t}\n       break;\n \n@@ -2657,9 +2664,17 @@ cp_fold (tree x)\n \t/* Defer folding __builtin_is_constant_evaluated.  */\n \tif (callee\n \t    && fndecl_built_in_p (callee, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n-\t\t\t\tBUILT_IN_FRONTEND))\n+\t\t\t\t  BUILT_IN_FRONTEND))\n \t  break;\n \n+\tif (callee\n+\t    && fndecl_built_in_p (callee, CP_BUILT_IN_SOURCE_LOCATION,\n+\t\t\t\t  BUILT_IN_FRONTEND))\n+\t  {\n+\t    x = fold_builtin_source_location (EXPR_LOCATION (x));\n+\t    break;\n+\t  }\n+\n \tx = copy_node (x);\n \n \tm = call_expr_nargs (x);\n@@ -2884,4 +2899,246 @@ process_stmt_hotness_attribute (tree std_attrs, location_t attrs_loc)\n   return std_attrs;\n }\n \n+/* Helper of fold_builtin_source_location, return the\n+   std::source_location::__impl type after performing verification\n+   on it.  LOC is used for reporting any errors.  */\n+\n+static tree\n+get_source_location_impl_type (location_t loc)\n+{\n+  tree name = get_identifier (\"source_location\");\n+  tree decl = lookup_qualified_name (std_node, name);\n+  if (TREE_CODE (decl) != TYPE_DECL)\n+    {\n+      auto_diagnostic_group d;\n+      if (decl == error_mark_node || TREE_CODE (decl) == TREE_LIST)\n+\tqualified_name_lookup_error (std_node, name, decl, loc);\n+      else\n+\terror_at (loc, \"%qD is not a type\", decl);\n+      return error_mark_node;\n+    }\n+  name = get_identifier (\"__impl\");\n+  tree type = TREE_TYPE (decl);\n+  decl = lookup_qualified_name (type, name);\n+  if (TREE_CODE (decl) != TYPE_DECL)\n+    {\n+      auto_diagnostic_group d;\n+      if (decl == error_mark_node || TREE_CODE (decl) == TREE_LIST)\n+\tqualified_name_lookup_error (type, name, decl, loc);\n+      else\n+\terror_at (loc, \"%qD is not a type\", decl);\n+      return error_mark_node;\n+    }\n+  type = TREE_TYPE (decl);\n+  if (TREE_CODE (type) != RECORD_TYPE)\n+    {\n+      error_at (loc, \"%qD is not a class type\", decl);\n+      return error_mark_node;\n+    }\n+\n+  int cnt = 0;\n+  for (tree field = TYPE_FIELDS (type);\n+       (field = next_initializable_field (field)) != NULL_TREE;\n+       field = DECL_CHAIN (field))\n+    {\n+      if (DECL_NAME (field) != NULL_TREE)\n+\t{\n+\t  const char *n = IDENTIFIER_POINTER (DECL_NAME (field));\n+\t  if (strcmp (n, \"_M_file_name\") == 0\n+\t      || strcmp (n, \"_M_function_name\") == 0)\n+\t    {\n+\t      if (TREE_TYPE (field) != const_string_type_node)\n+\t\t{\n+\t\t  error_at (loc, \"%qD does not have %<const char *%> type\",\n+\t\t\t    field);\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      cnt++;\n+\t      continue;\n+\t    }\n+\t  else if (strcmp (n, \"_M_line\") == 0 || strcmp (n, \"_M_column\") == 0)\n+\t    {\n+\t      if (TREE_CODE (TREE_TYPE (field)) != INTEGER_TYPE)\n+\t\t{\n+\t\t  error_at (loc, \"%qD does not have integral type\", field);\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      cnt++;\n+\t      continue;\n+\t    }\n+\t}\n+      cnt = 0;\n+      break;\n+    }\n+  if (cnt != 4)\n+    {\n+      error_at (loc, \"%<std::source_location::__impl%> does not contain only \"\n+\t\t     \"non-static data members %<_M_file_name%>, \"\n+\t\t     \"%<_M_function_name%>, %<_M_line%> and %<_M_column%>\");\n+      return error_mark_node;\n+    }\n+  return build_qualified_type (type, TYPE_QUAL_CONST);\n+}\n+\n+/* Type for source_location_table hash_set.  */\n+struct GTY((for_user)) source_location_table_entry {\n+  location_t loc;\n+  unsigned uid;\n+  tree var;\n+};\n+\n+/* Traits class for function start hash maps below.  */\n+\n+struct source_location_table_entry_hash\n+  : ggc_remove <source_location_table_entry>\n+{\n+  typedef source_location_table_entry value_type;\n+  typedef source_location_table_entry compare_type;\n+\n+  static hashval_t\n+  hash (const source_location_table_entry &ref)\n+  {\n+    inchash::hash hstate (0);\n+    hstate.add_int (ref.loc);\n+    hstate.add_int (ref.uid);\n+    return hstate.end ();\n+  }\n+\n+  static bool\n+  equal (const source_location_table_entry &ref1,\n+\t const source_location_table_entry &ref2)\n+  {\n+    return ref1.loc == ref2.loc && ref1.uid == ref2.uid;\n+  }\n+\n+  static void\n+  mark_deleted (source_location_table_entry &ref)\n+  {\n+    ref.loc = UNKNOWN_LOCATION;\n+    ref.uid = -1U;\n+    ref.var = NULL_TREE;\n+  }\n+\n+  static void\n+  mark_empty (source_location_table_entry &ref)\n+  {\n+    ref.loc = UNKNOWN_LOCATION;\n+    ref.uid = 0;\n+    ref.var = NULL_TREE;\n+  }\n+\n+  static bool\n+  is_deleted (const source_location_table_entry &ref)\n+  {\n+    return (ref.loc == UNKNOWN_LOCATION\n+\t    && ref.uid == -1U\n+\t    && ref.var == NULL_TREE);\n+  }\n+\n+  static bool\n+  is_empty (const source_location_table_entry &ref)\n+  {\n+    return (ref.loc == UNKNOWN_LOCATION\n+\t    && ref.uid == 0\n+\t    && ref.var == NULL_TREE);\n+  }\n+};\n+\n+static GTY(()) hash_table <source_location_table_entry_hash>\n+  *source_location_table;\n+static GTY(()) unsigned int source_location_id;\n+\n+/* Fold __builtin_source_location () call.  LOC is the location\n+   of the call.  */\n+\n+tree\n+fold_builtin_source_location (location_t loc)\n+{\n+  if (source_location_impl == NULL_TREE)\n+    {\n+      auto_diagnostic_group d;\n+      source_location_impl = get_source_location_impl_type (loc);\n+      if (source_location_impl == error_mark_node)\n+\tinform (loc, \"evaluating %qs\", \"__builtin_source_location\");\n+    }\n+  if (source_location_impl == error_mark_node)\n+    return build_zero_cst (const_ptr_type_node);\n+  if (source_location_table == NULL)\n+    source_location_table\n+      = hash_table <source_location_table_entry_hash>::create_ggc (64);\n+  const line_map_ordinary *map;\n+  source_location_table_entry entry;\n+  entry.loc\n+    = linemap_resolve_location (line_table, loc, LRK_MACRO_EXPANSION_POINT,\n+\t\t\t\t&map);\n+  entry.uid = current_function_decl ? DECL_UID (current_function_decl) : -1;\n+  entry.var = error_mark_node;\n+  source_location_table_entry *entryp\n+    = source_location_table->find_slot (entry, INSERT);\n+  tree var;\n+  if (entryp->var)\n+    var = entryp->var;\n+  else\n+    {\n+      char tmp_name[32];\n+      ASM_GENERATE_INTERNAL_LABEL (tmp_name, \"Lsrc_loc\", source_location_id++);\n+      var = build_decl (loc, VAR_DECL, get_identifier (tmp_name),\n+\t\t\tsource_location_impl);\n+      TREE_STATIC (var) = 1;\n+      TREE_PUBLIC (var) = 0;\n+      DECL_ARTIFICIAL (var) = 1;\n+      DECL_IGNORED_P (var) = 1;\n+      DECL_EXTERNAL (var) = 0;\n+      DECL_DECLARED_CONSTEXPR_P (var) = 1;\n+      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (var) = 1;\n+      layout_decl (var, 0);\n+\n+      vec<constructor_elt, va_gc> *v = NULL;\n+      vec_alloc (v, 4);\n+      for (tree field = TYPE_FIELDS (source_location_impl);\n+\t   (field = next_initializable_field (field)) != NULL_TREE;\n+\t   field = DECL_CHAIN (field))\n+\t{\n+\t  const char *n = IDENTIFIER_POINTER (DECL_NAME (field));\n+\t  tree val = NULL_TREE;\n+\t  if (strcmp (n, \"_M_file_name\") == 0)\n+\t    {\n+\t      if (const char *fname = LOCATION_FILE (loc))\n+\t\t{\n+\t\t  fname = remap_macro_filename (fname);\n+\t\t  val = build_string_literal (strlen (fname) + 1, fname);\n+\t\t}\n+\t      else\n+\t\tval = build_string_literal (1, \"\");\n+\t    }\n+\t  else if (strcmp (n, \"_M_function_name\") == 0)\n+\t    {\n+\t      const char *name = \"\";\n+\n+\t      if (current_function_decl)\n+\t\tname = cxx_printable_name (current_function_decl, 0);\n+\n+\t      val = build_string_literal (strlen (name) + 1, name);\n+\t    }\n+\t  else if (strcmp (n, \"_M_line\") == 0)\n+\t    val = build_int_cst (TREE_TYPE (field), LOCATION_LINE (loc));\n+\t  else if (strcmp (n, \"_M_column\") == 0)\n+\t    val = build_int_cst (TREE_TYPE (field), LOCATION_COLUMN (loc));\n+\t  else\n+\t    gcc_unreachable ();\n+\t  CONSTRUCTOR_APPEND_ELT (v, field, val);\n+\t}\n+\n+      tree ctor = build_constructor (source_location_impl, v);\n+      TREE_CONSTANT (ctor) = 1;\n+      TREE_STATIC (ctor) = 1;\n+      DECL_INITIAL (var) = ctor;\n+      varpool_node::finalize_decl (var);\n+      *entryp = entry;\n+      entryp->var = var;\n+    }\n+\n+  return build_fold_addr_expr_with_type_loc (loc, var, const_ptr_type_node);\n+}\n+\n #include \"gt-cp-cp-gimplify.h\""}, {"sha": "666894ff882636e249c3f64f3cb5180cc3bb7014", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -204,6 +204,8 @@ enum cp_tree_index\n \n     CPTI_ANY_TARG,\n \n+    CPTI_SOURCE_LOCATION_IMPL,\n+\n     CPTI_MAX\n };\n \n@@ -356,6 +358,9 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* A node which matches any template argument.  */\n #define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n \n+/* std::source_location::__impl class.  */\n+#define source_location_impl\t\tcp_global_trees[CPTI_SOURCE_LOCATION_IMPL]\n+\n /* Node to indicate default access. This must be distinct from the\n    access nodes in tree.h.  */\n \n@@ -6182,6 +6187,7 @@ struct GTY((chain_next (\"%h.next\"))) tinst_level {\n enum cp_built_in_function {\n   CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n   CP_BUILT_IN_INTEGER_PACK,\n+  CP_BUILT_IN_SOURCE_LOCATION,\n   CP_BUILT_IN_LAST\n };\n \n@@ -7735,6 +7741,7 @@ extern void clear_fold_cache\t\t\t(void);\n extern tree lookup_hotness_attribute\t\t(tree);\n extern tree process_stmt_hotness_attribute\t(tree, location_t);\n extern bool simple_empty_class_p\t\t(tree, tree, tree_code);\n+extern tree fold_builtin_source_location\t(location_t);\n \n /* in name-lookup.c */\n extern tree strip_using_decl                    (tree);"}, {"sha": "481c798a2cfa02068b3e3e5ada692a0255a3f261", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -4290,6 +4290,12 @@ cxx_init_decl_processing (void)\n \t\t\t    BUILT_IN_FRONTEND, NULL, NULL_TREE);\n   set_call_expr_flags (decl, ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n \n+  tree cptr_ftype = build_function_type_list (const_ptr_type_node, NULL_TREE);\n+  decl = add_builtin_function (\"__builtin_source_location\",\n+\t\t\t       cptr_ftype, CP_BUILT_IN_SOURCE_LOCATION,\n+\t\t\t       BUILT_IN_FRONTEND, NULL, NULL_TREE);\n+  set_call_expr_flags (decl, ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n+\n   integer_two_node = build_int_cst (NULL_TREE, 2);\n \n   /* Guess at the initial static decls size.  */"}, {"sha": "e82eaf222c0247f47250ff14e3435292c9fe3fd7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -5747,6 +5747,8 @@ get_std_name_hint (const char *name)\n     {\"shared_lock\", \"<shared_mutex>\", cxx14},\n     {\"shared_mutex\", \"<shared_mutex>\", cxx17},\n     {\"shared_timed_mutex\", \"<shared_mutex>\", cxx14},\n+    /* <source_location>.  */\n+    {\"source_location\", \"<source_location>\", cxx2a},\n     /* <sstream>.  */\n     {\"basic_stringbuf\", \"<sstream>\", cxx98},\n     {\"basic_istringstream\", \"<sstream>\", cxx98},"}, {"sha": "57745543163971051df9aab28b58136937a5486e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -445,7 +445,9 @@ builtin_valid_in_constant_expr_p (const_tree decl)\n   if (DECL_BUILT_IN_CLASS (decl) != BUILT_IN_NORMAL)\n     {\n       if (fndecl_built_in_p (decl, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n-\t\t\t   BUILT_IN_FRONTEND))\n+\t\t\t     BUILT_IN_FRONTEND)\n+\t  || fndecl_built_in_p (decl, CP_BUILT_IN_SOURCE_LOCATION,\n+\t\t\t\tBUILT_IN_FRONTEND))\n \treturn true;\n       /* Not a built-in.  */\n       return false;"}, {"sha": "8ae30c286a74d2539770f9b4ee64c96c894697ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -1,3 +1,20 @@\n+2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/srcloc1.C: New test.\n+\t* g++.dg/cpp2a/srcloc2.C: New test.\n+\t* g++.dg/cpp2a/srcloc3.C: New test.\n+\t* g++.dg/cpp2a/srcloc4.C: New test.\n+\t* g++.dg/cpp2a/srcloc5.C: New test.\n+\t* g++.dg/cpp2a/srcloc6.C: New test.\n+\t* g++.dg/cpp2a/srcloc7.C: New test.\n+\t* g++.dg/cpp2a/srcloc8.C: New test.\n+\t* g++.dg/cpp2a/srcloc9.C: New test.\n+\t* g++.dg/cpp2a/srcloc10.C: New test.\n+\t* g++.dg/cpp2a/srcloc11.C: New test.\n+\t* g++.dg/cpp2a/srcloc12.C: New test.\n+\t* g++.dg/cpp2a/srcloc13.C: New test.\n+\t* g++.dg/cpp2a/srcloc14.C: New test.\n+\n 2019-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/diagnostic/inconsistent-deduction-1.C: New."}, {"sha": "c88bc146a5db9e4ef469d1a881ec5a9847fac10b", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc1.C", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,114 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name;\n+      const char *_M_function_name;\n+      unsigned int _M_line, _M_column;\n+    };\n+    const __impl *__ptr;\n+    constexpr source_location () : __ptr (nullptr) {}\n+    static consteval source_location\n+    current (const void *__p = __builtin_source_location ()) {\n+      source_location __ret;\n+      __ret.__ptr = static_cast <const __impl *> (__p);\n+      return __ret;\n+    }\n+    constexpr const char *file_name () const {\n+      return __ptr ? __ptr->_M_file_name : \"\";\n+    }\n+    constexpr const char *function_name () const {\n+      return __ptr ? __ptr->_M_function_name : \"\";\n+    }\n+    constexpr unsigned line () const {\n+      return __ptr ? __ptr->_M_line : 0;\n+    }\n+    constexpr unsigned column () const {\n+      return __ptr ? __ptr->_M_column : 0;\n+    }\n+  };\n+}\n+\n+using namespace std;\n+\n+consteval source_location\n+bar (const source_location x = source_location::current ())\n+{\n+  return x;\n+}\n+\n+void\n+foo (const char **p, unsigned *q)\n+{\n+  constexpr source_location s = source_location::current ();\n+  constexpr source_location t = bar ();\n+  p[0] = s.file_name ();\n+  p[1] = s.function_name ();\n+  q[0] = s.line ();\n+  q[1] = s.column ();\n+  p[2] = t.file_name ();\n+  p[3] = t.function_name ();\n+  q[2] = t.line ();\n+  q[3] = t.column ();\n+  constexpr const char *r = s.file_name ();\n+}\n+\n+source_location s3 = source_location::current ();\n+\n+template <int N>\n+constexpr source_location\n+baz ()\n+{\n+  return source_location::current ();\n+}\n+\n+#define A \\\n+  source_location s[3] = { source_location::current (), \\\n+\t\t\t   source_location::current (), \\\n+\t\t\t   source_location::current () }\n+\n+source_location *\n+boo ()\n+{\n+  static A;\n+  return &s[0];\n+}\n+\n+constexpr source_location s1 = baz <0> ();\n+constexpr source_location s2 = baz <1> ();\n+const source_location *p1 = &s1;\n+const source_location *p2 = &s2;\n+static_assert (source_location::current ().line () == __LINE__);\n+static_assert (source_location::current ().column () == 42);\n+\n+constexpr bool\n+quux ()\n+{\n+  const char *file1 = source_location::current ().file_name ();\n+  const char *file2 = __FILE__;\n+  const char *function1 = source_location::current ().function_name ();\n+  const char *function2 = __FUNCTION__;\n+  int line1 = source_location::current ().line ();\n+  int line2 = __LINE__ - 1;\n+  int column\n+    = source_location::current ().column ();\n+  int i = 0;\n+  for (; file1[i]; i++)\n+    if (file1[i] != file2[i])\n+      return false;\n+  if (file2[i])\n+    return false;\n+  for (i = 0; function1[i]; i++)\n+    if (function1[i] != function2[i])\n+      return false;\n+  if (function2[i])\n+    return false;\n+  if (line1 != line2)\n+    return false;\n+  if (column != 33)\n+    return false;\n+  return true;\n+}\n+\n+static_assert (quux ());"}, {"sha": "a27016d1e3646063889a3b23a92f20d5baa8f4c0", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc10.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc10.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name, *_M_function_name;\n+      int __foo, _M_line, _M_column;\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "742a8925e549355f702988b2800133268af5c374", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc11.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc11.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name, *_M_function_name;\n+      int _M_line;\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "900e5a8cab8835986dddad016a24a6b2e9a34c17", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc12.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc12.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const void *_M_file_name;\n+      const char *_M_function_name;\n+      int _M_line, _M_column;\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl::_M_file_name' does not have 'const char \\\\*' type\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "890931236b8d91a78b31978f128ca31dc858e831", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc13.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc13.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name;\n+      const char *_M_function_name;\n+      float _M_line;\n+      int _M_column;\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl::_M_line' does not have integral type\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "21ab8311d36b44fb7a0f9c9ea8271f2960e07dda", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc14.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc14.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      // Test that ordering doesn't matter\n+      long long _M_column;\n+      const char *_M_file_name;\n+      int _M_line;\n+      const char *_M_function_name;\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();"}, {"sha": "380d83428cfd2d1be3b571d82dfeb8f301373b36", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc2.C", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,118 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  inline namespace _8 { }\n+  namespace _8 {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name;\n+      const char *_M_function_name;\n+      unsigned int _M_line, _M_column;\n+    };\n+    const __impl *__ptr;\n+    constexpr source_location () : __ptr (nullptr) {}\n+    static consteval source_location\n+    current (const void *__p = __builtin_source_location ()) {\n+      source_location __ret;\n+      __ret.__ptr = static_cast <const __impl *> (__p);\n+      return __ret;\n+    }\n+    constexpr const char *file_name () const {\n+      return __ptr ? __ptr->_M_file_name : \"\";\n+    }\n+    constexpr const char *function_name () const {\n+      return __ptr ? __ptr->_M_function_name : \"\";\n+    }\n+    constexpr unsigned line () const {\n+      return __ptr ? __ptr->_M_line : 0;\n+    }\n+    constexpr unsigned column () const {\n+      return __ptr ? __ptr->_M_column : 0;\n+    }\n+  };\n+  }\n+}\n+\n+using namespace std;\n+\n+consteval source_location\n+bar (const source_location x = source_location::current ())\n+{\n+  return x;\n+}\n+\n+void\n+foo (const char **p, unsigned *q)\n+{\n+  constexpr source_location s = source_location::current ();\n+  constexpr source_location t = bar ();\n+  p[0] = s.file_name ();\n+  p[1] = s.function_name ();\n+  q[0] = s.line ();\n+  q[1] = s.column ();\n+  p[2] = t.file_name ();\n+  p[3] = t.function_name ();\n+  q[2] = t.line ();\n+  q[3] = t.column ();\n+  constexpr const char *r = s.file_name ();\n+}\n+\n+source_location s3 = source_location::current ();\n+\n+template <int N>\n+constexpr source_location\n+baz ()\n+{\n+  return source_location::current ();\n+}\n+\n+#define A \\\n+  source_location s[3] = { source_location::current (), \\\n+\t\t\t   source_location::current (), \\\n+\t\t\t   source_location::current () }\n+\n+source_location *\n+boo ()\n+{\n+  static A;\n+  return &s[0];\n+}\n+\n+constexpr source_location s1 = baz <0> ();\n+constexpr source_location s2 = baz <1> ();\n+const source_location *p1 = &s1;\n+const source_location *p2 = &s2;\n+\n+static_assert (source_location::current ().line () == __LINE__);\n+static_assert (source_location::current ().column () == 42);\n+\n+constexpr bool\n+quux ()\n+{\n+  const char *file1 = source_location::current ().file_name ();\n+  const char *file2 = __FILE__;\n+  const char *function1 = source_location::current ().function_name ();\n+  const char *function2 = __FUNCTION__;\n+  int line1 = source_location::current ().line ();\n+  int line2 = __LINE__ - 1;\n+  int column\n+    = source_location::current ().column ();\n+  int i = 0;\n+  for (; file1[i]; i++)\n+    if (file1[i] != file2[i])\n+      return false;\n+  if (file2[i])\n+    return false;\n+  for (i = 0; function1[i]; i++)\n+    if (function1[i] != function2[i])\n+      return false;\n+  if (function2[i])\n+    return false;\n+  if (line1 != line2)\n+    return false;\n+  if (column != 33)\n+    return false;\n+  return true;\n+}\n+\n+static_assert (quux ());"}, {"sha": "b841ff6ceaa160f4a6dc92856fec53408ec4eaa2", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc3.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target c++2a } }\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'source_location' is not a member of 'std'\" }\n+// { dg-message \"std::source_location' is defined in header '<source_location>'; did you forget to '#include <source_location>'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-2 }"}, {"sha": "c8c5f51393139fc731004c02bf8f2e2e755cb58a", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc4.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  void source_location ();\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'void std::source_location\\\\(\\\\)' is not a type\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "0e89a00a13cf09ea0d934d30c5ed16754cbae12e", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc5.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  typedef int source_location;\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location'\\[^\\n\\r]*is not a class type\" }\n+// { dg-error \"'__impl' is not a member of 'std::source_location'\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-2 }"}, {"sha": "a389add2e7c90fb5af965479d1001490bcf2ff83", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc6.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'__impl' is not a member of 'std::source_location'\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "2a8b569a1af48b952914528c53a633adf426bd3d", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc7.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc7.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    static void __impl ();\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl\\\\(\\\\)' is not a type\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "db56bb5ff90116cd3071c988690506f74991c152", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc8.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    typedef int __impl;\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl()' is not a class type\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}, {"sha": "01ba00aaf41443cef8b39295e6bb3eb6f9aaba39", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff603745e385a1878a22fa3197911c9c4920a004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc9.C?ref=ff603745e385a1878a22fa3197911c9c4920a004", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+    };\n+  };\n+}\n+\n+auto x = __builtin_source_location ();\t// { dg-error \"'std::source_location::__impl' does not contain only non-static data members '_M_file_name', '_M_function_name', '_M_line' and '_M_column'\" }\n+// { dg-message \"evaluating '__builtin_source_location'\" \"\" { target *-*-* } .-1 }"}]}