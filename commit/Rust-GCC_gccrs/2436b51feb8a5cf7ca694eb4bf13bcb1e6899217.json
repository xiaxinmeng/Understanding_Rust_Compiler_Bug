{"sha": "2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzNmI1MWZlYjhhNWNmN2NhNjk0ZWI0YmYxM2JjYjFlNjg5OTIxNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-11T22:13:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-11T22:13:32Z"}, "message": "re PR c++/16964 (ICE in cp_parser_class_specifier due to redefinition)\n\n\tPR c++/16964\n\t* parser.c (cp_parser_class_specifier): Robustify.\n\n\tPR c++/16904\n\t* pt.c (tsubst_copy_and_build): Complain about invalid\n\tqualification.\n\n\tPR c++/16929\n\t* pt.c (tsubst_default_argument): Clear out current_class_ptr and\n\tcurrent_class_ref while tsubsting.\n\n\tPR c++/16964\n\t* g++.dg/parse/error16.C: New test.\n\n\tPR c++/16904\n\t* g++.dg/template/error14.C: New test.\n\n\tPR c++/16929\n\t* g++.dg/template/error15.C: New test.\n\nFrom-SVN: r85824", "tree": {"sha": "2147acebf7d4edadc9b4e0c586c723982b26e08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2147acebf7d4edadc9b4e0c586c723982b26e08f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/comments", "author": null, "committer": null, "parents": [{"sha": "5079843a2094412a6b25a23c1eeae4296d0ed15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5079843a2094412a6b25a23c1eeae4296d0ed15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5079843a2094412a6b25a23c1eeae4296d0ed15a"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "d15b6faff70b707283f10c1bca48d43d911d34a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -1,3 +1,16 @@\n+2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16964\n+\t* parser.c (cp_parser_class_specifier): Robustify.\n+\n+\tPR c++/16904\n+\t* pt.c (tsubst_copy_and_build): Complain about invalid\n+\tqualification.\n+\n+\tPR c++/16929\n+\t* pt.c (tsubst_default_argument): Clear out current_class_ptr and\n+\tcurrent_class_ref while tsubsting.\n+\t\n 2004-08-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16971"}, {"sha": "65872c8de5e81e501d83e3f334965b1db8227b6d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -12308,6 +12308,7 @@ cp_parser_class_specifier (cp_parser* parser)\n   bool nested_name_specifier_p;\n   unsigned saved_num_template_parameter_lists;\n   bool pop_p = false;\n+  tree scope = NULL_TREE;\n \n   push_deferring_access_checks (dk_no_deferred);\n \n@@ -12343,7 +12344,10 @@ cp_parser_class_specifier (cp_parser* parser)\n \n   /* Start the class.  */\n   if (nested_name_specifier_p)\n-    pop_p = push_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (type)));\n+    {\n+      scope = CP_DECL_CONTEXT (TYPE_MAIN_DECL (type));\n+      pop_p = push_scope (scope);\n+    }\n   type = begin_class_definition (type);\n \n   if (type == error_mark_node)\n@@ -12368,7 +12372,7 @@ cp_parser_class_specifier (cp_parser* parser)\n   if (type != error_mark_node)\n     type = finish_struct (type, attributes);\n   if (pop_p)\n-    pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (type)));\n+    pop_scope (scope);\n   /* If this class is not itself within the scope of another class,\n      then we need to parse the bodies of all of the queued function\n      definitions.  Note that the queued functions defined in a class"}, {"sha": "0574f44f1ad3efc5ab86ee6fc7cc06ab993c2eb2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -5942,6 +5942,9 @@ tsubst_aggr_type (tree t,\n tree\n tsubst_default_argument (tree fn, tree type, tree arg)\n {\n+  tree saved_class_ptr = NULL_TREE;\n+  tree saved_class_ref = NULL_TREE;\n+\n   /* This default argument came from a template.  Instantiate the\n      default argument here, not in tsubst.  In the case of\n      something like: \n@@ -5959,12 +5962,27 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n      within the scope of FN.  Since push_access_scope sets\n      current_function_decl, we must explicitly clear it here.  */\n   current_function_decl = NULL_TREE;\n+  /* The \"this\" pointer is not valid in a default argument.  */\n+  if (cfun)\n+    {\n+      saved_class_ptr = current_class_ptr;\n+      cp_function_chain->x_current_class_ptr = NULL_TREE;\n+      saved_class_ref = current_class_ref;\n+      cp_function_chain->x_current_class_ref = NULL_TREE;\n+    }\n \n   push_deferring_access_checks(dk_no_deferred);\n   arg = tsubst_expr (arg, DECL_TI_ARGS (fn),\n \t\t     tf_error | tf_warning, NULL_TREE);\n   pop_deferring_access_checks();\n \n+  /* Restore the \"this\" pointer.  */\n+  if (cfun)\n+    {\n+      cp_function_chain->x_current_class_ptr = saved_class_ptr;\n+      cp_function_chain->x_current_class_ref = saved_class_ref;\n+    }\n+\n   pop_access_scope (fn);\n \n   /* Make sure the default argument is reasonable.  */\n@@ -8495,6 +8513,21 @@ tsubst_copy_and_build (tree t,\n \t\treturn error_mark_node;\n \t      }\n \t  }\n+\telse if (TREE_CODE (member) == SCOPE_REF\n+\t\t && !CLASS_TYPE_P (TREE_OPERAND (member, 0))\n+\t\t && TREE_CODE (TREE_OPERAND (member, 0)) != NAMESPACE_DECL)\n+\t  {\n+\t    if (complain & tf_error)\n+\t      {\n+\t\tif (TYPE_P (TREE_OPERAND (member, 0)))\n+\t\t  error (\"`%T' is not a class or namespace\", \n+\t\t\t TREE_OPERAND (member, 0));\n+\t\telse\n+\t\t  error (\"`%D' is not a class or namespace\", \n+\t\t\t TREE_OPERAND (member, 0));\n+\t      }\n+\t    return error_mark_node;\n+\t  }\n \telse if (TREE_CODE (member) == FIELD_DECL)\n \t  return finish_non_static_data_member (member, object, NULL_TREE);\n "}, {"sha": "9959a9d170948ed22a9cfb0f500059b4e9339a15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -1,3 +1,14 @@\n+2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16964\n+\t* g++.dg/parse/error16.C: New test.\n+\n+\tPR c++/16904\n+\t* g++.dg/template/error14.C: New test.\n+\n+\tPR c++/16929\n+\t* g++.dg/template/error15.C: New test.\n+\n 2004-08-11  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/darwin-ld-20040809-1.c: New test."}, {"sha": "afc790e072e455d876ab9f9db835260280526d0c", "filename": "gcc/testsuite/g++.dg/parse/error16.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/16964\n+\n+struct A\n+{\n+  struct B {}; // { dg-error \"\" }\n+};\n+\n+struct A::B{}; // { dg-error \"\" }"}, {"sha": "c5043cfb4cba782904855d54af01d0a631e76520", "filename": "gcc/testsuite/g++.dg/template/error14.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror14.C?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/16904\n+\n+template<typename T> struct X\n+{\n+  X() { this->T::i; } // { dg-error \"\" }\n+};\n+\n+X<int> x;"}, {"sha": "5a1a3227dda4a613b092caeb05eeb1a680401860", "filename": "gcc/testsuite/g++.dg/template/error15.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2436b51feb8a5cf7ca694eb4bf13bcb1e6899217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C?ref=2436b51feb8a5cf7ca694eb4bf13bcb1e6899217", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/16929\n+\n+template <class T>\n+class A {\n+  int x;\n+};\n+\n+template <class T>\n+class B {\n+protected:\n+    \n+  A<T> a; // { dg-error \"\" }\n+    \n+  void f(const A<T> * a1 = &a);\n+    \n+  void g(void);\n+};\n+\n+template <class T>\n+void B<T>::g(void) {\n+  f(); // { dg-error \"\" }\n+}\n+\n+template class B<long>; // { dg-error \"\" }"}]}