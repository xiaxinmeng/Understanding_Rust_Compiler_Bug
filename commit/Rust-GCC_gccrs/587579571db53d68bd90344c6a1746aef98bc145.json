{"sha": "587579571db53d68bd90344c6a1746aef98bc145", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3NTc5NTcxZGI1M2Q2OGJkOTAzNDRjNmExNzQ2YWVmOThiYzE0NQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-01-23T17:01:00Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-01-23T17:01:00Z"}, "message": "re PR fortran/19294 (intrinsic_transpose.f90 runtime crash)\n\n2005-01-23  James A. Morrison  <phython@gcc.gnu.org>\n\tPaul Brook  <paul@codesourcery.com>\n\n\tPR fortran/19294\n\t* iresolve.c (gfc_resolve_transpose): Resolve to transpose_c4 or\n\ttranspose_c8 for complex types.\nlibgfortran/\n\t* Makefile.am: Add transpose_c4.c and transpose_c8.c.\n\t* intrinsics/cshift0.c: Use separate optimized loops for complex types.\n\t* m4/transpose.m4: Include type letter in function name.\n\t* Makefile.in: Regenerate.\n\t* generated/transpose_*.c: Regenerate.\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r94116", "tree": {"sha": "d9ae2043205be06ce0d7a27be58b05e0a8e5c085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ae2043205be06ce0d7a27be58b05e0a8e5c085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/587579571db53d68bd90344c6a1746aef98bc145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587579571db53d68bd90344c6a1746aef98bc145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587579571db53d68bd90344c6a1746aef98bc145", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587579571db53d68bd90344c6a1746aef98bc145/comments", "author": null, "committer": null, "parents": [{"sha": "b9750434708d2f3cc276d52c3f772c277fd6f4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9750434708d2f3cc276d52c3f772c277fd6f4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9750434708d2f3cc276d52c3f772c277fd6f4a7"}], "stats": {"total": 403, "additions": 339, "deletions": 64}, "files": [{"sha": "c692f3788bdce3bc1a3320b979683680fc4a3533", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,3 +1,9 @@\n+2005-01-23  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR fortran/19294\n+\t* iresolve.c (gfc_resolve_transpose): Resolve to transpose_c4 or\n+\ttranspose_c8 for complex types.\n+\n 2005-01-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* data.c, dependency.c, f95-lang.c, io.c, trans-array.c,"}, {"sha": "a4ab225176134e6fd69891fd02375599e7bbdb07", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1340,31 +1340,32 @@ gfc_resolve_transpose (gfc_expr * f, gfc_expr * matrix)\n       mpz_init_set (f->shape[1], matrix->shape[0]);\n     }\n \n-  switch (matrix->ts.type)\n-    {\n-    case BT_COMPLEX:\n-      kind = matrix->ts.kind * 2;\n-      break;\n-\n-    case BT_REAL:\n-    case BT_INTEGER:\n-    case BT_LOGICAL:\n-      kind = matrix->ts.kind;\n-      break;\n-\n-    default:\n-      kind = 0;\n-      break;\n-\n-    }\n+  kind = matrix->ts.kind;\n \n   switch (kind)\n     {\n     case 4:\n     case 8:\n-    /* case 16: */\n-      f->value.function.name =\n-        gfc_get_string (PREFIX(\"transpose_%d\"), kind);\n+      switch (matrix->ts.type)\n+        {\n+        case BT_COMPLEX:\n+          f->value.function.name =\n+            gfc_get_string (PREFIX(\"transpose_c%d\"), kind);\n+          break;\n+\n+        case BT_INTEGER:\n+        case BT_REAL:\n+        case BT_LOGICAL:\n+\t  /* Use the integer routines for real and logical cases.  This\n+\t     assumes they all have the same alignment requirements.  */\n+          f->value.function.name =\n+            gfc_get_string (PREFIX(\"transpose_i%d\"), kind);\n+          break;\n+\n+        default:\n+          f->value.function.name = PREFIX(\"transpose\");\n+          break;\n+        }\n       break;\n \n     default:"}, {"sha": "9f9bee8f7f921387f31c1ed6a14f39cc336e2b4d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,3 +1,13 @@\n+2005-01-23  James A. Morrison  <phython@gcc.gnu.org>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/19294\n+\t* Makefile.am: Add transpose_c4.c and transpose_c8.c.\n+\t* intrinsics/cshift0.c: Use separate optimized loops for complex types.\n+\t* m4/transpose.m4: Include type letter in function name.\n+\t* Makefile.in: Regenerate.\n+\t* generated/transpose_*.c: Regenerate.\n+\n 2005-01-22  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/19451"}, {"sha": "27b31333ae1810751e7680ffbc8821049e63a9de", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -202,7 +202,9 @@ generated/matmul_l8.c\n \n i_transpose_c= \\\n generated/transpose_i4.c \\\n-generated/transpose_i8.c\n+generated/transpose_i8.c \\\n+generated/transpose_c4.c \\\n+generated/transpose_c8.c\n \n i_shape_c= \\\n generated/shape_i4.c \\"}, {"sha": "6449b3b5e4409fbafe3b36281783d0b06ee6c26c", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.4 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -98,7 +98,8 @@ am__objects_15 = dotprod_c4.lo dotprod_c8.lo\n am__objects_16 = matmul_i4.lo matmul_i8.lo matmul_r4.lo matmul_r8.lo \\\n \tmatmul_c4.lo matmul_c8.lo\n am__objects_17 = matmul_l4.lo matmul_l8.lo\n-am__objects_18 = transpose_i4.lo transpose_i8.lo\n+am__objects_18 = transpose_i4.lo transpose_i8.lo transpose_c4.lo \\\n+\ttranspose_c8.lo\n am__objects_19 = shape_i4.lo shape_i8.lo\n am__objects_20 = eoshift1_4.lo eoshift1_8.lo\n am__objects_21 = eoshift3_4.lo eoshift3_8.lo\n@@ -486,7 +487,9 @@ generated/matmul_l8.c\n \n i_transpose_c = \\\n generated/transpose_i4.c \\\n-generated/transpose_i8.c\n+generated/transpose_i8.c \\\n+generated/transpose_c4.c \\\n+generated/transpose_c8.c\n \n i_shape_c = \\\n generated/shape_i4.c \\\n@@ -685,7 +688,6 @@ I_M4_DEPS = m4/iparm.m4\n I_M4_DEPS0 = $(I_M4_DEPS) m4/iforeach.m4\n I_M4_DEPS1 = $(I_M4_DEPS) m4/ifunction.m4\n EXTRA_DIST = $(m4_files)\n-\n all: $(BUILT_SOURCES) config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-am\n \n@@ -1046,6 +1048,12 @@ transpose_i4.lo: generated/transpose_i4.c\n transpose_i8.lo: generated/transpose_i8.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o transpose_i8.lo `test -f 'generated/transpose_i8.c' || echo '$(srcdir)/'`generated/transpose_i8.c\n \n+transpose_c4.lo: generated/transpose_c4.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o transpose_c4.lo `test -f 'generated/transpose_c4.c' || echo '$(srcdir)/'`generated/transpose_c4.c\n+\n+transpose_c8.lo: generated/transpose_c8.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o transpose_c8.lo `test -f 'generated/transpose_c8.c' || echo '$(srcdir)/'`generated/transpose_c8.c\n+\n shape_i4.lo: generated/shape_i4.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o shape_i4.lo `test -f 'generated/shape_i4.c' || echo '$(srcdir)/'`generated/shape_i4.c\n "}, {"sha": "c61d9072a81f56aa2fcc57d45af3e05611f1b651", "filename": "libgfortran/generated/transpose_c4.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c4.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -0,0 +1,98 @@\n+/* Implementation of the TRANSPOSE intrinsic\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Contributed by Tobias Schl\ufffdter\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <assert.h>\n+#include \"libgfortran.h\"\n+\n+extern void transpose_c4 (gfc_array_c4 * ret, gfc_array_c4 * source);\n+export_proto(transpose_c4);\n+\n+void\n+transpose_c4 (gfc_array_c4 * ret, gfc_array_c4 * source)\n+{\n+  /* r.* indicates the return array.  */\n+  index_type rxstride, rystride;\n+  GFC_COMPLEX_4 *rptr;\n+  /* s.* indicates the source array.  */\n+  index_type sxstride, systride;\n+  const GFC_COMPLEX_4 *sptr;\n+\n+  index_type xcount, ycount;\n+  index_type x, y;\n+\n+  assert (GFC_DESCRIPTOR_RANK (source) == 2);\n+\n+  if (ret->data == NULL)\n+    {\n+      assert (GFC_DESCRIPTOR_RANK (ret) == 2);\n+      assert (ret->dtype == source->dtype);\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 (ret));\n+      ret->base = 0;\n+    }\n+\n+  if (ret->dim[0].stride == 0)\n+    ret->dim[0].stride = 1;\n+  if (source->dim[0].stride == 0)\n+    source->dim[0].stride = 1;\n+\n+  sxstride = source->dim[0].stride;\n+  systride = source->dim[1].stride;\n+  xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+  ycount = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+  rxstride = ret->dim[0].stride;\n+  rystride = ret->dim[1].stride;\n+\n+  rptr = ret->data;\n+  sptr = source->data;\n+\n+  for (y=0; y < ycount; y++)\n+    {\n+      for (x=0; x < xcount; x++)\n+        {\n+          *rptr = *sptr;\n+\n+          sptr += sxstride;\n+          rptr += rystride;\n+        }\n+        sptr += systride - (sxstride * xcount);\n+        rptr += rxstride - (rystride * xcount);\n+    }\n+}"}, {"sha": "fd74f26f5da5ecff978840a415147e509a62758a", "filename": "libgfortran/generated/transpose_c8.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c8.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -0,0 +1,98 @@\n+/* Implementation of the TRANSPOSE intrinsic\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n+   Contributed by Tobias Schl\ufffdter\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <assert.h>\n+#include \"libgfortran.h\"\n+\n+extern void transpose_c8 (gfc_array_c8 * ret, gfc_array_c8 * source);\n+export_proto(transpose_c8);\n+\n+void\n+transpose_c8 (gfc_array_c8 * ret, gfc_array_c8 * source)\n+{\n+  /* r.* indicates the return array.  */\n+  index_type rxstride, rystride;\n+  GFC_COMPLEX_8 *rptr;\n+  /* s.* indicates the source array.  */\n+  index_type sxstride, systride;\n+  const GFC_COMPLEX_8 *sptr;\n+\n+  index_type xcount, ycount;\n+  index_type x, y;\n+\n+  assert (GFC_DESCRIPTOR_RANK (source) == 2);\n+\n+  if (ret->data == NULL)\n+    {\n+      assert (GFC_DESCRIPTOR_RANK (ret) == 2);\n+      assert (ret->dtype == source->dtype);\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 (ret));\n+      ret->base = 0;\n+    }\n+\n+  if (ret->dim[0].stride == 0)\n+    ret->dim[0].stride = 1;\n+  if (source->dim[0].stride == 0)\n+    source->dim[0].stride = 1;\n+\n+  sxstride = source->dim[0].stride;\n+  systride = source->dim[1].stride;\n+  xcount = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+  ycount = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+  rxstride = ret->dim[0].stride;\n+  rystride = ret->dim[1].stride;\n+\n+  rptr = ret->data;\n+  sptr = source->data;\n+\n+  for (y=0; y < ycount; y++)\n+    {\n+      for (x=0; x < xcount; x++)\n+        {\n+          *rptr = *sptr;\n+\n+          sptr += sxstride;\n+          rptr += rystride;\n+        }\n+        sptr += systride - (sxstride * xcount);\n+        rptr += rxstride - (rystride * xcount);\n+    }\n+}"}, {"sha": "0945d06512603018bb9935d543e54f62c3cbe91e", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -32,11 +32,11 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n-extern void transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source);\n-export_proto(transpose_4);\n+extern void transpose_i4 (gfc_array_i4 * ret, gfc_array_i4 * source);\n+export_proto(transpose_i4);\n \n void\n-transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n+transpose_i4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n {\n   /* r.* indicates the return array.  */\n   index_type rxstride, rystride;"}, {"sha": "f89dd6aac5a7172aaaa2505aee62c555503313d2", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -32,11 +32,11 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n-extern void transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source);\n-export_proto(transpose_8);\n+extern void transpose_i8 (gfc_array_i8 * ret, gfc_array_i8 * source);\n+export_proto(transpose_i8);\n \n void\n-transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n+transpose_i8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n {\n   /* r.* indicates the return array.  */\n   index_type rxstride, rystride;"}, {"sha": "2dd6a022e8a6d294866515265a11b29583049589", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 79, "deletions": 27, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,5 +1,5 @@\n /* Generic implementation of the CSHIFT intrinsic\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Feng Wang <wf_cs@yahoo.com>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -72,6 +72,8 @@ DEF_COPY_LOOP(int, int)\n DEF_COPY_LOOP(long, long)\n DEF_COPY_LOOP(double, double)\n DEF_COPY_LOOP(ldouble, long double)\n+DEF_COPY_LOOP(cfloat, _Complex float)\n+DEF_COPY_LOOP(cdouble, _Complex double)\n \n \n static void\n@@ -96,19 +98,46 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   index_type size;\n   index_type len;\n   index_type n;\n+  int whichloop;\n \n   if (which < 1 || which > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   which = which - 1;\n \n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n+  /* The values assigned here must match the cases in the inner loop.  */\n+  whichloop = 0;\n+  switch (GFC_DESCRIPTOR_TYPE (array))\n+    {\n+    case GFC_DTYPE_LOGICAL:\n+    case GFC_DTYPE_INTEGER:\n+    case GFC_DTYPE_REAL:\n+      if (size == sizeof (int))\n+\twhichloop = 1;\n+      else if (size == sizeof (long))\n+\twhichloop = 2;\n+      else if (size == sizeof (double))\n+\twhichloop = 3;\n+      else if (size == sizeof (long double))\n+\twhichloop = 4;\n+      break;\n+\n+    case GFC_DTYPE_COMPLEX:\n+      if (size == sizeof (_Complex float))\n+\twhichloop = 5;\n+      else if (size == sizeof (_Complex double))\n+\twhichloop = 6;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n   /* Initialized for avoiding compiler warnings.  */\n   roffset = size;\n   soffset = size;\n@@ -187,31 +216,54 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t  /* Otherwise, we'll have to perform the copy one element at\n \t     a time.  We can speed this up a tad for common cases of \n \t     fundamental types.  */\n-\t  if (size == sizeof(int))\n-\t    copy_loop_int (rptr, sptr, roffset, soffset, len, shift);\n-\t  else if (size == sizeof(long))\n-\t    copy_loop_long (rptr, sptr, roffset, soffset, len, shift);\n-\t  else if (size == sizeof(double))\n-\t    copy_loop_double (rptr, sptr, roffset, soffset, len, shift);\n-\t  else if (size == sizeof(long double))\n-\t    copy_loop_ldouble (rptr, sptr, roffset, soffset, len, shift);\n-\t  else\n+\t  switch (whichloop)\n \t    {\n-\t      char *dest = rptr;\n-\t      const char *src = &sptr[shift * soffset];\n-\n-\t      for (n = 0; n < len - shift; n++)\n-\t\t{\n-\t\t  memcpy (dest, src, size);\n-\t\t  dest += roffset;\n-\t\t  src += soffset;\n-\t\t}\n-\t      for (src = sptr, n = 0; n < shift; n++)\n-\t\t{\n-\t\t  memcpy (dest, src, size);\n-\t\t  dest += roffset;\n-\t\t  src += soffset;\n-\t\t}\n+\t    case 0:\n+\t      {\n+\t\tchar *dest = rptr;\n+\t\tconst char *src = &sptr[shift * soffset];\n+\n+\t\tfor (n = 0; n < len - shift; n++)\n+\t\t  {\n+\t\t    memcpy (dest, src, size);\n+\t\t    dest += roffset;\n+\t\t    src += soffset;\n+\t\t  }\n+\t\tfor (src = sptr, n = 0; n < shift; n++)\n+\t\t  {\n+\t\t    memcpy (dest, src, size);\n+\t\t    dest += roffset;\n+\t\t    src += soffset;\n+\t\t  }\n+\t      }\n+\t      break;\n+\n+\t    case 1:\n+\t      copy_loop_int (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\n+\t    case 2:\n+\t      copy_loop_long (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\n+\t    case 3:\n+\t      copy_loop_double (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\n+\t    case 4:\n+\t      copy_loop_ldouble (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\n+\t    case 5:\n+\t      copy_loop_cfloat (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\t      \n+\t    case 6:\n+\t      copy_loop_cdouble (rptr, sptr, roffset, soffset, len, shift);\n+\t      break;\n+\n+\t    default:\n+\t      abort ();\n \t    }\n \t}\n "}, {"sha": "4ae6c091c62e32024f1b098b3eb58d6f7b40033a", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587579571db53d68bd90344c6a1746aef98bc145/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=587579571db53d68bd90344c6a1746aef98bc145", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the TRANSPOSE intrinsic\n-   Copyright 2003 Free Software Foundation, Inc.\n+   Copyright 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Tobias Schl\ufffdter\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -33,11 +33,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-extern void transpose_`'rtype_kind (rtype * ret, rtype * source);\n-export_proto(transpose_`'rtype_kind);\n+extern void transpose_`'rtype_code (rtype * ret, rtype * source);\n+export_proto(transpose_`'rtype_code);\n \n void\n-transpose_`'rtype_kind (rtype * ret, rtype * source)\n+transpose_`'rtype_code (rtype * ret, rtype * source)\n {\n   /* r.* indicates the return array.  */\n   index_type rxstride, rystride;"}]}