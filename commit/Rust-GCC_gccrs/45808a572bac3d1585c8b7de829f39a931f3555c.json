{"sha": "45808a572bac3d1585c8b7de829f39a931f3555c", "node_id": "C_kwDOANBUbNoAKDQ1ODA4YTU3MmJhYzNkMTU4NWM4YjdkZTgyOWYzOWE5MzFmMzU1NWM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-23T15:13:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:20Z"}, "message": "[Ada] Generate debug info entry for user-defined access subtype\n\nThis is consistent with the other kinds of subtypes.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Access_Subtype>: Do\n\tnot reuse the TYPE_DECL of the base type.", "tree": {"sha": "e6561e74d21f6bec5b405c63eff849b43b52decf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6561e74d21f6bec5b405c63eff849b43b52decf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45808a572bac3d1585c8b7de829f39a931f3555c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45808a572bac3d1585c8b7de829f39a931f3555c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45808a572bac3d1585c8b7de829f39a931f3555c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45808a572bac3d1585c8b7de829f39a931f3555c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589163e18a291ce6f0befc67be4ca9ad6924d959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589163e18a291ce6f0befc67be4ca9ad6924d959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589163e18a291ce6f0befc67be4ca9ad6924d959"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "e7bfc015379dfa189962e8684289a77c9de8ac3a", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45808a572bac3d1585c8b7de829f39a931f3555c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45808a572bac3d1585c8b7de829f39a931f3555c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=45808a572bac3d1585c8b7de829f39a931f3555c", "patch": "@@ -3867,7 +3867,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n     case E_Access_Subtype:\n       /* We treat this as identical to its base type; any constraint is\n \t meaningful only to the front-end.  */\n-      gnu_decl = gnat_to_gnu_entity (gnat_equiv_type, NULL_TREE, false);\n+      gnu_type = gnat_to_gnu_type (gnat_equiv_type);\n       maybe_present = true;\n \n       /* The designated subtype must be elaborated as well, if it does\n@@ -3877,11 +3877,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  && Is_Frozen (Directly_Designated_Type (gnat_entity))\n \t  && No (Freeze_Node (Directly_Designated_Type (gnat_entity))))\n \t{\n-\t  tree gnu_base_type = TREE_TYPE (gnu_decl);\n-\t  tree gnu_desig_base_type\n-\t    = TYPE_IS_FAT_POINTER_P (gnu_base_type)\n-\t      ? TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_base_type)))\n-\t      : TREE_TYPE (gnu_base_type);\n+\t  tree gnu_desig_type\n+\t    = TYPE_IS_FAT_POINTER_P (gnu_type)\n+\t      ? TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_type)))\n+\t      : TREE_TYPE (gnu_type);\n \n \t  /* If we are to defer elaborating incomplete types, make a dummy\n \t     type node and elaborate it later.  */\n@@ -3898,7 +3897,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t  /* Otherwise elaborate the designated subtype only if its base type\n \t     has already been elaborated.  */\n-\t  else if (!TYPE_IS_DUMMY_P (gnu_desig_base_type))\n+\t  else if (!TYPE_IS_DUMMY_P (gnu_desig_type))\n \t    gnat_to_gnu_entity (Directly_Designated_Type (gnat_entity),\n \t\t\t\tNULL_TREE, false);\n \t}"}]}