{"sha": "37130ac37263ec5b79b6265623d933c83a85acd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxMzBhYzM3MjYzZWM1Yjc5YjYyNjU2MjNkOTMzYzgzYTg1YWNkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-17T19:36:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-17T19:36:41Z"}, "message": "search.c (dfs_record_inheritance): Ignore template type parms.\n\n\t* search.c (dfs_record_inheritance): Ignore template type parms.\n\nFixes 13688.\n\n\t* friend.c (do_friend): Warn about non-template friends in templates.\n\n\t* call.c (build_op_delete_call): Fix handling of inherited delete.\n\nFrom-SVN: r16551", "tree": {"sha": "6585cff723446f24dbc87b66a4ad2f9a2affc059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6585cff723446f24dbc87b66a4ad2f9a2affc059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37130ac37263ec5b79b6265623d933c83a85acd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37130ac37263ec5b79b6265623d933c83a85acd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37130ac37263ec5b79b6265623d933c83a85acd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37130ac37263ec5b79b6265623d933c83a85acd3/comments", "author": null, "committer": null, "parents": [{"sha": "cb0112a7f392760a3094d53eba443c43006aafec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0112a7f392760a3094d53eba443c43006aafec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0112a7f392760a3094d53eba443c43006aafec"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "a480ebaf829b5cc56611ed4250f03f3aa5557b5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37130ac37263ec5b79b6265623d933c83a85acd3", "patch": "@@ -1,3 +1,11 @@\n+Mon Nov 17 02:01:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* friend.c (do_friend): Warn about non-template friends in templates.\n+\n+\t* call.c (build_op_delete_call): Fix handling of inherited delete.\n+\n+\t* search.c (dfs_record_inheritance): Ignore template type parms.\n+\n Sat Nov 15 00:30:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (build_new_op): Fix copy error."}, {"sha": "d4ecb62cd85736cce8c4d55fd4e0972380b29d4f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=37130ac37263ec5b79b6265623d933c83a85acd3", "patch": "@@ -5125,15 +5125,17 @@ build_op_delete_call (code, addr, size, flags)\n   fnname = ansi_opname[code];\n \n   if (IS_AGGR_TYPE (type) && ! (flags & LOOKUP_GLOBAL))\n-    /* Here we make assumptions about how instantiate_type works.  This comes\n-       out as a simple TREE_LIST, so it looks like overloaded globals to\n-       instantiate_type; this works out fine.  If something changes we\n-       might have to build this up like build_offset_ref does.  */\n     fns = lookup_fnfields (TYPE_BINFO (type), fnname, 0);\n   else\n     fns = NULL_TREE;\n \n-  if (fns == NULL_TREE)\n+  if (fns)\n+    {\n+      /* Build this up like build_offset_ref does.  */\n+      fns = build_tree_list (error_mark_node, fns);\n+      TREE_TYPE (fns) = build_offset_type (type, unknown_type_node);\n+    }\n+  else\n     fns = lookup_name_nonclass (fnname);\n \n   /* We can recognize a placement delete because of LOOKUP_SPECULATIVELY;\n@@ -5182,7 +5184,7 @@ build_op_delete_call (code, addr, size, flags)\n     {\n       if (TREE_PURPOSE (fns))\n \t/* TREE_PURPOSE is only set for lists of member functions.  */\n-\tenforce_access (TREE_PURPOSE (fns), fn);\n+\tenforce_access (TREE_PURPOSE (TREE_VALUE (fns)), fn);\n       return build_function_call (fn, expr_tree_cons (NULL_TREE, addr, args));\n     }\n "}, {"sha": "28c0bb44a68e67e8ef5aac3a45832b66d129d511", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=37130ac37263ec5b79b6265623d933c83a85acd3", "patch": "@@ -381,10 +381,26 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \tDECL_CLASS_CONTEXT (decl) = current_class_type;\n \n       if (! DECL_USE_TEMPLATE (decl))\n-\t/* We can call pushdecl here, because the TREE_CHAIN of this\n-\t   FUNCTION_DECL is not needed for other purposes.  Don't do this\n-\t   for a template instantiation. */\n-\tdecl = pushdecl (decl);\n+\t{\n+\t  /* We can call pushdecl here, because the TREE_CHAIN of this\n+\t     FUNCTION_DECL is not needed for other purposes.  Don't do this\n+\t     for a template instantiation. */\n+\t  decl = pushdecl (decl);\n+\n+\t  if (! funcdef_flag && ! flag_guiding_decls\n+\t      && current_template_parms && uses_template_parms (decl))\n+\t    {\n+\t      static int explained;\n+\t      cp_warning (\"friend declaration `%#D'\", decl);\n+\t      warning (\"  will not be treated as a template instantiation\");\n+\t      if (! explained)\n+\t\t{\n+\t\t  warning (\"  unless you compile with -fguiding-decls\");\n+\t\t  warning (\"  or add <> after the function name\");\n+\t\t  explained = 1;\n+\t\t}\n+\t    }\n+\t}\n \n       make_decl_rtl (decl, NULL_PTR, 1);\n       add_friend (current_class_type, decl);"}, {"sha": "03e00fa8898571f5b3ad9af7b1cfcf6c7b32c834", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37130ac37263ec5b79b6265623d933c83a85acd3/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=37130ac37263ec5b79b6265623d933c83a85acd3", "patch": "@@ -3134,6 +3134,10 @@ dfs_record_inheritance (binfo)\n       tree baseclass = BINFO_TYPE (base_binfo);\n       mi_boolean *base_row = BINFO_DERIVES_FROM_STAR (base_binfo);\n \n+      if (TREE_CODE (baseclass) == TEMPLATE_TYPE_PARM)\n+\tcontinue;\n+      my_friendly_assert (CLASSTYPE_CID (baseclass) != 0, 2365);\n+\n       /* Don't search if there's nothing there!  MI_SIZE can be\n \t zero as a result of parse errors.  */\n       if (TYPE_BINFO_BASETYPES (baseclass) && mi_size > 0)"}]}