{"sha": "e314e3318ad35415f1ea44093c0b0fba263da358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxNGUzMzE4YWQzNTQxNWYxZWE0NDA5M2MwYjBmYmEyNjNkYTM1OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-08-03T00:31:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-08-03T00:31:39Z"}, "message": "Workaround for -fssa testsuite failures.\n\n\t* config/ia64/ia64-protos.h (flag_ssa): Declare.\n\t* config/ia64/ia64.md (movti_internal, movti_internal+1): New.\n\nFrom-SVN: r35439", "tree": {"sha": "7efcac071a1e56faf0aa7eec843f12ec37038a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7efcac071a1e56faf0aa7eec843f12ec37038a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e314e3318ad35415f1ea44093c0b0fba263da358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e314e3318ad35415f1ea44093c0b0fba263da358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e314e3318ad35415f1ea44093c0b0fba263da358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e314e3318ad35415f1ea44093c0b0fba263da358/comments", "author": null, "committer": null, "parents": [{"sha": "3db35af4a5e89aa783388b58240b7c5b2561a187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db35af4a5e89aa783388b58240b7c5b2561a187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db35af4a5e89aa783388b58240b7c5b2561a187"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "58b1aa4ce7d7a43f4935f61daed278a48019e67d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e314e3318ad35415f1ea44093c0b0fba263da358", "patch": "@@ -1,3 +1,8 @@\n+2000-08-02  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64-protos.h (flag_ssa): Declare.\n+\t* config/ia64/ia64.md (movti_internal, movti_internal+1): New.\n+\n 2000-08-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* dce.c: Remove all uses of assert."}, {"sha": "eb65ca81500304be8cd439c31b5dc6f7ab48befd", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=e314e3318ad35415f1ea44093c0b0fba263da358", "patch": "@@ -118,3 +118,6 @@ extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n extern unsigned int ia64_compute_frame_size PARAMS((int));\n extern void save_restore_insns PARAMS((int));\n+\n+/* ??? Flag defined in toplev.c, for ia64.md -fssa hack.  */\n+extern int flag_ssa;"}, {"sha": "4cc442bfa0d8b6b88f38a66809dac05da6dab3d4", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e314e3318ad35415f1ea44093c0b0fba263da358/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=e314e3318ad35415f1ea44093c0b0fba263da358", "patch": "@@ -551,6 +551,26 @@\n   \"addl %0 = @ltoff(%1), gp\"\n   [(set_attr \"type\" \"A\")])\n \n+;; ??? These patterns exist to make SSA happy.  We can get TImode values\n+;; because of structure moves generated for parameter and return value\n+;; loads and stores.\n+\n+(define_insn \"*movti_internal\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n+\t(match_operand:TI 1 \"register_operand\" \"r\"))]\n+  \"flag_ssa\"\n+  \"#\"\n+  [(set_attr \"type\" \"unknown\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_split\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(match_operand:TI 1 \"register_operand\" \"\"))]\n+  \"flag_ssa && reload_completed\"\n+  [(set (subreg:DI (match_dup 0) 0) (subreg:DI (match_dup 1) 0))\n+   (set (subreg:DI (match_dup 0) 1) (subreg:DI (match_dup 1) 1))]\n+  \"\")\n+\n ;; Floating Point Moves\n ;;\n ;; Note - Patterns for SF mode moves are compulsory, but"}]}