{"sha": "d48f3dca79fe7cd124c90d33dcc88b2147e23856", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4ZjNkY2E3OWZlN2NkMTI0YzkwZDMzZGNjODhiMjE0N2UyMzg1Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:19:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:19:56Z"}, "message": "[multiple changes]\n\n2012-07-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Extend previous change to elementary types.\n\n2012-07-09  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch8.adb (Expand_N_Subprogram_Renaming_Declaration): Reverse\n\tprevious patch since unconditionally handling as renaming_as_body\n\trenamings of predefined dispatching equality and unequality operator\n\tcause visibility problems with private overridings of the equality\n\toperator (see ACATS C854001).\n\n2012-07-09  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_attr.adb (Signal_Bad_Attribute): Raise Program_Error in\n\tcase of internal attribute names (already rejected by the parser).\n\t* par-ch13.adb (P_Representation_Clause): Complain if an internal\n\tattribute name that comes from source occurs.\n\t* par-ch4.adb (P_Name): Complain if an internal attribute name\n\toccurs in the context of an attribute reference.\n\t* par-util.adb (Signal_Bad_Attribute): Don't complain about\n\tmispelling attribute with internal attributes.\n\t* sem_attr.adb (Analyze_Attribute): Raise Program_Error in case\n\tof internal attribute names (already rejected by the parser).\n\t* snames.adb-tmpl (Is_Internal_Attribute_Name): New routine.\n\t* snames.ads-tmpl: Attributes CPU, Dispatching_Domain and\n\tInterrupt_Priority are marked as INT attributes since they\n\tdon't denote real attribute and are only used internally in\n\tthe compiler.\n\t(Is_Internal_Attribute_Name): New routine.\n\nFrom-SVN: r189378", "tree": {"sha": "1d5c645601721230be583f9182a5db021543e450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d5c645601721230be583f9182a5db021543e450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48f3dca79fe7cd124c90d33dcc88b2147e23856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48f3dca79fe7cd124c90d33dcc88b2147e23856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48f3dca79fe7cd124c90d33dcc88b2147e23856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48f3dca79fe7cd124c90d33dcc88b2147e23856/comments", "author": null, "committer": null, "parents": [{"sha": "22a83cea153e34e826ed42afd56334be89a9ad8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a83cea153e34e826ed42afd56334be89a9ad8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a83cea153e34e826ed42afd56334be89a9ad8e"}], "stats": {"total": 169, "additions": 89, "deletions": 80}, "files": [{"sha": "57d3b04f3b257befcc8be4f966ae8533222d5f2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -1,3 +1,34 @@\n+2012-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Extend previous change to elementary types.\n+\n+2012-07-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch8.adb (Expand_N_Subprogram_Renaming_Declaration): Reverse\n+\tprevious patch since unconditionally handling as renaming_as_body\n+\trenamings of predefined dispatching equality and unequality operator\n+\tcause visibility problems with private overridings of the equality\n+\toperator (see ACATS C854001).\n+\n+2012-07-09  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_attr.adb (Signal_Bad_Attribute): Raise Program_Error in\n+\tcase of internal attribute names (already rejected by the parser).\n+\t* par-ch13.adb (P_Representation_Clause): Complain if an internal\n+\tattribute name that comes from source occurs.\n+\t* par-ch4.adb (P_Name): Complain if an internal attribute name\n+\toccurs in the context of an attribute reference.\n+\t* par-util.adb (Signal_Bad_Attribute): Don't complain about\n+\tmispelling attribute with internal attributes.\n+\t* sem_attr.adb (Analyze_Attribute): Raise Program_Error in case\n+\tof internal attribute names (already rejected by the parser).\n+\t* snames.adb-tmpl (Is_Internal_Attribute_Name): New routine.\n+\t* snames.ads-tmpl: Attributes CPU, Dispatching_Domain and\n+\tInterrupt_Priority are marked as INT attributes since they\n+\tdon't denote real attribute and are only used internally in\n+\tthe compiler.\n+\t(Is_Internal_Attribute_Name): New routine.\n+\n 2012-07-09  Thomas Quinot  <quinot@adacore.com>\n \n \t* einfo.adb (Set_Reverse_Storage_Order): Update assertion,"}, {"sha": "5859b6e4585c1ccaa90279d40f59e38a35c65202", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -835,13 +835,16 @@ package body Exp_Attr is\n            Attribute_Default_Iterator     |\n            Attribute_Implicit_Dereference |\n            Attribute_Iterator_Element     |\n-           Attribute_Variable_Indexing    => null;\n+           Attribute_Variable_Indexing    =>\n+         null;\n \n-      --  Attributes related to Ada 2012 aspects\n+      --  Internal attributes used to deal with Ada 2012 delayed aspects\n+      --  (already diagnosed by parser, thus nothing more to do here).\n \n       when Attribute_CPU                |\n            Attribute_Dispatching_Domain |\n-           Attribute_Interrupt_Priority => null;\n+           Attribute_Interrupt_Priority =>\n+         raise Program_Error;\n \n       ------------\n       -- Access --"}, {"sha": "b0e525eb00980228d6dcc61b17cd0abaad9fe69c", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 3, "deletions": 65, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -300,8 +300,7 @@ package body Exp_Ch8 is\n       --  Handle cases where we build a body for a renamed equality\n \n       if Is_Entity_Name (Nam)\n-        and then (Chars (Entity (Nam)) = Name_Op_Ne\n-                   or else Chars (Entity (Nam)) = Name_Op_Eq)\n+        and then Chars (Entity (Nam)) = Name_Op_Eq\n         and then Scope (Entity (Nam)) = Standard_Standard\n       then\n          declare\n@@ -315,7 +314,6 @@ package body Exp_Ch8 is\n             --  untagged record type (AI05-0123).\n \n             if Ada_Version >= Ada_2012\n-              and then Chars (Entity (Nam)) = Name_Op_Eq\n               and then Is_Record_Type (Typ)\n               and then not Is_Tagged_Type (Typ)\n               and then not Is_Frozen (Typ)\n@@ -337,71 +335,11 @@ package body Exp_Ch8 is\n                          Expand_Record_Equality\n                            (Id,\n                             Typ => Typ,\n-                            Lhs =>\n-                              Make_Identifier (Loc, Chars (First_Formal (Id))),\n-                            Rhs =>\n-                              Make_Identifier\n-                                (Loc, Chars (Next_Formal (First_Formal (Id)))),\n+                            Lhs => Make_Identifier (Loc, Chars (Left)),\n+                            Rhs => Make_Identifier (Loc, Chars (Right)),\n                             Bodies => Declarations (Decl))))));\n \n                Append (Decl, List_Containing (N));\n-\n-            --  Handle renamings of predefined dispatching equality operators.\n-            --  When we analyze a renaming of the equality operator of a tagged\n-            --  type, the predefined dispatching primitives are not available\n-            --  (since they are added by the expander when the tagged type is\n-            --  frozen) and hence they are left decorated as renamings of the\n-            --  standard non-dispatching operators. Here we generate a body\n-            --  for such renamings which invokes the predefined dispatching\n-            --  equality operator.\n-\n-            --  Example:\n-\n-            --    type T is tagged null record;\n-            --    function  Eq (X, Y : T1) return Boolean renames \"=\";\n-            --    function Neq (X, Y : T1) return Boolean renames \"/=\";\n-\n-            elsif Is_Record_Type (Typ)\n-              and then Is_Tagged_Type (Typ)\n-              and then Is_Dispatching_Operation (Id)\n-              and then not Is_Dispatching_Operation (Entity (Nam))\n-            then\n-               pragma Assert (not Is_Frozen (Typ));\n-\n-               Decl := Build_Body_For_Renaming;\n-\n-               --  Clean decoration of intrinsic subprogram\n-\n-               Set_Is_Intrinsic_Subprogram (Id, False);\n-               Set_Convention (Id, Convention_Ada);\n-\n-               if Chars (Entity (Nam)) = Name_Op_Ne then\n-                  Set_Handled_Statement_Sequence (Decl,\n-                    Make_Handled_Sequence_Of_Statements (Loc,\n-                      Statements => New_List (\n-                        Make_Simple_Return_Statement (Loc,\n-                          Expression =>\n-                             Make_Op_Not (Loc,\n-                               Make_Op_Eq (Loc,\n-                                 Left_Opnd  =>\n-                                   New_Reference_To (Left, Loc),\n-                                 Right_Opnd =>\n-                                   New_Reference_To (Right, Loc)))))));\n-\n-               else pragma Assert (Chars (Entity (Nam)) = Name_Op_Eq);\n-                  Set_Handled_Statement_Sequence (Decl,\n-                    Make_Handled_Sequence_Of_Statements (Loc,\n-                      Statements => New_List (\n-                        Make_Simple_Return_Statement (Loc,\n-                          Expression =>\n-                            Make_Op_Eq (Loc,\n-                              Left_Opnd  =>\n-                                New_Reference_To (Left, Loc),\n-                              Right_Opnd =>\n-                                New_Reference_To (Right, Loc))))));\n-               end if;\n-\n-               Append (Decl, List_Containing (N));\n             end if;\n          end;\n       end if;"}, {"sha": "79d9098660979004681f63123f09702e44315de9", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -221,7 +221,14 @@ package body Ch13 is\n             if Token = Tok_Identifier then\n                Attr_Name := Token_Name;\n \n-               if not Is_Attribute_Name (Attr_Name) then\n+               --  Note that the parser must complain in case of an internal\n+               --  attribute names that comes from source since internal names\n+               --  are meant to be used only by the compiler.\n+\n+               if not Is_Attribute_Name (Attr_Name)\n+                 or else (Is_Internal_Attribute_Name (Attr_Name)\n+                           and then Comes_From_Source (Token_Node))\n+               then\n                   Signal_Bad_Attribute;\n                end if;\n "}, {"sha": "f16d82841cfe3b8327df5933efc2d60f6ee2ec92", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -434,7 +434,12 @@ package body Ch4 is\n             elsif Token = Tok_Identifier then\n                Attr_Name := Token_Name;\n \n-               if not Is_Attribute_Name (Attr_Name) then\n+               --  Note that internal attributes names don't denote real\n+               --  attribute.\n+\n+               if not Is_Attribute_Name (Attr_Name)\n+                 or else Is_Internal_Attribute_Name (Attr_Name)\n+               then\n                   if Apostrophe_Should_Be_Semicolon then\n                      Expr_Form := EF_Name;\n                      return Name_Node;"}, {"sha": "eb19a0a42e3821d65b791f687bc5196a8d220ff2", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -721,7 +721,12 @@ package body Util is\n \n       Error_Msg_Name_1 := First_Attribute_Name;\n       while Error_Msg_Name_1 <= Last_Attribute_Name loop\n-         if Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1) then\n+         --  No mispelling possible with internal attribute names since they\n+         --  don't denote real attribute.\n+\n+         if not Is_Internal_Attribute_Name (Error_Msg_Name_1)\n+           and then Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1)\n+         then\n             Error_Msg_N -- CODEFIX\n               (\"\\possible misspelling of %\", Token_Node);\n             exit;"}, {"sha": "dd5faefa3e83e86450c883edb0dceb99e52d4d8a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -2215,13 +2215,13 @@ package body Sem_Attr is\n            Attribute_Variable_Indexing    =>\n          Error_Msg_N (\"illegal attribute\", N);\n \n-      --  Attributes related to Ada 2012 aspects. Attribute definition clause\n-      --  exists for these, but they cannot be queried.\n+      --  Internal attributes used to deal with Ada 2012 delayed aspects\n+      --  (already diagnosed by parser, thus nothing more to do here).\n \n       when Attribute_CPU                |\n            Attribute_Dispatching_Domain |\n            Attribute_Interrupt_Priority =>\n-         Error_Msg_N (\"illegal attribute\", N);\n+         raise Program_Error;\n \n       ------------------\n       -- Abort_Signal --"}, {"sha": "049ba0546ce3fca9b822ff7f4397132897d8699b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -7737,10 +7737,10 @@ package body Sem_Ch13 is\n \n       --  Reject patently improper size values.\n \n-      if Is_Scalar_Type (T)\n+      if Is_Elementary_Type (T)\n         and then Siz > UI_From_Int (Int'Last)\n       then\n-         Error_Msg_N (\"Size value too large for scalar type\", N);\n+         Error_Msg_N (\"Size value too large for elementary type\", N);\n          if Nkind (Original_Node (N)) = N_Op_Expon then\n             Error_Msg_N\n               (\"\\maybe '* was meant, rather than '*'*\", Original_Node (N));"}, {"sha": "da17d31031020e84c7f51d585e2c6699165b0d77", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -392,6 +392,17 @@ package body Snames is\n                    or else N not in Ada_2012_Reserved_Words);\n    end Is_Keyword_Name;\n \n+   --------------------------------\n+   -- Is_Internal_Attribute_Name --\n+   --------------------------------\n+\n+   function Is_Internal_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N = Name_CPU\n+        or N = Name_Interrupt_Priority\n+        or N = Name_Dispatching_Domain;\n+   end Is_Internal_Attribute_Name;\n+\n    ----------------------------\n    -- Is_Locking_Policy_Name --\n    ----------------------------"}, {"sha": "16979578c90f7e8d61bc9fe140e8ec70175b6365", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48f3dca79fe7cd124c90d33dcc88b2147e23856/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=d48f3dca79fe7cd124c90d33dcc88b2147e23856", "patch": "@@ -753,6 +753,11 @@ package Snames is\n    --  implementation dependent attributes may be found in the appropriate\n    --  section in Sem_Attr.\n \n+   --  The entries marked INT are not real attributes. They are special names\n+   --  used internally by GNAT in order to deal with delayed aspects\n+   --  (Aspect_CPU, Aspect_Dispatching_Domain, Aspect_Interrupt_Priority) that\n+   --  don't have corresponding pragma or attribute.\n+\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n@@ -779,15 +784,15 @@ package Snames is\n    Name_Constant_Indexing              : constant Name_Id := N + $; -- GNAT\n    Name_Constrained                    : constant Name_Id := N + $;\n    Name_Count                          : constant Name_Id := N + $;\n-   Name_CPU                            : constant Name_Id := N + $; -- Ada 12\n+   Name_CPU                            : constant Name_Id := N + $; -- INT\n    Name_Default_Bit_Order              : constant Name_Id := N + $; -- GNAT\n    Name_Default_Iterator               : constant Name_Id := N + $; -- GNAT\n    Name_Definite                       : constant Name_Id := N + $;\n    Name_Delta                          : constant Name_Id := N + $;\n    Name_Denorm                         : constant Name_Id := N + $;\n    Name_Descriptor_Size                : constant Name_Id := N + $;\n    Name_Digits                         : constant Name_Id := N + $;\n-   Name_Dispatching_Domain             : constant Name_Id := N + $; -- Ada 12\n+   Name_Dispatching_Domain             : constant Name_Id := N + $; -- INT\n    Name_Elaborated                     : constant Name_Id := N + $; -- GNAT\n    Name_Emax                           : constant Name_Id := N + $; -- Ada 83\n    Name_Enabled                        : constant Name_Id := N + $; -- GNAT\n@@ -809,7 +814,7 @@ package Snames is\n    Name_Img                            : constant Name_Id := N + $; -- GNAT\n    Name_Implicit_Dereference           : constant Name_Id := N + $; -- GNAT\n    Name_Integer_Value                  : constant Name_Id := N + $; -- GNAT\n-   Name_Interrupt_Priority             : constant Name_Id := N + $; -- Ada 12\n+   Name_Interrupt_Priority             : constant Name_Id := N + $; -- INT\n    Name_Invalid_Value                  : constant Name_Id := N + $; -- GNAT\n    Name_Iterator_Element               : constant Name_Id := N + $; -- GNAT\n    Name_Large                          : constant Name_Id := N + $; -- Ada 83\n@@ -1826,6 +1831,10 @@ package Snames is\n    --  Test to see if the name N is the name of a recognized entity attribute,\n    --  i.e. an attribute reference that returns an entity.\n \n+   function Is_Internal_Attribute_Name (N : Name_Id) return Boolean;\n+   --  Test to see if the name N is the name of an INT attribute (Name_CPU,\n+   --  Name_Dispatching_Domain, Name_Interrupt_Priority).\n+\n    function Is_Procedure_Attribute_Name (N : Name_Id) return Boolean;\n    --  Test to see if the name N is the name of a recognized attribute that\n    --  designates a procedure (and can therefore appear as a statement)."}]}