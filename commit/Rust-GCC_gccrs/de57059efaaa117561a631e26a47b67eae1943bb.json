{"sha": "de57059efaaa117561a631e26a47b67eae1943bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1NzA1OWVmYWFhMTE3NTYxYTYzMWUyNmE0N2I2N2VhZTE5NDNiYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-18T08:21:45Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-18T08:21:45Z"}, "message": "S/390: Fix vec-cmp-2 testcase\n\nThe functions all call foo and therefore need a stack frame what makes\nthem subject to shrink wrapping.  Also all the additional instructions\nin the function body makes it fragile wrt instruction scheduling.  Just\nset a global variable instead to circumvent this.\n\ngcc/testsuite/ChangeLog:\n\n2017-10-18  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-cmp-2.c\n\t(all_eq_double, all_ne_double, all_gt_double)\n\t(all_lt_double, all_ge_double, all_le_double)\n\t(any_eq_double, any_ne_double, any_gt_double)\n\t(any_lt_double, any_ge_double, any_le_double)\n\t(all_eq_int, all_ne_int, all_gt_int)\n\t(all_lt_int, all_ge_int, all_le_int)\n\t(any_eq_int, any_ne_int, any_gt_int)\n\t(any_lt_int, any_ge_int, any_le_int): Set global variable instead\n\tof calling foo().  Fix return type.\n\nFrom-SVN: r253846", "tree": {"sha": "080d1584784cf345ea4872867ac204026c5d4bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/080d1584784cf345ea4872867ac204026c5d4bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de57059efaaa117561a631e26a47b67eae1943bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de57059efaaa117561a631e26a47b67eae1943bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de57059efaaa117561a631e26a47b67eae1943bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de57059efaaa117561a631e26a47b67eae1943bb/comments", "author": null, "committer": null, "parents": [{"sha": "236ac44204c4a0f172751fad3221a8686e58bfc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236ac44204c4a0f172751fad3221a8686e58bfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236ac44204c4a0f172751fad3221a8686e58bfc7"}], "stats": {"total": 111, "additions": 62, "deletions": 49}, "files": [{"sha": "bfb01971421d5cb9e546fc71fea53e2b3c0cb7f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de57059efaaa117561a631e26a47b67eae1943bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de57059efaaa117561a631e26a47b67eae1943bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de57059efaaa117561a631e26a47b67eae1943bb", "patch": "@@ -1,3 +1,16 @@\n+2017-10-18  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-cmp-2.c\n+\t(all_eq_double, all_ne_double, all_gt_double)\n+\t(all_lt_double, all_ge_double, all_le_double)\n+\t(any_eq_double, any_ne_double, any_gt_double)\n+\t(any_lt_double, any_ge_double, any_le_double)\n+\t(all_eq_int, all_ne_int, all_gt_int)\n+\t(all_lt_int, all_ge_int, all_le_int)\n+\t(any_eq_int, any_ne_int, any_gt_int)\n+\t(any_lt_int, any_ge_int, any_le_int): Set global variable instead\n+\tof calling foo().  Fix return type.\n+\n 2017-10-18  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/82545"}, {"sha": "1e63defa06338e0181a3cf4ff5379fbd1fbae86e", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-cmp-2.c", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de57059efaaa117561a631e26a47b67eae1943bb/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de57059efaaa117561a631e26a47b67eae1943bb/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-cmp-2.c?ref=de57059efaaa117561a631e26a47b67eae1943bb", "patch": "@@ -7,197 +7,197 @@\n \n #include <vecintrin.h>\n \n-extern void foo (void);\n+int g = 1;\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_eq_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_eq (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_ne_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_ne (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_gt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_gt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_lt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_lt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_ge_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_ge (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_le_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_all_le (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_eq_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_eq (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_eq_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_ne_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_ne (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_ne_double:\\n\\tvfcedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_gt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_gt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_gt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_lt_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_lt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_lt_double:\\n\\tvfchdbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_ge_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_ge (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_ge_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_le_double (vector double a, vector double b)\n {\n   if (__builtin_expect (vec_any_le (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_le_double:\\n\\tvfchedbs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_eq_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_eq (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_ne_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_ne (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_gt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_gt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_lt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_lt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjne 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_ge_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_ge (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n all_le_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_all_le (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times all_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_eq_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_eq (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_eq_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_ne_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_ne (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_ne_int:\\n\\tvceqfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_gt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_gt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_gt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_lt_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_lt (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_lt_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tjnle 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_ge_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_ge (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_ge_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v26,%v24\\n\\tje 1 } } */\n \n-int __attribute__((noinline,noclone))\n+void __attribute__((noinline,noclone))\n any_le_int (vector int a, vector int b)\n {\n   if (__builtin_expect (vec_any_le (a, b), 1))\n-    foo ();\n+    g = 2;\n }\n /* { dg-final { scan-assembler-times any_le_int:\\n\\tvchfs\\t%v\\[0-9\\]*,%v24,%v26\\n\\tje 1 } } */\n "}]}