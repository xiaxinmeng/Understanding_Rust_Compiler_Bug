{"sha": "8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlOTFjYTgwZWJlNzZkZGMwZjY2Njc0MDYxMjA5ZGQ2YTVlNzU1Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-04-04T18:02:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-04-04T18:02:31Z"}, "message": "re PR lto/59626 (/usr/include/bits/unistd.h:173:1: error: inlining failed in call to always_inline 'readlinkat': recursive inlining)\n\n\n\tPR ipa/59626\n\t* lto-cgraph.c (input_overwrite_node): Check that partitioning\n\tflags are set only during streaming.\n\t* ipa.c (process_references, walk_polymorphic_call_targets,\n\tsymtab_remove_unreachable_nodes): Drop bodies of always inline\n\tafter early inlining.\n\t(symtab_remove_unreachable_nodes): Remove always_inline attribute.\n\t* gcc.dg/lto/pr59626_0.c: New testcase.\n\t* gcc.dg/lto/pr59626_1.c: New testcase.\n\nFrom-SVN: r209123", "tree": {"sha": "d5d626b8502a78d19963191e0451f75ee3853ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d626b8502a78d19963191e0451f75ee3853ad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/comments", "author": null, "committer": null, "parents": [{"sha": "88d946326b489b2235f8ebd0c7d95a5803018740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d946326b489b2235f8ebd0c7d95a5803018740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d946326b489b2235f8ebd0c7d95a5803018740"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "90a787c9a01e0b2206bf5223aad37b07f0211b09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -1,3 +1,13 @@\n+2014-04-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/59626\n+\t* lto-cgraph.c (input_overwrite_node): Check that partitioning\n+\tflags are set only during streaming.\n+\t* ipa.c (process_references, walk_polymorphic_call_targets,\n+\tsymtab_remove_unreachable_nodes): Drop bodies of always inline\n+\tafter early inlining.\n+\t(symtab_remove_unreachable_nodes): Remove always_inline attribute.\n+\t\n 2014-04-04  Jakub Jelinek  <jakub@redhat.com>\n \tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "c76687604ddafce712306662f6913e54e68e4aff", "filename": "gcc/ipa.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -139,7 +139,10 @@ process_references (struct ipa_ref_list *list,\n \n       if (node->definition && !node->in_other_partition\n \t  && ((!DECL_EXTERNAL (node->decl) || node->alias)\n-\t      || (before_inlining_p\n+\t      || (((before_inlining_p\n+\t\t    && (cgraph_state < CGRAPH_STATE_IPA_SSA\n+\t\t        || !lookup_attribute (\"always_inline\",\n+\t\t\t\t\t      DECL_ATTRIBUTES (node->decl)))))\n \t\t  /* We use variable constructors during late complation for\n \t\t     constant folding.  Keep references alive so partitioning\n \t\t     knows about potential references.  */\n@@ -191,7 +194,10 @@ walk_polymorphic_call_targets (pointer_set_t *reachable_call_targets,\n \t  /* Prior inlining, keep alive bodies of possible targets for\n \t     devirtualization.  */\n \t   if (n->definition\n-\t       && before_inlining_p)\n+\t       && (before_inlining_p\n+\t\t   && (cgraph_state < CGRAPH_STATE_IPA_SSA\n+\t\t       || !lookup_attribute (\"always_inline\",\n+\t\t\t\t\t     DECL_ATTRIBUTES (n->decl)))))\n \t     pointer_set_insert (reachable, n);\n \n \t  /* Even after inlining we want to keep the possible targets in the\n@@ -491,6 +497,12 @@ symtab_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t      node->alias = false;\n \t      node->thunk.thunk_p = false;\n \t      node->weakref = false;\n+\t      /* After early inlining we drop always_inline attributes on\n+\t\t bodies of functions that are still referenced (have their\n+\t\t address taken).  */\n+\t      DECL_ATTRIBUTES (node->decl)\n+\t\t= remove_attribute (\"always_inline\",\n+\t\t\t\t    DECL_ATTRIBUTES (node->decl));\n \t      if (!node->in_other_partition)\n \t\tnode->local.local = false;\n \t      cgraph_node_remove_callees (node);"}, {"sha": "173067f65cf34124b716dcfedb863264d33c7813", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -1001,6 +1001,9 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->thunk.thunk_p = bp_unpack_value (bp, 1);\n   node->resolution = bp_unpack_enum (bp, ld_plugin_symbol_resolution,\n \t\t\t\t     LDPR_NUM_KNOWN);\n+  gcc_assert (flag_ltrans\n+\t      || (!node->in_other_partition\n+\t\t  && !node->used_from_other_partition));\n }\n \n /* Return string alias is alias of.  */\n@@ -1169,6 +1172,9 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   node->same_comdat_group = (symtab_node *) (intptr_t) ref;\n   node->resolution = streamer_read_enum (ib, ld_plugin_symbol_resolution,\n \t\t\t\t\t        LDPR_NUM_KNOWN);\n+  gcc_assert (flag_ltrans\n+\t      || (!node->in_other_partition\n+\t\t  && !node->used_from_other_partition));\n \n   return node;\n }"}, {"sha": "b073b7f79d08758656a92d150c319d0acee0318b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -1,3 +1,10 @@\n+2014-04-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/59626\n+\ttestcase by Richard Biener\n+\t* gcc.dg/lto/pr59626_0.c: New testcase.\n+\t* gcc.dg/lto/pr59626_1.c: New testcase.\n+\n 2014-04-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR debug/60655"}, {"sha": "752982fb506d887df963f293b3f119bae8e75db0", "filename": "gcc/testsuite/gcc.dg/lto/pr59626_0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_0.c?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-lto-do run } */\n+\n+int __atoi  (const char *) __asm__(\"atoi\");\n+extern inline __attribute__((always_inline,gnu_inline))\n+int atoi (const char *x)\n+{\n+  return __atoi (x);\n+}\n+\n+int bar (int (*)(const char *));\n+\n+int main()\n+{\n+  return bar (atoi);\n+}"}, {"sha": "9b3fa1d2e369f382be2b0694434d8cfb861ae05a", "filename": "gcc/testsuite/gcc.dg/lto/pr59626_1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe91ca80ebe76ddc0f66674061209dd6a5e7557/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr59626_1.c?ref=8fe91ca80ebe76ddc0f66674061209dd6a5e7557", "patch": "@@ -0,0 +1,4 @@\n+int bar (int (*fn)(const char *))\n+{\n+  return fn (\"0\");\n+}"}]}