{"sha": "62b505a4d5fc8916867e25ed86dfb865fca81511", "node_id": "C_kwDOANBUbNoAKDYyYjUwNWE0ZDVmYzg5MTY4NjdlMjVlZDg2ZGZiODY1ZmNhODE1MTE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-14T14:07:14Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-14T14:07:14Z"}, "message": "sve: optimize add reduction patterns\n\nThe following loop does a conditional reduction using an add:\n\n#include <stdint.h>\n\nint32_t f (int32_t *restrict array, int len, int min)\n{\n  int32_t iSum = 0;\n\n  for (int i=0; i<len; i++) {\n    if (array[i] >= min)\n       iSum += array[i];\n  }\n  return iSum;\n}\n\nfor this we currently generate:\n\n        mov     z1.b, #0\n        mov     z2.s, w2\n        mov     z3.d, z1.d\n        ptrue   p2.b, all\n        ld1w    z0.s, p0/z, [x0, x3, lsl 2]\n        cmpge   p1.s, p2/z, z0.s, z2.s\n        add     x3, x3, x4\n        sel     z0.s, p1, z0.s, z3.s\n        add     z1.s, p0/m, z1.s, z0.s\n        whilelo p0.s, w3, w1\n\nwhere the SEL is unneeded as it's selecting between 0 or a value.  This can be\noptimized to just doing the conditional add on p1 instead of p0.  After this\npatch we generate:\n\n        mov     z2.s, w2\n        mov     z0.b, #0\n        ptrue   p1.b, all\n        ld1w    z1.s, p0/z, [x0, x3, lsl 2]\n        cmpge   p0.s, p0/z, z1.s, z2.s\n        add     x3, x3, x4\n        add     z0.s, p0/m, z0.s, z1.s\n        whilelo p0.s, w3, w1\n\nand so we drop the SEL and the 0 move.\n\ngcc/ChangeLog:\n\n\t* match.pd: New rule.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/pred-cond-reduc.c: New test.", "tree": {"sha": "73d53f204ac4b558d67a262b640182238904692d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d53f204ac4b558d67a262b640182238904692d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b505a4d5fc8916867e25ed86dfb865fca81511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b505a4d5fc8916867e25ed86dfb865fca81511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b505a4d5fc8916867e25ed86dfb865fca81511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b505a4d5fc8916867e25ed86dfb865fca81511/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fecd145359fc981beb2802f746190227c5cc010a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecd145359fc981beb2802f746190227c5cc010a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fecd145359fc981beb2802f746190227c5cc010a"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "038a7981c0e4b818d17506bcafd35401794dce42", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b505a4d5fc8916867e25ed86dfb865fca81511/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b505a4d5fc8916867e25ed86dfb865fca81511/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=62b505a4d5fc8916867e25ed86dfb865fca81511", "patch": "@@ -7156,6 +7156,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n         && element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op @2 @3 @4 @5 (view_convert:op_type @1)))))))\n \n+/* Detect simplication for a conditional reduction where\n+\n+   a = mask1 ? b : 0\n+   c = mask2 ? d + a : d\n+\n+   is turned into\n+\n+   c = mask1 && mask2 ? d + b : d.  */\n+(simplify\n+  (IFN_COND_ADD @0 @1 (vec_cond @2 @3 integer_zerop) @1)\n+   (IFN_COND_ADD (bit_and @0 @2) @1 @3 @1))\n+\n /* For pointers @0 and @2 and nonnegative constant offset @1, look for\n    expressions like:\n "}, {"sha": "bd53025d3f17224004244dadc88e0c68ded23f12", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred-cond-reduc.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b505a4d5fc8916867e25ed86dfb865fca81511/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-cond-reduc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b505a4d5fc8916867e25ed86dfb865fca81511/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-cond-reduc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-cond-reduc.c?ref=62b505a4d5fc8916867e25ed86dfb865fca81511", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+int32_t f (int32_t *restrict array, int len, int min)\n+{\n+  int32_t iSum = 0;\n+\n+  for (int i=0; i<len; i++) {\n+    if (array[i] >= min)\n+       iSum += array[i];\n+  }\n+  return iSum;\n+}\n+\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\tz[0-9]+\\.s, p1, z[0-9]+\\.s, z[0-9]+\\.s} } } */"}]}