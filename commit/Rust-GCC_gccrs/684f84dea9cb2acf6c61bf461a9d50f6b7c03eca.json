{"sha": "684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0Zjg0ZGVhOWNiMmFjZjZjNjFiZjQ2MWE5ZDUwZjZiN2MwM2VjYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-05-09T11:21:14Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-05-09T11:21:14Z"}, "message": "re PR c/80525 (-Wlogical-op confused by undefined integer overflow)\n\n\tPR c/80525\n\t* c-warn.c (unwrap_c_maybe_const): New.\n\t(warn_logical_operator): Call it.\n\n\t* c-c++-common/Wlogical-op-1.c: Don't use -fwrapv anymore.\n\t* c-c++-common/Wlogical-op-2.c: New test.\n\nFrom-SVN: r247786", "tree": {"sha": "16e450b9cd928ae252b2eb7bf2db23dc8cbacb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e450b9cd928ae252b2eb7bf2db23dc8cbacb15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "641da50a0c73f734e672f8e6b9e7d2c86bde840d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641da50a0c73f734e672f8e6b9e7d2c86bde840d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641da50a0c73f734e672f8e6b9e7d2c86bde840d"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "e76a6289cc477998fa8dd9b124f2ff181493ffbd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "patch": "@@ -1,3 +1,9 @@\n+2017-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80525\n+\t* c-warn.c (unwrap_c_maybe_const): New.\n+\t(warn_logical_operator): Call it.\n+\n 2017-05-09  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-common.c (c_register_builtin_type): Use pushdecl lang_hook."}, {"sha": "aa0cfa97b047c5600b7ab2be6f98ad107faacaa9", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"asan.h\"\n #include \"gcc-rich-location.h\"\n+#include \"gimplify.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -112,6 +113,21 @@ overflow_warning (location_t loc, tree value)\n     }\n }\n \n+/* Helper function for walk_tree.  Unwrap C_MAYBE_CONST_EXPRs in an expression\n+   pointed to by TP.  */\n+\n+static tree\n+unwrap_c_maybe_const (tree *tp, int *walk_subtrees, void *)\n+{\n+  if (TREE_CODE (*tp) == C_MAYBE_CONST_EXPR)\n+    {\n+      *tp = C_MAYBE_CONST_EXPR_EXPR (*tp);\n+      /* C_MAYBE_CONST_EXPRs don't nest.  */\n+      *walk_subtrees = false;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Warn about uses of logical || / && operator in a context where it\n    is likely that the bitwise equivalent was intended by the\n    programmer.  We have seen an expression in which CODE is a binary\n@@ -189,11 +205,11 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n      (with OR) or trivially false (with AND).  If so, do not warn.\n      This is a common idiom for testing ranges of data types in\n      portable code.  */\n+  op_left = unshare_expr (op_left);\n+  walk_tree_without_duplicates (&op_left, unwrap_c_maybe_const, NULL);\n   lhs = make_range (op_left, &in0_p, &low0, &high0, &strict_overflow_p);\n   if (!lhs)\n     return;\n-  if (TREE_CODE (lhs) == C_MAYBE_CONST_EXPR)\n-    lhs = C_MAYBE_CONST_EXPR_EXPR (lhs);\n \n   /* If this is an OR operation, invert both sides; now, the result\n      should be always false to get a warning.  */\n@@ -204,11 +220,11 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n   if (tem && integer_zerop (tem))\n     return;\n \n+  op_right = unshare_expr (op_right);\n+  walk_tree_without_duplicates (&op_right, unwrap_c_maybe_const, NULL);\n   rhs = make_range (op_right, &in1_p, &low1, &high1, &strict_overflow_p);\n   if (!rhs)\n     return;\n-  if (TREE_CODE (rhs) == C_MAYBE_CONST_EXPR)\n-    rhs = C_MAYBE_CONST_EXPR_EXPR (rhs);\n \n   /* If this is an OR operation, invert both sides; now, the result\n      should be always false to get a warning.  */"}, {"sha": "98552a87fcdab51da033fa09d57aae372929f789", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "patch": "@@ -1,3 +1,9 @@\n+2017-05-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/80525\n+\t* c-c++-common/Wlogical-op-1.c: Don't use -fwrapv anymore.\n+\t* c-c++-common/Wlogical-op-2.c: New test.\n+\n 2017-05-09  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/tree-ssa/cunroll-13.c: Use __INT32_TYPE__ for"}, {"sha": "c5f992a400706a105b9fabf681ab475672ce6f25", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c?ref=684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "patch": "@@ -1,8 +1,6 @@\n /* PR c/63357 */\n /* { dg-do compile } */\n-/* For -fwrapv see PR80525, xfailing the subtest isn't possible as it passes\n-   with the C++ FE which doesn't have maybe_const_expr.  */\n-/* { dg-options \"-fwrapv -Wlogical-op\" } */\n+/* { dg-options \"-Wlogical-op\" } */\n \n #ifndef __cplusplus\n # define bool _Bool"}, {"sha": "6360ef98090e2d2be682ba7f034bfe6cea343030", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684f84dea9cb2acf6c61bf461a9d50f6b7c03eca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-2.c?ref=684f84dea9cb2acf6c61bf461a9d50f6b7c03eca", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/80525 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-op\" } */\n+\n+int\n+fn (int a, int b)\n+{\n+  if ((a + 1) && (a + 1)) /* { dg-warning \"logical .and. of equal expressions\" } */\n+    return a;\n+  if ((a + 1) || (a + 1)) /* { dg-warning \"logical .or. of equal expressions\" } */\n+    return b;\n+}"}]}