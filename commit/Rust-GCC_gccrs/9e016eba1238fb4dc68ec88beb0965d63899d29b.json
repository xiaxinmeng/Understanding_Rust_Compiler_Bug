{"sha": "9e016eba1238fb4dc68ec88beb0965d63899d29b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwMTZlYmExMjM4ZmI0ZGM2OGVjODhiZWIwOTY1ZDYzODk5ZDI5Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-04-05T05:50:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-04-05T05:50:19Z"}, "message": "tree-dump.c (dump_enable_all): Remove prototype; do not accept letter argument.\n\n\n\t* tree-dump.c (dump_enable_all): Remove prototype; do not accept\n\tletter argument.\n\t(dump_files): Update.\n\t(enable_rtl_dump_file): Do not accept letter argument.\n\t* tree-pass.h (dump_file_info): Remove letter argument.\n\t* toplev.c (decode_d_option): Update -da handling.\n\t* toplev.h (enable_rtl_dump_file): Update prototype.\n\t* passes.c (register_one_dump_file): Do not accept IPA argument; work\n\tit out based on pass type.\n\t(register_dump_files_1): Likewise.\n\t(init_optimization_passes): Update register_one_dump_file calls.\n\t(execute_one_pass): Sanity check that IPA passes are called at IPA level\n\tand RTL passes at RTL level.\n\t(execute_pass_list): IPA pass can not be after or subpass of\n\tGIMPLE/RTL pass.\n\t(execute_ipa_pass_list): Handle IPA subpasses of IPA subpasses and\n\tdisallov RTL subpasses of IPA subpasses.\n\nFrom-SVN: r133930", "tree": {"sha": "05ef0b50d598e815a4b64cd826007fccbcd7a118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ef0b50d598e815a4b64cd826007fccbcd7a118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e016eba1238fb4dc68ec88beb0965d63899d29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e016eba1238fb4dc68ec88beb0965d63899d29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e016eba1238fb4dc68ec88beb0965d63899d29b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e016eba1238fb4dc68ec88beb0965d63899d29b/comments", "author": null, "committer": null, "parents": [{"sha": "23ef6d211fad08b1936e244c0bec5cc518aa33ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ef6d211fad08b1936e244c0bec5cc518aa33ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ef6d211fad08b1936e244c0bec5cc518aa33ac"}], "stats": {"total": 123, "additions": 78, "deletions": 45}, "files": [{"sha": "785ec4ab577e5000a37b388b2fa0298ba817de38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -1,3 +1,23 @@\n+2008-04-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-dump.c (dump_enable_all): Remove prototype; do not accept\n+\tletter argument.\n+\t(dump_files): Update.\n+\t(enable_rtl_dump_file): Do not accept letter argument.\n+\t* tree-pass.h (dump_file_info): Remove letter argument.\n+\t* toplev.c (decode_d_option): Update -da handling.\n+\t* toplev.h (enable_rtl_dump_file): Update prototype.\n+\t* passes.c (register_one_dump_file): Do not accept IPA argument; work\n+\tit out based on pass type.\n+\t(register_dump_files_1): Likewise.\n+\t(init_optimization_passes): Update register_one_dump_file calls.\n+\t(execute_one_pass): Sanity check that IPA passes are called at IPA level\n+\tand RTL passes at RTL level.\n+\t(execute_pass_list): IPA pass can not be after or subpass of\n+\tGIMPLE/RTL pass.\n+\t(execute_ipa_pass_list): Handle IPA subpasses of IPA subpasses and\n+\tdisallov RTL subpasses of IPA subpasses.\n+\n 2008-04-05  Ben Elliston  <bje@au.ibm.com>\n \n \t* tree-cfg.c (need_fake_edge_p): Return false for calls to"}, {"sha": "b8ed3e6f76aab315135c94786a930631e8a11a7b", "filename": "gcc/passes.c", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -338,7 +338,7 @@ struct opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n    enabled or not.  */\n \n static void\n-register_one_dump_file (struct opt_pass *pass, bool ipa, int properties)\n+register_one_dump_file (struct opt_pass *pass)\n {\n   char *dot_name, *flag_name, *glob_name;\n   const char *prefix;\n@@ -352,9 +352,9 @@ register_one_dump_file (struct opt_pass *pass, bool ipa, int properties)\n \t\t\t ? 1 : pass->static_pass_number));\n \n   dot_name = concat (\".\", pass->name, num, NULL);\n-  if (ipa)\n+  if (pass->type == SIMPLE_IPA_PASS)\n     prefix = \"ipa-\", flags = TDF_IPA;\n-  else if (properties & PROP_trees)\n+  else if (pass->type == GIMPLE_PASS)\n     prefix = \"tree-\", flags = TDF_TREE;\n   else\n     prefix = \"rtl-\", flags = TDF_RTL;\n@@ -368,19 +368,18 @@ register_one_dump_file (struct opt_pass *pass, bool ipa, int properties)\n /* Recursive worker function for register_dump_files.  */\n \n static int \n-register_dump_files_1 (struct opt_pass *pass, bool ipa, int properties)\n+register_dump_files_1 (struct opt_pass *pass, int properties)\n {\n   do\n     {\n       int new_properties = (properties | pass->properties_provided)\n \t\t\t   & ~pass->properties_destroyed;\n \n       if (pass->name)\n-        register_one_dump_file (pass, ipa, new_properties);\n+        register_one_dump_file (pass);\n \n       if (pass->sub)\n-        new_properties = register_dump_files_1 (pass->sub, false,\n-\t\t\t\t\t\tnew_properties);\n+        new_properties = register_dump_files_1 (pass->sub, new_properties);\n \n       /* If we have a gate, combine the properties that we could have with\n          and without the pass being examined.  */\n@@ -396,16 +395,15 @@ register_dump_files_1 (struct opt_pass *pass, bool ipa, int properties)\n   return properties;\n }\n \n-/* Register the dump files for the pipeline starting at PASS.  IPA is\n-   true if the pass is inter-procedural, and PROPERTIES reflects the\n-   properties that are guaranteed to be available at the beginning of\n-   the pipeline.  */\n+/* Register the dump files for the pipeline starting at PASS. \n+   PROPERTIES reflects the properties that are guaranteed to be available at\n+   the beginning of the pipeline.  */\n \n static void \n-register_dump_files (struct opt_pass *pass, bool ipa, int properties)\n+register_dump_files (struct opt_pass *pass,int properties)\n {\n   pass->properties_required |= properties;\n-  register_dump_files_1 (pass, ipa, properties);\n+  register_dump_files_1 (pass, properties);\n }\n \n /* Add a pass to the pass list. Duplicate the pass if it's already\n@@ -793,12 +791,12 @@ init_optimization_passes (void)\n #undef NEXT_PASS\n \n   /* Register the passes with the tree dump code.  */\n-  register_dump_files (all_lowering_passes, false, PROP_gimple_any);\n+  register_dump_files (all_lowering_passes, PROP_gimple_any);\n   all_lowering_passes->todo_flags_start |= TODO_set_props;\n-  register_dump_files (all_ipa_passes, true,\n+  register_dump_files (all_ipa_passes, \n \t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n \t\t       | PROP_cfg);\n-  register_dump_files (all_passes, false,\n+  register_dump_files (all_passes, \n \t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n \t\t       | PROP_cfg);\n }\n@@ -1071,6 +1069,17 @@ execute_one_pass (struct opt_pass *pass)\n   bool initializing_dump;\n   unsigned int todo_after = 0;\n \n+  /* IPA passes are executed on whole program, so cfun should be NULL.\n+     Ohter passes needs function context set.  */\n+  if (pass->type == SIMPLE_IPA_PASS)\n+    gcc_assert (!cfun && !current_function_decl);\n+  else\n+    {\n+      gcc_assert (cfun && current_function_decl);\n+      gcc_assert (!(cfun->curr_properties & PROP_trees)\n+\t\t  || pass->type != RTL_PASS);\n+    }\n+\n   current_pass = pass;\n   /* See if we're supposed to run this pass.  */\n   if (pass->gate && !pass->gate ())\n@@ -1177,6 +1186,8 @@ execute_pass_list (struct opt_pass *pass)\n {\n   do\n     {\n+      gcc_assert (pass->type == GIMPLE_PASS\n+\t\t  || pass->type == RTL_PASS);\n       if (execute_one_pass (pass) && pass->sub)\n         execute_pass_list (pass->sub);\n       pass = pass->next;\n@@ -1193,9 +1204,17 @@ execute_ipa_pass_list (struct opt_pass *pass)\n     {\n       gcc_assert (!current_function_decl);\n       gcc_assert (!cfun);\n+      gcc_assert (pass->type == SIMPLE_IPA_PASS);\n       if (execute_one_pass (pass) && pass->sub)\n-\tdo_per_function_toporder ((void (*)(void *))execute_pass_list,\n-\t\t\t\t  pass->sub);\n+\t{\n+\t  if (pass->sub->type == GIMPLE_PASS)\n+\t    do_per_function_toporder ((void (*)(void *))execute_pass_list,\n+\t\t\t\t      pass->sub);\n+\t  else if (pass->sub->type == SIMPLE_IPA_PASS)\n+\t    execute_ipa_pass_list (pass->sub);\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n       if (!current_function_decl)\n \tcgraph_process_new_functions ();\n       pass = pass->next;"}, {"sha": "dca133940861c37dc21b74e29eaf1f42b0706776", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -1072,10 +1072,11 @@ decode_d_option (const char *arg)\n       case 'H':\n \tsetup_core_dumping();\n \tbreak;\n-\n       case 'a':\n+\tenable_rtl_dump_file ();\n+\tbreak;\n+\n       default:\n-\tif (!enable_rtl_dump_file (c))\n \t  warning (0, \"unrecognized gcc debugging option: %c\", c);\n \tbreak;\n       }"}, {"sha": "2668fac72a8e15be6e458d030761c309d4fcc3b2", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -72,7 +72,7 @@ extern void rest_of_type_compilation (tree, int);\n extern void tree_rest_of_compilation (tree);\n extern void init_optimization_passes (void);\n extern void finish_optimization_passes (void);\n-extern bool enable_rtl_dump_file (int);\n+extern bool enable_rtl_dump_file (void);\n \n extern void announce_function (tree);\n "}, {"sha": "2fc5214259d6919018dec52a916f984bd3b51fd9", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -39,7 +39,6 @@ static void dump_index (dump_info_p, unsigned int);\n static void dequeue_and_dump (dump_info_p);\n static void dump_new_line (dump_info_p);\n static void dump_maybe_newline (dump_info_p);\n-static int dump_enable_all (int, int);\n \n /* Add T to the end of the queue of nodes to dump.  Returns the index\n    assigned to T.  */\n@@ -782,19 +781,19 @@ dump_node (const_tree t, int flags, FILE *stream)\n    tree_dump_index enumeration in tree-pass.h.  */\n static struct dump_file_info dump_files[TDI_end] =\n {\n-  {NULL, NULL, NULL, 0, 0, 0, 0},\n-  {\".cgraph\", \"ipa-cgraph\", NULL, TDF_IPA, 0,  0, 0},\n-  {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 1, 0},\n-  {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 2, 0},\n-  {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 3, 0},\n-  {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 4, 0},\n-  {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 5, 0},\n-  {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6, 0},\n+  {NULL, NULL, NULL, 0, 0, 0},\n+  {\".cgraph\", \"ipa-cgraph\", NULL, TDF_IPA, 0,  0},\n+  {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 1},\n+  {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 2},\n+  {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 3},\n+  {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 4},\n+  {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 5},\n+  {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6},\n #define FIRST_AUTO_NUMBERED_DUMP 7\n \n-  {NULL, \"tree-all\", NULL, TDF_TREE, 0, 0, 0},\n-  {NULL, \"rtl-all\", NULL, TDF_RTL, 0, 0, 0},\n-  {NULL, \"ipa-all\", NULL, TDF_IPA, 0, 0, 0},\n+  {NULL, \"tree-all\", NULL, TDF_TREE, 0, 0},\n+  {NULL, \"rtl-all\", NULL, TDF_RTL, 0, 0},\n+  {NULL, \"ipa-all\", NULL, TDF_IPA, 0, 0},\n };\n \n /* Dynamically registered tree dump files and switches.  */\n@@ -993,24 +992,22 @@ dump_end (enum tree_dump_index phase ATTRIBUTE_UNUSED, FILE *stream)\n /* Enable all tree dumps.  Return number of enabled tree dumps.  */\n \n static int\n-dump_enable_all (int flags, int letter)\n+dump_enable_all (int flags)\n {\n   int ir_dump_type = (flags & (TDF_TREE | TDF_RTL | TDF_IPA));\n   int n = 0;\n   size_t i;\n \n   for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n-    if ((dump_files[i].flags & ir_dump_type)\n-\t&& (letter == 0 || letter == dump_files[i].letter))\n+    if ((dump_files[i].flags & ir_dump_type))\n       {\n         dump_files[i].state = -1;\n         dump_files[i].flags |= flags;\n         n++;\n       }\n \n   for (i = 0; i < extra_dump_files_in_use; i++)\n-    if ((extra_dump_files[i].flags & ir_dump_type)\n-\t&& (letter == 0 || letter == extra_dump_files[i].letter))\n+    if ((extra_dump_files[i].flags & ir_dump_type))\n       {\n         extra_dump_files[i].state = -1;\n         extra_dump_files[i].flags |= flags;\n@@ -1075,7 +1072,7 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n   /* Process -fdump-tree-all and -fdump-rtl-all, by enabling all the\n      known dumps.  */\n   if (dfi->suffix == NULL)\n-    dump_enable_all (dfi->flags, 0);\n+    dump_enable_all (dfi->flags);\n \n   return 1;\n }\n@@ -1122,12 +1119,9 @@ dump_function (enum tree_dump_index phase, tree fn)\n }\n \n bool\n-enable_rtl_dump_file (int letter)\n+enable_rtl_dump_file (void)\n {\n-  if (letter == 'a')\n-    letter = 0;\n-\n-  return dump_enable_all (TDF_RTL | TDF_DETAILS | TDF_BLOCKS, letter) > 0;\n+  return dump_enable_all (TDF_RTL | TDF_DETAILS | TDF_BLOCKS) > 0;\n }\n \n "}, {"sha": "71956f46a13224da69d4679c62c703c7ff077124", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e016eba1238fb4dc68ec88beb0965d63899d29b/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=9e016eba1238fb4dc68ec88beb0965d63899d29b", "patch": "@@ -161,7 +161,6 @@ struct dump_file_info\n   int flags;                    /* user flags */\n   int state;                    /* state of play */\n   int num;                      /* dump file number */\n-  int letter;                   /* enabling letter for RTL dumps */\n };\n \n /* Pass properties.  */"}]}