{"sha": "b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdjNzA3ZDFkOTVmYmQ2ZWNjOTFkN2I2NTNjNGU2MDdkMzA3Y2IwMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-26T03:13:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-26T03:13:49Z"}, "message": "re PR c++/13833 (Conversion problem in template function)\n\n\tPR c++/13833\n\t* call.c (build_over_call): Do not convert arguments when\n\tprocessing a template.\n\t* pt.c (build_non_dependent_expr): Do not build a\n\tNON_DEPENDENT_EXPR for arithmetic constants.\n\n\tPR c++/13833\n\t* g++.dg/template/cond3.C: New test.\n\nFrom-SVN: r76616", "tree": {"sha": "0c78d892037be972339a54108a5239aaec45f49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c78d892037be972339a54108a5239aaec45f49e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/comments", "author": null, "committer": null, "parents": [{"sha": "9c3602e40ffa8b11bbee42a2d4ee81dbd8759fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3602e40ffa8b11bbee42a2d4ee81dbd8759fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3602e40ffa8b11bbee42a2d4ee81dbd8759fd8"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "a463df6d813e5b36b0cbf3e3c1b33d3a3b3cad99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "patch": "@@ -1,3 +1,11 @@\n+2004-01-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13833\n+\t* call.c (build_over_call): Do not convert arguments when\n+\tprocessing a template.\n+\t* pt.c (build_non_dependent_expr): Do not build a\n+\tNON_DEPENDENT_EXPR for arithmetic constants.\n+\n 2004-01-25  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13810"}, {"sha": "ea494c7b8c5a669fd318346329e32ad087b980c4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "patch": "@@ -4306,6 +4306,21 @@ build_over_call (struct z_candidate *cand, int flags)\n   int i = 0;\n   int is_method = 0;\n \n+  /* In a template, there is no need to perform all of the work that\n+     is normally done.  We are only interested in the type of the call\n+     expression, i.e., the return type of the function.  Any semantic\n+     errors will be deferred until the template is instantiated.  */\n+  if (processing_template_decl)\n+    {\n+      tree expr;\n+      tree return_type;\n+      return_type = TREE_TYPE (TREE_TYPE (fn));\n+      expr = build (CALL_EXPR, return_type, fn, args);\n+      if (!VOID_TYPE_P (return_type))\n+\trequire_complete_type (return_type);\n+      return convert_from_reference (expr);\n+    }\n+\n   /* Give any warnings we noticed during overload resolution.  */\n   if (cand->warnings)\n     for (val = cand->warnings; val; val = TREE_CHAIN (val))"}, {"sha": "a9ab858ff96cec1a4000df11a1bea22f0c33da0a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "patch": "@@ -11993,6 +11993,10 @@ build_non_dependent_expr (tree expr)\n      cannot be used to initialize a \"char *\".  */\n   if (TREE_CODE (expr) == STRING_CST)\n     return expr;\n+  /* Preserve arithmetic constants, as an optimization -- there is no\n+     reason to create a new node.  */\n+  if (TREE_CODE (expr) == INTEGER_CST || TREE_CODE (expr) == REAL_CST)\n+    return expr;\n \n   if (TREE_CODE (expr) == COND_EXPR)\n     return build (COND_EXPR,"}, {"sha": "b1920033286edd53021b52e9e1c04b110b15ed08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "patch": "@@ -1,3 +1,8 @@\n+2004-01-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13833\n+\t* g++.dg/template/cond3.C: New test.\n+\n 2004-01-25  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13810"}, {"sha": "788b3754a61e2f654149670b6716c31126752d91", "filename": "gcc/testsuite/g++.dg/template/cond3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7c707d1d95fbd6ecc91d7b653c4e607d307cb02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond3.C?ref=b7c707d1d95fbd6ecc91d7b653c4e607d307cb02", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/13833\n+\n+struct X { \n+  template <typename T> \n+  X & operator << (const T &t); \n+  X & operator<< (int& (*p) (int&)); \n+}; \n+ \n+X x; \n+ \n+template <int> void foo () { \n+  x << (1 ? \"ok\" : \"failed\"); \n+} \n+ \n+template void foo<1>(); "}]}