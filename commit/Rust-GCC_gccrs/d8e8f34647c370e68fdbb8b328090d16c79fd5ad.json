{"sha": "d8e8f34647c370e68fdbb8b328090d16c79fd5ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlOGYzNDY0N2MzNzBlNjhmZGJiOGIzMjgwOTBkMTZjNzlmZDVhZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-07T12:59:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-07T12:59:21Z"}, "message": "Add prototypes for static functions.\n\n(fill_simple_delay_slots): Add missing declaration of arg.\n\nFrom-SVN: r3672", "tree": {"sha": "cd1e8e165b6379b632adbe1779d50aded5b2b370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd1e8e165b6379b632adbe1779d50aded5b2b370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e8f34647c370e68fdbb8b328090d16c79fd5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e8f34647c370e68fdbb8b328090d16c79fd5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e8f34647c370e68fdbb8b328090d16c79fd5ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e8f34647c370e68fdbb8b328090d16c79fd5ad/comments", "author": null, "committer": null, "parents": [{"sha": "dedb78d47cb15050e68c9054a3173834a7072c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedb78d47cb15050e68c9054a3173834a7072c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dedb78d47cb15050e68c9054a3173834a7072c51"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "96aa37132e804819a0b56a018f3717a831f253eb", "filename": "gcc/reorg.c", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e8f34647c370e68fdbb8b328090d16c79fd5ad/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e8f34647c370e68fdbb8b328090d16c79fd5ad/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=d8e8f34647c370e68fdbb8b328090d16c79fd5ad", "patch": "@@ -207,11 +207,48 @@ static int *uid_to_ruid;\n /* Highest valid index in `uid_to_ruid'.  */\n static int max_uid;\n \n-/* Forward references: */\n-\n-static int redundant_insn_p ();\n-static void update_block ();\n-static void update_reg_dead_notes ();\n+static void mark_referenced_resources PROTO((rtx, struct resources *, int));\n+static void mark_set_resources\tPROTO((rtx, struct resources *, int, int));\n+static int stop_search_p\tPROTO((rtx, int));\n+static int resource_conflicts_p\tPROTO((struct resources *,\n+\t\t\t\t       struct resources *));\n+static int insn_references_resource_p PROTO((rtx, struct resources *, int));\n+static int insn_sets_resources_p PROTO((rtx, struct resources *, int));\n+static rtx find_end_label\tPROTO((void));\n+static rtx emit_delay_sequence\tPROTO((rtx, rtx, int, int));\n+static rtx add_to_delay_list\tPROTO((rtx, rtx));\n+static void delete_from_delay_slot PROTO((rtx));\n+static void delete_scheduled_jump PROTO((rtx));\n+static void note_delay_statistics PROTO((int, int));\n+static rtx optimize_skip\tPROTO((rtx));\n+static int mostly_true_jump\tPROTO((rtx, rtx));\n+static rtx get_branch_condition\tPROTO((rtx, rtx));\n+static int condition_dominates_p PROTO((rtx, rtx));\n+static rtx steal_delay_list_from_target PROTO((rtx, rtx, rtx, rtx,\n+\t\t\t\t\t       struct resources *,\n+\t\t\t\t\t       struct resources *,\n+\t\t\t\t\t       struct resources *,\n+\t\t\t\t\t       int, int *, int *, rtx *));\n+static rtx steal_delay_list_from_fallthrough PROTO((rtx, rtx, rtx, rtx,\n+\t\t\t\t\t\t    struct resources *,\n+\t\t\t\t\t\t    struct resources *,\n+\t\t\t\t\t\t    struct resources *,\n+\t\t\t\t\t\t    int, int *, int *));\n+static void try_merge_delay_insns PROTO((rtx, rtx));\n+static int redundant_insn_p\tPROTO((rtx, rtx, rtx));\n+static int own_thread_p\t\tPROTO((rtx, rtx, int));\n+static int find_basic_block\tPROTO((rtx));\n+static void update_block\tPROTO((rtx, rtx));\n+static void update_reg_dead_notes PROTO((rtx, rtx));\n+static void update_live_status\tPROTO((rtx, rtx));\n+static rtx next_insn_no_annul\tPROTO((rtx));\n+static void mark_target_live_regs PROTO((rtx, struct resources *));\n+static void fill_simple_delay_slots PROTO((rtx, int));\n+static rtx fill_slots_from_thread PROTO((rtx, rtx, rtx, rtx, int, int,\n+\t\t\t\t\t int, int, int, int *));\n+static void fill_eager_delay_slots PROTO((rtx));\n+static void relax_delay_slots\tPROTO((rtx));\n+static void make_return_insns\tPROTO((rtx));\n \f\n /* Given X, some rtl, and RES, a pointer to a `struct resource', mark\n    which resources are references by the insn.  If INCLUDE_CALLED_ROUTINE\n@@ -2331,6 +2368,7 @@ mark_target_live_regs (target, res)\n static void\n fill_simple_delay_slots (first, non_jumps_p)\n      rtx first;\n+     int non_jumps_p;\n {\n   register rtx insn, pat, trial, next_trial;\n   register int i, j;"}]}