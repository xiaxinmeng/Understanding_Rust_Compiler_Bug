{"sha": "f7272c8a038847cf67e888828e58fc0e00d1f5d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyNzJjOGEwMzg4NDdjZjY3ZTg4ODgyOGU1OGZjMGUwMGQxZjVkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T14:27:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T22:04:21Z"}, "message": "c++: Improve error-recovery for parms.\n\nIf a parameter is erroneous, we currently drop it, leading to \"too many\narguments\" errors later.  Treating the function as (...) avoids those\nerrors.\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (grokparms): Return NULL_TREE if any parms were erroneous.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/parse/error33.C: Adjust.", "tree": {"sha": "359bed4e4813a0cf61cab377d5fa2aac5c23265c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359bed4e4813a0cf61cab377d5fa2aac5c23265c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7272c8a038847cf67e888828e58fc0e00d1f5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7272c8a038847cf67e888828e58fc0e00d1f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7272c8a038847cf67e888828e58fc0e00d1f5d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7272c8a038847cf67e888828e58fc0e00d1f5d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f898793b4545483adaf62c5efbc78cee518884e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f898793b4545483adaf62c5efbc78cee518884e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f898793b4545483adaf62c5efbc78cee518884e6"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "a389579ee527797eb1992f3c745487456e9e7660", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7272c8a038847cf67e888828e58fc0e00d1f5d5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7272c8a038847cf67e888828e58fc0e00d1f5d5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f7272c8a038847cf67e888828e58fc0e00d1f5d5", "patch": "@@ -13961,7 +13961,10 @@ grokparms (tree parmlist, tree *parms)\n \tbreak;\n \n       if (! decl || TREE_TYPE (decl) == error_mark_node)\n-\tcontinue;\n+\t{\n+\t  any_error = 1;\n+\t  continue;\n+\t}\n \n       type = TREE_TYPE (decl);\n       if (VOID_TYPE_P (type))\n@@ -14014,7 +14017,8 @@ grokparms (tree parmlist, tree *parms)\n \t      TREE_TYPE (decl) = type;\n \t    }\n \t  else if (abstract_virtuals_error (decl, type))\n-\t    any_error = 1;  /* Seems like a good idea.  */\n+\t    /* Ignore any default argument.  */\n+\t    init = NULL_TREE;\n \t  else if (cxx_dialect < cxx17 && INDIRECT_TYPE_P (type))\n \t    {\n \t      /* Before C++17 DR 393:\n@@ -14043,9 +14047,7 @@ grokparms (tree parmlist, tree *parms)\n \t\t\t decl, t);\n \t    }\n \n-\t  if (any_error)\n-\t    init = NULL_TREE;\n-\t  else if (init && !processing_template_decl)\n+\t  if (init && !processing_template_decl)\n \t    init = check_default_argument (decl, init, tf_warning_or_error);\n \t}\n \n@@ -14058,6 +14060,12 @@ grokparms (tree parmlist, tree *parms)\n   if (parm)\n     result = chainon (result, void_list_node);\n   *parms = decls;\n+  if (any_error)\n+    result = NULL_TREE;\n+\n+  if (any_error)\n+    /* We had parm errors, recover by giving the function (...) type.  */\n+    result = NULL_TREE;\n \n   return result;\n }"}, {"sha": "61b0cc3f2dcc20e2cf804bc1a18ed3ac1187a06c", "filename": "gcc/testsuite/g++.dg/parse/error33.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7272c8a038847cf67e888828e58fc0e00d1f5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7272c8a038847cf67e888828e58fc0e00d1f5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C?ref=f7272c8a038847cf67e888828e58fc0e00d1f5d5", "patch": "@@ -8,9 +8,9 @@ struct A\n \n typedef void (A::T)(); /* { dg-error \"15:typedef name may not be a nested\" } */\n \n-void bar(T); /* { dg-message \"note: declared here\" } */\n+void bar(T);\n \n void baz()\n {\n-  bar(&A::foo); /* { dg-error \"too many arguments\" } */\n+  bar(&A::foo);\n }"}]}