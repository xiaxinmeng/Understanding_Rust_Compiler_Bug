{"sha": "da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "node_id": "C_kwDOANBUbNoAKGRhOGMzNjJjNGMxOGNmZjJmMmRmZDVjNDcwNmJkZGE3NTc2ODk5YTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-24T14:25:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-24T14:25:29Z"}, "message": "c++: Fix up constexpr handling of char/signed char/short pre/post inc/decrement [PR105774]\n\nsigned char, char or short int pre/post inc/decrement are represented by\nnormal {PRE,POST}_{INC,DEC}REMENT_EXPRs in the FE and only gimplification\nensures that the {PLUS,MINUS}_EXPR is done in unsigned version of those\ntypes:\n    case PREINCREMENT_EXPR:\n    case PREDECREMENT_EXPR:\n    case POSTINCREMENT_EXPR:\n    case POSTDECREMENT_EXPR:\n      {\n        tree type = TREE_TYPE (TREE_OPERAND (*expr_p, 0));\n        if (INTEGRAL_TYPE_P (type) && c_promoting_integer_type_p (type))\n          {\n            if (!TYPE_OVERFLOW_WRAPS (type))\n              type = unsigned_type_for (type);\n            return gimplify_self_mod_expr (expr_p, pre_p, post_p, 1, type);\n          }\n        break;\n      }\nThis means during constant evaluation we need to do it similarly (either\nusing unsigned_type_for or using widening to integer_type_node).\nThe following patch does the latter.\n\n2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105774\n\t* constexpr.cc (cxx_eval_increment_expression): For signed types\n\tthat promote to int, evaluate PLUS_EXPR or MINUS_EXPR in int type.\n\n\t* g++.dg/cpp1y/constexpr-105774.C: New test.", "tree": {"sha": "857d803ae8539362c83a411ab9736641454b9776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/857d803ae8539362c83a411ab9736641454b9776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c362c4c18cff2f2dfd5c4706bdda7576899a4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44575cb88727193386428e9ced3439e4f98f493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44575cb88727193386428e9ced3439e4f98f493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44575cb88727193386428e9ced3439e4f98f493"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "94b54fc71dc227eeb5f13b80effe82d48c395bc0", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c362c4c18cff2f2dfd5c4706bdda7576899a4/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c362c4c18cff2f2dfd5c4706bdda7576899a4/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "patch": "@@ -6234,6 +6234,18 @@ cxx_eval_increment_expression (const constexpr_ctx *ctx, tree t,\n \toffset = fold_build1 (NEGATE_EXPR, TREE_TYPE (offset), offset);\n       mod = fold_build2 (POINTER_PLUS_EXPR, type, val, offset);\n     }\n+  else if (c_promoting_integer_type_p (type)\n+\t   && !TYPE_UNSIGNED (type)\n+\t   && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n+    {\n+      offset = fold_convert (integer_type_node, offset);\n+      mod = fold_convert (integer_type_node, val);\n+      tree t = fold_build2 (inc ? PLUS_EXPR : MINUS_EXPR, integer_type_node,\n+\t\t\t    mod, offset);\n+      mod = fold_convert (type, t);\n+      if (TREE_OVERFLOW_P (mod) && !TREE_OVERFLOW_P (t))\n+\tTREE_OVERFLOW (mod) = false;\n+    }\n   else\n     mod = fold_build2 (inc ? PLUS_EXPR : MINUS_EXPR, type, val, offset);\n   if (!ptr)"}, {"sha": "8ca6fce75705bb813e12b6544e88d0634d6336a8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-105774.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c362c4c18cff2f2dfd5c4706bdda7576899a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-105774.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c362c4c18cff2f2dfd5c4706bdda7576899a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-105774.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-105774.C?ref=da8c362c4c18cff2f2dfd5c4706bdda7576899a4", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/105774\n+// { dg-do compile { target c++14 } }\n+\n+constexpr signed char\n+foo ()\n+{\n+#if __SCHAR_MAX__ < __INT_MAX__\n+  signed char x = __SCHAR_MAX__;\n+#else\n+  signed char x = 0;\n+#endif\n+  return ++x;\n+}\n+\n+constexpr auto a = foo ();"}]}