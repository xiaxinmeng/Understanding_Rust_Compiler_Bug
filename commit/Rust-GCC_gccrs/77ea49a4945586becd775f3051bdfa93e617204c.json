{"sha": "77ea49a4945586becd775f3051bdfa93e617204c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlYTQ5YTQ5NDU1ODZiZWNkNzc1ZjMwNTFiZGZhOTNlNjE3MjA0Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-11-28T16:19:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-11-28T16:19:55Z"}, "message": "Ignore SETs that are anything except REG or MEM, but look inside STRICT_LOW_PART.\n\nFrom-SVN: r37819", "tree": {"sha": "61257981c2e19cb4db6927691be50326872840a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61257981c2e19cb4db6927691be50326872840a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ea49a4945586becd775f3051bdfa93e617204c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ea49a4945586becd775f3051bdfa93e617204c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ea49a4945586becd775f3051bdfa93e617204c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ea49a4945586becd775f3051bdfa93e617204c/comments", "author": null, "committer": null, "parents": [{"sha": "c5c0b3d96ce12e0d396b0d2181fbed578191de87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c0b3d96ce12e0d396b0d2181fbed578191de87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c0b3d96ce12e0d396b0d2181fbed578191de87"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "90531dae35b5f04bae777ac2bea6ae3a866cfcd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ea49a4945586becd775f3051bdfa93e617204c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ea49a4945586becd775f3051bdfa93e617204c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77ea49a4945586becd775f3051bdfa93e617204c", "patch": "@@ -1,3 +1,8 @@\n+2000-11-28  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* simplify-rtx.c (cselib_record_sets): Ignore sets whose destination\n+\tis anything but REG or MEM, but look inside STRICT_LOW_PART.\n+\n Tue Nov 28 09:53:50 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* system.h (IS_DIR_SEPARATOR): Use uppercase macro name."}, {"sha": "08ceaf7fc106984e77f9d3e2413db20198b3baa4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ea49a4945586becd775f3051bdfa93e617204c/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ea49a4945586becd775f3051bdfa93e617204c/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=77ea49a4945586becd775f3051bdfa93e617204c", "patch": "@@ -3198,13 +3198,22 @@ cselib_record_sets (insn)\n      locations that are written.  */\n   for (i = 0; i < n_sets; i++)\n     {\n-      sets[i].src_elt = cselib_lookup (sets[i].src, GET_MODE (sets[i].dest),\n-\t\t\t\t       1);\n-      if (GET_CODE (sets[i].dest) == MEM)\n-\tsets[i].dest_addr_elt = cselib_lookup (XEXP (sets[i].dest, 0), Pmode,\n-\t\t\t\t\t       1);\n-      else\n-\tsets[i].dest_addr_elt = 0;\n+      rtx dest = sets[i].dest;\n+\n+      /* A STRICT_LOW_PART can be ignored; we'll record the equivalence for\n+         the low part after invalidating any knowledge about larger modes.  */\n+      if (GET_CODE (sets[i].dest) == STRICT_LOW_PART)\n+\tsets[i].dest = dest = XEXP (dest, 0);\n+\n+      /* We don't know how to record anything but REG or MEM.  */\n+      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n+        {\n+\t  sets[i].src_elt = cselib_lookup (sets[i].src, GET_MODE (dest), 1);\n+\t  if (GET_CODE (dest) == MEM)\n+\t    sets[i].dest_addr_elt = cselib_lookup (XEXP (dest, 0), Pmode, 1);\n+\t  else\n+\t    sets[i].dest_addr_elt = 0;\n+\t}\n     }\n \n   /* Invalidate all locations written by this insn.  Note that the elts we\n@@ -3214,7 +3223,11 @@ cselib_record_sets (insn)\n \n   /* Now enter the equivalences in our tables.  */\n   for (i = 0; i < n_sets; i++)\n-    cselib_record_set (sets[i].dest, sets[i].src_elt, sets[i].dest_addr_elt);\n+    {\n+      rtx dest = sets[i].dest;\n+      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n+\tcselib_record_set (dest, sets[i].src_elt, sets[i].dest_addr_elt);\n+    }\n }\n \n /* Record the effects of INSN.  */"}]}