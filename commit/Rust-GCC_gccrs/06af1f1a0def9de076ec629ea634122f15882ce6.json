{"sha": "06af1f1a0def9de076ec629ea634122f15882ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhZjFmMWEwZGVmOWRlMDc2ZWM2MjllYTYzNDEyMmYxNTg4MmNlNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-06T12:56:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-06T12:56:42Z"}, "message": "tree-vect-loop.c (vectorizable_reduction): Remember reduction PHI.\n\n2019-11-06  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vectorizable_reduction): Remember reduction\n\tPHI.  Use STMT_VINFO_REDUC_IDX to skip the reduction operand.\n\tSimplify single_defuse_cycle condition.\n\nFrom-SVN: r277882", "tree": {"sha": "47df5ecea24585e9d73d35d74e455947967a1696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47df5ecea24585e9d73d35d74e455947967a1696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06af1f1a0def9de076ec629ea634122f15882ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06af1f1a0def9de076ec629ea634122f15882ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06af1f1a0def9de076ec629ea634122f15882ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06af1f1a0def9de076ec629ea634122f15882ce6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "feba3d8838118d3c41b8e25f13beaa6a15b38302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feba3d8838118d3c41b8e25f13beaa6a15b38302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feba3d8838118d3c41b8e25f13beaa6a15b38302"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "bc3d23842a4e91e181d3b2315734982068476200", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06af1f1a0def9de076ec629ea634122f15882ce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06af1f1a0def9de076ec629ea634122f15882ce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06af1f1a0def9de076ec629ea634122f15882ce6", "patch": "@@ -1,3 +1,9 @@\n+2019-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Remember reduction\n+\tPHI.  Use STMT_VINFO_REDUC_IDX to skip the reduction operand.\n+\tSimplify single_defuse_cycle condition.\n+\n 2019-11-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): When vectorizing an"}, {"sha": "d982e1aea771c9482869177ad605d88adcd2a9e3", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06af1f1a0def9de076ec629ea634122f15882ce6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06af1f1a0def9de076ec629ea634122f15882ce6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=06af1f1a0def9de076ec629ea634122f15882ce6", "patch": "@@ -5734,6 +5734,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n     }\n \n   stmt_vec_info orig_stmt_of_analysis = stmt_info;\n+  stmt_vec_info phi_info = stmt_info;\n   if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def\n       || STMT_VINFO_DEF_TYPE (stmt_info) == vect_double_reduction_def)\n     {\n@@ -5758,8 +5759,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t  bool res = single_imm_use (gimple_phi_result (stmt_info->stmt),\n \t\t\t\t     &use_p, &use_stmt);\n \t  gcc_assert (res);\n-\t  stmt_info = loop_vinfo->lookup_stmt (use_stmt);\n-\t  stmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (stmt_info));\n+\t  phi_info = loop_vinfo->lookup_stmt (use_stmt);\n+\t  stmt_info = vect_stmt_to_vectorize (STMT_VINFO_REDUC_DEF (phi_info));\n \t}\n       /* STMT_VINFO_REDUC_DEF doesn't point to the first but the last\n          element.  */\n@@ -5769,6 +5770,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t  stmt_info = REDUC_GROUP_FIRST_ELEMENT (stmt_info);\n \t}\n     }\n+  /* PHIs should not participate in patterns.  */\n+  gcc_assert (!STMT_VINFO_RELATED_STMT (phi_info));\n \n   if (nested_in_vect_loop_p (loop, stmt_info))\n     {\n@@ -5831,9 +5834,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n      The last use is the reduction variable.  In case of nested cycle this\n      assumption is not true: we use reduc_index to record the index of the\n      reduction variable.  */\n-  stmt_vec_info phi_info = STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info));\n-  /* PHIs should not participate in patterns.  */\n-  gcc_assert (!STMT_VINFO_RELATED_STMT (phi_info));\n   gphi *reduc_def_phi = as_a <gphi *> (phi_info->stmt);\n \n   /* Verify following REDUC_IDX from the latch def leads us back to the PHI\n@@ -5882,11 +5882,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t\t\t     \"use not simple.\\n\");\n \t  return false;\n \t}\n-      if ((dt == vect_reduction_def || dt == vect_nested_cycle)\n-\t  && op == reduc_def)\n-\t{\n-\t  continue;\n-\t}\n+      if (i == STMT_VINFO_REDUC_IDX (stmt_info))\n+\tcontinue;\n \n       /* There should be only one cycle def in the stmt, the one\n          leading to reduc_def.  */\n@@ -6347,14 +6344,9 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n    This only works when we see both the reduction PHI and its only consumer\n    in vectorizable_reduction and there are no intermediate stmts\n    participating.  */\n-  stmt_vec_info use_stmt_info;\n-  tree reduc_phi_result = gimple_phi_result (reduc_def_phi);\n   if (ncopies > 1\n       && (STMT_VINFO_RELEVANT (stmt_info) <= vect_used_only_live)\n-      && (use_stmt_info = loop_vinfo->lookup_single_use (reduc_phi_result))\n-      && (!STMT_VINFO_IN_PATTERN_P (use_stmt_info)\n-\t  || !STMT_VINFO_PATTERN_DEF_SEQ (use_stmt_info))\n-      && vect_stmt_to_vectorize (use_stmt_info) == stmt_info)\n+      && reduc_chain_length == 1)\n     single_defuse_cycle = true;\n \n   if (single_defuse_cycle || lane_reduc_code_p)"}]}