{"sha": "94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "node_id": "C_kwDOANBUbNoAKDk0OTEyMjEyZDNkMWJlMGIxYzQ5MGU5YjVmNDUxNjVlZjVmMzBkOGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-25T09:47:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-25T09:47:24Z"}, "message": "match.pd: Fix up the recent bitmask_inv_cst_vector_p simplification [PR103417]\n\nThe following testcase is miscompiled since the r12-5489-g0888d6bbe97e10\nchanges.\nThe simplification triggers on\n(x & 4294967040U) >= 0U\nand turns it into:\nx <= 255U\nwhich is incorrect, it should fold to 1 because unsigned >= 0U is always\ntrue and normally the\n/* Non-equality compare simplifications from fold_binary  */\n     (if (wi::to_wide (cst) == min)\n       (if (cmp == GE_EXPR)\n        { constant_boolean_node (true, type); })\nsimplification folds that, but this simplification was done earlier.\n\nThe simplification correctly doesn't include lt which has the same\nreason why it shouldn't be handled, we'll fold it to 0 elsewhere.\n\nBut, IMNSHO while it isn't incorrect to handle le and gt there, it is\nunnecessary.  Because (x & cst) <= 0U and (x & cst) > 0U should\nnever appear, again in\n/* Non-equality compare simplifications from fold_binary  */\nwe have a simplification for it:\n       (if (cmp == LE_EXPR)\n        (eq @2 @1))\n       (if (cmp == GT_EXPR)\n        (ne @2 @1))))\nThis is done for\n  (cmp (convert?@2 @0) uniform_integer_cst_p@1)\nand so should be done for both integers and vectors.\nAs the bitmask_inv_cst_vector_p simplification only handles\neq and ne for signed types, I think it can be simplified to just\nfollowing patch.\n\n2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103417\n\t* match.pd ((X & Y) CMP 0): Only handle eq and ne.  Commonalize\n\tcommon tests.\n\n\t* gcc.c-torture/execute/pr103417.c: New test.", "tree": {"sha": "cdecb377c7d49fce020c30ea8ae0cbae21ddc765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdecb377c7d49fce020c30ea8ae0cbae21ddc765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94912212d3d1be0b1c490e9b5f45165ef5f30d8a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "531dae29a67e915a145d908bd2f46d22bc369c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531dae29a67e915a145d908bd2f46d22bc369c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531dae29a67e915a145d908bd2f46d22bc369c11"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "39fd77ddc4a1cdeae74f9f1597289004308b83cc", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94912212d3d1be0b1c490e9b5f45165ef5f30d8a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94912212d3d1be0b1c490e9b5f45165ef5f30d8a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "patch": "@@ -5214,20 +5214,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Transform comparisons of the form (X & Y) CMP 0 to X CMP2 Z\n    where ~Y + 1 == pow2 and Z = ~Y.  */\n (for cst (VECTOR_CST INTEGER_CST)\n- (for cmp (le eq ne ge gt)\n-      icmp (le le gt le gt)\n- (simplify\n-  (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n-   (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n-     (switch\n-      (if (csts && TYPE_UNSIGNED (TREE_TYPE (@1))\n-\t   && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n-       (icmp @0 { csts; }))\n-      (if (csts && !TYPE_UNSIGNED (TREE_TYPE (@1))\n-\t   && (cmp == EQ_EXPR || cmp == NE_EXPR)\n-\t   && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n+ (for cmp (eq ne)\n+      icmp (le gt)\n+  (simplify\n+   (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n+    (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n+     (if (csts && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n+      (if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n+       (icmp @0 { csts; })\n        (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n-\t(icmp (convert:utype @0) { csts; }))))))))\n+\t (icmp (convert:utype @0) { csts; }))))))))\n \n /* -A CMP -B -> B CMP A.  */\n (for cmp (tcc_comparison)"}, {"sha": "0fef8908036e819cfa62b0a8d5e2bd3be0f790a1", "filename": "gcc/testsuite/gcc.c-torture/execute/pr103417.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94912212d3d1be0b1c490e9b5f45165ef5f30d8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94912212d3d1be0b1c490e9b5f45165ef5f30d8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103417.c?ref=94912212d3d1be0b1c490e9b5f45165ef5f30d8a", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/103417 */\n+\n+struct { int a : 8; int b : 24; } c = { 0, 1 };\n+\n+int\n+main ()\n+{\n+  if (c.b && !c.b)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}