{"sha": "5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "node_id": "C_kwDOANBUbNoAKDVlZmVhYTBkMjk1MjVmYTI4ZTE4OWU2Mjc4YzFiMTY1MWZiMGQ3YmY", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-13T15:42:47Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-13T15:44:03Z"}, "message": "[arm] Fix MVE addressing modes for VLDR[BHW] and VSTR[BHW]\n\nThe way we were previously dealing with addressing modes for MVE was preventing\nthe use of pre, post and offset addressing modes for the normal loads and\nstores, including widening and narrowing.  This patch fixes that and\nadds tests to ensure we are capable of using all the available addressing\nmodes.\n\ngcc/ChangeLog:\n2021-10-12  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.c (thumb2_legitimate_address_p): Use VALID_MVE_MODE\n\twhen checking mve addressing modes.\n\t(mve_vector_mem_operand): Fix the way we handle pre, post and offset\n\taddressing modes.\n\t(arm_print_operand): Fix printing of POST_ and PRE_MODIFY.\n\t* config/arm/mve.md: Use mve_memory_operand predicate everywhere where\n\tthere is a single Ux constraint.\n\ngcc/testsuite/ChangeLog:\n2021-10-12  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/mve/mve.exp: Make it test main directory.\n\t* gcc.target/arm/mve/mve_load_memory_modes.c: New test.\n\t* gcc.target/arm/mve/mve_store_memory_modes.c: New test.", "tree": {"sha": "b295b1d5cae56f6685ce89fdcbd415f871366787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b295b1d5cae56f6685ce89fdcbd415f871366787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5"}], "stats": {"total": 809, "additions": 767, "deletions": 42}, "files": [{"sha": "d8c5d2bc7db35cb596293dcf8de3c7db09d9de8a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "patch": "@@ -8531,8 +8531,7 @@ thumb2_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n   bool use_ldrd;\n   enum rtx_code code = GET_CODE (x);\n \n-  if (TARGET_HAVE_MVE\n-      && (mode == V8QImode || mode == E_V4QImode || mode == V4HImode))\n+  if (TARGET_HAVE_MVE && VALID_MVE_MODE (mode))\n     return mve_vector_mem_operand (mode, x, strict_p);\n \n   if (arm_address_register_rtx_p (x, strict_p))\n@@ -13434,53 +13433,49 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n       || code == PRE_INC || code == POST_DEC)\n     {\n       reg_no = REGNO (XEXP (op, 0));\n-      return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n-\t       ? reg_no <= LAST_LO_REGNUM\n-\t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n-\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n-    }\n-  else if ((code == POST_MODIFY || code == PRE_MODIFY)\n-\t   && GET_CODE (XEXP (op, 1)) == PLUS && REG_P (XEXP (XEXP (op, 1), 1)))\n+      return ((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n+\t      ? reg_no <= LAST_LO_REGNUM\n+\t      :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n+\t|| reg_no >= FIRST_PSEUDO_REGISTER;\n+    }\n+  else if (((code == POST_MODIFY || code == PRE_MODIFY)\n+\t    && GET_CODE (XEXP (op, 1)) == PLUS\n+\t    && XEXP (op, 0) == XEXP (XEXP (op, 1), 0)\n+\t    && REG_P (XEXP (op, 0))\n+\t    && GET_CODE (XEXP (XEXP (op, 1), 1)) == CONST_INT)\n+\t   /* Make sure to only accept PLUS after reload_completed, otherwise\n+\t      this will interfere with auto_inc's pattern detection.  */\n+\t   || (reload_completed && code == PLUS && REG_P (XEXP (op, 0))\n+\t       && GET_CODE (XEXP (op, 1)) == CONST_INT))\n     {\n       reg_no = REGNO (XEXP (op, 0));\n-      val = INTVAL (XEXP ( XEXP (op, 1), 1));\n+      if (code == PLUS)\n+\tval = INTVAL (XEXP (op, 1));\n+      else\n+\tval = INTVAL (XEXP(XEXP (op, 1), 1));\n+\n       switch (mode)\n \t{\n \t  case E_V16QImode:\n-\t    if (abs (val) <= 127)\n-\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n-\t    return FALSE;\n-\t  case E_V8HImode:\n-\t  case E_V8HFmode:\n-\t    if (abs (val) <= 255)\n-\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n-\t    return FALSE;\n \t  case E_V8QImode:\n \t  case E_V4QImode:\n \t    if (abs (val) <= 127)\n-\t      return (reg_no <= LAST_LO_REGNUM\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t      return (reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t|| reg_no >= FIRST_PSEUDO_REGISTER;\n \t    return FALSE;\n+\t  case E_V8HImode:\n+\t  case E_V8HFmode:\n \t  case E_V4HImode:\n \t  case E_V4HFmode:\n \t    if (val % 2 == 0 && abs (val) <= 254)\n-\t      return (reg_no <= LAST_LO_REGNUM\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t      return reg_no <= LAST_LO_REGNUM\n+\t\t|| reg_no >= FIRST_PSEUDO_REGISTER;\n \t    return FALSE;\n \t  case E_V4SImode:\n \t  case E_V4SFmode:\n \t    if (val % 4 == 0 && abs (val) <= 508)\n-\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n-\t    return FALSE;\n-\t  case E_V2DImode:\n-\t  case E_V2DFmode:\n-\t  case E_TImode:\n-\t    if (val % 4 == 0 && val >= 0 && val <= 1020)\n-\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n-\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t      return (reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t|| reg_no >= FIRST_PSEUDO_REGISTER;\n \t    return FALSE;\n \t  default:\n \t    return FALSE;\n@@ -24277,7 +24272,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \telse if (code == POST_MODIFY || code == PRE_MODIFY)\n \t  {\n \t    asm_fprintf (stream, \"[%r\", REGNO (XEXP (addr, 0)));\n-\t    postinc_reg = XEXP ( XEXP (x, 1), 1);\n+\t    postinc_reg = XEXP (XEXP (addr, 1), 1);\n \t    if (postinc_reg && CONST_INT_P (postinc_reg))\n \t      {\n \t\tif (code == POST_MODIFY)"}, {"sha": "a66af4ddeaa62f6d25ebb316d093705a96dd9425", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "patch": "@@ -7570,7 +7570,7 @@\n ;;\n (define_insn \"mve_vldrwq_fv4sf\"\n   [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")]\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"mve_memory_operand\" \"Ux\")]\n \t VLDRWQ_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -7589,7 +7589,7 @@\n ;;\n (define_insn \"mve_vldrwq_<supf>v4si\"\n   [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")]\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"mve_memory_operand\" \"Ux\")]\n \t VLDRWQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -7608,7 +7608,7 @@\n ;;\n (define_insn \"mve_vldrwq_z_fv4sf\"\n   [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"mve_memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRWQ_F))\n   ]\n@@ -7628,7 +7628,7 @@\n ;;\n (define_insn \"mve_vldrwq_z_<supf>v4si\"\n   [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"mve_memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRWQ))\n   ]\n@@ -8282,7 +8282,7 @@\n ;; [vstrwq_f]\n ;;\n (define_insn \"mve_vstrwq_fv4sf\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n+  [(set (match_operand:V4SI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")]\n \t VSTRWQ_F))\n   ]\n@@ -8301,7 +8301,7 @@\n ;; [vstrwq_p_f]\n ;;\n (define_insn \"mve_vstrwq_p_fv4sf\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n+  [(set (match_operand:V4SI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRWQ_F))\n@@ -8321,7 +8321,7 @@\n ;; [vstrwq_p_s vstrwq_p_u]\n ;;\n (define_insn \"mve_vstrwq_p_<supf>v4si\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n+  [(set (match_operand:V4SI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRWQ))\n@@ -8341,7 +8341,7 @@\n ;; [vstrwq_s vstrwq_u]\n ;;\n (define_insn \"mve_vstrwq_<supf>v4si\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n+  [(set (match_operand:V4SI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")]\n \t VSTRWQ))\n   ]"}, {"sha": "a858e52d9208b6e2bbd3c2175ed45724871598e2", "filename": "gcc/testsuite/gcc.target/arm/mve/mve.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp?ref=5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "patch": "@@ -44,6 +44,9 @@ dg-init\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/intrinsics/*.\\[cCS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n # All done.\n set dg_runtest_extra_prunes \"\"\n dg-finish"}, {"sha": "e35eb1108aad5c477d42623c5062ea920cfb6f33", "filename": "gcc/testsuite/gcc.target/arm/mve/mve_load_memory_modes.c", "status": "added", "additions": 357, "deletions": 0, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_load_memory_modes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_load_memory_modes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_load_memory_modes.c?ref=5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "patch": "@@ -0,0 +1,357 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_mve.h\"\n+/*\n+**off_load8_0:\n+**\t...\n+**\tvldrb.8\tq0, \\[r0, #16\\]\n+**\t...\n+*/\n+int8x16_t off_load8_0 (int8_t * a)\n+{\n+  return vld1q_s8 (a + 16);\n+}\n+\n+/*\n+**off_load8_1:\n+**\t...\n+**\tvldrb.u16\tq0, \\[r0, #1\\]\n+**\t...\n+*/\n+uint16x8_t off_load8_1 (uint8_t * a)\n+{\n+  return vldrbq_u16 (a + 1);\n+}\n+\n+/*\n+**off_load8_2:\n+**\t...\n+**\tvldrb.s32\tq0, \\[r0, #127\\]\n+**\t...\n+*/\n+int32x4_t off_load8_2 (int8_t * a)\n+{\n+  return vldrbq_s32 (a + 127);\n+}\n+\n+/*\n+**off_load8_3:\n+**\t...\n+**\tvldrb.8\tq0, \\[r0, #-127\\]\n+**\t...\n+*/\n+uint8x16_t off_load8_3 (uint8_t * a)\n+{\n+  return vldrbq_u8 (a - 127);\n+}\n+\n+/*\n+**not_off_load8_0:\n+**\t...\n+**\tvldrb.8\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+int8x16_t not_off_load8_0 (int8_t * a)\n+{\n+  return vld1q_s8 (a + 128);\n+}\n+\n+/*\n+**off_loadfp16_0:\n+**\t...\n+**\tvldrh.16\tq0, \\[r0, #-244\\]\n+**\t...\n+*/\n+float16x8_t off_loadfp16_0 (float16_t *a)\n+{\n+  return vld1q_f16 (a - 122);\n+}\n+\n+/*\n+**off_load16_0:\n+**\t...\n+**\tvldrh.16\tq0, \\[r0, #-2\\]\n+**\t...\n+*/\n+uint16x8_t off_load16_0 (uint16_t * a)\n+{\n+  return vld1q_u16 (a - 1);\n+}\n+\n+/*\n+**off_load16_1:\n+**\t...\n+**\tvldrh.u32\tq0, \\[r0, #254\\]\n+**\t...\n+*/\n+uint32x4_t off_load16_1 (uint16_t * a)\n+{\n+  return vldrhq_u32 (a + 127);\n+}\n+\n+/*\n+**not_off_load16_0:\n+**\t...\n+**\tvldrh.16\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+int16x8_t not_off_load16_0 (int8_t * a)\n+{\n+  return vld1q_s16 ((int16_t *)(a + 1));\n+}\n+\n+/*\n+**not_off_load16_1:\n+**\t...\n+**\tvldrh.u32\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+uint32x4_t not_off_load16_1 (uint16_t * a)\n+{\n+  return vldrhq_u32 ((a - 128));\n+}\n+\n+/*\n+**off_loadfp32_0:\n+**\t...\n+**\tvldrw.32\tq0, \\[r0, #24\\]\n+**\t...\n+*/\n+float32x4_t off_loadfp32_0 (float32_t *a)\n+{\n+  return vld1q_f32 (a + 6);\n+}\n+\n+/*\n+**off_load32_0:\n+**\t...\n+**\tvldrw.32\tq0, \\[r0, #4\\]\n+**\t...\n+*/\n+uint32x4_t off_load32_0 (uint32_t * a)\n+{\n+  return vld1q_u32 (a + 1);\n+}\n+\n+/*\n+**off_load32_1:\n+**\t...\n+**\tvldrw.32\tq0, \\[r0, #-508\\]\n+**\t...\n+*/\n+int32x4_t off_load32_1 (int32_t * a)\n+{\n+  return vldrwq_s32 (a - 127);\n+}\n+/*\n+**pre_load8_0:\n+**\t...\n+**\tvldrb.8\tq[0-9]+, \\[r0, #16\\]!\n+**\t...\n+*/\n+int8_t* pre_load8_0 (int8_t * a, int8x16_t *v)\n+{\n+  a += 16;\n+  *v = vld1q_s8 (a);\n+  return a;\n+}\n+\n+/*\n+**pre_load8_1:\n+**\t...\n+**\tvldrb.u16\tq[0-9]+, \\[r0, #4\\]!\n+**\t...\n+*/\n+uint8_t* pre_load8_1 (uint8_t * a, uint16x8_t *v)\n+{\n+  a += 4;\n+  *v = vldrbq_u16 (a);\n+  return a;\n+}\n+\n+/*\n+**pre_loadfp16_0:\n+**\t...\n+**\tvldrh.16\tq[0-9]+, \\[r0, #128\\]!\n+**\t...\n+*/\n+float16_t* pre_loadfp16_0 (float16_t *a, float16x8_t *v)\n+{\n+  a += 64;\n+  *v = vld1q_f16 (a);\n+  return a;\n+}\n+\n+/*\n+**pre_load16_0:\n+**\t...\n+**\tvldrh.16\tq[0-9]+, \\[r0, #-254\\]!\n+**\t...\n+*/\n+int16_t* pre_load16_0 (int16_t * a, int16x8_t *v)\n+{\n+  a -= 127;\n+  *v = vldrhq_s16 (a);\n+  return a;\n+}\n+\n+/*\n+**pre_load16_1:\n+**\t...\n+**\tvldrh.s32\tq[0-9]+, \\[r0, #52\\]!\n+**\t...\n+*/\n+int16_t* pre_load16_1 (int16_t * a, int32x4_t *v)\n+{\n+  a += 26;\n+  *v = vldrhq_s32 (a);\n+  return a;\n+}\n+\n+/*\n+**pre_loadfp32_0:\n+**\t...\n+**\tvldrw.32\tq[0-9]+, \\[r0, #-72\\]!\n+**\t...\n+*/\n+float32_t* pre_loadfp32_0 (float32_t *a, float32x4_t *v)\n+{\n+  a -= 18;\n+  *v = vld1q_f32 (a);\n+  return a;\n+}\n+\n+\n+/*\n+**pre_load32_0:\n+**\t...\n+**\tvldrw.32\tq[0-9]+, \\[r0, #-4\\]!\n+**\t...\n+*/\n+uint32_t* pre_load32_0 (uint32_t * a, uint32x4_t *v)\n+{\n+  a -= 1;\n+  *v = vld1q_u32 (a);\n+  return a;\n+}\n+\n+\n+/*\n+**post_load8_0:\n+**\t...\n+**\tvldrb.8\tq[0-9]+, \\[r0\\], #26\n+**\t...\n+*/\n+uint8_t* post_load8_0 (uint8_t * a, uint8x16_t *v)\n+{\n+  *v = vld1q_u8 (a);\n+  a += 26;\n+  return a;\n+}\n+\n+/*\n+**post_load8_1:\n+**\t...\n+**\tvldrb.s16\tq[0-9]+, \\[r0\\], #-1\n+**\t...\n+*/\n+int8_t* post_load8_1 (int8_t * a, int16x8_t *v)\n+{\n+  *v = vldrbq_s16 (a);\n+  a--;\n+  return a;\n+}\n+\n+/*\n+**post_load8_2:\n+**\t...\n+**\tvldrb.8\tq[0-9]+, \\[r0\\], #26\n+**\t...\n+*/\n+uint8_t* post_load8_2 (uint8_t * a, uint8x16_t *v)\n+{\n+  *v = vld1q_u8 (a);\n+  a += 26;\n+  return a;\n+}\n+\n+/*\n+**post_load8_3:\n+**\t...\n+**\tvldrb.s16\tq[0-9]+, \\[r0\\], #-1\n+**\t...\n+*/\n+int8_t* post_load8_3 (int8_t * a, int16x8_t *v)\n+{\n+  *v = vldrbq_s16 (a);\n+  a--;\n+  return a;\n+}\n+\n+/*\n+**post_loadfp16_0:\n+**\t...\n+**\tvldrh.16\tq[0-9]+, \\[r0\\], #-24\n+**\t...\n+*/\n+float16_t* post_loadfp16_0 (float16_t *a, float16x8_t *v)\n+{\n+  *v = vld1q_f16 (a);\n+  a -= 12;\n+  return a;\n+}\n+\n+/*\n+**post_load16_0:\n+**\t...\n+**\tvldrh.16\tq[0-9]+, \\[r0\\], #-126\n+**\t...\n+*/\n+uint16_t* post_load16_0 (uint16_t * a, uint16x8_t *v)\n+{\n+  *v = vldrhq_u16 (a);\n+  a -= 63;\n+  return a;\n+}\n+\n+/*\n+**post_load16_1:\n+**\t...\n+**\tvldrh.u32\tq[0-9]+, \\[r0\\], #16\n+**\t...\n+*/\n+uint16_t* post_load16_1 (uint16_t * a, uint32x4_t *v)\n+{\n+  *v = vldrhq_u32 (a);\n+  a += 8;\n+  return a;\n+}\n+\n+/*\n+**post_loadfp32_0:\n+**\t...\n+**\tvldrw.32\tq[0-9]+, \\[r0\\], #4\n+**\t...\n+*/\n+float32_t* post_loadfp32_0 (float32_t *a, float32x4_t *v)\n+{\n+  *v = vld1q_f32 (a);\n+  a++;\n+  return a;\n+}\n+\n+/*\n+**post_load32_0:\n+**\t...\n+**\tvldrw.32\tq[0-9]+, \\[r0\\], #-16\n+**\t...\n+*/\n+int32_t* post_load32_0 (int32_t * a, int32x4_t *v)\n+{\n+  *v = vld1q_s32 (a);\n+  a -= 4;\n+  return a;\n+}"}, {"sha": "632f5b44f0b9e1cdc241253baf21d34b0d33abfd", "filename": "gcc/testsuite/gcc.target/arm/mve/mve_store_memory_modes.c", "status": "added", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_store_memory_modes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efeaa0d29525fa28e189e6278c1b1651fb0d7bf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_store_memory_modes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_store_memory_modes.c?ref=5efeaa0d29525fa28e189e6278c1b1651fb0d7bf", "patch": "@@ -0,0 +1,370 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_mve.h\"\n+/*\n+**off_store8_0:\n+**\t...\n+**\tvstrb.8\tq0, \\[r0, #16\\]\n+**\t...\n+*/\n+uint8_t *off_store8_0 (uint8_t * a, uint8x16_t v)\n+{\n+  vst1q_u8 (a + 16, v);\n+  return a;\n+}\n+\n+/*\n+**off_store8_1:\n+**\t...\n+**\tvstrb.16\tq0, \\[r0, #-1\\]\n+**\t...\n+*/\n+int8_t *off_store8_1 (int8_t * a, int16x8_t v)\n+{\n+  vstrbq_s16 (a - 1, v);\n+  return a;\n+}\n+\n+/*\n+**off_store8_2:\n+**\t...\n+**\tvstrb.32\tq0, \\[r0, #-127\\]\n+**\t...\n+*/\n+uint8_t *off_store8_2 (uint8_t * a, uint32x4_t v)\n+{\n+  vstrbq_u32 (a - 127, v);\n+  return a;\n+}\n+\n+/*\n+**off_store8_3:\n+**\t...\n+**\tvstrb.8\tq0, \\[r0, #127\\]\n+**\t...\n+*/\n+int8_t *off_store8_3 (int8_t * a, int8x16_t v)\n+{\n+  vstrbq_s8 (a + 127, v);\n+  return a;\n+}\n+\n+/*\n+**not_off_store8_0:\n+**\t...\n+**\tvstrb.8\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+uint8_t *not_off_store8_0 (uint8_t * a, uint8x16_t v)\n+{\n+  vst1q_u8 (a - 128, v);\n+  return a;\n+}\n+\n+/*\n+**off_storefp16_0:\n+**\t...\n+**\tvstrh.16\tq0, \\[r0, #250\\]\n+**\t...\n+*/\n+float16_t *off_storefp16_0 (float16_t *a, float16x8_t v)\n+{\n+  vst1q_f16 (a + 125, v);\n+  return a;\n+}\n+\n+/*\n+**off_store16_0:\n+**\t...\n+**\tvstrh.16\tq0, \\[r0, #4\\]\n+**\t...\n+*/\n+int16_t *off_store16_0 (int16_t * a, int16x8_t v)\n+{\n+  vst1q_s16 (a + 2, v);\n+  return a;\n+}\n+\n+/*\n+**off_store16_1:\n+**\t...\n+**\tvstrh.32\tq0, \\[r0, #-254\\]\n+**\t...\n+*/\n+int16_t *off_store16_1 (int16_t * a, int32x4_t v)\n+{\n+  vstrhq_s32 (a - 127, v);\n+  return a;\n+}\n+\n+/*\n+**not_off_store16_0:\n+**\t...\n+**\tvstrh.16\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+uint8_t *not_off_store16_0 (uint8_t * a, uint16x8_t v)\n+{\n+  vst1q_u16 ((uint16_t *)(a - 1), v);\n+  return a;\n+}\n+\n+/*\n+**not_off_store16_1:\n+**\t...\n+**\tvstrh.32\tq0, \\[r[0-9]+\\]\n+**\t...\n+*/\n+int16_t *not_off_store16_1 (int16_t * a, int32x4_t v)\n+{\n+  vstrhq_s32 ((a + 128), v);\n+  return a;\n+}\n+\n+/*\n+**off_storefp32_0:\n+**\t...\n+**\tvstrw.32\tq0, \\[r0, #-412\\]\n+**\t...\n+*/\n+float32_t *off_storefp32_0 (float32_t *a, float32x4_t v)\n+{\n+  vst1q_f32 (a - 103, v);\n+  return a;\n+}\n+\n+/*\n+**off_store32_0:\n+**\t...\n+**\tvstrw.32\tq0, \\[r0, #-4\\]\n+**\t...\n+*/\n+int32_t *off_store32_0 (int32_t * a, int32x4_t v)\n+{\n+  vst1q_s32 (a - 1, v);\n+  return a;\n+}\n+\n+/*\n+**off_store32_1:\n+**\t...\n+**\tvstrw.32\tq0, \\[r0, #508\\]\n+**\t...\n+*/\n+uint32_t *off_store32_1 (uint32_t * a, uint32x4_t v)\n+{\n+  vstrwq_u32 (a + 127, v);\n+  return a;\n+}\n+\n+/*\n+**pre_store8_0:\n+**\t...\n+**\tvstrb.8\tq[0-9]+, \\[r0, #-16\\]!\n+**\t...\n+*/\n+uint8_t* pre_store8_0 (uint8_t * a, uint8x16_t v)\n+{\n+  a -= 16;\n+  vst1q_u8 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_store8_1:\n+**\t...\n+**\tvstrb.16\tq[0-9]+, \\[r0, #4\\]!\n+**\t...\n+*/\n+int8_t* pre_store8_1 (int8_t * a, int16x8_t v)\n+{\n+  a += 4;\n+  vstrbq_s16 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_storefp16_0:\n+**\t...\n+**\tvstrh.16\tq0, \\[r0, #8\\]!\n+**\t...\n+*/\n+float16_t *pre_storefp16_0 (float16_t *a, float16x8_t v)\n+{\n+  a += 4;\n+  vst1q_f16 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_store16_0:\n+**\t...\n+**\tvstrh.16\tq[0-9]+, \\[r0, #254\\]!\n+**\t...\n+*/\n+uint16_t* pre_store16_0 (uint16_t * a, uint16x8_t v)\n+{\n+  a += 127;\n+  vstrhq_u16 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_store16_1:\n+**\t...\n+**\tvstrh.32\tq[0-9]+, \\[r0, #-52\\]!\n+**\t...\n+*/\n+int16_t* pre_store16_1 (int16_t * a, int32x4_t v)\n+{\n+  a -= 26;\n+  vstrhq_s32 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_storefp32_0:\n+**\t...\n+**\tvstrw.32\tq0, \\[r0, #-4\\]!\n+**\t...\n+*/\n+float32_t *pre_storefp32_0 (float32_t *a, float32x4_t v)\n+{\n+  a--;\n+  vst1q_f32 (a, v);\n+  return a;\n+}\n+\n+/*\n+**pre_store32_0:\n+**\t...\n+**\tvstrw.32\tq[0-9]+, \\[r0, #4\\]!\n+**\t...\n+*/\n+int32_t* pre_store32_0 (int32_t * a, int32x4_t v)\n+{\n+  a += 1;\n+  vst1q_s32 (a, v);\n+  return a;\n+}\n+\n+\n+/*\n+**post_store8_0:\n+**\t...\n+**\tvstrb.8\tq[0-9]+, \\[r0\\], #-26\n+**\t...\n+*/\n+int8_t* post_store8_0 (int8_t * a, int8x16_t v)\n+{\n+  vst1q_s8 (a, v);\n+  a -= 26;\n+  return a;\n+}\n+\n+/*\n+**post_store8_1:\n+**\t...\n+**\tvstrb.16\tq[0-9]+, \\[r0\\], #1\n+**\t...\n+*/\n+uint8_t* post_store8_1 (uint8_t * a, uint16x8_t v)\n+{\n+  vstrbq_u16 (a, v);\n+  a++;\n+  return a;\n+}\n+\n+/*\n+**post_store8_2:\n+**\t...\n+**\tvstrb.8\tq[0-9]+, \\[r0\\], #-26\n+**\t...\n+*/\n+int8_t* post_store8_2 (int8_t * a, int8x16_t v)\n+{\n+  vst1q_s8 (a, v);\n+  a -= 26;\n+  return a;\n+}\n+\n+/*\n+**post_store8_3:\n+**\t...\n+**\tvstrb.16\tq[0-9]+, \\[r0\\], #7\n+**\t...\n+*/\n+uint8_t* post_store8_3 (uint8_t * a, uint16x8_t v)\n+{\n+  vstrbq_u16 (a, v);\n+  a += 7;\n+  return a;\n+}\n+\n+/*\n+**post_storefp16_0:\n+**\t...\n+**\tvstrh.16\tq[0-9]+, \\[r0\\], #-16\n+**\t...\n+*/\n+float16_t *post_storefp16_0 (float16_t *a, float16x8_t v)\n+{\n+  vst1q_f16 (a, v);\n+  a -= 8;\n+  return a;\n+}\n+\n+/*\n+**post_store16_0:\n+**\t...\n+**\tvstrh.16\tq[0-9]+, \\[r0\\], #126\n+**\t...\n+*/\n+int16_t* post_store16_0 (int16_t * a, int16x8_t v)\n+{\n+  vstrhq_s16 (a, v);\n+  a += 63;\n+  return a;\n+}\n+\n+/*\n+**post_store16_1:\n+**\t...\n+**\tvstrh.32\tq[0-9]+, \\[r0\\], #-16\n+**\t...\n+*/\n+uint16_t* post_store16_1 (uint16_t * a, uint32x4_t v)\n+{\n+  vstrhq_u32 (a, v);\n+  a -= 8;\n+  return a;\n+}\n+\n+/*\n+**post_storefp32_0:\n+**\t...\n+**\tvstrw.32\tq[0-9]+, \\[r0\\], #-16\n+**\t...\n+*/\n+float32_t* post_storefp32_0 (float32_t * a, float32x4_t v)\n+{\n+  vst1q_f32 (a, v);\n+  a -= 4;\n+  return a;\n+}\n+\n+/*\n+**post_store32_0:\n+**\t...\n+**\tvstrw.32\tq[0-9]+, \\[r0\\], #16\n+**\t...\n+*/\n+int32_t* post_store32_0 (int32_t * a, int32x4_t v)\n+{\n+  vst1q_s32 (a, v);\n+  a += 4;\n+  return a;\n+}"}]}