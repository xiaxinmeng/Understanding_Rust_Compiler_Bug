{"sha": "ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwODFiNzdiZTMwNmQyZjJmZTNhM2VjYzZkMGMzYjJmN2RjNzQyOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-04-28T21:05:51Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-04-28T21:05:51Z"}, "message": "[AArch64] Improve vst4_lane intrinsics\n\ngcc/\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_types_storestruct_lane_qualifiers): New.\n\t(TYPES_STORESTRUCT_LANE): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def (st2_lane): New.\n\t(st3_lane): Likewise.\n\t(st4_lane): Likewise.\n\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi_lane<mode>): New.\n\t(vec_store_lanesci_lane<mode>): Likewise.\n\t(vec_store_lanesxi_lane<mode>): Likewise.\n\t(aarch64_st2_lane<VQ:mode>): Likewise.\n\t(aarch64_st3_lane<VQ:mode>): Likewise.\n\t(aarch64_st4_lane<VQ:mode>): Likewise.\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_ST{2,3,4}_LANE.\n\t* config/aarch64/arm_neon.h\n\t(__ST2_LANE_FUNC): Rewrite using builtins, update use points to\n\tuse new macro arguments.\n\t(__ST3_LANE_FUNC): Likewise.\n\t(__ST4_LANE_FUNC): Likewise.\n\t* config/aarch64/iterators.md (V_TWO_ELEM): New.\n\t(V_THREE_ELEM): Likewise.\n\t(V_FOUR_ELEM): Likewise.\n\nFrom-SVN: r209880", "tree": {"sha": "cc5a0273a2af01ab0ab76b43951c5042b0137f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5a0273a2af01ab0ab76b43951c5042b0137f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bc6d43cb8f5fb3327a35c62c2d18141382d4a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc6d43cb8f5fb3327a35c62c2d18141382d4a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc6d43cb8f5fb3327a35c62c2d18141382d4a92"}], "stats": {"total": 489, "additions": 364, "deletions": 125}, "files": [{"sha": "1799a435274a707d311d380baec27acc5c5a9a6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -1,3 +1,27 @@\n+2014-04-28  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_types_storestruct_lane_qualifiers): New.\n+\t(TYPES_STORESTRUCT_LANE): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (st2_lane): New.\n+\t(st3_lane): Likewise.\n+\t(st4_lane): Likewise.\n+\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi_lane<mode>): New.\n+\t(vec_store_lanesci_lane<mode>): Likewise.\n+\t(vec_store_lanesxi_lane<mode>): Likewise.\n+\t(aarch64_st2_lane<VQ:mode>): Likewise.\n+\t(aarch64_st3_lane<VQ:mode>): Likewise.\n+\t(aarch64_st4_lane<VQ:mode>): Likewise.\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_ST{2,3,4}_LANE.\n+\t* config/aarch64/arm_neon.h\n+\t(__ST2_LANE_FUNC): Rewrite using builtins, update use points to\n+\tuse new macro arguments.\n+\t(__ST3_LANE_FUNC): Likewise.\n+\t(__ST4_LANE_FUNC): Likewise.\n+\t* config/aarch64/iterators.md (V_TWO_ELEM): New.\n+\t(V_THREE_ELEM): Likewise.\n+\t(V_FOUR_ELEM): Likewise.\n+\n 2014-04-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* doc/gimple.texi: Replace the description of the now-defunct"}, {"sha": "a3019828a93264dd69c469d788a9753c6dc4be94", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -246,6 +246,11 @@ aarch64_types_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_pointer_map_mode, qualifier_none };\n #define TYPES_STORE1 (aarch64_types_store1_qualifiers)\n #define TYPES_STORESTRUCT (aarch64_types_store1_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer_map_mode,\n+      qualifier_none, qualifier_none };\n+#define TYPES_STORESTRUCT_LANE (aarch64_types_storestruct_lane_qualifiers)\n \n #define CF0(N, X) CODE_FOR_aarch64_##N##X\n #define CF1(N, X) CODE_FOR_##N##X##1"}, {"sha": "339e8f86a4bbfb83e26eb169102c4a365d114c03", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -118,6 +118,10 @@\n   BUILTIN_VQ (STORESTRUCT, st3, 0)\n   BUILTIN_VQ (STORESTRUCT, st4, 0)\n \n+  BUILTIN_VQ (STORESTRUCT_LANE, st2_lane, 0)\n+  BUILTIN_VQ (STORESTRUCT_LANE, st3_lane, 0)\n+  BUILTIN_VQ (STORESTRUCT_LANE, st4_lane, 0)\n+\n   BUILTIN_VQW (BINOP, saddl2, 0)\n   BUILTIN_VQW (BINOP, uaddl2, 0)\n   BUILTIN_VQW (BINOP, ssubl2, 0)"}, {"sha": "108bc8d88931e67e6c7eeb77774a01bb391a1ced", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -3686,6 +3686,17 @@\n   [(set_attr \"type\" \"neon_store2_2reg<q>\")]\n )\n \n+(define_insn \"vec_store_lanesoi_lane<mode>\"\n+  [(set (match_operand:<V_TWO_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:<V_TWO_ELEM> [(match_operand:OI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+                   UNSPEC_ST2_LANE))]\n+  \"TARGET_SIMD\"\n+  \"st2\\\\t{%S1.<Vetype> - %T1.<Vetype>}[%2], %0\"\n+  [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n+)\n+\n (define_insn \"vec_load_lanesci<mode>\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n \t(unspec:CI [(match_operand:CI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n@@ -3706,6 +3717,17 @@\n   [(set_attr \"type\" \"neon_store3_3reg<q>\")]\n )\n \n+(define_insn \"vec_store_lanesci_lane<mode>\"\n+  [(set (match_operand:<V_THREE_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:<V_THREE_ELEM> [(match_operand:CI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+                   UNSPEC_ST3_LANE))]\n+  \"TARGET_SIMD\"\n+  \"st3\\\\t{%S1.<Vetype> - %U1.<Vetype>}[%2], %0\"\n+  [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n+)\n+\n (define_insn \"vec_load_lanesxi<mode>\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n \t(unspec:XI [(match_operand:XI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n@@ -3726,6 +3748,17 @@\n   [(set_attr \"type\" \"neon_store4_4reg<q>\")]\n )\n \n+(define_insn \"vec_store_lanesxi_lane<mode>\"\n+  [(set (match_operand:<V_FOUR_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:<V_FOUR_ELEM> [(match_operand:XI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+                   UNSPEC_ST4_LANE))]\n+  \"TARGET_SIMD\"\n+  \"st4\\\\t{%S1.<Vetype> - %V1.<Vetype>}[%2], %0\"\n+  [(set_attr \"type\" \"neon_store4_one_lane<q>\")]\n+)\n+\n ;; Reload patterns for AdvSIMD register list operands.\n \n (define_expand \"mov<mode>\"\n@@ -4220,6 +4253,57 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_st2_lane<VQ:mode>\"\n+ [(match_operand:DI 0 \"register_operand\" \"r\")\n+  (match_operand:OI 1 \"register_operand\" \"w\")\n+  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (match_operand:SI 2 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_TWO_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+\n+  emit_insn (gen_vec_store_lanesoi_lane<VQ:mode> (mem,\n+\t\t\t\t\t\t  operands[1],\n+\t\t\t\t\t\t  operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_st3_lane<VQ:mode>\"\n+ [(match_operand:DI 0 \"register_operand\" \"r\")\n+  (match_operand:CI 1 \"register_operand\" \"w\")\n+  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (match_operand:SI 2 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_THREE_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+\n+  emit_insn (gen_vec_store_lanesci_lane<VQ:mode> (mem,\n+\t\t\t\t\t\t  operands[1],\n+\t\t\t\t\t\t  operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_st4_lane<VQ:mode>\"\n+ [(match_operand:DI 0 \"register_operand\" \"r\")\n+  (match_operand:XI 1 \"register_operand\" \"w\")\n+  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (match_operand:SI 2 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  enum machine_mode mode = <V_FOUR_ELEM>mode;\n+  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+\n+  emit_insn (gen_vec_store_lanesxi_lane<VQ:mode> (mem,\n+\t\t\t\t\t\t  operands[1],\n+\t\t\t\t\t\t  operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"aarch64_st1<VALL:mode>\"\n  [(match_operand:DI 0 \"register_operand\")\n   (match_operand:VALL 1 \"register_operand\")]"}, {"sha": "a004f9da1c88c73f409a94ca4c1fa794f07dc2fb", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -98,6 +98,9 @@\n     UNSPEC_ST2\n     UNSPEC_ST3\n     UNSPEC_ST4\n+    UNSPEC_ST2_LANE\n+    UNSPEC_ST3_LANE\n+    UNSPEC_ST4_LANE\n     UNSPEC_TLS\n     UNSPEC_TLSDESC\n     UNSPEC_USHL_2S"}, {"sha": "e5c5057bc3d0ad7a6f86e3c323a182ef53cb6e46", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 218, "deletions": 125, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -14452,131 +14452,224 @@ __LD4_LANE_FUNC (uint16x8x4_t, uint16_t, 8h, h, u16, q)\n __LD4_LANE_FUNC (uint32x4x4_t, uint32_t, 4s, s, u32, q)\n __LD4_LANE_FUNC (uint64x2x4_t, uint64_t, 2d, d, u64, q)\n \n-#define __ST2_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n-\t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n-  typedef struct { ptrtype __x[2]; } __ST2_LANE_STRUCTURE_##intype;\t\\\n-  __extension__ static __inline void\t\t\t\t\t\\\n-  __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst2 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n-\t\t\t\t     intype b, const int c)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    __ST2_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n-\t\t\t\t(__ST2_LANE_STRUCTURE_##intype *)ptr;\t\\\n-    __asm__ (\"ld1 {v16.\" #regsuffix \", v17.\" #regsuffix \"}, %1\\n\\t\"\t\\\n-\t     \"st2 {v16.\" #lnsuffix \", v17.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n-\t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"v16\", \"v17\");\t\t\t\t\t\t\\\n-  }\n-\n-__ST2_LANE_FUNC (int8x8x2_t, int8_t, 8b, b, s8,)\n-__ST2_LANE_FUNC (float32x2x2_t, float32_t, 2s, s, f32,)\n-__ST2_LANE_FUNC (float64x1x2_t, float64_t, 1d, d, f64,)\n-__ST2_LANE_FUNC (poly8x8x2_t, poly8_t, 8b, b, p8,)\n-__ST2_LANE_FUNC (poly16x4x2_t, poly16_t, 4h, h, p16,)\n-__ST2_LANE_FUNC (int16x4x2_t, int16_t, 4h, h, s16,)\n-__ST2_LANE_FUNC (int32x2x2_t, int32_t, 2s, s, s32,)\n-__ST2_LANE_FUNC (int64x1x2_t, int64_t, 1d, d, s64,)\n-__ST2_LANE_FUNC (uint8x8x2_t, uint8_t, 8b, b, u8,)\n-__ST2_LANE_FUNC (uint16x4x2_t, uint16_t, 4h, h, u16,)\n-__ST2_LANE_FUNC (uint32x2x2_t, uint32_t, 2s, s, u32,)\n-__ST2_LANE_FUNC (uint64x1x2_t, uint64_t, 1d, d, u64,)\n-__ST2_LANE_FUNC (float32x4x2_t, float32_t, 4s, s, f32, q)\n-__ST2_LANE_FUNC (float64x2x2_t, float64_t, 2d, d, f64, q)\n-__ST2_LANE_FUNC (poly8x16x2_t, poly8_t, 16b, b, p8, q)\n-__ST2_LANE_FUNC (poly16x8x2_t, poly16_t, 8h, h, p16, q)\n-__ST2_LANE_FUNC (int8x16x2_t, int8_t, 16b, b, s8, q)\n-__ST2_LANE_FUNC (int16x8x2_t, int16_t, 8h, h, s16, q)\n-__ST2_LANE_FUNC (int32x4x2_t, int32_t, 4s, s, s32, q)\n-__ST2_LANE_FUNC (int64x2x2_t, int64_t, 2d, d, s64, q)\n-__ST2_LANE_FUNC (uint8x16x2_t, uint8_t, 16b, b, u8, q)\n-__ST2_LANE_FUNC (uint16x8x2_t, uint16_t, 8h, h, u16, q)\n-__ST2_LANE_FUNC (uint32x4x2_t, uint32_t, 4s, s, u32, q)\n-__ST2_LANE_FUNC (uint64x2x2_t, uint64_t, 2d, d, u64, q)\n-\n-#define __ST3_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n-\t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n-  typedef struct { ptrtype __x[3]; } __ST3_LANE_STRUCTURE_##intype;\t\\\n-  __extension__ static __inline void\t\t\t\t\t\\\n-  __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst3 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n-\t\t\t\t     intype b, const int c)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    __ST3_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n-\t\t\t\t(__ST3_LANE_STRUCTURE_##intype *)ptr;\t\\\n-    __asm__ (\"ld1 {v16.\" #regsuffix \" - v18.\" #regsuffix \"}, %1\\n\\t\"\t\\\n-\t     \"st3 {v16.\" #lnsuffix \" - v18.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n-\t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"v16\", \"v17\", \"v18\");\t\t\t\t\t\\\n-  }\n-\n-__ST3_LANE_FUNC (int8x8x3_t, int8_t, 8b, b, s8,)\n-__ST3_LANE_FUNC (float32x2x3_t, float32_t, 2s, s, f32,)\n-__ST3_LANE_FUNC (float64x1x3_t, float64_t, 1d, d, f64,)\n-__ST3_LANE_FUNC (poly8x8x3_t, poly8_t, 8b, b, p8,)\n-__ST3_LANE_FUNC (poly16x4x3_t, poly16_t, 4h, h, p16,)\n-__ST3_LANE_FUNC (int16x4x3_t, int16_t, 4h, h, s16,)\n-__ST3_LANE_FUNC (int32x2x3_t, int32_t, 2s, s, s32,)\n-__ST3_LANE_FUNC (int64x1x3_t, int64_t, 1d, d, s64,)\n-__ST3_LANE_FUNC (uint8x8x3_t, uint8_t, 8b, b, u8,)\n-__ST3_LANE_FUNC (uint16x4x3_t, uint16_t, 4h, h, u16,)\n-__ST3_LANE_FUNC (uint32x2x3_t, uint32_t, 2s, s, u32,)\n-__ST3_LANE_FUNC (uint64x1x3_t, uint64_t, 1d, d, u64,)\n-__ST3_LANE_FUNC (float32x4x3_t, float32_t, 4s, s, f32, q)\n-__ST3_LANE_FUNC (float64x2x3_t, float64_t, 2d, d, f64, q)\n-__ST3_LANE_FUNC (poly8x16x3_t, poly8_t, 16b, b, p8, q)\n-__ST3_LANE_FUNC (poly16x8x3_t, poly16_t, 8h, h, p16, q)\n-__ST3_LANE_FUNC (int8x16x3_t, int8_t, 16b, b, s8, q)\n-__ST3_LANE_FUNC (int16x8x3_t, int16_t, 8h, h, s16, q)\n-__ST3_LANE_FUNC (int32x4x3_t, int32_t, 4s, s, s32, q)\n-__ST3_LANE_FUNC (int64x2x3_t, int64_t, 2d, d, s64, q)\n-__ST3_LANE_FUNC (uint8x16x3_t, uint8_t, 16b, b, u8, q)\n-__ST3_LANE_FUNC (uint16x8x3_t, uint16_t, 8h, h, u16, q)\n-__ST3_LANE_FUNC (uint32x4x3_t, uint32_t, 4s, s, u32, q)\n-__ST3_LANE_FUNC (uint64x2x3_t, uint64_t, 2d, d, u64, q)\n-\n-#define __ST4_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n-\t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n-  typedef struct { ptrtype __x[4]; } __ST4_LANE_STRUCTURE_##intype;\t\\\n-  __extension__ static __inline void\t\t\t\t\t\\\n-  __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst4 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n-\t\t\t\t     intype b, const int c)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    __ST4_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n-\t\t\t\t(__ST4_LANE_STRUCTURE_##intype *)ptr;\t\\\n-    __asm__ (\"ld1 {v16.\" #regsuffix \" - v19.\" #regsuffix \"}, %1\\n\\t\"\t\\\n-\t     \"st4 {v16.\" #lnsuffix \" - v19.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n-\t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"v16\", \"v17\", \"v18\", \"v19\");\t\t\t\t\\\n-  }\n-\n-__ST4_LANE_FUNC (int8x8x4_t, int8_t, 8b, b, s8,)\n-__ST4_LANE_FUNC (float32x2x4_t, float32_t, 2s, s, f32,)\n-__ST4_LANE_FUNC (float64x1x4_t, float64_t, 1d, d, f64,)\n-__ST4_LANE_FUNC (poly8x8x4_t, poly8_t, 8b, b, p8,)\n-__ST4_LANE_FUNC (poly16x4x4_t, poly16_t, 4h, h, p16,)\n-__ST4_LANE_FUNC (int16x4x4_t, int16_t, 4h, h, s16,)\n-__ST4_LANE_FUNC (int32x2x4_t, int32_t, 2s, s, s32,)\n-__ST4_LANE_FUNC (int64x1x4_t, int64_t, 1d, d, s64,)\n-__ST4_LANE_FUNC (uint8x8x4_t, uint8_t, 8b, b, u8,)\n-__ST4_LANE_FUNC (uint16x4x4_t, uint16_t, 4h, h, u16,)\n-__ST4_LANE_FUNC (uint32x2x4_t, uint32_t, 2s, s, u32,)\n-__ST4_LANE_FUNC (uint64x1x4_t, uint64_t, 1d, d, u64,)\n-__ST4_LANE_FUNC (float32x4x4_t, float32_t, 4s, s, f32, q)\n-__ST4_LANE_FUNC (float64x2x4_t, float64_t, 2d, d, f64, q)\n-__ST4_LANE_FUNC (poly8x16x4_t, poly8_t, 16b, b, p8, q)\n-__ST4_LANE_FUNC (poly16x8x4_t, poly16_t, 8h, h, p16, q)\n-__ST4_LANE_FUNC (int8x16x4_t, int8_t, 16b, b, s8, q)\n-__ST4_LANE_FUNC (int16x8x4_t, int16_t, 8h, h, s16, q)\n-__ST4_LANE_FUNC (int32x4x4_t, int32_t, 4s, s, s32, q)\n-__ST4_LANE_FUNC (int64x2x4_t, int64_t, 2d, d, s64, q)\n-__ST4_LANE_FUNC (uint8x16x4_t, uint8_t, 16b, b, u8, q)\n-__ST4_LANE_FUNC (uint16x8x4_t, uint16_t, 8h, h, u16, q)\n-__ST4_LANE_FUNC (uint32x4x4_t, uint32_t, 4s, s, u32, q)\n-__ST4_LANE_FUNC (uint64x2x4_t, uint64_t, 2d, d, u64, q)\n+#define __ST2_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n+\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+__extension__ static __inline void\t\t\t\t\t     \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t     \\\n+vst2_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n+\t\t\t  intype __b, const int __c)\t\t\t     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  __builtin_aarch64_simd_oi __o;\t\t\t\t\t     \\\n+  largetype __temp;\t\t\t\t\t\t\t     \\\n+  __temp.val[0]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[0],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[1]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[1],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n+  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n+  __builtin_aarch64_st2_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n+\t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n+}\n+\n+__ST2_LANE_FUNC (float32x2x2_t, float32x4x2_t, float32_t, v4sf, sf, f32,\n+\t\t float32x4_t)\n+__ST2_LANE_FUNC (float64x1x2_t, float64x2x2_t, float64_t, v2df, df, f64,\n+\t\t float64x2_t)\n+__ST2_LANE_FUNC (poly8x8x2_t, poly8x16x2_t, poly8_t, v16qi, qi, p8, int8x16_t)\n+__ST2_LANE_FUNC (poly16x4x2_t, poly16x8x2_t, poly16_t, v8hi, hi, p16,\n+\t\t int16x8_t)\n+__ST2_LANE_FUNC (int8x8x2_t, int8x16x2_t, int8_t, v16qi, qi, s8, int8x16_t)\n+__ST2_LANE_FUNC (int16x4x2_t, int16x8x2_t, int16_t, v8hi, hi, s16, int16x8_t)\n+__ST2_LANE_FUNC (int32x2x2_t, int32x4x2_t, int32_t, v4si, si, s32, int32x4_t)\n+__ST2_LANE_FUNC (int64x1x2_t, int64x2x2_t, int64_t, v2di, di, s64, int64x2_t)\n+__ST2_LANE_FUNC (uint8x8x2_t, uint8x16x2_t, uint8_t, v16qi, qi, u8, int8x16_t)\n+__ST2_LANE_FUNC (uint16x4x2_t, uint16x8x2_t, uint16_t, v8hi, hi, u16,\n+\t\t int16x8_t)\n+__ST2_LANE_FUNC (uint32x2x2_t, uint32x4x2_t, uint32_t, v4si, si, u32,\n+\t\t int32x4_t)\n+__ST2_LANE_FUNC (uint64x1x2_t, uint64x2x2_t, uint64_t, v2di, di, u64,\n+\t\t int64x2_t)\n+\n+#undef __ST2_LANE_FUNC\n+#define __ST2_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+__extension__ static __inline void\t\t\t\t\t    \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t    \\\n+vst2q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n+\t\t\t   intype __b, const int __c)\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  union { intype __i;\t\t\t\t\t\t\t    \\\n+\t  __builtin_aarch64_simd_oi __o; } __temp = { __b };\t\t    \\\n+  __builtin_aarch64_st2_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *) \\\n+\t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n+}\n+\n+__ST2_LANE_FUNC (float32x4x2_t, float32_t, v4sf, sf, f32)\n+__ST2_LANE_FUNC (float64x2x2_t, float64_t, v2df, df, f64)\n+__ST2_LANE_FUNC (poly8x16x2_t, poly8_t, v16qi, qi, p8)\n+__ST2_LANE_FUNC (poly16x8x2_t, poly16_t, v8hi, hi, p16)\n+__ST2_LANE_FUNC (int8x16x2_t, int8_t, v16qi, qi, s8)\n+__ST2_LANE_FUNC (int16x8x2_t, int16_t, v8hi, hi, s16)\n+__ST2_LANE_FUNC (int32x4x2_t, int32_t, v4si, si, s32)\n+__ST2_LANE_FUNC (int64x2x2_t, int64_t, v2di, di, s64)\n+__ST2_LANE_FUNC (uint8x16x2_t, uint8_t, v16qi, qi, u8)\n+__ST2_LANE_FUNC (uint16x8x2_t, uint16_t, v8hi, hi, u16)\n+__ST2_LANE_FUNC (uint32x4x2_t, uint32_t, v4si, si, u32)\n+__ST2_LANE_FUNC (uint64x2x2_t, uint64_t, v2di, di, u64)\n+\n+#define __ST3_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n+\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+__extension__ static __inline void\t\t\t\t\t     \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t     \\\n+vst3_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n+\t\t\t  intype __b, const int __c)\t\t\t     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  __builtin_aarch64_simd_ci __o;\t\t\t\t\t     \\\n+  largetype __temp;\t\t\t\t\t\t\t     \\\n+  __temp.val[0]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[0],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[1]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[1],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[2]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[2],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n+  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n+  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[2], 2);  \\\n+  __builtin_aarch64_st3_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n+\t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n+}\n+\n+__ST3_LANE_FUNC (float32x2x3_t, float32x4x3_t, float32_t, v4sf, sf, f32,\n+\t\t float32x4_t)\n+__ST3_LANE_FUNC (float64x1x3_t, float64x2x3_t, float64_t, v2df, df, f64,\n+\t\t float64x2_t)\n+__ST3_LANE_FUNC (poly8x8x3_t, poly8x16x3_t, poly8_t, v16qi, qi, p8, int8x16_t)\n+__ST3_LANE_FUNC (poly16x4x3_t, poly16x8x3_t, poly16_t, v8hi, hi, p16,\n+\t\t int16x8_t)\n+__ST3_LANE_FUNC (int8x8x3_t, int8x16x3_t, int8_t, v16qi, qi, s8, int8x16_t)\n+__ST3_LANE_FUNC (int16x4x3_t, int16x8x3_t, int16_t, v8hi, hi, s16, int16x8_t)\n+__ST3_LANE_FUNC (int32x2x3_t, int32x4x3_t, int32_t, v4si, si, s32, int32x4_t)\n+__ST3_LANE_FUNC (int64x1x3_t, int64x2x3_t, int64_t, v2di, di, s64, int64x2_t)\n+__ST3_LANE_FUNC (uint8x8x3_t, uint8x16x3_t, uint8_t, v16qi, qi, u8, int8x16_t)\n+__ST3_LANE_FUNC (uint16x4x3_t, uint16x8x3_t, uint16_t, v8hi, hi, u16,\n+\t\t int16x8_t)\n+__ST3_LANE_FUNC (uint32x2x3_t, uint32x4x3_t, uint32_t, v4si, si, u32,\n+\t\t int32x4_t)\n+__ST3_LANE_FUNC (uint64x1x3_t, uint64x2x3_t, uint64_t, v2di, di, u64,\n+\t\t int64x2_t)\n+\n+#undef __ST3_LANE_FUNC\n+#define __ST3_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+__extension__ static __inline void\t\t\t\t\t    \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t    \\\n+vst3q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n+\t\t\t   intype __b, const int __c)\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  union { intype __i;\t\t\t\t\t\t\t    \\\n+\t  __builtin_aarch64_simd_ci __o; } __temp = { __b };\t\t    \\\n+  __builtin_aarch64_st3_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *) \\\n+\t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n+}\n+\n+__ST3_LANE_FUNC (float32x4x3_t, float32_t, v4sf, sf, f32)\n+__ST3_LANE_FUNC (float64x2x3_t, float64_t, v2df, df, f64)\n+__ST3_LANE_FUNC (poly8x16x3_t, poly8_t, v16qi, qi, p8)\n+__ST3_LANE_FUNC (poly16x8x3_t, poly16_t, v8hi, hi, p16)\n+__ST3_LANE_FUNC (int8x16x3_t, int8_t, v16qi, qi, s8)\n+__ST3_LANE_FUNC (int16x8x3_t, int16_t, v8hi, hi, s16)\n+__ST3_LANE_FUNC (int32x4x3_t, int32_t, v4si, si, s32)\n+__ST3_LANE_FUNC (int64x2x3_t, int64_t, v2di, di, s64)\n+__ST3_LANE_FUNC (uint8x16x3_t, uint8_t, v16qi, qi, u8)\n+__ST3_LANE_FUNC (uint16x8x3_t, uint16_t, v8hi, hi, u16)\n+__ST3_LANE_FUNC (uint32x4x3_t, uint32_t, v4si, si, u32)\n+__ST3_LANE_FUNC (uint64x2x3_t, uint64_t, v2di, di, u64)\n+\n+#define __ST4_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n+\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+__extension__ static __inline void\t\t\t\t\t     \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t     \\\n+vst4_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n+\t\t\t  intype __b, const int __c)\t\t\t     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  __builtin_aarch64_simd_xi __o;\t\t\t\t\t     \\\n+  largetype __temp;\t\t\t\t\t\t\t     \\\n+  __temp.val[0]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[0],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[1]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[1],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[2]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[2],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __temp.val[3]\t\t\t\t\t\t\t\t     \\\n+    = vcombine_##funcsuffix (__b.val[3],\t\t\t\t     \\\n+\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n+  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n+  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n+  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[2], 2);  \\\n+  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n+\t\t\t\t\t    (signedtype) __temp.val[3], 3);  \\\n+  __builtin_aarch64_st4_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n+\t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n+}\n+\n+__ST4_LANE_FUNC (float32x2x4_t, float32x4x4_t, float32_t, v4sf, sf, f32,\n+\t\t float32x4_t)\n+__ST4_LANE_FUNC (float64x1x4_t, float64x2x4_t, float64_t, v2df, df, f64,\n+\t\t float64x2_t)\n+__ST4_LANE_FUNC (poly8x8x4_t, poly8x16x4_t, poly8_t, v16qi, qi, p8, int8x16_t)\n+__ST4_LANE_FUNC (poly16x4x4_t, poly16x8x4_t, poly16_t, v8hi, hi, p16,\n+\t\t int16x8_t)\n+__ST4_LANE_FUNC (int8x8x4_t, int8x16x4_t, int8_t, v16qi, qi, s8, int8x16_t)\n+__ST4_LANE_FUNC (int16x4x4_t, int16x8x4_t, int16_t, v8hi, hi, s16, int16x8_t)\n+__ST4_LANE_FUNC (int32x2x4_t, int32x4x4_t, int32_t, v4si, si, s32, int32x4_t)\n+__ST4_LANE_FUNC (int64x1x4_t, int64x2x4_t, int64_t, v2di, di, s64, int64x2_t)\n+__ST4_LANE_FUNC (uint8x8x4_t, uint8x16x4_t, uint8_t, v16qi, qi, u8, int8x16_t)\n+__ST4_LANE_FUNC (uint16x4x4_t, uint16x8x4_t, uint16_t, v8hi, hi, u16,\n+\t\t int16x8_t)\n+__ST4_LANE_FUNC (uint32x2x4_t, uint32x4x4_t, uint32_t, v4si, si, u32,\n+\t\t int32x4_t)\n+__ST4_LANE_FUNC (uint64x1x4_t, uint64x2x4_t, uint64_t, v2di, di, u64,\n+\t\t int64x2_t)\n+\n+#undef __ST4_LANE_FUNC\n+#define __ST4_LANE_FUNC(intype, ptrtype, mode, ptr_mode, funcsuffix)\t    \\\n+__extension__ static __inline void\t\t\t\t\t    \\\n+__attribute__ ((__always_inline__))\t\t\t\t\t    \\\n+vst4q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n+\t\t\t   intype __b, const int __c)\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  union { intype __i;\t\t\t\t\t\t\t    \\\n+\t  __builtin_aarch64_simd_xi __o; } __temp = { __b };\t\t    \\\n+  __builtin_aarch64_st4_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *) \\\n+\t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n+}\n+\n+__ST4_LANE_FUNC (float32x4x4_t, float32_t, v4sf, sf, f32)\n+__ST4_LANE_FUNC (float64x2x4_t, float64_t, v2df, df, f64)\n+__ST4_LANE_FUNC (poly8x16x4_t, poly8_t, v16qi, qi, p8)\n+__ST4_LANE_FUNC (poly16x8x4_t, poly16_t, v8hi, hi, p16)\n+__ST4_LANE_FUNC (int8x16x4_t, int8_t, v16qi, qi, s8)\n+__ST4_LANE_FUNC (int16x8x4_t, int16_t, v8hi, hi, s16)\n+__ST4_LANE_FUNC (int32x4x4_t, int32_t, v4si, si, s32)\n+__ST4_LANE_FUNC (int64x2x4_t, int64_t, v2di, di, s64)\n+__ST4_LANE_FUNC (uint8x16x4_t, uint8_t, v16qi, qi, u8)\n+__ST4_LANE_FUNC (uint16x8x4_t, uint16_t, v8hi, hi, u16)\n+__ST4_LANE_FUNC (uint32x4x4_t, uint32_t, v4si, si, u32)\n+__ST4_LANE_FUNC (uint64x2x4_t, uint64_t, v2di, di, u64)\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n vaddlv_s32 (int32x2_t a)"}, {"sha": "c537c3780eea95fa315c82bb36ac7f91f0f920fd", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=ba081b77be306d2f2fe3a3ecc6d0c3b2f7dc7429", "patch": "@@ -564,6 +564,32 @@\n \n (define_mode_attr VSTRUCT_DREG [(OI \"TI\") (CI \"EI\") (XI \"OI\")])\n \n+;; Mode of pair of elements for each vector mode, to define transfer\n+;; size for structure lane/dup loads and stores.\n+(define_mode_attr V_TWO_ELEM [(V8QI \"HI\")   (V16QI \"HI\")\n+                              (V4HI \"SI\")   (V8HI \"SI\")\n+                              (V2SI \"V2SI\") (V4SI \"V2SI\")\n+                              (DI \"V2DI\")   (V2DI \"V2DI\")\n+                              (V2SF \"V2SF\") (V4SF \"V2SF\")\n+                              (DF \"V2DI\")   (V2DF \"V2DI\")])\n+\n+;; Similar, for three elements.\n+(define_mode_attr V_THREE_ELEM [(V8QI \"BLK\") (V16QI \"BLK\")\n+                                (V4HI \"BLK\") (V8HI \"BLK\")\n+                                (V2SI \"BLK\") (V4SI \"BLK\")\n+                                (DI \"EI\")    (V2DI \"EI\")\n+                                (V2SF \"BLK\") (V4SF \"BLK\")\n+                                (DF \"EI\")    (V2DF \"EI\")])\n+\n+;; Similar, for four elements.\n+(define_mode_attr V_FOUR_ELEM [(V8QI \"SI\")   (V16QI \"SI\")\n+                               (V4HI \"V4HI\") (V8HI \"V4HI\")\n+                               (V2SI \"V4SI\") (V4SI \"V4SI\")\n+                               (DI \"OI\")     (V2DI \"OI\")\n+                               (V2SF \"V4SF\") (V4SF \"V4SF\")\n+                               (DF \"OI\")     (V2DF \"OI\")])\n+\n+\n ;; Mode for atomic operation suffixes\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])"}]}