{"sha": "3cfe49dab857d0d0a61597afe558a175287c27ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmZTQ5ZGFiODU3ZDBkMGE2MTU5N2FmZTU1OGExNzUyODdjMjdlYw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2002-11-07T06:00:07Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-11-07T06:00:07Z"}, "message": "Index: ChangeLog\n2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n\n\t* config.gcc: Don't create crtbegin, crtend on Darwin; do create\n\tcrt2.o.  Rearrange t-darwin makefiles.\n\t* crtstuff.c [OBJECT_FORMAT_MACHO]: Delete.\n\t* unwind-dw2-fde-darwin.c: New.\n\t* unwind-dw2-fde-glibc.c: Correct comment.\n\t* unwind-dw2-fde.c (__register_frame_info_bases)\n\t[DWARF2_OBJECT_END_PTR_EXTENSION]: Clear fde_end.\n\t(classify_object_over_fdes): Use last_fde.\n\t(add_fdes): Likewise.\n\t(linear_search_fdes): Likewise.\n\t* unwind-dw2-fde.h (struct object)\n\t[DWARF2_OBJECT_END_PTR_EXTENSION]: Add fde_end field.\n\t(last_fde): New.\n\t* config/darwin.h (STARTFILE_SPEC): Include crt2.o not crtbegin.o.\n\t(ENDFILE_SPEC): No crtend.o.\n\t* config/t-darwin: New.\n\t* config/i386/t-darwin: Delete.\n\t* config/darwin-crt2.c: New.\n\t* config/rs6000/t-darwin: Delete contents duplicated in t-rs6000\n\tor config/t-darwin.\n\nIndex: testsuite/ChangeLog\n2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.old-deja/g++.eh/badalloc1.C: XFAIL excess errors test on\n\tDarwin.\n\nFrom-SVN: r58877", "tree": {"sha": "0a818627c9d2e5109f50615e83ad08d7572b1feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a818627c9d2e5109f50615e83ad08d7572b1feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cfe49dab857d0d0a61597afe558a175287c27ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfe49dab857d0d0a61597afe558a175287c27ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfe49dab857d0d0a61597afe558a175287c27ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfe49dab857d0d0a61597afe558a175287c27ec/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12f256d42ec080c4bc69e08636ce3b40b792eae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f256d42ec080c4bc69e08636ce3b40b792eae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f256d42ec080c4bc69e08636ce3b40b792eae7"}], "stats": {"total": 589, "additions": 457, "deletions": 132}, "files": [{"sha": "f1ee875091f2fb62028b1423779695b2839320f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -1,3 +1,26 @@\n+2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config.gcc: Don't create crtbegin, crtend on Darwin; do create\n+\tcrt2.o.  Rearrange t-darwin makefiles.\n+\t* crtstuff.c [OBJECT_FORMAT_MACHO]: Delete.\n+\t* unwind-dw2-fde-darwin.c: New.\n+\t* unwind-dw2-fde-glibc.c: Correct comment.\n+\t* unwind-dw2-fde.c (__register_frame_info_bases)\n+\t[DWARF2_OBJECT_END_PTR_EXTENSION]: Clear fde_end.\n+\t(classify_object_over_fdes): Use last_fde.\n+\t(add_fdes): Likewise.\n+\t(linear_search_fdes): Likewise.\n+\t* unwind-dw2-fde.h (struct object)\n+\t[DWARF2_OBJECT_END_PTR_EXTENSION]: Add fde_end field.\n+\t(last_fde): New.\n+\t* config/darwin.h (STARTFILE_SPEC): Include crt2.o not crtbegin.o.\n+\t(ENDFILE_SPEC): No crtend.o.\n+\t* config/t-darwin: New.\n+\t* config/i386/t-darwin: Delete.\n+\t* config/darwin-crt2.c: New.\n+\t* config/rs6000/t-darwin: Delete contents duplicated in t-rs6000\n+\tor config/t-darwin.\n+\n 2002-11-06  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/8480"}, {"sha": "edfe51bfe46d3df559184c325804b550cfc19a08", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -985,12 +985,12 @@ i370-*-linux*)\n i[34567]86-*-darwin*)\n \ttm_file=\"${tm_file} darwin.h i386/darwin.h\"\n \ttm_p_file=\"${tm_p_file} darwin-protos.h\"\n-\ttmake_file=i386/t-darwin\n+\ttmake_file=\"t-darwin\"\n \textra_objs=\"darwin.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n \tc_target_objs=\"darwin-c.o\"\n \tcxx_target_objs=\"darwin-c.o\"\n-\textra_parts=\"crtbegin.o crtend.o\"\n+\textra_parts=\"crt2.o\"\n \t# Darwin linker does collect2 functionality\n \tuse_collect2=no\n \t;;\n@@ -1956,12 +1956,12 @@ powerpc-*-beos*)\n powerpc-*-darwin*)\n \ttm_file=\"${tm_file} darwin.h rs6000/darwin.h\"\n \ttm_p_file=\"${tm_p_file} darwin-protos.h\"\n-\ttmake_file=rs6000/t-darwin\n+\ttmake_file=\"rs6000/t-rs6000 t-darwin rs6000/t-darwin\"\n \textra_objs=\"darwin.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n \tc_target_objs=\"darwin-c.o\"\n \tcxx_target_objs=\"darwin-c.o\"\n-\textra_parts=\"crtbegin.o crtend.o\"\n+\textra_parts=\"crt2.o\"\n \t# Darwin linker does collect2 functionality\n \tuse_collect2=no\n \textra_headers=altivec.h"}, {"sha": "1ea2413c809763facd1b5f8a286eeaa5e268a66b", "filename": "gcc/config/darwin-crt2.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Fdarwin-crt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Fdarwin-crt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-crt2.c?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -0,0 +1,151 @@\n+/* KeyMgr backwards-compatibility support for Darwin.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* It is incorrect to include config.h here, because this file is being\n+   compiled for the target, and hence definitions concerning only the host\n+   do not apply.  */\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+\n+/* Homemade decls substituting for getsect.h and dyld.h, so cross\n+   compilation works.  */\n+struct mach_header;\n+extern char *getsectdatafromheader (struct mach_header *, const char *,\n+\t\t\t\t    const char *, unsigned long *);\n+extern void _dyld_register_func_for_add_image\n+  (void (*) (struct mach_header *, unsigned long));\n+extern void _dyld_register_func_for_remove_image\n+  (void (*) (struct mach_header *, unsigned long));\n+\n+extern void __darwin_gcc3_preregister_frame_info (void);\n+\n+/* These are from \"keymgr.h\".  */\n+extern void _init_keymgr (void);\n+extern void *_keymgr_get_and_lock_processwide_ptr (unsigned key);\n+extern void _keymgr_set_and_unlock_processwide_ptr (unsigned key, void *ptr);\n+\n+extern void *__keymgr_global[];\n+typedef struct _Sinfo_Node {\n+        unsigned int size ;             /*size of this node*/\n+        unsigned short major_version ;  /*API major version.*/\n+        unsigned short minor_version ;  /*API minor version.*/\n+        } _Tinfo_Node ;\n+\n+/* KeyMgr 3.x is the first one supporting GCC3 stuff natively.  */\n+#define KEYMGR_API_MAJOR_GCC3           3       \n+/* ... with these keys.  */\n+#define KEYMGR_GCC3_LIVE_IMAGE_LIST\t301     /* loaded images  */\n+#define KEYMGR_GCC3_DW2_OBJ_LIST\t302     /* Dwarf2 object list  */   \n+\n+/* Node of KEYMGR_GCC3_LIVE_IMAGE_LIST.  Info about each resident image.  */\n+struct live_images {\n+  unsigned long this_size;                      /* sizeof (live_images)  */\n+  struct mach_header *mh;                       /* the image info  */\n+  unsigned long vm_slide;\n+  void (*destructor)(struct live_images *);     /* destructor for this  */\n+  struct live_images *next;\n+  unsigned int examined_p;\n+  void *fde;\n+  void *object_info;\n+  unsigned long info[2];                        /* Future use.  */\n+};\n+\n+\f\n+/* These routines are used only on Darwin versions before 10.2.\n+   Later versions have equivalent code in the system.  \n+   Eventually, they might go away, although it might be a long time...  */\n+\n+static void darwin_unwind_dyld_remove_image_hook \n+  (struct mach_header *m, unsigned long s);\n+static void darwin_unwind_dyld_remove_image_hook \n+  (struct mach_header *m, unsigned long s);\n+extern void __darwin_gcc3_preregister_frame_info (void);\n+     \n+static void\n+darwin_unwind_dyld_add_image_hook (struct mach_header *mh, unsigned long slide)\n+{\n+  struct live_images *l = (struct live_images *)calloc (1, sizeof (*l));\n+  l->mh = mh;\n+  l->vm_slide = slide;\n+  l->this_size = sizeof (*l);\n+  l->next = (struct live_images *)\n+\t_keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST);\n+  _keymgr_set_and_unlock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST, l);\n+}\n+\n+static void\n+darwin_unwind_dyld_remove_image_hook (struct mach_header *m, unsigned long s)\n+{\n+  struct live_images *top, **lip, *destroy = NULL;\n+\n+  /* Look for it in the list of live images and delete it.  */\n+\n+  top = (struct live_images *)\n+\t   _keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST);\n+  for (lip = &top; *lip != NULL; lip = &(*lip)->next)\n+    {\n+      if ((*lip)->mh == m && (*lip)->vm_slide == s)\n+        {\n+          destroy = *lip;\n+          *lip = destroy->next;\t\t\t/* unlink DESTROY  */\n+\n+          if (destroy->this_size != sizeof (*destroy))\t/* sanity check  */\n+            abort ();\n+\n+          break;\n+        }\n+    }\n+  _keymgr_set_and_unlock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST, top);\n+\n+  /* Now that we have unlinked this from the image list, toss it.  */\n+  if (destroy != NULL)\n+    {\n+      if (destroy->destructor != NULL)\n+\t(*destroy->destructor) (destroy);\n+      free (destroy);\n+    }\n+}\n+\n+void\n+__darwin_gcc3_preregister_frame_info (void)\n+{\n+  const _Tinfo_Node *info;\n+  _init_keymgr ();\n+  info = (_Tinfo_Node *)__keymgr_global[2];\n+  if (info != NULL)\n+    {\n+      if (info->major_version >= KEYMGR_API_MAJOR_GCC3)\n+\treturn;\n+      /* Otherwise, use our own add_image_hooks.  */\n+    }\n+\n+  _dyld_register_func_for_add_image (darwin_unwind_dyld_add_image_hook);\n+  _dyld_register_func_for_remove_image (darwin_unwind_dyld_remove_image_hook);\n+}"}, {"sha": "27ce49f5d5921d104d24237e2c786eae8df5469a", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -98,12 +98,13 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC  \\\n-  \"%{pg:%{static:-lgcrt0.o}%{!static:-lgcrt1.o -lcrtbegin.o}} \\\n-    %{!pg:%{static:-lcrt0.o}%{!static:-lcrt1.o -lcrtbegin.o}}\"\n+  \"%{pg:%{static:-lgcrt0.o}%{!static:-lgcrt1.o} -lcrt2.o} \\\n+    %{!pg:%{static:-lcrt0.o}%{!static:-lcrt1.o} -lcrt2.o}\"\n \n-#undef\tENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"-lcrtend.o\"\n+/* The native Darwin linker doesn't necessarily place files in the order\n+   that they're specified on the link line.  Thus, it is pointless\n+   to put anything in ENDFILE_SPEC.  */\n+/* #define ENDFILE_SPEC \"\" */\n \n #undef\tDOLLARS_IN_IDENTIFIERS\n #define DOLLARS_IN_IDENTIFIERS 2"}, {"sha": "7aca023302f96879ffbf35ecf231e4d8773cc1bd", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -1,34 +1,2 @@\n-# Library code must include trampoline support\n+# Library code must include trampoline support.\n LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm\n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) $(RTL_BASE_H) \\\n-          $(REGS_H) hard-reg-set.h insn-config.h conditions.h output.h \\\n-          insn-attr.h flags.h $(TREE_H) $(EXPR_H) reload.h \\\n-          function.h $(GGC_H) $(TM_P_H) gt-darwin.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n-darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) \\\n-\t    $(TREE_H) $(C_TREE_H) c-pragma.h toplev.h cpplib.h $(TM_P_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n-gt-darwin.h : s-gtype ; @true\n-\n-# Build the libraries for both hard and soft floating point\n-\n-MULTILIB_OPTIONS = msoft-float\n-MULTILIB_DIRNAMES = soft-float\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib"}, {"sha": "aca59ba4f304d063e26be2f8e30f1503b67e2613", "filename": "gcc/config/t-darwin", "status": "renamed", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -9,3 +9,14 @@ darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n gt-darwin.h : s-gtype ; @true\n+\n+# Explain how to build crt2.o\n+$(T)crt2$(objext): $(srcdir)/config/darwin-crt2.c $(GCC_PASSES) \\\n+\t$(TCONFIG_H) tsystem.h\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) \\\n+\t  -c $(srcdir)/config/darwin-crt2.c -o $(T)crt2$(objext)\n+\n+# Use unwind-dw2-fde-darwin\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-darwin.c \\\n+  $(srcdir)/unwind-sjlj.c\n+LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h unwind-dw2-fde.c", "previous_filename": "gcc/config/i386/t-darwin"}, {"sha": "e5f5d78aeea83bea230429d55611cdd6335ae859", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -126,8 +126,6 @@ extern void *__deregister_frame_info_bases (void *)\n /* Likewise for _Jv_RegisterClasses.  */\n extern void _Jv_RegisterClasses (void *) TARGET_ATTRIBUTE_WEAK;\n \n-#ifndef OBJECT_FORMAT_MACHO\n-\n #ifdef OBJECT_FORMAT_ELF\n \n /*  Declare a pointer to void function type.  */\n@@ -542,83 +540,3 @@ __do_global_ctors (void)\n #else /* ! CRT_BEGIN && ! CRT_END */\n #error \"One of CRT_BEGIN or CRT_END must be defined.\"\n #endif\n-\n-#else  /* OBJECT_FORMAT_MACHO */\n-\n-/* Crt stuff for Mach-O (NeXT and Darwin).\n-\n-   The theory of this is that each dynamically-loadable module,\n-   including the main program itself, must have been positioned by\n-   dyld before any frame info can be registered.  So we set up the\n-   registration functions as dyld hooks, using a \"preregistration\"\n-   function that is called directly from the system crt1.o.  */\n-\n-#ifdef CRT_BEGIN\n-\n-/* Homemade decls substituting for getsect.h and dyld.h, so cross\n-   compilation works.  */\n-struct mach_header;\n-extern char *getsectdatafromheader (struct mach_header *, const char *,\n-\t\t\t\t    const char *, unsigned long *);\n-extern void _dyld_register_func_for_add_image\n-  (void (*) (struct mach_header *, unsigned long));\n-extern void _dyld_register_func_for_remove_image\n-  (void (*) (struct mach_header *, unsigned long));\n-\n-extern void __darwin_gcc3_preregister_frame_info (void);\n-\n-static void\n-unwind_dyld_add_image_hook (struct mach_header *mh,\n-\t\t\t    unsigned long vm_slide)\n-{\n-  unsigned long sz;\n-  char *fde;\n-\n-  fde = getsectdatafromheader (mh, \"__TEXT\", \"__eh_frame\", &sz);\n-  if (fde)\n-    {\n-      struct object *ob = (struct object *) malloc (sizeof (struct object));\n-\n-      __register_frame_info (fde + vm_slide, ob);\n-    }\n-}\n-\n-static void\n-unwind_dyld_remove_image_hook (struct mach_header *mh,\n-\t\t\t       unsigned long vm_slide)\n-{\n-  unsigned long sz;\n-  char *fde;\n-\n-  fde = getsectdatafromheader (mh, \"__TEXT\", \"__eh_frame\", &sz);\n-\n-  if (fde)\n-    __deregister_frame_info (fde + vm_slide);\n-}\n-\n-/* Call this routine from the system crt1.o.  The call is standard in\n-   Darwin 6.x (Mac OS X 10.2) and later; for earlier systems, you\n-   would need to modify crt.c in the Csu project.  (This isn't great,\n-   but other alternatives run afoul of linker semantics.  This\n-   function is declared as common and tested before being called, so\n-   that programs compiled by older GCCs still link and run.)  */\n-\n-void\n-__darwin_gcc3_preregister_frame_info ()\n-{\n-  _dyld_register_func_for_add_image (unwind_dyld_add_image_hook);\n-  _dyld_register_func_for_remove_image (unwind_dyld_remove_image_hook);\n-}\n-\n-#elif defined(CRT_END) /* ! CRT_BEGIN */\n-\n-/* Install a single zero word at the end of the __eh_frame section.  */\n-\n-asm (\".section __TEXT,__eh_frame\");\n-asm (\".long 0\");\n-\n-#else /* ! CRT_BEGIN && ! CRT_END */\n-#error \"One of CRT_BEGIN or CRT_END must be defined.\"\n-#endif\n-\n-#endif  /* OBJECT_FORMAT_MACHO  */"}, {"sha": "38c0f8b813d806de72cff82e2580ee90fc40348c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -1,3 +1,8 @@\n+2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.old-deja/g++.eh/badalloc1.C: XFAIL excess errors test on\n+\tDarwin.\n+\n 2002-11-04  Adam Nemet  <anemet@lnxw.com>\n \n \t* gcc.c-torture/execute/941014-1.x: thumb-elf was deprecated, use"}, {"sha": "d5722bde52f3526225d13392a1cc9063cd49cb91", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -1,5 +1,5 @@\n-// excess errors test - XFAIL xstormy16-*-*\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// excess errors test - XFAIL xstormy16-*-* *-*-darwin*\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 June 2000 <nathan@codesourcery.com>\n \n // Check we can throw a bad_alloc exception when malloc dies."}, {"sha": "77e44e852ad0b3cebb03903bf6c9ae69f4760d90", "filename": "gcc/unwind-dw2-fde-darwin.c", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-darwin.c?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -0,0 +1,231 @@\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* Locate the FDE entry for a given address, using Darwin's keymgr support.  */\n+\n+#include \"tconfig.h\"\n+#include <string.h>\n+#include <stdlib.h>\n+#include \"dwarf2.h\"\n+#include \"unwind.h\"\n+#define NO_BASE_OF_ENCODED_VALUE\n+#define DWARF2_OBJECT_END_PTR_EXTENSION\n+#include \"unwind-pe.h\"\n+#include \"unwind-dw2-fde.h\"\n+/* Carefully don't include gthr.h.  */\n+\n+typedef int __gthread_mutex_t;\n+#define __gthread_mutex_lock(x)  (void)(x)\n+#define __gthread_mutex_unlock(x) (void)(x)\n+\n+static fde * _Unwind_Find_registered_FDE (void *pc, \n+\t\t\t\t\t  struct dwarf_eh_bases *bases);\n+\n+#define _Unwind_Find_FDE _Unwind_Find_registered_FDE\n+#include \"unwind-dw2-fde.c\"\n+#undef _Unwind_Find_FDE\n+\n+/* KeyMgr stuff.  */\n+#define KEYMGR_GCC3_LIVE_IMAGE_LIST     301     /* loaded images  */\n+#define KEYMGR_GCC3_DW2_OBJ_LIST        302     /* Dwarf2 object list  */\n+\n+extern void *_keymgr_get_and_lock_processwide_ptr (int);\n+extern void _keymgr_set_and_unlock_processwide_ptr (int, void *);\n+extern void _keymgr_unlock_processwide_ptr (int);\n+\n+struct mach_header;\n+extern char *getsectdatafromheader (struct mach_header*, const char*,\n+\t\t\tconst char *, unsigned long *);\n+\n+/* This is referenced from KEYMGR_GCC3_DW2_OBJ_LIST.  */\n+struct km_object_info {\n+  struct object *seen_objects;\n+  struct object *unseen_objects;\n+  unsigned spare[2];\n+};\n+\n+/* Node of KEYMGR_GCC3_LIVE_IMAGE_LIST.  Info about each resident image.  */\n+struct live_images {\n+  unsigned long this_size;                      /* sizeof (live_images)  */\n+  struct mach_header *mh;                       /* the image info  */\n+  unsigned long vm_slide;\n+  void (*destructor)(struct live_images *);     /* destructor for this  */\n+  struct live_images *next;\n+  unsigned int examined_p;\n+  void *fde;\n+  void *object_info;\n+  unsigned long info[2];                        /* Future use.  */\n+};\n+\n+/* Bits in the examined_p field of struct live_images.  */\n+enum {\n+  EXAMINED_IMAGE_MASK = 1,\t/* We've seen this one.  */\n+  ALLOCED_IMAGE_MASK = 2,\t/* The FDE entries were allocated by\n+\t\t\t\t   malloc, and must be freed.  This isn't\n+\t\t\t\t   used by newer libgcc versions.  */\n+  IMAGE_IS_TEXT_MASK = 4\t/* This image is in the TEXT segment.  */\n+};\n+\f\n+/* Delete any data we allocated on a live_images structure.\n+   IMAGE has already been removed from the KEYMGR_GCC3_LIVE_IMAGE_LIST.\n+   Called by KeyMgr (which will delete the struct after we return.)  */\n+\n+static void \n+live_image_destructor (struct live_images *image)\n+{\n+  if (image->object_info)\n+    {\n+      /* Free any sorted arrays.  */\n+      __deregister_frame_info_bases (image->fde);\n+\n+      free (image->object_info);\n+      image->object_info = NULL;\n+      if (image->examined_p & ALLOCED_IMAGE_MASK)\n+\tfree (image->fde);\n+    }\n+}\n+\n+/* Run through the list of live images.  If we can allocate memory,\n+   give each unseen image a new `struct object'.  Even if we can't,\n+   check whether the PC is inside the FDE of each unseen image.\n+ */\n+ \n+static inline fde *\n+examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n+{\n+  fde *result = NULL;\n+  struct live_images *image;\n+\n+  image = _keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST);\n+\n+  for (; image != NULL; image = image->next)\n+    if ((image->examined_p & EXAMINED_IMAGE_MASK) == 0)\n+      {\n+\tchar *fde;\n+\tunsigned long sz;\n+\t\n+\tfde = getsectdatafromheader (image->mh, \"__DATA\", \"__eh_frame\", &sz);\n+\tif (fde == NULL)\n+\t  {\n+\t    fde = getsectdatafromheader (image->mh, \"__TEXT\",\n+\t\t\t\t\t \"__eh_frame\", &sz);\n+\t    if (fde != NULL)\n+\t      image->examined_p |= IMAGE_IS_TEXT_MASK;\n+\t  }\n+\t\n+\t/* If .eh_frame is empty, don't register at all.  */\n+\tif (fde != NULL && sz > 0)\n+\t  {\n+\t    char *real_fde = (fde + image->vm_slide);\n+\t    struct object *ob = NULL;\n+\t    struct object panicob;\n+\t    \n+\t    if (! dont_alloc)\n+\t      ob = calloc (1, sizeof (struct object));\n+\t    dont_alloc |= ob == NULL;\n+\t    if (dont_alloc)\n+\t      ob = &panicob;\n+\t    \n+\t    ob->pc_begin = (void *)-1;\n+\t    ob->tbase = 0;\n+\t    ob->dbase = 0;\n+\t    ob->u.single = (struct dwarf_fde *)real_fde;\n+\t    ob->s.i = 0;\n+\t    ob->s.b.encoding = DW_EH_PE_omit;\n+\t    ob->fde_end = real_fde + sz;\n+\t    \n+\t    if (! dont_alloc)\n+\t      {\n+\t\tob->next = unseen_objects;\n+\t\tunseen_objects = ob;\n+\t\t\n+\t\timage->destructor = live_image_destructor;\n+\t\timage->object_info = ob;\n+\t\t\n+\t\timage->examined_p |= EXAMINED_IMAGE_MASK;\n+\t      }\n+\t    image->fde = real_fde;\n+\t    \n+\t    result = search_object (ob, pc);\n+\t    if (result)\n+\t      {\n+\t\tint encoding;\n+\t\t\n+\t\tbases->tbase = ob->tbase;\n+\t\tbases->dbase = ob->dbase;\n+\t\t\n+\t\tencoding = ob->s.b.encoding;\n+\t\tif (ob->s.b.mixed_encoding)\n+\t\t  encoding = get_fde_encoding (result);\n+\t\tread_encoded_value_with_base (encoding, \n+\t\t\t\t\t      base_from_object (encoding, ob),\n+\t\t\t\t\t      result->pc_begin, \n+\t\t\t\t\t      (_Unwind_Ptr *)&bases->func);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\telse\n+\t  image->examined_p |= EXAMINED_IMAGE_MASK;\n+      }\n+\n+  _keymgr_unlock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST);\n+\n+  return result;\n+}\n+\n+fde *\n+_Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n+{\n+  struct km_object_info *the_obj_info;\n+  fde *ret = NULL;\n+\n+  the_obj_info = \n+    _keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_DW2_OBJ_LIST);\n+  if (! the_obj_info)\n+    the_obj_info = calloc (1, sizeof (*the_obj_info));\n+  \n+  if (the_obj_info != NULL)\n+    {\n+      seen_objects = the_obj_info->seen_objects;\n+      unseen_objects = the_obj_info->unseen_objects;\n+  \n+      ret = _Unwind_Find_registered_FDE (pc, bases);\n+    }\n+  \n+  /* OK, didn't find it in the list of FDEs we've seen before,\n+     so go through and look at the new ones.  */\n+  if (ret == NULL)\n+    ret = examine_objects (pc, bases, the_obj_info == NULL);\n+\n+  if (the_obj_info != NULL)\n+    {\n+      the_obj_info->seen_objects = seen_objects;\n+      the_obj_info->unseen_objects = unseen_objects;\n+      _keymgr_set_and_unlock_processwide_ptr (KEYMGR_GCC3_DW2_OBJ_LIST,\n+\t\t\t\t\t      the_obj_info);\n+    }\n+  return ret;\n+}"}, {"sha": "21b3321ceb6200b2ae7ef8fbe4865dceaf980758", "filename": "gcc/unwind-dw2-fde-glibc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-glibc.c?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -79,8 +79,8 @@ struct unw_eh_frame_hdr\n   unsigned char table_enc;\n };\n \n-/* Like base_of_encoded_value, but take the base from a struct object\n-   instead of an _Unwind_Context.  */\n+/* Like base_of_encoded_value, but take the base from a struct\n+   unw_eh_callback_data instead of an _Unwind_Context.  */\n \n static _Unwind_Ptr\n base_from_cb_data (unsigned char encoding, struct unw_eh_callback_data *data)"}, {"sha": "f4cb4bb45e9e4221bfc063de57a58c20b8964025", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n-/* Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GCC.\n@@ -85,6 +85,9 @@ __register_frame_info_bases (void *begin, struct object *ob,\n   ob->u.single = begin;\n   ob->s.i = 0;\n   ob->s.b.encoding = DW_EH_PE_omit;\n+#ifdef DWARF2_OBJECT_END_PTR_EXTENSION\n+  ob->fde_end = NULL;\n+#endif\n \n   init_object_mutex_once ();\n   __gthread_mutex_lock (&object_mutex);\n@@ -602,7 +605,7 @@ classify_object_over_fdes (struct object *ob, fde *this_fde)\n   int encoding = DW_EH_PE_absptr;\n   _Unwind_Ptr base = 0;\n \n-  for (; this_fde->length != 0; this_fde = next_fde (this_fde))\n+  for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n       struct dwarf_cie *this_cie;\n       _Unwind_Ptr mask, pc_begin;\n@@ -656,7 +659,7 @@ add_fdes (struct object *ob, struct fde_accumulator *accu, fde *this_fde)\n   int encoding = ob->s.b.encoding;\n   _Unwind_Ptr base = base_from_object (ob->s.b.encoding, ob);\n \n-  for (; this_fde->length != 0; this_fde = next_fde (this_fde))\n+  for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n       struct dwarf_cie *this_cie;\n \n@@ -773,7 +776,7 @@ linear_search_fdes (struct object *ob, fde *this_fde, void *pc)\n   int encoding = ob->s.b.encoding;\n   _Unwind_Ptr base = base_from_object (ob->s.b.encoding, ob);\n \n-  for (; this_fde->length != 0; this_fde = next_fde (this_fde))\n+  for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n       struct dwarf_cie *this_cie;\n       _Unwind_Ptr pc_begin, pc_range;"}, {"sha": "b7d96cfe992469d6d439e9f3db35d1cbb3763fa8", "filename": "gcc/unwind-dw2-fde.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe49dab857d0d0a61597afe558a175287c27ec/gcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.h?ref=3cfe49dab857d0d0a61597afe558a175287c27ec", "patch": "@@ -61,6 +61,10 @@ struct object\n     size_t i;\n   } s;\n \n+#ifdef DWARF2_OBJECT_END_PTR_EXTENSION\n+  char *fde_end;\n+#endif\n+\n   struct object *next;\n };\n \n@@ -160,3 +164,13 @@ next_fde (fde *f)\n }\n \n extern fde * _Unwind_Find_FDE (void *, struct dwarf_eh_bases *);\n+\n+static inline int\n+last_fde (struct object *obj, fde *f)\n+{\n+#ifdef DWARF2_OBJECT_END_PTR_EXTENSION\n+  return (char *)f == obj->fde_end || f->length == 0;\n+#else\n+  return f->length == 0;\n+#endif\n+}"}]}