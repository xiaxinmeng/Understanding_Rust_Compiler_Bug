{"sha": "df2980beb3ddfd359fa00b04f97c904344988b30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyOTgwYmViM2RkZmQzNTlmYTAwYjA0Zjk3YzkwNDM0NDk4OGIzMA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-01-22T19:38:47Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-01-22T19:38:47Z"}, "message": "re PR rtl-optimization/59477 (ICE: in assign_by_spills, at lra-assigns.c:1281 with -O)\n\n2014-01-22  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/59477\n\t* lra-constraints.c (inherit_in_ebb): Process call for living hard\n\tregs.  Update reloads_num and potential_reload_hard_regs for all\n\tinsns.\n\n2014-01-22  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/59477\n\t* g++.dg/pr59477.C: New.\n\nFrom-SVN: r206938", "tree": {"sha": "d53876682600a9f8603b4afdbf94d6223bf94134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d53876682600a9f8603b4afdbf94d6223bf94134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2980beb3ddfd359fa00b04f97c904344988b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2980beb3ddfd359fa00b04f97c904344988b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2980beb3ddfd359fa00b04f97c904344988b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2980beb3ddfd359fa00b04f97c904344988b30/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f56c5dd19cd580a5d25cd8a21340cc6d1742becb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56c5dd19cd580a5d25cd8a21340cc6d1742becb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56c5dd19cd580a5d25cd8a21340cc6d1742becb"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "8e0997743a301a3514136bb115f9af0171b4f885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df2980beb3ddfd359fa00b04f97c904344988b30", "patch": "@@ -1,3 +1,10 @@\n+2014-01-22  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/59477\n+\t* lra-constraints.c (inherit_in_ebb): Process call for living hard\n+\tregs.  Update reloads_num and potential_reload_hard_regs for all\n+\tinsns.\n+\n 2014-01-22  Tom Tromey  <tromey@redhat.com>\n \n \t* config/i386/i386-interix.h (i386_pe_unique_section): Don't use"}, {"sha": "7454229a7d6b07ed1a73629de45e6a76157be647", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=df2980beb3ddfd359fa00b04f97c904344988b30", "patch": "@@ -5007,7 +5007,7 @@ static bool\n inherit_in_ebb (rtx head, rtx tail)\n {\n   int i, src_regno, dst_regno, nregs;\n-  bool change_p, succ_p;\n+  bool change_p, succ_p, update_reloads_num_p;\n   rtx prev_insn, next_usage_insns, set, last_insn;\n   enum reg_class cl;\n   struct lra_insn_reg *reg;\n@@ -5078,6 +5078,7 @@ inherit_in_ebb (rtx head, rtx tail)\n \t  src_regno = REGNO (SET_SRC (set));\n \t  dst_regno = REGNO (SET_DEST (set));\n \t}\n+      update_reloads_num_p = true;\n       if (src_regno < lra_constraint_new_regno_start\n \t  && src_regno >= FIRST_PSEUDO_REGISTER\n \t  && reg_renumber[src_regno] < 0\n@@ -5086,6 +5087,7 @@ inherit_in_ebb (rtx head, rtx tail)\n \t{\n \t  /* 'reload_pseudo <- original_pseudo'.  */\n \t  reloads_num++;\n+\t  update_reloads_num_p = false;\n \t  succ_p = false;\n \t  if (usage_insns[src_regno].check == curr_usage_insns_check\n \t      && (next_usage_insns = usage_insns[src_regno].insns) != NULL_RTX)\n@@ -5109,6 +5111,7 @@ inherit_in_ebb (rtx head, rtx tail)\n \t\t   = usage_insns[dst_regno].insns) != NULL_RTX)\n \t{\n \t  reloads_num++;\n+\t  update_reloads_num_p = false;\n \t  /* 'original_pseudo <- reload_pseudo'.  */\n \t  if (! JUMP_P (curr_insn)\n \t      && inherit_reload_reg (true, dst_regno, cl,\n@@ -5297,6 +5300,14 @@ inherit_in_ebb (rtx head, rtx tail)\n \t\t      add_next_usage_insn (src_regno, use_insn, reloads_num);\n \t\t    }\n \t\t}\n+\t  /* Process call args.  */\n+\t  if (curr_id->arg_hard_regs != NULL)\n+\t    for (i = 0; (src_regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n+\t      if (src_regno < FIRST_PSEUDO_REGISTER)\n+\t\t{\n+\t           SET_HARD_REG_BIT (live_hard_regs, src_regno);\n+\t           add_next_usage_insn (src_regno, curr_insn, reloads_num);\n+\t\t}\n \t  for (i = 0; i < to_inherit_num; i++)\n \t    {\n \t      src_regno = to_inherit[i].regno;\n@@ -5307,6 +5318,26 @@ inherit_in_ebb (rtx head, rtx tail)\n \t\tsetup_next_usage_insn (src_regno, curr_insn, reloads_num, false);\n \t    }\n \t}\n+      if (update_reloads_num_p\n+\t  && NONDEBUG_INSN_P (curr_insn)\n+          && (set = single_set (curr_insn)) != NULL_RTX)\n+\t{\n+\t  int regno = -1;\n+\t  if ((REG_P (SET_DEST (set))\n+\t       && (regno = REGNO (SET_DEST (set))) >= lra_constraint_new_regno_start\n+\t       && reg_renumber[regno] < 0\n+\t       && (cl = lra_get_allocno_class (regno)) != NO_REGS)\n+\t      || (REG_P (SET_SRC (set))\n+\t          && (regno = REGNO (SET_SRC (set))) >= lra_constraint_new_regno_start\n+\t          && reg_renumber[regno] < 0\n+\t          && (cl = lra_get_allocno_class (regno)) != NO_REGS))\n+\t    {\n+\t      reloads_num++;\n+\t      if (hard_reg_set_subset_p (reg_class_contents[cl], live_hard_regs))\n+\t\tIOR_HARD_REG_SET (potential_reload_hard_regs,\n+\t                          reg_class_contents[cl]);\n+\t    }\n+\t}\n       /* We reached the start of the current basic block.  */\n       if (prev_insn == NULL_RTX || prev_insn == PREV_INSN (head)\n \t  || BLOCK_FOR_INSN (prev_insn) != curr_bb)"}, {"sha": "6b49a1270b6f975ba430a4479c2f434c1e87badd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df2980beb3ddfd359fa00b04f97c904344988b30", "patch": "@@ -1,3 +1,8 @@\n+2014-01-22  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/59477\n+\t* g++.dg/pr59477.C: New.\n+\n 2014-01-22  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/pr44194-1.c: Match \"insn \" and \"insn:\", but not \"insn/f\"."}, {"sha": "788c751e51cf7c529fd1cc40df1c9fc8645937fb", "filename": "gcc/testsuite/g++.dg/pr59477.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59477.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2980beb3ddfd359fa00b04f97c904344988b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59477.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59477.C?ref=df2980beb3ddfd359fa00b04f97c904344988b30", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A\n+{\n+  unsigned *a, b;\n+  A (unsigned x) : a (), b (x) {}\n+};\n+\n+struct B\n+{\n+  B (int);\n+  B (const B &) {}\n+};\n+\n+B bar (B, B, A);\n+int v;\n+\n+void\n+foo ()\n+{\n+  B c = 0;\n+  bar (c, c, A (1ULL << v));\n+}"}]}