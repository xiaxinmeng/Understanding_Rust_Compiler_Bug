{"sha": "e9b10b3d2992eeb360527c103f1bf9a455f2a593", "node_id": "C_kwDOANBUbNoAKGU5YjEwYjNkMjk5MmVlYjM2MDUyN2MxMDNmMWJmOWE0NTVmMmE1OTM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-20T15:31:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T09:49:22Z"}, "message": "Error handling is done via the TyTy::ErrorType instead of nullptr's", "tree": {"sha": "dd4742734bf3e034c16326e3813aed8305030768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4742734bf3e034c16326e3813aed8305030768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9b10b3d2992eeb360527c103f1bf9a455f2a593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b10b3d2992eeb360527c103f1bf9a455f2a593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b10b3d2992eeb360527c103f1bf9a455f2a593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b10b3d2992eeb360527c103f1bf9a455f2a593/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f67bb999b5e4457f434844cb16a21d6fc5694e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f67bb999b5e4457f434844cb16a21d6fc5694e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f67bb999b5e4457f434844cb16a21d6fc5694e1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "be53a0d5c3d68e437a42b7e053d59f9a79bee5bd", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b10b3d2992eeb360527c103f1bf9a455f2a593/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b10b3d2992eeb360527c103f1bf9a455f2a593/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=e9b10b3d2992eeb360527c103f1bf9a455f2a593", "patch": "@@ -266,7 +266,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tauto resolved\n \t  = TypeCheckType::Resolve (function.get_return_type ().get ());\n-\tif (resolved == nullptr)\n+\tif (resolved->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_error_at (function.get_locus (),\n \t\t\t   \"failed to resolve return type\");"}]}