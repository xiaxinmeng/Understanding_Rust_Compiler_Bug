{"sha": "b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiYTRkOGRmYTVlN2ZjYjE0YTkyMGJjMjZjODNlNjc2OGU2ZTA1ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-17T04:16:40Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-17T04:16:40Z"}, "message": "flow.c (dump_regset, [...]): New functions.\n\n\t* flow.c (dump_regset, debug_regset, dump_bb, debug_bb,\n\tdebug_bb_n): New functions.\n\t(dump_flow_info, print_rtl_with_bb): Use dump_regset.\n\t* basic-block.h: Prototype new functions.\n\nFrom-SVN: r32024", "tree": {"sha": "447dc01c7ee69403c96a6b702fb909c79c293a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/447dc01c7ee69403c96a6b702fb909c79c293a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/comments", "author": null, "committer": null, "parents": [{"sha": "807d0a32abcaa88ead5ad5e1da46902bd7d9eeb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807d0a32abcaa88ead5ad5e1da46902bd7d9eeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807d0a32abcaa88ead5ad5e1da46902bd7d9eeb0"}], "stats": {"total": 123, "additions": 98, "deletions": 25}, "files": [{"sha": "59937309f97969339fb1ce25039f27babf7a02ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "patch": "@@ -1,3 +1,10 @@\n+2000-02-16  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* flow.c (dump_regset, debug_regset, dump_bb, debug_bb,\n+\tdebug_bb_n): New functions.\n+\t(dump_flow_info, print_rtl_with_bb): Use dump_regset.\n+\t* basic-block.h: Prototype new functions.\n+\n Wed Feb 16 21:07:53 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* invoke.texi: Add AVR invocation docs."}, {"sha": "50cc28e0dc15ed39e961b998119dfffbe5ac6c15", "filename": "gcc/basic-block.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "patch": "@@ -446,6 +446,11 @@ extern void estimate_probability        PARAMS ((struct loops *));\n \n /* In flow.c */\n extern void reorder_basic_blocks\tPARAMS ((void));\n+extern void dump_bb\t\t\tPARAMS ((basic_block, FILE *));\n+extern void debug_bb\t\t\tPARAMS ((basic_block));\n+extern void debug_bb_n\t\t\tPARAMS ((int));\n+extern void dump_regset\t\t\tPARAMS ((regset, FILE *));\n+extern void debug_regset\t\tPARAMS ((regset));\n \n \n #endif /* _BASIC_BLOCK_H */"}, {"sha": "b56fd981d77336fe1070c272bf4a2bff342eccbd", "filename": "gcc/flow.c", "status": "modified", "additions": 86, "deletions": 25, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "patch": "@@ -4865,6 +4865,35 @@ find_use_as_address (x, reg, plusconst)\n /* Write information about registers and basic blocks into FILE.\n    This is part of making a debugging dump.  */\n \n+void\n+dump_regset (r, outf)\n+     regset r;\n+     FILE *outf;\n+{\n+  int i;\n+  if (r == NULL)\n+    {\n+      fputs (\" (nil)\", outf);\n+      return;\n+    }\n+\n+  EXECUTE_IF_SET_IN_REG_SET (r, 0, i,\n+    {\n+      fprintf (outf, \" %d\", i);\n+      if (i < FIRST_PSEUDO_REGISTER)\n+\tfprintf (outf, \" [%s]\",\n+\t\t reg_names[i]);\n+    });\n+}\n+\n+void\n+debug_regset (r)\n+     regset r;\n+{\n+  dump_regset (r, stderr);\n+  putc ('\\n', stderr);\n+}\n+\n void\n dump_flow_info (file)\n      FILE *file;\n@@ -4916,7 +4945,6 @@ dump_flow_info (file)\n   for (i = 0; i < n_basic_blocks; i++)\n     {\n       register basic_block bb = BASIC_BLOCK (i);\n-      register int regno;\n       register edge e;\n \n       fprintf (file, \"\\nBasic block %d: first insn %d, last %d, loop_depth %d.\\n\",\n@@ -4931,24 +4959,10 @@ dump_flow_info (file)\n \tdump_edge_info (file, e, 1);\n \n       fprintf (file, \"\\nRegisters live at start:\");\n-      if (bb->global_live_at_start)\n-\t{\n-          for (regno = 0; regno < max_regno; regno++)\n-\t    if (REGNO_REG_SET_P (bb->global_live_at_start, regno))\n-\t      fprintf (file, \" %d\", regno);\n-\t}\n-      else\n-\tfprintf (file, \" n/a\");\n+      dump_regset (bb->global_live_at_start, file);\n \n       fprintf (file, \"\\nRegisters live at end:\");\n-      if (bb->global_live_at_end)\n-\t{\n-          for (regno = 0; regno < max_regno; regno++)\n-\t    if (REGNO_REG_SET_P (bb->global_live_at_end, regno))\n-\t      fprintf (file, \" %d\", regno);\n-\t}\n-      else\n-\tfprintf (file, \" n/a\");\n+      dump_regset (bb->global_live_at_end, file);\n \n       putc('\\n', file);\n     }\n@@ -5005,6 +5019,60 @@ dump_edge_info (file, e, do_succ)\n }\n \n \f\n+/* Print out one basic block with live information at start and end.  */\n+void\n+dump_bb (bb, outf)\n+     basic_block bb;\n+     FILE *outf;\n+{\n+  rtx insn;\n+  rtx last;\n+  edge e;\n+\n+  fprintf (outf, \";; Basic block %d, loop depth %d\",\n+\t   bb->index, bb->loop_depth - 1);\n+  if (bb->eh_beg != -1 || bb->eh_end != -1)\n+    fprintf (outf, \", eh regions %d/%d\", bb->eh_beg, bb->eh_end);\n+  putc ('\\n', outf);\n+\n+  fputs (\";; Predecessors: \", outf);\n+  for (e = bb->pred; e ; e = e->pred_next)\n+    dump_edge_info (outf, e, 0);\n+  putc ('\\n', outf);\n+\n+  fputs (\";; Registers live at start:\", outf);\n+  dump_regset (bb->global_live_at_start, outf);\n+  putc ('\\n', outf);\n+\n+  for (insn = bb->head, last = NEXT_INSN (bb->end);\n+       insn != last;\n+       insn = NEXT_INSN (insn))\n+    print_rtl_single (outf, insn);\n+\n+  fputs (\";; Registers live at end:\", outf);\n+  dump_regset (bb->global_live_at_end, outf);\n+  putc ('\\n', outf);\n+\n+  fputs (\";; Successors: \", outf);\n+  for (e = bb->succ; e; e = e->succ_next)\n+    dump_edge_info (outf, e, 1);\n+  putc ('\\n', outf);\n+}\n+\n+void\n+debug_bb (bb)\n+     basic_block bb;\n+{\n+  dump_bb (bb, stderr);\n+}\n+\n+void\n+debug_bb_n (n)\n+     int n;\n+{\n+  dump_bb (BASIC_BLOCK(n), stderr);\n+}\n+\n /* Like print_rtl, but also print out live information for the start of each\n    basic block.  */\n \n@@ -5057,14 +5125,7 @@ print_rtl_with_bb (outf, rtx_first)\n \t    {\n \t      fprintf (outf, \";; Start of basic block %d, registers live:\",\n \t\t       bb->index);\n-\n-\t      EXECUTE_IF_SET_IN_REG_SET (bb->global_live_at_start, 0, i,\n-\t\t\t\t\t {\n-\t\t\t\t\t   fprintf (outf, \" %d\", i);\n-\t\t\t\t\t   if (i < FIRST_PSEUDO_REGISTER)\n-\t\t\t\t\t     fprintf (outf, \" [%s]\",\n-\t\t\t\t\t\t      reg_names[i]);\n-\t\t\t\t\t });\n+\t      dump_regset (bb->global_live_at_start, outf);\n \t      putc ('\\n', outf);\n \t    }\n "}]}