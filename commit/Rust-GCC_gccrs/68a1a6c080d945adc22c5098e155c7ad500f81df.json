{"sha": "68a1a6c080d945adc22c5098e155c7ad500f81df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhMWE2YzA4MGQ5NDVhZGMyMmM1MDk4ZTE1NWM3YWQ1MDBmODFkZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-09-05T15:15:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-09-05T15:15:43Z"}, "message": "Use rtx_insn for various jump-handling functions and predicates\n\ngcc/ChangeLog:\n2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n\n\t* config/arc/arc.c (arc_print_operand): Use insn method of\n\tfinal_sequence for type-safety.\n\t* config/bfin/bfin.c (bfin_hardware_loop): Strengthen param\n\t\"insn\" from rtx to rtx_insn *.\n\t* config/frv/frv.c (frv_print_operand_jump_hint): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_scan_for_setlb_lcc):\n\tLikewise for locals \"branch\", \"label\".\n\t* config/h8300/h8300.c (same_cmp_preceding_p): Likewise for\n\tlocals \"i1\", \"i2\".  Use NULL rather than NULL_RTX in comparisons.\n\t(same_cmp_following_p): Likewise for locals \"i2\", \"i3\".\n\t* config/sh/sh_optimize_sett_clrt.cc\n\t(sh_optimize_sett_clrt::sh_cbranch_ccreg_value): Likewise for\n\tparam \"cbranch_insn\".\n\t* function.c (convert_jumps_to_returns): Likewis for local \"jump\".\n\t* ifcvt.c (cond_exec_get_condition): Likewise for param \"jump\".\n\t* jump.c (simplejump_p): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.\n\t(condjump_p): Likewise.\n\t(condjump_in_parallel_p): Likewise.\n\t(pc_set): Likewise.\n\t(any_uncondjump_p): Likewise.\n\t(any_condjump_p): Likewise.\n\t(condjump_label): Likewise.\n\t(returnjump_p): Strengthen param \"insn\" from rtx to\n\tconst rtx_insn *.\n\t(onlyjump_p): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.\n\t(jump_to_label_p): Likewise.\n\t(invert_jump_1): Strengthen param \"jump\" from rtx to rtx_insn *.\n\t(invert_jump): Likewise.\n\t* reorg.c (simplejump_or_return_p): Add checked cast when calling\n\tsimplejump_p.\n\t(get_jump_flags): Strengthen param \"insn\" from rtx to\n\tconst rtx_insn *.\n\t(get_branch_condition): Likewise.\n\t(condition_dominates_p): Likewise.\n\t(make_return_insns): Move declaration of local \"pat\" earlier, to\n\tafter we've handled NONJUMP_INSN_P and non-sequences, using its\n\tmethods to simplify the code and for type-safety.\n\t* rtl.h (find_constant_src): Strengthen param from const_rtx to\n\tconst rtx_insn *.\n\t(jump_to_label_p): Strengthen param from rtx to const rtx_insn *.\n\t(condjump_p): Strengthen param from const_rtx to\n\tconst rtx_insn *.\n\t(any_condjump_p): Likewise.\n\t(any_uncondjump_p): Likewise.\n\t(pc_set): Likewise.\n\t(condjump_label): Likewise.\n\t(simplejump_p): Likewise.\n\t(returnjump_p): Likewise.\n\t(onlyjump_p): Likewise.\n\t(invert_jump_1): Strengthen param 1 from rtx to rtx_insn *.\n\t(invert_jump): Likewise.\n\t(condjump_in_parallel_p): Strengthen param from const_rtx to\n\tconst rtx_insn *.\n\t* rtlanal.c (find_constant_src): Strengthen param from const_rtx\n\tto const rtx_insn *.\n\t* sel-sched-ir.c (fallthru_bb_of_jump): Strengthen param from rtx\n\tto const rtx_insn *.\n\t* sel-sched-ir.h (fallthru_bb_of_jump): Likewise.\n\nFrom-SVN: r214970", "tree": {"sha": "8272e74f022e13f012f684eb2e0cf6341dc29782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8272e74f022e13f012f684eb2e0cf6341dc29782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a1a6c080d945adc22c5098e155c7ad500f81df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a1a6c080d945adc22c5098e155c7ad500f81df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a1a6c080d945adc22c5098e155c7ad500f81df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a1a6c080d945adc22c5098e155c7ad500f81df/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45700b6a428bafde0fae9b67dd494f3cac3d9bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45700b6a428bafde0fae9b67dd494f3cac3d9bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45700b6a428bafde0fae9b67dd494f3cac3d9bf0"}], "stats": {"total": 188, "additions": 128, "deletions": 60}, "files": [{"sha": "dd767585ef6ea08a62dd771e8bfbcefe2c7cd253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -1,3 +1,66 @@\n+2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/arc/arc.c (arc_print_operand): Use insn method of\n+\tfinal_sequence for type-safety.\n+\t* config/bfin/bfin.c (bfin_hardware_loop): Strengthen param\n+\t\"insn\" from rtx to rtx_insn *.\n+\t* config/frv/frv.c (frv_print_operand_jump_hint): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_scan_for_setlb_lcc):\n+\tLikewise for locals \"branch\", \"label\".\n+\t* config/h8300/h8300.c (same_cmp_preceding_p): Likewise for\n+\tlocals \"i1\", \"i2\".  Use NULL rather than NULL_RTX in comparisons.\n+\t(same_cmp_following_p): Likewise for locals \"i2\", \"i3\".\n+\t* config/sh/sh_optimize_sett_clrt.cc\n+\t(sh_optimize_sett_clrt::sh_cbranch_ccreg_value): Likewise for\n+\tparam \"cbranch_insn\".\n+\t* function.c (convert_jumps_to_returns): Likewis for local \"jump\".\n+\t* ifcvt.c (cond_exec_get_condition): Likewise for param \"jump\".\n+\t* jump.c (simplejump_p): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.\n+\t(condjump_p): Likewise.\n+\t(condjump_in_parallel_p): Likewise.\n+\t(pc_set): Likewise.\n+\t(any_uncondjump_p): Likewise.\n+\t(any_condjump_p): Likewise.\n+\t(condjump_label): Likewise.\n+\t(returnjump_p): Strengthen param \"insn\" from rtx to\n+\tconst rtx_insn *.\n+\t(onlyjump_p): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.\n+\t(jump_to_label_p): Likewise.\n+\t(invert_jump_1): Strengthen param \"jump\" from rtx to rtx_insn *.\n+\t(invert_jump): Likewise.\n+\t* reorg.c (simplejump_or_return_p): Add checked cast when calling\n+\tsimplejump_p.\n+\t(get_jump_flags): Strengthen param \"insn\" from rtx to\n+\tconst rtx_insn *.\n+\t(get_branch_condition): Likewise.\n+\t(condition_dominates_p): Likewise.\n+\t(make_return_insns): Move declaration of local \"pat\" earlier, to\n+\tafter we've handled NONJUMP_INSN_P and non-sequences, using its\n+\tmethods to simplify the code and for type-safety.\n+\t* rtl.h (find_constant_src): Strengthen param from const_rtx to\n+\tconst rtx_insn *.\n+\t(jump_to_label_p): Strengthen param from rtx to const rtx_insn *.\n+\t(condjump_p): Strengthen param from const_rtx to\n+\tconst rtx_insn *.\n+\t(any_condjump_p): Likewise.\n+\t(any_uncondjump_p): Likewise.\n+\t(pc_set): Likewise.\n+\t(condjump_label): Likewise.\n+\t(simplejump_p): Likewise.\n+\t(returnjump_p): Likewise.\n+\t(onlyjump_p): Likewise.\n+\t(invert_jump_1): Strengthen param 1 from rtx to rtx_insn *.\n+\t(invert_jump): Likewise.\n+\t(condjump_in_parallel_p): Strengthen param from const_rtx to\n+\tconst rtx_insn *.\n+\t* rtlanal.c (find_constant_src): Strengthen param from const_rtx\n+\tto const rtx_insn *.\n+\t* sel-sched-ir.c (fallthru_bb_of_jump): Strengthen param from rtx\n+\tto const rtx_insn *.\n+\t* sel-sched-ir.h (fallthru_bb_of_jump): Likewise.\n+\n 2014-09-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* reorg.c (relax_delay_slots): Move declaration of \"trial_seq\""}, {"sha": "5ee31a61f3cc0199534ee29c0c117f14581c0245", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -2849,8 +2849,8 @@ arc_print_operand (FILE *file, rtx x, int code)\n \t  /* Is this insn in a delay slot sequence?  */\n \t  if (!final_sequence || XVECLEN (final_sequence, 0) < 2\n \t      || current_insn_predicate\n-\t      || CALL_P (XVECEXP (final_sequence, 0, 0))\n-\t      || simplejump_p (XVECEXP (final_sequence, 0, 0)))\n+\t      || CALL_P (final_sequence->insn (0))\n+\t      || simplejump_p (final_sequence->insn (0)))\n \t    {\n \t      /* This insn isn't in a delay slot sequence, or conditionalized\n \t\t independently of its position in a delay slot.  */"}, {"sha": "03470da5bb03556754924517aafc332d502256ae", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -3411,7 +3411,7 @@ bfin_hardware_loop (void)\n /* Estimate the length of INSN conservatively.  */\n \n static int\n-length_for_loop (rtx insn)\n+length_for_loop (rtx_insn *insn)\n {\n   int length = 0;\n   if (JUMP_P (insn) && any_condjump_p (insn) && !optimize_size)"}, {"sha": "2f83962053aafeebeffad16464f3a820c3548783", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -271,7 +271,7 @@ static bool frv_print_operand_punct_valid_p\t(unsigned char code);\n static void frv_print_operand_memory_reference_reg\n \t\t\t\t\t\t(FILE *, rtx);\n static void frv_print_operand_memory_reference\t(FILE *, rtx, int);\n-static int frv_print_operand_jump_hint\t\t(rtx);\n+static int frv_print_operand_jump_hint\t\t(rtx_insn *);\n static const char *comparison_string\t\t(enum rtx_code, rtx);\n static rtx frv_function_value\t\t\t(const_tree, const_tree,\n \t\t\t\t\t\t bool);\n@@ -2623,7 +2623,7 @@ frv_print_operand_memory_reference (FILE * stream, rtx x, int addr_offset)\n #define FRV_JUMP_NOT_LIKELY 0\n \n static int\n-frv_print_operand_jump_hint (rtx insn)\n+frv_print_operand_jump_hint (rtx_insn *insn)\n {\n   rtx note;\n   rtx labelref;"}, {"sha": "e521f3b0c6f232149969a432f3731edc9b408990", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -5718,14 +5718,14 @@ byte_accesses_mergeable_p (rtx addr1, rtx addr2)\n int\n same_cmp_preceding_p (rtx i3)\n {\n-  rtx i1, i2;\n+  rtx_insn *i1, *i2;\n \n   /* Make sure we have a sequence of three insns.  */\n   i2 = prev_nonnote_insn (i3);\n-  if (i2 == NULL_RTX)\n+  if (i2 == NULL)\n     return 0;\n   i1 = prev_nonnote_insn (i2);\n-  if (i1 == NULL_RTX)\n+  if (i1 == NULL)\n     return 0;\n \n   return (INSN_P (i1) && rtx_equal_p (PATTERN (i1), PATTERN (i3))\n@@ -5738,14 +5738,14 @@ same_cmp_preceding_p (rtx i3)\n int\n same_cmp_following_p (rtx i1)\n {\n-  rtx i2, i3;\n+  rtx_insn *i2, *i3;\n \n   /* Make sure we have a sequence of three insns.  */\n   i2 = next_nonnote_insn (i1);\n-  if (i2 == NULL_RTX)\n+  if (i2 == NULL)\n     return 0;\n   i3 = next_nonnote_insn (i2);\n-  if (i3 == NULL_RTX)\n+  if (i3 == NULL)\n     return 0;\n \n   return (INSN_P (i3) && rtx_equal_p (PATTERN (i1), PATTERN (i3))"}, {"sha": "07cae5cb3832f337a6a978a54413be77b417479e", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -3274,7 +3274,7 @@ mn10300_scan_for_setlb_lcc (void)\n \treason = \"it contains CALL insns\";\n       else\n \t{\n-\t  rtx branch = BB_END (loop->latch);\n+\t  rtx_insn *branch = BB_END (loop->latch);\n \n \t  gcc_assert (JUMP_P (branch));\n \t  if (single_set (branch) == NULL_RTX || ! any_condjump_p (branch))\n@@ -3283,7 +3283,7 @@ mn10300_scan_for_setlb_lcc (void)\n \t    reason = \"it is not a simple loop\";\n \t  else\n \t    {\n-\t      rtx label;\n+\t      rtx_insn *label;\n \n \t      if (dump_file)\n \t\tflow_loop_dump (loop, dump_file, NULL, 0);"}, {"sha": "c39df3fbeeb358e704c4d8d41627163a60c36a46", "filename": "gcc/config/sh/sh_optimize_sett_clrt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -118,7 +118,7 @@ class sh_optimize_sett_clrt : public rtl_opt_pass\n   // Given a cbranch insn, its basic block and another basic block, determine\n   // the value to which the ccreg will be set after jumping/falling through to\n   // the specified target basic block.\n-  bool sh_cbranch_ccreg_value (rtx cbranch_insn,\n+  bool sh_cbranch_ccreg_value (rtx_insn *cbranch_insn,\n \t\t\t       basic_block cbranch_insn_bb,\n \t\t\t       basic_block branch_target_bb) const;\n \n@@ -276,7 +276,7 @@ sh_optimize_sett_clrt::const_setcc_value (rtx pat) const\n \n bool\n sh_optimize_sett_clrt\n-::sh_cbranch_ccreg_value (rtx cbranch_insn, basic_block cbranch_insn_bb,\n+::sh_cbranch_ccreg_value (rtx_insn *cbranch_insn, basic_block cbranch_insn_bb,\n \t\t\t  basic_block branch_target_bb) const\n {\n   rtx pc_set_rtx = pc_set (cbranch_insn);"}, {"sha": "c8daf95104a07515cda5a964e8f9ad7b9424c78e", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -5460,7 +5460,7 @@ convert_jumps_to_returns (basic_block last_bb, bool simple_p,\n \n   FOR_EACH_VEC_ELT (src_bbs, i, bb)\n     {\n-      rtx jump = BB_END (bb);\n+      rtx_insn *jump = BB_END (bb);\n \n       if (!JUMP_P (jump) || JUMP_LABEL (jump) != label)\n \tcontinue;"}, {"sha": "eee04cc2d042f2289b52fb7163a4b7dff7130487", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -92,7 +92,7 @@ static rtx_insn *find_active_insn_after (basic_block, rtx_insn *);\n static basic_block block_fallthru (basic_block);\n static int cond_exec_process_insns (ce_if_block *, rtx_insn *, rtx, rtx, int,\n \t\t\t\t    int);\n-static rtx cond_exec_get_condition (rtx);\n+static rtx cond_exec_get_condition (rtx_insn *);\n static rtx noce_get_condition (rtx_insn *, rtx_insn **, bool);\n static int noce_operand_ok (const_rtx);\n static void merge_if_block (ce_if_block *);\n@@ -429,7 +429,7 @@ cond_exec_process_insns (ce_if_block *ce_info ATTRIBUTE_UNUSED,\n /* Return the condition for a jump.  Do not do any special processing.  */\n \n static rtx\n-cond_exec_get_condition (rtx jump)\n+cond_exec_get_condition (rtx_insn *jump)\n {\n   rtx test_if, cond;\n "}, {"sha": "ef2f9e51551fb748bf70d58995f6eb124b3dfa06", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -766,7 +766,7 @@ comparison_dominates_p (enum rtx_code code1, enum rtx_code code2)\n /* Return 1 if INSN is an unconditional jump and nothing else.  */\n \n int\n-simplejump_p (const_rtx insn)\n+simplejump_p (const rtx_insn *insn)\n {\n   return (JUMP_P (insn)\n \t  && GET_CODE (PATTERN (insn)) == SET\n@@ -781,7 +781,7 @@ simplejump_p (const_rtx insn)\n    branch and compare insns.  Use any_condjump_p instead whenever possible.  */\n \n int\n-condjump_p (const_rtx insn)\n+condjump_p (const rtx_insn *insn)\n {\n   const_rtx x = PATTERN (insn);\n \n@@ -809,7 +809,7 @@ condjump_p (const_rtx insn)\n    branch and compare insns.  Use any_condjump_p instead whenever possible.  */\n \n int\n-condjump_in_parallel_p (const_rtx insn)\n+condjump_in_parallel_p (const rtx_insn *insn)\n {\n   const_rtx x = PATTERN (insn);\n \n@@ -840,7 +840,7 @@ condjump_in_parallel_p (const_rtx insn)\n /* Return set of PC, otherwise NULL.  */\n \n rtx\n-pc_set (const_rtx insn)\n+pc_set (const rtx_insn *insn)\n {\n   rtx pat;\n   if (!JUMP_P (insn))\n@@ -861,7 +861,7 @@ pc_set (const_rtx insn)\n    possibly bundled inside a PARALLEL.  */\n \n int\n-any_uncondjump_p (const_rtx insn)\n+any_uncondjump_p (const rtx_insn *insn)\n {\n   const_rtx x = pc_set (insn);\n   if (!x)\n@@ -881,7 +881,7 @@ any_uncondjump_p (const_rtx insn)\n    Note that unlike condjump_p it returns false for unconditional jumps.  */\n \n int\n-any_condjump_p (const_rtx insn)\n+any_condjump_p (const rtx_insn *insn)\n {\n   const_rtx x = pc_set (insn);\n   enum rtx_code a, b;\n@@ -902,7 +902,7 @@ any_condjump_p (const_rtx insn)\n /* Return the label of a conditional jump.  */\n \n rtx\n-condjump_label (const_rtx insn)\n+condjump_label (const rtx_insn *insn)\n {\n   rtx x = pc_set (insn);\n \n@@ -923,7 +923,7 @@ condjump_label (const_rtx insn)\n /* Return TRUE if INSN is a return jump.  */\n \n int\n-returnjump_p (rtx insn)\n+returnjump_p (const rtx_insn *insn)\n {\n   if (JUMP_P (insn))\n     {\n@@ -970,7 +970,7 @@ eh_returnjump_p (rtx_insn *insn)\n    nothing more.  */\n \n int\n-onlyjump_p (const_rtx insn)\n+onlyjump_p (const rtx_insn *insn)\n {\n   rtx set;\n \n@@ -991,7 +991,7 @@ onlyjump_p (const_rtx insn)\n /* Return true iff INSN is a jump and its JUMP_LABEL is a label, not\n    NULL or a return.  */\n bool\n-jump_to_label_p (rtx insn)\n+jump_to_label_p (const rtx_insn *insn)\n {\n   return (JUMP_P (insn)\n \t  && JUMP_LABEL (insn) != NULL && !ANY_RETURN_P (JUMP_LABEL (insn)));\n@@ -1656,7 +1656,7 @@ invert_exp_1 (rtx x, rtx insn)\n    inversion and redirection.  */\n \n int\n-invert_jump_1 (rtx jump, rtx nlabel)\n+invert_jump_1 (rtx_insn *jump, rtx nlabel)\n {\n   rtx x = pc_set (jump);\n   int ochanges;\n@@ -1680,7 +1680,7 @@ invert_jump_1 (rtx jump, rtx nlabel)\n    NLABEL instead of where it jumps now.  Return true if successful.  */\n \n int\n-invert_jump (rtx jump, rtx nlabel, int delete_unused)\n+invert_jump (rtx_insn *jump, rtx nlabel, int delete_unused)\n {\n   rtx olabel = JUMP_LABEL (jump);\n "}, {"sha": "400a20fd01cc2ec7ae098f7398bb2fc36824dddb", "filename": "gcc/reorg.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -217,10 +217,10 @@ static void note_delay_statistics (int, int);\n #if defined(ANNUL_IFFALSE_SLOTS) || defined(ANNUL_IFTRUE_SLOTS)\n static rtx_insn_list *optimize_skip (rtx_insn *);\n #endif\n-static int get_jump_flags (rtx, rtx);\n+static int get_jump_flags (const rtx_insn *, rtx);\n static int mostly_true_jump (rtx);\n-static rtx get_branch_condition (rtx, rtx);\n-static int condition_dominates_p (rtx, rtx);\n+static rtx get_branch_condition (const rtx_insn *, rtx);\n+static int condition_dominates_p (rtx, const rtx_insn *);\n static int redirect_with_delay_slots_safe_p (rtx_insn *, rtx, rtx);\n static int redirect_with_delay_list_safe_p (rtx_insn *, rtx, rtx_insn_list *);\n static int check_annul_list_true_false (int, rtx);\n@@ -272,7 +272,8 @@ static bool\n simplejump_or_return_p (rtx insn)\n {\n   return (JUMP_P (insn)\n-\t  && (simplejump_p (insn) || ANY_RETURN_P (PATTERN (insn))));\n+\t  && (simplejump_p (as_a <rtx_insn *> (insn))\n+\t      || ANY_RETURN_P (PATTERN (insn))));\n }\n \f\n /* Return TRUE if this insn should stop the search for insn to fill delay\n@@ -845,7 +846,7 @@ optimize_skip (rtx_insn *insn)\n     are predicted as very likely taken.  */\n \n static int\n-get_jump_flags (rtx insn, rtx label)\n+get_jump_flags (const rtx_insn *insn, rtx label)\n {\n   int flags;\n \n@@ -907,7 +908,7 @@ mostly_true_jump (rtx jump_insn)\n    type of jump, or it doesn't go to TARGET, return 0.  */\n \n static rtx\n-get_branch_condition (rtx insn, rtx target)\n+get_branch_condition (const rtx_insn *insn, rtx target)\n {\n   rtx pat = PATTERN (insn);\n   rtx src;\n@@ -953,7 +954,7 @@ get_branch_condition (rtx insn, rtx target)\n    INSN, i.e., if INSN will always branch if CONDITION is true.  */\n \n static int\n-condition_dominates_p (rtx condition, rtx insn)\n+condition_dominates_p (rtx condition, const rtx_insn *insn)\n {\n   rtx other_condition = get_branch_condition (insn, JUMP_LABEL (insn));\n   enum rtx_code code = GET_CODE (condition);\n@@ -3579,26 +3580,30 @@ make_return_insns (rtx_insn *first)\n \n       /* Only look at filled JUMP_INSNs that go to the end of function\n \t label.  */\n-      if (!NONJUMP_INSN_P (insn)\n-\t  || GET_CODE (PATTERN (insn)) != SEQUENCE\n-\t  || !jump_to_label_p (XVECEXP (PATTERN (insn), 0, 0)))\n+      if (!NONJUMP_INSN_P (insn))\n \tcontinue;\n \n-      if (JUMP_LABEL (XVECEXP (PATTERN (insn), 0, 0)) == function_return_label)\n+      if (GET_CODE (PATTERN (insn)) != SEQUENCE)\n+\tcontinue;\n+\n+      rtx_sequence *pat = as_a <rtx_sequence *> (PATTERN (insn));\n+\n+      if (!jump_to_label_p (pat->insn (0)))\n+\tcontinue;\n+\n+      if (JUMP_LABEL (pat->insn (0)) == function_return_label)\n \t{\n \t  kind = ret_rtx;\n \t  real_label = real_return_label;\n \t}\n-      else if (JUMP_LABEL (XVECEXP (PATTERN (insn), 0, 0))\n-\t       == function_simple_return_label)\n+      else if (JUMP_LABEL (pat->insn (0)) == function_simple_return_label)\n \t{\n \t  kind = simple_return_rtx;\n \t  real_label = real_simple_return_label;\n \t}\n       else\n \tcontinue;\n \n-      rtx_sequence *pat = as_a <rtx_sequence *> (PATTERN (insn));\n       jump_insn = pat->insn (0);\n \n       /* If we can't make the jump into a RETURN, try to redirect it to the best"}, {"sha": "ddf89b0d05c95b30e51a978ee655a2da9c378e90", "filename": "gcc/rtl.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -2772,7 +2772,7 @@ extern int dead_or_set_regno_p (const_rtx, unsigned int);\n extern rtx find_reg_note (const_rtx, enum reg_note, const_rtx);\n extern rtx find_regno_note (const_rtx, enum reg_note, unsigned int);\n extern rtx find_reg_equal_equiv_note (const_rtx);\n-extern rtx find_constant_src (const_rtx);\n+extern rtx find_constant_src (const rtx_insn *);\n extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);\n extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);\n extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n@@ -3232,20 +3232,20 @@ extern bool check_for_inc_dec (rtx_insn *insn);\n \n /* In jump.c */\n extern int comparison_dominates_p (enum rtx_code, enum rtx_code);\n-extern bool jump_to_label_p (rtx);\n-extern int condjump_p (const_rtx);\n-extern int any_condjump_p (const_rtx);\n-extern int any_uncondjump_p (const_rtx);\n-extern rtx pc_set (const_rtx);\n-extern rtx condjump_label (const_rtx);\n-extern int simplejump_p (const_rtx);\n-extern int returnjump_p (rtx);\n+extern bool jump_to_label_p (const rtx_insn *);\n+extern int condjump_p (const rtx_insn *);\n+extern int any_condjump_p (const rtx_insn *);\n+extern int any_uncondjump_p (const rtx_insn *);\n+extern rtx pc_set (const rtx_insn *);\n+extern rtx condjump_label (const rtx_insn *);\n+extern int simplejump_p (const rtx_insn *);\n+extern int returnjump_p (const rtx_insn *);\n extern int eh_returnjump_p (rtx_insn *);\n-extern int onlyjump_p (const_rtx);\n+extern int onlyjump_p (const rtx_insn *);\n extern int only_sets_cc0_p (const_rtx);\n extern int sets_cc0_p (const_rtx);\n-extern int invert_jump_1 (rtx, rtx);\n-extern int invert_jump (rtx, rtx, int);\n+extern int invert_jump_1 (rtx_insn *, rtx);\n+extern int invert_jump (rtx_insn *, rtx, int);\n extern int rtx_renumbered_equal_p (const_rtx, const_rtx);\n extern int true_regnum (const_rtx);\n extern unsigned int reg_or_subregno (const_rtx);\n@@ -3259,7 +3259,7 @@ extern enum rtx_code reversed_comparison_code (const_rtx, const_rtx);\n extern enum rtx_code reversed_comparison_code_parts (enum rtx_code, const_rtx,\n \t\t\t\t\t\t     const_rtx, const_rtx);\n extern void delete_for_peephole (rtx_insn *, rtx_insn *);\n-extern int condjump_in_parallel_p (const_rtx);\n+extern int condjump_in_parallel_p (const rtx_insn *);\n \n /* In emit-rtl.c.  */\n extern int max_reg_num (void);"}, {"sha": "3fe2cd4efd4159cf8cc7777ddba1a956c826cff6", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -1918,7 +1918,7 @@ find_reg_equal_equiv_note (const_rtx insn)\n    return null.  */\n \n rtx\n-find_constant_src (const_rtx insn)\n+find_constant_src (const rtx_insn *insn)\n {\n   rtx note, set, x;\n "}, {"sha": "053fe143282645df9ec84e54675b5d4cae35ff1f", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -4605,7 +4605,7 @@ in_current_region_p (basic_block bb)\n \n /* Return the block which is a fallthru bb of a conditional jump JUMP.  */\n basic_block\n-fallthru_bb_of_jump (rtx jump)\n+fallthru_bb_of_jump (const rtx_insn *jump)\n {\n   if (!JUMP_P (jump))\n     return NULL;"}, {"sha": "90e7283b07e8484e724b9dfc9be640c694bb3aab", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a1a6c080d945adc22c5098e155c7ad500f81df/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=68a1a6c080d945adc22c5098e155c7ad500f81df", "patch": "@@ -1619,7 +1619,7 @@ extern bool sel_bb_end_p (insn_t);\n extern bool sel_bb_empty_p (basic_block);\n \n extern bool in_current_region_p (basic_block);\n-extern basic_block fallthru_bb_of_jump (rtx);\n+extern basic_block fallthru_bb_of_jump (const rtx_insn *);\n \n extern void sel_init_bbs (bb_vec_t);\n extern void sel_finish_bbs (void);"}]}