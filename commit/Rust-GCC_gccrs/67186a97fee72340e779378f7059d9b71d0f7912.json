{"sha": "67186a97fee72340e779378f7059d9b71d0f7912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxODZhOTdmZWU3MjM0MGU3NzkzNzhmNzA1OWQ5YjcxZDBmNzkxMg==", "commit": {"author": {"name": "Trevor Smigiel", "email": "Trevor_Smigiel@playstation.sony.com", "date": "2007-09-10T13:16:38Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-09-10T13:16:38Z"}, "message": "New target hook to calculate MII\n\nCo-Authored-By: Revital Eres <eres@il.ibm.com>\n\nFrom-SVN: r128343", "tree": {"sha": "6a134dc64a3873eb40dadbaa25d0e75243c9a879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a134dc64a3873eb40dadbaa25d0e75243c9a879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67186a97fee72340e779378f7059d9b71d0f7912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67186a97fee72340e779378f7059d9b71d0f7912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67186a97fee72340e779378f7059d9b71d0f7912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67186a97fee72340e779378f7059d9b71d0f7912/comments", "author": null, "committer": null, "parents": [{"sha": "77340500f261c833adb77bc8ad37be5d5789310e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77340500f261c833adb77bc8ad37be5d5789310e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77340500f261c833adb77bc8ad37be5d5789310e"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "d26bf109f11d1824dd3f0fa43766ce9834ea10b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -1,3 +1,16 @@\n+2007-09-10  Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n+\t    Revital Eres  <eres@il.ibm.com>\n+\n+\t* target.h (struct gcc_target.sched): New field: sms_res_mii.\n+\t(struct ddg): Define.\n+\t* target-def.h (TARGET_SCHED_SMS_RES_MII): Define.\n+\t(TARGET_SCHED): Add TARGET_SCHED_SMS_RES_MII.\n+\t* config/spu/spu.c: Include ddg.h.\n+\t(TARGET_SCHED_SMS_RES_MII): Define.\n+\t(spu_sms_res_mii): New function to calculate mii.\n+\t* modulo-sched (res_MII): Use it.\n+\t* doc/tm.texi: Document TARGET_SCHED_SMS_RES_MII.\n+\n 2007-09-10  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_dump_pool): Create copy of constant"}, {"sha": "3423cef42669bf1b8118f7e77d289b56720bce1e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -53,6 +53,7 @@\n #include \"tree-gimple.h\"\n #include \"tm-constrs.h\"\n #include \"spu-builtins.h\"\n+#include \"ddg.h\"\n \n /* Builtin types, data and prototypes. */\n struct spu_builtin_range\n@@ -136,6 +137,7 @@ static tree spu_builtin_mul_widen_odd (tree);\n static tree spu_builtin_mask_for_load (void);\n static int spu_builtin_vectorization_cost (bool);\n static bool spu_vector_alignment_reachable (const_tree, bool);\n+static int spu_sms_res_mii (struct ddg *g);\n \n extern const char *reg_names[];\n rtx spu_compare_op0, spu_compare_op1;\n@@ -287,6 +289,9 @@ const struct attribute_spec spu_attribute_table[];\n #undef TARGET_LIBGCC_SHIFT_COUNT_MODE\n #define TARGET_LIBGCC_SHIFT_COUNT_MODE spu_libgcc_shift_count_mode\n \n+#undef TARGET_SCHED_SMS_RES_MII\n+#define TARGET_SCHED_SMS_RES_MII spu_sms_res_mii\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n void\n@@ -5506,6 +5511,38 @@ spu_vector_alignment_reachable (const_tree type ATTRIBUTE_UNUSED, bool is_packed\n   return true;\n }\n \n+/* Count the total number of instructions in each pipe and return the\n+   maximum, which is used as the Minimum Iteration Interval (MII)\n+   in the modulo scheduler.  get_pipe() will return -2, -1, 0, or 1.\n+   -2 are instructions that can go in pipe0 or pipe1.  */\n+static int\n+spu_sms_res_mii (struct ddg *g)\n+{\n+  int i;\n+  unsigned t[4] = {0, 0, 0, 0};\n+\n+  for (i = 0; i < g->num_nodes; i++)\n+    {\n+      rtx insn = g->nodes[i].insn;\n+      int p = get_pipe (insn) + 2;\n+\n+      assert (p >= 0);\n+      assert (p < 4);\n+\n+      t[p]++;\n+      if (dump_file && INSN_P (insn))\n+            fprintf (dump_file, \"i%d %s %d %d\\n\",\n+                     INSN_UID (insn),\n+                     insn_data[INSN_CODE(insn)].name,\n+                     p, t[p]);\n+    }\n+  if (dump_file)\n+    fprintf (dump_file, \"%d %d %d %d\\n\", t[0], t[1], t[2], t[3]);\n+\n+  return MAX ((t[0] + t[2] + t[3] + 1) / 2, MAX (t[2], t[3]));\n+}\n+\n+\n void\n spu_init_expanders (void)\n {   "}, {"sha": "deb3abc2e87197e291a94270f009fbaca8a0d788", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -6342,6 +6342,15 @@ an additional structure @var{spec_info} should be filled by the target.\n The structure describes speculation types that can be used in the scheduler.\n @end deftypefn\n \n+@deftypefn {Target Hook} int TARGET_SCHED_SMS_RES_MII (struct ddg *@var{g})\n+This hook is called by the swing modulo scheduler to calculate a\n+resource-based lower bound which is based on the resources available in\n+the machine and the resources required by each instruction.  The target\n+backend can use @var{g} to calculate such bound.  A very simple lower\n+bound will be used in case this hook is not implemented: the total number\n+of instructions divided by the issue rate.\n+@end deftypefn\n+\n @node Sections\n @section Dividing the Output into Sections (Texts, Data, @dots{})\n @c the above section title is WAY too long.  maybe cut the part between"}, {"sha": "9a806c106e9f6e75c6c396df57fbc0fa893b2d7e", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -374,6 +374,9 @@ const_iteration_count (rtx count_reg, basic_block pre_header,\n static int\n res_MII (ddg_ptr g)\n {\n+  if (targetm.sched.sms_res_mii)\n+    return targetm.sched.sms_res_mii (g); \n+  \n   return (g->num_nodes / issue_rate);\n }\n "}, {"sha": "5f5c6f3ae273ac600bf744a9dc5e8e8639f0e64c", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -322,7 +322,7 @@\n #define TARGET_SCHED_GEN_CHECK 0\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC 0\n #define TARGET_SCHED_SET_SCHED_FLAGS 0\n-\n+#define TARGET_SCHED_SMS_RES_MII 0\n \n #define TARGET_SCHED\t\t\t\t\t\t\\\n   {TARGET_SCHED_ADJUST_COST,\t\t\t\t\t\\\n@@ -351,7 +351,8 @@\n    TARGET_SCHED_NEEDS_BLOCK_P,                                  \\\n    TARGET_SCHED_GEN_CHECK,                                      \\\n    TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC, \\\n-   TARGET_SCHED_SET_SCHED_FLAGS}\n+   TARGET_SCHED_SET_SCHED_FLAGS,                                \\\n+   TARGET_SCHED_SMS_RES_MII}\n \n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD 0\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\"}, {"sha": "4d8cd0122203eb24c1bbd34ae0b09b101f857520", "filename": "gcc/target.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67186a97fee72340e779378f7059d9b71d0f7912/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=67186a97fee72340e779378f7059d9b71d0f7912", "patch": "@@ -88,6 +88,9 @@ typedef struct secondary_reload_info\n /* This is defined in sched-int.h .  */\n struct _dep;\n \n+/* This is defined in ddg.h .  */\n+struct ddg;\n+\n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n@@ -397,6 +400,12 @@ struct gcc_target\n        information about the speculation capabilities of the target.\n        The parameter is a pointer to spec_info variable.  */\n     void (* set_sched_flags) (struct spec_info_def *);\n+\n+    /* The following member value is a pointer to a function that provides\n+       information about the target resource-based lower bound which is\n+       used by the swing modulo scheduler.  The parameter is a pointer\n+       to ddg variable.  */\n+    int (* sms_res_mii) (struct ddg *);\n   } sched;\n \n   /* Functions relating to vectorization.  */"}]}