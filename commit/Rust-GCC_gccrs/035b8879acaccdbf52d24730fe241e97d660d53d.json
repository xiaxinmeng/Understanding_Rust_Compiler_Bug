{"sha": "035b8879acaccdbf52d24730fe241e97d660d53d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1Yjg4NzlhY2FjY2RiZjUyZDI0NzMwZmUyNDFlOTdkNjYwZDUzZA==", "commit": {"author": {"name": "Kaushik Phatak", "email": "kaushik.phatak@kpit.com", "date": "2016-05-09T11:44:58Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-05-09T11:44:58Z"}, "message": "rl78.c (rl78_expand_prologue): Save the MDUC related registers in all interrupt handlers if necessary.\n\n\t* config/rl78/rl78.c (rl78_expand_prologue): Save the MDUC related\n\tregisters in all interrupt handlers if necessary.\n\t(rl78_option_override): Add warning.\n\t(MUST_SAVE_MDUC_REGISTERS): New macro.\n\t(rl78_expand_epilogue): Restore the MDUC registers if necessary.\n\t* config/rl78/rl78.c (check_mduc_usage): New function.\n\t(mduc_regs): New structure to hold MDUC register data.\n\t* config/rl78/rl78.md (is_g13_muldiv_insn): New attribute.\n\t(mulsi3_g13): Add is_g13_muldiv_insn attribute.\n\t(udivmodsi4_g13): Add is_g13_muldiv_insn attribute.\n\t(mulhi3_g13): Add is_g13_muldiv_insn attribute.\n\t* config/rl78/rl78.opt (msave-mduc-in-interrupts): New option.\n\t* doc/invoke.texi (RL78 Options): Add -msave-mduc-in-interrupts.\n\nFrom-SVN: r236027", "tree": {"sha": "4a83a2d6833b91c14aa8edc0efbc99d40e6145af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a83a2d6833b91c14aa8edc0efbc99d40e6145af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/035b8879acaccdbf52d24730fe241e97d660d53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035b8879acaccdbf52d24730fe241e97d660d53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/035b8879acaccdbf52d24730fe241e97d660d53d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035b8879acaccdbf52d24730fe241e97d660d53d/comments", "author": null, "committer": null, "parents": [{"sha": "18caa34eb299b8ea583088ce4bbf32cdc37676ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18caa34eb299b8ea583088ce4bbf32cdc37676ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18caa34eb299b8ea583088ce4bbf32cdc37676ff"}], "stats": {"total": 134, "additions": 129, "deletions": 5}, "files": [{"sha": "1adf8b51ee93b746a53b8ef52d0daf9a2fe1016c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=035b8879acaccdbf52d24730fe241e97d660d53d", "patch": "@@ -1,3 +1,19 @@\n+2016-05-09  Kaushik Phatak  <kaushik.phatak@kpit.com>\n+\n+\t* config/rl78/rl78.c (rl78_expand_prologue): Save the MDUC related\n+\tregisters in all interrupt handlers if necessary.\n+\t(rl78_option_override): Add warning.\n+\t(MUST_SAVE_MDUC_REGISTERS): New macro.\n+\t(rl78_expand_epilogue): Restore the MDUC registers if necessary.\n+\t* config/rl78/rl78.c (check_mduc_usage): New function.\n+\t(mduc_regs): New structure to hold MDUC register data.\n+\t* config/rl78/rl78.md (is_g13_muldiv_insn): New attribute.\n+\t(mulsi3_g13): Add is_g13_muldiv_insn attribute.\n+\t(udivmodsi4_g13): Add is_g13_muldiv_insn attribute.\n+\t(mulhi3_g13): Add is_g13_muldiv_insn attribute.\n+\t* config/rl78/rl78.opt (msave-mduc-in-interrupts): New option.\n+\t* doc/invoke.texi (RL78 Options): Add -msave-mduc-in-interrupts.\n+\n 2016-05-09  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-if-conv.c (tree-ssa-loop.h): Include header file."}, {"sha": "2d850610ea609cb546ee509e949f240a397628ce", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=035b8879acaccdbf52d24730fe241e97d660d53d", "patch": "@@ -76,6 +76,23 @@ static const char * const word_regnames[] =\n   \"sp\", \"ap\", \"psw\", \"es\", \"cs\"\n };\n \n+/* Structure for G13 MDUC registers.  */\n+struct mduc_reg_type\n+{\n+  unsigned int       address;\n+  enum machine_mode  mode;\n+};\n+\n+struct mduc_reg_type  mduc_regs[] =\n+{\n+  {0xf00e8, QImode},\n+  {0xffff0, HImode},\n+  {0xffff2, HImode},\n+  {0xf2224, HImode},\n+  {0xf00e0, HImode},\n+  {0xf00e2, HImode}\n+};\n+\n struct GTY(()) machine_function\n {\n   /* If set, the rest of the fields have been computed.  */\n@@ -317,6 +334,10 @@ rl78_output_symbol_ref (FILE * file, rtx sym)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\trl78_option_override\n \n+#define MUST_SAVE_MDUC_REGISTERS\t\t\t\\\n+  (TARGET_SAVE_MDUC_REGISTERS\t\t\t\t\\\n+   && (is_interrupt_func (NULL_TREE)) && RL78_MUL_G13)\n+\n static void\n rl78_option_override (void)\n {\n@@ -344,6 +365,9 @@ rl78_option_override (void)\n     /* Address spaces are currently only supported by C.  */\n     error (\"-mes0 can only be used with C\");\n \n+  if (TARGET_SAVE_MDUC_REGISTERS && !(TARGET_G13 || RL78_MUL_G13))\n+    warning (0, \"mduc registers only saved for G13 target\");\n+\n   switch (rl78_cpu_type)\n     {\n     case CPU_UNINIT:\n@@ -1257,13 +1281,34 @@ rl78_initial_elimination_offset (int from, int to)\n   return rv;\n }\n \n-static int\n+static bool\n rl78_is_naked_func (void)\n {\n   return (lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl)) != NULL_TREE);\n }\n \n+/* Check if the block uses mul/div insns for G13 target.  */\n+\n+static bool\n+check_mduc_usage (void)\n+{\n+  rtx_insn * insn;\n+  basic_block bb;\n+\n+  FOR_EACH_BB_FN (bb, cfun)\n+    {\n+      FOR_BB_INSNS (bb, insn)\n+        {\n+          if (INSN_P (insn)\n+              && (get_attr_is_g13_muldiv_insn (insn) == IS_G13_MULDIV_INSN_YES))\n+\t    return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Expand the function prologue (from the prologue pattern).  */\n+\n void\n rl78_expand_prologue (void)\n {\n@@ -1278,6 +1323,9 @@ rl78_expand_prologue (void)\n   /* Always re-compute the frame info - the register usage may have changed.  */\n   rl78_compute_frame_info ();\n \n+  if (MUST_SAVE_MDUC_REGISTERS && (!crtl->is_leaf || check_mduc_usage ()))\n+    cfun->machine->framesize += ARRAY_SIZE (mduc_regs) * 2;\n+\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun->machine->framesize;\n \n@@ -1327,6 +1375,24 @@ rl78_expand_prologue (void)\n       F (emit_insn (gen_push (ax)));\n     }\n \n+  /* Save MDUC registers inside interrupt routine.  */\n+  if (MUST_SAVE_MDUC_REGISTERS && (!crtl->is_leaf || check_mduc_usage ()))\n+    {\n+      for (int i = 0; i < ARRAY_SIZE (mduc_regs); i++)\n+        {\n+          mduc_reg_type *reg = mduc_regs + i;\n+          rtx mem_mduc = gen_rtx_MEM (reg->mode, GEN_INT (reg->address));\n+\n+          MEM_VOLATILE_P (mem_mduc) = 1;\n+          if (reg->mode == QImode)\n+            emit_insn (gen_movqi (gen_rtx_REG (QImode, A_REG), mem_mduc));\n+          else\n+            emit_insn (gen_movhi (gen_rtx_REG (HImode, AX_REG), mem_mduc));\n+\n+          emit_insn (gen_push (gen_rtx_REG (HImode, AX_REG)));\n+        }\n+    }\n+\n   if (frame_pointer_needed)\n     {\n       F (emit_move_insn (ax, sp));\n@@ -1400,6 +1466,23 @@ rl78_expand_epilogue (void)\n \t}\n     }\n \n+  /* Restore MDUC registers from interrupt routine.  */\n+  if (MUST_SAVE_MDUC_REGISTERS && (!crtl->is_leaf || check_mduc_usage ()))\n+    {\n+      for (int i = ARRAY_SIZE (mduc_regs) - 1; i >= 0; i--)\n+        {\n+          mduc_reg_type *reg = mduc_regs + i;\n+          rtx mem_mduc = gen_rtx_MEM (reg->mode, GEN_INT (reg->address));\n+\n+          emit_insn (gen_pop (gen_rtx_REG (HImode, AX_REG)));\n+          MEM_VOLATILE_P (mem_mduc) = 1;\n+          if (reg->mode == QImode)\n+            emit_insn (gen_movqi (mem_mduc, gen_rtx_REG (QImode, A_REG)));\n+          else\n+            emit_insn (gen_movhi (mem_mduc, gen_rtx_REG (HImode, AX_REG)));\n+        }\n+    }\n+\n   if (is_interrupt_func (cfun->decl) && cfun->machine->uses_es)\n     {\n       emit_insn (gen_pop (gen_rtx_REG (HImode, AX_REG)));\n@@ -1495,6 +1578,9 @@ rl78_start_function (FILE *file, HOST_WIDE_INT hwi_local ATTRIBUTE_UNUSED)\n \n   if (cfun->machine->uses_es)\n     fprintf (file, \"\\t; uses ES register\\n\");\n+\n+  if (MUST_SAVE_MDUC_REGISTERS)\n+    fprintf (file, \"\\t; preserves MDUC registers\\n\");\n }\n \n /* Return an RTL describing where a function return value of type RET_TYPE"}, {"sha": "33bd198853750e013712cf42b4e1eb930a9fee80", "filename": "gcc/config/rl78/rl78.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.md?ref=035b8879acaccdbf52d24730fe241e97d660d53d", "patch": "@@ -67,6 +67,7 @@\n (include \"rl78-virt.md\")\n (include \"rl78-real.md\")\n \n+(define_attr \"is_g13_muldiv_insn\" \"yes,no\" (const_string \"no\"))\n \n ;; Function Prologue/Epilogue Instructions\n \n@@ -379,7 +380,8 @@\n \tmovw    ax, 0xffff6     ; MDBL\n \tmovw    %h0, ax\n         ; end of mulhi macro\"\n-  [(set_attr \"valloc\" \"macax\")]\n+  [(set_attr \"valloc\" \"macax\")\n+   (set_attr \"is_g13_muldiv_insn\" \"yes\")]\n )\n \n ;; 0xFFFF0 is MACR(L).  0xFFFF2 is MACR(H) but we don't care about it\n@@ -459,7 +461,8 @@\n \tmovw\tax, !0xf00e0\t; MDCL\n \tmovw\t%H0, ax\n \t; end of mulsi macro\"\n-  [(set_attr \"valloc\" \"macax\")]\n+  [(set_attr \"valloc\" \"macax\")\n+   (set_attr \"is_g13_muldiv_insn\" \"yes\")]\n )\n \n (define_expand \"udivmodhi4\"\n@@ -692,5 +695,6 @@\n \tmovw\t%H3, ax\t\t\\n\\\n \t; end of udivmodsi macro\";\n       }\n-  [(set_attr \"valloc\" \"macax\")]\n+  [(set_attr \"valloc\" \"macax\")\n+   (set_attr \"is_g13_muldiv_insn\" \"yes\")]\n )"}, {"sha": "26db67cb6587803763fb0da1e4fe80fb501e9e5e", "filename": "gcc/config/rl78/rl78.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fconfig%2Frl78%2Frl78.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.opt?ref=035b8879acaccdbf52d24730fe241e97d660d53d", "patch": "@@ -91,3 +91,7 @@ Alias for -mcpu=g14.\n mes0\n Target Mask(ES0)\n Assume ES is zero throughout program execution, use ES: for read-only data.\n+\n+msave-mduc-in-interrupts\n+Target Mask(SAVE_MDUC_REGISTERS)\n+Stores the MDUC registers in interrupt handlers for G13 target."}, {"sha": "908dbe856eed559813aa839667649ee83a5a4229", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/035b8879acaccdbf52d24730fe241e97d660d53d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=035b8879acaccdbf52d24730fe241e97d660d53d", "patch": "@@ -947,7 +947,7 @@ See RS/6000 and PowerPC Options.\n @emph{RL78 Options}\n @gccoptlist{-msim -mmul=none -mmul=g13 -mmul=g14 -mallregs @gol\n -mcpu=g10 -mcpu=g13 -mcpu=g14 -mg10 -mg13 -mg14 @gol\n--m64bit-doubles -m32bit-doubles}\n+-m64bit-doubles -m32bit-doubles -msave-mduc-in-interrupts}\n \n @emph{RS/6000 and PowerPC Options}\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n@@ -19783,6 +19783,20 @@ Make the @code{double} data type be 64 bits (@option{-m64bit-doubles})\n or 32 bits (@option{-m32bit-doubles}) in size.  The default is\n @option{-m32bit-doubles}.\n \n+@item -msave-mduc-in-interrupts\n+@item -mno-save-mduc-in-interrupts\n+@opindex msave-mduc-in-interrupts\n+@opindex mno-save-mduc-in-interrupts\n+Specifies that interrupt handler functions should preserve the\n+MDUC registers.  This is only necessary if normal code might use\n+the MDUC registers, for example because it performs multiplication\n+and division operations.  The default is to ignore the MDUC registers\n+as this makes the interrupt handlers faster.  The target option -mg13\n+needs to be passed for this to work as this feature is only available\n+on the G13 target (S2 core).  The MDUC registers will only be saved\n+if the interrupt handler performs a multiplication or division\n+operation or it calls another function.\n+\n @end table\n \n @node RS/6000 and PowerPC Options"}]}