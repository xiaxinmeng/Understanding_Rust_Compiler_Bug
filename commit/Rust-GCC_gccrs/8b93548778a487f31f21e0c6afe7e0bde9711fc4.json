{"sha": "8b93548778a487f31f21e0c6afe7e0bde9711fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5MzU0ODc3OGE0ODdmMzFmMjFlMGM2YWZlN2UwYmRlOTcxMWZjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T16:54:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-15T17:20:06Z"}, "message": "libstdc++: Make ranges CPOs final and not addressable\n\nThis restricts the API of the CPOs and other function objects so they\ncannot be misused by deriving from them or taking their addresses.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n\t(ranges::cbegin, ranges::cend, ranges::rbeing, ranges::rend)\n\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n\t(ranges::empty, ranges::data, ranges::cdata): Make types final.\n\tAdd deleted operator& overloads.\n\t(ranges::advance, ranges::distance, ranges::next, ranges::prev):\n\tLikewise.\n\t* testsuite/std/ranges/headers/ranges/synopsis.cc: Replace\n\till-formed & expressions with using-declarations. Add checks for\n\tother function objects.", "tree": {"sha": "7cef219dca5d79e16872fc66c0906f634c473c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cef219dca5d79e16872fc66c0906f634c473c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b93548778a487f31f21e0c6afe7e0bde9711fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b93548778a487f31f21e0c6afe7e0bde9711fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b93548778a487f31f21e0c6afe7e0bde9711fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b93548778a487f31f21e0c6afe7e0bde9711fc4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9245b0e84c262cc5fd8373e94de3d23a3807b122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9245b0e84c262cc5fd8373e94de3d23a3807b122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9245b0e84c262cc5fd8373e94de3d23a3807b122"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "e392c370fcd335832673d1db1ac3f42c1e6463e6", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b93548778a487f31f21e0c6afe7e0bde9711fc4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b93548778a487f31f21e0c6afe7e0bde9711fc4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=8b93548778a487f31f21e0c6afe7e0bde9711fc4", "patch": "@@ -91,7 +91,7 @@ namespace ranges\n     using std::ranges::__detail::__maybe_borrowed_range;\n     using std::__detail::__range_iter_t;\n \n-    struct _Begin\n+    struct _Begin final\n     {\n     private:\n       template<typename _Tp>\n@@ -106,6 +106,8 @@ namespace ranges\n \t    return noexcept(__decay_copy(begin(std::declval<_Tp&>())));\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n@@ -142,7 +144,7 @@ namespace ranges\n \t  { __decay_copy(end(__t)) } -> sentinel_for<__range_iter_t<_Tp>>;\n \t};\n \n-    struct _End\n+    struct _End final\n     {\n     private:\n       template<typename _Tp>\n@@ -157,6 +159,8 @@ namespace ranges\n \t    return noexcept(__decay_copy(end(std::declval<_Tp&>())));\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n@@ -189,7 +193,7 @@ namespace ranges\n \t  return static_cast<const _Tp&&>(__t);\n       }\n \n-    struct _CBegin\n+    struct _CBegin final\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -199,9 +203,11 @@ namespace ranges\n \t{\n \t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n-    struct _CEnd\n+    struct _CEnd final\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -211,6 +217,8 @@ namespace ranges\n \t{\n \t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -236,7 +244,7 @@ namespace ranges\n \t  { _End{}(__t) } -> same_as<decltype(_Begin{}(__t))>;\n \t};\n \n-    struct _RBegin\n+    struct _RBegin final\n     {\n     private:\n       template<typename _Tp>\n@@ -260,6 +268,8 @@ namespace ranges\n \t    }\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n@@ -294,7 +304,7 @@ namespace ranges\n \t    -> sentinel_for<decltype(_RBegin{}(std::forward<_Tp>(__t)))>;\n \t};\n \n-    struct _REnd\n+    struct _REnd final\n     {\n     private:\n       template<typename _Tp>\n@@ -318,6 +328,8 @@ namespace ranges\n \t    }\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n@@ -334,7 +346,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _CRBegin\n+    struct _CRBegin final\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -344,9 +356,11 @@ namespace ranges\n \t{\n \t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n-    struct _CREnd\n+    struct _CREnd final\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -356,6 +370,8 @@ namespace ranges\n \t{\n \t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -386,7 +402,7 @@ namespace ranges\n \t  __detail::__to_unsigned_like(_End{}(__t) - _Begin{}(__t));\n \t};\n \n-    struct _Size\n+    struct _Size final\n     {\n     private:\n       template<typename _Tp>\n@@ -404,6 +420,8 @@ namespace ranges\n \t\t\t    - _Begin{}(std::declval<_Tp&>()));\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<typename _Tp>\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n@@ -422,7 +440,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _SSize\n+    struct _SSize final\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3403. Domain of ranges::ssize(E) doesn't match ranges::size(E)\n@@ -451,6 +469,8 @@ namespace ranges\n \t  else // Must be one of __max_diff_type or __max_size_type.\n \t    return __detail::__max_diff_type(__size);\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n     template<typename _Tp>\n@@ -467,7 +487,7 @@ namespace ranges\n \t  bool(_Begin{}(__t) == _End{}(__t));\n \t};\n \n-    struct _Empty\n+    struct _Empty final\n     {\n     private:\n       template<typename _Tp>\n@@ -483,6 +503,8 @@ namespace ranges\n \t\t== _End{}(std::declval<_Tp&>())));\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<typename _Tp>\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n@@ -512,7 +534,7 @@ namespace ranges\n     template<typename _Tp>\n       concept __begin_data = contiguous_iterator<__range_iter_t<_Tp>>;\n \n-    struct _Data\n+    struct _Data final\n     {\n     private:\n       template<typename _Tp>\n@@ -525,6 +547,8 @@ namespace ranges\n \t    return noexcept(_Begin{}(std::declval<_Tp&>()));\n \t}\n \n+      void operator&() const = delete;\n+\n     public:\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_data<_Tp> || __begin_data<_Tp>\n@@ -538,7 +562,7 @@ namespace ranges\n \t}\n     };\n \n-    struct _CData\n+    struct _CData final\n     {\n       template<typename _Tp>\n \tconstexpr auto\n@@ -548,6 +572,8 @@ namespace ranges\n \t{\n \t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+\n+      void operator&() const = delete;\n     };\n \n   } // namespace __cust_access\n@@ -669,7 +695,7 @@ namespace ranges\n \n   // [range.iter.ops] range iterator operations\n \n-  struct __advance_fn\n+  struct __advance_fn final\n   {\n     template<input_or_output_iterator _It>\n       constexpr void\n@@ -774,11 +800,13 @@ namespace ranges\n \t    return __n;\n \t  }\n       }\n+\n+    void operator&() const = delete;\n   };\n \n   inline constexpr __advance_fn advance{};\n \n-  struct __distance_fn\n+  struct __distance_fn final\n   {\n     template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n       constexpr iter_difference_t<_It>\n@@ -807,11 +835,13 @@ namespace ranges\n \telse\n \t  return (*this)(ranges::begin(__r), ranges::end(__r));\n       }\n+\n+    void operator&() const = delete;\n   };\n \n   inline constexpr __distance_fn distance{};\n \n-  struct __next_fn\n+  struct __next_fn final\n   {\n     template<input_or_output_iterator _It>\n       constexpr _It\n@@ -844,11 +874,13 @@ namespace ranges\n \tranges::advance(__x, __n, __bound);\n \treturn __x;\n       }\n+\n+    void operator&() const = delete;\n   };\n \n   inline constexpr __next_fn next{};\n \n-  struct __prev_fn\n+  struct __prev_fn final\n   {\n     template<bidirectional_iterator _It>\n       constexpr _It\n@@ -873,6 +905,8 @@ namespace ranges\n \tranges::advance(__x, -__n, __bound);\n \treturn __x;\n       }\n+\n+    void operator&() const = delete;\n   };\n \n   inline constexpr __prev_fn prev{};"}, {"sha": "ea26b5056787eec627cce0f40ffaf7875be7f355", "filename": "libstdc++-v3/testsuite/std/ranges/headers/ranges/synopsis.cc", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b93548778a487f31f21e0c6afe7e0bde9711fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b93548778a487f31f21e0c6afe7e0bde9711fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fheaders%2Franges%2Fsynopsis.cc?ref=8b93548778a487f31f21e0c6afe7e0bde9711fc4", "patch": "@@ -33,12 +33,22 @@ namespace __gnu_test\n {\n   constexpr const bool* disable_sized_range\n     = &std::ranges::disable_sized_range<void>;\n-  constexpr auto* begin = &std::ranges::begin;\n-  constexpr auto* end = &std::ranges::end;\n-  constexpr auto* cbegin = &std::ranges::cbegin;\n-  constexpr auto* cend = &std::ranges::cend;\n-  constexpr auto* rbegin = &std::ranges::rbegin;\n-  constexpr auto* rend = &std::ranges::rend;\n-  constexpr auto* crbegin = &std::ranges::crbegin;\n-  constexpr auto* crend = &std::ranges::crend;\n+  using std::ranges::begin;\n+  using std::ranges::end;\n+  using std::ranges::cbegin;\n+  using std::ranges::cend;\n+  using std::ranges::rbegin;\n+  using std::ranges::rend;\n+  using std::ranges::crbegin;\n+  using std::ranges::crend;\n+  using std::ranges::size;\n+  using std::ranges::ssize;\n+  using std::ranges::empty;\n+  using std::ranges::data;\n+  using std::ranges::cdata;\n+\n+  using std::ranges::advance;\n+  using std::ranges::distance;\n+  using std::ranges::next;\n+  using std::ranges::prev;\n }"}]}