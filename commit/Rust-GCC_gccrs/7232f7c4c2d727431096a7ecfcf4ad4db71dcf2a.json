{"sha": "7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIzMmY3YzRjMmQ3Mjc0MzEwOTZhN2VjZmNmNGFkNGRiNzFkY2YyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-13T18:00:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-21T14:50:01Z"}, "message": "expand: empty class return optimization [PR88529]\n\nThe x86_64 psABI says that an empty class isn't passed or returned in memory\nor registers, so we shouldn't set %eax in this function.\n\nThe df-scan hunk catches the case where we look at a 0-length reg and build\na range the length of unsigned int, which happened before I changed\nassign_parms to match expand_function_end.\n\n\tPR target/88529\n\ngcc/ChangeLog:\n\n\t* df-scan.c (df_ref_record): Check that regno < endregno.\n\t* function.c (assign_parms, expand_function_end): Do nothing with a\n\tTYPE_EMPTY_P result.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/empty-class1.C: New test.", "tree": {"sha": "2705e5c36221bf19624c09c493ee9bd193a4cc94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2705e5c36221bf19624c09c493ee9bd193a4cc94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12bdd39755a25d237b7776153cbe03e171396fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bdd39755a25d237b7776153cbe03e171396fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bdd39755a25d237b7776153cbe03e171396fc5"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "e9da64ff3df399c23b496f3424cc6ba0ed17b7bf", "filename": "gcc/df-scan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "patch": "@@ -2595,6 +2595,8 @@ df_ref_record (enum df_ref_class cl,\n \t    ref_flags |= DF_REF_PARTIAL;\n \t  ref_flags |= DF_REF_MW_HARDREG;\n \n+\t  gcc_assert (regno < endregno);\n+\n \t  hardreg = problem_data->mw_reg_pool->allocate ();\n \t  hardreg->type = ref_type;\n \t  hardreg->flags = ref_flags;"}, {"sha": "6abaf3d116f1f00c9ca8e3139e585415d2f9bd01", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "patch": "@@ -3821,9 +3821,11 @@ assign_parms (tree fndecl)\n       tree decl_result = DECL_RESULT (fndecl);\n       rtx decl_rtl = DECL_RTL (decl_result);\n \n-      if (REG_P (decl_rtl)\n-\t  ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n-\t  : DECL_REGISTER (decl_result))\n+      if ((REG_P (decl_rtl)\n+\t   ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n+\t   : DECL_REGISTER (decl_result))\n+\t  /* Unless the psABI says not to.  */\n+\t  && !TYPE_EMPTY_P (TREE_TYPE (decl_result)))\n \t{\n \t  rtx real_decl_rtl;\n \n@@ -5410,9 +5412,11 @@ expand_function_end (void)\n       tree decl_result = DECL_RESULT (current_function_decl);\n       rtx decl_rtl = DECL_RTL (decl_result);\n \n-      if (REG_P (decl_rtl)\n-\t  ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n-\t  : DECL_REGISTER (decl_result))\n+      if ((REG_P (decl_rtl)\n+\t   ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n+\t   : DECL_REGISTER (decl_result))\n+\t  /* Unless the psABI says not to.  */\n+\t  && !TYPE_EMPTY_P (TREE_TYPE (decl_result)))\n \t{\n \t  rtx real_decl_rtl = crtl->return_rtx;\n \t  complex_mode cmode;"}, {"sha": "c1992772d269e7576f05ca273d7e13c7b85c3170", "filename": "gcc/testsuite/g++.target/i386/empty-class1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fempty-class1.C?ref=7232f7c4c2d727431096a7ecfcf4ad4db71dcf2a", "patch": "@@ -0,0 +1,9 @@\n+// PR target/88529\n+// { dg-do compile { target { c++11 && x86_64-*-* } } }\n+// { dg-additional-options -fdump-rtl-expand }\n+// { dg-final { scan-rtl-dump-not \"set\" \"expand\" } }\n+// The x86_64 psABI says that f() doesn't put the return value anywhere.\n+\n+class A{};\n+\n+A f() { return {}; }"}]}