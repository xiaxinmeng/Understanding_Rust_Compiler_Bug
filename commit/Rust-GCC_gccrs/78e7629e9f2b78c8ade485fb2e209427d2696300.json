{"sha": "78e7629e9f2b78c8ade485fb2e209427d2696300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlNzYyOWU5ZjJiNzhjOGFkZTQ4NWZiMmUyMDk0MjdkMjY5NjMwMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-01T03:22:21Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-01T03:22:21Z"}, "message": "builtins.c (expand_builtin_strstr): New function.\n\n\t* builtins.c (expand_builtin_strstr): New function.\n\t(expand_builtin): Handle BUILT_IN_STRSTR and BUILT_IN_STRCHR.\n\n\t* builtins.def (BUILT_IN_STRSTR, BUILT_IN_STRCHR): New entries.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare builtin strstr\n\tand builtin strchr.\n\nFrom-SVN: r37181", "tree": {"sha": "e4e757584dc941d8bee942e484a6fd8344b8fa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e757584dc941d8bee942e484a6fd8344b8fa09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e7629e9f2b78c8ade485fb2e209427d2696300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7629e9f2b78c8ade485fb2e209427d2696300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e7629e9f2b78c8ade485fb2e209427d2696300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7629e9f2b78c8ade485fb2e209427d2696300/comments", "author": null, "committer": null, "parents": [{"sha": "9f56c00431885c8a5dd23d872beb232546e00a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f56c00431885c8a5dd23d872beb232546e00a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f56c00431885c8a5dd23d872beb232546e00a9c"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "c89515b510902936bf38463108815d2c2025492b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e7629e9f2b78c8ade485fb2e209427d2696300", "patch": "@@ -1,3 +1,13 @@\n+2000-10-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strstr): New function.\n+\t(expand_builtin): Handle BUILT_IN_STRSTR and BUILT_IN_STRCHR.\n+\n+\t* builtins.def (BUILT_IN_STRSTR, BUILT_IN_STRCHR): New entries.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare builtin strstr\n+\tand builtin strchr.\n+\n 2000-10-31  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (fcmov_comparison_operator): Check for"}, {"sha": "abb67476cd6d2da9887264c7f077f9d3b0d4b0f0", "filename": "gcc/builtins.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=78e7629e9f2b78c8ade485fb2e209427d2696300", "patch": "@@ -108,6 +108,8 @@ static rtx expand_builtin_memset\tPARAMS ((tree));\n static rtx expand_builtin_bzero\t\tPARAMS ((tree));\n static rtx expand_builtin_strlen\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strstr\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n@@ -1431,6 +1433,64 @@ expand_builtin_strlen (exp, target, mode)\n     }\n }\n \n+/* Expand a call to the strstr builtin.  Return 0 if we failed the\n+   caller should emit a normal call, otherwise try to get the result\n+   in TARGET, if convenient (and in mode MODE if that's convenient).  */\n+\n+static rtx\n+expand_builtin_strstr (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  if (arglist == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE)\n+    return 0;\n+  else\n+    {\n+      tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n+      tree len = c_strlen (s2);\n+\n+      if (!len)\n+\treturn 0;\n+\n+      switch (compare_tree_int (len, 1))\n+        {\n+\tcase -1: /* length is 0, return s1.  */\n+\t  return expand_expr (s1, target, mode, EXPAND_NORMAL);\n+\tcase 0: /* length is 1, return strchr(s1, s2[0]).  */\n+\t  {\n+\t    tree call_expr, fn = built_in_decls[BUILT_IN_STRCHR];\n+\n+\t    if (!fn)\n+\t      return 0;\n+\t    STRIP_NOPS (s2);\n+\t    if (s2 && TREE_CODE (s2) == ADDR_EXPR)\n+\t      s2 = TREE_OPERAND (s2, 0);\n+\n+\t    /* New argument list transforming strstr(s1, s2) to\n+\t       strchr(s1, s2[0]).  */\n+\t    arglist =\n+\t      build_tree_list (NULL_TREE,\n+\t\t\t       build_int_2 (TREE_STRING_POINTER (s2)[0], 0));\n+\t    arglist = tree_cons (NULL_TREE, s1, arglist);\n+\t    call_expr = build1 (ADDR_EXPR,\n+\t\t\t\tbuild_pointer_type (TREE_TYPE (fn)), fn);\n+\t    call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t       call_expr, arglist, NULL_TREE);\n+\t    TREE_SIDE_EFFECTS (call_expr) = 1;\n+\t    return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t  }\n+\tcase 1: /* length is greater than 1, really call strstr.  */\n+\t  return 0;\n+\tdefault:\n+\t  abort();\n+\t}\n+    }\n+}\n+\n /* Expand a call to the memcpy builtin, with arguments in ARGLIST.  */\n static rtx\n expand_builtin_memcpy (arglist)\n@@ -2475,6 +2535,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n+\t  || fcode == BUILT_IN_STRSTR\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n \t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n \t  || fcode == BUILT_IN_PRINTF || fcode == BUILT_IN_FPUTC\n@@ -2603,6 +2664,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_STRSTR:\n+      target = expand_builtin_strstr (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n     case BUILT_IN_MEMCPY:\n       target = expand_builtin_memcpy (arglist);\n       if (target)\n@@ -2696,6 +2763,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_PUTS:\n     case BUILT_IN_FPUTC:\n     case BUILT_IN_FWRITE:\n+    case BUILT_IN_STRCHR:\n       break;\n       \n     case BUILT_IN_FPUTS:"}, {"sha": "13e0f41839ec3c63cbbe56ff3ec6346ad853cf34", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=78e7629e9f2b78c8ade485fb2e209427d2696300", "patch": "@@ -39,6 +39,8 @@ DEF_BUILTIN(BUILT_IN_BCMP)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)\n+DEF_BUILTIN(BUILT_IN_STRSTR)\n+DEF_BUILTIN(BUILT_IN_STRCHR)\n DEF_BUILTIN(BUILT_IN_FSQRT)\n DEF_BUILTIN(BUILT_IN_SIN)\n DEF_BUILTIN(BUILT_IN_COS)"}, {"sha": "03875fae59d58c70ab31578f36b7dd9fc766f97a", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7629e9f2b78c8ade485fb2e209427d2696300/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=78e7629e9f2b78c8ade485fb2e209427d2696300", "patch": "@@ -4819,6 +4819,7 @@ c_common_nodes_and_builtins ()\n   tree float_ftype_float, ldouble_ftype_ldouble;\n   tree int_ftype_cptr_cptr_sizet;\n   tree int_ftype_string_string, string_ftype_ptr_ptr;\n+  tree string_ftype_string_int, string_ftype_string_string;\n   tree long_ftype_long;\n   tree longlong_ftype_longlong;\n   /* Either char* or void*.  */\n@@ -4933,6 +4934,22 @@ c_common_nodes_and_builtins ()\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* Prototype for strstr, etc.  */\n+  string_ftype_string_string\n+    = build_function_type (string_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n+  /* Prototype for strchr.  */\n+  string_ftype_string_int\n+    = build_function_type (string_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n   /* Prototype for strlen.  */\n   strlen_ftype\n     = build_function_type (traditional_len_type_node,\n@@ -5154,6 +5171,11 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_BCMP, BUILT_IN_NORMAL, \"bcmp\");\n   builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n \t\t    BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n+  builtin_function (\"__builtin_strstr\", string_ftype_string_string,\n+\t\t    BUILT_IN_STRSTR, BUILT_IN_NORMAL, \"strstr\");\n+  built_in_decls[BUILT_IN_STRCHR] =\n+    builtin_function (\"__builtin_strchr\", string_ftype_string_int,\n+\t\t    BUILT_IN_STRCHR, BUILT_IN_NORMAL, \"strchr\");\n   builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n \t\t    BUILT_IN_STRCPY, BUILT_IN_NORMAL, \"strcpy\");\n   builtin_function (\"__builtin_strlen\", strlen_ftype,\n@@ -5222,6 +5244,8 @@ c_common_nodes_and_builtins ()\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strcmp\", int_ftype_string_string, BUILT_IN_STRCMP,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strstr\", string_ftype_string_string, BUILT_IN_STRSTR,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN,"}]}