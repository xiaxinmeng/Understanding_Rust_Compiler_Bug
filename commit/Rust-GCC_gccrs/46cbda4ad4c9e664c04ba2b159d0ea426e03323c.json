{"sha": "46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjYmRhNGFkNGM5ZTY2NGMwNGJhMmIxNTlkMGVhNDI2ZTAzMzIzYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-10T06:19:35Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-10T06:19:35Z"}, "message": "decl.c (build_ptrmemfunc_type): Handle qualified pointer-to-member types here.\n\n\t* decl.c (build_ptrmemfunc_type): Handle qualified\n\tpointer-to-member types here.\n\t* tree.c (cp_build_qualified_type_real): Simplify handling here.\n\nFrom-SVN: r28642", "tree": {"sha": "9dab6d3fd3ce567ec4e322811b19662edf17837b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dab6d3fd3ce567ec4e322811b19662edf17837b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/comments", "author": null, "committer": null, "parents": [{"sha": "7941ceabf0f14279e93443a63ca4d355f3a88830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7941ceabf0f14279e93443a63ca4d355f3a88830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7941ceabf0f14279e93443a63ca4d355f3a88830"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "b6fd5428cf8775e430e8bb6f2084d4ae6307bedd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "patch": "@@ -1,3 +1,9 @@\n+1999-08-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (build_ptrmemfunc_type): Handle qualified\n+\tpointer-to-member types here.\n+\t* tree.c (cp_build_qualified_type_real): Simplify handling here.\n+\n 1999-08-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n         * decl.c: Remove redundant prototype for `print_error_function'."}, {"sha": "c628ebf3eb2d600d0530f68b35f1b0c50dd6d1a1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "patch": "@@ -8810,6 +8810,7 @@ build_ptrmemfunc_type (type)\n   tree fields[4];\n   tree t;\n   tree u;\n+  tree unqualified_variant = NULL_TREE;\n \n   /* If a canonical type already exists for this type, use it.  We use\n      this method instead of type_hash_canon, because it only does a\n@@ -8818,6 +8819,12 @@ build_ptrmemfunc_type (type)\n   if ((t = TYPE_GET_PTRMEMFUNC_TYPE (type)))\n     return t;\n \n+  /* Make sure that we always have the unqualified pointer-to-member\n+     type first.  */\n+  if (CP_TYPE_QUALS (type) != TYPE_UNQUALIFIED)\n+    unqualified_variant \n+      = build_ptrmemfunc_type (TYPE_MAIN_VARIANT (type));\n+\n   push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n \n   u = make_lang_type (UNION_TYPE);\n@@ -8848,10 +8855,25 @@ build_ptrmemfunc_type (type)\n      information for this anonymous RECORD_TYPE.  */\n   TYPE_NAME (t) = NULL_TREE;\n \n+  /* If this is not the unqualified form of this pointer-to-member\n+     type, set the TYPE_MAIN_VARIANT for this type to be the\n+     unqualified type.  Since they are actually RECORD_TYPEs that are\n+     not variants of each other, we must do this manually.  */\n+  if (CP_TYPE_QUALS (type) != TYPE_UNQUALIFIED)\n+    {\n+      t = build_qualified_type (t, CP_TYPE_QUALS (type));\n+      TYPE_MAIN_VARIANT (t) = unqualified_variant;\n+      TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (unqualified_variant);\n+      TYPE_NEXT_VARIANT (unqualified_variant) = t;\n+    }\n+\n+  /* Cache this pointer-to-member type so that we can find it again\n+     later.  */\n   TYPE_SET_PTRMEMFUNC_TYPE (type, t);\n \n   /* Seems to be wanted.  */\n   CLASSTYPE_GOT_SEMICOLON (t) = 1;\n+\n   return t;\n }\n "}, {"sha": "281e7a7eae9135bbb011ca9e83b0ca9e87c1c1ec", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "patch": "@@ -583,7 +583,7 @@ cp_build_qualified_type_real (type, type_quals, complain)\n \n       t = TYPE_PTRMEMFUNC_FN_TYPE (type);\n       t = cp_build_qualified_type_real (t, type_quals, complain);\n-      return build_qualified_type (build_ptrmemfunc_type (t), type_quals);\n+      return build_ptrmemfunc_type (t);\n     }\n \n   /* Retrieve (or create) the appropriately qualified variant.  */"}, {"sha": "9963a15ab6fad47d06472b6636508b1e95100867", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ptrmem9.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cbda4ad4c9e664c04ba2b159d0ea426e03323c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem9.C?ref=46cbda4ad4c9e664c04ba2b159d0ea426e03323c", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link:\n+// Origin: Jason Merrill <jason@cygnus.com>\n+\n+struct A;\n+template <class T> void f (void (A::* const)(T)) {}\n+void (*p)(void (A::* const)(int)) = f;"}]}