{"sha": "6d2648763a1b8a74a85d04139c5d1391056810fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyNjQ4NzYzYTFiOGE3NGE4NWQwNDEzOWM1ZDEzOTEwNTY4MTBmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-19T14:27:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-19T14:27:57Z"}, "message": "re PR tree-optimization/87657 (SLP ICE in libgfortran matmul_i2_vanilla)\n\n2018-10-19  Richard Biener  <rguenther@suse.de>\n\n\tPR target/87657\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Use\n\tTYPE_VECTOR_SUBPARTS and avoid relying on vector mode.\n\n\t* gcc.target/i386/pr87657.c: New testcase.\n\nFrom-SVN: r265316", "tree": {"sha": "f3bd4d357918551739de39dcded5d5399a25e856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bd4d357918551739de39dcded5d5399a25e856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d2648763a1b8a74a85d04139c5d1391056810fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2648763a1b8a74a85d04139c5d1391056810fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2648763a1b8a74a85d04139c5d1391056810fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2648763a1b8a74a85d04139c5d1391056810fa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30f7c08d96556c4fdbe772240a085f5d8c2393a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f7c08d96556c4fdbe772240a085f5d8c2393a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f7c08d96556c4fdbe772240a085f5d8c2393a4"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "082ef49dcb03a61c6a9842b39fd07c759e02a505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d2648763a1b8a74a85d04139c5d1391056810fa", "patch": "@@ -1,3 +1,9 @@\n+2018-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/87657\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Use\n+\tTYPE_VECTOR_SUBPARTS and avoid relying on vector mode.\n+\n 2018-10-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "963c7fcbb34443c606c3c7b08be63f053c362892", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6d2648763a1b8a74a85d04139c5d1391056810fa", "patch": "@@ -45173,9 +45173,8 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \n       case vec_construct:\n \t{\n-\t  gcc_assert (VECTOR_MODE_P (mode));\n \t  /* N element inserts into SSE vectors.  */\n-\t  int cost = GET_MODE_NUNITS (mode) * ix86_cost->sse_op;\n+\t  int cost = TYPE_VECTOR_SUBPARTS (vectype) * ix86_cost->sse_op;\n \t  /* One vinserti128 for combining two SSE vectors for AVX256.  */\n \t  if (GET_MODE_BITSIZE (mode) == 256)\n \t    cost += ix86_vec_cost (mode, ix86_cost->addss);"}, {"sha": "4fd3f91c860f25f39771b85cfca67c3129397a66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d2648763a1b8a74a85d04139c5d1391056810fa", "patch": "@@ -1,3 +1,8 @@\n+2018-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/87657\n+\t* gcc.target/i386/pr87657.c: New testcase.\n+\n 2018-10-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "14ba6b4757d7d84c2556e3dc94d15cd31e7503ba", "filename": "gcc/testsuite/gcc.target/i386/pr87657.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87657.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2648763a1b8a74a85d04139c5d1391056810fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87657.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87657.c?ref=6d2648763a1b8a74a85d04139c5d1391056810fa", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize -fno-vect-cost-model -mno-sse\" } */\n+\n+int x;\n+\n+void foo (short a, short b)\n+{\n+  ((short *)&x)[0] = a;\n+  ((short *)&x)[1] = b;\n+}\n+\n+#if __SIZEOF_LONG__ == 8\n+long y;\n+\n+void bar (short a, short b)\n+{\n+  ((short *)&y)[0] = a;\n+  ((short *)&y)[1] = b;\n+  ((short *)&y)[2] = a;\n+  ((short *)&y)[3] = b;\n+}\n+#endif"}]}