{"sha": "79069232df7ae1f59c68bbe90804a30c2dbec5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkwNjkyMzJkZjdhZTFmNTljNjhiYmU5MDgwNGEzMGMyZGJlYzVkMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-05-28T08:25:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-05-28T08:25:32Z"}, "message": "trans.c (lvalue_required_for_attribute_p): Return 0 for 'Size too.\n\n\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Return 0\n\tfor 'Size too.\n\t(Identifier_to_gnu): Use the actual subtype for a reference to a\n\tpacked array in a return statement.\n\t(Attribute_to_gnu) <Attr_Size>: Do not strip VIEW_CONVERT_EXPRs from\n\tthe prefix in every case.\n\nFrom-SVN: r271691", "tree": {"sha": "ab4d1c705f277729743c589ab3788d62f1996ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab4d1c705f277729743c589ab3788d62f1996ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79069232df7ae1f59c68bbe90804a30c2dbec5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79069232df7ae1f59c68bbe90804a30c2dbec5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79069232df7ae1f59c68bbe90804a30c2dbec5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79069232df7ae1f59c68bbe90804a30c2dbec5d3/comments", "author": null, "committer": null, "parents": [{"sha": "f552aa626fbfa268b819395d1c5d25ca3ca78428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f552aa626fbfa268b819395d1c5d25ca3ca78428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f552aa626fbfa268b819395d1c5d25ca3ca78428"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "3b4d5a332d6163d7f30a89ab982d11febfcac542", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79069232df7ae1f59c68bbe90804a30c2dbec5d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79069232df7ae1f59c68bbe90804a30c2dbec5d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=79069232df7ae1f59c68bbe90804a30c2dbec5d3", "patch": "@@ -1,3 +1,12 @@\n+2019-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Return 0\n+\tfor 'Size too.\n+\t(Identifier_to_gnu): Use the actual subtype for a reference to a\n+\tpacked array in a return statement.\n+\t(Attribute_to_gnu) <Attr_Size>: Do not strip VIEW_CONVERT_EXPRs from\n+\tthe prefix in every case.\n+\n 2019-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Remove superfluous tests on"}, {"sha": "e2d2ddae3fed0de2d16974e399e039c2e3df35a4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79069232df7ae1f59c68bbe90804a30c2dbec5d3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79069232df7ae1f59c68bbe90804a30c2dbec5d3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=79069232df7ae1f59c68bbe90804a30c2dbec5d3", "patch": "@@ -778,6 +778,7 @@ lvalue_required_for_attribute_p (Node_Id gnat_node)\n     case Attr_Range_Length:\n     case Attr_Length:\n     case Attr_Object_Size:\n+    case Attr_Size:\n     case Attr_Value_Size:\n     case Attr_Component_Size:\n     case Attr_Descriptor_Size:\n@@ -797,7 +798,6 @@ lvalue_required_for_attribute_p (Node_Id gnat_node)\n     case Attr_Unrestricted_Access:\n     case Attr_Code_Address:\n     case Attr_Pool_Address:\n-    case Attr_Size:\n     case Attr_Alignment:\n     case Attr_Bit_Position:\n     case Attr_Position:\n@@ -1112,12 +1112,15 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n     {\n       /* We use the Actual_Subtype only if it has already been elaborated,\n \t as we may be invoked precisely during its elaboration, otherwise\n-\t the Etype.  Avoid using it for packed arrays to simplify things.  */\n+\t the Etype.  Avoid using it for packed arrays to simplify things,\n+\t except in a return statement because we need the actual size and\n+\t the front-end does not make it explicit in this case.  */\n       if ((Ekind (gnat_entity) == E_Constant\n \t   || Ekind (gnat_entity) == E_Variable\n \t   || Is_Formal (gnat_entity))\n \t  && !(Is_Array_Type (Etype (gnat_entity))\n-\t       && Present (Packed_Array_Impl_Type (Etype (gnat_entity))))\n+\t       && Present (Packed_Array_Impl_Type (Etype (gnat_entity)))\n+\t       && Nkind (Parent (gnat_node)) != N_Simple_Return_Statement)\n \t  && Present (Actual_Subtype (gnat_entity))\n \t  && present_gnu_tree (Actual_Subtype (gnat_entity)))\n \tgnat_result_type = Actual_Subtype (gnat_entity);\n@@ -2314,21 +2317,24 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n     case Attr_Object_Size:\n     case Attr_Value_Size:\n     case Attr_Max_Size_In_Storage_Elements:\n-      gnu_expr = gnu_prefix;\n-\n-      /* Remove NOPs and conversions between original and packable version\n-\t from GNU_EXPR, and conversions from GNU_PREFIX.  We use GNU_EXPR\n-\t to see if a COMPONENT_REF was involved.  */\n-      while (TREE_CODE (gnu_expr) == NOP_EXPR\n-\t     || (TREE_CODE (gnu_expr) == VIEW_CONVERT_EXPR\n-\t\t && TREE_CODE (TREE_TYPE (gnu_expr)) == RECORD_TYPE\n-\t\t && TREE_CODE (TREE_TYPE (TREE_OPERAND (gnu_expr, 0)))\n+      /* Strip NOPs, conversions between original and packable versions, and\n+\t unpadding from GNU_PREFIX.  Note that we cannot simply strip every\n+\t VIEW_CONVERT_EXPR because some of them may give the actual size, e.g.\n+\t for nominally unconstrained packed array.  We use GNU_EXPR to see\n+\t if a COMPONENT_REF was involved.  */\n+      while (CONVERT_EXPR_P (gnu_prefix)\n+\t     || TREE_CODE (gnu_prefix) == NON_LVALUE_EXPR\n+\t     || (TREE_CODE (gnu_prefix) == VIEW_CONVERT_EXPR\n+\t\t && TREE_CODE (TREE_TYPE (gnu_prefix)) == RECORD_TYPE\n+\t\t && TREE_CODE (TREE_TYPE (TREE_OPERAND (gnu_prefix, 0)))\n \t\t    == RECORD_TYPE\n-\t\t && TYPE_NAME (TREE_TYPE (gnu_expr))\n-\t\t    == TYPE_NAME (TREE_TYPE (TREE_OPERAND (gnu_expr, 0)))))\n-\tgnu_expr = TREE_OPERAND (gnu_expr, 0);\n-\n-      gnu_prefix = remove_conversions (gnu_prefix, true);\n+\t\t && TYPE_NAME (TREE_TYPE (gnu_prefix))\n+\t\t    == TYPE_NAME (TREE_TYPE (TREE_OPERAND (gnu_prefix, 0)))))\n+\tgnu_prefix = TREE_OPERAND (gnu_prefix, 0);\n+      gnu_expr = gnu_prefix;\n+      if (TREE_CODE (gnu_prefix) == COMPONENT_REF\n+\t  && TYPE_IS_PADDING_P (TREE_TYPE (TREE_OPERAND (gnu_prefix, 0))))\n+\tgnu_prefix = TREE_OPERAND (gnu_prefix, 0);\n       prefix_unused = true;\n       gnu_type = TREE_TYPE (gnu_prefix);\n \n@@ -2391,7 +2397,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       /* Deal with a self-referential size by qualifying the size with the\n \t object or returning the maximum size for a type.  */\n       if (TREE_CODE (gnu_prefix) != TYPE_DECL)\n-\tgnu_result = SUBSTITUTE_PLACEHOLDER_IN_EXPR (gnu_result, gnu_expr);\n+\tgnu_result = SUBSTITUTE_PLACEHOLDER_IN_EXPR (gnu_result, gnu_prefix);\n       else if (CONTAINS_PLACEHOLDER_P (gnu_result))\n \tgnu_result = max_size (gnu_result, true);\n "}]}