{"sha": "6c7841a3ac51588c93543361d8906ab4daa2d034", "node_id": "C_kwDOANBUbNoAKDZjNzg0MWEzYWM1MTU4OGM5MzU0MzM2MWQ4OTA2YWI0ZGFhMmQwMzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-25T12:08:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-25T12:08:10Z"}, "message": "Merge #1613\n\n1613: builtins: Rename all bang macro handlers r=CohenArthur a=CohenArthur\n\nThis renames all builtin macro functions to `<macro>_handler`. This helps avoiding the `ifdef/undef` dance we performed for MacOS in order to compile the `assert` method\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "74c932dd0f25167e34c183081859679b97003920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74c932dd0f25167e34c183081859679b97003920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7841a3ac51588c93543361d8906ab4daa2d034", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjV9GqCRBK7hj4Ov3rIwAADEIIAHc/tys2VWA1CGvMc0pFjkaq\nKmDTUvTg4zC+RPBk7aRluKI152ygOqfftAdVdg671bcXPYW+aHxIGBwufG+T+v0h\nt+aF5zcT+QEUVvTFmMz1/MpcIuBJ+Ye9SyRdOX/Zabs6nyc9eMwsyA0W4beY+a29\nHEXBv9fm1RPeB3BqZpKlge5EFrO76AIN1XSvgFapG60LJEYo4nPciliFsVlBp5E/\n+z+juMP9SU1G+NOir/il4Jhb3/tYYuRkSqT0oX9Bpjj56ovOSTQB/zls4nwN2M8n\nd8GFypSXB6d3QysIe2kbuopl2YkwvDamljlGVl/iBR8yq6Yr37bO1HlV1HFuxQI=\n=8soa\n-----END PGP SIGNATURE-----\n", "payload": "tree 74c932dd0f25167e34c183081859679b97003920\nparent 490aa25d5564313c1957bf28533fe902a0aaa1f2\nparent 6304177c2b53420d365d210a6635a17ab9d91549\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1666699690 +0000\ncommitter GitHub <noreply@github.com> 1666699690 +0000\n\nMerge #1613\n\n1613: builtins: Rename all bang macro handlers r=CohenArthur a=CohenArthur\n\nThis renames all builtin macro functions to `<macro>_handler`. This helps avoiding the `ifdef/undef` dance we performed for MacOS in order to compile the `assert` method\r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7841a3ac51588c93543361d8906ab4daa2d034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7841a3ac51588c93543361d8906ab4daa2d034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7841a3ac51588c93543361d8906ab4daa2d034/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490aa25d5564313c1957bf28533fe902a0aaa1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490aa25d5564313c1957bf28533fe902a0aaa1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490aa25d5564313c1957bf28533fe902a0aaa1f2"}, {"sha": "6304177c2b53420d365d210a6635a17ab9d91549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6304177c2b53420d365d210a6635a17ab9d91549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6304177c2b53420d365d210a6635a17ab9d91549"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "a00b5edca5fa7d20b5c8f44e51079dc38a2c5d76", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=6c7841a3ac51588c93543361d8906ab4daa2d034", "patch": "@@ -265,15 +265,15 @@ load_file_bytes (const char *filename)\n } // namespace\n \n AST::Fragment\n-MacroBuiltin::assert (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::assert_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   rust_debug (\"assert!() called\");\n \n   return AST::Fragment::create_error ();\n }\n \n AST::Fragment\n-MacroBuiltin::file (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::file_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   auto current_file\n     = Session::get_instance ().linemap->location_file (invoc_locus);\n@@ -283,7 +283,7 @@ MacroBuiltin::file (Location invoc_locus, AST::MacroInvocData &invoc)\n }\n \n AST::Fragment\n-MacroBuiltin::column (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::column_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   auto current_column\n     = Session::get_instance ().linemap->location_to_column (invoc_locus);\n@@ -300,7 +300,8 @@ MacroBuiltin::column (Location invoc_locus, AST::MacroInvocData &invoc)\n    &'static [u8; N].  */\n \n AST::Fragment\n-MacroBuiltin::include_bytes (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::include_bytes_handler (Location invoc_locus,\n+\t\t\t\t     AST::MacroInvocData &invoc)\n {\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n@@ -343,7 +344,8 @@ MacroBuiltin::include_bytes (Location invoc_locus, AST::MacroInvocData &invoc)\n    expression of type &'static str.  */\n \n AST::Fragment\n-MacroBuiltin::include_str (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::include_str_handler (Location invoc_locus,\n+\t\t\t\t   AST::MacroInvocData &invoc)\n {\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n@@ -368,7 +370,8 @@ MacroBuiltin::include_str (Location invoc_locus, AST::MacroInvocData &invoc)\n /* Expand builtin macro compile_error!(\"error\"), which forces a compile error\n    during the compile time. */\n AST::Fragment\n-MacroBuiltin::compile_error (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::compile_error_handler (Location invoc_locus,\n+\t\t\t\t     AST::MacroInvocData &invoc)\n {\n   auto lit_expr\n     = parse_single_string_literal (invoc.get_delim_tok_tree (), invoc_locus,\n@@ -386,7 +389,7 @@ MacroBuiltin::compile_error (Location invoc_locus, AST::MacroInvocData &invoc)\n    into a string with no delimiter. */\n \n AST::Fragment\n-MacroBuiltin::concat (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::concat_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   auto invoc_token_tree = invoc.get_delim_tok_tree ();\n   MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n@@ -437,7 +440,7 @@ MacroBuiltin::concat (Location invoc_locus, AST::MacroInvocData &invoc)\n    compile time. */\n \n AST::Fragment\n-MacroBuiltin::env (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::env_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   auto invoc_token_tree = invoc.get_delim_tok_tree ();\n   MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n@@ -495,7 +498,7 @@ MacroBuiltin::env (Location invoc_locus, AST::MacroInvocData &invoc)\n }\n \n AST::Fragment\n-MacroBuiltin::cfg (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::cfg_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   // only parse if not already parsed\n   if (!invoc.is_parsed ())\n@@ -534,7 +537,7 @@ MacroBuiltin::cfg (Location invoc_locus, AST::MacroInvocData &invoc)\n  scope compile time. */\n \n AST::Fragment\n-MacroBuiltin::include (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::include_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   /* Get target filename from the macro invocation, which is treated as a path\n      relative to the include!-ing file (currently being compiled).  */\n@@ -588,7 +591,7 @@ MacroBuiltin::include (Location invoc_locus, AST::MacroInvocData &invoc)\n }\n \n AST::Fragment\n-MacroBuiltin::line (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::line_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   auto current_line\n     = Session::get_instance ().linemap->location_to_line (invoc_locus);"}, {"sha": "0f4b464ac7699cd18ccee3a8ad50e7fb641c99bf", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=6c7841a3ac51588c93543361d8906ab4daa2d034", "patch": "@@ -60,45 +60,42 @@\n  * of the `Mappings` class.\n  */\n \n-/* If assert is defined as a macro this file will not parse, so undefine this\n-   before continuing.  */\n-// TODO: Rename all functions here `*_handler`\n-#ifdef assert\n-#undef assert\n-#endif\n-\n namespace Rust {\n class MacroBuiltin\n {\n public:\n-  static AST::Fragment assert (Location invoc_locus,\n-\t\t\t       AST::MacroInvocData &invoc);\n+  static AST::Fragment assert_handler (Location invoc_locus,\n+\t\t\t\t       AST::MacroInvocData &invoc);\n \n-  static AST::Fragment file (Location invoc_locus, AST::MacroInvocData &invoc);\n+  static AST::Fragment file_handler (Location invoc_locus,\n+\t\t\t\t     AST::MacroInvocData &invoc);\n \n-  static AST::Fragment column (Location invoc_locus,\n-\t\t\t       AST::MacroInvocData &invoc);\n+  static AST::Fragment column_handler (Location invoc_locus,\n+\t\t\t\t       AST::MacroInvocData &invoc);\n \n-  static AST::Fragment include_bytes (Location invoc_locus,\n-\t\t\t\t      AST::MacroInvocData &invoc);\n+  static AST::Fragment include_bytes_handler (Location invoc_locus,\n+\t\t\t\t\t      AST::MacroInvocData &invoc);\n \n-  static AST::Fragment include_str (Location invoc_locus,\n-\t\t\t\t    AST::MacroInvocData &invoc);\n+  static AST::Fragment include_str_handler (Location invoc_locus,\n+\t\t\t\t\t    AST::MacroInvocData &invoc);\n \n-  static AST::Fragment compile_error (Location invoc_locus,\n-\t\t\t\t      AST::MacroInvocData &invoc);\n+  static AST::Fragment compile_error_handler (Location invoc_locus,\n+\t\t\t\t\t      AST::MacroInvocData &invoc);\n \n-  static AST::Fragment concat (Location invoc_locus,\n-\t\t\t       AST::MacroInvocData &invoc);\n+  static AST::Fragment concat_handler (Location invoc_locus,\n+\t\t\t\t       AST::MacroInvocData &invoc);\n \n-  static AST::Fragment env (Location invoc_locus, AST::MacroInvocData &invoc);\n+  static AST::Fragment env_handler (Location invoc_locus,\n+\t\t\t\t    AST::MacroInvocData &invoc);\n \n-  static AST::Fragment cfg (Location invoc_locus, AST::MacroInvocData &invoc);\n+  static AST::Fragment cfg_handler (Location invoc_locus,\n+\t\t\t\t    AST::MacroInvocData &invoc);\n \n-  static AST::Fragment include (Location invoc_locus,\n-\t\t\t\tAST::MacroInvocData &invoc);\n+  static AST::Fragment include_handler (Location invoc_locus,\n+\t\t\t\t\tAST::MacroInvocData &invoc);\n \n-  static AST::Fragment line (Location invoc_locus, AST::MacroInvocData &invoc);\n+  static AST::Fragment line_handler (Location invoc_locus,\n+\t\t\t\t     AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n "}, {"sha": "2364b13ec2308b0dfb2d853a240ad946668a98f2", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7841a3ac51588c93543361d8906ab4daa2d034/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=6c7841a3ac51588c93543361d8906ab4daa2d034", "patch": "@@ -843,17 +843,17 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n   static std::map<\n     std::string, std::function<AST::Fragment (Location, AST::MacroInvocData &)>>\n     builtin_macros = {\n-      {\"assert\", MacroBuiltin::assert},\n-      {\"file\", MacroBuiltin::file},\n-      {\"line\", MacroBuiltin::line},\n-      {\"column\", MacroBuiltin::column},\n-      {\"include_bytes\", MacroBuiltin::include_bytes},\n-      {\"include_str\", MacroBuiltin::include_str},\n-      {\"compile_error\", MacroBuiltin::compile_error},\n-      {\"concat\", MacroBuiltin::concat},\n-      {\"env\", MacroBuiltin::env},\n-      {\"cfg\", MacroBuiltin::cfg},\n-      {\"include\", MacroBuiltin::include},\n+      {\"assert\", MacroBuiltin::assert_handler},\n+      {\"file\", MacroBuiltin::file_handler},\n+      {\"line\", MacroBuiltin::line_handler},\n+      {\"column\", MacroBuiltin::column_handler},\n+      {\"include_bytes\", MacroBuiltin::include_bytes_handler},\n+      {\"include_str\", MacroBuiltin::include_str_handler},\n+      {\"compile_error\", MacroBuiltin::compile_error_handler},\n+      {\"concat\", MacroBuiltin::concat_handler},\n+      {\"env\", MacroBuiltin::env_handler},\n+      {\"cfg\", MacroBuiltin::cfg_handler},\n+      {\"include\", MacroBuiltin::include_handler},\n     };\n \n   auto outer_attrs = macro->get_outer_attrs ();"}]}