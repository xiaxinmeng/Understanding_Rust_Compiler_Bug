{"sha": "1499e0a89ff9d386d58c6b63ae2b40c5acb031f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5OWUwYTg5ZmY5ZDM4NmQ1OGM2YjYzYWUyYjQwYzVhY2IwMzFmNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:45:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:45:55Z"}, "message": "(convert_move, convert_to_mode): Strip off a SUBREG made for variables with promoted modes.\n\n(convert_move, convert_to_mode): Strip off a SUBREG made for variables with\npromoted modes.\n(store_expr): Store into variables with promoted modes by doing the\nappropriate extension operation.\n(expand_expr, case VAR_DECL): Generate SUBREGs for promoted objects.\n(expand_expr, case SAVE_EXPR): Likewise for SAVE_EXPRs.\n(expand_increment): Handle increment of promoted objects.\n\nFrom-SVN: r2174", "tree": {"sha": "47688187eb936153257423be9a81dce74701f227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47688187eb936153257423be9a81dce74701f227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7/comments", "author": null, "committer": null, "parents": [{"sha": "601ce03b17589fd054532d11977549772d392f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601ce03b17589fd054532d11977549772d392f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601ce03b17589fd054532d11977549772d392f0d"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "8705e40538173ea175392cb6a74d17a6df9e545d", "filename": "gcc/expr.c", "status": "modified", "additions": 105, "deletions": 5, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1499e0a89ff9d386d58c6b63ae2b40c5acb031f7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1499e0a89ff9d386d58c6b63ae2b40c5acb031f7", "patch": "@@ -424,6 +424,19 @@ convert_move (to, from, unsignedp)\n   if (to_real != from_real)\n     abort ();\n \n+  /* If FROM is a SUBREG that indicates that we have already done at least\n+     the required extension, strip it.  We don't handle such SUBREGs as\n+     TO here.  */\n+\n+  if (GET_CODE (from) == SUBREG && SUBREG_PROMOTED_VAR_P (from)\n+      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (from)))\n+\t  >= GET_MODE_SIZE (to_mode))\n+      && SUBREG_PROMOTED_UNSIGNED_P (from) == unsignedp)\n+    from = gen_lowpart (to_mode, from), from_mode = to_mode;\n+\n+  if (GET_CODE (to) == SUBREG && SUBREG_PROMOTED_VAR_P (to))\n+    abort ();\n+\n   if (to_mode == from_mode\n       || (from_mode == VOIDmode && CONSTANT_P (from)))\n     {\n@@ -885,6 +898,14 @@ convert_to_mode (mode, x, unsignedp)\n      int unsignedp;\n {\n   register rtx temp;\n+ \n+  /* If FROM is a SUBREG that indicates that we have already done at least\n+     the required extension, strip it.  */\n+\n+  if (GET_CODE (x) == SUBREG && SUBREG_PROMOTED_VAR_P (x)\n+      && GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))) >= GET_MODE_SIZE (mode)\n+      && SUBREG_PROMOTED_UNSIGNED_P (x) == unsignedp)\n+    x = gen_lowpart (mode, x);\n \n   if (mode == GET_MODE (x))\n     return x;\n@@ -2336,6 +2357,17 @@ store_expr (exp, target, suggest_reg)\n \ttemp = expand_expr (exp, NULL_RTX, GET_MODE (target), 0);\n       dont_return_target = 1;\n     }\n+  else if (GET_CODE (target) == SUBREG && SUBREG_PROMOTED_VAR_P (target))\n+    /* If this is an scalar in a register that is stored in a wider mode\n+       than the declared mode, compute the result into its declared mode\n+       and then convert to the wider mode.  Our value is the computed\n+       expression.  */\n+    {\n+      temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+      convert_move (SUBREG_REG (target), temp,\n+\t\t    SUBREG_PROMOTED_UNSIGNED_P (target));\n+      return temp;\n+    }\n   else\n     {\n       temp = expand_expr (exp, target, GET_MODE (target), 0);\n@@ -3331,6 +3363,30 @@ expand_expr (exp, target, tmode, modifier)\n \t    return change_address (DECL_RTL (exp), VOIDmode,\n \t\t\t\t   copy_rtx (XEXP (DECL_RTL (exp), 0)));\n \t}\n+\n+      /* If the mode of DECL_RTL does not match that of the decl, it\n+\t must be a promoted value.  We return a SUBREG of the wanted mode,\n+\t but mark it so that we know that it was already extended.  */\n+\n+      if (GET_CODE (DECL_RTL (exp)) == REG\n+\t  && GET_MODE (DECL_RTL (exp)) != mode)\n+\t{\n+\t  enum machine_mode decl_mode = DECL_MODE (exp);\n+\n+\t  /* Get the signedness used for this variable.  Ensure we get the\n+\t     same mode we got when the variable was declared.  */\n+\n+\t  PROMOTE_MODE (decl_mode, unsignedp, type);\n+\n+\t  if (decl_mode != GET_MODE (DECL_RTL (exp)))\n+\t    abort ();\n+\n+\t  temp = gen_rtx (SUBREG, mode, DECL_RTL (exp), 0);\n+\t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t  SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;\n+\t  return temp;\n+\t}\n+\n       return DECL_RTL (exp);\n \n     case INTEGER_CST:\n@@ -3401,13 +3457,44 @@ expand_expr (exp, target, tmode, modifier)\n \t      = assign_stack_temp (mode,\n \t\t\t\t   int_size_in_bytes (TREE_TYPE (exp)), 0);\n \t  else\n-\t    temp = gen_reg_rtx (mode);\n+\t    {\n+\t      enum machine_mode var_mode = mode;\n+\n+\t      if (TREE_CODE (type) == INTEGER_TYPE\n+\t\t  || TREE_CODE (type) == ENUMERAL_TYPE\n+\t\t  || TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t  || TREE_CODE (type) == CHAR_TYPE\n+\t\t  || TREE_CODE (type) == REAL_TYPE\n+\t\t  || TREE_CODE (type) == POINTER_TYPE\n+\t\t  || TREE_CODE (type) == OFFSET_TYPE)\n+\t\t{\n+\t\t  PROMOTE_MODE (var_mode, unsignedp, type);\n+\t\t}\n+\n+\t      temp = gen_reg_rtx (var_mode);\n+\t    }\n+\n \t  SAVE_EXPR_RTL (exp) = temp;\n \t  store_expr (TREE_OPERAND (exp, 0), temp, 0);\n \t  if (!optimize && GET_CODE (temp) == REG)\n \t    save_expr_regs = gen_rtx (EXPR_LIST, VOIDmode, temp,\n \t\t\t\t      save_expr_regs);\n \t}\n+\n+      /* If the mode of SAVE_EXPR_RTL does not match that of the expression, it\n+\t must be a promoted value.  We return a SUBREG of the wanted mode,\n+\t but mark it so that we know that it was already extended.  Note\n+\t that `unsignedp' was modified above in this case.  */\n+\n+      if (GET_CODE (SAVE_EXPR_RTL (exp)) == REG\n+\t  && GET_MODE (SAVE_EXPR_RTL (exp)) != mode)\n+\t{\n+\t  temp = gen_rtx (SUBREG, mode, SAVE_EXPR_RTL (exp), 0);\n+\t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t  SUBREG_PROMOTED_UNSIGNED_P (temp) = unsignedp;\n+\t  return temp;\n+\t}\n+\n       return SAVE_EXPR_RTL (exp);\n \n     case EXIT_EXPR:\n@@ -4000,8 +4087,8 @@ expand_expr (exp, target, tmode, modifier)\n \t  if (GET_CODE (target) == MEM)\n \t    /* Store data into beginning of memory target.  */\n \t    store_expr (TREE_OPERAND (exp, 0),\n-\t\t\tchange_address (target, TYPE_MODE (valtype), 0),\n-\t\t\tNULL_RTX);\n+\t\t\tchange_address (target, TYPE_MODE (valtype), 0), 0);\n+\n \t  else if (GET_CODE (target) == REG)\n \t    /* Store this field into a union of the proper type.  */\n \t    store_field (target, GET_MODE_BITSIZE (TYPE_MODE (valtype)), 0,\n@@ -4014,7 +4101,7 @@ expand_expr (exp, target, tmode, modifier)\n \t  /* Return the entire union.  */\n \t  return target;\n \t}\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, mode, modifier);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n       if (GET_MODE (op0) == mode || GET_MODE (op0) == VOIDmode)\n \treturn op0;\n       if (modifier == EXPAND_INITIALIZER)\n@@ -6024,9 +6111,22 @@ expand_increment (exp, post)\n   /* Compute the operands as RTX.\n      Note whether OP0 is the actual lvalue or a copy of it:\n      I believe it is a copy iff it is a register or subreg\n-     and insns were generated in computing it.  */\n+     and insns were generated in computing it.   */\n+\n   temp = get_last_insn ();\n   op0 = expand_expr (incremented, NULL_RTX, VOIDmode, 0);\n+\n+  /* If OP0 is a SUBREG made for a promoted variable, we cannot increment\n+     in place but intead must do sign- or zero-extension during assignment,\n+     so we copy it into a new register and let the code below use it as\n+     a copy.\n+\n+     Note that we can safely modify this SUBREG since it is know not to be\n+     shared (it was made by the expand_expr call above).  */\n+\n+  if (GET_CODE (op0) == SUBREG && SUBREG_PROMOTED_VAR_P (op0))\n+    SUBREG_REG (op0) = copy_to_reg (SUBREG_REG (op0));\n+\n   op0_is_copy = ((GET_CODE (op0) == SUBREG || GET_CODE (op0) == REG)\n \t\t && temp != get_last_insn ());\n   op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);"}]}