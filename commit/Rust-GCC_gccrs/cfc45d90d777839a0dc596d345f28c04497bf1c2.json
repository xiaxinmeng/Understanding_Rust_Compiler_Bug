{"sha": "cfc45d90d777839a0dc596d345f28c04497bf1c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjNDVkOTBkNzc3ODM5YTBkYzU5NmQzNDVmMjhjMDQ0OTdiZjFjMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-19T21:57:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-19T21:57:28Z"}, "message": "9561.cc: New.\n\n2004-12-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/basic_istream/exceptions/wchar_t/9561.cc: New.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t01.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t02.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t03.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t06.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t07.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t08.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t09.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t10.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t11.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t12.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t13.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\t9555-ia.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n\t1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n\t11095-i.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n\t2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n\t3.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n\t9555-ic.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t3.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t9318-in.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t9424-in.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\t9555-io.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\terror_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\n\t* testsuite/27_io/basic_istream/extractors_other/char/2.cc: Minor\n\ttweaks.\n\n\t* testsuite/testsuite_io.h (struct fail_buf): Fix type of\n\tdummy return values.\n\nFrom-SVN: r92392", "tree": {"sha": "b0f9285f27db9311deb5b86cb85eb406d17a99d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f9285f27db9311deb5b86cb85eb406d17a99d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc45d90d777839a0dc596d345f28c04497bf1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc45d90d777839a0dc596d345f28c04497bf1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc45d90d777839a0dc596d345f28c04497bf1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc45d90d777839a0dc596d345f28c04497bf1c2/comments", "author": null, "committer": null, "parents": [{"sha": "cd801ba16686d649dece10ca44a9167872397e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd801ba16686d649dece10ca44a9167872397e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd801ba16686d649dece10ca44a9167872397e1d"}], "stats": {"total": 2464, "additions": 2459, "deletions": 5}, "files": [{"sha": "c7f9b117d27e16863d6a62b6e5ae72e234a993b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -1,3 +1,73 @@\n+2004-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/basic_istream/exceptions/wchar_t/9561.cc: New.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t01.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t02.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t03.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t06.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t07.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t08.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t09.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t10.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t11.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t12.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t13.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\t9555-ia.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n+\t1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n+\t11095-i.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n+\t2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n+\t3.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/\n+\t9555-ic.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t3.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t9318-in.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t9424-in.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\t9555-io.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\terror_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\n+\t* testsuite/27_io/basic_istream/extractors_other/char/2.cc: Minor\n+\ttweaks.\n+\n+\t* testsuite/testsuite_io.h (struct fail_buf): Fix type of\n+\tdummy return values.\n+\n 2004-12-19  Dhruv Matani  <dhruvbird@gmx.net>\n \t\n \t* include/ext/bitmap_allocator.h: Make doxygen style comments for"}, {"sha": "914680018137b77a5761371b8ae5c25cc58fe41d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/exceptions/wchar_t/9561.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fwchar_t%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fwchar_t%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fwchar_t%2F9561.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/9561\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::fail_wstreambuf b;\n+  std::wistream strm (&b);\n+  strm.exceptions (std::wios::badbit);\n+  wchar_t i = 0;\n+\n+  try \n+    {\n+      i = strm.get();\n+      i = strm.get();\n+      i = strm.get();\n+    }\n+  catch (__gnu_test::underflow_error&) \n+    {\n+      // strm should throw facet_error and not do anything else\n+      VERIFY(strm.bad());\n+    }\n+  catch (...) \n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( i == L's' );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a0106240e2ddbaade625aec4908ffb625b16b50d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/01.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F01.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,125 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01;\n+std::wstring str_02(L\"true false 0 1 110001\");\n+std::wstring str_03(L\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::wstring str_04(L\"0123\");\n+\n+std::wstringbuf isbuf_01(std::ios_base::in);\n+std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n+std::wstringbuf isbuf_03(str_03, std::ios_base::in);\n+std::wstringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::wistream is_01(NULL);\n+std::wistream is_02(&isbuf_02);\n+std::wistream is_03(&isbuf_03);\n+std::wistream is_04(&isbuf_04);\n+std::wstringstream ss_01(str_01);\n+ \n+// minimal sanity check\n+bool test01() {\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // Integral Types:\n+  bool \t\t\tb1  = false;\n+  short \t\ts1  = 0;\n+  int\t \t\ti1  = 0;\n+  long\t \t\tl1  = 0;\n+  unsigned short \tus1 = 0;\n+  unsigned int \t\tui1 = 0;\n+  unsigned long \tul1 = 0;\n+\n+  // Floating-point Types:\n+  float \t\tf1  = 0;\n+  double \t\td1  = 0;\n+  long double \t\tld1 = 0;\n+\n+  // process alphanumeric versions of bool values\n+  std::ios_base::fmtflags fmt = is_02.flags();\n+  bool testfmt = fmt & std::ios_base::boolalpha;\n+  is_02.setf(std::ios_base::boolalpha);\n+  fmt = is_02.flags();\n+  testfmt = fmt & std::ios_base::boolalpha;\n+  is_02 >> b1;\n+  VERIFY( b1 == 1 );\n+  is_02 >> b1;\n+  VERIFY( b1 == 0 );\n+\n+  // process numeric versions of of bool values\n+  is_02.unsetf(std::ios_base::boolalpha);\n+  fmt = is_02.flags();\n+  testfmt = fmt & std::ios_base::boolalpha;\n+  is_02 >> b1;\n+  VERIFY( b1 == 0 );\n+  is_02 >> b1;\n+  VERIFY( b1 == 1 );\n+\n+  // is_03 == \"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\"\n+  is_03 >> l1;\n+  VERIFY( l1 == -19999999 );\n+  is_03 >> ul1;\n+  VERIFY( ul1 == 777777 );\n+  is_03 >> i1;\n+  VERIFY( i1 == -234234 );\n+  is_03 >> ui1;\n+  VERIFY( ui1 == 233 );\n+  is_03 >> s1;\n+  VERIFY( s1 == -234 );\n+  is_03 >> us1;\n+  VERIFY( us1 == 33 );\n+  is_03 >> b1;\n+  VERIFY( b1 == 1 );\n+  is_03 >> ld1;\n+  VERIFY( ld1 == 66300.25 );\n+  is_03 >> d1;\n+  VERIFY( d1 == .315 );\n+  is_03 >> f1;\n+  VERIFY( f1 == 1.5 );\n+\n+  is_04 >> std::hex >> i1;\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+  VERIFY( i1 == 0x123 );\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+\n+  // test void pointers\n+  int i = 55;\n+  void* po = &i;\n+  void* pi;\n+\n+  ss_01 << po;\n+  ss_01 >> pi;\n+  std::printf (\"%p %p\\n\", pi, po);\n+  VERIFY( po == pi );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cfd0fae14067df73ae47ed09cb3e0a9630458d99", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/02.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F02.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+ \n+// elaborated test for ints\n+bool test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring str_01(L\"20000AB\");\n+  std::wstringbuf strb_01(str_01, std::ios_base::in);\n+  std::wistream is(&strb_01);\n+\n+  int n = 15;\n+  is >> n;\n+  VERIFY( n == 20000 );\n+  wchar_t c = is.peek();\n+  VERIFY( c == L'A' );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "0f9d9a938368faa853a6a8c83f13c4a89fe2b8ac", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/03.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F03.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+bool test03()\n+{\n+  std::wstringbuf sbuf;\n+  std::wistream istr(&sbuf);\n+  std::wostream ostr(&sbuf);\n+\n+  bool test __attribute__((unused)) = true;\n+  long l01;\n+  ostr << L\"12220101\";\n+  istr >> l01; // _M_in_end set completely incorrectly here.\n+  VERIFY( l01 == 12220101 );\n+  VERIFY( istr.rdstate() == std::ios_base::eofbit );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "d4e5d5cbee5fd2c59f95dc361e2017186e276620", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/06.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F06.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00081.html\n+// Jim Parsons\n+void test06()\n+{\n+  // default locale, grouping is turned off\n+  bool test __attribute__((unused)) = true;\n+  unsigned int h4;\n+  wchar_t c;\n+  std::wstring s(L\"205,199,144\");\n+  std::wistringstream is(s);\n+  \n+  is >> h4; // 205\n+  VERIFY( h4 == 205 );\n+  is >> c; // L','\n+  VERIFY( c == L',' );\n+\n+  is >> h4; // 199\n+  VERIFY( h4 == 199 );\n+  is >> c; // L','\n+  VERIFY( c == L',' );\n+\n+  is >> h4; // 144\n+  VERIFY( is.rdstate() == std::ios_base::eofbit );\n+  VERIFY( h4 == 144 );\n+  is >> c; // EOF\n+  VERIFY( c == L',' );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "fe7adbd70f5ca36a645c849ccd45283c768a6735", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/07.cc", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,145 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+namespace std {\n+  class test_numpunct1 : public numpunct<wchar_t>\n+  {\n+  protected:\n+    string\n+    do_grouping() const \n+    { return string(1, '\\003'); }\n+  };\n+} // namespace std\n+\n+void test07()\n+{\n+  // manufactured locale, grouping is turned on\n+  bool test __attribute__((unused)) = true;\n+  unsigned int h4 = 0, h3 = 0, h2 = 0;\n+  float f1 = 0.0;\n+  const std::wstring s1(L\"205,199 23,445.25 1,024,365 123,22,24\");\n+  std::wistringstream is(s1);\n+  is.imbue(std::locale(std::locale(), new std::test_numpunct1));  \n+\n+  // Basic operation.\n+  is >> h4; \n+  VERIFY( h4 == 205199 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> f1; \n+  VERIFY( f1 == 23445.25 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h3; \n+  VERIFY( h3 == 1024365 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+\n+  // Stress tests for explicit errors in grouping corner cases.  The\n+  // validity of these tests and results have been hammered out in\n+  // private email between bkoz and ncm between Jan 25 and Jan 27, 2000.\n+  // Thanks nate -- benjamin\n+  const std::wstring s2(L\",111 4,,4 0.25,345 5..25 156,, 1,000000 1000000 1234,567\");\n+  h3 = h4 = h2 = 0;\n+  f1 = 0.0;\n+  const wchar_t c_control = L'?';\n+  wchar_t c = c_control;\n+  is.clear();\n+  is.str(s2);\n+\n+  is >> h4; \n+  VERIFY( h4 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == L',' );\n+  VERIFY( is.good() );\n+\n+  is.ignore(3);\n+  is >> f1; \n+  VERIFY( f1 == 0.0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == L',' );\n+  is >> c;\n+  VERIFY( c == L'4' );\n+  VERIFY( is.good() );\n+\n+  is >> f1; \n+  VERIFY( f1 == 0.25 );\n+  VERIFY( is.good() );\n+  is >> c;\n+  VERIFY( c == L',' );\n+  is >> h2;\n+  VERIFY( h2 == 345 );\n+  VERIFY( is.good() );\n+  f1 = 0.0;\n+  h2 = 0;\n+\n+  is >> f1; \n+  VERIFY( f1 == 5.0 );\n+  VERIFY( is.good() );\n+  is >> f1; \n+  VERIFY( f1 == .25 );\n+  VERIFY( is.good() );\n+\n+  is >> h3; \n+  VERIFY( h3 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == L',' ); // second one\n+  VERIFY( is.good() );\n+\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+\n+  is >> h2; \n+  VERIFY( h2 == 1000000 );\n+  VERIFY( is.good() );\n+  h2 = 0;\n+\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+  is.clear();\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "cc3387c2ba4dd2c7f9ba83c8e1509f50ea1a4a68", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/08.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F08.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+namespace std {\n+  class test_numpunct2 : public numpunct<wchar_t>\n+  {\n+  protected:\n+    string\n+    do_grouping() const \n+    { return string(\"\\002\\003\"); }\n+  };\n+} // namespace std\n+\n+void test08()\n+{\n+  // manufactured locale, grouping is turned on\n+  bool test __attribute__((unused)) = true;\n+  unsigned int h4 = 0, h3 = 0, h2 = 0;\n+  const std::wstring s1(L\"1,22 205,19 22,123,22\");\n+\n+  std::wistringstream is(s1);\n+  is.imbue(std::locale(std::locale(), new std::test_numpunct2));  \n+\n+  // Basic operation.\n+  is >> h4; \n+  VERIFY( h4 == 122 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h3; \n+  VERIFY( h3 == 20519 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h2; \n+  VERIFY( h2 == 2212322 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "0310c64779bebb5097bc4fbba6c609fb437ce52e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/09.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F09.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+bool test09()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring st(L\"2.456e3-+0.567e-2\");\n+  std::wstringbuf sb(st);\n+  std::wistream is(&sb);\n+  double f1 = 0, f2 = 0;\n+  wchar_t c;\n+  (is >> std::ws) >> f1;\n+  (is >> std::ws) >> c;\n+  (is >> std::ws) >> f2;\n+  test = f1 == 2456;\n+  VERIFY( f2 == 0.00567 );\n+  VERIFY( c == L'-' );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "c31596036782e1cf57e9fd2476ba83caea3723d1", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/10.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,130 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+bool test10()\n+{\n+  std::wstring str_01(L\"0 00 000 +0 +0 -0\");\n+  std::wstringbuf isbuf_01(str_01);\n+  std::wistream is_01(&isbuf_01);\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  int n = 365;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 364;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 363;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 362;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 361;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 360;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  VERIFY( is_01.rdstate() == std::ios_base::eofbit );\n+\n+  std::wstring str_02(L\"0x32 0X33 033 33\");\n+  std::wstringbuf isbuf_02(str_02);\n+  std::wistream is_02(&isbuf_02);\n+  is_02.unsetf(std::ios_base::basefield);\n+  is_02 >> n;\n+  VERIFY( n == 50 );\n+  is_02 >> n;\n+  VERIFY( n == 51 );\n+  is_02 >> n;\n+  VERIFY( n == 27 );\n+  is_02 >> n;\n+  VERIFY( n == 33 );\n+  VERIFY( is_02.rdstate() == std::ios_base::eofbit );\n+\n+  std::wstringbuf isbuf_03(str_02);\n+  std::wistream is_03(&isbuf_03);\n+  wchar_t c;\n+  int m;\n+\n+  is_03 >> std::dec >> n >> c >> m;\n+  VERIFY( n == 0 );\n+  VERIFY( c == L'x' );\n+  VERIFY( m == 32 );\n+\n+  is_03 >> std::oct >> m >> c >> n;\n+  VERIFY( m == 0 );\n+  VERIFY( c == L'X' );\n+  VERIFY( n == 27 );\n+\n+  is_03 >> std::dec >> m >> n;\n+  VERIFY( m == 33 );\n+  VERIFY( n == 33 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  std::wstring str_04(L\"3. 4.5E+2a5E-3 .6E1\");\n+  std::wstringbuf isbuf_04(str_04);\n+  std::wistream is_04(&isbuf_04);\n+\n+  double f;\n+  is_04 >> f;\n+  VERIFY( f == 3.0 );\n+  is_04 >> f;\n+  VERIFY( f == 450.0 );\n+  is_04.ignore();\n+  is_04 >> f;\n+  VERIFY( f == 0.005 );\n+  is_04 >> f;\n+  VERIFY( f == 6 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  std::wstring str_05(L\"0E20 5Ea E16\");\n+  std::wstringbuf isbuf_05(str_05);\n+  std::wistream is_05(&isbuf_05);\n+\n+  is_05 >> f;\n+  VERIFY( f == 0 );\n+  is_05 >> f;\n+  VERIFY( f == 5.0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::goodbit );\n+  is_05.clear();\n+  is_05 >> c;\n+  VERIFY( c == L'a' );\n+  is_05 >> f;\n+  VERIFY( f == 5.0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n+  is_05.clear();\n+  is_05.ignore();\n+  is_05 >> n;\n+  VERIFY( n == 16 );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "b26d1238fc74949131d281dd04ebdf16ffa330a0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/11.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F11.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+// In the presence of no fmtflags, the input operator should behave\n+// like strtol(x, y, 0)\n+// libstdc++/90\n+bool test11()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t* cstrlit = L\"0x2a\";\n+\n+  // sanity check via 'C' library call\n+  wchar_t* err;\n+  long l = std::wcstol(cstrlit, &err, 0);\n+\n+  std::wistringstream iss(cstrlit);\n+  iss.setf(std::wios::fmtflags(0), std::ios::basefield);\n+  int i;\n+  iss >> i;\n+\n+  VERIFY( !iss.fail() );\n+  VERIFY( l == i );\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "ef72afbcfbf83951aa683960e74b6974d35ccb40", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+// XXX This test fails on sparc-solaris2 because of a bug in libc\n+// XXX sscanf for very long input.  See:\n+// XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n+// { dg-do run { xfail sparc*-*-solaris2* } }\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3720\n+// excess input should not cause a core dump\n+template<typename T>\n+bool test12_aux(bool integer_type)\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  int digits_overflow;\n+  if (integer_type)\n+    // This many digits will overflow integer types in base 10.\n+    digits_overflow = std::numeric_limits<T>::digits10 + 2;\n+  else\n+    // This might do it, unsure.\n+    digits_overflow = std::numeric_limits<T>::max_exponent10 + 1;\n+  \n+  std::wstring st;\n+  std::wstring part = L\"1234567890123456789012345678901234567890\";\n+  for (std::size_t i = 0; i < digits_overflow / part.size() + 1; ++i)\n+    st += part;\n+  std::wstringbuf sb(st);\n+  std::wistream is(&sb);\n+  T t;\n+  is >> t;\n+  VERIFY( is.fail() );\n+  return test;\n+}\n+\n+bool test12()\n+{\n+  bool test __attribute__((unused)) = true;\n+  VERIFY( test12_aux<short>(true) );\n+  VERIFY( test12_aux<int>(true) );\n+  VERIFY( test12_aux<long>(true) );\n+  VERIFY( test12_aux<float>(false) );\n+  VERIFY( test12_aux<double>(false) );\n+  VERIFY( test12_aux<long double>(false) );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "8fa3e3e55ef5a989e786724fac98d9280304f362", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3720 part two\n+void test13()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t* l2 = L\"1.2345678901234567890123456789012345678901234567890123456\"\n+                      L\"  \"\n+                      L\"1246.9\";\n+\n+  // 1 \n+  // used to core.\n+  double d;\n+  wistringstream iss1(l2);\n+  iss1 >> d;\n+  iss1 >> d;\n+  VERIFY ( d > 1246 && d < 1247 );\n+\n+  // 2\n+  // quick test for failbit on maximum length extraction.\n+  int i;\n+  int max_digits = numeric_limits<int>::digits10 + 1;\n+  wstring digits;\n+  for (int j = 0; j < max_digits; ++j)\n+    digits += L'1';\n+  wistringstream iss2(digits);\n+  iss2 >> i;\n+  VERIFY( !iss2.fail() );\n+\n+  digits += L'1';\n+  i = 0;\n+  iss2.str(digits);\n+  iss2.clear();\n+  iss2 >> i;\n+  VERIFY( i == 0 );\n+  VERIFY( iss2.fail() );\n+}\n+\n+int main()\n+{\n+  test13();\n+  return 0;\n+}"}, {"sha": "98d9c25d6a4635942655021b3cb61b2f70446285", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/9555-ia.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F9555-ia.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F9555-ia.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F9555-ia.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wistream is(&b);\n+  is.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( is.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  bool b = true;\n+  short s = -4; \n+  unsigned short us = 4;\n+  int i = -45; \n+  unsigned int ui = 45;\n+  long l = -456;\n+  unsigned long ul = 456;\n+  float f = 3.4;\n+  double d = 3.45;\n+  long double ld = 3.456;\n+\n+  testthrow(b);\n+  testthrow(s);\n+  testthrow(us);\n+  testthrow(i);\n+  testthrow(ui);\n+  testthrow(l);\n+  testthrow(ul);\n+  testthrow(f);\n+  testthrow(d);\n+  testthrow(ld);\n+\n+  return 0;\n+}"}, {"sha": "4b0392ae8c08030381af9364a28be70ad364bf30", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/9561\n+template<typename T>\n+void test_badbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get_wchar_t);\n+  wistringstream stream(L\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::badbit);\n+  VERIFY( stream.rdstate() == ios_base::goodbit );\n+\n+  try \n+    {\n+      T i;\n+      stream >> i;\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::facet_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...)\n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+\n+int main()\n+{\n+  test_badbit<bool>();\n+  test_badbit<short>();\n+  test_badbit<unsigned short>();\n+  test_badbit<int>();\n+  test_badbit<unsigned int>();\n+  test_badbit<long>();\n+  test_badbit<unsigned long>();\n+\n+  test_badbit<float>();\n+  test_badbit<double>();\n+\n+  test_badbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "f45f0ab1f3f9983ba63aa53175fb912704ea11cc", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_failbit.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream stream(L\"jaylib - champion sound\");\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i;\n+      stream >> i;\n+      VERIFY( false );\n+    }\n+  catch (const ios_base::failure&)\n+    { \n+      // stream should set failbit and throw ios_base::failure.\n+      VERIFY( stream.fail() );\n+      VERIFY( !stream.bad() );\n+      VERIFY( !stream.eof() );\n+    }  \n+  catch(...)\n+    { VERIFY( false ); }\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  test_failbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "500952f0ecf279623c4e40ce195dd154d854b47a", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_failbit_throw.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get_wchar_t);\n+  wistringstream stream(L\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i;\n+      stream >> i;\n+    }\n+  catch (const ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  // stream should set badbit.\n+  VERIFY( stream.bad() );\n+  VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+  VERIFY( !stream.eof() );\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  test_failbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "351056ae049fdf5f443a9358a1582525c873d1dd", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F1.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring str_01;\n+  const std::wstring str_02(L\"coltrane playing 'softly as a morning sunrise'\");\n+  const std::wstring str_03(L\"coltrane\");\n+\n+  std::wstringbuf isbuf_01(std::ios_base::in);\n+  std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n+  std::wistream is_01(NULL);\n+  std::wistream is_02(&isbuf_02);\n+\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, _CharT*)\n+  int n = 20;\n+  wchar_t array1[n];\n+  typedef std::wios::traits_type ctraits_type;\n+  ctraits_type::int_type i1, i2;\n+\n+  state1 = is_01.rdstate();\n+  i1 = ctraits_type::length(array1);\n+  is_01 >> array1;   // should snake 0 characters, not alter stream state\n+  i2 = ctraits_type::length(array1);\n+  state2 = is_01.rdstate();\n+  VERIFY( i1 == i2 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake L\"coltrane\"\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( array1[str_03.size() - 1] == L'e' );\n+  array1[str_03.size()] = L'\\0';\n+  VERIFY( !str_03.compare(0, str_03.size(), array1) );\n+  std::wistream::int_type int1 = is_02.peek(); // should be L' '\n+  VERIFY( int1 == L' ' );\n+\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake L\"playing\" as sentry \"eats\" ws\n+  state2 = is_02.rdstate();\n+  int1 = is_02.peek(); // should be L' '\n+  VERIFY( int1 == L' ' );\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "edbe8126990187e74811dd50bf27f5d3f3a93d70", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/11095-i.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F11095-i.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F11095-i.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F11095-i.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/11095\n+// operator>>(basic_istream&, _CharT*)\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring str_01(L\"Consoli \");\n+\n+  std::wstringbuf isbuf_01(str_01, std::ios_base::in);\n+  std::wistream is_01(&isbuf_01);\n+\n+  std::ios_base::iostate state1, state2;\n+\n+  wchar_t array1[10];\n+  typedef std::wios::traits_type ctraits_type;\n+\n+  is_01.width(-60);\n+  state1 = is_01.rdstate();\n+  is_01 >> array1;\n+  state2 = is_01.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, L\"Consoli\", 7) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "8c591831f73fec65436d9b2ea53d1990a333b3c8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F2.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring str_01;\n+  const std::wstring str_02(L\"or coltrane playing tunji with jimmy garrison\");\n+  const std::wstring str_03(L\"coltrane\");\n+\n+  std::wstringbuf isbuf_01(std::ios_base::in);\n+  std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n+  std::wistream is_01(NULL);\n+  std::wistream is_02(&isbuf_02);\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, _CharT&)\n+  wchar_t c1 = L'c', c2 = L'c';\n+  state1 = is_01.rdstate();\n+  is_01 >> c1;   \n+  state2 = is_01.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( c1 == c2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+\n+  state1 = is_02.rdstate();\n+  is_02 >> c1;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( c1 == L'o' );\n+  is_02 >> c1;   \n+  is_02 >> c1;   \n+  VERIFY( c1 == L'c' );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "a22e13ac66cdf29b8504c648e4a44889c4af7388", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/3.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F3.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 character extractors\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring str_01;\n+  const std::wstring str_02(L\"coltrane playing 'softly as a morning sunrise'\");\n+  const std::wstring str_03(L\"coltrane\");\n+\n+  std::wstringbuf isbuf_01(std::ios_base::in);\n+  std::wstringbuf isbuf_02(str_02, std::ios_base::in);\n+  std::wistream is_01(NULL);\n+  std::wistream is_02(&isbuf_02);\n+\n+  std::ios_base::iostate state1, state2, statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(istream&, _CharT*)\n+  int n = 20;\n+  wchar_t array1[n];\n+  typedef std::wios::traits_type ctraits_type;\n+\n+  // testing with width() control enabled.\n+  is_02.width(8);\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake L\"coltran\"\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, L\"coltran\", 7) );\n+\n+  is_02.width(1);\n+  state1 = is_02.rdstate();\n+  is_02 >> array1;   // should snake nothing, set failbit\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( array1[0] == L'\\0' );\n+\n+  is_02.width(8);\n+  is_02.clear();\n+  state1 = is_02.rdstate();\n+  VERIFY( !state1 );\n+  is_02 >> array1;   // should snake L\"e\"\n+  state2 = is_02.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, L\"e\", 1) );\n+\n+  // testing for correct exception setting\n+  const std::wstring str_04(L\"   impulse!!\");\n+  std::wstringbuf isbuf_03(str_04, std::ios_base::in);\n+  std::wstringbuf isbuf_04(str_04, std::ios_base::in);\n+  std::wistream is_03(&isbuf_03);\n+  std::wistream is_04(&isbuf_04);\n+\n+  is_03 >> array1;\n+  VERIFY( !ctraits_type::compare(array1, L\"impulse!!\", 10) );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  is_04.width(9);\n+  is_04 >> array1;\n+  VERIFY( !ctraits_type::compare(array1, L\"impulse!\", 9) );\n+  VERIFY( !is_04.rdstate() ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "70db4cf8e9734590b18a8cc167582e6bf34f1701", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/9555-ic.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F9555-ic.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wistream is(&b);\n+  is.exceptions(std::wios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int)\n+    {\n+      // Expected return is zero.\n+      VERIFY( is.bad() );\n+    }\n+  catch(...) \n+    {\n+      test = false;\n+      VERIFY( test );\n+    }    \n+}\n+\n+int main()\n+{\n+  wchar_t c = L'a';\n+  wchar_t* cp = &c;\n+\n+  testthrow(c);\n+  testthrow(cp);\n+\n+  return 0;\n+}"}, {"sha": "9f5c452ed7c8a3d797f622a9d08a212dd83006a4", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F2.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-28 bkoz\n \n-// Copyright (C) 1999, 2001, 2003 Free Software Foundation\n+// Copyright (C) 1999, 2001, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,6 @@\n void test02() \n {\n   bool test __attribute__((unused)) = true;\n-  typedef std::ios::traits_type ctraits_type;\n   const char name_01[] = \"istream_extractor_other-1.txt\"; //read \n   const char name_02[] = \"istream_extractor_other-2.txt\"; //write\n "}, {"sha": "8eea02abf50452af10fff8815381d8010a3b9b88", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/1.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F1.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,138 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// stringbufs.\n+void test01() \n+{\n+  typedef std::wios::traits_type ctraits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring str_01;\n+  const std::wstring str_02(L\"art taylor kickin it on DAKAR\");\n+  std::wstring strtmp;\n+\n+  std::wstringbuf isbuf_00(std::ios_base::in);\n+  std::wstringbuf isbuf_01(std::ios_base::in | std::ios_base::out);\n+  std::wstringbuf isbuf_02(str_01, std::ios_base::in);\n+  std::wstringbuf isbuf_03(str_01, std::ios_base::in | std::ios_base::out);\n+  std::wstringbuf isbuf_04(str_02, std::ios_base::in);\n+  std::wstringbuf isbuf_05(str_02, std::ios_base::in | std::ios_base::out);\n+\n+  std::wistream is_00(NULL);\n+  std::wistream is_01(&isbuf_01);\n+  std::wistream is_02(&isbuf_02);\n+  std::wistream is_03(&isbuf_03);\n+  std::wistream is_04(&isbuf_04);\n+  std::wistream is_05(&isbuf_05);\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(basic_streambuf*)\n+\n+  // null istream to empty in_buf\n+  state1 = is_00.rdstate();\n+  is_00 >> &isbuf_00;   \n+  state2 = is_00.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_00.str() == str_01 ); \n+\n+  // null istream to empty in_out_buf\n+  is_00.clear(std::ios_base::goodbit);\n+  state1 = is_00.rdstate();\n+  is_00 >> &isbuf_01;   \n+  state2 = is_00.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_01.str() == str_01 ); \n+\n+  // null istream to full in_buf\n+  is_00.clear(std::ios_base::goodbit);\n+  state1 = is_00.rdstate();\n+  is_00 >> &isbuf_04;   \n+  state2 = is_00.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_04.str() == str_02 ); \n+\n+  // null istream to full in_out_buf\n+  is_00.clear(std::ios_base::goodbit);\n+  state1 = is_00.rdstate();\n+  is_00 >> &isbuf_05;   \n+  state2 = is_00.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_05.str() == str_02 ); \n+\n+  // empty but non-null istream to full in_buf\n+  state1 = is_02.rdstate();\n+  is_02 >> &isbuf_04;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_04.str() == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_04.sgetc() == L'a' );\n+\n+  // empty but non-null istream to full in_out_buf\n+  is_02.clear(std::ios_base::goodbit);\n+  state1 = is_02.rdstate();\n+  is_02 >> &isbuf_05;   \n+  state2 = is_02.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_05.str() == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_05.sgetc() == L'a' );\n+\n+  // full istream to empty in_buf (need out_buf, you know?)\n+  state1 = is_04.rdstate();\n+  is_04 >> &isbuf_02;   \n+  state2 = is_04.rdstate();\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_02.str() == str_01 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_02.sgetc() == ctraits_type::eof() );\n+  VERIFY( is_04.peek() == ctraits_type::eof() ); // as failed\n+\n+  // full istream to empty in_out_buf\n+  is_04.clear(std::ios_base::goodbit);\n+  state1 = is_04.rdstate();\n+  is_04 >> &isbuf_03;   \n+  state2 = is_04.rdstate();\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( state2 != stateeof );\n+  strtmp = isbuf_03.str();\n+  VERIFY( strtmp == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_03.sgetc() == L'a' );\n+  VERIFY( is_04.peek() == ctraits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4bdbe50ac884c6bc854374699010d25937c8bfac", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F2.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <istream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// filebufs.\n+void test02() \n+{\n+  bool test __attribute__((unused)) = true;\n+  const char name_01[] = \"istream_extractor_other-1.txt\"; //read \n+  const char name_02[] = \"wistream_extractor_other-2.txt\"; //write\n+\n+  std::wfilebuf fbin, fbout;\n+  fbin.open(name_01, std::ios_base::in);\n+  fbout.open(name_02, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fbin.is_open() );\n+  VERIFY( fbout.is_open() );\n+\n+  if (test)\n+    {\n+      std::wistream is(&fbin);\n+      is.unsetf(std::ios_base::skipws);\n+      is >> &fbout;\n+    }\n+\n+  fbout.close();\n+  fbin.close();\n+  VERIFY( !fbin.is_open() );\n+  VERIFY( !fbout.is_open() );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "b0849721b6eba6c2da41a8412c535598434cc937", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/3.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F3.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.3 basic_istream::operator>>\n+\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03() \n+{\n+  using namespace std;  \n+  bool test __attribute__((unused)) = true;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(ios_base& (*pf) (ios_base&))\n+  {\n+    int i = 0;\n+    std::wistringstream iss(L\" 43\");\n+    iss >> std::noskipws >> i;\n+    VERIFY ( !iss ); //should set failbit\n+  }\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(basic_ios& (*pf) (basic_ios&))\n+\n+  // template<_CharT, _Traits>\n+  //  basic_istream& operator>>(basic_istream& (*pf) (basic_istream&))\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "a2ba62441d23d00f6072a631c008e50b95b1f85c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/9318-in.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9318-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9318-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9318-in.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <sstream>\n+#include <istream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9318\n+class Outbuf : public std::wstreambuf\n+{\n+public:\n+  typedef std::wstreambuf::traits_type traits_type;\n+\n+  std::wstring result() const { return str; }\n+\n+protected:\n+  virtual int_type overflow(int_type c = traits_type::eof())\n+  {\n+    if (!traits_type::eq_int_type(c, traits_type::eof()))\n+      str.push_back(traits_type::to_char_type(c));\n+    return traits_type::not_eof(c);\n+  }\n+\n+private:\n+  std::wstring str;\n+};\n+\n+void test09()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::wistringstream stream(L\"Bad Moon Rising\");\n+  Outbuf buf;\n+  stream >> &buf;\n+\n+  VERIFY( buf.result() == L\"Bad Moon Rising\" );\n+}\n+\n+int main() \n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "21ebeb443d202633e53eef9d3abcb41543725c71", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/9424-in.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9424-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9424-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9424-in.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,112 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cstring>\n+#include <cwchar>\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9424\n+class Outbuf_2 : public std::wstreambuf\n+{\n+  wchar_t buf[1];\n+\n+public:\n+  Outbuf_2()\n+  {\n+    setp(buf, buf + 1);\n+  }\n+\n+  int_type overflow(int_type c)\n+  {\n+    int_type eof = traits_type::eof();\n+    \n+    if (pptr() < epptr())\n+      {\n+\tif (traits_type::eq_int_type(c, eof))\n+\t  return traits_type::not_eof(c);\n+\t\n+\t*pptr() = traits_type::to_char_type(c);\n+\tpbump(1);\n+\treturn c;\n+      }\n+\n+    return eof;\n+  }\n+};\n+\n+class Inbuf_2 : public std::wstreambuf\n+{\n+  static const wchar_t buf[];\n+  const wchar_t* current;\n+  int size;\n+\n+public:\n+  Inbuf_2()\n+  {\n+    current = buf;\n+    size = std::wcslen(buf);\n+  }\n+  \n+  int_type underflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current);\n+    return traits_type::eof();\n+  }\n+  \n+  int_type uflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current++);\n+    return traits_type::eof();\n+  }\n+};\n+\n+const wchar_t Inbuf_2::buf[] = L\"Atteivlis\";\n+\n+void test11()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Inbuf_2 inbuf1;\n+  std::wistream is(&inbuf1);\n+  Outbuf_2 outbuf1;\n+  is >> &outbuf1;\n+  VERIFY( inbuf1.sgetc() == L't' );\n+  VERIFY( is.good() );\n+}\n+\n+int main() \n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "8ca81dd2b06b5cab7cb70447c4fe8059c78a927e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/9555-io.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9555-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9555-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F9555-io.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wistream is(&b);\n+  is.exceptions(std::wios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int) \n+    {\n+      // Expected return is zero.\n+      VERIFY( is.bad() );\n+    }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  buf b;\n+\n+  testthrow(&b);\n+\n+  return 0;\n+}"}, {"sha": "ff23e84396edf35d173a25dd62ce6540c97d5865", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/error_failbit.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Ferror_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Ferror_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Ferror_failbit.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test6()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bib;\n+  wistream stream(&bib);\n+  wstringbuf sbuf(L\"\", ios_base::out);\n+\n+  stream >> &sbuf;\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test8()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wistringstream stream(L\"foo, bar, qux\");\n+  __gnu_test::fail_wstreambuf bob;\n+\n+  stream >> &bob;\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test6();\n+  test8();\n+  return 0;\n+}"}, {"sha": "f114b3cf1e1e2e9d9c7ea0327020514c5aa5df00", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test14()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bib;\n+  wistream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+  wstringbuf sbuf(L\"\", ios_base::out);\n+\n+  try\n+    {\n+      stream >> &sbuf;\n+    }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test16()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wistringstream stream(L\"foo, bar, qux\");\n+  stream.exceptions(ios_base::badbit);\n+  __gnu_test::fail_wstreambuf bob;\n+\n+  try\n+    {\n+      stream >> &bob;\n+    }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test14();\n+  test16();\n+  return 0;\n+}"}, {"sha": "d546ef33a191a67361f3af3adb992c71abae7c7c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_failbit_throw.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_failbit_throw.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test10()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bib;\n+  wistream stream(&bib);\n+  stream.exceptions(ios_base::failbit);\n+  wstringbuf sbuf(L\"\", ios_base::out);\n+\n+  try\n+    {\n+      stream >> &sbuf;\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch (__gnu_test::underflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test12()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wistringstream stream(L\"foo, bar, qux\");\n+  stream.exceptions(ios_base::failbit);\n+  __gnu_test::fail_wstreambuf bob;\n+\n+  try\n+    {\n+      stream >> &bob;\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch (__gnu_test::overflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test10();\n+  test12();\n+  return 0;\n+}"}, {"sha": "2596f7a885bd9fef7527f930589a5064c11c1a19", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_null.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wistringstream stream;\n+  stream >> static_cast<wstreambuf*>(NULL);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+}\n+\n+void test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wistringstream stream;\n+  stream.exceptions(ios_base::failbit);\n+\n+  try\n+    {\n+      stream >> static_cast<wstreambuf*>(NULL);\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    {\n+    }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test2();\n+  test4();\n+  return 0;\n+}"}, {"sha": "3b81184f171a476794222c188c9912e6b2dabcdc", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc45d90d777839a0dc596d345f28c04497bf1c2/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=cfc45d90d777839a0dc596d345f28c04497bf1c2", "patch": "@@ -159,20 +159,20 @@ namespace __gnu_test\n       virtual int_type underflow() \n       {\n \tthrow underflow_error();\n-\treturn -1;\n+\treturn int_type();\n       }\n       \n       virtual int_type uflow() \n       {\n \tthrow underflow_error();\n-\treturn -1;\n+\treturn int_type();\n       }\n       \n       virtual int_type\n       overflow(int_type)\n       {\n \tthrow overflow_error();\n-\treturn -1;\n+\treturn int_type();\n       }\n       \n       virtual pos_type "}]}