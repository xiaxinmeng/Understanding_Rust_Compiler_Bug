{"sha": "76a7e7e706ac4c01cead3c6514322aaad88f9a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhN2U3ZTcwNmFjNGMwMWNlYWQzYzY1MTQzMjJhYWFkODhmOWE2Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-03-14T21:51:56Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-05T11:40:36Z"}, "message": "d: Use weak linkage for template symbols instead of gnu.linkonce (PR99914)\n\nThe default linkage of templates in the D language is now DECL_WEAK\ninstead of  DECL_ONE_ONLY, if supported.  This better matches the\nexpected override semantics of template symbols compiled to object code.\n\nFor example:\n\n module rt.config;\n template rt_flag()\n {\n   pragma(mangle, \"rt_flag\") __gshared bool rt_flag = true;\n }\n\n module main;\n extern(C) __gshared bool rt_flag = false;\n\nThe above currently does not succeed in linking due to there being\nmultiple definitions of `rt_flag' in different sections that aren't\nconsidered mergeable.\n\nThe compiler flag enabling toggling of this has been given a clearer\nnamed `-fweak-templates', which distinguishes itself from G++ `-fweak',\nwhich is intended only for testing.\n\ngcc/d/ChangeLog:\n\n\tPR d/99914\n\t* d-lang.cc (d_init): Disable flag_weak_templates if no support for\n\tweak or one-only symbols.\n\t* d-tree.h (VAR_OR_FUNCTION_DECL_CHECK): New macro.\n\t(DECL_INSTANTIATED): New macro.\n\t(d_comdat_linkage): Remove declaration.\n\t(d_linkonce_linkage): Remove declaration.\n\t(set_linkage_for_decl): New declaration.\n\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Replace call to\n\td_linkonce_linkage with setting DECL_INSTANTIATED.\n\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n\t(DeclVisitor::visit (InterfaceDeclaration *)): Remove call to\n\td_linkonce_linkage.\n\t(get_symbol_decl): Call set_linkage_for_decl instead of\n\td_linkonce_linkage.\n\t(d_finish_decl): Call set_linkage_for_decl.\n\t(d_comdat_linkage): Made function static.  Only set DECL_COMDAT for\n\tDECL_INSTANTIATED decls.\n\t(d_linkonce_linkage): Remove function.\n\t(d_weak_linkage): New function.\n\t(set_linkage_for_decl): New function.\n\t* gdc.texi (Runtime Options): Rename -fno-weak to -fno-weak-templates,\n\tupdate documentation of option.\n\t* lang.opt (fweak): Rename option to ...\n\t(fweak-templates): ... this.  Update help string.\n\t* modules.cc (get_internal_fn): Add Prot parameter.  Set generated\n\tfunction flag.\n\t(build_internal_fn): Update call to get_internal_fn.\n\t(build_dso_cdtor_fn): Likewise.\n\t(register_moduleinfo): Call d_finish_decl on dso_slot_node and\n\tdso_initialized_node.\n\t* typeinfo.cc (TypeInfoVisitor::internal_reference): Call\n\tset_linkage_for_decl instead of d_comdat_linkage.\n\t(TypeInfoDeclVisitor::visit (TypeInfoDeclaration *)): Remove calls to\n\td_linkonce_linkage and d_comdat_linkage.\n\t(get_cpp_typeinfo_decl): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/99914\n\t* gdc.dg/pr99914.d: New test.", "tree": {"sha": "b373e3d40f0e988db5f8e5de72b5c91a7e3d0508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b373e3d40f0e988db5f8e5de72b5c91a7e3d0508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a7e7e706ac4c01cead3c6514322aaad88f9a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a7e7e706ac4c01cead3c6514322aaad88f9a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a7e7e706ac4c01cead3c6514322aaad88f9a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a7e7e706ac4c01cead3c6514322aaad88f9a63/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb9e3aee98a206b786d7414ad28e67fbcceba5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb9e3aee98a206b786d7414ad28e67fbcceba5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb9e3aee98a206b786d7414ad28e67fbcceba5c"}], "stats": {"total": 166, "additions": 94, "deletions": 72}, "files": [{"sha": "a65af290cb8278f91877f91f6aaedbef910a7fa5", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -386,7 +386,7 @@ d_init (void)\n     using_eh_for_cleanups ();\n \n   if (!supports_one_only ())\n-    flag_weak = 0;\n+    flag_weak_templates = 0;\n \n   /* This is the C main, not the D main.  */\n   main_identifier_node = get_identifier (\"main\");"}, {"sha": "c1b6f27514936d5aa0ca016df54f4d014325ae15", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -59,7 +59,13 @@ typedef Array <Expression *> Expressions;\n    Usage of DECL_LANG_FLAG_?:\n    0: LABEL_VARIABLE_CASE (in LABEL_DECL).\n       DECL_BUILT_IN_CTFE (in FUNCTION_DECL).\n-   1: DECL_IN_UNITTEST_CONDITION_P (in FUNCTION_DECL).  */\n+   1: DECL_IN_UNITTEST_CONDITION_P (in FUNCTION_DECL).\n+   2: DECL_INSTANTIATED (in FUNCTION_DECL, VAR_DECL).  */\n+\n+/* Language-specific tree checkers.  */\n+\n+#define VAR_OR_FUNCTION_DECL_CHECK(NODE) \\\n+  TREE_CHECK2 (NODE, VAR_DECL, FUNCTION_DECL)\n \n /* The kinds of scopes we recognize.  */\n \n@@ -388,6 +394,10 @@ lang_tree_node\n #define DECL_IN_UNITTEST_CONDITION_P(NODE) \\\n   (DECL_LANG_FLAG_1 (FUNCTION_DECL_CHECK (NODE)))\n \n+/* True if the decl comes from a template instance.  */\n+#define DECL_INSTANTIATED(NODE) \\\n+  (DECL_LANG_FLAG_1 (VAR_OR_FUNCTION_DECL_CHECK (NODE)))\n+\n enum d_tree_index\n {\n   DTI_VTABLE_ENTRY_TYPE,\n@@ -631,8 +641,7 @@ extern tree enum_initializer_decl (EnumDeclaration *);\n extern tree build_artificial_decl (tree, tree, const char * = NULL);\n extern tree create_field_decl (tree, const char *, int, int);\n extern void build_type_decl (tree, Dsymbol *);\n-extern void d_comdat_linkage (tree);\n-extern void d_linkonce_linkage (tree);\n+extern void set_linkage_for_decl (tree);\n \n /* In expr.cc.  */\n extern tree build_expr (Expression *, bool = false, bool = false);"}, {"sha": "a59f00d4f2a4444a8156cda43551045c16a978ce", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -387,10 +387,7 @@ class DeclVisitor : public Visitor\n     /* Generate static initializer.  */\n     d->sinit = aggregate_initializer_decl (d);\n     DECL_INITIAL (d->sinit) = layout_struct_initializer (d);\n-\n-    if (d->isInstantiated ())\n-      d_linkonce_linkage (d->sinit);\n-\n+    DECL_INSTANTIATED (d->sinit) = (d->isInstantiated () != NULL);\n     d_finish_decl (d->sinit);\n \n     /* Put out the members.  There might be static constructors in the members\n@@ -503,15 +500,14 @@ class DeclVisitor : public Visitor\n \n     /* Generate static initializer.  */\n     DECL_INITIAL (d->sinit) = layout_class_initializer (d);\n-    d_linkonce_linkage (d->sinit);\n+    DECL_INSTANTIATED (d->sinit) = (d->isInstantiated () != NULL);\n     d_finish_decl (d->sinit);\n \n     /* Put out the TypeInfo.  */\n     if (have_typeinfo_p (Type::dtypeinfo))\n       create_typeinfo (d->type, NULL);\n \n     DECL_INITIAL (d->csym) = layout_classinfo (d);\n-    d_linkonce_linkage (d->csym);\n     d_finish_decl (d->csym);\n \n     /* Put out the vtbl[].  */\n@@ -534,7 +530,6 @@ class DeclVisitor : public Visitor\n \n     DECL_INITIAL (d->vtblsym)\n       = build_constructor (TREE_TYPE (d->vtblsym), elms);\n-    d_comdat_linkage (d->vtblsym);\n     d_finish_decl (d->vtblsym);\n \n     /* Add this decl to the current binding level.  */\n@@ -578,7 +573,6 @@ class DeclVisitor : public Visitor\n       }\n \n     DECL_INITIAL (d->csym) = layout_classinfo (d);\n-    d_linkonce_linkage (d->csym);\n     d_finish_decl (d->csym);\n \n     /* Add this decl to the current binding level.  */\n@@ -617,10 +611,7 @@ class DeclVisitor : public Visitor\n \t/* Generate static initializer.  */\n \td->sinit = enum_initializer_decl (d);\n \tDECL_INITIAL (d->sinit) = build_expr (tc->sym->defaultval, true);\n-\n-\tif (d->isInstantiated ())\n-\t  d_linkonce_linkage (d->sinit);\n-\n+\tDECL_INSTANTIATED (d->sinit) = (d->isInstantiated () != NULL);\n \td_finish_decl (d->sinit);\n       }\n \n@@ -1257,22 +1248,22 @@ get_symbol_decl (Declaration *decl)\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl->csym) = 1;\n \t}\n \n+      /* Mark compiler generated functions as artificial.  */\n+      if (fd->generated)\n+\tDECL_ARTIFICIAL (decl->csym) = 1;\n+\n       /* Vector array operations are always compiler generated.  */\n       if (fd->isArrayOp)\n \t{\n-\t  TREE_PUBLIC (decl->csym) = 1;\n \t  DECL_ARTIFICIAL (decl->csym) = 1;\n \t  DECL_DECLARED_INLINE_P (decl->csym) = 1;\n-\t  d_comdat_linkage (decl->csym);\n \t}\n \n-      /* And so are ensure and require contracts.  */\n+      /* Ensure and require contracts are lexically nested in the function they\n+\t part of, but are always publicly callable.  */\n       if (fd->ident == Identifier::idPool (\"ensure\")\n \t  || fd->ident == Identifier::idPool (\"require\"))\n-\t{\n-\t  DECL_ARTIFICIAL (decl->csym) = 1;\n-\t  TREE_PUBLIC (decl->csym) = 1;\n-\t}\n+\tTREE_PUBLIC (decl->csym) = 1;\n \n       if (decl->storage_class & STCfinal)\n \tDECL_FINAL_P (decl->csym) = 1;\n@@ -1336,8 +1327,8 @@ get_symbol_decl (Declaration *decl)\n       /* The decl has not been defined -- yet.  */\n       DECL_EXTERNAL (decl->csym) = 1;\n \n-      if (decl->isInstantiated ())\n-\td_linkonce_linkage (decl->csym);\n+      DECL_INSTANTIATED (decl->csym) = (decl->isInstantiated () != NULL);\n+      set_linkage_for_decl (decl->csym);\n     }\n \n   /* Symbol is going in thread local storage.  */\n@@ -1545,6 +1536,7 @@ d_finish_decl (tree decl)\n     set_decl_tls_model (decl, decl_default_tls_model (decl));\n \n   relayout_decl (decl);\n+  set_linkage_for_decl (decl);\n \n   if (flag_checking && DECL_INITIAL (decl))\n     {\n@@ -2327,12 +2319,15 @@ d_comdat_group (tree decl)\n /* Set DECL up to have the closest approximation of \"initialized common\"\n    linkage available.  */\n \n-void\n+static void\n d_comdat_linkage (tree decl)\n {\n-  if (flag_weak)\n+  /* COMDAT definitions have to be public.  */\n+  gcc_assert (TREE_PUBLIC (decl));\n+\n+  if (supports_one_only ())\n     make_decl_one_only (decl, d_comdat_group (decl));\n-  else if (TREE_CODE (decl) == FUNCTION_DECL\n+  else if ((TREE_CODE (decl) == FUNCTION_DECL && DECL_INSTANTIATED (decl))\n \t   || (VAR_P (decl) && DECL_ARTIFICIAL (decl)))\n     /* We can just emit function and compiler-generated variables statically;\n        having multiple copies is (for the most part) only a waste of space.  */\n@@ -2342,26 +2337,53 @@ d_comdat_linkage (tree decl)\n     /* Fallback, cannot have multiple copies.  */\n     DECL_COMMON (decl) = 1;\n \n-  if (TREE_PUBLIC (decl))\n+  if (TREE_PUBLIC (decl) && DECL_INSTANTIATED (decl))\n     DECL_COMDAT (decl) = 1;\n }\n \n-/* Set DECL up to have the closest approximation of \"linkonce\" linkage.  */\n+/* Set DECL up to have the closest approximation of \"weak\" linkage.  */\n \n-void\n-d_linkonce_linkage (tree decl)\n+static void\n+d_weak_linkage (tree decl)\n {\n   /* Weak definitions have to be public.  */\n+  gcc_assert (TREE_PUBLIC (decl));\n+\n+  /* Allow comdat linkage to be forced with the flag `-fno-weak-templates'.  */\n+  if (!flag_weak_templates || !TARGET_SUPPORTS_WEAK)\n+    return d_comdat_linkage (decl);\n+\n+  declare_weak (decl);\n+}\n+\n+/* DECL is a FUNCTION_DECL or a VAR_DECL with static storage.  Set flags to\n+   reflect the linkage that DECL will receive in the object file.  */\n+\n+void\n+set_linkage_for_decl (tree decl)\n+{\n+  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl) && TREE_STATIC (decl));\n+\n+  /* Non-public decls keep their internal linkage. */\n   if (!TREE_PUBLIC (decl))\n     return;\n \n-  /* Necessary to allow DECL_ONE_ONLY or DECL_WEAK functions to be inlined.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    DECL_DECLARED_INLINE_P (decl) = 1;\n+  /* Don't need to give private or protected symbols a special linkage.  */\n+  if ((TREE_PRIVATE (decl) || TREE_PROTECTED (decl))\n+      && !DECL_INSTANTIATED (decl))\n+    return;\n+\n+  /* Functions declared as `pragma(inline, true)' can appear in multiple\n+     translation units.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n+    return d_comdat_linkage (decl);\n \n-  /* No weak support, fallback to COMDAT linkage.  */\n-  if (!flag_weak)\n-   return d_comdat_linkage (decl);\n+  /* Instantiated variables and functions need to be overridable by any other\n+     symbol with the same name, so give them weak linkage.  */\n+  if (DECL_INSTANTIATED (decl))\n+    return d_weak_linkage (decl);\n \n-  make_decl_one_only (decl, d_comdat_group (decl));\n+  /* Compiler generated public symbols can appear in multiple contexts.  */\n+  if (DECL_ARTIFICIAL (decl))\n+    return d_weak_linkage (decl);\n }"}, {"sha": "095f7ecca41a8169da48b54f79ad9804f1787599", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -325,13 +325,13 @@ is compiled into the program.\n Turns on compilation of @code{version} code identified by @var{ident}.\n @end table\n \n-@item -fno-weak\n-@cindex @option{-fweak}\n-@cindex @option{-fno-weak}\n-Turns off emission of instantiated declarations that can be defined in multiple\n-objects as weak or one-only symbols.  The default is to emit all public symbols\n-as weak, unless the target lacks support for weak symbols.  Disabling this\n-option means that common symbols are instead put in COMDAT or become private.\n+@item -fno-weak-templates\n+@cindex @option{-fweak-templates}\n+@cindex @option{-fno-weak-templates}\n+Turns off emission of declarations that can be defined in multiple objects as\n+weak symbols.  The default is to emit all public symbols as weak, unless the\n+target lacks support for weak symbols.  Disabling this option means that common\n+symbols are instead put in COMDAT or become private.\n \n @end table\n "}, {"sha": "ded218fc5e3b676869f08a0161599f75f681f765", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -321,9 +321,9 @@ fversion=\n D Joined RejectNegative\n -fversion=<level|ident>\tCompile in version code >= <level> or identified by <ident>.\n \n-fweak\n-D Var(flag_weak) Init(1)\n-Emit common-like symbols as weak symbols.\n+fweak-templates\n+D Var(flag_weak_templates) Init(1)\n+Emit template instantiations as weak symbols.\n \n imultilib\n D Joined Separate"}, {"sha": "8786344d954cb51a31d7c9e98728661e19824a42", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -125,7 +125,7 @@ static Module *current_module_decl;\n    by both module initialization and dso handlers.  */\n \n static FuncDeclaration *\n-get_internal_fn (tree ident)\n+get_internal_fn (tree ident, const Prot &prot)\n {\n   Module *mod = current_module_decl;\n   const char *name = IDENTIFIER_POINTER (ident);\n@@ -141,9 +141,10 @@ get_internal_fn (tree ident)\n \n   FuncDeclaration *fd = FuncDeclaration::genCfunc (NULL, Type::tvoid,\n \t\t\t\t\t\t   Identifier::idPool (name));\n+  fd->generated = true;\n   fd->loc = Loc (mod->srcfile->toChars (), 1, 0);\n   fd->parent = mod;\n-  fd->protection.kind = Prot::private_;\n+  fd->protection = prot;\n   fd->semanticRun = PASSsemantic3done;\n \n   return fd;\n@@ -155,7 +156,7 @@ get_internal_fn (tree ident)\n static tree\n build_internal_fn (tree ident, tree expr)\n {\n-  FuncDeclaration *fd = get_internal_fn (ident);\n+  FuncDeclaration *fd = get_internal_fn (ident, Prot (Prot::private_));\n   tree decl = get_symbol_decl (fd);\n \n   tree old_context = start_function (fd);\n@@ -337,16 +338,15 @@ build_dso_cdtor_fn (bool ctor_p)\n \t}\n     }\n    */\n-  FuncDeclaration *fd = get_internal_fn (get_identifier (name));\n+  FuncDeclaration *fd = get_internal_fn (get_identifier (name),\n+\t\t\t\t\t Prot (Prot::public_));\n   tree decl = get_symbol_decl (fd);\n \n   TREE_PUBLIC (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n   DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \n-  d_comdat_linkage (decl);\n-\n   /* Start laying out the body.  */\n   tree old_context = start_function (fd);\n   rest_of_decl_compilation (decl, 1, 0);\n@@ -443,15 +443,11 @@ register_moduleinfo (Module *decl, tree minfo)\n   /* Declare dso_slot and dso_initialized.  */\n   dso_slot_node = build_dso_registry_var (GDC_PREFIX (\"dso_slot\"),\n \t\t\t\t\t  ptr_type_node);\n-  DECL_EXTERNAL (dso_slot_node) = 0;\n-  d_comdat_linkage (dso_slot_node);\n-  rest_of_decl_compilation (dso_slot_node, 1, 0);\n+  d_finish_decl (dso_slot_node);\n \n   dso_initialized_node = build_dso_registry_var (GDC_PREFIX (\"dso_initialized\"),\n \t\t\t\t\t\t boolean_type_node);\n-  DECL_EXTERNAL (dso_initialized_node) = 0;\n-  d_comdat_linkage (dso_initialized_node);\n-  rest_of_decl_compilation (dso_initialized_node, 1, 0);\n+  d_finish_decl (dso_initialized_node);\n \n   /* Declare dso_ctor() and dso_dtor().  */\n   tree dso_ctor = build_dso_cdtor_fn (true);"}, {"sha": "f8ffcbfff253b25baa57fa83e0be78a14dfb0a2d", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -358,7 +358,7 @@ class TypeInfoVisitor : public Visitor\n     DECL_EXTERNAL (decl) = 0;\n     TREE_PUBLIC (decl) = 1;\n     DECL_VISIBILITY (decl) = VISIBILITY_INTERNAL;\n-    d_comdat_linkage (decl);\n+    set_linkage_for_decl (decl);\n     d_pushdecl (decl);\n \n     return decl;\n@@ -1320,14 +1320,6 @@ class TypeInfoDeclVisitor : public Visitor\n \n     DECL_CONTEXT (tid->csym) = d_decl_context (tid);\n     TREE_READONLY (tid->csym) = 1;\n-\n-    /* Built-in typeinfo will be referenced as one-only.  */\n-    gcc_assert (!tid->isInstantiated ());\n-\n-    if (builtin_typeinfo_p (tid->tinfo))\n-      d_linkonce_linkage (tid->csym);\n-    else\n-      d_comdat_linkage (tid->csym);\n   }\n \n   void visit (TypeInfoClassDeclaration *tid)\n@@ -1467,8 +1459,6 @@ get_cpp_typeinfo_decl (ClassDeclaration *decl)\n     = TREE_TYPE (build_ctype (decl->type));\n   TREE_READONLY (decl->cpp_type_info_ptr_sym) = 1;\n \n-  d_comdat_linkage (decl->cpp_type_info_ptr_sym);\n-\n   /* Layout the initializer and emit the symbol.  */\n   layout_cpp_typeinfo (decl);\n "}, {"sha": "689eae02136890e79715d49a4c0dce8cd4257a5d", "filename": "gcc/testsuite/gdc.dg/pr99914.d", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Ftestsuite%2Fgdc.dg%2Fpr99914.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a7e7e706ac4c01cead3c6514322aaad88f9a63/gcc%2Ftestsuite%2Fgdc.dg%2Fpr99914.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr99914.d?ref=76a7e7e706ac4c01cead3c6514322aaad88f9a63", "patch": "@@ -0,0 +1,5 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99914\n+// { dg-additional-options \"-fmain\" }\n+// { dg-do link { target d_runtime } }\n+\n+extern(C) __gshared bool rt_cmdline_enabled = false;"}]}