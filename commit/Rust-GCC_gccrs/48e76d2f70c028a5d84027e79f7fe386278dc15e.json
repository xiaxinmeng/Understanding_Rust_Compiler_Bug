{"sha": "48e76d2f70c028a5d84027e79f7fe386278dc15e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhlNzZkMmY3MGMwMjhhNWQ4NDAyN2U3OWY3ZmUzODYyNzhkYzE1ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-01-02T15:40:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-02T15:40:51Z"}, "message": "Fortran] PR68020 \u2013 Fix implied-shape handling for rank > 2\n\n        PR fortran/68020\n        * array.c (gfc_match_array_spec): Fix implied-type matching\n        for rank > 2.\n\n        PR fortran/68020\n        * gfortran.dg/implied_shape_4.f90: New.\n        * gfortran.dg/implied_shape_5.f90: New.\n\nFrom-SVN: r279835", "tree": {"sha": "e607aa5e549fc19203835aa2f730822b3346c524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e607aa5e549fc19203835aa2f730822b3346c524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48e76d2f70c028a5d84027e79f7fe386278dc15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e76d2f70c028a5d84027e79f7fe386278dc15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e76d2f70c028a5d84027e79f7fe386278dc15e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e76d2f70c028a5d84027e79f7fe386278dc15e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ea5d54b3c7175de045589f994fc94ed7e59d80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea5d54b3c7175de045589f994fc94ed7e59d80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea5d54b3c7175de045589f994fc94ed7e59d80d"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "c76ffcbb3e1a430512ccb725a066f4e7c7d8c24f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48e76d2f70c028a5d84027e79f7fe386278dc15e", "patch": "@@ -1,3 +1,9 @@\n+2020-01-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/68020\n+\t* array.c (gfc_match_array_spec): Fix implied-type matching\n+\tfor rank > 2.\n+\n 2020-01-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/93113"}, {"sha": "e5b4ad7b4b2a4ed10f253a30ae52c3d6db0c45a7", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=48e76d2f70c028a5d84027e79f7fe386278dc15e", "patch": "@@ -599,7 +599,7 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n \t    goto cleanup;\n \n \t  case AS_IMPLIED_SHAPE:\n-\t    if (current_type != AS_ASSUMED_SHAPE)\n+\t    if (current_type != AS_ASSUMED_SIZE)\n \t      {\n \t\tgfc_error (\"Bad array specification for implied-shape\"\n \t\t\t   \" array at %C\");"}, {"sha": "4141bc87c2fce991a49e642ea8f9bebaf29cb8da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48e76d2f70c028a5d84027e79f7fe386278dc15e", "patch": "@@ -1,3 +1,9 @@\n+2020-01-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/68020\n+\t* gfortran.dg/implied_shape_4.f90: New.\n+\t* gfortran.dg/implied_shape_5.f90: New.\n+\n 2020-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/93087"}, {"sha": "2552c2ac1e259359e633638e187eddcb848ab07d", "filename": "gcc/testsuite/gfortran.dg/implied_shape_4.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_4.f90?ref=48e76d2f70c028a5d84027e79f7fe386278dc15e", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-additional-options \"-std=f2008\" }\n+!\n+! PR fortran/68020\n+!\n+! Contributed by Gerhard Steinmetz\n+!\n+subroutine rank_1_2\n+  integer, parameter :: a(1, 2) = 0\n+  integer, parameter :: x(*, *) = a\n+  integer, parameter :: y(11:*, 12:*) = a\n+  integer :: k\n+  if (any (lbound(x) /= [1,1])) stop 1\n+  if (any (ubound(x) /= [1,2])) stop 2\n+  if (any (lbound(y) /= [11,12])) stop 3\n+  if (any (ubound(y) /= [11,13])) stop 4\n+end\n+\n+subroutine rank_3\n+  integer, parameter :: a(1, 2, 3) = 0\n+  integer, parameter :: x(*, *, *) = a\n+  integer, parameter :: y(11:*, 12:*, 13:*) = a\n+  integer :: k\n+  if (any (lbound(x) /= [1,1,1])) stop 5\n+  if (any (ubound(x) /= [1,2,3])) stop 6\n+  if (any (lbound(y) /= [11,12,13])) stop 7\n+  if (any (ubound(y) /= [11,13,15])) stop 8\n+end\n+\n+subroutine rank_4\n+  integer, parameter :: a(1, 2, 3, 4) = 0\n+  integer, parameter :: x(*, *, *, *) = a\n+  integer, parameter :: y(11:*, 12:*, 13:*, 14:*) = a\n+  integer :: k\n+  if (any (lbound(x) /= [1,1,1,1])) stop 9\n+  if (any (ubound(x) /= [1,2,3,4])) stop 10\n+  if (any (lbound(y) /= [11,12,13,14])) stop 11\n+  if (any (ubound(y) /= [11,13,15,17])) stop 12\n+end\n+\n+program p\n+  call rank_1_2\n+  call rank_3\n+  call rank_4\n+end program p"}, {"sha": "b36c36389b38ab7143f54a026e6f4b71ce9ee475", "filename": "gcc/testsuite/gfortran.dg/implied_shape_5.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e76d2f70c028a5d84027e79f7fe386278dc15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_5.f90?ref=48e76d2f70c028a5d84027e79f7fe386278dc15e", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+!\n+! PR fortran/68020\n+!\n+! Reject mixing explicit-shape and implied-shape arrays\n+!\n+subroutine rank_1_2\n+  integer, parameter :: a(1, 2) = 0\n+  integer, parameter :: y(11:11, 12:*) = a ! { dg-error \"Assumed size array at .1. must be a dummy argument\" }\n+  integer, parameter :: x(:, *) = a ! { dg-error \"Bad specification for deferred shape array\" }\n+end\n+\n+subroutine rank_3\n+  integer, parameter :: a(1, 2, 3) = 0\n+  integer, parameter :: y(11:*, 12:14, 13:*) = a  ! { dg-error \"Bad specification for assumed size array\" }\n+  integer, parameter :: x(11:*, :, 13:*) = a      ! { dg-error \"Bad specification for assumed size array\" }\n+end\n+\n+subroutine rank_4\n+  integer, parameter :: a(1, 2, 3, 4) = 0\n+  integer, parameter :: y(11:*, 12:*, 13:*, 14:17) = a ! { dg-error \"Bad array specification for implied-shape array\" }\n+  integer, parameter :: y(11:*, 12:*, 13:*, 14:) = a   ! { dg-error \"Bad array specification for implied-shape array\" }\n+end\n+\n+program p\n+  call rank_1_2\n+  call rank_3\n+  call rank_4\n+end program p"}]}