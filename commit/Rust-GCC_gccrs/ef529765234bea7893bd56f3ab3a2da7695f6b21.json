{"sha": "ef529765234bea7893bd56f3ab3a2da7695f6b21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1Mjk3NjUyMzRiZWE3ODkzYmQ1NmYzYWIzYTJkYTc2OTVmNmIyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-09T03:59:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-09T21:34:16Z"}, "message": "c++: constexpr static data member instantiation [PR94523]\n\nHere due to my recent change to store_init_value we were expanding the\ninitializer of aw knowing that we were initializing aw.  When\ncxx_eval_call_expression finished the constructor, it wanted to look up the\nvalue of aw to set TREE_READONLY on it, but we haven't set DECL_INITIAL yet,\nso decl_constant_value tried to instantiate the initializer again.  And\ninfinite recursion.  Stopped by optimizing the case of asking for the value\nof ctx->object, which is ctx->value.  It also would have worked to look in\nthe values hash table, so let's move that up before decl_constant_value as\nwell.\n\ngcc/cp/ChangeLog\n2020-04-09  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94523\n\t* constexpr.c (cxx_eval_constant_expression) [VAR_DECL]: Look at\n\tctx->object and ctx->global->values first.", "tree": {"sha": "8c1d3602bc7bd39287c7329c91ac1bc9790146cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1d3602bc7bd39287c7329c91ac1bc9790146cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef529765234bea7893bd56f3ab3a2da7695f6b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef529765234bea7893bd56f3ab3a2da7695f6b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef529765234bea7893bd56f3ab3a2da7695f6b21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef529765234bea7893bd56f3ab3a2da7695f6b21/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd1c229ad10fda68318882329568f400a38fb6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd1c229ad10fda68318882329568f400a38fb6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd1c229ad10fda68318882329568f400a38fb6d"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "49246e8fa2d8553e3b5fc9a270dd6797f45f2db3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef529765234bea7893bd56f3ab3a2da7695f6b21", "patch": "@@ -1,3 +1,9 @@\n+2020-04-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94523\n+\t* constexpr.c (cxx_eval_constant_expression) [VAR_DECL]: Look at\n+\tctx->object and ctx->global->values first.\n+\n 2020-04-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93790"}, {"sha": "5793430c88daea18f47625d7dee9dc68f67c9702", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ef529765234bea7893bd56f3ab3a2da7695f6b21", "patch": "@@ -5485,6 +5485,15 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t CONST_DECL for aggregate constants.  */\n       if (lval)\n \treturn t;\n+      else if (t == ctx->object)\n+\treturn ctx->ctor;\n+      if (VAR_P (t))\n+\tif (tree *p = ctx->global->values.get (t))\n+\t  if (*p != NULL_TREE)\n+\t    {\n+\t      r = *p;\n+\t      break;\n+\t    }\n       if (COMPLETE_TYPE_P (TREE_TYPE (t))\n \t  && is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n \t{\n@@ -5499,10 +5508,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (TREE_CODE (r) == TARGET_EXPR\n \t  && TREE_CODE (TARGET_EXPR_INITIAL (r)) == CONSTRUCTOR)\n \tr = TARGET_EXPR_INITIAL (r);\n-      if (VAR_P (r))\n-\tif (tree *p = ctx->global->values.get (r))\n-\t  if (*p != NULL_TREE)\n-\t    r = *p;\n       if (DECL_P (r))\n \t{\n \t  if (!ctx->quiet)"}, {"sha": "f39ed216fae3f0fa93db6b52c989f5b7563b7913", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-static1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-static1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef529765234bea7893bd56f3ab3a2da7695f6b21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-static1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-static1.C?ref=ef529765234bea7893bd56f3ab3a2da7695f6b21", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/94523\n+// { dg-do compile { target c++14 } }\n+\n+template <bool, typename a> using b = a;\n+struct d {\n+  char ao;\n+  template <typename ap> constexpr d(ap) : ao{} {}\n+};\n+template <int... au> struct e { static constexpr auto aw = d(au...); };\n+template <int c> b<c, d> ax(e<1>::aw);"}]}