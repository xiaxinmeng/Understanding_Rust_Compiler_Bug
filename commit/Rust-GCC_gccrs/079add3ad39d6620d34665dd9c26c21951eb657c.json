{"sha": "079add3ad39d6620d34665dd9c26c21951eb657c", "node_id": "C_kwDOANBUbNoAKDA3OWFkZDNhZDM5ZDY2MjBkMzQ2NjVkZDljMjZjMjE5NTFlYjY1N2M", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-04T15:47:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-04T15:47:24Z"}, "message": "c++: pack in requires-expr parm list [PR107417]\n\nHere find_parameter_packs_r isn't detecting the pack T inside the\nrequires-expr's parameter list ultimately because cp_walk_trees\ndeliberately avoids walking the list so as to avoid false positives in\nthe unexpanded pack checker.\n\nBut it should still be fine to walk the TREE_TYPE of each parameter,\nwhich we already need to do from for_each_template_parm_r, and is\nsufficient to fix the testcase.\n\n\tPR c++/107417\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (for_each_template_parm_r) <case REQUIRES_EXPR>: Move\n\twalking of the TREE_TYPE of each parameter to ...\n\t* tree.cc (cp_walk_subtrees) <case REQUIRES_EXPR>: ... here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-requires33.C: New test.", "tree": {"sha": "9e4ac7a35e7dea9e6a58a4c1f4e14130d09aad19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e4ac7a35e7dea9e6a58a4c1f4e14130d09aad19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079add3ad39d6620d34665dd9c26c21951eb657c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079add3ad39d6620d34665dd9c26c21951eb657c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079add3ad39d6620d34665dd9c26c21951eb657c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079add3ad39d6620d34665dd9c26c21951eb657c/comments", "author": null, "committer": null, "parents": [{"sha": "a044c9d25972b22c6b4c8ec27f2de5fd622573cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a044c9d25972b22c6b4c8ec27f2de5fd622573cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a044c9d25972b22c6b4c8ec27f2de5fd622573cc"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "80110da2d8a99e0c950f2c99dea88c33705e1f3f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=079add3ad39d6620d34665dd9c26c21951eb657c", "patch": "@@ -10573,21 +10573,6 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \treturn error_mark_node;\n       break;\n \n-    case REQUIRES_EXPR:\n-      {\n-\tif (!fn)\n-\t  return error_mark_node;\n-\n-\t/* Recursively walk the type of each constraint variable.  */\n-\ttree p = TREE_OPERAND (t, 0);\n-\twhile (p)\n-\t  {\n-\t    WALK_SUBTREE (TREE_TYPE (p));\n-\t    p = TREE_CHAIN (p);\n-\t  }\n-      }\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "33bde16f128efd0f30b7aaf9ec32e0155d3c30f7", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=079add3ad39d6620d34665dd9c26c21951eb657c", "patch": "@@ -5603,15 +5603,18 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       break;\n  \n     case REQUIRES_EXPR:\n-      // Only recurse through the nested expression. Do not\n-      // walk the parameter list. Doing so causes false\n-      // positives in the pack expansion checker since the\n-      // requires parameters are introduced as pack expansions.\n-      ++cp_unevaluated_operand;\n-      result = cp_walk_tree (&REQUIRES_EXPR_REQS (*tp), func, data, pset);\n-      --cp_unevaluated_operand;\n-      *walk_subtrees_p = 0;\n-      break;\n+      {\n+\tcp_unevaluated u;\n+\tfor (tree parm = REQUIRES_EXPR_PARMS (*tp); parm; parm = DECL_CHAIN (parm))\n+\t  /* Walk the types of each parameter, but not the parameter itself,\n+\t     since doing so would cause false positives in the unexpanded pack\n+\t     checker if the requires-expr introduces a function parameter pack,\n+\t     e.g. requires (Ts... ts) { }.   */\n+\t  WALK_SUBTREE (TREE_TYPE (parm));\n+\tWALK_SUBTREE (REQUIRES_EXPR_REQS (*tp));\n+\t*walk_subtrees_p = 0;\n+\tbreak;\n+      }\n \n     case DECL_EXPR:\n       /* User variables should be mentioned in BIND_EXPR_VARS"}, {"sha": "1ff237ac3826b6a2c447e1e7f7037e2d34132e02", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires33.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079add3ad39d6620d34665dd9c26c21951eb657c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires33.C?ref=079add3ad39d6620d34665dd9c26c21951eb657c", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/107417\n+// { dg-do compile { target c++20 } }\n+\n+template<class... T>\n+void f() requires (requires (T x) { true; } && ...);\n+\n+int main() {\n+  f<int>();\n+  f<int, void>(); // { dg-error \"no match\" }\n+}"}]}