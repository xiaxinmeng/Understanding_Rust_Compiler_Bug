{"sha": "6a481021a65d6237b0c509a76fcd9c1f32c4558e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ODEwMjFhNjVkNjIzN2IwYzUwOWE3NmZjZDljMWYzMmM0NTU4ZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-02-01T23:52:49Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-02-02T00:24:14Z"}, "message": "d: Fix junk in generated symbol on powerpc64-*-* [PR98921]\n\nThis adds a special formatter to OutBuffer to handle formatted printing\nof integers, a common case.  The replacement is faster and safer.\n\nIn dmangle.c, it also gets rid of a number of problematic casts, as seen\non powerpc64 targets.\n\nReviewed-on: https://github.com/dlang/dmd/pull/12174\n\ngcc/d/ChangeLog:\n\n\tPR d/98921\n\t* dmd/MERGE: Merge upstream dmd 5e2a81d9c.", "tree": {"sha": "762ef9b75ff3acd769d3abd9a13c7fcb69047caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/762ef9b75ff3acd769d3abd9a13c7fcb69047caf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a481021a65d6237b0c509a76fcd9c1f32c4558e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a481021a65d6237b0c509a76fcd9c1f32c4558e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a481021a65d6237b0c509a76fcd9c1f32c4558e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a481021a65d6237b0c509a76fcd9c1f32c4558e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7884fb176128ca9299f5587815ce1908138b2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7884fb176128ca9299f5587815ce1908138b2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7884fb176128ca9299f5587815ce1908138b2f7"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "342871f9a1aa3659ea17f2eeb3226b13e842951e", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=6a481021a65d6237b0c509a76fcd9c1f32c4558e", "patch": "@@ -1,4 +1,4 @@\n-609c3ce2d5d5d8a3dc4ba12c5e6e1100873f9ed1\n+5e2a81d9cbcd653d9eed52344d664e72ba1355bc\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "4a9a118ebba67b39a69d5d41dfd7138db477093c", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=6a481021a65d6237b0c509a76fcd9c1f32c4558e", "patch": "@@ -279,7 +279,7 @@ class Mangler : public Visitor\n     {\n         visit((Type *)t);\n         if (t->dim)\n-            buf->printf(\"%llu\", t->dim->toInteger());\n+            buf->print(t->dim->toInteger());\n         if (t->next)\n             visitWithMask(t->next, t->mod);\n     }\n@@ -377,7 +377,8 @@ class Mangler : public Visitor\n         visit((Type *)t);\n         const char *name = t->ident->toChars();\n         size_t len = strlen(name);\n-        buf->printf(\"%u%s\", (unsigned)len, name);\n+        buf->print(len);\n+        buf->writestring(name);\n     }\n \n     void visit(TypeEnum *t)\n@@ -493,7 +494,7 @@ class Mangler : public Visitor\n             s->error(\"excessive length %llu for symbol, possible recursive expansion?\", buf->length() + len);\n         else\n         {\n-            buf->printf(\"%llu\", (ulonglong)len);\n+            buf->print(len);\n             buf->write(id, len);\n         }\n     }\n@@ -822,9 +823,15 @@ class Mangler : public Visitor\n     void visit(IntegerExp *e)\n     {\n         if ((sinteger_t)e->value < 0)\n-            buf->printf(\"N%lld\", -e->value);\n+        {\n+            buf->writeByte('N');\n+            buf->print(-e->value);\n+        }\n         else\n-            buf->printf(\"i%lld\",  e->value);\n+        {\n+            buf->writeByte('i');\n+            buf->print(e->value);\n+        }\n     }\n \n     void visit(RealExp *e)\n@@ -946,7 +953,8 @@ class Mangler : public Visitor\n         }\n         buf->reserve(1 + 11 + 2 * qlen);\n         buf->writeByte(m);\n-        buf->printf(\"%d_\", (int)qlen); // nbytes <= 11\n+        buf->print(qlen);\n+        buf->writeByte('_');    // nbytes <= 11\n \n         for (utf8_t *p = (utf8_t *)buf->slice().ptr + buf->length(), *pend = p + 2 * qlen;\n              p < pend; p += 2, ++q)\n@@ -962,7 +970,8 @@ class Mangler : public Visitor\n     void visit(ArrayLiteralExp *e)\n     {\n         size_t dim = e->elements ? e->elements->length : 0;\n-        buf->printf(\"A%u\", dim);\n+        buf->writeByte('A');\n+        buf->print(dim);\n         for (size_t i = 0; i < dim; i++)\n         {\n             e->getElement(i)->accept(this);\n@@ -972,7 +981,8 @@ class Mangler : public Visitor\n     void visit(AssocArrayLiteralExp *e)\n     {\n         size_t dim = e->keys->length;\n-        buf->printf(\"A%u\", dim);\n+        buf->writeByte('A');\n+        buf->print(dim);\n         for (size_t i = 0; i < dim; i++)\n         {\n             (*e->keys)[i]->accept(this);\n@@ -983,7 +993,8 @@ class Mangler : public Visitor\n     void visit(StructLiteralExp *e)\n     {\n         size_t dim = e->elements ? e->elements->length : 0;\n-        buf->printf(\"S%u\", dim);\n+        buf->writeByte('S');\n+        buf->print(dim);\n         for (size_t i = 0; i < dim; i++)\n         {\n             Expression *ex = (*e->elements)[i];"}, {"sha": "81c2e9018059d323bb265a81012f109e1999918d", "filename": "gcc/d/dmd/root/outbuffer.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c?ref=6a481021a65d6237b0c509a76fcd9c1f32c4558e", "patch": "@@ -319,6 +319,37 @@ void OutBuffer::printf(const char *format, ...)\n     va_end(ap);\n }\n \n+/**************************************\n+ * Convert `u` to a string and append it to the buffer.\n+ * Params:\n+ *  u = integral value to append\n+ */\n+void OutBuffer::print(unsigned long long u)\n+{\n+    unsigned long long value = u;\n+    char buf[20];\n+    const unsigned radix = 10;\n+\n+    size_t i = sizeof(buf);\n+    do\n+    {\n+        if (value < radix)\n+        {\n+            unsigned char x = (unsigned char)value;\n+            buf[--i] = (char)(x + '0');\n+            break;\n+        }\n+        else\n+        {\n+            unsigned char x = (unsigned char)(value % radix);\n+            value = value / radix;\n+            buf[--i] = (char)(x + '0');\n+        }\n+    } while (value);\n+\n+    write(buf + i, sizeof(buf) - i);\n+}\n+\n void OutBuffer::bracket(char left, char right)\n {\n     reserve(2);"}, {"sha": "da0d305aa5275efd38cb5d1652ca4e3f6b49eae5", "filename": "gcc/d/dmd/root/outbuffer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a481021a65d6237b0c509a76fcd9c1f32c4558e/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h?ref=6a481021a65d6237b0c509a76fcd9c1f32c4558e", "patch": "@@ -61,6 +61,7 @@ struct OutBuffer\n     void fill0(size_t nbytes);\n     void vprintf(const char *format, va_list args);\n     void printf(const char *format, ...);\n+    void print(unsigned long long u);\n     void bracket(char left, char right);\n     size_t bracket(size_t i, const char *left, size_t j, const char *right);\n     void spread(size_t offset, size_t nbytes);"}]}