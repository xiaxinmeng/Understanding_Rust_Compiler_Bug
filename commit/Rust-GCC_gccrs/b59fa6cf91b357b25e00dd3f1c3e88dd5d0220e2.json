{"sha": "b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5ZmE2Y2Y5MWIzNTdiMjVlMDBkZDNmMWMzZTg4ZGQ1ZDAyMjBlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-05-27T22:50:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-05-27T22:50:41Z"}, "message": "except.c (can_throw_internal_1, [...]): Add \"is_resx\" argument.\n\n\t* except.c (can_throw_internal_1, can_throw_external_1): Add\n\t\"is_resx\" argument.\n\t(can_throw_external, can_throw_internal): Bring into sync wrt\n\tdealing resx.\n\t* except.h (can_throw_internal_1, can_throw_external_1): Update\n\tprototype.\n\t* tree-eh.c (tree_can_throw_internal, tree_can_throw_external):\n\tDeal properly with resx.\n\nFrom-SVN: r100282", "tree": {"sha": "9b52f4570bb28084ba650786b833a780a6ea3ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b52f4570bb28084ba650786b833a780a6ea3ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/comments", "author": null, "committer": null, "parents": [{"sha": "ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea497bb84cf1e43948fd78d1d4a985182a91c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea497bb84cf1e43948fd78d1d4a985182a91c0cd"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "49537c978339925a1ef57688c12af5d49ea33247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "patch": "@@ -1,3 +1,14 @@\n+2005-05-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* except.c (can_throw_internal_1, can_throw_external_1): Add \n+\t\"is_resx\" argument.\n+\t(can_throw_external, can_throw_internal): Bring into sync wrt\n+\tdealing resx.\n+\t* except.h (can_throw_internal_1, can_throw_external_1): Update\n+\tprototype.\n+\t* tree-eh.c (tree_can_throw_internal, tree_can_throw_external):\n+\tDeal properly with resx.\n+\n 2005-05-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h (basic_block_def): Add phi_nodes and"}, {"sha": "78594122e5d0b4cc7f799ab3e79d011feb4dfbd1", "filename": "gcc/except.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "patch": "@@ -2539,15 +2539,17 @@ reachable_handlers (rtx insn)\n    within the function.  */\n \n bool\n-can_throw_internal_1 (int region_number)\n+can_throw_internal_1 (int region_number, bool is_resx)\n {\n   struct eh_region *region;\n   tree type_thrown;\n \n   region = cfun->eh->region_array[region_number];\n \n   type_thrown = NULL_TREE;\n-  if (region->type == ERT_THROW)\n+  if (is_resx)\n+    region = region->outer;\n+  else if (region->type == ERT_THROW)\n     {\n       type_thrown = region->u.throw.type;\n       region = region->outer;\n@@ -2579,7 +2581,7 @@ can_throw_internal (rtx insn)\n   if (JUMP_P (insn)\n       && GET_CODE (PATTERN (insn)) == RESX\n       && XINT (PATTERN (insn), 0) > 0)\n-    return can_throw_internal_1 (XINT (PATTERN (insn), 0));\n+    return can_throw_internal_1 (XINT (PATTERN (insn), 0), true);\n \n   if (NONJUMP_INSN_P (insn)\n       && GET_CODE (PATTERN (insn)) == SEQUENCE)\n@@ -2590,22 +2592,24 @@ can_throw_internal (rtx insn)\n   if (!note || INTVAL (XEXP (note, 0)) <= 0)\n     return false;\n \n-  return can_throw_internal_1 (INTVAL (XEXP (note, 0)));\n+  return can_throw_internal_1 (INTVAL (XEXP (note, 0)), false);\n }\n \n /* Determine if the given INSN can throw an exception that is\n    visible outside the function.  */\n \n bool\n-can_throw_external_1 (int region_number)\n+can_throw_external_1 (int region_number, bool is_resx)\n {\n   struct eh_region *region;\n   tree type_thrown;\n \n   region = cfun->eh->region_array[region_number];\n \n   type_thrown = NULL_TREE;\n-  if (region->type == ERT_THROW)\n+  if (is_resx)\n+    region = region->outer;\n+  else if (region->type == ERT_THROW)\n     {\n       type_thrown = region->u.throw.type;\n       region = region->outer;\n@@ -2628,6 +2632,11 @@ can_throw_external (rtx insn)\n   if (! INSN_P (insn))\n     return false;\n \n+  if (JUMP_P (insn)\n+      && GET_CODE (PATTERN (insn)) == RESX\n+      && XINT (PATTERN (insn), 0) > 0)\n+    return can_throw_external_1 (XINT (PATTERN (insn), 0), true);\n+\n   if (NONJUMP_INSN_P (insn)\n       && GET_CODE (PATTERN (insn)) == SEQUENCE)\n     insn = XVECEXP (PATTERN (insn), 0, 0);\n@@ -2647,7 +2656,7 @@ can_throw_external (rtx insn)\n   if (INTVAL (XEXP (note, 0)) <= 0)\n     return false;\n \n-  return can_throw_external_1 (INTVAL (XEXP (note, 0)));\n+  return can_throw_external_1 (INTVAL (XEXP (note, 0)), false);\n }\n \n /* Set TREE_NOTHROW and cfun->all_throwers_are_sibcalls.  */"}, {"sha": "9188c3bb60fa75644df4226f36be01c3e2d57568", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "patch": "@@ -46,9 +46,9 @@ extern void for_each_eh_label (void (*) (rtx));\n extern void for_each_eh_region (void (*) (struct eh_region *));\n \n /* Determine if the given INSN can throw an exception.  */\n-extern bool can_throw_internal_1 (int);\n+extern bool can_throw_internal_1 (int, bool);\n extern bool can_throw_internal (rtx);\n-extern bool can_throw_external_1 (int);\n+extern bool can_throw_external_1 (int, bool);\n extern bool can_throw_external (rtx);\n \n /* Set TREE_NOTHROW and cfun->all_throwers_are_sibcalls.  */"}, {"sha": "294e309458b17ea9f52e610a916e2b158aaf8184", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b59fa6cf91b357b25e00dd3f1c3e88dd5d0220e2", "patch": "@@ -2009,29 +2009,31 @@ bool\n tree_can_throw_internal (tree stmt)\n {\n   int region_nr;\n+  bool is_resx = false;\n \n   if (TREE_CODE (stmt) == RESX_EXPR)\n-    region_nr = TREE_INT_CST_LOW (TREE_OPERAND (stmt, 0));\n+    region_nr = TREE_INT_CST_LOW (TREE_OPERAND (stmt, 0)), is_resx = true;\n   else\n     region_nr = lookup_stmt_eh_region (stmt);\n   if (region_nr < 0)\n     return false;\n-  return can_throw_internal_1 (region_nr);\n+  return can_throw_internal_1 (region_nr, is_resx);\n }\n \n bool\n tree_can_throw_external (tree stmt)\n {\n   int region_nr;\n+  bool is_resx = false;\n \n   if (TREE_CODE (stmt) == RESX_EXPR)\n-    region_nr = TREE_INT_CST_LOW (TREE_OPERAND (stmt, 0));\n+    region_nr = TREE_INT_CST_LOW (TREE_OPERAND (stmt, 0)), is_resx = true;\n   else\n     region_nr = lookup_stmt_eh_region (stmt);\n   if (region_nr < 0)\n     return tree_could_throw_p (stmt);\n   else\n-    return can_throw_external_1 (region_nr);\n+    return can_throw_external_1 (region_nr, is_resx);\n }\n \n /* Given a statement OLD_STMT and a new statement NEW_STMT that has replaced"}]}