{"sha": "37818e7cec777ac18d89ec448cb94603d3ec5c7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4MThlN2NlYzc3N2FjMThkODllYzQ0OGNiOTQ2MDNkM2VjNWM3Zg==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2006-02-26T20:23:40Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-02-26T20:23:40Z"}, "message": "common.opt (-floop-optimize, [...]): Remove.\n\ngcc/\n\t* common.opt (-floop-optimize, -frerun-loop-opt): Remove.\n\t* tree-pass.h (pass_loop_optimize): Remove.\n\t* passes.c (pass_loop_optimize): Never run it.\n\t* toplev.c (backend_init): Don't call init_loop.\n\t* opts.c (flag_loop_optimize_set): Remove.\n\t(decode_options): Never set flag_loop_optimize or flag_rerun_loop_opt.\n\t(common_handle_option) <OPT_floop_optimize>: Remove.  Don't disable\n\tthe old RTL loop optimizer when profiling enabled.\n\t* predict.c (tree_estimate_probability): Always strip builtin_expect.\n\t* cfgcleanup.c (try_forward_edges): Don't avoid killing loop\n\tpre-headers for the sake of the old RTL loop optimizer.\n\t* Makefile.in: Remove all references to loop.o.\n\n\t* doc/invoke.texi: Remove all references to -floop-optimize\n\tand -frerun-loop-opt.\n\ntestsuite/\n\t* gcc.dg/20031201-1.c: Don't use -frerun-loop-opt.\n\t* g++.old-deja/g++.robertl/eb132.C: Likewise.\n\nFrom-SVN: r111459", "tree": {"sha": "17497b7fe2c1670f29453859c0c2bf34edca6ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17497b7fe2c1670f29453859c0c2bf34edca6ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37818e7cec777ac18d89ec448cb94603d3ec5c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37818e7cec777ac18d89ec448cb94603d3ec5c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37818e7cec777ac18d89ec448cb94603d3ec5c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37818e7cec777ac18d89ec448cb94603d3ec5c7f/comments", "author": null, "committer": null, "parents": [{"sha": "74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fe790bfd431c25d77bca1bbe6df6d5d6eb1c82"}], "stats": {"total": 115, "additions": 31, "deletions": 84}, "files": [{"sha": "c2e563914f6b1aae8ea9aacfe9a14d9ad778d204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -1,3 +1,21 @@\n+2006-02-26  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* common.opt (-floop-optimize, -frerun-loop-opt): Remove.\n+\t* tree-pass.h (pass_loop_optimize): Remove.\n+\t* passes.c (pass_loop_optimize): Never run it.\n+\t* toplev.c (backend_init): Don't call init_loop.\n+\t* opts.c (flag_loop_optimize_set): Remove.\n+\t(decode_options): Never set flag_loop_optimize or flag_rerun_loop_opt.\n+\t(common_handle_option) <OPT_floop_optimize>: Remove.  Don't disable\n+\tthe old RTL loop optimizer when profiling enabled.\n+\t* predict.c (tree_estimate_probability): Always strip builtin_expect.\n+\t* cfgcleanup.c (try_forward_edges): Don't avoid killing loop\n+\tpre-headers for the sake of the old RTL loop optimizer.\n+\t* Makefile.in: Remove all references to loop.o.\n+\n+\t* doc/invoke.texi: Remove all references to -floop-optimize\n+\tand -frerun-loop-opt.\n+\n 2006-02-26  Zack Weinberg  <zackw@panix.com>\n \n \t* doc/md.texi (Machine Constraints): Refer to all files with paths"}, {"sha": "0cd1bec491ad25cca9f8cbf840f3722de0cd4f74", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -981,7 +981,7 @@ OBJS-common = \\\n  haifa-sched.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o insn-modes.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n  integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n- loop.o mode-switching.o modulo-sched.o optabs.o options.o opts.o\t   \\\n+ mode-switching.o modulo-sched.o optabs.o options.o opts.o\t   \\\n  params.o postreload.o postreload-gcse.o predict.o\t\t\t   \\\n  insn-preds.o insn-automata.o pointer-set.o \t\t\t   \t   \\\n  print-rtl.o print-tree.o profile.o value-prof.o var-tracking.o\t\t   \\\n@@ -2371,11 +2371,6 @@ value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n    tree-flow-inline.h timevar.h tree-pass.h\n-loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(FLAGS_H) insn-config.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) \\\n-   real.h $(PREDICT_H) $(BASIC_BLOCK_H) $(FUNCTION_H) $(CFGLOOP_H) \\\n-   toplev.h except.h cselib.h $(OPTABS_H) $(TM_P_H) $(GGC_H) insn-flags.h \\\n-   timevar.h tree-pass.h\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    toplev.h $(CFGLOOP_H) output.h $(PARAMS_H)"}, {"sha": "0e67415e81c81f3f5e04e27d246559b731aa82d3", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -516,39 +516,6 @@ try_forward_edges (int mode, basic_block b)\n \t  if (!new_target)\n \t    break;\n \n-\t  /* Avoid killing of loop pre-headers, as it is the place loop\n-\t     optimizer wants to hoist code to.\n-\n-\t     For fallthru forwarders, the LOOP_BEG note must appear between\n-\t     the header of block and CODE_LABEL of the loop, for non forwarders\n-\t     it must appear before the JUMP_INSN.  */\n-\t  if ((mode & CLEANUP_PRE_LOOP) && optimize && flag_loop_optimize)\n-\t    {\n-\t      rtx insn = (EDGE_SUCC (target, 0)->flags & EDGE_FALLTHRU\n-\t\t\t  ? BB_HEAD (target) : prev_nonnote_insn (BB_END (target)));\n-\n-\t      if (!NOTE_P (insn))\n-\t\tinsn = NEXT_INSN (insn);\n-\n-\t      for (; insn && !LABEL_P (insn) && !INSN_P (insn);\n-\t\t   insn = NEXT_INSN (insn))\n-\t\tif (NOTE_P (insn)\n-\t\t    && NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG)\n-\t\t  break;\n-\n-\t      if (insn && NOTE_P (insn))\n-\t\tbreak;\n-\n-\t      /* Do not clean up branches to just past the end of a loop\n-\t\t at this time; it can mess up the loop optimizer's\n-\t\t recognition of some patterns.  */\n-\n-\t      insn = PREV_INSN (BB_HEAD (target));\n-\t      if (insn && NOTE_P (insn)\n-\t\t    && NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END)\n-\t\tbreak;\n-\t    }\n-\n \t  counter++;\n \t  target = new_target;\n \t  threaded |= new_target_threaded;"}, {"sha": "4229f147c2c992117f2dda5639e182fb43a1adf7", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -555,10 +555,6 @@ fleading-underscore\n Common Report Var(flag_leading_underscore) Init(-1)\n Give external symbols a leading underscore\n \n-floop-optimize\n-Common Report Var(flag_loop_optimize)\n-Perform loop optimizations\n-\n fmath-errno\n Common Report Var(flag_errno_math) Init(1)\n Set errno after built-in math functions\n@@ -725,10 +721,6 @@ frerun-cse-after-loop\n Common Report Var(flag_rerun_cse_after_loop) Init(2)\n Add a common subexpression elimination pass after loop optimizations\n \n-frerun-loop-opt\n-Common Report Var(flag_rerun_loop_opt)\n-Run the loop optimizer twice\n-\n frounding-math\n Common Report Var(flag_rounding_math)\n Disable optimizations that assume default FP rounding behavior"}, {"sha": "17efb6c1679543e77ab71b492e1033945d949674", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -310,7 +310,7 @@ Objective-C and Objective-C++ Dialects}.\n -fexpensive-optimizations  -ffast-math  -ffloat-store @gol\n -fforce-addr  -ffunction-sections @gol\n -fgcse  -fgcse-lm  -fgcse-sm  -fgcse-las  -fgcse-after-reload @gol\n--floop-optimize -fcrossjumping  -fif-conversion  -fif-conversion2 @gol\n+-fcrossjumping  -fif-conversion  -fif-conversion2 @gol\n -finline-functions  -finline-functions-called-once @gol\n -finline-limit=@var{n}  -fkeep-inline-functions @gol\n -fkeep-static-consts  -fmerge-constants  -fmerge-all-constants @gol\n@@ -4401,7 +4401,6 @@ compilation time.\n -fdelayed-branch @gol\n -fguess-branch-probability @gol\n -fcprop-registers @gol\n--floop-optimize @gol\n -fif-conversion @gol\n -fif-conversion2 @gol\n -ftree-ccp @gol\n@@ -4775,12 +4774,6 @@ performed.\n \n Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -frerun-loop-opt\n-@opindex frerun-loop-opt\n-Run the loop optimizer twice.\n-\n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n-\n @item -fgcse\n @opindex fgcse\n Perform a global common subexpression elimination pass.\n@@ -4826,13 +4819,6 @@ When @option{-fgcse-after-reload} is enabled, a redundant load elimination\n pass is performed after reload.  The purpose of this pass is to cleanup\n redundant spilling.\n \n-@item -floop-optimize\n-@opindex floop-optimize\n-Perform loop optimizations: move constant expressions out of loops, simplify\n-exit test conditions and optionally do strength-reduction as well.\n-\n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n-\n @item -funsafe-loop-optimizations\n @opindex funsafe-loop-optimizations\n If given, the loop optimizer will assume that loop indices do not\n@@ -5452,8 +5438,7 @@ Enable profile feedback directed optimizations, and optimizations\n generally profitable only with profile feedback available.\n \n The following options are enabled: @code{-fbranch-probabilities}, @code{-fvpt},\n-@code{-funroll-loops}, @code{-fpeel-loops}, @code{-ftracer},\n-@code{-fno-loop-optimize}.\n+@code{-funroll-loops}, @code{-fpeel-loops}, @code{-ftracer}\n \n @end table\n \n@@ -5705,7 +5690,7 @@ Enabled with @option{-fprofile-use}.\n \n @item -fmove-loop-invariants\n @opindex fmove-loop-invariants\n-Enables the loop invariant motion pass in the new loop optimizer.  Enabled\n+Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled\n at level @option{-O1}\n \n @item -funswitch-loops"}, {"sha": "ce0a5a92a0083cb1ddb3d5b38ace7298b6fd42c2", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -100,7 +100,6 @@ static bool profile_arc_flag_set, flag_profile_values_set;\n static bool flag_unroll_loops_set, flag_tracer_set;\n static bool flag_value_profile_transformations_set;\n static bool flag_peel_loops_set, flag_branch_probabilities_set;\n-static bool flag_loop_optimize_set;\n \n /* Input file names.  */\n const char **in_fnames;\n@@ -526,7 +525,6 @@ decode_options (unsigned int argc, const char **argv)\n #endif\n       flag_guess_branch_prob = 1;\n       flag_cprop_registers = 1;\n-      flag_loop_optimize = 1;\n       flag_if_conversion = 1;\n       flag_if_conversion2 = 1;\n       flag_ipa_pure_const = 1;\n@@ -568,7 +566,6 @@ decode_options (unsigned int argc, const char **argv)\n       flag_ipa_type_escape = 1;\n       flag_strength_reduce = 1;\n       flag_rerun_cse_after_loop = 1;\n-      flag_rerun_loop_opt = 1;\n       flag_caller_saves = 1;\n       flag_peephole2 = 1;\n #ifdef INSN_SCHEDULING\n@@ -859,10 +856,6 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_branch_probabilities_set = true;\n       break;\n \n-    case OPT_floop_optimize:\n-      flag_loop_optimize_set = true;\n-      break;\n-\n     case OPT_fcall_used_:\n       fix_register (arg, 0, 1);\n       break;\n@@ -939,9 +932,6 @@ common_handle_option (size_t scode, const char *arg, int value,\n         flag_tracer = value;\n       if (!flag_value_profile_transformations_set)\n         flag_value_profile_transformations = value;\n-      /* Old loop optimizer is incompatible with tree profiling.  */\n-      if (!flag_loop_optimize_set)\n-\tflag_loop_optimize = 0;\n       break;\n \n     case OPT_fprofile_generate:"}, {"sha": "4b30d57e4139457939dc3643f6cdc81b58141677", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -633,7 +633,6 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_jump2);\n   NEXT_PASS (pass_cse);\n   NEXT_PASS (pass_gcse);\n-  NEXT_PASS (pass_loop_optimize);\n   NEXT_PASS (pass_jump_bypass);\n   NEXT_PASS (pass_cfg);\n   NEXT_PASS (pass_branch_prob);"}, {"sha": "8555982e072fc7e28d94384e746517a4691b5d80", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -1387,8 +1387,7 @@ tree_estimate_probability (void)\n   FOR_EACH_BB (bb)\n     combine_predictions_for_bb (bb);\n \n-  if (!flag_loop_optimize)\n-    strip_builtin_expect ();\n+  strip_builtin_expect ();\n   estimate_bb_frequencies (&loops_info);\n   free_dominance_info (CDI_POST_DOMINATORS);\n   remove_fake_exit_edges ();"}, {"sha": "68924f569386cdc744e7ef012dc113684de3b98d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -1,3 +1,8 @@\n+2006-02-26  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* gcc.dg/20031201-1.c: Don't use -frerun-loop-opt.\n+\t* g++.old-deja/g++.robertl/eb132.C: Likewise.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/fold-even-1.c: New test case."}, {"sha": "e5992aa66cbf811bbd62bbce29195fb9555a51bd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb132.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb132.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb132.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb132.C?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -1,10 +1,10 @@\n // { dg-do assemble  }\n-// { dg-options \"-O -Wall  -fgcse -frerun-loop-opt\" }\n+// { dg-options \"-O -Wall  -fgcse\" }\n // From: Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de> \n // Reported against EGCS snaps 98/06/28.\n //\n // Compilation of this program with the flags g++ -Wall -O -fgcse\n-// -frerun-loop-opt or -O2 produces spurious warnings in the standard\n+// or -O2 produces spurious warnings in the standard\n // header <std/bastring.h>.\n //\n // They vanish if the declaration of a::b is taken out."}, {"sha": "91f2d9ddf7ded690941212613885f0e34c3e1c0b", "filename": "gcc/testsuite/gcc.dg/20031201-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -4,7 +4,7 @@\n    the jump bypassing pass.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-expensive-optimizations -fno-rerun-loop-opt\" } */\n+/* { dg-options \"-O2 -fno-expensive-optimizations\" } */\n \n int outbuf[100];\n int outcnt;"}, {"sha": "fab180db83d2f0884be8a161f34ce7e97e445df6", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -1833,7 +1833,6 @@ backend_init (void)\n   init_regs ();\n   init_fake_stack_mems ();\n   init_alias_once ();\n-  init_loop ();\n   init_reload ();\n   init_varasm_once ();\n "}, {"sha": "c935f7ee7970add5691fb744194e163e1a79f1c4", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -118,7 +118,6 @@ extern int target_flags_explicit;\n extern bool user_defined_section_attribute;\n \n /* See toplev.c.  */\n-extern int flag_loop_optimize;\n extern int flag_crossjumping;\n extern int flag_if_conversion;\n extern int flag_if_conversion2;"}, {"sha": "c34e198c5b77b72d752f4748feb40b0e51fef9c6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37818e7cec777ac18d89ec448cb94603d3ec5c7f/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=37818e7cec777ac18d89ec448cb94603d3ec5c7f", "patch": "@@ -332,7 +332,6 @@ extern struct tree_opt_pass pass_instantiate_virtual_regs;\n extern struct tree_opt_pass pass_jump2;\n extern struct tree_opt_pass pass_cse;\n extern struct tree_opt_pass pass_gcse;\n-extern struct tree_opt_pass pass_loop_optimize;\n extern struct tree_opt_pass pass_jump_bypass;\n extern struct tree_opt_pass pass_cfg;\n extern struct tree_opt_pass pass_profiling;"}]}