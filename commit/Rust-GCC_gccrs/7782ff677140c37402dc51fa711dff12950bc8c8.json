{"sha": "7782ff677140c37402dc51fa711dff12950bc8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4MmZmNjc3MTQwYzM3NDAyZGM1MWZhNzExZGZmMTI5NTBiYzhjOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:33:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:33:56Z"}, "message": "[multiple changes]\n\n2016-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* contracts.adb (Has_Null_Body): Move to sem_util, for general\n\tavailability.\n\t* sem_util.ads, sem_util.adb (Has_Null_Body): Predicate to\n\tdetermine when an internal procedure created for some assertion\n\tchecking (e.g. type invariant) is a null procedure. Used to\n\teliminate redundant calls to such procedures when they apply to\n\tcomponents of composite types.\n\t* exp_ch3.adb (Build_Component_Invariant_Call): Do not add call\n\tif invariant procedure has a null body.\n\n2016-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.ads (Check_Selector): Clarify effect on IN OUT socket\n\tset parameters.\n\n2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Process_Action): Pass the action\n\tlist to Process_Transient_Object.\n\t(Process_If_Case_Statements): Pass the action list to\n\tProcess_Transient_Object.\n\t(Process_Transient_Object): Add new parameter Stmts and update the\n\tcomment on usage. When the context is a Boolean evaluation, insert\n\tany finalization calls after the last statement of the construct.\n\nFrom-SVN: r237435", "tree": {"sha": "fdf7de0ad79f5ebf51755f94bd08abec7d1fa29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf7de0ad79f5ebf51755f94bd08abec7d1fa29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7782ff677140c37402dc51fa711dff12950bc8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7782ff677140c37402dc51fa711dff12950bc8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7782ff677140c37402dc51fa711dff12950bc8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7782ff677140c37402dc51fa711dff12950bc8c8/comments", "author": null, "committer": null, "parents": [{"sha": "4969efdf7d92bc0a018a664fccc6d715e9de0d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969efdf7d92bc0a018a664fccc6d715e9de0d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4969efdf7d92bc0a018a664fccc6d715e9de0d9f"}], "stats": {"total": 222, "additions": 146, "deletions": 76}, "files": [{"sha": "cedc29835b8ee4532227835b0175a6df2c395d24", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -1,3 +1,30 @@\n+2016-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* contracts.adb (Has_Null_Body): Move to sem_util, for general\n+\tavailability.\n+\t* sem_util.ads, sem_util.adb (Has_Null_Body): Predicate to\n+\tdetermine when an internal procedure created for some assertion\n+\tchecking (e.g. type invariant) is a null procedure. Used to\n+\teliminate redundant calls to such procedures when they apply to\n+\tcomponents of composite types.\n+\t* exp_ch3.adb (Build_Component_Invariant_Call): Do not add call\n+\tif invariant procedure has a null body.\n+\n+2016-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.ads (Check_Selector): Clarify effect on IN OUT socket\n+\tset parameters.\n+\n+2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Action): Pass the action\n+\tlist to Process_Transient_Object.\n+\t(Process_If_Case_Statements): Pass the action list to\n+\tProcess_Transient_Object.\n+\t(Process_Transient_Object): Add new parameter Stmts and update the\n+\tcomment on usage. When the context is a Boolean evaluation, insert\n+\tany finalization calls after the last statement of the construct.\n+\n 2016-06-14  Tristan Gingold  <gingold@adacore.com>\n \n \t* einfo.adb, einfo.ads (Has_Timing_Event,"}, {"sha": "c85b650d66b19584bd1bfbacb3bb0fd5fa43fb8c", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -1452,73 +1452,10 @@ package body Contracts is\n          -------------------------\n \n          function Invariant_Checks_OK (Typ : Entity_Id) return Boolean is\n-            function Has_Null_Body (Proc_Id : Entity_Id) return Boolean;\n-            --  Determine whether the body of procedure Proc_Id contains a sole\n-            --  null statement, possibly followed by an optional return.\n-\n             function Has_Public_Visibility_Of_Subprogram return Boolean;\n             --  Determine whether type Typ has public visibility of subprogram\n             --  Subp_Id.\n \n-            -------------------\n-            -- Has_Null_Body --\n-            -------------------\n-\n-            function Has_Null_Body (Proc_Id : Entity_Id) return Boolean is\n-               Body_Id : Entity_Id;\n-               Decl    : Node_Id;\n-               Spec    : Node_Id;\n-               Stmt1   : Node_Id;\n-               Stmt2   : Node_Id;\n-\n-            begin\n-               Spec := Parent (Proc_Id);\n-               Decl := Parent (Spec);\n-\n-               --  Retrieve the entity of the invariant procedure body\n-\n-               if Nkind (Spec) = N_Procedure_Specification\n-                 and then Nkind (Decl) = N_Subprogram_Declaration\n-               then\n-                  Body_Id := Corresponding_Body (Decl);\n-\n-               --  The body acts as a spec\n-\n-               else\n-                  Body_Id := Proc_Id;\n-               end if;\n-\n-               --  The body will be generated later\n-\n-               if No (Body_Id) then\n-                  return False;\n-               end if;\n-\n-               Spec := Parent (Body_Id);\n-               Decl := Parent (Spec);\n-\n-               pragma Assert\n-                 (Nkind (Spec) = N_Procedure_Specification\n-                   and then Nkind (Decl) = N_Subprogram_Body);\n-\n-               Stmt1 := First (Statements (Handled_Statement_Sequence (Decl)));\n-\n-               --  Look for a null statement followed by an optional return\n-               --  statement.\n-\n-               if Nkind (Stmt1) = N_Null_Statement then\n-                  Stmt2 := Next (Stmt1);\n-\n-                  if Present (Stmt2) then\n-                     return Nkind (Stmt2) = N_Simple_Return_Statement;\n-                  else\n-                     return True;\n-                  end if;\n-               end if;\n-\n-               return False;\n-            end Has_Null_Body;\n-\n             -----------------------------------------\n             -- Has_Public_Visibility_Of_Subprogram --\n             -----------------------------------------"}, {"sha": "3213b5d56a0875f8d5eeb5df41cc80b329b85eea", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -3714,9 +3714,9 @@ package body Exp_Ch3 is\n          Sel_Comp : Node_Id;\n          Typ      : Entity_Id;\n          Call     : Node_Id;\n+         Proc     : Entity_Id;\n \n       begin\n-         Invariant_Found := True;\n          Typ := Etype (Comp);\n \n          Sel_Comp :=\n@@ -3744,10 +3744,16 @@ package body Exp_Ch3 is\n \n          --  The aspect is type-specific, so retrieve it from the base type\n \n+         Proc := Invariant_Procedure (Base_Type (Typ));\n+\n+         if Has_Null_Body (Proc) then\n+            return Make_Null_Statement (Loc);\n+         end if;\n+\n+         Invariant_Found := True;\n          Call :=\n            Make_Procedure_Call_Statement (Loc,\n-             Name                   =>\n-               New_Occurrence_Of (Invariant_Procedure (Base_Type (Typ)), Loc),\n+             Name                   => New_Occurrence_Of (Proc, Loc),\n              Parameter_Associations => New_List (Sel_Comp));\n \n          if Is_Access_Type (Etype (Comp)) then"}, {"sha": "36f3ecc1b00101442c046d79ab1c4e8d2d7bc9f0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -230,13 +230,18 @@ package body Exp_Ch4 is\n    --  generates code to clean them up when the context of the expression is\n    --  evaluated or elaborated.\n \n-   procedure Process_Transient_Object (Decl : Node_Id; N : Node_Id);\n+   procedure Process_Transient_Object\n+     (Decl  : Node_Id;\n+      N     : Node_Id;\n+      Stmts : List_Id);\n    --  Subsidiary routine to the expansion of expression_with_actions, if and\n    --  case expressions. Generate all necessary code to finalize a transient\n    --  controlled object when the enclosing context is elaborated or evaluated.\n    --  Decl denotes the declaration of the transient controlled object which is\n    --  usually the result of a controlled function call. N denotes the related\n-   --  expression_with_actions, if expression, or case expression.\n+   --  expression_with_actions, if expression, or case expression node. Stmts\n+   --  denotes the statement list which contains Decl, either at the top level\n+   --  or within a nested construct.\n \n    procedure Rewrite_Comparison (N : Node_Id);\n    --  If N is the node for a comparison whose outcome can be determined at\n@@ -4992,7 +4997,7 @@ package body Exp_Ch4 is\n          if Nkind (Act) = N_Object_Declaration\n            and then Is_Finalizable_Transient (Act, N)\n          then\n-            Process_Transient_Object (Act, N);\n+            Process_Transient_Object (Act, N, Acts);\n             return Abandon;\n \n          --  Avoid processing temporary function results multiple times when\n@@ -5037,7 +5042,7 @@ package body Exp_Ch4 is\n       --  do not leak to the expression of the expression_with_actions node:\n \n       --    do\n-      --       Trans_Id : Ctrl_Typ : ...;\n+      --       Trans_Id : Ctrl_Typ := ...;\n       --       Alias : ... := Trans_Id;\n       --    in ... Alias ... end;\n \n@@ -5047,7 +5052,7 @@ package body Exp_Ch4 is\n       --  reference to the Alias within the actions list:\n \n       --    do\n-      --       Trans_Id : Ctrl_Typ : ...;\n+      --       Trans_Id : Ctrl_Typ := ...;\n       --       Alias : ... := Trans_Id;\n       --       Val : constant Boolean := ... Alias ...;\n       --       <finalize Trans_Id>\n@@ -12909,7 +12914,7 @@ package body Exp_Ch4 is\n          if Nkind (Decl) = N_Object_Declaration\n            and then Is_Finalizable_Transient (Decl, N)\n          then\n-            Process_Transient_Object (Decl, N);\n+            Process_Transient_Object (Decl, N, Stmts);\n          end if;\n \n          Next (Decl);\n@@ -12920,7 +12925,11 @@ package body Exp_Ch4 is\n    -- Process_Transient_Object --\n    ------------------------------\n \n-   procedure Process_Transient_Object (Decl : Node_Id; N : Node_Id) is\n+   procedure Process_Transient_Object\n+     (Decl  : Node_Id;\n+      N     : Node_Id;\n+      Stmts : List_Id)\n+   is\n       Loc     : constant Source_Ptr := Sloc (Decl);\n       Obj_Id  : constant Entity_Id  := Defining_Identifier (Decl);\n       Obj_Typ : constant Node_Id    := Etype (Obj_Id);\n@@ -12940,8 +12949,32 @@ package body Exp_Ch4 is\n       --  transient controlled object.\n \n    begin\n+      pragma Assert (Nkind_In (N, N_Case_Expression,\n+                                  N_Expression_With_Actions,\n+                                  N_If_Expression));\n+\n+      --  When the context is a Boolean evaluation, all three nodes capture the\n+      --  result of their computation in a local temporary:\n+\n+      --    do\n+      --       Trans_Id : Ctrl_Typ := ...;\n+      --       Result : constant Boolean := ... Trans_Id ...;\n+      --       <finalize Trans_Id>\n+      --    in Result end;\n+\n+      --  As a result, the finalization of any transient controlled objects can\n+      --  safely take place after the result capture.\n+\n+      --  ??? could this be extended to elementary types?\n+\n       if Is_Boolean_Type (Etype (N)) then\n-         Fin_Context := Last (List_Containing (Decl));\n+         Fin_Context := Last (Stmts);\n+\n+      --  Otherwise the immediate context may not be safe enough to carry out\n+      --  transient controlled object finalization due to aliasing and nesting\n+      --  of constructs. Insert calls to [Deep_]Finalize after the innermost\n+      --  enclosing non-transient construct.\n+\n       else\n          Fin_Context := Hook_Context;\n       end if;"}, {"sha": "5de70d810dc6907c2dbbf6db15ea8c793492a5b1", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2014, AdaCore                     --\n+--                     Copyright (C) 2001-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1107,7 +1107,10 @@ package GNAT.Sockets is\n    --\n    --  Note that two different Socket_Set_Type objects must be passed as\n    --  R_Socket_Set and W_Socket_Set (even if they denote the same set of\n-   --  Sockets), or some event may be lost.\n+   --  Sockets), or some event may be lost. Also keep in mind that this\n+   --  procedure modifies the passed socket sets to indicate which sockets\n+   --  actually had events upon return. The socket set therefore has to\n+   --  be reset by the caller for further calls.\n    --\n    --  Socket_Error is raised when the select(2) system call returns an error\n    --  condition, or when a read error occurs on the signalling socket used for"}, {"sha": "020e6d739ce00ae50f344ed92181e219a43e733b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -9581,6 +9581,65 @@ package body Sem_Util is\n           and then Nkind (Node (First_Elmt (Constits))) /= N_Null;\n    end Has_Non_Null_Refinement;\n \n+   -------------------\n+   -- Has_Null_Body --\n+   -------------------\n+\n+   function Has_Null_Body (Proc_Id : Entity_Id) return Boolean is\n+      Body_Id : Entity_Id;\n+      Decl    : Node_Id;\n+      Spec    : Node_Id;\n+      Stmt1   : Node_Id;\n+      Stmt2   : Node_Id;\n+\n+   begin\n+      Spec := Parent (Proc_Id);\n+      Decl := Parent (Spec);\n+\n+      --  Retrieve the entity of the procedure body (e.g. invariant proc).\n+\n+      if Nkind (Spec) = N_Procedure_Specification\n+        and then Nkind (Decl) = N_Subprogram_Declaration\n+      then\n+         Body_Id := Corresponding_Body (Decl);\n+\n+      --  The body acts as a spec\n+\n+      else\n+         Body_Id := Proc_Id;\n+      end if;\n+\n+      --  The body will be generated later\n+\n+      if No (Body_Id) then\n+         return False;\n+      end if;\n+\n+      Spec := Parent (Body_Id);\n+      Decl := Parent (Spec);\n+\n+      pragma Assert\n+        (Nkind (Spec) = N_Procedure_Specification\n+          and then Nkind (Decl) = N_Subprogram_Body);\n+\n+      Stmt1 := First (Statements (Handled_Statement_Sequence (Decl)));\n+\n+      --  Look for a null statement followed by an optional return\n+      --  statement.\n+\n+      if Nkind (Stmt1) = N_Null_Statement then\n+         Stmt2 := Next (Stmt1);\n+\n+         if Present (Stmt2) then\n+            return Nkind (Stmt2) = N_Simple_Return_Statement;\n+         else\n+            return True;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Has_Null_Body;\n+\n    ------------------------\n    -- Has_Null_Exclusion --\n    ------------------------"}, {"sha": "a1e703fbba9dac5dcf21a985681c6d442c2d73c7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7782ff677140c37402dc51fa711dff12950bc8c8/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7782ff677140c37402dc51fa711dff12950bc8c8", "patch": "@@ -1103,6 +1103,11 @@ package Sem_Util is\n    --  as expressed in pragma Refined_State. This function does not take into\n    --  account the visible refinement region of abstract state Id.\n \n+   function Has_Null_Body (Proc_Id : Entity_Id) return Boolean;\n+   --  Determine whether the body of procedure Proc_Id contains a sole\n+   --  null statement, possibly followed by an optional return. Used to\n+   --  optimize useless calls to assertion checks.\n+\n    function Has_Null_Exclusion (N : Node_Id) return Boolean;\n    --  Determine whether node N has a null exclusion\n "}]}