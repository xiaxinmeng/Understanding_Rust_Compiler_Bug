{"sha": "899d52c6e21ab11ef716816a433c4c583e0052d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5ZDUyYzZlMjFhYjExZWY3MTY4MTZhNDMzYzRjNTgzZTAwNTJkMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-13T08:57:46Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-13T08:57:46Z"}, "message": "re PR fortran/54286 (Accepts invalid proc-pointer assignments involving proc-ptr function result)\n\n2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/54286\n\t* expr.c (gfc_check_pointer_assign): Ensure that both lvalue\n\tand rvalue interfaces are presented to gfc_compare_interfaces.\n\tSimplify references to interface names by using the symbols\n\tthemselves. Call gfc_compare_interfaces with s1 and s2 inter-\n\tchanged to overcome the asymmetry of this function. Do not\n\trepeat the check for the presence of s1 and s2.\n\n2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/54286\n\t* gfortran.dg/proc_ptr_result_8.f90 : New test.\n\nFrom-SVN: r195133", "tree": {"sha": "7af314adbc7890bb75e81fb6509028474e01ecd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af314adbc7890bb75e81fb6509028474e01ecd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899d52c6e21ab11ef716816a433c4c583e0052d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899d52c6e21ab11ef716816a433c4c583e0052d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899d52c6e21ab11ef716816a433c4c583e0052d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899d52c6e21ab11ef716816a433c4c583e0052d1/comments", "author": null, "committer": null, "parents": [{"sha": "8816ac704c531d14de865a9f86098edac06554e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8816ac704c531d14de865a9f86098edac06554e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8816ac704c531d14de865a9f86098edac06554e7"}], "stats": {"total": 90, "additions": 84, "deletions": 6}, "files": [{"sha": "92b8083dfce114446933f76be2a19bcf54c336e2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=899d52c6e21ab11ef716816a433c4c583e0052d1", "patch": "@@ -1,3 +1,13 @@\n+2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/54286\n+\t* expr.c (gfc_check_pointer_assign): Ensure that both lvalue\n+\tand rvalue interfaces are presented to gfc_compare_interfaces.\n+\tSimplify references to interface names by using the symbols\n+\tthemselves. Call gfc_compare_interfaces with s1 and s2 inter-\n+\tchanged to overcome the asymmetry of this function. Do not\n+\trepeat the check for the presence of s1 and s2.\n+\n 2013-01-12  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/55072"}, {"sha": "3010dd9e456972defb51b0059a05b66c5299fee6", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=899d52c6e21ab11ef716816a433c4c583e0052d1", "patch": "@@ -3506,15 +3506,19 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       if (comp)\n \ts1 = comp->ts.interface;\n       else\n-\ts1 = lvalue->symtree->n.sym;\n+\t{\n+\t  s1 = lvalue->symtree->n.sym;\n+\t  if (s1->ts.interface)\n+\t    s1 = s1->ts.interface;\n+\t}\n \n       comp = gfc_get_proc_ptr_comp (rvalue);\n       if (comp)\n \t{\n \t  if (rvalue->expr_type == EXPR_FUNCTION)\n \t    {\n \t      s2 = comp->ts.interface->result;\n-\t      name = comp->ts.interface->result->name;\n+\t      name = s2->name;\n \t    }\n \t  else\n \t    {\n@@ -3525,16 +3529,30 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       else if (rvalue->expr_type == EXPR_FUNCTION)\n \t{\n \t  s2 = rvalue->symtree->n.sym->result;\n-\t  name = rvalue->symtree->n.sym->result->name;\n+\t  name = s2->name;\n \t}\n       else\n \t{\n \t  s2 = rvalue->symtree->n.sym;\n-\t  name = rvalue->symtree->n.sym->name;\n+\t  name = s2->name;\n+\t}\n+\n+      if (s2->attr.proc_pointer && s2->ts.interface)\n+\ts2 = s2->ts.interface;\n+\n+      if (s1 == s2 || !s1 || !s2)\n+\treturn SUCCESS;\n+\n+      if (!gfc_compare_interfaces (s1, s2, name, 0, 1,\n+\t\t\t\t   err, sizeof(err), NULL, NULL))\n+\t{\n+\t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n+\t\t     \"at %L: %s\", &rvalue->where, err);\n+\t  return FAILURE;\n \t}\n \n-      if (s1 && s2 && !gfc_compare_interfaces (s1, s2, name, 0, 1,\n-\t\t\t\t\t       err, sizeof(err), NULL, NULL))\n+      if (!gfc_compare_interfaces (s2, s1, name, 0, 1,\n+\t\t\t\t   err, sizeof(err), NULL, NULL))\n \t{\n \t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n \t\t     \"at %L: %s\", &rvalue->where, err);"}, {"sha": "67671a86eca419a81dd023462ee8d0b5868b703f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=899d52c6e21ab11ef716816a433c4c583e0052d1", "patch": "@@ -1,3 +1,8 @@\n+2013-01-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/54286\n+\t* gfortran.dg/proc_ptr_result_8.f90 : New test.\n+\n 2013-01-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/unroll_5.c: Add nomips16 attributes."}, {"sha": "de6f39f910cc199fd1f6ab4bbb881ebb27553679", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_8.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899d52c6e21ab11ef716816a433c4c583e0052d1/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_8.f90?ref=899d52c6e21ab11ef716816a433c4c583e0052d1", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! Test fix for PR54286.\n+!\n+! Contributed by Janus Weil  <janus@gcc.gnu.org>\n+!\n+implicit integer (a)\n+type :: t\n+  procedure(a), pointer, nopass :: p\n+end type\n+type(t) :: x\n+\n+procedure(iabs), pointer :: pp\n+procedure(foo), pointer :: pp1\n+\n+x%p => a     ! ok\n+if (x%p(0) .ne. loc(foo)) call abort\n+if (x%p(1) .ne. loc(iabs)) call abort\n+\n+x%p => a(1)  ! { dg-error \"PROCEDURE POINTER mismatch in function result\" }\n+\n+pp => a(1)   ! ok\n+if (pp(-99) .ne. iabs(-99)) call abort\n+\n+pp1 => a(2)   ! ok\n+if (pp1(-99) .ne. -iabs(-99)) call abort\n+\n+pp => a  ! { dg-error \"PROCEDURE POINTER mismatch in function result\" }\n+\n+contains\n+\n+  function a (c) result (b)\n+    integer, intent(in) :: c\n+    procedure(iabs), pointer :: b\n+    if (c .eq. 1) then\n+      b => iabs\n+    else\n+      b => foo\n+    end if\n+  end function\n+\n+  integer function foo (arg)\n+    integer, intent (in) :: arg\n+    foo = -iabs(arg)\n+  end function\n+end"}]}