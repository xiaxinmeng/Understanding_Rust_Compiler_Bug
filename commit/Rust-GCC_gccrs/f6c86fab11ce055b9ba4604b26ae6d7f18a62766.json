{"sha": "f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjODZmYWIxMWNlMDU1YjliYTQ2MDRiMjZhZTZkN2YxOGE2Mjc2Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2010-03-02T18:56:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2010-03-02T18:56:50Z"}, "message": "reload1.c (rtx_p, [...]): Declare.\n\n\t* reload1.c (rtx_p, substitute_stack): Declare.\n\t(substitute): Record addresses of changed rtxs.\n\t(gen_reload_chain_without_interm_reg_p): Don't use copy_rtx anymore.\n\tRestore the original rtx when complete.\n\t(reload): Free subsitute_stack when complete.\n\nFrom-SVN: r157168", "tree": {"sha": "80025d6478b1b1df18e8c90787c4addeda028ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80025d6478b1b1df18e8c90787c4addeda028ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c86fab11ce055b9ba4604b26ae6d7f18a62766/comments", "author": null, "committer": null, "parents": [{"sha": "500cdcb007a8d5238dc60b62e2c3adc1e5cd6697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500cdcb007a8d5238dc60b62e2c3adc1e5cd6697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500cdcb007a8d5238dc60b62e2c3adc1e5cd6697"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "193d56fcddd10edc2a73eb71fe008fd0fc24320b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c86fab11ce055b9ba4604b26ae6d7f18a62766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c86fab11ce055b9ba4604b26ae6d7f18a62766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "patch": "@@ -1,3 +1,11 @@\n+2010-03-02  Jeff Law  <law@redhat.com>\n+\n+\t* reload1.c (rtx_p, substitute_stack): Declare.\n+\t(substitute): Record addresses of changed rtxs.\n+\t(gen_reload_chain_without_interm_reg_p): Don't use copy_rtx anymore.\n+\tRestore the original rtx when complete.\n+\t(reload): Free subsitute_stack when complete.\n+\n 2010-03-02  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/gccint.texi (menu): Add Testsuites as a chapter."}, {"sha": "02fef2d9eaefb77b3f4b1177c9b8db9c293b4ead", "filename": "gcc/reload1.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c86fab11ce055b9ba4604b26ae6d7f18a62766/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c86fab11ce055b9ba4604b26ae6d7f18a62766/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f6c86fab11ce055b9ba4604b26ae6d7f18a62766", "patch": "@@ -378,6 +378,21 @@ static int first_label_num;\n static char *offsets_known_at;\n static HOST_WIDE_INT (*offsets_at)[NUM_ELIMINABLE_REGS];\n \n+/* Stack of addresses where an rtx has been changed.  We can undo the \n+   changes by popping items off the stack and restoring the original\n+   value at each location. \n+\n+   We use this simplistic undo capability rather than copy_rtx as copy_rtx\n+   will not make a deep copy of a normally sharable rtx, such as\n+   (const (plus (symbol_ref) (const_int))).  If such an expression appears\n+   as R1 in gen_reload_chain_without_interm_reg_p, then a shared\n+   rtx expression would be changed.  See PR 42431.  */\n+\n+typedef rtx *rtx_p;\n+DEF_VEC_P(rtx_p);\n+DEF_VEC_ALLOC_P(rtx_p,heap);\n+static VEC(rtx_p,heap) *substitute_stack;\n+\n /* Number of labels in the current function.  */\n \n static int num_labels;\n@@ -1448,6 +1463,8 @@ reload (rtx first, int global)\n     REGNO_POINTER_ALIGN (HARD_FRAME_POINTER_REGNUM) = BITS_PER_UNIT;\n #endif\n \n+  VEC_free (rtx_p, heap, substitute_stack);\n+\n   return failure;\n }\n \n@@ -5147,9 +5164,8 @@ reloads_unique_chain_p (int r1, int r2)\n   return true;\n }\n \n-\n /* The recursive function change all occurrences of WHAT in *WHERE\n-   onto REPL.  */\n+   to REPL.  */\n static void\n substitute (rtx *where, const_rtx what, rtx repl)\n {\n@@ -5162,6 +5178,8 @@ substitute (rtx *where, const_rtx what, rtx repl)\n \n   if (*where == what || rtx_equal_p (*where, what))\n     {\n+      /* Record the location of the changed rtx.  */\n+      VEC_safe_push (rtx_p, heap, substitute_stack, where);\n       *where = repl;\n       return;\n     }\n@@ -5209,7 +5227,9 @@ substitute (rtx *where, const_rtx what, rtx repl)\n static bool\n gen_reload_chain_without_interm_reg_p (int r1, int r2)\n {\n-  bool result;\n+  /* Assume other cases in gen_reload are not possible for\n+     chain reloads or do need an intermediate hard registers.  */\n+  bool result = true;\n   int regno, n, code;\n   rtx out, in, tem, insn;\n   rtx last = get_last_insn ();\n@@ -5225,7 +5245,7 @@ gen_reload_chain_without_interm_reg_p (int r1, int r2)\n   regno = rld[r1].regno >= 0 ? rld[r1].regno : rld[r2].regno;\n   gcc_assert (regno >= 0);\n   out = gen_rtx_REG (rld[r1].mode, regno);\n-  in = copy_rtx (rld[r1].in);\n+  in = rld[r1].in;\n   substitute (&in, rld[r2].in, gen_rtx_REG (rld[r2].mode, regno));\n \n   /* If IN is a paradoxical SUBREG, remove it and try to put the\n@@ -5259,12 +5279,16 @@ gen_reload_chain_without_interm_reg_p (int r1, int r2)\n \t}\n \n       delete_insns_since (last);\n-      return result;\n     }\n \n-  /* It looks like other cases in gen_reload are not possible for\n-     chain reloads or do need an intermediate hard registers.  */\n-  return true;\n+  /* Restore the original value at each changed address within R1.  */\n+  while (!VEC_empty (rtx_p, substitute_stack))\n+    {\n+      rtx *where = VEC_pop (rtx_p, substitute_stack);\n+      *where = rld[r2].in;\n+    }\n+\n+  return result;\n }\n \n /* Return 1 if the reloads denoted by R1 and R2 cannot share a register."}]}