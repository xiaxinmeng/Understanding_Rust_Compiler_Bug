{"sha": "e855c5ce209b9f33af29453f7464611b8c8089d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1NWM1Y2UyMDliOWYzM2FmMjk0NTNmNzQ2NDYxMWI4YzgwODlkNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-30T00:54:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-30T00:54:54Z"}, "message": "(default_conversion): Pass through non-lvalue arrays without any conversion and/or error messages.\n\n(default_conversion):  Pass through non-lvalue arrays\nwithout any conversion and/or error messages.  Such operands are\nperfectly OK in many contexts.\n\n(build_conditional_expr): Do default_conversion\nbefore testing for ERROR_MARK.\n\nFrom-SVN: r4281", "tree": {"sha": "2dc1d34b31e74fdc94a8b9259d9a4f4bb2216a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dc1d34b31e74fdc94a8b9259d9a4f4bb2216a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e855c5ce209b9f33af29453f7464611b8c8089d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855c5ce209b9f33af29453f7464611b8c8089d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e855c5ce209b9f33af29453f7464611b8c8089d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855c5ce209b9f33af29453f7464611b8c8089d6/comments", "author": null, "committer": null, "parents": [{"sha": "b61cccc2679a54d9de32ed5e5d9d1f61901a1bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61cccc2679a54d9de32ed5e5d9d1f61901a1bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61cccc2679a54d9de32ed5e5d9d1f61901a1bdf"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1ee45792c47672f9c97a58940e835bc5965c71ca", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e855c5ce209b9f33af29453f7464611b8c8089d6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e855c5ce209b9f33af29453f7464611b8c8089d6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e855c5ce209b9f33af29453f7464611b8c8089d6", "patch": "@@ -986,8 +986,8 @@ default_conversion (exp)\n       if (!lvalue_p (exp)\n \t  && ! (TREE_CODE (exp) == CONSTRUCTOR && TREE_STATIC (exp)))\n \t{\n-\t  error (\"invalid use of non-lvalue array\");\n-\t  return error_mark_node;\n+\t  /* Non-lvalue arrays do not decay into pointers.  */\n+\t  return exp;\n \t}\n \n       if (TYPE_READONLY (type) || TYPE_VOLATILE (type))\n@@ -3560,11 +3560,6 @@ build_conditional_expr (ifexp, op1, op2)\n \n   ifexp = truthvalue_conversion (default_conversion (ifexp));\n \n-  if (TREE_CODE (ifexp) == ERROR_MARK\n-      || TREE_CODE (TREE_TYPE (op1)) == ERROR_MARK\n-      || TREE_CODE (TREE_TYPE (op2)) == ERROR_MARK)\n-    return error_mark_node;\n-\n #if 0 /* Produces wrong result if within sizeof.  */\n   /* Don't promote the operands separately if they promote\n      the same way.  Return the unpromoted type and let the combined\n@@ -3582,13 +3577,18 @@ build_conditional_expr (ifexp, op1, op2)\n     }\n #endif\n \n-  /* They don't match; promote them both and then try to reconcile them.  */\n+  /* Promote both alternatives.  */\n \n   if (TREE_CODE (TREE_TYPE (op1)) != VOID_TYPE)\n     op1 = default_conversion (op1);\n   if (TREE_CODE (TREE_TYPE (op2)) != VOID_TYPE)\n     op2 = default_conversion (op2);\n \n+  if (TREE_CODE (ifexp) == ERROR_MARK\n+      || TREE_CODE (TREE_TYPE (op1)) == ERROR_MARK\n+      || TREE_CODE (TREE_TYPE (op2)) == ERROR_MARK)\n+    return error_mark_node;\n+\n   type1 = TREE_TYPE (op1);\n   code1 = TREE_CODE (type1);\n   type2 = TREE_TYPE (op2);"}]}