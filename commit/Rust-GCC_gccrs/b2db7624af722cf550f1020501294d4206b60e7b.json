{"sha": "b2db7624af722cf550f1020501294d4206b60e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkYjc2MjRhZjcyMmNmNTUwZjEwMjA1MDEyOTRkNDIwNmI2MGU3Yg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-12-01T23:52:20Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-12-01T23:52:20Z"}, "message": "re PR target/81959 (PowerPC __float128 optimization fails with integer PRE_INC addresses)\n\n[gcc]\n2017-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/81959\n\t* config/rs6000/rs6000.c (rs6000_address_for_fpconvert): Check for\n\twhether we can allocate pseudos before trying to fix an address.\n\t* config/rs6000/rs6000.md (float_<mode>si2_hw): Make sure the\n\tmemory address is indexed or indirect.\n\t(floatuns_<mode>si2_hw2): Likewise.\n\n[gcct/testsuite]\n2017-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/81959\n\t* gcc.target/powerpc/pr81959.c: New test.\n\nFrom-SVN: r255341", "tree": {"sha": "5ffe06a611ba4660fc6dff8c087a56b615b3a2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ffe06a611ba4660fc6dff8c087a56b615b3a2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2db7624af722cf550f1020501294d4206b60e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2db7624af722cf550f1020501294d4206b60e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2db7624af722cf550f1020501294d4206b60e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2db7624af722cf550f1020501294d4206b60e7b/comments", "author": null, "committer": null, "parents": [{"sha": "92f0112cab96a60bb777b81e93a5d10437c5fa60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f0112cab96a60bb777b81e93a5d10437c5fa60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f0112cab96a60bb777b81e93a5d10437c5fa60"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "805782f9c7c7c1f63f6db1d74f6556d878eb432d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2db7624af722cf550f1020501294d4206b60e7b", "patch": "@@ -1,3 +1,12 @@\n+2017-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/81959\n+\t* config/rs6000/rs6000.c (rs6000_address_for_fpconvert): Check for\n+\twhether we can allocate pseudos before trying to fix an address.\n+\t* config/rs6000/rs6000.md (float_<mode>si2_hw): Make sure the\n+\tmemory address is indexed or indirect.\n+\t(floatuns_<mode>si2_hw2): Likewise.\n+\n 2017-12-01  Jason Merrill  <jason@redhat.com>\n \n \t* Makefile.in (TAGS): Add c-family/*.cc."}, {"sha": "5f5f6d51ef85519257bd74bfd7831cc1b07bdaa2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b2db7624af722cf550f1020501294d4206b60e7b", "patch": "@@ -37886,7 +37886,8 @@ rs6000_address_for_fpconvert (rtx x)\n \n   gcc_assert (MEM_P (x));\n   addr = XEXP (x, 0);\n-  if (! legitimate_indirect_address_p (addr, reload_completed)\n+  if (can_create_pseudo_p ()\n+      && ! legitimate_indirect_address_p (addr, reload_completed)\n       && ! legitimate_indexed_address_p (addr, reload_completed))\n     {\n       if (GET_CODE (addr) == PRE_INC || GET_CODE (addr) == PRE_DEC)"}, {"sha": "f8c91c72704a07da180c34585929732b5561ae5d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b2db7624af722cf550f1020501294d4206b60e7b", "patch": "@@ -14674,6 +14674,9 @@\n {\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n+\n+  if (MEM_P (operands[1]))\n+    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n })\n \n (define_insn_and_split \"float<QHI:mode><IEEE128:mode>2\"\n@@ -14737,6 +14740,9 @@\n {\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n+\n+  if (MEM_P (operands[1]))\n+    operands[1] = rs6000_address_for_fpconvert (operands[1]);\n })\n \n (define_insn_and_split \"floatuns<QHI:mode><IEEE128:mode>2\""}, {"sha": "dadd4c95da1e1d1aaa8cd510ed59f1eaa6654192", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2db7624af722cf550f1020501294d4206b60e7b", "patch": "@@ -1,3 +1,8 @@\n+2017-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/81959\n+\t* gcc.target/powerpc/pr81959.c: New test.\n+\n 2017-12-01  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.dg/asm-4.c: Skip on AArch64 with ILP32 as test is incorrect."}, {"sha": "c4cc3733841954ce683f7fc95256b06323b723ff", "filename": "gcc/testsuite/gcc.target/powerpc/pr81959.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81959.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db7624af722cf550f1020501294d4206b60e7b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81959.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81959.c?ref=b2db7624af722cf550f1020501294d4206b60e7b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -mfloat128\" } */\n+\n+/* PR 81959, the compiler raised on unrecognizable insn message in converting\n+   int to __float128, where the int had a PRE_INC in the address.  */\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE 1024\n+#endif\n+\n+void\n+convert_int_to_float128 (__float128 * __restrict__ p,\n+\t\t\t int * __restrict__ q)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < ARRAY_SIZE; i++)\n+    p[i] = (__float128)q[i];\n+}\n+\n+/* { dg-final { scan-assembler     {\\mlfiwax\\M|\\mlxsiwax\\M} } } */\n+/* { dg-final { scan-assembler     {\\mxscvsdqp\\M}           } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrd\\M}             } } */\n+/* { dg-final { scan-assembler-not {\\mmtvsrw[sz]\\M}         } } */"}]}