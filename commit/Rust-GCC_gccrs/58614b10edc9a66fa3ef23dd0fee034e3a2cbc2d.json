{"sha": "58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2MTRiMTBlZGM5YTY2ZmEzZWYyM2RkMGZlZTAzNGUzYTJjYmMyZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-09-28T23:57:52Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-09-30T00:13:47Z"}, "message": "rs6000: Use parameterized names for tablejump\n\nWe have too many tablejump patterns.  Using parameterized names\nsimplifies the code a bit.\n\n2020-09-29  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (tablejump): Simplify.\n\t(tablejumpsi): Merge this ...\n\t(tablejumpdi): ... and this ...\n\t(@tablejump<mode>_normal): ... into this.\n\t(tablejumpsi_nospec): Merge this ...\n\t(tablejumpdi_nospec): ... and this ...\n\t(@tablejump<mode>_nospec): ... into this.\n\t(*tablejump<mode>_internal1): Delete, rename to ...\n\t(@tablejump<mode>_insn_normal): ... this.\n\t(*tablejump<mode>_internal1_nospec): Delete, rename to ...\n\t(@tablejump<mode>_insn_nospec): ... this.", "tree": {"sha": "7b0a469de56cf55ed64a63c362c11994fa4eb576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0a469de56cf55ed64a63c362c11994fa4eb576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873f8c1e6df94a9dcbfbe69f06538e3e45ba151d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873f8c1e6df94a9dcbfbe69f06538e3e45ba151d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873f8c1e6df94a9dcbfbe69f06538e3e45ba151d"}], "stats": {"total": 101, "additions": 41, "deletions": 60}, "files": [{"sha": "24ad80993adfbb765baec9209d32b7166d592974", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 60, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=58614b10edc9a66fa3ef23dd0fee034e3a2cbc2d", "patch": "@@ -12697,12 +12697,7 @@\n   \"\"\n {\n   if (rs6000_speculate_indirect_jumps)\n-    {\n-      if (TARGET_32BIT)\n-      \temit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n-      else\n-\temit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n-    }\n+    emit_jump_insn (gen_tablejump_normal (Pmode, operands[0], operands[1]));\n   else\n     {\n       rtx ccreg = gen_reg_rtx (CCmode);\n@@ -12716,77 +12711,63 @@\n   DONE;\n })\n \n-(define_expand \"tablejumpsi\"\n-  [(set (match_dup 3)\n-\t(plus:SI (match_operand:SI 0)\n-\t\t (match_dup 2)))\n-   (parallel [(set (pc)\n-\t\t   (match_dup 3))\n-\t      (use (label_ref (match_operand 1)))])]\n-  \"TARGET_32BIT && rs6000_speculate_indirect_jumps\"\n+(define_expand \"@tablejump<mode>_normal\"\n+  [(use (match_operand:SI 0))\n+   (use (match_operand:P 1))]\n+  \"rs6000_speculate_indirect_jumps\"\n {\n   operands[0] = force_reg (SImode, operands[0]);\n-  operands[2] = force_reg (SImode, gen_rtx_LABEL_REF (SImode, operands[1]));\n-  operands[3] = gen_reg_rtx (SImode);\n+  if (<MODE>mode == SImode)\n+    operands[4] = operands[0];\n+  else\n+    {\n+      operands[4] = gen_reg_rtx (Pmode);\n+      rtx src = gen_rtx_fmt_e (SIGN_EXTEND, Pmode, operands[0]);\n+      emit_move_insn (operands[4], src);\n+    }\n+\n+  operands[2] = force_reg (Pmode, gen_rtx_LABEL_REF (Pmode, operands[1]));\n+  operands[3] = gen_reg_rtx (Pmode);\n+\n+  emit_insn (gen_add<mode>3 (operands[3], operands[4], operands[2]));\n+  emit_jump_insn (gen_tablejump_insn_normal (Pmode, operands[3], operands[1]));\n+  DONE;\n })\n \n-(define_expand \"tablejumpsi_nospec\"\n-  [(set (match_dup 4)\n-\t(plus:SI (match_operand:SI 0)\n-\t\t (match_dup 3)))\n-   (parallel [(set (pc)\n-\t\t   (match_dup 4))\n-\t      (use (label_ref (match_operand 1)))\n-\t      (clobber (match_operand 2))])]\n-  \"TARGET_32BIT && !rs6000_speculate_indirect_jumps\"\n+(define_expand \"@tablejump<mode>_nospec\"\n+  [(use (match_operand:SI 0))\n+   (use (match_operand:P 1))\n+   (use (match_operand:CC 2))]\n+  \"!rs6000_speculate_indirect_jumps\"\n {\n   operands[0] = force_reg (SImode, operands[0]);\n-  operands[3] = force_reg (SImode, gen_rtx_LABEL_REF (SImode, operands[1]));\n-  operands[4] = gen_reg_rtx (SImode);\n-})\n+  if (<MODE>mode == SImode)\n+    operands[4] = operands[0];\n+  else\n+    {\n+      operands[4] = gen_reg_rtx (Pmode);\n+      rtx src = gen_rtx_fmt_e (SIGN_EXTEND, Pmode, operands[0]);\n+      emit_move_insn (operands[4], src);\n+    }\n \n-(define_expand \"tablejumpdi\"\n-  [(set (match_dup 4)\n-        (sign_extend:DI (match_operand:SI 0 \"lwa_operand\")))\n-   (set (match_dup 3)\n-\t(plus:DI (match_dup 4)\n-\t\t (match_dup 2)))\n-   (parallel [(set (pc)\n-\t\t   (match_dup 3))\n-\t      (use (label_ref (match_operand 1)))])]\n-  \"TARGET_64BIT && rs6000_speculate_indirect_jumps\"\n-{\n-  operands[2] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-})\n+  operands[5] = force_reg (Pmode, gen_rtx_LABEL_REF (Pmode, operands[1]));\n+  operands[3] = gen_reg_rtx (Pmode);\n \n-(define_expand \"tablejumpdi_nospec\"\n-  [(set (match_dup 5)\n-        (sign_extend:DI (match_operand:SI 0 \"lwa_operand\")))\n-   (set (match_dup 4)\n-\t(plus:DI (match_dup 5)\n-\t\t (match_dup 3)))\n-   (parallel [(set (pc)\n-\t\t   (match_dup 4))\n-\t      (use (label_ref (match_operand 1)))\n-\t      (clobber (match_operand 2))])]\n-  \"TARGET_64BIT && !rs6000_speculate_indirect_jumps\"\n-{\n-  operands[3] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n+  emit_insn (gen_add<mode>3 (operands[3], operands[4], operands[5]));\n+  emit_jump_insn (gen_tablejump_insn_nospec (Pmode, operands[3], operands[1],\n+\t\t\t\t\t     operands[2]));\n+  DONE;\n })\n \n-(define_insn \"*tablejump<mode>_internal1\"\n+(define_insn \"@tablejump<mode>_insn_normal\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1)))]\n   \"rs6000_speculate_indirect_jumps\"\n   \"b%T0\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n-(define_insn \"*tablejump<mode>_internal1_nospec\"\n+(define_insn \"@tablejump<mode>_insn_nospec\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1)))"}]}