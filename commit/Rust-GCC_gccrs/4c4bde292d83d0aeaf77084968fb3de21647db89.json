{"sha": "4c4bde292d83d0aeaf77084968fb3de21647db89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0YmRlMjkyZDgzZDBhZWFmNzcwODQ5NjhmYjNkZTIxNjQ3ZGI4OQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2009-06-13T13:51:53Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2009-06-13T13:51:53Z"}, "message": "alpha.c (alpha_build_builtin_va_list): Pass location to build_decl.\n\n\t* config/alpha/alpha.c (alpha_build_builtin_va_list): Pass location to\n\tbuild_decl.\n\t* config/s390/s390.c (s390_build_builtin_va_list): Same.\n\t(s390_gimplify_va_arg): Pass location to create_artificial_label.\n\t* config/spu/spu-protos.h: Add location to\n\tspu_resolve_overloaded_builtin.\n\t* config/spu/spu.c (spu_build_builtin_va_list): Pass location to\n\tspu_build_builtin_va_list.\n\t* config/spu/spu-c.c (spu_resolve_overloaded_builtin): Add location\n\targument.  Pass location to build_function_call_vec.\n\t* config/sh/sh.c (sh_build_builtin_va_list): Pass location to\n\tbuild_decl.\n\t(emit_fpu_switch): Same.\n\t(sh_gimplify_va_arg_expr): Pass location to create_artificial_label.\n\t* config/xtensa/xtensa.c (xtensa_build_builtin_va_list): Pass location\n\tto build_decl and create_artificial_label.\n\t(xtensa_gimplify_va_arg_expr): Same.\n\t* config/stormy16/stormy16.c (xstormy16_build_builtin_va_list): Same.\n\t(xstormy16_gimplify_va_arg_expr): Same.\n\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Same.\n\t* config/arm/arm.c (arm_build_builtin_va_list): Same.\n\t* config/mips/mips.c (mips_build_builtin_va_list): Same.\n\t(mips16_build_function_stub): Same.\n\t(mips16_build_call_stub): Same.\n\nFrom-SVN: r148453", "tree": {"sha": "1d9c760421c4071f9621eb04888999e9d7ce7923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9c760421c4071f9621eb04888999e9d7ce7923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4bde292d83d0aeaf77084968fb3de21647db89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4bde292d83d0aeaf77084968fb3de21647db89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4bde292d83d0aeaf77084968fb3de21647db89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4bde292d83d0aeaf77084968fb3de21647db89/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81beb0316c9ec1b53f038de4721929d444f5e406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81beb0316c9ec1b53f038de4721929d444f5e406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81beb0316c9ec1b53f038de4721929d444f5e406"}], "stats": {"total": 166, "additions": 116, "deletions": 50}, "files": [{"sha": "35be35e9321552b2123c05943a0cdd305c4695f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -1,3 +1,30 @@\n+2009-06-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_build_builtin_va_list): Pass location to\n+\tbuild_decl.\n+\t* config/s390/s390.c (s390_build_builtin_va_list): Same.\n+\t(s390_gimplify_va_arg): Pass location to create_artificial_label.\n+\t* config/spu/spu-protos.h: Add location to\n+\tspu_resolve_overloaded_builtin.\n+\t* config/spu/spu.c (spu_build_builtin_va_list): Pass location to\n+\tspu_build_builtin_va_list.\n+\t* config/spu/spu-c.c (spu_resolve_overloaded_builtin): Add location\n+\targument.  Pass location to build_function_call_vec.\n+\t* config/sh/sh.c (sh_build_builtin_va_list): Pass location to\n+\tbuild_decl.\n+\t(emit_fpu_switch): Same.\n+\t(sh_gimplify_va_arg_expr): Pass location to create_artificial_label.\n+\t* config/xtensa/xtensa.c (xtensa_build_builtin_va_list): Pass location\n+\tto build_decl and create_artificial_label.\n+\t(xtensa_gimplify_va_arg_expr): Same.\n+\t* config/stormy16/stormy16.c (xstormy16_build_builtin_va_list): Same.\n+\t(xstormy16_gimplify_va_arg_expr): Same.\n+\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Same.\n+\t* config/arm/arm.c (arm_build_builtin_va_list): Same.\n+\t* config/mips/mips.c (mips_build_builtin_va_list): Same.\n+\t(mips16_build_function_stub): Same.\n+\t(mips16_build_call_stub): Same.\n+\n 2009-06-13  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/40327"}, {"sha": "1e7de8e7c2492ea5d746c6e3836c10aa328345d4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -5791,24 +5791,28 @@ alpha_build_builtin_va_list (void)\n     return ptr_type_node;\n \n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n-  type_decl = build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+  type_decl = build_decl (BUILTINS_LOCATION,\n+\t\t\t  TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n   TREE_CHAIN (record) = type_decl;\n   TYPE_NAME (record) = type_decl;\n \n   /* C++? SET_IS_AGGR_TYPE (record, 1); */\n \n   /* Dummy field to prevent alignment warnings.  */\n-  space = build_decl (FIELD_DECL, NULL_TREE, integer_type_node);\n+  space = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, NULL_TREE, integer_type_node);\n   DECL_FIELD_CONTEXT (space) = record;\n   DECL_ARTIFICIAL (space) = 1;\n   DECL_IGNORED_P (space) = 1;\n \n-  ofs = build_decl (FIELD_DECL, get_identifier (\"__offset\"),\n+  ofs = build_decl (BUILTINS_LOCATION,\n+\t\t    FIELD_DECL, get_identifier (\"__offset\"),\n \t\t    integer_type_node);\n   DECL_FIELD_CONTEXT (ofs) = record;\n   TREE_CHAIN (ofs) = space;\n \n-  base = build_decl (FIELD_DECL, get_identifier (\"__base\"),\n+  base = build_decl (BUILTINS_LOCATION,\n+\t\t     FIELD_DECL, get_identifier (\"__base\"),\n \t\t     ptr_type_node);\n   DECL_FIELD_CONTEXT (base) = record;\n   TREE_CHAIN (base) = ofs;"}, {"sha": "3809270b2c5c8977e46366083a1ba971650dc8b8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -956,13 +956,15 @@ arm_build_builtin_va_list (void)\n   /* Create the type.  */\n   va_list_type = lang_hooks.types.make_type (RECORD_TYPE);\n   /* Give it the required name.  */\n-  va_list_name = build_decl (TYPE_DECL,\n+  va_list_name = build_decl (BUILTINS_LOCATION,\n+\t\t\t     TYPE_DECL,\n \t\t\t     get_identifier (\"__va_list\"),\n \t\t\t     va_list_type);\n   DECL_ARTIFICIAL (va_list_name) = 1;\n   TYPE_NAME (va_list_type) = va_list_name;\n   /* Create the __ap field.  */\n-  ap_field = build_decl (FIELD_DECL, \n+  ap_field = build_decl (BUILTINS_LOCATION,\n+\t\t\t FIELD_DECL, \n \t\t\t get_identifier (\"__ap\"),\n \t\t\t ptr_type_node);\n   DECL_ARTIFICIAL (ap_field) = 1;"}, {"sha": "b99043efa990d71db5fcbfa787f0cacbf7a17799", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -1860,7 +1860,8 @@ iq2000_expand_prologue (void)\n       && targetm.calls.struct_value_rtx (TREE_TYPE (fndecl), 1) == 0)\n     {\n       tree type = build_pointer_type (fntype);\n-      tree function_result_decl = build_decl (PARM_DECL, NULL_TREE, type);\n+      tree function_result_decl = build_decl (BUILTINS_LOCATION,\n+\t\t\t\t\t      PARM_DECL, NULL_TREE, type);\n \n       DECL_ARG_TYPE (function_result_decl) = type;\n       TREE_CHAIN (function_result_decl) = fnargs;"}, {"sha": "62753a3fea7dd888f4e66ebbee074f8051a6d57b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -5160,22 +5160,28 @@ mips_build_builtin_va_list (void)\n \n       record = lang_hooks.types.make_type (RECORD_TYPE);\n \n-      f_ovfl = build_decl (FIELD_DECL, get_identifier (\"__overflow_argptr\"),\n+      f_ovfl = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FIELD_DECL, get_identifier (\"__overflow_argptr\"),\n \t\t\t   ptr_type_node);\n-      f_gtop = build_decl (FIELD_DECL, get_identifier (\"__gpr_top\"),\n+      f_gtop = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FIELD_DECL, get_identifier (\"__gpr_top\"),\n \t\t\t   ptr_type_node);\n-      f_ftop = build_decl (FIELD_DECL, get_identifier (\"__fpr_top\"),\n+      f_ftop = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FIELD_DECL, get_identifier (\"__fpr_top\"),\n \t\t\t   ptr_type_node);\n-      f_goff = build_decl (FIELD_DECL, get_identifier (\"__gpr_offset\"),\n+      f_goff = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FIELD_DECL, get_identifier (\"__gpr_offset\"),\n \t\t\t   unsigned_char_type_node);\n-      f_foff = build_decl (FIELD_DECL, get_identifier (\"__fpr_offset\"),\n+      f_foff = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FIELD_DECL, get_identifier (\"__fpr_offset\"),\n \t\t\t   unsigned_char_type_node);\n       /* Explicitly pad to the size of a pointer, so that -Wpadded won't\n \t warn on every user file.  */\n       index = build_int_cst (NULL_TREE, GET_MODE_SIZE (ptr_mode) - 2 - 1);\n       array = build_array_type (unsigned_char_type_node,\n \t\t\t        build_index_type (index));\n-      f_res = build_decl (FIELD_DECL, get_identifier (\"__reserved\"), array);\n+      f_res = build_decl (BUILTINS_LOCATION,\n+\t\t\t  FIELD_DECL, get_identifier (\"__reserved\"), array);\n \n       DECL_FIELD_CONTEXT (f_ovfl) = record;\n       DECL_FIELD_CONTEXT (f_gtop) = record;\n@@ -5749,10 +5755,12 @@ mips16_build_function_stub (void)\n   stubname = ACONCAT ((\"__fn_stub_\", fnname, NULL));\n \n   /* Build a decl for the stub.  */\n-  stubdecl = build_decl (FUNCTION_DECL, get_identifier (stubname),\n+  stubdecl = build_decl (BUILTINS_LOCATION,\n+\t\t\t FUNCTION_DECL, get_identifier (stubname),\n \t\t\t build_function_type (void_type_node, NULL_TREE));\n   DECL_SECTION_NAME (stubdecl) = build_string (strlen (secname), secname);\n-  DECL_RESULT (stubdecl) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n+  DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n+\t\t\t\t       RESULT_DECL, NULL_TREE, void_type_node);\n \n   /* Output a comment.  */\n   fprintf (asm_out_file, \"\\t# Stub function for %s (\",\n@@ -5993,10 +6001,12 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n       stubname = ACONCAT ((\"__call_stub_\", fp_ret_p ? \"fp_\" : \"\",\n \t\t\t   fnname, NULL));\n       stubid = get_identifier (stubname);\n-      stubdecl = build_decl (FUNCTION_DECL, stubid,\n+      stubdecl = build_decl (BUILTINS_LOCATION,\n+\t\t\t     FUNCTION_DECL, stubid,\n \t\t\t     build_function_type (void_type_node, NULL_TREE));\n       DECL_SECTION_NAME (stubdecl) = build_string (strlen (secname), secname);\n-      DECL_RESULT (stubdecl) = build_decl (RESULT_DECL, NULL_TREE,\n+      DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n+\t\t\t\t\t   RESULT_DECL, NULL_TREE,\n \t\t\t\t\t   void_type_node);\n \n       /* Output a comment.  */"}, {"sha": "fd81bbac467ffc3f50bc10aa1a115b8a01b7755b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -8384,15 +8384,20 @@ s390_build_builtin_va_list (void)\n   record = lang_hooks.types.make_type (RECORD_TYPE);\n \n   type_decl =\n-    build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+    build_decl (BUILTINS_LOCATION,\n+\t\tTYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n \n-  f_gpr = build_decl (FIELD_DECL, get_identifier (\"__gpr\"),\n+  f_gpr = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__gpr\"),\n \t\t      long_integer_type_node);\n-  f_fpr = build_decl (FIELD_DECL, get_identifier (\"__fpr\"),\n+  f_fpr = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__fpr\"),\n \t\t      long_integer_type_node);\n-  f_ovf = build_decl (FIELD_DECL, get_identifier (\"__overflow_arg_area\"),\n+  f_ovf = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__overflow_arg_area\"),\n \t\t      ptr_type_node);\n-  f_sav = build_decl (FIELD_DECL, get_identifier (\"__reg_save_area\"),\n+  f_sav = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__reg_save_area\"),\n \t\t      ptr_type_node);\n \n   va_list_gpr_counter_field = f_gpr;\n@@ -8616,8 +8621,8 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   /* Pull the value out of the saved registers ...  */\n \n-  lab_false = create_artificial_label ();\n-  lab_over = create_artificial_label ();\n+  lab_false = create_artificial_label (UNKNOWN_LOCATION);\n+  lab_over = create_artificial_label (UNKNOWN_LOCATION);\n   addr = create_tmp_var (ptr_type_node, \"addr\");\n   DECL_POINTER_ALIAS_SET (addr) = get_varargs_alias_set ();\n "}, {"sha": "527cd7f791d4b27b8e5f33032a8e7b2ab3795c03", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -7501,17 +7501,22 @@ sh_build_builtin_va_list (void)\n \n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n \n-  f_next_o = build_decl (FIELD_DECL, get_identifier (\"__va_next_o\"),\n+  f_next_o = build_decl (BUILTINS_LOCATION,\n+\t\t\t FIELD_DECL, get_identifier (\"__va_next_o\"),\n \t\t\t ptr_type_node);\n-  f_next_o_limit = build_decl (FIELD_DECL,\n+  f_next_o_limit = build_decl (BUILTINS_LOCATION,\n+\t\t\t       FIELD_DECL,\n \t\t\t       get_identifier (\"__va_next_o_limit\"),\n \t\t\t       ptr_type_node);\n-  f_next_fp = build_decl (FIELD_DECL, get_identifier (\"__va_next_fp\"),\n+  f_next_fp = build_decl (BUILTINS_LOCATION,\n+\t\t\t  FIELD_DECL, get_identifier (\"__va_next_fp\"),\n \t\t\t  ptr_type_node);\n-  f_next_fp_limit = build_decl (FIELD_DECL,\n+  f_next_fp_limit = build_decl (BUILTINS_LOCATION,\n+\t\t\t\tFIELD_DECL,\n \t\t\t\tget_identifier (\"__va_next_fp_limit\"),\n \t\t\t\tptr_type_node);\n-  f_next_stack = build_decl (FIELD_DECL, get_identifier (\"__va_next_stack\"),\n+  f_next_stack = build_decl (BUILTINS_LOCATION,\n+\t\t\t     FIELD_DECL, get_identifier (\"__va_next_stack\"),\n \t\t\t     ptr_type_node);\n \n   DECL_FIELD_CONTEXT (f_next_o) = record;\n@@ -7714,8 +7719,8 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t}\n \n       addr = create_tmp_var (pptr_type_node, NULL);\n-      lab_false = create_artificial_label ();\n-      lab_over = create_artificial_label ();\n+      lab_false = create_artificial_label (UNKNOWN_LOCATION);\n+      lab_over = create_artificial_label (UNKNOWN_LOCATION);\n \n       valist = build1 (INDIRECT_REF, ptr_type_node, addr);\n \n@@ -9041,7 +9046,8 @@ emit_fpu_switch (rtx scratch, int index)\n \n       t = build_index_type (integer_one_node);\n       t = build_array_type (integer_type_node, t);\n-      t = build_decl (VAR_DECL, get_identifier (\"__fpscr_values\"), t);\n+      t = build_decl (BUILTINS_LOCATION,\n+\t\t      VAR_DECL, get_identifier (\"__fpscr_values\"), t);\n       DECL_ARTIFICIAL (t) = 1;\n       DECL_IGNORED_P (t) = 1;\n       DECL_EXTERNAL (t) = 1;"}, {"sha": "fbbbf32e157c52624886798fa358e8e5ffb8655f", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -94,7 +94,7 @@ spu_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n /* target hook for resolve_overloaded_builtin(). Returns a function call\n    RTX if we can resolve the overloaded builtin */\n tree\n-spu_resolve_overloaded_builtin (tree fndecl, void *passed_args)\n+spu_resolve_overloaded_builtin (location_t loc, tree fndecl, void *passed_args)\n {\n #define SCALAR_TYPE_P(t) (INTEGRAL_TYPE_P (t) \\\n \t\t\t  || SCALAR_FLOAT_TYPE_P (t) \\\n@@ -187,7 +187,7 @@ spu_resolve_overloaded_builtin (tree fndecl, void *passed_args)\n       return error_mark_node;\n     }\n \n-  return build_function_call_vec (match, fnargs, NULL);\n+  return build_function_call_vec (loc, match, fnargs, NULL);\n #undef SCALAR_TYPE_P\n }\n "}, {"sha": "65cdd07264e5298a97345116299cef5c6ff4e9fd", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -88,7 +88,8 @@ extern void spu_init_expanders (void);\n extern void spu_split_convert (rtx *);\n \n /* spu-c.c */\n-extern tree spu_resolve_overloaded_builtin (tree fndecl, void *fnargs);\n+extern tree spu_resolve_overloaded_builtin (location_t, tree fndecl,\n+    \t\t\t\t\t    void *fnargs);\n extern rtx spu_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t\t       enum machine_mode mode, int ignore);\n extern rtx spu_expand_builtin (tree, rtx, rtx, enum machine_mode, int);"}, {"sha": "8a40550f807ff324e1b78a02f32e2a39a6990851", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -3952,10 +3952,13 @@ spu_build_builtin_va_list (void)\n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n \n   type_decl =\n-    build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+    build_decl (BUILTINS_LOCATION,\n+\t\tTYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n \n-  f_args = build_decl (FIELD_DECL, get_identifier (\"__args\"), ptr_type_node);\n-  f_skip = build_decl (FIELD_DECL, get_identifier (\"__skip\"), ptr_type_node);\n+  f_args = build_decl (BUILTINS_LOCATION,\n+\t\t       FIELD_DECL, get_identifier (\"__args\"), ptr_type_node);\n+  f_skip = build_decl (BUILTINS_LOCATION,\n+\t\t       FIELD_DECL, get_identifier (\"__skip\"), ptr_type_node);\n \n   DECL_FIELD_CONTEXT (f_args) = record;\n   DECL_ALIGN (f_args) = 128;"}, {"sha": "2e646f98d4c45082f1500a7346a98099f4a4aa70", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -1291,11 +1291,14 @@ xstormy16_build_builtin_va_list (void)\n   tree f_1, f_2, record, type_decl;\n \n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n-  type_decl = build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+  type_decl = build_decl (BUILTINS_LOCATION,\n+\t\t\t  TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n \n-  f_1 = build_decl (FIELD_DECL, get_identifier (\"base\"),\n+  f_1 = build_decl (BUILTINS_LOCATION,\n+\t\t    FIELD_DECL, get_identifier (\"base\"),\n \t\t      ptr_type_node);\n-  f_2 = build_decl (FIELD_DECL, get_identifier (\"count\"),\n+  f_2 = build_decl (BUILTINS_LOCATION,\n+\t\t    FIELD_DECL, get_identifier (\"count\"),\n \t\t      unsigned_type_node);\n \n   DECL_FIELD_CONTEXT (f_1) = record;\n@@ -1377,8 +1380,8 @@ xstormy16_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   size_of_reg_args = NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD;\n \n   count_tmp = get_initialized_tmp_var (count, pre_p, NULL);\n-  lab_gotaddr = create_artificial_label ();\n-  lab_fromstack = create_artificial_label ();\n+  lab_gotaddr = create_artificial_label (UNKNOWN_LOCATION);\n+  lab_fromstack = create_artificial_label (UNKNOWN_LOCATION);\n   addr = create_tmp_var (ptr_type_node, NULL);\n \n   if (!must_stack)"}, {"sha": "773223b2f35a571cfe01694cb4101d7582702016", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4bde292d83d0aeaf77084968fb3de21647db89/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=4c4bde292d83d0aeaf77084968fb3de21647db89", "patch": "@@ -2651,13 +2651,17 @@ xtensa_build_builtin_va_list (void)\n   tree f_stk, f_reg, f_ndx, record, type_decl;\n \n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n-  type_decl = build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+  type_decl = build_decl (BUILTINS_LOCATION,\n+\t\t\t  TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n \n-  f_stk = build_decl (FIELD_DECL, get_identifier (\"__va_stk\"),\n+  f_stk = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__va_stk\"),\n \t\t      ptr_type_node);\n-  f_reg = build_decl (FIELD_DECL, get_identifier (\"__va_reg\"),\n+  f_reg = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__va_reg\"),\n \t\t      ptr_type_node);\n-  f_ndx = build_decl (FIELD_DECL, get_identifier (\"__va_ndx\"),\n+  f_ndx = build_decl (BUILTINS_LOCATION,\n+\t\t      FIELD_DECL, get_identifier (\"__va_ndx\"),\n \t\t      integer_type_node);\n \n   DECL_FIELD_CONTEXT (f_stk) = record;\n@@ -2848,8 +2852,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   lab_over = NULL;\n   if (!targetm.calls.must_pass_in_stack (TYPE_MODE (type), type))\n     {\n-      lab_false = create_artificial_label ();\n-      lab_over = create_artificial_label ();\n+      lab_false = create_artificial_label (UNKNOWN_LOCATION);\n+      lab_over = create_artificial_label (UNKNOWN_LOCATION);\n \n       t = build2 (GT_EXPR, boolean_type_node, unshare_expr (ndx),\n \t\t  build_int_cst (integer_type_node,\n@@ -2879,7 +2883,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t __array = (AP).__va_stk;\n        } */\n \n-  lab_false2 = create_artificial_label ();\n+  lab_false2 = create_artificial_label (UNKNOWN_LOCATION);\n \n   t = build2 (GT_EXPR, boolean_type_node, unshare_expr (orig_ndx),\n \t      build_int_cst (integer_type_node,"}]}