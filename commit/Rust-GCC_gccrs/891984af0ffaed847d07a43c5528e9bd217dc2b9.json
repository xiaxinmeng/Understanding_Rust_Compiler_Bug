{"sha": "891984af0ffaed847d07a43c5528e9bd217dc2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxOTg0YWYwZmZhZWQ4NDdkMDdhNDNjNTUyOGU5YmQyMTdkYzJiOQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2008-02-25T14:47:35Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2008-02-25T14:47:35Z"}, "message": "Makefile.in: Also prefix uses of crt0.o and mcrt0.o with $(T).\n\ngcc/\n2008-02-25  Jan Beulich  <jbeulich@novell.com>\n\n\t* Makefile.in: Also prefix uses of crt0.o and mcrt0.o with\n\t$(T).\n\t* config/i386/netware-libgcc.exp: Add __bswap?i2,\n\t__emultls_get_address, __emultls_register_common,\n\t__floatundi?f, and _Unwind_GetIPInfo.\n\t* config/i386/netware.c (gen_stdcall_or_fastcall_decoration):\n\tSync with config/i386/winnt.c:gen_stdcall_or_fastcall_suffix().\n\t(gen_regparm_prefix): Likewise.\n\t(i386_nlm_encode_section_info): Sync with\n\tconfig/i386/winnt.c:i386_pe_encode_section_info().\n\t(i386_nlm_maybe_mangle_decl_assembler_name): New.\n\ti386_nlm_mangle_decl_assembler_name): New.\n\t(netware_override_options): New.\n\t* config/i386/netware.h (netware_override_options): Declare.\n\t(OVERRIDE_OPTIONS): Re-define to netware_override_options.\n\t(i386_nlm_mangle_decl_assembler_name): Declare.\n\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Define.\n\ngcc/testsuite/\n2008-02-25  Jan Beulich  <jbeulich@novell.com>\n\n\t* gcc.dg/20020426-2.c: Remove bogus workaround.\n\t* g++.old-deja/g++.other/store-expr1.C: Likewise.\n\t* gcc.target/i386/movq-2.c: Also permit use of movzbl.\n\nFrom-SVN: r132624", "tree": {"sha": "a2f8b32b320c71daceeaa23c7dc70c5a28777d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f8b32b320c71daceeaa23c7dc70c5a28777d08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891984af0ffaed847d07a43c5528e9bd217dc2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891984af0ffaed847d07a43c5528e9bd217dc2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891984af0ffaed847d07a43c5528e9bd217dc2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891984af0ffaed847d07a43c5528e9bd217dc2b9/comments", "author": null, "committer": null, "parents": [{"sha": "e652b5167da95c2f1ff9153f8f8d7246cf02de6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e652b5167da95c2f1ff9153f8f8d7246cf02de6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e652b5167da95c2f1ff9153f8f8d7246cf02de6b"}], "stats": {"total": 262, "additions": 181, "deletions": 81}, "files": [{"sha": "13ca11e844a68734767c63c0c6a8d6c3af6bd4ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -1,3 +1,23 @@\n+2008-02-25  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* Makefile.in: Also prefix uses of crt0.o and mcrt0.o with\n+\t$(T).\n+\t* config/i386/netware-libgcc.exp: Add __bswap?i2,\n+\t__emultls_get_address, __emultls_register_common,\n+\t__floatundi?f, and _Unwind_GetIPInfo.\n+\t* config/i386/netware.c (gen_stdcall_or_fastcall_decoration):\n+\tSync with config/i386/winnt.c:gen_stdcall_or_fastcall_suffix().\n+\t(gen_regparm_prefix): Likewise.\n+\t(i386_nlm_encode_section_info): Sync with\n+\tconfig/i386/winnt.c:i386_pe_encode_section_info().\n+\t(i386_nlm_maybe_mangle_decl_assembler_name): New.\n+\ti386_nlm_mangle_decl_assembler_name): New.\n+\t(netware_override_options): New.\n+\t* config/i386/netware.h (netware_override_options): Declare.\n+\t(OVERRIDE_OPTIONS): Re-define to netware_override_options.\n+\t(i386_nlm_mangle_decl_assembler_name): Declare.\n+\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Define.\n+\n 2008-02-25  Ben Elliston  <bje@au.ibm.com>\n \n \tPR other/32948"}, {"sha": "486a8111991eb1262939bb74a287f3765b32362a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -1697,14 +1697,14 @@ $(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n \n # Compile the start modules crt0.o and mcrt0.o that are linked with\n # every program\n-crt0.o: s-crt0 ; @true\n-mcrt0.o: s-crt0; @true\n+$(T)crt0.o: s-crt0 ; @true\n+$(T)mcrt0.o: s-crt0; @true\n \n s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \\\n-\t  -o crt0.o -c $(CRT0_S)\n+\t  -o $(T)crt0.o -c $(CRT0_S)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CRT0STUFF_T_CFLAGS) \\\n-\t  -o mcrt0.o -c $(MCRT0_S)\n+\t  -o $(T)mcrt0.o -c $(MCRT0_S)\n \t$(STAMP) s-crt0\n #\f\n # Compiling object files from source files."}, {"sha": "309cf754943c12feab31262a43c53f0c66cff1bd", "filename": "gcc/config/i386/netware-libgcc.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -6,6 +6,8 @@\n \t__addvsi3,\n #\t__ashldi3,\n #\t__ashrdi3,\n+\t__bswapdi2,\n+\t__bswapsi2,\n \t__clzdi2,\n \t__clzsi2,\n \t__ctzdi2,\n@@ -18,12 +20,18 @@\n \t__divsc3,\n #\t__divtc3,\n \t__divxc3,\n+\t__emutls_get_address,\n+\t__emutls_register_common,\n \t__ffsdi2,\n \t__ffssi2,\n \t__fixunsdfdi,\n \t__fixunssfdi,\n #\t__fixunstfdi,\n \t__fixunsxfdi,\n+\t__floatundisf,\n+\t__floatundidf,\n+#\t__floatunditf,\n+\t__floatundixf,\n \t__gcc_bcmp,\n \t__gcc_personality_v0,\n #\t__lshrdi3,\n@@ -64,6 +72,7 @@\n \t_Unwind_GetDataRelBase,\n \t_Unwind_GetGR,\n \t_Unwind_GetIP,\n+\t_Unwind_GetIPInfo,\n \t_Unwind_GetLanguageSpecificData,\n \t_Unwind_GetRegionStart,\n \t_Unwind_GetTextRelBase,"}, {"sha": "63c26cc7551ff971587fdbfe5a610ae2efcfbe9b", "filename": "gcc/config/i386/netware.c", "status": "modified", "additions": 122, "deletions": 69, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.c?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for NetWare.\n    Contributed by Jan Beulich (jbeulich@novell.com)\n-   Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -32,79 +32,76 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-\n-/* Return string which is the former assembler name modified with an \n-   underscore prefix and a suffix consisting of an atsign (@) followed\n-   by the number of bytes of arguments */\n+/* Return string which is the function name, identified by ID, modified\n+   with PREFIX and a suffix consisting of an atsign (@) followed by the\n+   number of bytes of arguments.  If ID is NULL use the DECL_NAME as base.\n+   Return NULL if no change required.  */\n \n static tree\n-gen_stdcall_or_fastcall_decoration (tree decl, char prefix)\n+gen_stdcall_or_fastcall_decoration (tree decl, tree id, char prefix)\n {\n-  unsigned total = 0;\n-  /* ??? This probably should use XSTR (XEXP (DECL_RTL (decl), 0), 0) instead\n-     of DECL_ASSEMBLER_NAME.  */\n-  const char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  char *newsym;\n+  unsigned HOST_WIDE_INT total = 0;\n+  const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n+  char *new_str;\n   tree type = TREE_TYPE (decl);\n-  tree arg;\n-  function_args_iterator args_iter;\n \n   if (prototype_p (type))\n     {\n-      /* These attributes are ignored for variadic functions in\n-\t i386.c:ix86_return_pops_args. For compatibility with MS\n-\t compiler do not add @0 suffix here.  */ \n+      tree arg;\n+      function_args_iterator args_iter;\n+\n+      /* This attribute is ignored for variadic functions.  */ \n       if (stdarg_p (type))\n \treturn NULL_TREE;\n \n       /* Quit if we hit an incomplete type.  Error is reported\n \t by convert_arguments in c-typeck.c or cp/typeck.c.  */\n       FOREACH_FUNCTION_ARGS(type, arg, args_iter)\n \t{\n-\t  unsigned parm_size;\n+\t  HOST_WIDE_INT parm_size;\n+\t  unsigned HOST_WIDE_INT parm_boundary_bytes;\n \n \t  if (! COMPLETE_TYPE_P (arg))\n \t    break;\n \n-\t  parm_size = int_size_in_bytes (TYPE_SIZE (arg));\n+\t  parm_size = int_size_in_bytes (arg);\n \t  if (parm_size < 0)\n \t    break;\n \n+\t  parm_boundary_bytes = PARM_BOUNDARY / BITS_PER_UNIT;\n+\n \t  /* Must round up to include padding.  This is done the same\n \t     way as in store_one_arg.  */\n-\t  parm_size = ((parm_size + PARM_BOUNDARY - 1)\n-\t\t       / PARM_BOUNDARY * PARM_BOUNDARY);\n-\t  total += parm_size;\n+\t  total += (parm_size + parm_boundary_bytes - 1)\n+\t\t   / parm_boundary_bytes * parm_boundary_bytes;\n \t}\n     }\n \n-  newsym = alloca (1 + strlen (asmname) + 1 + 10 + 1);\n-  return get_identifier_with_length (newsym,\n-\t\t\t\t     sprintf (newsym,\n-\t\t\t\t\t      \"%c%s@%u\",\n-\t\t\t\t\t      prefix,\n-\t\t\t\t\t      asmname,\n-\t\t\t\t\t      total / BITS_PER_UNIT));\n+  new_str = alloca (1 + strlen (old_str) + 1 + 10 + 1);\n+  sprintf (new_str, \"%c%s@\" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t   prefix, old_str, total);\n+\n+  return get_identifier (new_str);\n }\n \n-/* Return string which is the former assembler name modified with an \n-   _n@ prefix where n represents the number of arguments passed in\n-   registers */\n+/* Return string which is the function name, identified by ID, modified\n+   with an _n@ prefix (where n represents the number of arguments passed in\n+   registers).  If ID is NULL use the DECL_NAME as base.\n+   Return NULL if no change required.  */\n \n static tree\n-gen_regparm_prefix (tree decl, unsigned nregs)\n+gen_regparm_prefix (tree decl, tree id, unsigned int nregs)\n {\n-  unsigned total = 0;\n-  /* ??? This probably should use XSTR (XEXP (DECL_RTL (decl), 0), 0) instead\n-     of DECL_ASSEMBLER_NAME.  */\n-  const char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  char *newsym;\n+  unsigned HOST_WIDE_INT total = 0;\n+  const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n+  char *new_str;\n   tree type = TREE_TYPE (decl);\n-  tree arg;\n-  function_args_iterator args_iter;\n \n   if (prototype_p (type))\n     {\n+      tree arg;\n+      function_args_iterator args_iter;\n+\n       /* This attribute is ignored for variadic functions.  */ \n       if (stdarg_p (type))\n \treturn NULL_TREE;\n@@ -113,7 +110,8 @@ gen_regparm_prefix (tree decl, unsigned nregs)\n \t by convert_arguments in c-typeck.c or cp/typeck.c.  */\n       FOREACH_FUNCTION_ARGS(type, arg, args_iter)\n \t{\n-\t  unsigned parm_size;\n+\t  HOST_WIDE_INT parm_size;\n+\t  unsigned HOST_WIDE_INT parm_boundary_bytes;\n \n \t  if (! COMPLETE_TYPE_P (arg))\n \t    break;\n@@ -122,21 +120,58 @@ gen_regparm_prefix (tree decl, unsigned nregs)\n \t  if (parm_size < 0)\n \t    break;\n \n-\t  parm_size = ((parm_size + PARM_BOUNDARY - 1)\n-\t\t       / PARM_BOUNDARY * PARM_BOUNDARY);\n-\t  total += parm_size;\n+\t  parm_boundary_bytes = PARM_BOUNDARY / BITS_PER_UNIT;\n+\n+\t  /* Must round up to include padding.  This is done the same\n+\t     way as in store_one_arg.  */\n+\t  total += (parm_size + parm_boundary_bytes - 1)\n+\t\t   / parm_boundary_bytes * parm_boundary_bytes;\n \t}\n     }\n \n-  if (nregs > total / BITS_PER_WORD)\n-    nregs = total / BITS_PER_WORD;\n+  if (nregs > total / UNITS_PER_WORD)\n+    nregs = total / UNITS_PER_WORD;\n   gcc_assert (nregs <= 9);\n-  newsym = alloca (3 + strlen (asmname) + 1);\n-  return get_identifier_with_length (newsym,\n-\t\t\t\t     sprintf (newsym,\n-\t\t\t\t\t      \"_%u@%s\",\n-\t\t\t\t\t      nregs,\n-\t\t\t\t\t      asmname));\n+  new_str = alloca (3 + strlen (old_str) + 1);\n+  sprintf (new_str, \"_%u@%s\", nregs, old_str);\n+\n+  return get_identifier (new_str);\n+}\n+\n+/* Maybe decorate and get a new identifier for the DECL of a stdcall or\n+   fastcall function. The original identifier is supplied in ID. */\n+\n+static tree\n+i386_nlm_maybe_mangle_decl_assembler_name (tree decl, tree id)\n+{\n+  tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+  tree new_id;\n+\n+  if (lookup_attribute (\"stdcall\", type_attributes))\n+    new_id = gen_stdcall_or_fastcall_decoration (decl, id, '_');\n+  else if (lookup_attribute (\"fastcall\", type_attributes))\n+    new_id = gen_stdcall_or_fastcall_decoration (decl, id, FASTCALL_PREFIX);\n+  else if ((new_id = lookup_attribute (\"regparm\", type_attributes)))\n+    new_id = gen_regparm_prefix (decl, id,\n+\t\t  TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (new_id))));\n+  else\n+    new_id = NULL_TREE;\n+\n+  return new_id;\n+}\n+\n+/* This is used as a target hook to modify the DECL_ASSEMBLER_NAME\n+   in the language-independent default hook\n+   langhooks.c:lhd_set_decl_assembler_name ()\n+   and in cp/mangle.c:mangle_decl ().  */\n+tree\n+i386_nlm_mangle_decl_assembler_name (tree decl, tree id)\n+{\n+  tree new_id = TREE_CODE (decl) == FUNCTION_DECL\n+\t\t? i386_nlm_maybe_mangle_decl_assembler_name (decl, id)\n+\t\t: NULL_TREE;\n+\n+  return (new_id ? new_id : id);\n }\n \n void\n@@ -146,31 +181,28 @@ i386_nlm_encode_section_info (tree decl, rtx rtl, int first)\n \n   if (first\n       && TREE_CODE (decl) == FUNCTION_DECL\n+      /* Do not change the identifier if a verbatim asmspec\n+\t or if stdcall suffix already added.  */\n       && *IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)) != '*'\n       && !strchr (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), '@'))\n     {\n-      tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-      tree newid;\n-\n-      if (lookup_attribute (\"stdcall\", type_attributes))\n-\tnewid = gen_stdcall_or_fastcall_decoration (decl, '_');\n-      else if (lookup_attribute (\"fastcall\", type_attributes))\n-\tnewid = gen_stdcall_or_fastcall_decoration (decl, FASTCALL_PREFIX);\n-      else if ((newid = lookup_attribute (\"regparm\", type_attributes)) != NULL_TREE)\n-\tnewid = gen_regparm_prefix (decl,\n-\t\t      TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (newid))));\n-      if (newid != NULL_TREE) \t\n-\t{\n-\t  rtx rtlname = XEXP (rtl, 0);\n+      /* FIXME: In Ada, and perhaps other language frontends,\n+\t imported stdcall names may not yet have been modified.\n+\t Check and do it know.  */\n+      rtx symbol = XEXP (rtl, 0);\n+      tree new_id;\n+      tree old_id = DECL_ASSEMBLER_NAME (decl);\n+\n+      gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n \n-\t  if (GET_CODE (rtlname) == MEM)\n-\t    rtlname = XEXP (rtlname, 0);\n-\t  XSTR (rtlname, 0) = IDENTIFIER_POINTER (newid);\n+      if ((new_id = i386_nlm_maybe_mangle_decl_assembler_name (decl, old_id)))\n+\t{\n \t  /* These attributes must be present on first declaration,\n \t     change_decl_assembler_name will warn if they are added\n \t     later and the decl has been referenced, but duplicate_decls\n-\t     should catch the mismatch before this is called.  */ \n-\t  change_decl_assembler_name (decl, newid);\n+\t     should catch the mismatch first.  */\n+\t  change_decl_assembler_name (decl, new_id);\n+\t  XSTR (symbol, 0) = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \t}\n     }\n }\n@@ -201,3 +233,24 @@ i386_nlm_strip_name_encoding (const char *str)\n     }\n   return name;\n }\n+\n+/* Sometimes certain combinations of command options do not make\n+   sense on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   Don't use this macro to turn on various extra optimizations for\n+   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n+\n+void\n+netware_override_options (void)\n+{\n+  override_options ();\n+\n+  if (flag_pic)\n+    {\n+      error (\"-fPIC and -fpic are not supported for this target\");\n+      flag_pic = 0;\n+    }\n+}"}, {"sha": "d4f31e0bbb273e6ad0019d043fe43ffbf27fc759", "filename": "gcc/config/i386/netware.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -72,6 +72,18 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | \\\n \tMASK_FLOAT_RETURNS | MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n \n+/* Sometimes certain combinations of command options do not make\n+   sense on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   Don't use this macro to turn on various extra optimizations for\n+   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n+#undef  OVERRIDE_OPTIONS\n+extern void netware_override_options (void);\n+#define OVERRIDE_OPTIONS netware_override_options ()\n+\n #undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n \n@@ -142,13 +154,15 @@ along with GCC; see the file COPYING3.  If not see\n    function named by the symbol (such as what section it is in).\n \n    On i386 running NetWare, modify the assembler name with an underscore (_)\n-   prefix and a suffix consisting of an atsign (@) followed by a string of\n-   digits that represents the number of bytes of arguments passed to the\n-   function, if it has the attribute STDCALL. Alternatively, if it has the \n-   REGPARM attribute, prefix it with an underscore (_), a digit representing\n-   the number of registers used, and an atsign (@). */\n+   or atsign (@) prefix and a suffix consisting of an atsign (@) followed by\n+   a string of digits that represents the number of bytes of arguments passed\n+   to the function, if it has the attribute STDCALL. Alternatively, if it has\n+   the REGPARM attribute, prefix it with an underscore (_), a digit\n+   representing the number of registers used, and an atsign (@). */\n void i386_nlm_encode_section_info (tree, rtx, int);\n+extern tree i386_nlm_mangle_decl_assembler_name (tree, tree);\n const char *i386_nlm_strip_name_encoding (const char *);\n #define SUBTARGET_ENCODE_SECTION_INFO  i386_nlm_encode_section_info\n+#define TARGET_MANGLE_DECL_ASSEMBLER_NAME i386_nlm_mangle_decl_assembler_name\n #undef  TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING  i386_nlm_strip_name_encoding"}, {"sha": "cc2d87cbe5d49994f5d612d8afaa7ccd333e7357", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -1,3 +1,9 @@\n+2008-02-25  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* gcc.dg/20020426-2.c: Remove bogus workaround.\n+\t* g++.old-deja/g++.other/store-expr1.C: Likewise.\n+\t* gcc.target/i386/movq-2.c: Also permit use of movzbl.\n+\n 2008-02-25  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* gfortran.dg/large_real_kind_3.F90: Xfail on ppc-darwin."}, {"sha": "72d30eba26e9481e3cdf402da5837525229ac164", "filename": "gcc/testsuite/g++.old-deja/g++.other/store-expr1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstore-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstore-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstore-expr1.C?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -2,7 +2,6 @@\n // { dg-require-effective-target ilp32 }\n // { dg-require-effective-target fpic }\n // { dg-options \"-mtune=i686 -O2 -fpic\" }\n-// { dg-bogus \"\\[Uu\\]nresolved symbol .(_GLOBAL_OFFSET_TABLE_|\\[_.A-Za-z\\]\\[_.0-9A-Za-z\\]*@(PLT|GOT|GOTOFF))|\\[Bb\\]ad fixup at .DATA.:\" \"PIC unsupported\" { xfail *-*-netware* } 0 }\n class G {};\n \n struct N {"}, {"sha": "3a892ed0a68e5a1bf61785096c953c613842f2c2", "filename": "gcc/testsuite/gcc.dg/20020426-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -3,7 +3,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -frename-registers -fomit-frame-pointer -fPIC -mtune=i686\" { target { { i?86-*-* x86_64-*-* } && { ilp32 && fpic } } } } */\n-/* { dg-bogus \"\\[Uu\\]nresolved symbol .(_GLOBAL_OFFSET_TABLE_|\\[_.A-Za-z\\]\\[_.0-9A-Za-z\\]*@(PLT|GOT|GOTOFF))\" \"PIC unsupported\" { xfail *-*-netware* } 0 } */\n \n extern void exit (int);\n "}, {"sha": "4a1accb583a5f99890fd2b2a465776a9002c1df6", "filename": "gcc/testsuite/gcc.target/i386/movq-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891984af0ffaed847d07a43c5528e9bd217dc2b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovq-2.c?ref=891984af0ffaed847d07a43c5528e9bd217dc2b9", "patch": "@@ -23,4 +23,4 @@ foo (struct S *x)\n \n /* { dg-final { scan-assembler-not \"movl\\[ \\t\\]*123\" } } */\n /* { dg-final { scan-assembler \"movzbl\\[ \\t\\]*123\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]*120\" } } */\n+/* { dg-final { scan-assembler \"mov(zb)?l\\[ \\t\\]*120\" } } */"}]}