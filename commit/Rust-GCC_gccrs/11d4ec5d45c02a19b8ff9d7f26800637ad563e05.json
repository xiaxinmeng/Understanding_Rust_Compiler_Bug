{"sha": "11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkNGVjNWQ0NWMwMmExOWI4ZmY5ZDdmMjY4MDA2MzdhZDU2M2UwNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-01T20:13:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-01T20:13:39Z"}, "message": "analyzer: fix false positives with *UNKNOWN_PTR [PR98918]\n\nPR analyzer/98918 reports various false positives and state explosions\non correct code that frees nodes and other pointers in a singly-linked\nlist.\n\nThe issue is that state-merger in the loop leads to UNKNOWN_VALUEs,\nand these are then erroneously used to form compound symbolic values\nand regions, such as;\n  INIT_VAL((*UNKNOWN(struct marker *)).ref)\nand:\n  (*INIT_VAL((*UNKNOWN(struct marker * *))))\nThe malloc state machine then treats these symbolic values as\nidentifying specific pointers, and thus e.g. erroneously reports a\ndouble-free when\n  INIT_VAL((*UNKNOWN(struct marker *)).ref)\nis freed twice (on subsequent iterations of the loop).\n\nSimilarly, the increasingly complex compound symbolic values have\nsm-state which prevents state merging, and eventually lead to the\nanalysis hitting safety limits and stopping.\n\nThis patch makes various compound values involving UNKNOWN be\nthemselves UNKNOWN, resolving both the false positives and the state\nexplosions.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/98918\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_initial_value):\n\tFold the initial value of *UNKNOWN_PTR to an UNKNOWN value.\n\t(region_model_manager::get_field_region): Fold the value\n\tof UNKNOWN_PTR->FIELD to *UNKNOWN_PTR_OF_&FIELD_TYPE.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98918\n\t* gcc.dg/analyzer/pr98918.c: New test.", "tree": {"sha": "e700f3fea5c6a05dd11059a05d6497beedbf26d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e700f3fea5c6a05dd11059a05d6497beedbf26d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d4ec5d45c02a19b8ff9d7f26800637ad563e05/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a1e511b57465d898429740377466894a0b247d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a1e511b57465d898429740377466894a0b247d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a1e511b57465d898429740377466894a0b247d"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "dfd2413e914492b05d81492a989bb68d44b68d91", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d4ec5d45c02a19b8ff9d7f26800637ad563e05/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d4ec5d45c02a19b8ff9d7f26800637ad563e05/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "patch": "@@ -249,6 +249,10 @@ region_model_manager::get_or_create_initial_value (const region *reg)\n \t\t\t\t get_or_create_initial_value (original_reg));\n     }\n \n+  /* INIT_VAL (*UNKNOWN_PTR) -> UNKNOWN_VAL.  */\n+  if (reg->symbolic_for_unknown_ptr_p ())\n+    return get_or_create_unknown_svalue (reg->get_type ());\n+\n   if (initial_svalue **slot = m_initial_values_map.get (reg))\n     return *slot;\n   initial_svalue *initial_sval = new initial_svalue (reg->get_type (), reg);\n@@ -815,6 +819,15 @@ region_model_manager::get_field_region (const region *parent, tree field)\n {\n   gcc_assert (TREE_CODE (field) == FIELD_DECL);\n \n+  /* (*UNKNOWN_PTR).field is (*UNKNOWN_PTR_OF_&FIELD_TYPE).  */\n+  if (parent->symbolic_for_unknown_ptr_p ())\n+    {\n+      tree ptr_to_field_type = build_pointer_type (TREE_TYPE (field));\n+      const svalue *unknown_ptr_to_field\n+\t= get_or_create_unknown_svalue (ptr_to_field_type);\n+      return get_symbolic_region (unknown_ptr_to_field);\n+    }\n+\n   field_region::key_t key (parent, field);\n   if (field_region *reg = m_field_regions.get (key))\n     return reg;"}, {"sha": "ac626ba1f3081b222212ded089e6331297bfd393", "filename": "gcc/testsuite/gcc.dg/analyzer/pr98918.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d4ec5d45c02a19b8ff9d7f26800637ad563e05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98918.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d4ec5d45c02a19b8ff9d7f26800637ad563e05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98918.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98918.c?ref=11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "patch": "@@ -0,0 +1,22 @@\n+#include <stdlib.h>\n+\n+struct marker {\n+  struct marker *next;\n+  void *ref;\n+};\n+struct data {\n+  struct marker *marker;\n+};\n+\n+void data_free(struct data d)\n+{\n+  struct marker *nm, *m;\n+\n+  m = d.marker;\n+  while (m) {\n+    nm = m->next;\n+    free(m->ref);\n+    free(m);\n+    m = nm;\n+  }\n+}"}]}