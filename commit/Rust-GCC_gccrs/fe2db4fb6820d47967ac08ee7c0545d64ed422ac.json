{"sha": "fe2db4fb6820d47967ac08ee7c0545d64ed422ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyZGI0ZmI2ODIwZDQ3OTY3YWMwOGVlN2MwNTQ1ZDY0ZWQ0MjJhYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-20T19:06:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-20T19:06:35Z"}, "message": "Add prototypes for static functions.\n\n(subst, case IF_THEN_ELSE): Add missing arg to make_compound_operation.\n(make_compound_operation, case ASHIFTRT): Delete extra gen_unary arg.\n\nFrom-SVN: r4945", "tree": {"sha": "bc7f32e13feafbf28f72ef17f03813abf4824bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc7f32e13feafbf28f72ef17f03813abf4824bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2db4fb6820d47967ac08ee7c0545d64ed422ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2db4fb6820d47967ac08ee7c0545d64ed422ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2db4fb6820d47967ac08ee7c0545d64ed422ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2db4fb6820d47967ac08ee7c0545d64ed422ac/comments", "author": null, "committer": null, "parents": [{"sha": "a358cee0e585f97851c43aa1e5882a1268407e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a358cee0e585f97851c43aa1e5882a1268407e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a358cee0e585f97851c43aa1e5882a1268407e48"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "879f8c3f551c49bfd45abf459ee9a9c31d265094", "filename": "gcc/combine.c", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2db4fb6820d47967ac08ee7c0545d64ed422ac/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2db4fb6820d47967ac08ee7c0545d64ed422ac/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fe2db4fb6820d47967ac08ee7c0545d64ed422ac", "patch": "@@ -365,43 +365,54 @@ static struct undobuf undobuf;\n \n static int n_occurrences;\n \n-static void set_nonzero_bits_and_sign_copies ();\n-static void setup_incoming_promotions ();\n-static void move_deaths ();\n-rtx remove_death ();\n-static void record_value_for_reg ();\n-static void record_dead_and_set_regs ();\n-static int use_crosses_set_p ();\n-static rtx try_combine ();\n-static rtx *find_split_point ();\n-static rtx subst ();\n-static void undo_all ();\n-static int reg_dead_at_p ();\n-static rtx expand_compound_operation ();\n-static rtx expand_field_assignment ();\n-static rtx make_extraction ();\n-static int get_pos_from_mask ();\n-static rtx force_to_mode ();\n-static rtx known_cond ();\n-static rtx make_field_assignment ();\n-static rtx make_compound_operation ();\n-static rtx apply_distributive_law ();\n-static rtx simplify_and_const_int ();\n-static unsigned HOST_WIDE_INT nonzero_bits ();\n-static int num_sign_bit_copies ();\n-static int merge_outer_ops ();\n-static rtx simplify_shift_const ();\n-static int recog_for_combine ();\n-static rtx gen_lowpart_for_combine ();\n-static rtx gen_rtx_combine ();\n-static rtx gen_binary ();\n-static rtx gen_unary ();\n-static enum rtx_code simplify_comparison ();\n-static int reversible_comparison_p ();\n-static int get_last_value_validate ();\n-static rtx get_last_value ();\n-static void distribute_notes ();\n-static void distribute_links ();\n+static void setup_incoming_promotions   PROTO(());\n+static void set_nonzero_bits_and_sign_copies  PROTO((rtx, rtx));\n+static int can_combine_p\tPROTO((rtx, rtx, rtx, rtx, rtx *, rtx *));\n+static int combinable_i3pat\tPROTO((rtx, rtx *, rtx, rtx, int, rtx *));\n+static rtx try_combine\t\tPROTO((rtx, rtx, rtx));\n+static void undo_all\t\tPROTO((void));\n+static rtx *find_split_point\tPROTO((rtx *, rtx));\n+static rtx subst\t\tPROTO((rtx, rtx, rtx, int, int));\n+static rtx expand_compound_operation  PROTO((rtx));\n+static rtx expand_field_assignment  PROTO((rtx));\n+static rtx make_extraction\tPROTO((enum machine_mode, rtx, int, rtx, int,\n+\t\t\t\t       int, int, int));\n+static rtx make_compound_operation  PROTO((rtx, enum rtx_code));\n+static int get_pos_from_mask\tPROTO((unsigned HOST_WIDE_INT, int *));\n+static rtx force_to_mode\tPROTO((rtx, enum machine_mode, int, rtx));\n+static rtx known_cond\t\tPROTO((rtx, enum rtx_code, rtx, rtx));\n+static rtx make_field_assignment  PROTO((rtx));\n+static rtx apply_distributive_law  PROTO((rtx));\n+static rtx simplify_and_const_int  PROTO((rtx, enum machine_mode, rtx,\n+\t\t\t\t\t  unsigned HOST_WIDE_INT));\n+static unsigned HOST_WIDE_INT nonzero_bits  PROTO((rtx, enum machine_mode));\n+static int num_sign_bit_copies  PROTO((rtx, enum machine_mode));\n+static int merge_outer_ops\tPROTO((enum rtx_code *, HOST_WIDE_INT *,\n+\t\t\t\t       enum rtx_code, HOST_WIDE_INT,\n+\t\t\t\t       enum machine_mode, int *));\n+static rtx simplify_shift_const\tPROTO((rtx, enum rtx_code, enum machine_mode,\n+\t\t\t\t       rtx, int));\n+static int recog_for_combine\tPROTO((rtx *, rtx, rtx *));\n+static rtx gen_lowpart_for_combine  PROTO((enum machine_mode, rtx));\n+static rtx gen_rtx_combine ();  /* This is varargs.  */\n+static rtx gen_binary\t\tPROTO((enum rtx_code, enum machine_mode,\n+\t\t\t\t       rtx, rtx));\n+static rtx gen_unary\t\tPROTO((enum rtx_code, enum machine_mode, rtx));\n+static enum rtx_code simplify_comparison  PROTO((enum rtx_code, rtx *, rtx *));\n+static int reversible_comparison_p  PROTO((rtx));\n+static void update_table_tick\tPROTO((rtx));\n+static void record_value_for_reg  PROTO((rtx, rtx, rtx));\n+static void record_dead_and_set_regs_1  PROTO((rtx, rtx));\n+static void record_dead_and_set_regs  PROTO((rtx));\n+static int get_last_value_validate  PROTO((rtx *, int, int));\n+static rtx get_last_value\tPROTO((rtx));\n+static int use_crosses_set_p\tPROTO((rtx, int));\n+static void reg_dead_at_p_1\tPROTO((rtx, rtx));\n+static int reg_dead_at_p\tPROTO((rtx, rtx));\n+static void move_deaths\t\tPROTO((rtx, int, rtx, rtx *));\n+static int reg_bitfield_target_p  PROTO((rtx, rtx));\n+static void distribute_notes\tPROTO((rtx, rtx, rtx, rtx, rtx, rtx));\n+static void distribute_links\tPROTO((rtx));\n \f\n /* Main entry point for combiner.  F is the first insn of the function.\n    NREGS is the first unused pseudo-reg number.  */\n@@ -3760,7 +3771,8 @@ subst (x, from, to, in_dest, unique_copy)\n \t\t  == GET_MODE_BITSIZE (mode))))\n \t{\n \t  rtx nz = make_compound_operation (GET_CODE (XEXP (x, 0)) == NE\n-\t\t\t\t\t    ? XEXP (x, 1) : XEXP (x, 2));\n+\t\t\t\t\t    ? XEXP (x, 1) : XEXP (x, 2),\n+\t\t\t\t\t    SET);\n \t  rtx z = GET_CODE (XEXP (x, 0)) == NE ? XEXP (x, 2) : XEXP (x, 1);\n \t  rtx dir = (nonzero_bits (XEXP (XEXP (x, 0), 0), mode) == 1\n \t\t     ? const1_rtx : constm1_rtx);\n@@ -5268,8 +5280,7 @@ make_compound_operation (x, in_code)\n \t  new = make_compound_operation (XEXP (XEXP (XEXP (x, 0), 0), 0),\n \t\t\t\t\t next_code);\n \t  new = make_extraction (mode,\n-\t\t\t\t gen_unary (GET_CODE (XEXP (x, 0)), mode,\n-\t\t\t\t\t    new, 0),\n+\t\t\t\t gen_unary (GET_CODE (XEXP (x, 0)), mode, new),\n \t\t\t\t (INTVAL (XEXP (x, 1))\n \t\t\t\t  - INTVAL (XEXP (XEXP (XEXP (x, 0), 0), 1))),\n \t\t\t\t NULL_RTX, mode_width - INTVAL (XEXP (x, 1)),"}]}