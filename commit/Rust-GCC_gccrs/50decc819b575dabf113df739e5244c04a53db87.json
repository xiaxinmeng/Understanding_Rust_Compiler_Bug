{"sha": "50decc819b575dabf113df739e5244c04a53db87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkZWNjODE5YjU3NWRhYmYxMTNkZjczOWU1MjQ0YzA0YTUzZGI4Nw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-01-30T10:27:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:27:36Z"}, "message": "exp_aggr.adb, [...]: Minor reformatting.\n\n2012-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb, sem_aggr.adb: Minor reformatting.\n\nFrom-SVN: r183700", "tree": {"sha": "d0c29db40d1e28881e0c8e511eb852406d45d5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0c29db40d1e28881e0c8e511eb852406d45d5f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50decc819b575dabf113df739e5244c04a53db87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50decc819b575dabf113df739e5244c04a53db87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50decc819b575dabf113df739e5244c04a53db87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50decc819b575dabf113df739e5244c04a53db87/comments", "author": null, "committer": null, "parents": [{"sha": "22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22243c12a3f738ff003bef6ec8cdbfba7ba273fd"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "9a4ee27234bf6b3053cea7b5b5bb390d2701a41c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50decc819b575dabf113df739e5244c04a53db87/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50decc819b575dabf113df739e5244c04a53db87/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=50decc819b575dabf113df739e5244c04a53db87", "patch": "@@ -243,20 +243,19 @@ package body Exp_Aggr is\n       Typ    : Entity_Id;\n       Target : Node_Id) return List_Id;\n    --  This routine implements top-down expansion of nested aggregates. In\n-   --  doing so, it avoids the generation of temporaries at each level. N is a\n-   --  nested (record or array) aggregate that has been marked with Expansion_\n-   --  Delayed. Typ is the expected type of the aggregate. Target is a\n-   --  (duplicable) expression that will hold the result of the aggregate\n-   --  expansion.\n+   --  doing so, it avoids the generation of temporaries at each level. N is\n+   --  a nested record or array aggregate with the Expansion_Delayed flag.\n+   --  Typ is the expected type of the aggregate. Target is a (duplicatable)\n+   --  expression that will hold the result of the aggregate expansion.\n \n    function Make_OK_Assignment_Statement\n      (Sloc       : Source_Ptr;\n       Name       : Node_Id;\n       Expression : Node_Id) return Node_Id;\n    --  This is like Make_Assignment_Statement, except that Assignment_OK\n-   --  is set in the left operand. All assignments built by this unit\n-   --  use this routine. This is needed to deal with assignments to\n-   --  initialized constants that are done in place.\n+   --  is set in the left operand. All assignments built by this unit use\n+   --  this routine. This is needed to deal with assignments to initialized\n+   --  constants that are done in place.\n \n    function Number_Of_Choices (N : Node_Id) return Nat;\n    --  Returns the number of discrete choices (not including the others choice\n@@ -267,9 +266,9 @@ package body Exp_Aggr is\n    --  array aggregate with all constant values, where the aggregate can be\n    --  evaluated at compile time. If this is possible, then N is rewritten\n    --  to be its proper compile time value with all the components properly\n-   --  assembled. The expression is analyzed and resolved and True is\n-   --  returned. If this transformation is not possible, N is unchanged\n-   --  and False is returned\n+   --  assembled. The expression is analyzed and resolved and True is returned.\n+   --  If this transformation is not possible, N is unchanged and False is\n+   --  returned.\n \n    function Safe_Slice_Assignment (N : Node_Id) return Boolean;\n    --  If a slice assignment has an aggregate with a single others_choice,\n@@ -339,7 +338,7 @@ package body Exp_Aggr is\n                Hi : constant Node_Id :=\n                       Type_High_Bound (Etype (First_Index (T)));\n \n-               Siz  : constant Int := Component_Count (Component_Type (T));\n+               Siz : constant Int := Component_Count (Component_Type (T));\n \n             begin\n                if not Compile_Time_Known_Value (Lo)\n@@ -5353,8 +5352,8 @@ package body Exp_Aggr is\n       elsif Component_Not_OK_For_Backend then\n          Convert_To_Assignments (N, Typ);\n \n-      --  If an ancestor is private, some components are not inherited and\n-      --  we cannot expand into a record aggregate\n+      --  If an ancestor is private, some components are not inherited and we\n+      --  cannot expand into a record aggregate.\n \n       elsif Has_Visible_Private_Ancestor (Typ) then\n          Convert_To_Assignments (N, Typ);\n@@ -5413,7 +5412,7 @@ package body Exp_Aggr is\n \n          elsif Is_Derived_Type (Typ) then\n \n-            --  For untagged types,  non-stored discriminants are replaced\n+            --  For untagged types, non-stored discriminants are replaced\n             --  with stored discriminants, which are the ones that gigi uses\n             --  to describe the type and its components.\n \n@@ -5600,10 +5599,8 @@ package body Exp_Aggr is\n \n             if Present (Orig_Tag) then\n                Tag_Value := Orig_Tag;\n-\n             elsif not Tagged_Type_Expansion then\n                Tag_Value := Empty;\n-\n             else\n                Tag_Value :=\n                  New_Occurrence_Of"}, {"sha": "77a831e01f6dba2dd4897c1540316bfcd1cca4b3", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50decc819b575dabf113df739e5244c04a53db87/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50decc819b575dabf113df739e5244c04a53db87/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=50decc819b575dabf113df739e5244c04a53db87", "patch": "@@ -3534,7 +3534,7 @@ package body Sem_Aggr is\n             Next_Discriminant (Discrim);\n          end loop;\n \n-         --  Find remaining discriminant values, if any, among named components\n+         --  Find remaining discriminant values if any among named components\n \n          while Present (Discrim) loop\n             Expr := Get_Value (Discrim, Component_Associations (N), True);\n@@ -3575,12 +3575,12 @@ package body Sem_Aggr is\n       --  maintenance nightmare.\n \n       --  ??? Performance WARNING. The current implementation creates a new\n-      --  itype for all aggregates whose base type is discriminated.\n-      --  This means that for record aggregates nested inside an array\n-      --  aggregate we will create a new itype for each record aggregate\n-      --  if the array component type has discriminants. For large aggregates\n-      --  this may be a problem. What should be done in this case is\n-      --  to reuse itypes as much as possible.\n+      --  itype for all aggregates whose base type is discriminated. This means\n+      --  that for record aggregates nested inside an array aggregate we will\n+      --  create a new itype for each record aggregate if the array component\n+      --  type has discriminants. For large aggregates this may be a problem.\n+      --  What should be done in this case is to reuse itypes as much as\n+      --  possible.\n \n       if Has_Discriminants (Typ)\n         or else (Has_Unknown_Discriminants (Typ)\n@@ -3905,9 +3905,9 @@ package body Sem_Aggr is\n                --  If the component has discriminants, their values must\n                --  be taken from their subtype. This is indispensable for\n                --  constraints that are given by the current instance of an\n-               --  enclosing type, to allow the expansion of the aggregate\n-               --  to replace the reference to the current instance by the\n-               --  target object of the aggregate.\n+               --  enclosing type, to allow the expansion of the aggregate to\n+               --  replace the reference to the current instance by the target\n+               --  object of the aggregate.\n \n                if Present (Parent (Component))\n                  and then"}]}