{"sha": "90829bcb0ca688af71c19ca3c72f4da6cae455fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4MjliY2IwY2E2ODhhZjcxYzE5Y2EzYzcyZjRkYTZjYWU0NTVmZA==", "commit": {"author": {"name": "Silvius Rus", "email": "silvius.rus@gmail.com", "date": "2010-05-11T10:23:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-11T10:23:20Z"}, "message": "re PR libstdc++/43259 (ext/profile/all.cc fails on Solaris)\n\n2010-05-11  Silvius Rus  <silvius.rus@gmail.com>\n\n\tPR libstdc++/43259\n\t* include/profile/impl/profiler_algos.h: New.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* include/profile/impl/profiler.h\n\t(_GLIBCXX_PROFILE_DEFINE_UNINIT_DATA): Add.\n\t* include/profile/impl/profiler_trace.h\n\t(__mutex_t, __lock, __unlock): Remove.\n\t(__lock_object_table, __lock_stack_table): Remove. Replace uses with\n\tcalls to __gnu_cxx::__mutex::lock.\n\t(__unlock_object_table, __unlock_stack_table): Remove. Replace uses\n\twith calls to __gnu_cxx::__mutex::unlock.\n\t(__warn, __cost_factor_writer, __cost_factor_setter): Add.\n\t* testsuite/ext/profile/profiler_algos.cc: New.\n\nFrom-SVN: r159269", "tree": {"sha": "6f30d6695403d298e84452162dbcfe9db10399d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f30d6695403d298e84452162dbcfe9db10399d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90829bcb0ca688af71c19ca3c72f4da6cae455fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90829bcb0ca688af71c19ca3c72f4da6cae455fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90829bcb0ca688af71c19ca3c72f4da6cae455fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90829bcb0ca688af71c19ca3c72f4da6cae455fd/comments", "author": {"login": "silviusrus", "id": 2181423, "node_id": "MDQ6VXNlcjIxODE0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2181423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/silviusrus", "html_url": "https://github.com/silviusrus", "followers_url": "https://api.github.com/users/silviusrus/followers", "following_url": "https://api.github.com/users/silviusrus/following{/other_user}", "gists_url": "https://api.github.com/users/silviusrus/gists{/gist_id}", "starred_url": "https://api.github.com/users/silviusrus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/silviusrus/subscriptions", "organizations_url": "https://api.github.com/users/silviusrus/orgs", "repos_url": "https://api.github.com/users/silviusrus/repos", "events_url": "https://api.github.com/users/silviusrus/events{/privacy}", "received_events_url": "https://api.github.com/users/silviusrus/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f0622b42d800fd0b09dc10b0f9dc66399bf3bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0622b42d800fd0b09dc10b0f9dc66399bf3bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0622b42d800fd0b09dc10b0f9dc66399bf3bb2"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "5963ceeefd83c1f86c7a7b957c31b58e73301e8a", "filename": "libstdc++-v3/testsuite/ext/profile/profiler_algos.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90829bcb0ca688af71c19ca3c72f4da6cae455fd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fprofiler_algos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90829bcb0ca688af71c19ca3c72f4da6cae455fd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fprofiler_algos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fprofiler_algos.cc?ref=90829bcb0ca688af71c19ca3c72f4da6cae455fd", "patch": "@@ -0,0 +1,147 @@\n+// { dg-options \"-D_GLIBCXX_PROFILE\" }\n+\n+// -*- C++ -*-\n+\n+// Unit tests for profile/impl/profile_algos.h.\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <profile/impl/profiler.h>\n+\n+using std::__norm::vector;\n+\n+enum Failure\n+{\n+  NO_FAILURES = 0x0,\n+  INSERT_AFTER_N = 0x1,\n+  INSERT_AT_HEAD = 0x2,\n+  INSERT_AT_TAIL = 0x4,\n+  INSERT_IN_THE_MIDDLE = 0x8,\n+  TOP_N = 0x10,\n+  FOR_EACH = 0x20,\n+  REMOVE = 0x40\n+};\n+  \n+\n+static int\n+test_insert_top_n()\n+{\n+  vector<int> v;\n+\n+  for (int i = 0; i < 10; i++)\n+    v.push_back(10 - i);\n+\n+  // Inserting -5 should have no effect if size is limited to 10.\n+  __gnu_profile::__insert_top_n(v, -5, 10);\n+  for (int i = 0; i < 10; i++)\n+    if (v[i] != 10 - i)\n+      return INSERT_AFTER_N;\n+\n+  // Insert at head.\n+  __gnu_profile::__insert_top_n(v, 11, 10);\n+  for (int i = 0; i < 11; i++)\n+    if (v[i] != 11 - i)\n+      return INSERT_AT_HEAD;\n+\n+  // Insert at end.\n+  __gnu_profile::__insert_top_n(v, 0, 100);\n+  for (int i = 0; i < 12; i++)\n+    if (v[i] != 11 - i)\n+      return INSERT_AT_TAIL;\n+\n+  // Insert in the middle.\n+  __gnu_profile::__insert_top_n(v, 6, 11);\n+  for (int i = 0; i < 6; i++)\n+    if (v[i] != 11 - i)\n+      return INSERT_IN_THE_MIDDLE;\n+  for (int i = 6; i < 13; i++)\n+    if (v[i] != 12 - i)\n+      return INSERT_IN_THE_MIDDLE;\n+\n+  return NO_FAILURES;\n+}\n+\n+static int\n+test_top_n()\n+{\n+  vector<int> v, out;\n+\n+  for (int i = 0; i < 100; i++)\n+    {\n+      v.push_back(100 + i);\n+      v.push_back(100 - i);\n+    }\n+\n+  __gnu_profile::__top_n(v, out, 10);\n+\n+  for (int i = 0; i < 10; i++)\n+    if (out[i] != 199 - i)\n+      return TOP_N;\n+\n+  return NO_FAILURES;\n+}\n+\n+struct test_for_each_helper\n+{\n+  static int sum;\n+  void operator ()(int i) { \n+    sum += i;\n+  }\n+};\n+\n+int test_for_each_helper::sum = 0;\n+\n+static int\n+test_for_each()\n+{\n+  vector<int> v;\n+  test_for_each_helper helper;\n+  int checksum = 0;\n+\n+  for (int i = 0; i < 10; i++)\n+    {\n+      v.push_back(i);\n+      checksum += i;\n+    }\n+\n+  __gnu_profile::__for_each(v.begin(), v.end(), helper);\n+\n+  return helper.sum == checksum ? NO_FAILURES : FOR_EACH;\n+}\n+\n+static int\n+test_remove()\n+{\n+  vector<char> v;\n+\n+  for (int i = 0; i < 10; i++)\n+    v.push_back(' ');\n+  v.push_back('x');\n+  for (int i = 0; i < 10; i++)\n+    v.push_back(' ');\n+  v.push_back('x');\n+\n+  return __gnu_profile::__remove(v.begin(), v.end(), ' ') == v.begin() + 2\n+      ? NO_FAILURES : REMOVE;\n+}\n+\n+int main()\n+{\n+  return test_insert_top_n() | test_top_n() | test_for_each() | test_remove();\n+}"}]}