{"sha": "e43d8b8a0e28dd561dfafbc829293a262845e05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzZDhiOGEwZTI4ZGQ1NjFkZmFmYmM4MjkyOTNhMjYyODQ1ZTA1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-10T17:35:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-10T17:35:24Z"}, "message": "re PR target/24949 (FAIL: gcc.c-torture/compile/20000403-2.c -O0)\n\n\tPR target/24949\n\t* config/m68k/m68k.md (ashrdi_const32, ashrdi_const32_mem,\n\tashrdi_const, ashrdi3): Use a scratch register.\n\nFrom-SVN: r113675", "tree": {"sha": "1a47706b3d025bd053a5fe60442422716590558b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a47706b3d025bd053a5fe60442422716590558b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e43d8b8a0e28dd561dfafbc829293a262845e05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43d8b8a0e28dd561dfafbc829293a262845e05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43d8b8a0e28dd561dfafbc829293a262845e05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43d8b8a0e28dd561dfafbc829293a262845e05e/comments", "author": null, "committer": null, "parents": [{"sha": "fdafd4613f5e867d6065b9951803279a6d40fa56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdafd4613f5e867d6065b9951803279a6d40fa56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdafd4613f5e867d6065b9951803279a6d40fa56"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "e598418ae22e707d69f3c33caf79f32b5dee2bcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43d8b8a0e28dd561dfafbc829293a262845e05e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43d8b8a0e28dd561dfafbc829293a262845e05e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e43d8b8a0e28dd561dfafbc829293a262845e05e", "patch": "@@ -1,3 +1,9 @@\n+2006-05-10  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR target/24949\n+\t* config/m68k/m68k.md (ashrdi_const32, ashrdi_const32_mem,\n+\tashrdi_const, ashrdi3): Use a scratch register.\n+\n 2006-05-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/27302"}, {"sha": "8e565a6551672a4ce3b9de72e9cda77115930986", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43d8b8a0e28dd561dfafbc829293a262845e05e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43d8b8a0e28dd561dfafbc829293a262845e05e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=e43d8b8a0e28dd561dfafbc829293a262845e05e", "patch": "@@ -4283,42 +4283,40 @@\n })\n \n (define_insn \"ashrdi_const32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro\")\n-\t\t     (const_int 32)))]\n-  \"\"\n-{\n-  CC_STATUS_INIT;\n-  operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n-  if (TARGET_68020)\n-    return \"move%.l %1,%2\\;smi %0\\;extb%.l %0\";\n-  else\n-    return \"move%.l %1,%2\\;smi %0\\;ext%.w %0\\;ext%.l %0\";\n-})\n-\n-(define_insn \"ashrdi_const32_mem\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=o,<\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro,ro\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,o,<\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro,ro,ro\")\n \t\t     (const_int 32)))\n-   (clobber (match_scratch:SI 2 \"=d,d\"))]\n+   (clobber (match_scratch:SI 2 \"=X,d,d\"))]\n   \"\"\n {\n   CC_STATUS_INIT;\n-  if (which_alternative == 1)\n-    operands[3] = operands[0];\n-  else\n-    operands[3] = adjust_address (operands[0], SImode, 4);\n-  if (TARGET_68020)\n-    return \"move%.l %1,%3\\;smi %2\\;extb%.l %2\\;move%.l %2,%0\";\n+  if (which_alternative == 0)\n+    {\n+      operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+      if (TARGET_68020)\n+\treturn \"move%.l %1,%2\\;smi %0\\;extb%.l %0\";\n+      else\n+\treturn \"move%.l %1,%2\\;smi %0\\;ext%.w %0\\;ext%.l %0\";\n+    }\n   else\n-    return \"move%.l %1,%3\\;smi %2\\;ext%.w %2\\;ext%.l %2\\;move%.l %2,%0\";\n+    {\n+      if (which_alternative == 2)\n+\toperands[3] = operands[0];\n+      else if (which_alternative == 1)\n+\toperands[3] = adjust_address (operands[0], SImode, 4);\n+      if (TARGET_68020)\n+\treturn \"move%.l %1,%3\\;smi %2\\;extb%.l %2\\;move%.l %2,%0\";\n+      else\n+\treturn \"move%.l %1,%3\\;smi %2\\;ext%.w %2\\;ext%.l %2\\;move%.l %2,%0\";\n+    }\n })\n \n ;; The predicate below must be general_operand, because ashrdi3 allows that\n (define_insn \"ashrdi_const\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d\")\n \t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand 2 \"const_int_operand\" \"n\")))]\n+\t\t     (match_operand 2 \"const_int_operand\" \"n\")))\n+   (clobber (match_scratch:SI 3 \"=X\"))]\n   \"(!TARGET_COLDFIRE \n     && ((INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3)\n \t|| INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16\n@@ -4355,9 +4353,10 @@\n })\n \n (define_expand \"ashrdi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"\")\n-\t\t     (match_operand 2 \"const_int_operand\" \"\")))]\n+  [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t\t   (ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"\")\n+\t\t\t\t(match_operand 2 \"const_int_operand\" \"\")))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n   \"!TARGET_COLDFIRE\"\n   \"\n {\n@@ -4368,6 +4367,7 @@\n \t  && INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16\n \t  && (INTVAL (operands[2]) < 31 || INTVAL (operands[2]) > 63)))\n     FAIL;\n+  operands[3] = gen_rtx_SCRATCH (SImode);\n } \")\n \n ;; On all 68k models, this makes faster code in a special case."}]}