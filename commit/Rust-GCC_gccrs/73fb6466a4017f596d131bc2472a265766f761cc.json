{"sha": "73fb6466a4017f596d131bc2472a265766f761cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmYjY0NjZhNDAxN2Y1OTZkMTMxYmMyNDcyYTI2NTc2NmY3NjFjYw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2003-12-05T11:53:56Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-12-05T11:53:56Z"}, "message": "re PR target/13256 (strict_low_part mistreated in delay slots)\n\n\tPR target/13256\n\t* resource.h (enum mark_resource_type): Remove member MARK_DEST.\n\tThe only user changed as follows:\n\t* resource.c (mark_set_resources) <case SET>: Always recurse for\n\tSET_SRC (x).\n\t<case SIGN_EXTRACT, case ZERO_EXTRACT>: Always recurse on\n\toperands.\n\t<case STRICT_LOW_PART>: Delete, deferring to default code.\n\nFrom-SVN: r74328", "tree": {"sha": "3b01fcfb43ae5a0dc880879a31c4e58e8eaf78c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b01fcfb43ae5a0dc880879a31c4e58e8eaf78c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73fb6466a4017f596d131bc2472a265766f761cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fb6466a4017f596d131bc2472a265766f761cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fb6466a4017f596d131bc2472a265766f761cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fb6466a4017f596d131bc2472a265766f761cc/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b64de1fe98467135df9c0cd6855853dcd7d597d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64de1fe98467135df9c0cd6855853dcd7d597d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64de1fe98467135df9c0cd6855853dcd7d597d7"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "4f79d5e521e75fb3baeea6cf4d23b7499a35949a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73fb6466a4017f596d131bc2472a265766f761cc", "patch": "@@ -1,3 +1,14 @@\n+2003-12-05  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/13256\n+\t* resource.h (enum mark_resource_type): Remove member MARK_DEST.\n+\tThe only user changed as follows:\n+\t* resource.c (mark_set_resources) <case SET>: Always recurse for\n+\tSET_SRC (x).\n+\t<case SIGN_EXTRACT, case ZERO_EXTRACT>: Always recurse on\n+\toperands.\n+\t<case STRICT_LOW_PART>: Delete, deferring to default code.\n+\n 2003-12-05  Waldek Hebisch <hebisch@math.uni.wroc.pl>\n \n \t* stmt.c (expand_nl_goto_receiver): Copy hard register clobbers"}, {"sha": "8e3bf8df37eb430f9cf1c7e50d60f75c6112361d", "filename": "gcc/resource.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=73fb6466a4017f596d131bc2472a265766f761cc", "patch": "@@ -616,7 +616,7 @@ find_dead_or_set_registers (rtx target, struct resources *res,\n /* Given X, a part of an insn, and a pointer to a `struct resource',\n    RES, indicate which resources are modified by the insn. If\n    MARK_TYPE is MARK_SRC_DEST_CALL, also mark resources potentially\n-   set by the called routine.  If MARK_TYPE is MARK_DEST, only mark SET_DESTs\n+   set by the called routine.\n \n    If IN_DEST is nonzero, it means we are inside a SET.  Otherwise,\n    objects are being referenced instead of set.\n@@ -716,8 +716,7 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \t\t\t   || GET_CODE (SET_SRC (x)) != CALL),\n \t\t\t  mark_type);\n \n-      if (mark_type != MARK_DEST)\n-\tmark_set_resources (SET_SRC (x), res, 0, MARK_SRC_DEST);\n+      mark_set_resources (SET_SRC (x), res, 0, MARK_SRC_DEST);\n       return;\n \n     case CLOBBER:\n@@ -747,12 +746,9 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \n     case SIGN_EXTRACT:\n     case ZERO_EXTRACT:\n-      if (! (mark_type == MARK_DEST && in_dest))\n-\t{\n-\t  mark_set_resources (XEXP (x, 0), res, in_dest, MARK_SRC_DEST);\n-\t  mark_set_resources (XEXP (x, 1), res, 0, MARK_SRC_DEST);\n-\t  mark_set_resources (XEXP (x, 2), res, 0, MARK_SRC_DEST);\n-\t}\n+      mark_set_resources (XEXP (x, 0), res, in_dest, MARK_SRC_DEST);\n+      mark_set_resources (XEXP (x, 1), res, 0, MARK_SRC_DEST);\n+      mark_set_resources (XEXP (x, 2), res, 0, MARK_SRC_DEST);\n       return;\n \n     case MEM:\n@@ -799,13 +795,6 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \t}\n       return;\n \n-    case STRICT_LOW_PART:\n-      if (! (mark_type == MARK_DEST && in_dest))\n-\t{\n-\t  mark_set_resources (XEXP (x, 0), res, 0, MARK_SRC_DEST);\n-\t  return;\n-\t}\n-\n     case UNSPEC_VOLATILE:\n     case ASM_INPUT:\n       /* Traditional asm's are always volatile.  */"}, {"sha": "96eff6ed1ff110085a254e9ba9ac194488a99ecb", "filename": "gcc/resource.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2Fresource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fb6466a4017f596d131bc2472a265766f761cc/gcc%2Fresource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.h?ref=73fb6466a4017f596d131bc2472a265766f761cc", "patch": "@@ -37,8 +37,7 @@ struct resources\n enum mark_resource_type\n {\n   MARK_SRC_DEST = 0,\n-  MARK_SRC_DEST_CALL = 1,\n-  MARK_DEST = 2\n+  MARK_SRC_DEST_CALL = 1\n };\n \n extern void mark_target_live_regs (rtx, rtx, struct resources *);"}]}