{"sha": "e3b55ce50ec294f30106947bd819f12a98069c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNTVjZTUwZWMyOTRmMzAxMDY5NDdiZDgxOWYxMmE5ODA2OWM1Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T12:43:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-17T14:10:21Z"}, "message": "c-family: token streamer\n\nThis is broken out of modules patch 01-langhooks.diff, I realized that\nthis part is independent, and removes some duplicated code -- migrated\nto the token_streamer class.\n\n\tgcc/c-family/\n\t* c-ppoutput.c (scan_translation_unit): Use token_streamer, remove\n\tcode duplicating that functionality.", "tree": {"sha": "12ac4a63ac71b5a6f238c1eb10dfe7a65ceea62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ac4a63ac71b5a6f238c1eb10dfe7a65ceea62e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b55ce50ec294f30106947bd819f12a98069c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b55ce50ec294f30106947bd819f12a98069c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b55ce50ec294f30106947bd819f12a98069c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b55ce50ec294f30106947bd819f12a98069c57/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f87b4ef2323769bd71f7ccea2aa6017a7376f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f87b4ef2323769bd71f7ccea2aa6017a7376f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f87b4ef2323769bd71f7ccea2aa6017a7376f76"}], "stats": {"total": 112, "additions": 5, "deletions": 107}, "files": [{"sha": "517de15d97cc721507e23201da5e0e1afd7e6fe7", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 5, "deletions": 107, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b55ce50ec294f30106947bd819f12a98069c57/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b55ce50ec294f30106947bd819f12a98069c57/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=e3b55ce50ec294f30106947bd819f12a98069c57", "patch": "@@ -304,120 +304,18 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n static void\n scan_translation_unit (cpp_reader *pfile)\n {\n-  bool avoid_paste = false;\n-  bool do_line_adjustments\n-    = cpp_get_options (parse_in)->lang != CLK_ASM\n-      && !flag_no_line_commands;\n-  bool in_pragma = false;\n-  bool line_marker_emitted = false;\n+  token_streamer streamer (pfile);\n \n   print.source = NULL;\n   for (;;)\n     {\n-      location_t loc;\n-      const cpp_token *token = cpp_get_token_with_location (pfile, &loc);\n-\n-      if (token->type == CPP_PADDING)\n-\t{\n-\t  avoid_paste = true;\n-\t  if (print.source == NULL\n-\t      || (!(print.source->flags & PREV_WHITE)\n-\t\t  && token->val.source == NULL))\n-\t    print.source = token->val.source;\n-\t  continue;\n-\t}\n+      location_t spelling_loc;\n+      const cpp_token *token\n+\t= cpp_get_token_with_location (pfile, &spelling_loc);\n \n+      streamer.stream (pfile, token, spelling_loc);\n       if (token->type == CPP_EOF)\n \tbreak;\n-\n-      /* Subtle logic to output a space if and only if necessary.  */\n-      if (avoid_paste)\n-\t{\n-\t  int src_line = LOCATION_LINE (loc);\n-\n-\t  if (print.source == NULL)\n-\t    print.source = token;\n-\n-\t  if (src_line != print.src_line\n-\t      && do_line_adjustments\n-\t      && !in_pragma)\n-\t    {\n-\t      line_marker_emitted = do_line_change (pfile, token, loc, false);\n-\t      putc (' ', print.outf);\n-\t      print.printed = true;\n-\t    }\n-\t  else if (print.source->flags & PREV_WHITE\n-\t\t   || (print.prev\n-\t\t       && cpp_avoid_paste (pfile, print.prev, token))\n-\t\t   || (print.prev == NULL && token->type == CPP_HASH))\n-\t    {\n-\t      putc (' ', print.outf);\n-\t      print.printed = true;\n-\t    }\n-\t}\n-      else if (token->flags & PREV_WHITE)\n-\t{\n-\t  int src_line = LOCATION_LINE (loc);\n-\n-\t  if (src_line != print.src_line\n-\t      && do_line_adjustments\n-\t      && !in_pragma)\n-\t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n-\t  putc (' ', print.outf);\n-\t  print.printed = true;\n-\t}\n-\n-      avoid_paste = false;\n-      print.source = NULL;\n-      print.prev = token;\n-      if (token->type == CPP_PRAGMA)\n-\t{\n-\t  const char *space;\n-\t  const char *name;\n-\n-\t  line_marker_emitted = maybe_print_line (token->src_loc);\n-\t  fputs (\"#pragma \", print.outf);\n-\t  c_pp_lookup_pragma (token->val.pragma, &space, &name);\n-\t  if (space)\n-\t    fprintf (print.outf, \"%s %s\", space, name);\n-\t  else\n-\t    fprintf (print.outf, \"%s\", name);\n-\t  print.printed = true;\n-\t  in_pragma = true;\n-\t}\n-      else if (token->type == CPP_PRAGMA_EOL)\n-\t{\n-\t  maybe_print_line (token->src_loc);\n-\t  in_pragma = false;\n-\t}\n-      else\n-\t{\n-\t  if (cpp_get_options (parse_in)->debug)\n-\t    linemap_dump_location (line_table, token->src_loc, print.outf);\n-\n-\t  if (do_line_adjustments\n-\t      && !in_pragma\n-\t      && !line_marker_emitted\n-\t      && print.prev_was_system_token != !!in_system_header_at (loc)\n-\t      && !is_location_from_builtin_token (loc))\n-\t    /* The system-ness of this token is different from the one\n-\t       of the previous token.  Let's emit a line change to\n-\t       mark the new system-ness before we emit the token.  */\n-\t    {\n-\t      do_line_change (pfile, token, loc, false);\n-\t      print.prev_was_system_token = !!in_system_header_at (loc);\n-\t    }\n-\t  cpp_output_token (token, print.outf);\n-\t  line_marker_emitted = false;\n-\t  print.printed = true;\n-\t}\n-\n-      /* CPP_COMMENT tokens and raw-string literal tokens can\n-\t have embedded new-line characters.  Rather than enumerating\n-\t all the possible token types just check if token uses\n-\t val.str union member.  */\n-      if (cpp_token_val_index (token) == CPP_TOKEN_FLD_STR)\n-\taccount_for_newlines (token->val.str.text, token->val.str.len);\n     }\n }\n "}]}