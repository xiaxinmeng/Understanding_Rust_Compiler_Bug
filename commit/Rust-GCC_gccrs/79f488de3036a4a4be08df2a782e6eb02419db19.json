{"sha": "79f488de3036a4a4be08df2a782e6eb02419db19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmNDg4ZGUzMDM2YTRhNGJlMDhkZjJhNzgyZTZlYjAyNDE5ZGIxOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-10T10:28:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-10T11:51:42Z"}, "message": "middle-end/102273 - avoid ICE with auto-init and nested functions\n\nThis refactors expansion to consider non-decl LHS.  I suspect\nthe is_val argument is not needed.\n\n2021-09-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/102273\n\t* internal-fn.c (expand_DEFERRED_INIT): Always expand non-SSA vars.\n\n\t* gcc.dg/pr102273.c: New testcase.", "tree": {"sha": "f7b10cf09b891d046a4777ac25c6f21156ef5ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7b10cf09b891d046a4777ac25c6f21156ef5ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79f488de3036a4a4be08df2a782e6eb02419db19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f488de3036a4a4be08df2a782e6eb02419db19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f488de3036a4a4be08df2a782e6eb02419db19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f488de3036a4a4be08df2a782e6eb02419db19/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c5c2d86e520c3bf37368309b2fe932c88bdd14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5c2d86e520c3bf37368309b2fe932c88bdd14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5c2d86e520c3bf37368309b2fe932c88bdd14f"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "b1283690080a33f89706e771d69e15a78b54ac54", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f488de3036a4a4be08df2a782e6eb02419db19/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f488de3036a4a4be08df2a782e6eb02419db19/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=79f488de3036a4a4be08df2a782e6eb02419db19", "patch": "@@ -3006,31 +3006,23 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n   tree var_size = gimple_call_arg (stmt, 0);\n   enum auto_init_type init_type\n     = (enum auto_init_type) TREE_INT_CST_LOW (gimple_call_arg (stmt, 1));\n-  bool is_vla = (bool) TREE_INT_CST_LOW (gimple_call_arg (stmt, 2));\n   bool reg_lhs = true;\n \n   tree var_type = TREE_TYPE (lhs);\n   gcc_assert (init_type > AUTO_INIT_UNINITIALIZED);\n \n-  if (DECL_P (lhs))\n-    {\n-      rtx tem = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n-      reg_lhs = !MEM_P (tem);\n-    }\n-  else if (TREE_CODE (lhs) == SSA_NAME)\n+  if (TREE_CODE (lhs) == SSA_NAME)\n     reg_lhs = true;\n   else\n     {\n-      gcc_assert (is_vla);\n-      reg_lhs = false;\n+      rtx tem = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+      reg_lhs = !MEM_P (tem);\n     }\n \n-\n   if (!reg_lhs)\n     {\n-    /* If this is a VLA or the variable is not in register,\n-       expand to a memset to initialize it.  */\n-\n+      /* If this is a VLA or the variable is not in register,\n+\t expand to a memset to initialize it.  */\n       mark_addressable (lhs);\n       tree var_addr = build_fold_addr_expr (lhs);\n \n@@ -3045,8 +3037,8 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n     }\n   else\n     {\n-    /* If this variable is in a register, use expand_assignment might\n-       generate better code.  */\n+      /* If this variable is in a register, use expand_assignment might\n+\t generate better code.  */\n       tree init = build_zero_cst (var_type);\n       unsigned HOST_WIDE_INT total_bytes\n \t= tree_to_uhwi (TYPE_SIZE_UNIT (var_type));"}, {"sha": "568e44ebfefd2e6f752c9cbd2c982d8019e7bfc5", "filename": "gcc/testsuite/gcc.dg/pr102273.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f488de3036a4a4be08df2a782e6eb02419db19/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102273.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f488de3036a4a4be08df2a782e6eb02419db19/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102273.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102273.c?ref=79f488de3036a4a4be08df2a782e6eb02419db19", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+\n+void bar();\n+\n+struct A { char d; };\n+void foo()\n+{\n+  struct A e;\n+  void baz() { bar(e); }\n+}"}]}