{"sha": "6212572b23ccaaf355ab8376d3f5affec334b797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxMjU3MmIyM2NjYWFmMzU1YWI4Mzc2ZDNmNWFmZmVjMzM0Yjc5Nw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-08T15:39:26Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-09T18:18:35Z"}, "message": "Introduce TyCtx wrapper over TyTy Types with elements than can change.\n\nArrayTypes for example can have an inference variable for an element type\nwhich requires the Type system to lookup what type it is when requested.\nTyCtx acts as this wrapper that takes an HirId reference that cleans up the\ncode for ArrayTypes, ReferenceTypes and TupleTypes where elements can be\ninference variables.", "tree": {"sha": "ea8369f2698c26f7663fde54125ab28ef04334d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea8369f2698c26f7663fde54125ab28ef04334d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6212572b23ccaaf355ab8376d3f5affec334b797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6212572b23ccaaf355ab8376d3f5affec334b797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6212572b23ccaaf355ab8376d3f5affec334b797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6212572b23ccaaf355ab8376d3f5affec334b797/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99980cbb5efdaa935d841b4e523ea758568b1827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99980cbb5efdaa935d841b4e523ea758568b1827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99980cbb5efdaa935d841b4e523ea758568b1827"}], "stats": {"total": 165, "additions": 88, "deletions": 77}, "files": [{"sha": "c2ed0bb154d51582a73c03cfb395386ec95069a3", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -391,7 +391,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     Bexpression *length\n       = ctx->get_backend ()->integer_constant_expression (capacity_type, ival);\n \n-    Btype *element_type = TyTyResolveCompile::compile (ctx, type.get_type ());\n+    Btype *element_type\n+      = TyTyResolveCompile::compile (ctx, type.get_element_type ());\n     translated = ctx->get_backend ()->array_type (element_type, length);\n   }\n "}, {"sha": "7e94b98164f92795ea0a57206a7619359cbbdb56", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -127,11 +127,11 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    std::vector<HirId> fields;\n+    std::vector<TyTy::TyCtx> fields;\n     for (auto &elem : expr.get_tuple_elems ())\n       {\n \tauto field_ty = TypeCheckExpr::Resolve (elem.get (), false);\n-\tfields.push_back (field_ty->get_ref ());\n+\tfields.push_back (TyTy::TyCtx (field_ty->get_ref ()));\n       }\n     infered = new TyTy::TupleType (expr.get_mappings ().get_hirid (), fields);\n   }\n@@ -460,7 +460,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t  rust_assert (ok);\n \n \t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t\t     base->get_ref ());\n+\t\t\t\t\t     TyTy::TyCtx (base->get_ref ()));\n \t}\n \tbreak;\n \n@@ -649,7 +649,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     TyTy::ArrayType *array_type = (TyTy::ArrayType *) infered;\n-    infered = array_type->get_type ()->clone ();\n+    infered = array_type->get_element_type ()->clone ();\n   }\n \n   void visit (HIR::ArrayExpr &expr)\n@@ -660,8 +660,9 @@ class TypeCheckExpr : public TypeCheckBase\n     elements->accept_vis (*this);\n     rust_assert (infered_array_elems != nullptr);\n \n-    infered = new TyTy::ArrayType (expr.get_mappings ().get_hirid (), num_elems,\n-\t\t\t\t   infered_array_elems);\n+    infered\n+      = new TyTy::ArrayType (expr.get_mappings ().get_hirid (), num_elems,\n+\t\t\t     TyTy::TyCtx (infered_array_elems->get_ref ()));\n   }\n \n   void visit (HIR::ArrayElemsValues &elems)\n@@ -891,7 +892,7 @@ class TypeCheckExpr : public TypeCheckBase\n     // FIXME double_reference\n \n     infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       resolved_base->get_ref ());\n+\t\t\t\t       TyTy::TyCtx (resolved_base->get_ref ()));\n   }\n \n   void visit (HIR::DereferenceExpr &expr)"}, {"sha": "af58d602d1f88cdbc33c9da08c80ea65abb4a242", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -142,11 +142,11 @@ class TypeCheckType : public TypeCheckBase\n \treturn;\n       }\n \n-    std::vector<HirId> fields;\n+    std::vector<TyTy::TyCtx> fields;\n     for (auto &elem : tuple.get_elems ())\n       {\n \tauto field_ty = TypeCheckType::Resolve (elem.get ());\n-\tfields.push_back (field_ty->get_ref ());\n+\tfields.push_back (TyTy::TyCtx (field_ty->get_ref ()));\n       }\n \n     translated\n@@ -247,16 +247,16 @@ class TypeCheckType : public TypeCheckBase\n       }\n \n     TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n-    translated\n-      = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity, base);\n+    translated = new TyTy::ArrayType (type.get_mappings ().get_hirid (),\n+\t\t\t\t      capacity, TyTy::TyCtx (base->get_ref ()));\n   }\n \n   void visit (HIR::ReferenceType &type)\n   {\n     TyTy::BaseType *base\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n-\t\t\t\t\t  base->get_ref ());\n+\t\t\t\t\t  TyTy::TyCtx (base->get_ref ()));\n   }\n \n   void visit (HIR::InferredType &type)"}, {"sha": "0ea776962b5395b3dbf78a99907f1d3062f1a90c", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -566,7 +566,8 @@ class ArrayRules : public BaseRules\n   void visit (ArrayType &type) override\n   {\n     // check base type\n-    auto base_resolved = base->get_type ()->unify (type.get_type ());\n+    auto base_resolved\n+      = base->get_element_type ()->unify (type.get_element_type ());\n     if (base_resolved == nullptr)\n       {\n \tBaseRules::visit (type);\n@@ -582,8 +583,9 @@ class ArrayRules : public BaseRules\n \treturn;\n       }\n \n-    resolved = new ArrayType (type.get_ref (), type.get_ty_ref (),\n-\t\t\t      type.get_capacity (), base_resolved);\n+    resolved\n+      = new ArrayType (type.get_ref (), type.get_ty_ref (),\n+\t\t       type.get_capacity (), TyCtx (base_resolved->get_ref ()));\n   }\n \n private:\n@@ -758,15 +760,15 @@ class TupleRules : public BaseRules\n public:\n   TupleRules (TupleType *base) : BaseRules (base), base (base) {}\n \n-  void visit (TupleType &type)\n+  void visit (TupleType &type) override\n   {\n     if (base->num_fields () != type.num_fields ())\n       {\n \tBaseRules::visit (type);\n \treturn;\n       }\n \n-    std::vector<HirId> fields;\n+    std::vector<TyCtx> fields;\n     for (size_t i = 0; i < base->num_fields (); i++)\n       {\n \tBaseType *bo = base->get_field (i);\n@@ -779,7 +781,7 @@ class TupleRules : public BaseRules\n \t    return;\n \t  }\n \n-\tfields.push_back (unified_ty->get_ref ());\n+\tfields.push_back (TyCtx (unified_ty->get_ref ()));\n       }\n \n     resolved\n@@ -888,7 +890,7 @@ class ReferenceRules : public BaseRules\n       }\n \n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n-\t\t\t\t  base_resolved->get_ref ());\n+\t\t\t\t  TyCtx (base_resolved->get_ref ()));\n   }\n \n private:"}, {"sha": "82026799cb89df021608ba62136f4f1423f5d034", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -27,6 +27,25 @@\n namespace Rust {\n namespace TyTy {\n \n+TyCtx::TyCtx (HirId ref) : ref (ref)\n+{\n+  // ensure this reference is defined within the context\n+  auto context = Resolver::TypeCheckContext::get ();\n+  BaseType *lookup = nullptr;\n+  bool ok = context->lookup_type (ref, &lookup);\n+  rust_assert (ok);\n+}\n+\n+BaseType *\n+TyCtx::get_tyty () const\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+  BaseType *lookup = nullptr;\n+  bool ok = context->lookup_type (ref, &lookup);\n+  rust_assert (ok);\n+  return lookup;\n+}\n+\n void\n UnitType::accept_vis (TyVisitor &vis)\n {\n@@ -314,11 +333,7 @@ TupleType::as_string () const\n BaseType *\n TupleType::get_field (size_t index) const\n {\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (fields.at (index), &lookup);\n-  rust_assert (ok);\n-  return lookup;\n+  return fields.at (index).get_tyty ();\n }\n \n BaseType *\n@@ -435,8 +450,8 @@ ArrayType::accept_vis (TyVisitor &vis)\n std::string\n ArrayType::as_string () const\n {\n-  return \"[\" + get_type ()->as_string () + \":\" + std::to_string (capacity)\n-\t + \"]\";\n+  return \"[\" + get_element_type ()->as_string () + \":\"\n+\t + std::to_string (capacity) + \"]\";\n }\n \n BaseType *\n@@ -450,32 +465,29 @@ bool\n ArrayType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n-    {\n-      return false;\n-    }\n-  else\n-    {\n-      auto other2 = static_cast<const ArrayType &> (other);\n-      return get_type () == other2.get_type ()\n-\t     && get_capacity () == other2.get_capacity ();\n-    }\n+    return false;\n+\n+  auto other2 = static_cast<const ArrayType &> (other);\n+  if (get_capacity () != other2.get_capacity ())\n+    return false;\n+\n+  auto this_element_type = get_element_type ();\n+  auto other_element_type = other2.get_element_type ();\n+\n+  return this_element_type->is_equal (*other_element_type);\n }\n \n BaseType *\n-ArrayType::get_type () const\n+ArrayType::get_element_type () const\n {\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (element_type_id, &lookup);\n-  rust_assert (ok);\n-  return lookup;\n+  return element_type.get_tyty ();\n }\n \n BaseType *\n ArrayType::clone ()\n {\n   return new ArrayType (get_ref (), get_ty_ref (), get_capacity (),\n-\t\t\tget_type ()->clone (), get_combined_refs ());\n+\t\t\telement_type, get_combined_refs ());\n }\n \n void\n@@ -721,24 +733,10 @@ ReferenceType::is_equal (const BaseType &other) const\n   return get_base ()->is_equal (*other2.get_base ());\n }\n \n-const BaseType *\n-ReferenceType::get_base () const\n-{\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (base, &lookup);\n-  rust_assert (ok);\n-  return lookup;\n-}\n-\n BaseType *\n-ReferenceType::get_base ()\n+ReferenceType::get_base () const\n {\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (base, &lookup);\n-  rust_assert (ok);\n-  return lookup;\n+  return base.get_tyty ();\n }\n \n BaseType *"}, {"sha": "372cb7dae070a699be3d0b4c293f10089d88b912", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6212572b23ccaaf355ab8376d3f5affec334b797/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=6212572b23ccaaf355ab8376d3f5affec334b797", "patch": "@@ -115,6 +115,20 @@ class BaseType\n   Analysis::Mappings *mappings;\n };\n \n+// this is a placeholder for types that can change like inference variables\n+class TyCtx\n+{\n+public:\n+  explicit TyCtx (HirId ref);\n+\n+  HirId get_ref () const { return ref; }\n+\n+  BaseType *get_tyty () const;\n+\n+private:\n+  HirId ref;\n+};\n+\n class InferType : public BaseType\n {\n public:\n@@ -229,13 +243,12 @@ class StructFieldType\n class TupleType : public BaseType\n {\n public:\n-  TupleType (HirId ref, std::vector<HirId> fields,\n-\n+  TupleType (HirId ref, std::vector<TyCtx> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n-  TupleType (HirId ref, HirId ty_ref, std::vector<HirId> fields,\n+  TupleType (HirId ref, HirId ty_ref, std::vector<TyCtx> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n@@ -268,7 +281,7 @@ class TupleType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n private:\n-  std::vector<HirId> fields;\n+  std::vector<TyCtx> fields;\n };\n \n class ParamType : public BaseType\n@@ -551,16 +564,16 @@ class FnType : public BaseType\n class ArrayType : public BaseType\n {\n public:\n-  ArrayType (HirId ref, size_t capacity, BaseType *type,\n+  ArrayType (HirId ref, size_t capacity, TyCtx base,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ARRAY, refs), capacity (capacity),\n-      element_type_id (type->get_ref ())\n+      element_type (base)\n   {}\n \n-  ArrayType (HirId ref, HirId ty_ref, size_t capacity, BaseType *type,\n+  ArrayType (HirId ref, HirId ty_ref, size_t capacity, TyCtx base,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ARRAY, refs), capacity (capacity),\n-      element_type_id (type->get_ref ())\n+      element_type (base)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -575,15 +588,13 @@ class ArrayType : public BaseType\n \n   size_t get_capacity () const { return capacity; }\n \n-  HirId element_type_ref () const { return element_type_id; }\n-\n-  BaseType *get_type () const;\n+  BaseType *get_element_type () const;\n \n   BaseType *clone () final override;\n \n private:\n   size_t capacity;\n-  HirId element_type_id;\n+  TyCtx element_type;\n };\n \n class BoolType : public BaseType\n@@ -787,19 +798,17 @@ class CharType : public BaseType\n class ReferenceType : public BaseType\n {\n public:\n-  ReferenceType (HirId ref, HirId base,\n+  ReferenceType (HirId ref, TyCtx base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::REF), base (base)\n   {}\n \n-  ReferenceType (HirId ref, HirId ty_ref, HirId base,\n+  ReferenceType (HirId ref, HirId ty_ref, TyCtx base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n   {}\n \n-  const TyTy::BaseType *get_base () const;\n-\n-  TyTy::BaseType *get_base ();\n+  BaseType *get_base () const;\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -814,7 +823,7 @@ class ReferenceType : public BaseType\n   BaseType *clone () final override;\n \n private:\n-  HirId base;\n+  TyCtx base;\n };\n \n class StrType : public BaseType"}]}