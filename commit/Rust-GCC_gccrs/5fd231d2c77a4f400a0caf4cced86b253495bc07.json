{"sha": "5fd231d2c77a4f400a0caf4cced86b253495bc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkMjMxZDJjNzdhNGY0MDBhMGNhZjRjY2VkODZiMjUzNDk1YmMwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-02-07T01:02:31Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-02-07T01:02:31Z"}, "message": "gc_ext_config.h.in: Added GC_PTHREAD_SYM_VERSION.\n\n2006-02-06  Jakub Jelinek  <jakub@redhat.com>\n\t    Anthony Green  <green@redhat.com>\n\t    Tom Tromey  <tromey@redhat.com>\n\n\t* include/gc_ext_config.h.in: Added GC_PTHREAD_SYM_VERSION.\n\t* include/gc_config.h.in: Rebuilt.\n\t* include/gc_pthread_redirects.h (pthread_create): Conditionally\n\tdefine.\n\t* pthread_support.c (pthread_create_): New global.\n\t(constr): New function.\n\t(pthread_create): Conditionally renamed.\n\t* configure: Rebuilt.\n\t* configure.ac (GC_PTHREAD_SYM_VERSION): Define.\n\nCo-Authored-By: Anthony Green <green@redhat.com>\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r110682", "tree": {"sha": "743d9a439c476b1312d603f747bf02782d271c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743d9a439c476b1312d603f747bf02782d271c50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd231d2c77a4f400a0caf4cced86b253495bc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd231d2c77a4f400a0caf4cced86b253495bc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd231d2c77a4f400a0caf4cced86b253495bc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd231d2c77a4f400a0caf4cced86b253495bc07/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "003fe0b3e3cc8ade75c07a288084c58d6a1b0b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003fe0b3e3cc8ade75c07a288084c58d6a1b0b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003fe0b3e3cc8ade75c07a288084c58d6a1b0b4b"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "425b015952a276edc129c20f3f140a04d9229663", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -1,3 +1,17 @@\n+2006-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\t    Anthony Green  <green@redhat.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\n+\t* include/gc_ext_config.h.in: Added GC_PTHREAD_SYM_VERSION.\n+\t* include/gc_config.h.in: Rebuilt.\n+\t* include/gc_pthread_redirects.h (pthread_create): Conditionally\n+\tdefine.\n+\t* pthread_support.c (pthread_create_): New global.\n+\t(constr): New function.\n+\t(pthread_create): Conditionally renamed.\n+\t* configure: Rebuilt.\n+\t* configure.ac (GC_PTHREAD_SYM_VERSION): Define.\n+\n 2006-02-04  Alan Modra  <amodra@bigpond.net.au>\n \n \t* include/private/gc_locks.h (GC_test_and_set <POWERPC>): Don't"}, {"sha": "e0223dd7ea3cba3ee3ad2dcc555ff7a6d27460a3", "filename": "boehm-gc/configure", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -6627,6 +6627,29 @@ _ACEOF\n \n fi\n \n+symver=\n+case \"$target\" in\n+  *-*-linux* )\n+    cat > conftest.c <<EOF\n+#include <pthread.h>\n+void *tf (void *arg) { (void) arg; return NULL; }\n+int main (void) { pthread_t th; pthread_create (&th, NULL, tf, NULL); return 0; }\n+EOF\n+    if $CC $CFLAGS -pthread -o conftest conftest.c > /dev/null 2>&1; then\n+      symver=`readelf -s conftest 2> /dev/null | sed -n '/UND pthread_create@/{s/^.*@//;s/ .*$//;p;q}'`\n+    fi\n+    rm -f conftest conftest.c\n+    ;;\n+esac\n+if test -n \"$symver\"; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define GC_PTHREAD_SYM_VERSION \"$symver\"\n+_ACEOF\n+\n+fi\n+\n+\n if test -n \"$with_cross_host\" &&\n    test x\"$with_cross_host\" != x\"no\"; then\n   toolexecdir='$(exec_prefix)/$(target_noncanonical)'"}, {"sha": "2b9663dec20c3bfa7ade0a21af6ca8b938b11934", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -450,6 +450,25 @@ if test \"${gc_use_mmap}\" = \"yes\"; then\n   AC_DEFINE(USE_MMAP, 1, [use MMAP instead of sbrk to get new memory])\n fi\n \n+symver=\n+case \"$target\" in\n+  *-*-linux* )\n+    cat > conftest.c <<EOF\n+#include <pthread.h>\n+void *tf (void *arg) { (void) arg; return NULL; }\n+int main (void) { pthread_t th; pthread_create (&th, NULL, tf, NULL); return 0; }\n+EOF\n+    if $CC $CFLAGS -pthread -o conftest conftest.c > /dev/null 2>&1; then\n+      symver=`readelf -s conftest 2> /dev/null | sed -n '/UND pthread_create@/{s/^.*@//;s/ .*$//;p;q}'`\n+    fi\n+    rm -f conftest conftest.c\n+    ;;\n+esac\n+if test -n \"$symver\"; then\n+  AC_DEFINE_UNQUOTED(GC_PTHREAD_SYM_VERSION, \"$symver\", [symbol version of pthread_create])\n+fi\n+\n+\n if test -n \"$with_cross_host\" &&\n    test x\"$with_cross_host\" != x\"no\"; then\n   toolexecdir='$(exec_prefix)/$(target_noncanonical)'"}, {"sha": "cfaae9dd464519b362a07b1b4ad353aa7b054b91", "filename": "boehm-gc/include/gc_config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_config.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_config.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_config.h.in?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -45,6 +45,9 @@\n /* support for Tru64 pthreads */\n #undef GC_OSF1_THREADS\n \n+/* symbol version of pthread_create */\n+#undef GC_PTHREAD_SYM_VERSION\n+\n /* support for Solaris pthreads */\n #undef GC_SOLARIS_PTHREADS\n "}, {"sha": "716143dc62f5d57215796e0279c0e8969971e923", "filename": "boehm-gc/include/gc_ext_config.h.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_ext_config.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_ext_config.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_ext_config.h.in?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -3,3 +3,5 @@ external clients that do not want to include the full gc.h.  Currently this\n is used by libjava/include/boehm-gc.h. */\n \n #undef THREAD_LOCAL_ALLOC\n+\n+#undef GC_PTHREAD_SYM_VERSION"}, {"sha": "f9d4939affcd09da304d50f39302d8d318c85f0d", "filename": "boehm-gc/include/gc_pthread_redirects.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_pthread_redirects.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Finclude%2Fgc_pthread_redirects.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_pthread_redirects.h?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -68,7 +68,9 @@\n # undef pthread_detach\n #endif\n \n+#ifndef GC_PTHREAD_SYM_VERSION\n # define pthread_create GC_pthread_create\n+#endif\n # define pthread_join GC_pthread_join\n # define pthread_detach GC_pthread_detach\n "}, {"sha": "7c7bb0519b27f612152b1f728e7990558c788372", "filename": "boehm-gc/pthread_support.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fpthread_support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd231d2c77a4f400a0caf4cced86b253495bc07/boehm-gc%2Fpthread_support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fpthread_support.c?ref=5fd231d2c77a4f400a0caf4cced86b253495bc07", "patch": "@@ -47,6 +47,9 @@\n /*#define DEBUG_THREADS 1*/\n /*#define GC_ASSERTIONS*/\n \n+#define _GNU_SOURCE\n+#include <dlfcn.h>\n+\n # include \"gc.h\"\n # include \"private/pthread_support.h\"\n \n@@ -1193,8 +1196,37 @@ void * GC_start_routine(void * arg)\n     return(result);\n }\n \n+#ifdef GC_PTHREAD_SYM_VERSION\n+\n+/* Force constr to execute prior to main().  */\n+static void constr (void) __attribute__ ((constructor));\n+\n+static int\n+(*pthread_create_)(pthread_t *new_thread,\n+\t\t   const pthread_attr_t *attr_in,\n+\t\t   void * (*thread_execp)(void *), void *arg);\n+\n+static void\n+constr (void)\n+{\n+  /* Get a pointer to the real pthread_create.  */\n+  pthread_create_ = dlvsym (RTLD_NEXT, \"pthread_create\",\n+\t\t\t    GC_PTHREAD_SYM_VERSION);\n+}\n+\n+#define GC_PTHREAD_CREATE_NAME pthread_create\n+#define GC_PTHREAD_REAL_NAME (*pthread_create_)\n+\n+#else\n+\n+#define GC_PTHREAD_CREATE_NAME WRAP_FUNC(pthread_create)\n+#define GC_PTHREAD_REAL_NAME REAL_FUNC(pthread_create)\n+\n+#endif\n+\n+\n int\n-WRAP_FUNC(pthread_create)(pthread_t *new_thread,\n+GC_PTHREAD_CREATE_NAME(pthread_t *new_thread,\n \t\t  const pthread_attr_t *attr,\n                   void *(*start_routine)(void *), void *arg)\n {\n@@ -1255,7 +1287,7 @@ WRAP_FUNC(pthread_create)(pthread_t *new_thread,\n \t\t   pthread_self());\n #   endif\n \n-    result = REAL_FUNC(pthread_create)(new_thread, attr, GC_start_routine, si);\n+    result = GC_PTHREAD_REAL_NAME(new_thread, attr, GC_start_routine, si);\n \n #   ifdef DEBUG_THREADS\n         GC_printf1(\"Started thread 0x%X\\n\", *new_thread);"}]}