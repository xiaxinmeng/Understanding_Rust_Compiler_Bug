{"sha": "f9f770a8d56552aab041b8de6548858241a03f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmNzcwYThkNTY1NTJhYWIwNDFiOGRlNjU0ODg1ODI0MWEwM2Y1Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-11-11T12:05:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-11-11T12:05:16Z"}, "message": "tree.def (FIX_CEIL_EXPR, [...]): Remove unused tree codes.\n\n2006-11-11  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.def (FIX_CEIL_EXPR, FIX_FLOOR_EXPR, FIX_ROUND_EXPR):\n\tRemove unused tree codes.\n\t* tree-vrp.c (extract_range_from_unary_expr): Remove handling\n\tof FIX_CEIL_EXPR, FIX_FLOOR_EXPR and FIX_ROUND_EXPR.\n\t* tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n\t* tree.c (stabilize_reference): Likewise.\n\t* fold-const.c (fold_convert_const_int_from_real, operand_equal_p,\n\tfold_unary): Likewise.\n\t* tree-gimple.c (is_gimple_cast): Likewise.\n\t* dwarf2out.c (loc_descriptor_from_tree_1): Likewise.\n\t* expr.c (expand_expr_real_1): Likewise.\n\t* tree-eh.c (tree_could_trap_p): Likewise.\n\t* gimplify.c (gimplify_expr): Likewise.\n\t* tree-inline.c (estimate_num_insns_1): Likewise.\n\t* tree-cfg.c (verify_expr): Likewise.\n\n\tcp/\n\t* typeck.c (build_unary_op): Likewise.\n\n\tjava/\n\t* check-init.c (check_init): Likewise.\n\n\tada/\n\t* trans.c (maybe_stabilize_reference): Likewise.\n\n\tfortran/\n\t* trans-intrinsic.c (enum rounding_mode): New enum.\n\t(build_fix_expr, gfc_conv_intrinsic_aint, gfc_conv_intrinsic_mod,\n\tgfc_conv_intrinsic_function): Use it instead of FIX_CEIL_EXPR,\n\tFIX_FLOOR_EXPR, FIX_ROUND_EXPR and FIX_TRUNC_EXPR.\n\nFrom-SVN: r118692", "tree": {"sha": "cb723aeab3548d72f74efba74a23f935f9ce156c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb723aeab3548d72f74efba74a23f935f9ce156c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9f770a8d56552aab041b8de6548858241a03f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f770a8d56552aab041b8de6548858241a03f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f770a8d56552aab041b8de6548858241a03f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f770a8d56552aab041b8de6548858241a03f53/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e324a72fe6698293540634a6122578ab3d0f5f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e324a72fe6698293540634a6122578ab3d0f5f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e324a72fe6698293540634a6122578ab3d0f5f37"}], "stats": {"total": 152, "additions": 61, "deletions": 91}, "files": [{"sha": "653de70c8278a98f229b6cd97066c7850e016c61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1,3 +1,21 @@\n+2006-11-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.def (FIX_CEIL_EXPR, FIX_FLOOR_EXPR, FIX_ROUND_EXPR):\n+\tRemove unused tree codes.\n+\t* tree-vrp.c (extract_range_from_unary_expr): Remove handling\n+\tof FIX_CEIL_EXPR, FIX_FLOOR_EXPR and FIX_ROUND_EXPR.\n+\t* tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n+\t* tree.c (stabilize_reference): Likewise.\n+\t* fold-const.c (fold_convert_const_int_from_real, operand_equal_p,\n+\tfold_unary): Likewise.\n+\t* tree-gimple.c (is_gimple_cast): Likewise.\n+\t* dwarf2out.c (loc_descriptor_from_tree_1): Likewise.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* tree-eh.c (tree_could_trap_p): Likewise.\n+\t* gimplify.c (gimplify_expr): Likewise.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t* tree-cfg.c (verify_expr): Likewise.\n+\n 2006-11-11  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop.c (pass_loop_prefetch): Change name to aprefetch."}, {"sha": "cae53bb266b29421ec742b3cf684e27ccb296dc0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1,3 +1,8 @@\n+2006-11-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans.c (maybe_stabilize_reference): Remove handling of\n+\tFIX_CEIL_EXPR, FIX_FLOOR_EXPR and FIX_ROUND_EXPR.\n+\n 2006-11-05  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-osinte-linux-alpha.ads, s-osinte-linux-hppa.ads"}, {"sha": "873ad5f432c1ff016b21b8d602feabeeceaeb5b3", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -6033,9 +6033,6 @@ maybe_stabilize_reference (tree ref, bool force, bool lvalues_only,\n     case CONVERT_EXPR:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n-    case FIX_CEIL_EXPR:\n     case VIEW_CONVERT_EXPR:\n       result\n \t= build1 (code, type,"}, {"sha": "dc6a2663a9b0948296a8bbdb938668886b49f269", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1,3 +1,8 @@\n+2006-11-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* typeck.c (build_unary_op): Remove handling of FIX_CEIL_EXPR,\n+\tFIX_FLOOR_EXPR and FIX_ROUND_EXPR.\n+\n 2006-11-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* call.c (build_op_delete_call): Test user-visible type against"}, {"sha": "c257f00178e65230e6d78c8950bddb65086d978c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -4146,9 +4146,6 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  case CONVERT_EXPR:\n \t  case FLOAT_EXPR:\n \t  case FIX_TRUNC_EXPR:\n-\t  case FIX_FLOOR_EXPR:\n-\t  case FIX_ROUND_EXPR:\n-\t  case FIX_CEIL_EXPR:\n \t    {\n \t      tree incremented, modify, value, compound;\n \t      if (! lvalue_p (arg) && pedantic)\n@@ -4301,9 +4298,6 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \tcase CONVERT_EXPR:\n \tcase FLOAT_EXPR:\n \tcase FIX_TRUNC_EXPR:\n-\tcase FIX_FLOOR_EXPR:\n-\tcase FIX_ROUND_EXPR:\n-\tcase FIX_CEIL_EXPR:\n \t  if (! lvalue_p (arg) && pedantic)\n \t    pedwarn (\"ISO C++ forbids taking the address of a cast to a non-lvalue expression\");\n \t  break;"}, {"sha": "28108ece3ddbf80a6bd3bc13c3e6f0be998b2e1a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -9478,9 +9478,6 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n       break;\n \n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n       return 0;\n \n     default:"}, {"sha": "dc5f844614b9ae7a00b90f995a7941767d569c8c", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -8188,11 +8188,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t       subtarget, &op0, &op1, 0);\n       return expand_divmod (1, code, mode, op0, op1, target, unsignedp);\n \n-    case FIX_ROUND_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_CEIL_EXPR:\n-      gcc_unreachable ();\t\t\t/* Not used for C.  */\n-\n     case FIX_TRUNC_EXPR:\n       op0 = expand_normal (TREE_OPERAND (exp, 0));\n       if (target == 0 || modifier == EXPAND_STACK_PARM)"}, {"sha": "b715ad8072fce6a7713d84a0991b0b31bf9c8d07", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1860,18 +1860,6 @@ fold_convert_const_int_from_real (enum tree_code code, tree type, tree arg1)\n       real_trunc (&r, VOIDmode, &x);\n       break;\n \n-    case FIX_CEIL_EXPR:\n-      real_ceil (&r, VOIDmode, &x);\n-      break;\n-\n-    case FIX_FLOOR_EXPR:\n-      real_floor (&r, VOIDmode, &x);\n-      break;\n-\n-    case FIX_ROUND_EXPR:\n-      real_round (&r, VOIDmode, &x);\n-      break;\n-\n     default:\n       gcc_unreachable ();\n     }\n@@ -2610,10 +2598,7 @@ operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n         {\n         case NOP_EXPR:\n         case CONVERT_EXPR:\n-        case FIX_CEIL_EXPR:\n         case FIX_TRUNC_EXPR:\n-        case FIX_FLOOR_EXPR:\n-        case FIX_ROUND_EXPR:\n \t  if (TYPE_UNSIGNED (TREE_TYPE (arg0))\n \t      != TYPE_UNSIGNED (TREE_TYPE (arg1)))\n \t    return 0;\n@@ -7299,9 +7284,6 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     case FLOAT_EXPR:\n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n       if (TREE_TYPE (op0) == type)\n \treturn op0;\n       "}, {"sha": "66ee88e90edc99f0eab611c5da1cc665af7f381e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1,3 +1,10 @@\n+2006-11-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-intrinsic.c (enum rounding_mode): New enum.\n+\t(build_fix_expr, gfc_conv_intrinsic_aint, gfc_conv_intrinsic_mod,\n+\tgfc_conv_intrinsic_function): Use it instead of FIX_CEIL_EXPR,\n+\tFIX_FLOOR_EXPR, FIX_ROUND_EXPR and FIX_TRUNC_EXPR.\n+\n 2006-11-10  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* lang.opt (-fmodule-private): Remove option."}, {"sha": "ec857a5334848a244e4f20f608f33ddd5dedd8d4", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -160,6 +160,7 @@ typedef struct\n }\n real_compnt_info;\n \n+enum rounding_mode { RND_ROUND, RND_TRUNC, RND_CEIL, RND_FLOOR };\n \n /* Evaluate the arguments to an intrinsic function.  */\n \n@@ -307,23 +308,24 @@ build_round_expr (stmtblock_t * pblock, tree arg, tree type)\n \n static tree\n build_fix_expr (stmtblock_t * pblock, tree arg, tree type,\n-               enum tree_code op)\n+               enum rounding_mode op)\n {\n   switch (op)\n     {\n-    case FIX_FLOOR_EXPR:\n+    case RND_FLOOR:\n       return build_fixbound_expr (pblock, arg, type, 0);\n       break;\n \n-    case FIX_CEIL_EXPR:\n+    case RND_CEIL:\n       return build_fixbound_expr (pblock, arg, type, 1);\n       break;\n \n-    case FIX_ROUND_EXPR:\n+    case RND_ROUND:\n       return build_round_expr (pblock, arg, type);\n \n     default:\n-      return build1 (op, type, arg);\n+      gcc_assert (op == RND_TRUNC);\n+      return build1 (FIX_TRUNC_EXPR, type, arg);\n     }\n }\n \n@@ -338,7 +340,7 @@ build_fix_expr (stmtblock_t * pblock, tree arg, tree type,\n    */\n \n static void\n-gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n+gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n {\n   tree type;\n   tree itype;\n@@ -355,7 +357,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   /* We have builtin functions for some cases.  */\n   switch (op)\n     {\n-    case FIX_ROUND_EXPR:\n+    case RND_ROUND:\n       switch (kind)\n \t{\n \tcase 4:\n@@ -373,7 +375,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \t}\n       break;\n \n-    case FIX_TRUNC_EXPR:\n+    case RND_TRUNC:\n       switch (kind)\n \t{\n \tcase 4:\n@@ -437,7 +439,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n /* Convert to an integer using the specified rounding mode.  */\n \n static void\n-gfc_conv_intrinsic_int (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_int (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n {\n   tree type;\n   tree arg;\n@@ -1076,9 +1078,9 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n \n       itype = gfc_get_int_type (ikind);\n       if (modulo)\n-       tmp = build_fix_expr (&se->pre, tmp, itype, FIX_FLOOR_EXPR);\n+       tmp = build_fix_expr (&se->pre, tmp, itype, RND_FLOOR);\n       else\n-       tmp = build_fix_expr (&se->pre, tmp, itype, FIX_TRUNC_EXPR);\n+       tmp = build_fix_expr (&se->pre, tmp, itype, RND_TRUNC);\n       tmp = convert (type, tmp);\n       tmp = build3 (COND_EXPR, type, test2, tmp, arg);\n       tmp = build2 (MULT_EXPR, type, tmp, arg2);\n@@ -3474,15 +3476,15 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_AINT:\n-      gfc_conv_intrinsic_aint (se, expr, FIX_TRUNC_EXPR);\n+      gfc_conv_intrinsic_aint (se, expr, RND_TRUNC);\n       break;\n \n     case GFC_ISYM_ALL:\n       gfc_conv_intrinsic_anyall (se, expr, EQ_EXPR);\n       break;\n \n     case GFC_ISYM_ANINT:\n-      gfc_conv_intrinsic_aint (se, expr, FIX_ROUND_EXPR);\n+      gfc_conv_intrinsic_aint (se, expr, RND_ROUND);\n       break;\n \n     case GFC_ISYM_AND:\n@@ -3515,19 +3517,19 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_INT2:\n     case GFC_ISYM_INT8:\n     case GFC_ISYM_LONG:\n-      gfc_conv_intrinsic_int (se, expr, FIX_TRUNC_EXPR);\n+      gfc_conv_intrinsic_int (se, expr, RND_TRUNC);\n       break;\n \n     case GFC_ISYM_NINT:\n-      gfc_conv_intrinsic_int (se, expr, FIX_ROUND_EXPR);\n+      gfc_conv_intrinsic_int (se, expr, RND_ROUND);\n       break;\n \n     case GFC_ISYM_CEILING:\n-      gfc_conv_intrinsic_int (se, expr, FIX_CEIL_EXPR);\n+      gfc_conv_intrinsic_int (se, expr, RND_CEIL);\n       break;\n \n     case GFC_ISYM_FLOOR:\n-      gfc_conv_intrinsic_int (se, expr, FIX_FLOOR_EXPR);\n+      gfc_conv_intrinsic_int (se, expr, RND_FLOOR);\n       break;\n \n     case GFC_ISYM_MOD:"}, {"sha": "4e5d609bc595770565557d3b08c926b496731653", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -5489,9 +5489,6 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  /* FALLTHRU */\n \n \tcase FIX_TRUNC_EXPR:\n-\tcase FIX_CEIL_EXPR:\n-\tcase FIX_FLOOR_EXPR:\n-\tcase FIX_ROUND_EXPR:\n \t  /* unary_expr: ... | '(' cast ')' val | ...  */\n \t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n \t\t\t       is_gimple_val, fb_rvalue);"}, {"sha": "8bc6c35ec4d5dd766c8239ab7c2eb5cf40a53d77", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1,3 +1,8 @@\n+2006-11-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* check-init.c (check_init): Remove handling of FIX_CEIL_EXPR,\n+\tFIX_FLOOR_EXPR and FIX_ROUND_EXPR.\n+\n 2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n \n \t* decl.c: Include langhooks.h."}, {"sha": "4aca9926a817fd221742f8346f4c67952152d15b", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -814,9 +814,6 @@ check_init (tree exp, words before)\n     case ADDR_EXPR:\n     case NON_LVALUE_EXPR:\n     case INSTANCEOF_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n     case ABS_EXPR:\n       /* Avoid needless recursion. */\n       exp = TREE_OPERAND (exp, 0);"}, {"sha": "ab5a234b3bccb780d02406eb99ed22ffec7f4bbd", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -3329,9 +3329,6 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:"}, {"sha": "2a723b303b7025465676ab863a1aa03ca2af3b90", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1956,9 +1956,6 @@ tree_could_trap_p (tree expr)\n \n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n       /* Conversion of floating point might trap.  */\n       return honor_nans;\n "}, {"sha": "3dab75de74d49c450a7f2de045b7b8a5034ec058", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -409,10 +409,7 @@ is_gimple_cast (tree t)\n {\n   return (TREE_CODE (t) == NOP_EXPR\n \t  || TREE_CODE (t) == CONVERT_EXPR\n-          || TREE_CODE (t) == FIX_TRUNC_EXPR\n-          || TREE_CODE (t) == FIX_CEIL_EXPR\n-          || TREE_CODE (t) == FIX_FLOOR_EXPR\n-          || TREE_CODE (t) == FIX_ROUND_EXPR);\n+          || TREE_CODE (t) == FIX_TRUNC_EXPR);\n }\n \n /* Return true if T is a valid op0 of a CALL_EXPR.  */"}, {"sha": "8ce32db366b1020293785a0cbd33aec158f6ef81", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1700,9 +1700,6 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case MULT_EXPR:\n \n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n \n     case NEGATE_EXPR:\n     case FLOAT_EXPR:"}, {"sha": "c2a47f0c712bcba4961911acedac4c96a2e37567", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1324,9 +1324,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n     case FLOAT_EXPR:\n     case CONVERT_EXPR:\n     case NOP_EXPR:\n@@ -2236,9 +2233,6 @@ op_prio (tree op)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_CEIL_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n     case TARGET_EXPR:\n       return 14;\n "}, {"sha": "637263d041e4e86a3afdf0269dac13b62215ad47", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -1596,9 +1596,6 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n   /* Refuse to operate on certain unary expressions for which we\n      cannot easily determine a resulting range.  */\n   if (code == FIX_TRUNC_EXPR\n-      || code == FIX_CEIL_EXPR\n-      || code == FIX_FLOOR_EXPR\n-      || code == FIX_ROUND_EXPR\n       || code == FLOAT_EXPR\n       || code == BIT_NOT_EXPR\n       || code == NON_LVALUE_EXPR"}, {"sha": "92b25e35264182261f2daba8c59387adae8e4957", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -2599,9 +2599,6 @@ stabilize_reference (tree ref)\n     case CONVERT_EXPR:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-    case FIX_FLOOR_EXPR:\n-    case FIX_ROUND_EXPR:\n-    case FIX_CEIL_EXPR:\n       result = build_nt (code, stabilize_reference (TREE_OPERAND (ref, 0)));\n       break;\n "}, {"sha": "3c4068849e58b1b7207254cbc24ad14482ba53fe", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f770a8d56552aab041b8de6548858241a03f53/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=f9f770a8d56552aab041b8de6548858241a03f53", "patch": "@@ -634,15 +634,8 @@ DEFTREECODE (RDIV_EXPR, \"rdiv_expr\", tcc_binary, 2)\n    Used for pointer subtraction in C.  */\n DEFTREECODE (EXACT_DIV_EXPR, \"exact_div_expr\", tcc_binary, 2)\n \n-/* Conversion of real to fixed point: four ways to round,\n-   like the four ways to divide.\n-   CONVERT_EXPR can also be used to convert a real to an integer,\n-   and that is what is used in languages that do not have ways of\n-   specifying which of these is wanted.  Maybe these are not needed.  */\n+/* Conversion of real to fixed point by truncation.  */\n DEFTREECODE (FIX_TRUNC_EXPR, \"fix_trunc_expr\", tcc_unary, 1)\n-DEFTREECODE (FIX_CEIL_EXPR, \"fix_ceil_expr\", tcc_unary, 1)\n-DEFTREECODE (FIX_FLOOR_EXPR, \"fix_floor_expr\", tcc_unary, 1)\n-DEFTREECODE (FIX_ROUND_EXPR, \"fix_round_expr\", tcc_unary, 1)\n \n /* Conversion of an integer to a real.  */\n DEFTREECODE (FLOAT_EXPR, \"float_expr\", tcc_unary, 1)"}]}