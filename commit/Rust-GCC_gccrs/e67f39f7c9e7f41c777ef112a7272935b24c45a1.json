{"sha": "e67f39f7c9e7f41c777ef112a7272935b24c45a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3ZjM5ZjdjOWU3ZjQxYzc3N2VmMTEyYTcyNzI5MzViMjRjNDVhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-05T12:45:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-05T12:45:20Z"}, "message": "re PR tree-optimization/58137 ([trunk, ICE] full unroll + AVX2 vectorization)\n\n2013-09-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58137\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n\tDo not create vectors of pointers.\n\t* tree-vect-loop.c (get_initial_def_for_induction): Use proper\n\ttypes for the components of the vector initializer.\n\t* tree-cfg.c (verify_gimple_assign_binary): Remove special-casing\n\tallowing pointer vectors with PLUS_EXPR/MINUS_EXPR.\n\n\t* gcc.target/i386/pr58137.c: New testcase.\n\nFrom-SVN: r202282", "tree": {"sha": "7aff883a181fa99ca1a426dfe5c9cfb9bc761730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aff883a181fa99ca1a426dfe5c9cfb9bc761730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e67f39f7c9e7f41c777ef112a7272935b24c45a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67f39f7c9e7f41c777ef112a7272935b24c45a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67f39f7c9e7f41c777ef112a7272935b24c45a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67f39f7c9e7f41c777ef112a7272935b24c45a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "568cda29c5a4ffb086d8308745ae8b86427dab61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568cda29c5a4ffb086d8308745ae8b86427dab61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568cda29c5a4ffb086d8308745ae8b86427dab61"}], "stats": {"total": 98, "additions": 67, "deletions": 31}, "files": [{"sha": "7374a857309b942eb6d0476b8543effa066897a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -1,3 +1,13 @@\n+2013-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58137\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n+\tDo not create vectors of pointers.\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Use proper\n+\ttypes for the components of the vector initializer.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Remove special-casing\n+\tallowing pointer vectors with PLUS_EXPR/MINUS_EXPR.\n+\n 2013-09-05  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (remove_described_reference): Accept missing references,"}, {"sha": "d34ee5e7571ca584fd67c4dcdcf1eaa42aa67d46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -1,3 +1,8 @@\n+2013-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58137\n+\t* gcc.target/i386/pr58137.c: New testcase.\n+\n 2013-09-05  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/ipa/remref-1.C: New test."}, {"sha": "0a7daf83cd51d6d743ea3567abd0fd1c811ad713", "filename": "gcc/testsuite/gcc.target/i386/pr58137.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58137.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58137.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58137.c?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx2\" } */\n+\n+typedef unsigned int U32;\n+\n+struct sv {\n+  void* sv_any;\n+  U32 sv_refcnt;\n+  U32 sv_flags;\n+};\n+typedef struct sv SV;\n+\n+struct xrv {\n+  SV * xrv_rv;\n+};\n+typedef struct xrv XRV;\n+\n+extern XRV * PL_xrv_root;\n+\n+void\n+more_xrv (void)\n+{\n+  register XRV* xrv;\n+  register XRV* xrvend;\n+  xrv = PL_xrv_root;\n+  xrvend = &xrv[200 / sizeof (XRV) - 1];\n+  while (xrv < xrvend)\n+  {\n+    xrv->xrv_rv = (SV*)(xrv + 1);\n+    xrv++;\n+  }\n+  xrv->xrv_rv = 0;\n+}"}, {"sha": "c74b988593369076c927d549aca85f85d84a796e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -3571,34 +3571,24 @@ verify_gimple_assign_binary (gimple stmt)\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       {\n-\t/* We use regular PLUS_EXPR and MINUS_EXPR for vectors.\n-\t   ???  This just makes the checker happy and may not be what is\n-\t   intended.  */\n-\tif (TREE_CODE (lhs_type) == VECTOR_TYPE\n-\t    && POINTER_TYPE_P (TREE_TYPE (lhs_type)))\n+\ttree lhs_etype = lhs_type;\n+\ttree rhs1_etype = rhs1_type;\n+\ttree rhs2_etype = rhs2_type;\n+\tif (TREE_CODE (lhs_type) == VECTOR_TYPE)\n \t  {\n \t    if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n \t\t|| TREE_CODE (rhs2_type) != VECTOR_TYPE)\n \t      {\n \t\terror (\"invalid non-vector operands to vector valued plus\");\n \t\treturn true;\n \t      }\n-\t    lhs_type = TREE_TYPE (lhs_type);\n-\t    rhs1_type = TREE_TYPE (rhs1_type);\n-\t    rhs2_type = TREE_TYPE (rhs2_type);\n-\t    /* PLUS_EXPR is commutative, so we might end up canonicalizing\n-\t       the pointer to 2nd place.  */\n-\t    if (POINTER_TYPE_P (rhs2_type))\n-\t      {\n-\t\ttree tem = rhs1_type;\n-\t\trhs1_type = rhs2_type;\n-\t\trhs2_type = tem;\n-\t      }\n-\t    goto do_pointer_plus_expr_check;\n+\t    lhs_etype = TREE_TYPE (lhs_type);\n+\t    rhs1_etype = TREE_TYPE (rhs1_type);\n+\t    rhs2_etype = TREE_TYPE (rhs2_type);\n \t  }\n-\tif (POINTER_TYPE_P (lhs_type)\n-\t    || POINTER_TYPE_P (rhs1_type)\n-\t    || POINTER_TYPE_P (rhs2_type))\n+\tif (POINTER_TYPE_P (lhs_etype)\n+\t    || POINTER_TYPE_P (rhs1_etype)\n+\t    || POINTER_TYPE_P (rhs2_etype))\n \t  {\n \t    error (\"invalid (pointer) operands to plus/minus\");\n \t    return true;\n@@ -3610,7 +3600,6 @@ verify_gimple_assign_binary (gimple stmt)\n \n     case POINTER_PLUS_EXPR:\n       {\n-do_pointer_plus_expr_check:\n \tif (!POINTER_TYPE_P (rhs1_type)\n \t    || !useless_type_conversion_p (lhs_type, rhs1_type)\n \t    || !ptrofftype_p (rhs2_type))"}, {"sha": "9b4b189298424aa236c7c27d6f00c9da66e822ba", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -3133,7 +3133,6 @@ get_initial_def_for_induction (gimple iv_phi)\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (iv_phi);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  tree scalar_type;\n   tree vectype;\n   int nunits;\n   edge pe = loop_preheader_edge (loop);\n@@ -3185,8 +3184,7 @@ get_initial_def_for_induction (gimple iv_phi)\n   gcc_assert (ok);\n   pe = loop_preheader_edge (iv_loop);\n \n-  scalar_type = TREE_TYPE (init_expr);\n-  vectype = get_vectype_for_scalar_type (scalar_type);\n+  vectype = get_vectype_for_scalar_type (TREE_TYPE (init_expr));\n   resvectype = get_vectype_for_scalar_type (TREE_TYPE (PHI_RESULT (iv_phi)));\n   gcc_assert (vectype);\n   nunits = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -3229,8 +3227,11 @@ get_initial_def_for_induction (gimple iv_phi)\n \n       /* iv_loop is the loop to be vectorized. Create:\n \t vec_init = [X, X+S, X+2*S, X+3*S] (S = step_expr, X = init_expr)  */\n-      new_var = vect_get_new_vect_var (scalar_type, vect_scalar_var, \"var_\");\n-      new_name = force_gimple_operand (init_expr, &stmts, false, new_var);\n+      new_var = vect_get_new_vect_var (TREE_TYPE (vectype),\n+\t\t\t\t       vect_scalar_var, \"var_\");\n+      new_name = force_gimple_operand (fold_convert (TREE_TYPE (vectype),\n+\t\t\t\t\t\t     init_expr),\n+\t\t\t\t       &stmts, false, new_var);\n       if (stmts)\n \t{\n \t  new_bb = gsi_insert_seq_on_edge_immediate (pe, stmts);\n@@ -3243,9 +3244,8 @@ get_initial_def_for_induction (gimple iv_phi)\n       for (i = 1; i < nunits; i++)\n \t{\n \t  /* Create: new_name_i = new_name + step_expr  */\n-\t  enum tree_code code = POINTER_TYPE_P (scalar_type)\n-\t\t\t\t? POINTER_PLUS_EXPR : PLUS_EXPR;\n-\t  new_name = fold_build2 (code, scalar_type, new_name, step_expr);\n+\t  new_name = fold_build2 (PLUS_EXPR, TREE_TYPE (new_name),\n+\t\t\t\t  new_name, step_expr);\n \t  if (!is_gimple_min_invariant (new_name))\n \t    {\n \t      init_stmt = gimple_build_assign (new_var, new_name);"}, {"sha": "bc4ea1e3097e213c0c50829944ab9f513130a448", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e67f39f7c9e7f41c777ef112a7272935b24c45a1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e67f39f7c9e7f41c777ef112a7272935b24c45a1", "patch": "@@ -6203,8 +6203,7 @@ get_vectype_for_scalar_type_and_size (tree scalar_type, unsigned size)\n      corresponding to that mode.  The theory is that any use that\n      would cause problems with this will disable vectorization anyway.  */\n   else if (!SCALAR_FLOAT_TYPE_P (scalar_type)\n-\t   && !INTEGRAL_TYPE_P (scalar_type)\n-\t   && !POINTER_TYPE_P (scalar_type))\n+\t   && !INTEGRAL_TYPE_P (scalar_type))\n     scalar_type = lang_hooks.types.type_for_mode (inner_mode, 1);\n \n   /* We can't build a vector type of elements with alignment bigger than"}]}