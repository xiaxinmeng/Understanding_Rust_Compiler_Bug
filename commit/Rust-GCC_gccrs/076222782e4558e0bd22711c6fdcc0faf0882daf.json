{"sha": "076222782e4558e0bd22711c6fdcc0faf0882daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2MjIyNzgyZTQ1NThlMGJkMjI3MTFjNmZkY2MwZmFmMDg4MmRhZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-10-22T09:58:27Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-10-22T09:58:27Z"}, "message": "Come up with json::integer_number and use it in GCOV.\n\n2019-10-22  Martin Liska  <mliska@suse.cz>\n\n\t* diagnostic-format-json.cc (json_from_expanded_location):\n\tUse json::integer_number.\n\t* gcov.c (output_intermediate_json_line): Use new\n\tjson::integer_number.\n\t(output_json_intermediate_file): Likewise.\n\t* json.cc (number::print): Move to ...\n\t(float_number::print): ... this.\n\t(integer_number::print): New.\n\t(test_writing_numbers): Move to ...\n\t(test_writing_float_numbers): ... this.\n\t(test_writing_integer_numbers): New.\n\t(json_cc_tests): Register test_writing_integer_numbers.\n\t* json.h (class value): Add forward declaration\n\tfor float_number and integer_number.\n\t(enum kind): Add JSON_INTEGER and JSON_FLOAT.\n\t(class number): Move to ...\n\t(class float_number): ... this.\n\t(class integer_number): New.\n\t* optinfo-emit-json.cc (optrecord_json_writer::impl_location_to_json):\n\tUse json::integer_number.\n\t(optrecord_json_writer::location_to_json): Likewise.\n\t(optrecord_json_writer::profile_count_to_json): Likewise.\n\t(optrecord_json_writer::pass_to_json): Likewise.\n\nFrom-SVN: r277284", "tree": {"sha": "3cbd3dcafcbcaf3939736dfe771309b5915a6263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cbd3dcafcbcaf3939736dfe771309b5915a6263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076222782e4558e0bd22711c6fdcc0faf0882daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076222782e4558e0bd22711c6fdcc0faf0882daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076222782e4558e0bd22711c6fdcc0faf0882daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076222782e4558e0bd22711c6fdcc0faf0882daf/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc25649ccd251d9a6c2e27ac821276caaea986e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc25649ccd251d9a6c2e27ac821276caaea986e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc25649ccd251d9a6c2e27ac821276caaea986e4"}], "stats": {"total": 139, "additions": 107, "deletions": 32}, "files": [{"sha": "09f66d9dad9e5625054b90043767638c9d0b4582", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -1,3 +1,29 @@\n+2019-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* diagnostic-format-json.cc (json_from_expanded_location):\n+\tUse json::integer_number.\n+\t* gcov.c (output_intermediate_json_line): Use new\n+\tjson::integer_number.\n+\t(output_json_intermediate_file): Likewise.\n+\t* json.cc (number::print): Move to ...\n+\t(float_number::print): ... this.\n+\t(integer_number::print): New.\n+\t(test_writing_numbers): Move to ...\n+\t(test_writing_float_numbers): ... this.\n+\t(test_writing_integer_numbers): New.\n+\t(json_cc_tests): Register test_writing_integer_numbers.\n+\t* json.h (class value): Add forward declaration\n+\tfor float_number and integer_number.\n+\t(enum kind): Add JSON_INTEGER and JSON_FLOAT.\n+\t(class number): Move to ...\n+\t(class float_number): ... this.\n+\t(class integer_number): New.\n+\t* optinfo-emit-json.cc (optrecord_json_writer::impl_location_to_json):\n+\tUse json::integer_number.\n+\t(optrecord_json_writer::location_to_json): Likewise.\n+\t(optrecord_json_writer::profile_count_to_json): Likewise.\n+\t(optrecord_json_writer::pass_to_json): Likewise.\n+\n 2019-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vect_slp_bb_region): Check whether"}, {"sha": "6782ec9dffb039d12636b423dc448b897657ba71", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -48,8 +48,8 @@ json_from_expanded_location (location_t loc)\n   json::object *result = new json::object ();\n   if (exploc.file)\n     result->set (\"file\", new json::string (exploc.file));\n-  result->set (\"line\", new json::number (exploc.line));\n-  result->set (\"column\", new json::number (exploc.column));\n+  result->set (\"line\", new json::integer_number (exploc.line));\n+  result->set (\"column\", new json::integer_number (exploc.column));\n   return result;\n }\n "}, {"sha": "66eac9051ea7dd10c0963d1db52f15106f1c2265", "filename": "gcc/gcov.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -1061,10 +1061,10 @@ output_intermediate_json_line (json::array *object,\n     return;\n \n   json::object *lineo = new json::object ();\n-  lineo->set (\"line_number\", new json::number (line_num));\n+  lineo->set (\"line_number\", new json::integer_number (line_num));\n   if (function_name != NULL)\n     lineo->set (\"function_name\", new json::string (function_name));\n-  lineo->set (\"count\", new json::number (line->count));\n+  lineo->set (\"count\", new json::integer_number (line->count));\n   lineo->set (\"unexecuted_block\",\n \t      new json::literal (line->has_unexecuted_block));\n \n@@ -1079,7 +1079,7 @@ output_intermediate_json_line (json::array *object,\n \tif (!(*it)->is_unconditional && !(*it)->is_call_non_return)\n \t  {\n \t    json::object *branch = new json::object ();\n-\t    branch->set (\"count\", new json::number ((*it)->count));\n+\t    branch->set (\"count\", new json::integer_number ((*it)->count));\n \t    branch->set (\"throw\", new json::literal ((*it)->is_throw));\n \t    branch->set (\"fallthrough\",\n \t\t\t new json::literal ((*it)->fall_through));\n@@ -1138,16 +1138,19 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n       function->set (\"name\", new json::string ((*it)->m_name));\n       function->set (\"demangled_name\",\n \t\t     new json::string ((*it)->get_demangled_name ()));\n-      function->set (\"start_line\", new json::number ((*it)->start_line));\n-      function->set (\"start_column\", new json::number ((*it)->start_column));\n-      function->set (\"end_line\", new json::number ((*it)->end_line));\n-      function->set (\"end_column\", new json::number ((*it)->end_column));\n+      function->set (\"start_line\",\n+\t\t     new json::integer_number ((*it)->start_line));\n+      function->set (\"start_column\",\n+\t\t     new json::integer_number ((*it)->start_column));\n+      function->set (\"end_line\", new json::integer_number ((*it)->end_line));\n+      function->set (\"end_column\",\n+\t\t     new json::integer_number ((*it)->end_column));\n       function->set (\"blocks\",\n-\t\t     new json::number ((*it)->get_block_count ()));\n+\t\t     new json::integer_number ((*it)->get_block_count ()));\n       function->set (\"blocks_executed\",\n-\t\t     new json::number ((*it)->blocks_executed));\n+\t\t     new json::integer_number ((*it)->blocks_executed));\n       function->set (\"execution_count\",\n-\t\t     new json::number ((*it)->blocks[0].count));\n+\t\t     new json::integer_number ((*it)->blocks[0].count));\n \n       functions->append (function);\n     }"}, {"sha": "bec6fc53cc83d8d5df94fff06cef475169b3cff9", "filename": "gcc/json.cc", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -154,18 +154,31 @@ array::append (value *v)\n   m_elements.safe_push (v);\n }\n \n-/* class json::number, a subclass of json::value, wrapping a double.  */\n+/* class json::float_number, a subclass of json::value, wrapping a double.  */\n \n-/* Implementation of json::value::print for json::number.  */\n+/* Implementation of json::value::print for json::float_number.  */\n \n void\n-number::print (pretty_printer *pp) const\n+float_number::print (pretty_printer *pp) const\n {\n   char tmp[1024];\n   snprintf (tmp, sizeof (tmp), \"%g\", m_value);\n   pp_string (pp, tmp);\n }\n \n+/* class json::integer_number, a subclass of json::value, wrapping a long.  */\n+\n+/* Implementation of json::value::print for json::integer_number.  */\n+\n+void\n+integer_number::print (pretty_printer *pp) const\n+{\n+  char tmp[1024];\n+  snprintf (tmp, sizeof (tmp), \"%ld\", m_value);\n+  pp_string (pp, tmp);\n+}\n+\n+\n /* class json::string, a subclass of json::value.  */\n \n /* json::string's ctor.  */\n@@ -297,11 +310,22 @@ test_writing_arrays ()\n /* Verify that JSON numbers are written correctly.  */\n \n static void\n-test_writing_numbers ()\n+test_writing_float_numbers ()\n+{\n+  assert_print_eq (float_number (0), \"0\");\n+  assert_print_eq (float_number (42), \"42\");\n+  assert_print_eq (float_number (-100), \"-100\");\n+  assert_print_eq (float_number (123456789), \"1.23457e+08\");\n+}\n+\n+static void\n+test_writing_integer_numbers ()\n {\n-  assert_print_eq (number (0), \"0\");\n-  assert_print_eq (number (42), \"42\");\n-  assert_print_eq (number (-100), \"-100\");\n+  assert_print_eq (integer_number (0), \"0\");\n+  assert_print_eq (integer_number (42), \"42\");\n+  assert_print_eq (integer_number (-100), \"-100\");\n+  assert_print_eq (integer_number (123456789), \"123456789\");\n+  assert_print_eq (integer_number (-123456789), \"-123456789\");\n }\n \n /* Verify that JSON strings are written correctly.  */\n@@ -337,7 +361,8 @@ json_cc_tests ()\n   test_object_get ();\n   test_writing_objects ();\n   test_writing_arrays ();\n-  test_writing_numbers ();\n+  test_writing_float_numbers ();\n+  test_writing_integer_numbers ();\n   test_writing_strings ();\n   test_writing_literals ();\n }"}, {"sha": "316bc8b254c42f77b073f58d716d02a383ce9627", "filename": "gcc/json.h", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -39,7 +39,8 @@ namespace json\n class value;\n   class object;\n   class array;\n-  class number;\n+  class float_number;\n+  class integer_number;\n   class string;\n   class literal;\n \n@@ -53,8 +54,11 @@ enum kind\n   /* class json::array.  */\n   JSON_ARRAY,\n \n-  /* class json::number.  */\n-  JSON_NUMBER,\n+  /* class json::integer_number.  */\n+  JSON_INTEGER,\n+\n+  /* class json::float_number.  */\n+  JSON_FLOAT,\n \n   /* class json::string.  */\n   JSON_STRING,\n@@ -114,14 +118,14 @@ class array : public value\n   auto_vec<value *> m_elements;\n };\n \n-/* Subclass of value for numbers.  */\n+/* Subclass of value for floating-point numbers.  */\n \n-class number : public value\n+class float_number : public value\n {\n  public:\n-  number (double value) : m_value (value) {}\n+  float_number (double value) : m_value (value) {}\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_NUMBER; }\n+  enum kind get_kind () const FINAL OVERRIDE { return JSON_FLOAT; }\n   void print (pretty_printer *pp) const FINAL OVERRIDE;\n \n   double get () const { return m_value; }\n@@ -130,6 +134,23 @@ class number : public value\n   double m_value;\n };\n \n+/* Subclass of value for integer-valued numbers.  */\n+\n+class integer_number : public value\n+{\n+ public:\n+  integer_number (long value) : m_value (value) {}\n+\n+  enum kind get_kind () const FINAL OVERRIDE { return JSON_INTEGER; }\n+  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+\n+  long get () const { return m_value; }\n+\n+ private:\n+  long m_value;\n+};\n+\n+\n /* Subclass of value for strings.  */\n \n class string : public value"}, {"sha": "1ca4f148d15834b45244334988da812b944a5f73", "filename": "gcc/optinfo-emit-json.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Foptinfo-emit-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076222782e4558e0bd22711c6fdcc0faf0882daf/gcc%2Foptinfo-emit-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptinfo-emit-json.cc?ref=076222782e4558e0bd22711c6fdcc0faf0882daf", "patch": "@@ -181,7 +181,7 @@ optrecord_json_writer::impl_location_to_json (dump_impl_location_t loc)\n {\n   json::object *obj = new json::object ();\n   obj->set (\"file\", new json::string (loc.m_file));\n-  obj->set (\"line\", new json::number (loc.m_line));\n+  obj->set (\"line\", new json::integer_number (loc.m_line));\n   if (loc.m_function)\n     obj->set (\"function\", new json::string (loc.m_function));\n   return obj;\n@@ -196,8 +196,8 @@ optrecord_json_writer::location_to_json (location_t loc)\n   expanded_location exploc = expand_location (loc);\n   json::object *obj = new json::object ();\n   obj->set (\"file\", new json::string (exploc.file));\n-  obj->set (\"line\", new json::number (exploc.line));\n-  obj->set (\"column\", new json::number (exploc.column));\n+  obj->set (\"line\", new json::integer_number (exploc.line));\n+  obj->set (\"column\", new json::integer_number (exploc.column));\n   return obj;\n }\n \n@@ -207,7 +207,7 @@ json::object *\n optrecord_json_writer::profile_count_to_json (profile_count count)\n {\n   json::object *obj = new json::object ();\n-  obj->set (\"value\", new json::number (count.to_gcov_type ()));\n+  obj->set (\"value\", new json::integer_number (count.to_gcov_type ()));\n   obj->set (\"quality\",\n \t    new json::string (profile_quality_as_string (count.quality ())));\n   return obj;\n@@ -262,7 +262,7 @@ optrecord_json_writer::pass_to_json (opt_pass *pass)\n \t  && (pass->optinfo_flags & optgroup->value))\n \toptgroups->append (new json::string (optgroup->name));\n   }\n-  obj->set (\"num\", new json::number (pass->static_pass_number));\n+  obj->set (\"num\", new json::integer_number (pass->static_pass_number));\n   return obj;\n }\n "}]}