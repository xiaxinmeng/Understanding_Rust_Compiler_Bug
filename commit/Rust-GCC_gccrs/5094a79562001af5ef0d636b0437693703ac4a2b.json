{"sha": "5094a79562001af5ef0d636b0437693703ac4a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5NGE3OTU2MjAwMWFmNWVmMGQ2MzZiMDQzNzY5MzcwM2FjNGEyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-03-31T15:42:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-03-31T15:42:58Z"}, "message": "PR c++/38030, 38850, 39070\n\n        PR c++/38030, 38850, 39070\n        * pt.c (type_dependent_expression_p_push): New fn.\n        (tsubst_copy_and_build) [CALL_EXPR]: Only do arg-dep lookup when the\n        substitution makes the call non-dependent.  Preserve koenig_p.\n        * parser.c (cp_parser_postfix_expression): Only do arg-dep lookup\n        for non-dependent calls.\n        * semantics.c (finish_call_expr): Revert earlier changes.\n        * cp-tree.h: Revert change to finish_call_expr prototype.\n\nFrom-SVN: r145360", "tree": {"sha": "47283351c04c112dfc987416701a7716f3f42000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47283351c04c112dfc987416701a7716f3f42000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5094a79562001af5ef0d636b0437693703ac4a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5094a79562001af5ef0d636b0437693703ac4a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5094a79562001af5ef0d636b0437693703ac4a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5094a79562001af5ef0d636b0437693703ac4a2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60081874a02512aa6ed5958953f65d47aeff3325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60081874a02512aa6ed5958953f65d47aeff3325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60081874a02512aa6ed5958953f65d47aeff3325"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "66ac60edd4b59d73f34f430a09658e3e99cf47d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5094a79562001af5ef0d636b0437693703ac4a2b", "patch": "@@ -1,3 +1,14 @@\n+2009-03-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38030, 38850, 39070\n+\t* pt.c (type_dependent_expression_p_push): New fn.\n+\t(tsubst_copy_and_build) [CALL_EXPR]: Only do arg-dep lookup when the\n+\tsubstitution makes the call non-dependent.  Preserve koenig_p.\n+\t* parser.c (cp_parser_postfix_expression): Only do arg-dep lookup\n+\tfor non-dependent calls.\n+\t* semantics.c (finish_call_expr): Revert earlier changes.\n+\t* cp-tree.h: Revert change to finish_call_expr prototype.\n+\n 2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/34695"}, {"sha": "4fc86c38d1f3e3507813e7c997482670479c21dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5094a79562001af5ef0d636b0437693703ac4a2b", "patch": "@@ -4602,6 +4602,7 @@ extern bool dependent_template_p\t\t(tree);\n extern bool dependent_template_id_p\t\t(tree, tree);\n extern bool type_dependent_expression_p\t\t(tree);\n extern bool any_type_dependent_arguments_p      (const_tree);\n+extern bool type_dependent_expression_p_push\t(tree);\n extern bool value_dependent_expression_p\t(tree);\n extern bool any_value_dependent_elements_p      (const_tree);\n extern bool dependent_omp_for_p\t\t\t(tree, tree, tree, tree);\n@@ -4761,7 +4762,7 @@ extern tree finish_stmt_expr_expr\t\t(tree, tree);\n extern tree finish_stmt_expr\t\t\t(tree, bool);\n extern tree stmt_expr_value_expr\t\t(tree);\n extern tree perform_koenig_lookup\t\t(tree, tree);\n-extern tree finish_call_expr\t\t\t(tree, tree, bool, int, \n+extern tree finish_call_expr\t\t\t(tree, tree, bool, bool, \n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_increment_expr\t\t(tree, enum tree_code);\n extern tree finish_this_expr\t\t\t(void);"}, {"sha": "eacf5e91c88f43a0af366872cc88afefe5a29f47", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5094a79562001af5ef0d636b0437693703ac4a2b", "patch": "@@ -4738,8 +4738,9 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t    if (args)\n \t\t      {\n \t\t\tkoenig_p = true;\n-\t\t\tpostfix_expression\n-\t\t\t  = perform_koenig_lookup (postfix_expression, args);\n+\t\t\tif (!any_type_dependent_arguments_p (args))\n+\t\t\t  postfix_expression\n+\t\t\t    = perform_koenig_lookup (postfix_expression, args);\n \t\t      }\n \t\t    else\n \t\t      postfix_expression\n@@ -4761,8 +4762,9 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t    if (!DECL_FUNCTION_MEMBER_P (fn))\n \t\t      {\n \t\t\tkoenig_p = true;\n-\t\t\tpostfix_expression\n-\t\t\t  = perform_koenig_lookup (postfix_expression, args);\n+\t\t\tif (!any_type_dependent_arguments_p (args))\n+\t\t\t  postfix_expression\n+\t\t\t    = perform_koenig_lookup (postfix_expression, args);\n \t\t      }\n \t\t  }\n \t      }"}, {"sha": "c3873cd7ea346952ad55bd437fe413e6d9b2cdd7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5094a79562001af5ef0d636b0437693703ac4a2b", "patch": "@@ -11450,7 +11450,11 @@ tsubst_copy_and_build (tree t,\n \t\t    not appropriate, even if an unqualified-name was used\n \t\t    to denote the function.  */\n \t\t && !DECL_FUNCTION_MEMBER_P (get_first_fn (function)))\n-\t\t|| TREE_CODE (function) == IDENTIFIER_NODE))\n+\t\t|| TREE_CODE (function) == IDENTIFIER_NODE)\n+\t    /* Only do this when substitution turns a dependent call\n+\t       into a non-dependent call.  */\n+\t    && type_dependent_expression_p_push (t)\n+\t    && !any_type_dependent_arguments_p (call_args))\n \t  function = perform_koenig_lookup (function, call_args);\n \n \tif (TREE_CODE (function) == IDENTIFIER_NODE)\n@@ -11481,12 +11485,9 @@ tsubst_copy_and_build (tree t,\n \t\t       /*fn_p=*/NULL,\n \t\t       complain));\n \t  }\n-\t/* Pass -1 for koenig_p so that build_new_function_call will\n-\t   allow hidden friends found by arg-dependent lookup at template\n-\t   parsing time.  */\n \treturn finish_call_expr (function, call_args,\n \t\t\t\t /*disallow_virtual=*/qualified_p,\n-\t\t\t\t /*koenig_p*/-1,\n+\t\t\t\t koenig_p,\n \t\t\t\t complain);\n       }\n \n@@ -16454,6 +16455,19 @@ type_dependent_expression_p (tree expression)\n   return (dependent_type_p (TREE_TYPE (expression)));\n }\n \n+/* Like type_dependent_expression_p, but it also works while not processing\n+   a template definition, i.e. during substitution or mangling.  */\n+\n+bool\n+type_dependent_expression_p_push (tree expr)\n+{\n+  bool b;\n+  ++processing_template_decl;\n+  b = type_dependent_expression_p (expr);\n+  --processing_template_decl;\n+  return b;\n+}\n+\n /* Returns TRUE if ARGS (a TREE_LIST of arguments to a function call)\n    contains a type-dependent expression.  */\n "}, {"sha": "5357077504221877fbfcdb4cc3f40cd3b8b2a5e1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094a79562001af5ef0d636b0437693703ac4a2b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5094a79562001af5ef0d636b0437693703ac4a2b", "patch": "@@ -1836,14 +1836,10 @@ perform_koenig_lookup (tree fn, tree args)\n    qualified.  For example a call to `X::f' never generates a virtual\n    call.)\n \n-   KOENIG_P is 1 if we want to perform argument-dependent lookup,\n-   -1 if we don't, but we want to accept functions found by previous\n-   argument-dependent lookup, and 0 if we want nothing to do with it.\n-\n    Returns code for the call.  */\n \n tree\n-finish_call_expr (tree fn, tree args, bool disallow_virtual, int koenig_p,\n+finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p,\n \t\t  tsubst_flags_t complain)\n {\n   tree result;\n@@ -1866,7 +1862,7 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, int koenig_p,\n \t  || any_type_dependent_arguments_p (args))\n \t{\n \t  result = build_nt_call_list (fn, args);\n-\t  KOENIG_LOOKUP_P (result) = koenig_p > 0;\n+\t  KOENIG_LOOKUP_P (result) = koenig_p;\n \t  if (cfun)\n \t    {\n \t      do\n@@ -1956,7 +1952,7 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, int koenig_p,\n \n       if (!result)\n \t/* A call to a namespace-scope function.  */\n-\tresult = build_new_function_call (fn, args, koenig_p != 0, complain);\n+\tresult = build_new_function_call (fn, args, koenig_p, complain);\n     }\n   else if (TREE_CODE (fn) == PSEUDO_DTOR_EXPR)\n     {\n@@ -1982,9 +1978,7 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, int koenig_p,\n   if (processing_template_decl)\n     {\n       result = build_call_list (TREE_TYPE (result), orig_fn, orig_args);\n-      /* Don't repeat arg-dependent lookup at instantiation time if this call\n-         is not type-dependent.  */\n-      KOENIG_LOOKUP_P (result) = 0;\n+      KOENIG_LOOKUP_P (result) = koenig_p;\n     }\n   return result;\n }"}]}