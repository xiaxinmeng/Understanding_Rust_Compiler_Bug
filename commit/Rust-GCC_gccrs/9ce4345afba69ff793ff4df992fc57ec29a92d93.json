{"sha": "9ce4345afba69ff793ff4df992fc57ec29a92d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlNDM0NWFmYmE2OWZmNzkzZmY0ZGY5OTJmYzU3ZWMyOWE5MmQ5Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T21:46:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T21:46:52Z"}, "message": "Make vect_model_store_cost take a vec_load_store_type\n\nThis patch makes vect_model_store_cost take a vec_load_store_type\ninstead of a vect_def_type.  It's a wash on its own, but it helps\nwith later patches.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-vectorizer.h (vec_load_store_type): Moved from tree-vec-stmts.c\n\t(vect_model_store_cost): Take a vec_load_store_type instead of a\n\tvect_def_type.\n\t* tree-vect-stmts.c (vec_load_store_type): Move to tree-vectorizer.h.\n\t(vect_model_store_cost): Take a vec_load_store_type instead of a\n\tvect_def_type.\n\t(vectorizable_mask_load_store): Update accordingly.\n\t(vectorizable_store): Likewise.\n\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Update accordingly.\n\nFrom-SVN: r256211", "tree": {"sha": "b672fc54e997a7f148e43c35b67510461492bf21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b672fc54e997a7f148e43c35b67510461492bf21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce4345afba69ff793ff4df992fc57ec29a92d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce4345afba69ff793ff4df992fc57ec29a92d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce4345afba69ff793ff4df992fc57ec29a92d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce4345afba69ff793ff4df992fc57ec29a92d93/comments", "author": null, "committer": null, "parents": [{"sha": "e251d3ec013bc46d58470988fc45566051a9030b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e251d3ec013bc46d58470988fc45566051a9030b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e251d3ec013bc46d58470988fc45566051a9030b"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "be6d5e15ac453cabc1ee6505a1b83f07aea80290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce4345afba69ff793ff4df992fc57ec29a92d93", "patch": "@@ -1,3 +1,15 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-vectorizer.h (vec_load_store_type): Moved from tree-vec-stmts.c\n+\t(vect_model_store_cost): Take a vec_load_store_type instead of a\n+\tvect_def_type.\n+\t* tree-vect-stmts.c (vec_load_store_type): Move to tree-vectorizer.h.\n+\t(vect_model_store_cost): Take a vec_load_store_type instead of a\n+\tvect_def_type.\n+\t(vectorizable_mask_load_store): Update accordingly.\n+\t(vectorizable_store): Likewise.\n+\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Update accordingly.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-loop.c (vect_transform_loop): Stub out scalar"}, {"sha": "2a6d9244109c3db676e822c18b1fccef818f6488", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9ce4345afba69ff793ff4df992fc57ec29a92d93", "patch": "@@ -1736,7 +1736,7 @@ vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n \t   : VMAT_CONTIGUOUS);\n       if (DR_IS_WRITE (STMT_VINFO_DATA_REF (stmt_info)))\n \tvect_model_store_cost (stmt_info, ncopies_for_cost,\n-\t\t\t       memory_access_type, vect_uninitialized_def,\n+\t\t\t       memory_access_type, VLS_STORE,\n \t\t\t       node, prologue_cost_vec, body_cost_vec);\n       else\n \t{"}, {"sha": "cdca95acb507e6f230c3cb070881e4837df2aec3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9ce4345afba69ff793ff4df992fc57ec29a92d93", "patch": "@@ -54,14 +54,6 @@ along with GCC; see the file COPYING3.  If not see\n /* For lang_hooks.types.type_for_mode.  */\n #include \"langhooks.h\"\n \n-/* Says whether a statement is a load, a store of a vectorized statement\n-   result, or a store of an invariant value.  */\n-enum vec_load_store_type {\n-  VLS_LOAD,\n-  VLS_STORE,\n-  VLS_STORE_INVARIANT\n-};\n-\n /* Return the vectorized type for the given statement.  */\n \n tree\n@@ -908,7 +900,7 @@ vect_model_promotion_demotion_cost (stmt_vec_info stmt_info,\n void\n vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n \t\t       vect_memory_access_type memory_access_type,\n-\t\t       enum vect_def_type dt, slp_tree slp_node,\n+\t\t       vec_load_store_type vls_type, slp_tree slp_node,\n \t\t       stmt_vector_for_cost *prologue_cost_vec,\n \t\t       stmt_vector_for_cost *body_cost_vec)\n {\n@@ -917,7 +909,7 @@ vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n   gimple *first_stmt = STMT_VINFO_STMT (stmt_info);\n   bool grouped_access_p = STMT_VINFO_GROUPED_ACCESS (stmt_info);\n \n-  if (dt == vect_constant_def || dt == vect_external_def)\n+  if (vls_type == VLS_STORE_INVARIANT)\n     prologue_cost += record_stmt_cost (prologue_cost_vec, 1, scalar_to_vec,\n \t\t\t\t       stmt_info, 0, vect_prologue);\n \n@@ -2170,7 +2162,7 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t\t      NULL, NULL, NULL);\n       else\n \tvect_model_store_cost (stmt_info, ncopies, memory_access_type,\n-\t\t\t       dt, NULL, NULL, NULL);\n+\t\t\t       vls_type, NULL, NULL, NULL);\n       return true;\n     }\n   gcc_assert (memory_access_type == STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info));\n@@ -5820,8 +5812,8 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       STMT_VINFO_TYPE (stmt_info) = store_vec_info_type;\n       /* The SLP costs are calculated during SLP analysis.  */\n       if (!PURE_SLP_STMT (stmt_info))\n-\tvect_model_store_cost (stmt_info, ncopies, memory_access_type, dt,\n-\t\t\t       NULL, NULL, NULL);\n+\tvect_model_store_cost (stmt_info, ncopies, memory_access_type,\n+\t\t\t       vls_type, NULL, NULL, NULL);\n       return true;\n     }\n   gcc_assert (memory_access_type == STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info));"}, {"sha": "150b268afb1048dd7fa8e7db7076f636961d5244", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce4345afba69ff793ff4df992fc57ec29a92d93/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9ce4345afba69ff793ff4df992fc57ec29a92d93", "patch": "@@ -520,6 +520,14 @@ enum slp_vect_type {\n   hybrid\n };\n \n+/* Says whether a statement is a load, a store of a vectorized statement\n+   result, or a store of an invariant value.  */\n+enum vec_load_store_type {\n+  VLS_LOAD,\n+  VLS_STORE,\n+  VLS_STORE_INVARIANT\n+};\n+\n /* Describes how we're going to vectorize an individual load or store,\n    or a group of loads or stores.  */\n enum vect_memory_access_type {\n@@ -1220,7 +1228,7 @@ extern void vect_model_simple_cost (stmt_vec_info, int, enum vect_def_type *,\n \t\t\t\t    int, stmt_vector_for_cost *,\n \t\t\t\t    stmt_vector_for_cost *);\n extern void vect_model_store_cost (stmt_vec_info, int, vect_memory_access_type,\n-\t\t\t\t   enum vect_def_type, slp_tree,\n+\t\t\t\t   vec_load_store_type, slp_tree,\n \t\t\t\t   stmt_vector_for_cost *,\n \t\t\t\t   stmt_vector_for_cost *);\n extern void vect_model_load_cost (stmt_vec_info, int, vect_memory_access_type,"}]}