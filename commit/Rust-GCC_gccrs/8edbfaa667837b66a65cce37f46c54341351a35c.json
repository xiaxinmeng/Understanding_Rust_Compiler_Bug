{"sha": "8edbfaa667837b66a65cce37f46c54341351a35c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkYmZhYTY2NzgzN2I2NmE2NWNjZTM3ZjQ2YzU0MzQxMzUxYTM1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-28T18:16:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-28T18:16:32Z"}, "message": "re PR c++/60689 (Bogus error with atomic::exchange)\n\n\tPR c++/60689\n\t* c-tree.h (c_build_function_call_vec): New prototype.\n\t* c-typeck.c (build_function_call_vec): Don't call\n\tresolve_overloaded_builtin here.\n\t(c_build_function_call_vec): New wrapper function around\n\tbuild_function_call_vec.  Call resolve_overloaded_builtin here.\n\t(convert_lvalue_to_rvalue, build_function_call, build_atomic_assign):\n\tCall c_build_function_call_vec instead of build_function_call_vec.\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n\t* c-decl.c (finish_decl): Likewise.\n\n\t* c-common.c (add_atomic_size_parameter): When creating new\n\tparams vector, push the size argument first.\n\n\t* c-c++-common/pr60689.c: New test.\n\nFrom-SVN: r208912", "tree": {"sha": "5ac9b4bd348a0bf427859860b1c1400fc1d7d29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac9b4bd348a0bf427859860b1c1400fc1d7d29b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8edbfaa667837b66a65cce37f46c54341351a35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8edbfaa667837b66a65cce37f46c54341351a35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8edbfaa667837b66a65cce37f46c54341351a35c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8edbfaa667837b66a65cce37f46c54341351a35c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "250f4cf5b47c5701c19d8da57eba3da0c46c701c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -1,3 +1,9 @@\n+2014-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/60689\n+\t* c-common.c (add_atomic_size_parameter): When creating new\n+\tparams vector, push the size argument first.\n+\n 2014-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift,"}, {"sha": "03731b4b81f5864f1bea1cc55912e31927a17848", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -10453,6 +10453,7 @@ add_atomic_size_parameter (unsigned n, location_t loc, tree function,\n \n       len = params->length ();\n       vec_alloc (v, len + 1);\n+      v->quick_push (build_int_cst (size_type_node, n));\n       for (z = 0; z < len; z++)\n \tv->quick_push ((*params)[z]);\n       f = build_function_call_vec (loc, vNULL, function, v, NULL);"}, {"sha": "6b819e9964d24eab1725bb4629db4fff18e4f8c3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -1,3 +1,16 @@\n+2014-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/60689\n+\t* c-tree.h (c_build_function_call_vec): New prototype.\n+\t* c-typeck.c (build_function_call_vec): Don't call\n+\tresolve_overloaded_builtin here.\n+\t(c_build_function_call_vec): New wrapper function around\n+\tbuild_function_call_vec.  Call resolve_overloaded_builtin here.\n+\t(convert_lvalue_to_rvalue, build_function_call, build_atomic_assign):\n+\tCall c_build_function_call_vec instead of build_function_call_vec.\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Likewise.\n+\t* c-decl.c (finish_decl): Likewise.\n+\n 2014-03-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/55383"}, {"sha": "df84980e30900c50a5faf73bd2b25894025ace90", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -4568,8 +4568,8 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t  cleanup = build_unary_op (input_location, ADDR_EXPR, decl, 0);\n \t  vec_alloc (v, 1);\n \t  v->quick_push (cleanup);\n-\t  cleanup = build_function_call_vec (DECL_SOURCE_LOCATION (decl),\n-\t\t\t\t\t     vNULL, cleanup_decl, v, NULL);\n+\t  cleanup = c_build_function_call_vec (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t\t       vNULL, cleanup_decl, v, NULL);\n \t  vec_free (v);\n \n \t  /* Don't warn about decl unused; the cleanup uses it.  */"}, {"sha": "5653e49f4824f59c6d9f51608fb2ffa63090a254", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -7703,8 +7703,9 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t      expr.value, exprlist,\n \t\t\t\t\t      sizeof_arg,\n \t\t\t\t\t      sizeof_ptr_memacc_comptypes);\n-\t  expr.value = build_function_call_vec (expr_loc, arg_loc, expr.value,\n-\t\t\t\t\t\texprlist, origtypes);\n+\t  expr.value\n+\t    = c_build_function_call_vec (expr_loc, arg_loc, expr.value,\n+\t\t\t\t\t exprlist, origtypes);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) == INTEGER_CST\n \t      && TREE_CODE (orig_expr.value) == FUNCTION_DECL"}, {"sha": "85df8858dea398a05d64c33501ea306c4fff6746", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -643,6 +643,8 @@ extern tree c_finish_omp_clauses (tree);\n extern tree c_build_va_arg (location_t, tree, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n extern bool c_tree_equal (tree, tree);\n+extern tree c_build_function_call_vec (location_t, vec<location_t>, tree,\n+\t\t\t\t       vec<tree, va_gc> *, vec<tree, va_gc> *);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "65aad45651c9b29ecac7b217244b3f123c6d4558", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -2016,7 +2016,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       params->quick_push (expr_addr);\n       params->quick_push (tmp_addr);\n       params->quick_push (seq_cst);\n-      func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n+      func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n \n       /* EXPR is always read.  */\n       mark_exp_read (exp.value);\n@@ -2801,7 +2801,7 @@ build_function_call (location_t loc, tree function, tree params)\n   vec_alloc (v, list_length (params));\n   for (; params; params = TREE_CHAIN (params))\n     v->quick_push (TREE_VALUE (params));\n-  ret = build_function_call_vec (loc, vNULL, function, v, NULL);\n+  ret = c_build_function_call_vec (loc, vNULL, function, v, NULL);\n   vec_free (v);\n   return ret;\n }\n@@ -2840,14 +2840,6 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   /* Convert anything with function type to a pointer-to-function.  */\n   if (TREE_CODE (function) == FUNCTION_DECL)\n     {\n-      /* Implement type-directed function overloading for builtins.\n-\t resolve_overloaded_builtin and targetm.resolve_overloaded_builtin\n-\t handle all the type checking.  The result is a complete expression\n-\t that implements this function call.  */\n-      tem = resolve_overloaded_builtin (loc, function, params);\n-      if (tem)\n-\treturn tem;\n-\n       name = DECL_NAME (function);\n \n       if (flag_tm)\n@@ -2970,6 +2962,30 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n     }\n   return require_complete_type (result);\n }\n+\n+/* Like build_function_call_vec, but call also resolve_overloaded_builtin.  */\n+\n+tree\n+c_build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n+\t\t\t   tree function, vec<tree, va_gc> *params,\n+\t\t\t   vec<tree, va_gc> *origtypes)\n+{\n+  /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n+  STRIP_TYPE_NOPS (function);\n+\n+  /* Convert anything with function type to a pointer-to-function.  */\n+  if (TREE_CODE (function) == FUNCTION_DECL)\n+    {\n+      /* Implement type-directed function overloading for builtins.\n+\t resolve_overloaded_builtin and targetm.resolve_overloaded_builtin\n+\t handle all the type checking.  The result is a complete expression\n+\t that implements this function call.  */\n+      tree tem = resolve_overloaded_builtin (loc, function, params);\n+      if (tem)\n+\treturn tem;\n+    }\n+  return build_function_call_vec (loc, arg_loc, function, params, origtypes);\n+}\n \f\n /* Convert the argument expressions in the vector VALUES\n    to the types in the list TYPELIST.\n@@ -3634,7 +3650,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n       params->quick_push (lhs_addr);\n       params->quick_push (rhs);\n       params->quick_push (seq_cst);\n-      func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n+      func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n       add_stmt (func_call);\n \n       /* Finish the compound statement.  */\n@@ -3666,7 +3682,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   params->quick_push (lhs_addr);\n   params->quick_push (old_addr);\n   params->quick_push (seq_cst);\n-  func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n+  func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n   add_stmt (func_call);\n   params->truncate (0);\n \n@@ -3705,7 +3721,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   params->quick_push (integer_zero_node);\n   params->quick_push (seq_cst);\n   params->quick_push (seq_cst);\n-  func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n+  func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n \n   goto_stmt = build1 (GOTO_EXPR, void_type_node, done_decl);\n   SET_EXPR_LOCATION (goto_stmt, loc);"}, {"sha": "5b27941db2557323af53b6ade86899578e44b2a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -1,5 +1,8 @@\n 2014-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/60689\n+\t* c-c++-common/pr60689.c: New test.\n+\n \tPR c++/58678\n \t* g++.dg/abi/thunk6.C: Scan assembler for _ZTv0_n32_N1CD1Ev\n \tonly for lp64 targets and scan for _ZTv0_n16_N1CD1Ev for ilp32"}, {"sha": "9475bd835c6f579bb1502e95287587ec260f7fda", "filename": "gcc/testsuite/c-c++-common/pr60689.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60689.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8edbfaa667837b66a65cce37f46c54341351a35c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60689.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60689.c?ref=8edbfaa667837b66a65cce37f46c54341351a35c", "patch": "@@ -0,0 +1,10 @@\n+/* PR c++/60689 */\n+/* { dg-do compile } */\n+\n+struct S { char x[9]; };\n+\n+void\n+foo (struct S *x, struct S *y, struct S *z)\n+{\n+  __atomic_exchange (x, y, z, __ATOMIC_SEQ_CST);\n+}"}]}