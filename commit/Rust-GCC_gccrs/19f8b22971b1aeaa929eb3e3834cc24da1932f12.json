{"sha": "19f8b22971b1aeaa929eb3e3834cc24da1932f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlmOGIyMjk3MWIxYWVhYTkyOWViM2UzODM0Y2MyNGRhMTkzMmYxMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-09-03T00:52:11Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-09-03T00:52:11Z"}, "message": "use rtx_code_label more\n\ngcc/\n\n\t* asan.c, cfgexpand.c, config/alpha/alpha.md, config/arm/arm.c,\n\tconfig/epiphany/epiphany.md, config/h8300/h8300.c, config/i386/i386.md,\n\tconfig/m32r/m32r.c, config/mcore/mcore.md, config/mips/mips.c,\n\tconfig/mips/mips.md, config/nios2/nios2.c, config/pa/pa.c,\n\tconfig/s390/s390.c, config/s390/s390.md, config/sh/sh-mem.cc,\n\tconfig/sh/sh.c, config/sparc/sparc.c, dojump.c, function.c, optabs.c,\n\tstmt.c: Assign the result of gen_label_rtx to rtx_code_label * instead\n\tof rtx.\n\nFrom-SVN: r214841", "tree": {"sha": "e28f89f967e112a1f7b08b7f9ca06abd3d852eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e28f89f967e112a1f7b08b7f9ca06abd3d852eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19f8b22971b1aeaa929eb3e3834cc24da1932f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f8b22971b1aeaa929eb3e3834cc24da1932f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f8b22971b1aeaa929eb3e3834cc24da1932f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f8b22971b1aeaa929eb3e3834cc24da1932f12/comments", "author": null, "committer": null, "parents": [{"sha": "b20ee094dfddac8641eca9248998e89686f8ba38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20ee094dfddac8641eca9248998e89686f8ba38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20ee094dfddac8641eca9248998e89686f8ba38"}], "stats": {"total": 227, "additions": 120, "deletions": 107}, "files": [{"sha": "31440198c7e0e121fd592222092b1551b6c544e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -1,3 +1,14 @@\n+2014-09-02  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* asan.c, cfgexpand.c, config/alpha/alpha.md, config/arm/arm.c,\n+\tconfig/epiphany/epiphany.md, config/h8300/h8300.c, config/i386/i386.md,\n+\tconfig/m32r/m32r.c, config/mcore/mcore.md, config/mips/mips.c,\n+\tconfig/mips/mips.md, config/nios2/nios2.c, config/pa/pa.c,\n+\tconfig/s390/s390.c, config/s390/s390.md, config/sh/sh-mem.cc,\n+\tconfig/sh/sh.c, config/sparc/sparc.c, dojump.c, function.c, optabs.c,\n+\tstmt.c: Assign the result of gen_label_rtx to rtx_code_label * instead\n+\tof rtx.\n+\n 2014-09-02  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* alloc-pool.c: Include coretypes.h."}, {"sha": "cf5de275e13b64f26e2e9574208702a4e28ad17d", "filename": "gcc/asan.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -983,7 +983,8 @@ rtx_insn *\n asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n \t\t\t    HOST_WIDE_INT *offsets, tree *decls, int length)\n {\n-  rtx shadow_base, shadow_mem, ret, mem, orig_base, lab;\n+  rtx shadow_base, shadow_mem, ret, mem, orig_base;\n+  rtx_code_label *lab;\n   rtx_insn *insns;\n   char buf[30];\n   unsigned char shadow_bytes[4];\n@@ -1174,10 +1175,10 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n   /* Construct epilogue sequence.  */\n   start_sequence ();\n \n-  lab = NULL_RTX;  \n+  lab = NULL;\n   if (use_after_return_class != -1)\n     {\n-      rtx lab2 = gen_label_rtx ();\n+      rtx_code_label *lab2 = gen_label_rtx ();\n       char c = (char) ASAN_STACK_MAGIC_USE_AFTER_RET;\n       int very_likely = REG_BR_PROB_BASE - (REG_BR_PROB_BASE / 2000 - 1);\n       emit_cmp_and_jump_insns (orig_base, base, EQ, NULL_RTX,"}, {"sha": "7d11b1b5df7123573ece9359f032b97fe105cc42", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -2007,7 +2007,7 @@ label_rtx_for_bb (basic_block bb ATTRIBUTE_UNUSED)\n       return label_rtx (lab);\n     }\n \n-  rtx l = gen_label_rtx ();\n+  rtx_code_label *l = gen_label_rtx ();\n   lab_rtx_for_bb->put (bb, l);\n   return l;\n }\n@@ -2469,7 +2469,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n   enum machine_mode *inout_mode = XALLOCAVEC (enum machine_mode, noutputs);\n   const char **constraints = XALLOCAVEC (const char *, noutputs + ninputs);\n   int old_generating_concat_p = generating_concat_p;\n-  rtx fallthru_label = NULL_RTX;\n+  rtx_code_label *fallthru_label = NULL;\n \n   /* An ASM with no outputs needs to be treated as volatile, for now.  */\n   if (noutputs == 0)"}, {"sha": "8cf8a0625593cebaeec622adfff4a2230d5de367", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4907,8 +4907,8 @@\n     }\n   else\n     {\n-      rtx out_label = 0;\n-      rtx loop_label = gen_label_rtx ();\n+      rtx_code_label *out_label = 0;\n+      rtx_code_label *loop_label = gen_label_rtx ();\n       rtx want = gen_reg_rtx (Pmode);\n       rtx tmp = gen_reg_rtx (Pmode);\n       rtx memref, test;"}, {"sha": "9ffdb3d8ea15e15f6f43cf864cb7f4e8478950e5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -14490,7 +14490,7 @@ arm_block_move_unaligned_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n \t\t\t       unsigned int interleave_factor,\n \t\t\t       HOST_WIDE_INT bytes_per_iter)\n {\n-  rtx label, src_reg, dest_reg, final_src, test;\n+  rtx src_reg, dest_reg, final_src, test;\n   HOST_WIDE_INT leftover;\n   \n   leftover = length % bytes_per_iter;\n@@ -14506,7 +14506,7 @@ arm_block_move_unaligned_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n \t\t\t\t   0, 0, OPTAB_WIDEN);\n \n   /* Emit the start of the loop.  */\n-  label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   emit_label (label);\n   \n   /* Emit the loop body.  */\n@@ -16108,7 +16108,7 @@ struct minipool_fixup\n \n static Mnode *\tminipool_vector_head;\n static Mnode *\tminipool_vector_tail;\n-static rtx\tminipool_vector_label;\n+static rtx_code_label\t*minipool_vector_label;\n static int\tminipool_pad;\n \n /* The linked list of all minipool fixes required for this function.  */"}, {"sha": "1a2f5d3adfc90a4549de83d18c727a5fed338177", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -976,7 +976,7 @@\n       REAL_VALUE_TYPE offset;\n       rtx limit;\n       rtx tmp = gen_reg_rtx (SFmode);\n-      rtx label = gen_label_rtx ();\n+      rtx_code_label *label = gen_label_rtx ();\n       rtx bit31;\n       rtx cc1 = gen_rtx_REG (CC_FPmode, CCFP_REGNUM);\n       rtx cmp = gen_rtx_LT (VOIDmode, cc1, CONST0_RTX (SFmode));"}, {"sha": "45e469c1e8c80da7d99b2e12c689bc5e4fb852b1", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4979,8 +4979,8 @@ expand_a_rotate (rtx operands[])\n   if (GET_CODE (rotate_amount) != CONST_INT)\n     {\n       rtx counter = gen_reg_rtx (QImode);\n-      rtx start_label = gen_label_rtx ();\n-      rtx end_label = gen_label_rtx ();\n+      rtx_code_label *start_label = gen_label_rtx ();\n+      rtx_code_label *end_label = gen_label_rtx ();\n \n       /* If the rotate amount is less than or equal to 0,\n \t we go out of the loop.  */"}, {"sha": "d5588c80b2ac33771318cbcc04b00b2e411d4e6f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -9173,7 +9173,7 @@\n    (use (match_operand:QI 2 \"register_operand\"))]\n   \"\"\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   rtx tmp;\n \n   emit_insn (gen_testqi_ccz_1 (operands[2],\n@@ -9836,7 +9836,7 @@\n    (use (match_operand:QI 2 \"register_operand\"))]\n   \"\"\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   rtx tmp;\n \n   emit_insn (gen_testqi_ccz_1 (operands[2],\n@@ -13844,7 +13844,7 @@\n    (use (match_operand:XF 2 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\"\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n   rtx op2 = gen_reg_rtx (XFmode);\n@@ -13869,7 +13869,7 @@\n {\n   rtx (*gen_truncxf) (rtx, rtx);\n \n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n   rtx op2 = gen_reg_rtx (XFmode);\n@@ -13915,7 +13915,7 @@\n    (use (match_operand:XF 2 \"general_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\"\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n   rtx op2 = gen_reg_rtx (XFmode);\n@@ -13940,7 +13940,7 @@\n {\n   rtx (*gen_truncxf) (rtx, rtx);\n \n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n   rtx op2 = gen_reg_rtx (XFmode);\n@@ -16950,7 +16950,7 @@\n     {\n       rtx xops[3];\n       rtx picreg = gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n-      rtx label_rtx = gen_label_rtx ();\n+      rtx_code_label *label_rtx = gen_label_rtx ();\n       emit_insn (gen_set_got_labelled (pic_offset_table_rtx, label_rtx));\n       xops[0] = xops[1] = picreg;\n       xops[2] = machopic_gen_offset (gen_rtx_LABEL_REF (SImode, label_rtx));\n@@ -18532,7 +18532,7 @@\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_XBEGIN))]\n   \"TARGET_RTM\"\n {\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n \n   /* xbegin is emitted as jump_insn, so reload won't be able\n      to reload its operand.  Force the value into AX hard register.  */"}, {"sha": "bcd4309b44d14cb6df7a0d638543db5a198fd1d1", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -2539,7 +2539,7 @@ m32r_expand_block_move (rtx operands[])\n   /* If necessary, generate a loop to handle the bulk of the copy.  */\n   if (bytes)\n     {\n-      rtx label = NULL_RTX;\n+      rtx_code_label *label = NULL;\n       rtx final_src = NULL_RTX;\n       rtx at_a_time = GEN_INT (MAX_MOVE_BYTES);\n       rtx rounded_total = GEN_INT (bytes);"}, {"sha": "5b491367aa093c8d1be95e31682211cd89f1960e", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -3007,8 +3007,8 @@\n     }\n   else\n     {\n-      rtx out_label = 0;\n-      rtx loop_label = gen_label_rtx ();\n+      rtx_code_label *out_label = 0;\n+      rtx_code_label *loop_label = gen_label_rtx ();\n       rtx step = gen_reg_rtx (Pmode);\n       rtx tmp = gen_reg_rtx (Pmode);\n       rtx test, memref;"}, {"sha": "3e7749180c14c4d09318768a788bda291a8a387e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -7455,7 +7455,7 @@ mips_expand_synci_loop (rtx begin, rtx end)\n   length = mips_force_binary (Pmode, MINUS, end, begin);\n \n   /* Loop back to here.  */\n-  label = gen_label_rtx ();\n+    label = gen_label_rtx ();\n   emit_label (label);\n \n   emit_insn (gen_synci (begin));\n@@ -12465,7 +12465,7 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n \t\t\t\tconst char *branch_if_false)\n {\n   unsigned int length;\n-  rtx taken, not_taken;\n+  rtx taken;\n \n   gcc_assert (LABEL_P (operands[0]));\n \n@@ -12480,7 +12480,7 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n   /* Generate a reversed branch around a direct jump.  This fallback does\n      not use branch-likely instructions.  */\n   mips_branch_likely = false;\n-  not_taken = gen_label_rtx ();\n+  rtx_code_label *not_taken = gen_label_rtx ();\n   taken = operands[0];\n \n   /* Generate the reversed branch to NOT_TAKEN.  */\n@@ -16436,7 +16436,8 @@ mips16_split_long_branches (void)\n \t    && get_attr_length (insn) > 4\n \t    && (any_condjump_p (insn) || any_uncondjump_p (insn)))\n \t  {\n-\t    rtx old_label, new_label, temp, saved_temp;\n+\t    rtx old_label, temp, saved_temp;\n+\t    rtx_code_label *new_label;\n \t    rtx target;\n \t    rtx_insn *jump, *jump_sequence;\n \n@@ -16465,7 +16466,7 @@ mips16_split_long_branches (void)\n \n \t    if (simplejump_p (insn))\n \t      /* We're going to replace INSN with a longer form.  */\n-\t      new_label = NULL_RTX;\n+\t      new_label = NULL;\n \t    else\n \t      {\n \t\t/* Create a branch-around label for the original"}, {"sha": "d47bb784c12324bcba34c34dd6ec18167741d2bf", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -3729,8 +3729,8 @@\n   rtx reg1 = gen_reg_rtx (DFmode);\n   rtx reg2 = gen_reg_rtx (DFmode);\n   rtx reg3 = gen_reg_rtx (SImode);\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n+  rtx_code_label *label1 = gen_label_rtx ();\n+  rtx_code_label *label2 = gen_label_rtx ();\n   rtx test;\n   REAL_VALUE_TYPE offset;\n \n@@ -3775,8 +3775,8 @@\n   rtx reg1 = gen_reg_rtx (DFmode);\n   rtx reg2 = gen_reg_rtx (DFmode);\n   rtx reg3 = gen_reg_rtx (DImode);\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n+  rtx_code_label *label1 = gen_label_rtx ();\n+  rtx_code_label *label2 = gen_label_rtx ();\n   rtx test;\n   REAL_VALUE_TYPE offset;\n \n@@ -3818,8 +3818,8 @@\n   rtx reg1 = gen_reg_rtx (SFmode);\n   rtx reg2 = gen_reg_rtx (SFmode);\n   rtx reg3 = gen_reg_rtx (SImode);\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n+  rtx_code_label *label1 = gen_label_rtx ();\n+  rtx_code_label *label2 = gen_label_rtx ();\n   rtx test;\n   REAL_VALUE_TYPE offset;\n \n@@ -3861,8 +3861,8 @@\n   rtx reg1 = gen_reg_rtx (SFmode);\n   rtx reg2 = gen_reg_rtx (SFmode);\n   rtx reg3 = gen_reg_rtx (DImode);\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n+  rtx_code_label *label1 = gen_label_rtx ();\n+  rtx_code_label *label2 = gen_label_rtx ();\n   rtx test;\n   REAL_VALUE_TYPE offset;\n "}, {"sha": "1ab74f9774463e540b61d249536028a9c11310dd", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -1304,7 +1304,7 @@ nios2_emit_expensive_div (rtx *operands, enum machine_mode mode)\n {\n   rtx or_result, shift_left_result;\n   rtx lookup_value;\n-  rtx lab1, lab3;\n+  rtx_code_label *lab1, *lab3;\n   rtx insns;\n   rtx libfunc;\n   rtx final_result;"}, {"sha": "b6935217ff790d2403b288f4e45e979ba86e57af", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4445,7 +4445,7 @@ hppa_profile_hook (int label_no)\n      64-bit code to avoid having to provide DImode versions of the\n      lcla2 and load_offset_label_address insn patterns.  */\n   rtx reg = gen_reg_rtx (SImode);\n-  rtx label_rtx = gen_label_rtx ();\n+  rtx_code_label *label_rtx = gen_label_rtx ();\n   rtx begin_label_rtx, call_insn;\n   char begin_label_name[16];\n "}, {"sha": "6510dd9f1dfa9ee2afab14438d707797c47ce390", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4078,9 +4078,9 @@ s390_expand_movmem (rtx dst, rtx src, rtx len)\n   else\n     {\n       rtx dst_addr, src_addr, count, blocks, temp;\n-      rtx loop_start_label = gen_label_rtx ();\n-      rtx loop_end_label = gen_label_rtx ();\n-      rtx end_label = gen_label_rtx ();\n+      rtx_code_label *loop_start_label = gen_label_rtx ();\n+      rtx_code_label *loop_end_label = gen_label_rtx ();\n+      rtx_code_label *end_label = gen_label_rtx ();\n       enum machine_mode mode;\n \n       mode = GET_MODE (len);\n@@ -4203,9 +4203,9 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n   else\n     {\n       rtx dst_addr, count, blocks, temp, dstp1 = NULL_RTX;\n-      rtx loop_start_label = gen_label_rtx ();\n-      rtx loop_end_label = gen_label_rtx ();\n-      rtx end_label = gen_label_rtx ();\n+      rtx_code_label *loop_start_label = gen_label_rtx ();\n+      rtx_code_label *loop_end_label = gen_label_rtx ();\n+      rtx_code_label *end_label = gen_label_rtx ();\n       enum machine_mode mode;\n \n       mode = GET_MODE (len);\n@@ -4329,9 +4329,9 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n   else\n     {\n       rtx addr0, addr1, count, blocks, temp;\n-      rtx loop_start_label = gen_label_rtx ();\n-      rtx loop_end_label = gen_label_rtx ();\n-      rtx end_label = gen_label_rtx ();\n+      rtx_code_label *loop_start_label = gen_label_rtx ();\n+      rtx_code_label *loop_end_label = gen_label_rtx ();\n+      rtx_code_label *end_label = gen_label_rtx ();\n       enum machine_mode mode;\n \n       mode = GET_MODE (len);\n@@ -4886,7 +4886,7 @@ s390_expand_cs_hqi (enum machine_mode mode, rtx btarget, rtx vtarget, rtx mem,\n   struct alignment_context ac;\n   rtx cmpv, newv, val, cc, seq0, seq1, seq2, seq3;\n   rtx res = gen_reg_rtx (SImode);\n-  rtx csloop = NULL, csend = NULL;\n+  rtx_code_label *csloop = NULL, *csend = NULL;\n \n   gcc_assert (MEM_P (mem));\n \n@@ -4969,7 +4969,7 @@ s390_expand_atomic (enum machine_mode mode, enum rtx_code code,\n   rtx cmp;\n   rtx new_rtx = gen_reg_rtx (SImode);\n   rtx orig = gen_reg_rtx (SImode);\n-  rtx csloop = gen_label_rtx ();\n+  rtx_code_label *csloop = gen_label_rtx ();\n \n   gcc_assert (!target || register_operand (target, VOIDmode));\n   gcc_assert (MEM_P (mem));\n@@ -9903,7 +9903,7 @@ s390_expand_tbegin (rtx dest, rtx tdb, rtx retry, bool clobber_fprs_p)\n {\n   rtx retry_plus_two = gen_reg_rtx (SImode);\n   rtx retry_reg = gen_reg_rtx (SImode);\n-  rtx retry_label = NULL_RTX;\n+  rtx_code_label *retry_label = NULL;\n \n   if (retry != NULL_RTX)\n     {"}, {"sha": "dde529cc6841cf941a1b5a1d4c0feb98c99a61f8", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4124,8 +4124,8 @@\n {\n   if (!TARGET_Z196)\n     {\n-      rtx label1 = gen_label_rtx ();\n-      rtx label2 = gen_label_rtx ();\n+      rtx_code_label *label1 = gen_label_rtx ();\n+      rtx_code_label *label2 = gen_label_rtx ();\n       rtx temp = gen_reg_rtx (TDmode);\n       REAL_VALUE_TYPE cmp, sub;\n \n@@ -4163,8 +4163,8 @@\n {\n   if (!TARGET_Z196)\n     {\n-      rtx label1 = gen_label_rtx ();\n-      rtx label2 = gen_label_rtx ();\n+      rtx_code_label *label1 = gen_label_rtx ();\n+      rtx_code_label *label2 = gen_label_rtx ();\n       rtx temp = gen_reg_rtx (TDmode);\n       REAL_VALUE_TYPE cmp, sub;\n \n@@ -4202,8 +4202,8 @@\n {\n   if (!TARGET_Z196)\n     {\n-      rtx label1 = gen_label_rtx ();\n-      rtx label2 = gen_label_rtx ();\n+      rtx_code_label *label1 = gen_label_rtx ();\n+      rtx_code_label *label2 = gen_label_rtx ();\n       rtx temp = gen_reg_rtx (<BFP:MODE>mode);\n       REAL_VALUE_TYPE cmp, sub;\n \n@@ -6115,7 +6115,7 @@\n     {\n       if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n         {\n-          rtx label1 = gen_label_rtx ();\n+          rtx_code_label *label1 = gen_label_rtx ();\n \n \t  operands[1] = make_safe_from (operands[1], operands[0]);\n           emit_move_insn (operands[0], const0_rtx);\n@@ -6141,9 +6141,9 @@\n     }\n   else\n     {\n-      rtx label1 = gen_label_rtx ();\n-      rtx label2 = gen_label_rtx ();\n-      rtx label3 = gen_label_rtx ();\n+      rtx_code_label *label1 = gen_label_rtx ();\n+      rtx_code_label *label2 = gen_label_rtx ();\n+      rtx_code_label *label3 = gen_label_rtx ();\n \n       operands[1] = force_reg (SImode, operands[1]);\n       operands[1] = make_safe_from (operands[1], operands[0]);\n@@ -6201,7 +6201,7 @@\n     {\n       if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) <= 0)\n         {\n-          rtx label1 = gen_label_rtx ();\n+          rtx_code_label *label1 = gen_label_rtx ();\n \n           operands[1] = make_safe_from (operands[1], operands[0]);\n \t  emit_move_insn (operands[0], operands[1]);\n@@ -6228,9 +6228,9 @@\n     }\n   else\n     {\n-      rtx label1 = gen_label_rtx ();\n-      rtx label2 = gen_label_rtx ();\n-      rtx label3 = gen_label_rtx ();\n+      rtx_code_label *label1 = gen_label_rtx ();\n+      rtx_code_label *label2 = gen_label_rtx ();\n+      rtx_code_label *label3 = gen_label_rtx ();\n \n       operands[1] = force_reg (SImode, operands[1]);\n       operands[1] = make_safe_from (operands[1], operands[0]);"}, {"sha": "b6a5add9482932cbfd54cf6d01fb2dbe9db57f69", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -201,11 +201,11 @@ sh_expand_cmpstr (rtx *operands)\n   rtx tmp3 = gen_reg_rtx (SImode);\n \n   rtx jump;\n-  rtx L_return = gen_label_rtx ();\n-  rtx L_loop_byte = gen_label_rtx ();\n-  rtx L_end_loop_byte = gen_label_rtx ();\n-  rtx L_loop_long = gen_label_rtx ();\n-  rtx L_end_loop_long = gen_label_rtx ();\n+  rtx_code_label *L_return = gen_label_rtx ();\n+  rtx_code_label *L_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_end_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_loop_long = gen_label_rtx ();\n+  rtx_code_label *L_end_loop_long = gen_label_rtx ();\n \n   int align = INTVAL (operands[3]);\n \n@@ -328,9 +328,9 @@ sh_expand_cmpnstr (rtx *operands)\n   rtx tmp2 = gen_reg_rtx (SImode);\n \n   rtx jump;\n-  rtx L_return = gen_label_rtx ();\n-  rtx L_loop_byte = gen_label_rtx ();\n-  rtx L_end_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_return = gen_label_rtx ();\n+  rtx_code_label *L_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_end_loop_byte = gen_label_rtx ();\n \n   rtx len = force_reg (SImode, operands[3]);\n   int constp = CONST_INT_P (operands[3]);\n@@ -342,8 +342,8 @@ sh_expand_cmpnstr (rtx *operands)\n       rtx tmp3 = gen_reg_rtx (SImode);\n       rtx lenw = gen_reg_rtx (SImode);\n \n-      rtx L_loop_long = gen_label_rtx ();\n-      rtx L_end_loop_long = gen_label_rtx ();\n+      rtx_code_label *L_loop_long = gen_label_rtx ();\n+      rtx_code_label *L_end_loop_long = gen_label_rtx ();\n \n       int align = INTVAL (operands[4]);\n       int bytes = INTVAL (operands[3]);\n@@ -543,12 +543,12 @@ sh_expand_strlen (rtx *operands)\n   rtx start_addr = gen_reg_rtx (Pmode);\n   rtx tmp0 = gen_reg_rtx (SImode);\n   rtx tmp1 = gen_reg_rtx (SImode);\n-  rtx L_return = gen_label_rtx ();\n-  rtx L_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_return = gen_label_rtx ();\n+  rtx_code_label *L_loop_byte = gen_label_rtx ();\n \n   rtx jump;\n-  rtx L_loop_long = gen_label_rtx ();\n-  rtx L_end_loop_long = gen_label_rtx ();\n+  rtx_code_label *L_loop_long = gen_label_rtx ();\n+  rtx_code_label *L_end_loop_long = gen_label_rtx ();\n \n   int align = INTVAL (operands[3]);\n \n@@ -629,9 +629,9 @@ sh_expand_strlen (rtx *operands)\n void\n sh_expand_setmem (rtx *operands)\n {\n-  rtx L_loop_byte = gen_label_rtx ();\n-  rtx L_loop_word = gen_label_rtx ();\n-  rtx L_return = gen_label_rtx ();\n+  rtx_code_label *L_loop_byte = gen_label_rtx ();\n+  rtx_code_label *L_loop_word = gen_label_rtx ();\n+  rtx_code_label *L_return = gen_label_rtx ();\n   rtx jump;\n   rtx dest = copy_rtx (operands[0]);\n   rtx dest_addr = copy_addr_to_reg (XEXP (dest, 0));"}, {"sha": "de62f7a48c07eaf4a39bb5b5db4455236c9f2739", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -2652,7 +2652,7 @@ const char *\n output_far_jump (rtx_insn *insn, rtx op)\n {\n   struct { rtx lab, reg, op; } this_jmp;\n-  rtx braf_base_lab = NULL_RTX;\n+  rtx_code_label *braf_base_lab = NULL;\n   const char *jump;\n   int far;\n   int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n@@ -4944,7 +4944,7 @@ fixup_mova (rtx_insn *mova)\n   else\n     {\n       rtx_insn *worker = mova;\n-      rtx lab = gen_label_rtx ();\n+      rtx_code_label *lab = gen_label_rtx ();\n       rtx wpat, wpat0, wpat1, wsrc, target, base, diff;\n \n       do\n@@ -5739,7 +5739,7 @@ gen_far_branch (struct far_branch *bp)\n {\n   rtx insn = bp->insert_place;\n   rtx_insn *jump;\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   int ok;\n \n   emit_label_after (label, insn);\n@@ -6035,7 +6035,8 @@ sh_reorg (void)\n \n       for (insn = first; insn; insn = NEXT_INSN (insn))\n \t{\n-\t  rtx pattern, reg, set, dies, label;\n+\t  rtx pattern, reg, set, dies;\n+\t  rtx_code_label *label;\n \t  rtx_insn *link, *scan;\n \t  int rescan = 0, foundinsn = 0;\n "}, {"sha": "a913de0a39a2d439974fc1e29316710f78a36902", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -7265,7 +7265,7 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t     provided.  */\n \t  rtx ret_reg = gen_rtx_REG (Pmode, 31);\n \t  rtx scratch = gen_reg_rtx (SImode);\n-\t  rtx endlab = gen_label_rtx ();\n+\t  rtx_code_label *endlab = gen_label_rtx ();\n \n \t  /* Calculate the return object size */\n \t  tree size = TYPE_SIZE_UNIT (TREE_TYPE (fndecl));\n@@ -8053,12 +8053,12 @@ sparc_emit_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison)\n void\n sparc_emit_floatunsdi (rtx *operands, enum machine_mode mode)\n {\n-  rtx neglab, donelab, i0, i1, f0, in, out;\n+  rtx i0, i1, f0, in, out;\n \n   out = operands[0];\n   in = force_reg (DImode, operands[1]);\n-  neglab = gen_label_rtx ();\n-  donelab = gen_label_rtx ();\n+  rtx_code_label *neglab = gen_label_rtx ();\n+  rtx_code_label *donelab = gen_label_rtx ();\n   i0 = gen_reg_rtx (DImode);\n   i1 = gen_reg_rtx (DImode);\n   f0 = gen_reg_rtx (mode);\n@@ -8086,12 +8086,12 @@ sparc_emit_floatunsdi (rtx *operands, enum machine_mode mode)\n void\n sparc_emit_fixunsdi (rtx *operands, enum machine_mode mode)\n {\n-  rtx neglab, donelab, i0, i1, f0, in, out, limit;\n+  rtx i0, i1, f0, in, out, limit;\n \n   out = operands[0];\n   in = force_reg (mode, operands[1]);\n-  neglab = gen_label_rtx ();\n-  donelab = gen_label_rtx ();\n+  rtx_code_label *neglab = gen_label_rtx ();\n+  rtx_code_label *donelab = gen_label_rtx ();\n   i0 = gen_reg_rtx (DImode);\n   i1 = gen_reg_rtx (DImode);\n   limit = gen_reg_rtx (mode);\n@@ -11728,7 +11728,7 @@ sparc_expand_compare_and_swap_12 (rtx bool_result, rtx result, rtx mem,\n   rtx newvalue = gen_reg_rtx (SImode);\n   rtx res = gen_reg_rtx (SImode);\n   rtx resv = gen_reg_rtx (SImode);\n-  rtx memsi, val, mask, end_label, loop_label, cc;\n+  rtx memsi, val, mask, cc;\n \n   emit_insn (gen_rtx_SET (VOIDmode, addr,\n \t\t\t  gen_rtx_AND (Pmode, addr1, GEN_INT (-4))));\n@@ -11778,8 +11778,8 @@ sparc_expand_compare_and_swap_12 (rtx bool_result, rtx result, rtx mem,\n   emit_insn (gen_rtx_SET (VOIDmode, newv,\n \t\t\t  gen_rtx_AND (SImode, newv, mask)));\n \n-  end_label = gen_label_rtx ();\n-  loop_label = gen_label_rtx ();\n+  rtx_code_label *end_label = gen_label_rtx ();\n+  rtx_code_label *loop_label = gen_label_rtx ();\n   emit_label (loop_label);\n \n   emit_insn (gen_rtx_SET (VOIDmode, oldvalue,"}, {"sha": "18966208267036afc7bcfafa8c056f10419b1730", "filename": "gcc/dojump.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -204,7 +204,7 @@ do_jump_1 (enum tree_code code, tree op0, tree op1,\n \t   rtx if_false_label, rtx if_true_label, int prob)\n {\n   enum machine_mode mode;\n-  rtx drop_through_label = 0;\n+  rtx_code_label *drop_through_label = 0;\n \n   switch (code)\n     {\n@@ -426,7 +426,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label, int prob)\n   int i;\n   tree type;\n   enum machine_mode mode;\n-  rtx drop_through_label = 0;\n+  rtx_code_label *drop_through_label = 0;\n \n   switch (code)\n     {\n@@ -476,7 +476,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label, int prob)\n \n     case COND_EXPR:\n       {\n-\trtx label1 = gen_label_rtx ();\n+\trtx_code_label *label1 = gen_label_rtx ();\n \tif (!if_true_label || !if_false_label)\n \t  {\n \t    drop_through_label = gen_label_rtx ();\n@@ -941,7 +941,7 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \t\t\t rtx if_true_label, int prob)\n {\n   rtx tem;\n-  rtx dummy_label = NULL_RTX;\n+  rtx dummy_label = NULL;\n \n   /* Reverse the comparison if that is safe and we want to jump if it is\n      false.  Also convert to the reverse comparison if the target can"}, {"sha": "8b125ae015075746ed0cb63def540b6e604246df", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -4661,7 +4661,7 @@ void\n stack_protect_epilogue (void)\n {\n   tree guard_decl = targetm.stack_protect_guard ();\n-  rtx label = gen_label_rtx ();\n+  rtx_code_label *label = gen_label_rtx ();\n   rtx x, y, tmp;\n \n   x = expand_normal (crtl->stack_protect_guard);"}, {"sha": "605615d7458e794995dfd27d7fdf39e37baa910a", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -1034,7 +1034,6 @@ expand_doubleword_shift (enum machine_mode op1_mode, optab binoptab,\n \t\t\t unsigned HOST_WIDE_INT shift_mask)\n {\n   rtx superword_op1, tmp, cmp1, cmp2;\n-  rtx subword_label, done_label;\n   enum rtx_code cmp_code;\n \n   /* See if word-mode shifts by BITS_PER_WORD...BITS_PER_WORD * 2 - 1 will\n@@ -1119,8 +1118,8 @@ expand_doubleword_shift (enum machine_mode op1_mode, optab binoptab,\n #endif\n \n   /* As a last resort, use branches to select the correct alternative.  */\n-  subword_label = gen_label_rtx ();\n-  done_label = gen_label_rtx ();\n+  rtx_code_label *subword_label = gen_label_rtx ();\n+  rtx_code_label *done_label = gen_label_rtx ();\n \n   NO_DEFER_POP;\n   do_compare_rtx_and_jump (cmp1, cmp2, cmp_code, false, op1_mode,"}, {"sha": "6d4eed9613beb8353e535d7905fcbf8186249fe1", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f8b22971b1aeaa929eb3e3834cc24da1932f12/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=19f8b22971b1aeaa929eb3e3834cc24da1932f12", "patch": "@@ -127,7 +127,7 @@ label_rtx (tree label)\n \n   if (!DECL_RTL_SET_P (label))\n     {\n-      rtx r = gen_label_rtx ();\n+      rtx_code_label *r = gen_label_rtx ();\n       SET_DECL_RTL (label, r);\n       if (FORCED_LABEL (label) || DECL_NONLOCAL (label))\n \tLABEL_PRESERVE_P (r) = 1;\n@@ -971,7 +971,7 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n   struct case_node *n;\n   rtx *labelvec;\n   rtx fallback_label = label_rtx (case_list->code_label);\n-  rtx table_label = gen_label_rtx ();\n+  rtx_code_label *table_label = gen_label_rtx ();\n   bool has_gaps = false;\n   edge default_edge = stmt_bb ? EDGE_SUCC (stmt_bb, 0) : NULL;\n   int default_prob = default_edge ? default_edge->probability : 0;\n@@ -1331,7 +1331,7 @@ expand_sjlj_dispatch_table (rtx dispatch_index,\n       tree minval = build_int_cst (index_type, 0);\n       tree maxval = CASE_LOW (dispatch_table.last ());\n       tree range = maxval;\n-      rtx default_label = gen_label_rtx ();\n+      rtx_code_label *default_label = gen_label_rtx ();\n \n       for (int i = ncases - 1; i >= 0; --i)\n \t{"}]}