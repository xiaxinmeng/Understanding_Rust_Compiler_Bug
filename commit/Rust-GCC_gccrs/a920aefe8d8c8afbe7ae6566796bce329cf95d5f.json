{"sha": "a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyMGFlZmU4ZDhjOGFmYmU3YWU2NTY2Nzk2YmNlMzI5Y2Y5NWQ1Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-14T13:39:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-14T13:39:55Z"}, "message": "fr30.h: Fix comment typos.\n\n\t* config/fr30/fr30.h: Fix comment typos.\n\t* config/frv/frv.c: Likewise.\n\t* config/i386/xmmintrin.h: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\nFrom-SVN: r57144", "tree": {"sha": "52eaf2dc515b68ce54c666cb0caf4ba49f6b521d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52eaf2dc515b68ce54c666cb0caf4ba49f6b521d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/comments", "author": null, "committer": null, "parents": [{"sha": "88cad84baf99c032409c2de03f151c4ccf771fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cad84baf99c032409c2de03f151c4ccf771fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cad84baf99c032409c2de03f151c4ccf771fbf"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "57a8aa4203f8dd72f42b87fa8305f7da55db10c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -1,3 +1,11 @@\n+2002-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/fr30/fr30.h: Fix comment typos.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/i386/xmmintrin.h: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\n 2002-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* haifa-sched.c: Follow spelling conventions."}, {"sha": "da65aae92fc56f95729b65244cf3f9c6569a2aef", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -992,7 +992,7 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    \n    * indexed addressing using small signed offsets from the frame pointer\n \n-   * register plus register addresing using R13 as the base register.\n+   * register plus register addressing using R13 as the base register.\n \n    At the moment we only support the first two of these special cases.  */\n    "}, {"sha": "0fcf53e7215691a79d8c6f013c151f57e660d16e", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -3552,7 +3552,7 @@ frv_legitimize_address (x, oldx, mode)\n {\n   rtx ret = NULL_RTX;\n \n-  /* Don't try to legitimize addreses if we are not optimizing, since the\n+  /* Don't try to legitimize addresses if we are not optimizing, since the\n      address we generate is not a general operand, and will horribly mess\n      things up when force_reg is called to try and put it in a register because\n      we aren't optimizing.  */"}, {"sha": "9442e963ae922f12ab24934b80b4585b46c0c2ab", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -871,7 +871,7 @@ _mm_storeu_ps (float *__P, __m128 __A)\n   __builtin_ia32_storeups (__P, (__v4sf)__A);\n }\n \n-/* Store four SPFP values in reverse order.  The addres must be aligned.  */\n+/* Store four SPFP values in reverse order.  The address must be aligned.  */\n static __inline void\n _mm_storer_ps (float *__P, __m128 __A)\n {"}, {"sha": "192c60b4f3d0fc4db944e53067a0bca8ee61fb08", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -8092,7 +8092,7 @@ mips_select_section (decl, reloc, align)\n    precisely correct.\n \n    When not mips16 code nor embedded PIC, if a symbol is in a\n-   gp addresable section, SYMBOL_REF_FLAG is set prevent gcc from\n+   gp addressable section, SYMBOL_REF_FLAG is set prevent gcc from\n    splitting the reference so that gas can generate a gp relative\n    reference.\n "}, {"sha": "3dd110621054453d624619102b7650641401c6a1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a920aefe8d8c8afbe7ae6566796bce329cf95d5f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a920aefe8d8c8afbe7ae6566796bce329cf95d5f", "patch": "@@ -3862,7 +3862,7 @@ machine_dependent_reorg (first)\n   split_branches (first);\n \n   /* The INSN_REFERENCES_ARE_DELAYED in sh.h is problematic because it\n-     also has an effect on the register that holds the addres of the sfunc.\n+     also has an effect on the register that holds the address of the sfunc.\n      Insert an extra dummy insn in front of each sfunc that pretends to\n      use this register.  */\n   if (flag_delayed_branch)"}]}