{"sha": "3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5YzczM2ViMTljMWZhMDdmMGFkZWNjMDgzYTRjMmEwNTNmZDkwMw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-02T17:57:54Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-02T17:57:54Z"}, "message": "tree-flow.h: Remove some prototypes.\n\n\n\t* tree-flow.h: Remove some prototypes.\n\t* tree-ssa-dce.c (mark_virtual_operand_for_renaming,\n\tmark_virtual_phi_result_for_renaming): Move to tree-into-ssa.c.\n\t* tree-into-ssa.c (mark_virtual_operand_for_renaming,\n\tmark_virtual_phi_result_for_renaming): Relocate here.\n\t* tree-into-ssa.h: Add prototypes.\n\t* tree-ssa-phiopt.c: (tree_ssa_phiopt_worker) Use \n\tsingle_pred_before_succ_order.\n\t(blocks_in_phiopt_order): Rename and move to cfganal.c.\n\t(nonfreeing_call_p) Move to gimple.c.\n\t* cfganal.c (single_pred_before_succ_order): Move and renamed from\n\ttree-ssa-phiopt.c.\n\t* basic-block.h (single_pred_before_succ_order): Add prototype.\n\t* gimple.c (nonfreeing_call_p): Relocate here.\n\t* gimple.h: Add prototype.\n\t* tree-ssa-ifcombine.c: Include tree-ssa-phiopt.h.\n\t* tree-ssa-dom.h: New file.  Relocate prototypes here.\n\t* tree-ssa.h: Include tree-ssa-dom.h.\n\nFrom-SVN: r203122", "tree": {"sha": "4e565c339cd910e920e36af879ee13b02dd89c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e565c339cd910e920e36af879ee13b02dd89c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/comments", "author": null, "committer": null, "parents": [{"sha": "cc1a9ac808c9f04cb0deeff138b5da114f113c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1a9ac808c9f04cb0deeff138b5da114f113c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1a9ac808c9f04cb0deeff138b5da114f113c76"}], "stats": {"total": 307, "additions": 173, "deletions": 134}, "files": [{"sha": "a64f5fc8d472828935ac4e16d29107db294876a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -1,3 +1,24 @@\n+2013-10-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-flow.h: Remove some prototypes.\n+\t* tree-ssa-dce.c (mark_virtual_operand_for_renaming,\n+\tmark_virtual_phi_result_for_renaming): Move to tree-into-ssa.c.\n+\t* tree-into-ssa.c (mark_virtual_operand_for_renaming,\n+\tmark_virtual_phi_result_for_renaming): Relocate here.\n+\t* tree-into-ssa.h: Add prototypes.\n+\t* tree-ssa-phiopt.c: (tree_ssa_phiopt_worker) Use \n+\tsingle_pred_before_succ_order.\n+\t(blocks_in_phiopt_order): Rename and move to cfganal.c.\n+\t(nonfreeing_call_p) Move to gimple.c.\n+\t* cfganal.c (single_pred_before_succ_order): Move and renamed from\n+\ttree-ssa-phiopt.c.\n+\t* basic-block.h (single_pred_before_succ_order): Add prototype.\n+\t* gimple.c (nonfreeing_call_p): Relocate here.\n+\t* gimple.h: Add prototype.\n+\t* tree-ssa-ifcombine.c: Include tree-ssa-phiopt.h.\n+\t* tree-ssa-dom.h: New file.  Relocate prototypes here.\n+\t* tree-ssa.h: Include tree-ssa-dom.h.\n+\n 2013-10-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/x-i386 (driver-i386.o): Remove header dependencies."}, {"sha": "f51de82f6c206adca87525fa9262d612e345bf2b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -803,6 +803,7 @@ extern int dfs_enumerate_from (basic_block, int,\n \t\t\t       basic_block *, int, const void *);\n extern void compute_dominance_frontiers (struct bitmap_head_def *);\n extern bitmap compute_idf (bitmap, struct bitmap_head_def *);\n+extern basic_block * single_pred_before_succ_order (void);\n \n /* In cfgrtl.c  */\n extern rtx block_label (basic_block);"}, {"sha": "762eea4ca04906dfdc189bea8c158f51ca0179d4", "filename": "gcc/cfganal.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -1465,3 +1465,56 @@ bitmap_union_of_preds (sbitmap dst, sbitmap *src, basic_block b)\n \t  *r++ |= *p++;\n       }\n }\n+\n+/* Returns the list of basic blocks in the function in an order that guarantees\n+   that if a block X has just a single predecessor Y, then Y is after X in the\n+   ordering.  */\n+\n+basic_block *\n+single_pred_before_succ_order (void)\n+{\n+  basic_block x, y;\n+  basic_block *order = XNEWVEC (basic_block, n_basic_blocks);\n+  unsigned n = n_basic_blocks - NUM_FIXED_BLOCKS;\n+  unsigned np, i;\n+  sbitmap visited = sbitmap_alloc (last_basic_block);\n+\n+#define MARK_VISITED(BB) (bitmap_set_bit (visited, (BB)->index))\n+#define VISITED_P(BB) (bitmap_bit_p (visited, (BB)->index))\n+\n+  bitmap_clear (visited);\n+\n+  MARK_VISITED (ENTRY_BLOCK_PTR);\n+  FOR_EACH_BB (x)\n+    {\n+      if (VISITED_P (x))\n+\tcontinue;\n+\n+      /* Walk the predecessors of x as long as they have precisely one\n+\t predecessor and add them to the list, so that they get stored\n+\t after x.  */\n+      for (y = x, np = 1;\n+\t   single_pred_p (y) && !VISITED_P (single_pred (y));\n+\t   y = single_pred (y))\n+\tnp++;\n+      for (y = x, i = n - np;\n+\t   single_pred_p (y) && !VISITED_P (single_pred (y));\n+\t   y = single_pred (y), i++)\n+\t{\n+\t  order[i] = y;\n+\t  MARK_VISITED (y);\n+\t}\n+      order[i] = y;\n+      MARK_VISITED (y);\n+\n+      gcc_assert (i == n - 1);\n+      n -= np;\n+    }\n+\n+  sbitmap_free (visited);\n+  gcc_assert (n == 0);\n+  return order;\n+\n+#undef MARK_VISITED\n+#undef VISITED_P\n+}"}, {"sha": "dbcfa3ab3d16640d3ff2bdae67ab5f5083853794", "filename": "gcc/gimple.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -4418,4 +4418,27 @@ gimple_can_coalesce_p (tree name1, tree name2)\n \n   return false;\n }\n+\n+/* Return true when CALL is a call stmt that definitely doesn't\n+   free any memory or makes it unavailable otherwise.  */\n+bool\n+nonfreeing_call_p (gimple call)\n+{\n+  if (gimple_call_builtin_p (call, BUILT_IN_NORMAL)\n+      && gimple_call_flags (call) & ECF_LEAF)\n+    switch (DECL_FUNCTION_CODE (gimple_call_fndecl (call)))\n+      {\n+\t/* Just in case these become ECF_LEAF in the future.  */\n+\tcase BUILT_IN_FREE:\n+\tcase BUILT_IN_TM_FREE:\n+\tcase BUILT_IN_REALLOC:\n+\tcase BUILT_IN_STACK_RESTORE:\n+\t  return false;\n+\tdefault:\n+\t  return true;\n+      }\n+\n+  return false;\n+}\n+\n #include \"gt-gimple.h\""}, {"sha": "e7021a40a057a33c427e76b27e1083e847b9f719", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -1054,6 +1054,7 @@ extern tree gimple_boolify (tree);\n extern gimple_predicate rhs_predicate_for (tree);\n extern tree canonicalize_cond_expr_cond (tree);\n extern void dump_decl_set (FILE *, bitmap);\n+extern bool nonfreeing_call_p (gimple);\n \n /* In omp-low.c.  */\n extern tree omp_reduction_init (tree, tree);"}, {"sha": "db7f346720316aaf04763cae7a3672ea2bfeed6c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -244,13 +244,6 @@ extern basic_block move_sese_region_to_fn (struct function *, basic_block,\n void remove_edge_and_dominated_blocks (edge);\n bool tree_node_can_be_shared (tree);\n \n-/* In tree-ssa-dom.c  */\n-extern void dump_dominator_optimization_stats (FILE *);\n-extern void debug_dominator_optimization_stats (void);\n-int loop_depth_of_name (tree);\n-tree degenerate_phi_result (gimple);\n-bool simple_iv_increment_p (gimple);\n-\n /* In tree-ssa-loop-ch.c  */\n bool do_while_loop_p (struct loop *);\n \n@@ -296,10 +289,6 @@ struct tree_niter_desc\n   enum tree_code cmp;\n };\n \n-/* In tree-ssa-phiopt.c */\n-bool empty_block_p (basic_block);\n-basic_block *blocks_in_phiopt_order (void);\n-bool nonfreeing_call_p (gimple);\n \n /* In tree-ssa-loop*.c  */\n \n@@ -359,10 +348,6 @@ void tree_transform_and_unroll_loop (struct loop *, unsigned,\n bool contains_abnormal_ssa_name_p (tree);\n bool stmt_dominates_stmt_p (gimple, gimple);\n \n-/* In tree-ssa-dce.c */\n-void mark_virtual_operand_for_renaming (tree);\n-void mark_virtual_phi_result_for_renaming (gimple);\n-\n /* In tree-ssa-threadedge.c */\n extern void threadedge_initialize_values (void);\n extern void threadedge_finalize_values (void);"}, {"sha": "5a04ee7924fa56646f01dfc0452aa4ffc7e0b93c", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -2869,6 +2869,46 @@ mark_virtual_operands_for_renaming (struct function *fn)\n   fn->gimple_df->rename_vops = 1;\n }\n \n+/* Replace all uses of NAME by underlying variable and mark it\n+   for renaming.  This assumes the defining statement of NAME is\n+   going to be removed.  */\n+\n+void\n+mark_virtual_operand_for_renaming (tree name)\n+{\n+  tree name_var = SSA_NAME_VAR (name);\n+  bool used = false;\n+  imm_use_iterator iter;\n+  use_operand_p use_p;\n+  gimple stmt;\n+\n+  gcc_assert (VAR_DECL_IS_VIRTUAL_OPERAND (name_var));\n+  FOR_EACH_IMM_USE_STMT (stmt, iter, name)\n+    {\n+      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+        SET_USE (use_p, name_var);\n+      used = true;\n+    }\n+  if (used)\n+    mark_virtual_operands_for_renaming (cfun);\n+}\n+\n+/* Replace all uses of the virtual PHI result by its underlying variable\n+   and mark it for renaming.  This assumes the PHI node is going to be\n+   removed.  */\n+\n+void\n+mark_virtual_phi_result_for_renaming (gimple phi)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Marking result for renaming : \");\n+      print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n+  mark_virtual_operand_for_renaming (gimple_phi_result (phi));\n+}\n \n /* Return true if there is any work to be done by update_ssa\n    for function FN.  */"}, {"sha": "c87fb63c351f23d250c63e10b5630cceb5a33111", "filename": "gcc/tree-into-ssa.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-into-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-into-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -25,6 +25,8 @@ extern void set_current_def (tree, tree);\n void delete_update_ssa (void);\n tree create_new_def_for (tree, gimple, def_operand_p);\n void mark_virtual_operands_for_renaming (struct function *);\n+void mark_virtual_operand_for_renaming (tree);\n+void mark_virtual_phi_result_for_renaming (gimple);\n bool need_ssa_update_p (struct function *);\n bool name_registered_for_update_p (tree);\n void release_ssa_name_after_update_ssa (tree);"}, {"sha": "7b0cd2819bc152ea1a9d3d7422802d2c734f17af", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -907,48 +907,6 @@ propagate_necessity (bool aggressive)\n     }\n }\n \n-/* Replace all uses of NAME by underlying variable and mark it\n-   for renaming.  This assumes the defining statement of NAME is\n-   going to be removed.  */\n-\n-void\n-mark_virtual_operand_for_renaming (tree name)\n-{\n-  tree name_var = SSA_NAME_VAR (name);\n-  bool used = false;\n-  imm_use_iterator iter;\n-  use_operand_p use_p;\n-  gimple stmt;\n-\n-  gcc_assert (VAR_DECL_IS_VIRTUAL_OPERAND (name_var));\n-  FOR_EACH_IMM_USE_STMT (stmt, iter, name)\n-    {\n-      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-        SET_USE (use_p, name_var);\n-      used = true;\n-    }\n-  if (used)\n-    mark_virtual_operands_for_renaming (cfun);\n-}\n-\n-/* Replace all uses of the virtual PHI result by its underlying variable\n-   and mark it for renaming.  This assumes the PHI node is going to be\n-   removed.  */\n-\n-void\n-mark_virtual_phi_result_for_renaming (gimple phi)\n-{\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      fprintf (dump_file, \"Marking result for renaming : \");\n-      print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n-      fprintf (dump_file, \"\\n\");\n-    }\n-\n-  mark_virtual_operand_for_renaming (gimple_phi_result (phi));\n-}\n-\n-\n /* Remove dead PHI nodes from block BB.  */\n \n static bool"}, {"sha": "89742b03a0e31fa22404b10fe4841291411fcd95", "filename": "gcc/tree-ssa-dom.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-dom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-dom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -0,0 +1,29 @@\n+/* Header file for SSA dominator optimizations.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_DOM_H\n+#define GCC_TREE_SSA_DOM_H\n+\n+extern void dump_dominator_optimization_stats (FILE *);\n+extern void debug_dominator_optimization_stats (void);\n+extern int loop_depth_of_name (tree);\n+extern bool simple_iv_increment_p (gimple);\n+extern tree degenerate_phi_result (gimple);\n+\n+#endif /* GCC_TREE_SSA_DOM_H */"}, {"sha": "268275e3968eb46c675b9c676349b5a1ee747626", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -624,7 +624,7 @@ tree_ssa_ifcombine (void)\n   bool cfg_changed = false;\n   int i;\n \n-  bbs = blocks_in_phiopt_order ();\n+  bbs = single_pred_before_succ_order ();\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   for (i = 0; i < n_basic_blocks - NUM_FIXED_BLOCKS; ++i)"}, {"sha": "8e1ddab1245799e831947d3e0eca1dc4d66845f3", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 76, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -308,7 +308,7 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n      This ensures that we collapse inner ifs before visiting the\n      outer ones, and also that we do not try to visit a removed\n      block.  */\n-  bb_order = blocks_in_phiopt_order ();\n+  bb_order = single_pred_before_succ_order ();\n   n = n_basic_blocks - NUM_FIXED_BLOCKS;\n \n   for (i = 0; i < n; i++)\n@@ -476,59 +476,6 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n   return 0;\n }\n \n-/* Returns the list of basic blocks in the function in an order that guarantees\n-   that if a block X has just a single predecessor Y, then Y is after X in the\n-   ordering.  */\n-\n-basic_block *\n-blocks_in_phiopt_order (void)\n-{\n-  basic_block x, y;\n-  basic_block *order = XNEWVEC (basic_block, n_basic_blocks);\n-  unsigned n = n_basic_blocks - NUM_FIXED_BLOCKS;\n-  unsigned np, i;\n-  sbitmap visited = sbitmap_alloc (last_basic_block);\n-\n-#define MARK_VISITED(BB) (bitmap_set_bit (visited, (BB)->index))\n-#define VISITED_P(BB) (bitmap_bit_p (visited, (BB)->index))\n-\n-  bitmap_clear (visited);\n-\n-  MARK_VISITED (ENTRY_BLOCK_PTR);\n-  FOR_EACH_BB (x)\n-    {\n-      if (VISITED_P (x))\n-\tcontinue;\n-\n-      /* Walk the predecessors of x as long as they have precisely one\n-\t predecessor and add them to the list, so that they get stored\n-\t after x.  */\n-      for (y = x, np = 1;\n-\t   single_pred_p (y) && !VISITED_P (single_pred (y));\n-\t   y = single_pred (y))\n-\tnp++;\n-      for (y = x, i = n - np;\n-\t   single_pred_p (y) && !VISITED_P (single_pred (y));\n-\t   y = single_pred (y), i++)\n-\t{\n-\t  order[i] = y;\n-\t  MARK_VISITED (y);\n-\t}\n-      order[i] = y;\n-      MARK_VISITED (y);\n-\n-      gcc_assert (i == n - 1);\n-      n -= np;\n-    }\n-\n-  sbitmap_free (visited);\n-  gcc_assert (n == 0);\n-  return order;\n-\n-#undef MARK_VISITED\n-#undef VISITED_P\n-}\n-\n /* Replace PHI node element whose edge is E in block BB with variable NEW.\n    Remove the edge from COND_BLOCK which does not lead to BB (COND_BLOCK\n    is known to have two edges, one of which must reach BB).  */\n@@ -1353,28 +1300,6 @@ add_or_mark_expr (basic_block bb, tree exp,\n     }\n }\n \n-/* Return true when CALL is a call stmt that definitely doesn't\n-   free any memory or makes it unavailable otherwise.  */\n-bool\n-nonfreeing_call_p (gimple call)\n-{\n-  if (gimple_call_builtin_p (call, BUILT_IN_NORMAL)\n-      && gimple_call_flags (call) & ECF_LEAF)\n-    switch (DECL_FUNCTION_CODE (gimple_call_fndecl (call)))\n-      {\n-\t/* Just in case these become ECF_LEAF in the future.  */\n-\tcase BUILT_IN_FREE:\n-\tcase BUILT_IN_TM_FREE:\n-\tcase BUILT_IN_REALLOC:\n-\tcase BUILT_IN_STACK_RESTORE:\n-\t  return false;\n-\tdefault:\n-\t  return true;\n-      }\n-\n-  return false;\n-}\n-\n class nontrapping_dom_walker : public dom_walker\n {\n public:"}, {"sha": "8456a0f8c6af7fe17714a38348f933972ec323c9", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9c733eb19c1fa07f0adecc083a4c2a053fd903/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=3d9c733eb19c1fa07f0adecc083a4c2a053fd903", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-ssa.h\"\n #include \"ssa-iterators.h\"\n #include \"tree-ssanames.h\"\n+#include \"tree-ssa-dom.h\"\n #include \"tree-flow.h\"\n \n /* Mapping for redirected edges.  */"}]}