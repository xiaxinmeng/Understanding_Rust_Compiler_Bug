{"sha": "b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYzY1ODY0OTEwYzA2YmM0YjFjZWI0ZTU5ZjAyYzA5NjkzZGNlNg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-07T15:26:05Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-07T15:26:05Z"}, "message": "java1.C: New test.\n\n\t* g++.dg/lookup/java1.C: New test.\n\t* g++.dg/lookup/java2.C: New test.\n\nFrom-SVN: r74395", "tree": {"sha": "18bacb9a9405732c02772d542d6f6ef7d9589274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18bacb9a9405732c02772d542d6f6ef7d9589274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6a794d626563787e7ed032ae56c005c2a50d6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6a794d626563787e7ed032ae56c005c2a50d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6a794d626563787e7ed032ae56c005c2a50d6c"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "09784c00f2b10893b2bbbecac2e93fe6c258b7d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "patch": "@@ -1,3 +1,8 @@\n+2003-12-07  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\r\n+\r\n+\t* g++.dg/lookup/java1.C: New test.\r\n+\t* g++.dg/lookup/java2.C: New test.\r\n+\n 2003-12-07  Falk Hueffner  <falk@debian.org>\n \n \t* g++.dg/opt/noreturn-1.C: New test."}, {"sha": "550ff59a2baaf4639a0ac6a31b850d80882c97bf", "filename": "gcc/testsuite/g++.dg/lookup/java1.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C?ref=b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do compile }\r\n+// { dg-options \"\" }\r\n+// Origin: Giovanni Bajo <giovannibajo at libero dot it>\r\n+// Make sure that Java special functions can be called correctly.\r\n+\r\n+extern \"Java\"\r\n+{\r\n+  typedef __java_int jint;\r\n+  namespace java\r\n+  {\r\n+    namespace lang\r\n+    {\r\n+      class Class;\r\n+      class Object;\r\n+      class Throwable {};\r\n+      class Foo;\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+typedef struct java::lang::Object* jobject;\r\n+typedef struct java::lang::Throwable* jthrowable;\r\n+typedef class java::lang::Class* jclass;\r\n+using java::lang::Foo;\r\n+\r\n+class Foo : public java::lang::Throwable\r\n+{\r\n+public:\r\n+  static ::java::lang::Class class$;\r\n+};\r\n+\r\n+\r\n+/*\r\n+ * Step 1: no declarations. A declaration for _Jv_Throw is created.\r\n+ */\r\n+\r\n+void Bar1(void)\r\n+{\r\n+  Foo* f = new java::lang::Foo;   // { dg-error \"call to Java constructor\" }\r\n+  throw (f);\r\n+}\r\n+\r\n+\r\n+/*\r\n+ * Step 2: constructor declaration\r\n+ */\r\n+\r\n+extern \"C\" jobject _Jv_AllocObject (jclass, jint) __attribute__((__malloc__));\r\n+\r\n+void Bar2(void)\r\n+{\r\n+  Foo* f = new java::lang::Foo; \r\n+  throw (f);  \r\n+}\r\n+\r\n+\r\n+/*\r\n+ * Step 3: overloads\r\n+ */\r\n+\r\n+jobject _Jv_AllocObject (jclass, jint, float) __attribute__((__malloc__));\r\n+void _Jv_Throw (int, float) __attribute__ ((__noreturn__));\r\n+\r\n+void Bar3(void)\r\n+{\r\n+  Foo* f = new java::lang::Foo;\t  // { dg-error \"should never be overloaded\" }\r\n+  throw (f);\t\t\t  // { dg-error \"should never be overloaded\" }\r\n+}\r"}, {"sha": "6c78715a8ab3e361d6fd618efbdcc236666f105c", "filename": "gcc/testsuite/g++.dg/lookup/java2.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec65864910c06bc4b1ceb4e59f02c09693dce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C?ref=b8ec65864910c06bc4b1ceb4e59f02c09693dce6", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\r\n+// { dg-options \"\" }\r\n+// Origin: Giovanni Bajo <giovannibajo at libero dot it>\r\n+// Make sure that Java special functions can be called correctly.\r\n+// (continue from java1.C)\r\n+\r\n+extern \"Java\"\r\n+{\r\n+  typedef __java_int jint;\r\n+  namespace java\r\n+  {\r\n+    namespace lang\r\n+    {\r\n+      class Class;\r\n+      class Object;\r\n+      class Throwable {};\r\n+      class Foo;\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+typedef struct java::lang::Object* jobject;\r\n+typedef struct java::lang::Throwable* jthrowable;\r\n+typedef class java::lang::Class* jclass;\r\n+using java::lang::Foo;\r\n+\r\n+class Foo : public java::lang::Throwable\r\n+{\r\n+public:\r\n+  static ::java::lang::Class class$;\r\n+};\r\n+\r\n+/*\r\n+ * Step 4: Manual declaration of _Jv_Throw\r\n+ *  This is the last case we need to test. In the other file we're testing\r\n+ *  the compiler is able to generate an artifical declaration for this \r\n+ *  function, so we need to test here if it works with a normal declaration.\r\n+ */\r\n+\r\n+extern \"C\" jobject _Jv_AllocObject (jclass, jint) __attribute__((__malloc__));\r\n+extern \"C\" void _Jv_Throw (jthrowable) __attribute__ ((__noreturn__));\r\n+\r\n+void Bar4(void)\r\n+{\r\n+  Foo* f = new java::lang::Foo;\r\n+  throw (f);\r\n+}\r"}]}