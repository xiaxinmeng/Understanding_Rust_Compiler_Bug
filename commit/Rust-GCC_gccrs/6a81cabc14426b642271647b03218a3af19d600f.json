{"sha": "6a81cabc14426b642271647b03218a3af19d600f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MWNhYmMxNDQyNmI2NDIyNzE2NDdiMDMyMThhM2FmMTlkNjAwZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-23T21:33:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-27T15:18:42Z"}, "message": "analyzer: fixes to tree_cmp and other comparators\n\nregion_model.cc's tree_cmp attempted to verify that the ordering\nis symmetric by asserting that\n  tree_cmp (x, y) == -tree_cmp (y, x)\n\nThis condition is too strong: it's only required for a comparator that\n  sign (tree_cmp (x, y)) == -sign (tree_cmp (y, x))\nand the incorrect form of the assertion doesn't hold e.g. on s390x where\nfor certain inputs x, y, tree_cmp (x, y) == 1 and tree_cmp (y, x) == -2,\nbreaking the build in \"make selftest\" in stage1.\n\nIn any case, these checks are redundant, since qsort_chk performs them.\n\nAdditionally, there is a potential lack of transitivity in\nworklist::key_t::cmp where hashval_t values are compared by subtraction,\nwhich could fail to be transitive if overflows occur.\n\nThis patch eliminates the redundant checks and reimplements the hashval_t\ncomparisons in terms of < and >, fixing these issues.\n\ngcc/analyzer/ChangeLog:\n\t* call-string.cc (call_string::cmp_1): Delete, moving body to...\n\t(call_string::cmp): ...here.\n\t* call-string.h (call_string::cmp_1): Delete decl.\n\t* engine.cc (worklist::key_t::cmp_1): Delete, moving body to...\n\t(worklist::key_t::cmp): ...here.  Implement hash comparisons\n\tvia comparison rather than subtraction to avoid overflow issues.\n\t* exploded-graph.h (worklist::key_t::cmp_1): Delete decl.\n\t* region-model.cc (tree_cmp): Eliminate buggy checking for\n\tsymmetry.", "tree": {"sha": "56549e78861b12a7d50dee21f9c65dfdfffcc69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56549e78861b12a7d50dee21f9c65dfdfffcc69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a81cabc14426b642271647b03218a3af19d600f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a81cabc14426b642271647b03218a3af19d600f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a81cabc14426b642271647b03218a3af19d600f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a81cabc14426b642271647b03218a3af19d600f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c15893df6eafc32efd6184379dd7f02c36da7d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15893df6eafc32efd6184379dd7f02c36da7d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15893df6eafc32efd6184379dd7f02c36da7d12"}], "stats": {"total": 90, "additions": 21, "deletions": 69}, "files": [{"sha": "4a99c3f12a78e73c6594118c5ae06edf77794e5f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -1,3 +1,15 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-string.cc (call_string::cmp_1): Delete, moving body to...\n+\t(call_string::cmp): ...here.\n+\t* call-string.h (call_string::cmp_1): Delete decl.\n+\t* engine.cc (worklist::key_t::cmp_1): Delete, moving body to...\n+\t(worklist::key_t::cmp): ...here.  Implement hash comparisons\n+\tvia comparison rather than subtraction to avoid overflow issues.\n+\t* exploded-graph.h (worklist::key_t::cmp_1): Delete decl.\n+\t* region-model.cc (tree_cmp): Eliminate buggy checking for\n+\tsymmetry.\n+\n 2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.cc  (is_named_call_p): Check that fndecl is \"extern\""}, {"sha": "288953ed37cf5f8ed3e18ce04d13fcdf4bfffc4a", "filename": "gcc/analyzer/call-string.cc", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fcall-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fcall-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-string.cc?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -149,35 +149,14 @@ call_string::calc_recursion_depth () const\n }\n \n /* Comparator for call strings.\n+   This implements a version of lexicographical order.\n    Return negative if A is before B.\n    Return positive if B is after A.\n    Return 0 if they are equal.  */\n \n int\n call_string::cmp (const call_string &a,\n \t\t  const call_string &b)\n-{\n-  int result = cmp_1 (a, b);\n-\n-  /* Check that the ordering is symmetric  */\n-#if CHECKING_P\n-  int reversed = cmp_1 (b, a);\n-  gcc_assert (reversed == -result);\n-#endif\n-\n-  /* We should only have 0 for equal pairs.  */\n-  gcc_assert (result != 0\n-\t      || a == b);\n-\n-  return result;\n-}\n-\n-/* Implementation of call_string::cmp.\n-   This implements a version of lexicographical order.  */\n-\n-int\n-call_string::cmp_1 (const call_string &a,\n-\t\t    const call_string &b)\n {\n   unsigned len_a = a.length ();\n   unsigned len_b = b.length ();"}, {"sha": "1b5db0a4a207e2775f87bedb6fa14e6ab9ab9251", "filename": "gcc/analyzer/call-string.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fcall-string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fcall-string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-string.h?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -69,9 +69,6 @@ class call_string\n   void validate () const;\n \n private:\n-  static int cmp_1 (const call_string &a,\n-\t\t    const call_string &b);\n-\n   auto_vec<const return_superedge *> m_return_edges;\n };\n "}, {"sha": "8961c557c4976a89ac39ac2971a49d66a4bcb910", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -1634,7 +1634,7 @@ worklist::add_node (exploded_node *enode)\n    Return 0 if they are equal.  */\n \n int\n-worklist::key_t::cmp_1 (const worklist::key_t &ka, const worklist::key_t &kb)\n+worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n {\n   const program_point &point_a = ka.m_enode->get_point ();\n   const program_point &point_b = kb.m_enode->get_point ();\n@@ -1710,9 +1710,12 @@ worklist::key_t::cmp_1 (const worklist::key_t &ka, const worklist::key_t &kb)\n       sm_state_map *smap_a = state_a.m_checker_states[sm_idx];\n       sm_state_map *smap_b = state_b.m_checker_states[sm_idx];\n \n-      int sm_cmp = smap_a->hash () - smap_b->hash ();\n-      if (sm_cmp)\n-\treturn sm_cmp;\n+      hashval_t hash_a = smap_a->hash ();\n+      hashval_t hash_b = smap_b->hash ();\n+      if (hash_a < hash_b)\n+\treturn -1;\n+      else if (hash_a > hash_b)\n+\treturn 1;\n     }\n \n   /* Otherwise, we have two enodes at the same program point but with\n@@ -1722,30 +1725,6 @@ worklist::key_t::cmp_1 (const worklist::key_t &ka, const worklist::key_t &kb)\n   return ka.m_enode->m_index - kb.m_enode->m_index;\n }\n \n-/* Comparator for implementing worklist::key_t comparison operators.\n-   Return negative if KA is before KB\n-   Return positive if KA is after KB\n-   Return 0 if they are equal.  */\n-\n-int\n-worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n-{\n-  int result = cmp_1 (ka, kb);\n-\n-  /* Check that the ordering is symmetric  */\n-#if CHECKING_P\n-  int reversed = cmp_1 (kb, ka);\n-  gcc_assert (reversed == -result);\n-#endif\n-\n-  /* We should only have 0 for equal (point, state) pairs.  */\n-  gcc_assert (result != 0\n-\t      || (*ka.m_enode->get_ps_key ()\n-\t\t  == *kb.m_enode->get_ps_key ()));\n-\n-  return result;\n-}\n-\n /* exploded_graph's ctor.  */\n \n exploded_graph::exploded_graph (const supergraph &sg, logger *logger,"}, {"sha": "c72319cb5c198bb8cb1a24cf5e4f0b26ce4d7308", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -652,7 +652,6 @@ class worklist\n     }\n \n   private:\n-    static int cmp_1 (const key_t &ka, const key_t &kb);\n     static int cmp (const key_t &ka, const key_t &kb);\n \n     int get_scc_id (const exploded_node *enode) const"}, {"sha": "a986549b59727a6511fe4b4651a272d855a68ad0", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a81cabc14426b642271647b03218a3af19d600f/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=6a81cabc14426b642271647b03218a3af19d600f", "patch": "@@ -1843,21 +1843,7 @@ tree_cmp (const void *p1, const void *p2)\n   const_tree t1 = *(const_tree const *)p1;\n   const_tree t2 = *(const_tree const *)p2;\n \n-  int result = tree_cmp (t1, t2);\n-\n-  /* Check that the ordering is symmetric  */\n-#if CHECKING_P\n-  int reversed = tree_cmp (t2, t1);\n-  gcc_assert (reversed == -result);\n-#endif\n-\n-  /* We should only have 0 for equal pairs.  */\n-#if 0\n-  gcc_assert (result != 0\n-\t      || t1 == t2);\n-#endif\n-\n-  return result;\n+  return tree_cmp (t1, t2);\n }\n \n /* Attempt to merge MAP_REGION_A and MAP_REGION_B into MERGED_MAP_REGION,"}]}