{"sha": "e426b47b65aca8b12aff9697e769c98c03af7691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyNmI0N2I2NWFjYThiMTJhZmY5Njk3ZTc2OWM5OGMwM2FmNzY5MQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-18T18:06:03Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-18T18:06:03Z"}, "message": "In gcc/: 2010-10-18 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n        * c-parser.c (c_parser_typeof_specifier): Adapted to new parser\n        the following Objective-C change:\n\n        2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4204796\n        * c-parse.in (typespec_nonreserved_nonattr): Remove volatile from\n        'volatilized' type used in a typeof operator.\n\nIn gcc/c-family/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n        \n        2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4330422\n        * c-common.h (objc_non_volatilized_type): New declaration\n        * stub-objc.c (objc_non_volatilized_type): New stub.\n\nIn gcc/cp/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n        \n        Merge from apple/trunk branch on FSF servers.\n        \n        2005-03-01 Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4451818\n        * call.c (standard_conversion, implicit_conversion): Ignore\n        'volatile' attribute of artificially volatized type in objc when\n        evaluating various conversion weights.\n\n        2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4330422\n        * typeck.c (comp_ptr_ttypes_real): Remove the hack. un-volatize the\n        artiificially 'volatized' type before doing pointer comparison.\n        \nIn gcc/objc/:\n2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Merge from 'apple/trunk' branch on FSF servers.\n        \n        2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4330422\n        * objc/objc-act.c (objc_non_volatilized_type): New\n\n        2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n        \n        Radar 4204796\n        * objc-act.c (objc_build_volatilized_type): Build 'volatilzed'\n        types with proper attribute set and correctly.\n        (objc_volatilize_decl): Remove unneeded code.\n        (objc_type_quals_match): Use the new attribute to check on\n        'volatilzed' type.\n        (hash_init): removed unneeded code.\n        \nIn gcc/testsuite/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n        \n        Merge from 'apple/trunk' branch on FSF servers.\n\n        2005-03-01 Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4451818\n        * obj-c++.dg/try-catch-16.mm: New.\n        * obj-c++.dg/try-catch-17.mm: New.\n\n        2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4330422\n        * obj-c++.dg/try-catch-15.mm: New\n\n        2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n\n        Radar 4204796\n        * obj-c++.dg/try-catch-12.mm: New\n        * obj-c++.dg/try-catch-13.mm: New\n        * obj-c++.dg/try-catch-14.mm: New\n        * objc.dg/try-catch-11.m: New\n        * objc.dg/try-catch-12.m: New\n        * objc.dg/try-catch-13.m: New\n\nFrom-SVN: r165654", "tree": {"sha": "a068d1420085148d89ec8d0b73da462d2b42d3fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a068d1420085148d89ec8d0b73da462d2b42d3fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e426b47b65aca8b12aff9697e769c98c03af7691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e426b47b65aca8b12aff9697e769c98c03af7691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e426b47b65aca8b12aff9697e769c98c03af7691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e426b47b65aca8b12aff9697e769c98c03af7691/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9887f1dcee5ba087d53ad187be5fb37e70a2e33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9887f1dcee5ba087d53ad187be5fb37e70a2e33e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9887f1dcee5ba087d53ad187be5fb37e70a2e33e"}], "stats": {"total": 513, "additions": 461, "deletions": 52}, "files": [{"sha": "2d8514cc6a7d17857285709585fc840ebe20e3b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -1,3 +1,15 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\t* c-parser.c (c_parser_typeof_specifier): Adapted to new parser\n+\tthe following Objective-C change:\n+\n+\t2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4204796\n+\t* c-parse.in (typespec_nonreserved_nonattr): Remove volatile from\n+\t'volatilized' type used in a typeof operator.\n+\n 2010-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-flow.h (gimple_purge_all_dead_abnormal_call_edges): Declare."}, {"sha": "63b7f748de244e4533976ecd9d86ddd3a50e9d5d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -1,6 +1,16 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\t\n+\t2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n+\n+        Radar 4330422\n+\t* c-common.h (objc_non_volatilized_type): New declaration\n+\t* stub-objc.c (objc_non_volatilized_type): New stub.\n+\n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n-\tMerge from 'apple/trunk' branch on FSF servers.\t\t\n+\tMerge from 'apple/trunk' branch on FSF servers.\n \n \t2006-03-27 Fariborz Jahanian <fjahanian@apple.com>\n "}, {"sha": "a6348abc69fe4c86a80fef2e2e1c6f5234a8afd1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -985,6 +985,7 @@ extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n extern void objc_check_global_decl (tree);\n extern tree objc_common_type (tree, tree);\n+extern tree objc_non_volatilized_type (tree);\n extern bool objc_compare_types (tree, tree, int, tree);\n extern bool objc_have_common_type (tree, tree, int, tree);\n extern bool objc_diagnose_private_ivar (tree);"}, {"sha": "bcce0ae91cce3e084f81a7ce7b8d0022af4e2258", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -66,6 +66,12 @@ objc_check_global_decl (tree ARG_UNUSED (decl))\n {\n }\n \n+tree\n+objc_non_volatilized_type (tree type)\n+{\n+  return type;\n+}\n+\n tree\n objc_common_type (tree ARG_UNUSED (type1), tree ARG_UNUSED (type2))\n {"}, {"sha": "8676a66de75d0054125d2e9a9959a5a5b2f29336", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -2509,6 +2509,11 @@ c_parser_typeof_specifier (c_parser *parser)\n \terror_at (here, \"%<typeof%> applied to a bit-field\");\n       mark_exp_read (expr.value);\n       ret.spec = TREE_TYPE (expr.value);\n+      if (c_dialect_objc() \n+\t  && ret.spec != error_mark_node\n+\t  && lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (ret.spec)))\n+\tret.spec = build_qualified_type\n+\t  (ret.spec, (TYPE_QUALS (ret.spec) & ~TYPE_QUAL_VOLATILE));\n       was_vm = variably_modified_type_p (ret.spec, NULL_TREE);\n       /* This is returned with the type so that when the type is\n \t evaluated, this can be evaluated.  */"}, {"sha": "5d001bbb930913dbb3bae1a77a6d3c3dc4b5bcdd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -1,3 +1,20 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\tMerge from apple/trunk branch on FSF servers.\n+\t\n+\t2005-03-01 Fariborz Jahanian <fjahanian@apple.com>\n+\n+        Radar 4451818\n+\t* call.c (standard_conversion, implicit_conversion): Ignore\n+\t'volatile' attribute of artificially volatized type in objc when\n+\tevaluating various conversion weights.\n+\n+\t2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4330422\n+\t* typeck.c (comp_ptr_ttypes_real): Remove the hack. un-volatize the\n+\tartiificially 'volatized' type before doing pointer comparison.\n+\t\n 2010-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/46015"}, {"sha": "1ecc367e1c1520789bb5212b0ff62eb6d51f59ac", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -832,9 +832,12 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t       && !TYPE_PTRMEM_P (from)\n \t       && TREE_CODE (TREE_TYPE (from)) != FUNCTION_TYPE)\n \t{\n+\t  tree nfrom = TREE_TYPE (from);\n+\t  if (c_dialect_objc ())\n+\t    nfrom = objc_non_volatilized_type (nfrom);\n \t  from = build_pointer_type\n-\t    (cp_build_qualified_type (void_type_node,\n-\t\t\t\t      cp_type_quals (TREE_TYPE (from))));\n+\t    (cp_build_qualified_type (void_type_node, \n+\t\t\t              cp_type_quals (nfrom)));\n \t  conv = build_conv (ck_ptr, from, conv);\n \t}\n       else if (TYPE_PTRMEM_P (from))\n@@ -1441,6 +1444,9 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       || expr == error_mark_node)\n     return NULL;\n \n+  if (c_dialect_objc ())\n+    from = objc_non_volatilized_type (from);\n+\n   if (TREE_CODE (to) == REFERENCE_TYPE)\n     conv = reference_binding (to, from, expr, c_cast_p, flags);\n   else"}, {"sha": "160198bc15d4ade98d920797fc779e5be7850769", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -8006,20 +8006,21 @@ comp_ptr_ttypes_real (tree to, tree from, int constp)\n \t  /* In Objective-C++, some types may have been 'volatilized' by\n \t     the compiler for EH; when comparing them here, the volatile\n \t     qualification must be ignored.  */\n-\t  bool objc_quals_match = objc_type_quals_match (to, from);\n+\t  tree nv_to = objc_non_volatilized_type (to);\n+\t  tree nv_from = objc_non_volatilized_type (from);\n \n-\t  if (!at_least_as_qualified_p (to, from) && !objc_quals_match)\n+\t  if (!at_least_as_qualified_p (nv_to, nv_from))\n \t    return 0;\n \n-\t  if (!at_least_as_qualified_p (from, to) && !objc_quals_match)\n+\t  if (!at_least_as_qualified_p (nv_from, nv_to))\n \t    {\n \t      if (constp == 0)\n \t\treturn 0;\n \t      to_more_cv_qualified = true;\n \t    }\n \n \t  if (constp > 0)\n-\t    constp &= TYPE_READONLY (to);\n+\t    constp &= TYPE_READONLY (nv_to);\n \t}\n \n       if (TREE_CODE (to) == VECTOR_TYPE)"}, {"sha": "0a78bc79383ce9555dae1a9f2c855324263064e4", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -1,3 +1,22 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\t\n+\t2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4330422\n+\t* objc/objc-act.c (objc_non_volatilized_type): New\n+\n+\t2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n+\t\n+        Radar 4204796\n+\t* objc-act.c (objc_build_volatilized_type): Build 'volatilzed'\n+\ttypes with proper attribute set and correctly.\n+\t(objc_volatilize_decl): Remove unneeded code.\n+\t(objc_type_quals_match): Use the new attribute to check on\n+\t'volatilzed' type.\n+\t(hash_init): removed unneeded code.\n+\t\n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "95fc7e71b4b8ef5eaacd6d1c23fa6ceb4113a812", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 24, "deletions": 45, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -430,13 +430,6 @@ struct GTY(()) string_descriptor {\n \n static GTY((param_is (struct string_descriptor))) htab_t string_htab;\n \n-/* Store the EH-volatilized types in a hash table, for easy retrieval.  */\n-struct GTY(()) volatilized_type {\n-  tree type;\n-};\n-\n-static GTY((param_is (struct volatilized_type))) htab_t volatilized_htab;\n-\n FILE *gen_declaration_file;\n \n /* Tells \"encode_pointer/encode_aggregate\" whether we are generating\n@@ -1490,6 +1483,11 @@ objc_build_volatilized_type (tree type)\n \t  && (TREE_TYPE (t) != TREE_TYPE (type)))\n \tcontinue;\n \n+      /* Only match up the types which were previously volatilized in similar fashion and not\n+\t because they were declared as such. */\n+      if (!lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (t)))\n+\tcontinue;\n+\n       /* Everything matches up!  */\n       return t;\n     }\n@@ -1499,6 +1497,13 @@ objc_build_volatilized_type (tree type)\n   t = build_variant_type_copy (type);\n   TYPE_VOLATILE (t) = 1;\n \n+  TYPE_ATTRIBUTES (t) = merge_attributes (TYPE_ATTRIBUTES (type),\n+                      \t\t\t  tree_cons (get_identifier (\"objc_volatilized\"),\n+                                 \t  NULL_TREE,\n+                                 \t  NULL_TREE));\n+  if (TREE_CODE (t) == ARRAY_TYPE)\n+    TREE_TYPE (t) = objc_build_volatilized_type (TREE_TYPE (t));\n+\n   /* Set up the canonical type information. */\n   if (TYPE_STRUCTURAL_EQUALITY_P (type))\n     SET_TYPE_STRUCTURAL_EQUALITY (t);\n@@ -1523,18 +1528,8 @@ objc_volatilize_decl (tree decl)\n \t  || TREE_CODE (decl) == PARM_DECL))\n     {\n       tree t = TREE_TYPE (decl);\n-      struct volatilized_type key;\n-      void **loc;\n \n       t = objc_build_volatilized_type (t);\n-      key.type = t;\n-      loc = htab_find_slot (volatilized_htab, &key, INSERT);\n-\n-      if (!*loc)\n-\t{\n-\t  *loc = ggc_alloc_volatilized_type ();\n-\t  ((struct volatilized_type *) *loc)->type = t;\n-\t}\n \n       TREE_TYPE (decl) = t;\n       TREE_THIS_VOLATILE (decl) = 1;\n@@ -1881,16 +1876,11 @@ bool\n objc_type_quals_match (tree ltyp, tree rtyp)\n {\n   int lquals = TYPE_QUALS (ltyp), rquals = TYPE_QUALS (rtyp);\n-  struct volatilized_type key;\n \n-  key.type = ltyp;\n-\n-  if (htab_find_slot (volatilized_htab, &key, NO_INSERT))\n+  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (ltyp)))\n     lquals &= ~TYPE_QUAL_VOLATILE;\n \n-  key.type = rtyp;\n-\n-  if (htab_find_slot (volatilized_htab, &key, NO_INSERT))\n+  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (rtyp)))\n     rquals &= ~TYPE_QUAL_VOLATILE;\n \n   return (lquals == rquals);\n@@ -1993,23 +1983,6 @@ objc_xref_basetypes (tree ref, tree basetype)\n     }\n }\n \n-static hashval_t\n-volatilized_hash (const void *ptr)\n-{\n-  const_tree const typ = ((const struct volatilized_type *)ptr)->type;\n-\n-  return htab_hash_pointer(typ);\n-}\n-\n-static int\n-volatilized_eq (const void *ptr1, const void *ptr2)\n-{\n-  const_tree const typ1 = ((const struct volatilized_type *)ptr1)->type;\n-  const_tree const typ2 = ((const struct volatilized_type *)ptr2)->type;\n-\n-  return typ1 == typ2;\n-}\n-\n /* Called from finish_decl.  */\n \n void\n@@ -2032,6 +2005,16 @@ objc_check_global_decl (tree decl)\n     error (\"redeclaration of Objective-C class %qs\", IDENTIFIER_POINTER (id));\n }\n \n+/* Return a non-volatalized version of TYPE. */\n+\n+tree\n+objc_non_volatilized_type (tree type)\n+{\n+  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (type)))\n+    type = build_qualified_type (type, (TYPE_QUALS (type) & ~TYPE_QUAL_VOLATILE));\n+  return type;\n+}\n+\n /* Construct a PROTOCOLS-qualified variant of INTERFACE, where INTERFACE may\n    either name an Objective-C class, or refer to the special 'id' or 'Class'\n    types.  If INTERFACE is not a valid ObjC type, just return it unchanged.  */\n@@ -7498,10 +7481,6 @@ hash_init (void)\n   /* Initialize the hash table used to hold the constant string objects.  */\n   string_htab = htab_create_ggc (31, string_hash,\n \t\t\t\t   string_eq, NULL);\n-\n-  /* Initialize the hash table used to hold EH-volatilized types.  */\n-  volatilized_htab = htab_create_ggc (31, volatilized_hash,\n-\t\t\t\t      volatilized_eq, NULL);\n }\n \n /* WARNING!!!!  hash_enter is called with a method, and will peek"}, {"sha": "4e8ed7fc5e676f542f481c253d18d18e9447fa31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -1,3 +1,28 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\n+\t2005-03-01 Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4451818\n+\t* obj-c++.dg/try-catch-16.mm: New.\n+\t* obj-c++.dg/try-catch-17.mm: New.\n+\n+\t2005-11-08  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4330422\n+\t* obj-c++.dg/try-catch-15.mm: New\n+\n+\t2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4204796\n+\t* obj-c++.dg/try-catch-12.mm: New\n+\t* obj-c++.dg/try-catch-13.mm: New\n+\t* obj-c++.dg/try-catch-14.mm: New\n+\t* objc.dg/try-catch-11.m: New\n+\t* objc.dg/try-catch-12.m: New\n+\t* objc.dg/try-catch-13.m: New\n+\t\n 2010-10-18  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.target/ia64/20101014.c: Fix double-paste of test case."}, {"sha": "e08f321e8c79f077b5b4cbd41a68dd0b2106b1d4", "filename": "gcc/testsuite/obj-c++.dg/try-catch-12.mm", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-12.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,51 @@\n+/* Ensure that typeof()-typed variables inside the @try { } block that\n+   \"inherit\" their EH-volatileness from other variables in the stack frame\n+   do not trigger \"discards qualifiers from target pointer type\" warnings.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+typedef volatile int IOSharedLockData;\n+\n+@interface TestMyTests\n+- (void) testSpoon;\n+@end\n+\n+extern void some_func (int *);\n+\n+@implementation TestMyTests\n+- (void) testSpoon {\n+  int i = 5;\n+\n+  do {\n+    @try {\n+      typeof(i) j = 6;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 7;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 8;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+      \n+}\n+@end"}, {"sha": "905702fde478db4bce0c63fedc46be0ab750589c", "filename": "gcc/testsuite/obj-c++.dg/try-catch-13.mm", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-13.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,67 @@\n+/* Ensure that variables declared volatile by the user (as opposed to\n+   synthesized by the EH-volatization machinery) _do_ trigger \n+   \"discards qualifiers from target pointer type\" warnings.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+@interface TestMyTests\n+- (void) testSpoon;\n+@end\n+\n+extern void some_func (int *);\n+\n+@implementation TestMyTests\n+- (void) testSpoon {\n+  volatile int i = 5;\n+  int q = 99;\n+\n+  do {\n+    @try {\n+      typeof(i) j = 6;\n+      typeof(q) k = 66;\n+      some_func (&j);\n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 23 } */ \n+/* { dg-error \"initializing argument\" \"\" { target *-*-* } 12 } */\n+      some_func (&k);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 7;\n+      typeof(q) k = 77;\n+      some_func (&k);\n+      some_func (&j);\n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 38 } */\n+/* The following is disabled as it is already checked above and the testsuites seems \n+   to count multiple different identical errors on the same line only once */\n+/*  dg-error \"initializing argument\" \"\" { target *-*-* } 12  */\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(q) k = 88;\n+      typeof(i) j = 8;\n+      some_func (&j); \n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 53 } */\n+/* The following is disabled as it is already checked above and the testsuites seems \n+   to count multiple different identical errors on the same line only once */\n+/*  dg-error \"initializing argument\" \"\" { target *-*-* } 12  */\n+      some_func (&k);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+      \n+}\n+@end\n+"}, {"sha": "1d922b509ccd8011facb3b89b5a74d432459a42c", "filename": "gcc/testsuite/obj-c++.dg/try-catch-14.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-14.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-14.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-14.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+typedef unsigned char uint8_t;\n+typedef uint8_t foo[24];\n+\n+void thingy(foo a)\n+{\n+}\n+\n+int main()\n+{\n+    foo bar;\n+\n+    @try {\n+    } \n+    @finally {\n+    }\n+\n+    thingy(bar);\n+\n+    return 0;\n+}\n+"}, {"sha": "01b3d5cbfb4c97719eb2da6e87fdb2683664c583", "filename": "gcc/testsuite/obj-c++.dg/try-catch-15.mm", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-15.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,34 @@\n+/* Test if addition of 'volatile' to object causes bogus error in presence of try-catch. */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+@interface Exception\n+@end\n+\n+class CppObj {\n+public:\n+    void constMethod() const {\n+    }\n+};\n+\n+@interface MyObject : Exception\n+- (void)doSomething;\n+- (void)myMethod;\n+@end\n+\n+@implementation MyObject\n+- (void)doSomething {\n+}\n+\n+- (void)myMethod {\n+    CppObj cppObj;\n+    \n+    @try {\n+        [self doSomething];\n+    }\n+    @catch (Exception *exception) {\n+    }\n+    \n+    cppObj.constMethod();\n+}\n+@end"}, {"sha": "4aea2647a10e1b3b9f77b0c490be5147e07b3cc1", "filename": "gcc/testsuite/obj-c++.dg/try-catch-16.mm", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-16.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,20 @@\n+/* Test if addition of 'volatile' to object causes bogus error in presence of try-catch. */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+extern void func( void * outData) ;\n+struct Point {\n+  short v;\n+  short h;\n+};\n+\n+\n+void foo ()\n+{\n+ Point eventLocation;\n+ @try {\n+ } @catch (id iiii) {\n+ }\n+\n+   func( &eventLocation );\n+}"}, {"sha": "7c642aca0cfa8d7e9bd1154367122f59083a0d64", "filename": "gcc/testsuite/obj-c++.dg/try-catch-17.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-17.mm?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,18 @@\n+/* Test if addition of 'volatile' to object causes bogus error in presence of try-catch. */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+struct Point {\n+  short v;\n+  short h;\n+};\n+\n+void foo ()\n+{\n+ Point eventLocation;\n+ @try {\n+ } @catch (id iiii) {\n+ }\n+\n+ Point p = eventLocation;\n+}"}, {"sha": "e08f321e8c79f077b5b4cbd41a68dd0b2106b1d4", "filename": "gcc/testsuite/objc.dg/try-catch-11.m", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-11.m?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,51 @@\n+/* Ensure that typeof()-typed variables inside the @try { } block that\n+   \"inherit\" their EH-volatileness from other variables in the stack frame\n+   do not trigger \"discards qualifiers from target pointer type\" warnings.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+typedef volatile int IOSharedLockData;\n+\n+@interface TestMyTests\n+- (void) testSpoon;\n+@end\n+\n+extern void some_func (int *);\n+\n+@implementation TestMyTests\n+- (void) testSpoon {\n+  int i = 5;\n+\n+  do {\n+    @try {\n+      typeof(i) j = 6;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 7;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 8;\n+      some_func (&j);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+      \n+}\n+@end"}, {"sha": "61e27031d5e910b1e9540b4617051274ca238bd5", "filename": "gcc/testsuite/objc.dg/try-catch-12.m", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e426b47b65aca8b12aff9697e769c98c03af7691/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m?ref=e426b47b65aca8b12aff9697e769c98c03af7691", "patch": "@@ -0,0 +1,63 @@\n+/* Ensure that variables declared volatile by the user (as opposed to\n+   synthesized by the EH-volatization machinery) _do_ trigger \n+   \"discards qualifiers from target pointer type\" warnings.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+@interface TestMyTests\n+- (void) testSpoon;\n+@end\n+\n+extern void some_func (int *);\n+\n+@implementation TestMyTests\n+- (void) testSpoon {\n+  volatile int i = 5;\n+  int q = 99;\n+\n+  do {\n+    @try {\n+      typeof(i) j = 6;\n+      typeof(q) k = 66;\n+      some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n+      /* { dg-message \"but argument is of type\" \"\" { target *-*-* } 12 } */\n+      some_func (&k);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(i) j = 7;\n+      typeof(q) k = 77;\n+      some_func (&k);\n+      some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n+      /* The following is disabled as it is already checked above and the testsuites seems \n+\t to count multiple different identical errors on the same line only once */\n+      /* dg-message \"but argument is of type\" \"\" { target *-*-* } 12 */\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+\n+  do {\n+    @try {\n+      typeof(q) k = 88;\n+      typeof(i) j = 8;\n+      some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n+      /* The following is disabled as it is already checked above and the testsuites seems \n+\t to count multiple different identical errors on the same line only once */\n+      /* dg-message \"but argument is of type\" \"\" { target *-*-* } 12 */\n+      some_func (&k);\n+    }\n+    @catch (id exc) {\n+      @throw;\n+    }\n+  } while(0);\n+      \n+}\n+@end"}]}