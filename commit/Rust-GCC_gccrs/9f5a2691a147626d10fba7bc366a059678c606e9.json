{"sha": "9f5a2691a147626d10fba7bc366a059678c606e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1YTI2OTFhMTQ3NjI2ZDEwZmJhN2JjMzY2YTA1OTY3OGM2MDZlOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-11-19T22:45:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-19T22:45:14Z"}, "message": "reorg.c (relax_delay_slots): When optimizing for code size...\n\n        * reorg.c (relax_delay_slots): When optimizing for code size, if a\n        return with a filled delay slot is followed by a return with an\n        unfilled delay slot, delete the first return and reemit the insn\n        that was previously in its delay slot.\n\nFrom-SVN: r23729", "tree": {"sha": "34a37695a988b7faf09d172d86491067e36d8ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a37695a988b7faf09d172d86491067e36d8ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5a2691a147626d10fba7bc366a059678c606e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5a2691a147626d10fba7bc366a059678c606e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5a2691a147626d10fba7bc366a059678c606e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5a2691a147626d10fba7bc366a059678c606e9/comments", "author": null, "committer": null, "parents": [{"sha": "e9741ffa9765fdd679ff6270fe7dd7d18f6ead41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9741ffa9765fdd679ff6270fe7dd7d18f6ead41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9741ffa9765fdd679ff6270fe7dd7d18f6ead41"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "92ae27a552b680b2b94f4b95aec6de0ad8e316cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5a2691a147626d10fba7bc366a059678c606e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5a2691a147626d10fba7bc366a059678c606e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f5a2691a147626d10fba7bc366a059678c606e9", "patch": "@@ -1,5 +1,10 @@\n Thu Nov 19 22:20:51 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* reorg.c (relax_delay_slots): When optimizing for code size, if a\n+\treturn with a filled delay slot is followed by a return with an\n+\tunfilled delay slot, delete the first return and reemit the insn\n+\tthat was previously in its delay slot.\n+\n \t* i860.c (single_insn_src_p): Add missing parens.\n \t* ginclude/math-3300.h: Likewise.\n "}, {"sha": "f4b9f1f9dd752d2418a5ee782ab5dedb773f8a48", "filename": "gcc/reorg.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5a2691a147626d10fba7bc366a059678c606e9/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5a2691a147626d10fba7bc366a059678c606e9/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=9f5a2691a147626d10fba7bc366a059678c606e9", "patch": "@@ -4200,6 +4200,40 @@ relax_delay_slots (first)\n \t  continue;\n \t}\n \n+      /* See if we have a RETURN insn with a filled delay slot followed\n+\t by a RETURN insn with an unfilled a delay slot.  If so, we can delete\n+\t the first RETURN (but not it's delay insn).  This gives the same\n+\t effect in fewer instructions.\n+\n+\t Only do so if optimizing for size since this results in slower, but\n+\t smaller code.  */\n+      if (optimize_size\n+\t  && GET_CODE (PATTERN (delay_insn)) == RETURN\n+\t  && next\n+\t  && GET_CODE (next) == JUMP_INSN\n+\t  && GET_CODE (PATTERN (next)) == RETURN)\n+\t{\n+\t  int i;\n+\n+\t  /* Delete the RETURN and just execute the delay list insns.\n+\n+\t     We do this by deleting the INSN containing the SEQUENCE, then\n+\t     re-emitting the insns separately, and then deleting the RETURN.\n+\t     This allows the count of the jump target to be properly\n+\t     decremented.  */\n+\n+\t  /* Clear the from target bit, since these insns are no longer\n+\t     in delay slots.  */\n+\t  for (i = 0; i < XVECLEN (pat, 0); i++)\n+\t    INSN_FROM_TARGET_P (XVECEXP (pat, 0, i)) = 0;\n+\n+\t  trial = PREV_INSN (insn);\n+\t  delete_insn (insn);\n+\t  emit_insn_after (pat, trial);\n+\t  delete_scheduled_jump (delay_insn);\n+\t  continue;\n+\t}\n+\n       /* Now look only at the cases where we have a filled JUMP_INSN.  */\n       if (GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) != JUMP_INSN\n \t  || ! (condjump_p (XVECEXP (PATTERN (insn), 0, 0))"}]}