{"sha": "96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiYWU0MzZlMGNiMmIzZTE0ZWE3ZjE2ODU0ZTFiNTM1YTcyY2E2Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-02-17T20:08:11Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-02-17T20:08:11Z"}, "message": "Do not call null register_common in emutls\n\nThread-local variables with DECL_COMMON trigger an internal compiler\nerror on targets that use emulated TLS without register_common, when\nwe attempt to expand a call to the NULL register_common, with\ntestcases as simple as gcc.dg/tls/emutls-2.c.\n\nThe documentation states that, on such targets, common variables would\nfall back to explicitly initialized.  This patch rearranges the code\nthat deals with initialization of common and non-common variables,\ncomplementing code that is already in place to detect\nregister_common-less targets.\n\n\nfor  gcc/ChangeLog\n\n\t* tree-emutls.c (new_emutls_decl, emutls_common_1): Complete\n\thandling of register_common-less targets.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/tls/emutls-3.c: New, combining emutls-2.c and\n\tthr-init-2.c into an execution test with explicitly common\n\tvariables.", "tree": {"sha": "add8279bb9b95dc60a2acd439ae488277b67df5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add8279bb9b95dc60a2acd439ae488277b67df5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/comments", "author": null, "committer": null, "parents": [{"sha": "bc0f8df124f6ee12c82c5a6c1335868a15bcaecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f8df124f6ee12c82c5a6c1335868a15bcaecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0f8df124f6ee12c82c5a6c1335868a15bcaecb"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "a07e536789faa8d6ffe4b9a72bed10a2fac8b214", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "patch": "@@ -1,3 +1,8 @@\n+2020-02-17  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* tree-emutls.c (new_emutls_decl, emutls_common_1): Complete\n+\thandling of register_common-less targets.\n+\n 2020-02-17  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/93760"}, {"sha": "2e8d92221dbf7fed51d4a97b7833eb1bab696ddc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "patch": "@@ -1,3 +1,9 @@\n+2020-02-17  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* gcc.dg/tls/emutls-3.c: New, combining emutls-2.c and\n+\tthr-init-2.c into an execution test with explicitly common\n+\tvariables.\n+\n 2020-02-17  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/pr93565.c: Fix test for ilp32."}, {"sha": "e062ba8f2a316d171198b0c5b0e8e721dfa35edb", "filename": "gcc/testsuite/gcc.dg/tls/emutls-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-3.c?ref=96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-require-effective-target global_constructor } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls_runtime } */\n+/* { dg-add-options tls } */\n+\n+__thread int i __attribute__((common));\n+\n+extern void abort (void);\n+\n+int test_code(int b)\n+{\n+  i += b ;\n+  return i;\n+}\n+\n+int main (int ac, char *av[])\n+{\n+  int a = test_code(test_code(1));\n+  \n+  if ((a != 2) || (i != 2))\n+    abort () ;\n+  \n+  return 0;\n+}"}, {"sha": "44755dd406aeeed114f047e9583b9ae737f4a9cc", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bae436e0cb2b3e14ea7f16854e1b535a72ca66/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=96bae436e0cb2b3e14ea7f16854e1b535a72ca66", "patch": "@@ -322,7 +322,7 @@ new_emutls_decl (tree decl, tree alias_of)\n      control structure with size and alignment information.  Initialization\n      of COMMON block variables happens elsewhere via a constructor.  */\n   if (!DECL_EXTERNAL (to)\n-      && (!DECL_COMMON (to)\n+      && (!DECL_COMMON (to) || !targetm.emutls.register_common\n           || (DECL_INITIAL (decl)\n               && DECL_INITIAL (decl) != error_mark_node)))\n     {\n@@ -360,7 +360,7 @@ emutls_common_1 (tree tls_decl, tree control_decl, tree *pstmts)\n   tree x;\n   tree word_type_node;\n \n-  if (! DECL_COMMON (tls_decl)\n+  if (!DECL_COMMON (tls_decl) || !targetm.emutls.register_common\n       || (DECL_INITIAL (tls_decl)\n \t  && DECL_INITIAL (tls_decl) != error_mark_node))\n     return;"}]}