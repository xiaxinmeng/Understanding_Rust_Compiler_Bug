{"sha": "62a989ea66e8b1d4c3ed4218c5115e050072711a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhOTg5ZWE2NmU4YjFkNGMzZWQ0MjE4YzUxMTVlMDUwMDcyNzExYQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-24T13:20:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T13:33:20Z"}, "message": "libstdc++: Minor simd_math cleanups\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_math.h: Undefine internal\n\tmacros after use.\n\t(frexp): Move #if to a more sensible position and reformat\n\tpreceding code.\n\t(logb): Call _SimdImpl::_S_logb for fixed_size instead of\n\tduplicating the code here.\n\t(modf): Simplify condition.", "tree": {"sha": "675a74437e6fa3c775ee3891064dd07fad83daa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675a74437e6fa3c775ee3891064dd07fad83daa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a989ea66e8b1d4c3ed4218c5115e050072711a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a989ea66e8b1d4c3ed4218c5115e050072711a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a989ea66e8b1d4c3ed4218c5115e050072711a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a989ea66e8b1d4c3ed4218c5115e050072711a/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1c7792d6ff70e830e0ff8028bbac8379f5a79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1c7792d6ff70e830e0ff8028bbac8379f5a79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1c7792d6ff70e830e0ff8028bbac8379f5a79c"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "80b6e2b4cb57a939faae5d73a3fcc42090c08a2a", "filename": "libstdc++-v3/include/experimental/bits/simd_math.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a989ea66e8b1d4c3ed4218c5115e050072711a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a989ea66e8b1d4c3ed4218c5115e050072711a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h?ref=62a989ea66e8b1d4c3ed4218c5115e050072711a", "patch": "@@ -645,11 +645,8 @@ template <typename _Tp, typename _Abi>\n \treturn __r;\n       }\n     else if constexpr (__is_fixed_size_abi_v<_Abi>)\n-      {\n-\treturn {__private_init,\n-\t\t_Abi::_SimdImpl::_S_frexp(__data(__x), __data(*__exp))};\n+      return {__private_init, _Abi::_SimdImpl::_S_frexp(__data(__x), __data(*__exp))};\n #if _GLIBCXX_SIMD_X86INTRIN\n-      }\n     else if constexpr (__have_avx512f)\n       {\n \tconstexpr size_t _Np = simd_size_v<_Tp, _Abi>;\n@@ -667,8 +664,8 @@ template <typename _Tp, typename _Abi>\n \t\t_Abi::_CommonImpl::_S_blend(_SimdWrapper<bool, _Np>(\n \t\t\t\t\t      __isnonzero),\n \t\t\t\t\t    __v, __getmant_avx512(__v))};\n-#endif // _GLIBCXX_SIMD_X86INTRIN\n       }\n+#endif // _GLIBCXX_SIMD_X86INTRIN\n     else\n       {\n \t// fallback implementation\n@@ -751,14 +748,7 @@ template <typename _Tp, typename _Abi>\n     if constexpr (_Np == 1)\n       return std::logb(__x[0]);\n     else if constexpr (__is_fixed_size_abi_v<_Abi>)\n-      {\n-\treturn {__private_init,\n-\t\t__data(__x)._M_apply_per_chunk([](auto __impl, auto __xx) {\n-\t\t  using _V = typename decltype(__impl)::simd_type;\n-\t\t  return __data(\n-\t\t    std::experimental::logb(_V(__private_init, __xx)));\n-\t\t})};\n-      }\n+      return {__private_init, _Abi::_SimdImpl::_S_logb(__data(__x))};\n #if _GLIBCXX_SIMD_X86INTRIN // {{{\n     else if constexpr (__have_avx512vl && __is_sse_ps<_Tp, _Np>())\n       return {__private_init,\n@@ -829,9 +819,7 @@ template <typename _Tp, typename _Abi>\n   enable_if_t<is_floating_point_v<_Tp>, simd<_Tp, _Abi>>\n   modf(const simd<_Tp, _Abi>& __x, simd<_Tp, _Abi>* __iptr)\n   {\n-    if constexpr (__is_scalar_abi<_Abi>()\n-\t\t  || (__is_fixed_size_abi_v<\n-\t\t\t_Abi> && simd_size_v<_Tp, _Abi> == 1))\n+    if constexpr (simd_size_v<_Tp, _Abi> == 1)\n       {\n \t_Tp __tmp;\n \t_Tp __r = std::modf(__x[0], &__tmp);\n@@ -1474,6 +1462,8 @@ template <typename _Tp, typename _Abi>\n   }\n // }}}\n \n+#undef _GLIBCXX_SIMD_CVTING2\n+#undef _GLIBCXX_SIMD_CVTING3\n #undef _GLIBCXX_SIMD_MATH_CALL_\n #undef _GLIBCXX_SIMD_MATH_CALL2_\n #undef _GLIBCXX_SIMD_MATH_CALL3_"}]}