{"sha": "5ce6f47b378db770b570df0b83c8c24ef4e475e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlNmY0N2IzNzhkYjc3MGI1NzBkZjBiODNjOGMyNGVmNGU0NzVlMw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-08-20T21:53:28Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-08-20T21:53:28Z"}, "message": "config.sub: Import from master repository.\n\n2002-08-15  Eric Christopher  <echristo@redhat.com>\n\n        * config.sub: Import from master repository.\n        * config.guess: Ditto.\n2002-08-15  Eric Christopher  <echristo@redhat.com>\n\t    Jeff Knaggs  <jknaggs@redhat.com>\n\n\t* config.gcc (mipsisa64sr71k-elf): New target.\n\t* config/mips/sr71k.md: New file.\n\t* config/mips/mips.md: Use it.\n\t(rot*): Add sr71k specifics.\n\t* config/mips/t-sr71k: New file.\n\t* config/mips/mips.h (sr71k): New cpu.\n\t(TARGET_SR71K): Use it.\n\t(TUNE_SR71K): Ditto.\n\t(GENERATE_BRANCHLIKELY): Ditto.\n\t(ISA_HAS_MULHI, ISA_HAS_MULS, ISA_HAS_MSAC, ISA_HAS_MACC,\n\tISA_HAS_ROTR_SIISA_HAS_ROTR_DI): Ditto.\n\t* config/mips/mips.c (sr71k): New cpu.\n\t(mips_use_dfa_pipeline_interface): Use.\n\n2002-08-15  Eric Christopher  <echristo@redhat.com>\n            Richard Sandiford <rsandifo@redhat.com>\n\t    Aldy Hernandez  <aldyh@redhat.com>\n\t    Graham Stott    <grahams@redhat.com>\n\t    Michael Meissner  <meissner@redhat.com>\n\t    Gavin Romig-Koch  <gavin@redhat.com>\n\t    Ken Raeburn  <raeburn@cygnus.com>\n\t    Alexandre Oliva <aoliva@redhat.com>\n\n\t* config.gcc (mips64vr-elf): New target.\n\t* config/mips/5400.md: New file.\n\t* config/mips/5500.md: Ditto.\n\t* config/mips/mips.md: Use them.\n\t(frsqrt): New.\n\t* config/mips/mips.c (vr4111, vr4121, vr4320, vr5400, vr5500): New\n\tcpus.\n\t(mips_issue_rate): Use them.\n\t(mips_use_dfa_pipeline_interface): New function. Use for 5400 and 5500.\n\t(TARGET_SCHEDUSE_DFA_PIPELINE_INTERFACE): Define. Use above.\n\t* config/mips/mips.h (vr4111, vr4121, vr4320, vr5400, vr5500): New\n\tcpus.\n\t(TARGET_MIPSx): Use them.\n\t(TUNE_MIPSx): Ditto.\n\t(GETNATE_MULT3_SI): Ditto.\n\t(ISA_HAS_BRANCHLIKELY): Ditto.\n\t(ISA_HAS_CONDMOVE): Ditto.\n\t(ISA_HAS_NMADD_NMSUB): Ditto.\n\t(ISA_HAS_MULHI): New. Ditto.\n\t(ISA_HAS_MULS): Ditto.\n\t(ISA_HAS_MSAC): Ditto.\n\t(ISA_HAS_MACC): Ditto.\n\t(ISA_HAS_ROTR_SI): Ditto.\n\t(ISA_HAS_ROTR_DI): Ditto.\n\t(RTX_COSTS): Use.\n\nFrom-SVN: r56471", "tree": {"sha": "b72fd6b619d1518b9b9f3fde47b1498e3205c725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72fd6b619d1518b9b9f3fde47b1498e3205c725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce6f47b378db770b570df0b83c8c24ef4e475e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce6f47b378db770b570df0b83c8c24ef4e475e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce6f47b378db770b570df0b83c8c24ef4e475e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce6f47b378db770b570df0b83c8c24ef4e475e3/comments", "author": null, "committer": null, "parents": [{"sha": "fe93253580050b8f1b4e81398839a53e3481d0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe93253580050b8f1b4e81398839a53e3481d0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe93253580050b8f1b4e81398839a53e3481d0e0"}], "stats": {"total": 1529, "additions": 1446, "deletions": 83}, "files": [{"sha": "262ef696ed9cc984b04994c3f0c36df4930b9d8c", "filename": "ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -1,3 +1,8 @@\n+2002-08-15  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config.sub: Import from master repository.\n+\t* config.guess: Ditto.\n+\n 2002-08-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* Makefile.in (GCC_FOR_TARGET): Prepend STAGE_CC_WRAPPER.\n@@ -84,7 +89,7 @@\n \tC++ headers if --enable-version-specific-runtime-libs is used.\n \n 2002-07-04  Steve Ellcey  <sje@cup.hp.com>\n-\t\n+\n \t* ltcf-cxx.sh (hpux*): Modify to support ia64-*-hpux*.\n \n 2002-07-03  Nathanael Nerode  <neroden@gcc.gnu.org>\n@@ -132,7 +137,7 @@\n 2002-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config.if (libstdcxx_incdir): Version C++ headers.\n-\t(cxx_incdir): Remove. \n+\t(cxx_incdir): Remove.\n \n 2002-06-25  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n@@ -168,7 +173,7 @@ Tue Jun 18 22:37:35 2002  Denis Chertykov  <denisc@overta.ru>\n \n \t* config.sub: Add support for avr target.\n \tImport from master sources, rev 1.255\n-\t\n+\n 2002-06-19  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* configure, .cvsignore:  Revert previous change...\n@@ -376,7 +381,7 @@ Tue Jun 18 22:37:35 2002  Denis Chertykov  <denisc@overta.ru>\n \t* configure.in (target_libs): Remove target-libchill.\n \tDo not compute CHILL_FOR_TARGET.\n \t* libchill: Remove directory.\n-\t\n+\n 2002-04-11  DJ Delorie  <dj@redhat.com>\n \n \t* Makefile.in, configure.in: Sync with binutils, entries\n@@ -559,7 +564,7 @@ Tue Mar 19 09:05:08 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc/Makefile.in: Removed libstdc++-v3 dependancy for libjava and\n \tboehm-gc\n-\t\n+\n 2002-02-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config.guess: Updated to 2002-01-30's version.\n@@ -588,8 +593,8 @@ Thu Feb  7 12:40:58 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-01-26  Jason Thorpe  <thorpej@wasabisystems.com>\n \n-\t* configure.in (*-*-netbsd*): New.  Skip target-newlib, \n-\ttarget-libiberty, and target-libgloss.  Skip Java-related \n+\t* configure.in (*-*-netbsd*): New.  Skip target-newlib,\n+\ttarget-libiberty, and target-libgloss.  Skip Java-related\n \tlibraries if not supported for NetBSD on target CPU.\n \n 2002-01-25  Douglas B Rupp  <rupp@gnat.com>"}, {"sha": "0cd6c1a3842a2abcffbfce0537d3847cfed26a3a", "filename": "config.guess", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/config.guess", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/config.guess", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.guess?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -3,7 +3,7 @@\n #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n #   2000, 2001, 2002 Free Software Foundation, Inc.\n \n-timestamp='2002-07-09'\n+timestamp='2002-08-19'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -231,6 +231,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n+\teval $set_cc_for_build\n \tcat <<EOF >$dummy.s\n \t.data\n \\$Lformat:\n@@ -256,7 +257,6 @@ main:\n \tjsr \\$26,exit\n \t.end main\n EOF\n-\teval $set_cc_for_build\n \t$CC_FOR_BUILD $dummy.s -o $dummy 2>/dev/null\n \tif test \"$?\" = 0 ; then\n \t\tcase `$dummy` in\n@@ -281,6 +281,9 @@ EOF\n \t\t\t2-1307)\n \t\t\t\tUNAME_MACHINE=\"alphaev68\"\n \t\t\t\t;;\n+\t\t\t3-1307)\n+\t\t\t\tUNAME_MACHINE=\"alphaev7\"\n+\t\t\t\t;;\n \t\tesac\n \tfi\n \trm -f $dummy.s $dummy && rmdir $tmpdir\n@@ -875,7 +878,7 @@ EOF\n \t\t;;\n \t  a.out-i386-linux)\n \t\techo \"${UNAME_MACHINE}-pc-linux-gnuaout\"\n-\t\texit 0 ;;\t\t\n+\t\texit 0 ;;\n \t  coff-i386)\n \t\techo \"${UNAME_MACHINE}-pc-linux-gnucoff\"\n \t\texit 0 ;;\n@@ -1079,6 +1082,9 @@ EOF\n     SX-5:SUPER-UX:*:*)\n \techo sx5-nec-superux${UNAME_RELEASE}\n \texit 0 ;;\n+    SX-6:SUPER-UX:*:*)\n+\techo sx6-nec-superux${UNAME_RELEASE}\n+\texit 0 ;;\n     Power*:Rhapsody:*:*)\n \techo powerpc-apple-rhapsody${UNAME_RELEASE}\n \texit 0 ;;"}, {"sha": "603384298288293a171ef8cb3652aa592ac3d38d", "filename": "config.sub", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/config.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/config.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.sub?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -3,7 +3,7 @@\n #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n #   2000, 2001, 2002 Free Software Foundation, Inc.\n \n-timestamp='2002-07-03'\n+timestamp='2002-08-20'\n \n # This file is (in principle) common to ALL GNU software.\n # The presence of a machine in this file suggests that SOME GNU software\n@@ -239,13 +239,15 @@ case $basic_machine in\n \t| mips | mipsbe | mipseb | mipsel | mipsle \\\n \t| mips16 \\\n \t| mips64 | mips64el \\\n+        | mips64vr | mips64vrel \\\n \t| mips64orion | mips64orionel \\\n \t| mips64vr4100 | mips64vr4100el \\\n \t| mips64vr4300 | mips64vr4300el \\\n \t| mips64vr5000 | mips64vr5000el \\\n \t| mipsisa32 | mipsisa32el \\\n \t| mipsisa64 | mipsisa64el \\\n \t| mipsisa64sb1 | mipsisa64sb1el \\\n+\t| mipsisa64sr71k | mipsisa64sr71kel \\\n \t| mipstx39 | mipstx39el \\\n \t| mn10200 | mn10300 \\\n \t| ns16k | ns32k \\\n@@ -307,13 +309,15 @@ case $basic_machine in\n \t| mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \\\n \t| mips16-* \\\n \t| mips64-* | mips64el-* \\\n+        | mips64vr-* | mips64vrel-* \\\n \t| mips64orion-* | mips64orionel-* \\\n \t| mips64vr4100-* | mips64vr4100el-* \\\n \t| mips64vr4300-* | mips64vr4300el-* \\\n \t| mips64vr5000-* | mips64vr5000el-* \\\n \t| mipsisa32-* | mipsisa32el-* \\\n \t| mipsisa64-* | mipsisa64el-* \\\n \t| mipsisa64sb1-* | mipsisa64sb1el-* \\\n+\t| mipsisa64sr71k-* | mipsisa64sr71kel-* \\\n \t| mipstx39 | mipstx39el \\\n \t| none-* | np1-* | ns16k-* | ns32k-* \\\n \t| orion-* \\\n@@ -751,7 +755,7 @@ case $basic_machine in\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n \t\t;;\n-\tpentiumpro | p6 | 6x86 | athlon)\n+\tpentiumpro | p6 | 6x86 | athlon | athlon_*)\n \t\tbasic_machine=i686-pc\n \t\t;;\n \tpentiumii | pentium2)\n@@ -818,6 +822,12 @@ case $basic_machine in\n \t\tbasic_machine=a29k-amd\n \t\tos=-udi\n \t\t;;\n+\tsb1)\n+\t\tbasic_machine=mipsisa64sb1-unknown\n+\t\t;;\n+\tsb1el)\n+\t\tbasic_machine=mipsisa64sb1el-unknown\n+\t\t;;\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;"}, {"sha": "983c0bfaf224232bf7f7fe0e066f5f3f2c65cfed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -1,3 +1,55 @@\n+2002-08-15  Eric Christopher  <echristo@redhat.com>\n+\t    Jeff Knaggs  <jknaggs@redhat.com>\n+\n+\t* config.gcc (mipsisa64sr71k-elf): New target.\n+\t* config/mips/sr71k.md: New file.\n+\t* config/mips/mips.md: Use it.\n+\t(rot*): Add sr71k specifics.\n+\t* config/mips/t-sr71k: New file.\n+\t* config/mips/mips.h (sr71k): New cpu.\n+\t(TARGET_SR71K): Use it.\n+\t(TUNE_SR71K): Ditto.\n+\t(GENERATE_BRANCHLIKELY): Ditto.\n+\t(ISA_HAS_MULHI, ISA_HAS_MULS, ISA_HAS_MSAC, ISA_HAS_MACC,\n+\tISA_HAS_ROTR_SIISA_HAS_ROTR_DI): Ditto.\n+\t* config/mips/mips.c (sr71k): New cpu.\n+\t(mips_use_dfa_pipeline_interface): Use.\n+\n+2002-08-15  Eric Christopher  <echristo@redhat.com>\n+            Richard Sandiford <rsandifo@redhat.com>\n+\t    Aldy Hernandez  <aldyh@redhat.com>\n+\t    Graham Stott    <grahams@redhat.com>\n+\t    Michael Meissner  <meissner@redhat.com>\n+\t    Gavin Romig-Koch  <gavin@redhat.com>\n+\t    Ken Raeburn  <raeburn@cygnus.com>\n+\t    Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* config.gcc (mips64vr-elf): New target.\n+\t* config/mips/5400.md: New file.\n+\t* config/mips/5500.md: Ditto.\n+\t* config/mips/mips.md: Use them.\n+\t(frsqrt): New.\n+\t* config/mips/mips.c (vr4111, vr4121, vr4320, vr5400, vr5500): New\n+\tcpus.\n+\t(mips_issue_rate): Use them.\n+\t(mips_use_dfa_pipeline_interface): New function. Use for 5400 and 5500.\n+\t(TARGET_SCHEDUSE_DFA_PIPELINE_INTERFACE): Define. Use above.\n+\t* config/mips/mips.h (vr4111, vr4121, vr4320, vr5400, vr5500): New\n+\tcpus.\n+\t(TARGET_MIPSx): Use them.\n+\t(TUNE_MIPSx): Ditto.\n+\t(GETNATE_MULT3_SI): Ditto.\n+\t(ISA_HAS_BRANCHLIKELY): Ditto.\n+\t(ISA_HAS_CONDMOVE): Ditto.\n+\t(ISA_HAS_NMADD_NMSUB): Ditto.\n+\t(ISA_HAS_MULHI): New. Ditto.\n+\t(ISA_HAS_MULS): Ditto.\n+\t(ISA_HAS_MSAC): Ditto.\n+\t(ISA_HAS_MACC): Ditto.\n+\t(ISA_HAS_ROTR_SI): Ditto.\n+\t(ISA_HAS_ROTR_DI): Ditto.\n+\t(RTX_COSTS): Use.\n+\n 2002-08-20  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* cppinit.c (remove_dup_dir): Add head_ptr argument to handle removal\n@@ -47,7 +99,7 @@\n \t(build_private_template): Call get_class_ivars instead of\n \tbuild_ivar_chain.\n \t(start_class): Allocate room for the CLASS_OWN_IVARS slot.\n-\t(continue_class): Call get_class_ivars instead of \n+\t(continue_class): Call get_class_ivars instead of\n \tbuild_ivar_chain.\n \t(encode_field_decl): Check for DECL_BIT_FIELD_TYPE instead\n \tof DECL_BIT_FIELD (which may have been cleared).\n@@ -88,7 +140,7 @@\n \t* config/rs6000/rs6000.c (rs6000_emit_set_const): Inline\n \tmulti-instruction SImode constant.  Add REG_EQUAL note.\n \t* config/rs6000/rs6000.md (movsi splitter): Use\n-\trs6000_emit_set_const. \n+\trs6000_emit_set_const.\n \n 2002-08-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -313,7 +365,7 @@\n \n \tFix PR/7566\n \t* c-semantics.c (genrtl_case_label): Don't (mis)use\n-\twarning_with_decl. \n+\twarning_with_decl.\n \n 2002-08-14  Dale Johannesen  <dalej@apple.com>\n \n@@ -338,11 +390,11 @@\n \n 2002-08-14  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* reload.c (find_reloads): Handle constraint letters marked by \n+\t* reload.c (find_reloads): Handle constraint letters marked by\n \tEXTRA_ADDRESS_CONSTRAINT and EXTRA_MEMORY_CONSTRAINT.\n \t(alternative_allows_memconst): Likewise.\n \t* reload1.c (maybe_fix_stack_asms): Likewise.\n-\t* recog.c (asm_operand_ok, preprocess_constraints, \n+\t* recog.c (asm_operand_ok, preprocess_constraints,\n \tconstrain_operands): Likewise.\n \t* regclass.c (record_operand_costs, record_reg_classes): Likewise.\n \t* local-alloc.c (block_alloc, requires_inout): Likewise.\n@@ -391,7 +443,7 @@\n \t(__premain, exit, abort, _cleanup, memcpy, memset, ___adddi3,\n \t___subdi3, ___notdi2, __mulhi32, __mulsi3): Use them to use 'rtc'\n \tand declare the symbol far when compiled with -mlong-calls.\n-\t(__far_trampoline): New for 68HC12 trampoline code to invoke a \n+\t(__far_trampoline): New for 68HC12 trampoline code to invoke a\n \tfar handler using jsr/bsr.\n \n \t* config/m68hc11/m68hc11-crt0.S: Put a mode for ELF ABI flags.\n@@ -403,7 +455,7 @@\n \n \t* config/m68hc11/m68hc11.h (CPP_SPEC): Pass -D__USE_RTC__ when\n \t-mlong-calls is specified.\n-\t(ASM_DECLARE_FUNCTION_NAME): Define to generate .far and .interrupt \n+\t(ASM_DECLARE_FUNCTION_NAME): Define to generate .far and .interrupt\n \tassembler directives.\n \t(TARGET_LONG_CALL, MASK_LONG_CALL): Declare.\n \t(TARGET_SWITCHES): Add -mlong-calls options.\n@@ -508,10 +560,10 @@ Tue Aug 13 17:40:25 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t\"*tmqi_mem\", \"*tmhi_full\", \"*tmqi_full\"): ... these new patterns.\n \n \t(\"*ltgr\", \"*cmpdi_ccs_0_64\", \"*cmpdi_ccs_0_31\", \"*ltr\", \"*icm15\",\n-\t\"*icm15_cconly\", \"*cmpsi_ccs_0\", \"*icm3\", \"*cmphi_ccs_0\", \"*icm1\", \n+\t\"*icm15_cconly\", \"*cmpsi_ccs_0\", \"*icm3\", \"*cmphi_ccs_0\", \"*icm1\",\n \t\"*cmpqi_ccs_0\"): Remove, replace by ...\n \t(\"*tstdi_sign\", \"*tstdi\", \"*tstdi_cconly\", \"*tstdi_cconly_31\",\n-\t\"*tstsi\", \"*tstsi_cconly\", \"*tstsi_cconly2\", \"*tsthi\", \"*tsthi_cconly\", \n+\t\"*tstsi\", \"*tstsi_cconly\", \"*tstsi_cconly2\", \"*tsthi\", \"*tsthi_cconly\",\n \t\"*tstqi\", \"*tstqi_cconly\"): ... these new patterns.\n \n \t(\"*cmpsidi_ccs\"): Remove, replace by ...\n@@ -529,7 +581,7 @@ Tue Aug 13 17:40:25 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t(\"adddi3\"): Adapt expander.\n \n \t(\"*addsi3_cc\"): Allow \"general_operand\" for operand 2.\n-\t(\"*addsi3_carry1_cc\", \"*addsi3_carry1_cconly\", \n+\t(\"*addsi3_carry1_cc\", \"*addsi3_carry1_cconly\",\n \t\"*addsi3_carry2_cc\", \"*addsi3_carry2_cconly\"): New patterns.\n \n \t(\"addhi3\", \"addqi3\"): Remove, replace by ...\n@@ -575,7 +627,7 @@ Tue Aug 13 14:49:20 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t(ip2k_set_compare): Don't use lookup_const_double.\n \t(asm_file_start): Initialization of commands_in_file removed.\n \t(asm_file_end): Output of commands_in_file removed.\n-\t\n+\n \t* config/ip2k/ip2k.c (CPP_PREDEFINES): Remove definition of\n \t__INT_MAX__.\n \n@@ -635,7 +687,7 @@ Tue Aug 13 14:49:20 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n 2002-08-12  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* diagnostic.h (output_formatted_scalar): Rename from\n-\toutput_formatted_integer. \n+\toutput_formatted_integer.\n \t* diagnostic.def: Add DK_DEBUG.\n \t* diagnostic.c (output_decimal): Adjust.\n \t(output_long_decimal): Likewise."}, {"sha": "8432cf56d40df41e36a056ad47721b1fe89925c6", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -1875,6 +1875,12 @@ mipsisa64-*-elf* | mipsisa64el-*-elf*)\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_ABI_DEFAULT=ABI_MEABI\"\n \t;;\n+mipsisa64sr71k-*-elf*)\n+        tm_file=\"${tm_file} mips/elf.h\"\n+        tmake_file=mips/t-sr71k\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sr71000\\\\\\\" MIPS_ABI_DEFAULT=ABI_MEABI\"\n+        ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n \ttm_file=\"${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-elf\n@@ -1891,6 +1897,11 @@ mips64-*-elf* | mips64el-*-elf*)\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n+mips64vr-*-elf* | mips64vrel-*-elf*)\n+        tm_file=\"mips/vr.h ${tm_file} mips/elf64.h\"\n+        tm_defines=\"MIPS_ABI_DEFAULT=ABI_O64\"\n+        tmake_file=mips/t-vr\n+        ;;\n mips64orion-*-elf* | mips64orionel-*-elf*)\n \ttm_file=\"${tm_file} mips/elforion.h mips/elf64.h\"\n \ttmake_file=mips/t-elf"}, {"sha": "3b8002cb2852c5fc6e2ef0acaf173dc4b1c58507", "filename": "gcc/config/mips/5400.md", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2F5400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2F5400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5400.md?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,170 @@\n+;; DFA-based pipeline description for 5400\n+(define_automaton \"vr54\")\n+(define_cpu_unit \"vr54_dp0\"     \"vr54\")\n+(define_cpu_unit \"vr54_dp1\"     \"vr54\")\n+(define_cpu_unit \"vr54_mem\"     \"vr54\")\n+(define_cpu_unit \"vr54_mac\"     \"vr54\")\n+\n+;;\n+;; The ordering of the instruction-execution-path/resource-usage\n+;; descriptions (also known as reservation RTL) is roughly ordered\n+;; based on the define attribute RTL for the \"type\" classification.\n+;; When modifying, remember that the first test that matches is the\n+;; reservation used!\n+;;\n+\n+(define_insn_reservation \"ir_vr54_unknown\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"unknown\"))\n+  \"vr54_dp0+vr54_dp1+vr54_mem+vr54_mac\")\n+\n+;; Assume prediction fails.\n+(define_insn_reservation \"ir_vr54_branch\" 3\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"branch,jump,call\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_load\" 2\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"load\")\n+            (eq_attr \"mode\" \"!SF,DF,FPSW\")))\n+  \"vr54_mem\")\n+\n+(define_insn_reservation \"ir_vr54_store\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"store\")\n+            (eq_attr \"mode\" \"!SF,DF,FPSW\")))\n+  \"vr54_mem\")\n+\n+(define_insn_reservation \"ir_vr54_fstore\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"store\")\n+            (eq_attr \"mode\" \"SF,DF\")))\n+  \"vr54_mem\")\n+\n+\n+;; This reservation is for conditional move based on integer\n+;; or floating point CC.  This could probably use some refinement\n+;; as \"move\" type attr seems to be overloaded in rtl.\n+(define_insn_reservation \"ir_vr54_move\" 4\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"move\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+;; Move to/from FPU registers\n+(define_insn_reservation \"ir_vr54_xfer\" 2\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"xfer\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_hilo\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"hilo\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_arith\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"arith,darith,icmp,nop\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_imul_si\" 3\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_imul_di\" 4\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_imadd_si\" 3\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"imul\"))\n+  \"vr54_mac\")\n+\n+(define_insn_reservation \"ir_vr54_idiv_si\" 42\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_idiv_di\" 74\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fadd\" 4\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"fadd\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fmul_sf\" 5\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fmul\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fmul_df\" 6\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fmul\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fmadd_sf\" 9\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fmadd\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fmadd_df\" 10\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fmadd\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fdiv_sf\" 42\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fdiv_df\" 72\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fabs\" 2\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"fabs,fneg\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fcmp\" 2\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_fcvt\" 6\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_frsqrt_sf\" 61\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_frsqrt_df\" 121\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr54_dp0|vr54_dp1\")\n+\n+(define_insn_reservation \"ir_vr54_multi\" 1\n+  (and (eq_attr \"cpu\" \"r5400\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"vr54_dp0+vr54_dp1+vr54_mem+vr54_mac\")"}, {"sha": "8023b9a606401bb8a763288f97ca09fd03c88b0c", "filename": "gcc/config/mips/5500.md", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2F5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2F5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5500.md?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,172 @@\n+;; DFA-based pipeline description for 5500\n+(define_automaton \"vr55\")\n+(define_cpu_unit \"vr55_dp0\"     \"vr55\")\n+(define_cpu_unit \"vr55_dp1\"     \"vr55\")\n+(define_cpu_unit \"vr55_mem\"     \"vr55\")\n+(define_cpu_unit \"vr55_mac\"     \"vr55\")\n+(define_cpu_unit \"vr55_fp\"      \"vr55\")\n+(define_cpu_unit \"vr55_bru\"     \"vr55\")\n+\n+;;\n+;; The ordering of the instruction-execution-path/resource-usage\n+;; descriptions (also known as reservation RTL) is roughly ordered\n+;; based on the define attribute RTL for the \"type\" classification.\n+;; When modifying, remember that the first test that matches is the\n+;; reservation used!\n+;;\n+\n+(define_insn_reservation \"ir_vr55_unknown\" 1\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"unknown\"))\n+  \"vr55_dp0+vr55_dp1+vr55_mem+vr55_mac+vr55_fp+vr55_bru\")\n+\n+;; Assume prediction fails.\n+(define_insn_reservation \"ir_vr55_branch\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"branch,jump,call\"))\n+  \"vr55_bru\")\n+\n+(define_insn_reservation \"ir_vr55_load\" 3\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"load\"))\n+  \"vr55_mem\")\n+\n+(define_insn_reservation \"ir_vr55_store\" 1\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"store\"))\n+  \"vr55_mem\")\n+\n+;; This reservation is for conditional move based on integer\n+;; or floating point CC.  This could probably use some refinement\n+;; as \"move\" type attr seems to be overloaded in rtl.\n+(define_insn_reservation \"ir_vr55_move\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"move\"))\n+  \"vr55_dp0|vr55_dp1\")\n+\n+;; Move to/from FPU registers\n+(define_insn_reservation \"ir_vr55_xfer\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"xfer\"))\n+  \"vr55_dp0|vr55_dp1\")\n+\n+(define_insn_reservation \"ir_vr55_hilo\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"hilo\"))\n+  \"vr55_dp0|vr55_dp1\")\n+\n+(define_insn_reservation \"ir_vr55_arith\" 1\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"arith,darith,icmp,nop\"))\n+  \"vr55_dp0|vr55_dp1\")\n+\n+(define_insn_reservation \"ir_vr55_imul_si\" 3\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_imul_di\" 4\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_imadd_si\" 3\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"imul\"))\n+  \"vr55_mac\")\n+\n+;; Divide algorithm is early out with best latency of 7 pcycles.\n+;; Use worst case for scheduling purposes.\n+(define_insn_reservation \"ir_vr55_idiv_si\" 42\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"SI\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_idiv_di\" 74\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"idiv\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fadd\" 4\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"fadd\"))\n+  \"vr55_fp\")\n+\n+(define_insn_reservation \"ir_vr55_fmul_sf\" 5\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fmul\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fmul_df\" 6\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fmul\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fmadd_sf\" 9\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fmadd\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fmadd_df\" 10\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fmadd\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fdiv_sf\" 30\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fdiv_df\" 59\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_fabs\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"fabs,fneg\"))\n+  \"vr55_fp\")\n+\n+(define_insn_reservation \"ir_vr55_fcmp\" 2\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"vr55_fp\")\n+\n+(define_insn_reservation \"ir_vr55_fcvt_sf\" 4\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr55_fp\")\n+\n+(define_insn_reservation \"ir_vr55_fcvt_df\" 6\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr55_fp\")\n+\n+(define_insn_reservation \"ir_vr55_frsqrt_sf\" 60\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_frsqrt_df\" 118\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+            (eq_attr \"mode\" \"DF\")))\n+  \"vr55_mac\")\n+\n+(define_insn_reservation \"ir_vr55_multi\" 1\n+  (and (eq_attr \"cpu\" \"r5500\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"vr55_dp0+vr55_dp1+vr55_mem+vr55_mac+vr55_fp+vr55_bru\")"}, {"sha": "f67c5454c0c947124cb604f7958cd86dd87075a0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -149,6 +149,7 @@ static void mips_unique_section\t\t\tPARAMS ((tree, int))\n \tATTRIBUTE_UNUSED;\n static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n+static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n static void mips_encode_section_info\t\tPARAMS ((tree, int));\n \n /* Structure to be filled in by compute_frame_size with register\n@@ -592,7 +593,10 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   /* MIPS III */\n   { \"r4000\", PROCESSOR_R4000, 3 },\n   { \"vr4100\", PROCESSOR_R4100, 3 },\n+  { \"vr4111\", PROCESSOR_R4111, 3 },\n+  { \"vr4121\", PROCESSOR_R4121, 3 },\n   { \"vr4300\", PROCESSOR_R4300, 3 },\n+  { \"vr4320\", PROCESSOR_R4320, 3 },\n   { \"r4400\", PROCESSOR_R4000, 3 }, /* = r4000 */\n   { \"r4600\", PROCESSOR_R4600, 3 },\n   { \"orion\", PROCESSOR_R4600, 3 }, /* = r4600 */\n@@ -601,6 +605,9 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   /* MIPS IV */\n   { \"r8000\", PROCESSOR_R8000, 4 },\n   { \"vr5000\", PROCESSOR_R5000, 4 },\n+  { \"vr5400\", PROCESSOR_R5400, 4 },\n+  { \"vr5500\", PROCESSOR_R5500, 4 },\n+\n \n   /* MIPS 32 */\n   { \"4kc\", PROCESSOR_R4KC, 32 },\n@@ -609,6 +616,7 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   /* MIPS 64 */\n   { \"5kc\", PROCESSOR_R5KC, 64 },\n   { \"20kc\", PROCESSOR_R20KC, 64 },\n+  { \"sr71000\", PROCESSOR_SR71000, 64 },\n \n   /* Broadcom SB-1 CPU core */\n   { \"sb1\", PROCESSOR_SB1, 64 },\n@@ -645,6 +653,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_SCHED_ADJUST_COST mips_adjust_cost\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE mips_issue_rate\n+#undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE mips_use_dfa_pipeline_interface\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mips_encode_section_info\n@@ -3981,7 +3991,9 @@ output_block_move (insn, operands, num_regs, move_type)\n \t}\n \n       /* ??? Fails because of a MIPS assembler bug?  */\n-      else if (TARGET_64BIT && bytes >= 8 && ! TARGET_MIPS16)\n+      else if (TARGET_64BIT && bytes >= 8\n+\t       && ! TARGET_SR71K\n+\t       && ! TARGET_MIPS16)\n \t{\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n@@ -4018,7 +4030,9 @@ output_block_move (insn, operands, num_regs, move_type)\n \t  bytes -= 4;\n \t}\n \n-      else if (bytes >= 4 && ! TARGET_MIPS16)\n+      else if (bytes >= 4\n+\t       && ! TARGET_SR71K\n+\t       && ! TARGET_MIPS16)\n \t{\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n@@ -10455,8 +10469,9 @@ mips_issue_rate ()\n {\n   switch (mips_tune)\n     {\n-    case PROCESSOR_R3000:\n-      return 1;\n+    case PROCESSOR_R3000: return 1;\n+    case PROCESSOR_R5400: return 2;\n+    case PROCESSOR_R5500: return 2;\n \n     default:\n       return 1;\n@@ -10466,6 +10481,25 @@ mips_issue_rate ()\n \n }\n \n+/* Implements TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE.  Return true for\n+   processors that have a DFA pipeline description.  */\n+\n+static int\n+mips_use_dfa_pipeline_interface ()\n+{\n+  switch (mips_tune)\n+    {\n+    case PROCESSOR_R5400:\n+    case PROCESSOR_R5500:\n+    case PROCESSOR_SR71000:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n+\n const char *\n mips_emit_prefetch (operands)\n      rtx operands[];"}, {"sha": "a9016b8c0f8044805dcb4be5701f3ac9d64e54e7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -63,14 +63,20 @@ enum processor_type {\n   PROCESSOR_R6000,\n   PROCESSOR_R4000,\n   PROCESSOR_R4100,\n+  PROCESSOR_R4111,\n+  PROCESSOR_R4121,\n   PROCESSOR_R4300,\n+  PROCESSOR_R4320,\n   PROCESSOR_R4600,\n   PROCESSOR_R4650,\n   PROCESSOR_R5000,\n+  PROCESSOR_R5400,\n+  PROCESSOR_R5500,\n   PROCESSOR_R8000,\n   PROCESSOR_R4KC,\n   PROCESSOR_R5KC,\n   PROCESSOR_R20KC,\n+  PROCESSOR_SR71000,\n   PROCESSOR_SB1\n };\n \n@@ -351,19 +357,27 @@ extern void\t\tsbss_section PARAMS ((void));\n /* Architecture target defines.  */\n #define TARGET_MIPS3900             (mips_arch == PROCESSOR_R3900)\n #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)\n-#define TARGET_MIPS4100             (mips_arch == PROCESSOR_R4100)\n+#define TARGET_MIPS4100             (mips_arch == PROCESSOR_R4100\n+#define TARGET_MIPS4121             (mips_arch == PROCESSOR_R4121)\n #define TARGET_MIPS4300             (mips_arch == PROCESSOR_R4300)\n+#define TARGET_MIPS4320             (mips_arch == PROCESSOR_R4320)\n #define TARGET_MIPS4KC              (mips_arch == PROCESSOR_R4KC)\n #define TARGET_MIPS5KC              (mips_arch == PROCESSOR_R5KC)\n+#define TARGET_MIPS5400             (mips_arch == PROCESSOR_R5400)\n+#define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)\n #define TARGET_SB1                  (mips_arch == PROCESSOR_SB1)\n+#define TARGET_SR71K                (mips_arch == PROCESSOR_SR71000)\n \n /* Scheduling target defines.  */\n #define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)\n #define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)\n #define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)\n #define TUNE_MIPS5000               (mips_tune == PROCESSOR_R5000)\n+#define TUNE_MIPS5400               (mips_tune == PROCESSOR_R5400)\n+#define TUNE_MIPS5500               (mips_tune == PROCESSOR_R5500)\n #define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1)\n+#define TUNE_SR71K                  (mips_tune == PROCESSOR_SR71000)\n \n /* Define preprocessor macros for the -march and -mtune options.\n    PREFIX is either _MIPS_ARCH or _MIPS_TUNE, INFO is the selected\n@@ -749,10 +763,15 @@ extern void\t\tsbss_section PARAMS ((void));\n /* This is meant to be redefined in the host dependent files.  */\n #define SUBTARGET_TARGET_OPTIONS\n \n-#define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY && !TARGET_MIPS16)\n+#define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY                    \\\n+\t\t\t\t && !TARGET_SR71K                       \\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* Generate three-operand multiply instructions for SImode.  */\n #define GENERATE_MULT3_SI       ((TARGET_MIPS3900                       \\\n+                                  || TARGET_MIPS4320                    \\\n+                                  || TARGET_MIPS5400                    \\\n+                                  || TARGET_MIPS5500                    \\\n                                   || ISA_MIPS32\t                        \\\n                                   || ISA_MIPS64)                        \\\n                                  && !TARGET_MIPS16)\n@@ -784,12 +803,14 @@ extern void\t\tsbss_section PARAMS ((void));\n /* ISA has branch likely instructions (eg. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n-#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1)\n+#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1                             \\\n+\t\t\t\t && !TARGET_MIPS5500)\n \n /* ISA has the conditional move instructions introduced in mips4.  */\n #define ISA_HAS_CONDMOVE        ((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t                        \\\n \t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+                                 && !TARGET_MIPS5500                    \\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has just the integer condition move instructions (movn,movz) */\n@@ -820,6 +841,7 @@ extern void\t\tsbss_section PARAMS ((void));\n /* ISA has floating-point nmadd and nmsub instructions.  */\n #define ISA_HAS_NMADD_NMSUB\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n+                                 && (!TARGET_MIPS5400 || TARGET_MAD)    \\\n \t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n@@ -832,6 +854,47 @@ extern void\t\tsbss_section PARAMS ((void));\n #define ISA_HAS_DCLZ_DCLO       (ISA_MIPS64\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has three operand multiply instructions that put\n+   the high part in an accumulator: mulhi or mulhiu.  */\n+#define ISA_HAS_MULHI           (TARGET_MIPS5400                        \\\n+                                 || TARGET_MIPS5500                     \\\n+                                 || TARGET_SR71K                        \\\n+                                 )\n+\n+/* ISA has three operand multiply instructions that\n+   negates the result and puts the result in an accumulator.  */\n+#define ISA_HAS_MULS            (TARGET_MIPS5400                        \\\n+                                 || TARGET_MIPS5500                     \\\n+                                 || TARGET_SR71K                        \\\n+                                 )\n+\n+/* ISA has three operand multiply instructions that subtracts the\n+   result from a 4th operand and puts the result in an accumulator.  */\n+#define ISA_HAS_MSAC            (TARGET_MIPS5400                        \\\n+                                 || TARGET_MIPS5500                     \\\n+                                 || TARGET_SR71K                        \\\n+                                 )\n+/* ISA has three operand multiply instructions that  the result\n+   from a 4th operand and puts the result in an accumulator.  */\n+#define ISA_HAS_MACC            (TARGET_MIPS5400                        \\\n+                                 || TARGET_MIPS5500                     \\\n+                                 || TARGET_SR71K                        \\\n+                                 )\n+\n+/* ISA has 32-bit rotate right instruction.  */\n+#define ISA_HAS_ROTR_SI         (TARGET_MIPS5400                        \\\n+                                 || TARGET_MIPS5500                     \\\n+                                 || TARGET_SR71K                        \\\n+                                 )\n+\n+/* ISA has 32-bit rotate right instruction.  */\n+#define ISA_HAS_ROTR_DI         (TARGET_64BIT                           \\\n+                                 && (TARGET_MIPS5400                    \\\n+                                     || TARGET_MIPS5500                 \\\n+                                     || TARGET_SR71K                    \\\n+                                     ))\n+\n+\n /* ISA has data prefetch instruction.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n@@ -3517,7 +3580,9 @@ typedef struct mips_args {\n \t      || TUNE_MIPS3900\t\t\t\t\t\t\\\n \t      || TUNE_MIPS5000)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (4);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000                                        \\\n+\t\t   || TUNE_MIPS5400                                     \\\n+\t\t   || TUNE_MIPS5500)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (5);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (7);\t\t\t\t\t\\\n@@ -3529,7 +3594,9 @@ typedef struct mips_args {\n \t      || TUNE_MIPS3900\t\t\t\t\t\t\\\n \t      || TUNE_MIPS5000)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (5);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000                                        \\\n+\t\t   || TUNE_MIPS5400                                     \\\n+\t\t   || TUNE_MIPS5500)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (6);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (8);\t\t\t\t\t\\\n@@ -3539,6 +3606,8 @@ typedef struct mips_args {\n \treturn COSTS_N_INSNS (12);\t\t\t\t\t\\\n       else if (TUNE_MIPS3900)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (2);\t\t\t\t\t\\\n+     else if (TUNE_MIPS5400 || TUNE_MIPS5500)                           \\\n+        return COSTS_N_INSNS ((xmode == DImode) ? 4 : 3);               \\\n       else if (TUNE_MIPS6000)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (17);\t\t\t\t\t\\\n       else if (TUNE_MIPS5000)\t\t\t\t\t\t\\\n@@ -3558,6 +3627,8 @@ typedef struct mips_args {\n \t    return COSTS_N_INSNS (12);\t\t\t\t\t\\\n \t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (15);\t\t\t\t\t\\\n+         else if (TUNE_MIPS5400 || TUNE_MIPS5500)                       \\\n+            return COSTS_N_INSNS (30);                                  \\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (23);\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n@@ -3567,6 +3638,8 @@ typedef struct mips_args {\n \t  if (TUNE_MIPS3000\t\t\t\t\t\t\\\n               || TUNE_MIPS3900)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (19);\t\t\t\t\t\\\n+          else if (TUNE_MIPS5400 || TUNE_MIPS5500)                      \\\n+            return COSTS_N_INSNS (59);                                  \\\n \t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (16);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n@@ -3584,6 +3657,8 @@ typedef struct mips_args {\n       return COSTS_N_INSNS (38);\t\t\t\t\t\\\n     else if (TUNE_MIPS5000)\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (36);\t\t\t\t\t\\\n+    else if (TUNE_MIPS5400 || TUNE_MIPS5500)                            \\\n+      return COSTS_N_INSNS ((GET_MODE (X) == SImode) ? 42 : 74);        \\\n     else\t\t\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (69);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "10b8b623425b42ebf91daa4caf9574e48236b47b", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 310, "deletions": 50, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -80,11 +80,12 @@\n ;; fcmp\t\tfloating point compare\n ;; fcvt\t\tfloating point convert\n ;; fsqrt\tfloating point square root\n+;; frsqrt       floating point reciprocal square root\n ;; multi\tmultiword sequence (or user asm statements)\n ;; nop\t\tno operation\n \n (define_attr \"type\"\n-  \"unknown,branch,jump,call,load,store,move,xfer,hilo,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,multi,nop\"\n+  \"unknown,branch,jump,call,load,store,move,xfer,hilo,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,multi,nop\"\n   (const_string \"unknown\"))\n \n ;; Main data type used by the insn\n@@ -121,7 +122,7 @@\n \n ;; ??? Fix everything that tests this attribute.\n (define_attr \"cpu\"\n-  \"default,r3000,r3900,r6000,r4000,r4100,r4300,r4600,r4650,r5000,r8000,r4kc,r5kc,r20kc\"\n+  \"default,r3000,r3900,r6000,r4000,r4100,r4121,r4300,r4320,r4600,r4650,r5000,r5400,r5500,r8000,sr71000,r4kc,r5kc,r20kc\"\n   (const (symbol_ref \"mips_cpu_attr\")))\n \n ;; Does the instruction have a mandatory delay slot?\n@@ -206,12 +207,12 @@\n \n (define_function_unit \"memory\" 1 0\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"!r3000,r3900,r4600,r4650,r4100,r4300,r5000\"))\n+       (eq_attr \"cpu\" \"!r3000,r3900,r4600,r4650,r4100,r4121,r4300,r4320,r5000\"))\n   3 0)\n \n (define_function_unit \"memory\" 1 0\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"r3000,r3900,r4600,r4650,r4100,r4300,r5000\"))\n+       (eq_attr \"cpu\" \"r3000,r3900,r4600,r4650,r4100,r4121,r4300,r4320,r5000\"))\n   2 0)\n \n (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"store\") 1 0)\n@@ -224,7 +225,7 @@\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"imul,imadd\")\n-       (eq_attr \"cpu\" \"!r3000,r3900,r4000,r4600,r4650,r4100,r4300,r5000\"))\n+       (eq_attr \"cpu\" \"!r3000,r3900,r4000,r4600,r4650,r4100,r4121,r4300,r4320,r5000\"))\n   17 17)\n \n ;; On them mips16, we want to stronly discourage a mult from appearing\n@@ -251,22 +252,22 @@\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"imul,imadd\")\n-       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100\")))\n+       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100,r4121\")))\n   1 1)\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"imul,imadd\")\n-       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100\")))\n+       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100,r4121\")))\n   4 4)\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"imul,imadd\")\n-       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300,r5000\")))\n+       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300,r4320,r5000\")))\n   5 5)\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"imul,imadd\")\n-       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300\")))\n+       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   8 8)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -276,7 +277,7 @@\n \n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"!r3000,r3900,r4000,r4600,r4650,r4100,r4300,r5000\"))\n+       (eq_attr \"cpu\" \"!r3000,r3900,r4000,r4600,r4650,r4100,r4121,r4300,r4320,r5000\"))\n   38 38)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -297,22 +298,22 @@\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100\")))\n+       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4100,r4121\")))\n   35 35)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100\")))\n+       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4100,r4121\")))\n   67 67)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300\")))\n+       (and (eq_attr \"mode\" \"SI\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   37 37)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300\")))\n+       (and (eq_attr \"mode\" \"DI\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   69 69)\n \n (define_function_unit \"imuldiv\" 1 0\n@@ -333,7 +334,7 @@\n ;; instructions to be processed in the \"imuldiv\" unit.\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fcmp\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300,r5000\"))\n+  (and (eq_attr \"type\" \"fcmp\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300,r4320,r5000\"))\n   3 0)\n \n (define_function_unit \"adder\" 1 1\n@@ -345,7 +346,7 @@\n   1 0)\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300\"))\n+  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300,r4320\"))\n   4 0)\n \n (define_function_unit \"adder\" 1 1\n@@ -358,7 +359,7 @@\n \n (define_function_unit \"adder\" 1 1\n   (and (eq_attr \"type\" \"fabs,fneg\")\n-       (eq_attr \"cpu\" \"!r3000,r3900,r4600,r4650,r4300,r5000\"))\n+       (eq_attr \"cpu\" \"!r3000,r3900,r4600,r4650,r4300,r4320,r5000\"))\n   2 0)\n \n (define_function_unit \"adder\" 1 1\n@@ -368,7 +369,7 @@\n (define_function_unit \"mult\" 1 1\n   (and (eq_attr \"type\" \"fmul\")\n        (and (eq_attr \"mode\" \"SF\")\n-\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300,r5000\")))\n+\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300,r4320,r5000\")))\n   7 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -388,7 +389,7 @@\n \n (define_function_unit \"mult\" 1 1\n   (and (eq_attr \"type\" \"fmul\")\n-       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300,r5000\")))\n+       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4300,r4320,r5000\")))\n   8 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -404,7 +405,7 @@\n (define_function_unit \"divide\" 1 1\n   (and (eq_attr \"type\" \"fdiv\")\n        (and (eq_attr \"mode\" \"SF\")\n-\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300,r5000\")))\n+\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300,r4320,r5000\")))\n   23 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -430,7 +431,7 @@\n (define_function_unit \"divide\" 1 1\n   (and (eq_attr \"type\" \"fdiv\")\n        (and (eq_attr \"mode\" \"DF\")\n-\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300\")))\n+\t    (eq_attr \"cpu\" \"!r3000,r3900,r6000,r4600,r4650,r4300,r4320\")))\n   36 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -450,61 +451,61 @@\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n-       (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300,r5000\")))\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n+       (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300,r4320,r5000\")))\n   54 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n        (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   31 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n        (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r5000\")))\n   21 0)\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n-       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300,r5000\")))\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n+       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600,r4650,r4300,r4320,r5000\")))\n   112 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n        (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   60 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\")\n+  (and (eq_attr \"type\" \"fsqrt,frsqrt\")\n        (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r5000\")))\n   36 0)\n \n ;; R4300 FP instruction classes treated as part of the \"imuldiv\"\n ;; functional unit:\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"r4300\"))\n+  (and (eq_attr \"type\" \"fadd\") (eq_attr \"cpu\" \"r4300,r4320\"))\n   3 3)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"fcmp,fabs,fneg\") (eq_attr \"cpu\" \"r4300\"))\n+  (and (eq_attr \"type\" \"fcmp,fabs,fneg\") (eq_attr \"cpu\" \"r4300,r4320\"))\n   1 1)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   5 5)\n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   8 8)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt\"))\n-       (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300\")))\n+  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt,frsqrt\"))\n+       (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   29 29)\n (define_function_unit \"imuldiv\" 1 0\n-  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt\"))\n-       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300\")))\n+  (and (and (eq_attr \"type\" \"fdiv\") (eq_attr \"type\" \"fsqrt,frsqrt\"))\n+       (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4300,r4320\")))\n   58 58)\n \f\n ;; The following functional units do not use the cpu type, and use\n@@ -533,6 +534,13 @@\n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"SF\"))  54 0)\n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"DF\")) 112 0)\n \f\n+;; Include scheduling descriptions.\n+\n+(include \"5400.md\")\n+(include \"5500.md\")\n+(include \"sr71k.md\")\n+\n+\n ;;\n ;;  ....................\n ;;\n@@ -1686,7 +1694,8 @@\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"\n {\n-  if (!TARGET_MIPS4300)\n+  if (!TARGET_MIPS4300\n+      && !TARGET_MIPS4320)\n     emit_insn (gen_muldf3_internal (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_muldf3_r4300 (operands[0], operands[1], operands[2]));\n@@ -1697,7 +1706,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !TARGET_MIPS4300\"\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+   && !TARGET_MIPS4300 &&!TARGET_MIPS4320\"\n   \"mul.d\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"fmul\")\n    (set_attr \"mode\"\t\"DF\")])\n@@ -1706,7 +1716,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_MIPS4300\"\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n+   && (TARGET_MIPS4300 || TARGET_MIPS4320)\"\n   \"*\n {\n   output_asm_insn (\\\"mul.d\\\\t%0,%1,%2\\\", operands);\n@@ -1725,7 +1736,7 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\n {\n-  if (!TARGET_MIPS4300)\n+  if (!TARGET_MIPS4300 && !TARGET_MIPS4320)\n     emit_insn( gen_mulsf3_internal (operands[0], operands[1], operands[2]));\n   else\n     emit_insn( gen_mulsf3_r4300 (operands[0], operands[1], operands[2]));\n@@ -1736,7 +1747,8 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_MIPS4300\"\n+  \"TARGET_HARD_FLOAT\n+   && !TARGET_MIPS4300 && !TARGET_MIPS4320\"\n   \"mul.s\\\\t%0,%1,%2\"\n   [(set_attr \"type\"\t\"fmul\")\n    (set_attr \"mode\"\t\"SF\")])\n@@ -1745,7 +1757,8 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_MIPS4300\"\n+  \"TARGET_HARD_FLOAT\n+   && (TARGET_MIPS4300 || TARGET_MIPS4320)\"\n   \"*\n {\n   output_asm_insn (\\\"mul.s\\\\t%0,%1,%2\\\", operands);\n@@ -1794,6 +1807,9 @@\n   if (which_alternative == 1)\n     return \\\"mult\\\\t%1,%2\\\";\n   if (TARGET_MAD\n+      || TARGET_MIPS5400\n+      || TARGET_MIPS5500\n+      || TARGET_MIPS4320\n       || ISA_MIPS32\n       || ISA_MIPS64)\n     return \\\"mul\\\\t%0,%1,%2\\\";\n@@ -1858,15 +1874,34 @@\n    (clobber (match_scratch:SI 6 \"=a,a,a\"))\n    (clobber (match_scratch:SI 7 \"=X,X,d\"))]\n   \"(TARGET_MIPS3900\n+   || TARGET_MIPS4320\n+   || TARGET_MIPS5400\n+   || TARGET_MIPS5500\n    || ISA_HAS_MADD_MSUB)\n    && !TARGET_MIPS16\"\n   \"*\n {\n   static const char *const madd[] = { \\\"madd\\\\t%1,%2\\\", \\\"madd\\\\t%0,%1,%2\\\" };\n+  static const char *const macc[] = { \\\"macc\\\\t$0,%1,%2\\\", \\\"macc\\\\t%0,%1,%2\\\" };\n   if (which_alternative == 2)\n     return \\\"#\\\";\n   if (ISA_HAS_MADD_MSUB && which_alternative != 0)\n     return \\\"#\\\";\n+\n+  if (TARGET_MIPS5400)\n+    return macc[which_alternative];\n+\n+  if (TARGET_MIPS5500)\n+    {\n+      if (which_alternative == 0)\n+        return madd[0];\n+      else\n+        return macc[which_alternative];\n+    }\n+\n+  if (TARGET_MIPS4320)\n+    return macc[which_alternative];\n+\n   return madd[which_alternative];\n }\"\n   [(set_attr \"type\"\t\"imadd,imadd,multi\")\n@@ -1981,6 +2016,38 @@\n    (set (match_dup 0) (match_dup 1))]\n   \"\")\n \n+(define_insn \"*muls\"\n+  [(set (match_operand:SI                  0 \"register_operand\" \"=l,d\")\n+        (neg:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n+                         (match_operand:SI 2 \"register_operand\" \"d,d\"))))\n+   (clobber (match_scratch:SI              3                    \"=h,h\"))\n+   (clobber (match_scratch:SI              4                    \"=a,a\"))\n+   (clobber (match_scratch:SI              5                    \"=X,l\"))]\n+  \"ISA_HAS_MULS && TARGET_64BIT\"\n+  \"@\n+   muls\\\\t$0,%1,%2\n+   muls\\\\t%0,%1,%2\"\n+  [(set_attr \"type\"     \"imul\")\n+   (set_attr \"mode\"     \"SI\")])\n+\n+;; See comments above for mul_acc_si.\n+(define_insn \"*msac\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l,*d,*d\")\n+        (minus:SI (match_operand:SI 1 \"register_operand\" \"0,l,*d\")\n+                  (mult:SI (match_operand:SI 2 \"register_operand\" \"d,d,d\")\n+                           (match_operand:SI 3 \"register_operand\" \"d,d,d\"))))\n+   (clobber (match_scratch:SI 4 \"=h,h,h\"))\n+   (clobber (match_scratch:SI 5 \"=X,1,l\"))\n+   (clobber (match_scratch:SI 6 \"=a,a,a\"))\n+   (clobber (match_scratch:SI 7 \"=X,X,d\"))]\n+  \"ISA_HAS_MSAC && TARGET_64BIT\"\n+  \"@\n+   msac\\\\t$0,%2,%3\n+   msac\\\\t%0,%2,%3\n+   #\"\n+  [(set_attr \"type\"     \"imadd,imadd,multi\")\n+   (set_attr \"mode\"     \"SI\")\n+   (set_attr \"length\"   \"4,4,8\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -2137,6 +2204,67 @@\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")])\n \n+;; widening multiply with accumulator and/or negation\n+;; These don't match yet for zero-extending; too complex for combine?\n+;; Possible additions we should have:\n+;;  \"=x\" variants for when !TARGET_64BIT ?\n+;;  all-d alternatives with splits like pure SImode versions\n+(define_insn \"*muls_di\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+        (neg:DI\n+         (mult:DI (match_operator:DI 3 \"extend_operator\"\n+                                     [(match_operand:SI 1 \"register_operand\" \"d\")])\n+                  (match_operator:DI 4 \"extend_operator\"\n+                                     [(match_operand:SI 2 \"register_operand\" \"d\")]))))\n+   (clobber (match_scratch:SI 5 \"=h\"))\n+   (clobber (match_scratch:SI 6 \"=l\"))]\n+  \"TARGET_64BIT\n+   && ISA_HAS_MULS\n+   && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"muls\\\\t$0,%1,%2\\\";\n+  else\n+    return \\\"mulsu\\\\t$0,%1,%2\\\";\n+}\"\n+  [(set_attr \"type\"     \"imul\")\n+   (set_attr \"length\"   \"4\")\n+   (set_attr \"mode\"     \"SI\")])\n+\n+(define_insn \"*msac_di\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+        (minus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n+                  (mult:DI (match_operator:DI 4 \"extend_operator\"\n+                                              [(match_operand:SI 1 \"register_operand\" \"d\")])\n+                           (match_operator:DI 5 \"extend_operator\"\n+                                              [(match_operand:SI 2 \"register_operand\" \"d\")]))))\n+   (clobber (match_scratch:SI 6 \"=h\"))\n+   (clobber (match_scratch:SI 7 \"=l\"))]\n+  \"TARGET_64BIT\n+   && ISA_HAS_MSAC\n+   && GET_CODE (operands[4]) == GET_CODE (operands[5])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[4]) == SIGN_EXTEND)\n+     {\n+       if (TARGET_MIPS5500)\n+         return \\\"msub\\\\t%1,%2\\\";\n+       else\n+    return \\\"msac\\\\t$0,%1,%2\\\";\n+    }\n+  else\n+     {\n+       if (TARGET_MIPS5500)\n+         return \\\"msubu\\\\t%1,%2\\\";\n+       else\n+    return \\\"msacu\\\\t$0,%1,%2\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"     \"imadd\")\n+   (set_attr \"length\"   \"4\")\n+   (set_attr \"mode\"     \"SI\")])\n+\n ;; _highpart patterns\n (define_expand \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n@@ -2154,7 +2282,10 @@\n #else\n   rtx (*genfn) ();\n #endif\n-  genfn = gen_xmulsi3_highpart_internal;\n+ if (ISA_HAS_MULHI && TARGET_64BIT)\n+    genfn = gen_xmulsi3_highpart_mulhi;\n+ else\n+    genfn = gen_xmulsi3_highpart_internal;\n   emit_insn ((*genfn) (operands[0], operands[1], operands[2], dummy,\n \t\t       dummy, dummy2));\n   DONE;\n@@ -2176,7 +2307,10 @@\n #else\n   rtx (*genfn) ();\n #endif\n-  genfn = gen_xmulsi3_highpart_internal;\n+  if (ISA_HAS_MULHI && TARGET_64BIT)\n+    genfn = gen_xmulsi3_highpart_mulhi;\n+  else\n+    genfn = gen_xmulsi3_highpart_internal;\n   emit_insn ((*genfn) (operands[0], operands[1], operands[2], dummy,\n \t\t       dummy, dummy2));\n   DONE;\n@@ -2204,6 +2338,64 @@\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")])\n \n+(define_insn \"xmulsi3_highpart_mulhi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n+        (truncate:SI\n+         (match_operator:DI 5 \"highpart_shift_operator\"\n+                            [(mult:DI (match_operator:DI 3 \"extend_operator\"\n+                                                         [(match_operand:SI 1 \"register_operand\" \"d,d\")])\n+                                      (match_operator:DI 4 \"extend_operator\"\n+                                                         [(match_operand:SI 2 \"register_operand\" \"d,d\")]))\n+                             (const_int 32)])))\n+   (clobber (match_scratch:SI 6 \"=l,l\"))\n+   (clobber (match_scratch:SI 7 \"=a,a\"))\n+   (clobber (match_scratch:SI 8 \"=X,h\"))]\n+  \"ISA_HAS_MULHI\n+   && TARGET_64BIT\n+   && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  static char const *const sign[] = { \\\"mult\\\\t%1,%2\\\",  \\\"mulhi\\\\t%0,%1,%2\\\"  };\n+  static char const *const zero[] = { \\\"multu\\\\t%1,%2\\\", \\\"mulhiu\\\\t%0,%1,%2\\\" };\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return sign[which_alternative];\n+  else\n+    return zero[which_alternative];\n+}\"\n+  [(set_attr \"type\"     \"imul\")\n+   (set_attr \"mode\"     \"SI\")\n+   (set_attr \"length\"   \"4\")])\n+\n+(define_insn \"*xmulsi3_neg_highpart_mulhi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n+        (truncate:SI\n+         (match_operator:DI 5 \"highpart_shift_operator\"\n+                            [(neg:DI\n+                              (mult:DI (match_operator:DI 3 \"extend_operator\"\n+                                                          [(match_operand:SI 1 \"register_operand\" \"d,d\")])\n+                                       (match_operator:DI 4 \"extend_operator\"\n+                                                          [(match_operand:SI 2 \"register_operand\" \"d,d\")])))\n+                             (const_int 32)])))\n+   (clobber (match_scratch:SI 6 \"=l,l\"))\n+   (clobber (match_scratch:SI 7 \"=a,a\"))\n+   (clobber (match_scratch:SI 8 \"=X,h\"))]\n+  \"ISA_HAS_MULHI\n+   && TARGET_64BIT\n+   && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  static char const *const sign[] = { \\\"mulshi\\\\t$0,%1,%2\\\",  \\\"mulshi\\\\t%0,%1,%2\\\"  };\n+  static char const *const zero[] = { \\\"mulshiu\\\\t$0,%1,%2\\\", \\\"mulshiu\\\\t%0,%1,%2\\\" };\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return sign[which_alternative];\n+  else\n+    return zero[which_alternative];\n+}\"\n+  [(set_attr \"type\"     \"imul\")\n+   (set_attr \"mode\"     \"SI\")\n+   (set_attr \"length\"   \"4\")])\n+\n+\n (define_insn \"smuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n \t(truncate:DI\n@@ -2280,10 +2472,33 @@\n    && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n   \"*\n {\n-  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n-    return \\\"mad\\\\t%1,%2\\\";\n+  if (TARGET_MAD)\n+    {\n+      if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+        return \\\"mad\\\\t%1,%2\\\";\n+      else\n+        return \\\"madu\\\\t%1,%2\\\";\n+    }\n+  else if (ISA_HAS_MACC)\n+    {\n+      if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+        {\n+          if (TARGET_MIPS5500)\n+            return \\\"madd\\\\t%1,%2\\\";\n+          else\n+        return \\\"macc\\\\t$0,%1,%2\\\";\n+        }\n+      else\n+        {\n+          if (TARGET_MIPS5500)\n+            return \\\"maddu\\\\t%1,%2\\\";\n+          else\n+        return \\\"maccu\\\\t$0,%1,%2\\\";\n+        }\n+    }\n   else\n-    return \\\"madu\\\\t%1,%2\\\";\n+    abort ();\n+\n }\"\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")])\n@@ -3016,7 +3231,7 @@\n \t\t(sqrt:DF (match_operand:DF 2 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_FP4 && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && flag_unsafe_math_optimizations\"\n   \"rsqrt.d\\\\t%0,%2\"\n-  [(set_attr \"type\"\t\"fsqrt\")\n+  [(set_attr \"type\"\t\"frsqrt\")\n    (set_attr \"mode\"\t\"DF\")])\n \n (define_insn \"\"\n@@ -3025,7 +3240,7 @@\n \t\t(sqrt:SF (match_operand:SF 2 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_FP4 && TARGET_HARD_FLOAT && flag_unsafe_math_optimizations\"\n   \"rsqrt.s\\\\t%0,%2\"\n-  [(set_attr \"type\"\t\"fsqrt\")\n+  [(set_attr \"type\"\t\"frsqrt\")\n    (set_attr \"mode\"\t\"SF\")])\n \n \f\n@@ -7578,6 +7793,51 @@ move\\\\t%0,%z4\\\\n\\\\\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n+(define_insn \"rotrsi3\"\n+  [(set (match_operand:SI              0 \"register_operand\" \"=d\")\n+        (rotatert:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+                     (match_operand:SI 2 \"arith_operand\"    \"dn\")))]\n+  \"ISA_HAS_ROTR_SI\"\n+  \"*\n+{\n+  if (TARGET_SR71K && GET_CODE (operands[2]) != CONST_INT)\n+    return \\\"rorv\\\\t%0,%1,%2\\\";\n+\n+  if ((GET_CODE (operands[2]) == CONST_INT)\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) >= 32))\n+    abort ();\n+\n+  return \\\"ror\\\\t%0,%1,%2\\\";\n+}\"\n+  [(set_attr \"type\"     \"arith\")\n+   (set_attr \"mode\"     \"SI\")])\n+\n+(define_insn \"rotrdi3\"\n+  [(set (match_operand:DI              0 \"register_operand\" \"=d\")\n+        (rotatert:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                     (match_operand:DI 2 \"arith_operand\"    \"dn\")))]\n+  \"ISA_HAS_ROTR_DI\"\n+  \"*\n+{\n+   if (TARGET_SR71K)\n+    {\n+      if (GET_CODE (operands[2]) != CONST_INT)\n+        return \\\"drorv\\\\t%0,%1,%2\\\";\n+\n+      if (INTVAL (operands[2]) >= 32 && INTVAL (operands[2]) <= 63)\n+        return \\\"dror32\\\\t%0,%1,%2\\\";\n+    }\n+\n+  if ((GET_CODE (operands[2]) == CONST_INT)\n+      && (INTVAL (operands[2]) < 0 || INTVAL (operands[2]) >= 64))\n+    abort ();\n+\n+  return \\\"dror\\\\t%0,%1,%2\\\";\n+}\"\n+  [(set_attr \"type\"     \"arith\")\n+   (set_attr \"mode\"     \"DI\")])\n+\n+\n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n (define_split"}, {"sha": "faeeebc788b376c97d556a382718e6526cd0ceac", "filename": "gcc/config/mips/sr71k.md", "status": "added", "additions": 362, "deletions": 0, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,362 @@\n+;; .........................\n+;;\n+;; DFA-based pipeline description for Sandcraft SR3 (MIPS64 based)\n+;;\n+;; The SR3 is describeds as:\n+;;     - nine-stage pipeline, insn buffering with out-of-order issue to\n+;;       multiple function units, with a average dispatch rate of 2\n+;;       insn.s per cycle (max 6 insns: 2 fpu, 4 cpu).\n+;;\n+;;  The details on this are scant except for a diagram in\n+;;  Chap. 6 of Rev. 1.0 SR3 Spec.\n+;;\n+;;  The model employed below is designed to closely approximate the\n+;;  published latencies. Emulation of out-of-order issue and the insn\n+;;  buffering is done via a VLIW dispatch style (with a packing of 6 insns);\n+;;  the function unit reservations restrictions (define_*_set) are\n+;;  contrived to support published timings.\n+;;\n+;; Reference:\n+;;   \"SR3 Microporocessor Specification, System development information,\"\n+;;   Revision 1.0, 13 December 2000.\n+;;\n+;;\n+;; Reservation model is based on:\n+;;   1) Figure 6-1, from the 1.0 specicification.\n+;;   2) Chapter 19, from the 1.0 specificication.\n+;;   3) following questions(Red Hat)/answers(Sandcraft):\n+;;     RH> From Section 19.1\n+;;     RH>      1) In terms of figure 6-1, are all the instructions in\n+;;     RH>         table 19-1 restricted\n+;;     RH>         to ALUx? When ALUx is not in use for an instruction in table;;     RH>          19-1 is\n+;;     RH>         it fully compatible with all insns that issue to ALUy?\n+;;\n+;;     Yes, all the instructions in Table 19-1 only go to ALUX, and all the\n+;;     instructions that can be issued to ALUY can also be issued to ALUX.\n+;;\n+;;\n+;;     RH> From Section 19.2\n+;;     RH>      2) Explain conditional moves execution path (in terms of\n+;;     RH>      figure 6-1)\n+;;\n+;;     Conditional move of integer registers (based on floating point condition\n+;;     codes or integer register value) go to ALUX or ALUY.\n+;;\n+;;     RH>      3) Explain floating point store execution path (in terms of\n+;;     RH>      figure 6-1)\n+;;\n+;;     Floating point stores go to Ld/St and go to MOV in the floating point\n+;;     pipeline.\n+;;\n+;;     Floating point loads go to Ld/St and go to LOAD in the floating point\n+;;     pipeline.\n+;;\n+;;     RH>      4) Explain branch on floating condition (in terms of figure 6-1);;\n+;;     Branch on floating condition go to BRU.\n+;;\n+;;     RH>      5) Is the column for single RECIP instruction latency correct?\n+;;     RH>      What about for RSQRT single and double?\n+;;\n+;;     The latency/repeat for RECIP and RSQRT are correct.\n+;;\n+\n+;;\n+;; Use four automata to isolate long latency operations, and to\n+;; reduce the complexity of cpu+fpu, reducing space.\n+;;\n+(define_automaton \"sr71_cpu, sr71_cpu1, sr71_cp1, sr71_cp2, sr71_fextra, sr71_imacc\")\n+\n+;;  feeders for CPU function units and feeders for fpu (CP1 interface)\n+(define_cpu_unit \"sr_iss0,sr_iss1,sr_iss2,sr_iss3,sr_iss4,sr_iss5\" \"sr71_cpu\")\n+\n+;; CPU function units\n+(define_cpu_unit \"ipu_bru\"       \"sr71_cpu1\")\n+(define_cpu_unit \"ipu_alux\"      \"sr71_cpu1\")\n+(define_cpu_unit \"ipu_aluy\"      \"sr71_cpu1\")\n+(define_cpu_unit \"ipu_ldst\"      \"sr71_cpu1\")\n+(define_cpu_unit \"ipu_macc_iter\" \"sr71_imacc\")\n+\n+\n+;; Floating-point unit (Co-processor interface 1).\n+(define_cpu_unit \"fpu_mov\"          \"sr71_cp1\")\n+(define_cpu_unit \"fpu_load\"         \"sr71_cp1\")\n+(define_cpu_unit \"fpu_fpu\"          \"sr71_cp2\")\n+\n+;; fictitous unit to track long float insns with separate automaton\n+(define_cpu_unit \"fpu_iter\"         \"sr71_fextra\")\n+\n+\n+;;\n+;; Define common execution path (reservation) combinations\n+;;\n+\n+;;\n+(define_reservation \"cpu_iss\"         \"sr_iss0|sr_iss1|sr_iss2|sr_iss3\")\n+\n+;; two cycles are used for instruction using the fpu as it runs\n+;; at half the clock speed of the cpu. By adding an extra cycle\n+;; to the issue units, the default/minimum \"repeat\" dispatch delay is\n+;; accounted for all insn.s\n+(define_reservation \"cp1_iss\"         \"(sr_iss4*2)|(sr_iss5*2)\")\n+\n+(define_reservation \"serial_dispatch\" \"sr_iss0+sr_iss1+sr_iss2+sr_iss3+sr_iss4+sr_iss5\")\n+\n+;; Simulate a 6 insn VLIW dispatch, 1 cycle in dispatch followed by\n+;; reservation of function unit.\n+(define_reservation \"ri_insns\"         \"cpu_iss,(ipu_alux|ipu_aluy)\")\n+(define_reservation \"ri_mem\"           \"cpu_iss,ipu_ldst\")\n+(define_reservation \"ri_alux\"          \"cpu_iss,ipu_alux\")\n+(define_reservation \"ri_branch\"        \"cpu_iss,ipu_bru\")\n+\n+(define_reservation \"rf_insn\"          \"cp1_iss,fpu_fpu\")\n+(define_reservation \"rf_ldmem\"         \"cp1_iss,fpu_load\")\n+\n+; simultaneous reservation of pseudo-unit keeps cp1 fpu tied\n+; up until long cycle insn is finished...\n+(define_reservation \"rf_multi1\"        \"rf_insn+fpu_iter\")\n+\n+;;\n+;; The ordering of the instruction-execution-path/resource-usage\n+;; descriptions (also known as reservation RTL) is roughly ordered\n+;; based on the define attribute RTL for the \"type\" classification.\n+;; When modifying, remember that the first test that matches is the\n+;; reservation used!\n+;;\n+\n+\n+(define_insn_reservation \"ir_sr70_unknown\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"unknown\"))\n+                         \"serial_dispatch\")\n+\n+\n+;; Assume prediction fails.\n+(define_insn_reservation \"ir_sr70_branch\"\n+                               6\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"branch,jump,call\"))\n+                         \"ri_branch\")\n+\n+(define_insn_reservation \"ir_sr70_load\"\n+                               2\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"load\")\n+                                    (eq_attr \"mode\" \"!SF,DF,FPSW\")))\n+                         \"ri_mem\")\n+\n+(define_insn_reservation \"ir_sr70_store\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"store\")\n+                                    (eq_attr \"mode\" \"!SF,DF,FPSW\")))\n+                         \"ri_mem\")\n+\n+\n+;;\n+;; float loads/stores flow through both cpu and cp1...\n+;;\n+(define_insn_reservation \"ir_sr70_fload\"\n+                               9\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"load\")\n+                                    (eq_attr \"mode\" \"SF,DF\")))\n+                         \"(cpu_iss+cp1_iss),(ri_mem+rf_ldmem)\")\n+\n+(define_insn_reservation \"ir_sr70_fstore\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"store\")\n+                                    (eq_attr \"mode\" \"SF,DF\")))\n+                         \"(cpu_iss+cp1_iss),(fpu_mov+ri_mem)\")\n+\n+\n+;; This reservation is for conditional move based on integer\n+;; or floating point CC.  This could probably use some refinement\n+;; as \"move\" type attr seems to be overloaded in rtl.\n+(define_insn_reservation \"ir_sr70_move\"\n+                               4\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"move\"))\n+                         \"ri_insns\")\n+\n+;; Try to discriminate move-from-cp1 versus move-to-cp1 as latencies\n+;; are different. Like float load/store, these insns use multiple\n+;; resources simultaneously\n+(define_insn_reservation \"ir_sr70_xfer_from\"\n+                               6\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"xfer\")\n+                                    (eq_attr \"mode\" \"!SF,DF,FPSW\")))\n+                         \"(cpu_iss+cp1_iss),(fpu_mov+ri_mem)\")\n+\n+(define_insn_reservation \"ir_sr70_xfer_to\"\n+                               9\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"xfer\")\n+                                    (eq_attr \"mode\" \"SF,DF\")))\n+                         \"(cpu_iss+cp1_iss),(ri_mem+rf_ldmem)\")\n+\n+(define_insn_reservation \"ir_sr70_hilo\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"hilo\"))\n+                         \"ri_insns\")\n+\n+(define_insn_reservation \"ir_sr70_arith\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"arith,darith\"))\n+                         \"ri_insns\")\n+\n+;; emulate repeat (dispatch stall) by spending extra cycle(s) in\n+;; in iter unit\n+(define_insn_reservation \"ir_sr70_imul_si\"\n+                                 4\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"imul,imadd\")\n+                                    (eq_attr \"mode\" \"SI\")))\n+                         \"ri_alux,ipu_alux,ipu_macc_iter\")\n+\n+(define_insn_reservation \"ir_sr70_imul_di\"\n+                                 6\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"imul,imadd\")\n+                                    (eq_attr \"mode\" \"DI\")))\n+                         \"ri_alux,ipu_alux,(ipu_macc_iter*3)\")\n+\n+;; Divide algorithm is early out with best latency of 7 pcycles.\n+;; Use worst case for scheduling purposes.\n+(define_insn_reservation \"ir_sr70_idiv_si\"\n+                                 41\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"idiv\")\n+                                    (eq_attr \"mode\" \"SI\")))\n+                         \"ri_alux,ipu_alux,(ipu_macc_iter*38)\")\n+\n+(define_insn_reservation \"ir_sr70_idiv_di\"\n+                                 73\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"idiv\")\n+                                    (eq_attr \"mode\" \"DI\")))\n+                         \"ri_alux,ipu_alux,(ipu_macc_iter*70)\")\n+\n+(define_insn_reservation \"ir_sr70_icmp\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"icmp\"))\n+                         \"ri_insns\")\n+\n+;; extra reservations of fpu_fpu are for repeat latency\n+(define_insn_reservation \"ir_sr70_fadd_sf\"\n+                               8\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fadd\")\n+                                    (eq_attr \"mode\" \"SF\")))\n+                         \"rf_insn,fpu_fpu\")\n+\n+(define_insn_reservation \"ir_sr70_fadd_df\"\n+                               10\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fadd\")\n+                                    (eq_attr \"mode\" \"DF\")))\n+                         \"rf_insn,fpu_fpu\")\n+\n+;; Latencies for MADD,MSUB, NMADD, NMSUB assume the Multiply is fused\n+;; with the sub or add.\n+(define_insn_reservation \"ir_sr70_fmul_sf\"\n+                               8\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fmul,fmadd\")\n+                                    (eq_attr \"mode\" \"SF\")))\n+                         \"rf_insn,fpu_fpu\")\n+\n+;; tie up the fpu unit to emulate the balance for the \"repeat\n+;; rate\" of 8 (2 are spent in the iss unit)\n+(define_insn_reservation \"ir_sr70_fmul_df\"\n+                               16\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fmul,fmadd\")\n+                                    (eq_attr \"mode\" \"DF\")))\n+                         \"rf_insn,fpu_fpu*6\")\n+\n+\n+;; RECIP insn uses same type attr as div, and for SR3, has same\n+;; timings for double. However, single RECIP has a latency of\n+;; 28 -- only way to fix this is to introduce new insn attrs.\n+;; cycles spent in iter unit are designed to satisfy balance\n+;; of \"repeat\" latency after insn uses up rf_multi1 reservation\n+(define_insn_reservation \"ir_sr70_fdiv_sf\"\n+                                60\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fdiv\")\n+                                    (eq_attr \"mode\" \"SF\")))\n+                         \"rf_multi1+(fpu_iter*51)\")\n+\n+(define_insn_reservation \"ir_sr70_fdiv_df\"\n+                                120\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fdiv\")\n+                                    (eq_attr \"mode\" \"DF\")))\n+                         \"rf_multi1+(fpu_iter*109)\")\n+\n+(define_insn_reservation \"ir_sr70_fabs\"\n+                               4\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"fabs,fneg\"))\n+                         \"rf_insn,fpu_fpu\")\n+\n+(define_insn_reservation \"ir_sr70_fcmp\"\n+                               10\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"fcmp\"))\n+                         \"rf_insn,fpu_fpu\")\n+\n+;; \"fcvt\" type attribute covers a number of diff insns, most have the same\n+;; latency descriptions, a few vary. We use the\n+;; most common timing (which is also worst case).\n+(define_insn_reservation \"ir_sr70_fcvt\"\n+                               12\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"fcvt\"))\n+                         \"rf_insn,fpu_fpu*4\")\n+\n+(define_insn_reservation \"ir_sr70_fsqrt_sf\"\n+                                62\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fsqrt\")\n+                                    (eq_attr \"mode\" \"SF\")))\n+                         \"rf_multi1+(fpu_iter*53)\")\n+\n+(define_insn_reservation \"ir_sr70_fsqrt_df\"\n+                                122\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"fsqrt\")\n+                                    (eq_attr \"mode\" \"DF\")))\n+                         \"rf_multi1+(fpu_iter*111)\")\n+\n+(define_insn_reservation \"ir_sr70_frsqrt_sf\"\n+                                48\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"frsqrt\")\n+                                    (eq_attr \"mode\" \"SF\")))\n+                         \"rf_multi1+(fpu_iter*39)\")\n+\n+(define_insn_reservation \"ir_sr70_frsqrt_df\"\n+                                240\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (and (eq_attr \"type\" \"frsqrt\")\n+                                    (eq_attr \"mode\" \"DF\")))\n+                         \"rf_multi1+(fpu_iter*229)\")\n+\n+(define_insn_reservation \"ir_sr70_multi\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"multi\"))\n+                         \"serial_dispatch\")\n+\n+(define_insn_reservation \"ir_sr70_nop\"\n+                               1\n+                          (and (eq_attr \"cpu\" \"sr71000\")\n+                               (eq_attr \"type\" \"nop\"))\n+                         \"ri_insns\")"}, {"sha": "f2dda07cc8fd27f4ba16c01c926372723c87e736", "filename": "gcc/config/mips/t-sr71k", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Ft-sr71k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Ft-sr71k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sr71k?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,86 @@\n+CONFIG2_H       = $(srcdir)/config/mips/elf.h $(srcdir)/config/mips/mips.h\n+\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n+# and does not need anything from libgcc1.a.\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n+\n+# We must build libgcc2.a with -G 0, in case the user wants to link\n+# without the $gp register.\n+TARGET_LIBGCC2_CFLAGS = -G 0\n+\n+# fp-bit and dp-bit are really part of libgcc1, but this will cause\n+# them to be built correctly, so... [taken from t-sparclite]\n+# We want fine grained libraries, so use the new code to build the\n+# floating point emulation libraries.\n+FPBIT = fp-bit.c\n+DPBIT = dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifdef __MIPSEL__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifdef __MIPSEL__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build the libraries for both hard and soft floating point\n+\n+MULTILIB_OPTIONS = EL/EB msoft-float mips2\n+MULTILIB_DIRNAMES = el eb soft-float mips2\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+# Add additional dependencies to recompile selected modules whenever the\n+# tm.h file changes.  The files compiled are:\n+#\n+#\tgcc.c\t\t(*_SPEC changes)\n+#\ttoplev.c\t(new switches + assembly output changes)\n+#\tsdbout.c\t(debug format changes)\n+#\tdbxout.c\t(debug format changes)\n+#\tdwarfout.c\t(debug format changes)\n+#\tfinal.c\t\t(assembly output changes)\n+#\tvarasm.c\t(assembly output changes)\n+#\tcse.c\t\t(cost functions)\n+#\tinsn-output.c\t(possible ifdef changes in tm.h)\n+#\tregclass.c\t(fixed/call used register changes)\n+#\tcccp.c\t\t(new preprocessor macros, -v version #)\n+#\texplow.c\t(GO_IF_LEGITIMATE_ADDRESS)\n+#\trecog.c\t\t(GO_IF_LEGITIMATE_ADDRESS)\n+#\treload.c\t(GO_IF_LEGITIMATE_ADDRESS)\n+\n+gcc.o: $(CONFIG2_H)\n+toplev.o: $(CONFIG2_H)\n+sdbout.o: $(CONFIG2_H)\n+dbxout.o: $(CONFIG2_H)\n+dwarfout.o: $(CONFIG2_H)\n+final.o: $(CONFIG2_H)\n+varasm.o: $(CONFIG2_H)\n+cse.o: $(CONFIG2_H)\n+insn-output.o: $(CONFIG2_H)\n+regclass.o: $(CONFIG2_H)\n+cccp.o: $(CONFIG2_H)\n+explow.o: $(CONFIG2_H)\n+recog.o: $(CONFIG2_H)\n+reload.o: $(CONFIG2_H)"}, {"sha": "7af78ab21f79dfedbbeea8be2875bfeca355e488", "filename": "gcc/config/mips/t-vr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Ft-vr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Ft-vr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-vr?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,96 @@\n+# BEGIN boiler-plate MIPS stuff\n+\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0\n+\n+# We must build libgcc2.a with -G 0, in case the user wants to link\n+# without the $gp register.\n+TARGET_LIBGCC2_CFLAGS = -G 0\n+\n+LIB2FUNCS_EXTRA = $(srcdir)/config/mips/mips16.S\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n+\n+# END boiler-plate\n+\n+# Endianness: EB or EL\n+#\n+# ABIs: mabi=32\n+#\tmabi=o64\n+#\tmabi=eabi\n+#\tmeabi=eabi/mlong32\n+#\tmabi=eabi/mgp32\n+#\tmabi=eabi/mgp32/mlong64\n+#\n+# Architecture: march=vr5400\n+#\t\tmarch=vr4100\n+#\t\tmarch=vr4100/mips16\n+#\n+# Total: 2 * 6 * 3 = 36 multilibs.\n+MULTILIB_OPTIONS =\t\t\t\\\n+\tEL/EB\t\t\t\t\\\n+\tmabi=32/mabi=o64/mabi=eabi\t\\\n+\tmgp32\t\t\t\t\\\n+\tmlong32/mlong64\t\t\t\\\n+\tmips16\t\t\t\t\\\n+\tmarch=vr5400/march=vr4100\n+\n+MULTILIB_DIRNAMES =\t\\\n+\tel eb\t\t\\\n+\to32 o64 eabi\t\\\n+\tgp32\t\t\\\n+\tlong32 long64\t\\\n+\tmips16\t\t\\\n+\tvr5400 vr4100\n+\n+MULTILIB_MATCHES = EL=mel EB=meb\n+\n+# Assume a 4000-series is the default: we'd need a *mips16 entry if\n+# the default processor didn't support mips16.  Also assume o64,\n+# which means we need to extend the o64 exceptions to combinations\n+# without a -mabi flag.\n+MULTILIB_EXCEPTIONS =\t\t\t\t\\\n+\t*mabi=32/mlong64*\t\t\t\\\n+\t*mabi=32/mgp32/mlong64*\t\t\t\\\n+\t*mabi=o64/mgp32*\t\t\t\\\n+\t*mabi=o64/mlong64*\t\t\t\\\n+\tmgp32* E[LB]/mgp32*\t\t\t\\\n+\tmlong64* E[LB]/mlong64*\t\t\t\\\n+\t*mips16/march=vr5*\n+\n+# The real value of this macro is very long, so generate it using a\n+# shell fragment.  The idea is to tell the GCC driver how -mabi,\n+# -mgp32, -mlong32 and -mlong64 interact, so that it choses the right\n+# library when some options are specified redundantly (for example,\n+# -mabi=32 -mgp32).\n+\n+# The core equalities are listed after \"for changes in \".  The first\n+# entry assumes o64 is the default ABI.\n+MULTILIB_REDUNDANT_DIRS=` \\\n+\tfor endian in '' 'el' 'eb'; do\t\t\t\t\t\\\n+\t  for arch in '' 'vr5400' 'vr4100'\t\t\t\t\\\n+\t\t      'mips16' 'mips16/vr100'; do\t\t\t\\\n+\t    for changes in long32=\t\t\t\t\t\\\n+\t\t\t   o32/gp32=o32\t\t\t\t\t\\\n+\t\t\t   o32/gp32/long32=o32\t\t\t\t\\\n+\t\t\t   o32/long32=o32\t\t\t\t\\\n+\t\t\t   o64/long32=o64\t\t\t\t\\\n+\t\t\t   eabi/gp32/long32=eabi/gp32\t\t\t\\\n+\t\t\t   eabi/long64=eabi; do\t\t\t\t\\\n+\t      from=\\`echo \\$${changes} | sed 's/=.*//'\\`;\t\t\\\n+\t      to=\\`echo \\$${changes} | sed 's/.*=//'\\`;\t\t\t\\\n+\t      echo \\$$endian \\$$from \\$$arch=\\$$endian \\$$to \\$$arch\t\\\n+\t\t| sed -e 's: *= *:=:'\t\t\t\t\t\\\n+\t\t      -e 's:  *:/:g'\t\t\t\t\t\\\n+\t\t      -e 's:=$$:=.:';\t\t\t\t\t\\\n+\t    done;\t\t\t\t\t\t\t\\\n+\t  done;\t\t\t\t\t\t\t\t\\\n+\tdone`"}, {"sha": "4bdc245347237f247c7b18f91049d7a5870f4946", "filename": "gcc/config/mips/vr.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fvr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce6f47b378db770b570df0b83c8c24ef4e475e3/gcc%2Fconfig%2Fmips%2Fvr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvr.h?ref=5ce6f47b378db770b570df0b83c8c24ef4e475e3", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions of target machine for GNU compiler.\n+   NEC VR Series Processors\n+   Copyright (c) 2002 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#define MIPS_CPU_STRING_DEFAULT \"vr4100\"\n+#define MULTILIB_DEFAULTS \\\n+\t{ MULTILIB_ENDIAN_DEFAULT, MULTILIB_ABI_DEFAULT, \"march=vr4100\" }"}]}