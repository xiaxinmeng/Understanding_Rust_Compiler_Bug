{"sha": "3ed01d5408045d80a1efc42fadacfcfb98f14997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkMDFkNTQwODA0NWQ4MGExZWZjNDJmYWRhY2ZjZmI5OGYxNDk5Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-20T12:02:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-20T12:02:56Z"}, "message": "re PR tree-optimization/37242 (missed FRE opportunity because of signedness of addition)\n\n2019-08-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/37242\n\t* tree-ssa-sccvn.c (visit_nary_op): Also CSE (T)(a + b)\n\tto (T)a + (T)b if we know that a + b does not overflow.\n\n\t* gcc.dg/tree-ssa/ssa-fre-80.c: New testcase.\n\nFrom-SVN: r274746", "tree": {"sha": "5a8134073d50509866bc11b02a3f768d98a2a994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8134073d50509866bc11b02a3f768d98a2a994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed01d5408045d80a1efc42fadacfcfb98f14997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed01d5408045d80a1efc42fadacfcfb98f14997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed01d5408045d80a1efc42fadacfcfb98f14997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed01d5408045d80a1efc42fadacfcfb98f14997/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a53aa4da8add4e3adc6c38f70eb172d570865831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53aa4da8add4e3adc6c38f70eb172d570865831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53aa4da8add4e3adc6c38f70eb172d570865831"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "b750de4b421d4815c7d6005a0a0451bd95bf8140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ed01d5408045d80a1efc42fadacfcfb98f14997", "patch": "@@ -1,3 +1,9 @@\n+2019-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37242\n+\t* tree-ssa-sccvn.c (visit_nary_op): Also CSE (T)(a + b)\n+\tto (T)a + (T)b if we know that a + b does not overflow.\n+\n 2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/91347"}, {"sha": "5316e07a434e647f52286cc033a033c60949f3fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ed01d5408045d80a1efc42fadacfcfb98f14997", "patch": "@@ -1,3 +1,8 @@\n+2019-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37242\n+\t* gcc.dg/tree-ssa/ssa-fre-80.c: New testcase.\n+\n 2019-08-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/storage_size1.adb: New testcase."}, {"sha": "0176508906247e022bc6bae34d31e74a380c7321", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-80.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-80.c?ref=3ed01d5408045d80a1efc42fadacfcfb98f14997", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+unsigned long a, b;\n+void foo (int m, int f)\n+{\n+  unsigned long tem = (unsigned long)m;\n+  a = tem + 1;\n+  if (f)\n+    {\n+      int tem2 = m + 1;\n+      b = (unsigned long)tem2;  /* Eliminated to a.  */\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(long unsigned int\\\\)\" 1 \"fre1\" } } */"}, {"sha": "76cad432ea4243ce4390d74af221a29f3bf3b762", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed01d5408045d80a1efc42fadacfcfb98f14997/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3ed01d5408045d80a1efc42fadacfcfb98f14997", "patch": "@@ -4312,8 +4312,12 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t operation.  */\n       if (INTEGRAL_TYPE_P (type)\n \t  && TREE_CODE (rhs1) == SSA_NAME\n-\t  /* We only handle sign-changes or zero-extension -> & mask.  */\n-\t  && ((TYPE_UNSIGNED (TREE_TYPE (rhs1))\n+\t  /* We only handle sign-changes, zero-extension -> & mask or\n+\t     sign-extension if we know the inner operation doesn't\n+\t     overflow.  */\n+\t  && (((TYPE_UNSIGNED (TREE_TYPE (rhs1))\n+\t\t|| (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t\t    && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (rhs1))))\n \t       && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (rhs1)))\n \t      || TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (rhs1))))\n \t{\n@@ -4347,7 +4351,9 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t\t    {\n \t\t      unsigned lhs_prec = TYPE_PRECISION (type);\n \t\t      unsigned rhs_prec = TYPE_PRECISION (TREE_TYPE (rhs1));\n-\t\t      if (lhs_prec == rhs_prec)\n+\t\t      if (lhs_prec == rhs_prec\n+\t\t\t  || (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t\t\t      && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (rhs1))))\n \t\t\t{\n \t\t\t  gimple_match_op match_op (gimple_match_cond::UNCOND,\n \t\t\t\t\t\t    NOP_EXPR, type, ops[0]);"}]}