{"sha": "7ddcd26ebb60a8a4b57330442631115cabb6ec22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkY2QyNmViYjYwYThhNGI1NzMzMDQ0MjYzMTExNWNhYmI2ZWMyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-30T14:54:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-30T19:30:46Z"}, "message": "libstdc++: Remove GLIBCXX_CHECK_INT64_T checks\n\nThis simplifies the definition of std::streamoff by using the predefined\n__INT64_TYPE__ macro, instead of the _GLIBCXX_HAVE_INT64_T_LONG,\n_GLIBCXX_HAVE_INT64_T_LONG_LONG and _GLIBCXX_HAVE_INT64_T macros defined\nby configure.\n\nBy using the __INT64_TYPE__ macro (which all of GCC, Clang and Intel\ndefine) we do not need to determine the type of int64_t in configure, we\ncan just use that type directly.\n\nThe background for the change was explained by David Edelsohn:\n\n  Currently the type of streamoff is determined at libstdc++ configure\n  time, chosen by the definitions of _GLIBCXX_HAVE_INT64_T_LONG and\n  _GLIBCXX_HAVE_INT64_T_LONG_LONG.  For a multilib configuration, the\n  difference is encoded in the different multilib header file paths.\n  For \"FAT\" library targets that package 32 bit and 64 bit libraries\n  together, G++ also expects a single header file directory hierarchy,\n  causing an incorrect value for streamoff in some situations.\n\nAnd in a subsequent mail:\n\n  Most of the libstdc++ headers are architecture-neutral, OS neutral and\n  ABI neutral.  The differences are localized in bits/c++config.h.  And\n  most of c++config.h is identical for 32 bit AIX and 64 bit AIX.  The\n  only differences that matter are __int128 and __int64_t.\n\nThis change removes some of those differences. With the only uses of the\nINT64_T configure macros removed, the configure checks themselves can\nalso be removed.\n\nCo-authored-by: David Edelsohn <dje.gcc@gmail.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_CHECK_INT64_T): Delete.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Do not use GLIBCXX_CHECK_INT64_T.\n\t* include/bits/postypes.h: Remove include of <stdint.h> and\n\tdefinition/undefinition of the __STDC_LIMIT_MACROS and\n\t__STDC_CONSTANT_MACROS macros.\n\t(streamoff): Use __INT64_TYPE__ if defined.", "tree": {"sha": "e797c6b35100d8a67d310fb1327ae5c337cc3347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e797c6b35100d8a67d310fb1327ae5c337cc3347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ddcd26ebb60a8a4b57330442631115cabb6ec22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddcd26ebb60a8a4b57330442631115cabb6ec22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddcd26ebb60a8a4b57330442631115cabb6ec22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddcd26ebb60a8a4b57330442631115cabb6ec22/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d291f3367230fdfdacc9868b0aa01de1dabb13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d291f3367230fdfdacc9868b0aa01de1dabb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d291f3367230fdfdacc9868b0aa01de1dabb13"}], "stats": {"total": 233, "additions": 2, "deletions": 231}, "files": [{"sha": "7b78e148fbd38f998214835c9e71b874df10bd7c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7ddcd26ebb60a8a4b57330442631115cabb6ec22", "patch": "@@ -474,63 +474,6 @@ AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n ])\n \n \n-dnl\n-dnl Check whether int64_t is available in <stdint.h>, and define HAVE_INT64_T.\n-dnl Also check whether int64_t is actually a typedef to long or long long.\n-dnl\n-AC_DEFUN([GLIBCXX_CHECK_INT64_T], [\n-\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-\n-  AC_MSG_CHECKING([for int64_t])\n-  AC_CACHE_VAL(glibcxx_cv_INT64_T, [\n-    AC_TRY_COMPILE(\n-      [#include <stdint.h>],\n-      [int64_t var;],\n-      [glibcxx_cv_INT64_T=yes],\n-      [glibcxx_cv_INT64_T=no])\n-  ])\n-\n-  if test $glibcxx_cv_INT64_T = yes; then\n-    AC_DEFINE(HAVE_INT64_T, 1, [Define if int64_t is available in <stdint.h>.])\n-    AC_MSG_RESULT($glibcxx_cv_INT64_T)\n-\n-    AC_MSG_CHECKING([for int64_t as long])\n-    AC_CACHE_VAL(glibcxx_cv_int64_t_long, [\n-      AC_TRY_COMPILE(\n-\t[#include <stdint.h>\n-\ttemplate<typename, typename> struct same { enum { value = -1 }; };\n-\ttemplate<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n-\tint array[same<int64_t, long>::value];], [],\n-\t[glibcxx_cv_int64_t_long=yes], [glibcxx_cv_int64_t_long=no])\n-    ])\n-\n-    if test $glibcxx_cv_int64_t_long = yes; then\n-      AC_DEFINE(HAVE_INT64_T_LONG, 1, [Define if int64_t is a long.])\n-      AC_MSG_RESULT($glibcxx_cv_int64_t_long)\n-    fi\n-\n-    AC_MSG_CHECKING([for int64_t as long long])\n-    AC_CACHE_VAL(glibcxx_cv_int64_t_long_long, [\n-      AC_TRY_COMPILE(\n-\t[#include <stdint.h>\n-\ttemplate<typename, typename> struct same { enum { value = -1 }; };\n-\ttemplate<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n-\tint array[same<int64_t, long long>::value];], [],\n-\t[glibcxx_cv_int64_t_long_long=yes], [glibcxx_cv_int64_t_long_long=no])\n-    ])\n-\n-    if test $glibcxx_cv_int64_t_long_long = yes; then\n-      AC_DEFINE(HAVE_INT64_T_LONG_LONG, 1, [Define if int64_t is a long long.])\n-      AC_MSG_RESULT($glibcxx_cv_int64_t_long_long)\n-    fi\n-  fi\n-\n-  AC_LANG_RESTORE\n-])\n-\n-\n dnl\n dnl Check whether LFS support is available.\n dnl"}, {"sha": "197e8e691cb694571990c886cddd65997df86cfb", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7ddcd26ebb60a8a4b57330442631115cabb6ec22", "patch": "@@ -153,15 +153,6 @@\n /* Define to 1 if you have the <ieeefp.h> header file. */\n #undef HAVE_IEEEFP_H\n \n-/* Define if int64_t is available in <stdint.h>. */\n-#undef HAVE_INT64_T\n-\n-/* Define if int64_t is a long. */\n-#undef HAVE_INT64_T_LONG\n-\n-/* Define if int64_t is a long long. */\n-#undef HAVE_INT64_T_LONG_LONG\n-\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "272bd993a9caf71ef345fdc263bc77621891274c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7ddcd26ebb60a8a4b57330442631115cabb6ec22", "patch": "@@ -19139,136 +19139,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-# For the streamoff typedef.\n-\n-\n-\n-  ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for int64_t\" >&5\n-$as_echo_n \"checking for int64_t... \" >&6; }\n-  if ${glibcxx_cv_INT64_T+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdint.h>\n-int\n-main ()\n-{\n-int64_t var;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_INT64_T=yes\n-else\n-  glibcxx_cv_INT64_T=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-\n-  if test $glibcxx_cv_INT64_T = yes; then\n-\n-$as_echo \"#define HAVE_INT64_T 1\" >>confdefs.h\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_INT64_T\" >&5\n-$as_echo \"$glibcxx_cv_INT64_T\" >&6; }\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for int64_t as long\" >&5\n-$as_echo_n \"checking for int64_t as long... \" >&6; }\n-    if ${glibcxx_cv_int64_t_long+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdint.h>\n-\ttemplate<typename, typename> struct same { enum { value = -1 }; };\n-\ttemplate<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n-\tint array[same<int64_t, long>::value];\n-int\n-main ()\n-{\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_int64_t_long=yes\n-else\n-  glibcxx_cv_int64_t_long=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-\n-    if test $glibcxx_cv_int64_t_long = yes; then\n-\n-$as_echo \"#define HAVE_INT64_T_LONG 1\" >>confdefs.h\n-\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_int64_t_long\" >&5\n-$as_echo \"$glibcxx_cv_int64_t_long\" >&6; }\n-    fi\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for int64_t as long long\" >&5\n-$as_echo_n \"checking for int64_t as long long... \" >&6; }\n-    if ${glibcxx_cv_int64_t_long_long+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-\n-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdint.h>\n-\ttemplate<typename, typename> struct same { enum { value = -1 }; };\n-\ttemplate<typename Tp> struct same<Tp, Tp> { enum { value = 1 }; };\n-\tint array[same<int64_t, long long>::value];\n-int\n-main ()\n-{\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_int64_t_long_long=yes\n-else\n-  glibcxx_cv_int64_t_long_long=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-\n-    if test $glibcxx_cv_int64_t_long_long = yes; then\n-\n-$as_echo \"#define HAVE_INT64_T_LONG_LONG 1\" >>confdefs.h\n-\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_int64_t_long_long\" >&5\n-$as_echo \"$glibcxx_cv_int64_t_long_long\" >&6; }\n-    fi\n-  fi\n-\n-  ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-\n-\n # For LFS support.\n \n "}, {"sha": "95dd9ce5da5fe040bd24dce09a0a7f5bb2cd79f3", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=7ddcd26ebb60a8a4b57330442631115cabb6ec22", "patch": "@@ -185,9 +185,6 @@ GLIBCXX_CHECK_STDIO_PROTO\n GLIBCXX_CHECK_MATH11_PROTO\n GLIBCXX_CHECK_UCHAR_H\n \n-# For the streamoff typedef.\n-GLIBCXX_CHECK_INT64_T\n-\n # For LFS support.\n GLIBCXX_CHECK_LFS\n "}, {"sha": "52590ddd61bf471a7c54b77d5350e980514a8710", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddcd26ebb60a8a4b57330442631115cabb6ec22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=7ddcd26ebb60a8a4b57330442631115cabb6ec22", "patch": "@@ -39,32 +39,6 @@\n \n #include <cwchar> // For mbstate_t\n \n-// XXX If <stdint.h> is really needed, make sure to define the macros\n-// before including it, in order not to break <tr1/cstdint> (and <cstdint>\n-// in C++11).  Reconsider all this as soon as possible...\n-#if (defined(_GLIBCXX_HAVE_INT64_T) && !defined(_GLIBCXX_HAVE_INT64_T_LONG) \\\n-     && !defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG))\n-\n-#ifndef __STDC_LIMIT_MACROS\n-# define _UNDEF__STDC_LIMIT_MACROS\n-# define __STDC_LIMIT_MACROS\n-#endif\n-#ifndef __STDC_CONSTANT_MACROS\n-# define _UNDEF__STDC_CONSTANT_MACROS\n-# define __STDC_CONSTANT_MACROS\n-#endif\n-#include <stdint.h> // For int64_t\n-#ifdef _UNDEF__STDC_LIMIT_MACROS\n-# undef __STDC_LIMIT_MACROS\n-# undef _UNDEF__STDC_LIMIT_MACROS\n-#endif\n-#ifdef _UNDEF__STDC_CONSTANT_MACROS\n-# undef __STDC_CONSTANT_MACROS\n-# undef _UNDEF__STDC_CONSTANT_MACROS\n-#endif\n-\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -84,12 +58,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Note: In versions of GCC up to and including GCC 3.3, streamoff\n    *  was typedef long.\n   */  \n-#ifdef _GLIBCXX_HAVE_INT64_T_LONG\n-  typedef long          streamoff;\n-#elif defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG)\n-  typedef long long     streamoff;\n-#elif defined(_GLIBCXX_HAVE_INT64_T) \n-  typedef int64_t       streamoff;\n+#ifdef __INT64_TYPE__\n+  typedef __INT64_TYPE__          streamoff;\n #else\n   typedef long long     streamoff;\n #endif"}]}