{"sha": "b830c28b56fdc3f4b4555200278218b4b49022d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzMGMyOGI1NmZkYzNmNGI0NTU1MjAwMjc4MjE4YjRiNDkwMjJkMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-02T20:01:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-02T20:01:42Z"}, "message": "Improve C++ fold caching efficiency.\n\nWhile looking at concepts caching I noticed that we were clearing the caches\nunnecessarily for non-constant initialization, which shouldn't affect\nfolding.\n\n\t* typeck2.c (store_init_value): Only clear_cv_and_fold_caches if the\n\tvalue is constant.\n\nFrom-SVN: r276487", "tree": {"sha": "e8b1d17708df837d5cc016be4106d15e520beff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b1d17708df837d5cc016be4106d15e520beff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b830c28b56fdc3f4b4555200278218b4b49022d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b830c28b56fdc3f4b4555200278218b4b49022d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b830c28b56fdc3f4b4555200278218b4b49022d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b830c28b56fdc3f4b4555200278218b4b49022d2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c89844e5d30a5235960a2c627abc9369306fda61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89844e5d30a5235960a2c627abc9369306fda61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89844e5d30a5235960a2c627abc9369306fda61"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "275fc9fa0f379e41b9aeed572e2d785c48276851", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b830c28b56fdc3f4b4555200278218b4b49022d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b830c28b56fdc3f4b4555200278218b4b49022d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b830c28b56fdc3f4b4555200278218b4b49022d2", "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.c (store_init_value): Only clear_cv_and_fold_caches if the\n+\tvalue is constant.\n+\n 2019-09-30  Jason Merrill  <jason@redhat.com>\n \n \tUse hash_map_safe_* functions."}, {"sha": "ec0e6a7e33d30491dd31f6897b510dbef19a5d1b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b830c28b56fdc3f4b4555200278218b4b49022d2/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b830c28b56fdc3f4b4555200278218b4b49022d2/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b830c28b56fdc3f4b4555200278218b4b49022d2", "patch": "@@ -907,9 +907,6 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n   /* Handle aggregate NSDMI in non-constant initializers, too.  */\n   value = replace_placeholders (value, decl);\n \n-  /* DECL may change value; purge caches.  */\n-  clear_cv_and_fold_caches ();\n-\n   /* If the initializer is not a constant, fill in DECL_INITIAL with\n      the bits that are constant, and then return an expression that\n      will perform the dynamic initialization.  */\n@@ -918,6 +915,10 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t  || vla_type_p (type)\n \t  || ! reduced_constant_expression_p (value)))\n     return split_nonconstant_init (decl, value);\n+\n+  /* DECL may change value; purge caches.  */\n+  clear_cv_and_fold_caches ();\n+\n   /* If the value is a constant, just put it in DECL_INITIAL.  If DECL\n      is an automatic variable, the middle end will turn this into a\n      dynamic initialization later.  */"}]}