{"sha": "c5578b56b632bb21aac5dfdab09c3d24aba41c44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1NzhiNTZiNjMyYmIyMWFhYzVkZmRhYjA5YzNkMjRhYmE0MWM0NA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-11T16:49:08Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-11T16:49:08Z"}, "message": "[OpenACC] Consolidate 'async'/'wait' code in 'libgomp/oacc-async.c'\n\n\tlibgomp/\n\t* oacc-parallel.c (GOACC_wait, goacc_wait): Move...\n\t* oacc-async.c: ... here.\n\t* oacc-int.h (goacc_wait): Declare.\n\t* libgomp_g.h: Update\n\nFrom-SVN: r279232", "tree": {"sha": "b5db9791c7d903505188ae82bee3a60402d4af1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5db9791c7d903505188ae82bee3a60402d4af1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5578b56b632bb21aac5dfdab09c3d24aba41c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5578b56b632bb21aac5dfdab09c3d24aba41c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5578b56b632bb21aac5dfdab09c3d24aba41c44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5578b56b632bb21aac5dfdab09c3d24aba41c44/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d1b5e710e5573416bb13113b6593307e6b008e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1b5e710e5573416bb13113b6593307e6b008e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1b5e710e5573416bb13113b6593307e6b008e2"}], "stats": {"total": 154, "additions": 81, "deletions": 73}, "files": [{"sha": "f7d9ae98616db33a088fedf8ebf80e0c861aa97b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c5578b56b632bb21aac5dfdab09c3d24aba41c44", "patch": "@@ -1,5 +1,10 @@\n 2019-12-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* oacc-parallel.c (GOACC_wait, goacc_wait): Move...\n+\t* oacc-async.c: ... here.\n+\t* oacc-int.h (goacc_wait): Declare.\n+\t* libgomp_g.h: Update\n+\n \tPR libgomp/92854\n \t* testsuite/libgomp.oacc-c-c++-common/acc_map_data-device_already-1.c:\n \tNew file."}, {"sha": "beb1689180d869458a9b2342a1f0f6bbb7324e1e", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=c5578b56b632bb21aac5dfdab09c3d24aba41c44", "patch": "@@ -357,6 +357,10 @@ extern void GOMP_teams (unsigned int, unsigned int);\n extern void GOMP_teams_reg (void (*) (void *), void *, unsigned, unsigned,\n \t\t\t    unsigned);\n \n+/* oacc-async.c */\n+\n+extern void GOACC_wait (int, int, ...);\n+\n /* oacc-parallel.c */\n \n extern void GOACC_parallel_keyed (int, void (*) (void *), size_t,\n@@ -370,7 +374,6 @@ extern void GOACC_enter_exit_data (int, size_t, void **,\n \t\t\t\t   size_t *, unsigned short *, int, int, ...);\n extern void GOACC_update (int, size_t, void **, size_t *,\n \t\t\t  unsigned short *, int, int, ...);\n-extern void GOACC_wait (int, int, ...);\n extern int GOACC_get_num_threads (void);\n extern int GOACC_get_thread_num (void);\n extern void GOACC_declare (int, size_t, void **, size_t *, unsigned short *);"}, {"sha": "6dfc3bdeb8e1c09a3c9fb9014f66dae016307690", "filename": "libgomp/oacc-async.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-async.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-async.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-async.c?ref=c5578b56b632bb21aac5dfdab09c3d24aba41c44", "patch": "@@ -354,6 +354,77 @@ acc_wait_all_async (int async)\n     gomp_fatal (\"wait all async(%d) failed\", async);\n }\n \n+void\n+GOACC_wait (int async, int num_waits, ...)\n+{\n+  goacc_lazy_initialize ();\n+\n+  struct goacc_thread *thr = goacc_thread ();\n+\n+  /* No nesting.  */\n+  assert (thr->prof_info == NULL);\n+  assert (thr->api_info == NULL);\n+  acc_prof_info prof_info;\n+  acc_api_info api_info;\n+  bool profiling_p = GOACC_PROFILING_SETUP_P (thr, &prof_info, &api_info);\n+  if (profiling_p)\n+    {\n+      prof_info.async = async;\n+      prof_info.async_queue = prof_info.async;\n+    }\n+\n+  if (num_waits)\n+    {\n+      va_list ap;\n+\n+      va_start (ap, num_waits);\n+      goacc_wait (async, num_waits, &ap);\n+      va_end (ap);\n+    }\n+  else if (async == acc_async_sync)\n+    acc_wait_all ();\n+  else\n+    acc_wait_all_async (async);\n+\n+  if (profiling_p)\n+    {\n+      thr->prof_info = NULL;\n+      thr->api_info = NULL;\n+    }\n+}\n+\n+attribute_hidden void\n+goacc_wait (int async, int num_waits, va_list *ap)\n+{\n+  while (num_waits--)\n+    {\n+      int qid = va_arg (*ap, int);\n+\n+      /* Waiting on ACC_ASYNC_NOVAL maps to 'wait all'.  */\n+      if (qid == acc_async_noval)\n+\t{\n+\t  if (async == acc_async_sync)\n+\t    acc_wait_all ();\n+\t  else\n+\t    acc_wait_all_async (async);\n+\t  break;\n+\t}\n+\n+      if (acc_async_test (qid))\n+\tcontinue;\n+\n+      if (async == acc_async_sync)\n+\tacc_wait (qid);\n+      else if (qid == async)\n+\t/* If we're waiting on the same asynchronous queue as we're\n+\t   launching on, the queue itself will order work as\n+\t   required, so there's no need to wait explicitly.  */\n+\t;\n+      else\n+\tacc_wait_async (qid, async);\n+    }\n+}\n+\n attribute_hidden void\n goacc_async_free (struct gomp_device_descr *devicep,\n \t\t  struct goacc_asyncqueue *aq, void *ptr)"}, {"sha": "81cb15c605f2412624e0672ccc041b45ecb2898d", "filename": "libgomp/oacc-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-int.h?ref=c5578b56b632bb21aac5dfdab09c3d24aba41c44", "patch": "@@ -113,6 +113,7 @@ void goacc_restore_bind (void);\n void goacc_lazy_initialize (void);\n void goacc_host_init (void);\n \n+void goacc_wait (int, int, va_list *);\n void goacc_init_asyncqueues (struct gomp_device_descr *);\n bool goacc_fini_asyncqueues (struct gomp_device_descr *);\n void goacc_async_free (struct gomp_device_descr *, struct goacc_asyncqueue *,"}, {"sha": "1faca5d562f72b6c7bdbec32cd36426e3532184b", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5578b56b632bb21aac5dfdab09c3d24aba41c44/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=c5578b56b632bb21aac5dfdab09c3d24aba41c44", "patch": "@@ -111,8 +111,6 @@ handle_ftn_pointers (size_t mapnum, void **hostaddrs, size_t *sizes,\n     }\n }\n \n-static void goacc_wait (int async, int num_waits, va_list *ap);\n-\n \n /* Launch a possibly offloaded function with FLAGS.  FN is the host fn\n    address.  MAPNUM, HOSTADDRS, SIZES & KINDS  describe the memory\n@@ -814,38 +812,6 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum,\n     }\n }\n \n-static void\n-goacc_wait (int async, int num_waits, va_list *ap)\n-{\n-  while (num_waits--)\n-    {\n-      int qid = va_arg (*ap, int);\n-\n-      /* Waiting on ACC_ASYNC_NOVAL maps to 'wait all'.  */\n-      if (qid == acc_async_noval)\n-\t{\n-\t  if (async == acc_async_sync)\n-\t    acc_wait_all ();\n-\t  else\n-\t    acc_wait_all_async (async);\n-\t  break;\n-\t}\n-\n-      if (acc_async_test (qid))\n-\tcontinue;\n-\n-      if (async == acc_async_sync)\n-\tacc_wait (qid);\n-      else if (qid == async)\n-\t/* If we're waiting on the same asynchronous queue as we're\n-\t   launching on, the queue itself will order work as\n-\t   required, so there's no need to wait explicitly.  */\n-\t;\n-      else\n-\tacc_wait_async (qid, async);\n-    }\n-}\n-\n void\n GOACC_update (int flags_m, size_t mapnum,\n \t      void **hostaddrs, size_t *sizes, unsigned short *kinds,\n@@ -1002,44 +968,6 @@ GOACC_update (int flags_m, size_t mapnum,\n     }\n }\n \n-void\n-GOACC_wait (int async, int num_waits, ...)\n-{\n-  goacc_lazy_initialize ();\n-\n-  struct goacc_thread *thr = goacc_thread ();\n-\n-  /* No nesting.  */\n-  assert (thr->prof_info == NULL);\n-  assert (thr->api_info == NULL);\n-  acc_prof_info prof_info;\n-  acc_api_info api_info;\n-  bool profiling_p = GOACC_PROFILING_SETUP_P (thr, &prof_info, &api_info);\n-  if (profiling_p)\n-    {\n-      prof_info.async = async;\n-      prof_info.async_queue = prof_info.async;\n-    }\n-\n-  if (num_waits)\n-    {\n-      va_list ap;\n-\n-      va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, &ap);\n-      va_end (ap);\n-    }\n-  else if (async == acc_async_sync)\n-    acc_wait_all ();\n-  else\n-    acc_wait_all_async (async);\n-\n-  if (profiling_p)\n-    {\n-      thr->prof_info = NULL;\n-      thr->api_info = NULL;\n-    }\n-}\n \n /* Legacy entry point (GCC 5).  */\n "}]}