{"sha": "ed50ab354cc6a70b81a14fc72298d4ac7af07b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1MGFiMzU0Y2M2YTcwYjgxYTE0ZmM3MjI5OGQ0YWM3YWYwN2IzNg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-10T21:37:46Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-10T21:37:46Z"}, "message": "Do not allow memory->memory moves to be generated.\n\nFrom-SVN: r2097", "tree": {"sha": "d39575af4bfd3562d08adc22cae1c383c40479b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d39575af4bfd3562d08adc22cae1c383c40479b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed50ab354cc6a70b81a14fc72298d4ac7af07b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed50ab354cc6a70b81a14fc72298d4ac7af07b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed50ab354cc6a70b81a14fc72298d4ac7af07b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed50ab354cc6a70b81a14fc72298d4ac7af07b36/comments", "author": null, "committer": null, "parents": [{"sha": "a2a5059bb6e6e60d2d2330e74b0feebc25d59ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a5059bb6e6e60d2d2330e74b0feebc25d59ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a5059bb6e6e60d2d2330e74b0feebc25d59ee8"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "9cfc27ea462b2f31096e909e1e9183b5d6b5003a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 131, "deletions": 15, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed50ab354cc6a70b81a14fc72298d4ac7af07b36/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed50ab354cc6a70b81a14fc72298d4ac7af07b36/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ed50ab354cc6a70b81a14fc72298d4ac7af07b36", "patch": "@@ -1752,16 +1752,38 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,4\")])\n \n+\n ;; 64-bit integer moves\n \n ;; Unlike most other insns, the move insns can't be split with\n ;; different predicates, because register spilling and other parts of\n ;; the compiler, have memoized the insn number already.\n \n-(define_insn \"movdi\"\n+(define_expand \"movdi\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], DImode)\n+      && !register_operand (operands[1], DImode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+      && operands[1] != CONST0_RTX (DImode))\n+    {\n+      rtx temp = force_reg (DImode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,o,*d,*x\")\n \t(match_operand:DI 1 \"general_operand\" \"d,iF,R,o,d,d,*x,*d\"))]\n-  \"\"\n+  \"register_operand (operands[0], DImode)\n+   || register_operand (operands[1], DImode)\n+   || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n+   || operands[1] == CONST0_RTX (DImode)\"\n   \"* return mips_move_2words (operands, insn); \"\n   [(set_attr \"type\"\t\"move,arith,load,load,store,store,hilo,hilo\")\n    (set_attr \"mode\"\t\"DI\")\n@@ -1804,15 +1826,29 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], SImode)\n+      && !register_operand (operands[1], SImode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0))\n+    {\n+      rtx temp = force_reg (SImode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n \n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movsi_internal1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,R,m,*d,*f*z,*f,*f,*f,*R,*m,*x,*d\")\n \t(match_operand:SI 1 \"general_operand\" \"d,S,IKL,Mnis,R,m,dJ,dJ,*f*z,*d,*f,*R,*m,*f,*f,*d,*x\"))]\n-  \"TARGET_DEBUG_H_MODE\"\n+  \"TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], SImode)\n+       || register_operand (operands[1], SImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,load,arith,arith,load,load,store,store,xfer,xfer,move,load,load,store,store,hilo,hilo\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1821,7 +1857,10 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"movsi_internal2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,R,m,*d,*z,*d,*x\")\n \t(match_operand:SI 1 \"general_operand\" \"d,S,IKL,Mnis,R,m,dJ,dJ,*z,*d,*x,*d\"))]\n-  \"!TARGET_DEBUG_H_MODE\"\n+  \"!TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], SImode)\n+       || register_operand (operands[1], SImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,load,arith,arith,load,load,store,store,xfer,xfer,hilo,hilo\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1839,15 +1878,29 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], HImode)\n+      && !register_operand (operands[1], HImode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0))\n+    {\n+      rtx temp = force_reg (HImode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n \n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movhi_internal1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*f,*f*z,*x,*d\")\n \t(match_operand:HI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*f*z,*d,*f,*d,*x\"))]\n-  \"TARGET_DEBUG_H_MODE\"\n+  \"TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], HImode)\n+       || register_operand (operands[1], HImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,move,hilo,hilo\")\n    (set_attr \"mode\"\t\"HI\")\n@@ -1856,7 +1909,10 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"movhi_internal2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*z,*x,*d\")\n \t(match_operand:HI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*z,*d,*d,*x\"))]\n-  \"!TARGET_DEBUG_H_MODE\"\n+  \"!TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], HImode)\n+       || register_operand (operands[1], HImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,hilo,hilo\")\n    (set_attr \"mode\"\t\"HI\")\n@@ -1874,15 +1930,29 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], QImode)\n+      && !register_operand (operands[1], QImode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0))\n+    {\n+      rtx temp = force_reg (QImode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n \n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movqi_internal1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*f*z,*f,*x,*d\")\n \t(match_operand:QI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*f*z,*d,*f,*d,*x\"))]\n-  \"TARGET_DEBUG_H_MODE\"\n+  \"TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], QImode)\n+       || register_operand (operands[1], QImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,move,hilo,hilo\")\n    (set_attr \"mode\"\t\"QI\")\n@@ -1891,7 +1961,10 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"movqi_internal2\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*z,*x,*d\")\n \t(match_operand:QI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*z,*d,*d,*x\"))]\n-  \"!TARGET_DEBUG_H_MODE\"\n+  \"!TARGET_DEBUG_H_MODE\n+   && (register_operand (operands[0], QImode)\n+       || register_operand (operands[1], QImode)\n+       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return mips_move_1word (operands, insn, TRUE);\"\n   [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,hilo,hilo\")\n    (set_attr \"mode\"\t\"QI\")\n@@ -1900,21 +1973,64 @@ move\\\\t%0,%z4\\\\n\\\\\n \n ;; 32-bit floating point moves\n \n-(define_insn \"movsf\"\n+(define_expand \"movsf\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:SF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], SFmode)\n+      && !register_operand (operands[1], SFmode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+      && operands[1] != CONST0_RTX (SFmode))\n+    {\n+      rtx temp = force_reg (SFmode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,m,*f,*d,*d,*d,*d,*R,*m\")\n \t(match_operand:SF 1 \"general_operand\" \"f,G,R,Em,fG,fG,*d,*f,*G*d,*R,*E*m,*d,*d\"))]\n-  \"\"\n+  \"register_operand (operands[0], SFmode)\n+   || register_operand (operands[1], SFmode)\n+   || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n+   || operands[1] == CONST0_RTX (SFmode)\"\n   \"* return mips_move_1word (operands, insn, FALSE);\"\n   [(set_attr \"type\"\t\"move,xfer,load,load,store,store,xfer,xfer,move,load,load,store,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"1,1,1,2,1,2,1,1,1,1,2,1,2\")])\n \n+\n ;; 64-bit floating point moves\n \n-(define_insn \"movdf\"\n+(define_expand \"movdf\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:DF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if ((reload_in_progress | reload_completed) == 0\n+      && !register_operand (operands[0], DFmode)\n+      && !register_operand (operands[1], DFmode)\n+      && (GET_CODE (operands[1]) != CONST_INT || INTVAL (operands[1]) != 0)\n+      && operands[1] != CONST0_RTX (DFmode))\n+    {\n+      rtx temp = force_reg (DFmode, operands[1]);\n+      emit_move_insn (operands[0], temp);\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,R,o,f,*f,*d,*d,*d,*d,*R,*o\")\n \t(match_operand:DF 1 \"general_operand\" \"f,R,o,fG,fG,E,*d,*f,*d*G,*R,*o*E,*d,*d\"))]\n-  \"\"\n+  \"register_operand (operands[0], DFmode)\n+   || register_operand (operands[1], DFmode)\n+   || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n+   || operands[1] == CONST0_RTX (DFmode)\"\n   \"* return mips_move_2words (operands, insn); \"\n   [(set_attr \"type\"\t\"move,load,load,store,store,load,xfer,xfer,move,load,load,store,store\")\n    (set_attr \"mode\"\t\"DF\")"}]}