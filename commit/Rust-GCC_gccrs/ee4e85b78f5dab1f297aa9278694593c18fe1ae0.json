{"sha": "ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0ZTg1Yjc4ZjVkYWIxZjI5N2FhOTI3ODY5NDU5M2MxOGZlMWFlMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-08T15:15:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-08T15:15:51Z"}, "message": "cgraph.c (cgraph_edge::maybe_hot_p): Do not check flag_branch_probabilities.\n\n\n\t* cgraph.c (cgraph_edge::maybe_hot_p): Do not check\n\tflag_branch_probabilities.\n\t* ipa-inline.c (edge_badness): Likewise.\n\t* ipa-profile.c (ipa_propagate_frequency_1): Likewise.\n\t* postreload-gcse.c (eliminate_partially_redundant_load): Likewise.\n\t* predict.c (maybe_hot_frequency_p): Likewise.\n\t(probably_never_executed): Likewise.\n\t* sched-ebb.c (schedule_ebbs): Likewise.\n\t* sched-rgn.c (find_single_block_region): Likewise.\n\t* tracer.c (tail_duplicate): Likewise.\n\nFrom-SVN: r249020", "tree": {"sha": "5490f5b728b61ce913e53ff05af703efe199fa22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5490f5b728b61ce913e53ff05af703efe199fa22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/comments", "author": null, "committer": null, "parents": [{"sha": "ae5512dd4fbfb031cc967fc154a534863d4c05f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5512dd4fbfb031cc967fc154a534863d4c05f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5512dd4fbfb031cc967fc154a534863d4c05f5"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "65a12395a86f119b3ac699e540fe10dad3969d2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -1,3 +1,16 @@\n+2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_edge::maybe_hot_p): Do not check\n+\tflag_branch_probabilities.\n+\t* ipa-inline.c (edge_badness): Likewise.\n+\t* ipa-profile.c (ipa_propagate_frequency_1): Likewise.\n+\t* postreload-gcse.c (eliminate_partially_redundant_load): Likewise.\n+\t* predict.c (maybe_hot_frequency_p): Likewise.\n+\t(probably_never_executed): Likewise.\n+\t* sched-ebb.c (schedule_ebbs): Likewise.\n+\t* sched-rgn.c (find_single_block_region): Likewise.\n+\t* tracer.c (tail_duplicate): Likewise.\n+\n 2017-06-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* opts.c (finish_options): x_flag_reorder_blocks_and_partition no"}, {"sha": "213587e7e2fc782a3303791ab149fc032f4bc708", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -2729,10 +2729,7 @@ cgraph_edge::cannot_lead_to_return_p (void)\n bool\n cgraph_edge::maybe_hot_p (void)\n {\n-  /* TODO: Export profile_status from cfun->cfg to cgraph_node.  */\n-  if (profile_info\n-      && opt_for_fn (caller->decl, flag_branch_probabilities)\n-      && !maybe_hot_count_p (NULL, count))\n+  if (!maybe_hot_count_p (NULL, count))\n     return false;\n   if (caller->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED\n       || (callee"}, {"sha": "8924f7eb15f004ac45a206be458b65d71f3cd633", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -1078,7 +1078,7 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \tnumerator = ((sreal) 1 >> 8);\n       if (caller->count > profile_count::zero ())\n \tnumerator *= caller->count.to_gcov_type ();\n-      else if (opt_for_fn (caller->decl, flag_branch_probabilities))\n+      else if (caller->count.initialized_p ())\n \tnumerator = numerator >> 11;\n       denominator = growth;\n "}, {"sha": "f149d0196fa578a67ac44a0eefc6718d7e500f93", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -330,7 +330,7 @@ ipa_propagate_frequency_1 (struct cgraph_node *node, void *data)\n \t it is executed by the train run.  Transfer the function only if all\n \t callers are unlikely executed.  */\n       if (profile_info\n-\t  && opt_for_fn (d->function_symbol->decl, flag_branch_probabilities)\n+\t  && edge->callee->count.initialized_p ()\n \t  /* Thunks are not profiled.  This is more or less implementation\n \t     bug.  */\n \t  && !d->function_symbol->thunk.thunk_p"}, {"sha": "a1dcac2600c7a3c86495f65f4d43c1ff51a2fcc6", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -1158,7 +1158,7 @@ eliminate_partially_redundant_load (basic_block bb, rtx_insn *insn,\n       || (optimize_bb_for_size_p (bb) && npred_ok > 1)\n       /* If we don't have profile information we cannot tell if splitting\n          a critical edge is profitable or not so don't do it.  */\n-      || ((! profile_info || ! flag_branch_probabilities\n+      || ((! profile_info || profile_status_for_fn (cfun) != PROFILE_READ\n \t   || targetm.cannot_modify_jumps_p ())\n \t  && critical_edge_split))\n     goto cleanup;"}, {"sha": "b460a6f26ee6e024ea188d2c9532745283c514d5", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -123,8 +123,7 @@ static inline bool\n maybe_hot_frequency_p (struct function *fun, int freq)\n {\n   struct cgraph_node *node = cgraph_node::get (fun->decl);\n-  if (!profile_info\n-      || !opt_for_fn (fun->decl, flag_branch_probabilities))\n+  if (!profile_info || profile_status_for_fn (fun) != PROFILE_READ)\n     {\n       if (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n         return false;\n@@ -222,7 +221,7 @@ probably_never_executed (struct function *fun,\n \treturn false;\n       return true;\n     }\n-  if ((!profile_info || !(opt_for_fn (fun->decl, flag_branch_probabilities)))\n+  if ((!profile_info || profile_status_for_fn (fun) != PROFILE_READ)\n       && (cgraph_node::get (fun->decl)->frequency\n \t  == NODE_FREQUENCY_UNLIKELY_EXECUTED))\n     return true;"}, {"sha": "9123343fa0f489c6b0e9b8ee039f694dd722b52c", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -622,7 +622,7 @@ schedule_ebbs (void)\n   if (n_basic_blocks_for_fn (cfun) == NUM_FIXED_BLOCKS)\n     return;\n \n-  if (profile_info && flag_branch_probabilities)\n+  if (profile_info && profile_status_for_fn (cfun) == PROFILE_READ)\n     probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK);\n   else\n     probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY);"}, {"sha": "3bb9356693e741af01f8bebf88258eb8f9ed005f", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -477,7 +477,7 @@ find_single_block_region (bool ebbs_p)\n \n   if (ebbs_p) {\n     int probability_cutoff;\n-    if (profile_info && flag_branch_probabilities)\n+    if (profile_info && profile_status_for_fn (cfun) == PROFILE_READ)\n       probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK);\n     else\n       probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY);"}, {"sha": "0b7f4da0d81efd81463bf404abfd90345f966adb", "filename": "gcc/tracer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4e85b78f5dab1f297aa9278694593c18fe1ae0/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=ee4e85b78f5dab1f297aa9278694593c18fe1ae0", "patch": "@@ -270,7 +270,7 @@ tail_duplicate (void)\n   bitmap_clear (bb_seen);\n   initialize_original_copy_tables ();\n \n-  if (profile_info && flag_branch_probabilities)\n+  if (profile_info && profile_status_for_fn (cfun) == PROFILE_READ)\n     probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK);\n   else\n     probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY);\n@@ -290,7 +290,7 @@ tail_duplicate (void)\n       weighted_insns += n * bb->frequency;\n     }\n \n-  if (profile_info && flag_branch_probabilities)\n+  if (profile_info && profile_status_for_fn (cfun) == PROFILE_READ)\n     cover_insns = PARAM_VALUE (TRACER_DYNAMIC_COVERAGE_FEEDBACK);\n   else\n     cover_insns = PARAM_VALUE (TRACER_DYNAMIC_COVERAGE);"}]}