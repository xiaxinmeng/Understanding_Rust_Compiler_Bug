{"sha": "6797f908eec82d7ead4ca65eb970868c7489f244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5N2Y5MDhlZWM4MmQ3ZWFkNGNhNjVlYjk3MDg2OGM3NDg5ZjI0NA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-08-06T09:40:39Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-08-06T09:40:39Z"}, "message": "re PR tree-optimization/16807 ([lno] Weird loop unrolling)\n\n\tPR tree-optimization/16807\n\t* loop-iv.c (dump_iv_info): Dump invariants correctly.\n\t(iv_subreg, iv_extend): Express value of invariant purely in\n\tbase field.\n\nFrom-SVN: r85634", "tree": {"sha": "bc642906a5611c9c79b776a27c3c99108e3223ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc642906a5611c9c79b776a27c3c99108e3223ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6797f908eec82d7ead4ca65eb970868c7489f244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6797f908eec82d7ead4ca65eb970868c7489f244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6797f908eec82d7ead4ca65eb970868c7489f244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6797f908eec82d7ead4ca65eb970868c7489f244/comments", "author": null, "committer": null, "parents": [{"sha": "866cf0373156f1a614d620522caef62a36b2b5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866cf0373156f1a614d620522caef62a36b2b5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866cf0373156f1a614d620522caef62a36b2b5e4"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "d83bdbe2e66da8ce7dc21816d5a885259127915b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6797f908eec82d7ead4ca65eb970868c7489f244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6797f908eec82d7ead4ca65eb970868c7489f244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6797f908eec82d7ead4ca65eb970868c7489f244", "patch": "@@ -1,3 +1,10 @@\n+2004-08-06  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\tPR tree-optimization/16807\n+\t* loop-iv.c (dump_iv_info): Dump invariants correctly.\n+\t(iv_subreg, iv_extend): Express value of invariant purely in\n+\tbase field.\n+\n 2004-08-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/arm/symbian.h (CC1_SPEC): Add -fno-short-enums."}, {"sha": "0a01f86cb436e6eeab8908114cd88d1e627b4f95", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6797f908eec82d7ead4ca65eb970868c7489f244/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6797f908eec82d7ead4ca65eb970868c7489f244/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=6797f908eec82d7ead4ca65eb970868c7489f244", "patch": "@@ -104,17 +104,17 @@ dump_iv_info (FILE *file, struct rtx_iv *iv)\n       return;\n     }\n \n-  if (iv->step == const0_rtx)\n-    {\n-      fprintf (file, \"invariant \");\n-      print_rtl (file, iv->base);\n-      return;\n-    }\n+  if (iv->step == const0_rtx\n+      && !iv->first_special)\n+    fprintf (file, \"invariant \");\n \n   print_rtl (file, iv->base);\n-  fprintf (file, \" + \");\n-  print_rtl (file, iv->step);\n-  fprintf (file, \" * iteration\");\n+  if (iv->step != const0_rtx)\n+    {\n+      fprintf (file, \" + \");\n+      print_rtl (file, iv->step);\n+      fprintf (file, \" * iteration\");\n+    }\n   fprintf (file, \" (in %s)\", GET_MODE_NAME (iv->mode));\n \n   if (iv->mode != iv->extend_mode)\n@@ -440,6 +440,21 @@ iv_constant (struct rtx_iv *iv, rtx cst, enum machine_mode mode)\n static bool\n iv_subreg (struct rtx_iv *iv, enum machine_mode mode)\n {\n+  /* If iv is invariant, just calculate the new value.  */\n+  if (iv->step == const0_rtx\n+      && !iv->first_special)\n+    {\n+      rtx val = get_iv_value (iv, const0_rtx);\n+      val = lowpart_subreg (mode, val, iv->extend_mode);\n+\n+      iv->base = val;\n+      iv->extend = NIL;\n+      iv->mode = iv->extend_mode = mode;\n+      iv->delta = const0_rtx;\n+      iv->mult = const1_rtx;\n+      return true;\n+    }\n+\n   if (iv->extend_mode == mode)\n     return true;\n \n@@ -465,6 +480,21 @@ iv_subreg (struct rtx_iv *iv, enum machine_mode mode)\n static bool\n iv_extend (struct rtx_iv *iv, enum rtx_code extend, enum machine_mode mode)\n {\n+  /* If iv is invariant, just calculate the new value.  */\n+  if (iv->step == const0_rtx\n+      && !iv->first_special)\n+    {\n+      rtx val = get_iv_value (iv, const0_rtx);\n+      val = simplify_gen_unary (extend, mode, val, iv->extend_mode);\n+\n+      iv->base = val;\n+      iv->extend = NIL;\n+      iv->mode = iv->extend_mode = mode;\n+      iv->delta = const0_rtx;\n+      iv->mult = const1_rtx;\n+      return true;\n+    }\n+\n   if (mode != iv->extend_mode)\n     return false;\n "}]}