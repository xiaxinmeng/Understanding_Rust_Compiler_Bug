{"sha": "36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "node_id": "C_kwDOANBUbNoAKDM2Mjc4ZjQ4Y2JjMDhjNzhlNGVkNTg4ZTVhMDQ5YmQ0NWZkMWM1NWE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-18T01:20:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-18T01:20:24Z"}, "message": "c++: implicit 'this' in noexcept-spec within class tmpl [PR94944]\n\nHere when instantiating the noexcept-spec we fail to resolve the\nimplicit object for the member call A<T>::f() ultimately because\nmaybe_instantiate_noexcept sets current_class_ptr/ref to the dependent\n'this' (of type B<T>) rather than the specialized 'this' (of type B<int>).\n\nThis patch fixes this by making maybe_instantiate_noexcept set\ncurrent_class_ptr/ref to the specialized 'this' instead, consistent\nwith what tsubst_function_type does when substituting into the trailing\nreturn type of a non-static member function.\n\n\tPR c++/94944\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (maybe_instantiate_noexcept): For non-static member\n\tfunctions, set current_class_ptr/ref to the specialized 'this'\n\tinstead.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept34.C: Adjusted expected diagnostics.\n\t* g++.dg/cpp0x/noexcept75.C: New test.", "tree": {"sha": "7014331020eb2e0adfd3cc00d2aa3cbe6f96e7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7014331020eb2e0adfd3cc00d2aa3cbe6f96e7b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/comments", "author": null, "committer": null, "parents": [{"sha": "0bdb049877f405f361a9a3f597267ff5e44733a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdb049877f405f361a9a3f597267ff5e44733a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdb049877f405f361a9a3f597267ff5e44733a2"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "16bedbc4bc7cc0585388abe37ef05487bb3ef990", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "patch": "@@ -26140,20 +26140,15 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t  push_deferring_access_checks (dk_no_deferred);\n \t  input_location = DECL_SOURCE_LOCATION (fn);\n \n-\t  if (!DECL_LOCAL_DECL_P (fn))\n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t      && !DECL_LOCAL_DECL_P (fn))\n \t    {\n \t      /* If needed, set current_class_ptr for the benefit of\n-\t\t tsubst_copy/PARM_DECL.  The exception pattern will\n-\t\t refer to the parm of the template, not the\n-\t\t instantiation.  */\n-\t      tree tdecl = DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (fn));\n-\t      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (tdecl))\n-\t\t{\n-\t\t  tree this_parm = DECL_ARGUMENTS (tdecl);\n-\t\t  current_class_ptr = NULL_TREE;\n-\t\t  current_class_ref = cp_build_fold_indirect_ref (this_parm);\n-\t\t  current_class_ptr = this_parm;\n-\t\t}\n+\t\t tsubst_copy/PARM_DECL.  */\n+\t      tree this_parm = DECL_ARGUMENTS (fn);\n+\t      current_class_ptr = NULL_TREE;\n+\t      current_class_ref = cp_build_fold_indirect_ref (this_parm);\n+\t      current_class_ptr = this_parm;\n \t    }\n \n \t  /* If this function is represented by a TEMPLATE_DECL, then"}, {"sha": "86129e7a520ace673564939751bd6ca5739e293d", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept34.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C?ref=36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "patch": "@@ -7,13 +7,13 @@ template<typename> struct A\n {\n   constexpr int f () { return 0; }\n   bool b = true;\n-  void g () noexcept (f()) { } // { dg-error \"use of parameter\" }\n-  void g2 () noexcept (this->f()) { } // { dg-error \"use of parameter\" }\n+  void g () noexcept (f()) { } // { dg-error \".this. is not a constant\" }\n+  void g2 () noexcept (this->f()) { } // { dg-error \".this. is not a constant\" }\n   void g3 () noexcept (b) { } // { dg-error \"use of .this. in a constant expression|use of parameter\" }\n   void g4 (int i) noexcept (i) { } // { dg-error \"use of parameter\" }\n-  void g5 () noexcept (A::f()) { } // { dg-error \"use of parameter\" }\n+  void g5 () noexcept (A::f()) { } // { dg-error \".this. is not a constant\" }\n   void g6 () noexcept (foo(b)) { } // { dg-error \"use of .this. in a constant expression|use of parameter\" }\n-  void g7 () noexcept (int{f()}) { } // { dg-error \"use of parameter\" }\n+  void g7 () noexcept (int{f()}) { } // { dg-error \".this. is not a constant\" }\n };\n \n int main ()"}, {"sha": "d746f4768d0566ca1008f65e74d5d2050e7dd227", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept75.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36278f48cbc08c78e4ed588e5a049bd45fd1c55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept75.C?ref=36278f48cbc08c78e4ed588e5a049bd45fd1c55a", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/94944\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+struct A {\n+  void f();\n+};\n+\n+template<class T>\n+struct B : A<T> {\n+  void g() noexcept(noexcept(A<T>::f()));\n+};\n+\n+int main() {\n+  B<int> b;\n+  b.g();\n+}"}]}