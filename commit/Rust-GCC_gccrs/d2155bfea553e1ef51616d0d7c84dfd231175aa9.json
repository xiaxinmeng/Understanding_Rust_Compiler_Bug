{"sha": "d2155bfea553e1ef51616d0d7c84dfd231175aa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxNTViZmVhNTUzZTFlZjUxNjE2ZDBkN2M4NGRmZDIzMTE3NWFhOQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-02-11T22:16:48Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-02-11T22:16:48Z"}, "message": "std_valarray.h (valarray<>::shift): Avoid comparaison between signed and unsigned integer types.\n\n        * include/bits/std_valarray.h(valarray<>::shift): Avoid\n        comparaison between signed and unsigned integer types.\n        (valarray<>::cshift): Reformat.\n\nFrom-SVN: r39590", "tree": {"sha": "60f1014352296247578dbeedbdde7654f1c93e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f1014352296247578dbeedbdde7654f1c93e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2155bfea553e1ef51616d0d7c84dfd231175aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2155bfea553e1ef51616d0d7c84dfd231175aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2155bfea553e1ef51616d0d7c84dfd231175aa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2155bfea553e1ef51616d0d7c84dfd231175aa9/comments", "author": null, "committer": null, "parents": [{"sha": "e065341b56fe82a4a82f3b59c6df529791ed6537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e065341b56fe82a4a82f3b59c6df529791ed6537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e065341b56fe82a4a82f3b59c6df529791ed6537"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "1d84ae8da4c39f876528b6fbdfce011280e33431", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2155bfea553e1ef51616d0d7c84dfd231175aa9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2155bfea553e1ef51616d0d7c84dfd231175aa9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2155bfea553e1ef51616d0d7c84dfd231175aa9", "patch": "@@ -1,3 +1,9 @@\n+2001-02-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* include/bits/std_valarray.h(valarray<>::shift): Avoid\n+\tcomparaison between signed and unsigned integer types.\n+\t(valarray<>::cshift): Reformat.\n+\n 2001-02-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* src/gen-num-limits.cc: Use sigsetjmp and siglongjmp if available."}, {"sha": "be8f7cc5ac16e5f3112597b3bbbeced90ca07b76", "filename": "libstdc++-v3/include/bits/std_valarray.h", "status": "modified", "additions": 45, "deletions": 40, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2155bfea553e1ef51616d0d7c84dfd231175aa9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2155bfea553e1ef51616d0d7c84dfd231175aa9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h?ref=d2155bfea553e1ef51616d0d7c84dfd231175aa9", "patch": "@@ -472,48 +472,53 @@ namespace std {\n //   }\n \n   template <class _Tp>\n-  inline valarray<_Tp>\n-  valarray<_Tp>::shift (int __n) const\n-  {\n-      _Tp* const __a = static_cast<_Tp*>\n-          (__builtin_alloca (sizeof(_Tp) * _M_size));\n-      if (! __n)                          // __n == 0: no shift\n-        __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n-      else if (__n > 0) {                  // __n > 0: shift left\n-          if (__n > _M_size)\n-              __valarray_default_construct(__a, __a + __n);\n-          else {\n-              __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n-              __valarray_default_construct(__a+_M_size-__n, __a + _M_size);\n-          }\n-      }\n-      else {                             // __n < 0: shift right\n-          __valarray_copy_construct (_M_data, _M_data+_M_size+__n, __a-__n);\n-          __valarray_default_construct(__a, __a - __n);\n-      }\n-      return valarray<_Tp> (__a, _M_size);\n-  }\n+     inline valarray<_Tp>\n+     valarray<_Tp>::shift(int __n) const\n+     {\n+       _Tp* const __a = static_cast<_Tp*>\n+         (__builtin_alloca(sizeof(_Tp) * _M_size));\n+       if (__n == 0)                          // no shift\n+         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+       else if (__n > 0)         // __n > 0: shift left\n+         {                 \n+           if (size_t(__n) > _M_size)\n+             __valarray_default_construct(__a, __a + __n);\n+           else\n+             {\n+               __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n+               __valarray_default_construct(__a+_M_size-__n, __a + _M_size);\n+             }\n+         }\n+       else                        // __n < 0: shift right\n+         {                          \n+           __valarray_copy_construct (_M_data, _M_data+_M_size+__n, __a-__n);\n+           __valarray_default_construct(__a, __a - __n);\n+         }\n+       return valarray<_Tp> (__a, _M_size);\n+     }\n \n   template <class _Tp>\n-  inline valarray<_Tp>\n-  valarray<_Tp>::cshift (int __n) const\n-  {\n-      _Tp* const __a = static_cast<_Tp*>\n-          (__builtin_alloca (sizeof(_Tp) * _M_size));\n-      if (! __n)                          // __n == 0: no cshift\n-        __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n-      else if (__n > 0) {                 // __n > 0: cshift left\n-          __valarray_copy_construct(_M_data, _M_data+__n, __a+_M_size-__n);\n-          __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n-      }\n-      else {                            // __n < 0: cshift right\n-          __valarray_copy_construct\n-              (_M_data + _M_size+__n, _M_data + _M_size, __a);\n-          __valarray_copy_construct\n-              (_M_data, _M_data + _M_size+__n, __a - __n);\n-        }\n-      return valarray<_Tp> (__a, _M_size);\n-  }\n+     inline valarray<_Tp>\n+     valarray<_Tp>::cshift (int __n) const\n+     {\n+       _Tp* const __a = static_cast<_Tp*>\n+         (__builtin_alloca (sizeof(_Tp) * _M_size));\n+       if (__n == 0)               // no cshift\n+         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+       else if (__n > 0)           // cshift left\n+         {               \n+           __valarray_copy_construct(_M_data, _M_data+__n, __a+_M_size-__n);\n+           __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n+         }\n+       else                        // cshift right\n+         {                       \n+           __valarray_copy_construct\n+             (_M_data + _M_size+__n, _M_data + _M_size, __a);\n+           __valarray_copy_construct\n+             (_M_data, _M_data + _M_size+__n, __a - __n);\n+         }\n+       return valarray<_Tp>(__a, _M_size);\n+     }\n \n   template <class _Tp>\n   inline void"}]}