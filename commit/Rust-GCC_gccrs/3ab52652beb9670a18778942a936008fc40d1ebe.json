{"sha": "3ab52652beb9670a18778942a936008fc40d1ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiNTI2NTJiZWI5NjcwYTE4Nzc4OTQyYTkzNjAwOGZjNDBkMWViZQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1998-05-25T23:31:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-25T23:31:27Z"}, "message": "decl.c (push_namespace): Only produce one unique name for anonymous namespaces.\n\n\t* decl.c (push_namespace): Only produce one unique name for\n\tanonymous namespaces.\n\t(get_unique_name): Remove.\n\nFrom-SVN: r20054", "tree": {"sha": "25bf07a1ed829ecfca1a374f13bad4b4f735bc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25bf07a1ed829ecfca1a374f13bad4b4f735bc07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab52652beb9670a18778942a936008fc40d1ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab52652beb9670a18778942a936008fc40d1ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab52652beb9670a18778942a936008fc40d1ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab52652beb9670a18778942a936008fc40d1ebe/comments", "author": null, "committer": null, "parents": [{"sha": "a1ec8ea1de0d389e8ec8f29cdee92d339cfdd814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ec8ea1de0d389e8ec8f29cdee92d339cfdd814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ec8ea1de0d389e8ec8f29cdee92d339cfdd814"}], "stats": {"total": 62, "additions": 16, "deletions": 46}, "files": [{"sha": "7d01a2ecd70d6938d195586c901ce6856fbbc9fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab52652beb9670a18778942a936008fc40d1ebe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab52652beb9670a18778942a936008fc40d1ebe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ab52652beb9670a18778942a936008fc40d1ebe", "patch": "@@ -1,3 +1,9 @@\n+1998-05-25  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (push_namespace): Only produce one unique name for\n+\tanonymous namespaces.\n+\t(get_unique_name): Remove.\n+\n 1998-05-25  Mark Mitchell  <mark@markmitchell.com>\n \n \t* call.c (tourney): Don't do any extra comparisons."}, {"sha": "bcdb558f7c1fa924eac5a6fdedc1cbba92669c30", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab52652beb9670a18778942a936008fc40d1ebe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab52652beb9670a18778942a936008fc40d1ebe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3ab52652beb9670a18778942a936008fc40d1ebe", "patch": "@@ -146,7 +146,6 @@ static void resume_binding_level PROTO((struct binding_level *));\n static struct binding_level *make_binding_level PROTO((void));\n static int namespace_bindings_p PROTO((void));\n static void declare_namespace_level PROTO((void));\n-static tree get_unique_name PROTO((void));\n static void signal_catch PROTO((int));\n static void storedecls PROTO((tree));\n static void storetags PROTO((tree));\n@@ -1733,50 +1732,6 @@ set_namespace_binding (name, scope, val)\n   BINDING_VALUE (b) = val;\n }\n \n-extern char * first_global_object_name;\n-\n-/* Get a unique name for each call to this routine for unnamed namespaces.\n-   Mostly copied from get_file_function_name.  */\n-\n-static tree\n-get_unique_name ()\n-{\n-  static int temp_name_counter = 0;\n-  char *buf;\n-  register char *p;\n-\n-  if (first_global_object_name)\n-    p = first_global_object_name;\n-  else if (main_input_filename)\n-    p = main_input_filename;\n-  else\n-    p = input_filename;\n-\n-#define UNNAMED_NAMESPACE_FORMAT \"__%s_%d\"\n-\n-  buf = (char *) alloca (sizeof (UNNAMED_NAMESPACE_FORMAT) + strlen (p));\n-\n-  sprintf (buf, UNNAMED_NAMESPACE_FORMAT, p, temp_name_counter++);\n-\n-  /* Don't need to pull weird characters out of global names.  */\n-  if (p != first_global_object_name)\n-    {\n-      for (p = buf+2; *p; p++)\n-\tif (! ((*p >= '0' && *p <= '9')\n-#ifndef NO_DOLLAR_IN_LABEL\t/* this for `$'; unlikely, but... -- kr */\n-\t       || *p == '$'\n-#endif\n-#ifndef NO_DOT_IN_LABEL\t\t/* this for `.'; unlikely, but...  */\n-\t       || *p == '.'\n-#endif\n-\t       || (*p >= 'A' && *p <= 'Z')\n-\t       || (*p >= 'a' && *p <= 'z')))\n-\t  *p = '_';\n-    }\n-\n-  return get_identifier (buf);\n-}\n-\n /* Push into the scope of the NAME namespace.  If NAME is NULL_TREE, then we\n    select a name that is unique to this compilation unit.  */\n \n@@ -1796,7 +1751,16 @@ push_namespace (name)\n     }\n   else if (!name)\n     {\n-      name = get_unique_name ();\n+      /* The name of anonymous namespace is unique for the translation\n+         unit.  */\n+      static tree anon_name = NULL_TREE;\n+      if (!anon_name)\n+        anon_name = get_file_function_name ('N');\n+      name = anon_name;\n+      d = IDENTIFIER_NAMESPACE_VALUE (name);\n+      if (d)\n+        /* Reopening anonymous namespace.  */\n+        need_new = 0;\n       implicit_use = 1;\n     }\n   else if (current_namespace == global_namespace"}]}