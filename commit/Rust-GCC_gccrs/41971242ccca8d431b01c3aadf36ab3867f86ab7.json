{"sha": "41971242ccca8d431b01c3aadf36ab3867f86ab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5NzEyNDJjY2NhOGQ0MzFiMDFjM2FhZGYzNmFiMzg2N2Y4NmFiNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-07-24T15:17:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-24T15:17:04Z"}, "message": "* lib/scanasm.exp (scan-assembler*): Don't take \"testcase\" argument.\n\nFrom-SVN: r44302", "tree": {"sha": "2ba9fbd75a4a1bfd56a755e8992a2fffca542203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba9fbd75a4a1bfd56a755e8992a2fffca542203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41971242ccca8d431b01c3aadf36ab3867f86ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41971242ccca8d431b01c3aadf36ab3867f86ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41971242ccca8d431b01c3aadf36ab3867f86ab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41971242ccca8d431b01c3aadf36ab3867f86ab7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f817aaf987979e473b213f93b02c34b11209ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f817aaf987979e473b213f93b02c34b11209ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f817aaf987979e473b213f93b02c34b11209ae0"}], "stats": {"total": 175, "additions": 103, "deletions": 72}, "files": [{"sha": "add7b2c9d4d862a952cb4289ab154f55b8c005a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -1,3 +1,16 @@\n+2001-07-24  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* lib/scanasm.exp (scan-assembler*): Don't take \"testcase\" argument.\n+\t* gcc.dg/asm-2.c, gcc.dg/asm-3.c, gcc.dg/asm-fs-1.c, gcc.dg/dll-1.c,\n+\tgcc.dg/dll-3.c, gcc.dg/dll-4.c, gcc.dg/iftrap-1.c: Don't pass it.\n+\t* g++.dg/mangle1.C, g++.dg/vtgc1.C: Likewise.\n+\n+\t* lib/prune.exp (prune_gcc_output): Prune \"Please submit a full\n+\tbug report\" message.\n+\n+\t* g++.dg/dg.exp: Run tests from subdirectories other than \"special\".\n+\t* g++.dg/ext/instantiate1.C: Move from old-deja.\n+\n 2001-07-24  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* g77.f-torture/execute/intrinsic-unix-bessel.f: New test\n@@ -109,6 +122,13 @@ Mon Jul 16 12:21:56 2001  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \t* g++.old-deja/g++.other/enum5.C: New test.\n \n+2001-07-10  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* lib/g++-dg.exp: Load file-format and target-supports like gcc.\n+\t(g++-dg-prune): Call prune_gcc_output.\n+\t* prune.exp: New file for prune_gcc_output.\n+\t* lib/g++.exp, lib/gcc.exp: Load it.\n+\n 2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/compile/20010701-1.c,"}, {"sha": "ab377d13b4ed463c6972db098b3b6cfd4c73493e", "filename": "gcc/testsuite/g++.dg/abi/mangle1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle1.C?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -0,0 +1,28 @@\n+// Test for mangling of simple testcase involving construction vtables.\n+\n+// { dg-do compile }\n+// { dg-options \"-fno-inline\" }\n+\n+struct A {\n+  virtual void f () { }\n+};\n+\n+struct B: public virtual A { };\n+struct C: public B { };\n+\n+C c;\n+\n+// { dg-final { scan-assembler \"\\n_?_ZN1A1fEv\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZN1AC2Ev\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZN1BC2Ev\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZN1CC1Ev\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTC1C0_1B\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTI1A\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTI1B\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTI1C\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTS1A\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTS1B\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTS1C\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTT1C\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTV1A\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_ZTV1C\\[: \\t\\n\\]\" } }"}, {"sha": "0fde91e762cbedb9cc0ad563ac34d64931632009", "filename": "gcc/testsuite/g++.dg/mangle1.C", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f817aaf987979e473b213f93b02c34b11209ae0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmangle1.C?ref=6f817aaf987979e473b213f93b02c34b11209ae0", "patch": "@@ -1,28 +0,0 @@\n-// Test for mangling of simple testcase involving construction vtables.\n-\n-// { dg-do compile }\n-// { dg-options \"-fno-inline\" }\n-\n-struct A {\n-  virtual void f () { }\n-};\n-\n-struct B: public virtual A { };\n-struct C: public B { };\n-\n-C c;\n-\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZN1A1fEv\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZN1AC2Ev\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZN1BC2Ev\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZN1CC1Ev\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTC1C0_1B\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTI1A\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTI1B\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTI1C\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTS1A\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTS1B\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTS1C\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTT1C\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTV1A\\[: \\t\\n\\]\" } }\n-// { dg-final { scan-assembler mangle1.C \"\\n_?_ZTV1C\\[: \\t\\n\\]\" } }"}, {"sha": "c50855529bb4ccd4f70992f0ecdd570cd5940295", "filename": "gcc/testsuite/g++.dg/opt/vtgc1.C", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -118,16 +118,16 @@ void x3 (Multivs1 *ii) { ii->f2();}\n void x4 (Multiss2 *ii) { ii->f2();}\n void x5 (Multivv3 *ii) { ii->f2();}\n \n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivv3, 0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivv3, 0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multiss2, vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivs1, vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivs1, vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Multisv0, vtable for Side0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for Multisv0, vtable for Side0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Side0, 0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for VbasedA, 0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*VTT for VbasedA, 0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base2, vtable for Base1\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base1, vtable for Base0\" } }\n-// { dg-final { scan-assembler-dem vtgc1.C \"\\.vtable_inherit\\[ \\t\\]*vtable for Base0, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivv3, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivv3, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multiss2, vtable for Base2\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivs1, vtable for Base2\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivs1, vtable for Base2\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multisv0, vtable for Side0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multisv0, vtable for Side0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Side0, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for VbasedA, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for VbasedA, 0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base2, vtable for Base1\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base1, vtable for Base0\" } }\n+// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base0, 0\" } }", "previous_filename": "gcc/testsuite/g++.dg/vtgc1.C"}, {"sha": "5adee41b9c6f28a15ed5ca806a2cc86d4c5cc14a", "filename": "gcc/testsuite/gcc.dg/asm-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -6,4 +6,4 @@ int f()\n   asm volatile (\"foo%%bar\" : : );\n }\n \n-/* { dg-final { scan-assembler asm-2.c \"foo%bar\" } } */\n+/* { dg-final { scan-assembler \"foo%bar\" } } */"}, {"sha": "e7db804c18adbbf8e4ada24d00adb2c3b6b9e40a", "filename": "gcc/testsuite/gcc.dg/asm-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -6,4 +6,4 @@ int f()\n   asm (\"foo%%bar\");\n }\n \n-/* { dg-final { scan-assembler asm-3.c \"foo%%bar\" } } */\n+/* { dg-final { scan-assembler \"foo%%bar\" } } */"}, {"sha": "c60187a7af56c1ff60c35918d4bb3b2801ab320d", "filename": "gcc/testsuite/gcc.dg/asm-fs-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-fs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-fs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-fs-1.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -10,5 +10,5 @@ void foo (void) {}\n extern int foobar asm (\"_baz\");\n int foobar = 3;\n \n-/* { dg-final { scan-assembler-not asm-fs-1.c \"\\\\*_bar\" } } */\n-/* { dg-final { scan-assembler-not asm-fs-1.c \"\\\\*_baz\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\*_bar\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\*_baz\" } } */"}, {"sha": "4ae1a0e1797724032a24d9a62088c4db3557985f", "filename": "gcc/testsuite/gcc.dg/dll-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-1.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -6,5 +6,5 @@ __declspec (dllimport) void imp ();\n \n __declspec (dllexport) void exp () { imp (); }\n \n-/* { dg-final { scan-assembler dll-1.c \"\\.section\\[ \\t\\]*.drectve\\n\\[^\\n\\]*-export:exp.*__imp_imp\" } } */\n-/* { dg-final { scan-assembler-not dll-1.c \"__imp_exp\" } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t\\]*.drectve\\n\\[^\\n\\]*-export:exp.*__imp_imp\" } } */\n+/* { dg-final { scan-assembler-not \"__imp_exp\" } } */"}, {"sha": "0be1f9730252d6c57a5c7980ffcc919dd5563f7e", "filename": "gcc/testsuite/gcc.dg/dll-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -12,5 +12,5 @@ __declspec (dllimport) int foo2 ();\n __declspec (dllexport) int foo1 () { return foo2 (); }\n __declspec (dllexport) int foo2 () { return foo1 (); }\n \n-/* { dg-final { scan-assembler dll-3.c \"\\.section\\[ \\t\\]*\\.drectve\\n\\[^\\n\\]*-export:foo1.*\\.section\\[ \\t\\]*\\.drectve\\n\\[^\\n\\]*-export:foo2\" } } */\n-/* { dg-final { scan-assembler-not dll-3.c \"(__imp_foo1|__imp_foo2)\" } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t\\]*\\.drectve\\n\\[^\\n\\]*-export:foo1.*\\.section\\[ \\t\\]*\\.drectve\\n\\[^\\n\\]*-export:foo2\" } } */\n+/* { dg-final { scan-assembler-not \"(__imp_foo1|__imp_foo2)\" } } */"}, {"sha": "fec08fcbb604d09ecdaf42114f69cc8cd4262281", "filename": "gcc/testsuite/gcc.dg/dll-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-4.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -10,5 +10,5 @@ int foo2 = 5;\n int f () { return foo1 + foo2; }\n \n /* FIXME: We should scan the output of nm for this case.  */\n-/* { dg-final { scan-assembler dll-4.c \"(foo2:.*\\.comm\\[ \\t_\\]*foo1)\" } } */\n-/* { dg-final { scan-assembler-not dll-4.c \"__imp_\" } } */\n+/* { dg-final { scan-assembler \"(foo2:.*\\.comm\\[ \\t_\\]*foo1)\" } } */\n+/* { dg-final { scan-assembler-not \"__imp_\" } } */"}, {"sha": "b6abfc44e56b6925c2768e70754edd5fb05f3761", "filename": "gcc/testsuite/gcc.dg/iftrap-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -1,7 +1,7 @@\n /* Verify that we optimize to conditional traps.  */\n /* { dg-options \"-O\" } */\n /* { dg-do compile { target rs6000-*-* powerpc-*-* sparc*-*-* } } */\n-/* { dg-final { scan-assembler-not iftrap-1.c \"^\\t(trap|ta)\\[ \\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"^\\t(trap|ta)\\[ \\t\\]\" } } */\n \n void f1(int p)\n {"}, {"sha": "105da61c2f082ad5ae1bbc34c2f0e50985a27d64", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41971242ccca8d431b01c3aadf36ab3867f86ab7/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=41971242ccca8d431b01c3aadf36ab3867f86ab7", "patch": "@@ -19,10 +19,16 @@\n \n # Utility for scanning compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { testcase pattern args } {\n-    global subdir\n+proc scan-assembler { pattern args } {\n+    # This assumes that we are two frames down from dg-test, and that\n+    # it still stores the filename of the testcase in a local variable \"name\".\n+    # A cleaner solution would require a new dejagnu release.\n+    set testcase [uplevel 2 { concat \"$name\" }]\n \n-    set fd [open [file rootname $testcase].s r]\n+    # This must match the rule in gcc-dg.exp.\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    set fd [open $output_file r]\n     set text [read $fd]\n     close $fd\n \n@@ -32,17 +38,18 @@ proc scan-assembler { testcase pattern args } {\n     }\n \n     if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler $vmessage\"\n+\tpass \"$testcase scan-assembler $vmessage\"\n     } else {\n-\tfail \"$subdir/$testcase scan-assembler $vmessage\"\n+\tfail \"$testcase scan-assembler $vmessage\"\n     }\n }\n \n # Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { testcase pattern args } {\n-    global subdir\n+proc scan-assembler-not { pattern args } {\n+    set testcase [uplevel 2 { concat \"$name\" }]\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n \n-    set fd [open [file rootname $testcase].s r]\n+    set fd [open $output_file r]\n     set text [read $fd]\n     close $fd\n \n@@ -52,16 +59,15 @@ proc scan-assembler-not { testcase pattern args } {\n     }\n \n     if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not $vmessage\"\n+\tpass \"$testcase scan-assembler-not $vmessage\"\n     } else {\n-\tfail \"$subdir/$testcase scan-assembler-not $vmessage\"\n+\tfail \"$testcase scan-assembler-not $vmessage\"\n     }\n }\n \n # Utility for scanning demangled compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n-proc scan-assembler-dem { testcase pattern args } {\n-    global subdir\n+proc scan-assembler-dem { pattern args } {\n     global cxxfilt\n     global base_dir\n \n@@ -73,7 +79,10 @@ proc scan-assembler-dem { testcase pattern args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    set fd [open \"| $cxxfilt < [file rootname $testcase].s\" r]\n+    set testcase [uplevel 2 { concat \"$name\" }]\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    set fd [open \"| $cxxfilt < $output_file\" r]\n     set text [read $fd]\n     close $fd\n \n@@ -83,15 +92,14 @@ proc scan-assembler-dem { testcase pattern args } {\n     }\n \n     if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler $vmessage\"\n+\tpass \"$testcase scan-assembler $vmessage\"\n     } else {\n-\tfail \"$subdir/$testcase scan-assembler $vmessage\"\n+\tfail \"$testcase scan-assembler $vmessage\"\n     }\n }\n \n # Call pass if demangled pattern is not present, otherwise fail.\n-proc scan-assembler-dem-not { testcase pattern args } {\n-    global subdir\n+proc scan-assembler-dem-not { pattern args } {\n     global cxxfilt\n     global base_dir\n \n@@ -103,7 +111,10 @@ proc scan-assembler-dem-not { testcase pattern args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    set fd [open \"| $cxxfilt < [file rootname $testcase].s\" r]\n+    set testcase [uplevel 2 { concat \"$name\" }]\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    set fd [open \"| $cxxfilt < $output_file\" r]\n     set text [read $fd]\n     close $fd\n \n@@ -113,8 +124,8 @@ proc scan-assembler-dem-not { testcase pattern args } {\n     }\n \n     if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not $vmessage\"\n+\tpass \"$testcase scan-assembler-not $vmessage\"\n     } else {\n-\tfail \"$subdir/$testcase scan-assembler-not $vmessage\"\n+\tfail \"$testcase scan-assembler-not $vmessage\"\n     }\n }"}]}