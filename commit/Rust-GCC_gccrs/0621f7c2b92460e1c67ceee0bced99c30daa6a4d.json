{"sha": "0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyMWY3YzJiOTI0NjBlMWM2N2NlZWUwYmNlZDk5YzMwZGFhNmE0ZA==", "commit": {"author": {"name": "Janis Johnson", "email": "janosjo@codesourcery.com", "date": "2012-06-15T18:03:34Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2012-06-15T18:03:34Z"}, "message": "auto27.C: Add comments to checks for multiple messages reported for one line of source code.\n\n\t* g++.dg/cpp0x/auto27.C: Add comments to checks for multiple\n\tmessages reported for one line of source code.\n\t* g++.dg/cpp0x/constexpr-decl.C: Likewise.\n\t* g++.dg/cpp0x/decltype2.C: Likewise.\n\t* g++.dg/cpp0x/decltype3.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-syntax1.C: Likewise.\n\t* g++.dg/cpp0x/regress/error-recovery1.C: Likewise.\n\t* g++.dg/cpp0x/static_assert3.C: Likewise.\n\t* g++.dg/cpp0x/udlit-cpp98-neg.C: Likewise.\n\t* g++.dg/cpp0x/udlit-shadow-neg.C: Likewise.\n\t* g++.dg/cpp0x/union1.C: Likewise.\n\t* g++.dg/cpp0x/variadic-ex10.C: Likewise.\n\t* g++.dg/cpp0x/variadic-ex14.C: Likewise.\n\t* g++.dg/cpp0x/variadic2.C: Likewise.\n\t* g++.dg/cpp0x/variadic20.C: Likewise.\n\t* g++.dg/cpp0x/variadic74.C: Likewise.\n\t* g++.dg/diagnostic/bitfld2.C: Likewise.\n\t* g++.dg/ext/attrib44.C: Likewise.\n\t* g++.dg/ext/no-asm-1.C: Likewise.\n\t* g++.dg/other/error34.C: Likewise.\n\t* g++.dg/parse/crash46.C: Likewise.\n\t* g++.dg/parse/error10.C: Likewise.\n\t* g++.dg/parse/error2.C: Likewise.\n\t* g++.dg/parse/error3.C: Likewise.\n\t* g++.dg/parse/error36.C: Likewise.\n\t* g++.dg/parse/error8.C: Likewise.\n\t* g++.dg/parse/error9.C: Likewise.\n\t* g++.dg/parse/parser-pr28152-2.C: Likewise.\n\t* g++.dg/parse/parser-pr28152.C: Likewise.\n\t* g++.dg/parse/template25.C: Likewise.\n\t* g++.dg/parse/typename11.C: Likewise.\n\t* g++.dg/tc1/dr147.C: Likewise.\n\t* g++.dg/template/deduce3.C: Likewise.\n\t* g++.dg/template/koenig9.C: Likewise.\n\t* g++.dg/template/pr23510.C: Likewise.\n\t* g++.dg/warn/pr12242.C: Likewise.\n\t* g++.dg/warn/pr30551-2.C: Likewise.\n\t* g++.dg/warn/pr30551.C: Likewise.\n\t* g++.old-deja/g++.other/typename1.C: Likewise.\n\t* g++.old-deja/g++.pt/niklas01a.C: Likewise.\n\nFrom-SVN: r188677", "tree": {"sha": "c6438c56ec7411c49d01707ec95222a6ce3bd425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6438c56ec7411c49d01707ec95222a6ce3bd425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/comments", "author": null, "committer": null, "parents": [{"sha": "ad14c7daa3d72161494351762f14757f0acfb176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad14c7daa3d72161494351762f14757f0acfb176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad14c7daa3d72161494351762f14757f0acfb176"}], "stats": {"total": 297, "additions": 170, "deletions": 127}, "files": [{"sha": "7679c27913f918957afde35084accca74100f700", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,3 +1,46 @@\n+2012-06-15  Janis Johnson  <janosjo@codesourcery.com>\n+\n+\t* g++.dg/cpp0x/auto27.C: Add comments to checks for multiple\n+\tmessages reported for one line of source code.\n+\t* g++.dg/cpp0x/constexpr-decl.C: Likewise.\n+\t* g++.dg/cpp0x/decltype2.C: Likewise.\n+\t* g++.dg/cpp0x/decltype3.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-syntax1.C: Likewise.\n+\t* g++.dg/cpp0x/regress/error-recovery1.C: Likewise.\n+\t* g++.dg/cpp0x/static_assert3.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-cpp98-neg.C: Likewise.\n+\t* g++.dg/cpp0x/udlit-shadow-neg.C: Likewise.\n+\t* g++.dg/cpp0x/union1.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-ex10.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-ex14.C: Likewise.\n+\t* g++.dg/cpp0x/variadic2.C: Likewise.\n+\t* g++.dg/cpp0x/variadic20.C: Likewise.\n+\t* g++.dg/cpp0x/variadic74.C: Likewise.\n+\t* g++.dg/diagnostic/bitfld2.C: Likewise.\n+\t* g++.dg/ext/attrib44.C: Likewise.\n+\t* g++.dg/ext/no-asm-1.C: Likewise.\n+\t* g++.dg/other/error34.C: Likewise.\n+\t* g++.dg/parse/crash46.C: Likewise.\n+\t* g++.dg/parse/error10.C: Likewise.\n+\t* g++.dg/parse/error2.C: Likewise.\n+\t* g++.dg/parse/error3.C: Likewise.\n+\t* g++.dg/parse/error36.C: Likewise.\n+\t* g++.dg/parse/error8.C: Likewise.\n+\t* g++.dg/parse/error9.C: Likewise.\n+\t* g++.dg/parse/parser-pr28152-2.C: Likewise.\n+\t* g++.dg/parse/parser-pr28152.C: Likewise.\n+\t* g++.dg/parse/template25.C: Likewise.\n+\t* g++.dg/parse/typename11.C: Likewise.\n+\t* g++.dg/tc1/dr147.C: Likewise.\n+\t* g++.dg/template/deduce3.C: Likewise.\n+\t* g++.dg/template/koenig9.C: Likewise.\n+\t* g++.dg/template/pr23510.C: Likewise.\n+\t* g++.dg/warn/pr12242.C: Likewise.\n+\t* g++.dg/warn/pr30551-2.C: Likewise.\n+\t* g++.dg/warn/pr30551.C: Likewise.\n+\t* g++.old-deja/g++.other/typename1.C: Likewise.\n+\t* g++.old-deja/g++.pt/niklas01a.C: Likewise.\n+\n 2012-06-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tPR c++/51033"}, {"sha": "1921763607ac27bbf764ac7dbc9f85db2495dca4", "filename": "gcc/testsuite/g++.dg/cpp0x/auto27.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto27.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,6 +1,6 @@\n // PR c++/51186\n \n-auto main()->int\t       // { dg-error \"std=\" \"\" { target c++98 } }\n-\t\t\t       // { dg-error \"auto\" \"\" { target c++98 } 3 }\n-\t\t\t       // { dg-error \"no type\" \"\" { target c++98 } 3 }\n+auto main()->int\t       // { dg-error \"std=\" \"std\" { target c++98 } }\n+\t\t\t       // { dg-error \"auto\" \"auto\" { target c++98 } 3 }\n+\t\t\t       // { dg-error \"no type\" \"no type\" { target c++98 } 3 }\n { }"}, {"sha": "8c46fab33341e2af587f450cedcd687de999fe5a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-decl.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decl.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decl.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decl.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,8 +2,8 @@\n // { dg-options -std=c++0x }\n \n struct S {\n-  static constexpr int size;\t// { dg-error \"must have an initializer\" }\n-  // { dg-error \"previous declaration\" \"\" { target *-*-* } 5 }\n+  static constexpr int size;\t// { dg-error \"must have an initializer\" \"must have\" }\n+  // { dg-error \"previous declaration\" \"previous\" { target *-*-* } 5 }\n };\n \n const int limit = 2 * S::size;"}, {"sha": "e0c5900304705cdcd7f67ddd0d89e0b7b64018c2", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -45,8 +45,8 @@ int bar(char);\n int bar(int); \n CHECK_DECLTYPE(decltype(foo), int(char));\n \n-decltype(bar) z; // { dg-error \"overload\" }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 48 }\n+decltype(bar) z; // { dg-error \"overload\" \"overload\" }\n+// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 48 }\n \n CHECK_DECLTYPE(decltype(&foo), int(*)(char));\n CHECK_DECLTYPE(decltype(*&foo), int(&)(char));"}, {"sha": "b44dd17c8eadde914730f6bb61c995681be172e4", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -55,8 +55,8 @@ public:\n }; \n \n CHECK_DECLTYPE(decltype(aa.*&A::a), int&);\n-decltype(aa.*&A::b) zz; // { dg-error \"cannot create pointer to reference member\" }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 58 }\n+decltype(aa.*&A::b) zz; // { dg-error \"cannot create pointer to reference member\" \"cannot\" }\n+// { dg-error \"invalid type\" \"invalid type\" { target *-*-* } 58 }\n CHECK_DECLTYPE(decltype(caa.*&A::a), const int&);\n \n class X { "}, {"sha": "b3b749c2a5187afbff00763e9d0818b668f33922", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-syntax1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-syntax1.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,5 +1,5 @@\n // PR c++/46124\n // { dg-options -std=c++0x }\n \n-void foo() { [] () -> void (); } // { dg-error \"returning a function\" }\n-// { dg-error \"expected .\\{\" \"\" { target *-*-* } 4 }\n+void foo() { [] () -> void (); } // { dg-error \"returning a function\" \"returning\" }\n+// { dg-error \"expected .\\{\" \"expected\" { target *-*-* } 4 }"}, {"sha": "cdf99408473e935131547e23cbec6c62bc9647b8", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/error-recovery1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ferror-recovery1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ferror-recovery1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ferror-recovery1.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -5,7 +5,7 @@ template < bool > void\n foo ()\n {\n   const bool b =;\t\t// { dg-error \"\" }\n-  foo < b > ();\t\t\t// { dg-error \"constant expression\" }\n+  foo < b > ();\t\t\t// { dg-error \"constant expression\" \"const expr\" }\n };\n \n-// { dg-error \"no match\" \"\" { target *-*-* } 8 }\n+// { dg-error \"no match\" \"no match\" { target *-*-* } 8 }"}, {"sha": "0a4cbc98aff9bc3ea54c30e74d75423ec7a35023", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,4 +1,4 @@\n // { dg-options \"-std=c++0x\" }\n-static_assert(7 / 0, \"X\"); // { dg-error \"non-constant condition\" }\n-// { dg-warning \"division by zero\" \"\" { target *-*-* } 2 }\n-// { dg-error \"7 / 0.. is not a constant expression\" \"\" { target *-*-* } 2 }\n+static_assert(7 / 0, \"X\"); // { dg-error \"non-constant condition\" \"non-constant\" }\n+// { dg-warning \"division by zero\" \"zero\" { target *-*-* } 2 }\n+// { dg-error \"7 / 0.. is not a constant expression\" \"not a constant\" { target *-*-* } 2 }"}, {"sha": "cb4c359658cdeb9e336e30e8050ffbc430e8efb1", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-cpp98-neg.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-cpp98-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-cpp98-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-cpp98-neg.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -12,6 +12,6 @@ int\n operator\"\" _Q(const char *, std::size_t)\t// { dg-warning \"user-defined literals only available with\" }\n { return 42; }\n \n-int x = \"Hello\"_Q;\t// { dg-error \"invalid conversion from\" }\n+int x = \"Hello\"_Q;\t// { dg-error \"invalid conversion from\" \"invalid\" }\n \n-// { dg-error \"expected\" \"\" { target *-*-* } 15 }\n+// { dg-error \"expected\" \"expected\" { target *-*-* } 15 }"}, {"sha": "994d58c1a0b6518c68c74effec985f0574e22a4a", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-shadow-neg.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -39,11 +39,11 @@ operator\"\" ull(unsigned long long int k)  // { dg-warning \"integer suffix|shadow\n \n }\n \n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 5 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 9 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 13 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 17 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 25 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 29 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 33 }\n-// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 5 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 9 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 13 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 17 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 25 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 29 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 33 }\n+// { dg-warning \"literal operator suffixes not preceded by|are reserved for future standardization\" \"reserved\" { target *-*-* } 37 }"}, {"sha": "cb0f01719c9e1619b9d679b302c9043dbf7c42eb", "filename": "gcc/testsuite/g++.dg/cpp0x/union1.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion1.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -14,8 +14,8 @@ union B\n   A a;\t\t\t\t// { dg-error \"union member\" }\n };\n \n-B b;\t\t\t\t// { dg-error \"B::B\\\\(\\\\)\" }\n-B b2(b);\t\t\t// { dg-error \"B::B\\\\(const B&\\\\)\" }\n+B b;\t\t\t\t// { dg-error \"B::B\\\\(\\\\)\" \"B::B\" }\n+B b2(b);\t\t\t// { dg-error \"B::B\\\\(const B&\\\\)\" \"B::B\" }\n \n struct C\n {\n@@ -25,10 +25,10 @@ struct C\n   };\n };\n \n-C c;\t\t\t\t// { dg-error \"C::C\\\\(\\\\)\" }\n-C c2(c);\t\t\t// { dg-error \"C::C\\\\(const C&\\\\)\" }\n+C c;\t\t\t\t// { dg-error \"C::C\\\\(\\\\)\" \"C::C\" }\n+C c2(c);\t\t\t// { dg-error \"C::C\\\\(const C&\\\\)\" \"C::C\" }\n \n-// { dg-error \"B::~B\" \"\" { target *-*-* } 17 }\n-// { dg-error \"B::~B\" \"\" { target *-*-* } 18 }\n-// { dg-error \"C::~C\" \"\" { target *-*-* } 28 }\n-// { dg-error \"C::~C\" \"\" { target *-*-* } 29 }\n+// { dg-error \"B::~B\" \"B::~B\" { target *-*-* } 17 }\n+// { dg-error \"B::~B\" \"B::~B\" { target *-*-* } 18 }\n+// { dg-error \"C::~C\" \"C::~C\" { target *-*-* } 28 }\n+// { dg-error \"C::~C\" \"C::~C\" { target *-*-* } 29 }"}, {"sha": "e8b6b7221489886879cecbb3cfa3a5de6bc62f71", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex10.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -4,6 +4,6 @@ template<typename... Types> struct Tuple { };\n Tuple<> t0; // Types contains no arguments\n Tuple<int> t1; // Types contains one argument: int\n Tuple<int, float> t2; // Types contains two arguments: int and float\n-Tuple<0> error; // { dg-error \"mismatch\" }\n-// { dg-error \"expected a type\" \"\" { target *-*-* } 7 }\n-// { dg-error \"in declaration\" \"\" { target *-*-* } 7 }\n+Tuple<0> error; // { dg-error \"mismatch\" \"mismatch\" }\n+// { dg-error \"expected a type\" \"expected a type\" { target *-*-* } 7 }\n+// { dg-error \"in declaration\" \"in declaration\" { target *-*-* } 7 }"}, {"sha": "105096a78bf35e3289c42ee1b8962841484d493f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -8,12 +8,12 @@ template<template<class> class P> class X { /* ... */ };\n template<template<class...> class Q> class Y { /* ... */ };\n \n X<A> xA; // okay\n-X<B> xB; // { dg-error \"mismatch\" }\n-// { dg-error \"expected a template\" \"\" { target *-*-* } 11 }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 11 }\n-X<C> xC; // { dg-error \"mismatch\" }\n-// { dg-error \"expected a template\" \"\" { target *-*-* } 14 }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 14 }\n+X<B> xB; // { dg-error \"mismatch\" \"mismatch\" }\n+// { dg-error \"expected a template\" \"expected\" { target *-*-* } 11 }\n+// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 11 }\n+X<C> xC; // { dg-error \"mismatch\" \"mismatch\" }\n+// { dg-error \"expected a template\" \"expected\" { target *-*-* } 14 }\n+// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 14 }\n Y<A> yA;\n Y<B> yB;\n Y<C> yC; // okay"}, {"sha": "207a80648f3b5c9e01d0dc001a2cfd2b8a45a3b7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -8,8 +8,8 @@ class tuple3;\n template<typename T1, typename T2, typename... Rest>\n struct two_or_more {}; // { dg-error \"provided for\" }\n \n-typedef two_or_more<int> bad; // { dg-error \"2 or more\" }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 11 }\n+typedef two_or_more<int> bad; // { dg-error \"2 or more\" \"2 or more\" }\n+// { dg-error \"invalid type\" \"invalid type\" { target *-*-* } 11 }\n \n void f()\n {"}, {"sha": "bfb42bea09cea509efcd333f847fde148f4ede05", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic20.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -37,11 +37,11 @@ struct metatuple<First, Second, Metafunctions...> { // { dg-error \"struct\" }\n \n int a0[metatuple<>::value == 0? 1 : -1];\n int a1[metatuple<add_pointer>::value == 1? 1 : -1];\n-int a2a[metatuple<add_pointer, add_pointer>::value == 2? 1 : -1]; // { dg-error \"ambiguous|array bound\" }\n+int a2a[metatuple<add_pointer, add_pointer>::value == 2? 1 : -1]; // { dg-error \"ambiguous|array bound\" \"bound\" }\n int a2b[metatuple<add_reference, add_reference>::value == 2? 1 : -1];\n-int a3[metatuple<add_pointer, add_reference>::value == 3? 1 : -1]; // { dg-error \"ambiguous|array bound\" }\n+int a3[metatuple<add_pointer, add_reference>::value == 3? 1 : -1]; // { dg-error \"ambiguous|array bound\" \"bound\" }\n int a4[metatuple<add_reference>::value == 4? 1 : -1];\n int a5[metatuple<add_reference, add_pointer>::value == 5? 1 : -1];\n \n-// { dg-error \"incomplete\" \"\" { target *-*-* } 40 }\n-// { dg-error \"incomplete\" \"\" { target *-*-* } 42 }\n+// { dg-error \"incomplete\" \"incomplete\" { target *-*-* } 40 }\n+// { dg-error \"incomplete\" \"incomplete\" { target *-*-* } 42 }"}, {"sha": "312fe9d7040ed4bd85ebea33d6f5164190c6ba01", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic74.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -19,8 +19,8 @@ float f;\n A<int*, float*>::X<&i, &f> apple1;\n B<int, float>::X<&i, &f> banana1;\n \n-A<int*, float*>::X<&i> apple2; // { dg-error \"wrong number of template arguments\" }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 22 }\n-A<int*, float*>::X<&i, &f, &f> apple3; // { dg-error \"wrong number of template arguments\" }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 24 }\n+A<int*, float*>::X<&i> apple2; // { dg-error \"wrong number of template arguments\" \"wrong number\" }\n+// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 22 }\n+A<int*, float*>::X<&i, &f, &f> apple3; // { dg-error \"wrong number of template arguments\" \"wrong number\" }\n+// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 24 }\n A<int, float> apple4;"}, {"sha": "46d5ee2ab784fb17c4ab446f3b426224609ff89e", "filename": "gcc/testsuite/g++.dg/diagnostic/bitfld2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -3,7 +3,7 @@\n \n template<int> struct A\n {\n-  struct {} : 2;   // { dg-error \"expected ';' after struct\" }\n+  struct {} : 2;   // { dg-error \"expected ';' after struct\" \"expected\" }\n };\n-// { dg-error \"ISO C.. forbids declaration\" \"\" { target *-*-* } 6 }\n-// { dg-error \"ISO C.. prohibits anonymous\" \"\" { target *-*-* } 6 }\n+// { dg-error \"ISO C.. forbids declaration\" \"declaration\" { target *-*-* } 6 }\n+// { dg-error \"ISO C.. prohibits anonymous\" \"anonymous\" { target *-*-* } 6 }"}, {"sha": "cb83653f30da7a8cfb151361ba32686e28d06969", "filename": "gcc/testsuite/g++.dg/ext/attrib44.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib44.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,4 +1,4 @@\n // PR c++/52671\n // { dg-do compile }\n-__attribute__ ((deprecated)) enum E { E0 };\t// { dg-warning \"attribute ignored in declaration of\" }\n-// { dg-message \"must follow the\" \"\" { target *-*-* } 3 }\n+__attribute__ ((deprecated)) enum E { E0 };\t// { dg-warning \"attribute ignored in declaration of\" \"ignored\" }\n+// { dg-message \"must follow the\" \"must follow\" { target *-*-* } 3 }"}, {"sha": "e41ebbefcd84baf32c872fa6b3ded038541a79d5", "filename": "gcc/testsuite/g++.dg/ext/no-asm-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fno-asm-1.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -5,6 +5,6 @@\n // keywords.\n \n int asm;\t// { dg-error \"before .asm.\" }\n-int typeof;\t// { dg-error \"expected\" }\n-// { dg-error \"multiple types\" \"\" { target *-*-* } 8 }\n-// { dg-error \"declaration\" \"\" { target *-*-* } 8 }\n+int typeof;\t// { dg-error \"expected\" \"expected\" }\n+// { dg-error \"multiple types\" \"multiple\" { target *-*-* } 8 }\n+// { dg-error \"declaration\" \"declaration\" { target *-*-* } 8 }"}, {"sha": "d6f3eb590ea2728f6cbab0165f001a73c58d6f59", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" }\n-// { dg-error \"only constructors\" \"\" { target *-*-* } 5 }\n+S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" \"decl\" }\n+// { dg-error \"only constructors\" \"constructor\" { target *-*-* } 5 }"}, {"sha": "0ae22480fde9a59357481f3def6bdd114b5e2942", "filename": "gcc/testsuite/g++.dg/parse/crash46.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash46.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,17 +2,17 @@\n // { dg-do compile }\n \n void\n-foo (_Decimal32)\t// { dg-error \"declared void\" }\n+foo (_Decimal32)\t// { dg-error \"declared void\" \"declared\" }\n {\n }\n-\t\t\t// { dg-error \"was not declared\" \"\" { target *-*-* } 5 }\n+\t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 5 }\n void\n-bar (_Bool)\t\t// { dg-error \"declared void\" }\n+bar (_Bool)\t\t// { dg-error \"declared void\" \"declared\" }\n {\n }\n-\t\t\t// { dg-error \"was not declared\" \"\" { target *-*-* } 10 }\n+\t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 10 }\n void\n-baz (_Fract)\t\t// { dg-error \"declared void\" }\n+baz (_Fract)\t\t// { dg-error \"declared void\" \"declared\" }\n {\n }\n-\t\t\t// { dg-error \"was not declared\" \"\" { target *-*-* } 15 }\n+\t\t\t// { dg-error \"was not declared\" \"not\" { target *-*-* } 15 }"}, {"sha": "c2cd7e26bad8d5ef1d7b84d842fa9dad8e0f7441", "filename": "gcc/testsuite/g++.dg/parse/error10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -15,5 +15,5 @@ template <typename T> void foo()\n }\n \n // Here, columns nums are not very accurate either. Still acceptable though\n-// { dg-error \"30:invalid type in declaration before ';' token\" \"\" { target *-*-* } 14 }\n-// { dg-error \"30:two or more data types in declaration of 'e4'\" \"\" { target *-*-* } 14 }\n+// { dg-error \"30:invalid type in declaration before ';' token\" \"invalid\" { target *-*-* } 14 }\n+// { dg-error \"30:two or more data types in declaration of 'e4'\" \"2 or more\" { target *-*-* } 14 }"}, {"sha": "713957a319dbd90f079645f5eabf613da448019a", "filename": "gcc/testsuite/g++.dg/parse/error2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -8,8 +8,8 @@ int func(double);\n template <int>\n struct Foo {};\n \n-Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"\" { target *-*-* } 11 }\n-// { dg-error \"10:'g' cannot appear in a constant-expression\" \"\" { target *-*-* } 11 }\n-// { dg-error \"11:a function call cannot appear in a constant-expression\" \"\" { target *-*-* } 11 }\n-// { dg-error \"12:template argument 1 is invalid\" \"\" { target *-*-* } 11 }\n-// { dg-error \"15:invalid type in declaration before ';' token\" \"\" { target *-*-* } 11 }\n+Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-expression\" \"func double\" { target *-*-* } 11 }\n+// { dg-error \"10:'g' cannot appear in a constant-expression\" \"g\" { target *-*-* } 11 }\n+// { dg-error \"11:a function call cannot appear in a constant-expression\" \"call\" { target *-*-* } 11 }\n+// { dg-error \"12:template argument 1 is invalid\" \"invalid template argument\" { target *-*-* } 11 }\n+// { dg-error \"15:invalid type in declaration before ';' token\" \"invalid type\" { target *-*-* } 11 }"}, {"sha": "58739934156f20e65a94acbc30045886313a8032", "filename": "gcc/testsuite/g++.dg/parse/error3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -5,5 +5,5 @@ static void InstantiateConstraint(const float&, unsigned,\n                                   void(*AddFunction)(const TYPE&,bool&,\n                                                      char*, char*,\n                                                      unsigned*));\n-// { dg-error \"64: ISO C\\\\+\\\\+ forbids declaration of 'parameter' with no type\" \"\" { target *-*-* }  { 5 } }\n-// { dg-error \"60: 'TYPE' does not name a type\" \"\" { target *-*-* } { 5 } }\n+// { dg-error \"64: ISO C\\\\+\\\\+ forbids declaration of 'parameter' with no type\" \"forbids\" { target *-*-* }  { 5 } }\n+// { dg-error \"60: 'TYPE' does not name a type\" \"does not\" { target *-*-* } { 5 } }"}, {"sha": "a99ad299d39c35d68a5e3c34fbe4622fa8947879", "filename": "gcc/testsuite/g++.dg/parse/error36.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -11,22 +11,22 @@ template <class T>\n void f(T t)\n {\n   typedef A<T>::foo type;\t// { dg-error \"typename\" }\n-  A<T>::bar b;\t\t\t// { dg-error \"typename\" }\n-} // { dg-error \"expected ';'\" \"\" { target *-*-* } 14 }\n+  A<T>::bar b;\t\t\t// { dg-error \"typename\" \"typename\" }\n+} // { dg-error \"expected ';'\" \"expected\" { target *-*-* } 14 }\n \n // PR c++/36353\n template <class T> struct B\n {\n   void f()\n   {\n-    A<T>::baz z;\t\t// { dg-error \"typename\" }\n-  } // { dg-error \"expected ';'\" \"\" { target *-*-* } 22 }\n+    A<T>::baz z;\t\t// { dg-error \"typename\" \"typename\" }\n+  } // { dg-error \"expected ';'\" \"expected\" { target *-*-* } 22 }\n };\n \n // PR c++/40738\n template <class T>\n-void g(const A<T>::type &t);\t// { dg-error \"typename\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 28 }\n+void g(const A<T>::type &t);\t// { dg-error \"typename\" \"typename\" }\n+// { dg-error \"no type\" \"no type\" { target *-*-* } 28 }\n \n // PR c++/18451\n template <class T> A<T>::B A<T>::b; // { dg-error \"typename\" }"}, {"sha": "61e42e0299a752e3f3f5dd0bda3d1a206601c75b", "filename": "gcc/testsuite/g++.dg/parse/error8.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -4,6 +4,6 @@\n struct A { friend typename struct B; };\n \n \n-// { dg-error \"28:expected nested-name-specifier before 'struct'\" \"\" { target *-*-* } 4 }\n-// { dg-error \"35:multiple types in one declaration\" \"\" { target *-*-* } 4 }\n-// { dg-error \"12:friend declaration does not name a class or function\" \"\" { target *-*-* } 4 }\n+// { dg-error \"28:expected nested-name-specifier before 'struct'\" \"expected\" { target *-*-* } 4 }\n+// { dg-error \"35:multiple types in one declaration\" \"multiple\" { target *-*-* } 4 }\n+// { dg-error \"12:friend declaration does not name a class or function\" \"friend decl\" { target *-*-* } 4 }"}, {"sha": "3426c694000b52da47aead96359eba8edf3de8e7", "filename": "gcc/testsuite/g++.dg/parse/error9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -5,5 +5,5 @@ enum { FOO = 1, BAR = 2 };\n int a[] = { FOO: 1, BAR: 2 };\n \n // the following 2 column locations are still not accurate enough\n-// { dg-error \"28:name 'FOO' used in a GNU-style designated initializer for an array\" \"\" { target *-*-* } 5 }\n-// { dg-error \"28:name 'BAR' used in a GNU-style designated initializer for an array\" \"\" { target *-*-* } 5 }\n+// { dg-error \"28:name 'FOO' used in a GNU-style designated initializer for an array\" \"FOO\" { target *-*-* } 5 }\n+// { dg-error \"28:name 'BAR' used in a GNU-style designated initializer for an array\" \"BAR\" { target *-*-* } 5 }"}, {"sha": "a5bbb9288c5483b93e6677ad56b6c6120984d508", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152-2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -6,8 +6,8 @@ main (void)\n {\n   __complex__ float z;\n \n-  z = __complex__ (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '__complex__'\" } \n-  // { dg-error \"expected .;. before .__complex__.\" \"\" { target *-*-* } 9 } \n-  z = __complex__ (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '__complex__'\" } \n-  // { dg-error \"expected .;. before '__complex__'\" \"\" { target *-*-* } 11 } \n-  // { dg-error \"at end of input\" \"\" { target *-*-* } 11 } \n+  z = __complex__ (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '__complex__'\" \"primary-expression\" } \n+  // { dg-error \"expected .;. before .__complex__.\" \"semicolon\" { target *-*-* } 9 } \n+  z = __complex__ (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '__complex__'\" \"primaty-expression\" } \n+  // { dg-error \"expected .;. before '__complex__'\" \"semicolon\" { target *-*-* } 11 } \n+  // { dg-error \"at end of input\" \"end\" { target *-*-* } 11 } "}, {"sha": "4a7c77e45ac32b511162ecee4645aa166df8b176", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -6,8 +6,8 @@ main (void)\n {\n   _Complex float z;\n \n-  z = _Complex (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '_Complex'\" } \n-  // { dg-error \"expected .;. before ._Complex.\" \"\" { target *-*-* } 9 } \n-  z = _Complex (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '_Complex'\" } \n-  // { dg-error \"expected .;. before '_Complex'\" \"\" { target *-*-* } 11 } \n-  // { dg-error \"at end of input\" \"\" { target *-*-* } 11 } \n+  z = _Complex (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n+  // { dg-error \"expected .;. before ._Complex.\" \"semicolon\" { target *-*-* } 9 } \n+  z = _Complex (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n+  // { dg-error \"expected .;. before '_Complex'\" \"semicolon\" { target *-*-* } 11 } \n+  // { dg-error \"at end of input\" \"end\" { target *-*-* } 11 } "}, {"sha": "0da3887c3a4aefee22552d6f5f7c0026d63506da", "filename": "gcc/testsuite/g++.dg/parse/template25.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate25.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -9,6 +9,6 @@ void f(void)\n \n void g(void)\n {\n-  template f<int>(); /* { dg-error \"expected primary-expression\" } */\n-  /* { dg-error \"expected ';'\" \"\" { target *-*-* } 12 } */\n+  template f<int>(); /* { dg-error \"expected primary-expression\" \"primary-expression\" } */\n+  /* { dg-error \"expected ';'\" \"semicolon\" { target *-*-* } 12 } */\n }"}, {"sha": "bbaaec72bccd865f1a2b4f9d06b066896bed3446", "filename": "gcc/testsuite/g++.dg/parse/typename11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -10,7 +10,7 @@ template <int dim> struct Y : X<dim> {\n \n // note: I is nested type in X, not Y!\n template <int dim>\n-Y<dim>::I::I () {}\t\t// { dg-error \"dependent typedef\" }\n-// { dg-error \"no type|dependent type\" \"\" { target *-*-* } 13 }\n+Y<dim>::I::I () {}\t\t// { dg-error \"dependent typedef\" \"typedef\" }\n+// { dg-error \"no type|dependent type\" \"no type\" { target *-*-* } 13 }\n \n template struct Y<1>;"}, {"sha": "0fb97e8ab7d367b1e9e5bc510bd95bdbf4010199", "filename": "gcc/testsuite/g++.dg/tc1/dr147.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -20,8 +20,8 @@ void A::f()\n \n void f()\n {\n-  A::A a; // { dg-error \"constructor\" }\n-} // { dg-error \"\" \"\" { target *-*-* } 23 } error cascade\n+  A::A a; // { dg-error \"constructor\" \"constructor\" }\n+} // { dg-error \"\" \"error cascade\" { target *-*-* } 23 } error cascade\n }\n \n namespace N2 {"}, {"sha": "72c7e207a638945ecd76925ba316caee66221414", "filename": "gcc/testsuite/g++.dg/template/deduce3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce3.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -1,11 +1,11 @@\n template <typename T>\n-void f(int, T (*)() = 0);\t// { dg-message \"note\" }\n+void f(int, T (*)() = 0);\t// { dg-message \"note\" \"note\" }\n \n void g() {\n   typedef int A[2];\n   f<A>(0); // { dg-error \"\" }\n-  // { dg-error \"returning an array\" \"candidate explanation\" { target *-*-* } 2 }\n+  // { dg-error \"returning an array\" \"returning an array\" { target *-*-* } 2 }\n   typedef void F();\n   f<F>(0); // { dg-error \"\" }\n-  // { dg-error \"returning a function\" \"candidate explanation\" { target *-*-* } 2 }\n+  // { dg-error \"returning a function\" \"returning a function\" { target *-*-* } 2 }\n }"}, {"sha": "f2cf9ed9978ad00b315e51d4444c0cf2b389d0c0", "filename": "gcc/testsuite/g++.dg/template/koenig9.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -16,8 +16,8 @@ struct A\n \n template <class T> struct B: A<T>\n {\n-  void f() { h(T()); }\t\t// { dg-error \"argument-dependent\" }\n-  static void g() { h(T()); }\t// { dg-error \"argument-dependent\" }\n+  void f() { h(T()); }\t\t// { dg-error \"argument-dependent\" \"arg-dep\" }\n+  static void g() { h(T()); }\t// { dg-error \"argument-dependent\" \"arg-dep\" }\n };\n \n int main()\n@@ -27,7 +27,7 @@ int main()\n   b.g();\n }\n \n-// { dg-message \"dependent base .A.int\" \"\" { target *-*-* } 19 }\n-// { dg-message \"this->h\" \"\" { target *-*-* } 19 }\n-// { dg-message \"dependent base .A.int\" \"\" { target *-*-* } 20 }\n-// { dg-message \"B::h\" \"\" { target *-*-* } 20 }\n+// { dg-message \"dependent base .A.int\" \"base\" { target *-*-* } 19 }\n+// { dg-message \"this->h\" \"this->h\" { target *-*-* } 19 }\n+// { dg-message \"dependent base .A.int\" \"base\" { target *-*-* } 20 }\n+// { dg-message \"B::h\" \"B::h\" { target *-*-* } 20 }"}, {"sha": "7163e30ba2363e290bb6d78df92cf8896504ef2c", "filename": "gcc/testsuite/g++.dg/template/pr23510.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -3,9 +3,9 @@\n template<unsigned int nFactor>\n struct Factorial\n {\n-  enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" } \n-  // { dg-message \"recursively required\" \"\" { target *-*-* } 6 }\n-  // { dg-error \"incomplete type\" \"\" { target *-*-* } 6 } \n+  enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" \"exceeds\" } \n+  // { dg-message \"recursively required\" \"recurse\" { target *-*-* } 6 }\n+  // { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 6 } \n } // { dg-error \"expected ';' after\" }\n \n   template<>"}, {"sha": "a2f81f87a6245050e642cdecb3c01c6576455f76", "filename": "gcc/testsuite/g++.dg/warn/pr12242.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -10,8 +10,8 @@ void example ()\n   X x;\n   Y y;\n   \n-  x = 10;  // { dg-warning \"invalid conversion from .int. to .X.\" }\n-           // { dg-warning \"unspecified\" \"\" { target *-*-* } 13 }\n+  x = 10;  // { dg-warning \"invalid conversion from .int. to .X.\" \"invalid\" }\n+           // { dg-warning \"unspecified\" \"unspecified\" { target *-*-* } 13 }\n   x = 1;   // { dg-warning \"invalid conversion from .int. to .X.\" }\n   x = C;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  \n   x = D;   // { dg-error \"cannot convert .Y. to .X. in assignment\" }  "}, {"sha": "fe85c4ff4b4601bcfece426cc5e9fd9bf315f828", "filename": "gcc/testsuite/g++.dg/warn/pr30551-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"-pedantic-errors\" }\n // { dg-skip-if \"-Wmain not enabled with -pedantic on SPU\" { spu-*-* } } \n-int main(char a) {} /* { dg-error \"first argument of .*main.* should be .int.\" } */\n-/* { dg-error \"main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+int main(char a) {} /* { dg-error \"first argument of .*main.* should be .int.\" \"int\" } */\n+/* { dg-error \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ "}, {"sha": "23367139c20ea420d017e75afb9760ee086395fd", "filename": "gcc/testsuite/g++.dg/warn/pr30551.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n // { dg-skip-if \"-Wmain not enabled on SPU\" { spu-*-* } } \n-int main(char a) {} /* { dg-warning \"first argument of .*main.* should be .int.\" } */\n-/* { dg-warning \"main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+int main(char a) {} /* { dg-warning \"first argument of .*main.* should be .int.\" \"int\" } */\n+/* { dg-warning \"main.* takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ "}, {"sha": "a5cbad439270734827cb1cbcca2587c1ea2bf8c8", "filename": "gcc/testsuite/g++.old-deja/g++.other/typename1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -13,5 +13,5 @@ public:\n template<class T>\n void f()\n {\n-  Vector<T>::iterator i = 0; // { dg-error \"typename\" } missing typename\n-} // { dg-error \"expected\" \"\" { target *-*-* } 16 }\n+  Vector<T>::iterator i = 0; // { dg-error \"typename\" \"typename\" } missing typename\n+} // { dg-error \"expected\" \"expected\" { target *-*-* } 16 }"}, {"sha": "84765142fe3e4bfdd1d2e9bc8da75944db30304f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/niklas01a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fniklas01a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621f7c2b92460e1c67ceee0bced99c30daa6a4d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fniklas01a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fniklas01a.C?ref=0621f7c2b92460e1c67ceee0bced99c30daa6a4d", "patch": "@@ -2,8 +2,8 @@\n // { dg-options \"-fshow-column\" }\n \n struct A { // { dg-error \"\" } forward declaration\n-  friend struct B : A {\t\t// { dg-error \"invalid use of incomplete type 'struct A\" }\n+  friend struct B : A {\t\t// { dg-error \"invalid use of incomplete type 'struct A\" \"invalid\" }\n     int x;\n-  };\t// { dg-error \"class definition may not be declared a friend\" \"\"  { target *-*-* } { 5 } }\n+  };\t// { dg-error \"class definition may not be declared a friend\" \"may not\"  { target *-*-* } { 5 } }\n   int y;\n };"}]}