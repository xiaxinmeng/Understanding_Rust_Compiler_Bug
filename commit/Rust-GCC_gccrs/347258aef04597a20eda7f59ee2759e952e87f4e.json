{"sha": "347258aef04597a20eda7f59ee2759e952e87f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3MjU4YWVmMDQ1OTdhMjBlZGE3ZjU5ZWUyNzU5ZTk1MmU4N2Y0ZQ==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2002-06-18T16:25:00Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2002-06-18T16:25:00Z"}, "message": "natPlainDatagramSocketImpl.cc (receive): Check bounds of argument to FD_SET.\n\n\t* java/net/natPlainDatagramSocketImpl.cc (receive):\n\tCheck bounds of argument to FD_SET.\n\t(setOption): Throw exception if socket is closed.\n\n\t* java/net/natPlainSocketImpl.cc (accept, read):\n\tCheck bounds of argument to FD_SET.\n\t(setOption): Throw exception if socket is closed.\n\nFrom-SVN: r54750", "tree": {"sha": "ee4f04c77d2441ffc0343c15cf24de335f47319d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4f04c77d2441ffc0343c15cf24de335f47319d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347258aef04597a20eda7f59ee2759e952e87f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347258aef04597a20eda7f59ee2759e952e87f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347258aef04597a20eda7f59ee2759e952e87f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347258aef04597a20eda7f59ee2759e952e87f4e/comments", "author": null, "committer": null, "parents": [{"sha": "18ba380b3a22e6e76d6515c16931611a0bcbf7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ba380b3a22e6e76d6515c16931611a0bcbf7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ba380b3a22e6e76d6515c16931611a0bcbf7e6"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "9de49b06fc79bb3b4534b7580436de7de271e8d7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=347258aef04597a20eda7f59ee2759e952e87f4e", "patch": "@@ -1,3 +1,13 @@\n+2002-06-18  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* java/net/natPlainDatagramSocketImpl.cc (receive):\n+\tCheck bounds of argument to FD_SET.\n+\t(setOption): Throw exception if socket is closed.\n+\n+\t* java/net/natPlainSocketImpl.cc (accept, read):\n+\tCheck bounds of argument to FD_SET.\n+\t(setOption): Throw exception if socket is closed.\n+\n 2002-06-18  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj/javaprims.h: Updated class declaration list."}, {"sha": "4db99121dd7e5f132a6592460be348fddb92d2e5", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=347258aef04597a20eda7f59ee2759e952e87f4e", "patch": "@@ -361,7 +361,7 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n // FIXME: implement timeout support for Win32\n #ifndef WIN32\n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n-  if (timeout > 0)\n+  if (timeout > 0 && fnum >= 0 && fnum < FD_SETSIZE)\n     {\n       fd_set rset;\n       struct timeval tv;\n@@ -501,6 +501,9 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n   int val;\n   socklen_t val_len = sizeof (val);\n \n+  if (fnum < 0)\n+    throw new java::net::SocketException (JvNewStringUTF (\"Socket closed\"));\n+\n   if (_Jv_IsInstanceOf (value, &BooleanClass))\n     {\n       java::lang::Boolean *boolobj = "}, {"sha": "4a75e980073e3468363b10fc3b1ca16d3befd260", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347258aef04597a20eda7f59ee2759e952e87f4e/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=347258aef04597a20eda7f59ee2759e952e87f4e", "patch": "@@ -369,7 +369,7 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n // FIXME: implement timeout support for Win32\n #ifndef WIN32\n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n-  if (timeout > 0)\n+  if (timeout > 0 && fnum >= 0 && fnum < FD_SETSIZE)\n     {\n       fd_set rset;\n       struct timeval tv;\n@@ -516,7 +516,7 @@ java::net::PlainSocketImpl::read(void)\n // FIXME: implement timeout support for Win32\n #ifndef WIN32\n   // Do timeouts via select.\n-  if (timeout > 0)\n+  if (timeout > 0 && fnum >= 0 && fnum < FD_SETSIZE)\n   {\n     // Create the file descriptor set.\n     fd_set read_fds;\n@@ -575,7 +575,7 @@ java::net::PlainSocketImpl::read(jbyteArray buffer, jint offset, jint count)\n // FIXME: implement timeout support for Win32\n #ifndef WIN32\n   // Do timeouts via select.\n-  if (timeout > 0)\n+  if (timeout > 0 && fnum >= 0 && fnum < FD_SETSIZE)\n   {\n     // Create the file descriptor set.\n     fd_set read_fds;\n@@ -662,6 +662,7 @@ java::net::PlainSocketImpl::available(void)\n \n #if defined(HAVE_SELECT)\n   if (! num_set)\n+  if (! num_set && fnum >= 0 && fnum < FD_SETSIZE)\n     {\n       fd_set rd;\n       FD_ZERO (&rd);\n@@ -689,6 +690,9 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n   int val;\n   socklen_t val_len = sizeof (val);\n \n+  if (fnum < 0)\n+    throw new java::net::SocketException (JvNewStringUTF (\"Socket closed\"));\n+\n   if (_Jv_IsInstanceOf (value, &java::lang::Boolean::class$))\n     {\n       java::lang::Boolean *boolobj = "}]}