{"sha": "f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjZDRmOGNlYjg5NTk2YmUwMjgwMWNkMTFlOGRiZjc4ZmIxMDAxNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-24T13:06:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-24T13:06:56Z"}, "message": "Define vect_perm for variable-length SVE\n\nVariable-length SVE now supports enough permutes to define vect_perm.\n\nThe change to vect_perm_supported is currently a no-op because the\nfunction is only called with a count of 3.\n\n2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\t* lib/target-supports.exp (vect_perm_supported): Only return\n\tfalse for variable-length vectors if the permute size is not\n\ta power of 2.\n\t(check_effective_target_vect_perm)\n\t(check_effective_target_vect_perm_byte)\n\t(check_effective_target_vect_perm_short): Remove check for\n\tvariable-length vectors.\n\t* gcc.dg/vect/slp-23.c: Add an XFAIL for variable-length SVE.\n\t* gcc.dg/vect/slp-perm-10.c: Likewise.\n\t* gcc.dg/vect/slp-perm-9.c: Add an XFAIL for variable-length vectors.\n\nFrom-SVN: r263834", "tree": {"sha": "c72d001a8699cc81b67c725ece60cadc1a6ab8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72d001a8699cc81b67c725ece60cadc1a6ab8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2f568c9a8375927efede4bfc83d6553da7f9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2f568c9a8375927efede4bfc83d6553da7f9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2f568c9a8375927efede4bfc83d6553da7f9a2"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "c6b61981c3dcccc433ac393890772131d0483689", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "patch": "@@ -1,3 +1,16 @@\n+2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp (vect_perm_supported): Only return\n+\tfalse for variable-length vectors if the permute size is not\n+\ta power of 2.\n+\t(check_effective_target_vect_perm)\n+\t(check_effective_target_vect_perm_byte)\n+\t(check_effective_target_vect_perm_short): Remove check for\n+\tvariable-length vectors.\n+\t* gcc.dg/vect/slp-23.c: Add an XFAIL for variable-length SVE.\n+\t* gcc.dg/vect/slp-perm-10.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-9.c: Add an XFAIL for variable-length vectors.\n+\n 2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/bswap_1.c: New test."}, {"sha": "7d330c787d1118591ecd31fda05cff108cf967e3", "filename": "gcc/testsuite/gcc.dg/vect/slp-23.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c?ref=f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "patch": "@@ -107,8 +107,8 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_strided8 && { ! { vect_no_align} } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! { vect_strided8 || vect_no_align } } } } } */\n-/* We fail to vectorize the second loop with variable-length SVE but\n-   fall back to 128-bit vectors, which does use SLP.  */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect_perm } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_perm } } } */\n+/* SLP fails for the second loop with variable-length SVE because\n+   the load size is greater than the minimum vector size.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target vect_perm xfail { aarch64_sve && vect_variable_length } } } } */\n   "}, {"sha": "678152ba4168d32f84a1d1b01ba6c43b210ec8b9", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-10.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-10.c?ref=f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "patch": "@@ -50,4 +50,6 @@ int main ()\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */\n+/* SLP fails for variable-length SVE because the load size is greater\n+   than the minimum vector size.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm xfail { aarch64_sve && vect_variable_length } } } } */"}, {"sha": "c54420abd9d9047e5ae686ae2d0170e8523da134", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "patch": "@@ -59,7 +59,9 @@ int main (int argc, const char* argv[])\n \n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" { target { ! { vect_perm_short || vect_load_lanes } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm_short || vect_load_lanes } } } } */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target { vect_perm_short && { ! vect_perm3_short } } } } } */\n+/* We don't try permutes with a group size of 3 for variable-length\n+   vectors.  */\n+/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target { vect_perm_short && { ! vect_perm3_short } } xfail vect_variable_length } } } */\n /* { dg-final { scan-tree-dump-not \"permutation requires at least three vectors\" \"vect\" { target vect_perm3_short } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { { ! vect_perm3_short } || vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_short && { ! vect_load_lanes } } } } } */"}, {"sha": "b51e8f0a5e9e24c79aeddda96da7952086a3511e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5cd4f8ceb89596be02801cd11e8dbf78fb10014/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f5cd4f8ceb89596be02801cd11e8dbf78fb10014", "patch": "@@ -5758,8 +5758,7 @@ proc check_effective_target_vect_perm { } {\n     } else {\n \tset et_vect_perm_saved($et_index) 0\n         if { [is-effective-target arm_neon]\n-\t     || ([istarget aarch64*-*-*]\n-\t\t && ![check_effective_target_vect_variable_length])\n+\t     || [istarget aarch64*-*-*]\n \t     || [istarget powerpc*-*-*]\n              || [istarget spu-*-*]\n \t     || [istarget i?86-*-*] || [istarget x86_64-*-*]\n@@ -5824,7 +5823,9 @@ proc check_effective_target_vect_perm { } {\n \n proc vect_perm_supported { count element_bits } {\n     set vector_bits [lindex [available_vector_sizes] 0]\n-    if { $vector_bits <= 0 } {\n+    # The number of vectors has to be a power of 2 when permuting\n+    # variable-length vectors.\n+    if { $vector_bits <= 0 && ($count & -$count) != $count } {\n \treturn 0\n     }\n     set vf [expr { $vector_bits / $element_bits }]\n@@ -5864,8 +5865,7 @@ proc check_effective_target_vect_perm_byte { } {\n         if { ([is-effective-target arm_neon]\n \t      && [is-effective-target arm_little_endian])\n \t     || ([istarget aarch64*-*-*]\n-\t\t && [is-effective-target aarch64_little_endian]\n-\t\t && ![check_effective_target_vect_variable_length])\n+\t\t && [is-effective-target aarch64_little_endian])\n \t     || [istarget powerpc*-*-*]\n \t     || [istarget spu-*-*]\n \t     || ([istarget mips-*.*]\n@@ -5904,8 +5904,7 @@ proc check_effective_target_vect_perm_short { } {\n         if { ([is-effective-target arm_neon]\n \t      && [is-effective-target arm_little_endian])\n \t     || ([istarget aarch64*-*-*]\n-\t\t && [is-effective-target aarch64_little_endian]\n-\t\t && ![check_effective_target_vect_variable_length])\n+\t\t && [is-effective-target aarch64_little_endian])\n \t     || [istarget powerpc*-*-*]\n \t     || [istarget spu-*-*]\n \t     || (([istarget i?86-*-*] || [istarget x86_64-*-*])"}]}