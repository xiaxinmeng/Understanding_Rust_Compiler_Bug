{"sha": "cd68edf894d6b72e5bc37ac205deef9d237ab70b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2OGVkZjg5NGQ2YjcyZTViYzM3YWMyMDVkZWVmOWQyMzdhYjcwYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:56:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:56:33Z"}, "message": "c++: Respect current_constraint_diagnosis_depth in diagnose_compound_requirement\n\nThe previous patch tries to avoid changing our current default diagnostics.  But\nfor the sake of consistency we arguably should also respect\ncurrent_constraint_diagnosis_depth in diagnose_compound_requirement() like we do\nin the other error-replaying diagnostic routines.  But doing so would be a\nchange to our default diagnostics behavior, so the change has been split out\ninto this separate patch for separate consideration.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (diagnose_compound_requirement): When diagnosing a\n\tcompound requirement, maybe replay the satisfaction failure, subject to\n\tthe current diagnosis depth.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/diagnostic1.C: Pass -fconcepts-diagnostics-depth=2.\n\t* g++.dg/concepts/diagnostic5.C: Adjust expected diagnostics.\n\t* g++.dg/cpp2a/concepts-iconv1.C: Pass -fconcepts-diagnostics-depth=2.\n\t* g++.dg/cpp2a/concepts-requires5.C: Likewise.", "tree": {"sha": "1ba70ce7194fddbe4c30a12da104d061ffe4c661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba70ce7194fddbe4c30a12da104d061ffe4c661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd68edf894d6b72e5bc37ac205deef9d237ab70b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd68edf894d6b72e5bc37ac205deef9d237ab70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd68edf894d6b72e5bc37ac205deef9d237ab70b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd68edf894d6b72e5bc37ac205deef9d237ab70b/comments", "author": null, "committer": null, "parents": [{"sha": "75defde9fb56157d5f0279720d48866925b71b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75defde9fb56157d5f0279720d48866925b71b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75defde9fb56157d5f0279720d48866925b71b19"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "be67685d0c2d20e691fc2fe79f364cbd5c7184a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -1,5 +1,9 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\t* constraint.cc (diagnose_compound_requirement): When diagnosing a\n+\tcompound requirement, maybe replay the satisfaction failure, subject to\n+\tthe current diagnosis depth.\n+\n \t* constraint.cc (finish_constraint_binary_op): Set the location of EXPR\n \tas well as its range, because build_x_binary_op doesn't always do so.\n \t(current_constraint_diagnosis_depth): New."}, {"sha": "571c7cbdd38bf217a771044da0f3be5dfe279b5c", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -3308,20 +3308,30 @@ diagnose_compound_requirement (tree req, tree args, tree in_decl)\n \t  if (!type_deducible_p (expr, type, placeholder, args, quiet))\n \t    {\n \t      tree orig_expr = TREE_OPERAND (req, 0);\n-\t      inform (loc, \"%qE does not satisfy return-type-requirement\",\n-\t\t      orig_expr);\n-\n-\t      /* Further explain the reason for the error.  */\n-\t      type_deducible_p (expr, type, placeholder, args, noisy);\n+\t      if (diagnosing_failed_constraint::replay_errors_p ())\n+\t\t{\n+\t\t  inform (loc,\n+\t\t\t  \"%qE does not satisfy return-type-requirement, \"\n+\t\t\t  \"because\", orig_expr);\n+\t\t  /* Further explain the reason for the error.  */\n+\t\t  type_deducible_p (expr, type, placeholder, args, noisy);\n+\t\t}\n+\t      else\n+\t\tinform (loc, \"%qE does not satisfy return-type-requirement\",\n+\t\t\torig_expr);\n \t    }\n \t}\n       else if (!expression_convertible_p (expr, type, quiet))\n \t{\n \t  tree orig_expr = TREE_OPERAND (req, 0);\n-\t  inform (loc, \"cannot convert %qE to %qT\", orig_expr, type);\n-\n-\t  /* Further explain the reason for the error.  */\n-\t  expression_convertible_p (expr, type, noisy);\n+\t  if (diagnosing_failed_constraint::replay_errors_p ())\n+\t    {\n+\t      inform (loc, \"cannot convert %qE to %qT because\", orig_expr, type);\n+\t      /* Further explain the reason for the error.  */\n+\t      expression_convertible_p (expr, type, noisy);\n+\t    }\n+\t  else\n+\t    inform (loc, \"cannot convert %qE to %qT\", orig_expr, type);\n \t}\n     }\n }"}, {"sha": "e2e00f4c2b43a93028dbc83976c7fab4d29799d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -1,5 +1,10 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\t* g++.dg/concepts/diagnostic1.C: Pass -fconcepts-diagnostics-depth=2.\n+\t* g++.dg/concepts/diagnostic5.C: Adjust expected diagnostics.\n+\t* g++.dg/cpp2a/concepts-iconv1.C: Pass -fconcepts-diagnostics-depth=2.\n+\t* g++.dg/cpp2a/concepts-requires5.C: Likewise.\n+\n \t* g++.dg/concepts/diagnostic2.C: Expect \"no operand\" instead of\n \t\"neither operand\".\n \t* g++.dg/concepts/diagnostic5.C: New test."}, {"sha": "c6589e2e67189e672ca4ad71f1cab4ec5f471227", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -1,6 +1,7 @@\n // PR c++/67159\n // { dg-do compile { target c++17_only } }\n // { dg-options \"-fconcepts\" }\n+// { dg-additional-options \"-fconcepts-diagnostics-depth=2\" }\n \n template <class T, class U>\n concept bool SameAs = __is_same_as(T, U);"}, {"sha": "0d890d6f5489b432f5a89c3e6611a1d5b89fea64", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic5.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -4,8 +4,7 @@\n template<typename T>\n   concept c1 = requires { typename T::blah; };\n // { dg-message \"satisfaction of .c1<T>. .with T = char.\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"satisfaction of .c1<char\\\\*>.\" \"\" { target *-*-* } .-2 }\n-// { dg-message \".typename T::blah. is invalid\" \"\" { target *-*-* } .-3 }\n+// { dg-message \".typename T::blah. is invalid\" \"\" { target *-*-* } .-2 }\n \n template<typename T>\n   concept c2 = requires (T x) { *x; };\n@@ -27,8 +26,6 @@ template<typename T>\n   concept c5 = requires (T x) { { &x } -> c1; };\n // { dg-message \"satisfaction of .c5<T>. .with T = char.\" \"\" { target *-*-* } .-1 }\n // { dg-message \"in requirements with .char x.\" \"\" { target *-*-* } .-2 }\n-// { dg-message \"does not satisfy return-type-requirement\" \"\" { target *-*-* } .-3 }\n-// { dg-error \"deduced expression type does not satisfy\" \"\" { target *-*-* } .-4 }\n \n template<typename T>\n   requires (c1<T> || c2<T>) || (c3<T> || c4<T>) || c5<T> // { dg-message \"49: no operand\" }"}, {"sha": "4e2d13f8eb3a129ebeab5b0f6326225410d6c31f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-iconv1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -1,5 +1,6 @@\n // PR c++/67240\n // { dg-do compile { target c++2a } }\n+// { dg-additional-options \"-fconcepts-diagnostics-depth=2\" }\n \n template <class T, class U> concept Same = __is_same_as(T,U);\n "}, {"sha": "2f912b13d6ad52c920b10cd547811524e3cca5aa", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd68edf894d6b72e5bc37ac205deef9d237ab70b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C?ref=cd68edf894d6b72e5bc37ac205deef9d237ab70b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target c++2a } }\n-// { dg-additional-options -fconcepts-ts }\n+// { dg-additional-options \"-fconcepts-ts -fconcepts-diagnostics-depth=2\" }\n \n // Test conversion requirements (not in C++20)\n "}]}