{"sha": "da15dae6f5381cc92e8149ae3da488bb2e1cb843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExNWRhZTZmNTM4MWNjOTJlODE0OWFlM2RhNDg4YmIyZTFjYjg0Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-06-25T15:35:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-06-25T15:35:27Z"}, "message": "call.c (build_op_delete_call): Use BASELINK_FUNCTIONS.\n\n\t* call.c (build_op_delete_call): Use BASELINK_FUNCTIONS.\n\t* class.c (handle_using_decl): Likewise.\n\t(instantiate_type): Likewise.\n\t* cp-tree.h (BASELINK_FUNCTIONS): New macro.\n\t(xref_basetypes): Change prototype.\n\t(begin_mem_initializers): New function.\n\t(get_overloaded_fn): Likewise.\n\t* decl.c (xref_basetypes): Simplify.\n\t* error.c (dump_expr): Use BASELINK_FUNCTIONS.\n\t* init.c (build_offset_ref): Likewise.\n\t* parse.y (base_init): Use begin_mem_initializers().\n\t(structsp): Adjust call to xref_basetypes.\n\t* pt.c (determine_specialization): Use BASELINK_FUNCTIONS.\n\t(instantiate_class_template): Adjust call to xref_basetypes.\n\t* semantics.c (begin_mem_initializers): New function.\n\t* tree.c (is_overloaded_fn): Use BASELINK_FUNCTIONS.\n\t(really_overlaoded_fn): Likewise.\n\t(get_overloaded_fn): New function.'\n\t(get_first_fn): USe BASELINK_FUNCTIONS.\n\nFrom-SVN: r54989", "tree": {"sha": "4ca1f7c859dc3343629d8f2edb008c7742b347f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca1f7c859dc3343629d8f2edb008c7742b347f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da15dae6f5381cc92e8149ae3da488bb2e1cb843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15dae6f5381cc92e8149ae3da488bb2e1cb843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da15dae6f5381cc92e8149ae3da488bb2e1cb843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15dae6f5381cc92e8149ae3da488bb2e1cb843/comments", "author": null, "committer": null, "parents": [{"sha": "16b460352a7af477072fb686f3def6388edefd92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b460352a7af477072fb686f3def6388edefd92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b460352a7af477072fb686f3def6388edefd92"}], "stats": {"total": 110, "additions": 72, "deletions": 38}, "files": [{"sha": "891f96273d717454ed7bcbd506bdb1d9f02511bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -1,3 +1,25 @@\n+2002-06-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (build_op_delete_call): Use BASELINK_FUNCTIONS.\n+\t* class.c (handle_using_decl): Likewise.\n+\t(instantiate_type): Likewise.\n+\t* cp-tree.h (BASELINK_FUNCTIONS): New macro.\n+\t(xref_basetypes): Change prototype.\n+\t(begin_mem_initializers): New function.\n+\t(get_overloaded_fn): Likewise.\n+\t* decl.c (xref_basetypes): Simplify.\n+\t* error.c (dump_expr): Use BASELINK_FUNCTIONS.\n+\t* init.c (build_offset_ref): Likewise.\n+\t* parse.y (base_init): Use begin_mem_initializers().\n+\t(structsp): Adjust call to xref_basetypes.\n+\t* pt.c (determine_specialization): Use BASELINK_FUNCTIONS.\n+\t(instantiate_class_template): Adjust call to xref_basetypes.\n+\t* semantics.c (begin_mem_initializers): New function.\n+\t* tree.c (is_overloaded_fn): Use BASELINK_FUNCTIONS.\n+\t(really_overlaoded_fn): Likewise.\n+\t(get_overloaded_fn): New function.'\n+\t(get_first_fn): USe BASELINK_FUNCTIONS.\n+\t\n 2002-06-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (SCALAR_TYPE_P): New macro."}, {"sha": "e6f31510d7740b020c5de0de2b8d401d430bc5bb", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -3698,7 +3698,7 @@ build_op_delete_call (code, addr, size, flags, placement)\n \n       /* Go through the `operator delete' functions looking for one\n \t with a matching type.  */\n-      for (fn = BASELINK_P (fns) ? TREE_VALUE (fns) : fns; \n+      for (fn = BASELINK_P (fns) ? BASELINK_FUNCTIONS (fns) : fns; \n \t   fn; \n \t   fn = OVL_NEXT (fn))\n \t{"}, {"sha": "aa3caa13b24e54a6c327639a36a994d61c924890", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -1235,7 +1235,7 @@ handle_using_decl (using_decl, t)\n \n   if (BASELINK_P (fdecl))\n     /* Ignore base type this came from. */\n-    fdecl = TREE_VALUE (fdecl);\n+    fdecl = BASELINK_FUNCTIONS (fdecl);\n \n   old_value = IDENTIFIER_CLASS_VALUE (name);\n   if (old_value)\n@@ -6139,7 +6139,7 @@ instantiate_type (lhstype, rhs, flags)\n     case OFFSET_REF:\n       rhs = TREE_OPERAND (rhs, 1);\n       if (BASELINK_P (rhs))\n-\treturn instantiate_type (lhstype, TREE_VALUE (rhs),\n+\treturn instantiate_type (lhstype, BASELINK_FUNCTIONS (rhs),\n \t                         flags | allow_ptrmem);\n \n       /* This can happen if we are forming a pointer-to-member for a\n@@ -6175,7 +6175,7 @@ instantiate_type (lhstype, rhs, flags)\n       /* Now we should have a baselink. */\n       my_friendly_assert (BASELINK_P (rhs), 990412);\n \n-      return instantiate_type (lhstype, TREE_VALUE (rhs), flags);\n+      return instantiate_type (lhstype, BASELINK_FUNCTIONS (rhs), flags);\n \n     case CALL_EXPR:\n       /* This is too hard for now.  */"}, {"sha": "7f21c9c87f7409af050a4d4f1aaaa1ea26d8b904", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -385,6 +385,10 @@ struct tree_overload GTY(())\n   (TREE_CODE (NODE) == TREE_LIST && TREE_LANG_FLAG_1 (NODE))\n #define SET_BASELINK_P(NODE) \\\n   (TREE_LANG_FLAG_1 (NODE) = 1)\n+/* The functions referred to by the BASELINK; either a FUNCTION_DECL\n+   or an OVERLOAD.  */\n+#define BASELINK_FUNCTIONS(NODE) \\\n+  (TREE_VALUE (NODE))\n \n #define WRAPPER_ZC(NODE) (((struct tree_wrapper*)WRAPPER_CHECK (NODE))->z_c)\n \n@@ -3854,7 +3858,7 @@ extern int grok_ctor_properties\t\t\tPARAMS ((tree, tree));\n extern void grok_op_properties\t\t\tPARAMS ((tree, int));\n extern tree xref_tag\t\t\t\tPARAMS ((tree, tree, int));\n extern tree xref_tag_from_type\t\t\tPARAMS ((tree, tree, int));\n-extern void xref_basetypes\t\t\tPARAMS ((tree, tree, tree, tree));\n+extern void xref_basetypes\t\t\tPARAMS ((tree, tree));\n extern tree start_enum\t\t\t\tPARAMS ((tree));\n extern void finish_enum\t\t\t\tPARAMS ((tree));\n extern void build_enumerator\t\t\tPARAMS ((tree, tree, tree));\n@@ -4306,6 +4310,7 @@ extern void expand_body                         PARAMS ((tree));\n extern tree nullify_returns_r\t\t      PARAMS ((tree *, int *, void *));\n extern void do_pushlevel                        PARAMS ((void));\n extern tree do_poplevel                         PARAMS ((void));\n+extern void begin_mem_initializers              (void);\n extern void finish_mem_initializers             PARAMS ((tree));\n extern void setup_vtbl_ptr\t\t\tPARAMS ((tree, tree));\n extern void clear_out_block                     PARAMS ((void));\n@@ -4355,6 +4360,7 @@ extern tree make_binfo\t\t\t\tPARAMS ((tree, tree, tree, tree));\n extern tree reverse_path\t\t\tPARAMS ((tree));\n extern int count_functions\t\t\tPARAMS ((tree));\n extern int is_overloaded_fn\t\t\tPARAMS ((tree));\n+extern tree get_overloaded_fn                   PARAMS ((tree));\n extern tree get_first_fn\t\t\tPARAMS ((tree));\n extern int bound_pmf_p\t\t\t\tPARAMS ((tree));\n extern tree ovl_cons                            PARAMS ((tree, tree));"}, {"sha": "1b1975a0ac17579540d0977655c153b32f50c2ab", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -12983,9 +12983,7 @@ xref_tag_from_type (old, id, globalize)\n    struct, or union.  */\n \n void\n-xref_basetypes (code_type_node, name, ref, binfo)\n-     tree code_type_node;\n-     tree name ATTRIBUTE_UNUSED;\n+xref_basetypes (ref, binfo)\n      tree ref;\n      tree binfo;\n {\n@@ -12997,21 +12995,14 @@ xref_basetypes (code_type_node, name, ref, binfo)\n   int i, len;\n   enum tag_types tag_code;\n \n-  /* If we are called from the parser, code_type_node will sometimes be a\n-     TREE_LIST.  This indicates that the user wrote\n-     \"class __attribute__ ((foo)) bar\".  Extract the attributes so that\n-     tree_low_cst doesn't crash.  */\n-  if (TREE_CODE (code_type_node) == TREE_LIST)\n-    code_type_node = TREE_VALUE (code_type_node);\n-\n-  tag_code = (enum tag_types) tree_low_cst (code_type_node, 1);\n-\n-  if (tag_code == union_type)\n+  if (TREE_CODE (ref) == UNION_TYPE)\n     {\n       error (\"derived union `%T' invalid\", ref);\n       return;\n     }\n \n+  tag_code = (CLASSTYPE_DECLARED_CLASS (ref) ? class_type : record_type);\n+\n   len = list_length (binfo);\n \n   /* First, make sure that any templates in base-classes are"}, {"sha": "678ffd081fb825bea310b903af846275d3abf16e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -1882,7 +1882,8 @@ dump_expr (t, flags)\n \t      /* A::f */\n \t      dump_expr (t, flags | TFF_EXPR_IN_PARENS);\n \t    else if (BASELINK_P (t))\n-\t      dump_expr (OVL_CURRENT (TREE_VALUE (t)), flags | TFF_EXPR_IN_PARENS);\n+\t      dump_expr (OVL_CURRENT (BASELINK_FUNCTIONS (t)), \n+\t\t\t flags | TFF_EXPR_IN_PARENS);\n \t    else\n \t      dump_decl (t, flags);\n \t  }"}, {"sha": "0c34c0517ff059015c8939621053e4950ae55205", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -1671,7 +1671,7 @@ build_offset_ref (type, name)\n     {\n       /* Go from the TREE_BASELINK to the member function info.  */\n       tree fnfields = member;\n-      t = TREE_VALUE (fnfields);\n+      t = BASELINK_FUNCTIONS (fnfields);\n \n       if (TREE_CODE (orig_name) == TEMPLATE_ID_EXPR)\n \t{"}, {"sha": "14e5c5c2b0613cd0812ddfb50f904e0d84488b22", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -945,14 +945,11 @@ return_init:\n \t;\n \n base_init:\n-\t  ':' member_init_list\n+\t  ':' { begin_mem_initializers (); } member_init_list\n \t\t{\n-\t\t  if (! DECL_CONSTRUCTOR_P (current_function_decl))\n-\t\t    error (\"only constructors take base initializers\");\n-\t\t  else if ($2.new_type_flag == 0)\n+\t\t  if ($3.new_type_flag == 0)\n \t\t    error (\"no base or member initializers given following ':'\");\n-\n-\t\t  finish_mem_initializers ($2.t);\n+\t\t  finish_mem_initializers ($3.t);\n \t\t}\n \t;\n \n@@ -2334,7 +2331,7 @@ structsp:\n                            a TYPENAME_TYPE with a type. */\n \t\t\ttype = TREE_TYPE (type);\n \t\t      maybe_process_partial_specialization (type);\n-\t\t      xref_basetypes (current_aggr, $1.t, type, $2);\n+\t\t      xref_basetypes (type, $2);\n \t\t    }\n \t\t  $1.t = begin_class_definition (TREE_TYPE ($1.t));\n \t\t  check_class_key (current_aggr, $1.t);"}, {"sha": "cdc1aa0358d0809bcd7c61450c67be16363820d5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -987,7 +987,7 @@ determine_specialization (template_id, decl, targs_out,\n \n   /* Check for baselinks. */\n   if (BASELINK_P (fns))\n-    fns = TREE_VALUE (fns);\n+    fns = BASELINK_FUNCTIONS (fns);\n \n   if (!is_overloaded_fn (fns))\n     {\n@@ -5150,13 +5150,7 @@ instantiate_class_template (type)\n \n       /* Now call xref_basetypes to set up all the base-class\n \t information.  */\n-      xref_basetypes (TREE_CODE (pattern) == RECORD_TYPE\n-\t\t      ? (CLASSTYPE_DECLARED_CLASS (pattern)\n-\t\t\t ? class_type_node : record_type_node)\n-\t\t      : union_type_node,\n-\t\t      DECL_NAME (TYPE_NAME (pattern)),\n-\t\t      type,\n-\t\t      base_list);\n+      xref_basetypes (type, base_list);\n     }\n \n   /* Now that our base classes are set up, enter the scope of the"}, {"sha": "576d931b171c8f9d799f356eee4d019793d7ad60", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -1063,6 +1063,15 @@ finish_named_return_value (return_id, init)\n   DECL_UNINLINABLE (current_function_decl) = 1;\n }\n \n+/* Begin processing a mem-initializer-list.  */\n+\n+void\n+begin_mem_initializers ()\n+{\n+  if (! DECL_CONSTRUCTOR_P (current_function_decl))\n+    error (\"only constructors take base initializers\");\n+}\n+\n /* The INIT_LIST is a list of mem-initializers, in the order they were\n    written by the user.  The TREE_VALUE of each node is a list of\n    initializers for a particular subobject.  The TREE_PURPOSE is a"}, {"sha": "1fca146d4b19298c6a052b12b2544eeeb8eaa684", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15dae6f5381cc92e8149ae3da488bb2e1cb843/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=da15dae6f5381cc92e8149ae3da488bb2e1cb843", "patch": "@@ -948,7 +948,7 @@ is_overloaded_fn (x)\n   if (TREE_CODE (x) == OFFSET_REF)\n     x = TREE_OPERAND (x, 1);\n   if (BASELINK_P (x))\n-    x = TREE_VALUE (x);\n+    x = BASELINK_FUNCTIONS (x);\n   return (TREE_CODE (x) == FUNCTION_DECL\n \t  || TREE_CODE (x) == TEMPLATE_ID_EXPR\n \t  || DECL_FUNCTION_TEMPLATE_P (x)\n@@ -963,20 +963,34 @@ really_overloaded_fn (x)\n   if (TREE_CODE (x) == OFFSET_REF)\n     x = TREE_OPERAND (x, 1);\n   if (BASELINK_P (x))\n-    x = TREE_VALUE (x);\n+    x = BASELINK_FUNCTIONS (x);\n   return (TREE_CODE (x) == OVERLOAD \n \t  && (TREE_CHAIN (x) != NULL_TREE\n \t      || DECL_FUNCTION_TEMPLATE_P (OVL_FUNCTION (x))));\n }\n \n+/* Return the OVERLOAD or FUNCTION_DECL inside FNS.  FNS can be an\n+   OVERLOAD, FUNCTION_DECL, TEMPLATE_ID_EXPR, or baselink.  */\n+\n+tree\n+get_overloaded_fn (fns)\n+     tree fns;\n+{\n+  if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n+    fns = TREE_OPERAND (fns, 0);\n+  if (BASELINK_P (fns))\n+    fns = BASELINK_FUNCTIONS (fns);\n+  return fns;\n+}\n+\n tree\n get_first_fn (from)\n      tree from;\n {\n   my_friendly_assert (is_overloaded_fn (from), 9);\n   /* A baselink is also considered an overloaded function. */\n   if (BASELINK_P (from))\n-    from = TREE_VALUE (from);\n+    from = BASELINK_FUNCTIONS (from);\n   return OVL_CURRENT (from);\n }\n "}]}