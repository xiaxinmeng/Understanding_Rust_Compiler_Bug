{"sha": "15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhNjVlNjNhNDcxYmQxMmRkOTJhMDQ1MWI2Yjc4MDBlOTNjZDFmMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-09-27T23:57:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-09-27T23:57:35Z"}, "message": "jit: implement gcc_jit_function_get_address\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/expressions.rst (Function pointers): New section.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_9): New tag.\n\t* docs/topics/expressions.rst (Function pointers): New section.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-common.h (class gcc::jit::recording::function_pointer): New\n\tforward decl.\n\t* jit-playback.c (gcc::jit::playback::function::get_address): New\n\tmethod.\n\t* jit-playback.h (gcc::jit::playback::function::get_address): New\n\tmethod decl.\n\t* jit-recording.c: Within namespace gcc::jit::recording...\n\t(function::function): Initialize new field \"m_fn_ptr_type\".\n\t(function::get_address): New method.\n\t(function_pointer::replay_into): New method.\n\t(function_pointer::visit_children): New method.\n\t(function_pointer::make_debug_string): New method.\n\t(function_pointer::write_reproducer): New method.\n\t* jit-recording.h: Within namespace gcc::jit::recording...\n\t(function::get_address): New method.\n\t(function): Add field \"m_fn_ptr_type\".\n\t(class function_pointer): New subclass of rvalue.\n\t* libgccjit++.h (gccjit::function::get_address): New method.\n\t* libgccjit.c (gcc_jit_function_get_address): New function.\n\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_function_get_address): New\n\tmacro.\n\t(gcc_jit_function_get_address): New API entrypoint.\n\t* libgccjit.map (LIBGCCJIT_ABI_9): New tag.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/all-non-failing-tests.h: Add\n\ttest-returning-function-ptr.c.\n\t* jit.dg/test-returning-function-ptr.c: New test case.\n\nFrom-SVN: r253244", "tree": {"sha": "eec3c9737eac82b39d96eb745dceee94e4ff259d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec3c9737eac82b39d96eb745dceee94e4ff259d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a509c571eae4cb1ab3e79c044d93b1d79bde0798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a509c571eae4cb1ab3e79c044d93b1d79bde0798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a509c571eae4cb1ab3e79c044d93b1d79bde0798"}], "stats": {"total": 1222, "additions": 836, "deletions": 386}, "files": [{"sha": "7f14b4f706f57a62ef8ea1c46478d1ec4b6abce7", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -1,3 +1,33 @@\n+2017-09-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/expressions.rst (Function pointers): New section.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_9): New tag.\n+\t* docs/topics/expressions.rst (Function pointers): New section.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-common.h (class gcc::jit::recording::function_pointer): New\n+\tforward decl.\n+\t* jit-playback.c (gcc::jit::playback::function::get_address): New\n+\tmethod.\n+\t* jit-playback.h (gcc::jit::playback::function::get_address): New\n+\tmethod decl.\n+\t* jit-recording.c: Within namespace gcc::jit::recording...\n+\t(function::function): Initialize new field \"m_fn_ptr_type\".\n+\t(function::get_address): New method.\n+\t(function_pointer::replay_into): New method.\n+\t(function_pointer::visit_children): New method.\n+\t(function_pointer::make_debug_string): New method.\n+\t(function_pointer::write_reproducer): New method.\n+\t* jit-recording.h: Within namespace gcc::jit::recording...\n+\t(function::get_address): New method.\n+\t(function): Add field \"m_fn_ptr_type\".\n+\t(class function_pointer): New subclass of rvalue.\n+\t* libgccjit++.h (gccjit::function::get_address): New method.\n+\t* libgccjit.c (gcc_jit_function_get_address): New function.\n+\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_function_get_address): New\n+\tmacro.\n+\t(gcc_jit_function_get_address): New API entrypoint.\n+\t* libgccjit.map (LIBGCCJIT_ABI_9): New tag.\n+\n 2017-09-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/82174"}, {"sha": "0398b16bf50b5a682d123b97f1f0037ca82a0fac", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 442, "deletions": 385, "changes": 827, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1"}, {"sha": "147d0656b02e75a623b064366dcd10cc69cf2d87", "filename": "gcc/jit/docs/cp/topics/expressions.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -459,6 +459,15 @@ Function calls\n          /* Add \"(void)printf (arg0, arg1);\".  */\n          block.add_eval (ctxt.new_call (printf_func, arg0, arg1));\n \n+Function pointers\n+*****************\n+\n+.. function:: gccjit::rvalue \\\n+\t      gccjit::function::get_address (gccjit::location loc)\n+\n+   Get the address of a function as an rvalue, of function pointer\n+   type.\n+\n Type-coercion\n *************\n "}, {"sha": "84089392d195f1b712ccafec15b1b8830fd33337", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -156,3 +156,10 @@ entrypoints:\n -------------------\n ``LIBGCCJIT_ABI_8`` covers the addition of\n :func:`gcc_jit_type_get_vector`\n+\n+.. _LIBGCCJIT_ABI_9:\n+\n+``LIBGCCJIT_ABI_9``\n+-------------------\n+``LIBGCCJIT_ABI_9`` covers the addition of\n+:func:`gcc_jit_function_get_address`"}, {"sha": "f5c2d0f2616b9e9ee8429b0a981e5b904cc45bf6", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -449,6 +449,23 @@ Function calls\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call\n \n+Function pointers\n+*****************\n+\n+.. function:: gcc_jit_rvalue *\\\n+\t      gcc_jit_function_get_address (gcc_jit_function *fn,\\\n+                                            gcc_jit_location *loc)\n+\n+   Get the address of a function as an rvalue, of function pointer\n+   type.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_9`; you can test\n+   for its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_function_get_address\n+\n Type-coercion\n *************\n "}, {"sha": "c931b3f8b5415522d3c8a8289507b651f9d6c3fd", "filename": "gcc/jit/jit-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-common.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -127,6 +127,7 @@ namespace recording {\n \tclass global;\n         class param;\n       class base_call;\n+      class function_pointer;\n     class statement;\n     class case_;\n "}, {"sha": "57981796890cd06dfd3bf7a785a3d63a6753eca3", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -1356,6 +1356,20 @@ new_block (const char *name)\n   return result;\n }\n \n+/* Construct a playback::rvalue instance wrapping an ADDR_EXPR for\n+   this playback::function.  */\n+\n+playback::rvalue *\n+playback::function::get_address (location *loc)\n+{\n+  tree t_fndecl = as_fndecl ();\n+  tree t_fntype = TREE_TYPE (t_fndecl);\n+  tree t_fnptr = build1 (ADDR_EXPR, build_pointer_type (t_fntype), t_fndecl);\n+  if (loc)\n+    m_ctxt->set_tree_location (t_fnptr, loc);\n+  return new rvalue (m_ctxt, t_fnptr);\n+}\n+\n /* Build a statement list for the function as a whole out of the\n    lists of statements for the individual blocks, building labels\n    for each block.  */"}, {"sha": "746f5da1cb33c73a93b65b81e6dc73f6e67fbf34", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -443,6 +443,9 @@ class function : public wrapper\n   block*\n   new_block (const char *name);\n \n+  rvalue *\n+  get_address (location *loc);\n+\n   void\n   build_stmt_list ();\n "}, {"sha": "84812806e721608cc6dd06c1ff852d2378fe15b3", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -3452,7 +3452,8 @@ recording::function::function (context *ctxt,\n   m_is_variadic (is_variadic),\n   m_builtin_id (builtin_id),\n   m_locals (),\n-  m_blocks ()\n+  m_blocks (),\n+  m_fn_ptr_type (NULL)\n {\n   for (int i = 0; i< num_params; i++)\n     {\n@@ -3725,6 +3726,35 @@ recording::function::dump_to_dot (const char *path)\n   fclose (fp);\n }\n \n+/* Implements the post-error-checking part of\n+   gcc_jit_function_get_address.  */\n+\n+recording::rvalue *\n+recording::function::get_address (recording::location *loc)\n+{\n+  /* Lazily create and cache the function pointer type.  */\n+  if (!m_fn_ptr_type)\n+    {\n+      /* Make a recording::function_type for this function.  */\n+      auto_vec <recording::type *> param_types (m_params.length ());\n+      unsigned i;\n+      recording::param *param;\n+      FOR_EACH_VEC_ELT (m_params, i, param)\n+\tparam_types.safe_push (param->get_type ());\n+      recording::function_type *fn_type\n+\t= m_ctxt->new_function_type (m_return_type,\n+\t\t\t\t     m_params.length (),\n+\t\t\t\t     param_types.address (),\n+\t\t\t\t     m_is_variadic);\n+      m_fn_ptr_type = fn_type->get_pointer ();\n+    }\n+  gcc_assert (m_fn_ptr_type);\n+\n+  rvalue *result = new function_pointer (get_context (), loc, this, m_fn_ptr_type);\n+  m_ctxt->record (result);\n+  return result;\n+}\n+\n /* Implementation of recording::memento::make_debug_string for\n    functions.  */\n \n@@ -5400,6 +5430,51 @@ recording::get_address_of_lvalue::write_reproducer (reproducer &r)\n \t   r.get_identifier (m_loc));\n }\n \n+/* The implementation of class gcc::jit::recording::function_pointer.  */\n+\n+/* Implementation of pure virtual hook recording::memento::replay_into\n+   for recording::function_pointer.  */\n+\n+void\n+recording::function_pointer::replay_into (replayer *r)\n+{\n+  set_playback_obj (\n+    m_fn->playback_function ()->\n+      get_address (playback_location (r, m_loc)));\n+}\n+\n+void\n+recording::function_pointer::visit_children (rvalue_visitor *)\n+{\n+  /* Empty.  */\n+}\n+\n+/* Implementation of recording::memento::make_debug_string for\n+   getting the address of an lvalue.  */\n+\n+recording::string *\n+recording::function_pointer::make_debug_string ()\n+{\n+  return string::from_printf (m_ctxt,\n+\t\t\t      \"%s\",\n+\t\t\t      m_fn->get_debug_string ());\n+}\n+\n+/* Implementation of recording::memento::write_reproducer for\n+   function_pointer.  */\n+\n+void\n+recording::function_pointer::write_reproducer (reproducer &r)\n+{\n+  const char *id = r.make_identifier (this, \"address_of\");\n+  r.write (\"  gcc_jit_rvalue *%s =\\n\"\n+\t   \"    gcc_jit_function_get_address (%s, /* gcc_jit_function *fn */\\n\"\n+\t   \"                                  %s); /* gcc_jit_location *loc */\\n\",\n+\t   id,\n+\t   r.get_identifier (m_fn),\n+\t   r.get_identifier (m_loc));\n+}\n+\n /* The implementation of class gcc::jit::recording::local.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into"}, {"sha": "89181248c7fd04ec489c53f76fccc19baad7f330", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -1145,6 +1145,8 @@ class function : public memento\n \n   void dump_to_dot (const char *path);\n \n+  rvalue *get_address (location *loc);\n+\n private:\n   string * make_debug_string () FINAL OVERRIDE;\n   void write_reproducer (reproducer &r) FINAL OVERRIDE;\n@@ -1159,6 +1161,7 @@ class function : public memento\n   enum built_in_function m_builtin_id;\n   auto_vec<local *> m_locals;\n   auto_vec<block *> m_blocks;\n+  type *m_fn_ptr_type;\n };\n \n class block : public memento\n@@ -1699,6 +1702,32 @@ class get_address_of_lvalue : public rvalue\n   lvalue *m_lvalue;\n };\n \n+class function_pointer : public rvalue\n+{\n+public:\n+  function_pointer (context *ctxt,\n+\t\t    location *loc,\n+\t\t    function *fn,\n+\t\t    type *type)\n+  : rvalue (ctxt, loc, type),\n+    m_fn (fn) {}\n+\n+  void replay_into (replayer *r) FINAL OVERRIDE;\n+\n+  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+\n+private:\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_UNARY;\n+  }\n+\n+private:\n+  function *m_fn;\n+};\n+\n class local : public lvalue\n {\n public:"}, {"sha": "82997c3bb8c3332cb28c3ba4270277a13f2b0e8a", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -368,6 +368,8 @@ namespace gccjit\n \t\t      const std::string &name,\n \t\t      location loc = location ());\n \n+    rvalue get_address (location loc = location ());\n+\n     /* A series of overloaded operator () with various numbers of arguments\n        for a very terse way of creating a call to this function.  The call\n        is created within the same context as the function itself, which may\n@@ -1392,6 +1394,13 @@ function::new_local (type type_,\n \t\t\t\t\t     name.c_str ()));\n }\n \n+inline rvalue\n+function::get_address (location loc)\n+{\n+  return rvalue (gcc_jit_function_get_address (get_inner_function (),\n+\t\t\t\t\t       loc.get_inner_location ()));\n+}\n+\n inline function\n block::get_function () const\n {"}, {"sha": "37cb69543cc5c5495d7c98881e2af4b338d24cef", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -3022,3 +3022,23 @@ gcc_jit_type_get_vector (gcc_jit_type *type, size_t num_units)\n \n   return (gcc_jit_type *)type->get_vector (num_units);\n }\n+\n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::function::get_address method, in\n+   jit-recording.c.  */\n+\n+gcc_jit_rvalue *\n+gcc_jit_function_get_address (gcc_jit_function *fn,\n+\t\t\t      gcc_jit_location *loc)\n+{\n+  RETURN_NULL_IF_FAIL (fn, NULL, NULL, \"NULL function\");\n+\n+  gcc::jit::recording::context *ctxt = fn->m_ctxt;\n+\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  /* LOC can be NULL.  */\n+\n+  return (gcc_jit_rvalue *)fn->get_address (loc);\n+}"}, {"sha": "18c03fbe7a1388782506cf6d26cf6561d6f3cfc0", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -1418,6 +1418,21 @@ gcc_jit_type_get_aligned (gcc_jit_type *type,\n extern gcc_jit_type *\n gcc_jit_type_get_vector (gcc_jit_type *type, size_t num_units);\n \n+\n+#define LIBGCCJIT_HAVE_gcc_jit_function_get_address\n+\n+/* Get the address of a function as an rvalue, of function pointer\n+   type.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_9; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_function_get_address\n+*/\n+extern gcc_jit_rvalue *\n+gcc_jit_function_get_address (gcc_jit_function *fn,\n+\t\t\t      gcc_jit_location *loc);\n+\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "616e364ee0c173a7e2ac4edcf1226431f2ce8fc6", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -160,3 +160,8 @@ LIBGCCJIT_ABI_8 {\n   global:\n     gcc_jit_type_get_vector;\n } LIBGCCJIT_ABI_7;\n+\n+LIBGCCJIT_ABI_9 {\n+  global:\n+    gcc_jit_function_get_address;\n+} LIBGCCJIT_ABI_8;"}, {"sha": "f2a44809c797aacb2281896f78af92119475b11b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -1,3 +1,9 @@\n+2017-09-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add\n+\ttest-returning-function-ptr.c.\n+\t* jit.dg/test-returning-function-ptr.c: New test case.\n+\n 2017-09-27  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR target/71727"}, {"sha": "bf02e1258bb04a008a59e9b6fe9fe582685a029b", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -71,6 +71,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-returning-function-ptr.c */\n+#define create_code create_code_calling_internal_function\n+#define verify_code verify_code_calling_internal_function\n+#include \"test-returning-function-ptr.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-compound-assignment.c */\n #define create_code create_code_compound_assignment\n #define verify_code verify_code_compound_assignment\n@@ -283,6 +290,9 @@ const struct testcase testcases[] = {\n   {\"calling_function_ptr\",\n    create_code_calling_function_ptr,\n    verify_code_calling_function_ptr},\n+  {\"calling_internal_function\",\n+   create_code_calling_internal_function,\n+   verify_code_calling_internal_function},\n   {\"compound_assignment\",\n    create_code_compound_assignment,\n    verify_code_compound_assignment},"}, {"sha": "2d4f01e2f28ec488ff393ee96d00c4b019dc7111", "filename": "gcc/testsuite/jit.dg/test-returning-function-ptr.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2Fjit.dg%2Ftest-returning-function-ptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a65e63a471bd12dd92a0451b6b7800e93cd1f1/gcc%2Ftestsuite%2Fjit.dg%2Ftest-returning-function-ptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-returning-function-ptr.c?ref=15a65e63a471bd12dd92a0451b6b7800e93cd1f1", "patch": "@@ -0,0 +1,143 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+  extern void\n+  internally_called_function (int i, int j, int k);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     extern void internally_called_function (int i, int j, int k);\n+\n+     static void\n+     internal_test_caller (int a)\n+     {\n+        internally_called_function (a * 3, a * 4, a * 5);\n+     }\n+\n+     void (*) (int)\n+     get_test_caller (void)\n+     {\n+       return internal_test_caller;\n+     }\n+  */\n+  int i;\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  /* Declare the imported function.  */\n+  gcc_jit_param *params[3];\n+  params[0] =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"i\");\n+  params[1] =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"j\");\n+  params[2] =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"k\");\n+  gcc_jit_function *called_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_IMPORTED,\n+\t\t\t\t  void_type,\n+\t\t\t\t  \"internally_called_function\",\n+\t\t\t\t  3, params,\n+\t\t\t\t  0);\n+\n+  /* Build the test_caller fn.  */\n+  gcc_jit_param *param_a =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"a\");\n+  gcc_jit_function *test_caller =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  void_type,\n+\t\t\t\t  \"internal_test_caller\",\n+\t\t\t\t  1, &param_a,\n+\t\t\t\t  0);\n+  /* \"a * 3, a * 4, a * 5\"  */\n+  gcc_jit_rvalue *args[3];\n+  for (i = 0; i < 3; i++)\n+    args[i]\n+      = gcc_jit_context_new_binary_op\n+\t  (ctxt, NULL,\n+\t   GCC_JIT_BINARY_OP_MULT,\n+\t   int_type,\n+\t   gcc_jit_param_as_rvalue (param_a),\n+\t   gcc_jit_context_new_rvalue_from_int (ctxt,\n+\t\t\t\t\t\tint_type,\n+\t\t\t\t\t\t(i + 3) ));\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_caller, NULL);\n+  gcc_jit_block_add_eval (\n+    block, NULL,\n+    gcc_jit_context_new_call (ctxt,\n+\t\t\t      NULL,\n+\t\t\t      called_fn,\n+\t\t\t      3, args));\n+  gcc_jit_block_end_with_void_return (block, NULL);\n+\n+  gcc_jit_rvalue *fn_ptr\n+    = gcc_jit_function_get_address (test_caller, NULL);\n+\n+  gcc_jit_type *fn_ptr_type\n+    = gcc_jit_rvalue_get_type (fn_ptr);\n+\n+  /* Build the get_test_caller fn.  */\n+  gcc_jit_function *get_test_caller =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  fn_ptr_type,\n+\t\t\t\t  \"get_test_caller\",\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  block = gcc_jit_function_new_block (get_test_caller, NULL);\n+  gcc_jit_block_end_with_return (block, NULL, fn_ptr);\n+}\n+\n+static int called_with[3];\n+\n+extern void\n+internally_called_function (int i, int j, int k)\n+{\n+  called_with[0] = i;\n+  called_with[1] = j;\n+  called_with[2] = k;\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef void (*test_caller_type) (int);\n+  typedef test_caller_type (*get_test_caller_type) (void);\n+  CHECK_NON_NULL (result);\n+\n+  get_test_caller_type get_test_caller =\n+    (get_test_caller_type)gcc_jit_result_get_code (result, \"get_test_caller\");\n+  CHECK_NON_NULL (get_test_caller);\n+\n+  test_caller_type test_caller = (test_caller_type)get_test_caller ();\n+  CHECK_NON_NULL (test_caller);\n+\n+  called_with[0] = 0;\n+  called_with[1] = 0;\n+  called_with[2] = 0;\n+\n+  /* Call the JIT-generated function.  */\n+  test_caller (5);\n+\n+  /* Verify that it correctly called \"internally_called_function\".  */\n+  CHECK_VALUE (called_with[0], 15);\n+  CHECK_VALUE (called_with[1], 20);\n+  CHECK_VALUE (called_with[2], 25);\n+}"}]}