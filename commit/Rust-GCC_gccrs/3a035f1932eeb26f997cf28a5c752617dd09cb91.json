{"sha": "3a035f1932eeb26f997cf28a5c752617dd09cb91", "node_id": "C_kwDOANBUbNoAKDNhMDM1ZjE5MzJlZWIyNmY5OTdjZjI4YTVjNzUyNjE3ZGQwOWNiOTE", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-09-20T05:58:35Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-09-20T06:09:19Z"}, "message": "middle-end: handle bitop with an invariant induction.[PR105735]\n\nEnhance final_value_replacement_loop to handle bitop\nwith an invariant induction.\n\nThis patch will enable below optimization:\n\n{\n-  long unsigned int bit;\n-\n-  <bb 2> [local count: 32534376]:\n-\n-  <bb 3> [local count: 1041207449]:\n-  # tmp_10 = PHI <tmp_7(5), tmp_4(D)(2)>\n-  # bit_12 = PHI <bit_8(5), 0(2)>\n-  tmp_7 = bit2_6(D) & tmp_10;\n-  bit_8 = bit_12 + 1;\n-  if (bit_8 != 32)\n-    goto <bb 5>; [96.97%]\n-  else\n-    goto <bb 4>; [3.03%]\n-\n-  <bb 5> [local count: 1009658865]:\n-  goto <bb 3>; [100.00%]\n-\n-  <bb 4> [local count: 32534376]:\n-  # tmp_11 = PHI <tmp_7(3)>\n-  return tmp_11;\n+  tmp_11 = tmp_4 (D) & bit2_6 (D);\n+  return tmp_11;\n\n}\n\ngcc/ChangeLog:\n\n\tPR middle-end/105735\n\t* tree-scalar-evolution.cc\n\t(analyze_and_compute_bitop_with_inv_effect): New function.\n\t(final_value_replacement_loop): Enhanced to handle bitop\n\twith inv induction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105735-1.c: New test.\n\t* gcc.target/i386/pr105735-2.c: New test.", "tree": {"sha": "3d3f6a6e8da0fb99e414cee20b0cd1cb04b27cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d3f6a6e8da0fb99e414cee20b0cd1cb04b27cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a035f1932eeb26f997cf28a5c752617dd09cb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a035f1932eeb26f997cf28a5c752617dd09cb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a035f1932eeb26f997cf28a5c752617dd09cb91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a035f1932eeb26f997cf28a5c752617dd09cb91/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d3e27f3a6add0cd6892bdf07c6a2538bb709e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d3e27f3a6add0cd6892bdf07c6a2538bb709e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d3e27f3a6add0cd6892bdf07c6a2538bb709e4"}], "stats": {"total": 209, "additions": 199, "deletions": 10}, "files": [{"sha": "69de6b2911ab1a4b470d7828b0cdd16f4c5ad676", "filename": "gcc/testsuite/gcc.target/i386/pr105735-1.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-1.c?ref=3a035f1932eeb26f997cf28a5c752617dd09cb91", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-sccp-details\" } */\n+/* { dg-final { scan-tree-dump-times {final value replacement} 8 \"sccp\" } } */\n+\n+unsigned int\n+__attribute__((noipa))\n+foo (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 0; bit < 64; bit++)\n+    tmp &= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo1 (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 63; bit >= 0; bit -=3)\n+    tmp &= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo2 (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 0; bit < 64; bit++)\n+    tmp |= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo3 (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 63; bit >= 0; bit -=3)\n+    tmp |= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo4 (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 0; bit < 64; bit++)\n+    tmp ^= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo5 (unsigned int tmp, unsigned int bit2)\n+{\n+  for (int bit = 0; bit < 63; bit++)\n+    tmp ^= bit2;\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+f (unsigned int tmp, int bit, unsigned int bit2)\n+{\n+  unsigned int res = tmp;\n+  for (int i = 0; i < bit; i++)\n+    res &= bit2;\n+  return res;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+f1 (unsigned int tmp, int bit, unsigned int bit2)\n+{\n+  unsigned int res = tmp;\n+  for (int i = 0; i < bit; i++)\n+    res |= bit2;\n+  return res;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+f2 (unsigned int tmp, int bit, unsigned int bit2)\n+{\n+  unsigned int res = tmp;\n+  for (int i = 0; i < bit; i++)\n+    res ^= bit2;\n+  return res;\n+}\n+"}, {"sha": "66cc5fba1e7a424931613a89e1d0e9c7fce7a28f", "filename": "gcc/testsuite/gcc.target/i386/pr105735-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105735-2.c?ref=3a035f1932eeb26f997cf28a5c752617dd09cb91", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include \"pr105735-1.c\"\n+\n+int main()\n+{\n+  unsigned int tmp = 0x1101;\n+  unsigned int bit2 = 0x111101;\n+  if (foo (tmp, bit2) != 0x1101)\n+    __builtin_abort (); \n+  if (foo1 (tmp, bit2) != 0x1101)\n+    __builtin_abort ();\n+  if (foo2 (tmp, bit2) != 0x111101)\n+    __builtin_abort ();\n+  if (foo3 (tmp, bit2) != 0x111101)\n+    __builtin_abort ();\n+  if (foo4 (tmp, bit2) != 0x1101)\n+    __builtin_abort ();\n+  if (foo5 (tmp, bit2) != 0x110000)\n+    __builtin_abort ();\n+  if (f (tmp, 64, bit2) != 0x1101)\n+    __builtin_abort ();\n+  if (f1 (tmp, 64, bit2) != 0x111101)\n+    __builtin_abort ();\n+  if (f2 (tmp, 64, bit2) != 0x1101)\n+    __builtin_abort ();\n+}"}, {"sha": "9f30f78cb5d9838db36bfd188df2f24314e75ed3", "filename": "gcc/tree-scalar-evolution.cc", "status": "modified", "additions": 83, "deletions": 10, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftree-scalar-evolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a035f1932eeb26f997cf28a5c752617dd09cb91/gcc%2Ftree-scalar-evolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.cc?ref=3a035f1932eeb26f997cf28a5c752617dd09cb91", "patch": "@@ -3635,6 +3635,64 @@ enum bit_op_kind\n   return fold_build2 (code1, type, inv, wide_int_to_tree (type, bits));\n }\n \n+/* Match.pd function to match bitop with invariant expression\n+  .i.e.\n+  tmp_7 = _0 & _1; */\n+extern bool gimple_bitop_with_inv_p (tree, tree *, tree (*)(tree));\n+\n+/* Return the inductive expression of bitop with invariant if possible,\n+   otherwise returns DEF.  */\n+static tree\n+analyze_and_compute_bitop_with_inv_effect (class loop* loop, tree phidef,\n+\t\t\t\t\t   tree niter)\n+{\n+  tree match_op[2],inv;\n+  tree type = TREE_TYPE (phidef);\n+  gphi* header_phi = NULL;\n+  enum tree_code code;\n+  /* match thing like op0 (match[0]), op1 (match[1]), phidef (PHIDEF)\n+\n+    op1 =  PHI <phidef, inv>\n+    phidef = op0 & op1\n+    if op0 is an invariant, it could change to\n+    phidef = op0 & inv.  */\n+  gimple *def;\n+  def = SSA_NAME_DEF_STMT (phidef);\n+  if (!(is_gimple_assign (def)\n+      && ((code = gimple_assign_rhs_code (def)), true)\n+      && (code == BIT_AND_EXPR || code == BIT_IOR_EXPR\n+\t  || code == BIT_XOR_EXPR)))\n+    return NULL_TREE;\n+\n+  match_op[0] = gimple_assign_rhs1 (def);\n+  match_op[1] = gimple_assign_rhs2 (def);\n+\n+  if (TREE_CODE (match_op[1]) != SSA_NAME\n+      || !expr_invariant_in_loop_p (loop, match_op[0])\n+      || !(header_phi = dyn_cast <gphi *> (SSA_NAME_DEF_STMT (match_op[1])))\n+      || gimple_phi_num_args (header_phi) != 2)\n+    return NULL_TREE;\n+\n+  if (PHI_ARG_DEF_FROM_EDGE (header_phi, loop_latch_edge (loop)) != phidef)\n+    return NULL_TREE;\n+\n+  enum tree_code code1\n+    = gimple_assign_rhs_code (def);\n+\n+  if (code1 == BIT_XOR_EXPR)\n+    {\n+       if (!tree_fits_uhwi_p (niter))\n+\treturn NULL_TREE;\n+       unsigned HOST_WIDE_INT niter_num;\n+       niter_num = tree_to_uhwi (niter);\n+       if (niter_num % 2 != 0)\n+\tmatch_op[0] =  build_zero_cst (type);\n+    }\n+\n+  inv = PHI_ARG_DEF_FROM_EDGE (header_phi, loop_preheader_edge (loop));\n+  return fold_build2 (code1, type, inv, match_op[0]);\n+}\n+\n /* Do final value replacement for LOOP, return true if we did anything.  */\n \n bool\n@@ -3685,7 +3743,24 @@ final_value_replacement_loop (class loop *loop)\n       bool folded_casts;\n       def = analyze_scalar_evolution_in_loop (ex_loop, loop, def,\n \t\t\t\t\t      &folded_casts);\n-      def = compute_overall_effect_of_inner_loop (ex_loop, def);\n+\n+      tree bitinv_def, bit_def;\n+      unsigned HOST_WIDE_INT niter_num;\n+\n+      if (def != chrec_dont_know)\n+\tdef = compute_overall_effect_of_inner_loop (ex_loop, def);\n+\n+      /* Handle bitop with invariant induction expression.\n+\n+\t.i.e\n+\tfor (int i =0 ;i < 32; i++)\n+\t  tmp &= bit2;\n+\tif bit2 is an invariant in loop which could simple to\n+\ttmp &= bit2.  */\n+      else if ((bitinv_def\n+\t\t= analyze_and_compute_bitop_with_inv_effect (loop,\n+\t\t\t\t\t\t\t     phidef, niter)))\n+\tdef = bitinv_def;\n \n       /* Handle bitwise induction expression.\n \n@@ -3697,15 +3772,13 @@ final_value_replacement_loop (class loop *loop)\n \t expressible, but in fact final value of RES can be replaced by\n \t RES & CONSTANT where CONSTANT all ones with bit {0,3,6,9,... ,63}\n \t being cleared, similar for BIT_IOR_EXPR/BIT_XOR_EXPR.  */\n-      unsigned HOST_WIDE_INT niter_num;\n-      tree bit_def;\n-      if (tree_fits_uhwi_p (niter)\n-\t  && (niter_num = tree_to_uhwi (niter)) != 0\n-\t  && niter_num < TYPE_PRECISION (TREE_TYPE (phidef))\n-\t  && (bit_def\n-\t      = analyze_and_compute_bitwise_induction_effect (loop,\n-\t\t\t\t\t\t\t      phidef,\n-\t\t\t\t\t\t\t      niter_num)))\n+      else if (tree_fits_uhwi_p (niter)\n+\t       && (niter_num = tree_to_uhwi (niter)) != 0\n+\t       && niter_num < TYPE_PRECISION (TREE_TYPE (phidef))\n+\t       && (bit_def\n+\t\t   = analyze_and_compute_bitwise_induction_effect (loop,\n+\t\t\t\t\t\t\t\t   phidef,\n+\t\t\t\t\t\t\t\t   niter_num)))\n \tdef = bit_def;\n \n       if (!tree_does_not_contain_chrecs (def)"}]}