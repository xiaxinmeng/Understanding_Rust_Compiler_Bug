{"sha": "2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhMGJlNTk3ZWFhY2I2Y2EzNGYwZmM4YTkyNDk5NDliY2Y5N2Q2NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-08-16T18:33:15Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-08-16T18:33:15Z"}, "message": "spu.h (LEGITIMIZE_RELOAD_ADDRESS): New macro.\n\n\t* config/spu/spu.h (LEGITIMIZE_RELOAD_ADDRESS): New macro.\n\t* config/spu/spu-protos.h (spu_legitimize_reload_address): Add\n\tprototype.\n\t* config/spu/spu.c (spu_legitimize_reload_address): New function.\n\t(spu_legitimate_address_p): Do not check displacement if the base\n\tis an eliminable stack register.\n\nFrom-SVN: r177794", "tree": {"sha": "6e28f379a4706d4b9a7e2349ef3514928ddd453d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e28f379a4706d4b9a7e2349ef3514928ddd453d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/comments", "author": null, "committer": null, "parents": [{"sha": "b05933f5277f7a0f09670f205af31b082e0e4976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05933f5277f7a0f09670f205af31b082e0e4976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05933f5277f7a0f09670f205af31b082e0e4976"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "67ae4ed826375b0e6b5b2de4fac948a40ff2eaed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "patch": "@@ -1,3 +1,12 @@\n+2011-08-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.h (LEGITIMIZE_RELOAD_ADDRESS): New macro.\n+\t* config/spu/spu-protos.h (spu_legitimize_reload_address): Add\n+\tprototype.\n+\t* config/spu/spu.c (spu_legitimize_reload_address): New function.\n+\t(spu_legitimate_address_p): Do not check displacement if the base\n+\tis an eliminable stack register.\n+\n 2011-08-16  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32c/m32c.h (PREFERRED_RELOAD_CLASS,"}, {"sha": "9485f384f1f563c441f51e4bdfcb31ba1907bf12", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "patch": "@@ -76,6 +76,7 @@ extern void spu_builtin_insert (rtx ops[]);\n extern void spu_builtin_promote (rtx ops[]);\n extern void spu_expand_sign_extend (rtx ops[]);\n extern void spu_expand_vector_init (rtx target, rtx vals);\n+extern rtx spu_legitimize_reload_address (rtx, enum machine_mode, int, int);\n #endif /* RTX_CODE  */\n \n extern void spu_init_expanders (void);"}, {"sha": "7868c7f98107a3b44f05d7461748d57c21d44a33", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "patch": "@@ -3803,8 +3803,14 @@ spu_legitimate_address_p (enum machine_mode mode,\n \tif (GET_CODE (op0) == REG\n \t    && INT_REG_OK_FOR_BASE_P (op0, reg_ok_strict)\n \t    && GET_CODE (op1) == CONST_INT\n-\t    && INTVAL (op1) >= -0x2000\n-\t    && INTVAL (op1) <= 0x1fff\n+\t    && ((INTVAL (op1) >= -0x2000 && INTVAL (op1) <= 0x1fff)\n+\t\t/* If virtual registers are involved, the displacement will\n+\t\t   change later on anyway, so checking would be premature.\n+\t\t   Reload will make sure the final displacement after\n+\t\t   register elimination is OK.  */\n+\t\t|| op0 == arg_pointer_rtx\n+\t\t|| op0 == frame_pointer_rtx\n+\t\t|| op0 == virtual_stack_vars_rtx)\n \t    && (!aligned || (INTVAL (op1) & 15) == 0))\n \t  return TRUE;\n \tif (GET_CODE (op0) == REG\n@@ -3877,6 +3883,45 @@ spu_addr_space_legitimize_address (rtx x, rtx oldx, enum machine_mode mode,\n   return spu_legitimize_address (x, oldx, mode);\n }\n \n+/* Reload reg + const_int for out-of-range displacements.  */\n+rtx\n+spu_legitimize_reload_address (rtx ad, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       int opnum, int type)\n+{\n+  bool removed_and = false;\n+\n+  if (GET_CODE (ad) == AND\n+      && CONST_INT_P (XEXP (ad, 1))\n+      && INTVAL (XEXP (ad, 1)) == (HOST_WIDE_INT) - 16)\n+    {\n+      ad = XEXP (ad, 0);\n+      removed_and = true;\n+    }\n+\n+  if (GET_CODE (ad) == PLUS\n+      && REG_P (XEXP (ad, 0))\n+      && CONST_INT_P (XEXP (ad, 1))\n+      && !(INTVAL (XEXP (ad, 1)) >= -0x2000\n+\t   && INTVAL (XEXP (ad, 1)) <= 0x1fff))\n+    {\n+      /* Unshare the sum.  */\n+      ad = copy_rtx (ad);\n+\n+      /* Reload the displacement.  */\n+      push_reload (XEXP (ad, 1), NULL_RTX, &XEXP (ad, 1), NULL,\n+\t\t   BASE_REG_CLASS, GET_MODE (ad), VOIDmode, 0, 0,\n+\t\t   opnum, (enum reload_type) type);\n+\n+      /* Add back AND for alignment if we stripped it.  */\n+      if (removed_and)\n+\tad = gen_rtx_AND (GET_MODE (ad), ad, GEN_INT (-16));\n+\n+      return ad;\n+    }\n+\n+  return NULL_RTX;\n+}\n+\n /* Handle an attribute requiring a FUNCTION_DECL; arguments as in\n    struct attribute_spec.handler.  */\n static tree"}, {"sha": "d89bf49f2d2f2587138afbf44b4889124671129a", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea0be597eaacb6ca34f0fc8a9249949bcf97d64/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=2ea0be597eaacb6ca34f0fc8a9249949bcf97d64", "patch": "@@ -390,6 +390,17 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define MAX_REGS_PER_ADDRESS 2\n \n+#define LEGITIMIZE_RELOAD_ADDRESS(AD, MODE, OPNUM, TYPE, IND, WIN)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  rtx new_rtx = spu_legitimize_reload_address (AD, MODE, OPNUM,\t\t\\\n+\t\t\t\t\t       (int)(TYPE));\t\t\\\n+  if (new_rtx)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      (AD) = new_rtx;\t\t\t\t\t\t\t\\\n+      goto WIN;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n \f\n /* Costs */\n "}]}