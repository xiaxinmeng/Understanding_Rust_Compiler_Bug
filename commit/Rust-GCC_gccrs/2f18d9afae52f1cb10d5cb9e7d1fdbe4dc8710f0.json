{"sha": "2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxOGQ5YWZhZTUyZjFjYjEwZDVjYjllN2QxZmRiZTRkYzg3MTBmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-24T10:58:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-24T10:58:31Z"}, "message": "Makefile.in (GNATLIBCFLAGS_FOR_C): New variable.\n\nlibada/\n\t* Makefile.in (GNATLIBCFLAGS_FOR_C): New variable.\n\t(LIBADA_FLAGS_TO_PASS): Add GNATLIBCFLAGS_FOR_C.\n\t* configure.ac: Include config/unwind_ipinfo.m4.\n\tCheck for _Unwind_GetIPInfo.\n\t* configure: Regenerate.\n\ngcc/ada/\n\t* init.c (__gnat_adjust_context_for_raise): Mention _Unwind_GetIPInfo.\n\t* gcc-interface/Makefile.in (GNATLIBCFLAGS_FOR_C): Add HAVE_GETIPINFO.\n\tPass GNATLIBCFLAGS_FOR_C to recursive invocations.\n\ngcc/testsuite/\n\t* gnat.dg/null_pointer_deref1.adb: New test.\n\t* gnat.dg/null_pointer_deref2.adb: Likewise.\n\nFrom-SVN: r153525", "tree": {"sha": "f18809223e14555c22ed59339f3d9e9ea2598d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18809223e14555c22ed59339f3d9e9ea2598d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/comments", "author": null, "committer": null, "parents": [{"sha": "c0f81f78ae9aa3931b3b5472eb138ff3815d10de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f81f78ae9aa3931b3b5472eb138ff3815d10de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f81f78ae9aa3931b3b5472eb138ff3815d10de"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "231de3040903f341d8bd198e721f64c8980aecec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -1,3 +1,9 @@\n+2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c (__gnat_adjust_context_for_raise): Mention _Unwind_GetIPInfo.\n+\t* gcc-interface/Makefile.in (GNATLIBCFLAGS_FOR_C): Add HAVE_GETIPINFO.\n+\tPass GNATLIBCFLAGS_FOR_C to recursive invocations.\n+\n 2009-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interfaces/decl.c (build_subst_list): Convert the expression of"}, {"sha": "c9221fb502253b66f391e5be88bbf7abd5d8fcc0", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -109,8 +109,11 @@ SOME_ADAFLAGS =-gnata\n FORCE_DEBUG_ADAFLAGS = -g\n GNATLIBFLAGS = -gnatpg -nostdinc\n GNATLIBCFLAGS = -g -O2\n+# Pretend that _Unwind_GetIPInfo is available for the target by default.  This\n+# should be autodetected during the configuration of libada and passed down to\n+# here, but we need something for --disable-libada and hope for the best.\n GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) -fexceptions \\\n-\t-DIN_RTS\n+\t-DIN_RTS -DHAVE_GETIPINFO\n ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n MOST_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(SOME_ADAFLAGS)\n THREAD_KIND = native\n@@ -2422,6 +2425,7 @@ gnatlib-shared-default:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n@@ -2447,6 +2451,7 @@ gnatlib-shared-dual:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib-shared-default\n@@ -2455,6 +2460,7 @@ gnatlib-shared-dual:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n@@ -2464,6 +2470,7 @@ gnatlib-shared-dual-win32:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib-shared-win32\n@@ -2472,6 +2479,7 @@ gnatlib-shared-dual-win32:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n@@ -2485,6 +2493,7 @@ gnatlib-shared-win32:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n@@ -2503,7 +2512,7 @@ gnatlib-shared-darwin:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) \\\n-\t                    -fno-common\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C) -fno-common\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     gnatlib\n@@ -2531,6 +2540,7 @@ gnatlib-shared-vms:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n@@ -2559,6 +2569,7 @@ gnatlib-shared:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n              GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" \\\n@@ -2572,6 +2583,7 @@ gnatlib-sjlj:\n \t     EH_MECHANISM=\"\" \\\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" gnatlib\n@@ -2584,6 +2596,7 @@ gnatlib-zcx:\n \t     EH_MECHANISM=\"-gcc\" \\\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n+\t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" gnatlib"}, {"sha": "0483d82724b3f18ac92c08db31add9fadc553275", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -2301,8 +2301,10 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n {\n   /* We used to compensate here for the raised from call vs raised from signal\n      exception discrepancy with the GCC ZCX scheme, but this now can be dealt\n-     with generically in the unwinder (see GCC PR other/26208).  Only the VMS\n-     ports still do the compensation described in the few lines below.\n+     with generically in the unwinder (see GCC PR other/26208).  This however\n+     requires the use of the _Unwind_GetIPInfo routine in raise-gcc.c, which\n+     is predicated on the definition of HAVE_GETIPINFO at compile time.  Only\n+     the VMS ports still do the compensation described in the few lines below.\n \n      *** Call vs signal exception discrepancy with GCC ZCX scheme ***\n "}, {"sha": "73d8d6bf8e0b1b5a5b66a48c43726d07ab78a939", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -1,3 +1,8 @@\n+2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/null_pointer_deref1.adb: New test.\n+\t* gnat.dg/null_pointer_deref2.adb: Likewise.\n+\n 2009-10-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/41772"}, {"sha": "817155dc1c9cb15634a4d6ebdcf490ea7d672f41", "filename": "gcc/testsuite/gnat.dg/null_pointer_deref1.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp\" }\n+\n+-- This test requires architecture- and OS-specific support code for unwinding\n+-- through signal frames (typically located in *-unwind.h) to pass.  Feel free\n+-- to disable it if this code hasn't been implemented yet.\n+\n+procedure Null_Pointer_Deref1 is\n+   type Int_Ptr is access all Integer;\n+\n+   function Ident return Int_Ptr is\n+   begin\n+     return null;\n+   end;\n+\n+   Data : Int_Ptr := Ident;\n+begin\n+   Data.all := 1;\n+exception\n+   when Storage_Error => null;\n+end;"}, {"sha": "b1dd548f01bf2e8b4226f82ce96f917f6443f154", "filename": "gcc/testsuite/gnat.dg/null_pointer_deref2.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp\" }\n+\n+-- This test requires architecture- and OS-specific support code for unwinding\n+-- through signal frames (typically located in *-unwind.h) to pass.  Feel free\n+-- to disable it if this code hasn't been implemented yet.\n+\n+procedure Null_Pointer_Deref2 is\n+\n+   task T;\n+\n+   task body T is\n+      type Int_Ptr is access all Integer;\n+\n+      function Ident return Int_Ptr is\n+      begin\n+        return null;\n+      end;\n+      Data : Int_Ptr := Ident;\n+   begin\n+      Data.all := 1;\n+   exception\n+      when Storage_Error => null;\n+   end T;\n+\n+begin\n+   null;\n+end;"}, {"sha": "deffec6515f2319a877115caac2d8581d7d4b5d7", "filename": "libada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -1,3 +1,11 @@\n+2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.in (GNATLIBCFLAGS_FOR_C): New variable.\n+\t(LIBADA_FLAGS_TO_PASS): Add GNATLIBCFLAGS_FOR_C.\n+\t* configure.ac: Include config/unwind_ipinfo.m4.\n+\tCheck for _Unwind_GetIPInfo.\n+\t* configure: Regenerate.\n+\n 2009-08-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR ada/41122"}, {"sha": "01fa8362374a89998cccf39aaf901bcc0c2a88cf", "filename": "libada/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FMakefile.in?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -58,6 +58,8 @@ WARN_CFLAGS = @warn_cflags@\n \n TARGET_LIBGCC2_CFLAGS=\n GNATLIBCFLAGS= -g -O2\n+GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) -fexceptions \\\n+\t-DIN_RTS @have_getipinfo@\n \n # Get target-specific overrides for TARGET_LIBGCC2_CFLAGS.\n host_subdir = @host_subdir@\n@@ -80,6 +82,7 @@ LIBADA_FLAGS_TO_PASS = \\\n         \"SHELL=$(SHELL)\" \\\n         \"GNATLIBFLAGS=$(GNATLIBFLAGS) $(MULTIFLAGS)\" \\\n         \"GNATLIBCFLAGS=$(GNATLIBCFLAGS) $(MULTIFLAGS)\" \\\n+        \"GNATLIBCFLAGS_FOR_C=$(GNATLIBCFLAGS_FOR_C) $(MULTIFLAGS)\" \\\n         \"TARGET_LIBGCC2_CFLAGS=$(TARGET_LIBGCC2_CFLAGS)\" \\\n         \"THREAD_KIND=$(THREAD_KIND)\" \\\n         \"TRACE=$(TRACE)\" \\"}, {"sha": "4137364df2110c90bf0304654e18fb4d47c6a048", "filename": "libada/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -554,6 +554,7 @@ ac_unique_file=\"Makefile.in\"\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n warn_cflags\n+have_getipinfo\n default_gnatlib_target\n LN_S\n AWK\n@@ -631,6 +632,7 @@ with_build_libsubdir\n enable_maintainer_mode\n enable_multilib\n enable_shared\n+with_system_libunwind\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1258,6 +1260,7 @@ Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n   --with-build-libsubdir=DIR  Directory where to find libraries for build system\n+  --with-system-libunwind use installed libunwind\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -2879,6 +2882,49 @@ else\n fi\n \n \n+# Check for _Unwind_GetIPInfo\n+\n+\n+# Check whether --with-system-libunwind was given.\n+if test \"${with_system_libunwind+set}\" = set; then :\n+  withval=$with_system_libunwind;\n+fi\n+\n+  # If system-libunwind was not specifically set, pick a default setting.\n+  if test x$with_system_libunwind = x; then\n+    case ${target} in\n+      ia64-*-hpux*) with_system_libunwind=yes ;;\n+      *) with_system_libunwind=no ;;\n+    esac\n+  fi\n+  # Based on system-libunwind and target, do we have ipinfo?\n+  if  test x$with_system_libunwind = xyes; then\n+    case ${target} in\n+      ia64-*-*) have_unwind_getipinfo=no ;;\n+      *) have_unwind_getipinfo=yes ;;\n+    esac\n+  else\n+    # Darwin before version 9 does not have _Unwind_GetIPInfo.\n+\n+    case ${target} in\n+      *-*-darwin[3-8]|*-*-darwin[3-8].*) have_unwind_getipinfo=no ;;\n+      *) have_unwind_getipinfo=yes ;;\n+    esac\n+\n+  fi\n+\n+  if test x$have_unwind_getipinfo = xyes; then\n+\n+$as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n+\n+  fi\n+\n+have_getipinfo=\n+if test x$have_unwind_getipinfo = xyes; then\n+  have_getipinfo=-DHAVE_GETIPINFO\n+fi\n+\n+\n warn_cflags=\n if test \"x$GCC\" = \"xyes\"; then\n   warn_cflags='$(GCC_WARN_CFLAGS)'"}, {"sha": "3aa8a62a522554aa4f2b817f5e440aba3bfb4ba3", "filename": "libada/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0/libada%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure.ac?ref=2f18d9afae52f1cb10d5cb9e7d1fdbe4dc8710f0", "patch": "@@ -18,6 +18,7 @@\n sinclude(../config/acx.m4)\n sinclude(../config/multi.m4)\n sinclude(../config/override.m4)\n+sinclude(../config/unwind_ipinfo.m4)\n \n AC_INIT\n AC_PREREQ([2.64])\n@@ -131,6 +132,14 @@ else\n fi\n AC_SUBST([default_gnatlib_target])\n \n+# Check for _Unwind_GetIPInfo\n+GCC_CHECK_UNWIND_GETIPINFO\n+have_getipinfo=\n+if test x$have_unwind_getipinfo = xyes; then\n+  have_getipinfo=-DHAVE_GETIPINFO\n+fi\n+AC_SUBST(have_getipinfo)\n+\n warn_cflags=\n if test \"x$GCC\" = \"xyes\"; then\n   warn_cflags='$(GCC_WARN_CFLAGS)'"}]}