{"sha": "95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjYjBmYzhjNTE4NDFjYzZhMGU1MTQ5MGNiMzc2OWViODBmYTM0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T15:57:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T19:22:47Z"}, "message": "libstdc++: Add remaining C++20 additions to <sstream> [P0408R7]\n\nThis adds the new overloads of basic_stringbuf::str, and the\ncorresponding overloads to basic_istringstream, basic_ostringstream and\nbasic_stringstream.\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Tighten patterns.\n\t(GLIBCXX_3.4.29): Export new symbols.\n\t* include/bits/alloc_traits.h (__allocator_like): New concept.\n\t* include/std/sstream (basic_stringbuf::swap): Add exception\n\tspecification.\n\t(basic_stringbuf::str() const): Add ref-qualifier. Use new\n\t_M_high_mark function.\n\t(basic_stringbuf::str(const SAlloc&) const): Define new function.\n\t(basic_stringbuf::str() &&): Likewise.\n\t(basic_stringbuf::str(const basic_string<C,T,SAlloc>&)):\n\tLikewise.\n\t(basic_stringbuf::str(basic_string<C,T,Alloc>&&)): Likewise.\n\t(basic_stringbuf::view() const): Use _M_high_mark.\n\t(basic_istringstream::str, basic_ostringstream::str)\n\t(basic_stringstream::str): Define new overloads.\n\t* src/c++20/sstream-inst.cc (basic_stringbuf::str)\n\t(basic_istringstream::str, basic_ostringstream::str)\n\t(basic_stringstream::str): Explicit instantiation definitions\n\tfor new overloads.\n\t* testsuite/27_io/basic_istringstream/view/char/1.cc: Add more\n\tchecks.\n\t* testsuite/27_io/basic_istringstream/view/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostringstream/view/char/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringstream/view/char/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringstream/view/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istringstream/str/char/2.cc: New test.\n\t* testsuite/27_io/basic_istringstream/str/wchar_t/2.cc: New test.\n\t* testsuite/27_io/basic_ostringstream/str/char/3.cc: New test.\n\t* testsuite/27_io/basic_ostringstream/str/wchar_t/3.cc: New test.\n\t* testsuite/27_io/basic_stringbuf/str/char/4.cc: New test.\n\t* testsuite/27_io/basic_stringbuf/str/wchar_t/4.cc: New test.\n\t* testsuite/27_io/basic_stringstream/str/char/5.cc: New test.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/5.cc.cc: New test.", "tree": {"sha": "d4d4b798f8e66ebdb86e4f8b4785c25f84cfcbe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d4b798f8e66ebdb86e4f8b4785c25f84cfcbe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced70ebaa372945ec8d73703d81e4a10d6d51c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced70ebaa372945ec8d73703d81e4a10d6d51c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced70ebaa372945ec8d73703d81e4a10d6d51c9b"}], "stats": {"total": 1136, "additions": 1082, "deletions": 54}, "files": [{"sha": "46769db15303aa9f62930d95342a7700b6d88e93", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -1776,22 +1776,25 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_ONS4_14__xfer_bufptrsE;\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]14__xfer_bufptrs[CD][12]*;\n-    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[a1346789]*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[a146789]*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE3strERK*;\n #   _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]*;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOSa*;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKNS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_Openmode;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n-    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a4]*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strERK*;\n #   _ZNSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]*;\n #   _ZNSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]*;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOSa*;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKNS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_Openmode;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n-    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a4]*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strERK*;\n     _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n     _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n     _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE5rdbufEv;\n@@ -2354,6 +2357,10 @@ GLIBCXX_3.4.29 {\n \n     # basic_stringbuf::view()\n     _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+    # basic_stringbuf::str\n+    _ZNOSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNKRSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEONS_12basic_stringI[cw]S2_S3_EE;\n \n     # basic_[io]stringstream::basic_[io]stringstream(basic_string&&, ios_base::openmode)\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n@@ -2363,6 +2370,10 @@ GLIBCXX_3.4.29 {\n \n     # basic_[io]stringstream::view()\n     _ZNKSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+    # basic_[io]stringstream::str\n+    _ZNOSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNKRSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEONS_12basic_stringI[cw]S2_S3_EE;\n \n     # basic_stringstream::basic_stringstream(basic_string&&, ios_base::openmode)\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n@@ -2372,6 +2383,10 @@ GLIBCXX_3.4.29 {\n \n     # basic_stringstream::view()\n     _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+    # basic_stringstream::str\n+    _ZNOSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNKRSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEONS_12basic_stringI[cw]S2_S3_EE;\n \n     # std::once_flag::_M_activate()\n     _ZNSt9once_flag11_M_activateEv;"}, {"sha": "467311fc91778c70868c51b687153c67376c3367", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -708,6 +708,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Alloc>\n     using _RequireNotAllocator\n       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;\n+\n+#if __cpp_concepts >= 201907L\n+  template<typename _Alloc>\n+    concept __allocator_like = requires (_Alloc& __a) {\n+      typename _Alloc::value_type;\n+      __a.deallocate(__a.allocate(1u), 1u);\n+    };\n+#endif\n #endif // C++11\n \n   /**"}, {"sha": "8cddda297017ece19d44e5d6400db1f34b3d6ade", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 182, "deletions": 41, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -37,6 +37,13 @@\n \n #include <istream>\n #include <ostream>\n+#include <bits/alloc_traits.h> // allocator_traits, __allocator_like\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_LVAL_REF_QUAL &\n+#else\n+# define _GLIBCXX_LVAL_REF_QUAL\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -65,6 +72,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>\n     {\n       struct __xfer_bufptrs;\n+\n+#if __cplusplus >= 201103L\n+      using allocator_traits = std::allocator_traits<_Alloc>;\n+      using _Noexcept_swap\n+\t= __or_<typename allocator_traits::propagate_on_container_swap,\n+\t\ttypename allocator_traits::is_always_equal>;\n+#endif\n+\n     public:\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n@@ -153,17 +168,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n       void\n-      swap(basic_stringbuf& __rhs)\n+      swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)\n       {\n \t__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};\n \t__xfer_bufptrs __r_st{__rhs, this};\n \t__streambuf_type& __base = __rhs;\n \t__streambuf_type::swap(__base);\n \t__rhs.pubimbue(this->pubimbue(__rhs.getloc()));\n \tstd::swap(_M_mode, __rhs._M_mode);\n-\tstd::swap(_M_string, __rhs._M_string);\n+\tstd::swap(_M_string, __rhs._M_string); // XXX not exception safe\n       }\n-#endif\n+#endif // C++11\n \n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n       explicit\n@@ -213,7 +228,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return _M_string.get_allocator(); }\n #endif\n \n-      // Get and set:\n+      // Getters and setters:\n+\n       /**\n        *  @brief  Copying out the string buffer.\n        *  @return  A copy of one of the underlying sequences.\n@@ -223,23 +239,51 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  is equal to the output sequence.</em> [27.7.1.2]/1\n       */\n       __string_type\n-      str() const\n+      str() const _GLIBCXX_LVAL_REF_QUAL\n       {\n \t__string_type __ret(_M_string.get_allocator());\n-\tif (char_type* __pptr = this->pptr())\n-\t  {\n-\t    char_type* __egptr = this->egptr();\n-\t    // The current egptr() may not be the actual string end.\n-\t    if (!__egptr || __pptr > __egptr)\n-\t      __ret.assign(this->pbase(), __pptr);\n-\t    else\n-\t      __ret.assign(this->pbase(), __egptr);\n-\t  }\n+\tif (char_type* __hi = _M_high_mark())\n+\t  __ret.assign(this->pbase(), __hi);\n \telse\n \t  __ret = _M_string;\n \treturn __ret;\n       }\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\tbasic_string<_CharT, _Traits, _SAlloc>\n+\tstr(const _SAlloc& __sa) const\n+\t{\n+\t  auto __sv = view();\n+\t  return { __sv.data(), __sv.size(), __sa };\n+\t}\n+#endif\n+\n+      __string_type\n+      str() &&\n+      {\n+\tif (char_type* __hi = _M_high_mark())\n+\t  {\n+\t    // Set length to end of character sequence and add null terminator.\n+\t    _M_string._M_set_length(_M_high_mark() - this->pbase());\n+\t  }\n+\tauto __str = std::move(_M_string);\n+\t_M_string.clear();\n+\t_M_sync(_M_string.data(), 0, 0);\n+\treturn __str;\n+      }\n+\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      {\n+\tif (char_type* __hi = _M_high_mark())\n+\t  return { this->pbase(), __hi };\n+\telse\n+\t  return _M_string;\n+      }\n+#endif\n+\n       /**\n        *  @brief  Setting a new buffer.\n        *  @param  __s  The string to use as a new sequence.\n@@ -257,21 +301,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n-      basic_string_view<char_type, traits_type>\n-      view() const noexcept\n-      {\n-\tusing __sv_type = basic_string_view<char_type, traits_type>;\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\trequires (!is_same_v<_SAlloc, _Alloc>)\n+\tvoid\n+\tstr(const basic_string<_CharT, _Traits, _SAlloc>& __s)\n+\t{\n+\t  _M_string.assign(__s.data(), __s.size());\n+\t  _M_stringbuf_init(_M_mode);\n+\t}\n+#endif\n \n-\tif (this->pptr())\n-\t  {\n-\t    // The current egptr() may not be the actual string end.\n-\t    if (this->pptr() > this->egptr())\n-\t      return __sv_type(this->pbase(), this->pptr());\n-\t    else\n-\t      return __sv_type(this->pbase(), this->egptr());\n-\t  }\n-\telse\n-\t  return static_cast<__sv_type>(_M_string);\n+      void\n+      str(__string_type&& __s)\n+      {\n+\t_M_string = std::move(__s);\n+\t_M_stringbuf_init(_M_mode);\n       }\n #endif\n \n@@ -376,6 +421,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);\n \n     private:\n+      // Return a pointer to the end of the underlying character sequence.\n+      // This might not be the same character as _M_string.end() because\n+      // basic_stringbuf::overflow might have written to unused capacity\n+      // in _M_string without updating its length.\n+      char_type*\n+      _M_high_mark() const _GLIBCXX_NOEXCEPT\n+      {\n+\tif (char_type* __pptr = this->pptr())\n+\t  {\n+\t    char_type* __egptr = this->egptr();\n+\t    if (!__egptr || __pptr > __egptr)\n+\t      return __pptr;  // Underlying sequence is [pbase, pptr).\n+\t    else\n+\t      return __egptr; // Underlying sequence is [pbase, egptr).\n+\t  }\n+\treturn 0; // Underlying character sequence is just _M_string.\n+      }\n+\n #if __cplusplus >= 201103L\n #if _GLIBCXX_USE_CXX11_ABI\n       // This type captures the state of the gptr / pptr pointers as offsets\n@@ -629,9 +692,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  @c rdbuf()->str()\n       */\n       __string_type\n-      str() const\n+      str() const _GLIBCXX_LVAL_REF_QUAL\n       { return _M_stringbuf.str(); }\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\tbasic_string<_CharT, _Traits, _SAlloc>\n+\tstr(const _SAlloc& __sa) const\n+\t{ return _M_stringbuf.str(__sa); }\n+#endif\n+\n+      __string_type\n+      str() &&\n+      { return std::move(_M_stringbuf).str(); }\n+\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n+\n       /**\n        *  @brief  Setting a new buffer.\n        *  @param  __s  The string to use as a new sequence.\n@@ -643,9 +723,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { _M_stringbuf.str(__s); }\n \n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n-      basic_string_view<char_type, traits_type>\n-      view() const noexcept\n-      { return _M_stringbuf.view(); }\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\trequires (!is_same_v<_SAlloc, _Alloc>)\n+\tvoid\n+\tstr(const basic_string<_CharT, _Traits, _SAlloc>& __s)\n+\t{ _M_stringbuf.str(__s); }\n+#endif\n+\n+      void\n+      str(__string_type&& __s)\n+      { _M_stringbuf.str(std::move(__s)); }\n #endif\n     };\n \n@@ -825,9 +913,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  @c rdbuf()->str()\n       */\n       __string_type\n-      str() const\n+      str() const _GLIBCXX_LVAL_REF_QUAL\n       { return _M_stringbuf.str(); }\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\tbasic_string<_CharT, _Traits, _SAlloc>\n+\tstr(const _SAlloc& __sa) const\n+\t{ return _M_stringbuf.str(__sa); }\n+#endif\n+\n+      __string_type\n+      str() &&\n+      { return std::move(_M_stringbuf).str(); }\n+\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n+\n       /**\n        *  @brief  Setting a new buffer.\n        *  @param  __s  The string to use as a new sequence.\n@@ -839,9 +944,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { _M_stringbuf.str(__s); }\n \n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n-      basic_string_view<char_type, traits_type>\n-      view() const noexcept\n-      { return _M_stringbuf.view(); }\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\trequires (!is_same_v<_SAlloc, _Alloc>)\n+\tvoid\n+\tstr(const basic_string<_CharT, _Traits, _SAlloc>& __s)\n+\t{ _M_stringbuf.str(__s); }\n+#endif\n+\n+      void\n+      str(__string_type&& __s)\n+      { _M_stringbuf.str(std::move(__s)); }\n #endif\n     };\n \n@@ -1019,9 +1132,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  @c rdbuf()->str()\n       */\n       __string_type\n-      str() const\n+      str() const _GLIBCXX_LVAL_REF_QUAL\n       { return _M_stringbuf.str(); }\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\tbasic_string<_CharT, _Traits, _SAlloc>\n+\tstr(const _SAlloc& __sa) const\n+\t{ return _M_stringbuf.str(__sa); }\n+#endif\n+\n+      __string_type\n+      str() &&\n+      { return std::move(_M_stringbuf).str(); }\n+\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n+\n       /**\n        *  @brief  Setting a new buffer.\n        *  @param  __s  The string to use as a new sequence.\n@@ -1033,9 +1163,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { _M_stringbuf.str(__s); }\n \n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n-      basic_string_view<char_type, traits_type>\n-      view() const noexcept\n-      { return _M_stringbuf.view(); }\n+#if __cpp_concepts\n+      template<__allocator_like _SAlloc>\n+\trequires (!is_same_v<_SAlloc, _Alloc>)\n+\tvoid\n+\tstr(const basic_string<_CharT, _Traits, _SAlloc>& __s)\n+\t{ _M_stringbuf.str(__s); }\n+#endif\n+\n+      void\n+      str(__string_type&& __s)\n+      { _M_stringbuf.str(std::move(__s)); }\n #endif\n     };\n \n@@ -1045,6 +1183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     inline void\n     swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,\n \t basic_stringbuf<_CharT, _Traits, _Allocator>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   /// Swap specialization for istringstreams.\n@@ -1067,12 +1206,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,\n \t basic_stringstream<_CharT, _Traits, _Allocator>& __y)\n     { __x.swap(__y); }\n-#endif\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n+#undef _GLIBCXX_LVAL_REF_QUAL\n+\n #include <bits/sstream.tcc>\n \n #endif /* _GLIBCXX_SSTREAM */"}, {"sha": "9e157d1b1bfbd6148fc9f9259e2e5457265e0552", "filename": "libstdc++-v3/src/c++20/sstream-inst.cc", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -46,29 +46,53 @@ template basic_stringbuf<char>::basic_stringbuf(basic_stringbuf&&,\n \t\t\t\t\t\t__xfer_bufptrs&&);\n template basic_stringbuf<char>::allocator_type\n basic_stringbuf<char>::get_allocator() const noexcept;\n+template string\n+basic_stringbuf<char>::str() const &;\n+template string\n+basic_stringbuf<char>::str() &&;\n template string_view\n basic_stringbuf<char>::view() const noexcept;\n+template void\n+basic_stringbuf<char>::str(string&&);\n \n template basic_istringstream<char>::basic_istringstream(ios_base::openmode,\n \t\t\t\t\t\t\tconst allocator_type&);\n template basic_istringstream<char>::basic_istringstream(__string_type&&,\n \t\t\t\t\t\t\tios_base::openmode);\n+template string\n+basic_istringstream<char>::str() const &;\n+template string\n+basic_istringstream<char>::str() &&;\n template string_view\n basic_istringstream<char>::view() const noexcept;\n+template void\n+basic_istringstream<char>::str(string&&);\n \n template basic_ostringstream<char>::basic_ostringstream(ios_base::openmode,\n \t\t\t\t\t\t\tconst allocator_type&);\n template basic_ostringstream<char>::basic_ostringstream(__string_type&&,\n \t\t\t\t\t\t\tios_base::openmode);\n+template string\n+basic_ostringstream<char>::str() const &;\n+template string\n+basic_ostringstream<char>::str() &&;\n template string_view\n basic_ostringstream<char>::view() const noexcept;\n+template void\n+basic_ostringstream<char>::str(string&&);\n \n template basic_stringstream<char>::basic_stringstream(ios_base::openmode,\n \t\t\t\t\t\t      const allocator_type&);\n template basic_stringstream<char>::basic_stringstream(__string_type&&,\n \t\t\t\t\t\t      ios_base::openmode);\n+template string\n+basic_stringstream<char>::str() const &;\n+template string\n+basic_stringstream<char>::str() &&;\n template string_view\n basic_stringstream<char>::view() const noexcept;\n+template void\n+basic_stringstream<char>::str(string&&);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n template basic_stringbuf<wchar_t>::basic_stringbuf(const allocator_type&);\n@@ -84,29 +108,53 @@ template basic_stringbuf<wchar_t>::basic_stringbuf(basic_stringbuf&&,\n template basic_stringbuf<wchar_t>::allocator_type\n basic_stringbuf<wchar_t>::get_allocator() const noexcept;\n \n+template wstring\n+basic_stringbuf<wchar_t>::str() const &;\n+template wstring\n+basic_stringbuf<wchar_t>::str() &&;\n template wstring_view\n basic_stringbuf<wchar_t>::view() const noexcept;\n+template void\n+basic_stringbuf<wchar_t>::str(wstring&&);\n \n template basic_istringstream<wchar_t>::basic_istringstream(ios_base::openmode,\n \t\t\t\t\t\t\t   const allocator_type&);\n template basic_istringstream<wchar_t>::basic_istringstream(__string_type&&,\n \t\t\t\t\t\t\t   ios_base::openmode);\n+template wstring\n+basic_istringstream<wchar_t>::str() const &;\n+template wstring\n+basic_istringstream<wchar_t>::str() &&;\n template wstring_view\n basic_istringstream<wchar_t>::view() const noexcept;\n+template void\n+basic_istringstream<wchar_t>::str(wstring&&);\n \n template basic_ostringstream<wchar_t>::basic_ostringstream(ios_base::openmode,\n \t\t\t\t\t\t\t   const allocator_type&);\n template basic_ostringstream<wchar_t>::basic_ostringstream(__string_type&&,\n \t\t\t\t\t\t\t   ios_base::openmode);\n+template wstring\n+basic_ostringstream<wchar_t>::str() const &;\n+template wstring\n+basic_ostringstream<wchar_t>::str() &&;\n template wstring_view\n basic_ostringstream<wchar_t>::view() const noexcept;\n+template void\n+basic_ostringstream<wchar_t>::str(wstring&&);\n \n template basic_stringstream<wchar_t>::basic_stringstream(ios_base::openmode,\n \t\t\t\t\t\t\t const allocator_type&);\n template basic_stringstream<wchar_t>::basic_stringstream(__string_type&&,\n \t\t\t\t\t\t\t ios_base::openmode);\n+template wstring\n+basic_stringstream<wchar_t>::str() const &;\n+template wstring\n+basic_stringstream<wchar_t>::str() &&;\n template wstring_view\n basic_stringstream<wchar_t>::view() const noexcept;\n+template void\n+basic_stringstream<wchar_t>::str(wstring&&);\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "58ee1d2367cb22e6f80b3389a08e55acc75dfbec", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/str/char/2.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F2.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.3.4  basic_istringstream member functions  [istringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::string s0 = \"this is not a short string\";\n+  std::istringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<char>;\n+  const Alloc a1(1);\n+  std::basic_string<char, std::char_traits<char>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::istringstream ss(\"123\");\n+  std::string str = \"ABCDEF\";\n+  ss.str(str);\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::istringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<char>;\n+  using Str = std::basic_string<char, std::char_traits<char>, Alloc>;\n+  Str s1 = \"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::istringstream ss;\n+  const std::string str = \"Another quite long string, not at all short\";\n+  std::string str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "5958527416425f8179d69ea233eee24c0605d81d", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/str/wchar_t/2.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F2.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.3.4  basic_istringstream member functions  [istringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::wstring s0 = L\"this is not a short string\";\n+  std::wistringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<wchar_t>;\n+  const Alloc a1(1);\n+  std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::wistringstream ss(L\"123\");\n+  std::wstring str = L\"ABCDEF\";\n+  ss.str(str);\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::wistringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<wchar_t>;\n+  using Str = std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc>;\n+  Str s1 = L\"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::wistringstream ss;\n+  const std::wstring str = L\"Another quite long string, not at all short\";\n+  std::wstring str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "c4550702005a441bbd61fab644e611556a2f06c6", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/view/char/1.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+// 29.8.3.4  basic_istringstream member functions  [istringstream.members]\n \n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n@@ -31,5 +31,17 @@ main()\n   std::string s(\"This is a test\");\n   std::istringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::istringstream&>(stm).view() );\n+\n+  s = \"This is another test with a longer string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  s = \"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  std::string s2;\n+  stm >> s2;\n+  VERIFY( stm.view() == s );\n }"}, {"sha": "8efba06145448b52f894ed4dee9a3513065b1976", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/view/wchar_t/1.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -31,5 +31,17 @@ main()\n   std::wstring s(L\"This is a test\");\n   std::wistringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::wistringstream&>(stm).view() );\n+\n+  s = L\"This is another test with a longer string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  s = L\"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  std::wstring s2;\n+  stm >> s2;\n+  VERIFY( stm.view() == s );\n }"}, {"sha": "23e961e6a1f0638445b2ca4bee16add4fa3b23c7", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/char/3.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fchar%2F3.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.4.4  basic_ostringstream member functions  [ostringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::string s0 = \"this is not a short string\";\n+  std::ostringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<char>;\n+  const Alloc a1(1);\n+  std::basic_string<char, std::char_traits<char>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::ostringstream ss(\"123\");\n+  std::string str = \"ABCDEF\";\n+  ss << str;\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::ostringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<char>;\n+  using Str = std::basic_string<char, std::char_traits<char>, Alloc>;\n+  Str s1 = \"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::ostringstream ss;\n+  const std::string str = \"Another quite long string, not at all short\";\n+  std::string str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "7c354cbf7eb9dec55397fb81dc835e89a008777a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/wchar_t/3.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F3.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.4.4  basic_ostringstream member functions  [ostringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::wstring s0 = L\"this is not a short string\";\n+  std::wostringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<wchar_t>;\n+  const Alloc a1(1);\n+  std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::wostringstream ss(L\"123\");\n+  std::wstring str = L\"ABCDEF\";\n+  ss << str;\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::wostringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<wchar_t>;\n+  using Str = std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc>;\n+  Str s1 = L\"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::wostringstream ss;\n+  const std::wstring str = L\"Another quite long string, not at all short\";\n+  std::wstring str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "f072c16f28a804a3f39d64593896b06f9afacf8c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/view/char/1.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+// 29.8.4.4  basic_ostringstream member functions  [ostringstream.members]\n \n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n@@ -31,5 +31,13 @@ main()\n   std::string s(\"This is a test\");\n   std::ostringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::ostringstream&>(stm).view() );\n+\n+  s += \" with a longer string\";\n+  stm << s;\n+  VERIFY( stm.view() == s );\n+\n+  s = \"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n }"}, {"sha": "3fa2604e1e3163fbfc24f628f64e9a1f501eb677", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+// 29.8.4.4  basic_ostringstream member functions  [ostringstream.members]\n \n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n@@ -31,5 +31,13 @@ main()\n   std::wstring s(L\"This is a test\");\n   std::wostringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::wostringstream&>(stm).view() );\n+\n+  s += L\" with a longer string\";\n+  stm << s;\n+  VERIFY( stm.view() == s );\n+\n+  s = L\"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n }"}, {"sha": "3a4b0c70b91271b648b220a52ae0e49aa7fd2fd9", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/4.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F4.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.2.4  basic_stringbuf member functions  [stringbuf.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::string s0 = \"this is not a short string\";\n+  std::stringbuf sb;\n+  sb.str(s0);\n+  VERIFY( sb.str() == s0 );\n+  VERIFY( sb.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<char>;\n+  const Alloc a1(1);\n+  std::basic_string<char, std::char_traits<char>, Alloc> s1 = sb.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( sb.str(a1).get_allocator() == a1 );\n+  VERIFY( sb.str(a1) == s1 );\n+  VERIFY( std::move(sb).str(a1) == s1 );\n+  VERIFY( std::move(sb).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( sb.str(a2).get_allocator() == a2 );\n+  VERIFY( sb.str(a2) == s1 );\n+\n+  VERIFY( std::move(sb).str() == s0 );\n+  VERIFY( std::move(sb).str().empty() );\n+  VERIFY( sb.str().empty() );\n+  VERIFY( sb.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::stringbuf sb(\"123\");\n+  std::string str = \"ABCDEF\";\n+  sb.sputn(str.c_str(), str.size());\n+  VERIFY( sb.str() == str );\n+  VERIFY( std::move(sb).str() == str );\n+  VERIFY( std::move(sb).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::stringbuf sb;\n+  using Alloc = __gnu_test::tracker_allocator<char>;\n+  using Str = std::basic_string<char, std::char_traits<char>, Alloc>;\n+  Str s1(\"string that is not short, quite long even\");\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  sb.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( sb.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::stringbuf sb;\n+  const std::string str = \"Another quite long string, not at all short\";\n+  std::string str2 = str;\n+  sb.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( sb.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "5d5187f9d527f3e36919adf04d25a882b4b7f897", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/4.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F4.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.2.4  basic_stringbuf member functions  [stringbuf.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::wstring s0 = L\"this is not a short string\";\n+  std::wstringbuf sb;\n+  sb.str(s0);\n+  VERIFY( sb.str() == s0 );\n+  VERIFY( sb.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<wchar_t>;\n+  const Alloc a1(1);\n+  std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc> s1 = sb.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( sb.str(a1).get_allocator() == a1 );\n+  VERIFY( sb.str(a1) == s1 );\n+  VERIFY( std::move(sb).str(a1) == s1 );\n+  VERIFY( std::move(sb).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( sb.str(a2).get_allocator() == a2 );\n+  VERIFY( sb.str(a2) == s1 );\n+\n+  VERIFY( std::move(sb).str() == s0 );\n+  VERIFY( std::move(sb).str().empty() );\n+  VERIFY( sb.str().empty() );\n+  VERIFY( sb.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::wstringbuf sb(L\"123\");\n+  std::wstring str = L\"ABCDEF\";\n+  sb.sputn(str.c_str(), str.size());\n+  VERIFY( sb.str() == str );\n+  VERIFY( std::move(sb).str() == str );\n+  VERIFY( std::move(sb).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::wstringbuf sb;\n+  using Alloc = __gnu_test::tracker_allocator<wchar_t>;\n+  using Str = std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc>;\n+  Str s1 = L\"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  sb.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( sb.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::wstringbuf sb;\n+  const std::wstring str = L\"Another quite long string, not at all short\";\n+  std::wstring str2 = str;\n+  sb.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( sb.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "917bd21150828f25bd9491dc103cf84a68b0da96", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/5.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F5.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.5.4  basic_stringstream member functions  [stringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::string s0 = \"this is not a short string\";\n+  std::stringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<char>;\n+  const Alloc a1(1);\n+  std::basic_string<char, std::char_traits<char>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::stringstream ss(\"123\");\n+  std::string str = \"ABCDEF\";\n+  ss << str;\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::stringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<char>;\n+  using Str = std::basic_string<char, std::char_traits<char>, Alloc>;\n+  Str s1 = \"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::stringstream ss;\n+  const std::string str = \"Another quite long string, not at all short\";\n+  std::string str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "3a2a26cb58e95d659ffa25ab2aec8cbb6b6fc6b4", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/5.cc.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F5.cc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F5.cc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F5.cc.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 29.8.5.4  basic_stringstream member functions  [stringstream.members]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void test01()\n+{\n+  const std::wstring s0 = L\"this is not a short string\";\n+  std::wstringstream ss;\n+  ss.str(s0);\n+  VERIFY( ss.str() == s0 );\n+  VERIFY( ss.str() == s0 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<wchar_t>;\n+  const Alloc a1(1);\n+  std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc> s1 = ss.str(a1);\n+  VERIFY( s1.get_allocator() == a1 );\n+  VERIFY( ss.str(a1).get_allocator() == a1 );\n+  VERIFY( ss.str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+  VERIFY( std::move(ss).str(a1) == s1 );\n+\n+  const Alloc a2(2);\n+  VERIFY( ss.str(a2).get_allocator() == a2 );\n+  VERIFY( ss.str(a2) == s1 );\n+\n+  VERIFY( std::move(ss).str() == s0 );\n+  VERIFY( std::move(ss).str().empty() );\n+  VERIFY( ss.str().empty() );\n+  VERIFY( ss.str(a1).empty() );\n+}\n+\n+void test02()\n+{\n+  std::wstringstream ss(L\"123\");\n+  std::wstring str = L\"ABCDEF\";\n+  ss << str;\n+  VERIFY( ss.str() == str );\n+  VERIFY( std::move(ss).str() == str );\n+  VERIFY( std::move(ss).str().empty() );\n+}\n+\n+void test03()\n+{\n+  std::wstringstream ss;\n+  using Alloc = __gnu_test::tracker_allocator<wchar_t>;\n+  using Str = std::basic_string<wchar_t, std::char_traits<wchar_t>, Alloc>;\n+  Str s1 = L\"string that is not short, quite long even\";\n+  auto count1 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  ss.str(s1);\n+  auto count2 = __gnu_test::tracker_allocator_counter::get_allocation_count();\n+  VERIFY( count1 == count2 );\n+  VERIFY( ss.str() == s1.c_str() );\n+}\n+\n+void test04()\n+{\n+  std::wstringstream ss;\n+  const std::wstring str = L\"Another quite long string, not at all short\";\n+  std::wstring str2 = str;\n+  ss.str(std::move(str2));\n+  VERIFY( str2.empty() );\n+  VERIFY( ss.str() == str );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "942db75c0a9ada1a53137d79fde84186586fb44e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/view/char/1.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+// 29.8.5.4  basic_stringstream member functions  [stringstream.members]\n \n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n@@ -31,5 +31,17 @@ main()\n   std::string s(\"This is a test\");\n   std::stringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::stringstream&>(stm).view() );\n+\n+  s += \" with a longer string\";\n+  stm << s;\n+  VERIFY( stm.view() == s );\n+\n+  s = \"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  std::string s2;\n+  stm >> s2;\n+  VERIFY( stm.view() == s );\n }"}, {"sha": "7c352993c4f7d6d2a6fc53c2853f32e526d80c36", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/view/wchar_t/1.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc?ref=95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "patch": "@@ -31,5 +31,17 @@ main()\n   std::wstring s(L\"This is a test\");\n   std::wstringstream stm(s);\n   VERIFY( stm.view() == s );\n-  return 0;\n+  VERIFY( stm.view() == const_cast<const std::wstringstream&>(stm).view() );\n+\n+  s += L\" with a longer string\";\n+  stm << s;\n+  VERIFY( stm.view() == s );\n+\n+  s = L\"This is a shorter string\";\n+  stm.str(s);\n+  VERIFY( stm.view() == s );\n+\n+  std::wstring s2;\n+  stm >> s2;\n+  VERIFY( stm.view() == s );\n }"}]}