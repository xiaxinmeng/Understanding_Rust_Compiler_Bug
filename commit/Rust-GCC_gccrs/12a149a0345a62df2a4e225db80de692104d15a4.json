{"sha": "12a149a0345a62df2a4e225db80de692104d15a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhMTQ5YTAzNDVhNjJkZjJhNGUyMjVkYjgwZGU2OTIxMDRkMTVhNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-05-24T22:03:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-24T22:03:09Z"}, "message": "re PR middle-end/44100 (ICE compiling g++.dg/init/struct2.C on Tru64 UNIX V5.1B)\n\n\tPR middle-end/44100\n\t* typeck.c (cp_build_unary_op): Fold offsetof-like computations.\n\nFrom-SVN: r159800", "tree": {"sha": "b9428ab159cf1e1bea7ddc0e1161b3ea0ac1fc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9428ab159cf1e1bea7ddc0e1161b3ea0ac1fc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a149a0345a62df2a4e225db80de692104d15a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a149a0345a62df2a4e225db80de692104d15a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a149a0345a62df2a4e225db80de692104d15a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a149a0345a62df2a4e225db80de692104d15a4/comments", "author": null, "committer": null, "parents": [{"sha": "feb4c2937a1dafe76e6daf03e03ef106f60545c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb4c2937a1dafe76e6daf03e03ef106f60545c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb4c2937a1dafe76e6daf03e03ef106f60545c7"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "cd86b889ca4391a079d7b99a3258b2b424316888", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12a149a0345a62df2a4e225db80de692104d15a4", "patch": "@@ -1,3 +1,8 @@\n+2010-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/44100\n+\t* typeck.c (cp_build_unary_op): Fold offsetof-like computations.\n+\n 2010-05-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* error.c (cp_diagnostic_starter): Update call to"}, {"sha": "77cf8fdd0c35ec53f6967b49cdfe9ba96b191e93", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=12a149a0345a62df2a4e225db80de692104d15a4", "patch": "@@ -5024,6 +5024,20 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t  return arg;\n \t}\n \n+      /* ??? Cope with user tricks that amount to offsetof.  */\n+      if (TREE_CODE (argtype) != FUNCTION_TYPE\n+\t  && TREE_CODE (argtype) != METHOD_TYPE\n+\t  && argtype != unknown_type_node\n+\t  && (val = get_base_address (arg))\n+\t  && TREE_CODE (val) == INDIRECT_REF\n+\t  && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n+\t{\n+\t  tree type = build_pointer_type (argtype);\n+\t  tree op0 = fold_convert (type, TREE_OPERAND (val, 0));\n+\t  tree op1 = fold_convert (sizetype, fold_offsetof (arg, val));\n+\t  return fold_build2 (POINTER_PLUS_EXPR, type, op0, op1);\n+\t}\n+\n       /* Uninstantiated types are all functions.  Taking the\n \t address of a function is a no-op, so just return the\n \t argument.  */"}, {"sha": "ddb08adfce659c64e6ca9fa6cac4a495895bc521", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12a149a0345a62df2a4e225db80de692104d15a4", "patch": "@@ -1,3 +1,7 @@\n+2010-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/parse/array-size2.C: Remove dg-error directives.\n+\n 2010-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/38394"}, {"sha": "355ed6133b4586103456c94cc826ca4cb485b2fe", "filename": "gcc/testsuite/g++.dg/parse/array-size2.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a149a0345a62df2a4e225db80de692104d15a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C?ref=12a149a0345a62df2a4e225db80de692104d15a4", "patch": "@@ -1,6 +1,7 @@\n // PR c/25682\n // { dg-do compile }\n-// Test whether we don't ICE on invalid array sizes.\n+// Test whether we don't ICE on questionable constructs where offsetof\n+// should have been used instead.\n \n struct S\n {\n@@ -13,7 +14,7 @@ extern void bar (char *, char *);\n void\n foo (void)\n {\n-  char g[(char *) &((struct S *) 0)->b - (char *) 0];\t// { dg-error \"not an integral constant-expression\" }\n-  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t\t// { dg-error \"not an integral constant-expression\" }\n+  char g[(char *) &((struct S *) 0)->b - (char *) 0];\n+  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\n   bar (g, h);\n }"}]}