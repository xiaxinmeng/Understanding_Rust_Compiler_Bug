{"sha": "b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViM2UzNmE5OGI0MmFmYTE1ZmU4NWExZTIyOTZlOWIxZDRhYzM3Zg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2004-11-23T23:25:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-23T23:25:40Z"}, "message": "sol2-c.c (solaris_register_pragmas): Use c_register_pragma_with_expansion.\n\ngcc:\n2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* config/sol2-c.c (solaris_register_pragmas): Use\n\tc_register_pragma_with_expansion.\n\t* config/sol2.h (HANDLE_PRAGMA_PACK_WITH_EXPANSION): Define.\n\t* c-pragma.c (c_register_pragma): Update call to\n\tcpp_register_pragma.\n\t(c_register_pragma_with_expansion): New function.\n\t(init_pragma): Honor HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n\t* c-pragma.h (c_register_pragma_with_expansion): New prototype.\n\t* doc/extend.texi (Solaris Pragmas): Mention macro expansion for\n\t#pragma align.\n\t* doc/tm.texi (c_register_pragma_with_expansion,\n\tHANDLE_PRAGMA_PACK_WITH_EXPANSION): Document.\n\ngcc/testsuite:\n2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n\n\t* gcc.dg/pragma-align-2.c: Test macro expansion.\n\t* gcc.dg/pragma-pack-2.c: New test.\n\nlibcpp:\n2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* internal.h (struct lexer_state): Add in_deferred_pragma.\n\t* directives.c (struct pragma_entry): Add allow_expansion.\n\t(insert_pragma_entry): Take allow_expansion flag.\n\t(register_pragma): Likewise.\n\t(cpp_register_pragma): Likewise.\n\t(_cpp_init_internal_pragmas): Update calls to cpp_register_pragma.\n\t(do_pragma): Honor allow_expansion.\n\t(cpp_handle_deferred_pragma): Set in_deferred_pragma.\n\t* include/cpplib.h (cpp_register_pragma): Update prototype.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r91117", "tree": {"sha": "c218ffe339a9fcc74872e3e0827398246b77ded8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c218ffe339a9fcc74872e3e0827398246b77ded8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a996709e40e818bf3b3561f229514991e9d90fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a996709e40e818bf3b3561f229514991e9d90fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a996709e40e818bf3b3561f229514991e9d90fa9"}], "stats": {"total": 196, "additions": 171, "deletions": 25}, "files": [{"sha": "16c3403e0de42258b02c120e414c13d59075bcd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -1,3 +1,19 @@\n+2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/sol2-c.c (solaris_register_pragmas): Use\n+\tc_register_pragma_with_expansion.\n+\t* config/sol2.h (HANDLE_PRAGMA_PACK_WITH_EXPANSION): Define.\n+\t* c-pragma.c (c_register_pragma): Update call to\n+\tcpp_register_pragma.\n+\t(c_register_pragma_with_expansion): New function.\n+\t(init_pragma): Honor HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n+\t* c-pragma.h (c_register_pragma_with_expansion): New prototype.\n+\t* doc/extend.texi (Solaris Pragmas): Mention macro expansion for\n+\t#pragma align.\n+\t* doc/tm.texi (c_register_pragma_with_expansion,\n+\tHANDLE_PRAGMA_PACK_WITH_EXPANSION): Document.\n+\n 2004-11-23  Richard Henderson  <rth@redhat.com>\n \n \t* emit-rtl.c, rtl.h (subreg_hard_regno): Remove."}, {"sha": "91efc4aa384c70d7fc0f2f722018d87cca4370d8", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -627,22 +627,33 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n \n #endif\n \n-/* Front-end wrapper for pragma registration to avoid dragging\n+/* Front-end wrappers for pragma registration to avoid dragging\n    cpplib.h in almost everywhere.  */\n void\n c_register_pragma (const char *space, const char *name,\n \t\t   void (*handler) (struct cpp_reader *))\n {\n-  cpp_register_pragma (parse_in, space, name, handler);\n+  cpp_register_pragma (parse_in, space, name, handler, 0);\n+}\n+\n+void\n+c_register_pragma_with_expansion (const char *space, const char *name,\n+\t\t\t\t  void (*handler) (struct cpp_reader *))\n+{\n+  cpp_register_pragma (parse_in, space, name, handler, 1);\n }\n \n /* Set up front-end pragmas.  */\n void\n init_pragma (void)\n {\n #ifdef HANDLE_PRAGMA_PACK\n+#ifdef HANDLE_PRAGMA_PACK_WITH_EXPANSION\n+  c_register_pragma_with_expansion (0, \"pack\", handle_pragma_pack);\n+#else\n   c_register_pragma (0, \"pack\", handle_pragma_pack);\n #endif\n+#endif\n #ifdef HANDLE_PRAGMA_WEAK\n   c_register_pragma (0, \"weak\", handle_pragma_weak);\n #endif"}, {"sha": "669d122e695e4cec906906cbb5dcef2537d73496", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -53,10 +53,12 @@ extern struct cpp_reader* parse_in;\n \n extern void init_pragma (void);\n \n-/* Front-end wrapper for pragma registration to avoid dragging\n+/* Front-end wrappers for pragma registration to avoid dragging\n    cpplib.h in almost everywhere.  */\n extern void c_register_pragma (const char *, const char *,\n \t\t\t       void (*) (struct cpp_reader *));\n+extern void c_register_pragma_with_expansion (const char *, const char *,\n+\t\t\t\t\t      void (*) (struct cpp_reader *));\n extern void maybe_apply_pragma_weak (tree);\n extern tree maybe_apply_renaming_pragma (tree, tree);\n extern void add_to_renaming_pragma_list (tree, tree);"}, {"sha": "784d20b2c7a2208efdb017b1f67fe315af38a8af", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -266,7 +266,7 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n void\n solaris_register_pragmas (void)\n {\n-  c_register_pragma (0, \"align\", solaris_pragma_align);\n+  c_register_pragma_with_expansion (0, \"align\", solaris_pragma_align);\n   c_register_pragma (0, \"init\", solaris_pragma_init);\n   c_register_pragma (0, \"fini\", solaris_pragma_fini);\n }"}, {"sha": "1aa6aa84f44d8151358818c01774f835b7552944", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -245,3 +245,6 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n extern GTY(()) tree solaris_pending_aligns;\n extern GTY(()) tree solaris_pending_inits;\n extern GTY(()) tree solaris_pending_finis;\n+\n+/* Allow macro expansion in #pragma pack.  */\n+#define HANDLE_PRAGMA_PACK_WITH_EXPANSION"}, {"sha": "dcb27f5642b1403b41e492a028fa67b789187b29", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -8603,7 +8603,10 @@ The Solaris target supports @code{#pragma redefine_extname}\n \n Increase the minimum alignment of each @var{variable} to @var{alignment}.\n This is the same as GCC's @code{aligned} attribute @pxref{Variable\n-Attributes}).\n+Attributes}).  Macro expansion occurs on the arguments to this pragma\n+when compiling C and Objective-C.  It does not currently occur when\n+compiling C++, but this is a bug which may be fixed in a future\n+release.\n \n @item fini (@var{function} [, @var{function}]...)\n @cindex pragma, fini"}, {"sha": "409559e5a2c8d68f03a0c8d2241857181a16a4b1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -9029,7 +9029,8 @@ C++, which is to pretend that the file's contents are enclosed in\n @defmac REGISTER_TARGET_PRAGMAS ()\n Define this macro if you want to implement any target-specific pragmas.\n If defined, it is a C expression which makes a series of calls to\n-@code{c_register_pragma} for each pragma.  The macro may also do any\n+@code{c_register_pragma} or @code{c_register_pragma_with_expansion}\n+for each pragma.  The macro may also do any\n setup required for the pragmas.\n \n The primary reason to define this macro is to provide compatibility with\n@@ -9045,8 +9046,10 @@ silently ignored, unless the user specifies @option{-Wunknown-pragmas}.\n @end defmac\n \n @deftypefun void c_register_pragma (const char *@var{space}, const char *@var{name}, void (*@var{callback}) (struct cpp_reader *))\n+@deftypefunx void c_register_pragma_with_expansion (const char *@var{space}, const char *@var{name}, void (*@var{callback}) (struct cpp_reader *))\n \n-Each call to @code{c_register_pragma} establishes one pragma.  The\n+Each call to @code{c_register_pragma} or\n+@code{c_register_pragma_with_expansion} establishes one pragma.  The\n @var{callback} routine will be called when the preprocessor encounters a\n pragma of the form\n \n@@ -9060,7 +9063,10 @@ routine receives @var{pfile} as its first argument, which can be passed\n on to cpplib's functions if necessary.  You can lex tokens after the\n @var{name} by calling @code{c_lex}.  Tokens that are not read by the\n callback will be silently ignored.  The end of the line is indicated by\n-a token of type @code{CPP_EOF}\n+a token of type @code{CPP_EOF}.  Macro expansion occurs on the\n+arguments of pragmas registered with\n+@code{c_register_pragma_with_expansion} but not on the arguments of\n+pragmas registered with @code{c_register_pragma}.\n \n For an example use of this routine, see @file{c4x.h} and the callback\n routines defined in @file{c4x-c.c}.\n@@ -9124,6 +9130,12 @@ that invocations of @samp{#pragma pack(pop)} will return to the previous\n value.\n @end defmac\n \n+@defmac HANDLE_PRAGMA_PACK_WITH_EXPANSION\n+Define this macro, as well as\n+@code{HANDLE_SYSV_PRAGMA}, if macros should be expanded in the\n+arguments of @samp{#pragma pack}.\n+@end defmac\n+\n @defmac TARGET_DEFAULT_PACK_STRUCT\n If your target requires a structure packing default other than 0 (meaning\n the machine default), define this macro the the necessary value (in bytes)."}, {"sha": "36b75e007762d4454352bf9b74bbbf88ae122d9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -1,3 +1,8 @@\n+2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* gcc.dg/pragma-align-2.c: Test macro expansion.\n+\t* gcc.dg/pragma-pack-2.c: New test.\n+\n 2004-11-23  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/vect/pr18425.c: Use effective target vect_long."}, {"sha": "e33f24a27da6354fe8b2498814cd192fcaca6c7a", "filename": "gcc/testsuite/gcc.dg/pragma-align-2.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align-2.c?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -11,6 +11,12 @@ void abort (void);\n #pragma align 64(x64)\n #pragma align 128(x128)\n \n+#define MACRO 128\n+#define MACRO2(A) A\n+\n+#pragma align MACRO(y128)\n+#pragma align MACRO2(MACRO) (z128)\n+\n #pragma align 8(not_defined)\n \n #pragma align 9(odd_align)\t/* { dg-error \"invalid alignment\" } */\n@@ -19,7 +25,7 @@ void abort (void);\n #pragma align bad_align\t\t/* { dg-error \"malformed\" } */\n #pragma align 1(bad_align\t/* { dg-error \"malformed\" } */\n \n-int x, x1, x2, x4, x8, y8, z8, x16, x32, x64, x128;\n+int x, x1, x2, x4, x8, y8, z8, x16, x32, x64, x128, y128, z128;\n \n #pragma align 16(x)\t\t/* { dg-error \"must appear before\" } */\n \n@@ -50,5 +56,11 @@ main ()\n   if (__alignof__ (x128) < 128)\n     abort ();\n \n+  if (__alignof__ (y128) < 128)\n+    abort ();\n+\n+  if (__alignof__ (z128) < 128)\n+    abort (); \n+\n   return 0;\n }"}, {"sha": "f44f8dbba3330c5869407c59c0266ceca7f2265d", "filename": "gcc/testsuite/gcc.dg/pragma-pack-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-2.c?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -0,0 +1,48 @@\n+/* On Solaris, #pragma pack should accept macro expansion.  */\n+\n+/* { dg-do run { target *-*-solaris2.* } } */\n+\n+extern void abort (void);\n+\n+struct {\n+        char one;\n+        long two;\n+} defaultalign;\n+\n+#define ALIGNHIGH 16\n+\n+#pragma pack(ALIGNHIGH)\n+struct {\n+        char one;\n+        long two;\n+} sixteen;\n+\n+#define ALIGN1(X) 1\n+#pragma pack(ALIGN1(4))\n+struct {\n+        char one;\n+        long two;\n+} two;\n+\n+#define ALIGN2(X) X\n+#pragma pack(ALIGN2(2))\n+struct {\n+        char one;\n+        long two;\n+} three;\n+\n+#define EMPTY\n+#pragma pack(EMPTY)\n+struct {\n+        char one;\n+        long two;\n+} resetalign;\n+\n+main()\n+{\n+        if(sizeof(sixteen) < sizeof(defaultalign)) abort();\n+        if(sizeof(two) >= sizeof(defaultalign)) abort();\n+        if(sizeof(three) <= sizeof(two)) abort();\n+        if(sizeof(resetalign) != sizeof(defaultalign)) abort();\n+\treturn 0;\n+}"}, {"sha": "3e8567bf05e6cc7a9a25837ceef0031b08354192", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -1,3 +1,16 @@\n+2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* internal.h (struct lexer_state): Add in_deferred_pragma.\n+\t* directives.c (struct pragma_entry): Add allow_expansion.\n+\t(insert_pragma_entry): Take allow_expansion flag.\n+\t(register_pragma): Likewise.\n+\t(cpp_register_pragma): Likewise.\n+\t(_cpp_init_internal_pragmas): Update calls to cpp_register_pragma.\n+\t(do_pragma): Honor allow_expansion.\n+\t(cpp_handle_deferred_pragma): Set in_deferred_pragma.\n+\t* include/cpplib.h (cpp_register_pragma): Update prototype.\n+\n 2004-11-18  Daniel Jacobowitz  <dan@codesourcery.com>\n             Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "a835b6812a5349dfa62c2a0f134e5fc76c155244", "filename": "libcpp/directives.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -45,6 +45,7 @@ struct pragma_entry\n   struct pragma_entry *next;\n   const cpp_hashnode *pragma;\t/* Name and length.  */\n   bool is_nspace;\n+  bool allow_expansion;\n   bool is_internal;\n   union {\n     pragma_cb handler;\n@@ -108,9 +109,9 @@ static struct pragma_entry *insert_pragma_entry (cpp_reader *,\n                                                  struct pragma_entry **,\n                                                  const cpp_hashnode *,\n                                                  pragma_cb,\n-\t\t\t\t\t\t bool);\n+\t\t\t\t\t\t bool, bool);\n static void register_pragma (cpp_reader *, const char *, const char *,\n-\t\t\t     pragma_cb, bool);\n+\t\t\t     pragma_cb, bool, bool);\n static int count_registered_pragmas (struct pragma_entry *);\n static char ** save_registered_pragmas (struct pragma_entry *, char **);\n static char ** restore_registered_pragmas (cpp_reader *, struct pragma_entry *,\n@@ -964,7 +965,7 @@ lookup_pragma_entry (struct pragma_entry *chain, const cpp_hashnode *pragma)\n static struct pragma_entry *\n insert_pragma_entry (cpp_reader *pfile, struct pragma_entry **chain,\n \t\t     const cpp_hashnode *pragma, pragma_cb handler,\n-\t\t     bool internal)\n+\t\t     bool allow_expansion, bool internal)\n {\n   struct pragma_entry *new;\n \n@@ -982,6 +983,7 @@ insert_pragma_entry (cpp_reader *pfile, struct pragma_entry **chain,\n       new->u.space = NULL;\n     }\n \n+  new->allow_expansion = allow_expansion;\n   new->is_internal = internal;\n   new->next = *chain;\n   *chain = new;\n@@ -990,12 +992,13 @@ insert_pragma_entry (cpp_reader *pfile, struct pragma_entry **chain,\n \n /* Register a pragma NAME in namespace SPACE.  If SPACE is null, it\n    goes in the global namespace.  HANDLER is the handler it will call,\n-   which must be non-NULL.  INTERNAL is true if this is a pragma\n-   registered by cpplib itself, false if it is registered via\n+   which must be non-NULL.  If ALLOW_EXPANSION is set, allow macro\n+   expansion while parsing pragma NAME.  INTERNAL is true if this is a\n+   pragma registered by cpplib itself, false if it is registered via\n    cpp_register_pragma */\n static void\n register_pragma (cpp_reader *pfile, const char *space, const char *name,\n-\t\t pragma_cb handler, bool internal)\n+\t\t pragma_cb handler, bool allow_expansion, bool internal)\n {\n   struct pragma_entry **chain = &pfile->pragmas;\n   struct pragma_entry *entry;\n@@ -1009,7 +1012,8 @@ register_pragma (cpp_reader *pfile, const char *space, const char *name,\n       node = cpp_lookup (pfile, U space, strlen (space));\n       entry = lookup_pragma_entry (*chain, node);\n       if (!entry)\n-\tentry = insert_pragma_entry (pfile, chain, node, NULL, internal);\n+\tentry = insert_pragma_entry (pfile, chain, node, NULL, \n+\t\t\t\t     allow_expansion, internal);\n       else if (!entry->is_nspace)\n \tgoto clash;\n       chain = &entry->u.space;\n@@ -1032,30 +1036,35 @@ register_pragma (cpp_reader *pfile, const char *space, const char *name,\n \tcpp_error (pfile, CPP_DL_ICE, \"#pragma %s is already registered\", name);\n     }\n   else\n-    insert_pragma_entry (pfile, chain, node, handler, internal);\n+    insert_pragma_entry (pfile, chain, node, handler, allow_expansion, \n+\t\t\t internal);\n }\n \n /* Register a pragma NAME in namespace SPACE.  If SPACE is null, it\n    goes in the global namespace.  HANDLER is the handler it will call,\n-   which must be non-NULL.  This function is exported from libcpp. */\n+   which must be non-NULL.  If ALLOW_EXPANSION is set, allow macro\n+   expansion while parsing pragma NAME.  This function is exported\n+   from libcpp. */\n void\n cpp_register_pragma (cpp_reader *pfile, const char *space, const char *name,\n-\t\t     pragma_cb handler)\n+\t\t     pragma_cb handler, bool allow_expansion)\n {\n-  register_pragma (pfile, space, name, handler, false);\n+  register_pragma (pfile, space, name, handler, allow_expansion, false);\n }\n \n /* Register the pragmas the preprocessor itself handles.  */\n void\n _cpp_init_internal_pragmas (cpp_reader *pfile)\n {\n   /* Pragmas in the global namespace.  */\n-  register_pragma (pfile, 0, \"once\", do_pragma_once, true);\n+  register_pragma (pfile, 0, \"once\", do_pragma_once, false, true);\n \n   /* New GCC-specific pragmas should be put in the GCC namespace.  */\n-  register_pragma (pfile, \"GCC\", \"poison\", do_pragma_poison, true);\n-  register_pragma (pfile, \"GCC\", \"system_header\", do_pragma_system_header, true);\n-  register_pragma (pfile, \"GCC\", \"dependency\", do_pragma_dependency, true);\n+  register_pragma (pfile, \"GCC\", \"poison\", do_pragma_poison, false, true);\n+  register_pragma (pfile, \"GCC\", \"system_header\", do_pragma_system_header, \n+\t\t   false, true);\n+  register_pragma (pfile, \"GCC\", \"dependency\", do_pragma_dependency, \n+\t\t   false, true);\n }\n \n /* Return the number of registered pragmas in PE.  */\n@@ -1176,7 +1185,14 @@ do_pragma (cpp_reader *pfile)\n \t     numbers in place.  */\n \t  if (pfile->cb.line_change)\n \t    (*pfile->cb.line_change) (pfile, pragma_token, false);\n+\t  /* Never expand macros if handling a deferred pragma, since\n+\t     the macro definitions now applicable may be different\n+\t     from those at the point the pragma appeared.  */\n+\t  if (p->allow_expansion && !pfile->state.in_deferred_pragma)\n+\t    pfile->state.prevent_expansion--;\n \t  (*p->u.handler) (pfile);\n+\t  if (p->allow_expansion && !pfile->state.in_deferred_pragma)\n+\t    pfile->state.prevent_expansion++;\n \t}\n       else\n \t{\n@@ -1430,6 +1446,7 @@ cpp_handle_deferred_pragma (cpp_reader *pfile, const cpp_string *s)\n   pfile->context->macro = 0;\n   pfile->context->prev = 0;\n   pfile->cb.line_change = NULL;\n+  pfile->state.in_deferred_pragma = true;\n   CPP_OPTION (pfile, defer_pragmas) = false;\n \n   run_directive (pfile, T_PRAGMA, (const char *)s->text, s->len);\n@@ -1439,6 +1456,7 @@ cpp_handle_deferred_pragma (cpp_reader *pfile, const cpp_string *s)\n   pfile->cur_token = saved_cur_token;\n   pfile->cur_run = saved_cur_run;\n   pfile->cb.line_change = saved_line_change;\n+  pfile->state.in_deferred_pragma = false;\n   CPP_OPTION (pfile, defer_pragmas) = saved_defer_pragmas;\n }\n "}, {"sha": "13213882aa812eaa9c3492324fe125eaaee3aeeb", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -638,7 +638,7 @@ extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);\n extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,\n \t\t\t\t       unsigned char *);\n extern void cpp_register_pragma (cpp_reader *, const char *, const char *,\n-\t\t\t\t void (*) (cpp_reader *));\n+\t\t\t\t void (*) (cpp_reader *), bool);\n extern void cpp_handle_deferred_pragma (cpp_reader *, const cpp_string *);\n extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,\n \t\t\t    const cpp_token *);"}, {"sha": "70694fd039de652d61e86713f1a8fa5abdc8c13d", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=b5b3e36a98b42afa15fe85a1e2296e9b1d4ac37f", "patch": "@@ -205,6 +205,9 @@ struct lexer_state\n   /* Nonzero to prevent macro expansion.  */\n   unsigned char prevent_expansion;\n \n+  /* Nonzero when handling a deferred pragma.  */\n+  unsigned char in_deferred_pragma;\n+\n   /* Nonzero when parsing arguments to a function-like macro.  */\n   unsigned char parsing_args;\n "}]}