{"sha": "fcaa810173fdf3915198350893f1bb90aa7cb689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhYTgxMDE3M2ZkZjM5MTUxOTgzNTA4OTNmMWJiOTBhYTdjYjY4OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-03-12T22:10:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-12T22:10:34Z"}, "message": "basic_string.tcc (string::_S_construct(_InIter, _InIter, const _Alloc&, forward_iterator_tag): Check for null.\n\n\n2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_string.tcc (string::_S_construct(_InIter,\n\t_InIter, const _Alloc&, forward_iterator_tag): Check for null.\n\t(string::basic_string(const _CharT* __s, const _Alloc& __a)): Same.\n\t* testsuite/21_strings/ctor_copy_dtor.cc (test01): Re-enable, now\n\tthat memory limits are in place.\n\t(test03): Add tests.\n\nFrom-SVN: r50683", "tree": {"sha": "9caa47fe708bd39a8891692bd697a68f0a4f41dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9caa47fe708bd39a8891692bd697a68f0a4f41dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcaa810173fdf3915198350893f1bb90aa7cb689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcaa810173fdf3915198350893f1bb90aa7cb689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcaa810173fdf3915198350893f1bb90aa7cb689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcaa810173fdf3915198350893f1bb90aa7cb689/comments", "author": null, "committer": null, "parents": [{"sha": "6a45951fb24c1e9196b11f68d7c3ad79a54512cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a45951fb24c1e9196b11f68d7c3ad79a54512cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a45951fb24c1e9196b11f68d7c3ad79a54512cf"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "9e07ffd9419ec4ec54aabdf68887eea709f2093f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fcaa810173fdf3915198350893f1bb90aa7cb689", "patch": "@@ -1,3 +1,12 @@\n+2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_string.tcc (string::_S_construct(_InIter,\n+\t_InIter, const _Alloc&, forward_iterator_tag): Check for null.\n+\t(string::basic_string(const _CharT* __s, const _Alloc& __a)): Same.\n+\t* testsuite/21_strings/ctor_copy_dtor.cc (test01): Re-enable, now\n+\tthat memory limits are in place.\n+\t(test03): Add tests.\n+\t\n 2002-03-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Check for wctype.h."}, {"sha": "dc6db6e1bcbe2bf09020085071ed1601b7396da3", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=fcaa810173fdf3915198350893f1bb90aa7cb689", "patch": "@@ -139,6 +139,10 @@ namespace std\n       {\n \tsize_type __dnew = static_cast<size_type>(distance(__beg, __end));\n \n+\t// NB: Not required, but considered best practice.\n+\tif (__builtin_expect(__beg == _InIter(0), 0))\n+\t  __throw_logic_error(\"attempt to create string with null pointer\");\n+\t\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refcopy();\n \n@@ -219,7 +223,8 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s + traits_type::length(__s), __a), __a)\n+    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) : 0, \n+\t\t\t       __a), __a)\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "9247a9904b8d3eabd6182b31dd45ab155c2b5664", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa810173fdf3915198350893f1bb90aa7cb689/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=fcaa810173fdf3915198350893f1bb90aa7cb689", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-04 bkoz\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n-int test01(void)\n+void test01(void)\n {\n   bool test = true;\n   typedef std::string::size_type csize_type;\n@@ -59,9 +59,6 @@ int test01(void)\n     VERIFY( false );\n   }\n \n-#if 0\n-  // XXX These tests have been temporarily disabled.\n-  //http://gcc.gnu.org/ml/libstdc++/2000-10/msg00033.html\n   // basic_string(const char* s, size_type n, alloc)\n   csz01 = str01.max_size();\n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n@@ -105,7 +102,6 @@ int test01(void)\n   catch(...) {\n     VERIFY( false );\n   }\n-#endif\n \n   // basic_string(const char* s, const allocator& a = allocator())\n   std::string str04(str_lit01);\n@@ -155,11 +151,6 @@ int test01(void)\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n   std::string str06(str01.begin(), str01.end());\n   VERIFY( str06 == str01 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n }\n \n void test02()\n@@ -171,9 +162,6 @@ void test02()\n   // where _InputIter is integral [21.3.1 para 15]\n   std::string s(10,0);\n   VERIFY( s.size() == 10 );\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n }\n \n void test03()\n@@ -189,9 +177,28 @@ void test03()\n   std::string s2 (s1);\n   VERIFY( s2.size() == 28 );\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n+  // Not defined, but libstdc++ throws an exception.\n+  const char* bogus = 0;\n+  try \n+    {\n+      std::string str1(bogus);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n+\n+  // Not defined, but libstdc++ throws an exception.\n+  try \n+    {\n+      std::string str2(bogus, 5);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n }\n \n int main()"}]}