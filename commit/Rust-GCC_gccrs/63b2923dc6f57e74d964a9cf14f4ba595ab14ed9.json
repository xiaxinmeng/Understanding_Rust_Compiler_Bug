{"sha": "63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiMjkyM2RjNmY1N2U3NGQ5NjRhOWNmMTRmNGJhNTk1YWIxNGVkOQ==", "commit": {"author": {"name": "AndreaCorallo", "email": "andrea.corallo@arm.com", "date": "2020-03-08T13:46:33Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-03-31T18:57:15Z"}, "message": "libgccjit: add new version entry point\n\ngcc/jit/ChangeLog\n2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n\t    David Malcolm  <dmalcolm@redhat.com>\n\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_13): New ABI tag\n\tplus add version paragraph.\n\t* libgccjit++.h (namespace gccjit::version): Add new namespace.\n\t* libgccjit.c (gcc_jit_version_major, gcc_jit_version_minor)\n\t(gcc_jit_version_patchlevel): New functions.\n\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_version): New macro.\n\t(gcc_jit_version_major, gcc_jit_version_minor)\n\t(gcc_jit_version_patchlevel): New functions.\n\t* libgccjit.map (LIBGCCJIT_ABI_13) New ABI tag.\n\ngcc/testsuite/ChangeLog\n2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* jit.dg/test-version.c: New testcase.\n\t* jit.dg/all-non-failing-tests.h: Add test-version.c.", "tree": {"sha": "03f4850f666021f4378a87062e2900281dd852ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03f4850f666021f4378a87062e2900281dd852ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689418b97e5eb6a221871a2439bca3e6283ac579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689418b97e5eb6a221871a2439bca3e6283ac579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689418b97e5eb6a221871a2439bca3e6283ac579"}], "stats": {"total": 180, "additions": 179, "deletions": 1}, "files": [{"sha": "d69a6a84c2c3928799b748bf407c42c606963f70", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -1,3 +1,16 @@\n+2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_13): New ABI tag\n+\tplus add version paragraph.\n+\t* libgccjit++.h (namespace gccjit::version): Add new namespace.\n+\t* libgccjit.c (gcc_jit_version_major, gcc_jit_version_minor)\n+\t(gcc_jit_version_patchlevel): New functions.\n+\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_version): New macro.\n+\t(gcc_jit_version_major, gcc_jit_version_minor)\n+\t(gcc_jit_version_patchlevel): New functions.\n+\t* libgccjit.map (LIBGCCJIT_ABI_13) New ABI tag.\n+\n 2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* jit-playback.h"}, {"sha": "0c0ce070d722ec00736e2ae7b3caebb79bd72df2", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -61,6 +61,28 @@ You can see the symbol tags provided by libgccjit.so using ``objdump``:\n            LIBGCCJIT_ABI_0\n    [...snip...]\n \n+Programmatically checking version\n+***************\n+\n+Client code can programmatically check libgccjit version using:\n+\n+.. function::  int gcc_jit_version_major (void)\n+\n+   Return libgccjit major version.  This is analogous to __GNUC__ in C code.\n+\n+.. function::  int gcc_jit_version_minor (void)\n+\n+   Return libgccjit minor version.  This is analogous to\n+   __GNUC_MINOR__ in C code.\n+\n+.. function::  int gcc_jit_version_patchlevel (void)\n+\n+   Return libgccjit patchlevel version.  This is analogous to\n+   __GNUC_PATCHLEVEL__ in C code.\n+\n+.. note:: These entry points has been added with ``LIBGCCJIT_ABI_13``\n+          (see below).\n+\n ABI symbol tags\n ***************\n \n@@ -182,3 +204,14 @@ entrypoints:\n --------------------\n ``LIBGCCJIT_ABI_12`` covers the addition of\n :func:`gcc_jit_context_new_bitfield`\n+\n+``LIBGCCJIT_ABI_13``\n+--------------------\n+``LIBGCCJIT_ABI_13`` covers the addition of version functions via API\n+entrypoints:\n+\n+  * :func:`gcc_jit_version_major`\n+\n+  * :func:`gcc_jit_version_minor`\n+\n+  * :func:`gcc_jit_version_patchlevel`"}, {"sha": "69e67766640c97c618119f6815e5a38ce850255b", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -49,6 +49,8 @@ namespace gccjit\n   class timer;\n   class auto_time;\n \n+  namespace version {};\n+\n   /* Errors within the API become C++ exceptions of this class.  */\n   class error\n   {\n@@ -1913,6 +1915,26 @@ auto_time::~auto_time ()\n   m_timer.pop (m_item_name);\n }\n \n+namespace version\n+{\n+inline int\n+major_v ()\n+{\n+  return gcc_jit_version_major ();\n+}\n+\n+inline int\n+minor_v ()\n+{\n+  return gcc_jit_version_minor ();\n+}\n+\n+inline int\n+patchlevel_v ()\n+{\n+  return gcc_jit_version_patchlevel ();\n+}\n+} // namespace version\n } // namespace gccjit\n \n #endif /* #ifndef LIBGCCJIT_PLUS_PLUS_H */"}, {"sha": "a29e9885e59b641e0c1d3e479032f17ac881ef6f", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"timevar.h\"\n #include \"typed-splay-tree.h\"\n+#include \"cppbuiltin.h\"\n+#include <pthread.h>\n \n #include \"libgccjit.h\"\n #include \"jit-recording.h\"\n@@ -3175,3 +3177,47 @@ gcc_jit_context_new_rvalue_from_vector (gcc_jit_context *ctxt,\n      as_vec_type,\n      (gcc::jit::recording::rvalue **)elements);\n }\n+\n+/* A mutex around the cached state in parse_basever.\n+   Ideally this would be within parse_basever, but the mutex is only needed\n+   by libgccjit.  */\n+\n+static pthread_mutex_t version_mutex = PTHREAD_MUTEX_INITIALIZER;\n+\n+struct version_info\n+{\n+  /* Default constructor.  Populate via parse_basever,\n+     guarded by version_mutex.  */\n+  version_info ()\n+  {\n+    pthread_mutex_lock (&version_mutex);\n+    parse_basever (&major, &minor, &patchlevel);\n+    pthread_mutex_unlock (&version_mutex);\n+  }\n+\n+  int major;\n+  int minor;\n+  int patchlevel;\n+};\n+\n+\n+extern int\n+gcc_jit_version_major (void)\n+{\n+  version_info vi;\n+  return vi.major;\n+}\n+\n+extern int\n+gcc_jit_version_minor (void)\n+{\n+  version_info vi;\n+  return vi.minor;\n+}\n+\n+extern int\n+gcc_jit_version_patchlevel (void)\n+{\n+  version_info vi;\n+  return vi.patchlevel;\n+}"}, {"sha": "1c5a12e9c0158b1c2e0c6baf6b1961259ccb0115", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -1487,6 +1487,22 @@ gcc_jit_context_new_rvalue_from_vector (gcc_jit_context *ctxt,\n \t\t\t\t\tsize_t num_elements,\n \t\t\t\t\tgcc_jit_rvalue **elements);\n \n+#define LIBGCCJIT_HAVE_gcc_jit_version\n+\n+/* Functions to retrive libgccjit version.\n+   Analogous to __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__ in C code.\n+\n+   These API entrypoints were added in LIBGCCJIT_ABI_13; you can test for their\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_version\n+ */\n+extern int\n+gcc_jit_version_major (void);\n+extern int\n+gcc_jit_version_minor (void);\n+extern int\n+gcc_jit_version_patchlevel (void);\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "6137dd4b4b03a25dfc751dadb4b8df1ee5413b91", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -179,4 +179,11 @@ LIBGCCJIT_ABI_11 {\n LIBGCCJIT_ABI_12 {\n   global:\n     gcc_jit_context_new_bitfield;\n-} LIBGCCJIT_ABI_11;\n\\ No newline at end of file\n+} LIBGCCJIT_ABI_11;\n+\n+LIBGCCJIT_ABI_13 {\n+  global:\n+    gcc_jit_version_major;\n+    gcc_jit_version_minor;\n+    gcc_jit_version_patchlevel;\n+} LIBGCCJIT_ABI_12;\n\\ No newline at end of file"}, {"sha": "220789ffe1e537e483b03e96d670d922bce613a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* jit.dg/test-version.c: New testcase.\n+\t* jit.dg/all-non-failing-tests.h: Add test-version.c.\n+\n 2020-03-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94424"}, {"sha": "ad469dad6994177358f11089d39aada7b0e8a425", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -268,6 +268,13 @@\n \n /* test-vector-types.cc: We don't use this, since it's C++.  */\n \n+/* test-version.c */\n+#define create_code create_code_version\n+#define verify_code verify_code_version\n+#include \"test-version.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-volatile.c */\n #define create_code create_code_volatile\n #define verify_code verify_code_volatile\n@@ -392,6 +399,9 @@ const struct testcase testcases[] = {\n   {\"using_global\",\n    create_code_using_global,\n    verify_code_using_global},\n+  {\"version\",\n+   create_code_version,\n+   verify_code_version},\n   {\"volatile\",\n    create_code_volatile,\n    verify_code_volatile}"}, {"sha": "4338a00018bca909fe3d5df8a5efa14cef78b81b", "filename": "gcc/testsuite/jit.dg/test-version.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2Fjit.dg%2Ftest-version.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b2923dc6f57e74d964a9cf14f4ba595ab14ed9/gcc%2Ftestsuite%2Fjit.dg%2Ftest-version.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-version.c?ref=63b2923dc6f57e74d964a9cf14f4ba595ab14ed9", "patch": "@@ -0,0 +1,26 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#ifndef LIBGCCJIT_HAVE_gcc_jit_version\n+#error LIBGCCJIT_HAVE_gcc_jit_version was not defined\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Do nothing.  */\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  if (!gcc_jit_version_major ())\n+    fail (\"Major version is zero\");\n+  /* Minor and patchlevel can be zero.  */\n+  gcc_jit_version_minor ();\n+  gcc_jit_version_patchlevel ();\n+}"}]}