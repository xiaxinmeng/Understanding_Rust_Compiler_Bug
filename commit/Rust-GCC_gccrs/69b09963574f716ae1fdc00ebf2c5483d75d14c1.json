{"sha": "69b09963574f716ae1fdc00ebf2c5483d75d14c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliMDk5NjM1NzRmNzE2YWUxZmRjMDBlYmYyYzU0ODNkNzVkMTRjMQ==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-01-29T16:17:22Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-01-29T16:17:22Z"}, "message": "mklog: Improve support of context diffs.\n\n2014-01-29  Yury Gribov  <y.gribov@samsung.com>\n\n\t* mklog: Improve support of context diffs.\n\nFrom-SVN: r207265", "tree": {"sha": "ba8340a58acb10145592180138bd62923a0ebaa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba8340a58acb10145592180138bd62923a0ebaa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b09963574f716ae1fdc00ebf2c5483d75d14c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b09963574f716ae1fdc00ebf2c5483d75d14c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b09963574f716ae1fdc00ebf2c5483d75d14c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b09963574f716ae1fdc00ebf2c5483d75d14c1/comments", "author": null, "committer": null, "parents": [{"sha": "061e86a821ca9b9a8875305844d497f2a1fa3955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061e86a821ca9b9a8875305844d497f2a1fa3955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061e86a821ca9b9a8875305844d497f2a1fa3955"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "30163056dcd3a0a4b88a8b685e183211aceab33d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b09963574f716ae1fdc00ebf2c5483d75d14c1/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b09963574f716ae1fdc00ebf2c5483d75d14c1/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=69b09963574f716ae1fdc00ebf2c5483d75d14c1", "patch": "@@ -1,3 +1,7 @@\n+2014-01-29  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* mklog: Improve support of context diffs.\n+\n 2014-01-21  Tatiana Udalova  <t.udalova@samsung.com>\n \n \t* mklog: Avoid adding falsely changed functions to ChangeLog."}, {"sha": "fb489b03a3bfc5c5b241615fb2ac898ba7ca33b5", "filename": "contrib/mklog", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b09963574f716ae1fdc00ebf2c5483d75d14c1/contrib%2Fmklog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b09963574f716ae1fdc00ebf2c5483d75d14c1/contrib%2Fmklog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog?ref=69b09963574f716ae1fdc00ebf2c5483d75d14c1", "patch": "@@ -80,18 +80,16 @@ sub remove_suffixes ($) {\n \treturn $filename;\n }\n \n-# Check if line can be a function declaration:\n-# First pattern cut extra symbols added by diff\n-# second pattern checks that line is not a comment or brace\n-sub is_function  {\n+# Check if line is a top-level declaration.\n+# TODO: ignore preprocessor directives except maybe #define ?\n+sub is_top_level {\n \tmy ($function, $is_context_diff) = (@_);\n \tif ($is_context_diff) {\n \t\t$function =~ s/^..//;\n \t} else {\n \t\t$function =~ s/^.//;\n \t}\n-\treturn $function\n-\t&& ($function !~ /^[\\s{}]/);\n+\treturn $function && $function !~ /^[\\s{}]/;\n }\n \n # For every file in the .diff print all the function names in ChangeLog\n@@ -105,13 +103,14 @@ chomp (my @diff_lines = <DFILE>);\n close (DFILE);\n $line_idx = 0;\n foreach (@diff_lines) {\n-    # Stop processing functions if we found a new file\n+    # Stop processing functions if we found a new file.\n \t# Remember both left and right names because one may be /dev/null.\n-    if (/^[+*][+*][+*] +(\\S+)/) {\n+    # Don't be fooled by line markers in case of context diff.\n+    if (!/\\*\\*\\*$/ && /^[+*][+*][+*] +(\\S+)/) {\n \t\t$left = remove_suffixes ($1);\n \t\t$look_for_funs = 0;\n \t}\n-    if (/^--- +(\\S+)?/) {\n+    if (!/---$/ && /^--- +(\\S+)?/) {\n \t\t$right = remove_suffixes ($1);\n \t\t$look_for_funs = 0;\n \t}\n@@ -120,7 +119,7 @@ foreach (@diff_lines) {\n \t# We should now have both left and right name,\n \t# so we can decide filename.\n \n-    if ($left && (/^\\*{15}$/ || /^@@ /)) {\n+    if ($left && (/^\\*{15}/ || /^@@ /)) {\n \t# If we have not seen any function names in the previous file (ie,\n \t# $change_msg is empty), we just write out a ':' before starting the next\n \t# file.\n@@ -145,9 +144,15 @@ foreach (@diff_lines) {\n \t$look_for_funs = $filename =~ '\\.(c|cpp|C|cc|h|inc|def)$';\n     }\n \n-    # Remember the last line in a unified diff block that might start\n+    # Context diffs have extra whitespace after first char;\n+    # remove it to make matching easier.\n+    if ($is_context_diff) {\n+      s/^([-+! ]) /\\1/;\n+    }\n+\n+    # Remember the last line in a diff block that might start\n     # a new function.\n-    if (/^[-+ ]([a-zA-Z0-9_].*)/) {\n+    if (/^[-+! ]([a-zA-Z0-9_].*)/) {\n         $save_fn = $1;\n     }\n \n@@ -169,9 +174,9 @@ foreach (@diff_lines) {\n \n     # Mark if we met doubtfully changed function.\n     $doubtfunc = 0;\n-    $is_context_diff = 0;\n     if ($diff_lines[$line_idx] =~ /^@@ .* @@ ([a-zA-Z0-9_].*)/) {\n \t    $doubtfunc = 1;\n+        $is_context_diff = 0;\n     }\n     elsif ($diff_lines[$line_idx] =~ /^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/) {\n \t    $doubtfunc = 1;\n@@ -184,17 +189,16 @@ foreach (@diff_lines) {\n     # Note that we don't try too hard to find good matches.  This should\n     # return a superset of the actual set of functions in the .diff file.\n     #\n-    # The first two patterns work with context diff files (diff -c). The\n-    # third pattern works with unified diff files (diff -u).\n+    # The first pattern works with context diff files (diff -c). The\n+    # second pattern works with unified diff files (diff -u).\n     #\n-    # The fourth pattern looks for the starts of functions or classes\n-    # within a unified diff block.\n+    # The third pattern looks for the starts of functions or classes\n+    # within a diff block both for context and unified diff files.\n \n     if ($look_for_funs\n         && (/^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/\n-        || /^[\\-\\+\\!] ([a-zA-Z0-9_]+)[ \\t]*\\(.*/\n \t|| /^@@ .* @@ ([a-zA-Z0-9_].*)/\n-\t|| /^[-+ ](\\{)/))\n+\t|| /^[-+! ](\\{)/))\n       {\n \t$_ = $1;\n \tmy $fn;\n@@ -219,12 +223,16 @@ foreach (@diff_lines) {\n \t$no_real_change = 0;\n \tif ($doubtfunc) {\n \t\t$idx = $line_idx;\n+\t# Skip line info in context diffs.\n+\t\twhile ($is_context_diff && $diff_lines[$idx + 1] =~ /^[-\\*]{3} [0-9]/) {\n+\t\t\t++$idx;\n+\t\t}\n \t# Check all lines till the first change\n \t# for the presence of really changed function\n \t\tdo {\n \t\t\t++$idx;\n-\t\t\t$no_real_change = is_function ($diff_lines[$idx], $is_context_diff);\n-\t\t} while (!$no_real_change && ($diff_lines[$idx] !~  /^[\\+\\-\\!]/))\n+\t\t\t$no_real_change = is_top_level ($diff_lines[$idx], $is_context_diff);\n+\t\t} while (!$no_real_change && ($diff_lines[$idx] !~ /^[-+!]/))\n \t}\n \tif ($fn && !$seen_names{$fn} && !$no_real_change) {\n \t    # If this is the first function in the file, we display it next\n@@ -246,7 +254,7 @@ foreach (@diff_lines) {\n # If we have not seen any function names (ie, $change_msg is empty), we just\n # write out a ':'. This happens when there is only one file with no\n # functions.\n-$cl_entries{$clname} .= $change_msg ? \": $change_msg\\n\" : \":\\n\";\n+$cl_entries{$clname} .= $change_msg ? \"$change_msg\\n\" : \":\\n\";\n \n $temp = `mktemp /tmp/$basename.XXXXXX` || exit 1; chop ($temp);\n open (CLFILE, \">$temp\") or die \"Could not open file $temp for writing\";"}]}