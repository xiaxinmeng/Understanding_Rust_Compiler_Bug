{"sha": "3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3MTM2MmNiMGRhNzZjYmM4MGM4Yjk2YTlmYjA4ZWQ3ZGEzNGRiZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-01-24T18:57:12Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-01-24T18:57:12Z"}, "message": "re PR driver/34904 (-march=native doesn't work with multiple input files)\n\n2008-01-24  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/34904\n\t* gcc.c (SWITCH_OK): Removed.\n\t(SWITCH_LIVE): Changed to bit.\n\t(SWITCH_FALSE): Likewise.\n\t(SWITCH_IGNORE): Likewise.\n\t(switchstr): Change live_cond to unsigned int.\n\t(process_command): Replace SWITCH_OK with 0.\n\t(do_self_spec): Likewise.\n\t(set_collect_gcc_options): Check the SWITCH_IGNORE bit.\n\t(give_switch): Likewise.\n\t(used_arg): Likewise.\n\t(do_spec_1): Set the SWITCH_IGNORE bit.\n\t(check_live_switch): Check both SWITCH_LIVE and SWITCH_FALSE\n\tbits.  Set the SWITCH_LIVE bit.\n\nFrom-SVN: r131802", "tree": {"sha": "e9e6b63ea7435d64c930fd27c960088d6f9c9ad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e6b63ea7435d64c930fd27c960088d6f9c9ad5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c496dbb3c1b16e1eaa20b50ca5cb7b65b6dcc214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c496dbb3c1b16e1eaa20b50ca5cb7b65b6dcc214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c496dbb3c1b16e1eaa20b50ca5cb7b65b6dcc214"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "40a5823dd7dd7e95b2f762242a5be74d3acf46ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "patch": "@@ -1,3 +1,20 @@\n+2008-01-24  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/34904\n+\t* gcc.c (SWITCH_OK): Removed.\n+\t(SWITCH_LIVE): Changed to bit.\n+\t(SWITCH_FALSE): Likewise.\n+\t(SWITCH_IGNORE): Likewise.\n+\t(switchstr): Change live_cond to unsigned int.\n+\t(process_command): Replace SWITCH_OK with 0.\n+\t(do_self_spec): Likewise.\n+\t(set_collect_gcc_options): Check the SWITCH_IGNORE bit.\n+\t(give_switch): Likewise.\n+\t(used_arg): Likewise.\n+\t(do_spec_1): Set the SWITCH_IGNORE bit.\n+\t(check_live_switch): Check both SWITCH_LIVE and SWITCH_FALSE\n+\tbits.  Set the SWITCH_LIVE bit.\n+\n 2008-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.h (MOVE_RATIO): Define new target macro."}, {"sha": "b63c0da1d1aa6593aa98ee1cf2437d70c2b5e2c7", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3371362cb0da76cbc80c8b96a9fb08ed7da34dbf/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3371362cb0da76cbc80c8b96a9fb08ed7da34dbf", "patch": "@@ -3082,24 +3082,22 @@ See %s for instructions.\",\n    If a switch uses following arguments, then the `part1' field\n    is the switch itself and the `args' field\n    is a null-terminated vector containing the following arguments.\n-   The `live_cond' field is:\n-   0 when initialized\n-   1 if the switch is true in a conditional spec,\n-   -1 if false (overridden by a later switch)\n-   -2 if this switch should be ignored (used in %<S)\n+   Bits in the `live_cond' field are:\n+   SWITCH_LIVE to indicate this switch is true in a conditional spec.\n+   SWITCH_FALSE to indicate this switch is overridden by a later switch.\n+   SWITCH_IGNORE to indicate this switch should be ignored (used in %<S).\n    The `validated' field is nonzero if any spec has looked at this switch;\n    if it remains zero at the end of the run, it must be meaningless.  */\n \n-#define SWITCH_OK       0\n-#define SWITCH_FALSE   -1\n-#define SWITCH_IGNORE  -2\n-#define SWITCH_LIVE     1\n+#define SWITCH_LIVE    0x1\n+#define SWITCH_FALSE   0x2\n+#define SWITCH_IGNORE  0x4\n \n struct switchstr\n {\n   const char *part1;\n   const char **args;\n-  int live_cond;\n+  unsigned int live_cond;\n   unsigned char validated;\n   unsigned char ordering;\n };\n@@ -4119,7 +4117,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t     -e0 or -e1 down into the linker.  */\n \t  switches[n_switches].part1 = &argv[i][0];\n \t  switches[n_switches].args = 0;\n-\t  switches[n_switches].live_cond = SWITCH_OK;\n+\t  switches[n_switches].live_cond = 0;\n \t  switches[n_switches].validated = 0;\n \t  n_switches++;\n \t}\n@@ -4230,7 +4228,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  else\n \t    switches[n_switches].args = 0;\n \n-\t  switches[n_switches].live_cond = SWITCH_OK;\n+\t  switches[n_switches].live_cond = 0;\n \t  switches[n_switches].validated = 0;\n \t  switches[n_switches].ordering = 0;\n \t  /* These are always valid, since gcc.c itself understands the\n@@ -4311,7 +4309,7 @@ set_collect_gcc_options (void)\n       first_time = FALSE;\n \n       /* Ignore elided switches.  */\n-      if (switches[i].live_cond == SWITCH_IGNORE)\n+      if ((switches[i].live_cond & SWITCH_IGNORE) != 0)\n \tcontinue;\n \n       obstack_grow (&collect_obstack, \"'-\", 2);\n@@ -4539,7 +4537,7 @@ do_self_spec (const char *spec)\n \t  sw = &switches[i + first];\n \t  sw->part1 = &argbuf[i][1];\n \t  sw->args = 0;\n-\t  sw->live_cond = SWITCH_OK;\n+\t  sw->live_cond = 0;\n \t  sw->validated = 0;\n \t  sw->ordering = 0;\n \t}\n@@ -5289,7 +5287,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\tif (!strncmp (switches[i].part1, p, len - have_wildcard)\n \t\t    && (have_wildcard || switches[i].part1[len] == '\\0'))\n \t\t  {\n-\t\t    switches[i].live_cond = SWITCH_IGNORE;\n+\t\t    switches[i].live_cond |= SWITCH_IGNORE;\n \t\t    switches[i].validated = 1;\n \t\t  }\n \n@@ -5907,7 +5905,8 @@ check_live_switch (int switchnum, int prefix_length)\n   /* If we already processed this switch and determined if it was\n      live or not, return our past determination.  */\n   if (switches[switchnum].live_cond != 0)\n-    return switches[switchnum].live_cond > 0;\n+    return ((switches[switchnum].live_cond & SWITCH_LIVE) != 0\n+\t    && (switches[switchnum].live_cond & SWITCH_FALSE) == 0);\n \n   /* Now search for duplicate in a manner that depends on the name.  */\n   switch (*name)\n@@ -5954,7 +5953,7 @@ check_live_switch (int switchnum, int prefix_length)\n     }\n \n   /* Otherwise the switch is live.  */\n-  switches[switchnum].live_cond = SWITCH_LIVE;\n+  switches[switchnum].live_cond |= SWITCH_LIVE;\n   return 1;\n }\n \f\n@@ -5969,7 +5968,7 @@ check_live_switch (int switchnum, int prefix_length)\n static void\n give_switch (int switchnum, int omit_first_word)\n {\n-  if (switches[switchnum].live_cond == SWITCH_IGNORE)\n+  if ((switches[switchnum].live_cond & SWITCH_IGNORE) != 0)\n     return;\n \n   if (!omit_first_word)\n@@ -7135,7 +7134,7 @@ used_arg (const char *p, int len)\n       mswitches\n \t= XNEWVEC (struct mswitchstr, n_mdswitches + (n_switches ? n_switches : 1));\n       for (i = 0; i < n_switches; i++)\n-\tif (switches[i].live_cond != SWITCH_IGNORE)\n+\tif ((switches[i].live_cond & SWITCH_IGNORE) == 0)\n \t  {\n \t    int xlen = strlen (switches[i].part1);\n \t    for (j = 0; j < cnt; j++)"}]}