{"sha": "6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "node_id": "C_kwDOANBUbNoAKDZkNDk4MTM1MDE2OGYxZWIzZjcyMTQ5YmQ3ZTA1YjliYTZiZWMxZmQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-04T13:51:01Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-04T13:51:01Z"}, "message": "libgomp.fortran/allocate-1.f90: Minor cleanup\n\nlibgomp/ChangeLog:\n\t* testsuite/libgomp.fortran/allocate-1.c (is_64bit_aligned): Renamed\n\tfrom is_64bit_aligned_.\n\t* testsuite/libgomp.fortran/allocate-1.f90: Fix interface decl\n\tand use it, more implicit none, remove unused argument.", "tree": {"sha": "014335abed3da42a48dc469df0834866da61bc0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014335abed3da42a48dc469df0834866da61bc0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0898049ad9bf6c46e510b18aaafca4946802749f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0898049ad9bf6c46e510b18aaafca4946802749f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0898049ad9bf6c46e510b18aaafca4946802749f"}], "stats": {"total": 116, "additions": 60, "deletions": 56}, "files": [{"sha": "cb6d355afc6ff667d808f931b4d9da0619d7504d", "filename": "libgomp/testsuite/libgomp.fortran/allocate-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.c?ref=6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "patch": "@@ -1,7 +1,7 @@\n #include <stdint.h>\n \n int\n-is_64bit_aligned_ (uintptr_t a)\n+is_64bit_aligned (uintptr_t a)\n {\n   return ( (a & 0x3f) == 0);\n }"}, {"sha": "062278f9908dfd0fe84ceef6dc5170409b1e1e5b", "filename": "libgomp/testsuite/libgomp.fortran/allocate-1.f90", "status": "modified", "additions": 59, "deletions": 55, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4981350168f1eb3f72149bd7e05b9ba6bec1fd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-1.f90?ref=6d4981350168f1eb3f72149bd7e05b9ba6bec1fd", "patch": "@@ -5,30 +5,30 @@\n module m\n   use omp_lib\n   use iso_c_binding\n-  implicit none\n+  implicit none (type, external)\n \n   interface\n     integer(c_int) function is_64bit_aligned (a) bind(C)\n       import :: c_int\n-      integer  :: a\n+      type(*)  :: a\n     end\n   end interface\n-end module m\n \n-subroutine foo (x, p, q, px, h, fl)\n+contains\n+\n+subroutine foo (x, p, q, h, fl)\n   use omp_lib\n   use iso_c_binding\n   integer  :: x\n   integer, dimension(4) :: p\n   integer, dimension(4) :: q\n-  integer  :: px\n   integer (kind=omp_allocator_handle_kind) :: h\n   integer  :: fl\n \n   integer  :: y\n   integer  :: r, i, i1, i2, i3, i4, i5\n   integer  :: l, l3, l4, l5, l6\n-  integer  :: n, n1, n2, n3, n4\n+  integer  :: n, n2, n3, n4\n   integer  :: j2, j3, j4\n   integer, dimension(4) :: l2\n   integer, dimension(4) :: r2\n@@ -74,6 +74,8 @@ subroutine foo (x, p, q, px, h, fl)\n   if (x /= 42) then\n     stop 1\n   end if\n+\n+  !!$omp barrier\n   v(1) = 7\n   if ( (and(fl, 2) /= 0) .and.          &\n        ((is_64bit_aligned(x) == 0) .or. &\n@@ -95,7 +97,7 @@ subroutine foo (x, p, q, px, h, fl)\n     stop 4\n   end if\n   !$omp end parallel\n-\n+stop\n   !$omp teams\n   !$omp parallel private (y) firstprivate (x, w) allocate (h: x, y, w)\n \n@@ -153,77 +155,77 @@ subroutine foo (x, p, q, px, h, fl)\n            ((is_64bit_aligned(l2(1)) == 0) .or. &\n             (is_64bit_aligned(l3) == 0) .or. &\n             (is_64bit_aligned(i1) == 0))) then\n-\tstop 10\n+        stop 10\n       end if\n     end do\n \n     !$omp do collapse(2) lastprivate(l4, i2, j2) linear (n2:17) allocate (h: n2, l4, i2, j2)\n     do i2 = 3, 4\n       do j2 = 17, 22, 2\n-\tn2 = n2 + 17\n-\tl4 = i2 * 31 + j2\n-\tif ( (and(fl, 1) /= 0) .and.          &\n-\t  ((is_64bit_aligned(l4) == 0) .or. &\n-\t  (is_64bit_aligned(n2) == 0) .or. &\n-\t  (is_64bit_aligned(i2) == 0) .or. &\n-\t  (is_64bit_aligned(j2) == 0))) then\n-\t  stop 11\n-\tend if\n+        n2 = n2 + 17\n+        l4 = i2 * 31 + j2\n+        if ( (and(fl, 1) /= 0) .and.          &\n+             ((is_64bit_aligned(l4) == 0) .or. &\n+              (is_64bit_aligned(n2) == 0) .or. &\n+              (is_64bit_aligned(i2) == 0) .or. &\n+              (is_64bit_aligned(j2) == 0))) then\n+          stop 11\n+        end if\n       end do\n     end do\n \n     !$omp do collapse(2) lastprivate(l5, i3, j3) linear (n3:17) schedule (static, 3) allocate (n3, l5, i3, j3)\n     do i3 = 3, 4\n       do j3 = 17, 22, 2\n-\t  n3 = n3 + 17\n-\t  l5 = i3 * 31 + j3\n-\t  if ( (and(fl, 2) /= 0) .and.      &\n-\t  ((is_64bit_aligned(l5) == 0) .or. &\n-\t  (is_64bit_aligned(n3) == 0) .or. &\n-\t  (is_64bit_aligned(i3) == 0) .or. &\n-\t  (is_64bit_aligned(j3) == 0))) then\n-\t  stop 12\n-\tend if\n+          n3 = n3 + 17\n+          l5 = i3 * 31 + j3\n+          if ( (and(fl, 2) /= 0) .and.      &\n+             ((is_64bit_aligned(l5) == 0) .or. &\n+              (is_64bit_aligned(n3) == 0) .or. &\n+              (is_64bit_aligned(i3) == 0) .or. &\n+              (is_64bit_aligned(j3) == 0))) then\n+          stop 12\n+        end if\n       end do\n     end do\n \n     !$omp do collapse(2) lastprivate(l6, i4, j4) linear (n4:17) schedule (dynamic) allocate (h: n4, l6, i4, j4)\n     do i4 = 3, 4\n       do j4 = 17, 22,2\n-\t  n4 = n4 + 17;\n-\t  l6 = i4 * 31 + j4;\n-\tif ( (and(fl, 1) /= 0) .and.          &\n-\t  ((is_64bit_aligned(l6) == 0) .or. &\n-\t  (is_64bit_aligned(n4) == 0) .or. &\n-\t  (is_64bit_aligned(i4) == 0) .or. &\n-\t  (is_64bit_aligned(j4) == 0))) then\n-\t  stop 13\n-\tend if\n+          n4 = n4 + 17;\n+          l6 = i4 * 31 + j4;\n+        if ( (and(fl, 1) /= 0) .and.          &\n+            ((is_64bit_aligned(l6) == 0) .or. &\n+             (is_64bit_aligned(n4) == 0) .or. &\n+             (is_64bit_aligned(i4) == 0) .or. &\n+             (is_64bit_aligned(j4) == 0))) then\n+          stop 13\n+        end if\n       end do\n     end do\n \n     !$omp do lastprivate (i5) allocate (i5)\n     do i5 = 1, 17, 3\n       if ( (and(fl, 2) /= 0) .and.          &\n-\t   (is_64bit_aligned(i5) == 0)) then\n-\tstop 14\n+           (is_64bit_aligned(i5) == 0)) then\n+        stop 14\n       end if\n     end do\n \n     !$omp do reduction(+:p, q, r2) allocate(h: p, q, r2)\n     do i = 0, 31\n-\tp(3) = p(3) +  i;\n-\tp(4) = p(4) + (2 * i)\n-\tq(1) = q(1) + (3 * i)\n-\tq(3) = q(3) + (4 * i)\n-\tr2(1) = r2(1) + (5 * i)\n-\tr2(4) = r2(4) + (6 * i)\n-\tif ( (and(fl, 1) /= 0) .and.          &\n-\t  ((is_64bit_aligned(q(1)) == 0) .or. &\n-\t  (is_64bit_aligned(p(1)) == 0) .or. &\n-\t  (is_64bit_aligned(r2(1)) == 0) )) then\n-\t  stop 15\n-\tend if\n+        p(3) = p(3) +  i;\n+        p(4) = p(4) + (2 * i)\n+        q(1) = q(1) + (3 * i)\n+        q(3) = q(3) + (4 * i)\n+        r2(1) = r2(1) + (5 * i)\n+        r2(4) = r2(4) + (6 * i)\n+        if ( (and(fl, 1) /= 0) .and.             &\n+             ((is_64bit_aligned(q(1)) == 0) .or. &\n+              (is_64bit_aligned(p(1)) == 0) .or. &\n+              (is_64bit_aligned(r2(1)) == 0) )) then\n+          stop 15\n+        end if\n     end do\n \n     !$omp task private(y) firstprivate(x) allocate(x, y)\n@@ -305,11 +307,13 @@ subroutine foo (x, p, q, px, h, fl)\n       .or. r2(1) /= (5 * p(3)) .or. r2(4) /= (6 * p(3))) then\n     stop 25\n   end if\n-\n end subroutine\n+end module m\n \n program main\n   use omp_lib\n+  use m\n+  implicit none (type, external)\n   integer, dimension(4) :: p\n   integer, dimension(4) :: q\n \n@@ -323,11 +327,11 @@ program main\n   if (a == omp_null_allocator) stop 1\n \n   call omp_set_default_allocator (omp_default_mem_alloc);\n-  call foo (42, p, q, 2, a, 0);\n-  call foo (42, p, q, 2, omp_default_mem_alloc, 0);\n-  call foo (42, p, q, 2, a, 1);\n+  call foo (42, p, q, a, 0);\n+  call foo (42, p, q, omp_default_mem_alloc, 0);\n+  call foo (42, p, q, a, 1);\n   call omp_set_default_allocator (a);\n-  call foo (42, p, q, 2, omp_null_allocator, 3);\n-  call foo (42, p, q, 2, omp_default_mem_alloc, 2);\n+  call foo (42, p, q, omp_null_allocator, 3);\n+  call foo (42, p, q, omp_default_mem_alloc, 2);\n   call omp_destroy_allocator (a);\n end"}]}