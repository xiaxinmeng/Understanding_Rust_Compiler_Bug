{"sha": "2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a", "node_id": "C_kwDOANBUbNoAKDJmMjE3ZjcyMThiNjIxZmQ3ZDdmYjdhYzU5YjJkZGYyZTAyN2VkNGE", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-11T19:45:02Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-11T19:45:02Z"}, "message": "Avoid updating hot bb threshold in call speculation code\n\nThis patch removes apparently forgotten debugging hack (which got in during\nthe speculative call patchset) which reduces hot bb threshold.  This does not\nmake sense since it is set and reset randomly as the summaries are processed.\nOne problem is that we set the BB threshold to make certain BBs hot and hten\nunrolling or vectorization may reduce it to some fraction of the count that\nmakes it cold.  We may want to add some buffer and divide the value by,\nsay 32, but that shoulid be done independently of speculative calls.\n\ngcc/ChangeLog:\n\n2021-12-11  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-profile.c (ipa_profile): Do not update hot bb threshold.", "tree": {"sha": "1232900151990ceb18aeba3ceade3fe706ebe88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1232900151990ceb18aeba3ceade3fe706ebe88e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a/comments", "author": null, "committer": null, "parents": [{"sha": "c87ff8758676307d4366d8a6113b04feae1861c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87ff8758676307d4366d8a6113b04feae1861c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87ff8758676307d4366d8a6113b04feae1861c7"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "02f42d9b0f74ecf44cff1fdf900fa594a3b91ad1", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a", "patch": "@@ -854,18 +854,6 @@ ipa_profile (void)\n \t      node_map_initialized = true;\n \t      ncommon++;\n \n-\t      if (in_lto_p)\n-\t\t{\n-\t\t  if (dump_file)\n-\t\t    {\n-\t\t      fprintf (dump_file,\n-\t\t\t       \"Updating hotness threshold in LTO mode.\\n\");\n-\t\t      fprintf (dump_file, \"Updated min count: %\" PRId64 \"\\n\",\n-\t\t\t       (int64_t) threshold / spec_count);\n-\t\t    }\n-\t\t  set_hot_bb_threshold (threshold / spec_count);\n-\t\t}\n-\n \t      unsigned speculative_id = 0;\n \t      profile_count orig = e->count;\n \t      for (unsigned i = 0; i < spec_count; i++)"}]}