{"sha": "bd16a708b9e21300511c7187a81fc5c8fb949d7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxNmE3MDhiOWUyMTMwMDUxMWM3MTg3YTgxZmM1YzhmYjk0OWQ3Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-06T23:34:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-06T23:34:44Z"}, "message": "(call_value): Handle PARALLEL in operands[0].\n\n(call_value_multiple_internal2): New pattern.\n\nFrom-SVN: r12196", "tree": {"sha": "ce5c63c363bd0581593fbb33f5121a5ed452756d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce5c63c363bd0581593fbb33f5121a5ed452756d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd16a708b9e21300511c7187a81fc5c8fb949d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd16a708b9e21300511c7187a81fc5c8fb949d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd16a708b9e21300511c7187a81fc5c8fb949d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd16a708b9e21300511c7187a81fc5c8fb949d7c/comments", "author": null, "committer": null, "parents": [{"sha": "a20b7b051ed09da29b7e4732abbc6439cc3e121d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20b7b051ed09da29b7e4732abbc6439cc3e121d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20b7b051ed09da29b7e4732abbc6439cc3e121d"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "973aaedbfc3593bd045d501bf8ebaa5d8510abfc", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd16a708b9e21300511c7187a81fc5c8fb949d7c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd16a708b9e21300511c7187a81fc5c8fb949d7c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bd16a708b9e21300511c7187a81fc5c8fb949d7c", "patch": "@@ -6322,12 +6322,23 @@ move\\\\t%0,%z4\\\\n\\\\\n \t    emit_insn (RTVEC_ELT (adjust, i));\n \t}\n \n+      /* Handle Irix6 function calls that have multiple non-contiguous\n+\t results.  */\n+      if (GET_CODE (operands[0]) == PARALLEL)\n+\t{\n+\t  emit_call_insn (gen_call_value_multiple_internal2\n+\t\t\t  (XEXP (XVECEXP (operands[0], 0, 0), 0),\n+\t\t\t   operands[1], operands[2],\n+\t\t\t   XEXP (XVECEXP (operands[0], 0, 1), 0),\n+\t\t\t   gen_rtx (REG, SImode, GP_REG_FIRST + 31)));\n+\t  DONE;\n+\t}\n+\n       emit_call_insn (gen_call_value_internal1 (operands[0], operands[1], operands[2],\n \t\t\t\t\t        gen_rtx (REG, SImode, GP_REG_FIRST + 31)));\n \n       DONE;\n     }\n-\n }\")\n \n (define_insn \"call_value_internal1\"\n@@ -6447,6 +6458,45 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"2\")])\n \n+;; ??? May eventually need all 6 versions of the call patterns with multiple\n+;; return values.\n+\n+(define_insn \"call_value_multiple_internal2\"\n+  [(set (match_operand 0 \"register_operand\" \"=df\")\n+        (call (match_operand 1 \"call_insn_operand\" \"m\")\n+              (match_operand 2 \"\" \"i\")))\n+   (set (match_operand 3 \"register_operand\" \"=df\")\n+        (call (match_dup 1)\n+              (match_dup 2)))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=d\"))]\n+  \"TARGET_ABICALLS && !TARGET_LONG_CALLS\"\n+  \"*\n+{\n+  register rtx target = XEXP (operands[1], 0);\n+\n+  if (GET_CODE (target) == SYMBOL_REF)\n+    return \\\"jal\\\\t%1\\\";\n+\n+  else if (GET_CODE (target) == CONST_INT)\n+    {\n+      operands[1] = target;\n+      return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n+    }\n+\n+  else\n+    {\n+      operands[1] = target;\n+      if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n+\treturn \\\"move\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n+      else\n+\treturn \\\"jal\\\\t%4,%1\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"2\")])\n+\n+\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\""}]}