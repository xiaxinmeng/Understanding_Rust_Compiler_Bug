{"sha": "04e9daaf31d67f5b16b7c70013975536139ebf5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlOWRhYWYzMWQ2N2Y1YjE2YjdjNzAwMTM5NzU1MzYxMzllYmY1Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T18:17:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T18:17:58Z"}, "message": "pdp11.c (TARGET_STRUCT_VALUE_RTX): New.\n\n\t* config/pdp11/pdp11.c (TARGET_STRUCT_VALUE_RTX): New.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t* config/pdp11/pdp11.h (STRUCT_VALUE): Remove.\n\t(RETURN_IN_MEMORY): Likewise.\n\nFrom-SVN: r76654", "tree": {"sha": "69651798ae472045b7e42f816c119273147adf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69651798ae472045b7e42f816c119273147adf8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e9daaf31d67f5b16b7c70013975536139ebf5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e9daaf31d67f5b16b7c70013975536139ebf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e9daaf31d67f5b16b7c70013975536139ebf5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e9daaf31d67f5b16b7c70013975536139ebf5f/comments", "author": null, "committer": null, "parents": [{"sha": "b2037eac294895d135551d4ffae674c3a4d637a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2037eac294895d135551d4ffae674c3a4d637a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2037eac294895d135551d4ffae674c3a4d637a2"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "566d6baa58e318d67eb9c8a1c871d4389a46327a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04e9daaf31d67f5b16b7c70013975536139ebf5f", "patch": "@@ -1,3 +1,10 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/pdp11/pdp11.c (TARGET_STRUCT_VALUE_RTX): New.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t* config/pdp11/pdp11.h (STRUCT_VALUE): Remove.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\n 2004-01-26  Fariborz Jahanian <fjahanian@apple.com>\n \n          * config/rs6000/rs6000.c (rs6000_emit_move): split slow"}, {"sha": "117510955b4a9d18c787fbf493c4e92bee8bd59e", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=04e9daaf31d67f5b16b7c70013975536139ebf5f", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for gcc2 for pdp11.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2004\n    Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -60,6 +60,7 @@ static bool pdp11_assemble_integer (rtx, unsigned int, int);\n static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void pdp11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static bool pdp11_rtx_costs (rtx, int, int, int *);\n+static bool pdp11_return_in_memory (tree, tree);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -84,6 +85,11 @@ static bool pdp11_rtx_costs (rtx, int, int, int *);\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS pdp11_rtx_costs\n \n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY pdp11_return_in_memory\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n@@ -1693,3 +1699,16 @@ output_addr_const_pdp11 (FILE *file, rtx x)\n       output_operand_lossage (\"invalid expression as operand\");\n     }\n }\n+\n+static bool\n+pdp11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  /* Should probably return DImode and DFmode in memory, lest\n+     we fill up all regs!\n+\n+     have to, else we crash - exception: maybe return result in \n+     ac0 if DFmode and FPU present - compatibility problem with\n+     libraries for non-floating point....  */\n+  return (TYPE_MODE (type) == DImode\n+\t  || (TYPE_MODE (type) == DFmode && ! TARGET_AC0));\n+}"}, {"sha": "f84e99f847e7a0f42b3c88e0047ae11edd5204ad", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e9daaf31d67f5b16b7c70013975536139ebf5f/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=04e9daaf31d67f5b16b7c70013975536139ebf5f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n-   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2004\n    Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -332,13 +332,6 @@ extern int target_flags;\n /* Register in which static-chain is passed to a function.  */\n /* ??? - i don't want to give up a reg for this! */\n #define STATIC_CHAIN_REGNUM 4\n-\n-/* Register in which address to store a structure value\n-   is passed to a function.  \n-   let's make it an invisible first argument!!! */\n-\n-#define STRUCT_VALUE 0\n-\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -562,18 +555,6 @@ maybe ac0 ? - as option someday! */\n \n #define FUNCTION_VALUE_REGNO_P(N) (((N) == 0) || (TARGET_AC0 && (N) == 8))\n \n-/* should probably return DImode and DFmode in memory,lest\n-   we fill up all regs!\n-\n- have to, else we crash - exception: maybe return result in \n- ac0 if DFmode and FPU present - compatibility problem with\n- libraries for non-floating point ...\n-*/\n-\n-#define RETURN_IN_MEMORY(TYPE)\t\\\n-  (TYPE_MODE(TYPE) == DImode || (TYPE_MODE(TYPE) == DFmode && ! TARGET_AC0))\n-\n-\n /* 1 if N is a possible register number for function argument passing.\n    - not used on pdp */\n "}]}