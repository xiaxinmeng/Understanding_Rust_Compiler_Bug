{"sha": "fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmZWVkZWI1YWVmZDc5ZDkwZmQ5YTJiMzMxZmUwOTU5NjVmZmJkMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-12T13:51:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-12T13:51:13Z"}, "message": "gimplify.c (oacc_default_clause): New.\n\n\tgcc/\n\t* gimplify.c (oacc_default_clause): New.\n\t(omp_notice_variable): Call it.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/data-default-1.c: New.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/default-1.c: New.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r230256", "tree": {"sha": "86db058605686d31d1e68578774a9ac54758d69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86db058605686d31d1e68578774a9ac54758d69e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/comments", "author": null, "committer": null, "parents": [{"sha": "8339a33e54150c0d643593c9358aa35f4c3ffd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8339a33e54150c0d643593c9358aa35f4c3ffd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8339a33e54150c0d643593c9358aa35f4c3ffd5e"}], "stats": {"total": 213, "additions": 206, "deletions": 7}, "files": [{"sha": "7089985c980f7e1893d54be5dd922320e761b717", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -1,3 +1,15 @@\n+2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tgcc/\n+\t* gimplify.c (oacc_default_clause): New.\n+\t(omp_notice_variable): Call it.\n+\n+\tgcc/testsuite/\n+\t* c-c++-common/goacc/data-default-1.c: New.\n+\n+\tlibgomp/\n+\t* testsuite/libgomp.oacc-c-c++-common/default-1.c: New.\n+\n 2015-11-12  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR tree-optimization/68305\n@@ -311,7 +323,7 @@\n 2015-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \n-\t* gcc/gimplify.c (enum  omp_region_type): Add ORT_ACC,\n+\t* gimplify.c (enum omp_region_type): Add ORT_ACC,\n \tORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.  Adjust ORT_NONE.\n \t(gimple_add_tmp_var): Add ORT_ACC checks.\n \t(gimplify_var_or_parm_decl): Likewise.\n@@ -327,7 +339,7 @@\n \t(gimplify_oacc_cache): Specify ORT_ACC.\n \t(gimplify_omp_workshare): Adjust OpenACC region types.\n \t(gimplify_omp_target_update): Likewise.\n-\t* gcc/omp-low.c (scan_sharing_clauses): Remove Openacc\n+\t* omp-low.c (scan_sharing_clauses): Remove Openacc\n \tfirstprivate sorry.\n \t(lower-rec_input_clauses): Don't handle openacc firstprivate\n \treferences here."}, {"sha": "74d8765950fd7dfc7e92312f3a85efaad5d4a18f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -5900,6 +5900,60 @@ omp_default_clause (struct gimplify_omp_ctx *ctx, tree decl,\n   return flags;\n }\n \n+\n+/* Determine outer default flags for DECL mentioned in an OACC region\n+   but not declared in an enclosing clause.  */\n+\n+static unsigned\n+oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n+{\n+  const char *rkind;\n+\n+  switch (ctx->region_type)\n+    {\n+    default:\n+      gcc_unreachable ();\n+\n+    case ORT_ACC_KERNELS:\n+      /* Everything under kernels are default 'present_or_copy'.  */\n+      flags |= GOVD_MAP;\n+      rkind = \"kernels\";\n+      break;\n+\n+    case ORT_ACC_PARALLEL:\n+      {\n+\ttree type = TREE_TYPE (decl);\n+\n+\tif (TREE_CODE (type) == REFERENCE_TYPE\n+\t    || POINTER_TYPE_P (type))\n+\t  type = TREE_TYPE (type);\n+\n+\tif (AGGREGATE_TYPE_P (type))\n+\t  /* Aggregates default to 'present_or_copy'.  */\n+\t  flags |= GOVD_MAP;\n+\telse\n+\t  /* Scalars default to 'firstprivate'.  */\n+\t  flags |= GOVD_FIRSTPRIVATE;\n+\trkind = \"parallel\";\n+      }\n+      break;\n+    }\n+\n+  if (DECL_ARTIFICIAL (decl))\n+    ; /* We can get compiler-generated decls, and should not complain\n+\t about them.  */\n+  else if (ctx->default_kind == OMP_CLAUSE_DEFAULT_NONE)\n+    {\n+      error (\"%qE not specified in enclosing OpenACC %s construct\",\n+\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)), rkind);\n+      error_at (ctx->location, \"enclosing OpenACC %s construct\", rkind);\n+    }\n+  else\n+    gcc_checking_assert (ctx->default_kind == OMP_CLAUSE_DEFAULT_SHARED);\n+\n+  return flags;\n+}\n+\n /* Record the fact that DECL was used within the OMP context CTX.\n    IN_CODE is true when real code uses DECL, and false when we should\n    merely emit default(none) errors.  Return true if DECL is going to\n@@ -6023,7 +6077,12 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t\tnflags |= GOVD_MAP | GOVD_EXPLICIT;\n \t      }\n \t    else if (nflags == flags)\n-\t      nflags |= GOVD_MAP;\n+\t      {\n+\t\tif ((ctx->region_type & ORT_ACC) != 0)\n+\t\t  nflags = oacc_default_clause (ctx, decl, flags);\n+\t\telse\n+\t\t  nflags |= GOVD_MAP;\n+\t      }\n \t  }\n \tfound_outer:\n \t  omp_add_variable (ctx, decl, nflags);"}, {"sha": "a7395cf4f379d699f3a7821d0f1cf13e37503b61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -1,3 +1,7 @@\n+2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-c++-common/goacc/data-default-1.c: New.\n+\n 2015-11-12  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/pr67789.c: Skip on AIX and Darwin.\n@@ -82,10 +86,6 @@\n \n \t* gcc.dg/tree-ssa/pr68234.c: New testcase. \n \n-2015-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* gcc.dg/goacc/nvptx-opt-1.c: New test.\n-\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* gcc.target/i386/mask-pack.c: New test."}, {"sha": "0741abca4eac4885ab48c7df4b523f11174354ab", "filename": "gcc/testsuite/c-c++-common/goacc/data-default-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-default-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-default-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-default-1.c?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+\n+int main ()\n+{\n+  int n = 2;\n+  int ary[2];\n+  \n+#pragma acc parallel default (none) /* { dg-message \"parallel construct\" 2 } */\n+  {\n+    ary[0] /* { dg-error \"not specified in enclosing\" } */\n+      = n; /* { dg-error \"not specified in enclosing\" } */\n+  }\n+\n+#pragma acc kernels default (none) /* { dg-message \"kernels construct\" 2 } */\n+  {\n+    ary[0] /* { dg-error \"not specified in enclosing\" } */\n+      = n; /* { dg-error \"not specified in enclosing\" } */\n+  }\n+\n+#pragma acc data copy (ary, n)\n+  {\n+#pragma acc parallel default (none)\n+    {\n+      ary[0]\n+\t= n;\n+    }\n+\n+#pragma acc kernels default (none)\n+    {\n+      ary[0]\n+\t= n;\n+    }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "b4f708e5e462fda47a0f039eda183b8a984dbf53", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -1,3 +1,7 @@\n+2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/default-1.c: New.\n+\n 2015-11-1  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: New."}, {"sha": "1ac0b9587b9c5f6a1d728157f9cd2f542351595f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/default-1.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffeedeb5aefd79d90fd9a2b331fe095965ffbd2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c?ref=fffeedeb5aefd79d90fd9a2b331fe095965ffbd2", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+\n+#include  <openacc.h>\n+\n+int test_parallel ()\n+{\n+  int ok = 1;\n+  int val = 2;\n+  int ary[32];\n+  int ondev = 0;\n+\n+  for (int i = 0; i < 32; i++)\n+    ary[i] = ~0;\n+\n+  /* val defaults to firstprivate, ary defaults to copy.  */\n+#pragma acc parallel num_gangs (32) copy (ok) copy(ondev)\n+  {\n+    ondev = acc_on_device (acc_device_not_host);\n+#pragma acc loop gang(static:1)\n+    for (unsigned i = 0; i < 32; i++)\n+      {\n+\tif (val != 2)\n+\t  ok = 0;\n+\tval += i;\n+\tary[i] = val;\n+      }\n+  }\n+\n+  if (ondev)\n+    {\n+      if (!ok)\n+\treturn 1;\n+      if (val != 2)\n+\treturn 1;\n+\n+      for (int i = 0; i < 32; i++)\n+\tif (ary[i] != 2 + i)\n+\t  return 1;\n+    }\n+  \n+  return 0;\n+}\n+\n+int test_kernels ()\n+{\n+  int val = 2;\n+  int ary[32];\n+  int ondev = 0;\n+\n+  for (int i = 0; i < 32; i++)\n+    ary[i] = ~0;\n+\n+  /* val defaults to copy, ary defaults to copy.  */\n+#pragma acc kernels copy(ondev)\n+  {\n+    ondev = acc_on_device (acc_device_not_host);\n+#pragma acc loop \n+    for (unsigned i = 0; i < 32; i++)\n+      {\n+\tary[i] = val;\n+\tval++;\n+      }\n+  }\n+\n+  if (ondev)\n+    {\n+      if (val != 2 + 32)\n+\treturn 1;\n+\n+      for (int i = 0; i < 32; i++)\n+\tif (ary[i] != 2 + i)\n+\t  return 1;\n+    }\n+  \n+  return 0;\n+}\n+\n+int main ()\n+{\n+  if (test_parallel ())\n+    return 1;\n+\n+  if (test_kernels ())\n+    return 1;\n+\n+  return 0;\n+}"}]}