{"sha": "db630423a97ec6690a8eb0e5c3cb186c91e3740d", "node_id": "C_kwDOANBUbNoAKGRiNjMwNDIzYTk3ZWM2NjkwYThlYjBlNWMzY2IxODZjOTFlMzc0MGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-26T07:52:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-26T07:52:02Z"}, "message": "fortran: Expand ieee_arithmetic module's ieee_class inline [PR106579]\n\nThe following patch expands IEEE_CLASS inline in the FE, using the\n__builtin_fpclassify, __builtin_signbit and the new __builtin_issignaling\nbuiltins.\n\n2022-08-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR fortran/106579\ngcc/fortran/\n\t* f95-lang.cc (gfc_init_builtin_functions): Initialize\n\tBUILT_IN_FPCLASSIFY.\n\t* libgfortran.h (IEEE_OTHER_VALUE, IEEE_SIGNALING_NAN,\n\tIEEE_QUIET_NAN, IEEE_NEGATIVE_INF, IEEE_NEGATIVE_NORMAL,\n\tIEEE_NEGATIVE_DENORMAL, IEEE_NEGATIVE_SUBNORMAL,\n\tIEEE_NEGATIVE_ZERO, IEEE_POSITIVE_ZERO, IEEE_POSITIVE_DENORMAL,\n\tIEEE_POSITIVE_SUBNORMAL, IEEE_POSITIVE_NORMAL, IEEE_POSITIVE_INF):\n\tNew enum.\n\t* trans-intrinsic.cc (conv_intrinsic_ieee_class): New function.\n\t(gfc_conv_ieee_arithmetic_function): Handle ieee_class.\nlibgfortran/\n\t* ieee/ieee_helper.c (IEEE_OTHER_VALUE, IEEE_SIGNALING_NAN,\n\tIEEE_QUIET_NAN, IEEE_NEGATIVE_INF, IEEE_NEGATIVE_NORMAL,\n\tIEEE_NEGATIVE_DENORMAL, IEEE_NEGATIVE_SUBNORMAL,\n\tIEEE_NEGATIVE_ZERO, IEEE_POSITIVE_ZERO, IEEE_POSITIVE_DENORMAL,\n\tIEEE_POSITIVE_SUBNORMAL, IEEE_POSITIVE_NORMAL, IEEE_POSITIVE_INF):\n\tMove to gcc/fortran/libgfortran.h.", "tree": {"sha": "39c275211c214421468c0e60ff661f72e8210db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c275211c214421468c0e60ff661f72e8210db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db630423a97ec6690a8eb0e5c3cb186c91e3740d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db630423a97ec6690a8eb0e5c3cb186c91e3740d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db630423a97ec6690a8eb0e5c3cb186c91e3740d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db630423a97ec6690a8eb0e5c3cb186c91e3740d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387e6f1570816915f8d198eec71c666439f41814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387e6f1570816915f8d198eec71c666439f41814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387e6f1570816915f8d198eec71c666439f41814"}], "stats": {"total": 122, "additions": 101, "deletions": 21}, "files": [{"sha": "10ac8a95b87589ac1da62201e8f946ea10d03c69", "filename": "gcc/fortran/f95-lang.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Ff95-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Ff95-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.cc?ref=db630423a97ec6690a8eb0e5c3cb186c91e3740d", "patch": "@@ -1017,8 +1017,9 @@ gfc_init_builtin_functions (void)\n \t\t      \"__builtin_issignaling\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_signbit\", ftype, BUILT_IN_SIGNBIT,\n \t\t      \"__builtin_signbit\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_fpclassify\", ftype, BUILT_IN_FPCLASSIFY,\n+\t\t      \"__builtin_fpclassify\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n-  ftype = build_function_type (integer_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_isless\", ftype, BUILT_IN_ISLESS,\n \t\t      \"__builtin_isless\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_islessequal\", ftype, BUILT_IN_ISLESSEQUAL,"}, {"sha": "ef06194eeb16bdadc4a64171055037e5e4a6502b", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=db630423a97ec6690a8eb0e5c3cb186c91e3740d", "patch": "@@ -187,3 +187,23 @@ typedef enum\n   BT_ASSUMED, BT_UNION, BT_BOZ\n }\n bt;\n+\n+/* Enumeration of the possible floating-point types. These values\n+   correspond to the hidden arguments of the IEEE_CLASS_TYPE\n+   derived-type of IEEE_ARITHMETIC.  */\n+\n+enum {\n+  IEEE_OTHER_VALUE = 0,\n+  IEEE_SIGNALING_NAN,\n+  IEEE_QUIET_NAN,\n+  IEEE_NEGATIVE_INF,\n+  IEEE_NEGATIVE_NORMAL,\n+  IEEE_NEGATIVE_DENORMAL,\n+  IEEE_NEGATIVE_SUBNORMAL = IEEE_NEGATIVE_DENORMAL,\n+  IEEE_NEGATIVE_ZERO,\n+  IEEE_POSITIVE_ZERO,\n+  IEEE_POSITIVE_DENORMAL,\n+  IEEE_POSITIVE_SUBNORMAL = IEEE_POSITIVE_DENORMAL,\n+  IEEE_POSITIVE_NORMAL,\n+  IEEE_POSITIVE_INF\n+};"}, {"sha": "1c45f75a54d726a2649320fac237b3eb37cfda65", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db630423a97ec6690a8eb0e5c3cb186c91e3740d/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=db630423a97ec6690a8eb0e5c3cb186c91e3740d", "patch": "@@ -10013,6 +10013,83 @@ conv_intrinsic_ieee_copy_sign (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Generate code for IEEE_CLASS.  */\n+\n+static void\n+conv_intrinsic_ieee_class (gfc_se *se, gfc_expr *expr)\n+{\n+  tree arg, c, t1, t2, t3, t4;\n+\n+  /* Convert arg, evaluate it only once.  */\n+  conv_ieee_function_args (se, expr, &arg, 1);\n+  arg = gfc_evaluate_now (arg, &se->pre);\n+\n+  c = build_call_expr_loc (input_location,\n+\t\t\t   builtin_decl_explicit (BUILT_IN_FPCLASSIFY), 6,\n+\t\t\t   build_int_cst (integer_type_node, IEEE_QUIET_NAN),\n+\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_POSITIVE_INF),\n+\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_POSITIVE_NORMAL),\n+\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_POSITIVE_DENORMAL),\n+\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_POSITIVE_ZERO),\n+\t\t\t   arg);\n+  c = gfc_evaluate_now (c, &se->pre);\n+  t1 = fold_build2_loc (input_location, EQ_EXPR, logical_type_node,\n+\t\t\tc, build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_QUIET_NAN));\n+  t2 = build_call_expr_loc (input_location,\n+\t\t\t    builtin_decl_explicit (BUILT_IN_ISSIGNALING), 1,\n+\t\t\t    arg);\n+  t2 = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n+\t\t\tt2, build_zero_cst (TREE_TYPE (t2)));\n+  t1 = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\tlogical_type_node, t1, t2);\n+  t3 = fold_build2_loc (input_location, GE_EXPR, logical_type_node,\n+\t\t\tc, build_int_cst (integer_type_node,\n+\t\t\t\t\t  IEEE_POSITIVE_ZERO));\n+  t4 = build_call_expr_loc (input_location,\n+\t\t\t    builtin_decl_explicit (BUILT_IN_SIGNBIT), 1,\n+\t\t\t    arg);\n+  t4 = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n+\t\t\tt4, build_zero_cst (TREE_TYPE (t4)));\n+  t3 = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\tlogical_type_node, t3, t4);\n+  int s = IEEE_NEGATIVE_ZERO + IEEE_POSITIVE_ZERO;\n+  gcc_assert (IEEE_NEGATIVE_INF == s - IEEE_POSITIVE_INF);\n+  gcc_assert (IEEE_NEGATIVE_NORMAL == s - IEEE_POSITIVE_NORMAL);\n+  gcc_assert (IEEE_NEGATIVE_DENORMAL == s - IEEE_POSITIVE_DENORMAL);\n+  gcc_assert (IEEE_NEGATIVE_SUBNORMAL == s - IEEE_POSITIVE_SUBNORMAL);\n+  gcc_assert (IEEE_NEGATIVE_ZERO == s - IEEE_POSITIVE_ZERO);\n+  t4 = fold_build2_loc (input_location, MINUS_EXPR, TREE_TYPE (c),\n+\t\t\tbuild_int_cst (TREE_TYPE (c), s), c);\n+  t3 = fold_build3_loc (input_location, COND_EXPR, TREE_TYPE (c),\n+\t\t\tt3, t4, c);\n+  t1 = fold_build3_loc (input_location, COND_EXPR, TREE_TYPE (c), t1,\n+\t\t\tbuild_int_cst (TREE_TYPE (c), IEEE_SIGNALING_NAN),\n+\t\t\tt3);\n+  tree type = gfc_typenode_for_spec (&expr->ts);\n+  /* Perform a quick sanity check that the return type is\n+     IEEE_CLASS_TYPE derived type defined in\n+     libgfortran/ieee/ieee_arithmetic.F90\n+     Primarily check that it is a derived type with a single\n+     member in it.  */\n+  gcc_assert (TREE_CODE (type) == RECORD_TYPE);\n+  tree field = NULL_TREE;\n+  for (tree f = TYPE_FIELDS (type); f != NULL_TREE; f = DECL_CHAIN (f))\n+    if (TREE_CODE (f) == FIELD_DECL)\n+      {\n+\tgcc_assert (field == NULL_TREE);\n+\tfield = f;\n+      }\n+  gcc_assert (field);\n+  t1 = fold_convert (TREE_TYPE (field), t1);\n+  se->expr = build_constructor_single (type, field, t1);\n+}\n+\n+\n /* Generate code for an intrinsic function from the IEEE_ARITHMETIC\n    module.  */\n \n@@ -10043,6 +10120,8 @@ gfc_conv_ieee_arithmetic_function (gfc_se * se, gfc_expr * expr)\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_LOGB);\n   else if (startswith (name, \"_gfortran_ieee_rint\"))\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_RINT);\n+  else if (startswith (name, \"ieee_class_\") && ISDIGIT (name[11]))\n+    conv_intrinsic_ieee_class (se, expr);\n   else\n     /* It is not among the functions we translate directly.  We return\n        false, so a library function call is emitted.  */"}, {"sha": "c5871b519f9494fed8ea349e4a298713ebebc20a", "filename": "libgfortran/ieee/ieee_helper.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db630423a97ec6690a8eb0e5c3cb186c91e3740d/libgfortran%2Fieee%2Fieee_helper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db630423a97ec6690a8eb0e5c3cb186c91e3740d/libgfortran%2Fieee%2Fieee_helper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_helper.c?ref=db630423a97ec6690a8eb0e5c3cb186c91e3740d", "patch": "@@ -44,26 +44,6 @@ extern int ieee_class_helper_16 (GFC_REAL_16 *);\n internal_proto(ieee_class_helper_16);\n #endif\n \n-/* Enumeration of the possible floating-point types. These values\n-   correspond to the hidden arguments of the IEEE_CLASS_TYPE\n-   derived-type of IEEE_ARITHMETIC.  */\n-\n-enum {\n-  IEEE_OTHER_VALUE = 0,\n-  IEEE_SIGNALING_NAN,\n-  IEEE_QUIET_NAN,\n-  IEEE_NEGATIVE_INF,\n-  IEEE_NEGATIVE_NORMAL,\n-  IEEE_NEGATIVE_DENORMAL,\n-  IEEE_NEGATIVE_SUBNORMAL = IEEE_NEGATIVE_DENORMAL,\n-  IEEE_NEGATIVE_ZERO,\n-  IEEE_POSITIVE_ZERO,\n-  IEEE_POSITIVE_DENORMAL,\n-  IEEE_POSITIVE_SUBNORMAL = IEEE_POSITIVE_DENORMAL,\n-  IEEE_POSITIVE_NORMAL,\n-  IEEE_POSITIVE_INF\n-};\n-\n \n #define CLASSMACRO(TYPE) \\\n   int ieee_class_helper_ ## TYPE (GFC_REAL_ ## TYPE *value) \\"}]}