{"sha": "4c81e9461822a04417407714c784e21766942de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MWU5NDYxODIyYTA0NDE3NDA3NzE0Yzc4NGUyMTc2Njk0MmRlMQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-11-11T02:34:56Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-11-11T02:34:56Z"}, "message": "Misc. fixes for -mpowerpc64 vesion darwin.\n\nReviewed by David Edelsohn.\n\nFrom-SVN: r73438", "tree": {"sha": "0f01ec684470a65d541285561f04cdc0ca4b3ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f01ec684470a65d541285561f04cdc0ca4b3ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c81e9461822a04417407714c784e21766942de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81e9461822a04417407714c784e21766942de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c81e9461822a04417407714c784e21766942de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81e9461822a04417407714c784e21766942de1/comments", "author": null, "committer": null, "parents": [{"sha": "84083f51be86a2fdcca225bdb18e4de9d64f35a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84083f51be86a2fdcca225bdb18e4de9d64f35a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84083f51be86a2fdcca225bdb18e4de9d64f35a1"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "4c784ab2d56dc6a6d5be155f6e0d70083479e13e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81e9461822a04417407714c784e21766942de1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81e9461822a04417407714c784e21766942de1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4c81e9461822a04417407714c784e21766942de1", "patch": "@@ -235,6 +235,7 @@ static bool legitimate_small_data_p (enum machine_mode, rtx);\n static bool legitimate_offset_address_p (enum machine_mode, rtx, int);\n static bool legitimate_indexed_address_p (rtx, int);\n static bool legitimate_indirect_address_p (rtx, int);\n+static bool macho_lo_sum_memory_operand (rtx x, enum machine_mode mode);\n static bool legitimate_lo_sum_address_p (enum machine_mode, rtx, int);\n static struct machine_function * rs6000_init_machine_status (void);\n static bool rs6000_assemble_integer (rtx, unsigned int, int);\n@@ -2145,6 +2146,7 @@ reg_or_mem_operand (rtx op, enum machine_mode mode)\n {\n   return (gpc_reg_operand (op, mode)\n \t  || memory_operand (op, mode)\n+\t  || macho_lo_sum_memory_operand (op, mode)\n \t  || volatile_mem_operand (op, mode));\n }\n \n@@ -2486,6 +2488,25 @@ legitimate_indirect_address_p (rtx x, int strict)\n   return GET_CODE (x) == REG && INT_REG_OK_FOR_BASE_P (x, strict);\n }\n \n+static bool\n+macho_lo_sum_memory_operand (rtx x, enum machine_mode mode)\n+{\n+    if (!TARGET_MACHO || !flag_pic\n+        || mode != SImode || GET_CODE(x) != MEM)\n+      return false;\n+    x = XEXP (x, 0);\n+\n+  if (GET_CODE (x) != LO_SUM)\n+    return false;\n+  if (GET_CODE (XEXP (x, 0)) != REG)\n+    return false;\n+  if (!INT_REG_OK_FOR_BASE_P (XEXP (x, 0), 0))\n+    return false;\n+  x = XEXP (x, 1);\n+\n+  return CONSTANT_P (x);\n+}\n+\n static bool\n legitimate_lo_sum_address_p (enum machine_mode mode, rtx x, int strict)\n {\n@@ -3211,12 +3232,12 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n       HOST_WIDE_INT ud1, ud2, ud3, ud4;\n \n       ud1 = c1 & 0xffff;\n-      ud2 = (c1 & 0xffff0000) >> 16;\n+      ud2 = (unsigned HOST_WIDE_INT)(c1 & 0xffff0000) >> 16;\n #if HOST_BITS_PER_WIDE_INT >= 64\n       c2 = c1 >> 32;\n #endif\n       ud3 = c2 & 0xffff;\n-      ud4 = (c2 & 0xffff0000) >> 16;\n+      ud4 = (unsigned HOST_WIDE_INT)(c2 & 0xffff0000) >> 16;\n \n       if ((ud4 == 0xffff && ud3 == 0xffff && ud2 == 0xffff && (ud1 & 0x8000)) \n \t  || (ud4 == 0 && ud3 == 0 && ud2 == 0 && ! (ud1 & 0x8000)))"}, {"sha": "37d851b3c4f2cb552e27c410ae858ef3f4f49f42", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81e9461822a04417407714c784e21766942de1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81e9461822a04417407714c784e21766942de1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4c81e9461822a04417407714c784e21766942de1", "patch": "@@ -2276,6 +2276,9 @@ do {\t\t\t\t\t\t\t\t\\\n    between pointers and any other objects of this machine mode.  */\n #define Pmode (TARGET_32BIT ? SImode : DImode)\n \n+/* Supply definition of STACK_SIZE_MODE for allocate_dynamic_stack_space. */\n+#define STACK_SIZE_MODE (TARGET_32BIT ? SImode : DImode)\n+\n /* Mode of a function address in a call instruction (for indexing purposes).\n    Doesn't matter on RS/6000.  */\n #define FUNCTION_MODE SImode"}]}