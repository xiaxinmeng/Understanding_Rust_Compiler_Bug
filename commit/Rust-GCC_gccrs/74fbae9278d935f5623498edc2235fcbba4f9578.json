{"sha": "74fbae9278d935f5623498edc2235fcbba4f9578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmYmFlOTI3OGQ5MzVmNTYyMzQ5OGVkYzIyMzVmY2JiYTRmOTU3OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-12-09T09:38:53Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-12-09T09:38:53Z"}, "message": "Fix newly introduced memory leak in\n\n\t* hash-traits.h (struct typed_delete_remove): New function.\n\t(typed_delete_remove ::remove): Likewise.\n\t* tree-ssa-loop-ivopts.c (struct iv_common_cand): Replace\n\tauto_vec with vec.\n\t(record_common_cand): Replace XNEW with operator new.\n\nFrom-SVN: r231448", "tree": {"sha": "fb7947be8a3f4d0a15355104b20479f9e247ed09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7947be8a3f4d0a15355104b20479f9e247ed09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74fbae9278d935f5623498edc2235fcbba4f9578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fbae9278d935f5623498edc2235fcbba4f9578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fbae9278d935f5623498edc2235fcbba4f9578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fbae9278d935f5623498edc2235fcbba4f9578/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2b04f0b7beb7d153e31fb956e4580dbf6c99c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b04f0b7beb7d153e31fb956e4580dbf6c99c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b04f0b7beb7d153e31fb956e4580dbf6c99c8c"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "aff215e889da737a87805cf0691dcff32800d0fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74fbae9278d935f5623498edc2235fcbba4f9578", "patch": "@@ -1,3 +1,11 @@\n+2015-12-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* hash-traits.h (struct typed_delete_remove): New function.\n+\t(typed_delete_remove ::remove): Likewise.\n+\t* tree-ssa-loop-ivopts.c (struct iv_common_cand): Replace\n+\tauto_vec with vec.\n+\t(record_common_cand): Replace XNEW with operator new.\n+\n 2015-12-09  Martin Liska  <mliska@suse.cz>\n \n \t* tree-if-conv.c (ifcvt_local_dce): Replace vec with auto_vec."}, {"sha": "3997eded1276b6ec541c3ade0225c65e57cd6eb0", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=74fbae9278d935f5623498edc2235fcbba4f9578", "patch": "@@ -38,6 +38,23 @@ typed_free_remove <Type>::remove (Type *p)\n   free (p);\n }\n \n+/* Helpful type for removing with delete.  */\n+\n+template <typename Type>\n+struct typed_delete_remove\n+{\n+  static inline void remove (Type *p);\n+};\n+\n+\n+/* Remove with delete.  */\n+\n+template <typename Type>\n+inline void\n+typed_delete_remove <Type>::remove (Type *p)\n+{\n+  delete p;\n+}\n \n /* Helpful type for a no-op remove.  */\n \n@@ -260,6 +277,12 @@ struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};\n template <typename T>\n struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};\n \n+/* Traits for pointer elements that should be freed via delete operand when an\n+   element is deleted.  */\n+\n+template <typename T>\n+struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};\n+\n /* Traits for elements that point to gc memory.  The pointed-to data\n    must be kept across collections.  */\n "}, {"sha": "d7a0e9eaf0cd7aba7b59723c2ce94495f56b9222", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fbae9278d935f5623498edc2235fcbba4f9578/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=74fbae9278d935f5623498edc2235fcbba4f9578", "patch": "@@ -253,13 +253,13 @@ struct iv_common_cand\n   tree base;\n   tree step;\n   /* IV uses from which this common candidate is derived.  */\n-  vec<iv_use *> uses;\n+  auto_vec<iv_use *> uses;\n   hashval_t hash;\n };\n \n /* Hashtable helpers.  */\n \n-struct iv_common_cand_hasher : free_ptr_hash <iv_common_cand>\n+struct iv_common_cand_hasher : delete_ptr_hash <iv_common_cand>\n {\n   static inline hashval_t hash (const iv_common_cand *);\n   static inline bool equal (const iv_common_cand *, const iv_common_cand *);\n@@ -3127,7 +3127,7 @@ record_common_cand (struct ivopts_data *data, tree base,\n   slot = data->iv_common_cand_tab->find_slot (&ent, INSERT);\n   if (*slot == NULL)\n     {\n-      *slot = XNEW (struct iv_common_cand);\n+      *slot = new iv_common_cand ();\n       (*slot)->base = base;\n       (*slot)->step = step;\n       (*slot)->uses.create (8);"}]}