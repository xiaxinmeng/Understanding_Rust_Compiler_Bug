{"sha": "e51102b29c1489ded25723b8149f44a32ff10696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxMTAyYjI5YzE0ODlkZWQyNTcyM2I4MTQ5ZjQ0YTMyZmYxMDY5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-12T13:21:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-12T13:21:21Z"}, "message": "[multiple changes]\n\n2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sinfo.ads: Minor reformatting.\n\n2017-01-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_util.adb, exp_util.ads, einfo.ads: Minor typo fixes and\n\treformatting.\n\n2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Anonymous_Context): Add new\n\tvariable Definite. Create a local object and pass its 'Access to the\n\tBIP function when the result type is either definite or it does not\n\trequire any finalization or secondary stack management.\n\nFrom-SVN: r244353", "tree": {"sha": "90f8816da7336b1f7507519e3ece2745cda47124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f8816da7336b1f7507519e3ece2745cda47124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e51102b29c1489ded25723b8149f44a32ff10696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51102b29c1489ded25723b8149f44a32ff10696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51102b29c1489ded25723b8149f44a32ff10696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51102b29c1489ded25723b8149f44a32ff10696/comments", "author": null, "committer": null, "parents": [{"sha": "6e759c2a0f950ce535e7907db39ddc3866782ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e759c2a0f950ce535e7907db39ddc3866782ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e759c2a0f950ce535e7907db39ddc3866782ade"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "37066f1d456e68adc826dacd69539c9696fdfd32", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -1,3 +1,19 @@\n+2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sinfo.ads: Minor reformatting.\n+\n+2017-01-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb, exp_util.ads, einfo.ads: Minor typo fixes and\n+\treformatting.\n+\n+2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Anonymous_Context): Add new\n+\tvariable Definite. Create a local object and pass its 'Access to the\n+\tBIP function when the result type is either definite or it does not\n+\trequire any finalization or secondary stack management.\n+\n 2017-01-12  Bob Duff  <duff@adacore.com>\n \n \t* contracts.adb, einfo.adb, errout.adb, exp_attr.adb,"}, {"sha": "b9354311e64679e8985be0be8633e2f5d548594e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -927,7 +927,7 @@ package Einfo is\n --       when the type is subject to pragma Default_Initial_Condition (DIC), or\n --       when the type inherits a DIC pragma from a parent type. Points to the\n --       entity of a procedure which takes a single argument of the given type\n---       and verifies the assertion expression of the DIC pragma at runtime.\n+--       and verifies the assertion expression of the DIC pragma at run time.\n \n --       Note: the reason this is marked as a synthesized attribute is that the\n --       way this is stored is as an element of the Subprograms_For_Type field.\n@@ -1760,7 +1760,7 @@ package Einfo is\n --       Defined in functions and generic functions. Set if there is one or\n --       more missing return statements in the function. This is used to\n --       control wrapping of the body in Exp_Ch6 to ensure that the program\n---       error exception is correctly raised in this case at runtime.\n+--       error exception is correctly raised in this case at run time.\n \n --    Has_Nested_Block_With_Handler (Flag101)\n --       Defined in scope entities. Set if there is a nested block within the\n@@ -2370,7 +2370,7 @@ package Einfo is\n --       Defined in record types and subtypes. Set if the type was created\n --       by the expander to represent a task or protected type. For every\n --       concurrent type, such as record type is constructed, and task and\n---       protected objects are instances of this record type at runtime\n+--       protected objects are instances of this record type at run time\n --       (The backend will replace declarations of the concurrent type using\n --       the declarations of the corresponding record type). See Exp_Ch9 for\n --       further details.\n@@ -2432,7 +2432,7 @@ package Einfo is\n --    Is_DIC_Procedure (Flag132)\n --       Defined in functions and procedures. Set for a generated procedure\n --       which verifies the assumption of pragma Default_Initial_Condition at\n---       runtime.\n+--       run time.\n \n --    Is_Discrete_Or_Fixed_Point_Type (synthesized)\n --       Applies to all entities, true for all discrete types and subtypes\n@@ -3956,7 +3956,7 @@ package Einfo is\n --       the expanded N_Procedure_Call_Statement node for this call. It\n --       is used for Import/Export_Exception processing to modify the\n --       register call to make appropriate entries in the special tables\n---       used for handling these pragmas at runtime.\n+--       used for handling these pragmas at run time.\n \n --    Related_Array_Object (Node25)\n --       Defined in array types and subtypes. Used only for the base type"}, {"sha": "ff17867ff1e106fb7a52e913a01f528d1b974c6f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -7529,6 +7529,14 @@ package body Exp_Ch6 is\n       Return_Obj_Id   : Entity_Id;\n       Return_Obj_Decl : Entity_Id;\n \n+      Definite : Boolean;\n+      --  True if result subtype is definite, or has a size that does not\n+      --  require secondary stack usage (i.e. no variant part or components\n+      --  whose type depends on discriminants). In particular, untagged types\n+      --  with only access discriminants do not require secondary stack use.\n+      --  Note that if the return type is tagged we must always use the sec.\n+      --  stack because the call may dispatch on result.\n+\n    begin\n       --  Step past qualification, type conversion (which can occur in actual\n       --  parameter contexts), and unchecked conversion (which can occur in\n@@ -7568,6 +7576,10 @@ package body Exp_Ch6 is\n       end if;\n \n       Result_Subt := Etype (Function_Id);\n+      Definite :=\n+        (Is_Definite_Subtype (Underlying_Type (Result_Subt))\n+             and then not Is_Tagged_Type (Result_Subt))\n+          or else not Requires_Transient_Scope (Underlying_Type (Result_Subt));\n \n       --  If the build-in-place function returns a controlled object, then the\n       --  object needs to be finalized immediately after the context. Since\n@@ -7606,10 +7618,10 @@ package body Exp_Ch6 is\n             Analyze (Function_Call);\n          end;\n \n-      --  When the result subtype is constrained, an object of the subtype is\n+      --  When the result subtype is definite, an object of the subtype is\n       --  declared and an access value designating it is passed as an actual.\n \n-      elsif Is_Constrained (Underlying_Type (Result_Subt)) then\n+      elsif Definite then\n \n          --  Create a temporary object to hold the function result\n "}, {"sha": "7791ad46f3791ded07cea8b984393078603a850c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -1102,7 +1102,7 @@ package body Exp_Util is\n \n                --  In SPARK mode, reject an inherited condition for an\n                --  inherited operation if it contains a call to an overriding\n-               --  operation, because this implies that the pre/postcondition\n+               --  operation, because this implies that the pre/postconditions\n                --  of the inherited operation have changed silently.\n \n                elsif SPARK_Mode = On\n@@ -1206,7 +1206,7 @@ package body Exp_Util is\n          Deriv_Typ : Entity_Id;\n          Stmts     : in out List_Id);\n       --  Add a runtime check to verify the assertion expression of inherited\n-      --  pragma DIC_Prag. Par_Typ is parent type which is also the owner of\n+      --  pragma DIC_Prag. Par_Typ is parent type, which is also the owner of\n       --  the DIC pragma. Deriv_Typ is the derived type inheriting the DIC\n       --  pragma. All generated code is added to list Stmts.\n \n@@ -1454,7 +1454,7 @@ package body Exp_Util is\n       begin\n          Expr := New_Copy_Tree (DIC_Expr);\n \n-         --  Perform the following substituion:\n+         --  Perform the following substitution:\n \n          --    * Replace the current instance of DIC_Typ with a reference to\n          --    the _object formal parameter of the DIC procedure.\n@@ -2056,7 +2056,7 @@ package body Exp_Util is\n       pragma Assert (Present (Typ_Decl));\n \n       --  Create the formal parameter which emulates the variable-like behavior\n-      --  of the current type instance.\n+      --  of the type's current instance.\n \n       Obj_Id := Make_Defining_Identifier (Loc, Chars => Name_uObject);\n \n@@ -2083,7 +2083,7 @@ package body Exp_Util is\n                     New_Occurrence_Of (Work_Typ, Loc)))));\n \n       --  The declaration should not be inserted into the tree when the context\n-      --  is ASIS, GNATprove or a generic unit because it is not part of the\n+      --  is ASIS, GNATprove, or a generic unit because it is not part of the\n       --  template.\n \n       if ASIS_Mode or GNATprove_Mode or Inside_A_Generic then"}, {"sha": "584c2df6ba686e61b9c39d2d6d904ceb18e2b4f0", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -254,11 +254,11 @@ package Exp_Util is\n       Adjust_Sloc : Boolean);\n    --  Build the expression for an inherited class-wide condition. Prag is\n    --  the pragma constructed from the corresponding aspect of the parent\n-   --  subprogram, and Subp is the overriding operation and Par_Subp is\n+   --  subprogram, and Subp is the overriding operation, and Par_Subp is\n    --  the overridden operation that has the condition. Adjust_Sloc is True\n    --  when the sloc of nodes traversed should be adjusted for the inherited\n    --  pragma. The routine is also called to check whether an inherited\n-   --  operation that is not overridden but has inherited conditions need\n+   --  operation that is not overridden but has inherited conditions needs\n    --  a wrapper, because the inherited condition includes calls to other\n    --  primitives that have been overridden. In that case the first argument\n    --  is the expression of the original class-wide aspect. In SPARK_Mode, such\n@@ -274,11 +274,11 @@ package Exp_Util is\n \n    procedure Build_DIC_Procedure_Body (Typ : Entity_Id);\n    --  Create the body of the procedure which verifies the assertion expression\n-   --  of pragma Default_Initial_Condition at runtime.\n+   --  of pragma Default_Initial_Condition at run time.\n \n    procedure Build_DIC_Procedure_Declaration (Typ : Entity_Id);\n    --  Create the declaration of the procedure which verifies the assertion\n-   --  expression of pragma Default_Initial_Condition at runtime.\n+   --  expression of pragma Default_Initial_Condition at run time.\n \n    procedure Build_Procedure_Form (N : Node_Id);\n    --  Create a procedure declaration which emulates the behavior of a function"}, {"sha": "6c5472a1d9c0ef99fdf9df1febcf65dc0413be69", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51102b29c1489ded25723b8149f44a32ff10696/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=e51102b29c1489ded25723b8149f44a32ff10696", "patch": "@@ -11019,10 +11019,6 @@ package Sinfo is\n    -- Utility Functions --\n    -----------------------\n \n-   function Pragma_Name_Unmapped (N : Node_Id) return Name_Id;\n-   --  Function to obtain Chars field of Pragma_Identifier. In most cases, you\n-   --  want to call Pragma_Name instead.\n-\n    procedure Map_Pragma_Name (From, To : Name_Id);\n    --  Used in the implementation of pragma Rename_Pragma. Maps pragma name\n    --  From to pragma name To, so From can be used as a synonym for To.\n@@ -11033,9 +11029,14 @@ package Sinfo is\n    --  once or twice.\n \n    function Pragma_Name (N : Node_Id) return Name_Id;\n-   --  Same as Pragma_Name_Unmapped, except that if From has been mapped to To,\n-   --  and Pragma_Name_Unmapped (N) = From, then this returns To. In other\n-   --  words, this takes into account pragmas Rename_Pragma.\n+   --  Obtain the name of pragma N from the Chars field of its identifier. If\n+   --  the pragma has been renamed using Rename_Pragma, this routine returns\n+   --  the name of the renaming.\n+\n+   function Pragma_Name_Unmapped (N : Node_Id) return Name_Id;\n+   --  Obtain the name of pragma N from the Chars field of its identifier. This\n+   --  form of name extraction does not take into account renamings performed\n+   --  by Rename_Pragma.\n \n    -----------------------------\n    -- Syntactic Parent Tables --"}]}