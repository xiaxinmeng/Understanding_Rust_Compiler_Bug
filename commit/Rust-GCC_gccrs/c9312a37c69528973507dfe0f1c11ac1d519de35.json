{"sha": "c9312a37c69528973507dfe0f1c11ac1d519de35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzMTJhMzdjNjk1Mjg5NzM1MDdkZmUwZjFjMTFhYzFkNTE5ZGUzNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-22T00:09:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-22T00:09:39Z"}, "message": "* config/i386/morestack.S: Simplify CFI opcodes throughout.\n\nFrom-SVN: r182609", "tree": {"sha": "bd1e781e2d826998f21bcf68b06378a20832b72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1e781e2d826998f21bcf68b06378a20832b72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9312a37c69528973507dfe0f1c11ac1d519de35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9312a37c69528973507dfe0f1c11ac1d519de35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9312a37c69528973507dfe0f1c11ac1d519de35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9312a37c69528973507dfe0f1c11ac1d519de35/comments", "author": null, "committer": null, "parents": [{"sha": "e2724fd212500cad6bc135e7c2812c6c62975d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2724fd212500cad6bc135e7c2812c6c62975d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2724fd212500cad6bc135e7c2812c6c62975d49"}], "stats": {"total": 71, "additions": 29, "deletions": 42}, "files": [{"sha": "62f7ce1c0f7f58ccff5666bdf6b2198d03ef86c8", "filename": "libgcc/config/i386/morestack.S", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9312a37c69528973507dfe0f1c11ac1d519de35/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9312a37c69528973507dfe0f1c11ac1d519de35/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fmorestack.S?ref=c9312a37c69528973507dfe0f1c11ac1d519de35", "patch": "@@ -100,14 +100,12 @@ __morestack_non_split:\n \n #ifndef __x86_64__\n \n-\t# See below for an extended explanation of the CFI instructions.\n-\t.cfi_offset 8, 8\t\t# New PC stored at CFA + 8\n-\t.cfi_escape 0x15, 4, 0x7d\t# DW_CFA_val_offset_sf, %esp, 12/-4\n-\t\t\t\t\t# i.e., next %esp is CFA + 12\n+\t# See below for an extended explanation of this.\n+\t.cfi_def_cfa %esp,16\n \n \tpushl\t%eax\t\t\t# Save %eax in case it is a parameter.\n \n-\t.cfi_def_cfa %esp,8\t\t# Account for pushed register.\n+\t.cfi_adjust_cfa_offset 4\t# Account for pushed register.\n \n \tmovl\t%esp,%eax\t\t# Current stack,\n \tsubl\t8(%esp),%eax\t\t# less required stack frame size,\n@@ -144,30 +142,29 @@ __morestack_non_split:\n \n \tpopl\t%eax\t\t\t# Restore %eax and stack.\n \n-\t.cfi_def_cfa %esp,4\t\t# Account for popped register.\n+\t.cfi_adjust_cfa_offset -4\t# Account for popped register.\n \n \tret\t$8\t\t\t# Return to caller, popping args.\n \n 2:\n-\t.cfi_def_cfa %esp,8\t\t# Back to where we were.\n+\t.cfi_adjust_cfa_offset 4\t# Back to where we were.\n \n \tpopl\t%eax\t\t\t# Restore %eax and stack.\n \n-\t.cfi_def_cfa %esp,4\t\t# Account for popped register.\n+\t.cfi_adjust_cfa_offset -4\t# Account for popped register.\n \n \taddl\t$0x5000+BACKOFF,4(%esp)\t# Increment space we request.\n \n \t# Fall through into morestack.\n \n #else\n \n-\t# See below for an extended explanation of the CFI instructions.\n-\t.cfi_offset 16, 0\n-\t.cfi_escape 0x15, 7, 0x7f\t# DW_CFA_val_offset_sf, %esp, 8/-8\n+\t# See below for an extended explanation of this.\n+\t.cfi_def_cfa %rsp,16\n \n \tpushq\t%rax\t\t\t# Save %rax in case caller is using\n \t\t\t\t\t# it to preserve original %r10.\n-\t.cfi_def_cfa %rsp,16\t\t# Adjust for pushed register.\n+\t.cfi_adjust_cfa_offset 8\t# Adjust for pushed register.\n \n \tmovq\t%rsp,%rax\t\t# Current stack,\n \tsubq\t%r10,%rax\t\t# less required stack frame size,\n@@ -178,27 +175,21 @@ __morestack_non_split:\n #else\n \tcmpl\t%fs:0x40,%eax\n #endif\n-\tjb\t2f\t\t\t# Get more space if we need it.\n+\tpopq\t%rax\t\t\t# Restore register.\n \n-\t# This breaks call/return prediction, as described above.\n-\tincq\t8(%rsp)\t\t\t# Increment the return address.\n+\t.cfi_adjust_cfa_offset -8\t# Adjust for popped register.\n \n-\tpopq\t%rax\t\t\t# Restore register.\n+\tjb\t2f\t\t\t# Get more space if we need it.\n \n-\t.cfi_def_cfa %rsp,8\t\t# Adjust for popped register.\n+\t# This breaks call/return prediction, as described above.\n+\tincq\t(%rsp)\t\t\t# Increment the return address.\n \n \tret\t\t\t\t# Return to caller.\n \n 2:\n-\t.cfi_def_cfa %rsp,16\t\t# Back to where we were.\n-\n-\tpopq\t%rax\t\t\t# Restore register.\n-\n-\t.cfi_def_cfa %rsp,8\t\t# Adjust for popped register.\n-\n \taddq\t$0x5000+BACKOFF,%r10\t# Increment space we request.\n \n-\t# Fall throug into morestack.\n+\t# Fall through into morestack.\n \n #endif\n \n@@ -245,25 +236,22 @@ __morestack:\n \t# instruction, and just return to the real caller.\n \n \t# Here CFA points just past the return address on the stack,\n-\t# e.g., on function entry it is %esp + 4.  Later we will\n-\t# change it to %ebp + 8, as set by .cfi_def_cfa_register and\n-\t# .cfi_def_cfa_offset above.  The stack looks like this:\n+\t# e.g., on function entry it is %esp + 4.  The stack looks\n+\t# like this:\n \t#\tCFA + 12:\tstack pointer after two returns\n \t#\tCFA + 8:\treturn address of morestack caller's caller\n \t#\tCFA + 4:\tsize of parameters\n \t#\tCFA:\t\tnew stack frame size\n \t#\tCFA - 4:\treturn address of this function\n \t#\tCFA - 8:\tprevious value of %ebp; %ebp points here\n-\t# We want to set %esp to the stack pointer after the double\n-\t# return, which is CFA + 12.\n-\t.cfi_offset 8, 8\t\t# New PC stored at CFA + 8\n-\t.cfi_escape 0x15, 4, 0x7d\t# DW_CFA_val_offset_sf, %esp, 12/-4\n-\t\t\t\t\t# i.e., next %esp is CFA + 12\n+\t# Setting the new CFA to be the current CFA + 12 (i.e., %esp +\n+\t# 16) will make the unwinder pick up the right return address.\n+\n+\t.cfi_def_cfa %esp,16\n \n-\t# Set up a normal backtrace.\n \tpushl\t%ebp\n-\t.cfi_def_cfa_offset 8\n-\t.cfi_offset %ebp, -8\n+\t.cfi_adjust_cfa_offset 4\n+\t.cfi_offset %ebp, -20\n \tmovl\t%esp,%ebp\n \t.cfi_def_cfa_register %ebp\n \n@@ -281,7 +269,7 @@ __morestack:\n \t# register, since we don't change it, we just have to save it\n \t# for the unwinder.\n \tmovl\t%ebx,-4(%ebp)\n-\t.cfi_offset %ebx, -12\n+\t.cfi_offset %ebx, -24\n \n \t# In 32-bit mode the registers %eax, %edx, and %ecx may be\n \t# used for parameters, depending on the regparm and fastcall\n@@ -385,7 +373,7 @@ __morestack:\n \n \tpopl\t%ebp\n \t.cfi_restore %ebp\n-\t.cfi_def_cfa %esp, 4\n+\t.cfi_def_cfa %esp, 16\n \tret\t$8\t\t\t# Return to caller, which will\n \t\t\t\t\t# immediately return.  Pop\n \t\t\t\t\t# arguments as we go.\n@@ -432,13 +420,12 @@ __morestack:\n \t# return to the caller of our caller.  Let the unwinder skip\n \t# that single return instruction, and just return to the real\n \t# caller.\n-\t.cfi_offset 16, 0\n-\t.cfi_escape 0x15, 7, 0x7f\t# DW_CFA_val_offset_sf, %esp, 8/-8\n+\t.cfi_def_cfa %rsp,16\n \n \t# Set up a normal backtrace.\n \tpushq\t%rbp\n-\t.cfi_def_cfa_offset 16\n-\t.cfi_offset %rbp, -16\n+\t.cfi_adjust_cfa_offset 8\n+\t.cfi_offset %rbp, -24\n \tmovq\t%rsp, %rbp\n \t.cfi_def_cfa_register %rbp\n \n@@ -551,7 +538,7 @@ __morestack:\n \t.cfi_remember_state\n \tpopq\t%rbp\n \t.cfi_restore %rbp\n-\t.cfi_def_cfa %rsp, 8\n+\t.cfi_def_cfa %rsp, 16\n \tret\t\t\t\t# Return to caller, which will\n \t\t\t\t\t# immediately return.\n "}]}