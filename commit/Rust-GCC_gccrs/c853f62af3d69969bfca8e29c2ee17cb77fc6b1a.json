{"sha": "c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1M2Y2MmFmM2Q2OTk2OWJmY2E4ZTI5YzJlZTE3Y2I3N2ZjNmIxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-10-31T13:55:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-31T13:55:31Z"}, "message": "gimple-pretty-print.c (dump_ssaname_info): Print newline also in case of VR_VARYING.\n\n\t* gimple-pretty-print.c (dump_ssaname_info): Print newline also\n\tin case of VR_VARYING.  Print get_nonzero_bits if not all ones.\n\t* tree-ssanames.h (struct range_info_def): Add nonzero_bits field.\n\t(set_nonzero_bits, get_nonzero_bits): New prototypes.\n\t* tree-ssa-ccp.c (get_default_value): Use get_range_info to see if\n\ta default def isn't partially constant.\n\t(ccp_finalize): If after IPA, set_range_info if integral SSA_NAME\n\tis known to be partially zero.\n\t(evaluate_stmt): If we'd return otherwise VARYING, use get_range_info\n\tto see if a default def isn't partially constant.\n\t* tree-ssanames.c (set_range_info): Initialize nonzero_bits upon\n\tcreation of a range, if VR_RANGE, try to improve nonzero_bits from\n\tthe range.\n\t(set_nonzero_bits, get_nonzero_bits): New functions.\n\n\t* g++.dg/warn/pr33738.C (main): Initialize a2 again to make sure\n\twe warn about it already during VRP1 pass.\n\nFrom-SVN: r204256", "tree": {"sha": "3f7b240bb836007eb44a47aff2ecae17e1a2a5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f7b240bb836007eb44a47aff2ecae17e1a2a5ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8202b848c1d8b270fb9f82c8e91b507ec266cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8202b848c1d8b270fb9f82c8e91b507ec266cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8202b848c1d8b270fb9f82c8e91b507ec266cdb"}], "stats": {"total": 186, "additions": 172, "deletions": 14}, "files": [{"sha": "0e072c4725c9df3aa2e4ce82a2ec792bebf774ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -1,5 +1,20 @@\n 2013-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimple-pretty-print.c (dump_ssaname_info): Print newline also\n+\tin case of VR_VARYING.  Print get_nonzero_bits if not all ones.\n+\t* tree-ssanames.h (struct range_info_def): Add nonzero_bits field.\n+\t(set_nonzero_bits, get_nonzero_bits): New prototypes.\n+\t* tree-ssa-ccp.c (get_default_value): Use get_range_info to see if\n+\ta default def isn't partially constant.\n+\t(ccp_finalize): If after IPA, set_range_info if integral SSA_NAME\n+\tis known to be partially zero.\n+\t(evaluate_stmt): If we'd return otherwise VARYING, use get_range_info\n+\tto see if a default def isn't partially constant.\n+\t* tree-ssanames.c (set_range_info): Initialize nonzero_bits upon\n+\tcreation of a range, if VR_RANGE, try to improve nonzero_bits from\n+\tthe range.\n+\t(set_nonzero_bits, get_nonzero_bits): New functions.\n+\n \t* tree-cfg.c (assert_unreachable_fallthru_edge_p): New function.\n \t* tree-cfg.h (assert_unreachable_fallthru_edge_p): New prototype.\n \t* tree-vrp.c (all_imm_uses_in_stmt_or_feed_cond): New function."}, {"sha": "6842213199af8f1edcdce0176587aaee08b6f130", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -1737,7 +1737,7 @@ dump_ssaname_info (pretty_printer *buffer, tree node, int spc)\n   if (!POINTER_TYPE_P (TREE_TYPE (node))\n       && SSA_NAME_RANGE_INFO (node))\n     {\n-      double_int min, max;\n+      double_int min, max, nonzero_bits;\n       value_range_type range_type = get_range_info (node, &min, &max);\n \n       if (range_type == VR_VARYING)\n@@ -1750,8 +1750,20 @@ dump_ssaname_info (pretty_printer *buffer, tree node, int spc)\n \t  pp_printf (buffer, \", \");\n \t  pp_double_int (buffer, max, TYPE_UNSIGNED (TREE_TYPE (node)));\n \t  pp_printf (buffer, \"]\");\n-\t  newline_and_indent (buffer, spc);\n \t}\n+      nonzero_bits = get_nonzero_bits (node);\n+      if (nonzero_bits != double_int_minus_one\n+\t  && (nonzero_bits\n+\t      != double_int::mask (TYPE_PRECISION (TREE_TYPE (node)))))\n+\t{\n+\t  pp_string (buffer, \" NONZERO \");\n+\t  sprintf (pp_buffer (buffer)->digit_buffer,\n+\t\t   HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\t   (unsigned HOST_WIDE_INT) nonzero_bits.high,\n+\t\t   nonzero_bits.low);\n+\t  pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n+\t}\n+      newline_and_indent (buffer, spc);\n     }\n }\n "}, {"sha": "769209d795ac1d7010dbd1611c145e93e846d60e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -1,3 +1,8 @@\n+2013-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/warn/pr33738.C (main): Initialize a2 again to make sure\n+\twe warn about it already during VRP1 pass.\n+\n 2013-10-31  Martin Jambor  <mjambor@suse.cz>\n \n \tPR rtl-optimization/58934"}, {"sha": "60ee0b4841237ff0d630f7268595b16b3232d43e", "filename": "gcc/testsuite/g++.dg/warn/pr33738.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr33738.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr33738.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr33738.C?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -18,6 +18,7 @@ int main() {\n  if (a2 == -1) {\t// { dg-warning \"always false due\" }\n     link_error ();\n  }\n+ a2 = static_cast<Alpha>(GetM1());\n  if (-1 == a2) {\t// { dg-warning \"always false due\" }\n     link_error ();\n  }"}, {"sha": "5b6c0dbea28adfb1cbdf1a7758ffb2fbfec7b960", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -260,6 +260,19 @@ get_default_value (tree var)\n \t{\n \t  val.lattice_val = VARYING;\n \t  val.mask = double_int_minus_one;\n+\t  if (flag_tree_bit_ccp)\n+\t    {\n+\t      double_int nonzero_bits = get_nonzero_bits (var);\n+\t      double_int mask\n+\t\t= double_int::mask (TYPE_PRECISION (TREE_TYPE (var)));\n+\t      if (nonzero_bits != double_int_minus_one && nonzero_bits != mask)\n+\t\t{\n+\t\t  val.lattice_val = CONSTANT;\n+\t\t  val.value = build_zero_cst (TREE_TYPE (var));\n+\t\t  /* CCP wants the bits above precision set.  */\n+\t\t  val.mask = nonzero_bits | ~mask;\n+\t\t}\n+\t    }\n \t}\n     }\n   else if (is_gimple_assign (stmt))\n@@ -828,29 +841,45 @@ ccp_finalize (void)\n   do_dbg_cnt ();\n \n   /* Derive alignment and misalignment information from partially\n-     constant pointers in the lattice.  */\n+     constant pointers in the lattice or nonzero bits from partially\n+     constant integers.  */\n   for (i = 1; i < num_ssa_names; ++i)\n     {\n       tree name = ssa_name (i);\n       prop_value_t *val;\n       unsigned int tem, align;\n \n       if (!name\n-\t  || !POINTER_TYPE_P (TREE_TYPE (name)))\n+\t  || (!POINTER_TYPE_P (TREE_TYPE (name))\n+\t      && (!INTEGRAL_TYPE_P (TREE_TYPE (name))\n+\t\t  /* Don't record nonzero bits before IPA to avoid\n+\t\t     using too much memory.  */\n+\t\t  || first_pass_instance)))\n \tcontinue;\n \n       val = get_value (name);\n       if (val->lattice_val != CONSTANT\n \t  || TREE_CODE (val->value) != INTEGER_CST)\n \tcontinue;\n \n-      /* Trailing constant bits specify the alignment, trailing value\n-\t bits the misalignment.  */\n-      tem = val->mask.low;\n-      align = (tem & -tem);\n-      if (align > 1)\n-\tset_ptr_info_alignment (get_ptr_info (name), align,\n-\t\t\t\tTREE_INT_CST_LOW (val->value) & (align - 1));\n+      if (POINTER_TYPE_P (TREE_TYPE (name)))\n+\t{\n+\t  /* Trailing mask bits specify the alignment, trailing value\n+\t     bits the misalignment.  */\n+\t  tem = val->mask.low;\n+\t  align = (tem & -tem);\n+\t  if (align > 1)\n+\t    set_ptr_info_alignment (get_ptr_info (name), align,\n+\t\t\t\t    (TREE_INT_CST_LOW (val->value)\n+\t\t\t\t     & (align - 1)));\n+\t}\n+      else\n+\t{\n+\t  double_int nonzero_bits = val->mask;\n+\t  nonzero_bits = nonzero_bits | tree_to_double_int (val->value);\n+\t  nonzero_bits &= get_nonzero_bits (name);\n+\t  set_nonzero_bits (name, nonzero_bits);\n+\t}\n     }\n \n   /* Perform substitutions based on the known constant values.  */\n@@ -1671,6 +1700,39 @@ evaluate_stmt (gimple stmt)\n       is_constant = (val.lattice_val == CONSTANT);\n     }\n \n+  if (flag_tree_bit_ccp\n+      && ((is_constant && TREE_CODE (val.value) == INTEGER_CST)\n+\t  || (!is_constant && likelyvalue != UNDEFINED))\n+      && gimple_get_lhs (stmt)\n+      && TREE_CODE (gimple_get_lhs (stmt)) == SSA_NAME)\n+    {\n+      tree lhs = gimple_get_lhs (stmt);\n+      double_int nonzero_bits = get_nonzero_bits (lhs);\n+      double_int mask = double_int::mask (TYPE_PRECISION (TREE_TYPE (lhs)));\n+      if (nonzero_bits != double_int_minus_one && nonzero_bits != mask)\n+\t{\n+\t  if (!is_constant)\n+\t    {\n+\t      val.lattice_val = CONSTANT;\n+\t      val.value = build_zero_cst (TREE_TYPE (lhs));\n+\t      /* CCP wants the bits above precision set.  */\n+\t      val.mask = nonzero_bits | ~mask;\n+\t      is_constant = true;\n+\t    }\n+\t  else\n+\t    {\n+\t      double_int valv = tree_to_double_int (val.value);\n+\t      if (!(valv & ~nonzero_bits & mask).is_zero ())\n+\t\tval.value = double_int_to_tree (TREE_TYPE (lhs),\n+\t\t\t\t\t\tvalv & nonzero_bits);\n+\t      if (nonzero_bits.is_zero ())\n+\t\tval.mask = double_int_zero;\n+\t      else\n+\t\tval.mask = val.mask & (nonzero_bits | ~mask);\n+\t    }\n+\t}\n+    }\n+\n   if (!is_constant)\n     {\n       /* The statement produced a nonconstant value.  If the statement"}, {"sha": "00bd436c008c2148e4be6805b70b273d6013795d", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -189,11 +189,30 @@ set_range_info (tree name, double_int min, double_int max)\n     {\n       ri = ggc_alloc_cleared_range_info_def ();\n       SSA_NAME_RANGE_INFO (name) = ri;\n+      ri->nonzero_bits = double_int::mask (TYPE_PRECISION (TREE_TYPE (name)));\n     }\n \n   /* Set the values.  */\n   ri->min = min;\n   ri->max = max;\n+\n+  /* If it is a range, try to improve nonzero_bits from the min/max.  */\n+  if (min.cmp (max, TYPE_UNSIGNED (TREE_TYPE (name))) != 1)\n+    {\n+      int prec = TYPE_PRECISION (TREE_TYPE (name));\n+      double_int xorv;\n+\n+      min = min.zext (prec);\n+      max = max.zext (prec);\n+      xorv = min ^ max;\n+      if (xorv.high)\n+\txorv = double_int::mask (2 * HOST_BITS_PER_WIDE_INT\n+\t\t\t\t - clz_hwi (xorv.high));\n+      else if (xorv.low)\n+\txorv = double_int::mask (HOST_BITS_PER_WIDE_INT\n+\t\t\t\t - clz_hwi (xorv.low));\n+      ri->nonzero_bits = ri->nonzero_bits & (min | xorv);\n+    }\n }\n \n \n@@ -233,6 +252,47 @@ get_range_info (tree name, double_int *min, double_int *max)\n   return range_type;\n }\n \n+/* Change non-zero bits bitmask of NAME.  */\n+\n+void\n+set_nonzero_bits (tree name, double_int mask)\n+{\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  if (SSA_NAME_RANGE_INFO (name) == NULL)\n+    set_range_info (name,\n+\t\t    tree_to_double_int (TYPE_MIN_VALUE (TREE_TYPE (name))),\n+\t\t    tree_to_double_int (TYPE_MAX_VALUE (TREE_TYPE (name))));\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+  ri->nonzero_bits\n+    = mask & double_int::mask (TYPE_PRECISION (TREE_TYPE (name)));\n+}\n+\n+/* Return a double_int with potentially non-zero bits in SSA_NAME\n+   NAME, or double_int_minus_one if unknown.  */\n+\n+double_int\n+get_nonzero_bits (tree name)\n+{\n+  if (POINTER_TYPE_P (TREE_TYPE (name)))\n+    {\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (name);\n+      if (pi && pi->align)\n+\t{\n+\t  double_int al = double_int::from_uhwi (pi->align - 1);\n+\t  return ((double_int::mask (TYPE_PRECISION (TREE_TYPE (name))) & ~al)\n+\t\t  | double_int::from_uhwi (pi->misalign));\n+\t}\n+      return double_int_minus_one;\n+    }\n+\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+  if (!ri || (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (name)))\n+\t      > 2 * HOST_BITS_PER_WIDE_INT))\n+    return double_int_minus_one;\n+\n+  return ri->nonzero_bits;\n+}\n+\n /* We no longer need the SSA_NAME expression VAR, release it so that\n    it may be reused.\n "}, {"sha": "1d02d966fd7c4d893c785a59c1f2ea5dc524c0f0", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c853f62af3d69969bfca8e29c2ee17cb77fc6b1a/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=c853f62af3d69969bfca8e29c2ee17cb77fc6b1a", "patch": "@@ -52,6 +52,8 @@ struct GTY (()) range_info_def {\n   double_int min;\n   /* Maximum for value range.  */\n   double_int max;\n+  /* Non-zero bits - bits not set are guaranteed to be always zero.  */\n+  double_int nonzero_bits;\n };\n \n \n@@ -68,10 +70,11 @@ struct GTY (()) range_info_def {\n enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n \n /* Sets the value range to SSA.  */\n-extern void set_range_info (tree ssa, double_int min, double_int max);\n+extern void set_range_info (tree, double_int, double_int);\n /* Gets the value range from SSA.  */\n-extern enum value_range_type  get_range_info (tree name, double_int *min,\n-\t\t\t\t\t      double_int *max);\n+extern enum value_range_type get_range_info (tree, double_int *, double_int *);\n+extern void set_nonzero_bits (tree, double_int);\n+extern double_int get_nonzero_bits (tree);\n extern void init_ssanames (struct function *, int);\n extern void fini_ssanames (void);\n extern void ssanames_print_statistics (void);"}]}