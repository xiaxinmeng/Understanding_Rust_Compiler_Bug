{"sha": "d6d229c6b485d19c9eed6c572c26ed1563194487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkMjI5YzZiNDg1ZDE5YzllZWQ2YzU3MmMyNmVkMTU2MzE5NDQ4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-05-18T19:11:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-05-18T19:11:58Z"}, "message": "cgraph.h (symtab_first_defined_symbol, [...]): New functions.\n\n\t* cgraph.h (symtab_first_defined_symbol, symtab_next_defined_symbol):\n\tNew functions.\n\t(FOR_EACH_DEFINED_SYMBOL): New macro.\n\t(varpool_first_static_initializer, varpool_next_static_initializer,\n\tvarpool_first_defined_variable, varpool_next_defined_variable): Fix comments.\n\t(symtab_in_same_comdat_p): Correctly deal with inline functions.\n\nFrom-SVN: r210586", "tree": {"sha": "7ab76d160f176e75f7a6798d64cd1d56095ce985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab76d160f176e75f7a6798d64cd1d56095ce985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d229c6b485d19c9eed6c572c26ed1563194487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d229c6b485d19c9eed6c572c26ed1563194487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d229c6b485d19c9eed6c572c26ed1563194487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d229c6b485d19c9eed6c572c26ed1563194487/comments", "author": null, "committer": null, "parents": [{"sha": "43a4dd826c68ecf0f79df3e907db860fa460f691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4dd826c68ecf0f79df3e907db860fa460f691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a4dd826c68ecf0f79df3e907db860fa460f691"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "18ab7bd0d67ae43cc20b14477797f974eccf5bf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d229c6b485d19c9eed6c572c26ed1563194487/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d229c6b485d19c9eed6c572c26ed1563194487/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6d229c6b485d19c9eed6c572c26ed1563194487", "patch": "@@ -1,3 +1,12 @@\n+2014-05-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (symtab_first_defined_symbol, symtab_next_defined_symbol):\n+\tNew functions.\n+\t(FOR_EACH_DEFINED_SYMBOL): New macro.\n+\t(varpool_first_static_initializer, varpool_next_static_initializer,\n+\tvarpool_first_defined_variable, varpool_next_defined_variable): Fix comments.\n+\t(symtab_in_same_comdat_p): Correctly deal with inline functions.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* ggc-page.c (ggc_handle_finalizers): Add comment."}, {"sha": "8f13ecbe11cefcc4e18891ef1a928181659a7625", "filename": "gcc/cgraph.h", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d229c6b485d19c9eed6c572c26ed1563194487/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d229c6b485d19c9eed6c572c26ed1563194487/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=d6d229c6b485d19c9eed6c572c26ed1563194487", "patch": "@@ -1024,6 +1024,35 @@ varpool_get_node (const_tree decl)\n #define FOR_EACH_SYMBOL(node) \\\n    for ((node) = symtab_nodes; (node); (node) = (node)->next)\n \n+/* Return first static symbol with definition.  */\n+static inline symtab_node *\n+symtab_first_defined_symbol (void)\n+{\n+  symtab_node *node;\n+\n+  for (node = symtab_nodes; node; node = node->next)\n+    if (node->definition)\n+      return node;\n+\n+  return NULL;\n+}\n+\n+/* Return next reachable static symbol with initializer after NODE.  */\n+static inline symtab_node *\n+symtab_next_defined_symbol (symtab_node *node)\n+{\n+  symtab_node *node1 = node->next;\n+\n+  for (; node1; node1 = node1->next)\n+    if (node1->definition)\n+      return node1;\n+\n+  return NULL;\n+}\n+/* Walk all symbols with definitions in current unit.  */\n+#define FOR_EACH_DEFINED_SYMBOL(node) \\\n+   for ((node) = symtab_first_defined_symbol (); (node); \\\n+        (node) = symtab_next_defined_symbol (node))\n \n /* Return first variable.  */\n static inline varpool_node *\n@@ -1052,7 +1081,7 @@ varpool_next_variable (varpool_node *node)\n         (node); \\\n \t(node) = varpool_next_variable ((node)))\n \n-/* Return first reachable static variable with initializer.  */\n+/* Return first static variable with initializer.  */\n static inline varpool_node *\n varpool_first_static_initializer (void)\n {\n@@ -1066,7 +1095,7 @@ varpool_first_static_initializer (void)\n   return NULL;\n }\n \n-/* Return next reachable static variable with initializer after NODE.  */\n+/* Return next static variable with initializer after NODE.  */\n static inline varpool_node *\n varpool_next_static_initializer (varpool_node *node)\n {\n@@ -1085,7 +1114,7 @@ varpool_next_static_initializer (varpool_node *node)\n    for ((node) = varpool_first_static_initializer (); (node); \\\n         (node) = varpool_next_static_initializer (node))\n \n-/* Return first reachable static variable with initializer.  */\n+/* Return first static variable with definition.  */\n static inline varpool_node *\n varpool_first_defined_variable (void)\n {\n@@ -1099,7 +1128,7 @@ varpool_first_defined_variable (void)\n   return NULL;\n }\n \n-/* Return next reachable static variable with initializer after NODE.  */\n+/* Return next static variable with definition after NODE.  */\n static inline varpool_node *\n varpool_next_defined_variable (varpool_node *node)\n {\n@@ -1539,6 +1568,17 @@ symtab_comdat_local_p (symtab_node *node)\n static inline bool\n symtab_in_same_comdat_p (symtab_node *one, symtab_node *two)\n {\n+  if (cgraph_node *cn = dyn_cast <cgraph_node *> (one))\n+    {\n+      if (cn->global.inlined_to)\n+\tone = cn->global.inlined_to;\n+    }\n+  if (cgraph_node *cn = dyn_cast <cgraph_node *> (two))\n+    {\n+      if (cn->global.inlined_to)\n+\ttwo = cn->global.inlined_to;\n+    }\n+\n   return DECL_COMDAT_GROUP (one->decl) == DECL_COMDAT_GROUP (two->decl);\n }\n #endif  /* GCC_CGRAPH_H  */"}]}