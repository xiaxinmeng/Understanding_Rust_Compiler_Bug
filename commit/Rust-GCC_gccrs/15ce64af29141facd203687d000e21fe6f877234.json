{"sha": "15ce64af29141facd203687d000e21fe6f877234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjZTY0YWYyOTE0MWZhY2QyMDM2ODdkMDAwZTIxZmU2Zjg3NzIzNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@the-meissners.org", "date": "2011-12-09T17:10:27Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-12-09T17:10:27Z"}, "message": "Fix PR51469 (attr-ifunc fails on ppc); Make #pragma GCC target (\"...\") change macros on PPC\n\nFrom-SVN: r182169", "tree": {"sha": "ac24d21fa760d2cf985f1c62a77df7eb471f64e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac24d21fa760d2cf985f1c62a77df7eb471f64e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ce64af29141facd203687d000e21fe6f877234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ce64af29141facd203687d000e21fe6f877234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ce64af29141facd203687d000e21fe6f877234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ce64af29141facd203687d000e21fe6f877234/comments", "author": null, "committer": null, "parents": [{"sha": "9820d09c2612ca7d3ab4763593af8da10745fa93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9820d09c2612ca7d3ab4763593af8da10745fa93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9820d09c2612ca7d3ab4763593af8da10745fa93"}], "stats": {"total": 156, "additions": 135, "deletions": 21}, "files": [{"sha": "3f3506179d456653d52eeb4799130c7b790641d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -1,3 +1,19 @@\n+2011-12-09  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Call\n+\texpand_call to return a valid funciton instead of return\n+\tcosnt0_rtx/NULL_RTX if there was an error with the builtin.\n+\t(altivec_expand_ld_builtin): Ditto.\n+\t(rs6000_inner_target_options): If VSX is selected as a target\n+\tattribute or pragma, enable ALTIVEC also.\n+\t(rs6000_pragma_target_parse): Call rs6000_option_override_internal\n+\tto do all of the standard processing when switching options,\n+\tincluding redefining appropriate macros.\n+\n+\tPR rtl-optimization/51469\n+\t* varasm.c (default_binds_local_p_1): If the symbol is a gnu\n+\tindirect function, mark the symbol as non-local.\n+\n 2011-12-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/51479"}, {"sha": "fb983097659c000e430e60de096919499ac8dca4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -10578,7 +10578,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     {\n       *expandedp = true;\n       error (\"unresolved overload for Altivec builtin %qF\", fndecl);\n-      return const0_rtx;\n+\n+      /* Given it is invalid, just generate a normal call.  */\n+      return expand_call (exp, target, false);\n     }\n \n   target = altivec_expand_ld_builtin (exp, target, expandedp);\n@@ -11306,7 +11308,9 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   if (!func_valid_p)\n     {\n       rs6000_invalid_builtin (fcode);\n-      return NULL_RTX;\n+\n+      /* Given it is invalid, just generate a normal call.  */\n+      return expand_call (exp, target, ignore);\n     }\n \n   switch (fcode)\n@@ -26789,6 +26793,11 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t\t\terror_p = false;\n \t\t\ttarget_flags_explicit |= mask;\n \n+\t\t\t/* VSX needs altivec, so -mvsx automagically sets\n+\t\t\t   altivec.  */\n+\t\t\tif (mask == MASK_VSX && !invert)\n+\t\t\t  mask |= MASK_ALTIVEC;\n+\n \t\t\tif (rs6000_opt_masks[i].invert)\n \t\t\t  invert = !invert;\n \n@@ -27001,7 +27010,6 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n   struct cl_target_option *prev_opt, *cur_opt;\n   unsigned prev_bumask, cur_bumask, diff_bumask;\n   int prev_flags, cur_flags, diff_flags;\n-  bool ret;\n \n   if (TARGET_DEBUG_TARGET)\n     {\n@@ -27023,7 +27031,6 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n \n   if (! args)\n     {\n-      ret = true;\n       cur_tree = ((pop_target)\n \t\t  ? pop_target\n \t\t  : target_option_default_node);\n@@ -27033,13 +27040,13 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n   else\n     {\n       rs6000_cpu_index = rs6000_tune_index = -1;\n-      ret = rs6000_inner_target_options (args, false);\n-      cur_tree = build_target_option_node ();\n-\n-      if (!cur_tree)\n+      if (!rs6000_inner_target_options (args, false)\n+\t  || !rs6000_option_override_internal (false)\n+\t  || (cur_tree = build_target_option_node ()) == NULL_TREE)\n \t{\n \t  if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n-\t    fprintf (stderr, \"build_target_option_node returned NULL\\n\");\n+\t    fprintf (stderr, \"invalid pragma\\n\");\n+\n \t  return false;\n \t}\n     }\n@@ -27075,7 +27082,7 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n \t}\n     }\n \n-  return ret;\n+  return true;\n }\n \n \f"}, {"sha": "3a97bf76a68dda1d5146fb0bf2da101cce746857", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -1,3 +1,11 @@\n+2011-12-09  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* gcc.target/powerpc/recip-5.c: Disable running on any system that\n+\tdoes not support VSX.\n+\n+\t* gcc.target/powerpc/ppc-target-4.c: New file to test target\n+\tspecific functions enabling target specific builtins.\n+\n 2011-12-09  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n \t* gcc.dg/vect/slp-13.c: Array size increase reverted.\n@@ -635,11 +643,6 @@\n \tPR target/50123\n \t* gcc.dg/atomic-op-optimize.c: New.  Test for optimizations.\n \n-2011-11-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n-\n-\t* gcc.target/powerpc/ppc-target-4.c: New file to test target\n-\tspecific functions enabling target specific builtins.\n-\n 2011-11-29  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \tUse complex floating-point constant in CDBL."}, {"sha": "ac728334cd5dde66f7c807fb7d327b01d5507bbf", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-target-4.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-target-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-target-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-target-4.c?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -ffast-math -mcpu=power5 -mno-altivec -mabi=altivec -fno-unroll-loops\" } */\n+/* { dg-final { scan-assembler-times \"vaddfp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvaddsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fadds\" 1 } } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifdef __ALTIVEC__\n+#error \"__ALTIVEC__ should not be defined.\"\n+#endif\n+\n+#ifdef __VSX__\n+#error \"__VSX__ should not be defined.\"\n+#endif\n+\n+#pragma GCC target(\"vsx\")\n+#include <altivec.h>\n+#pragma GCC reset_options\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"altivec,no-vsx\")\n+\n+#ifndef __ALTIVEC__\n+#error \"__ALTIVEC__ should be defined.\"\n+#endif\n+\n+#ifdef __VSX__\n+#error \"__VSX__ should not be defined.\"\n+#endif\n+\n+void\n+av_add (vector float *a, vector float *b, vector float *c)\n+{\n+  unsigned long i;\n+  unsigned long n = SIZE / 4;\n+\n+  for (i = 0; i < n; i++)\n+    a[i] = vec_add (b[i], c[i]);\n+}\n+\n+#pragma GCC target(\"vsx\")\n+\n+#ifndef __ALTIVEC__\n+#error \"__ALTIVEC__ should be defined.\"\n+#endif\n+\n+#ifndef __VSX__\n+#error \"__VSX__ should be defined.\"\n+#endif\n+\n+void\n+vsx_add (vector float *a, vector float *b, vector float *c)\n+{\n+  unsigned long i;\n+  unsigned long n = SIZE / 4;\n+\n+  for (i = 0; i < n; i++)\n+    a[i] = vec_add (b[i], c[i]);\n+}\n+\n+#pragma GCC pop_options\n+#pragma GCC target(\"no-vsx,no-altivec\")\n+\n+#ifdef __ALTIVEC__\n+#error \"__ALTIVEC__ should not be defined.\"\n+#endif\n+\n+#ifdef __VSX__\n+#error \"__VSX__ should not be defined.\"\n+#endif\n+\n+void\n+norm_add (float *a, float *b, float *c)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    a[i] = b[i] + c[i];\n+}"}, {"sha": "3d7d691d5acdf81effdb3fc9800e438fcb62f1bd", "filename": "gcc/testsuite/gcc.target/powerpc/recip-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n-/* { dg-require-effective-target powerpc_fprs } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-O3 -ftree-vectorize -mrecip=all -ffast-math -mcpu=power7 -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"xvredp\" 4 } } */\n /* { dg-final { scan-assembler-times \"xvresp\" 5 } } */"}, {"sha": "86134672cbe6c0c85b4c19e8f63f3c726910f7c4", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ce64af29141facd203687d000e21fe6f877234/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ce64af29141facd203687d000e21fe6f877234/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=15ce64af29141facd203687d000e21fe6f877234", "patch": "@@ -6911,11 +6911,14 @@ default_binds_local_p_1 (const_tree exp, int shlib)\n   /* A non-decl is an entry in the constant pool.  */\n   if (!DECL_P (exp))\n     local_p = true;\n-  /* Weakrefs may not bind locally, even though the weakref itself is\n-     always static and therefore local.\n-     FIXME: We can resolve this more curefuly by looking at the weakref\n-     alias.  */\n-  else if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (exp)))\n+  /* Weakrefs may not bind locally, even though the weakref itself is always\n+     static and therefore local.  Similarly, the resolver for ifunc functions\n+     might resolve to a non-local function.\n+     FIXME: We can resolve the weakref case more curefuly by looking at the\n+     weakref alias.  */\n+  else if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (exp))\n+\t   || (TREE_CODE (exp) == FUNCTION_DECL\n+\t       && lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (exp))))\n     local_p = false;\n   /* Static variables are always local.  */\n   else if (! TREE_PUBLIC (exp))"}]}