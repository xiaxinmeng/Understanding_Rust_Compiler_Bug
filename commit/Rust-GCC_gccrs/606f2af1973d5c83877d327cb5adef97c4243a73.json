{"sha": "606f2af1973d5c83877d327cb5adef97c4243a73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2ZjJhZjE5NzNkNWM4Mzg3N2QzMjdjYjVhZGVmOTdjNDI0M2E3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T16:17:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T16:17:57Z"}, "message": "c++: Fix ICE with __builtin_bit_cast [PR98469]\n\nOn the following testcase we ICE during constexpr evaluation (for warnings),\nbecause the IL has ADDR_EXPR of BIT_CAST_EXPR and ADDR_EXPR case asserts\nthe result is not a CONSTRUCTOR.\nThe patch punts on lval BIT_CAST_EXPR folding.\n\n> This change is OK, but part of the problem is that we're trying to do\n> overload resolution for an S copy/move constructor, which we shouldn't be\n> because bit_cast is a prvalue, so in C++17 and up we should use it to\n> directly initialize the target without any implied constructor call.\n\nThis version therefore wraps it into a TARGET_EXPR then, it alone fixes\nthe bug, but I've kept the constexpr.c change too.\n\n2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98469\n\t* constexpr.c (cxx_eval_constant_expression) <case BIT_CAST_EXPR>:\n\tPunt if lval is true.\n\t* semantics.c (cp_build_bit_cast): Call get_target_expr_sfinae on\n\tthe result if it has a class type.\n\n\t* g++.dg/cpp2a/bit-cast8.C: New test.\n\t* g++.dg/cpp2a/bit-cast9.C: New test.", "tree": {"sha": "8b46777a2e840fe67c20284339fc3f0186527dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b46777a2e840fe67c20284339fc3f0186527dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/606f2af1973d5c83877d327cb5adef97c4243a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606f2af1973d5c83877d327cb5adef97c4243a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606f2af1973d5c83877d327cb5adef97c4243a73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606f2af1973d5c83877d327cb5adef97c4243a73/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af362af18f405c34840d820143aa3a94f72fce4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af362af18f405c34840d820143aa3a94f72fce4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af362af18f405c34840d820143aa3a94f72fce4d"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "0c12f608d36cc02c8c0be84bda86572f8ae13633", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=606f2af1973d5c83877d327cb5adef97c4243a73", "patch": "@@ -6900,6 +6900,15 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       return t;\n \n     case BIT_CAST_EXPR:\n+      if (lval)\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (EXPR_LOCATION (t),\n+\t\t      \"address of a call to %qs is not a constant expression\",\n+\t\t      \"__builtin_bit_cast\");\n+\t  *non_constant_p = true;\n+\t  return t;\n+\t}\n       r = cxx_eval_bit_cast (ctx, t, non_constant_p, overflow_p);\n       break;\n "}, {"sha": "b448efe024af8d57500fddc1f6cb42271ef06784", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=606f2af1973d5c83877d327cb5adef97c4243a73", "patch": "@@ -10761,6 +10761,10 @@ cp_build_bit_cast (location_t loc, tree type, tree arg,\n \n   tree ret = build_min (BIT_CAST_EXPR, type, arg);\n   SET_EXPR_LOCATION (ret, loc);\n+\n+  if (!processing_template_decl && CLASS_TYPE_P (type))\n+    ret = get_target_expr_sfinae (ret, complain);\n+\n   return ret;\n }\n "}, {"sha": "17a416534d78cfbda79c70fe74b2b7878eaa7c9b", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast8.C?ref=606f2af1973d5c83877d327cb5adef97c4243a73", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/98469\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wall\" }\n+\n+struct S { int s; };\n+\n+S\n+foo ()\n+{\n+  return __builtin_bit_cast (S, 0);\n+}"}, {"sha": "bf3d368418f0e9dc55c79b31e8a406bde7a9c4a9", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast9.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606f2af1973d5c83877d327cb5adef97c4243a73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast9.C?ref=606f2af1973d5c83877d327cb5adef97c4243a73", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/98469\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wall\" }\n+\n+template<typename T, typename F>\n+constexpr T\n+bit_cast (const F &f) noexcept\n+{\n+  return __builtin_bit_cast (T, f);\n+}\n+struct S { int s; };\n+constexpr int foo (const S &x) { return x.s; }\n+constexpr int bar () { return foo (bit_cast<S> (0)); }\n+constexpr int x = bar ();\n+static_assert (!x);"}]}