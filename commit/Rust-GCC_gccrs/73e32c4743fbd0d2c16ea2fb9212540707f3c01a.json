{"sha": "73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlMzJjNDc0M2ZiZDBkMmMxNmVhMmZiOTIxMjU0MDcwN2YzYzAxYQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-01-11T21:41:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-01-11T21:41:13Z"}, "message": "i386-common.c (OPTION_MASK_ISA_SGX_UNSET): New.\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_SGX_UNSET): New.\n\t(OPTION_MASK_ISA_SGX_SET): New.\n\t(ix86_handle_option): Handle OPT_msgx.\n\t* config.gcc: Added sgxintrin.h.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect sgx.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define __SGX__.\n\t* config/i386/i386.c (ix86_target_string): Add -msgx.\n\t(PTA_SGX): New.\n\t(ix86_option_override_internal): Handle new options.\n\t(ix86_valid_target_attribute_inner_p): Add sgx.\n\t* config/i386/i386.h (TARGET_SGX, TARGET_SGX_P): New.\n\t* config/i386/i386.opt: Add msgx.\n\t* config/i386/sgxintrin.h: New file.\n\t* config/i386/x86intrin.h: Add sgxintrin.h.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sgx.c New test.\n\t* gcc.target/i386/sse-12.c: Add -msgx.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r244339", "tree": {"sha": "6e7af7c398ddeaf7f3020e2a3e115d1141000752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7af7c398ddeaf7f3020e2a3e115d1141000752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa8438f71ce56891ea29eedb3a330c4359d18e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8438f71ce56891ea29eedb3a330c4359d18e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8438f71ce56891ea29eedb3a330c4359d18e9c"}], "stats": {"total": 306, "additions": 285, "deletions": 21}, "files": [{"sha": "6c32ea4ec9dbeb6036e3325fa387025d5395f232", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,3 +1,20 @@\n+2017-01-11  Julia Koval  <julia.koval@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_SGX_UNSET): New.\n+\t(OPTION_MASK_ISA_SGX_SET): New.\n+\t(ix86_handle_option): Handle OPT_msgx.\n+\t* config.gcc: Added sgxintrin.h.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect sgx.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define __SGX__.\n+\t* config/i386/i386.c (ix86_target_string): Add -msgx.\n+\t(PTA_SGX): New.\n+\t(ix86_option_override_internal): Handle new options.\n+\t(ix86_valid_target_attribute_inner_p): Add sgx.\n+\t* config/i386/i386.h (TARGET_SGX, TARGET_SGX_P): New.\n+\t* config/i386/i386.opt: Add msgx.\n+\t* config/i386/sgxintrin.h: New file.\n+\t* config/i386/x86intrin.h: Add sgxintrin.h.\n+\n 2017-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71537"}, {"sha": "5f6c3e2d10865a34a53550afc370c89b666c0aa0", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -116,6 +116,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_ABM_SET \\\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n \n+#define OPTION_MASK_ISA_SGX_SET OPTION_MASK_ISA_SGX\n #define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n #define OPTION_MASK_ISA_BMI2_SET OPTION_MASK_ISA_BMI2\n #define OPTION_MASK_ISA_LZCNT_SET OPTION_MASK_ISA_LZCNT\n@@ -214,6 +215,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_SHA_UNSET OPTION_MASK_ISA_SHA\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n+#define OPTION_MASK_ISA_SGX_UNSET OPTION_MASK_ISA_SGX\n #define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n #define OPTION_MASK_ISA_BMI2_UNSET OPTION_MASK_ISA_BMI2\n #define OPTION_MASK_ISA_LZCNT_UNSET OPTION_MASK_ISA_LZCNT\n@@ -500,6 +502,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_msgx:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_SGX_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_SGX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_SGX_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_SGX_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx512dq:\n       if (value)\n \t{"}, {"sha": "90308cd457253e4ca42e75ce39c295e1ade32cbe", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -376,7 +376,7 @@ i[34567]86-*-*)\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n-\t\t       clzerointrin.h pkuintrin.h\"\n+\t\t       clzerointrin.h pkuintrin.h sgxintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -399,7 +399,7 @@ x86_64-*-*)\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n-\t\t       clzerointrin.h pkuintrin.h\"\n+\t\t       clzerointrin.h pkuintrin.h sgxintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "e32d87fdc4a19d11ec7937c7669007860a85dc62", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -74,6 +74,7 @@\n /* Extended Features (%eax == 7) */\n /* %ebx */\n #define bit_FSGSBASE\t(1 << 0)\n+#define bit_SGX (1 << 2)\n #define bit_BMI\t(1 << 3)\n #define bit_HLE\t(1 << 4)\n #define bit_AVX2\t(1 << 5)"}, {"sha": "0925cacb556120a1b7670707438585733c494efe", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -404,7 +404,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n   unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n-  unsigned int has_hle = 0, has_rtm = 0;\n+  unsigned int has_hle = 0, has_rtm = 0, has_sgx = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n   unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n   unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n@@ -480,6 +480,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n \n       has_bmi = ebx & bit_BMI;\n+      has_sgx = ebx & bit_SGX;\n       has_hle = ebx & bit_HLE;\n       has_rtm = ebx & bit_RTM;\n       has_avx2 = ebx & bit_AVX2;\n@@ -993,6 +994,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *fma4 = has_fma4 ? \" -mfma4\" : \" -mno-fma4\";\n       const char *xop = has_xop ? \" -mxop\" : \" -mno-xop\";\n       const char *bmi = has_bmi ? \" -mbmi\" : \" -mno-bmi\";\n+      const char *sgx = has_sgx ? \" -msgx\" : \" -mno-sgx\";\n       const char *bmi2 = has_bmi2 ? \" -mbmi2\" : \" -mno-bmi2\";\n       const char *tbm = has_tbm ? \" -mtbm\" : \" -mno-tbm\";\n       const char *avx = has_avx ? \" -mavx\" : \" -mno-avx\";\n@@ -1032,7 +1034,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *pku = has_pku ? \" -mpku\" : \" -mno-pku\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n-\t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n+\t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n \t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,"}, {"sha": "b05ba25f9824a01c8f89117f48eeb0feea72dd18", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -378,6 +378,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX512IFMA__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124VNNIW)\n     def_or_undef (parse_in, \"__AVX5124VNNIW__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_SGX)\n+    def_or_undef (parse_in, \"__SGX__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)\n     def_or_undef (parse_in, \"__AVX5124FMAPS__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX512VPOPCNTDQ)"}, {"sha": "2ef5e9f3e0cca9e7a263e035c1667531a7b01291", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -4306,21 +4306,22 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2, int flags,\n     { \"-mxsave\",\tOPTION_MASK_ISA_XSAVE },\n     { \"-mxsaveopt\",\tOPTION_MASK_ISA_XSAVEOPT },\n     { \"-mprefetchwt1\",\tOPTION_MASK_ISA_PREFETCHWT1 },\n-    { \"-mclflushopt\",   OPTION_MASK_ISA_CLFLUSHOPT },\n+    { \"-mclflushopt\",\tOPTION_MASK_ISA_CLFLUSHOPT },\n     { \"-mxsavec\",\tOPTION_MASK_ISA_XSAVEC },\n     { \"-mxsaves\",\tOPTION_MASK_ISA_XSAVES },\n-    { \"-mmpx\",          OPTION_MASK_ISA_MPX },\n+    { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB },\n-    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX  },\n-    { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO  },\n-    { \"-mpku\",\t\tOPTION_MASK_ISA_PKU  },\n+    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n+    { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n+    { \"-mpku\",\t\tOPTION_MASK_ISA_PKU }\n   };\n   /* Additional structure for isa flags.  */\n   static struct ix86_target_opts isa_opts2[] =\n   {\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n     { \"-mavx512vpopcntdq\", OPTION_MASK_ISA_AVX512VPOPCNTDQ },\n+    { \"-msgx\",\t\tOPTION_MASK_ISA_SGX }\n   };\n   /* Flag options.  */\n   static struct ix86_target_opts flag_opts[] =\n@@ -4350,10 +4351,10 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2, int flags,\n     { \"-mvect8-ret-in-mem\",\t\tMASK_VECT8_RETURNS },\n     { \"-m8bit-idiv\",\t\t\tMASK_USE_8BIT_IDIV },\n     { \"-mvzeroupper\",\t\t\tMASK_VZEROUPPER },\n-    { \"-mstv\",\t\t\t\tMASK_STV},\n-    { \"-mavx256-split-unaligned-load\",\tMASK_AVX256_SPLIT_UNALIGNED_LOAD},\n-    { \"-mavx256-split-unaligned-store\",\tMASK_AVX256_SPLIT_UNALIGNED_STORE},\n-    { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128},\n+    { \"-mstv\",\t\t\t\tMASK_STV },\n+    { \"-mavx256-split-unaligned-load\",\tMASK_AVX256_SPLIT_UNALIGNED_LOAD },\n+    { \"-mavx256-split-unaligned-store\",\tMASK_AVX256_SPLIT_UNALIGNED_STORE },\n+    { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128 }\n   };\n \n   /* Additional flag options.  */\n@@ -4921,6 +4922,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX5124VNNIW\t(HOST_WIDE_INT_1 << 60)\n #define PTA_AVX5124FMAPS\t(HOST_WIDE_INT_1 << 61)\n #define PTA_AVX512VPOPCNTDQ\t(HOST_WIDE_INT_1 << 62)\n+#define PTA_SGX\t\t\t(HOST_WIDE_INT_1 << 62)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -5586,6 +5588,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_AVX512VPOPCNTDQ\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n+\tif (processor_alias_table[i].flags & PTA_SGX\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_SGX))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_SGX;\n \n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n@@ -6613,6 +6618,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     /* isa options */\n     IX86_ATTR_ISA (\"3dnow\",\tOPT_m3dnow),\n     IX86_ATTR_ISA (\"abm\",\tOPT_mabm),\n+    IX86_ATTR_ISA (\"sgx\",\tOPT_msgx),\n     IX86_ATTR_ISA (\"bmi\",\tOPT_mbmi),\n     IX86_ATTR_ISA (\"bmi2\",\tOPT_mbmi2),\n     IX86_ATTR_ISA (\"lzcnt\",\tOPT_mlzcnt),\n@@ -33421,7 +33427,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"avx512ifma\",F_AVX512IFMA},\n       {\"avx5124vnniw\",F_AVX5124VNNIW},\n       {\"avx5124fmaps\",F_AVX5124FMAPS},\n-      {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ},\n+      {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ}\n     };\n \n   tree __processor_model_type = build_processor_model_struct ();"}, {"sha": "a636439ecefd673ebdfb150da5ee60adf70c4e8c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -100,6 +100,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ROUND\tTARGET_ISA_ROUND\n #define TARGET_ABM\tTARGET_ISA_ABM\n #define TARGET_ABM_P(x)\tTARGET_ISA_ABM_P(x)\n+#define TARGET_SGX\tTARGET_ISA_SGX\n+#define TARGET_SGX_P(x)\tTARGET_ISA_SGX_P(x)\n #define TARGET_BMI\tTARGET_ISA_BMI\n #define TARGET_BMI_P(x)\tTARGET_ISA_BMI_P(x)\n #define TARGET_BMI2\tTARGET_ISA_BMI2"}, {"sha": "b36f125f9ab8e1b530992b50ca2aaaaa66cd4260", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -737,6 +737,10 @@ mpopcnt\n Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n Support code generation of popcnt instruction.\n \n+msgx\n+Target Report Mask(ISA_SGX) Var(ix86_isa_flags) Save\n+Support SGX built-in functions and code generation.\n+\n mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation."}, {"sha": "4248076971f9ce9c81b4bd0bafa968bebf7b9787", "filename": "gcc/config/i386/sgxintrin.h", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsgxintrin.h?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -0,0 +1,177 @@\n+#ifndef _SGXINTRIN_H_INCLUDED\n+#define _SGXINTRIN_H_INCLUDED\n+\n+#ifndef __SGX__\n+#pragma GCC push_options\n+#pragma GCC target(\"sgx\")\n+#define __DISABLE_SGX__\n+#endif /* __SGX__ */\n+\n+#define __encls_bc(leaf, b, c, retval)\t    \t \t\\\n+  __asm__ __volatile__ (\"encls\\n\\t\"\t\t     \t\\\n+\t   : \"=a\" (retval)\t\t\t     \t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c)\t\t\\\n+\t   : \"cc\")\n+\n+#define __encls_bcd(leaf, b, c, d, retval)\t     \t\\\n+  __asm__ __volatile__(\"encls\\n\\t\"\t\t     \t\\\n+\t   : \"=a\" (retval)\t\t\t     \t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n+\t   : \"cc\")\n+\n+#define __encls_c(leaf, c, retval)\t\t     \t\\\n+  __asm__ __volatile__(\"encls\\n\\t\"\t\t     \t\\\n+\t   : \"=a\" (retval)\t\t\t     \t\\\n+\t   : \"a\" (leaf), \"c\" (c)\t\t\t\\\n+\t   : \"cc\")\n+\n+#define __encls_edbgrd(leaf, b, c, retval)\t     \t\\\n+  __asm__ __volatile__(\"encls\\n\\t\"\t\t     \t\\\n+\t   : \"=a\" (retval), \"=b\" (b)\t\t     \t\\\n+\t   : \"a\" (leaf), \"c\" (c))\n+\n+#define __encls_generic(leaf, b, c, d, retval)   \t\\\n+  __asm__ __volatile__(\"encls\\n\\t\"\t\t     \t\\\n+\t   : \"=a\" (retval), \"=b\" (b), \"=c\" (c), \"=d\" (d)\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n+\t   : \"cc\")\n+\n+#define __enclu_bc(leaf, b, c, retval)\t\t\t\\\n+  __asm__ __volatile__(\"enclu\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval)\t\t\t\t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c)\t\t\\\n+\t   : \"cc\")\n+\n+#define __enclu_bcd(leaf, b, c, d, retval)\t\t\\\n+  __asm__ __volatile__(\"enclu\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval)\t\t\t\t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n+\t   : \"cc\")\n+\n+#define __enclu_eenter(leaf, b, c, retval)\t\t\\\n+  __asm__  __volatile__(\"enclu\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval), \"=c\" (c)\t\t\t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c)\t\t\\\n+\t   : \"cc\")\n+\n+#define __enclu_eexit(leaf, b, c, retval)\t\t\\\n+  __asm__  __volatile__(\"enclu\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval), \"=c\" (c)\t\t\t\\\n+\t   : \"a\" (leaf), \"b\" (b)\t\t\t\\\n+\t   : \"cc\")\n+\n+#define __enclu_generic(leaf, b, c, d, retval)\t\t\\\n+  __asm__ __volatile__(\"enclu\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval), \"=b\" (b), \"=c\" (c), \"=d\" (d)\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n+\t   : \"cc\")\n+\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_encls_u32 (const int __L, size_t __D[])\n+{\n+  enum __encls_type\n+  {\n+    __SGX_ECREATE = 0x00,\n+    __SGX_EADD    = 0x01,\n+    __SGX_EINIT   = 0x02,\n+    __SGX_EREMOVE = 0x03,\n+    __SGX_EDBGRD  = 0x04,\n+    __SGX_EDBGWR  = 0x05,\n+    __SGX_EEXTEND = 0x06,\n+    __SGX_ELDB    = 0x07,\n+    __SGX_ELDU    = 0x08,\n+    __SGX_EBLOCK  = 0x09,\n+    __SGX_EPA     = 0x0A,\n+    __SGX_EWB     = 0x0B,\n+    __SGX_ETRACK  = 0x0C,\n+    __SGX_EAUG    = 0x0D,\n+    __SGX_EMODPR  = 0x0E,\n+    __SGX_EMODT   = 0x0F\n+  };\n+  enum __encls_type __T = (enum __encls_type)__L;\n+  int __R = 0;\n+  if (!__builtin_constant_p (__T))\n+    __encls_generic (__L, __D[0], __D[1], __D[2], __R);\n+  else switch (__T)\n+    {\n+    case __SGX_ECREATE:\n+    case __SGX_EADD:\n+    case __SGX_EDBGWR:\n+    case __SGX_EEXTEND:\n+    case __SGX_EPA:\n+    case __SGX_EMODPR:\n+    case __SGX_EMODT:\n+    case __SGX_EAUG:\n+      __encls_bc (__L, __D[0], __D[1], __R);\n+      break;\n+    case __SGX_EINIT:\n+    case __SGX_ELDB:\n+    case __SGX_ELDU:\n+    case __SGX_EWB:\n+      __encls_bcd (__L, __D[0], __D[1], __D[2], __R);\n+      break;\n+    case __SGX_EREMOVE:\n+    case __SGX_EBLOCK:\n+    case __SGX_ETRACK:\n+      __encls_c (__L, __D[1], __R);\n+      break;\n+    case __SGX_EDBGRD:\n+      __encls_edbgrd (__L, __D[0], __D[1], __R);\n+      break;\n+    default:\n+      return -1;\n+    }\n+  return __R;\n+}\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_enclu_u32 (const int __L, size_t __D[])\n+{\n+  enum __enclu_type\n+  {\n+    __SGX_EREPORT     = 0x00,\n+    __SGX_EGETKEY     = 0x01,\n+    __SGX_EENTER      = 0x02,\n+    __SGX_ERESUME     = 0x03,\n+    __SGX_EEXIT       = 0x04,\n+    __SGX_EACCEPT     = 0x05,\n+    __SGX_EMODPE      = 0x06,\n+    __SGX_EACCEPTCOPY = 0x07\n+  };\n+  enum __enclu_type __T = (enum __enclu_type) __L;\n+  int __R = 0;\n+  if (!__builtin_constant_p (__T))\n+    __enclu_generic (__L, __D[0], __D[1], __D[2], __R);\n+  else switch (__T)\n+    {\n+    case __SGX_EREPORT:\n+    case __SGX_EACCEPTCOPY:\n+      __enclu_bcd (__L, __D[0], __D[1], __D[2], __R);\n+      break;\n+    case __SGX_EGETKEY:\n+    case __SGX_ERESUME:\n+    case __SGX_EACCEPT:\n+    case __SGX_EMODPE:\n+      __enclu_bc (__L, __D[0], __D[1], __R);\n+      break;\n+    case __SGX_EENTER:\n+      __enclu_eenter (__L, __D[0], __D[1], __R);\n+      break;\n+    case __SGX_EEXIT:\n+      __enclu_eexit (__L, __D[0], __D[1], __R);\n+      break;\n+    default:\n+      return -1;\n+    }\n+  return __R;\n+}\n+\n+#ifdef __DISABLE_SGX__\n+#undef __DISABLE_SGX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SGX__ */\n+\n+#endif /* _SGXINTRIN_H_INCLUDED */"}, {"sha": "780edbbe54f63f8eae6513a2482b86c8c281c895", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -75,6 +75,8 @@\n \n #include <xsaveoptintrin.h>\n \n+#include <sgxintrin.h>\n+\n #endif /* __iamcu__ */\n \n #include <adxintrin.h>"}, {"sha": "c8c9c628e0a690c08dedc2b2f6b050f7b80d91e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,3 +1,15 @@\n+2017-01-11  Julia Koval  <julia.koval@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sgx.c New test.\n+\t* gcc.target/i386/sse-12.c: Add -msgx.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2017-01-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/24511"}, {"sha": "e8becf921fb9c5a71eb704820707e9ed9fc66397", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "26ce7ffc068386c1d57f76bac1b30c285c4f16d1", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "42ad1fc8e66eb7a9b33974673ed08982880e9017", "filename": "gcc/testsuite/gcc.target/i386/sgx.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msgx\" } */\n+/* { dg-final { scan-assembler-times \"enclu\"  2 } } */\n+/* { dg-final { scan-assembler-times \"encls\"  2 } } */\n+\n+#include <x86intrin.h>\n+\n+extern int leaf;\n+\n+#define SGX_EENTER 0x02\n+#define SGX_EBLOCK 0x09\n+\n+int foo ()\n+{\n+  size_t test[3];\n+  test[0] = 4;\n+  test[1] = 5;\n+  test[2] = 6; \n+  int res1 = _encls_u32 (leaf, test);\n+  int res2 = _enclu_u32 (leaf, test);\n+  int res3 = _encls_u32 (SGX_EBLOCK, test);\n+  int res4 = _enclu_u32 (SGX_EENTER, test);\n+  return 0;\n+}"}, {"sha": "92f3894aeeb7ea86a5fa83e661588a0933c9e776", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "b23480a8ec88d72e3b88bede812cf9bfc120ebbc", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "8a4b232b1f37b4e9d9a7686835453f7790c3b526", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mmwaitx -mclzero\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "0e1c3baafab58e337e301ae3fc518cdf9d8dcc57", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -700,7 +700,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt,clwb,pku\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt,clwb,pku,sgx\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "bf1cba05f538a48904e904a0e1b8988fb4b7ab01", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e32c4743fbd0d2c16ea2fb9212540707f3c01a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=73e32c4743fbd0d2c16ea2fb9212540707f3c01a", "patch": "@@ -595,6 +595,6 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx\")\n \n #include <x86intrin.h>"}]}