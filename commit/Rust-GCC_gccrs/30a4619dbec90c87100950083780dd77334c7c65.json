{"sha": "30a4619dbec90c87100950083780dd77334c7c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhNDYxOWRiZWM5MGM4NzEwMDk1MDA4Mzc4MGRkNzczMzRjN2M2NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-26T23:01:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-26T23:01:47Z"}, "message": "(movsi): If -mno-sum-in-toc, do addition of symbol + const.\n\nFrom-SVN: r6635", "tree": {"sha": "03738fd595df0048fd63d39f4eaa76981d58ec57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03738fd595df0048fd63d39f4eaa76981d58ec57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a4619dbec90c87100950083780dd77334c7c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a4619dbec90c87100950083780dd77334c7c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a4619dbec90c87100950083780dd77334c7c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a4619dbec90c87100950083780dd77334c7c65/comments", "author": null, "committer": null, "parents": [{"sha": "0b9ccabc3c5e637a794516c9b06bb492c56c77f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9ccabc3c5e637a794516c9b06bb492c56c77f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9ccabc3c5e637a794516c9b06bb492c56c77f7"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "aa55d333645393331138c136e4799e239310cf25", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a4619dbec90c87100950083780dd77334c7c65/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a4619dbec90c87100950083780dd77334c7c65/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=30a4619dbec90c87100950083780dd77334c7c65", "patch": "@@ -2844,6 +2844,25 @@\n   if (CONSTANT_P (operands[1]) && GET_CODE (operands[1]) != CONST_INT\n       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1]))\n     {\n+      /* If we are to limit the number of things we put in the TOC and\n+\t this is a symbol plus a constant we can add in one insn,\n+\t just put the sumbol in the TOC and add the constant.  Don't do\n+\t this if reload is in progress.  */\n+      if (GET_CODE (operands[1]) == CONST\n+\t  && TARGET_NO_SUM_IN_TOC && ! reload_in_progress\n+\t  && GET_CODE (XEXP (operands[1], 0)) == PLUS\n+\t  && add_operand (XEXP (XEXP (operands[1], 0), 1), SImode)\n+\t  && (GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == LABEL_REF\n+\t      || GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == SYMBOL_REF)\n+\t  && ! side_effects_p (operands[0]))\n+\t{\n+\t  rtx sym = force_const_mem (SImode, XEXP (XEXP (operands[1], 0), 0));\n+\t  rtx other = XEXP (XEXP (operands[1], 0), 1);\n+\n+\t  emit_insn (gen_addsi3 (operands[0], force_reg (SImode, sym), other));\n+\t  DONE;\n+\t}\n+\n       operands[1] = force_const_mem (SImode, operands[1]);\n       if (! memory_address_p (SImode, XEXP (operands[1], 0))\n \t  && ! reload_in_progress)"}]}