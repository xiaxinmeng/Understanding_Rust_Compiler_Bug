{"sha": "5372d0883b5a9f07843d082ed56e60b3351757a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM3MmQwODgzYjVhOWYwNzg0M2QwODJlZDU2ZTYwYjMzNTE3NTdhMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-26T15:35:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-26T15:35:20Z"}, "message": "stmt.c (expand_case): Remove code to handle SWITCH_EXPR with a default case only.\n\n\t* stmt.c (expand_case): Remove code to handle SWITCH_EXPR with\n\ta default case only.\n\nFrom-SVN: r89585", "tree": {"sha": "cc0132c42367e3a27e17b5763445fe2984bf8bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0132c42367e3a27e17b5763445fe2984bf8bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5372d0883b5a9f07843d082ed56e60b3351757a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5372d0883b5a9f07843d082ed56e60b3351757a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5372d0883b5a9f07843d082ed56e60b3351757a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5372d0883b5a9f07843d082ed56e60b3351757a1/comments", "author": null, "committer": null, "parents": [{"sha": "f82f556dac8378f2c7e469b71e411ea721bc12e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f556dac8378f2c7e469b71e411ea721bc12e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82f556dac8378f2c7e469b71e411ea721bc12e5"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "916baf24d4b814d1e14d326d1fcd84823ad59ea6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5372d0883b5a9f07843d082ed56e60b3351757a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5372d0883b5a9f07843d082ed56e60b3351757a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5372d0883b5a9f07843d082ed56e60b3351757a1", "patch": "@@ -1,3 +1,8 @@\n+2004-10-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* stmt.c (expand_case): Remove code to handle SWITCH_EXPR with\n+\ta default case only.\n+\n 2004-10-26  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs): Adjust for"}, {"sha": "bb17fa2e4e6551f50d3ed8471f7e176fd3587525", "filename": "gcc/stmt.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5372d0883b5a9f07843d082ed56e60b3351757a1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5372d0883b5a9f07843d082ed56e60b3351757a1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5372d0883b5a9f07843d082ed56e60b3351757a1", "patch": "@@ -2419,27 +2419,24 @@ expand_case (tree exp)\n               }\n \t}\n \n-      /* Compute span of values.  */\n-      if (count != 0)\n-\trange = fold (build2 (MINUS_EXPR, index_type, maxval, minval));\n+      /* cleanup_tree_cfg removes all SWITCH_EXPR with a single\n+\t destination, such as one with a default case only.  */\n+      gcc_assert (count != 0);\n \n-      if (count == 0)\n-\t{\n-\t  expand_expr (index_expr, const0_rtx, VOIDmode, 0);\n-\t  emit_jump (default_label);\n-\t}\n+      /* Compute span of values.  */\n+      range = fold (build2 (MINUS_EXPR, index_type, maxval, minval));\n \n       /* Try implementing this switch statement by a short sequence of\n \t bit-wise comparisons.  However, we let the binary-tree case\n \t below handle constant index expressions.  */\n-      else if (CASE_USE_BIT_TESTS\n-\t       && ! TREE_CONSTANT (index_expr)\n-\t       && compare_tree_int (range, GET_MODE_BITSIZE (word_mode)) < 0\n-\t       && compare_tree_int (range, 0) > 0\n-\t       && lshift_cheap_p ()\n-\t       && ((uniq == 1 && count >= 3)\n-\t\t   || (uniq == 2 && count >= 5)\n-\t\t   || (uniq == 3 && count >= 6)))\n+      if (CASE_USE_BIT_TESTS\n+\t  && ! TREE_CONSTANT (index_expr)\n+\t  && compare_tree_int (range, GET_MODE_BITSIZE (word_mode)) < 0\n+\t  && compare_tree_int (range, 0) > 0\n+\t  && lshift_cheap_p ()\n+\t  && ((uniq == 1 && count >= 3)\n+\t      || (uniq == 2 && count >= 5)\n+\t      || (uniq == 3 && count >= 6)))\n \t{\n \t  /* Optimize the case where all the case values fit in a\n \t     word without having to subtract MINVAL.  In this case,"}]}