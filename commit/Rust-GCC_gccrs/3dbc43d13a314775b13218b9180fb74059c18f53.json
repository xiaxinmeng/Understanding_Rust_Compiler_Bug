{"sha": "3dbc43d13a314775b13218b9180fb74059c18f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiYzQzZDEzYTMxNDc3NWIxMzIxOGI5MTgwZmI3NDA1OWMxOGY1Mw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-03T22:20:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-03T22:20:18Z"}, "message": "mn10300.c (can_use_return_insn): Add size of fixed stack space for function calls into the size of the frame.\n\n        * mn10300.c (can_use_return_insn): Add size of fixed stack space\n        for function calls into the size of the frame.  */\n        (expand_prologue, expand_epilogue): Likewise.\n        (initial_offset): Corresponding changes..\n        * mn10300.h (OUTGOING_REG_PARM_STACK_SPACE): No longer define.\n        (STACK_POINTER_OFFSET): Define.\n        * mn10300.md (call, call_value expanders): Don't adjust the stack\n        pointer here anymore.\n\n        * mn10300.md (ashlsi3): Remove some alternatives which are no longer\n        needed or desired.\n\nFrom-SVN: r13837", "tree": {"sha": "805ec6f5c2e23b71123ddb1ad2f5a39d79e1fb09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/805ec6f5c2e23b71123ddb1ad2f5a39d79e1fb09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbc43d13a314775b13218b9180fb74059c18f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc43d13a314775b13218b9180fb74059c18f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbc43d13a314775b13218b9180fb74059c18f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc43d13a314775b13218b9180fb74059c18f53/comments", "author": null, "committer": null, "parents": [{"sha": "24e46fc4024935f88a26e801b64a1ddf21eff40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e46fc4024935f88a26e801b64a1ddf21eff40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24e46fc4024935f88a26e801b64a1ddf21eff40c"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "1ae2a27b893c268f3455c72630700cae9572f7c1", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=3dbc43d13a314775b13218b9180fb74059c18f53", "patch": "@@ -327,7 +327,8 @@ print_operand_address (file, addr)\n int\n can_use_return_insn ()\n {\n-  int size = get_frame_size ();\n+  /* SIZE includes the fixed stack space needed for function calls.  */\n+  int size = get_frame_size () + (!leaf_function_p () ? 12 : 0);\n \n   return (reload_completed\n \t  && size == 0\n@@ -341,7 +342,17 @@ can_use_return_insn ()\n void\n expand_prologue ()\n {\n-  unsigned int size = get_frame_size ();\n+  unsigned int size;\n+\n+  /* We have to end the current sequence so leaf_function_p will\n+     work.  We then start a new sequence to hold the prologue/epilogue.  */\n+  end_sequence ();\n+\n+  /* SIZE includes the fixed stack space needed for function calls.  */\n+  size = get_frame_size () + (!leaf_function_p () ? 12 : 0);\n+\n+  /* Start a new sequence for the prologue/epilogue.  */\n+  start_sequence ();\n \n   /* If this is an old-style varargs function, then its arguments\n      need to be flushed back to the stack.  */\n@@ -378,7 +389,17 @@ expand_prologue ()\n void\n expand_epilogue ()\n {\n-  unsigned int size = get_frame_size ();\n+  unsigned int size;\n+\n+  /* We have to end the current sequence so leaf_function_p will\n+     work.  We then start a new sequence to hold the prologue/epilogue.  */\n+  end_sequence ();\n+\n+  /* SIZE includes the fixed stack space needed for function calls.  */\n+  size = get_frame_size () + (!leaf_function_p () ? 12 : 0);\n+\n+  /* Start a new sequence for the prologue/epilogue.  */\n+  start_sequence ();\n \n   /* Cut back the stack.  */\n   if (frame_pointer_needed)\n@@ -528,6 +549,8 @@ int\n initial_offset (from, to)\n      int from, to;\n {\n+  /* The difference between the argument pointer and the frame pointer\n+     is the size of the callee register save area.  */\n   if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n     {\n       if (regs_ever_live[2] || regs_ever_live[3]\n@@ -538,18 +561,24 @@ initial_offset (from, to)\n \treturn 0;\n     }\n \n+  /* The difference between the argument pointer and the stack pointer is\n+     the sum of the size of this function's frame, the callee register save\n+     area, and the fixed stack space needed for function calls (if any).  */\n   if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     {\n       if (regs_ever_live[2] || regs_ever_live[3]\n \t  || regs_ever_live[6] || regs_ever_live[7]\n \t  || frame_pointer_needed)\n-\treturn get_frame_size () + 16;\n+\treturn (get_frame_size () + 16 + (!leaf_function_p () ? 12 : 0));\n       else\n-\treturn get_frame_size ();\n+\treturn (get_frame_size () + (!leaf_function_p () ? 12 : 0));\n     }\n \n+  /* The difference between the frame pointer and stack pointer is the sum\n+     of the size of this function's frame and the fixed stack space needed\n+     for function calls (if any).  */\n   if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n-    return get_frame_size ();\n+    return get_frame_size () + (!leaf_function_p () ? 12 : 0);\n \n   abort ();\n }"}, {"sha": "d850641eb653c0318dd249ce7344df45fc60049f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=3dbc43d13a314775b13218b9180fb74059c18f53", "patch": "@@ -423,7 +423,10 @@ enum reg_class {\n /* We use d0/d1 for passing parameters, so allocate 8 bytes of space\n    for a register flushback area.  */\n #define REG_PARM_STACK_SPACE(DECL) 8\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+\n+/* So we can allocate space for return pointers once for the function\n+   instead of around every call.  */\n+#define STACK_POINTER_OFFSET 4\n \n /* 1 if N is a possible register number for function argument passing.\n    On the MN10300, no registers are used in this way.  */"}, {"sha": "98f453625ab52df9f984d85a13838b1c504c0ec6", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbc43d13a314775b13218b9180fb74059c18f53/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=3dbc43d13a314775b13218b9180fb74059c18f53", "patch": "@@ -962,9 +962,7 @@\n {\n   if (! call_address_operand (XEXP (operands[0], 0)))\n     XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, GEN_INT (-4)));\n   emit_call_insn (gen_call_internal (XEXP (operands[0], 0), operands[1]));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, GEN_INT (4)));\n   DONE;\n }\")\n \n@@ -987,11 +985,9 @@\n {\n   if (! call_address_operand (XEXP (operands[1], 0)))\n     XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, GEN_INT (-4)));\n   emit_call_insn (gen_call_value_internal (operands[0],\n \t\t\t\t\t   XEXP (operands[1], 0),\n \t\t\t\t\t   operands[2]));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, GEN_INT (4)));\n   DONE;\n }\")\n \n@@ -1062,19 +1058,16 @@\n ;; ----------------------------------------------------------------------\n \n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=da,d,a,d,a,d,a,d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=da,d,d,d,d\")\n \t(ashift:SI\n-\t (match_operand:SI 1 \"register_operand\" \"0,0,0,0,0,0,0,0\")\n-\t (match_operand:QI 2 \"nonmemory_operand\" \"J,K,K,M,M,L,L,di\")))]\n+\t (match_operand:SI 1 \"register_operand\" \"0,0,0,0,0\")\n+\t (match_operand:QI 2 \"nonmemory_operand\" \"J,K,M,L,di\")))]\n   \"\"\n   \"@\n   add %0,%0\n   asl2 %0\n-  add %0,%0\\;add %0,%0\n   asl2 %0\\;add %0,%0\n-  add %0,%0\\;add %0,%0\\;add %0,%0\n   asl2 %0\\;asl2 %0\n-  add %0,%0\\;add %0,%0\\;add %0,%0\\;add %0,%0\n   asl %2,%0\"\n   [(set_attr \"cc\" \"set_zn_c0\")])\n "}]}