{"sha": "a98217beaa82d397893ea6f9eed30e74937427a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4MjE3YmVhYTgyZDM5Nzg5M2VhNmY5ZWVkMzBlNzQ5Mzc0MjdhMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-28T08:54:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:54:41Z"}, "message": "[Ada] Better accuracy in float-to-fixed conversions\n\nThis patch improves the accuracy of conversions from a floating point to\na fixed point type when the fixed point type has a specified Snall that is\nnot a power of two. Previously the conversion of Fixed_Point_Type'First to\nsome floating point number and back to Fixed_Point_Type raised Constraint\nerror. This result is within the accuracy imposed by tne Numerics annex of\nthe RM but is certainly undesirable. This patch transforms the conversion\nto avoid extra manipulations of the 'Small of the type, so that the\nidentity:\n\n      Fixed_T (Float_T (Fixed_Val)) = Fixed_Val\n\nholds over the range of Fixed_T.\n\n2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Real_Range_Check): Specialize float-to-fixed conversions\n\twhen bounds of fixed type are static, to remove some spuerfluous\n\timplicit conversions and provide an accurate result when converting\n\tback and forth between the fixed point type and a floating point type.\n\ngcc/testsuite/\n\n\t* gnat.dg/fixedpnt5.adb: New testcase.\n\nFrom-SVN: r260832", "tree": {"sha": "e3abc5a772b665709c616a533047a512fb4b3fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3abc5a772b665709c616a533047a512fb4b3fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98217beaa82d397893ea6f9eed30e74937427a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98217beaa82d397893ea6f9eed30e74937427a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98217beaa82d397893ea6f9eed30e74937427a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98217beaa82d397893ea6f9eed30e74937427a2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4bf7b62faf2fa3db8f1d79659c703d24fc6a555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bf7b62faf2fa3db8f1d79659c703d24fc6a555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bf7b62faf2fa3db8f1d79659c703d24fc6a555"}], "stats": {"total": 184, "additions": 166, "deletions": 18}, "files": [{"sha": "abcf424b309515105790ea62aa4ec4917d28fb90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a98217beaa82d397893ea6f9eed30e74937427a2", "patch": "@@ -1,3 +1,10 @@\n+2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Real_Range_Check): Specialize float-to-fixed conversions\n+\twhen bounds of fixed type are static, to remove some spuerfluous\n+\timplicit conversions and provide an accurate result when converting\n+\tback and forth between the fixed point type and a floating point type.\n+\n 2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprogram): Prevent creation of empty"}, {"sha": "caa64b96e41a3e9481409981bdc1217a073b5e7c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 97, "deletions": 18, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a98217beaa82d397893ea6f9eed30e74937427a2", "patch": "@@ -10937,8 +10937,13 @@ package body Exp_Ch4 is\n          Lo   : constant Node_Id   := Type_Low_Bound  (Target_Type);\n          Hi   : constant Node_Id   := Type_High_Bound (Target_Type);\n          Xtyp : constant Entity_Id := Etype (Operand);\n-         Conv : Node_Id;\n-         Tnn  : Entity_Id;\n+\n+         Conv   : Node_Id;\n+         Lo_Arg : Node_Id;\n+         Lo_Val : Node_Id;\n+         Hi_Arg : Node_Id;\n+         Hi_Val : Node_Id;\n+         Tnn    : Entity_Id;\n \n       begin\n          --  Nothing to do if conversion was rewritten\n@@ -11041,34 +11046,108 @@ package body Exp_Ch4 is\n \n          Tnn := Make_Temporary (Loc, 'T', Conv);\n \n+         --  For a conversion from Float to Fixed where the bounds of the\n+         --  fixed-point type are static, we can obtain a more accurate\n+         --  fixed-point value by converting the result of the floating-\n+         --  point expression to an appropriate integer type, and then\n+         --  performing an unchecked conversion to the target fixed-point\n+         --  type. The range check can then use the corresponding integer\n+         --  value of the bounds instead of requiring further conversions.\n+         --  This preserves the identity:\n+\n+         --        Fix_Val = Fixed_Type (Float_Type (Fix_Val))\n+\n+         --  which used to fail when Fix_Val was a bound of the type and\n+         --  the 'Small was not a representable number.\n+         --  This transformation requires an integer type large enough to\n+         --  accommodate a fixed-point value. This will not be the case\n+         --  in systems where Duration is larger than Long_Integer.\n+\n+         if Is_Ordinary_Fixed_Point_Type (Target_Type)\n+           and then Is_Floating_Point_Type (Operand_Type)\n+           and then RM_Size (Base_Type (Target_Type)) <=\n+             RM_Size (Standard_Long_Integer)\n+           and then Nkind (Lo) = N_Real_Literal\n+           and then Nkind (Hi) = N_Real_Literal\n+         then\n+            --  Find the integer type of the right size to perform an unchecked\n+            --  conversion to the target fixed-point type.\n+\n+            declare\n+               Int_Type : Entity_Id;\n+               Bfx_Type : constant Entity_Id := Base_Type (Target_Type);\n+\n+            begin\n+               if RM_Size (Bfx_Type) > RM_Size (Standard_Integer) then\n+                  Int_Type := Standard_Long_Integer;\n+\n+               elsif\n+                 RM_Size (Bfx_Type) > RM_Size (Standard_Short_Integer)\n+               then\n+                  Int_Type := Standard_Integer;\n+\n+               else\n+                  Int_Type := Standard_Short_Integer;\n+               end if;\n+\n+               --  Create integer objects for range checking of result.\n+\n+               Lo_Arg := Unchecked_Convert_To (Int_Type,\n+                           New_Occurrence_Of (Tnn, Loc));\n+               Lo_Val := Make_Integer_Literal (Loc,\n+                           Corresponding_Integer_Value (Lo));\n+\n+               Hi_Arg := Unchecked_Convert_To (Int_Type,\n+                           New_Occurrence_Of (Tnn, Loc));\n+               Hi_Val := Make_Integer_Literal (Loc,\n+                           Corresponding_Integer_Value (Hi));\n+\n+               --  Rewrite conversion as an integer conversion of the\n+               --  original floating-point expression, followed by an\n+               --  unchecked conversion to the target fixed-point type.\n+\n+               Conv   := Make_Unchecked_Type_Conversion (Loc,\n+                           Subtype_Mark =>\n+                             New_Occurrence_Of (Target_Type, Loc),\n+                           Expression   =>\n+                             Convert_To (Int_Type, Expression (Conv)));\n+            end;\n+\n+         else  -- For all other conversions\n+\n+            Lo_Arg := New_Occurrence_Of (Tnn, Loc);\n+            Lo_Val := Make_Attribute_Reference (Loc,\n+                       Attribute_Name => Name_First,\n+                         Prefix =>\n+                           New_Occurrence_Of (Target_Type, Loc));\n+\n+            Hi_Arg := New_Occurrence_Of (Tnn, Loc);\n+            Hi_Val := Make_Attribute_Reference (Loc,\n+                       Attribute_Name => Name_Last,\n+                         Prefix =>\n+                           New_Occurrence_Of (Target_Type, Loc));\n+         end if;\n+\n+         --  Build code for range checking\n+\n          Insert_Actions (N, New_List (\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Tnn,\n              Object_Definition   => New_Occurrence_Of (Btyp, Loc),\n              Constant_Present    => True,\n              Expression          => Conv),\n-\n            Make_Raise_Constraint_Error (Loc,\n-             Condition =>\n+              Condition =>\n               Make_Or_Else (Loc,\n-                Left_Opnd =>\n                   Make_Op_Lt (Loc,\n-                    Left_Opnd  => New_Occurrence_Of (Tnn, Loc),\n-                    Right_Opnd =>\n-                      Make_Attribute_Reference (Loc,\n-                        Attribute_Name => Name_First,\n-                        Prefix =>\n-                          New_Occurrence_Of (Target_Type, Loc))),\n+                    Left_Opnd  => Lo_Arg,\n+                    Right_Opnd => Lo_Val),\n \n                 Right_Opnd =>\n                   Make_Op_Gt (Loc,\n-                    Left_Opnd  => New_Occurrence_Of (Tnn, Loc),\n-                    Right_Opnd =>\n-                      Make_Attribute_Reference (Loc,\n-                        Attribute_Name => Name_Last,\n-                        Prefix =>\n-                          New_Occurrence_Of (Target_Type, Loc)))),\n-             Reason => CE_Range_Check_Failed)));\n+                    Left_Opnd  => Hi_Arg,\n+                    Right_Opnd => Hi_Val)),\n+              Reason => CE_Range_Check_Failed)));\n \n          Rewrite (N, New_Occurrence_Of (Tnn, Loc));\n          Analyze_And_Resolve (N, Btyp);"}, {"sha": "5f9d7f840ea80e351cd7eafab88fe6b21c9c0ed6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a98217beaa82d397893ea6f9eed30e74937427a2", "patch": "@@ -1,3 +1,7 @@\n+2018-05-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/fixedpnt5.adb: New testcase.\n+\n 2018-05-28  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/array31.adb: New testcase."}, {"sha": "7175ddc13f518096e61439cbd66145185ae24d0a", "filename": "gcc/testsuite/gnat.dg/fixedpnt5.adb", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98217beaa82d397893ea6f9eed30e74937427a2/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt5.adb?ref=a98217beaa82d397893ea6f9eed30e74937427a2", "patch": "@@ -0,0 +1,58 @@\n+--  { dg-do run }\n+\n+with Text_IO; use Text_IO;\n+with Ada.Numerics; use Ada.Numerics;\n+with Unchecked_Conversion;\n+\n+procedure Fixedpnt5 is\n+   --  Test conversions from Floating point to Fixed point types when the\n+   --  fixed type has a Small that is not a power of two. Verify that the\n+   --  conversions are reversible, so that:\n+   --\n+   --        Fixed_T (Float_T (Fixed_Var)) = Fixed_Var\n+   --\n+   --  for a range of fixed values, in particular at the boundary of type.\n+\n+   type T_Fixed_Type is delta PI/32768.0 range -PI .. PI - PI/32768.0;\n+   for T_Fixed_Type'Small use PI/32768.0;\n+\n+   function To_Fix is new Unchecked_Conversion (Short_Integer, T_Fixed_Type);\n+   Fixed_Point_Var : T_Fixed_Type;\n+   Float_Var       : Float;\n+\n+begin\n+   Fixed_Point_Var := -PI;\n+   Float_Var       := Float(Fixed_Point_Var);\n+   Fixed_Point_Var := T_Fixed_Type (Float_Var);\n+\n+   Fixed_Point_Var := T_Fixed_Type'First;\n+   Float_Var       := Float(Fixed_Point_Var);\n+   Fixed_Point_Var := T_Fixed_Type (Float_Var);\n+\n+   if Fixed_Point_Var /= T_Fixed_Type'First then\n+      raise Program_Error;\n+   end if;\n+\n+   fixed_point_var := t_fixed_type'Last;\n+   Float_Var       := Float(Fixed_Point_Var);\n+   Fixed_Point_Var := T_Fixed_Type (Float_Var);\n+\n+   if Fixed_Point_Var /= T_Fixed_Type'Last then\n+      raise Program_Error;\n+   end if;\n+\n+   for I in  -32768 ..  32767 loop\n+      fixed_Point_Var := To_Fix (Short_Integer (I));\n+      Float_Var := Float (Fixed_Point_Var);\n+      if T_Fixed_Type (Float_Var) /= FIxed_Point_Var then\n+         Put_Line (\"Not reversibloe\");\n+         Put_Line (Integer'Image (I));\n+         raise Program_Error;\n+      end if;\n+   end loop;\n+\n+   Fixed_Point_Var := T_Fixed_Type (Float_Var * 2.0);\n+   raise Program_Error;\n+exception\n+   when others => null;\n+end Fixedpnt5;"}]}