{"sha": "9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5OGIwNzhjODZjMjFhYTZhMmEyZmI0ZTViYzE5OGY2ZjFkZjI0Yw==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2014-06-27T06:52:18Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-27T06:52:18Z"}, "message": "c-parser.c (c_parser_declaration_or_fndef): Discard all type qualifiers in __auto_type for atomic types.\n\n\t* c-parser.c (c_parser_declaration_or_fndef): Discard all type\n\tqualifiers in __auto_type for atomic types.\n\t(c_parser_typeof_specifier): Discard all type qualifiers in\n\t__typeof__ for atomic types.\n\n\t* gcc.dg/typeof-2.c: New testcase.\n\nFrom-SVN: r212062", "tree": {"sha": "b588d0373131659bca29f2c2a1903cc3d85b46fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b588d0373131659bca29f2c2a1903cc3d85b46fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4443341a9e4b33ead4365160127d0a51a2452c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4443341a9e4b33ead4365160127d0a51a2452c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4443341a9e4b33ead4365160127d0a51a2452c72"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "fa7caacc422a4f0cf95b8aae4de458a846fcfeb7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "patch": "@@ -1,3 +1,10 @@\n+2014-06-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Discard all type\n+\tqualifiers in __auto_type for atomic types.\n+\t(c_parser_typeof_specifier): Discard all type qualifiers in\n+\t__typeof__ for atomic types.\n+\n 2014-06-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61162"}, {"sha": "797d1bc526c0f5f1b0221f0cf054a9c71012698c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "patch": "@@ -1720,14 +1720,10 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t      \" initializer\");\n \t\t  init = convert_lvalue_to_rvalue (init_loc, init, true, true);\n \t\t  tree init_type = TREE_TYPE (init.value);\n-\t\t  /* As with typeof, remove _Atomic and const\n-\t\t     qualifiers from atomic types.  */\n+\t\t  /* As with typeof, remove all qualifiers from atomic types.  */\n \t\t  if (init_type != error_mark_node && TYPE_ATOMIC (init_type))\n \t\t    init_type\n-\t\t      = c_build_qualified_type (init_type,\n-\t\t\t\t\t\t(TYPE_QUALS (init_type)\n-\t\t\t\t\t\t & ~(TYPE_QUAL_ATOMIC\n-\t\t\t\t\t\t     | TYPE_QUAL_CONST)));\n+\t\t      = c_build_qualified_type (init_type, TYPE_UNQUALIFIED);\n \t\t  bool vm_type = variably_modified_type_p (init_type,\n \t\t\t\t\t\t\t   NULL_TREE);\n \t\t  if (vm_type)\n@@ -3024,16 +3020,11 @@ c_parser_typeof_specifier (c_parser *parser)\n       if (was_vm)\n \tret.expr = c_fully_fold (expr.value, false, &ret.expr_const_operands);\n       pop_maybe_used (was_vm);\n-      /* For use in macros such as those in <stdatomic.h>, remove\n-\t _Atomic and const qualifiers from atomic types.  (Possibly\n-\t all qualifiers should be removed; const can be an issue for\n-\t more macros using typeof than just the <stdatomic.h>\n-\t ones.)  */\n+      /* For use in macros such as those in <stdatomic.h>, remove all\n+\t qualifiers from atomic types.  (const can be an issue for more macros\n+\t using typeof than just the <stdatomic.h> ones.)  */\n       if (ret.spec != error_mark_node && TYPE_ATOMIC (ret.spec))\n-\tret.spec = c_build_qualified_type (ret.spec,\n-\t\t\t\t\t   (TYPE_QUALS (ret.spec)\n-\t\t\t\t\t    & ~(TYPE_QUAL_ATOMIC\n-\t\t\t\t\t\t| TYPE_QUAL_CONST)));\n+\tret.spec = c_build_qualified_type (ret.spec, TYPE_UNQUALIFIED);\n     }\n   c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n   return ret;"}, {"sha": "a15e7c626efc23d727b81d708815bd7813950d74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "patch": "@@ -1,3 +1,7 @@\n+2014-06-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcc.dg/typeof-2.c: New testcase.\n+\n 2014-06-27  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/bounds-2.c: Adjust dg-output."}, {"sha": "e9169003a9b8638fde90257b373dd2ac2c542c3b", "filename": "gcc/testsuite/gcc.dg/typeof-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypeof-2.c?ref=9698b078c86c21aa6a2a2fb4e5bc198f6f1df24c", "patch": "@@ -0,0 +1,28 @@\n+/* Test qualifier discard of typeof for atomic types. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+extern int i;\n+\n+extern int * p;\n+\n+extern int _Atomic const ci;\n+extern __typeof (ci) i;\n+\n+extern int _Atomic volatile vi;\n+extern __typeof (vi) i;\n+\n+extern int * _Atomic restrict ri;\n+extern __typeof (ri) p;\n+\n+void f(void)\n+{\n+  __auto_type aci = ci;\n+  int *paci = &aci;\n+\n+  __auto_type avi = vi;\n+  int *pavi = &avi;\n+\n+  __auto_type ari = ri;\n+  int **pari = &ari;\n+}"}]}