{"sha": "6a734d618f8f49ea8560fae0a1808254e5a54419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3MzRkNjE4ZjhmNDllYTg1NjBmYWUwYTE4MDgyNTRlNWE1NDQxOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-02-05T05:24:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-05T05:24:18Z"}, "message": "basic_file_stdio.cc (__gnu_internal::fopen_mode): New function.\n\n2004-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Zack Weinberg  <zack@codesourcery.com>\n\n\t* config/io/basic_file_stdio.cc (__gnu_internal::fopen_mode):\n\tNew function.\n\t(__basic_file<char>::sys_open, __basic_file<char>::open): Use it.\n\t(__basic_file<char>::_M_open_mode): Delete.\n\t* config/io/basic_file_stdio.cc: Delete declaration of _M_open_mode.\n\n\t* testsuite/27_io/basic_filebuf/close/char/9964.cc\n\t* testsuite/27_io/basic_filebuf/open/char/9507.cc:\n\tCorrect flags to filebuf::open calls.\n\n\t* config/abi/alpha-freebsd5/baseline_symbols.txt\n\t* config/abi/alpha-linux-gnu/baseline_symbols.txt\n\t* config/abi/hppa-linux-gnu/baseline_symbols.txt\n\t* config/abi/i386-freebsd4/baseline_symbols.txt\n\t* config/abi/i386-freebsd5/baseline_symbols.txt\n\t* config/abi/i486-linux-gnu/baseline_symbols.txt\n\t* config/abi/ia64-linux-gnu/baseline_symbols.txt\n\t* config/abi/mips-linux-gnu/baseline_symbols.txt\n\t* config/abi/sparc-freebsd5/baseline_symbols.txt\n\t* config/abi/sparc-linux-gnu/baseline_symbols.txt\n\t* config/abi/x86_64-linux-gnu/baseline_symbols.txt:\n\tRemove entry for __basic_file<char>::_M_open_mode.\n\nFrom-SVN: r77298", "tree": {"sha": "5134bbd68c2f1f5e6f3dd0e39597f684172ba154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5134bbd68c2f1f5e6f3dd0e39597f684172ba154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a734d618f8f49ea8560fae0a1808254e5a54419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a734d618f8f49ea8560fae0a1808254e5a54419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a734d618f8f49ea8560fae0a1808254e5a54419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a734d618f8f49ea8560fae0a1808254e5a54419/comments", "author": null, "committer": null, "parents": [{"sha": "f583e45212b6c2960801fc74c34104bb9064fc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f583e45212b6c2960801fc74c34104bb9064fc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f583e45212b6c2960801fc74c34104bb9064fc95"}], "stats": {"total": 245, "additions": 120, "deletions": 125}, "files": [{"sha": "b58bf88239832400294a493537b1935368d8b9ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 69, "deletions": 43, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -1,3 +1,29 @@\n+2004-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/io/basic_file_stdio.cc (__gnu_internal::fopen_mode):\n+\tNew function.\n+\t(__basic_file<char>::sys_open, __basic_file<char>::open): Use it.\n+\t(__basic_file<char>::_M_open_mode): Delete.\n+\t* config/io/basic_file_stdio.cc: Delete declaration of _M_open_mode.\n+\n+\t* testsuite/27_io/basic_filebuf/close/char/9964.cc\n+\t* testsuite/27_io/basic_filebuf/open/char/9507.cc:\n+\tCorrect flags to filebuf::open calls.\n+\n+\t* config/abi/alpha-freebsd5/baseline_symbols.txt\n+\t* config/abi/alpha-linux-gnu/baseline_symbols.txt\n+\t* config/abi/hppa-linux-gnu/baseline_symbols.txt\n+\t* config/abi/i386-freebsd4/baseline_symbols.txt\n+\t* config/abi/i386-freebsd5/baseline_symbols.txt\n+\t* config/abi/i486-linux-gnu/baseline_symbols.txt\n+\t* config/abi/ia64-linux-gnu/baseline_symbols.txt\n+\t* config/abi/mips-linux-gnu/baseline_symbols.txt\n+\t* config/abi/sparc-freebsd5/baseline_symbols.txt\n+\t* config/abi/sparc-linux-gnu/baseline_symbols.txt\n+\t* config/abi/x86_64-linux-gnu/baseline_symbols.txt:\n+\tRemove entry for __basic_file<char>::_M_open_mode.\n+\n 2004-02-04  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/performance/20_util/allocator/insert.cc (main): Tweak.\n@@ -6,16 +32,16 @@\n \n \t* testsuite/performance/20_util/producer_consumer.cc: New.\n \t* testsuite/performance/20_util/allocator/insert_insert.cc: Two loops.\n-\t\n+\n 2004-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* testsuite/performance/20_util/allocator.cc: Move to..\n-\t* testsuite/performance/20_util/allocator/insert.cc: ...here.\t\n+\t* testsuite/performance/20_util/allocator/insert.cc: ...here.\n \t* testsuite/performance/20_util/allocator_thread.cc: Move to...\n \t* testsuite/performance/20_util/allocator/insert_insert.cc: ...here.\n \t* testsuite/performance/20_util/allocator_map_thread.cc: Move to...\n \t* testsuite/performance/20_util/allocator/map_thread.cc: ...here.\n-\t\n+\n 2004-02-04  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/faq/index.html: Recommend using LD_LIBRARY_PATH.\n@@ -32,11 +58,11 @@\n \n 2004-02-03  Felix Yen  <fwy@alumni.brown.edu>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* testsuite/performance/20_util/allocator.cc: Add map,\n \tdeque, set tests.\n \t* testsuite/performance/20_util/allocator_thread.cc: Same.\n-\t\n+\n 2004-02-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (insert(iterator)): Remove,\n@@ -71,29 +97,29 @@\n \n 2004-02-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * docs/html/19_diagnostics/howto.html: Move verbose terminate\n-        documentation...\n-        * docs/html/18_support/howto.html: Here. \n-        * docs/html/documentation.html: Add reference here.\n- \n+\t* docs/html/19_diagnostics/howto.html: Move verbose terminate\n+\tdocumentation...\n+\t* docs/html/18_support/howto.html: Here.\n+\t* docs/html/documentation.html: Add reference here.\n+\n 2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/c++locale_internal.h: Remove prototypes\n \tof no longer used GLIBC thread locale functions.\n \n 2004-02-02  Eric Christopher  <echristo@redhat.com>\n-            Zack Weinberg  <zack@codesourcery.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n \n \t* testsuite/22_locale/collate/compare/wchar_t/2.cc: Remove xfail. Use\n-        -finput-charset.\n-        * testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc: Ditto.\n-        * testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc: Ditto\n+\t-finput-charset.\n+\t* testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc: Ditto.\n+\t* testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc: Ditto\n \t* testsuite/22_locale/collate/hash/wchar_t/2.cc: Ditto.\n-        * testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc: Ditto.\n-        * testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc: Ditto.\n-        * testsuite/22_locale/collate/transform/wchar_t/2.cc: Ditto.\n-        * testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc: Ditto.\n-        * testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc:\n+\t* testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc: Ditto.\n+\t* testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc: Ditto.\n+\t* testsuite/22_locale/collate/transform/wchar_t/2.cc: Ditto.\n+\t* testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc: Ditto.\n+\t* testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc:\n \tDitto.\n \n 2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n@@ -380,10 +406,10 @@\n \n \tPR libstdc++/11584\n \t* include/bits/ios_base.h (ios_base::_M_grow_words):  Add\n-        iword/pword selector.\n+\tiword/pword selector.\n \t(ios_base::iword, ios_base::pword):  Use it.\n \t* src/ios.cc (ios_base::_M_grow_words):  Clear _M_word_zero\n-        iword or pword member on alloc failure.\n+\tiword or pword member on alloc failure.\n \t* testsuite/27_io/ios_base/storage/11584.cc:  New test.\n \n 2004-01-27  Ulrich Weigand  <uweigand@de.ibm.com>\n@@ -964,28 +990,28 @@\n \t* include/bits/stl_list.h:\n \t* include/bits/list.tc:\n \t* src/list.cc:\n-        Performance enhancements for destructor, push_front(),\n-        push_back(), pop_front(), pop_back(), sort()\n-        Eliminated static_casts where possible.\n-        Moved code out of header files into new src/list.cc\n-        implementation file for library where possible.\n-        Remove inheritance from iterator class and create separate\n-        classes for non-constant and constant iterators.\n+\tPerformance enhancements for destructor, push_front(),\n+\tpush_back(), pop_front(), pop_back(), sort()\n+\tEliminated static_casts where possible.\n+\tMoved code out of header files into new src/list.cc\n+\timplementation file for library where possible.\n+\tRemove inheritance from iterator class and create separate\n+\tclasses for non-constant and constant iterators.\n \t* include/bits/stl_tree.h (_Rb_tree class):\n \t* src/tree.cc:\n-        Only erase contents in destructor.\n-        Eliminate unnecessary initialization in assignment operator.\n-        Optimize for the nominal case by not checking whether\n-        container is empty in clear().\n-        Re-order test in _M_insert() to improve performance.\n-        Move initialization of new node's left & right pointers to\n-        src/tree.cc to where new node's colour is initialized\n-        and to reduce the amount of inline code.\n-        Use  _M_leftmost() and _M_end() to improve readability where\n-        appropriate.\n-        Create separate classes for non-constant and constant\n-        iterators to clarify code, avoid extra template parameters and\n-        casting away constness.\n+\tOnly erase contents in destructor.\n+\tEliminate unnecessary initialization in assignment operator.\n+\tOptimize for the nominal case by not checking whether\n+\tcontainer is empty in clear().\n+\tRe-order test in _M_insert() to improve performance.\n+\tMove initialization of new node's left & right pointers to\n+\tsrc/tree.cc to where new node's colour is initialized\n+\tand to reduce the amount of inline code.\n+\tUse  _M_leftmost() and _M_end() to improve readability where\n+\tappropriate.\n+\tCreate separate classes for non-constant and constant\n+\titerators to clarify code, avoid extra template parameters and\n+\tcasting away constness.\n \n 2004-01-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -1040,7 +1066,7 @@\n \tredundant #include.\n \n 2004-01-06  Benjamin Kosnik  <bkoz@redhat.com>\n-            Stefan Olsson  <stefan@snon.net>\n+\t    Stefan Olsson  <stefan@snon.net>\n \n \t* scripts/check_performance: Use -pthread.\n \t* testsuite/performance/allocator.cc: Tweaks, add list."}, {"sha": "8c680d21e93fcca22027a23ef1f013a71aecdea3", "filename": "libstdc++-v3/config/abi/alpha-freebsd5/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-freebsd5%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-freebsd5%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-freebsd5%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "b4371cc950141cbd2bfb4aa4aa2f8cf130713ac9", "filename": "libstdc++-v3/config/abi/alpha-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -982,7 +982,6 @@ FUNC:_ZNSt11__timepunctIwED0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED2Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4syncEv@@GLIBCPP_3.2"}, {"sha": "365807286bebbe001a961cf1f881930dfd011564", "filename": "libstdc++-v3/config/abi/hppa-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fhppa-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fhppa-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fhppa-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "8e1f762908e7237d0fd899d188dfcbe42feaa2fe", "filename": "libstdc++-v3/config/abi/i386-freebsd4/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -553,7 +553,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "f58249fc8475fbe7b6230e340847c0e8ce1f0bcc", "filename": "libstdc++-v3/config/abi/i386-freebsd5/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd5%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd5%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd5%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "ae9a71e3bdcc0b094088078728b2a18eec06bb20", "filename": "libstdc++-v3/config/abi/i486-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -999,7 +999,6 @@ FUNC:_ZNSt11__timepunctIwED0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED2Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "423b0e7eb82a86387627ecf350a86df237d5b7bf", "filename": "libstdc++-v3/config/abi/ia64-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -982,7 +982,6 @@ FUNC:_ZNSt11__timepunctIwED0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11__timepunctIwED2Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4syncEv@@GLIBCPP_3.2"}, {"sha": "a8d1bdf8409fd58df60aaaa26ec0b57c638730f5", "filename": "libstdc++-v3/config/abi/mips-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fmips-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fmips-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fmips-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "dbf935b9b3eb4182ff4e167249741ac9f8f2966d", "filename": "libstdc++-v3/config/abi/sparc-freebsd5/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-freebsd5%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-freebsd5%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-freebsd5%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "451dc1fad899cc81e24926ca45c3f9488c5f4041", "filename": "libstdc++-v3/config/abi/sparc-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fsparc-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -1005,7 +1005,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "2ad6eabca948fb5c39dcd3ad4e1acba2332d08bf", "filename": "libstdc++-v3/config/abi/x86_64-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -946,7 +946,6 @@ FUNC:_ZNSt11range_errorC2ERKSs@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD0Ev@@GLIBCPP_3.2\n FUNC:_ZNSt11range_errorD1Ev@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE10sys_ungetcEi@@GLIBCPP_3.2\n-FUNC:_ZNSt12__basic_fileIcE12_M_open_modeESt13_Ios_OpenmodeRiS2_Pc@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE16showmanyc_helperEv@@GLIBCPP_3.2.3\n FUNC:_ZNSt12__basic_fileIcE2fdEv@@GLIBCPP_3.2\n FUNC:_ZNSt12__basic_fileIcE4openEPKcSt13_Ios_Openmodei@@GLIBCPP_3.2"}, {"sha": "b1d55d0e02e09a46150ff83474803ca9f274494c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 43, "deletions": 62, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -70,6 +70,43 @@\n \n #include <limits> // For <off_t>::max() and min()\n \n+namespace __gnu_internal\n+{\n+  // Map ios_base::openmode flags to a string for use in fopen().\n+  // Table of valid combinations as given in [lib.filebuf.members]/2.\n+  static const char*\n+  fopen_mode(std::ios_base::openmode mode)\n+  {\n+    enum \n+      {\n+\tin     = std::ios_base::in,\n+\tout    = std::ios_base::out,\n+\ttrunc  = std::ios_base::trunc,\n+\tapp    = std::ios_base::app,\n+\tbinary = std::ios_base::binary\n+      };\n+    \n+    switch (mode & (in|out|trunc|app|binary))\n+      {\n+      case (   out                 ): return \"w\";  \n+      case (   out      |app       ): return \"a\";  \n+      case (   out|trunc           ): return \"w\";  \n+      case (in                     ): return \"r\";  \n+      case (in|out                 ): return \"r+\"; \n+      case (in|out|trunc           ): return \"w+\"; \n+\t\n+      case (   out          |binary): return \"wb\"; \n+      case (   out      |app|binary): return \"ab\"; \n+      case (   out|trunc    |binary): return \"wb\"; \n+      case (in              |binary): return \"rb\"; \n+      case (in|out          |binary): return \"r+b\";\n+      case (in|out|trunc    |binary): return \"w+b\";\n+\t\n+      default: return 0; // invalid\n+      }\n+  }\n+} // namespace __gnu_internal\n+\n namespace std \n {\n   // Definitions for __basic_file<char>.\n@@ -79,53 +116,6 @@ namespace std\n   __basic_file<char>::~__basic_file()\n   { this->close(); }\n       \n-  void \n-  __basic_file<char>::_M_open_mode(ios_base::openmode __mode, int& __p_mode, \n-\t\t\t\t   int&, char* __c_mode)\n-  {  \n-    bool __testb = __mode & ios_base::binary;\n-    bool __testi = __mode & ios_base::in;\n-    bool __testo = __mode & ios_base::out;\n-    bool __testt = __mode & ios_base::trunc;\n-    bool __testa = __mode & ios_base::app;\n-      \n-    // Set __c_mode for use in fopen.\n-    // Set __p_mode for use in open.\n-    if (!__testi && __testo && !__testt && !__testa)\n-      {\n-\tstrcpy(__c_mode, \"w\");\n-\t__p_mode = O_WRONLY | O_CREAT;\n-      }\n-    if (!__testi && __testo && !__testt && __testa)\n-      {\n-\tstrcpy(__c_mode, \"a\");\n-\t__p_mode = O_WRONLY | O_CREAT | O_APPEND;\n-      }\n-    if (!__testi && __testo && __testt && !__testa)\n-      {\n-\tstrcpy(__c_mode, \"w\");\n-\t__p_mode = O_WRONLY | O_CREAT | O_TRUNC;\n-      }\n-\n-    if (__testi && !__testo && !__testt && !__testa)\n-      {\n-\tstrcpy(__c_mode, \"r\");\n-\t__p_mode = O_RDONLY;\n-      }\n-    if (__testi && __testo && !__testt && !__testa)\n-      {\n-\tstrcpy(__c_mode, \"r+\");\n-\t__p_mode = O_RDWR | O_CREAT;\n-      }\n-    if (__testi && __testo && __testt && !__testa)\n-      {\n-\tstrcpy(__c_mode, \"w+\");\n-\t__p_mode = O_RDWR | O_CREAT | O_TRUNC;\n-      }\n-    if (__testb)\n-      strcat(__c_mode, \"b\");\n-  }\n-  \n   __basic_file<char>*\n   __basic_file<char>::sys_open(__c_file* __file, ios_base::openmode) \n   {\n@@ -144,12 +134,9 @@ namespace std\n   __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode)\n   {\n     __basic_file* __ret = NULL;\n-    int __p_mode = 0;\n-    int __rw_mode = 0;\n-    char __c_mode[4];\n-    \n-    _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n-    if (!this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))\n+    const char* __c_mode = __gnu_internal::fopen_mode(__mode);\n+    if (__c_mode && !this->is_open() \n+\t&& (_M_cfile = fdopen(__fd, __c_mode)))\n       {\n \t_M_cfile_created = true;\n \tif (__fd == 0)\n@@ -164,13 +151,8 @@ namespace std\n \t\t\t   int /*__prot*/)\n   {\n     __basic_file* __ret = NULL;\n-    int __p_mode = 0;\n-    int __rw_mode = 0;\n-    char __c_mode[4];\n-      \n-    _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n-\n-    if (!this->is_open())\n+    const char* __c_mode = __gnu_internal::fopen_mode(__mode);\n+    if (__c_mode && !this->is_open())\n       {\n #ifdef _GLIBCXX_USE_LFS\n \tif ((_M_cfile = fopen64(__name, __c_mode)))\n@@ -309,5 +291,4 @@ namespace std\n #endif\n     return 0;\n   }\n-\n }  // namespace std"}, {"sha": "57ff4326e6b190498d5f9c153ca4186e26450dce", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,11 +62,7 @@ namespace std\n \n     public:\n       __basic_file(__c_lock* __lock = 0);\n-      \n-      void \n-      _M_open_mode(ios_base::openmode __mode, int& __p_mode, int& __rw_mode, \n-\t\t   char* __c_mode);\n-      \n+\n       __basic_file* \n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n "}, {"sha": "bd74fad34bf07d9fbb195305db73b6d756d5c099", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/9964.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -59,15 +59,15 @@ void test_07()\n   \n   filebuf fb;\n   sleep(1);\n-  filebuf* ret = fb.open(name, ios_base::out | ios_base::trunc);\n+  filebuf* ret = fb.open(name, ios_base::in | ios_base::out);\n   VERIFY( ret != NULL );\n   VERIFY( fb.is_open() );\n \n   sleep(3);\n   fb.sputc('a');\n \n   ret = fb.close();\n-  VERIFY( ret == NULL );\n+  VERIFY( ret != NULL );\n   VERIFY( !fb.is_open() );\n }\n "}, {"sha": "b4da4dc5fe4f9465b8bfd907261146cbeebf6703", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/9507.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a734d618f8f49ea8560fae0a1808254e5a54419/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc?ref=6a734d618f8f49ea8560fae0a1808254e5a54419", "patch": "@@ -53,7 +53,10 @@ void test_06()\n     }\n \n   std::filebuf fbuf;\n-  std::filebuf* r = fbuf.open(name, std::ios_base::out | std::ios_base::ate);\n+  std::filebuf* r = fbuf.open(name,\n+\t\t\t      std::ios_base::in \n+\t\t\t      | std::ios_base::out\n+\t\t\t      | std::ios_base::ate);\n   VERIFY( !fbuf.is_open() );\n   VERIFY( r == NULL );\n }"}]}