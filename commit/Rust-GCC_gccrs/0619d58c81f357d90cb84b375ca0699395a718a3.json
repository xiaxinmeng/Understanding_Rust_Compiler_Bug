{"sha": "0619d58c81f357d90cb84b375ca0699395a718a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxOWQ1OGM4MWYzNTdkOTBjYjg0YjM3NWNhMDY5OTM5NWE3MThhMw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-16T18:19:42Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-16T18:19:42Z"}, "message": "[ARM/AArch64][testsuite] Add explicit dependency on Neon Cumulative Saturation flag\n\n        * gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n        (Set_Neon_Cumulative_Sat): Add parameter.\n        (__set_neon_cumulative_sat): Support new parameter.\n        * gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc\n        (TEST_BINARY_SAT_OP1): Call Set_Neon_Cumulative_Sat with new\n        argument.\n        * gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc\n        (TEST_UNARY_SAT_OP1): Call Set_Neon_Cumulative_Sat with new\n        argument.\n\nFrom-SVN: r219764", "tree": {"sha": "cffc7deca17872d0acae8301869ddce9222f3fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffc7deca17872d0acae8301869ddce9222f3fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0619d58c81f357d90cb84b375ca0699395a718a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0619d58c81f357d90cb84b375ca0699395a718a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0619d58c81f357d90cb84b375ca0699395a718a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0619d58c81f357d90cb84b375ca0699395a718a3/comments", "author": null, "committer": null, "parents": [{"sha": "a220c9da9ea61712651df770e4699404f83e77da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a220c9da9ea61712651df770e4699404f83e77da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a220c9da9ea61712651df770e4699404f83e77da"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "b7bb10400e11f5bf248d4d6d62d83b4bc9a73aaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0619d58c81f357d90cb84b375ca0699395a718a3", "patch": "@@ -1,3 +1,15 @@\n+2015-01-16  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+        * gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+        (Set_Neon_Cumulative_Sat): Add parameter.\n+        (__set_neon_cumulative_sat): Support new parameter.\n+        * gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc\n+        (TEST_BINARY_SAT_OP1): Call Set_Neon_Cumulative_Sat with new\n+        argument.\n+        * gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc\n+        (TEST_UNARY_SAT_OP1): Call Set_Neon_Cumulative_Sat with new\n+        argument.\n+\n 2015-01-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* g++.dg/tsan/vptr_benign_race.C: New testcase."}, {"sha": "6464c664c74bbdebfb00d64adfc8f7e264f46d59", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=0619d58c81f357d90cb84b375ca0699395a718a3", "patch": "@@ -255,35 +255,37 @@ typedef union {\n #endif /* __ORDER_BIG_ENDIAN__ */\n \n #define Neon_Cumulative_Sat  __read_neon_cumulative_sat()\n-#define Set_Neon_Cumulative_Sat(x)  __set_neon_cumulative_sat((x))\n+/* We need a fake dependency to ensure correct ordering of asm\n+   statements to preset the QC flag value, and Neon operators writing\n+   to QC. */\n+#define Set_Neon_Cumulative_Sat(x, depend)\t\\\n+  __set_neon_cumulative_sat((x), (depend))\n \n #if defined(__aarch64__)\n static volatile int __read_neon_cumulative_sat (void) {\n     _ARM_FPSCR _afpscr_for_qc;\n     asm volatile (\"mrs %0,fpsr\" : \"=r\" (_afpscr_for_qc));\n     return _afpscr_for_qc.b.QC;\n }\n-static void __set_neon_cumulative_sat (int x) {\n-    _ARM_FPSCR _afpscr_for_qc;\n-    asm volatile (\"mrs %0,fpsr\" : \"=r\" (_afpscr_for_qc));\n-    _afpscr_for_qc.b.QC = x;\n-    asm volatile (\"msr fpsr,%0\" : : \"r\" (_afpscr_for_qc));\n-    return;\n-}\n+#define __set_neon_cumulative_sat(x, depend) {\t\t\t\t\\\n+    _ARM_FPSCR _afpscr_for_qc;\t\t\t\t\t\t\\\n+    asm volatile (\"mrs %0,fpsr\" : \"=r\" (_afpscr_for_qc));\t\t\\\n+    _afpscr_for_qc.b.QC = x;\t\t\t\t\t\t\\\n+    asm volatile (\"msr fpsr,%1\" : \"=X\" (depend) : \"r\" (_afpscr_for_qc)); \\\n+  }\n #else\n static volatile int __read_neon_cumulative_sat (void) {\n     _ARM_FPSCR _afpscr_for_qc;\n     asm volatile (\"vmrs %0,fpscr\" : \"=r\" (_afpscr_for_qc));\n     return _afpscr_for_qc.b.QC;\n }\n \n-static void __set_neon_cumulative_sat (int x) {\n-    _ARM_FPSCR _afpscr_for_qc;\n-    asm volatile (\"vmrs %0,fpscr\" : \"=r\" (_afpscr_for_qc));\n-    _afpscr_for_qc.b.QC = x;\n-    asm volatile (\"vmsr fpscr,%0\" : : \"r\" (_afpscr_for_qc));\n-    return;\n-}\n+#define __set_neon_cumulative_sat(x, depend) {\t\t\t\t\\\n+    _ARM_FPSCR _afpscr_for_qc;\t\t\t\t\t\t\\\n+    asm volatile (\"vmrs %0,fpscr\" : \"=r\" (_afpscr_for_qc));\t\t\\\n+    _afpscr_for_qc.b.QC = x;\t\t\t\t\t\t\\\n+    asm volatile (\"vmsr fpscr,%1\" : \"=X\" (depend) : \"r\" (_afpscr_for_qc)); \\\n+  }\n #endif\n \n /* Declare expected cumulative saturation results, one for each"}, {"sha": "c09a468945b2572f82ff39b9dd08883f7f1bab4e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_sat_op.inc?ref=0619d58c81f357d90cb84b375ca0699395a718a3", "patch": "@@ -18,7 +18,7 @@ void FNNAME (INSN_NAME) (void)\n   /* vector_res = OP(vector1,vector2), then store the result.  */\n \n #define TEST_BINARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  Set_Neon_Cumulative_Sat(0);\t\t\t\t\t\t\\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n \t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\"}, {"sha": "0da1426e875554c49c0402853d13efa6e4794dbc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0619d58c81f357d90cb84b375ca0699395a718a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc?ref=0619d58c81f357d90cb84b375ca0699395a718a3", "patch": "@@ -17,7 +17,7 @@ void FNNAME (INSN_NAME) (void)\n {\n   /* y=OP(x), then store the result.  */\n #define TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n-  Set_Neon_Cumulative_Sat(0);\t\t\t\t\t\t\\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n   VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n     INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n     vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\"}]}