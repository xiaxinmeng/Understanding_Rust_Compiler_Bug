{"sha": "dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiOGJmZThjNWY2OTdlYzNmOTQyNTEwMjJhYWNjZDEzZjk1ZjRlOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-06T09:06:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-06T09:06:59Z"}, "message": "[multiple changes]\n\n2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/std_sstream.h (_M_sync): When the caller is\n\tsetbuf, don't trust _M_string.capacity() to be the size of\n\tthe buffer area, use _M_string.size() in this case.\n\t* testsuite/27_io/basic_stringbuf/setbuf/char/4.cc: New.\n\t* testsuite/27_io/basic_stringbuf/setbuf/wchar_t/4.cc: Likewise.\n\n\t* include/bits/sstream.tcc (overflow): Avoid calling string::assign\n\tunnecessarily when the current _M_string is empty.\n\n2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (__reverse(bidirectional_iterator_tag)):\n\tAvoid iterator postincrement.\n\t(__rotate): Likewise.\n\n\t* include/bits/stl_algo.h: Minor formatting tweaks.\n\n2004-10-06  Christopher Jefferson <caj@cs.york.ac.uk>\n\n\t* include/bits/stl_algo.h (__reverse(random_access_iterator_tag)):\n\tAvoid iterator postincrement; fix swapping middle element with\n\titself on odd-length inputs.\n\nFrom-SVN: r88593", "tree": {"sha": "a61ec5e853da128ae4a816a6a9277aa4e371d323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a61ec5e853da128ae4a816a6a9277aa4e371d323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/comments", "author": null, "committer": null, "parents": [{"sha": "490e962939608e17505eaa8a5358e59a26af0fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490e962939608e17505eaa8a5358e59a26af0fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490e962939608e17505eaa8a5358e59a26af0fe7"}], "stats": {"total": 199, "additions": 182, "deletions": 17}, "files": [{"sha": "9509eba9237a8a43aff1d13ef19df9d061b22d00", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -1,3 +1,28 @@\n+2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/std_sstream.h (_M_sync): When the caller is\n+\tsetbuf, don't trust _M_string.capacity() to be the size of\n+\tthe buffer area, use _M_string.size() in this case.\n+\t* testsuite/27_io/basic_stringbuf/setbuf/char/4.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/setbuf/wchar_t/4.cc: Likewise.\n+\n+\t* include/bits/sstream.tcc (overflow): Avoid calling string::assign\n+\tunnecessarily when the current _M_string is empty.\n+\n+2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (__reverse(bidirectional_iterator_tag)):\n+\tAvoid iterator postincrement.\n+\t(__rotate): Likewise.\n+\n+\t* include/bits/stl_algo.h: Minor formatting tweaks.\n+\n+2004-10-06  Christopher Jefferson <caj@cs.york.ac.uk>\n+\n+\t* include/bits/stl_algo.h (__reverse(random_access_iterator_tag)):\n+\tAvoid iterator postincrement; fix swapping middle element with\n+\titself on odd-length inputs.\n+\n 2004-10-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/17780"}, {"sha": "86daa6d3ca3149fc4c82df2c02f55ffb04b4a8b4", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -109,7 +109,8 @@ namespace std\n \t  const __size_type __len = std::min(__opt_len, __max_size);\n \t  __string_type __tmp;\n \t  __tmp.reserve(__len);\n-\t  __tmp.assign(_M_string.data(), this->epptr() - this->pbase());\n+\t  if (this->pbase())\n+\t    __tmp.assign(this->pbase(), this->epptr() - this->pbase());\n \t  _M_string.swap(__tmp);\n \t  _M_sync(const_cast<char_type*>(_M_string.data()),\n \t\t  this->gptr() - this->eback(), this->pptr() - this->pbase());"}, {"sha": "658a13435d2e0e31d1f1fff5ae00cd7ea7a4a274", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -1412,29 +1412,39 @@ namespace std\n   template<typename _BidirectionalIterator>\n     void\n     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,\n-\t\t\t  bidirectional_iterator_tag)\n+\t      bidirectional_iterator_tag)\n     {\n       while (true)\n \tif (__first == __last || __first == --__last)\n \t  return;\n \telse\n-\t  std::iter_swap(__first++, __last);\n+\t  {\n+\t    std::iter_swap(__first, __last);\n+\t    ++__first;\n+\t  }\n     }\n \n   /**\n    *  @if maint\n    *  This is an uglified reverse(_BidirectionalIterator,\n    *                              _BidirectionalIterator)\n-   *  overloaded for bidirectional iterators.\n+   *  overloaded for random access iterators.\n    *  @endif\n   */\n   template<typename _RandomAccessIterator>\n     void\n     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t\t\t  random_access_iterator_tag)\n+\t      random_access_iterator_tag)\n     {\n+      if (__first == __last)\n+\treturn;\n+      --__last;\n       while (__first < __last)\n-\tstd::iter_swap(__first++, --__last);\n+\t{\n+\t  std::iter_swap(__first, __last);\n+\t  ++__first;\n+\t  --__last;\n+\t}\n     }\n \n   /**\n@@ -1454,7 +1464,7 @@ namespace std\n     {\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t\t    _BidirectionalIterator>)\n+\t\t\t\t  _BidirectionalIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n       std::__reverse(__first, __last, std::__iterator_category(__first));\n     }\n@@ -1525,15 +1535,17 @@ namespace std\n     __rotate(_ForwardIterator __first,\n \t     _ForwardIterator __middle,\n \t     _ForwardIterator __last,\n-\t      forward_iterator_tag)\n+\t     forward_iterator_tag)\n     {\n-      if ((__first == __middle) || (__last  == __middle))\n+      if (__first == __middle || __last  == __middle)\n \treturn;\n \n       _ForwardIterator __first2 = __middle;\n       do\n \t{\n-\t  swap(*__first++, *__first2++);\n+\t  swap(*__first, *__first2);\n+\t  ++__first;\n+\t  ++__first2;\n \t  if (__first == __middle)\n \t    __middle = __first2;\n \t}\n@@ -1543,7 +1555,9 @@ namespace std\n \n       while (__first2 != __last)\n \t{\n-\t  swap(*__first++, *__first2++);\n+\t  swap(*__first, *__first2);\n+\t  ++__first;\n+\t  ++__first2;\n \t  if (__first == __middle)\n \t    __middle = __first2;\n \t  else if (__first2 == __last)\n@@ -1565,16 +1579,19 @@ namespace std\n     {\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t    _BidirectionalIterator>)\n+\t\t\t\t  _BidirectionalIterator>)\n \n-      if ((__first == __middle) || (__last  == __middle))\n+      if (__first == __middle || __last  == __middle)\n \treturn;\n \n       std::__reverse(__first,  __middle, bidirectional_iterator_tag());\n       std::__reverse(__middle, __last,   bidirectional_iterator_tag());\n \n       while (__first != __middle && __middle != __last)\n-\tswap(*__first++, *--__last);\n+\t{\n+\t  swap(*__first, *--__last);\n+\t  ++__first;\n+\t}\n \n       if (__first == __middle)\n \tstd::__reverse(__middle, __last,   bidirectional_iterator_tag());\n@@ -1596,9 +1613,9 @@ namespace std\n     {\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>)\n+\t\t\t\t  _RandomAccessIterator>)\n \n-      if ((__first == __middle) || (__last  == __middle))\n+      if (__first == __middle || __last  == __middle)\n \treturn;\n \n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type"}, {"sha": "fc4c42a3c7892c3cbfcd21c8e1e268faf29943ab", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -259,7 +259,13 @@ namespace std\n \t  this->setg(__base, __base + __i, __end);\n \tif (__testout)\n \t  {\n-\t    this->setp(__base, __base + _M_string.capacity());\n+\t    // If __base comes from setbuf we cannot trust capacity()\n+\t    // to match the size of the buffer area: in general, after\n+\t    // Step 1 above, _M_string.capacity() >= __n.\n+\t    if (__base == _M_string.data())\n+\t      this->setp(__base, __base + _M_string.capacity());\n+\t    else\n+\t      this->setp(__base, __end);\n \t    this->pbump(__o);\n \t    // egptr() always tracks the string end. When !__testin,\n \t    // for the correct functioning of the streambuf inlines"}, {"sha": "0449af2e0f2ebd0d1d4126c901c740a4f989b38d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/char/4.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fchar%2F4.cc?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -0,0 +1,58 @@\n+// 2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const unsigned max_size = 1 << 18;\n+\n+  char ref[max_size];\n+  memset(ref, '\\0', max_size);\n+\n+  char src[max_size * 2];\n+  memset(src, '\\1', max_size * 2);\n+\n+  for (unsigned i = 128; i <= max_size; i *= 2)\n+    {\n+      char* dest = new char[i * 2];\n+      memset(dest, '\\0', i * 2);\n+\n+      stringbuf sbuf;\n+      sbuf.pubsetbuf(dest, i);\n+\n+      sbuf.sputn(src, i * 2);\n+      VERIFY( !memcmp(dest + i, ref, i) );\n+      \n+      delete[] dest;\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e0eb8ded4cf6992f46cfd3366fc1aa5e8b04d1f7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/4.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc?ref=dbb8bfe8c5f697ec3f94251022aaccd13f95f4e9", "patch": "@@ -0,0 +1,58 @@\n+// 2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const unsigned max_size = 1 << 18;\n+\n+  wchar_t ref[max_size];\n+  wmemset(ref, L'\\0', max_size);\n+\n+  wchar_t src[max_size * 2];\n+  wmemset(src, L'\\1', max_size * 2);\n+\n+  for (unsigned i = 128; i <= max_size; i *= 2)\n+    {\n+      wchar_t* dest = new wchar_t[i * 2];\n+      wmemset(dest, L'\\0', i * 2);\n+\n+      wstringbuf sbuf;\n+      sbuf.pubsetbuf(dest, i);\n+\n+      sbuf.sputn(src, i * 2);\n+      VERIFY( !wmemcmp(dest + i, ref, i) );\n+      \n+      delete[] dest;\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}