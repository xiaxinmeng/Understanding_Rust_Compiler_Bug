{"sha": "35987ae95da833242def2e32fcc24100c20ef4b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5ODdhZTk1ZGE4MzMyNDJkZWYyZTMyZmNjMjQxMDBjMjBlZjRiNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-04T12:35:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-04T12:35:26Z"}, "message": "configure.ac: Check whether the underlying type of int64_t is long or long long.\n\n2014-06-04  Richard Biener  <rguenther@suse.de>\n\n\t* configure.ac: Check whether the underlying type of int64_t\n\tis long or long long.\n\t* configure: Regenerate.\n\t* config.in: Likewise.\n\t* hwint.h (HOST_WIDE_INT): Match the underlying type of int64_t.\n\t(HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n\nFrom-SVN: r211228", "tree": {"sha": "4a55929af84e7326cea76394ff68cffedc557108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a55929af84e7326cea76394ff68cffedc557108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35987ae95da833242def2e32fcc24100c20ef4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35987ae95da833242def2e32fcc24100c20ef4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35987ae95da833242def2e32fcc24100c20ef4b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35987ae95da833242def2e32fcc24100c20ef4b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea48022b83f9f960724dab8fd75a4dc9d6e2269"}], "stats": {"total": 217, "additions": 173, "deletions": 44}, "files": [{"sha": "71bad63bf07ec835cf5496fd0373858bb3a0172c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35987ae95da833242def2e32fcc24100c20ef4b5", "patch": "@@ -1,3 +1,12 @@\n+2014-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* configure.ac: Check whether the underlying type of int64_t\n+\tis long or long long.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\t* hwint.h (HOST_WIDE_INT): Match the underlying type of int64_t.\n+\t(HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n+\n 2014-06-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60098"}, {"sha": "fb7bf954db2203729f7aa2e9f0aaf0b3da5c92f7", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=35987ae95da833242def2e32fcc24100c20ef4b5", "patch": "@@ -1680,6 +1680,12 @@\n #endif\n \n \n+/* Define if int64_t uses long as underlying type. */\n+#ifndef USED_FOR_TARGET\n+#undef INT64_T_IS_LONG\n+#endif\n+\n+\n /* Define to the linker option to ignore unused dependencies. */\n #ifndef USED_FOR_TARGET\n #undef LD_AS_NEEDED_OPTION"}, {"sha": "6c35041b6a79039fa72b683e0f2b31dc7d833abd", "filename": "gcc/configure", "status": "modified", "additions": 89, "deletions": 4, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=35987ae95da833242def2e32fcc24100c20ef4b5", "patch": "@@ -6230,6 +6230,87 @@ if test x\"$ac_cv_c_uint64_t\" = x\"no\" -o x\"$ac_cv_c_int64_t\" = x\"no\"; then\n   as_fn_error \"uint64_t or int64_t not found\" \"$LINENO\" 5\n fi\n \n+# check what underlying integer type int64_t uses\n+ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for int64_t underlying type\" >&5\n+$as_echo_n \"checking for int64_t underlying type... \" >&6; }\n+if test \"${ac_cv_int64_t_type+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+template <typename T> struct X { };\n+template <>\n+struct X<long> { typedef long t; };\n+\n+int\n+main ()\n+{\n+X<int64_t>::t x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_int64_t_type=long\n+else\n+  ac_cv_int64_t_type=\"long long\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_int64_t_type\" >&5\n+$as_echo \"$ac_cv_int64_t_type\" >&6; }\n+if test \"$ac_cv_int64_t_type\" = \"long\"; then\n+\n+$as_echo \"#define INT64_T_IS_LONG 1\" >>confdefs.h\n+\n+else\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+template <typename T> struct X { };\n+template <>\n+struct X<long long> { typedef long long t; };\n+\n+int\n+main ()\n+{\n+X<int64_t>::t x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error \"error verifying int64_t uses long long\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n+\n+\n # ---------------------\n # Warnings and checking\n # ---------------------\n@@ -8746,7 +8827,6 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n \n \n-\n for ac_header in unordered_map\n do :\n   ac_fn_cxx_check_header_preproc \"$LINENO\" \"unordered_map\" \"ac_cv_header_unordered_map\"\n@@ -9163,20 +9243,25 @@ LIBS=\"$save_LIBS\"\n \n \n # Use <inttypes.h> only if it exists,\n-# doesn't clash with <sys/types.h>, and declares intmax_t.\n+# doesn't clash with <sys/types.h>, declares intmax_t and defines\n+# PRId64\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for inttypes.h\" >&5\n $as_echo_n \"checking for inttypes.h... \" >&6; }\n if test \"${gcc_cv_header_inttypes_h+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n+#define __STDC_FORMAT_MACROS\n #include <sys/types.h>\n #include <inttypes.h>\n int\n main ()\n {\n intmax_t i = -1;\n+#ifndef PRId64\n+choke me\n+#endif\n   ;\n   return 0;\n }\n@@ -17948,7 +18033,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17951 \"configure\"\n+#line 18036 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18054,7 +18139,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18057 \"configure\"\n+#line 18142 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "2cec62a7eaead684c54039e37a22ee2e401bf76e", "filename": "gcc/configure.ac", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=35987ae95da833242def2e32fcc24100c20ef4b5", "patch": "@@ -316,6 +316,35 @@ if test x\"$ac_cv_c_uint64_t\" = x\"no\" -o x\"$ac_cv_c_int64_t\" = x\"no\"; then\n   AC_MSG_ERROR([uint64_t or int64_t not found])\n fi\n \n+# check what underlying integer type int64_t uses\n+AC_LANG_PUSH(C++)\n+AC_CACHE_CHECK(for int64_t underlying type, ac_cv_int64_t_type, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+template <typename T> struct X { };\n+template <>\n+struct X<long> { typedef long t; };\n+]], [[X<int64_t>::t x;]])],[ac_cv_int64_t_type=long],[ac_cv_int64_t_type=\"long long\"])])\n+if test \"$ac_cv_int64_t_type\" = \"long\"; then\n+  AC_DEFINE(INT64_T_IS_LONG, 1,\n+  [Define if int64_t uses long as underlying type.])\n+else\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+template <typename T> struct X { };\n+template <>\n+struct X<long long> { typedef long long t; };\n+]], [[X<int64_t>::t x;]])],[],[AC_MSG_ERROR([error verifying int64_t uses long long])])\n+fi\n+AC_LANG_POP(C++)\n+\n+\n+\n+\n # ---------------------\n # Warnings and checking\n # ---------------------\n@@ -1055,13 +1084,18 @@ LIBS=\"$save_LIBS\"\n AC_SUBST(LDEXP_LIB)\n \n # Use <inttypes.h> only if it exists,\n-# doesn't clash with <sys/types.h>, and declares intmax_t.\n+# doesn't clash with <sys/types.h>, declares intmax_t and defines\n+# PRId64\n AC_MSG_CHECKING(for inttypes.h)\n AC_CACHE_VAL(gcc_cv_header_inttypes_h,\n [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-[[#include <sys/types.h>\n+[[#define __STDC_FORMAT_MACROS\n+#include <sys/types.h>\n #include <inttypes.h>]],\n-  [[intmax_t i = -1;]])],\n+  [[intmax_t i = -1;\n+#ifndef PRId64\n+choke me\n+#endif]])],\n   [gcc_cv_header_inttypes_h=yes],\n   [gcc_cv_header_inttypes_h=no])])\n AC_MSG_RESULT($gcc_cv_header_inttypes_h)"}, {"sha": "fd961fd91da4758f7ff62abeaff1280fe23e9009", "filename": "gcc/hwint.h", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35987ae95da833242def2e32fcc24100c20ef4b5/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=35987ae95da833242def2e32fcc24100c20ef4b5", "patch": "@@ -46,13 +46,11 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n #endif\n \n /* Set HOST_WIDE_INT, this should be always 64 bits.\n-\n-   With a sane ABI, 'long' is the largest efficient host integer type.\n-   Thus, we use that unless we have to use 'long long'\n-   because we're on a 32-bit host.  */\n+   The underlying type is matched to that of int64_t and assumed\n+   to be either long or long long.  */\n \n #define HOST_BITS_PER_WIDE_INT 64\n-#if HOST_BITS_PER_LONG == 64\n+#if INT64_T_IS_LONG   \n #   define HOST_WIDE_INT long\n #   define HOST_WIDE_INT_C(X) X ## L\n #else\n@@ -75,48 +73,45 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n    typedef before using the __asm_fprintf__ format attribute.  */\n typedef HOST_WIDE_INT __gcc_host_wide_int__;\n \n-/* Various printf format strings for HOST_WIDE_INT.  */\n-\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"L\"\n-  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n-# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n-# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n-    \"%016\" HOST_LONG_FORMAT \"x\"\n-#else\n-# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"LL\"\n-  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n-# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n-# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n-    \"%016\" HOST_LONG_LONG_FORMAT \"x\"\n-#endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n-\n-#define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n-#define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n-#define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n-#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_WIDE_INT_PRINT \"x\"\n-\n /* Provide C99 <inttypes.h> style format definitions for 64bits.  */\n #ifndef HAVE_INTTYPES_H\n+#if INT64_T_IS_LONG\n+# define GCC_PRI64 HOST_LONG_FORMAT\n+#else\n+# define GCC_PRI64 HOST_LONG_LONG_FORMAT\n+#endif\n #undef PRId64\n-#define PRId64 HOST_WIDE_INT_PRINT \"d\"\n+#define PRId64 GCC_PRI64 \"d\"\n #undef PRIi64\n-#define PRIi64 HOST_WIDE_INT_PRINT \"i\"\n+#define PRIi64 GCC_PRI64 \"i\"\n #undef PRIo64\n-#define PRIo64 HOST_WIDE_INT_PRINT \"o\"\n+#define PRIo64 GCC_PRI64 \"o\"\n #undef PRIu64\n-#define PRIu64 HOST_WIDE_INT_PRINT \"u\"\n+#define PRIu64 GCC_PRI64 \"u\"\n #undef PRIx64\n-#define PRIx64 HOST_WIDE_INT_PRINT \"x\"\n+#define PRIx64 GCC_PRI64 \"x\"\n #undef PRIX64\n-#define PRIX64 HOST_WIDE_INT_PRINT \"X\"\n+#define PRIX64 GCC_PRI64 \"X\"\n #endif\n \n+/* Various printf format strings for HOST_WIDE_INT.  */\n+\n+#if INT64_T_IS_LONG\n+# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"L\"\n+#else\n+# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"LL\"\n+#endif\n+\n+#define HOST_WIDE_INT_PRINT_DEC \"%\" PRId64\n+#define HOST_WIDE_INT_PRINT_DEC_C \"%\" PRId64 HOST_WIDE_INT_PRINT_C\n+#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" PRIu64\n+#define HOST_WIDE_INT_PRINT_HEX \"%#\" PRIx64\n+#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" PRIx64\n+#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%\" PRIx64 \"%016\" PRIx64\n+#define HOST_WIDE_INT_PRINT_PADDED_HEX \"%016\" PRIx64\n+\n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported\n    efficiently in hardware.  (That is, the widest integer type that fits\n    in a hardware register.)  Normally this is \"long\" but on some hosts it"}]}