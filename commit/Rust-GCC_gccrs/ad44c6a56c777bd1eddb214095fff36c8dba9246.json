{"sha": "ad44c6a56c777bd1eddb214095fff36c8dba9246", "node_id": "C_kwDOANBUbNoAKGFkNDRjNmE1NmM3NzdiZDFlZGRiMjE0MDk1ZmZmMzZjOGRiYTkyNDY", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-20T12:19:10Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-20T12:22:27Z"}, "message": "[Patch][GCC][AArch64] - Lower store and load neon builtins to gimple\n\n20-10-2021  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Jirui Wu  <jirui.wu@arm.com>\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_general_gimple_fold_builtin):\n\tlower vld1 and vst1 variants of the neon builtins\n\t* config/aarch64/aarch64-protos.h:\n\t(aarch64_general_gimple_fold_builtin): Add gsi parameter.\n\t* config/aarch64/aarch64.c (aarch64_general_gimple_fold_builtin):\n\tLikwise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/fmla_intrinsic_1.c: prevent over optimization.\n\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/fmul_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/mla_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/mls_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/mul_intrinsic_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmul_elem_1.c: Likewise.\n\t* gcc.target/aarch64/vclz.c: Likewise.\n\t* gcc.target/aarch64/vneg_s.c: Likewise.", "tree": {"sha": "2a2df53ba2c33f382cfeb88da41b8c1c473183a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a2df53ba2c33f382cfeb88da41b8c1c473183a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad44c6a56c777bd1eddb214095fff36c8dba9246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad44c6a56c777bd1eddb214095fff36c8dba9246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad44c6a56c777bd1eddb214095fff36c8dba9246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad44c6a56c777bd1eddb214095fff36c8dba9246/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914045dff10fbd27de27b90a0ac78a0058b2c86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914045dff10fbd27de27b90a0ac78a0058b2c86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914045dff10fbd27de27b90a0ac78a0058b2c86e"}], "stats": {"total": 623, "additions": 371, "deletions": 252}, "files": [{"sha": "a815e4cfbccab692ca688ba87c71b06c304abbfb", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -46,6 +46,7 @@\n #include \"emit-rtl.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"gimple-fold.h\"\n \n #define v8qi_UP  E_V8QImode\n #define v4hi_UP  E_V4HImode\n@@ -2399,11 +2400,65 @@ aarch64_general_fold_builtin (unsigned int fcode, tree type,\n   return NULL_TREE;\n }\n \n+enum aarch64_simd_type\n+get_mem_type_for_load_store (unsigned int fcode)\n+{\n+  switch (fcode)\n+  {\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v8qi)\n+    VAR1 (STORE1, st1 , 0, STORE, v8qi)\n+      return Int8x8_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v16qi)\n+    VAR1 (STORE1, st1 , 0, STORE, v16qi)\n+      return Int8x16_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v4hi)\n+    VAR1 (STORE1, st1 , 0, STORE, v4hi)\n+      return Int16x4_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v8hi)\n+    VAR1 (STORE1, st1 , 0, STORE, v8hi)\n+      return Int16x8_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v2si)\n+    VAR1 (STORE1, st1 , 0, STORE, v2si)\n+      return Int32x2_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v4si)\n+    VAR1 (STORE1, st1 , 0, STORE, v4si)\n+      return Int32x4_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v2di)\n+    VAR1 (STORE1, st1 , 0, STORE, v2di)\n+      return Int64x2_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v4hf)\n+    VAR1 (STORE1, st1 , 0, STORE, v4hf)\n+      return Float16x4_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v8hf)\n+    VAR1 (STORE1, st1 , 0, STORE, v8hf)\n+      return Float16x8_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v4bf)\n+    VAR1 (STORE1, st1 , 0, STORE, v4bf)\n+      return Bfloat16x4_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v8bf)\n+    VAR1 (STORE1, st1 , 0, STORE, v8bf)\n+      return Bfloat16x8_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v2sf)\n+    VAR1 (STORE1, st1 , 0, STORE, v2sf)\n+      return Float32x2_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v4sf)\n+    VAR1 (STORE1, st1 , 0, STORE, v4sf)\n+      return Float32x4_t;\n+    VAR1 (LOAD1, ld1 , 0, LOAD, v2df)\n+    VAR1 (STORE1, st1 , 0, STORE, v2df)\n+      return Float64x2_t;\n+    default:\n+      gcc_unreachable ();\n+      break;\n+  }\n+}\n+\n /* Try to fold STMT, given that it's a call to the built-in function with\n    subcode FCODE.  Return the new statement on success and null on\n    failure.  */\n gimple *\n-aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt)\n+aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n+\t\t\t\t     gimple_stmt_iterator *gsi)\n {\n   gimple *new_stmt = NULL;\n   unsigned nargs = gimple_call_num_args (stmt);\n@@ -2421,6 +2476,52 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt)\n \t\t\t\t\t       1, args[0]);\n \tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n \tbreak;\n+\n+     /*lower store and load neon builtins to gimple.  */\n+     BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n+\tif (!BYTES_BIG_ENDIAN)\n+\t  {\n+\t    enum aarch64_simd_type mem_type\n+\t      = get_mem_type_for_load_store(fcode);\n+\t    aarch64_simd_type_info simd_type\n+\t      = aarch64_simd_types[mem_type];\n+\t    tree elt_ptr_type = build_pointer_type (simd_type.eltype);\n+\t    tree zero = build_zero_cst (elt_ptr_type);\n+\t    gimple_seq stmts = NULL;\n+\t    tree base = gimple_convert (&stmts, elt_ptr_type,\n+\t\t\t\t\targs[0]);\n+\t    if (stmts)\n+\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t    new_stmt\n+\t      = gimple_build_assign (gimple_get_lhs (stmt),\n+\t\t\t\t     fold_build2 (MEM_REF,\n+\t\t\t\t\t\t  simd_type.itype,\n+\t\t\t\t\t\t  base, zero));\n+\t  }\n+\tbreak;\n+\n+      BUILTIN_VALL_F16 (STORE1, st1, 0, STORE)\n+\tif (!BYTES_BIG_ENDIAN)\n+\t  {\n+\t    enum aarch64_simd_type mem_type\n+\t      = get_mem_type_for_load_store(fcode);\n+\t    aarch64_simd_type_info simd_type\n+\t      = aarch64_simd_types[mem_type];\n+\t    tree elt_ptr_type = build_pointer_type (simd_type.eltype);\n+\t    tree zero = build_zero_cst (elt_ptr_type);\n+\t    gimple_seq stmts = NULL;\n+\t    tree base = gimple_convert (&stmts, elt_ptr_type,\n+\t\t\t\t\targs[0]);\n+\t    if (stmts)\n+\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t    new_stmt\n+\t      = gimple_build_assign (fold_build2 (MEM_REF,\n+\t\t\t\t     simd_type.itype,\n+\t\t\t\t     base,\n+\t\t\t\t     zero), args[1]);\n+\t  }\n+\tbreak;\n+\n       BUILTIN_VDQIF (UNOP, reduc_smax_scal_, 10, ALL)\n       BUILTIN_VDQ_BHSI (UNOPU, reduc_umax_scal_, 10, ALL)\n \tnew_stmt = gimple_build_call_internal (IFN_REDUC_MAX,"}, {"sha": "768e8fae136daa866fe589d72f30514e1229180f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -962,7 +962,8 @@ void aarch64_override_options_internal (struct gcc_options *);\n const char *aarch64_general_mangle_builtin_type (const_tree);\n void aarch64_general_init_builtins (void);\n tree aarch64_general_fold_builtin (unsigned int, tree, unsigned int, tree *);\n-gimple *aarch64_general_gimple_fold_builtin (unsigned int, gcall *);\n+gimple *aarch64_general_gimple_fold_builtin (unsigned int, gcall *,\n+\t\t\t\t\t     gimple_stmt_iterator *);\n rtx aarch64_general_expand_builtin (unsigned int, tree, rtx, int);\n tree aarch64_general_builtin_decl (unsigned, bool);\n tree aarch64_general_builtin_rsqrt (unsigned int);"}, {"sha": "730607f7addaffe890cd4c7d7b8f207bfc7c5645", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -14156,7 +14156,7 @@ aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   switch (code & AARCH64_BUILTIN_CLASS)\n     {\n     case AARCH64_BUILTIN_GENERAL:\n-      new_stmt = aarch64_general_gimple_fold_builtin (subcode, stmt);\n+      new_stmt = aarch64_general_gimple_fold_builtin (subcode, stmt, gsi);\n       break;\n \n     case AARCH64_BUILTIN_SVE:"}, {"sha": "adb787a8599af23847dd62dcd153d7cfe43dacc0", "filename": "gcc/testsuite/gcc.target/aarch64/fmla_intrinsic_1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmla_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -11,6 +11,7 @@ extern void abort (void);\n \n #define TEST_VMLA(q1, q2, size, in1_lanes, in2_lanes)\t\t\t\\\n static void\t\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\t\\\n test_vfma##q1##_lane##q2##_f##size (float##size##_t * res,\t\t\\\n \t\t\t\t   const float##size##_t *in1,\t\t\\\n \t\t\t\t   const float##size##_t *in2)\t\t\\\n@@ -104,12 +105,12 @@ main (int argc, char **argv)\n    vfmaq_laneq_f32.  */\n /* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n-/* vfma_lane_f64.  */\n-/* { dg-final { scan-assembler-times \"fmadd\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 1 } } */\n+/* vfma_lane_f64.\n+   vfma_laneq_f64. */\n+/* { dg-final { scan-assembler-times \"fmadd\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 2 } } */\n \n /* vfmaq_lane_f64.\n-   vfma_laneq_f64.\n    vfmaq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmla\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n "}, {"sha": "865def28c3f4d04042ab495d232bb865cabb2b50", "filename": "gcc/testsuite/gcc.target/aarch64/fmls_intrinsic_1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmls_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -11,6 +11,7 @@ extern void abort (void);\n \n #define TEST_VMLS(q1, q2, size, in1_lanes, in2_lanes)\t\t\t\\\n static void\t\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\t\\\n test_vfms##q1##_lane##q2##_f##size (float##size##_t * res,\t\t\\\n \t\t\t\t   const float##size##_t *in1,\t\t\\\n \t\t\t\t   const float##size##_t *in2)\t\t\\\n@@ -105,12 +106,12 @@ main (int argc, char **argv)\n    vfmsq_laneq_f32.  */\n /* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n-/* vfms_lane_f64.  */\n-/* { dg-final { scan-assembler-times \"fmsub\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 1 } } */\n+/* vfms_lane_f64.\n+   vfms_laneq_f64.  */\n+/* { dg-final { scan-assembler-times \"fmsub\\\\td\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\\, d\\[0-9\\]+\" 2 } } */\n \n /* vfmsq_lane_f64.\n-   vfms_laneq_f64.\n    vfmsq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmls\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n "}, {"sha": "d01095e81c1e45dc1da998aa337ba551b3752ebe", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_intrinsic_1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -9,6 +9,7 @@ extern double fabs (double);\n \n #define TEST_VMUL(q1, q2, size, in1_lanes, in2_lanes)\t\t\t\\\n static void\t\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\t\\\n test_vmul##q1##_lane##q2##_f##size (float##size##_t * res,\t\t\\\n \t\t\t\t   const float##size##_t *in1,\t\t\\\n \t\t\t\t   const float##size##_t *in2)\t\t\\\n@@ -104,12 +105,12 @@ main (int argc, char **argv)\n    vmulq_laneq_f32.  */\n /* { dg-final { scan-assembler-times \"fmul\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n-/* vmul_lane_f64.  */\n-/* { dg-final { scan-assembler-times \"fmul\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* vmul_lane_f64.\n+   Vmul_laneq_f64. */\n+/* { dg-final { scan-assembler-times \"fmul\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n \n-/* vmul_laneq_f64.\n-   vmulq_lane_f64.\n+/* vmulq_lane_f64.\n    vmulq_laneq_f64.  */\n-/* { dg-final { scan-assembler-times \"fmul\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmul\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[\\[0-9\\]+\\\\\\]\" 2 } } */\n \n "}, {"sha": "885bfb39b797e6d095aaecafa0271094c34fbea5", "filename": "gcc/testsuite/gcc.target/aarch64/mla_intrinsic_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmla_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -11,6 +11,7 @@ extern void abort (void);\n \n #define TEST_VMLA(q, su, size, in1_lanes, in2_lanes)\t\t\\\n static void\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\\\n test_vmlaq_lane##q##_##su##size (MAP##su (size, ) * res,\t\\\n \t\t\t\t const MAP##su(size, ) *in1,\t\\\n \t\t\t\t const MAP##su(size, ) *in2)\t\\"}, {"sha": "df046ce32c032bce70559a842d52001264ecbcbc", "filename": "gcc/testsuite/gcc.target/aarch64/mls_intrinsic_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmls_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -11,6 +11,7 @@ extern void abort (void);\n \n #define TEST_VMLS(q, su, size, in1_lanes, in2_lanes)\t\t\\\n static void\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\\\n test_vmlsq_lane##q##_##su##size (MAP##su (size, ) * res,\t\\\n \t\t\t\t const MAP##su(size, ) *in1,\t\\\n \t\t\t\t const MAP##su(size, ) *in2)\t\\"}, {"sha": "517b937f3e1b612d5a9c3c2f68a529a631d848e0", "filename": "gcc/testsuite/gcc.target/aarch64/mul_intrinsic_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmul_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmul_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmul_intrinsic_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -11,6 +11,7 @@ extern void abort (void);\n \n #define TEST_VMUL(q, su, size, in1_lanes, in2_lanes)\t\t\\\n static void\t\t\t\t\t\t\t\\\n+__attribute__((noipa,noinline))\t\t\t\t\t\\\n test_vmulq_lane##q##_##su##size (MAP##su (size, ) * res,\t\\\n \t\t\t\t const MAP##su(size, ) *in1,\t\\\n \t\t\t\t const MAP##su(size, ) *in2)\t\\"}, {"sha": "ffa391aeae1fa0b52ef4ad7ae040a8bc40e160d2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_elem_1.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -146,12 +146,14 @@ check_v2sf (float32_t elemA, float32_t elemB)\n \n   vst1_f32 (vec32x2_res, vmul_n_f32 (vec32x2_src, elemA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (* (uint32_t *) &vec32x2_res[indx] != * (uint32_t *) &expected2_1[indx])\n       abort ();\n \n   vst1_f32 (vec32x2_res, vmul_n_f32 (vec32x2_src, elemB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (* (uint32_t *) &vec32x2_res[indx] != * (uint32_t *) &expected2_2[indx])\n       abort ();\n@@ -169,24 +171,28 @@ check_v4sf (float32_t elemA, float32_t elemB, float32_t elemC, float32_t elemD)\n \n   vst1q_f32 (vec32x4_res, vmulq_n_f32 (vec32x4_src, elemA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_1[indx])\n       abort ();\n \n   vst1q_f32 (vec32x4_res, vmulq_n_f32 (vec32x4_src, elemB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_2[indx])\n       abort ();\n \n   vst1q_f32 (vec32x4_res, vmulq_n_f32 (vec32x4_src, elemC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_3[indx])\n       abort ();\n \n   vst1q_f32 (vec32x4_res, vmulq_n_f32 (vec32x4_src, elemD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_4[indx])\n       abort ();\n@@ -204,12 +210,14 @@ check_v2df (float64_t elemdC, float64_t elemdD)\n \n   vst1q_f64 (vec64x2_res, vmulq_n_f64 (vec64x2_src, elemdC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (* (uint64_t *) &vec64x2_res[indx] != * (uint64_t *) &expectedd2_1[indx])\n       abort ();\n \n   vst1q_f64 (vec64x2_res, vmulq_n_f64 (vec64x2_src, elemdD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (* (uint64_t *) &vec64x2_res[indx] != * (uint64_t *) &expectedd2_2[indx])\n       abort ();\n@@ -227,12 +235,14 @@ check_v2si (int32_t elemsA, int32_t elemsB)\n \n   vst1_s32 (vecs32x2_res, vmul_n_s32 (vecs32x2_src, elemsA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (vecs32x2_res[indx] != expecteds2_1[indx])\n       abort ();\n \n   vst1_s32 (vecs32x2_res, vmul_n_s32 (vecs32x2_src, elemsB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (vecs32x2_res[indx] != expecteds2_2[indx])\n       abort ();\n@@ -248,12 +258,14 @@ check_v2si_unsigned (uint32_t elemusA, uint32_t elemusB)\n \n   vst1_u32 (vecus32x2_res, vmul_n_u32 (vecus32x2_src, elemusA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (vecus32x2_res[indx] != expectedus2_1[indx])\n       abort ();\n \n   vst1_u32 (vecus32x2_res, vmul_n_u32 (vecus32x2_src, elemusB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 2; indx++)\n     if (vecus32x2_res[indx] != expectedus2_2[indx])\n       abort ();\n@@ -271,24 +283,28 @@ check_v4si (int32_t elemsA, int32_t elemsB, int32_t elemsC, int32_t elemsD)\n \n   vst1q_s32 (vecs32x4_res, vmulq_n_s32 (vecs32x4_src, elemsA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecs32x4_res[indx] != expecteds4_1[indx])\n       abort ();\n \n   vst1q_s32 (vecs32x4_res, vmulq_n_s32 (vecs32x4_src, elemsB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecs32x4_res[indx] != expecteds4_2[indx])\n       abort ();\n \n   vst1q_s32 (vecs32x4_res, vmulq_n_s32 (vecs32x4_src, elemsC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecs32x4_res[indx] != expecteds4_3[indx])\n       abort ();\n \n   vst1q_s32 (vecs32x4_res, vmulq_n_s32 (vecs32x4_src, elemsD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecs32x4_res[indx] != expecteds4_4[indx])\n       abort ();\n@@ -305,24 +321,28 @@ check_v4si_unsigned (uint32_t elemusA, uint32_t elemusB, uint32_t elemusC,\n \n   vst1q_u32 (vecus32x4_res, vmulq_n_u32 (vecus32x4_src, elemusA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecus32x4_res[indx] != expectedus4_1[indx])\n       abort ();\n \n   vst1q_u32 (vecus32x4_res, vmulq_n_u32 (vecus32x4_src, elemusB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecus32x4_res[indx] != expectedus4_2[indx])\n       abort ();\n \n   vst1q_u32 (vecus32x4_res, vmulq_n_u32 (vecus32x4_src, elemusC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecus32x4_res[indx] != expectedus4_3[indx])\n       abort ();\n \n   vst1q_u32 (vecus32x4_res, vmulq_n_u32 (vecus32x4_src, elemusD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecus32x4_res[indx] != expectedus4_4[indx])\n       abort ();\n@@ -341,24 +361,28 @@ check_v4hi (int16_t elemhA, int16_t elemhB, int16_t elemhC, int16_t elemhD)\n \n   vst1_s16 (vech16x4_res, vmul_n_s16 (vech16x4_src, elemhA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vech16x4_res[indx] != expectedh4_1[indx])\n       abort ();\n \n   vst1_s16 (vech16x4_res, vmul_n_s16 (vech16x4_src, elemhB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vech16x4_res[indx] != expectedh4_2[indx])\n       abort ();\n \n   vst1_s16 (vech16x4_res, vmul_n_s16 (vech16x4_src, elemhC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vech16x4_res[indx] != expectedh4_3[indx])\n       abort ();\n \n   vst1_s16 (vech16x4_res, vmul_n_s16 (vech16x4_src, elemhD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vech16x4_res[indx] != expectedh4_4[indx])\n       abort ();\n@@ -375,24 +399,28 @@ check_v4hi_unsigned (uint16_t elemuhA, uint16_t elemuhB, uint16_t elemuhC,\n \n   vst1_u16 (vecuh16x4_res, vmul_n_u16 (vecuh16x4_src, elemuhA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecuh16x4_res[indx] != expecteduh4_1[indx])\n       abort ();\n \n   vst1_u16 (vecuh16x4_res, vmul_n_u16 (vecuh16x4_src, elemuhB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecuh16x4_res[indx] != expecteduh4_2[indx])\n       abort ();\n \n   vst1_u16 (vecuh16x4_res, vmul_n_u16 (vecuh16x4_src, elemuhC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecuh16x4_res[indx] != expecteduh4_3[indx])\n       abort ();\n \n   vst1_u16 (vecuh16x4_res, vmul_n_u16 (vecuh16x4_src, elemuhD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 4; indx++)\n     if (vecuh16x4_res[indx] != expecteduh4_4[indx])\n       abort ();\n@@ -411,48 +439,56 @@ check_v8hi (int16_t elemhA, int16_t elemhB, int16_t elemhC, int16_t elemhD,\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_1[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_2[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_3[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_4[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhE));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_5[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhF));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_6[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhG));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_7[indx])\n       abort ();\n \n   vst1q_s16 (vech16x8_res, vmulq_n_s16 (vech16x8_src, elemhH));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vech16x8_res[indx] != expectedh8_8[indx])\n       abort ();\n@@ -470,48 +506,56 @@ check_v8hi_unsigned (uint16_t elemuhA, uint16_t elemuhB, uint16_t elemuhC,\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhA));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_1[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhB));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_2[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhC));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_3[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhD));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_4[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhE));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_5[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhF));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_6[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhG));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_7[indx])\n       abort ();\n \n   vst1q_u16 (vecuh16x8_res, vmulq_n_u16 (vecuh16x8_src, elemuhH));\n \n+  asm volatile (\"\" : : : \"memory\");\n   for (indx = 0; indx < 8; indx++)\n     if (vecuh16x8_res[indx] != expecteduh8_8[indx])\n       abort ();"}, {"sha": "ca4d17426e645c0f8bbe3a4cdd962848b4e1cbed", "filename": "gcc/testsuite/gcc.target/aarch64/vclz.c", "status": "modified", "additions": 139, "deletions": 133, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvclz.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -66,22 +66,62 @@ extern void abort (void);\n #define CLZ_INST(reg_len, data_len, is_signed) \\\n   CONCAT1 (vclz, POSTFIX (reg_len, data_len, is_signed))\n \n-#define RUN_TEST(test_set, answ_set, reg_len, data_len, is_signed, n)\t\\\n-  INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n-  a = LOAD_INST (reg_len, data_len, is_signed) (test_set);\t\t\\\n-  b = LOAD_INST (reg_len, data_len, is_signed) (answ_set);\t        \\\n-  a = CLZ_INST (reg_len, data_len, is_signed) (a);\t\t\t\\\n-  for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n-    if (a [i] != b [i])\t\t\t\t\t\t\t\\\n-      return 1;\n+#define BUILD_TEST(type, size, lanes)\t\t\t    \\\n+int __attribute__((noipa,noinline))\t\t\t    \\\n+run_test##type##size##x##lanes (int##size##_t* test_set,    \\\n+\t\t\t\tint##size##_t* answ_set,    \\\n+\t\t\t\tint reg_len, int data_len,  \\\n+\t\t\t\tint n)\t\t\t    \\\n+{\t\t\t\t\t\t\t    \\\n+  int i;\t\t\t\t\t\t    \\\n+  INHIB_OPTIMIZATION;\t\t\t\t\t    \\\n+  int##size##x##lanes##_t a = vld1##type##size (test_set);  \\\n+  int##size##x##lanes##_t b = vld1##type##size (answ_set);  \\\n+  a = vclz##type##size (a);\t\t\t\t    \\\n+  for (i = 0; i < n; i++){\t\t\t\t    \\\n+    if (a [i] != b [i])\t\t\t\t\t    \\\n+      return 1;\t\t\t\t\t\t    \\\n+  }\t\t\t\t\t\t\t    \\\n+  return 0;\t\t\t\t\t\t    \\\n+}\n+\n+/* unsigned inputs  */\n+#define U_BUILD_TEST(type, size, lanes)\t\t\t    \\\n+int __attribute__((noipa,noinline))\t\t\t    \\\n+run_test##type##size##x##lanes (uint##size##_t* test_set,   \\\n+\t\t\t\tuint##size##_t* answ_set,   \\\n+\t\t\t\tint reg_len, int data_len,  \\\n+\t\t\t\tint n)\t                    \\\n+{\t\t\t\t\t\t\t    \\\n+  int i;\t\t\t\t\t\t    \\\n+  INHIB_OPTIMIZATION;\t\t\t\t\t    \\\n+  uint##size##x##lanes##_t a = vld1##type##size (test_set); \\\n+  uint##size##x##lanes##_t b = vld1##type##size (answ_set); \\\n+  a = vclz##type##size (a);\t\t\t\t    \\\n+  for (i = 0; i < n; i++){\t\t\t\t    \\\n+    if (a [i] != b [i])\t\t\t\t\t    \\\n+      return 1;\t\t\t\t\t\t    \\\n+  }\t\t\t\t\t\t\t    \\\n+  return 0;\t\t\t\t\t\t    \\\n+}\n+\n+BUILD_TEST (_s, 8, 8)\n+BUILD_TEST (_s, 16, 4)\n+BUILD_TEST (_s, 32, 2)\n+BUILD_TEST (q_s, 8, 16)\n+BUILD_TEST (q_s, 16, 8)\n+BUILD_TEST (q_s, 32, 4)\n+\n+U_BUILD_TEST (_u, 8, 8)\n+U_BUILD_TEST (_u, 16, 4)\n+U_BUILD_TEST (_u, 32, 2)\n+U_BUILD_TEST (q_u, 8, 16)\n+U_BUILD_TEST (q_u, 16, 8)\n+U_BUILD_TEST (q_u, 32, 4)\n \n int __attribute__ ((noinline))\n test_vclz_s8 ()\n {\n-  int i;\n-  int8x8_t a;\n-  int8x8_t b;\n-\n   int8_t test_set0[8] = {\n     TEST0, TEST1, TEST2, TEST3,\n     TEST4, TEST5, TEST6, TEST7\n@@ -98,22 +138,18 @@ test_vclz_s8 ()\n     0, 0, 0, 0,\n     0, 0, 0, 0\n   };\n-  RUN_TEST (test_set0, answ_set0, 64, 8, 1, 8);\n-  RUN_TEST (test_set1, answ_set1, 64, 8, 1, 1);\n+  int o1 = run_test_s8x8 (test_set0, answ_set0, 64, 8, 8);\n+  int o2 = run_test_s8x8 (test_set1, answ_set1, 64, 8, 1);\n \n-  return 0;\n+  return o1||o2;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n-/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 4 } } */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 2 } } */\n \n int __attribute__ ((noinline))\n test_vclz_s16 ()\n {\n-  int i;\n-  int16x4_t a;\n-  int16x4_t b;\n-\n   int16_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   int16_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n   int16_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n@@ -126,25 +162,21 @@ test_vclz_s16 ()\n   int16_t answ_set3[4] = { 4, 3, 2, 1 };\n   int16_t answ_set4[4] = { 0, 0, 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 16, 1, 4);\n-  RUN_TEST (test_set1, answ_set1, 64, 16, 1, 4);\n-  RUN_TEST (test_set2, answ_set2, 64, 16, 1, 4);\n-  RUN_TEST (test_set3, answ_set3, 64, 16, 1, 4);\n-  RUN_TEST (test_set4, answ_set4, 64, 16, 1, 1);\n+  int o1 = run_test_s16x4 (test_set0, answ_set0, 64, 16, 4);\n+  int o2 = run_test_s16x4 (test_set1, answ_set1, 64, 16, 4);\n+  int o3 = run_test_s16x4 (test_set2, answ_set2, 64, 16, 4);\n+  int o4 = run_test_s16x4 (test_set3, answ_set3, 64, 16, 4);\n+  int o5 = run_test_s16x4 (test_set4, answ_set4, 64, 16, 1);\n \n-  return 0;\n+  return o1||o2||o3||o4||o5;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n-/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 10} } */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 2} } */\n \n int __attribute__ ((noinline))\n test_vclz_s32 ()\n {\n-  int i;\n-  int32x2_t a;\n-  int32x2_t b;\n-\n   int32_t test_set0[2] = { TEST0, TEST1 };\n   int32_t test_set1[2] = { TEST2, TEST3 };\n   int32_t test_set2[2] = { TEST4, TEST5 };\n@@ -181,46 +213,43 @@ test_vclz_s32 ()\n   int32_t answ_set15[2] = { 2, 1 };\n   int32_t answ_set16[2] = { 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 32, 1, 2);\n-  RUN_TEST (test_set1, answ_set1, 64, 32, 1, 2);\n-  RUN_TEST (test_set2, answ_set2, 64, 32, 1, 2);\n-  RUN_TEST (test_set3, answ_set3, 64, 32, 1, 2);\n-  RUN_TEST (test_set4, answ_set4, 64, 32, 1, 2);\n-  RUN_TEST (test_set5, answ_set5, 64, 32, 1, 2);\n-  RUN_TEST (test_set6, answ_set6, 64, 32, 1, 2);\n-  RUN_TEST (test_set7, answ_set7, 64, 32, 1, 2);\n-  RUN_TEST (test_set8, answ_set8, 64, 32, 1, 2);\n-  RUN_TEST (test_set9, answ_set9, 64, 32, 1, 2);\n-  RUN_TEST (test_set10, answ_set10, 64, 32, 1, 2);\n-  RUN_TEST (test_set11, answ_set11, 64, 32, 1, 2);\n-  RUN_TEST (test_set12, answ_set12, 64, 32, 1, 2);\n-  RUN_TEST (test_set13, answ_set13, 64, 32, 1, 2);\n-  RUN_TEST (test_set14, answ_set14, 64, 32, 1, 2);\n-  RUN_TEST (test_set15, answ_set15, 64, 32, 1, 2);\n-  RUN_TEST (test_set16, answ_set16, 64, 32, 1, 1);\n-\n-  return 0;\n+  int o1 = run_test_s32x2 (test_set0, answ_set0, 64, 32, 2);\n+  int o2 = run_test_s32x2 (test_set1, answ_set1, 64, 32, 2);\n+  int o3 = run_test_s32x2 (test_set2, answ_set2, 64, 32, 2);\n+  int o4 = run_test_s32x2 (test_set3, answ_set3, 64, 32, 2);\n+  int o5 = run_test_s32x2 (test_set4, answ_set4, 64, 32, 2);\n+  int o6 = run_test_s32x2 (test_set5, answ_set5, 64, 32, 2);\n+  int o7 = run_test_s32x2 (test_set6, answ_set6, 64, 32, 2);\n+  int o8 = run_test_s32x2 (test_set7, answ_set7, 64, 32, 2);\n+  int o9 = run_test_s32x2 (test_set8, answ_set8, 64, 32, 2);\n+  int o10 = run_test_s32x2 (test_set9, answ_set9, 64, 32, 2);\n+  int o11 = run_test_s32x2 (test_set10, answ_set10, 64, 32, 2);\n+  int o12 = run_test_s32x2 (test_set11, answ_set11, 64, 32, 2);\n+  int o13 = run_test_s32x2 (test_set12, answ_set12, 64, 32, 2);\n+  int o14 = run_test_s32x2 (test_set13, answ_set13, 64, 32, 2);\n+  int o15 = run_test_s32x2 (test_set14, answ_set14, 64, 32, 2);\n+  int o16 = run_test_s32x2 (test_set15, answ_set15, 64, 32, 2);\n+  int o17 = run_test_s32x2 (test_set16, answ_set16, 64, 32, 1);\n+\n+  return o1||o2||o3||o4||o5||o6||o7||o8||o9||o10||o11||o12||o13||o14\n+    ||o15||o16||o17;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n-/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 34 } } */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\"  2 } } */\n \n int __attribute__ ((noinline))\n test_vclzq_s8 ()\n {\n-  int i;\n-  int8x16_t a;\n-  int8x16_t b;\n-\n   int8_t test_set0[16] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7,\n     TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8, TEST8\n   };\n   int8_t answ_set0[16] = {\n     8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0\n   };\n-  RUN_TEST (test_set0, answ_set0, 128, 8, 1, 9);\n-  return 0;\n+  int o1 = run_testq_s8x16 (test_set0, answ_set0, 128, 8, 9);\n+  return o1;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n@@ -229,10 +258,6 @@ test_vclzq_s8 ()\n int __attribute__ ((noinline))\n test_vclzq_s16 ()\n {\n-  int i;\n-  int16x8_t a;\n-  int16x8_t b;\n-\n   int16_t test_set0[8] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7\n   };\n@@ -252,23 +277,19 @@ test_vclzq_s16 ()\n   int16_t answ_set2[8] = {\n     0, 0, 0, 0, 0, 0, 0, 0\n   };\n-  RUN_TEST (test_set0, answ_set0, 128, 16, 1, 8);\n-  RUN_TEST (test_set1, answ_set1, 128, 16, 1, 8);\n-  RUN_TEST (test_set2, answ_set2, 128, 16, 1, 1);\n+  int o1 = run_testq_s16x8 (test_set0, answ_set0, 128, 16, 8);\n+  int o2 = run_testq_s16x8 (test_set1, answ_set1, 128, 16, 8);\n+  int o3 = run_testq_s16x8 (test_set2, answ_set2, 128, 16, 1);\n \n-  return 0;\n+  return o1||o2||o3;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n-/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 6 } } */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 2 } } */\n \n int __attribute__ ((noinline))\n test_vclzq_s32 ()\n {\n-  int i;\n-  int32x4_t a;\n-  int32x4_t b;\n-\n   int32_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   int32_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n   int32_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n@@ -289,27 +310,23 @@ test_vclzq_s32 ()\n   int32_t answ_set7[4] = { 4, 3, 2, 1 };\n   int32_t answ_set8[4] = { 0, 0, 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 32, 1, 4);\n-  RUN_TEST (test_set1, answ_set1, 128, 32, 1, 4);\n-  RUN_TEST (test_set2, answ_set2, 128, 32, 1, 4);\n-  RUN_TEST (test_set3, answ_set3, 128, 32, 1, 4);\n-  RUN_TEST (test_set4, answ_set4, 128, 32, 1, 1);\n+  int o1 = run_testq_s32x4 (test_set0, answ_set0, 128, 32, 4);\n+  int o2 = run_testq_s32x4 (test_set1, answ_set1, 128, 32, 4);\n+  int o3 = run_testq_s32x4 (test_set2, answ_set2, 128, 32, 4);\n+  int o4 = run_testq_s32x4 (test_set3, answ_set3, 128, 32, 4);\n+  int o5 = run_testq_s32x4 (test_set4, answ_set4, 128, 32, 1);\n \n-  return 0;\n+  return o1||o2||o3||o4||o5;\n }\n \n /* Double scan-assembler-times to take account of unsigned functions.  */\n-/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 10 } } */\n+/* { dg-final { scan-assembler-times \"clz\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 2 } } */\n \n /* Unsigned versions.  */\n \n int __attribute__ ((noinline))\n test_vclz_u8 ()\n {\n-  int i;\n-  uint8x8_t a;\n-  uint8x8_t b;\n-\n   uint8_t test_set0[8] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7\n   };\n@@ -323,21 +340,17 @@ test_vclz_u8 ()\n     0, 0, 0, 0, 0, 0, 0, 0\n   };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 8, 0, 8);\n-  RUN_TEST (test_set1, answ_set1, 64, 8, 0, 1);\n+  int o1 = run_test_u8x8 (test_set0, answ_set0, 64, 8, 8);\n+  int o2 = run_test_u8x8 (test_set1, answ_set1, 64, 8, 1);\n \n-  return 0;\n+  return o1||o2;\n }\n \n /* ASM scan near test for signed version.  */\n \n int __attribute__ ((noinline))\n test_vclz_u16 ()\n {\n-  int i;\n-  uint16x4_t a;\n-  uint16x4_t b;\n-\n   uint16_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   uint16_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n   uint16_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n@@ -350,24 +363,20 @@ test_vclz_u16 ()\n   uint16_t answ_set3[4] = { 4, 3, 2, 1 };\n   uint16_t answ_set4[4] = { 0, 0, 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 16, 0, 4);\n-  RUN_TEST (test_set1, answ_set1, 64, 16, 0, 4);\n-  RUN_TEST (test_set2, answ_set2, 64, 16, 0, 4);\n-  RUN_TEST (test_set3, answ_set3, 64, 16, 0, 4);\n-  RUN_TEST (test_set4, answ_set4, 64, 16, 0, 1);\n+  int o1 = run_test_u16x4 (test_set0, answ_set0, 64, 16, 4);\n+  int o2 = run_test_u16x4 (test_set1, answ_set1, 64, 16, 4);\n+  int o3 = run_test_u16x4 (test_set2, answ_set2, 64, 16, 4);\n+  int o4 = run_test_u16x4 (test_set3, answ_set3, 64, 16, 4);\n+  int o5 = run_test_u16x4 (test_set4, answ_set4, 64, 16, 1);\n \n-  return 0;\n+  return o1||o2||o3||o4||o5;\n }\n \n /* ASM scan near test for signed version.  */\n \n int __attribute__ ((noinline))\n test_vclz_u32 ()\n {\n-  int i;\n-  uint32x2_t a;\n-  uint32x2_t b;\n-\n   uint32_t test_set0[2] = { TEST0, TEST1 };\n   uint32_t test_set1[2] = { TEST2, TEST3 };\n   uint32_t test_set2[2] = { TEST4, TEST5 };\n@@ -404,25 +413,26 @@ test_vclz_u32 ()\n   uint32_t answ_set15[2] = { 2, 1 };\n   uint32_t answ_set16[2] = { 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 32, 0, 2);\n-  RUN_TEST (test_set1, answ_set1, 64, 32, 0, 2);\n-  RUN_TEST (test_set2, answ_set2, 64, 32, 0, 2);\n-  RUN_TEST (test_set3, answ_set3, 64, 32, 0, 2);\n-  RUN_TEST (test_set4, answ_set4, 64, 32, 0, 2);\n-  RUN_TEST (test_set5, answ_set5, 64, 32, 0, 2);\n-  RUN_TEST (test_set6, answ_set6, 64, 32, 0, 2);\n-  RUN_TEST (test_set7, answ_set7, 64, 32, 0, 2);\n-  RUN_TEST (test_set8, answ_set8, 64, 32, 0, 2);\n-  RUN_TEST (test_set9, answ_set9, 64, 32, 0, 2);\n-  RUN_TEST (test_set10, answ_set10, 64, 32, 0, 2);\n-  RUN_TEST (test_set11, answ_set11, 64, 32, 0, 2);\n-  RUN_TEST (test_set12, answ_set12, 64, 32, 0, 2);\n-  RUN_TEST (test_set13, answ_set13, 64, 32, 0, 2);\n-  RUN_TEST (test_set14, answ_set14, 64, 32, 0, 2);\n-  RUN_TEST (test_set15, answ_set15, 64, 32, 0, 2);\n-  RUN_TEST (test_set16, answ_set16, 64, 32, 0, 1);\n-\n-  return 0;\n+  int o1 = run_test_u32x2 (test_set0, answ_set0, 64, 32, 2);\n+  int o2 = run_test_u32x2 (test_set1, answ_set1, 64, 32, 2);\n+  int o3 = run_test_u32x2 (test_set2, answ_set2, 64, 32, 2);\n+  int o4 = run_test_u32x2 (test_set3, answ_set3, 64, 32, 2);\n+  int o5 = run_test_u32x2 (test_set4, answ_set4, 64, 32, 2);\n+  int o6 = run_test_u32x2 (test_set5, answ_set5, 64, 32, 2);\n+  int o7 = run_test_u32x2 (test_set6, answ_set6, 64, 32, 2);\n+  int o8 = run_test_u32x2 (test_set7, answ_set7, 64, 32, 2);\n+  int o9 = run_test_u32x2 (test_set8, answ_set8, 64, 32, 2);\n+  int o10 = run_test_u32x2 (test_set9, answ_set9, 64, 32, 2);\n+  int o11 = run_test_u32x2 (test_set10, answ_set10, 64, 32, 2);\n+  int o12 = run_test_u32x2 (test_set11, answ_set11, 64, 32, 2);\n+  int o13 = run_test_u32x2 (test_set12, answ_set12, 64, 32, 2);\n+  int o14 = run_test_u32x2 (test_set13, answ_set13, 64, 32, 2);\n+  int o15 = run_test_u32x2 (test_set14, answ_set14, 64, 32, 2);\n+  int o16 = run_test_u32x2 (test_set15, answ_set15, 64, 32, 2);\n+  int o17 = run_test_u32x2 (test_set16, answ_set16, 64, 32, 1);\n+\n+  return o1||o2||o3||o4||o5||o6||o7||o8||o9||o10||o11||o12||o13||o14\n+        ||o15||o16||o17;\n }\n \n /* ASM scan near test for signed version.  */\n@@ -441,9 +451,9 @@ test_vclzq_u8 ()\n   uint8_t answ_set0[16] = {\n     8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0\n   };\n-  RUN_TEST (test_set0, answ_set0, 128, 8, 0, 9);\n+  int o1 = run_testq_u8x16 (test_set0, answ_set0, 128, 8, 9);\n \n-  return 0;\n+  return o1;\n }\n \n /* ASM scan near test for signed version.  */\n@@ -476,22 +486,18 @@ test_vclzq_u16 ()\n     0, 0, 0, 0, 0, 0, 0, 0\n   };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 16, 0, 8);\n-  RUN_TEST (test_set1, answ_set1, 128, 16, 0, 8);\n-  RUN_TEST (test_set2, answ_set2, 128, 16, 0, 1);\n+  int o1 = run_testq_u16x8 (test_set0, answ_set0, 128, 16, 8);\n+  int o2 = run_testq_u16x8 (test_set1, answ_set1, 128, 16, 8);\n+  int o3 = run_testq_u16x8 (test_set2, answ_set2, 128, 16, 1);\n \n-  return 0;\n+  return o1||o2||o3;\n }\n \n /* ASM scan near test for signed version.  */\n \n int __attribute__ ((noinline))\n test_vclzq_u32 ()\n {\n-  int i;\n-  uint32x4_t a;\n-  uint32x4_t b;\n-\n   uint32_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   uint32_t test_set1[4] = { TEST4, TEST5, TEST6, TEST7 };\n   uint32_t test_set2[4] = { TEST8, TEST9, TEST10, TEST11 };\n@@ -512,13 +518,13 @@ test_vclzq_u32 ()\n   uint32_t answ_set7[4] = { 4, 3, 2, 1 };\n   uint32_t answ_set8[4] = { 0, 0, 0, 0 };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 32, 0, 4);\n-  RUN_TEST (test_set1, answ_set1, 128, 32, 0, 4);\n-  RUN_TEST (test_set2, answ_set2, 128, 32, 0, 4);\n-  RUN_TEST (test_set3, answ_set3, 128, 32, 0, 4);\n-  RUN_TEST (test_set4, answ_set4, 128, 32, 0, 1);\n+  int o1 = run_testq_u32x4 (test_set0, answ_set0, 128, 32, 4);\n+  int o2 = run_testq_u32x4 (test_set1, answ_set1, 128, 32, 4);\n+  int o3 = run_testq_u32x4 (test_set2, answ_set2, 128, 32, 4);\n+  int o4 = run_testq_u32x4 (test_set3, answ_set3, 128, 32, 4);\n+  int o5 = run_testq_u32x4 (test_set4, answ_set4, 128, 32, 1);\n \n-  return 0;\n+  return o1||o2||o3||o4||o5;\n }\n \n /* ASM scan near test for signed version.  */"}, {"sha": "8ddc4d21c1f89d6c66624a33ee0386cb3a28c512", "filename": "gcc/testsuite/gcc.target/aarch64/vneg_s.c", "status": "modified", "additions": 64, "deletions": 103, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvneg_s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad44c6a56c777bd1eddb214095fff36c8dba9246/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvneg_s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvneg_s.c?ref=ad44c6a56c777bd1eddb214095fff36c8dba9246", "patch": "@@ -31,49 +31,24 @@\n \n extern void abort (void);\n \n-#define CONCAT(a, b) a##b\n-#define CONCAT1(a, b) CONCAT (a, b)\n-#define REG_INFEX64 _\n-#define REG_INFEX128 q_\n-#define REG_INFEX(reg_len) REG_INFEX##reg_len\n-#define POSTFIX(reg_len, data_len) \\\n-  CONCAT1 (REG_INFEX (reg_len), s##data_len)\n-#define DATA_TYPE_32 float\n-#define DATA_TYPE_64 double\n-#define DATA_TYPE(data_len) DATA_TYPE_##data_len\n-\n-#define FORCE_SIMD_INST64_8(data)\n-#define FORCE_SIMD_INST64_16(data)\n-#define FORCE_SIMD_INST64_32(data)\n-#define FORCE_SIMD_INST64_64(data) force_simd (data)\n-#define FORCE_SIMD_INST128_8(data)\n-#define FORCE_SIMD_INST128_16(data)\n-#define FORCE_SIMD_INST128_32(data)\n-#define FORCE_SIMD_INST128_64(data)\n-\n-#define FORCE_SIMD_INST(reg_len, data_len, data) \\\n-  CONCAT1 (FORCE_SIMD_INST, reg_len##_##data_len) (data)\n-#define LOAD_INST(reg_len, data_len) \\\n-  CONCAT1 (vld1, POSTFIX (reg_len, data_len))\n-#define NEG_INST(reg_len, data_len) \\\n-  CONCAT1 (vneg, POSTFIX (reg_len, data_len))\n-\n-#define RUN_TEST(test_set, answ_set, reg_len, data_len, n, a, b)\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    int i;\t\t\t\t\t\t\t\t\\\n-    INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n-    (a) = LOAD_INST (reg_len, data_len) (test_set);\t\t\t\\\n-    (b) = LOAD_INST (reg_len, data_len) (answ_set);\t\t\t\\\n-    FORCE_SIMD_INST (reg_len, data_len, a)\t\t\t\t\\\n-    a = NEG_INST (reg_len, data_len) (a);\t\t\t\t\\\n-    FORCE_SIMD_INST (reg_len, data_len, a)\t\t\t\t\\\n-    for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        INHIB_OPTIMIZATION;\t\t\t\t\t\t\\\n-\tif (a[i] != b[i])\t\t\t\t\t\t\\\n-\t  return 1;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n+#define BUILD_TEST(type, size, lanes)\t\t\t   \\\n+int __attribute__((noipa,noinline))\t\t\t   \\\n+run_test##type##size##x##lanes (int##size##_t* test_set,   \\\n+\t\t       int##size##_t* answ_set,\t\t   \\\n+\t\t       int reg_len, int data_len, int n)   \\\n+{\t\t\t\t\t\t\t   \\\n+  int i;\t\t\t\t\t\t   \\\n+  int##size##x##lanes##_t a = vld1##type##size (test_set); \\\n+  int##size##x##lanes##_t b = vld1##type##size (answ_set); \\\n+  a = vneg##type##size (a);\t\t\t\t   \\\n+  for (i = 0; i < n; i++)\t\t\t\t   \\\n+  {\t\t\t\t    \\\n+    INHIB_OPTIMIZATION;\t\t    \\\n+    if (a[i] != b[i])\t\t    \\\n+    return 1;\t\t\t    \\\n+  }\t\t\t\t    \\\n+  return 0;\t\t\t    \\\n+}\t\t\t\t    \\\n \n #define RUN_TEST_SCALAR(test_val, answ_val, a, b)     \\\n   {                                                   \\\n@@ -87,52 +62,53 @@ extern void abort (void);\n     force_simd (res);                                 \\\n   }\n \n+BUILD_TEST (_s, 8, 8)\n+BUILD_TEST (_s, 16, 4)\n+BUILD_TEST (_s, 32, 2)\n+BUILD_TEST (_s, 64, 1)\n+\n+BUILD_TEST (q_s, 8, 16)\n+BUILD_TEST (q_s, 16, 8)\n+BUILD_TEST (q_s, 32, 4)\n+BUILD_TEST (q_s, 64, 2)\n+\n int __attribute__ ((noinline))\n test_vneg_s8 ()\n {\n-  int8x8_t a;\n-  int8x8_t b;\n-\n   int8_t test_set0[8] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, SCHAR_MAX, SCHAR_MIN\n   };\n   int8_t answ_set0[8] = {\n     ANSW0, ANSW1, ANSW2, ANSW3, ANSW4, ANSW5, SCHAR_MIN + 1, SCHAR_MIN\n   };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 8, 8, a, b);\n+  int o1 = run_test_s8x8 (test_set0, answ_set0, 64, 8, 8);\n \n-  return 0;\n+  return o1;\n }\n \n /* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vneg_s16 ()\n {\n-  int16x4_t a;\n-  int16x4_t b;\n-\n   int16_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   int16_t test_set1[4] = { TEST4, TEST5, SHRT_MAX, SHRT_MIN };\n \n   int16_t answ_set0[4] = { ANSW0, ANSW1, ANSW2, ANSW3 };\n   int16_t answ_set1[4] = { ANSW4, ANSW5, SHRT_MIN + 1, SHRT_MIN };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 16, 4, a, b);\n-  RUN_TEST (test_set1, answ_set1, 64, 16, 4, a, b);\n+  int o1 = run_test_s16x4 (test_set0, answ_set0, 64, 16, 4);\n+  int o2 = run_test_s16x4 (test_set1, answ_set1, 64, 16, 4);\n \n-  return 0;\n+  return o1||o2;\n }\n \n-/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 2 } } */\n+/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vneg_s32 ()\n {\n-  int32x2_t a;\n-  int32x2_t b;\n-\n   int32_t test_set0[2] = { TEST0, TEST1 };\n   int32_t test_set1[2] = { TEST2, TEST3 };\n   int32_t test_set2[2] = { TEST4, TEST5 };\n@@ -143,22 +119,19 @@ test_vneg_s32 ()\n   int32_t answ_set2[2] = { ANSW4, ANSW5 };\n   int32_t answ_set3[2] = { INT_MIN + 1, INT_MIN };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 32, 2, a, b);\n-  RUN_TEST (test_set1, answ_set1, 64, 32, 2, a, b);\n-  RUN_TEST (test_set2, answ_set2, 64, 32, 2, a, b);\n-  RUN_TEST (test_set3, answ_set3, 64, 32, 2, a, b);\n+  int o1 = run_test_s32x2 (test_set0, answ_set0, 64, 32, 2);\n+  int o2 = run_test_s32x2 (test_set1, answ_set1, 64, 32, 2);\n+  int o3 = run_test_s32x2 (test_set2, answ_set2, 64, 32, 2);\n+  int o4 = run_test_s32x2 (test_set3, answ_set3, 64, 32, 2);\n \n-  return 0;\n+  return o1||o2||o3||o4;\n }\n \n-/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 4 } } */\n+/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vneg_s64 ()\n {\n-  int64x1_t a;\n-  int64x1_t b;\n-\n   int64_t test_set0[1] = { TEST0 };\n   int64_t test_set1[1] = { TEST1 };\n   int64_t test_set2[1] = { TEST2 };\n@@ -177,16 +150,16 @@ test_vneg_s64 ()\n   int64_t answ_set6[1] = { LLONG_MIN + 1 };\n   int64_t answ_set7[1] = { LLONG_MIN };\n \n-  RUN_TEST (test_set0, answ_set0, 64, 64, 1, a, b);\n-  RUN_TEST (test_set1, answ_set1, 64, 64, 1, a, b);\n-  RUN_TEST (test_set2, answ_set2, 64, 64, 1, a, b);\n-  RUN_TEST (test_set3, answ_set3, 64, 64, 1, a, b);\n-  RUN_TEST (test_set4, answ_set4, 64, 64, 1, a, b);\n-  RUN_TEST (test_set5, answ_set5, 64, 64, 1, a, b);\n-  RUN_TEST (test_set6, answ_set6, 64, 64, 1, a, b);\n-  RUN_TEST (test_set7, answ_set7, 64, 64, 1, a, b);\n+  int o1 = run_test_s64x1 (test_set0, answ_set0, 64, 64, 1);\n+  int o2 = run_test_s64x1  (test_set1, answ_set1, 64, 64, 1);\n+  int o3 = run_test_s64x1 (test_set2, answ_set2, 64, 64, 1);\n+  int o4 = run_test_s64x1 (test_set3, answ_set3, 64, 64, 1);\n+  int o5 = run_test_s64x1 (test_set4, answ_set4, 64, 64, 1);\n+  int o6 = run_test_s64x1 (test_set5, answ_set5, 64, 64, 1);\n+  int o7 = run_test_s64x1 (test_set6, answ_set6, 64, 64, 1);\n+  int o8 = run_test_s64x1 (test_set7, answ_set7, 64, 64, 1);\n \n-  return 0;\n+  return o1||o2||o3||o4||o5||o6||o7||o8;\n }\n \n int __attribute__ ((noinline))\n@@ -206,14 +179,11 @@ test_vnegd_s64 ()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"neg\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 16 } } */\n+/* { dg-final { scan-assembler-times \"neg\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 8 } } */\n \n int __attribute__ ((noinline))\n test_vnegq_s8 ()\n {\n-  int8x16_t a;\n-  int8x16_t b;\n-\n   int8_t test_set0[16] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, SCHAR_MAX, SCHAR_MIN,\n     4, 8, 15, 16, 23, 42, -1, -2\n@@ -224,59 +194,50 @@ test_vnegq_s8 ()\n     -4, -8, -15, -16, -23, -42, 1, 2\n   };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 8, 8, a, b);\n+  int o1 = run_testq_s8x16 (test_set0, answ_set0, 128, 8, 8);\n \n-  return 0;\n+  return o1;\n }\n \n /* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vnegq_s16 ()\n {\n-  int16x8_t a;\n-  int16x8_t b;\n-\n   int16_t test_set0[8] = {\n     TEST0, TEST1, TEST2, TEST3, TEST4, TEST5, SHRT_MAX, SHRT_MIN\n   };\n   int16_t answ_set0[8] = {\n     ANSW0, ANSW1, ANSW2, ANSW3, ANSW4, ANSW5, SHRT_MIN + 1, SHRT_MIN\n   };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 16, 8, a, b);\n+  int o1 = run_testq_s16x8 (test_set0, answ_set0, 128, 16, 8);\n \n-  return 0;\n+  return o1;\n }\n \n /* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vnegq_s32 ()\n {\n-  int32x4_t a;\n-  int32x4_t b;\n-\n   int32_t test_set0[4] = { TEST0, TEST1, TEST2, TEST3 };\n   int32_t test_set1[4] = { TEST4, TEST5, INT_MAX, INT_MIN };\n \n   int32_t answ_set0[4] = { ANSW0, ANSW1, ANSW2, ANSW3 };\n   int32_t answ_set1[4] = { ANSW4, ANSW5, INT_MIN + 1, INT_MIN };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 32, 4, a, b);\n-  RUN_TEST (test_set1, answ_set1, 128, 32, 4, a, b);\n+  int o1 = run_testq_s32x4 (test_set0, answ_set0, 128, 32, 4);\n+  int o2 = run_testq_s32x4 (test_set1, answ_set1, 128, 32, 4);\n \n-  return 0;\n+  return o1||o2;\n }\n \n-/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 2 } } */\n+/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n \n int __attribute__ ((noinline))\n test_vnegq_s64 ()\n {\n-  int64x2_t a;\n-  int64x2_t b;\n-\n   int64_t test_set0[2] = { TEST0, TEST1 };\n   int64_t test_set1[2] = { TEST2, TEST3 };\n   int64_t test_set2[2] = { TEST4, TEST5 };\n@@ -287,15 +248,15 @@ test_vnegq_s64 ()\n   int64_t answ_set2[2] = { ANSW4, ANSW5 };\n   int64_t answ_set3[2] = { LLONG_MIN + 1, LLONG_MIN };\n \n-  RUN_TEST (test_set0, answ_set0, 128, 64, 2, a, b);\n-  RUN_TEST (test_set1, answ_set1, 128, 64, 2, a, b);\n-  RUN_TEST (test_set2, answ_set2, 128, 64, 2, a, b);\n-  RUN_TEST (test_set3, answ_set3, 128, 64, 2, a, b);\n+  int o1 = run_testq_s64x2 (test_set0, answ_set0, 128, 64, 2);\n+  int o2 = run_testq_s64x2 (test_set1, answ_set1, 128, 64, 2);\n+  int o3 = run_testq_s64x2 (test_set2, answ_set2, 128, 64, 2);\n+  int o4 = run_testq_s64x2 (test_set3, answ_set3, 128, 64, 2);\n \n-  return 0;\n+  return o1||o2||o2||o4;\n }\n \n-/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 4 } } */\n+/* { dg-final { scan-assembler-times \"neg\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n \n int\n main (int argc, char **argv)"}]}