{"sha": "cc81dde821dd144faa36924fe5c5febd54c64649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4MWRkZTgyMWRkMTQ0ZmFhMzY5MjRmZTVjNWZlYmQ1NGM2NDY0OQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-04-08T19:02:24Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-04-08T19:02:24Z"}, "message": "arm.h (CLASS_LIKELY_SPILLED_P): Define.\n\n\t* arm.h (CLASS_LIKELY_SPILLED_P): Define.\ntestsuite\n\t* gcc.dg/spill-1.c: New test.\n\nFrom-SVN: r80519", "tree": {"sha": "704ed31b068d4210b5cc856d520ea67c970aa629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/704ed31b068d4210b5cc856d520ea67c970aa629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc81dde821dd144faa36924fe5c5febd54c64649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc81dde821dd144faa36924fe5c5febd54c64649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc81dde821dd144faa36924fe5c5febd54c64649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc81dde821dd144faa36924fe5c5febd54c64649/comments", "author": null, "committer": null, "parents": [{"sha": "d4453b7ac50559127a64a0ee001918a8456cba54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4453b7ac50559127a64a0ee001918a8456cba54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4453b7ac50559127a64a0ee001918a8456cba54"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "dfda231368d4de4979790e9541a838751362f602", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc81dde821dd144faa36924fe5c5febd54c64649", "patch": "@@ -1,3 +1,7 @@\n+2004-04-08  Paul Brook  <paul@codesourcery.com>\n+\n+\t* arm.h (CLASS_LIKELY_SPILLED_P): Define.\n+\n 2004-04-08  Paul Brook  <paul@codesourcery.com>\n \n \t* explow.c (promote_mode): Use PROMOTE_FUNCTION_MODE instead of"}, {"sha": "8af53df8c8893501d369deb2b7a94b817cd474bf", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=cc81dde821dd144faa36924fe5c5febd54c64649", "patch": "@@ -1378,6 +1378,13 @@ enum reg_class\n      || reg_classes_intersect_p (VFP_REGS, (CLASS))\t\\\n    : 0)\n \n+/* We need to define this for LO_REGS on thumb.  Otherwise we can end up\n+   using r0-r4 for function arguments, r7 for the stack frame and don't\n+   have enough left over to do doubleword arithmetic.  */\n+#define CLASS_LIKELY_SPILLED_P(CLASS)\t\\\n+    ((TARGET_THUMB && (CLASS) == LO_REGS)\t\\\n+     || (CLASS) == CC_REG)\n+\t\t\t\t      \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS  (TARGET_THUMB ? LO_REGS : GENERAL_REGS)\n #define BASE_REG_CLASS   (TARGET_THUMB ? LO_REGS : GENERAL_REGS)"}, {"sha": "d714f2ef3d19fea272a842ef70536de220082d25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc81dde821dd144faa36924fe5c5febd54c64649", "patch": "@@ -1,3 +1,7 @@\n+2004-04-08  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gcc.dg/spill-1.c: New test.\n+\n 2004-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-ctype-2.c: New test."}, {"sha": "b85942e87aaecf7f7a25c45ac09d777715063fd6", "filename": "gcc/testsuite/gcc.dg/spill-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Ftestsuite%2Fgcc.dg%2Fspill-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc81dde821dd144faa36924fe5c5febd54c64649/gcc%2Ftestsuite%2Fgcc.dg%2Fspill-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspill-1.c?ref=cc81dde821dd144faa36924fe5c5febd54c64649", "patch": "@@ -0,0 +1,15 @@\n+/* This caused an ICE during register spilling when targeting thumb.\n+   There are 8 registers available for arithmetic operations (r0-r7)\n+   r7 is the frame pointer, and r0-r3 are used to pass arguments.\n+   Combine was extending the lives of the arguments (in r0-r3) up until the\n+   call to z. This leaves only 3 regs free which isn't enough to preform the\n+   doubleword addition.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+void z(int);\n+int foo(int a, int b, int c, int d, long long *q) \n+{ \n+  *q=*q+1; \n+  z (a+b+c+d); \n+}\n+"}]}