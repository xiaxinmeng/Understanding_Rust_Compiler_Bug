{"sha": "98ddffc1c10f62fca6e92b358b0a6d4398add660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkZGZmYzFjMTBmNjJmY2E2ZTkyYjM1OGIwYTZkNDM5OGFkZDY2MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-14T12:35:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-14T12:35:28Z"}, "message": "* pt.c (unify): Replace gcc_unreachable with gcc_assert.\n\nFrom-SVN: r87491", "tree": {"sha": "8c4d0bc038cced355310207cf85227cbbfb374ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c4d0bc038cced355310207cf85227cbbfb374ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ddffc1c10f62fca6e92b358b0a6d4398add660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ddffc1c10f62fca6e92b358b0a6d4398add660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ddffc1c10f62fca6e92b358b0a6d4398add660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ddffc1c10f62fca6e92b358b0a6d4398add660/comments", "author": null, "committer": null, "parents": [{"sha": "8e3c61c5775fabd1e49fb3d4e80ea4a9cb0ab24c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3c61c5775fabd1e49fb3d4e80ea4a9cb0ab24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e3c61c5775fabd1e49fb3d4e80ea4a9cb0ab24c"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "a54f556869a8094f2827c447db3b56b9d6d48a13", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ddffc1c10f62fca6e92b358b0a6d4398add660/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ddffc1c10f62fca6e92b358b0a6d4398add660/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98ddffc1c10f62fca6e92b358b0a6d4398add660", "patch": "@@ -1,3 +1,7 @@\n+2004-09-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (unify): Replace gcc_unreachable with gcc_assert.\n+\n 2004-09-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16162\n@@ -520,7 +524,6 @@\n \n 2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\n \t* call.c (convert_class_to_reference): Adjust build_int_cst calls.\n \t(build_user_type_conversion_1, convert_like_real,\n \tbuild_java_interface_fn_ref, build_special_member_call): Likewise.\n@@ -546,6 +549,7 @@\n \n \t* repo.c (extract_string): Reset backquote after one character.\n \t(get_base_filename): Fix indentation.\n+\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (cxx_init_decl_processing): Adjust"}, {"sha": "e7d44f2ae70da903592f3de9e089bcedf22cd24e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ddffc1c10f62fca6e92b358b0a6d4398add660/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ddffc1c10f62fca6e92b358b0a6d4398add660/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=98ddffc1c10f62fca6e92b358b0a6d4398add660", "patch": "@@ -10109,36 +10109,32 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n       return 1;\n \n     default:\n-      if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (parm))))\n-\t{\n-\n-\t  /* We're looking at an expression.  This can happen with\n-\t     something like: \n+      gcc_assert (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (parm))));\n+      \n+      /* We must be looking at an expression.  This can happen with\n+\t something like: \n \t   \n-\t       template <int I>\n-\t       void foo(S<I>, S<I + 2>);\n+\t   template <int I>\n+\t   void foo(S<I>, S<I + 2>);\n \n-\t     This is a \"nondeduced context\":\n+\t This is a \"nondeduced context\":\n \n-\t       [deduct.type]\n+\t   [deduct.type]\n \t   \n-\t       The nondeduced contexts are:\n+\t   The nondeduced contexts are:\n \n-\t       --A type that is a template-id in which one or more of\n-\t         the template-arguments is an expression that references\n-\t         a template-parameter.  \n+\t   --A type that is a template-id in which one or more of\n+\t     the template-arguments is an expression that references\n+\t     a template-parameter.  \n \n-\t     In these cases, we assume deduction succeeded, but don't\n-\t     actually infer any unifications.  */\n+\t In these cases, we assume deduction succeeded, but don't\n+\t actually infer any unifications.  */\n \n-\t  if (!uses_template_parms (parm)\n-\t      && !template_args_equal (parm, arg))\n-\t    return 1;\n-\t  else\n-\t    return 0;\n-\t}\n-      gcc_unreachable ();\n-      return 1;\n+      if (!uses_template_parms (parm)\n+\t  && !template_args_equal (parm, arg))\n+\treturn 1;\n+      else\n+\treturn 0;\n     }\n }\n \f"}]}