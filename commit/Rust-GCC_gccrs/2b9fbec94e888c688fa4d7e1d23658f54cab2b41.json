{"sha": "2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5ZmJlYzk0ZTg4OGM2ODhmYTRkN2UxZDIzNjU4ZjU0Y2FiMmI0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T08:08:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T08:08:59Z"}, "message": "[multiple changes]\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_case.adb (Dup_Choice): Improve message for integer constants.\n\n2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnatlink.adb: Remove special handling of VMS, RTX and JVM.\n\n2014-08-01  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.h (GNAT_OPEN): Defines as open64 where supported.\n\t* adaint.c (GNAT_OPEN): Uses new macro where needed.\n\nFrom-SVN: r213410", "tree": {"sha": "80c8a3e299e4948e227885f4ac63a5389fea90c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c8a3e299e4948e227885f4ac63a5389fea90c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/comments", "author": null, "committer": null, "parents": [{"sha": "0494285ab09288a7f21e12ad0a9908c6a61626f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0494285ab09288a7f21e12ad0a9908c6a61626f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0494285ab09288a7f21e12ad0a9908c6a61626f5"}], "stats": {"total": 709, "additions": 263, "deletions": 446}, "files": [{"sha": "0c348fa59fec486c601b8a557fe4a5bcddfa18a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "patch": "@@ -1,3 +1,16 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_case.adb (Dup_Choice): Improve message for integer constants.\n+\n+2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatlink.adb: Remove special handling of VMS, RTX and JVM.\n+\n+2014-08-01  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.h (GNAT_OPEN): Defines as open64 where supported.\n+\t* adaint.c (GNAT_OPEN): Uses new macro where needed.\n+\n 2014-07-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (lookup_and_insert_pad_type): New function"}, {"sha": "e03139381f13e15bc8c47d700a918a755b9c2eea", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "patch": "@@ -1007,7 +1007,7 @@ __gnat_open_read (char *path, int fmode)\n    fd = _topen (wpath, O_RDONLY | o_fmode, 0444);\n  }\n #else\n-  fd = open (path, O_RDONLY | o_fmode);\n+  fd = GNAT_OPEN (path, O_RDONLY | o_fmode);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1048,7 +1048,7 @@ __gnat_open_rw (char *path, int fmode)\n     fd = _topen (wpath, O_RDWR | o_fmode, PERM);\n   }\n #else\n-  fd = open (path, O_RDWR | o_fmode, PERM);\n+  fd = GNAT_OPEN (path, O_RDWR | o_fmode, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1074,7 +1074,7 @@ __gnat_open_create (char *path, int fmode)\n     fd = _topen (wpath, O_WRONLY | O_CREAT | O_TRUNC | o_fmode, PERM);\n   }\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_TRUNC | o_fmode, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_TRUNC | o_fmode, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1096,7 +1096,7 @@ __gnat_create_output_file (char *path)\n     fd = _topen (wpath, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT, PERM);\n   }\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1118,7 +1118,7 @@ __gnat_create_output_file_new (char *path)\n     fd = _topen (wpath, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM);\n   }\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1144,7 +1144,7 @@ __gnat_open_append (char *path, int fmode)\n     fd = _topen (wpath, O_WRONLY | O_CREAT | O_APPEND | o_fmode, PERM);\n   }\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_APPEND | o_fmode, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_APPEND | o_fmode, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1172,7 +1172,7 @@ __gnat_open_new (char *path, int fmode)\n     fd = _topen (wpath, O_WRONLY | O_CREAT | O_EXCL | o_fmode, PERM);\n   }\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_EXCL | o_fmode, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_EXCL | o_fmode, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;\n@@ -1213,7 +1213,7 @@ __gnat_open_new_temp (char *path, int fmode)\n              fmode ? \"rfm=stmlf\" : \"rfm=udf\", \"ctx=rec\", \"rat=none\",\n              \"shr=del,get,put,upd\", \"mbc=16\", \"deq=64\", \"fop=tef\");\n #else\n-  fd = open (path, O_WRONLY | O_CREAT | O_EXCL | o_fmode, PERM);\n+  fd = GNAT_OPEN (path, O_WRONLY | O_CREAT | O_EXCL | o_fmode, PERM);\n #endif\n \n   return fd < 0 ? -1 : fd;"}, {"sha": "fd3ebb232ab88d3003917dc5bf9255fae3668bea", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "patch": "@@ -53,12 +53,14 @@ extern \"C\" {\n \n #if defined (__GLIBC__) || defined (sun)\n #define GNAT_FOPEN fopen64\n+#define GNAT_OPEN open64\n #define GNAT_STAT stat64\n #define GNAT_FSTAT fstat64\n #define GNAT_LSTAT lstat64\n #define GNAT_STRUCT_STAT struct stat64\n #else\n #define GNAT_FOPEN fopen\n+#define GNAT_OPEN open\n #define GNAT_STAT stat\n #define GNAT_FSTAT fstat\n #define GNAT_LSTAT lstat"}, {"sha": "29cffb049f9eca33e096c73af8be4ddbd841cb94", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 185, "deletions": 432, "changes": 617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "patch": "@@ -28,7 +28,6 @@\n with ALI;      use ALI;\n with Csets;\n with Gnatvsn;  use Gnatvsn;\n-with Hostparm;\n with Indepsw;  use Indepsw;\n with Namet;    use Namet;\n with Opt;\n@@ -228,12 +227,6 @@ procedure Gnatlink is\n    procedure Process_Binder_File (Name : String);\n    --  Reads the binder file and extracts linker arguments\n \n-   function To_Lower (A : Character) return Character;\n-   --  Fold a character to lower case;\n-\n-   procedure To_Lower (A : in out String);\n-   --  Fold a string to lower case;\n-\n    procedure Usage;\n    --  Display usage\n \n@@ -794,10 +787,6 @@ procedure Gnatlink is\n       function Index (S, Pattern : String) return Natural;\n       --  Return the last occurrence of Pattern in S, or 0 if none\n \n-      function Is_Option_Present (Opt : String) return Boolean;\n-      --  Return true if the option Opt is already present in\n-      --  Linker_Options table.\n-\n       procedure Store_File_Context;\n       --  Store current file context, Fd position and current line data.\n       --  The file context is stored into the rollback data above (RB_*).\n@@ -856,23 +845,6 @@ procedure Gnatlink is\n          return 0;\n       end Index;\n \n-      -----------------------\n-      -- Is_Option_Present --\n-      -----------------------\n-\n-      function Is_Option_Present (Opt : String) return Boolean is\n-      begin\n-         for I in 1 .. Linker_Options.Last loop\n-\n-            if Linker_Options.Table (I).all = Opt then\n-               return True;\n-            end if;\n-\n-         end loop;\n-\n-         return False;\n-      end Is_Option_Present;\n-\n       ---------------------------\n       -- Rollback_File_Context --\n       ---------------------------\n@@ -1098,13 +1070,7 @@ procedure Gnatlink is\n             --  Add binder options only if not already set on the command line.\n             --  This rule is a way to control the linker options order.\n \n-            --  The following test needs comments, why is it VMS specific.\n-            --  The above comment looks out of date ???\n-\n-            elsif not\n-              (OpenVMS_On_Target\n-                and then Is_Option_Present (Next_Line (Nfirst .. Nlast)))\n-            then\n+            else\n                if Nlast > Nfirst + 2 and then\n                  Next_Line (Nfirst .. Nfirst + 1) = \"-L\"\n                then\n@@ -1126,8 +1092,7 @@ procedure Gnatlink is\n                   Linker_Options.Table (Linker_Options.Last) :=\n                     new String'(Next_Line (Nfirst .. Nlast));\n \n-               elsif Next_Line (Nfirst .. Nlast) = \"-ldecgnat\"\n-                 or else Next_Line (Nfirst .. Nlast) = \"-lgnarl\"\n+               elsif Next_Line (Nfirst .. Nlast) = \"-lgnarl\"\n                  or else Next_Line (Nfirst .. Nlast) = \"-lgnat\"\n                  or else\n                    Next_Line\n@@ -1417,31 +1382,6 @@ procedure Gnatlink is\n       Status := fclose (Fd);\n    end Process_Binder_File;\n \n-   --------------\n-   -- To_Lower --\n-   --------------\n-\n-   function To_Lower (A : Character) return Character is\n-      A_Val : constant Natural := Character'Pos (A);\n-\n-   begin\n-      if A in 'A' .. 'Z'\n-        or else A_Val in 16#C0# .. 16#D6#\n-        or else A_Val in 16#D8# .. 16#DE#\n-      then\n-         return Character'Val (A_Val + 16#20#);\n-      else\n-         return A;\n-      end if;\n-   end To_Lower;\n-\n-   procedure To_Lower (A : in out String) is\n-   begin\n-      for J in A'Range loop\n-         A (J) := To_Lower (A (J));\n-      end loop;\n-   end To_Lower;\n-\n    -----------\n    -- Usage --\n    -----------\n@@ -1507,45 +1447,33 @@ procedure Gnatlink is\n \n begin\n    --  Add the directory where gnatlink is invoked in front of the path, if\n-   --  gnatlink is invoked with directory information. Only do this if the\n-   --  platform is not VMS, where the notion of path does not really exist.\n+   --  gnatlink is invoked with directory information.\n \n-   if not Hostparm.OpenVMS then\n-      declare\n-         Command : constant String := Command_Name;\n-\n-      begin\n-         for Index in reverse Command'Range loop\n-            if Command (Index) = Directory_Separator then\n-               declare\n-                  Absolute_Dir : constant String :=\n-                                   Normalize_Pathname\n-                                     (Command (Command'First .. Index));\n+   declare\n+      Command : constant String := Command_Name;\n+   begin\n+      for Index in reverse Command'Range loop\n+         if Command (Index) = Directory_Separator then\n+            declare\n+               Absolute_Dir : constant String :=\n+                 Normalize_Pathname\n+                   (Command (Command'First .. Index));\n \n-                  PATH : constant String :=\n-                           Absolute_Dir &\n-                           Path_Separator &\n-                           Getenv (\"PATH\").all;\n+               PATH : constant String :=\n+                 Absolute_Dir &\n+                 Path_Separator &\n+                 Getenv (\"PATH\").all;\n \n-               begin\n-                  Setenv (\"PATH\", PATH);\n-               end;\n+            begin\n+               Setenv (\"PATH\", PATH);\n+            end;\n \n-               exit;\n-            end if;\n-         end loop;\n-      end;\n-   end if;\n+            exit;\n+         end if;\n+      end loop;\n+   end;\n \n    Base_Command_Name := new String'(Base_Name (Command_Name));\n-\n-   --  Fold to lower case \"GNATLINK\" on VMS to be consistent with output\n-   --  from other GNAT utilities.\n-\n-   if Hostparm.OpenVMS then\n-      To_Lower (Base_Command_Name.all);\n-   end if;\n-\n    Process_Args;\n \n    if Argument_Count = 0\n@@ -1676,13 +1604,11 @@ begin\n    Osint.Add_Default_Search_Dirs;\n    Targparm.Get_Target_Parameters;\n \n-   if VM_Target /= No_VM then\n-      case VM_Target is\n-         when JVM_Target => Gcc := new String'(\"jvm-gnatcompile\");\n-         when CLI_Target => Gcc := new String'(\"dotnet-gnatcompile\");\n-         when No_VM      => raise Program_Error;\n-      end case;\n-   end if;\n+   case VM_Target is\n+      when JVM_Target => Gcc := new String'(\"jvm-gnatcompile\");\n+      when CLI_Target => Gcc := new String'(\"dotnet-gnatcompile\");\n+      when No_VM      => null;\n+   end case;\n \n    --  Compile the bind file with the following switches:\n \n@@ -1734,17 +1660,6 @@ begin\n          if Linker_Path = null then\n             Exit_With_Error (\"Couldn't locate dotnet-ld\");\n          end if;\n-\n-      elsif RTX_RTSS_Kernel_Module_On_Target then\n-\n-         --  Use Microsoft linker for RTSS modules\n-\n-         Linker_Path := System.OS_Lib.Locate_Exec_On_Path (\"link\");\n-\n-         if Linker_Path = null then\n-            Exit_With_Error (\"Couldn't locate link\");\n-         end if;\n-\n       else\n          Linker_Path := Gcc_Path;\n       end if;\n@@ -1760,19 +1675,12 @@ begin\n                       & Get_Target_Debuggable_Suffix.all);\n    end if;\n \n-   if RTX_RTSS_Kernel_Module_On_Target then\n-      Linker_Options.Increment_Last;\n-      Linker_Options.Table (Linker_Options.Last) :=\n-        new String'(\"/OUT:\" & Output_File_Name.all);\n-\n-   else\n-      Linker_Options.Increment_Last;\n-      Linker_Options.Table (Linker_Options.Last) := new String'(\"-o\");\n+   Linker_Options.Increment_Last;\n+   Linker_Options.Table (Linker_Options.Last) := new String'(\"-o\");\n \n-      Linker_Options.Increment_Last;\n-      Linker_Options.Table (Linker_Options.Last) :=\n-        new String'(Output_File_Name.all);\n-   end if;\n+   Linker_Options.Increment_Last;\n+   Linker_Options.Table (Linker_Options.Last) :=\n+     new String'(Output_File_Name.all);\n \n    Check_Existing_Executable (Output_File_Name.all);\n \n@@ -1828,11 +1736,10 @@ begin\n       end loop;\n \n       --  For now we detect windows by an output executable name ending with\n-      --  the suffix .exe (excluding VMS which might use that same name).\n+      --  the suffix .exe.\n \n       if FN'Length > 5\n         and then FN (FN'Last - 3 .. FN'Last) = \".exe\"\n-        and then not OpenVMS_On_Target\n       then\n          Check_File_Name (\"install\");\n          Check_File_Name (\"setup\");\n@@ -1880,11 +1787,7 @@ begin\n    begin\n       --  Set prefix\n \n-      if OpenVMS_On_Target then\n-         Bind_File_Prefix := new String'(\"b__\");\n-      else\n-         Bind_File_Prefix := new String'(\"b~\");\n-      end if;\n+      Bind_File_Prefix := new String'(\"b~\");\n \n       --  If the length of the binder file becomes too long due to\n       --  the addition of the \"b?\" prefix, then truncate it.\n@@ -1979,359 +1882,209 @@ begin\n    --  the actual link at run time. We might consider packing all class files\n    --  in a .zip file during this step.\n \n-   if VM_Target /= JVM_Target then\n-      Link_Step : declare\n-         Num_Args : Natural :=\n-                     (Linker_Options.Last - Linker_Options.First + 1) +\n-                     (Gcc_Linker_Options.Last - Gcc_Linker_Options.First + 1) +\n-                     (Linker_Objects.Last - Linker_Objects.First + 1);\n-         Stack_Op : Boolean := False;\n-         IDENT_Op : Boolean := False;\n+   Link_Step : declare\n+      Num_Args : Natural :=\n+        (Linker_Options.Last - Linker_Options.First + 1) +\n+        (Gcc_Linker_Options.Last - Gcc_Linker_Options.First + 1) +\n+        (Linker_Objects.Last - Linker_Objects.First + 1);\n+      Stack_Op : Boolean := False;\n \n-      begin\n-         if AAMP_On_Target then\n+   begin\n+      if AAMP_On_Target then\n \n-            --  Remove extraneous flags not relevant for AAMP\n+         --  Remove extraneous flags not relevant for AAMP\n \n-            for J in reverse Linker_Options.First .. Linker_Options.Last loop\n-               if Linker_Options.Table (J)'Length = 0\n-                 or else Linker_Options.Table (J) (1 .. 3) = \"-Wl\"\n-                 or else Linker_Options.Table (J) (1 .. 3) = \"-sh\"\n-                 or else Linker_Options.Table (J) (1 .. 2) = \"-O\"\n-                 or else Linker_Options.Table (J) (1 .. 2) = \"-g\"\n-               then\n-                  Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                    Linker_Options.Table (J + 1 .. Linker_Options.Last);\n-                  Linker_Options.Decrement_Last;\n-                  Num_Args := Num_Args - 1;\n-               end if;\n-            end loop;\n+         for J in reverse Linker_Options.First .. Linker_Options.Last loop\n+            if Linker_Options.Table (J)'Length = 0\n+              or else Linker_Options.Table (J) (1 .. 3) = \"-Wl\"\n+              or else Linker_Options.Table (J) (1 .. 3) = \"-sh\"\n+              or else Linker_Options.Table (J) (1 .. 2) = \"-O\"\n+              or else Linker_Options.Table (J) (1 .. 2) = \"-g\"\n+            then\n+               Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n+                 Linker_Options.Table (J + 1 .. Linker_Options.Last);\n+               Linker_Options.Decrement_Last;\n+               Num_Args := Num_Args - 1;\n+            end if;\n+         end loop;\n+      end if;\n \n-         elsif RTX_RTSS_Kernel_Module_On_Target then\n+      --  Remove duplicate stack size setting from the Linker_Options table.\n+      --  The stack setting option \"-Xlinker --stack=R,C\" can be found\n+      --  in one line when set by a pragma Linker_Options or in two lines\n+      --  (\"-Xlinker\" then \"--stack=R,C\") when set on the command line. We\n+      --  also check for the \"-Wl,--stack=R\" style option.\n \n-            --  Remove irrelevant flags for Microsoft linker, adapt some others\n+      --  We must remove the second stack setting option instance because\n+      --  the one on the command line will always be the first one. And any\n+      --  subsequent stack setting option will overwrite the previous one.\n+      --  This is done especially for GNAT/NT where we set the stack size\n+      --  for tasking programs by a pragma in the NT specific tasking\n+      --  package System.Task_Primitives.Operations.\n \n-            for J in reverse Linker_Options.First .. Linker_Options.Last loop\n+      --  Note: This is not a FOR loop that runs from Linker_Options.First\n+      --  to Linker_Options.Last, since operations within the loop can\n+      --  modify the length of the table.\n \n-               --  Remove flags that are not accepted\n+      Clean_Link_Option_Set : declare\n+         J                  : Natural;\n+         Shared_Libgcc_Seen : Boolean := False;\n \n-               if Linker_Options.Table (J)'Length = 0\n-                 or else Linker_Options.Table (J) (1 .. 2) = \"-l\"\n-                 or else Linker_Options.Table (J) (1 .. 3) = \"-Wl\"\n-                 or else Linker_Options.Table (J) (1 .. 3) = \"-sh\"\n-                 or else Linker_Options.Table (J) (1 .. 2) = \"-O\"\n-                 or else Linker_Options.Table (J) (1 .. 8) = \"-Xlinker\"\n-                 or else Linker_Options.Table (J) (1 .. 9) = \"-mthreads\"\n-               then\n-                  Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                    Linker_Options.Table (J + 1 .. Linker_Options.Last);\n+      begin\n+         J := Linker_Options.First;\n+         while J <= Linker_Options.Last loop\n+            if Linker_Options.Table (J).all = \"-Xlinker\"\n+              and then J < Linker_Options.Last\n+              and then Linker_Options.Table (J + 1)'Length > 8\n+              and then Linker_Options.Table (J + 1) (1 .. 8) = \"--stack=\"\n+            then\n+               if Stack_Op then\n+                  Linker_Options.Table (J .. Linker_Options.Last - 2) :=\n+                    Linker_Options.Table (J + 2 .. Linker_Options.Last);\n                   Linker_Options.Decrement_Last;\n-                  Num_Args := Num_Args - 1;\n-\n-               --  Replace \"-L\" by its counterpart \"/LIBPATH:\" and UNIX \"/\" by\n-               --  Windows \"\\\".\n-\n-               elsif Linker_Options.Table (J) (1 .. 2) = \"-L\" then\n-                  declare\n-                     Libpath_Option : constant String_Access := new String'\n-                       (\"/LIBPATH:\" &\n-                          Linker_Options.Table\n-                            (J) (3 .. Linker_Options.Table (J).all'Last));\n-                  begin\n-                     for Index in 10 .. Libpath_Option'Last loop\n-                        if Libpath_Option (Index) = '/' then\n-                           Libpath_Option (Index) := '\\';\n-                        end if;\n-                     end loop;\n-\n-                     Linker_Options.Table (J) := Libpath_Option;\n-                  end;\n-\n-               --  Replace \"-g\" by \"/DEBUG\"\n-\n-               elsif Linker_Options.Table (J) (1 .. 2) = \"-g\" then\n-                  Linker_Options.Table (J) := new String'(\"/DEBUG\");\n+                  Linker_Options.Decrement_Last;\n+                  Num_Args := Num_Args - 2;\n \n-               --  Replace \"-o\" by \"/OUT:\"\n+               else\n+                  Stack_Op := True;\n+               end if;\n+            end if;\n \n-               elsif Linker_Options.Table (J) (1 .. 2) = \"-o\" then\n-                  Linker_Options.Table (J + 1) := new String'\n-                    (\"/OUT:\" & Linker_Options.Table (J + 1).all);\n+            --  Remove duplicate -shared-libgcc switch\n \n+            if Linker_Options.Table (J).all = Shared_Libgcc_String then\n+               if Shared_Libgcc_Seen then\n                   Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n                     Linker_Options.Table (J + 1 .. Linker_Options.Last);\n                   Linker_Options.Decrement_Last;\n                   Num_Args := Num_Args - 1;\n \n-               --  Replace \"--stack=\" by \"/STACK:\"\n-\n-               elsif Linker_Options.Table (J) (1 .. 8) = \"--stack=\" then\n-                  Linker_Options.Table (J) := new String'\n-                    (\"/STACK:\" &\n-                     Linker_Options.Table (J)\n-                       (9 .. Linker_Options.Table (J).all'Last));\n-\n-               --  Replace \"-v\" by its counterpart \"/VERBOSE\"\n-\n-               elsif Linker_Options.Table (J) (1 .. 2) = \"-v\" then\n-                  Linker_Options.Table (J) := new String'(\"/VERBOSE\");\n-               end if;\n-            end loop;\n-\n-            --  Add some required flags to create RTSS modules\n-\n-            declare\n-               Flags_For_Linker : constant array (1 .. 17) of String_Access :=\n-                 (new String'(\"/NODEFAULTLIB\"),\n-                  new String'(\"/INCREMENTAL:NO\"),\n-                  new String'(\"/NOLOGO\"),\n-                  new String'(\"/DRIVER\"),\n-                  new String'(\"/ALIGN:0x20\"),\n-                  new String'(\"/SUBSYSTEM:NATIVE\"),\n-                  new String'(\"/ENTRY:_RtapiProcessEntryCRT@8\"),\n-                  new String'(\"/RELEASE\"),\n-                  new String'(\"startupCRT.obj\"),\n-                  new String'(\"rtxlibcmt.lib\"),\n-                  new String'(\"oldnames.lib\"),\n-                  new String'(\"rtapi_rtss.lib\"),\n-                  new String'(\"Rtx_Rtss.lib\"),\n-                  new String'(\"libkernel32.a\"),\n-                  new String'(\"libws2_32.a\"),\n-                  new String'(\"libmswsock.a\"),\n-                  new String'(\"libadvapi32.a\"));\n-               --  These flags need to be passed to Microsoft linker. They\n-               --  come from the RTX documentation.\n-\n-               Gcc_Lib_Path : constant String_Access := new String'\n-                 (\"/LIBPATH:\" & Include_Dir_Default_Prefix & \"\\..\\\");\n-               --  Place to look for gcc related libraries, such as libgcc\n-\n-            begin\n-               --  Replace UNIX \"/\" by Windows \"\\\" in the path\n-\n-               for Index in 10 .. Gcc_Lib_Path.all'Last loop\n-                  if Gcc_Lib_Path (Index) = '/' then\n-                     Gcc_Lib_Path (Index) := '\\';\n-                  end if;\n-               end loop;\n-\n-               Linker_Options.Increment_Last;\n-               Linker_Options.Table (Linker_Options.Last) := Gcc_Lib_Path;\n-               Num_Args := Num_Args + 1;\n-\n-               for Index in Flags_For_Linker'Range loop\n-                  Linker_Options.Increment_Last;\n-                  Linker_Options.Table (Linker_Options.Last) :=\n-                    Flags_For_Linker (Index);\n-                  Num_Args := Num_Args + 1;\n-               end loop;\n-            end;\n-         end if;\n-\n-         --  Remove duplicate stack size setting from the Linker_Options table.\n-         --  The stack setting option \"-Xlinker --stack=R,C\" can be found\n-         --  in one line when set by a pragma Linker_Options or in two lines\n-         --  (\"-Xlinker\" then \"--stack=R,C\") when set on the command line. We\n-         --  also check for the \"-Wl,--stack=R\" style option.\n-\n-         --  We must remove the second stack setting option instance because\n-         --  the one on the command line will always be the first one. And any\n-         --  subsequent stack setting option will overwrite the previous one.\n-         --  This is done especially for GNAT/NT where we set the stack size\n-         --  for tasking programs by a pragma in the NT specific tasking\n-         --  package System.Task_Primitives.Operations.\n-\n-         --  Note: This is not a FOR loop that runs from Linker_Options.First\n-         --  to Linker_Options.Last, since operations within the loop can\n-         --  modify the length of the table.\n-\n-         Clean_Link_Option_Set : declare\n-            J                  : Natural;\n-            Shared_Libgcc_Seen : Boolean := False;\n-\n-         begin\n-            J := Linker_Options.First;\n-            while J <= Linker_Options.Last loop\n-               if Linker_Options.Table (J).all = \"-Xlinker\"\n-                 and then J < Linker_Options.Last\n-                 and then Linker_Options.Table (J + 1)'Length > 8\n-                 and then Linker_Options.Table (J + 1) (1 .. 8) = \"--stack=\"\n-               then\n-                  if Stack_Op then\n-                     Linker_Options.Table (J .. Linker_Options.Last - 2) :=\n-                       Linker_Options.Table (J + 2 .. Linker_Options.Last);\n-                     Linker_Options.Decrement_Last;\n-                     Linker_Options.Decrement_Last;\n-                     Num_Args := Num_Args - 2;\n-\n-                  else\n-                     Stack_Op := True;\n-                  end if;\n-               end if;\n-\n-               --  Remove duplicate -shared-libgcc switch\n-\n-               if Linker_Options.Table (J).all = Shared_Libgcc_String then\n-                  if Shared_Libgcc_Seen then\n-                     Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                       Linker_Options.Table (J + 1 .. Linker_Options.Last);\n-                     Linker_Options.Decrement_Last;\n-                     Num_Args := Num_Args - 1;\n-\n-                  else\n-                     Shared_Libgcc_Seen := True;\n-                  end if;\n-               end if;\n-\n-               --  Here we just check for a canonical form that matches the\n-               --  pragma Linker_Options set in the NT runtime.\n-\n-               if (Linker_Options.Table (J)'Length > 17\n-                    and then Linker_Options.Table (J) (1 .. 17) =\n-                                                     \"-Xlinker --stack=\")\n-                 or else\n-                  (Linker_Options.Table (J)'Length > 12\n-                    and then Linker_Options.Table (J) (1 .. 12) =\n-                                                     \"-Wl,--stack=\")\n-               then\n-                  if Stack_Op then\n-                     Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                       Linker_Options.Table (J + 1 .. Linker_Options.Last);\n-                     Linker_Options.Decrement_Last;\n-                     Num_Args := Num_Args - 1;\n-\n-                  else\n-                     Stack_Op := True;\n-                  end if;\n+               else\n+                  Shared_Libgcc_Seen := True;\n                end if;\n+            end if;\n \n-               --  Remove duplicate IDENTIFICATION directives (VMS)\n+            --  Here we just check for a canonical form that matches the\n+            --  pragma Linker_Options set in the NT runtime.\n \n-               if Linker_Options.Table (J)'Length > 29\n-                 and then Linker_Options.Table (J) (1 .. 30) =\n-                            \"--for-linker=--identification=\"\n-               then\n-                  if IDENT_Op then\n-                     Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n-                       Linker_Options.Table (J + 1 .. Linker_Options.Last);\n-                     Linker_Options.Decrement_Last;\n-                     Num_Args := Num_Args - 1;\n+            if (Linker_Options.Table (J)'Length > 17\n+                and then Linker_Options.Table (J) (1 .. 17) =\n+                  \"-Xlinker --stack=\")\n+              or else\n+                (Linker_Options.Table (J)'Length > 12\n+                 and then Linker_Options.Table (J) (1 .. 12) =\n+                       \"-Wl,--stack=\")\n+            then\n+               if Stack_Op then\n+                  Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n+                    Linker_Options.Table (J + 1 .. Linker_Options.Last);\n+                  Linker_Options.Decrement_Last;\n+                  Num_Args := Num_Args - 1;\n \n-                  else\n-                     IDENT_Op := True;\n-                  end if;\n+               else\n+                  Stack_Op := True;\n                end if;\n+            end if;\n \n-               J := J + 1;\n-            end loop;\n-\n-            if Linker_Path = Gcc_Path and then VM_Target = No_VM then\n-\n-               --  For systems where the default is to link statically with\n-               --  libgcc, if gcc is not called with -shared-libgcc, call it\n-               --  with -static-libgcc, as there are some platforms where one\n-               --  of these two switches is compulsory to link.\n-\n-               if Shared_Libgcc_Default = 'T'\n-                 and then not Shared_Libgcc_Seen\n-               then\n-                  Linker_Options.Increment_Last;\n-                  Linker_Options.Table (Linker_Options.Last) := Static_Libgcc;\n-                  Num_Args := Num_Args + 1;\n-               end if;\n+            J := J + 1;\n+         end loop;\n \n-            elsif RTX_RTSS_Kernel_Module_On_Target then\n+         if Linker_Path = Gcc_Path and then VM_Target = No_VM then\n \n-               --  Force the use of the static libgcc for RTSS modules\n+            --  For systems where the default is to link statically with\n+            --  libgcc, if gcc is not called with -shared-libgcc, call it\n+            --  with -static-libgcc, as there are some platforms where one\n+            --  of these two switches is compulsory to link.\n \n+            if Shared_Libgcc_Default = 'T'\n+              and then not Shared_Libgcc_Seen\n+            then\n                Linker_Options.Increment_Last;\n-               Linker_Options.Table (Linker_Options.Last) :=\n-                 new String'(\"libgcc.a\");\n+               Linker_Options.Table (Linker_Options.Last) := Static_Libgcc;\n                Num_Args := Num_Args + 1;\n             end if;\n+         end if;\n+      end Clean_Link_Option_Set;\n \n-         end Clean_Link_Option_Set;\n+      --  Prepare arguments for call to linker\n \n-         --  Prepare arguments for call to linker\n+      Call_Linker : declare\n+         Success  : Boolean;\n+         Args     : Argument_List (1 .. Num_Args + 1);\n+         Index    : Integer := Args'First;\n \n-         Call_Linker : declare\n-            Success  : Boolean;\n-            Args     : Argument_List (1 .. Num_Args + 1);\n-            Index    : Integer := Args'First;\n+      begin\n+         Args (Index) := Binder_Obj_File;\n \n-         begin\n-            Args (Index) := Binder_Obj_File;\n+         --  Add the object files and any -largs libraries\n+\n+         for J in Linker_Objects.First .. Linker_Objects.Last loop\n+            Index := Index + 1;\n+            Args (Index) := Linker_Objects.Table (J);\n+         end loop;\n \n-            --  Add the object files and any -largs libraries\n+         --  Add the linker options from the binder file\n \n-            for J in Linker_Objects.First .. Linker_Objects.Last loop\n-               Index := Index + 1;\n-               Args (Index) := Linker_Objects.Table (J);\n-            end loop;\n+         for J in Linker_Options.First .. Linker_Options.Last loop\n+            Index := Index + 1;\n+            Args (Index) := Linker_Options.Table (J);\n+         end loop;\n \n-            --  Add the linker options from the binder file\n+         --  Finally add the libraries from the --GCC= switch\n \n-            for J in Linker_Options.First .. Linker_Options.Last loop\n-               Index := Index + 1;\n-               Args (Index) := Linker_Options.Table (J);\n-            end loop;\n+         for J in Gcc_Linker_Options.First .. Gcc_Linker_Options.Last loop\n+            Index := Index + 1;\n+            Args (Index) := Gcc_Linker_Options.Table (J);\n+         end loop;\n \n-            --  Finally add the libraries from the --GCC= switch\n+         if Verbose_Mode then\n+            Write_Str (Linker_Path.all);\n \n-            for J in Gcc_Linker_Options.First .. Gcc_Linker_Options.Last loop\n-               Index := Index + 1;\n-               Args (Index) := Gcc_Linker_Options.Table (J);\n+            for J in Args'Range loop\n+               Write_Str (\" \");\n+               Write_Str (Args (J).all);\n             end loop;\n \n-            if Verbose_Mode then\n-               Write_Str (Linker_Path.all);\n+            Write_Eol;\n \n-               for J in Args'Range loop\n-                  Write_Str (\" \");\n-                  Write_Str (Args (J).all);\n-               end loop;\n+            --  If we are on very verbose mode (-v -v) and a response file\n+            --  is used we display its content.\n \n+            if Very_Verbose_Mode and then Tname_FD /= Invalid_FD then\n+               Write_Eol;\n+               Write_Str (\"Response file (\" &\n+                            Tname (Tname'First .. Tname'Last - 1) &\n+                            \") content : \");\n                Write_Eol;\n \n-               --  If we are on very verbose mode (-v -v) and a response file\n-               --  is used we display its content.\n-\n-               if Very_Verbose_Mode and then Tname_FD /= Invalid_FD then\n-                  Write_Eol;\n-                  Write_Str (\"Response file (\" &\n-                             Tname (Tname'First .. Tname'Last - 1) &\n-                             \") content : \");\n+               for J in\n+                 Response_File_Objects.First .. Response_File_Objects.Last\n+               loop\n+                  Write_Str (Response_File_Objects.Table (J).all);\n                   Write_Eol;\n+               end loop;\n \n-                  for J in\n-                    Response_File_Objects.First .. Response_File_Objects.Last\n-                  loop\n-                     Write_Str (Response_File_Objects.Table (J).all);\n-                     Write_Eol;\n-                  end loop;\n-\n-                  Write_Eol;\n-               end if;\n+               Write_Eol;\n             end if;\n+         end if;\n \n-            System.OS_Lib.Spawn (Linker_Path.all, Args, Success);\n-\n-            if Success then\n+         System.OS_Lib.Spawn (Linker_Path.all, Args, Success);\n \n-               --  Delete the temporary file used in conjunction with linking\n-               --  if one was created. See Process_Bind_File for details.\n+         if Success then\n \n-               if Tname_FD /= Invalid_FD then\n-                  Delete (Tname);\n-               end if;\n+            --  Delete the temporary file used in conjunction with linking\n+            --  if one was created. See Process_Bind_File for details.\n \n-            else\n-               Error_Msg (\"error when calling \" & Linker_Path.all);\n-               Exit_Program (E_Fatal);\n+            if Tname_FD /= Invalid_FD then\n+               Delete (Tname);\n             end if;\n-         end Call_Linker;\n-      end Link_Step;\n-   end if;\n+\n+         else\n+            Error_Msg (\"error when calling \" & Linker_Path.all);\n+            Exit_Program (E_Fatal);\n+         end if;\n+      end Call_Linker;\n+   end Link_Step;\n \n    --  Only keep the binder output file and it's associated object\n    --  file if compiling with the -g option.  These files are only"}, {"sha": "1009bb066b300daa2a21fee58c245138b3731e4d", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9fbec94e888c688fa4d7e1d23658f54cab2b41/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=2b9fbec94e888c688fa4d7e1d23658f54cab2b41", "patch": "@@ -456,12 +456,33 @@ package body Sem_Case is\n             return;\n          end if;\n \n-         --  Case of only one value that is missing\n+         --  Case of only one value that is duplicated\n \n          if Lo = Hi then\n+\n+            --  Integer type\n+\n             if Is_Integer_Type (Bounds_Type) then\n-               Error_Msg_Uint_1 := Lo;\n-               Error_Msg_N (\"duplication of choice value: ^#!\", C);\n+\n+               --  We have an integer value, Lo, but if the given choice\n+               --  placement is a constant with that value, then use the\n+               --  name of that constant instead in the message:\n+\n+               if Nkind (C) = N_Identifier\n+                 and then Compile_Time_Known_Value (C)\n+                 and then Expr_Value (C) = Lo\n+               then\n+                  Error_Msg_N (\"duplication of choice value: &#!\", C);\n+\n+               --  Not that special case, so just output the integer value\n+\n+               else\n+                  Error_Msg_Uint_1 := Lo;\n+                  Error_Msg_N (\"duplication of choice value: ^#!\", C);\n+               end if;\n+\n+            --  Enumeration type\n+\n             else\n                Error_Msg_Name_1 := Choice_Image (Lo, Bounds_Type);\n                Error_Msg_N (\"duplication of choice value: %#!\", C);\n@@ -470,10 +491,38 @@ package body Sem_Case is\n          --  More than one choice value, so print range of values\n \n          else\n+            --  Integer type\n+\n             if Is_Integer_Type (Bounds_Type) then\n-               Error_Msg_Uint_1 := Lo;\n-               Error_Msg_Uint_2 := Hi;\n-               Error_Msg_N (\"duplication of choice values: ^ .. ^#!\", C);\n+\n+               --  Similar to the above, if C is a range of known values which\n+               --  match Lo and Hi, then use the names. We have to go to the\n+               --  original nodes, since the values will have been rewritten\n+               --  to their integer values.\n+\n+               if Nkind (C) = N_Range\n+                 and then Nkind (Original_Node (Low_Bound  (C))) = N_Identifier\n+                 and then Nkind (Original_Node (High_Bound (C))) = N_Identifier\n+                 and then Compile_Time_Known_Value (Low_Bound (C))\n+                 and then Compile_Time_Known_Value (High_Bound (C))\n+                 and then Expr_Value (Low_Bound (C))  = Lo\n+                 and then Expr_Value (High_Bound (C)) = Hi\n+               then\n+                  Error_Msg_Node_2 := Original_Node (High_Bound (C));\n+                  Error_Msg_N\n+                    (\"duplication of choice values: & .. &#!\",\n+                     Original_Node (Low_Bound (C)));\n+\n+               --  Not that special case, output integer values\n+\n+               else\n+                  Error_Msg_Uint_1 := Lo;\n+                  Error_Msg_Uint_2 := Hi;\n+                  Error_Msg_N (\"duplication of choice values: ^ .. ^#!\", C);\n+               end if;\n+\n+            --  Enumeration type\n+\n             else\n                Error_Msg_Name_1 := Choice_Image (Lo, Bounds_Type);\n                Error_Msg_Name_2 := Choice_Image (Hi, Bounds_Type);"}]}