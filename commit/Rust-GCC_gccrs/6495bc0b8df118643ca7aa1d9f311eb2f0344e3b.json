{"sha": "6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5NWJjMGI4ZGYxMTg2NDNjYTdhYTFkOWYzMTFlYjJmMDM0NGUzYg==", "commit": {"author": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-20T10:22:15Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-20T10:22:15Z"}, "message": "re PR fortran/32001 (MAX intrinsic with large number of arguments)\n\ngcc/fortran:\n2007-05-20  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/32001\n        * check.c (check_rest): Improved argument conformance check and\n        fixed error message generation.\n\n\ngcc/testsuite:\n2007-05-20  Daniel Franke  <franke.daniel@gmail.org>\n\n\tPR fortran/32001\n\t* gfortran.dg/min_max_conformance.f90: Added more testcases.\n\nFrom-SVN: r124869", "tree": {"sha": "ec421757595303c173812267c584be54858cce91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec421757595303c173812267c584be54858cce91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/comments", "author": null, "committer": null, "parents": [{"sha": "643827b29b291d05d4cbe2f64cc78da272232514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643827b29b291d05d4cbe2f64cc78da272232514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643827b29b291d05d4cbe2f64cc78da272232514"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "0e7bc69b47f212900511e3af26b9c0098b915091", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "patch": "@@ -1,3 +1,9 @@\n+2007-05-20  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32001\n+\t* check.c (check_rest): Improved argument conformance check and \n+\tfixed error message generation.\n+\n 2007-05-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/30820"}, {"sha": "682dc8b90a22244bf16a0d66dcae1c44972e58cf", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "patch": "@@ -1486,19 +1486,17 @@ min_max_args (gfc_actual_arglist *arg)\n \n \n static try\n-check_rest (bt type, int kind, gfc_actual_arglist *arg)\n+check_rest (bt type, int kind, gfc_actual_arglist *arglist)\n {\n-  gfc_expr *x, *first_arg;\n-  int n;\n-  char buffer[80];\n+  gfc_actual_arglist *arg, *tmp;\n \n-  if (min_max_args (arg) == FAILURE)\n-    return FAILURE;\n+  gfc_expr *x;\n+  int m, n;\n \n-  n = 1;\n+  if (min_max_args (arglist) == FAILURE)\n+    return FAILURE;\n \n-  first_arg = arg->expr;\n-  for (; arg; arg = arg->next, n++)\n+  for (arg = arglist, n=1; arg; arg = arg->next, n++)\n     {\n       x = arg->expr;\n       if (x->ts.type != type || x->ts.kind != kind)\n@@ -1518,11 +1516,14 @@ check_rest (bt type, int kind, gfc_actual_arglist *arg)\n \t    }\n \t}\n \n-      snprintf (buffer, 80, \"arguments '%s' and '%s' for intrinsic '%s'\",\n-\t\tgfc_current_intrinsic_arg[0], gfc_current_intrinsic_arg[n-1],\n-\t\tgfc_current_intrinsic);\n-      if (gfc_check_conformance (buffer, first_arg, x) == FAILURE)\n-        return FAILURE;\n+      for (tmp = arglist, m=1; tmp != arg; tmp = tmp->next, m++)\n+        {\n+\t  char buffer[80];\n+\t  snprintf (buffer, 80, \"arguments 'a%d' and 'a%d' for intrinsic '%s'\",\n+\t\t    m, n, gfc_current_intrinsic);\n+\t  if (gfc_check_conformance (buffer, tmp->expr, x) == FAILURE)\n+\t    return FAILURE;\n+\t}\n     }\n \n   return SUCCESS;"}, {"sha": "db279f426a269df89f196b27dce0a2c37ac2a84b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "patch": "@@ -1,18 +1,23 @@\n-2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+2007-05-20  Daniel Franke  <franke.daniel@gmail.org>\n+\n+\tPR fortran/32001\n+\t* gfortran.dg/min_max_conformance.f90: Added more testcases.\n+\n+2007-05-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/31585\n \t* gcc.target/i386/sse-vect-types.c: Do not redefine \"static\"\n \tand \"__inline\".  Use \"-msse\" instead of \"-msse2\".\n \n-2006-05-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+2007-05-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR middle-end/7651\n \t* gcc.dg/20030906-1.c: Replace Wextra with Wreturn-type.\n \t* gcc.dg/20030906-2.c: Likewise.\n \t* objc.dg/method-17.m: Add -Wreturn-type.\n \t* obj-c++.dg/method-21.mm: Likewise.\n \t\n-2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+2007-05-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/31585\n \t* gcc.target/i386/sse-13.c: Use \"-mssse3 -msse4a\" compile options."}, {"sha": "4ab249472a76d6c2a1109faa33a994908ec9ce7f", "filename": "gcc/testsuite/gfortran.dg/min_max_conformance.f90", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6495bc0b8df118643ca7aa1d9f311eb2f0344e3b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmin_max_conformance.f90?ref=6495bc0b8df118643ca7aa1d9f311eb2f0344e3b", "patch": "@@ -1,9 +1,10 @@\n ! { dg-compile }\n+! { dg-options \"-fmax-errors=0\" }\n ! PR 31919:  Tests for different ranks in min/max were missing.\n program pr31919\n-  integer :: i4a(2, 2), i4b(2), i4c(4)\n-  real(4) :: r4a(2, 2), r4b(2), r4c(4)\n-  real(8) :: r8a(2, 2), r8b(2), r8c(4)\n+  integer :: i4, i4a(2, 2), i4b(2), i4c(4)\n+  real(4) :: r4, r4a(2, 2), r4b(2), r4c(4)\n+  real(8) :: r8, r8a(2, 2), r8b(2), r8c(4)\n \n   i4a = max(i4a, i4b)            ! { dg-error \"Incompatible ranks\" }\n   i4a = max0(i4a, i4b)           ! { dg-error \"Incompatible ranks\" }\n@@ -32,4 +33,19 @@ program pr31919\n   r4a = min1(r4b, r4c)           ! { dg-error \"different shape for arguments\" }\n   r4a = amin1(r4b, r4c)          ! { dg-error \"different shape for arguments\" }\n   r8a = dmin1(r8b, r8c)          ! { dg-error \"different shape for arguments\" }\n+\n+  ! checking needs to be position independent\n+  i4a = min(i4, i4a, i4, i4b)    ! { dg-error \"Incompatible ranks\" }\n+  r4a = min(r4, r4a, r4, r4b)    ! { dg-error \"Incompatible ranks\" }\n+  r8a = min(r8, r8a, r8, r8b)    ! { dg-error \"Incompatible ranks\" }\n+  i4a = min(i4, i4b, i4, i4c)    ! { dg-error \"different shape for arguments\" }\n+  r4a = min(r4, r4b, r4, r4c)    ! { dg-error \"different shape for arguments\" }\n+  r8a = min(r8, r8b, r8, r8c)    ! { dg-error \"different shape for arguments\" }\n+\n+  i4a = max(i4, i4a, i4, i4b)    ! { dg-error \"Incompatible ranks\" }\n+  r4a = max(r4, r4a, r4, r4b)    ! { dg-error \"Incompatible ranks\" }\n+  r8a = max(r8, r8a, r8, r8b)    ! { dg-error \"Incompatible ranks\" }\n+  i4a = max(i4, i4b, i4, i4c)    ! { dg-error \"different shape for arguments\" }\n+  r4a = max(r4, r4b, r4, r4c)    ! { dg-error \"different shape for arguments\" }\n+  r8a = max(r8, r8b, r8, r8c)    ! { dg-error \"different shape for arguments\" }\n end program"}]}