{"sha": "862b9b225fba6cf3c63234206f2dbc47f1ab5350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyYjliMjI1ZmJhNmNmM2M2MzIzNDIwNmYyZGJjNDdmMWFiNTM1MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-08T18:07:08Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-09T11:07:41Z"}, "message": "libgcov: fix TOPN type casting\n\nThe patch fixes tree-prof.exp tests on solaris11 and i686-linux-gnu,\nproblem was that sizeof of a pointer is different from sizeof gcov_type.\n\nI'm going to install it if there are no objections.\nThanks,\nMartin\n\nlibgcc/ChangeLog:\n\n\tPR gcov-profile/95494\n\t* libgcov-driver.c (write_top_counters): Cast first to\n\tintptr_t as sizeof(*) != sizeof(gcov_type).\n\t* libgcov.h (gcov_counter_set_if_null): Remove.\n\t(gcov_topn_add_value): Cast first to intptr_t and update\n\tlinked list directly.", "tree": {"sha": "132a4505a1eab6d808754c7156b80ffdd4ee10d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132a4505a1eab6d808754c7156b80ffdd4ee10d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/862b9b225fba6cf3c63234206f2dbc47f1ab5350", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7fbYIACgkQTcGC3A+n\nN4WA+wf6AmjyoR3C/nqMT4eIlEPcnfNAi3MYnz8vfXxt8kljyjKTj5RZ2RKb6d4V\n/oEGwG/sVkVA/n2VLE4UkaodQHi7FEHjpcDlw+Hx3WOSXNM7yd6xrrFhA3Rcqjh8\nyMFXBLAxulMpHwIlMgDKWah1XVnJJPn2UQjxTegeNwdyg/RBtFr5o7076a+1/BQb\nefwzx+HB+7bwqhVQDuA0emXaDa+jZBAA+Tv6cXmt51gUYzvPZPmfkP0crgeGMA84\nP+1dqCPrpvZv7yK3nAKqoVfdl/6aR7AGfmuYAFnwHT+aZGEAYTBdnx4Tn839VSW8\nUzAu70SfMPkUFbLFfzx4AeQx/pwY/A==\n=pv/2\n-----END PGP SIGNATURE-----", "payload": "tree 132a4505a1eab6d808754c7156b80ffdd4ee10d2\nparent 009668e31f4ee910eae874b24afb8eb6adf65fae\nauthor Martin Liska <mliska@suse.cz> 1591639628 +0200\ncommitter Martin Liska <mliska@suse.cz> 1591700861 +0200\n\nlibgcov: fix TOPN type casting\n\nThe patch fixes tree-prof.exp tests on solaris11 and i686-linux-gnu,\nproblem was that sizeof of a pointer is different from sizeof gcov_type.\n\nI'm going to install it if there are no objections.\nThanks,\nMartin\n\nlibgcc/ChangeLog:\n\n\tPR gcov-profile/95494\n\t* libgcov-driver.c (write_top_counters): Cast first to\n\tintptr_t as sizeof(*) != sizeof(gcov_type).\n\t* libgcov.h (gcov_counter_set_if_null): Remove.\n\t(gcov_topn_add_value): Cast first to intptr_t and update\n\tlinked list directly.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862b9b225fba6cf3c63234206f2dbc47f1ab5350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862b9b225fba6cf3c63234206f2dbc47f1ab5350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862b9b225fba6cf3c63234206f2dbc47f1ab5350/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009668e31f4ee910eae874b24afb8eb6adf65fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009668e31f4ee910eae874b24afb8eb6adf65fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009668e31f4ee910eae874b24afb8eb6adf65fae"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "cbfcae96d19de66c7902ba30c5c94400a150a708", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862b9b225fba6cf3c63234206f2dbc47f1ab5350/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862b9b225fba6cf3c63234206f2dbc47f1ab5350/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=862b9b225fba6cf3c63234206f2dbc47f1ab5350", "patch": "@@ -352,8 +352,8 @@ write_top_counters (const struct gcov_ctr_info *ci_ptr,\n       gcov_type pair_count = ci_ptr->values[GCOV_TOPN_MEM_COUNTERS * i + 1];\n       gcov_write_counter (ci_ptr->values[GCOV_TOPN_MEM_COUNTERS * i]);\n       gcov_write_counter (pair_count);\n-      for (struct gcov_kvp *node\n-\t   = (struct gcov_kvp *)ci_ptr->values[GCOV_TOPN_MEM_COUNTERS * i + 2];\n+      gcov_type start = ci_ptr->values[GCOV_TOPN_MEM_COUNTERS * i + 2];\n+      for (struct gcov_kvp *node = (struct gcov_kvp *)(intptr_t)start;\n \t   node != NULL; node = node->next)\n \t{\n \t  gcov_write_counter (node->value);"}, {"sha": "5d237a4c73048bbb2b4a327659e5f767128cc4b4", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862b9b225fba6cf3c63234206f2dbc47f1ab5350/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862b9b225fba6cf3c63234206f2dbc47f1ab5350/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=862b9b225fba6cf3c63234206f2dbc47f1ab5350", "patch": "@@ -401,24 +401,6 @@ gcov_counter_add (gcov_type *counter, gcov_type value,\n     *counter += value;\n }\n \n-/* Set NODE to memory location COUNTER and make it with atomic operation\n-   if USE_ATOMIC is true.  */\n-\n-static inline int\n-gcov_counter_set_if_null (gcov_type *counter, struct gcov_kvp *node,\n-\t\t\t  int use_atomic ATTRIBUTE_UNUSED)\n-{\n-#if GCOV_SUPPORTS_ATOMIC\n-  if (use_atomic)\n-    return !__sync_val_compare_and_swap (counter, NULL, (intptr_t)node);\n-  else\n-#endif\n-    {\n-      *counter = (intptr_t)node;\n-      return 1;\n-    }\n-}\n-\n /* Add key value pair VALUE:COUNT to a top N COUNTERS.  When INCREMENT_TOTAL\n    is true, add COUNT to total of the TOP counter.  If USE_ATOMIC is true,\n    do it in atomic way.  */\n@@ -432,7 +414,7 @@ gcov_topn_add_value (gcov_type *counters, gcov_type value, gcov_type count,\n \n   struct gcov_kvp *prev_node = NULL;\n   struct gcov_kvp *minimal_node = NULL;\n-  struct gcov_kvp *current_node  = (struct gcov_kvp *)counters[2];\n+  struct gcov_kvp *current_node  = (struct gcov_kvp *)(intptr_t)counters[2];\n \n   while (current_node)\n     {\n@@ -467,10 +449,33 @@ gcov_topn_add_value (gcov_type *counters, gcov_type value, gcov_type count,\n \n       int success = 0;\n       if (!counters[2])\n-\tsuccess = gcov_counter_set_if_null (&counters[2], new_node, use_atomic);\n+\t{\n+#if GCOV_SUPPORTS_ATOMIC\n+\t  if (use_atomic)\n+\t    {\n+\t      struct gcov_kvp **ptr = (struct gcov_kvp **)(intptr_t)&counters[2];\n+\t      success = !__sync_val_compare_and_swap (ptr, 0, new_node);\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      counters[2] = (intptr_t)new_node;\n+\t      success = 1;\n+\t    }\n+\t}\n       else if (prev_node && !prev_node->next)\n-\tsuccess = gcov_counter_set_if_null ((gcov_type *)&prev_node->next,\n-\t\t\t\t\t    new_node, use_atomic);\n+\t{\n+#if GCOV_SUPPORTS_ATOMIC\n+\t  if (use_atomic)\n+\t    success = !__sync_val_compare_and_swap (&prev_node->next, 0,\n+\t\t\t\t\t\t    new_node);\n+\t  else\n+#endif\n+\t    {\n+\t      prev_node->next = new_node;\n+\t      success = 1;\n+\t    }\n+\t}\n \n       /* Increment number of nodes.  */\n       if (success)"}]}