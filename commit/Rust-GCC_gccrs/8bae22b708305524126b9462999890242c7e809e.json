{"sha": "8bae22b708305524126b9462999890242c7e809e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhZTIyYjcwODMwNTUyNDEyNmI5NDYyOTk5ODkwMjQyYzdlODA5ZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-01-19T14:37:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-19T14:37:03Z"}, "message": "range_access.h (begin, end): Use _GLIBCXX14_CONSTEXPR on overloads for arrays.\n\n2015-01-19  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* include/bits/range_access.h (begin, end): Use _GLIBCXX14_CONSTEXPR\n\ton overloads for arrays.\n\t(cbegin, cend, rbegin, rend, crbegin, crend): New.\n\t* testsuite/24_iterators/range_access_cpp14.cc: New.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r219846", "tree": {"sha": "1432527859f849943601f0a946e3f3591ed05d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1432527859f849943601f0a946e3f3591ed05d4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bae22b708305524126b9462999890242c7e809e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bae22b708305524126b9462999890242c7e809e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bae22b708305524126b9462999890242c7e809e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bae22b708305524126b9462999890242c7e809e/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f1620105d7dda4132363674b902cbb1e57e8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f1620105d7dda4132363674b902cbb1e57e8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f1620105d7dda4132363674b902cbb1e57e8eb"}], "stats": {"total": 221, "additions": 218, "deletions": 3}, "files": [{"sha": "23969cb42c7dee6e7364b523c65acf242519c0ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8bae22b708305524126b9462999890242c7e809e", "patch": "@@ -1,3 +1,11 @@\n+2015-01-19  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/range_access.h (begin, end): Use _GLIBCXX14_CONSTEXPR\n+\ton overloads for arrays.\n+\t(cbegin, cend, rbegin, rend, crbegin, crend): New.\n+\t* testsuite/24_iterators/range_access_cpp14.cc: New.\n+\n 2015-01-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64646"}, {"sha": "510c0b11e5e323e6e0d2689476463280868303ca", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 128, "deletions": 3, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=8bae22b708305524126b9462999890242c7e809e", "patch": "@@ -33,7 +33,7 @@\n #pragma GCC system_header\n \n #if __cplusplus >= 201103L\n-\n+#include <initializer_list>\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<class _Tp, size_t _Nm>\n-    inline _Tp*\n+    inline _GLIBCXX14_CONSTEXPR _Tp*\n     begin(_Tp (&__arr)[_Nm])\n     { return __arr; }\n \n@@ -93,10 +93,135 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<class _Tp, size_t _Nm>\n-    inline _Tp*\n+    inline _GLIBCXX14_CONSTEXPR _Tp*\n     end(_Tp (&__arr)[_Nm])\n     { return __arr + _Nm; }\n \n+#if __cplusplus >= 201402L\n+  /**\n+   *  @brief  Return an iterator pointing to the first element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline constexpr auto\n+    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\n+      -> decltype(std::begin(__cont))\n+    { return std::begin(__cont); }\n+\n+  /**\n+   *  @brief  Return an iterator pointing to one past the last element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline constexpr auto\n+    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\n+      -> decltype(std::end(__cont))\n+    { return std::end(__cont); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing to the last element of\n+   *          the container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n+    { return __cont.rbegin(); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing to the last element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n+    { return __cont.rbegin(); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing one past the first element of\n+   *          the container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    rend(_Container& __cont) -> decltype(__cont.rend())\n+    { return __cont.rend(); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing one past the first element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    rend(const _Container& __cont) -> decltype(__cont.rend())\n+    { return __cont.rend(); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing to the last element of\n+   *          the array.\n+   *  @param  __arr  Array.\n+   */\n+  template<class _Tp, size_t _Nm>\n+    inline reverse_iterator<_Tp*>\n+    rbegin(_Tp (&__arr)[_Nm])\n+    { return reverse_iterator<_Tp*>(__arr + _Nm); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing one past the first element of\n+   *          the array.\n+   *  @param  __arr  Array.\n+   */\n+  template<class _Tp, size_t _Nm>\n+    inline reverse_iterator<_Tp*>\n+    rend(_Tp (&__arr)[_Nm])\n+    { return reverse_iterator<_Tp*>(__arr); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing to the last element of\n+   *          the initializer_list.\n+   *  @param  __il  initializer_list.\n+   */\n+  template<class _Tp>\n+    inline reverse_iterator<const _Tp*>\n+    rbegin(initializer_list<_Tp> __il)\n+    { return reverse_iterator<const _Tp*>(__il.end()); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing one past the first element of\n+   *          the initializer_list.\n+   *  @param  __il  initializer_list.\n+   */\n+  template<class _Tp>\n+    inline reverse_iterator<const _Tp*>\n+    rend(initializer_list<_Tp> __il)\n+    { return reverse_iterator<const _Tp*>(__il.begin()); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing to the last element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n+    { return std::rbegin(__cont); }\n+\n+  /**\n+   *  @brief  Return a reverse iterator pointing one past the first element of\n+   *          the const container.\n+   *  @param  __cont  Container.\n+   */\n+  template<class _Container>\n+    inline auto\n+    crend(const _Container& __cont) -> decltype(std::rend(__cont))\n+    { return std::rend(__cont); }\n+\n+#endif // C++14\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "a75e04cef9a3af2b53940e6f4172efd9db0eca07", "filename": "libstdc++-v3/testsuite/24_iterators/range_access_cpp14.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae22b708305524126b9462999890242c7e809e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc?ref=8bae22b708305524126b9462999890242c7e809e", "patch": "@@ -0,0 +1,82 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++14\" }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 24.6.5, range access [iterator.range]\n+\n+#include <iterator>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void\n+test01()\n+{\n+  int i[1];\n+  VERIFY(std::cbegin(i) == i);\n+  VERIFY(std::cend(i) == i+1);\n+  VERIFY(std::rbegin(i) == std::reverse_iterator<int*>(i+1));\n+  VERIFY(std::rend(i) == std::reverse_iterator<int*>(i));\n+  VERIFY(std::crbegin(i) == std::reverse_iterator<int*>(i+1));\n+  VERIFY(std::crend(i) == std::reverse_iterator<int*>(i));\n+}\n+\n+void\n+test02()\n+{\n+  static int i[1];\n+  constexpr auto b  __attribute__((unused)) = std::begin(i);\n+  constexpr auto e  __attribute__((unused)) = std::end(i);\n+  constexpr auto cb __attribute__((unused)) = std::cbegin(i);\n+  constexpr auto ce __attribute__((unused)) = std::cend(i);\n+}\n+\n+int\n+test03()\n+{\n+  std::initializer_list<int> il{1};\n+  VERIFY(std::cbegin(il) == il.begin());\n+  VERIFY(std::cend(il) == il.end());\n+  VERIFY(std::rbegin(il) == std::reverse_iterator<const int*>(il.end()));\n+  VERIFY(std::rend(il) == std::reverse_iterator<const int*>(il.begin()));\n+  VERIFY(std::crbegin(il) == std::reverse_iterator<const int*>(il.end()));\n+  VERIFY(std::crend(il) == std::reverse_iterator<const int*>(il.begin()));\n+}\n+\n+int\n+test04()\n+{\n+  std::vector<int> v{1};\n+  VERIFY(std::cbegin(v) == v.cbegin());\n+  VERIFY(std::cend(v) == v.cend());\n+  VERIFY(std::rbegin(v) == v.rbegin());\n+  VERIFY(std::rend(v) == v.rend());\n+  VERIFY(std::crbegin(v) == v.crbegin());\n+  VERIFY(std::crend(v) == v.crend());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}