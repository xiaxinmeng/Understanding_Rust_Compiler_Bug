{"sha": "cc99c5fefc057335b9ed6928d997c49bf3ff6575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5OWM1ZmVmYzA1NzMzNWI5ZWQ2OTI4ZDk5N2M0OWJmM2ZmNjU3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-09-15T15:42:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-09-15T15:42:41Z"}, "message": "re PR tree-optimization/45633 (internal compiler error: verify_stmts failed)\n\n\tPR tree-optimization/45633\n\t* tree-cfg.c (verify_gimple_assign_binary): Allow\n\tMINUS_EXPR with lhs and rhs1 pointer vector and\n\trhs2 sizetype vector.\n\t* expr.c (expand_expr_real_2) <case PLUS_EXPR>: For pointer\n\tor vector pointer use TER to optimize pointer subtraction.\n\n\t* gcc.dg/vect/pr45633.c: New test.\n\nFrom-SVN: r164312", "tree": {"sha": "02e725f48b3beb800af69240bed12624b9ce5177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e725f48b3beb800af69240bed12624b9ce5177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc99c5fefc057335b9ed6928d997c49bf3ff6575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc99c5fefc057335b9ed6928d997c49bf3ff6575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc99c5fefc057335b9ed6928d997c49bf3ff6575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc99c5fefc057335b9ed6928d997c49bf3ff6575/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21b6aca3e1df3b774a2895c0d43d9397a2ff4ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b6aca3e1df3b774a2895c0d43d9397a2ff4ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b6aca3e1df3b774a2895c0d43d9397a2ff4ba0"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "09da04770572d8af90b6ded6246d15734e5c449d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc99c5fefc057335b9ed6928d997c49bf3ff6575", "patch": "@@ -1,3 +1,12 @@\n+2010-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45633\n+\t* tree-cfg.c (verify_gimple_assign_binary): Allow\n+\tMINUS_EXPR with lhs and rhs1 pointer vector and\n+\trhs2 sizetype vector.\n+\t* expr.c (expand_expr_real_2) <case PLUS_EXPR>: For pointer\n+\tor vector pointer use TER to optimize pointer subtraction.\n+\n 2010-09-15  Jie Zhang  <jie@codesourcery.com>\n \n \t* config/arm/vfp.md (cmpsf_trap_vfp): Change type from"}, {"sha": "16daddc370f8386e886928900ccb69da63b94a7b", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cc99c5fefc057335b9ed6928d997c49bf3ff6575", "patch": "@@ -7572,6 +7572,24 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t    }\n \t}\n \n+      /* Use TER to expand pointer addition of a negated value\n+\t as pointer subtraction.  */\n+      if ((POINTER_TYPE_P (TREE_TYPE (treeop0))\n+\t   || (TREE_CODE (TREE_TYPE (treeop0)) == VECTOR_TYPE\n+\t       && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (treeop0)))))\n+\t  && TREE_CODE (treeop1) == SSA_NAME\n+\t  && TYPE_MODE (TREE_TYPE (treeop0))\n+\t     == TYPE_MODE (TREE_TYPE (treeop1)))\n+\t{\n+\t  gimple def = get_def_for_expr (treeop1, NEGATE_EXPR);\n+\t  if (def)\n+\t    {\n+\t      treeop1 = gimple_assign_rhs1 (def);\n+\t      code = MINUS_EXPR;\n+\t      goto do_minus;\n+\t    }\n+\t}\n+\n       /* No sense saving up arithmetic to be done\n \t if it's all in the wrong mode to form part of an address.\n \t And force_operand won't know whether to sign-extend or\n@@ -7593,6 +7611,7 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       return REDUCE_BIT_FIELD (simplify_gen_binary (PLUS, mode, op0, op1));\n \n     case MINUS_EXPR:\n+    do_minus:\n       /* For initializers, we are allowed to return a MINUS of two\n \t symbolic constants.  Here we handle all cases when both operands\n \t are constant.  */"}, {"sha": "cde5eeac81790c83db8bc6f9248f8a981825ffd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc99c5fefc057335b9ed6928d997c49bf3ff6575", "patch": "@@ -1,3 +1,8 @@\n+2010-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45633\n+\t* gcc.dg/vect/pr45633.c: New test.\n+\n 2010-09-15  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45577"}, {"sha": "456d51f1aefff1078b721c7aac1d033e2ef10a0e", "filename": "gcc/testsuite/gcc.dg/vect/pr45633.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45633.c?ref=cc99c5fefc057335b9ed6928d997c49bf3ff6575", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/45633 */\n+/* { dg-do compile } */\n+\n+int s[32];\n+unsigned char *t[32];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    t[i] -= s[i];\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "be8a84fef65d32e07190c745da5c6793ef069dac", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc99c5fefc057335b9ed6928d997c49bf3ff6575/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cc99c5fefc057335b9ed6928d997c49bf3ff6575", "patch": "@@ -3448,8 +3448,9 @@ verify_gimple_assign_binary (gimple stmt)\n       }\n \n     case PLUS_EXPR:\n+    case MINUS_EXPR:\n       {\n-\t/* We use regular PLUS_EXPR for vectors.\n+\t/* We use regular PLUS_EXPR and MINUS_EXPR for vectors.\n \t   ???  This just makes the checker happy and may not be what is\n \t   intended.  */\n \tif (TREE_CODE (lhs_type) == VECTOR_TYPE\n@@ -3474,10 +3475,6 @@ verify_gimple_assign_binary (gimple stmt)\n \t      }\n \t    goto do_pointer_plus_expr_check;\n \t  }\n-      }\n-    /* Fallthru.  */\n-    case MINUS_EXPR:\n-      {\n \tif (POINTER_TYPE_P (lhs_type)\n \t    || POINTER_TYPE_P (rhs1_type)\n \t    || POINTER_TYPE_P (rhs2_type))"}]}