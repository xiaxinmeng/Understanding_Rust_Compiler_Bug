{"sha": "4d95edca1212e23855e4f613b588cbc6dac89999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5NWVkY2ExMjEyZTIzODU1ZTRmNjEzYjU4OGNiYzZkYWM4OTk5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-27T09:01:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-27T09:01:20Z"}, "message": "re PR tree-optimization/68552 (ICE in in expand_expr_real_2 with -O2 -ftree-vectorize)\n\n\tPR tree-optimization/68552\n\t* optabs.c (expand_vec_perm_1): Move vec_shr handling from here...\n\t(expand_vec_perm): ... here.  Do it regardless of vec_perm_const_optab\n\tor whether v0 == v1.\n\nFrom-SVN: r231000", "tree": {"sha": "6e32a26908605a983ebe994d795e5db81468cc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e32a26908605a983ebe994d795e5db81468cc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d95edca1212e23855e4f613b588cbc6dac89999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d95edca1212e23855e4f613b588cbc6dac89999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d95edca1212e23855e4f613b588cbc6dac89999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d95edca1212e23855e4f613b588cbc6dac89999/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aec17bfe911ec61571db80eb5b0093a5b19e39e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec17bfe911ec61571db80eb5b0093a5b19e39e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec17bfe911ec61571db80eb5b0093a5b19e39e4"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "d70eddb1960ac16d364ca537abf73bee6f4f2ffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d95edca1212e23855e4f613b588cbc6dac89999/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d95edca1212e23855e4f613b588cbc6dac89999/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d95edca1212e23855e4f613b588cbc6dac89999", "patch": "@@ -1,3 +1,10 @@\n+2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68552\n+\t* optabs.c (expand_vec_perm_1): Move vec_shr handling from here...\n+\t(expand_vec_perm): ... here.  Do it regardless of vec_perm_const_optab\n+\tor whether v0 == v1.\n+\n 2015-11-27  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-uninit.c: Fix whitespaces in the source file."}, {"sha": "550764293b99137b4c879ec348b1dcc00df2259d", "filename": "gcc/optabs.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d95edca1212e23855e4f613b588cbc6dac89999/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d95edca1212e23855e4f613b588cbc6dac89999/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4d95edca1212e23855e4f613b588cbc6dac89999", "patch": "@@ -5274,17 +5274,6 @@ expand_vec_perm_1 (enum insn_code icode, rtx target,\n   else\n     {\n       create_input_operand (&ops[1], v0, tmode);\n-      /* See if this can be handled with a vec_shr.  We only do this if the\n-         second vector is all zeroes.  */\n-      enum insn_code shift_code = optab_handler (vec_shr_optab, GET_MODE (v0));\n-      if (v1 == CONST0_RTX (GET_MODE (v1)) && shift_code)\n-\tif (rtx shift_amt = shift_amt_for_vec_perm_mask (sel))\n-\t  {\n-\t    create_convert_operand_from_type (&ops[2], shift_amt,\n-\t\t\t\t\t      sizetype_tab[(int) stk_sizetype]);\n-\t    if (maybe_expand_insn (shift_code, 3, ops))\n-\t      return ops[0].value;\n-\t  }\n       create_input_operand (&ops[2], v1, tmode);\n     }\n \n@@ -5326,6 +5315,44 @@ expand_vec_perm (machine_mode mode, rtx v0, rtx v1, rtx sel, rtx target)\n   gcc_assert (GET_MODE_CLASS (GET_MODE (sel)) == MODE_VECTOR_INT);\n   if (GET_CODE (sel) == CONST_VECTOR)\n     {\n+      /* See if this can be handled with a vec_shr.  We only do this if the\n+\t second vector is all zeroes.  */\n+      enum insn_code shift_code = optab_handler (vec_shr_optab, mode);\n+      enum insn_code shift_code_qi = ((qimode != VOIDmode && qimode != mode)\n+\t\t\t\t      ? optab_handler (vec_shr_optab, qimode)\n+\t\t\t\t      : CODE_FOR_nothing);\n+      rtx shift_amt = NULL_RTX;\n+      if (v1 == CONST0_RTX (GET_MODE (v1))\n+\t  && (shift_code != CODE_FOR_nothing\n+\t      || shift_code_qi != CODE_FOR_nothing))\n+\t{\n+\t  shift_amt = shift_amt_for_vec_perm_mask (sel);\n+\t  if (shift_amt)\n+\t    {\n+\t      struct expand_operand ops[3];\n+\t      if (shift_code != CODE_FOR_nothing)\n+\t\t{\n+\t\t  create_output_operand (&ops[0], target, mode);\n+\t\t  create_input_operand (&ops[1], v0, mode);\n+\t\t  create_convert_operand_from_type (&ops[2], shift_amt,\n+\t\t\t\t\t\t    sizetype);\n+\t\t  if (maybe_expand_insn (shift_code, 3, ops))\n+\t\t    return ops[0].value;\n+\t\t}\n+\t      if (shift_code_qi != CODE_FOR_nothing)\n+\t\t{\n+\t\t  tmp = gen_reg_rtx (qimode);\n+\t\t  create_output_operand (&ops[0], tmp, qimode);\n+\t\t  create_input_operand (&ops[1], gen_lowpart (qimode, v0),\n+\t\t\t\t\tqimode);\n+\t\t  create_convert_operand_from_type (&ops[2], shift_amt,\n+\t\t\t\t\t\t    sizetype);\n+\t\t  if (maybe_expand_insn (shift_code_qi, 3, ops))\n+\t\t    return gen_lowpart (mode, ops[0].value);\n+\t\t}\n+\t    }\n+\t}\n+\n       icode = direct_optab_handler (vec_perm_const_optab, mode);\n       if (icode != CODE_FOR_nothing)\n \t{"}]}