{"sha": "582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyZjg0NGM2ZTMwZTU5YWM1NjQxYTA0Y2ZiN2ZkZDFhZmY3OGM2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-15T20:22:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-15T20:22:44Z"}, "message": "PR c++/82882 - ICE with lambda in template default argument.\n\n\t* lambda.c (record_null_lambda_scope): New.\n\t* pt.c (tsubst_lambda_expr): Use it.\n\t* name-lookup.c (do_pushtag): Don't give a lambda DECL_CONTEXT of a\n\tfunction that isn't open.\n\nFrom-SVN: r261654", "tree": {"sha": "e8d7988ab646f3a4845371fd779e5edee4b9690b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8d7988ab646f3a4845371fd779e5edee4b9690b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "508f1cb51f5872f425a3d4eb3ab8bf5a76a692ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508f1cb51f5872f425a3d4eb3ab8bf5a76a692ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508f1cb51f5872f425a3d4eb3ab8bf5a76a692ac"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "f6c69087ce28a6e71f2a5573398ab6ee02535dd6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -1,5 +1,11 @@\n 2018-06-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/82882 - ICE with lambda in template default argument.\n+\t* lambda.c (record_null_lambda_scope): New.\n+\t* pt.c (tsubst_lambda_expr): Use it.\n+\t* name-lookup.c (do_pushtag): Don't give a lambda DECL_CONTEXT of a\n+\tfunction that isn't open.\n+\n \t* tree.c (maybe_warn_parm_abi): Inform the location of the class.\n \n 2018-06-14  Marek Polacek  <polacek@redhat.com>"}, {"sha": "3566668efef5b9202c7d8ec73f22c5e944a15f44", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -7018,6 +7018,7 @@ extern tree finish_builtin_launder\t\t(location_t, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern void start_lambda_scope\t\t\t(tree);\n extern void record_lambda_scope\t\t\t(tree);\n+extern void record_null_lambda_scope\t\t(tree);\n extern void finish_lambda_scope\t\t\t(void);\n extern tree start_lambda_function\t\t(tree fn, tree lambda_expr);\n extern void finish_lambda_function\t\t(tree body);"}, {"sha": "3776d6bcea9ce5f3b2d5437ed06a4ee6d0b55d47", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -1380,6 +1380,24 @@ record_lambda_scope (tree lambda)\n   LAMBDA_EXPR_DISCRIMINATOR (lambda) = lambda_count++;\n }\n \n+/* This lambda is an instantiation of a lambda in a template default argument\n+   that got no LAMBDA_EXPR_EXTRA_SCOPE, so this shouldn't either.  But we do\n+   need to use and increment the global count to avoid collisions.  */\n+\n+void\n+record_null_lambda_scope (tree lambda)\n+{\n+  if (vec_safe_is_empty (lambda_scope_stack))\n+    record_lambda_scope (lambda);\n+  else\n+    {\n+      tree_int *p = lambda_scope_stack->begin();\n+      LAMBDA_EXPR_EXTRA_SCOPE (lambda) = p->t;\n+      LAMBDA_EXPR_DISCRIMINATOR (lambda) = p->i++;\n+    }\n+  gcc_assert (LAMBDA_EXPR_EXTRA_SCOPE (lambda) == NULL_TREE);\n+}\n+\n void\n finish_lambda_scope (void)\n {"}, {"sha": "7990029d70cd16f7dd5374245a801edcebbecd70", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -6542,6 +6542,14 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t{\n \t  tree cs = current_scope ();\n \n+\t  /* Avoid setting the lambda context to a current_function_decl that\n+\t     we aren't actually inside, e.g. one set by push_access_scope\n+\t     during tsubst_default_argument.  */\n+\t  if (cs && TREE_CODE (cs) == FUNCTION_DECL\n+\t      && LAMBDA_TYPE_P (type)\n+\t      && !at_function_scope_p ())\n+\t    cs = DECL_CONTEXT (cs);\n+\n \t  if (scope == ts_current\n \t      || (cs && TREE_CODE (cs) == FUNCTION_DECL))\n \t    context = cs;"}, {"sha": "ed634ddeefbdc2fde0bc38621024e249e61c3371", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -17530,7 +17530,11 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   LAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n \n   if (LAMBDA_EXPR_EXTRA_SCOPE (t) == NULL_TREE)\n-    LAMBDA_EXPR_EXTRA_SCOPE (r) = NULL_TREE;\n+    /* A lambda in a default argument outside a class gets no\n+       LAMBDA_EXPR_EXTRA_SCOPE, as specified by the ABI.  But\n+       tsubst_default_argument calls start_lambda_scope, so we need to\n+       specifically ignore it here, and use the global scope.  */\n+    record_null_lambda_scope (r);\n   else\n     record_lambda_scope (r);\n "}, {"sha": "cf842ad9dd1051e794479bb33cee19b1692b2e73", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg8.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582f844c6e30e59ac5641a04cfb7fdd1aff78c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg8.C?ref=582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/82282\n+// { dg-do compile { target c++14 } }\n+\n+template<typename = int>\n+void f(const char* a =\n+       ([](int = []{ static int i; return 42; }()) {\n+\t  static int i;\n+\t  return \"\";\n+\t}()));\n+\n+template<typename = int>\n+struct X {\n+  void f(const char* a =\n+\t ([](int = [] { static int i; return 42; }()) { \n+\t    enum { Size = 42 - 1 };\n+\t    return \"\";\n+\t  }()));\n+};\n+\n+void g()\n+{\n+  f();\n+  X<int>().f();\n+}"}]}