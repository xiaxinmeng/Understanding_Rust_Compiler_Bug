{"sha": "12905f106c1cc8c6757038e3c41df478077bb870", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5MDVmMTA2YzFjYzhjNjc1NzAzOGUzYzQxZGY0NzgwNzdiYjg3MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-20T15:28:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-20T15:28:48Z"}, "message": "PR69240 Define inequality operators for <random> param types\n\n\tPR libstdc++/69240\n\t* include/bits/random.h (uniform_real_distribution::param_type)\n\t(normal_distribution::param_type, lognormal_distribution::param_type)\n\t(gamma_distribution::param_type, chi_squared_distribution::param_type)\n\t(cauchy_distribution::param_type, fisher_f_distribution::param_type)\n\t(student_t_distribution::param_type)\n\t(bernoulli_distribution::param_type, binomial_distribution::param_type)\n\t(geometric_distribution::param_type)\n\t(negative_binomial_distribution::param_type)\n\t(poisson_distribution::param_type)\n\t(exponential_distribution::param_type)\n\t(weibull_distribution::param_type)\n\t(extreme_value_distribution::param_type)\n\t(discrete_distribution::param_type)\n\t(piecewise_constant_distribution::param_type)\n\t(piecewise_linear_distribution::param_type): Define operator!=.\n\t* include/bits/uniform_int_dist.h\n\t(uniform_int_distribution::param_type): Likewise.\n\t* include/ext/random (beta_distribution::param_type)\n\t(rice_distribution::param_type, nakagami_distribution::param_type)\n\t(pareto_distribution::param_type, k_distribution::param_type)\n\t(arcsine_distribution::param_type, hoyt_distribution::param_type)\n\t(triangular_distribution::param_type)\n\t(von_mises_distribution::param_type)\n\t(hypergeometric_distribution::param_type)\n\t(logistic_distribution::param_type)\n\t(uniform_on_sphere_distribution::param_type)\n\t(uniform_inside_sphere_distribution::param_type): Likewise.\n\t* testsuite/26_numerics/random/bernoulli_distribution/cons/parms.cc:\n\tTest construction with param_type.\n\t* testsuite/26_numerics/random/binomial_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/exponential_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n\tparms.cc: Likewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/gamma_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/geometric_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n\tparms.cc: Likewise.\n\t* testsuite/26_numerics/random/normal_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/poisson_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/student_t_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/uniform_real_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/weibull_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/ext/random/arcsine_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/beta_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/hoyt_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/hypergeometric_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/ext/random/k_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/logistic_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/nakagami_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/normal_mv_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/pareto_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/rice_distribution/cons/parms.cc: Likewise.\n\t* testsuite/ext/random/triangular_distribution/cons/parms.cc:\n\tLikewise.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/cons/\n\tparms.cc: Likewise.\n\t* testsuite/ext/random/von_mises_distribution/cons/parms.cc: Likewise.\n\nFrom-SVN: r244722", "tree": {"sha": "93ec759f820a9b0cd2a26d566a712a341cf5872a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93ec759f820a9b0cd2a26d566a712a341cf5872a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12905f106c1cc8c6757038e3c41df478077bb870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12905f106c1cc8c6757038e3c41df478077bb870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12905f106c1cc8c6757038e3c41df478077bb870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12905f106c1cc8c6757038e3c41df478077bb870/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3ec628c1db294a2135ea4fab8a71c121186cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3ec628c1db294a2135ea4fab8a71c121186cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3ec628c1db294a2135ea4fab8a71c121186cfb"}], "stats": {"total": 740, "additions": 673, "deletions": 67}, "files": [{"sha": "37edf6e080a4d4996b19e381445e0e75fc2088e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -1,5 +1,84 @@\n 2017-01-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/69240\n+\t* include/bits/random.h (uniform_real_distribution::param_type)\n+\t(normal_distribution::param_type, lognormal_distribution::param_type)\n+\t(gamma_distribution::param_type, chi_squared_distribution::param_type)\n+\t(cauchy_distribution::param_type, fisher_f_distribution::param_type)\n+\t(student_t_distribution::param_type)\n+\t(bernoulli_distribution::param_type, binomial_distribution::param_type)\n+\t(geometric_distribution::param_type)\n+\t(negative_binomial_distribution::param_type)\n+\t(poisson_distribution::param_type)\n+\t(exponential_distribution::param_type)\n+\t(weibull_distribution::param_type)\n+\t(extreme_value_distribution::param_type)\n+\t(discrete_distribution::param_type)\n+\t(piecewise_constant_distribution::param_type)\n+\t(piecewise_linear_distribution::param_type): Define operator!=.\n+\t* include/bits/uniform_int_dist.h\n+\t(uniform_int_distribution::param_type): Likewise.\n+\t* include/ext/random (beta_distribution::param_type)\n+\t(rice_distribution::param_type, nakagami_distribution::param_type)\n+\t(pareto_distribution::param_type, k_distribution::param_type)\n+\t(arcsine_distribution::param_type, hoyt_distribution::param_type)\n+\t(triangular_distribution::param_type)\n+\t(von_mises_distribution::param_type)\n+\t(hypergeometric_distribution::param_type)\n+\t(logistic_distribution::param_type)\n+\t(uniform_on_sphere_distribution::param_type)\n+\t(uniform_inside_sphere_distribution::param_type): Likewise.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/cons/parms.cc:\n+\tTest construction with param_type.\n+\t* testsuite/26_numerics/random/binomial_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n+\tparms.cc: Likewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n+\tparms.cc: Likewise.\n+\t* testsuite/26_numerics/random/normal_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/student_t_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/arcsine_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/beta_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/hoyt_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/hypergeometric_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/k_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/logistic_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/nakagami_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/normal_mv_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/pareto_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/rice_distribution/cons/parms.cc: Likewise.\n+\t* testsuite/ext/random/triangular_distribution/cons/parms.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/cons/\n+\tparms.cc: Likewise.\n+\t* testsuite/ext/random/von_mises_distribution/cons/parms.cc: Likewise.\n+\n \tPR libstdc++/72792\n \t* include/bits/alloc_traits.h (__allocator_traits_base::__diff_type)\n \t(__allocator_traits_base::__size_type): Remove."}, {"sha": "d39cc3e0666e8a70002088a73572b36675393419", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -1707,6 +1707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1732,6 +1733,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -1925,6 +1930,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1951,6 +1957,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_mean == __p2._M_mean\n \t\t  && __p1._M_stddev == __p2._M_stddev); }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_mean;\n \t_RealType _M_stddev;\n@@ -2138,6 +2148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2161,6 +2172,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_m;\n \t_RealType _M_s;\n@@ -2342,6 +2357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2370,6 +2386,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_alpha == __p2._M_alpha\n \t\t  && __p1._M_beta == __p2._M_beta); }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -2559,6 +2579,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2577,6 +2598,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_n == __p2._M_n; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_n;\n       };\n@@ -2769,6 +2794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2792,6 +2818,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -2970,6 +3000,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2993,6 +3024,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_m;\n \t_RealType _M_n;\n@@ -3194,6 +3229,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -3212,6 +3248,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_n == __p2._M_n; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_n;\n       };\n@@ -3409,6 +3449,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     /** The type of the range of the distribution. */\n     typedef bool result_type;\n+\n     /** Parameter type. */\n     struct param_type\n     {\n@@ -3429,6 +3470,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator==(const param_type& __p1, const param_type& __p2)\n       { return __p1._M_p == __p2._M_p; }\n \n+      friend bool\n+      operator!=(const param_type& __p1, const param_type& __p2)\n+      { return !(__p1 == __p2); }\n+\n     private:\n       double _M_p;\n     };\n@@ -3617,6 +3662,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _IntType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -3645,6 +3691,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -3848,6 +3898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _IntType  result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -3870,6 +3921,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_p == __p2._M_p; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize()\n@@ -4048,6 +4103,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _IntType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -4072,6 +4128,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_IntType _M_k;\n \tdouble _M_p;\n@@ -4270,6 +4330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _IntType  result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -4292,6 +4353,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mean == __p2._M_mean; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t// Hosts either log(mean) or the threshold of the simple method.\n \tvoid\n@@ -4486,6 +4551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -4506,6 +4572,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_lambda == __p2._M_lambda; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_lambda;\n       };\n@@ -4688,6 +4758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -4711,6 +4782,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -4891,6 +4966,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -4914,6 +4990,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -5091,6 +5171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _IntType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -5127,6 +5208,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_prob == __p2._M_prob; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -5321,6 +5406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -5368,6 +5454,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -5588,6 +5678,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -5633,8 +5724,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_int == __p2._M_int\n-\t\t  && __p1._M_den == __p2._M_den); }\n+\t{ return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid"}, {"sha": "af7ac14bccfe30120df85516d56bc3ff1b8f7033", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -91,6 +91,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_IntType _M_a;\n \t_IntType _M_b;\n@@ -363,6 +367,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    *__f++ = __uctype(__urng()) - __urngmin + __param.a();\n       }\n \n+  // operator!= and operator<< and operator>> are defined in <bits/random.h>\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "d93757b08dd70461fd9ee4cc1dad6f8dc3d4ea48", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 80, "deletions": 15, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -404,6 +404,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -432,6 +433,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_alpha == __p2._M_alpha\n \t\t  && __p1._M_beta == __p2._M_beta); }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -710,6 +715,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mean == __p2._M_mean && __p1._M_t == __p2._M_t; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \ttemplate <typename _InputIterator1, typename _InputIterator2>\n \t  void _M_init_full(_InputIterator1 __meanbegin,\n@@ -942,6 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -965,8 +975,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_nu == __p2._M_nu\n-\t      && __p1._M_sigma == __p2._M_sigma; }\n+\t{ return __p1._M_nu == __p2._M_nu && __p1._M_sigma == __p2._M_sigma; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid _M_initialize();\n@@ -1184,6 +1197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1207,8 +1221,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_mu == __p2._M_mu\n-\t      && __p1._M_omega == __p2._M_omega; }\n+\t{ return __p1._M_mu == __p2._M_mu && __p1._M_omega == __p2._M_omega; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid _M_initialize();\n@@ -1417,6 +1434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1442,6 +1460,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_alpha == __p2._M_alpha && __p1._M_mu == __p2._M_mu; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid _M_initialize();\n \n@@ -1651,6 +1673,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1680,9 +1703,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_lambda == __p2._M_lambda\n+\t{\n+\t  return __p1._M_lambda == __p2._M_lambda\n \t      && __p1._M_mu == __p2._M_mu\n-\t      && __p1._M_nu == __p2._M_nu; }\n+\t      && __p1._M_nu == __p2._M_nu;\n+\t}\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid _M_initialize();\n@@ -1890,6 +1919,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -1914,6 +1944,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \tvoid _M_initialize();\n \n@@ -2126,6 +2160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2149,8 +2184,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_q == __p2._M_q\n-\t      && __p1._M_omega == __p2._M_omega; }\n+\t{ return __p1._M_q == __p2._M_q && __p1._M_omega == __p2._M_omega; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid _M_initialize();\n@@ -2359,6 +2397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2393,8 +2432,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b\n-\t\t  && __p1._M_c == __p2._M_c); }\n+\t{\n+\t  return (__p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b\n+\t\t  && __p1._M_c == __p2._M_c);\n+\t}\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \n@@ -2646,8 +2691,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_mu == __p2._M_mu\n-\t\t  && __p1._M_kappa == __p2._M_kappa); }\n+\t{ return __p1._M_mu == __p2._M_mu && __p1._M_kappa == __p2._M_kappa; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \t_RealType _M_mu;\n@@ -2889,6 +2937,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      && (__p1._M_K == __p2._M_K)\n \t      && (__p1._M_n == __p2._M_n); }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \n \tresult_type _M_N;\n@@ -3111,6 +3163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -3133,8 +3186,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_a == __p2._M_a\n-\t      && __p1._M_b == __p2._M_b; }\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n \n       private:\n \tvoid _M_initialize();\n@@ -3317,6 +3373,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef std::array<_RealType, _Dimen> result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -3325,8 +3382,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n \tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n+\toperator==(const param_type&, const param_type&)\n \t{ return true; }\n+\n+\tfriend bool\n+\toperator!=(const param_type&, const param_type&)\n+\t{ return false; }\n       };\n \n       /**\n@@ -3530,6 +3591,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_radius == __p2._M_radius; }\n \n+\tfriend bool\n+\toperator!=(const param_type& __p1, const param_type& __p2)\n+\t{ return !(__p1 == __p2); }\n+\n       private:\n \t_RealType _M_radius;\n       };"}, {"sha": "34657e1149192d484540bf3a42fde4b58f793a2f", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -35,8 +35,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<bool>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::bernoulli_distribution::param_type;\n+  const param_type p(0.75);\n+  std::bernoulli_distribution u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == std::numeric_limits<bool>::min() );\n+  VERIFY( u.max() == std::numeric_limits<bool>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "74f0ea6e428121347d06051b3dd735ce707dcdab", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,20 @@ test01()\n   VERIFY( u.max() == u.t() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::binomial_distribution<>::param_type;\n+  const param_type p(3, 0.75);\n+  std::binomial_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == u.t() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "a28819d71a4784a93bd965d5fe3d4dbdbe26538b", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::cauchy_distribution<>::param_type;\n+  const param_type p(5.0, 2.0);\n+  std::cauchy_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::cauchy_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::lowest() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "ad1b079a8ea583acf8d94d8d2f33e791ce5ec04e", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::chi_squared_distribution<>::param_type;\n+  const param_type p(1.5);\n+  std::chi_squared_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::chi_squared_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "38e6c8d4aaa0ff8a8922e28a73e131d7f97635d5", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::exponential_distribution<>::param_type;\n+  const param_type p(0.5);\n+  std::exponential_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::exponential_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "019cb213cac629ada7ae815484706ca14c8d76e9", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::extreme_value_distribution<>::param_type;\n+  const param_type p(5.0, 2.0);\n+  std::extreme_value_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::extreme_value_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::lowest() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "969b3d1504518281c4213fc493c842215f5ecfb2", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::fisher_f_distribution<>::param_type;\n+  const param_type p(0.75);\n+  std::fisher_f_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::fisher_f_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "589fd891c0defab12e8dca67a885a4770d5ca5b4", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::gamma_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  std::gamma_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::gamma_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "f10c46f7e506c54bb8a46b602cb334f2c561025f", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::geometric_distribution<>::param_type;\n+  const param_type p(0.75);\n+  std::geometric_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::geometric_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "6548f60fce4d6786a492c8919a5dc913be253106", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::lognormal_distribution<>::param_type;\n+  const param_type p(5.0, 2.0);\n+  std::lognormal_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::lognormal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "46e45f0bd23efa94ff6568c87ea2fa06ab81ae7e", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::negative_binomial_distribution<>::param_type;\n+  const param_type p(3, 0.75);\n+  std::negative_binomial_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::negative_binomial_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "770b51f9e4f66bee7c652d0de8406d4ab7ad34a2", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::normal_distribution<>::param_type;\n+  const param_type p(5.0, 2.0);\n+  std::normal_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::normal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::lowest() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "e91e9f6051466fd673b4b5a5c6e960a97275f9d7", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::poisson_distribution<>::param_type;\n+  const param_type p(5.0);\n+  std::poisson_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::poisson_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "5ff8b7d495e2476abc2d031ef3b97ba9f5d65f5b", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,21 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::student_t_distribution<>::param_type;\n+  const param_type p(1.5);\n+  std::student_t_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::student_t_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::lowest() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "1a33918a67f5a034a943848b825cc39e0c8e2419", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,20 @@ test01()\n   VERIFY( u.max() == 20 );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::uniform_int_distribution<int>::param_type;\n+  const param_type p(1, 20);\n+  std::uniform_int_distribution<int> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == 1 );\n+  VERIFY( u.max() == 20 );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "428638912a6157322ad3497a92f7c5f62821f344", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -36,8 +36,20 @@ test01()\n   VERIFY( u.max() == 5.0 );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::uniform_real_distribution<double>::param_type;\n+  const param_type p(-5.0, 5.0);\n+  std::uniform_real_distribution<double> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == -5.0 );\n+  VERIFY( u.max() == 5.0 );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "c3638cb0e466133eec4a8d39f8208db321c795a0", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,8 +37,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = std::weibull_distribution<>::param_type;\n+  const param_type p(2.0, 3.5);\n+  std::weibull_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef std::weibull_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "9c5e8b6a5f1411bb2e85ed0d5fd4858ed21ecffb", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -33,9 +33,20 @@ test01()\n   VERIFY( u.max() == 3.0 );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::arcsine_distribution<>::param_type;\n+  const param_type p(-1.5, 3.0);\n+  __gnu_cxx::arcsine_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == -1.5 );\n+  VERIFY( u.max() == 3.0 );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "a9ea0332c613cb150f675171185295c168b4b7c8", "filename": "libstdc++-v3/testsuite/ext/random/beta_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -34,8 +34,20 @@ test01()\n   VERIFY( u.max() == 1.0 );\n }\n \n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::beta_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::beta_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "61149ea5b6f5b1d0021e726fa619d52b2ab40777", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -34,9 +34,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::hoyt_distribution<>::param_type;\n+  const param_type p(0.05, 3.0);\n+  __gnu_cxx::hoyt_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::hoyt_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "d8cb70a8a9105b280f86340c42d2186a01885a0d", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,9 +37,20 @@ test01()\n   VERIFY( u.max() == 2 );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::hypergeometric_distribution<>::param_type;\n+  const param_type p(15, 3, 2);\n+  __gnu_cxx::hypergeometric_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == 2 );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "19aa8ffe6759f60a5580d65c6aec49385182ca37", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -38,9 +38,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::k_distribution<>::param_type;\n+  const param_type p(2.0, 1.5, 3.0);\n+  __gnu_cxx::k_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::k_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "1ec3bf3df23b7367b96a806b8f557ab8de8804b0", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/cons/parms.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -38,9 +38,22 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::logistic_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::logistic_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+\n+  typedef __gnu_cxx::logistic_distribution<>::result_type result_type;\n+  VERIFY( u.min() == -std::numeric_limits<result_type>::max() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "f2d187fa0edbfdd7761a9eea5118b2f1ea65cc03", "filename": "libstdc++-v3/testsuite/ext/random/nakagami_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,9 +37,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::nakagami_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::nakagami_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::nakagami_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "35ba4c46f591dd32655230a2fd40307b024e9be1", "filename": "libstdc++-v3/testsuite/ext/random/normal_mv_distribution/cons/parms.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -40,8 +40,23 @@ test01()\n   VERIFY( u.max()[1] == std::numeric_limits<result_type::value_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::normal_mv_distribution<2>::param_type;\n+  const param_type p({5.0, 4.0}, {4.0, 9.0});\n+  __gnu_cxx::normal_mv_distribution<2> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::normal_mv_distribution<2>::result_type result_type;\n+  VERIFY( u.min()[0] == std::numeric_limits<result_type::value_type>::lowest() );\n+  VERIFY( u.max()[0] == std::numeric_limits<result_type::value_type>::max() );\n+  VERIFY( u.min()[1] == std::numeric_limits<result_type::value_type>::lowest() );\n+  VERIFY( u.max()[1] == std::numeric_limits<result_type::value_type>::max() );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "7bbc2f0a86c7dd636d9a09af44b1fbaaf83857a7", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,9 +37,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::pareto_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::pareto_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::pareto_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "d8cbcda93f7f30b379f3f0dbdf555122302687b8", "filename": "libstdc++-v3/testsuite/ext/random/rice_distribution/cons/parms.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -37,9 +37,20 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::rice_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::rice_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  typedef __gnu_cxx::rice_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "1c71f6cbda11753ccd9eca72c6330ed5126c3cf8", "filename": "libstdc++-v3/testsuite/ext/random/triangular_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -35,8 +35,20 @@ test01()\n   VERIFY( u.max() == 3.5 );\n }\n \n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::triangular_distribution<>::param_type;\n+  const param_type p(1.5, 3.0, 3.5);\n+  __gnu_cxx::triangular_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == 1.5 );\n+  VERIFY( u.max() == 3.5 );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "5752691e1f21a79db8f9bc738aa646bf347ff55d", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -27,18 +27,26 @@\n void\n test01()\n {\n-  bool test [[gnu::unused]] = true;\n-\n   __gnu_cxx::uniform_inside_sphere_distribution<2> u(1.5);\n   VERIFY( u.radius() == 1.5 );\n \n   __gnu_cxx::uniform_inside_sphere_distribution<3> v(3.0);\n   VERIFY( v.radius() == 3.0 );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using param_type\n+    = __gnu_cxx::uniform_inside_sphere_distribution<2>::param_type;\n+  const param_type p(1.5);\n+  __gnu_cxx::uniform_inside_sphere_distribution<2> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+}\n+\n+int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "0cfe3ded700ac749cb395827a90848b5da3015b8", "filename": "libstdc++-v3/testsuite/ext/random/von_mises_distribution/cons/parms.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12905f106c1cc8c6757038e3c41df478077bb870/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fparms.cc?ref=12905f106c1cc8c6757038e3c41df478077bb870", "patch": "@@ -34,8 +34,20 @@ test01()\n   VERIFY( u.max() == __gnu_cxx::__math_constants<double>::__pi );\n }\n \n+void\n+test02()\n+{\n+  using param_type = __gnu_cxx::von_mises_distribution<>::param_type;\n+  const param_type p(1.5, 3.0);\n+  __gnu_cxx::von_mises_distribution<> u(p);\n+  VERIFY( u.param() == p );\n+  VERIFY( u.param() != param_type{} );\n+  VERIFY( u.min() == -__gnu_cxx::__math_constants<double>::__pi );\n+  VERIFY( u.max() == __gnu_cxx::__math_constants<double>::__pi );\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}]}