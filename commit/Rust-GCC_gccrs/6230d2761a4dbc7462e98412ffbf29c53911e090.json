{"sha": "6230d2761a4dbc7462e98412ffbf29c53911e090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzMGQyNzYxYTRkYmM3NDYyZTk4NDEyZmZiZjI5YzUzOTExZTA5MA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-04-03T01:20:56Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-04-03T01:20:56Z"}, "message": "Document ALLOCATED, ANINT, ANY, ASIN; Fix typos.\n\nFrom-SVN: r97473", "tree": {"sha": "a9183517a58e0ea1d6188386263051cac51cae8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9183517a58e0ea1d6188386263051cac51cae8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6230d2761a4dbc7462e98412ffbf29c53911e090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6230d2761a4dbc7462e98412ffbf29c53911e090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6230d2761a4dbc7462e98412ffbf29c53911e090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6230d2761a4dbc7462e98412ffbf29c53911e090/comments", "author": null, "committer": null, "parents": [{"sha": "80ad92e9852a26508113712cfd98b242fc105f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ad92e9852a26508113712cfd98b242fc105f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ad92e9852a26508113712cfd98b242fc105f92"}], "stats": {"total": 261, "additions": 235, "deletions": 26}, "files": [{"sha": "a3ecacd0faca05b9fa66065685a9b2d15ba33121", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6230d2761a4dbc7462e98412ffbf29c53911e090/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6230d2761a4dbc7462e98412ffbf29c53911e090/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6230d2761a4dbc7462e98412ffbf29c53911e090", "patch": "@@ -1,3 +1,7 @@\n+2005-04-02  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* intrinsic.texi: Document ALLOCATED, ANINT, ANY, ASIN; fix typos\n+\n 2005-04-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* decl.c, f95-lang.c, interface.c, module.c, trans-stmt.c,"}, {"sha": "ed7911edb583f83472bd10b33e54edb7d623e1db", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 231, "deletions": 26, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6230d2761a4dbc7462e98412ffbf29c53911e090/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6230d2761a4dbc7462e98412ffbf29c53911e090/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=6230d2761a4dbc7462e98412ffbf29c53911e090", "patch": "@@ -32,16 +32,20 @@ This portion of the document is incomplete and undergoing massive expansion\n and editing.  All contributions and corrections are strongly encouraged. \n \n @menu\n-* Introduction:   Introduction\n-* @code{ABORT}:   ABORT,    Abort the program     \n-* @code{ABS}:     ABS,      Absolute value     \n-* @code{ACHAR}:   ACHAR,    Character in @acronym{ASCII} collating sequence\n-* @code{ACOS}:    ACOS,     Arccosine function\n-* @code{ADJUSTL}: ADJUSTL,  Left adjust a string\n-* @code{ADJUSTR}: ADJUSTR,  Right adjust a string\n-* @code{AIMAG}:   AIMAG,    Imaginary part of complex number\n-* @code{AINT}:    AINT,     Truncate to a whole number\n-* @code{ALL}:     ALL,      Determine all values are true\n+* Introduction:     Introduction\n+* @code{ABORT}:     ABORT,     Abort the program     \n+* @code{ABS}:       ABS,       Absolute value     \n+* @code{ACHAR}:     ACHAR,     Character in @acronym{ASCII} collating sequence\n+* @code{ACOS}:      ACOS,      Arccosine function\n+* @code{ADJUSTL}:   ADJUSTL,   Left adjust a string\n+* @code{ADJUSTR}:   ADJUSTR,   Right adjust a string\n+* @code{AIMAG}:     AIMAG,     Imaginary part of complex number\n+* @code{AINT}:      AINT,      Truncate to a whole number\n+* @code{ALL}:       ALL,       Determine if all values are true\n+* @code{ALLOCATED}: ALLOCATED, Status of allocatable entity\n+* @code{ANINT}:     ANINT,     Nearest whole number\n+* @code{ANY}:       ANY,       Determine if any values are true\n+* @code{ASIN}:      ASIN,      Arcsine function\n @end menu\n \n @node Introduction\n@@ -155,21 +159,21 @@ kind as the argument except the return value is @code{REAL(*)} for a\n \n @item @emph{Example}:\n @smallexample\n-program test_abort\n+program test_abs\n   integer :: i = -1\n   real :: x = -1.e0\n   complex :: z = (-1.e0,0.e0)\n   i = abs(i)\n   x = abs(x)\n   x = abs(z)\n-end program test_abort\n+end program test_abs\n @end smallexample\n \n @item @emph{Specific names}:\n @multitable @columnfractions .24 .24 .24 .24\n @item Name            @tab Argument            @tab Return type       @tab Option\n @item @code{CABS(Z)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab f95, gnu\n-@item @code{DABS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{DABS(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}    @tab f95, gnu\n @item @code{IABS(I)}  @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)} @tab f95, gnu\n @item @code{ZABS(Z)}  @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab gnu\n @item @code{CDABS(Z)} @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab gnu\n@@ -211,7 +215,7 @@ kind type parameter is the same as  @code{KIND('A')}.\n program test_achar\n   character c\n   c = achar(32)\n-end program test_abort\n+end program test_achar\n @end smallexample\n @end table\n \n@@ -238,12 +242,14 @@ elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab The type shall be an @code{REAL(*)}.\n+@item @var{X} @tab The type shall be an @code{REAL(*)}, and a magnitude that is\n+less than one.\n @end multitable\n \n @item @emph{Return value}:\n The return value is of type @code{REAL(*)} and it lies in the\n-range @math{ 0 \\leq \\arccos (x) \\leq \\pi}.\n+range @math{ 0 \\leq \\arccos (x) \\leq \\pi}.  The kind type\n+parameter is the same as @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -510,16 +516,215 @@ end program test_all\n @end smallexample\n @end table\n \n-@comment gen   allocated \n-@comment \n-@comment gen   anint\n-@comment       dnint\n-@comment \n-@comment gen   any\n-@comment \n-@comment gen   asin\n-@comment       dasin\n-@comment \n+\n+@node ALLOCATED\n+@section @code{ALLOCATED} --- Status of an allocatable entity\n+@findex @code{ALLOCATED} intrinsic\n+@cindex allocation status\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ALLOCATED(X)} checks the status of wether @var{X} is allocated.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+inquiry function\n+\n+@item @emph{Syntax}:\n+@code{L = ALLOCATED(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X}    @tab The argument shall be an @code{ALLOCATABLE} array.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a scalar @code{LOGICAL} with the default logical\n+kind type parameter.  If @var{X} is allocated, @code{ALLOCATED(X)}\n+is @code{.TRUE.}; otherwise, it returns the @code{.TRUE.} \n+\n+@item @emph{Example}:\n+@smallexample\n+program test_allocated\n+  integer :: i = 4\n+  real(4), allocatable :: x(:)\n+  if (allocated(x) .eqv. .false.) allocate(x(i)\n+end program test_allocated\n+@end smallexample\n+@end table\n+\n+\n+@node ANINT\n+@section @code{ANINT} --- Imaginary part of complex number  \n+@findex @code{ANINT} intrinsic\n+@findex @code{DNINT} intrinsic\n+@cindex whole number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ANINT(X [, KIND])} rounds its argument to the nearest whole number.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = ANINT(X)} @*\n+@code{X = ANINT(X, KIND)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X}    @tab The type of the argument shall be @code{REAL(*)}.\n+@item @var{KIND} @tab (Optional) @var{KIND} shall be a scalar integer\n+initialization expression.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type real with the kind type parameter of the\n+argument if the optional @var{KIND} is absence; otherwise, the kind\n+type parameter will be given by @var{KIND}.  If @var{X} is greater than\n+zero, then @code{ANINT(X)} returns @code{AINT(X+0.5)}.  If @var{X} is\n+less than or equal to zero, then return @code{AINT(X-0.5)}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_anint\n+  real(4) x4\n+  real(8) x8\n+  x4 = 1.234E0_4\n+  x8 = 4.321_8\n+  print *, anint(x4), dnint(x8)\n+  x8 = anint(x4,8)\n+end program test_anint\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument         @tab Return type      @tab Option\n+@item @code{DNINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+@node ANY\n+@section @code{ANY} --- Any value in @var{MASK} along @var{DIM} is true \n+  @findex @code{ANY} intrinsic\n+@cindex true values\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ANY(MASK [, DIM])} determines if any of the values is true in @var{MASK}\n+in the array along dimension @var{DIM}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+transformational function\n+\n+@item @emph{Syntax}:\n+@code{L = ANY(MASK)} @*\n+@code{L = ANY(MASK, DIM)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{MASK} @tab The type of the argument shall be @code{LOGICAL(*)} and\n+it shall not be scalar.\n+@item @var{DIM}  @tab (Optional) @var{DIM} shall be a scalar integer\n+with a value that lies between one and the rank of @var{MASK}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+@code{ANY(MASK)} returns a scalar value of type @code{LOGICAL(*)} where\n+the kind type parameter is the same as the kind type parameter of\n+@var{MASK}.  If @var{DIM} is present, then @code{ANY(MASK, DIM)} returns\n+an array with the rank of @var{MASK} minus 1.  The shape is determined from\n+the shape of @var{MASK} where the @var{DIM} dimension is elided. \n+\n+@table @asis\n+@item (A)\n+@code{ANY(MASK)} is true if any element of @var{MASK} is true;\n+otherwise, it is false.  It also is false if @var{MASK} has zero size.\n+@item (B)\n+If the rank of @var{MASK} is one, then @code{ANY(MASK,DIM)} is equivalent\n+to @code{ANY(MASK)}.  If the rank is greater than one, then @code{ANY(MASK,DIM)}\n+is determined by applying @code{ANY} to the array sections.\n+@end table\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_any\n+  logical l\n+  l = any((/.true., .true., .true./))\n+  print *, l\n+  call section\n+  contains\n+    subroutine section\n+      integer a(2,3), b(2,3)\n+      a = 1\n+      b = 1\n+      b(2,2) = 2\n+      print *, any(a .eq. b, 1)\n+      print *, any(a .eq. b, 2)\n+    end subroutine section\n+end program test_any\n+@end smallexample\n+@end table\n+\n+\n+@node ASIN\n+@section @code{ASIN} --- Arcsine function \n+@findex @code{ASIN} intrinsic\n+@findex @code{DASIN} intrinsic\n+@cindex arcsine\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ASIN(X)} computes the arcsine of its @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = ASIN(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)}, and a magnitude that is\n+less than one.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} and it lies in the\n+range @math{ \\pi / 2 \\leq \\arccos (x) \\leq \\pi / 2}.  The kind type\n+parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_asin\n+  real(8) :: x = 0.866_8\n+  x = asin(x)\n+end program test_asin\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+\n+\n @comment gen   associated\n @comment \n @comment gen   atan"}]}