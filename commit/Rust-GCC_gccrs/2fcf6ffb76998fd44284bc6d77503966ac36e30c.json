{"sha": "2fcf6ffb76998fd44284bc6d77503966ac36e30c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjZjZmZmI3Njk5OGZkNDQyODRiYzZkNzc1MDM5NjZhYzM2ZTMwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-05T16:56:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-05T16:56:16Z"}, "message": "PR libstdc++/39644 (partial)\n\n2009-04-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39644 (partial)\n\t* include/bits/random.tcc (linear_congruential_engine<>::\n\tseed(seed_seq&), independent_bits_engine<>::operator(),\n\tgenerate_canonical(_UniformRandomNumberGenerator&)): Avoid log2l.\n\nFrom-SVN: r145563", "tree": {"sha": "3d11f82ce84a76a1e48fdff48cbe6215fccf6424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d11f82ce84a76a1e48fdff48cbe6215fccf6424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fcf6ffb76998fd44284bc6d77503966ac36e30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcf6ffb76998fd44284bc6d77503966ac36e30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fcf6ffb76998fd44284bc6d77503966ac36e30c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcf6ffb76998fd44284bc6d77503966ac36e30c/comments", "author": null, "committer": null, "parents": [{"sha": "bb2aaded920b60d650a97ef2f6efb8dd01b1b6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2aaded920b60d650a97ef2f6efb8dd01b1b6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2aaded920b60d650a97ef2f6efb8dd01b1b6b4"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "10014eb2f763fb9dafb383a32c53762b4dbc9c70", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcf6ffb76998fd44284bc6d77503966ac36e30c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcf6ffb76998fd44284bc6d77503966ac36e30c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2fcf6ffb76998fd44284bc6d77503966ac36e30c", "patch": "@@ -1,3 +1,10 @@\n+2009-04-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/39644 (partial)\n+\t* include/bits/random.tcc (linear_congruential_engine<>::\n+\tseed(seed_seq&), independent_bits_engine<>::operator(),\n+\tgenerate_canonical(_UniformRandomNumberGenerator&)): Avoid log2l.\n+\n 2009-04-04  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/bits/random.h (struct _ShiftMin1): Fix small typo and"}, {"sha": "bfd017a993400bcc370cb97bbdb6c1446e160f44", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fcf6ffb76998fd44284bc6d77503966ac36e30c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fcf6ffb76998fd44284bc6d77503966ac36e30c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=2fcf6ffb76998fd44284bc6d77503966ac36e30c", "patch": "@@ -118,7 +118,9 @@ namespace std\n     linear_congruential_engine<_UIntType, __a, __c, __m>::\n     seed(seed_seq& __q)\n     {\n-      const _UIntType __k = (std::log2(__m) + 31) / 32;\n+      const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits\n+\t                              : (std::__lg(__m) + 31);\n+      const _UIntType __k = __k0 / 32;\n       _UIntType __arr[__k + 3];\n       __q.generate(__arr + 0, __arr + 3);\n       _UIntType __factor = 1U;\n@@ -130,7 +132,7 @@ namespace std\n         }\n \n       if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-       && (__detail::__mod<_UIntType, 1U, 0U, __m>(__sum) == 0U))\n+\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__sum) == 0U))\n         _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n       else\n         _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__sum);\n@@ -578,7 +580,7 @@ namespace std\n     {\n       const long double __r = static_cast<long double>(this->max())\n \t\t\t    - static_cast<long double>(this->min()) + 1.0L;\n-      const result_type __m = std::log2l(__r);\n+      const result_type __m = std::log10(__r) / std::log10(2.0L);\n       result_type __n, __n0, __y0, __y1, __s0, __s1;\n       for (size_t __i = 0; __i < 2; ++__i)\n \t{\n@@ -2762,7 +2764,7 @@ namespace std\n                    __bits);\n       const long double __r = static_cast<long double>(__urng.max())\n \t\t\t    - static_cast<long double>(__urng.min()) + 1.0L;\n-      const size_t __log2r = std::log2l(__r);\n+      const size_t __log2r = std::log10(__r) / std::log10(2.0L);\n       size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);\n       _RealType __sum = _RealType(0);\n       _RealType __tmp = _RealType(1);"}]}