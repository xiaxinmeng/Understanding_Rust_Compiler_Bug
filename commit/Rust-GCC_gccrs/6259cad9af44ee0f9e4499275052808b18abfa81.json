{"sha": "6259cad9af44ee0f9e4499275052808b18abfa81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1OWNhZDlhZjQ0ZWUwZjllNDQ5OTI3NTA1MjgwOGIxOGFiZmE4MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-02-23T07:12:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-02-23T07:12:03Z"}, "message": "tests_flags.in (CXXFLAGS): Add -rpath to gcc build dir.\n\n\n2001-02-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* tests_flags.in (CXXFLAGS): Add -rpath to gcc build dir.\n\n\t* include/bits/codecvt.h: Use alloca instead of __extension__ for\n\tthe time being.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/std_ostream.h: Same.\n\t* include/bits/fstream.tcc: Same.\n\t* include/bits/locale_facets.tcc: Add typename.\n\t* include/bits/c++config (_GLIBCPP_FULLY_COMPLIANT_HEADERS): Enable.\n\nFrom-SVN: r39991", "tree": {"sha": "585aa48f3db92b809356b489d8f10f3e7ccaa56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585aa48f3db92b809356b489d8f10f3e7ccaa56e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6259cad9af44ee0f9e4499275052808b18abfa81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6259cad9af44ee0f9e4499275052808b18abfa81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6259cad9af44ee0f9e4499275052808b18abfa81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6259cad9af44ee0f9e4499275052808b18abfa81/comments", "author": null, "committer": null, "parents": [{"sha": "25200ab2eba3e561d47d411b81612f7eda9ec109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25200ab2eba3e561d47d411b81612f7eda9ec109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25200ab2eba3e561d47d411b81612f7eda9ec109"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "92887bd863a59e9ced331c90292b5155eec0fe36", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -1,3 +1,15 @@\n+2001-02-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* tests_flags.in (CXXFLAGS): Add -rpath to gcc build dir.\n+\n+\t* include/bits/codecvt.h: Use alloca instead of __extension__ for\n+\tthe time being.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/std_ostream.h: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\t* include/bits/locale_facets.tcc: Add typename.\n+\t* include/bits/c++config (_GLIBCPP_FULLY_COMPLIANT_HEADERS): Enable.\n+\n 2001-02-21  Phil Edwards  <pme@sources.redhat.com>\n \n \t* tests_flags.in:  Remove -n flag from call to echo."}, {"sha": "dfbd40612a284a14d61299c73ce307957c98b41b", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -47,7 +47,7 @@\n // types. For the io library, this means that larger, out-of-line\n // member functions are only declared, and definitions are not parsed\n // by the compiler, but instead instantiated into the library binary.\n-// #define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1\n+#define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1\n \n // To enable older, ARM-style iostreams and other anachronisms use this.\n //#define _GLIBCPP_DEPRECATED 1"}, {"sha": "17aabb3895a33e603488e42486cbf95f20c0884d", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -419,7 +419,7 @@\n \t  if (__int_bom)\n \t    {\t  \n \t      size_t __size = __from_end - __from;\n-\t      __extension__ intern_type __cfixed[__size + 1];\n+\t      intern_type* __cfixed = static_cast<intern_type*>(alloca(sizeof(intern_type) * (__size + 1)));\n \t      __cfixed[0] = static_cast<intern_type>(__int_bom);\n \t      char_traits<intern_type>::copy(__cfixed + 1, __from, __size);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);\n@@ -524,7 +524,7 @@\n \t  if (__ext_bom)\n \t    {\t  \n \t      size_t __size = __from_end - __from;\n-\t      __extension__ extern_type __cfixed[__size + 1];\n+\t      extern_type* __cfixed = (sizeof(extern_type) * (__size + 1));\n \t      __cfixed[0] = static_cast<extern_type>(__ext_bom);\n \t      char_traits<extern_type>::copy(__cfixed + 1, __from, __size);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);"}, {"sha": "76b820ab9de41c2a6f77d8786a075e7f29a3d22d", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -262,7 +262,7 @@ namespace std\n \t      // Part one: (Re)fill external buf (_M_file->_IO_*) from\n \t      // external byte sequence (whatever physical byte sink or\n \t      // FILE actually is.)\n-\t      __extension__ char_type __conv_buf[_M_buf_size];\n+\t      char_type* __conv_buf = static_cast<char_type*>(alloca(sizeof(char_type) * _M_buf_size));\n \t      streamsize __size = _M_file->xsgetn(__conv_buf, _M_buf_size);\n \t      \n \t      // Part two: (Re)fill internal buf contents from external buf.\n@@ -436,7 +436,7 @@ namespace std\n \t  // stack. Convert internal buffer plus __c (ie,\n \t  // \"pending sequence\") to temporary conversion buffer.\n \t  int __plen = _M_out_end - _M_out_beg;\n-\t  __extension__ char_type __pbuf[__plen + 1];\t      \n+\t  char_type* __pbuf = static_cast<char_type*>(alloca(sizeof(char_type) * __plen + 1));\n \t  traits_type::copy(__pbuf, this->pbase(), __plen);\n \t  if (!__testeof)\n \t    {\n@@ -445,7 +445,7 @@ namespace std\n \t    }\n \n \t  char_type* __pend;\n-\t  __extension__ char __conv_buf[__plen];\n+\t  char* __conv_buf = static_cast<char*>(alloca(__plen));\n \t  char* __conv_end;\n \t  _M_state_beg = _M_state_cur;\n "}, {"sha": "8555236d9b3ecc1cb505f80574ee5c1b1d7f9351", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -722,8 +722,8 @@ namespace std\n \n   template <typename _CharT, typename _RaIter>\n     _RaIter\n-    __pad(_RaIter __s, _CharT __fill, int __padding,\n-            random_access_iterator_tag)\n+    __pad(_RaIter __s, _CharT __fill, int __padding, \n+\t  random_access_iterator_tag)\n     {\n       fill_n(__s, __fill);\n       return __s + __padding;\n@@ -741,8 +741,8 @@ namespace std\n     inline _OutIter\n     __pad(_OutIter __s, _CharT __fill, int __padding)\n     {\n-      return __pad(__s, __fill, __padding,\n-                     iterator_traits<_OutIter>::iterator_category());\n+      return __pad(__s, __fill, __padding, \n+\t\t   typename iterator_traits<_OutIter>::iterator_category());\n     }\n \n   template <typename _CharT, typename _OutIter>"}, {"sha": "6464f5bad37dc4e5a6a85022546b80805cd8fcad", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -417,7 +417,7 @@ namespace std {\n       typedef typename traits_type::int_type int_type;\n       \n       int_type __plen = static_cast<size_t>(__newlen - __oldlen); \n-      __extension__ char_type __pads[__plen];\n+      char_type* __pads = static_cast<char_type*>(alloca(sizeof(char_type) * __plen));\n       traits_type::assign(__pads, __plen, __ios.fill()); \n \n       char_type* __beg;\n@@ -496,7 +496,7 @@ namespace std {\n \t{\n \t  try {\n \t    streamsize __w = __out.width();\n-\t    __extension__ _CharT __pads[__w];\n+\t    _CharT* __pads = static_cast<_CharT*>(alloca(sizeof(_CharT) * __w));\n \t    __pads[0] = __c;\n \t    streamsize __len = 1;\n \t    if (__w > __len)\n@@ -529,7 +529,7 @@ namespace std {\n \t{\n \t  try {\n \t    streamsize __w = __out.width();\n-\t    __extension__ char __pads[__w + 1];\n+\t    char* __pads = static_cast<char*>(alloca(__w + 1));\n \t    __pads[0] = __c;\n \t    streamsize __len = 1;\n \t    if (__w > __len)\n@@ -596,15 +596,15 @@ namespace std {\n       if (__cerb)\n \t{\n \t  size_t __clen = __ctraits_type::length(__s);\n-\t  __extension__ _CharT __ws[__clen + 1];\n+\t  _CharT* __ws = static_cast<_CharT*>(alloca(sizeof(_CharT) * (__clen + 1)));\n \t  for (size_t  __i = 0; __i <= __clen; ++__i)\n \t    __ws[__i] = __out.widen(__s[__i]);\n \t  _CharT* __str = __ws;\n \t  \n \t  try {\n \t    streamsize __len = static_cast<streamsize>(__clen);\n \t    streamsize __w = __out.width();\n-\t    __extension__ _CharT __pads[__w];\n+\t    _CharT* __pads = static_cast<_CharT*>(alloca(sizeof(_CharT) * __w));\n \n \t    if (__w > __len)\n \t      {\n@@ -637,7 +637,7 @@ namespace std {\n \t{\n \t  try {\n \t    streamsize __w = __out.width();\n-\t    __extension__ char __pads[__w];\n+\t    char* __pads = static_cast<char*>(alloca(__w));\n \t    streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t    if (__w > __len)\n \t      {"}, {"sha": "d6fcab6df5626bd9e7ebc95d269eb0b11f89c388", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -281,10 +281,3 @@ namespace std {\n #endif\n \n #endif\t/* _CPP_OSTREAM */\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "f900a8db48367d46b43e144c70f6e0de08a04e5f", "filename": "libstdc++-v3/tests_flags.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Ftests_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6259cad9af44ee0f9e4499275052808b18abfa81/libstdc%2B%2B-v3%2Ftests_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftests_flags.in?ref=6259cad9af44ee0f9e4499275052808b18abfa81", "patch": "@@ -23,8 +23,8 @@\n #      needed to run library specific tests,\n #      BUILD_DIR:SRC_DIR:PREFIX_DIR:CXX:CXXFLAGS:INCLUDES:LIBS \n #      the meaning of which is as follows:\n-#        BUILD_DIR   build-dir\n-#        SRC_DIR     src-dir\n+#        BUILD_DIR   libstdc++-v3 build-dir\n+#        SRC_DIR     libstdc++-v3 src-dir\n #        PREFIX_DIR  install-dir (meaningful only with --installed-library)\n #        CXX         which C++ compiler is being used\n #        CXXFLAGS    special flags to pass to g++\n@@ -122,11 +122,13 @@ esac\n # For built or installed libraries, we need to get right OS-specific bits.\n . ${SRC_DIR}/configure.target\n \n-# LIB_PATH == where to find the build libraries for libtool's use\n+# LIB_PATH == where to find the C++ build libraries for libtool's use\n+# GCC_LIB_PATH == where to find the gcc build libraries for libtool's use\n # CXX == the full pathname of the compiler\n case ${query} in\n     --built-library)\n     LIB_PATH=${BUILD_DIR}/src\n+    GCC_LIB_PATH=${BUILD_DIR}/../../gcc\n     CXX=\"${BUILD_DIR}/../../gcc/g++\"\n     ;;\n     --installed-library)\n@@ -143,7 +145,7 @@ CXXFLAGS=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n case ${query} in\n     --built-library)\n     LIBS=\"${LIB_PATH}/../libsupc++/libsupc++.la ${LIB_PATH}/libstdc++.la\n-\t    -no-install\"\n+\t    -no-install -rpath ${GCC_LIB_PATH}\"\n     case @target_os@ in\n         *cygwin*)  LIBS=\"${LIBS} -nodefaultlibs -lgcc -lcygwin -luser32\n                          -lkernel32 -ladvapi32 -lshell32\" ;;"}]}