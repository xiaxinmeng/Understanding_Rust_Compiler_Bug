{"sha": "e32d238855968bce82a6cca4655298c42185508d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyZDIzODg1NTk2OGJjZTgyYTZjY2E0NjU1Mjk4YzQyMTg1NTA4ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-09-19T14:27:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-09-19T14:27:32Z"}, "message": "PR c/81854 - weak alias of an incompatible symbol accepted\n\ngcc/ChangeLog:\n\n\tPR c/81854\n\t* cgraphunit.c (handle_alias_pairs): Reject aliases between functions\n\tof incompatible types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/81854\n\t* gcc.dg/pr81854.c: New test.\n\t* g++.dg/ext/attr-ifunc-5.C: New test.\n\t* g++.dg/ext/attr-ifunc-1.C: Adjust.\n\t* g++.dg/ext/attr-ifunc-2.C: Same.\n\t* g++.dg/ext/attr-ifunc-3.C: Same.\n\t* g++.dg/ext/attr-ifunc-4.C: Same.\n\t* g++.old-deja/g++.abi/vtable2.C: Same.\n\t* gcc.dg/attr-ifunc-1.c: Same.\n\nFrom-SVN: r252976", "tree": {"sha": "486f69ae49356c806e6c4933d62a89e4f35ba897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486f69ae49356c806e6c4933d62a89e4f35ba897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32d238855968bce82a6cca4655298c42185508d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32d238855968bce82a6cca4655298c42185508d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32d238855968bce82a6cca4655298c42185508d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32d238855968bce82a6cca4655298c42185508d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d14c60ad26f57ed6d32180a96cc27c7bf1d7f5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14c60ad26f57ed6d32180a96cc27c7bf1d7f5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14c60ad26f57ed6d32180a96cc27c7bf1d7f5b2"}], "stats": {"total": 259, "additions": 221, "deletions": 38}, "files": [{"sha": "e08ae4c3f4aa90f85330b40596dcb6dec89c3a5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -1,3 +1,9 @@\n+2017-09-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81854\n+\t* cgraphunit.c (handle_alias_pairs): Reject aliases between functions\n+\tof incompatible types.\n+\n 2017-09-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling"}, {"sha": "8c1acf770b9166937175a84c4354ef4ad2081792", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -1352,6 +1352,66 @@ handle_alias_pairs (void)\n       if (TREE_CODE (p->decl) == FUNCTION_DECL\n           && target_node && is_a <cgraph_node *> (target_node))\n \t{\n+\t  tree t1 = TREE_TYPE (p->decl);\n+\t  tree t2 = TREE_TYPE (target_node->decl);\n+\n+\t  if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (p->decl)))\n+\t    {\n+\t      t2 = TREE_TYPE (t2);\n+\t      if (POINTER_TYPE_P (t2))\n+\t\t{\n+\t\t  t2 = TREE_TYPE (t2);\n+\t\t  if (!FUNC_OR_METHOD_TYPE_P (t2))\n+\t\t    {\n+\t\t      if (warning_at (DECL_SOURCE_LOCATION (p->decl),\n+\t\t\t\t      OPT_Wattributes,\n+\t\t\t\t      \"%q+D %<ifunc%> resolver should return \"\n+\t\t\t\t      \"a function pointer\",\n+\t\t\t\t      p->decl))\n+\t\t\tinform (DECL_SOURCE_LOCATION (target_node->decl),\n+\t\t\t\t\"resolver declaration here\");\n+\n+\t\t      t2 = NULL_TREE;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Deal with static member function pointers.  */\n+\t\t  if (TREE_CODE (t2) == RECORD_TYPE\n+\t\t      && TYPE_FIELDS (t2)\n+\t\t      && TREE_CODE (TREE_TYPE (TYPE_FIELDS (t2))) == POINTER_TYPE\n+\t\t      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TYPE_FIELDS (t2))))\n+\t\t\t  == METHOD_TYPE))\n+\t\t    t2 = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (t2)));\n+\t\t  else\n+\t\t    {\n+\t\t      error (\"%q+D %<ifunc%> resolver must return a function \"\n+\t\t\t     \"pointer\",\n+\t\t\t     p->decl);\n+\t\t      inform (DECL_SOURCE_LOCATION (target_node->decl),\n+\t\t\t      \"resolver declaration here\");\n+\n+\t\t      t2 = NULL_TREE;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  if (t2\n+\t      && (!FUNC_OR_METHOD_TYPE_P (t2)\n+\t\t  || (prototype_p (t1)\n+\t\t      && prototype_p (t2)\n+\t\t      && !types_compatible_p (t1, t2))))\n+\t    {\n+\t      /* Warn for incompatibilities.  Avoid warning for functions\n+\t\t without a prototype to make it possible to declare aliases\n+\t\t without knowing the exact type, as libstdc++ does.  */\n+\t      if (warning_at (DECL_SOURCE_LOCATION (p->decl), OPT_Wattributes,\n+\t\t\t      \"%q+D alias between functions of incompatible \"\n+\t\t\t      \"types %qT and %qT\", p->decl, t1, t2))\n+\t\tinform (DECL_SOURCE_LOCATION (target_node->decl),\n+\t\t\t\"aliased declaration here\");\n+\t    }\n+\n \t  cgraph_node *src_node = cgraph_node::get (p->decl);\n \t  if (src_node && src_node->definition)\n \t    src_node->reset ();\n@@ -1366,10 +1426,11 @@ handle_alias_pairs (void)\n \t}\n       else\n \t{\n-\t  error (\"%q+D alias in between function and variable is not supported\",\n+\t  error (\"%q+D alias between function and variable is not supported\",\n \t\t p->decl);\n-\t  warning (0, \"%q+D aliased declaration\",\n-\t\t   target_node->decl);\n+\t  inform (DECL_SOURCE_LOCATION (target_node->decl),\n+\t\t  \"aliased declaration here\");\n+\n \t  alias_pairs->unordered_remove (i);\n \t}\n     }"}, {"sha": "27fc7bad75255c78c4befb28461179b8be088a74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -1,3 +1,15 @@\n+2017-09-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81854\n+\t* gcc.dg/pr81854.c: New test.\n+\t* g++.dg/ext/attr-ifunc-5.C: New test.\n+\t* g++.dg/ext/attr-ifunc-1.C: Adjust.\n+\t* g++.dg/ext/attr-ifunc-2.C: Same.\n+\t* g++.dg/ext/attr-ifunc-3.C: Same.\n+\t* g++.dg/ext/attr-ifunc-4.C: Same.\n+\t* g++.old-deja/g++.abi/vtable2.C: Same.\n+\t* gcc.dg/attr-ifunc-1.c: Same.\n+\n 2017-09-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-ld-misc.c: New."}, {"sha": "2c7bba129597aa63a1c59e45e54ad65acb553797", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-1.C", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -2,33 +2,41 @@\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"-Wno-pmf-conversions\" } */\n \n-#include <stdio.h>\n-\n struct Klass\n {\n   int implementation ();\n   int magic ();\n-  static void *resolver ();\n+\n+  typedef int (Klass::*MemFuncPtr)();\n+\n+  static MemFuncPtr resolver ();\n };\n \n+Klass::MemFuncPtr p = &Klass::implementation;\n+\n int Klass::implementation (void)\n {\n-  printf (\"'ere I am JH\\n\");\n-  return 0;\n+  __builtin_printf (\"'ere I am JH\\n\");\n+  return 1234;\n }\n \n-void *Klass::resolver (void)\n+\n+Klass::MemFuncPtr Klass::resolver (void)\n {\n-  int (Klass::*pmf) () = &Klass::implementation;\n-  \n-  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+  return &Klass::implementation;\n }\n \n+int f (void) __attribute__ ((ifunc (\"foo\")));\n+\n+typedef int (F)(void);\n+extern \"C\" F* foo () { return 0; }\n+\n+\n int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n \n int main ()\n {\n   Klass obj;\n-  \n-  return obj.magic () != 0;\n+\n+  return !(obj.magic () == 1234);\n }"}, {"sha": "49872e0cbeaed2a4f9e4713d9b2396e6cb56b777", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-2.C", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -8,7 +8,10 @@ struct Klass\n {\n   int implementation ();\n   int magic ();\n-  static void *resolver ();\n+\n+  typedef int (Klass::*MemFuncPtr)();\n+\n+  static MemFuncPtr resolver ();\n };\n \n int Klass::implementation (void)\n@@ -17,11 +20,9 @@ int Klass::implementation (void)\n   return 0;\n }\n \n-void *Klass::resolver (void)\n+Klass::memFuncPtr Klass::resolver (void)\n {\n-  int (Klass::*pmf) () = &Klass::implementation;\n-  \n-  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+  return &Klass::implementation;\n }\n \n int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n@@ -33,6 +34,6 @@ struct Klassier : Klass\n int main ()\n {\n   Klassier obj;\n-  \n+\n   return obj.magic () != 0;\n }"}, {"sha": "04206a126e8e290981226a1a9a92402bf42a6fd1", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-3.C", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -8,7 +8,10 @@ struct Klass\n {\n   int implementation ();\n   int magic ();\n-  static void *resolver ();\n+\n+  typedef int (Klass::*MemFuncPtr)();\n+\n+  static MemFuncPtr resolver ();\n };\n \n int Klass::implementation (void)\n@@ -17,11 +20,9 @@ int Klass::implementation (void)\n   return 0;\n }\n \n-void *Klass::resolver (void)\n+Klass::MemFuncPtr Klass::resolver (void)\n {\n-  int (Klass::*pmf) () = &Klass::implementation;\n-  \n-  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+  return &Klass::implementation;\n }\n \n int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n@@ -34,6 +35,6 @@ int Foo (Klass &obj, int (Klass::*pmf) ())\n int main ()\n {\n   Klass obj;\n-  \n+\n   return Foo (obj, &Klass::magic) != 0;\n }"}, {"sha": "b8d8e5879b4cce3f5fa6c35edc8ff31e6d251a38", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-4.C", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -13,7 +13,10 @@ struct Klassier : Klass\n {\n   int implementation ();\n   int magic ();\n-  static void *resolver ();\n+\n+  typedef int (Klass::*MemFuncPtr)();\n+\n+  static MemFuncPtr resolver ();\n };\n \n int Klassier::implementation (void)\n@@ -22,11 +25,9 @@ int Klassier::implementation (void)\n   return 0;\n }\n \n-void *Klassier::resolver (void)\n+Klassier::MemFuncPtr Klassier::resolver (void)\n {\n-  int (Klassier::*pmf) () = &Klassier::implementation;\n-  \n-  return (void *)(int (*)(Klassier *))(((Klassier *)0)->*pmf);\n+  return &Klassier::implementation;\n }\n \n int Klassier::magic (void) __attribute__ ((ifunc (\"_ZN8Klassier8resolverEv\")));\n@@ -39,6 +40,6 @@ int __attribute__ ((weak)) Foo (Klass &base)\n int main ()\n {\n   Klassier obj;\n-  \n+\n   return Foo (obj) != 0;\n }"}, {"sha": "05855dd20c0cc95f94865def734f3620e7bf915f", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-5.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -0,0 +1,29 @@\n+// PR c/81854 - weak alias of an incompatible symbol accepted\n+// { dg-do compile }\n+// { dg-require-ifunc \"\" } */\n+\n+struct Klass\n+{\n+  int implementation ();\n+  const char* magic ();\n+\n+  typedef int (Klass::*MemFuncPtr)();\n+\n+  static MemFuncPtr resolver ();\n+};\n+\n+int Klass::implementation (void)\n+{\n+  return 0;\n+}\n+\n+const char* __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")))\n+  Klass::magic ();   // { dg-warning \"alias between functions of incompatible types\" }\n+\n+\n+\n+Klass::MemFuncPtr\n+Klass::resolver (void) // { dg-message \"aliased declaration here\" }\n+{\n+  return &Klass::implementation;\n+}"}, {"sha": "2c88a95800bc0e2b827f954a6ceebbf113869808", "filename": "gcc/testsuite/g++.old-deja/g++.abi/vtable2.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run  }\n-// { dg-options \"-fno-strict-aliasing\" }\n+// { dg-options \"-Wno-attributes -fno-strict-aliasing\" }\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n #if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n@@ -126,7 +126,8 @@ void S4::s1 ()\n extern \"C\" {\n   /* We can use weakref here without dg-require-weak, because we know\n      the symbols are defined, so we don't actually issue the .weak\n-     directives.  */\n+     directives.  The references to the incompatible virtual S3::s3()\n+     and S4::s1() trigger -Wattributes.  */\n   static void S3_s3 () __attribute__((__weakref__ (\"_ZN2S32s3Ev\")));\n   static void S4_s1 () __attribute__((__weakref__ (\"_ZN2S42s1Ev\")));\n }"}, {"sha": "3f7450e2c699ab9e964c9e1b2f5bdf32c8e2e221", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -2,17 +2,17 @@\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"\" } */\n \n-#include <stdio.h>\n+typedef int F (void);\n \n static int implementation (void)\n {\n-  printf (\"'ere I am JH\\n\");\n+  __builtin_printf (\"'ere I am JH\\n\");\n   return 0;\n }\n \n-static void *resolver (void)\n+static F* resolver (void)\n {\n-  return (void *)implementation;\n+  return implementation;\n }\n \n extern int magic (void) __attribute__ ((ifunc (\"resolver\")));"}, {"sha": "4b0f4da0f810f60ee1b80d8560bc5e036a2be0a3", "filename": "gcc/testsuite/gcc.dg/pr81854.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81854.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32d238855968bce82a6cca4655298c42185508d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81854.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81854.c?ref=e32d238855968bce82a6cca4655298c42185508d", "patch": "@@ -0,0 +1,63 @@\n+/* PR c/81854 - weak alias of an incompatible symbol accepted\n+   { dg-do compile } */\n+\n+const char* __attribute__ ((weak, alias (\"f0_target\")))\n+f0 (void);          /* { dg-error \"alias between function and variable\" } */\n+\n+int f0_target;      /* { dg-message \"aliased declaration here\" } */\n+\n+\n+const char* __attribute__ ((weak, alias (\"f1_target\")))\n+f1 (void);          /* { dg-warning \"alias between functions of incompatible types\" } */\n+\n+void f1_target (int *p)   /* { dg-message \"aliased declaration here\" } */\n+{\n+  *p = 0;\n+}\n+\n+\n+const char* __attribute__ ((alias (\"f2_target\")))\n+f2 (void*);   /* { dg-warning \"alias between functions of incompatible types\" } */\n+\n+const char* f2_target (int i)   /* { dg-message \"aliased declaration here\" } */\n+{\n+  (void)&i;\n+  return 0;\n+}\n+\n+\n+int __attribute__ ((ifunc (\"f3_resolver\")))\n+f3 (void);          /* { dg-error \".ifunc. resolver must return a function pointer\" } */\n+\n+int f3_resolver (void)   /* { dg-message \"resolver declaration here\" } */\n+{\n+  return 0;\n+}\n+\n+\n+int __attribute__ ((ifunc (\"f4_resolver\")))\n+f4 (void);          /* { dg-warning \".ifunc. resolver should return a function pointer\" } */\n+\n+void* f4_resolver (void) /* { dg-message \"resolver declaration here\" } */\n+{\n+  return 0;\n+}\n+\n+\n+int __attribute__ ((ifunc (\"f5_resolver\")))\n+f5 (void);          /* { dg-warning \"alias between functions of incompatible types\" } */\n+\n+typedef void F5 (void);\n+F5* f5_resolver (void) /* { dg-message \"aliased declaration here\" } */\n+{\n+  return 0;\n+}\n+\n+const char* __attribute__ ((ifunc (\"f6_resolver\")))\n+f6 (void);\n+\n+typedef const char* F6 (void);\n+F6* f6_resolver (void)\n+{\n+  return 0;\n+}"}]}