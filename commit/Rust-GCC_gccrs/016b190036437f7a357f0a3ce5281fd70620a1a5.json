{"sha": "016b190036437f7a357f0a3ce5281fd70620a1a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE2YjE5MDAzNjQzN2Y3YTM1N2YwYTNjZTUyODFmZDcwNjIwYTFhNQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-09-07T16:52:04Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-09-07T16:54:23Z"}, "message": "doc: Update documentation on MODE_PARTIAL_INT subregs\n\nIn d8487c949ad5, MODE_PARTIAL_INT modes were changed from having an\nunknown number of undefined bits, to having a known number of undefined\nbits, however the documentation on using SUBREG expressions with\nMODE_PARTIAL_INT modes was not updated to reflect this.\n\ngcc/ChangeLog:\n\n\t* doc/rtl.texi (subreg): Fix documentation to state there is a known\n\tnumber of undefined bits in regs and subregs of MODE_PARTIAL_INT modes.", "tree": {"sha": "3629a056d20cd56d0d9910595ff6125bc5871d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3629a056d20cd56d0d9910595ff6125bc5871d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/016b190036437f7a357f0a3ce5281fd70620a1a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016b190036437f7a357f0a3ce5281fd70620a1a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016b190036437f7a357f0a3ce5281fd70620a1a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016b190036437f7a357f0a3ce5281fd70620a1a5/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f87e446691f1debfe2671a40f8738bd5e128832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f87e446691f1debfe2671a40f8738bd5e128832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f87e446691f1debfe2671a40f8738bd5e128832"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "22af5731bb61ae54b464ed8d3012fe3e17e44d7b", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016b190036437f7a357f0a3ce5281fd70620a1a5/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016b190036437f7a357f0a3ce5281fd70620a1a5/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=016b190036437f7a357f0a3ce5281fd70620a1a5", "patch": "@@ -2209,27 +2209,31 @@ whether the subreg is a lowpart of a block.\n @end table\n \n A @code{MODE_PARTIAL_INT} mode behaves as if it were as wide as the\n-corresponding @code{MODE_INT} mode, except that it has an unknown\n-number of undefined bits.  For example:\n+corresponding @code{MODE_INT} mode, except that it has a number of\n+undefined bits, which are determined by the precision of the\n+mode.\n+\n+For example, on a little-endian target which defines @code{PSImode}\n+to have a precision of 20 bits:\n \n @smallexample\n (subreg:PSI (reg:SI 0) 0)\n @end smallexample\n \n+accesses the low 20 bits of @samp{(reg:SI 0)}.\n+\n @findex REGMODE_NATURAL_SIZE\n-accesses the whole of @samp{(reg:SI 0)}, but the exact relationship\n-between the @code{PSImode} value and the @code{SImode} value is not\n-defined.  If we assume @samp{REGMODE_NATURAL_SIZE (DImode) <= 4},\n+Continuing with a @code{PSImode} precision of 20 bits, if we assume\n+@samp{REGMODE_NATURAL_SIZE (DImode) <= 4},\n then the following two @code{subreg}s:\n \n @smallexample\n (subreg:PSI (reg:DI 0) 0)\n (subreg:PSI (reg:DI 0) 4)\n @end smallexample\n \n-represent independent 4-byte accesses to the two halves of\n-@samp{(reg:DI 0)}.  Both @code{subreg}s have an unknown number\n-of undefined bits.\n+represent accesses to the low 20 bits of the two halves of\n+@samp{(reg:DI 0)}.\n \n If @samp{REGMODE_NATURAL_SIZE (PSImode) <= 2} then these two @code{subreg}s:\n \n@@ -2240,15 +2244,17 @@ If @samp{REGMODE_NATURAL_SIZE (PSImode) <= 2} then these two @code{subreg}s:\n \n represent independent 2-byte accesses that together span the whole\n of @samp{(reg:PSI 0)}.  Storing to the first @code{subreg} does not\n-affect the value of the second, and vice versa.  @samp{(reg:PSI 0)}\n-has an unknown number of undefined bits, so the assignment:\n+affect the value of the second, and vice versa, so the assignment:\n \n @smallexample\n (set (subreg:HI (reg:PSI 0) 0) (reg:HI 4))\n @end smallexample\n \n-does not guarantee that @samp{(subreg:HI (reg:PSI 0) 0)} has the\n-value @samp{(reg:HI 4)}.\n+sets the low 16 bits of @samp{(reg:PSI 0)} to @samp{(reg:HI 4)}, and\n+the high 4 defined bits of @samp{(reg:PSI 0)} retain their\n+original value.  The behavior here is the same as for\n+normal @code{subreg}s, when there are no\n+@code{MODE_PARTIAL_INT} modes involved.\n \n @cindex @code{TARGET_CAN_CHANGE_MODE_CLASS} and subreg semantics\n The rules above apply to both pseudo @var{reg}s and hard @var{reg}s."}]}