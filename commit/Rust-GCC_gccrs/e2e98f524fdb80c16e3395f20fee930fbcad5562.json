{"sha": "e2e98f524fdb80c16e3395f20fee930fbcad5562", "node_id": "C_kwDOANBUbNoAKGUyZTk4ZjUyNGZkYjgwYzE2ZTMzOTVmMjBmZWU5MzBmYmNhZDU1NjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-01T16:30:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-02T16:46:28Z"}, "message": "libstdc++: Remove broken std::allocator base classes [PR103340]\n\nThe bitmap_allocator, __mt_alloc and __pool_alloc extensions are no\nlonger suitable for use as the base class of std::allocator, because\nthey have not been updated to meet the C++20 requirements.  There is a\npatch attached to PR 103340 which addresses that, but more work would be\nneeded to solve the linking errors that occur when the library is\nconfigured to use them.\n\nUsing --enable-libstdcxx-allocator=bitmap wouldn't even bootstrap for\nthe past few years, and I can't find any gcc-testresults reports using\nany of these allocators. This patch removes the configure option to use\nthese as the std::allocator base class. The allocators are still in the\ntree and can be used directly, you just can't configure the library to\nuse one of them as the base class of std::allocator.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103340\n\tPR libstdc++/103400\n\tPR libstdc++/103381\n\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Remove mt, bitmap\n\tand pool options.\n\t* configure: Regenerate.\n\t* config/allocator/bitmap_allocator_base.h: Removed.\n\t* config/allocator/mt_allocator_base.h: Removed.\n\t* config/allocator/pool_allocator_base.h: Removed.\n\t* doc/xml/manual/allocator.xml: Update.\n\t* doc/xml/manual/configure.xml: Update.\n\t* doc/xml/manual/evolution.xml: Document removal.\n\t* doc/xml/manual/mt_allocator.xml: Editorial tweaks.\n\t* doc/html/manual/*: Regenerate.", "tree": {"sha": "6a285173800912402eee81d64fcf8d217eb87622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a285173800912402eee81d64fcf8d217eb87622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e98f524fdb80c16e3395f20fee930fbcad5562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e98f524fdb80c16e3395f20fee930fbcad5562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e98f524fdb80c16e3395f20fee930fbcad5562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e98f524fdb80c16e3395f20fee930fbcad5562/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a568683f71b4a8b1e4e45a43484398e9a66ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a568683f71b4a8b1e4e45a43484398e9a66ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a568683f71b4a8b1e4e45a43484398e9a66ff2"}], "stats": {"total": 361, "additions": 64, "deletions": 297}, "files": [{"sha": "6d9a8875e3186380075ad6a0f302ee8df5f8c833", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -2599,7 +2599,7 @@ AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n   AC_MSG_CHECKING([for std::allocator base class])\n   GLIBCXX_ENABLE(libstdcxx-allocator,auto,[[[=KIND]]],\n     [use KIND for target std::allocator base],\n-    [permit new|malloc|mt|bitmap|pool|yes|no|auto])\n+    [permit new|malloc|yes|no|auto])\n \n   # If they didn't use this option switch, or if they specified --enable\n   # with no specific model, we'll have to look for one.  If they\n@@ -2631,26 +2631,14 @@ AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n \n   # Set configure bits for specified locale package\n   case ${enable_libstdcxx_allocator_flag} in\n-    bitmap)\n-      ALLOCATOR_H=config/allocator/bitmap_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::bitmap_allocator\n-      ;;\n     malloc)\n       ALLOCATOR_H=config/allocator/malloc_allocator_base.h\n       ALLOCATOR_NAME=__gnu_cxx::malloc_allocator\n       ;;\n-    mt)\n-      ALLOCATOR_H=config/allocator/mt_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::__mt_alloc\n-      ;;\n     new)\n       ALLOCATOR_H=config/allocator/new_allocator_base.h\n       ALLOCATOR_NAME=__gnu_cxx::new_allocator\n       ;;\n-    pool)\n-      ALLOCATOR_H=config/allocator/pool_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::__pool_alloc\n-      ;;\n   esac\n \n   GLIBCXX_CONDITIONAL(ENABLE_ALLOCATOR_NEW,"}, {"sha": "40ccbf03449a86a733bd4c50a53198cafa5c3ad8", "filename": "libstdc++-v3/config/allocator/bitmap_allocator_base.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h?ref=b5a568683f71b4a8b1e4e45a43484398e9a66ff2", "patch": "@@ -1,55 +0,0 @@\n-// Base to std::allocator -*- C++ -*-\n-\n-// Copyright (C) 2004-2021 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/c++allocator.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{memory}\n- */\n-\n-#ifndef _GLIBCXX_CXX_ALLOCATOR_H\n-#define _GLIBCXX_CXX_ALLOCATOR_H 1\n-\n-#include <ext/bitmap_allocator.h>\n-\n-#if __cplusplus >= 201103L\n-namespace std\n-{\n-  /**\n-   *  @brief  An alias to the base class for std::allocator.\n-   *  @ingroup allocators\n-   *\n-   *  Used to set the std::allocator base class to\n-   *  __gnu_cxx::bitmap_allocator.\n-   *\n-   *  @tparam  _Tp  Type of allocated object.\n-    */\n-  template<typename _Tp>\n-    using __allocator_base = __gnu_cxx::bitmap_allocator<_Tp>;\n-}\n-#else\n-// Define bitmap_allocator as the base class to std::allocator.\n-# define __allocator_base  __gnu_cxx::bitmap_allocator\n-#endif\n-\n-#endif"}, {"sha": "eb45b8dea6da4ed46950ed6d6fbe9e6659a659b4", "filename": "libstdc++-v3/config/allocator/mt_allocator_base.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h?ref=b5a568683f71b4a8b1e4e45a43484398e9a66ff2", "patch": "@@ -1,55 +0,0 @@\n-// Base to std::allocator -*- C++ -*-\n-\n-// Copyright (C) 2004-2021 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/c++allocator.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{memory}\n- */\n-\n-#ifndef _GLIBCXX_CXX_ALLOCATOR_H\n-#define _GLIBCXX_CXX_ALLOCATOR_H 1\n-\n-#include <ext/mt_allocator.h>\n-\n-#if __cplusplus >= 201103L\n-namespace std\n-{\n-  /**\n-   *  @brief  An alias to the base class for std::allocator.\n-   *  @ingroup allocators\n-   *\n-   *  Used to set the std::allocator base class to\n-   *  __gnu_cxx::__mt_alloc.\n-   *\n-   *  @tparam  _Tp  Type of allocated object.\n-    */\n-  template<typename _Tp>\n-    using __allocator_base = __gnu_cxx::__mt_alloc<_Tp>;\n-}\n-#else\n-// Define __mt_alloc as the base class to std::allocator.\n-# define __allocator_base  __gnu_cxx::__mt_alloc\n-#endif\n-\n-#endif"}, {"sha": "c3ec8ecce8d240b6c264890009d091fac77097b1", "filename": "libstdc++-v3/config/allocator/pool_allocator_base.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a568683f71b4a8b1e4e45a43484398e9a66ff2/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h?ref=b5a568683f71b4a8b1e4e45a43484398e9a66ff2", "patch": "@@ -1,55 +0,0 @@\n-// Base to std::allocator -*- C++ -*-\n-\n-// Copyright (C) 2004-2021 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/c++allocator.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{memory}\n- */\n-\n-#ifndef _GLIBCXX_CXX_ALLOCATOR_H\n-#define _GLIBCXX_CXX_ALLOCATOR_H 1\n-\n-#include <ext/pool_allocator.h>\n-\n-#if __cplusplus >= 201103L\n-namespace std\n-{\n-  /**\n-   *  @brief  An alias to the base class for std::allocator.\n-   *  @ingroup allocators\n-   *\n-   *  Used to set the std::allocator base class to\n-   *  __gnu_cxx::__pool_alloc.\n-   *\n-   *  @tparam  _Tp  Type of allocated object.\n-    */\n-  template<typename _Tp>\n-    using __allocator_base = __gnu_cxx::__pool_alloc<_Tp>;\n-}\n-#else\n-// Define __pool_alloc as the base class to std::allocator.\n-# define __allocator_base  __gnu_cxx::__pool_alloc\n-#endif\n-\n-#endif"}, {"sha": "61a14a2cb3b9f5ff8e3b73d49c7173e070c477a1", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -16848,7 +16848,7 @@ $as_echo_n \"checking for std::allocator base class... \" >&6; }\n if test \"${enable_libstdcxx_allocator+set}\" = set; then :\n   enableval=$enable_libstdcxx_allocator;\n       case \"$enableval\" in\n-       new|malloc|mt|bitmap|pool|yes|no|auto) ;;\n+       new|malloc|yes|no|auto) ;;\n        *) as_fn_error $? \"Unknown argument to enable/disable libstdcxx-allocator\" \"$LINENO\" 5 ;;\n \t  \t        esac\n \n@@ -16889,26 +16889,14 @@ $as_echo \"$enable_libstdcxx_allocator_flag\" >&6; }\n \n   # Set configure bits for specified locale package\n   case ${enable_libstdcxx_allocator_flag} in\n-    bitmap)\n-      ALLOCATOR_H=config/allocator/bitmap_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::bitmap_allocator\n-      ;;\n     malloc)\n       ALLOCATOR_H=config/allocator/malloc_allocator_base.h\n       ALLOCATOR_NAME=__gnu_cxx::malloc_allocator\n       ;;\n-    mt)\n-      ALLOCATOR_H=config/allocator/mt_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::__mt_alloc\n-      ;;\n     new)\n       ALLOCATOR_H=config/allocator/new_allocator_base.h\n       ALLOCATOR_NAME=__gnu_cxx::new_allocator\n       ;;\n-    pool)\n-      ALLOCATOR_H=config/allocator/pool_allocator_base.h\n-      ALLOCATOR_NAME=__gnu_cxx::__pool_alloc\n-      ;;\n   esac\n \n "}, {"sha": "2cc44aed4e36aa504b9e9d1aaf0b5f25f4bd2532", "filename": "libstdc++-v3/doc/html/manual/api.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -444,4 +444,7 @@\n The <code class=\"function\">std::unexpected</code> function and related typedef and\n accessors for the unexpected handler are deprecated for C++11 and later.\n Dynamic exception specifications should be replaced with <code class=\"code\">noexcept</code>.\n+</p><p>\n+The <code class=\"literal\">bitmap</code>, <code class=\"literal\">mt</code>, and <code class=\"literal\">pool</code>\n+options for <code class=\"option\">--enable-libstdcxx-allocator</code> were removed.\n </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"abi.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"backwards.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">ABI Policy and Guidelines\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Backwards Compatibility</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "31c4da8a5e3a1ca8697a0719152dc1e752f007e3", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -64,12 +64,10 @@\n \t<code class=\"code\">'--enable-libstdcxx-allocator=auto'</code> (described\n \tnext).\n      </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-allocator=OPTION  </code></span></dt><dd><p>Select a target-specific underlying std::allocator.  The\n-\tchoices are 'new' to specify a wrapper for new, 'malloc' to\n-\tspecify a wrapper for malloc, 'mt' for a fixed power of two allocator,\n-\t'pool' for the SGI pooled allocator or 'bitmap' for a bitmap allocator.\n-\tSee this page for more information on allocator\n-\t<a class=\"link\" href=\"memory.html#allocator.ext\" title=\"Extension Allocators\">extensions</a>. This option\n-\tcan change the library ABI.\n+\tchoices are 'new' to specify a wrapper for new, and 'malloc' to\n+\tspecify a wrapper for malloc.\n+\tSee <a class=\"xref\" href=\"memory.html#allocator.ext\" title=\"Extension Allocators\">the section called \u201cExtension Allocators\u201d</a> for more information.\n+\tThis option can change the library ABI.\n      </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-cheaders=OPTION</code></span></dt><dd><p>This allows the user to define the approach taken for C header\n \tcompatibility with C++. Options are c, c_std, and c_global.\n \tThese correspond to the source directory's include/c,"}, {"sha": "1681d9853b0fb042f9c0e3e059f8d3ddc35d9085", "filename": "libstdc++-v3/doc/html/manual/memory.html", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmemory.html?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -103,8 +103,9 @@\n    high-speed extension allocators, covered below. Thus, all\n    allocation and deallocation depends on the base class.\n    </p><p>\n-     The base class that <code class=\"classname\">allocator</code> is derived from\n-     may not be user-configurable.\n+     The choice of base class that <code class=\"classname\">allocator</code>\n+     is derived from is fixed at the time when GCC is built,\n+     and the different choices are not ABI compatible.\n </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"allocator.default\"></a>Selecting Default Allocation Policy</h5></div></div></div><p>\n      It's difficult to pick an allocation strategy that will provide\n    maximum utility, without excessively penalizing some behavior. In\n@@ -198,6 +199,10 @@\n      Probably the best place to start would be to copy one of the\n    extension allocators: say a simple one like\n    <code class=\"classname\">new_allocator</code>.\n+   </p><p>\n+     Since C++11 the minimal interface require for an allocator is\n+     much smaller, as <code class=\"classname\">std::allocator_traits</code>\n+     can provide default for much of the interface.\n    </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"allocator.ext\"></a>Extension Allocators</h4></div></div></div><p>\n     Several other allocators are provided as part of this\n     implementation.  The location of the extension allocators and their\n@@ -224,9 +229,10 @@\n        </p></li><li class=\"listitem\"><p>\n        <code class=\"classname\">debug_allocator</code>\n        </p><p>\n-\t A wrapper around an arbitrary allocator A.  It passes on\n-\t slightly increased size requests to A, and uses the extra\n-\t memory to store size information.  When a pointer is passed\n+\t A wrapper around an arbitrary allocator <code class=\"classname\">A</code>.\n+\t It passes on slightly increased size requests to <code class=\"classname\">A</code>,\n+\t and uses the extra memory to store size information.\n+\t When a pointer is passed\n \t to <code class=\"function\">deallocate()</code>, the stored size is\n \t checked, and <code class=\"function\">assert()</code> is used to\n \t guarantee they match.\n@@ -248,41 +254,14 @@\n \t request is passed to <code class=\"function\">::operator new</code>\n \t directly.\n        </p><p>\n-\t Older versions of this class take a boolean template\n-\t parameter, called <code class=\"varname\">thr</code>, and an integer template\n-\t parameter, called <code class=\"varname\">inst</code>.\n+\t For thread-enabled configurations, the pool is locked with a\n+\t single big lock. In some situations, this implementation detail\n+\t may result in severe performance degradation.\n        </p><p>\n-\t The <code class=\"varname\">inst</code> number is used to track additional memory\n-      pools.  The point of the number is to allow multiple\n-      instantiations of the classes without changing the semantics at\n-      all.  All three of\n-       </p><pre class=\"programlisting\">\n-    typedef  __pool_alloc&lt;true,0&gt;    normal;\n-    typedef  __pool_alloc&lt;true,1&gt;    private;\n-    typedef  __pool_alloc&lt;true,42&gt;   also_private;\n-   </pre><p>\n-     behave exactly the same way.  However, the memory pool for each type\n-      (and remember that different instantiations result in different types)\n-      remains separate.\n-   </p><p>\n-     The library uses <span class=\"emphasis\"><em>0</em></span> in all its instantiations.  If you\n-      wish to keep separate free lists for a particular purpose, use a\n-      different number.\n-   </p><p>The <code class=\"varname\">thr</code> boolean determines whether the\n-   pool should be manipulated atomically or not.  When\n-   <code class=\"varname\">thr</code> = <code class=\"constant\">true</code>, the allocator\n-   is thread-safe, while <code class=\"varname\">thr</code> =\n-   <code class=\"constant\">false</code>, is slightly faster but unsafe for\n-   multiple threads.\n-   </p><p>\n-     For thread-enabled configurations, the pool is locked with a\n-     single big lock. In some situations, this implementation detail\n-     may result in severe performance degradation.\n-   </p><p>\n-     (Note that the GCC thread abstraction layer allows us to provide\n-     safe zero-overhead stubs for the threading routines, if threads\n-     were disabled at configuration time.)\n-   </p></li><li class=\"listitem\"><p>\n+\t (Note that the GCC thread abstraction layer allows us to provide\n+\t safe zero-overhead stubs for the threading routines, if threads\n+\t were disabled at configuration time.)\n+       </p></li><li class=\"listitem\"><p>\n        <code class=\"classname\">__mt_alloc</code>\n        </p><p>\n \t A high-performance fixed-size allocator with"}, {"sha": "68e7dccde78e37aefcbdf7e7bf8709278e126edd", "filename": "libstdc++-v3/doc/html/manual/mt_allocator.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmt_allocator.html?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -6,12 +6,12 @@\n </p><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"allocator.mt.intro\"></a>Intro</h2></div></div></div><p>\n   The mt allocator [hereinafter referred to simply as \"the allocator\"]\n   is a fixed size (power of two) allocator that was initially\n-  developed specifically to suit the needs of multi threaded\n+  developed specifically to suit the needs of multi-threaded\n   applications [hereinafter referred to as an MT application]. Over\n   time the allocator has evolved and been improved in many ways, in\n-  particular it now also does a good job in single threaded\n-  applications [hereinafter referred to as a ST application]. (Note:\n-  In this document, when referring to single threaded applications\n+  particular it now also does a good job in single-threaded\n+  applications [hereinafter referred to as an ST application]. (Note:\n+  In this document, when referring to single-threaded applications\n   this also includes applications that are compiled with gcc without\n   thread support enabled. This is accomplished using ifdef's on\n   __GTHREADS). This allocator is tunable, very flexible, and capable"}, {"sha": "aaab4e29aa75deb07e38090a9755af7d6e9fbb6f", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -154,8 +154,9 @@\n    </para>\n \n    <para>\n-     The base class that <classname>allocator</classname> is derived from\n-     may not be user-configurable.\n+     The choice of base class that <classname>allocator</classname>\n+     is derived from is fixed at the time when GCC is built,\n+     and the different choices are not ABI compatible.\n </para>\n \n   </section>\n@@ -314,6 +315,13 @@\n    <classname>new_allocator</classname>.\n    </para>\n \n+   <para>\n+     Since C++11 the minimal interface require for an allocator is\n+     much smaller, as <classname>std::allocator_traits</classname>\n+     can provide default for much of the interface.\n+   </para>\n+\n+\n </section>\n \n <section xml:id=\"allocator.ext\"><info><title>Extension Allocators</title></info>\n@@ -359,9 +367,10 @@\n        <classname>debug_allocator</classname>\n        </para>\n        <para>\n-\t A wrapper around an arbitrary allocator A.  It passes on\n-\t slightly increased size requests to A, and uses the extra\n-\t memory to store size information.  When a pointer is passed\n+\t A wrapper around an arbitrary allocator <classname>A</classname>.\n+\t It passes on slightly increased size requests to <classname>A</classname>,\n+\t and uses the extra memory to store size information.\n+\t When a pointer is passed\n \t to <function>deallocate()</function>, the stored size is\n \t checked, and <function>assert()</function> is used to\n \t guarantee they match.\n@@ -393,52 +402,16 @@\n        </para>\n \n        <para>\n-\t Older versions of this class take a boolean template\n-\t parameter, called <varname>thr</varname>, and an integer template\n-\t parameter, called <varname>inst</varname>.\n+\t For thread-enabled configurations, the pool is locked with a\n+\t single big lock. In some situations, this implementation detail\n+\t may result in severe performance degradation.\n        </para>\n \n        <para>\n-\t The <varname>inst</varname> number is used to track additional memory\n-      pools.  The point of the number is to allow multiple\n-      instantiations of the classes without changing the semantics at\n-      all.  All three of\n+\t (Note that the GCC thread abstraction layer allows us to provide\n+\t safe zero-overhead stubs for the threading routines, if threads\n+\t were disabled at configuration time.)\n        </para>\n-\n-   <programlisting>\n-    typedef  __pool_alloc&lt;true,0&gt;    normal;\n-    typedef  __pool_alloc&lt;true,1&gt;    private;\n-    typedef  __pool_alloc&lt;true,42&gt;   also_private;\n-   </programlisting>\n-   <para>\n-     behave exactly the same way.  However, the memory pool for each type\n-      (and remember that different instantiations result in different types)\n-      remains separate.\n-   </para>\n-   <para>\n-     The library uses <emphasis>0</emphasis> in all its instantiations.  If you\n-      wish to keep separate free lists for a particular purpose, use a\n-      different number.\n-   </para>\n-   <para>The <varname>thr</varname> boolean determines whether the\n-   pool should be manipulated atomically or not.  When\n-   <varname>thr</varname> = <constant>true</constant>, the allocator\n-   is thread-safe, while <varname>thr</varname> =\n-   <constant>false</constant>, is slightly faster but unsafe for\n-   multiple threads.\n-   </para>\n-\n-   <para>\n-     For thread-enabled configurations, the pool is locked with a\n-     single big lock. In some situations, this implementation detail\n-     may result in severe performance degradation.\n-   </para>\n-\n-   <para>\n-     (Note that the GCC thread abstraction layer allows us to provide\n-     safe zero-overhead stubs for the threading routines, if threads\n-     were disabled at configuration time.)\n-   </para>\n      </listitem>\n \n      <listitem>"}, {"sha": "8c26acc95a798db7d98e50c2238713e6ecf14447", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -118,12 +118,10 @@\n \n  <varlistentry><term><code>--enable-libstdcxx-allocator=OPTION  </code></term>\n  <listitem><para>Select a target-specific underlying std::allocator.  The\n-\tchoices are 'new' to specify a wrapper for new, 'malloc' to\n-\tspecify a wrapper for malloc, 'mt' for a fixed power of two allocator,\n-\t'pool' for the SGI pooled allocator or 'bitmap' for a bitmap allocator.\n-\tSee this page for more information on allocator\n-\t<link linkend=\"allocator.ext\">extensions</link>. This option\n-\tcan change the library ABI.\n+\tchoices are 'new' to specify a wrapper for new, and 'malloc' to\n+\tspecify a wrapper for malloc.\n+\tSee <xref linkend=\"allocator.ext\"/> for more information.\n+\tThis option can change the library ABI.\n      </para>\n  </listitem></varlistentry>\n "}, {"sha": "271d2225c3a2cfa9385eb127e981373fee648c00", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -1033,6 +1033,11 @@ accessors for the unexpected handler are deprecated for C++11 and later.\n Dynamic exception specifications should be replaced with <code>noexcept</code>.\n </para>\n \n+<para>\n+The <literal>bitmap</literal>, <literal>mt</literal>, and <literal>pool</literal>\n+options for <option>--enable-libstdcxx-allocator</option> were removed.\n+</para>\n+\n </section>\n \n </section>"}, {"sha": "f1c09b3bd8f730bd8747b675ecbf67348a3d1c90", "filename": "libstdc++-v3/doc/xml/manual/mt_allocator.xml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e98f524fdb80c16e3395f20fee930fbcad5562/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml?ref=e2e98f524fdb80c16e3395f20fee930fbcad5562", "patch": "@@ -20,12 +20,12 @@\n <para>\n   The mt allocator [hereinafter referred to simply as \"the allocator\"]\n   is a fixed size (power of two) allocator that was initially\n-  developed specifically to suit the needs of multi threaded\n+  developed specifically to suit the needs of multi-threaded\n   applications [hereinafter referred to as an MT application]. Over\n   time the allocator has evolved and been improved in many ways, in\n-  particular it now also does a good job in single threaded\n-  applications [hereinafter referred to as a ST application]. (Note:\n-  In this document, when referring to single threaded applications\n+  particular it now also does a good job in single-threaded\n+  applications [hereinafter referred to as an ST application]. (Note:\n+  In this document, when referring to single-threaded applications\n   this also includes applications that are compiled with gcc without\n   thread support enabled. This is accomplished using ifdef's on\n   __GTHREADS). This allocator is tunable, very flexible, and capable"}]}