{"sha": "6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzMmJkZDcyZWJiY2VhOTYyMTUxOTMzMGQwN2NjYjlhOGMyOWY5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-23T21:30:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-23T21:30:48Z"}, "message": "Core 234 - allow const objects with no initializer or user-provided default...\n\n\tCore 234 - allow const objects with no initializer or\n\tuser-provided default constructor if the defaulted constructor\n\tinitializes all the subobjects.\n\tPR c++/20039\n\tPR c++/42844\n\t* class.c (default_init_uninitialized_part): New.\n\t* cp-tree.h: Declare it.\n\t* decl.c (check_for_uninitialized_const_var): Use it.\n\t* init.c (perform_member_init): Likewise.\n\t(build_new_1): Likewise.\n\t* method.c (walk_field_subobs): Likewise.\n\nFrom-SVN: r179130", "tree": {"sha": "27fb16e2fc64479b18cb550986fc37b17d95f5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fb16e2fc64479b18cb550986fc37b17d95f5ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d303ec8e17aa1730e29e5f0666ac82ea131990df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d303ec8e17aa1730e29e5f0666ac82ea131990df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d303ec8e17aa1730e29e5f0666ac82ea131990df"}], "stats": {"total": 112, "additions": 95, "deletions": 17}, "files": [{"sha": "4c0edf6cc0a8175b487daef6464b604ce58734d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -1,3 +1,17 @@\n+2011-09-23  Jason Merrill  <jason@redhat.com>\n+\n+\tCore 234 - allow const objects with no initializer or\n+\tuser-provided default constructor if the defaulted constructor\n+\tinitializes all the subobjects.\n+\tPR c++/20039\n+\tPR c++/42844\n+\t* class.c (default_init_uninitialized_part): New.\n+\t* cp-tree.h: Declare it.\n+\t* decl.c (check_for_uninitialized_const_var): Use it.\n+\t* init.c (perform_member_init): Likewise.\n+\t(build_new_1): Likewise.\n+\t* method.c (walk_field_subobs): Likewise.\n+\n 2011-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50258"}, {"sha": "188752688085ea455e41f7666428c7a49946e5c8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -4356,6 +4356,40 @@ type_has_user_provided_default_constructor (tree t)\n   return false;\n }\n \n+/* If default-initialization leaves part of TYPE uninitialized, returns\n+   a DECL for the field or TYPE itself (DR 253).  */\n+\n+tree\n+default_init_uninitialized_part (tree type)\n+{\n+  tree t, r, binfo;\n+  int i;\n+\n+  type = strip_array_types (type);\n+  if (!CLASS_TYPE_P (type))\n+    return type;\n+  if (type_has_user_provided_default_constructor (type))\n+    return NULL_TREE;\n+  for (binfo = TYPE_BINFO (type), i = 0;\n+       BINFO_BASE_ITERATE (binfo, i, t); ++i)\n+    {\n+      r = default_init_uninitialized_part (BINFO_TYPE (t));\n+      if (r)\n+\treturn r;\n+    }\n+  for (t = TYPE_FIELDS (type); t; t = DECL_CHAIN (t))\n+    if (TREE_CODE (t) == FIELD_DECL\n+\t&& !DECL_ARTIFICIAL (t)\n+\t&& !DECL_INITIAL (t))\n+      {\n+\tr = default_init_uninitialized_part (TREE_TYPE (t));\n+\tif (r)\n+\t  return DECL_P (r) ? r : t;\n+      }\n+\n+  return NULL_TREE;\n+}\n+\n /* Returns true iff for class T, a trivial synthesized default constructor\n    would be constexpr.  */\n "}, {"sha": "573c166a08b42336c16bf741d4af0dbbd139ef88", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -4838,6 +4838,7 @@ extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n+extern tree default_init_uninitialized_part (tree);\n extern bool trivial_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);"}, {"sha": "495d8a059d7504c76f56efde76be3a95df622749", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -4899,15 +4899,16 @@ check_for_uninitialized_const_var (tree decl)\n   if (TREE_CODE (decl) == VAR_DECL\n       && TREE_CODE (type) != REFERENCE_TYPE\n       && CP_TYPE_CONST_P (type)\n-      && (!TYPE_NEEDS_CONSTRUCTING (type)\n-\t  || !type_has_user_provided_default_constructor (type))\n       && !DECL_INITIAL (decl))\n     {\n+      tree field = default_init_uninitialized_part (type);\n+      if (!field)\n+\treturn;\n+\n       permerror (DECL_SOURCE_LOCATION (decl),\n \t\t \"uninitialized const %qD\", decl);\n \n-      if (CLASS_TYPE_P (type)\n-\t  && !type_has_user_provided_default_constructor (type))\n+      if (CLASS_TYPE_P (type))\n \t{\n \t  tree defaulted_ctor;\n \n@@ -4918,6 +4919,8 @@ check_for_uninitialized_const_var (tree decl)\n \t    inform (DECL_SOURCE_LOCATION (defaulted_ctor),\n \t\t    \"constructor is not user-provided because it is \"\n \t\t    \"explicitly defaulted in the class body\");\n+\t  inform (0, \"and the implicitly-defined constructor does not \"\n+\t\t  \"initialize %q+#D\", field);\n \t}\n     }\n }"}, {"sha": "68d4e6812140851b9d79a449ac5be482ea9fe1ac", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -579,7 +579,7 @@ perform_member_init (tree member, tree init)\n \t    flags |= LOOKUP_DEFAULTED;\n \t  if (CP_TYPE_CONST_P (type)\n \t      && init == NULL_TREE\n-\t      && !type_has_user_provided_default_constructor (type))\n+\t      && default_init_uninitialized_part (type))\n \t    /* TYPE_NEEDS_CONSTRUCTING can be set just because we have a\n \t       vtable; still give this diagnostic.  */\n \t    permerror (DECL_SOURCE_LOCATION (current_function_decl),\n@@ -2088,7 +2088,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n     }\n \n   if (CP_TYPE_CONST_P (elt_type) && *init == NULL\n-      && !type_has_user_provided_default_constructor (elt_type))\n+      && default_init_uninitialized_part (elt_type))\n     {\n       if (complain & tf_error)\n         error (\"uninitialized const in %<new%> of %q#T\", elt_type);"}, {"sha": "757e711dd2c6bcd035807da4cb28c28dc43b7b3d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -1015,8 +1015,7 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n \t{\n \t  bool bad = true;\n \t  if (CP_TYPE_CONST_P (mem_type)\n-\t      && (!CLASS_TYPE_P (mem_type)\n-\t\t  || !type_has_user_provided_default_constructor (mem_type)))\n+\t      && default_init_uninitialized_part (mem_type))\n \t    {\n \t      if (msg)\n \t\terror (\"uninitialized non-static const member %q#D\","}, {"sha": "208add9d6dbd1bbe8f453ac9203cd57a99c2a104", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -1,3 +1,13 @@\n+2011-09-23  Jason Merrill  <jason@redhat.com>\n+\n+\tCore 234\n+\t* g++.dg/init/const8.C: New.\n+\t* g++.dg/cpp0x/constexpr-object1.C: Add a data member.\n+\t* g++.dg/cpp0x/defaulted2.C: Likewise.\n+\t* g++.dg/cpp0x/pr42844-2.C: Likewise.\n+\t* g++.dg/init/pr20039.C: Likewise.\n+\t* g++.dg/init/pr42844.C: Likewise.\n+\n 2011-09-23  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/inline-1.c: new testcase."}, {"sha": "4ff398bf1f0b2c495198e43f6af16af4fb446181", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-object1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -7,7 +7,7 @@\n \n // p 1 constexpr specifier\n // objects, static const data\n-struct A1 { };\t   // { dg-message \"no user-provided default constructor\" }\n+struct A1 { int i; };\t   // { dg-message \"no user-provided default constructor\" }\n \n constexpr int i1 = 1024;\n constexpr A1 a1 = A1();"}, {"sha": "e3aac8f1a9fdb69fffa6a298a7fdab36aa25d099", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -17,7 +17,8 @@ void g() = delete;\t\t// { dg-error \"redefinition\" }\n \n struct B // { dg-message \"user-provided default constructor\" }\n {\n-    B() = default;\t\t// { dg-message \"not user-provided\" }\n+  int i;\n+  B() = default;\t\t// { dg-message \"not user-provided\" }\n };\n \n const B b;\t\t\t// { dg-error \"uninitialized const\" }"}, {"sha": "4425aacf627a74fe4f50eeaeb389f80a1d49a73f", "filename": "gcc/testsuite/g++.dg/cpp0x/pr42844-2.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -4,6 +4,7 @@\n \n struct A // { dg-message \"user-provided default constructor\" }\n {\n+    int i;\n     A() = default; // { dg-message \"not user-provided\" }\n };\n \n@@ -14,17 +15,20 @@ struct Base\n \n struct Derived : Base // { dg-message \"user-provided default constructor\" }\n {\n+    int i;\n     Derived() = default; // { dg-message \"not user-provided\" }\n };\n \n struct Derived2 : Base // { dg-message \"user-provided default constructor\" }\n {\n+    int i;\n     Derived2() = default; // { dg-message \"not user-provided\" }\n     Derived2( Derived2 const& ) = default;\n };\n \n struct Derived3 : Base // { dg-message \"user-provided default constructor\" }\n {\n+    int i;\n     Derived3( Derived3 const& ) = default;\n     Derived3() = default; // { dg-message \"not user-provided\" }\n };"}, {"sha": "4eb293d654cf55e46b9337ade2cee606c9b3f892", "filename": "gcc/testsuite/g++.dg/init/const8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst8.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -0,0 +1,11 @@\n+// DR 234 - it should be OK to leave off the initializer of a const\n+// variable if the default constructor fully initializes the object.\n+\n+struct A { };\n+const A a;\n+\n+struct B { A a; };\n+const B b;\n+\n+struct C { virtual void f(); };\n+const C c;"}, {"sha": "aaac8bd4e3cda69e1298554f486ee275e385af77", "filename": "gcc/testsuite/g++.dg/init/pr20039.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr20039.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr20039.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr20039.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -10,6 +10,7 @@ struct M\n struct X\n {\n   M m;\n+  int i;\n };\n \n int mymain()"}, {"sha": "299a30a91d2f1dc865966f7f2f79c19b0a233ec1", "filename": "gcc/testsuite/g++.dg/init/pr42844.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6132bdd72ebbcea9621519330d07ccb9a8c29f9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C?ref=6132bdd72ebbcea9621519330d07ccb9a8c29f9d", "patch": "@@ -6,19 +6,19 @@ struct A\n   A(){}\n };\n \n-struct B : A {}; // { dg-message \"user-provided default constructor\" }\n+struct B : A { int i; }; // { dg-message \"user-provided default constructor\" }\n \n-struct C : A {}; // { dg-message \"user-provided default constructor\" }\n+struct C : A { int i; }; // { dg-message \"user-provided default constructor\" }\n \n struct D : B { D() {} };\n \n-struct E {}; // { dg-message \"user-provided default constructor\" }\n+struct E { int i; }; // { dg-message \"user-provided default constructor\" }\n \n template <class T>\n-struct F : A {}; // { dg-message \"user-provided default constructor\" }\n+struct F : A { T t; }; // { dg-message \"user-provided default constructor\" }\n \n template <class T>\n-struct G {}; // { dg-message \"user-provided default constructor\" }\n+struct G { T t; }; // { dg-message \"user-provided default constructor\" }\n \n void f ()\n {\n@@ -41,9 +41,9 @@ void f ()\n   extern G<int> const gext;\n }\n \n-struct H {}; // { dg-message \"user-provided default constructor\" }\n+struct H { int i; }; // { dg-message \"user-provided default constructor\" }\n \n-struct I : A {}; // { dg-message \"user-provided default constructor\" }\n+struct I : A { int i; }; // { dg-message \"user-provided default constructor\" }\n \n template <class T>\n void g ()"}]}