{"sha": "c132770ebfe92cfab34a79811022437dae051c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzMjc3MGViZmU5MmNmYWIzNGE3OTgxMTAyMjQzN2RhZTA1MWMzYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-01-28T08:39:05Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-01-28T08:39:05Z"}, "message": "re PR pch/68758 (Invalid read of size 8 in gt_pch_save (ggc-common.c:551))\n\nFix PR pch/68758.\n\n\tPR pch/68758\n\t* ggc-common.c (gt_pch_save): Use ENABLE_VALGRIND_ANNOTATIONS macro\n\tinstead of ENABLE_VALGRIND_CHECKING.\n\nFrom-SVN: r232915", "tree": {"sha": "00dcb34aea10f023c051e5fc1127745486ce61f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00dcb34aea10f023c051e5fc1127745486ce61f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c132770ebfe92cfab34a79811022437dae051c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c132770ebfe92cfab34a79811022437dae051c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c132770ebfe92cfab34a79811022437dae051c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c132770ebfe92cfab34a79811022437dae051c3b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a175e65bd7c73810ec6de0dcf670309b2ef4d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a175e65bd7c73810ec6de0dcf670309b2ef4d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a175e65bd7c73810ec6de0dcf670309b2ef4d7c"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "c1d8fafcdb0c85a1c09678b6de50a98629be4a32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c132770ebfe92cfab34a79811022437dae051c3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c132770ebfe92cfab34a79811022437dae051c3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c132770ebfe92cfab34a79811022437dae051c3b", "patch": "@@ -1,3 +1,9 @@\n+2016-01-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR pch/68758\n+\t* ggc-common.c (gt_pch_save): Use ENABLE_VALGRIND_ANNOTATIONS macro\n+\tinstead of ENABLE_VALGRIND_CHECKING.\n+\n 2016-01-27  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/69447"}, {"sha": "9b291aa33876e053101874bccf8b72e3155787f3", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c132770ebfe92cfab34a79811022437dae051c3b/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c132770ebfe92cfab34a79811022437dae051c3b/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=c132770ebfe92cfab34a79811022437dae051c3b", "patch": "@@ -492,7 +492,7 @@ gt_pch_save (FILE *f)\n \n   ggc_pch_prepare_write (state.d, state.f);\n \n-#if defined ENABLE_VALGRIND_CHECKING && defined VALGRIND_GET_VBITS\n+#if defined ENABLE_VALGRIND_ANNOTATIONS && defined VALGRIND_GET_VBITS\n   vec<char> vbits = vNULL;\n #endif\n \n@@ -504,7 +504,7 @@ gt_pch_save (FILE *f)\n \t  this_object_size = state.ptrs[i]->size;\n \t  this_object = XRESIZEVAR (char, this_object, this_object_size);\n \t}\n-#if defined ENABLE_VALGRIND_CHECKING && defined VALGRIND_GET_VBITS\n+#if defined ENABLE_VALGRIND_ANNOTATIONS && defined VALGRIND_GET_VBITS\n       /* obj might contain uninitialized bytes, e.g. in the trailing\n \t padding of the object.  Avoid warnings by making the memory\n \t temporarily defined and then restoring previous state.  */\n@@ -561,7 +561,7 @@ gt_pch_save (FILE *f)\n \t\t\t    state.ptrs[i]->note_ptr_fn == gt_pch_p_S);\n       if (state.ptrs[i]->note_ptr_fn != gt_pch_p_S)\n \tmemcpy (state.ptrs[i]->obj, this_object, state.ptrs[i]->size);\n-#if defined ENABLE_VALGRIND_CHECKING && defined VALGRIND_GET_VBITS\n+#if defined ENABLE_VALGRIND_ANNOTATIONS && defined VALGRIND_GET_VBITS\n       if (__builtin_expect (get_vbits == 1, 0))\n \t{\n \t  (void) VALGRIND_SET_VBITS (state.ptrs[i]->obj, vbits.address (),\n@@ -575,7 +575,7 @@ gt_pch_save (FILE *f)\n \t}\n #endif\n     }\n-#if defined ENABLE_VALGRIND_CHECKING && defined VALGRIND_GET_VBITS\n+#if defined ENABLE_VALGRIND_ANNOTATIONS && defined VALGRIND_GET_VBITS\n   vbits.release ();\n #endif\n "}]}