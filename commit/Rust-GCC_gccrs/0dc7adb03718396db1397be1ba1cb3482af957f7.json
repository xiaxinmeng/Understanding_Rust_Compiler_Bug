{"sha": "0dc7adb03718396db1397be1ba1cb3482af957f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjN2FkYjAzNzE4Mzk2ZGIxMzk3YmUxYmExY2IzNDgyYWY5NTdmNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-07-05T16:10:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-07-05T16:10:47Z"}, "message": "Fix ODR violations in code using <ext/atomicity.h>\n\nBecause the inline versions of __exchange_and_add and __atomic_add are\nalso marked static, they cannot be used from templates or other inline\nfunctions without ODR violations. This change gives them external\nlinkage, but adds the always_inline attribute.\n\n    \t* include/ext/atomicity.h [_GLIBCXX_ATOMIC_BUILTINS] (__atomic_add)\n    \t(__exchange_and_add): Replace static specifier with always_inline\n    \tattribute.\n    \t(__exchange_and_add_single, __atomic_add_single): Likewise.\n    \t(__exchange_and_add_dispatch, __atomic_add_dispatch): Likewise. Also\n    \tcombine !__gthread_active_p() and !__GTHREADS branches.\n\nFrom-SVN: r273144", "tree": {"sha": "2c840b225d725f2019e8a84928542405624c3c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c840b225d725f2019e8a84928542405624c3c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dc7adb03718396db1397be1ba1cb3482af957f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc7adb03718396db1397be1ba1cb3482af957f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc7adb03718396db1397be1ba1cb3482af957f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc7adb03718396db1397be1ba1cb3482af957f7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e158c5fd534a1080dd013ed5d9d3fcc3fe838ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e158c5fd534a1080dd013ed5d9d3fcc3fe838ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e158c5fd534a1080dd013ed5d9d3fcc3fe838ff"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "334673c6888672bf401019796e2ddb4ae8d1f3ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc7adb03718396db1397be1ba1cb3482af957f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc7adb03718396db1397be1ba1cb3482af957f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0dc7adb03718396db1397be1ba1cb3482af957f7", "patch": "@@ -1,3 +1,12 @@\n+2019-07-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/atomicity.h [_GLIBCXX_ATOMIC_BUILTINS] (__atomic_add)\n+\t(__exchange_and_add): Replace static specifier with always_inline\n+\tattribute.\n+\t(__exchange_and_add_single, __atomic_add_single): Likewise.\n+\t(__exchange_and_add_dispatch, __atomic_add_dispatch): Likewise. Also\n+\tcombine !__gthread_active_p() and !__GTHREADS branches.\n+\n 2019-07-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91067"}, {"sha": "73225b3de207df5d6d514239b628cea207fb6e5e", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc7adb03718396db1397be1ba1cb3482af957f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc7adb03718396db1397be1ba1cb3482af957f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=0dc7adb03718396db1397be1ba1cb3482af957f7", "patch": "@@ -44,61 +44,57 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __exchange_and_add_dispatch\n   // __atomic_add_dispatch\n #ifdef _GLIBCXX_ATOMIC_BUILTINS\n-  static inline _Atomic_word \n+  inline _Atomic_word\n+  __attribute__((__always_inline__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }\n \n-  static inline void\n+  inline void\n+  __attribute__((__always_inline__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }\n #else\n   _Atomic_word\n-  __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word*, int) throw ();\n \n   void\n-  __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word*, int) throw ();\n #endif\n \n-  static inline _Atomic_word\n+  inline _Atomic_word\n+  __attribute__((__always_inline__))\n   __exchange_and_add_single(_Atomic_word* __mem, int __val)\n   {\n     _Atomic_word __result = *__mem;\n     *__mem += __val;\n     return __result;\n   }\n \n-  static inline void\n+  inline void\n+  __attribute__((__always_inline__))\n   __atomic_add_single(_Atomic_word* __mem, int __val)\n   { *__mem += __val; }\n \n-  static inline _Atomic_word\n-  __attribute__ ((__unused__))\n+  inline _Atomic_word\n+  __attribute__ ((__always_inline__))\n   __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n     if (__gthread_active_p())\n       return __exchange_and_add(__mem, __val);\n-    else\n-      return __exchange_and_add_single(__mem, __val);\n-#else\n-    return __exchange_and_add_single(__mem, __val);\n #endif\n+    return __exchange_and_add_single(__mem, __val);\n   }\n \n-  static inline void\n-  __attribute__ ((__unused__))\n+  inline void\n+  __attribute__ ((__always_inline__))\n   __atomic_add_dispatch(_Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n     if (__gthread_active_p())\n       __atomic_add(__mem, __val);\n-    else\n-      __atomic_add_single(__mem, __val);\n-#else\n-    __atomic_add_single(__mem, __val);\n #endif\n+    __atomic_add_single(__mem, __val);\n   }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}]}