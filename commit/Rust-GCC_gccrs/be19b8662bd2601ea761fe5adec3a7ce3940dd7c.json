{"sha": "be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxOWI4NjYyYmQyNjAxZWE3NjFmZTVhZGVjM2E3Y2UzOTQwZGQ3Yw==", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2020-11-27T05:18:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-16T13:01:01Z"}, "message": "[Ada] Fix gmem.out corruption by GNAT.Expect\n\ngcc/ada/\n\n\t* adaint.h (__gnat_in_child_after_fork): New flag to express\n\tchild process side after fork call.\n\t* adaint.c (__gnat_portable_spawn): Set flag\n\t__gnat_in_child_after_fork.\n\t* expect.c (__gnat_expect_fork): Set __gnat_in_child_after_fork\n\tto one on child side.\n\t* libgnat/memtrack.adb\n\t(In_Child_After_Fork): Flag to disable memory tracking.\n\t(Allow_Trace): New routine defining if memory should be tracked.\n\t(Alloc, Realloc, Free): Use Allow_Trace in \"if\" condition\n\tinstead of First_Call.", "tree": {"sha": "228046d486e5d591b85d7d4214d0e67395d6f75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/228046d486e5d591b85d7d4214d0e67395d6f75e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c507c83b324582dc05db91d332b0de4b25c85c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c507c83b324582dc05db91d332b0de4b25c85c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c507c83b324582dc05db91d332b0de4b25c85c07"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "0a90c92402cd00bcf2ea2fc3672b4a39e1830bcb", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "patch": "@@ -244,6 +244,8 @@ UINT __gnat_current_ccs_encoding;\n \n #include \"adaint.h\"\n \n+int __gnat_in_child_after_fork = 0;\n+\n #if defined (__APPLE__) && defined (st_mtime)\n #define st_atim st_atimespec\n #define st_mtim st_mtimespec\n@@ -2421,6 +2423,7 @@ __gnat_portable_spawn (char *args[] ATTRIBUTE_UNUSED)\n   if (pid == 0)\n     {\n       /* The child. */\n+      __gnat_in_child_after_fork = 1;\n       if (execv (args[0], MAYBE_TO_PTR32 (args)) != 0)\n \t_exit (1);\n     }"}, {"sha": "85997b9ba6858e22da8897e96ca48ec702b93aec", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "patch": "@@ -139,7 +139,15 @@ struct file_attributes {\n  * fit the above struct on any system)\n  */\n \n-extern int    __gnat_max_path_len;\n+extern int  __gnat_max_path_len;\n+extern int  __gnat_in_child_after_fork;\n+/* This flag expresses the state when the fork call just returned zero result,\n+ * i.e. when the new born child process is created and the new executable is\n+ * not loaded yet. It is used to e.g. disable tracing memory\n+ * allocation/deallocation in memtrack.adb just after fork returns in the child\n+ * process to avoid both parent and child writing to the same gmem.out file\n+ * simultaneously */\n+\n extern OS_Time __gnat_current_time\t\t   (void);\n extern void   __gnat_current_time_string           (char *);\n extern void   __gnat_to_gm_time\t\t\t   (OS_Time *, int *, int *,"}, {"sha": "30c5b8e636839fe93fa82f9a1fc6618582aae3a9", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "patch": "@@ -39,6 +39,7 @@\n #include \"system.h\"\n #endif\n \n+#include \"adaint.h\"\n #include <sys/types.h>\n \n #ifdef __MINGW32__\n@@ -78,7 +79,6 @@\n #include <process.h>\n #include <signal.h>\n #include <io.h>\n-#include \"adaint.h\"\n #include \"mingw32.h\"\n \n int\n@@ -360,7 +360,11 @@ __gnat_pipe (int *fd)\n int\n __gnat_expect_fork (void)\n {\n-  return fork ();\n+  int pid = fork();\n+  if (pid == 0) {\n+    __gnat_in_child_after_fork = 1;\n+  }\n+  return pid;\n }\n \n void"}, {"sha": "a5f508d9e0339cd3ed685645261ed3d29cfec45d", "filename": "gcc/ada/libgnat/memtrack.adb", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Flibgnat%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be19b8662bd2601ea761fe5adec3a7ce3940dd7c/gcc%2Fada%2Flibgnat%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fmemtrack.adb?ref=be19b8662bd2601ea761fe5adec3a7ce3940dd7c", "patch": "@@ -102,6 +102,9 @@ package body System.Memory is\n    pragma Import (C, OS_Exit, \"__gnat_os_exit\");\n    pragma No_Return (OS_Exit);\n \n+   In_Child_After_Fork : Integer;\n+   pragma Import (C, In_Child_After_Fork, \"__gnat_in_child_after_fork\");\n+\n    procedure fwrite\n      (Ptr    : System.Address;\n       Size   : size_t;\n@@ -149,6 +152,24 @@ package body System.Memory is\n    --  themselves do dynamic allocation. We use First_Call flag to avoid\n    --  infinite recursion\n \n+   function Allow_Trace return Boolean;\n+   pragma Inline (Allow_Trace);\n+   --  Check if the memory trace is allowed\n+\n+   -----------------\n+   -- Allow_Trace --\n+   -----------------\n+\n+   function Allow_Trace return Boolean is\n+   begin\n+      if First_Call then\n+         First_Call := False;\n+         return In_Child_After_Fork = 0;\n+      else\n+         return False;\n+      end if;\n+   end Allow_Trace;\n+\n    -----------\n    -- Alloc --\n    -----------\n@@ -176,14 +197,12 @@ package body System.Memory is\n \n       Result := c_malloc (Actual_Size);\n \n-      if First_Call then\n+      if Allow_Trace then\n \n          --  Logs allocation call\n          --  format is:\n          --   'A' <mem addr> <size chunk> <len backtrace> <addr1> ... <addrn>\n \n-         First_Call := False;\n-\n          if Needs_Init then\n             Gmem_Initialize;\n          end if;\n@@ -243,14 +262,12 @@ package body System.Memory is\n    begin\n       Lock_Task.all;\n \n-      if First_Call then\n+      if Allow_Trace then\n \n          --  Logs deallocation call\n          --  format is:\n          --   'D' <mem addr> <len backtrace> <addr1> ... <addrn>\n \n-         First_Call := False;\n-\n          if Needs_Init then\n             Gmem_Initialize;\n          end if;\n@@ -334,9 +351,7 @@ package body System.Memory is\n       Abort_Defer.all;\n       Lock_Task.all;\n \n-      if First_Call then\n-         First_Call := False;\n-\n+      if Allow_Trace then\n          --  We first log deallocation call\n \n          if Needs_Init then"}]}