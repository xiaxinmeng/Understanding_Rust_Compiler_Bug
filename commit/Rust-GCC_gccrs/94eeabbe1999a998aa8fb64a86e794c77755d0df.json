{"sha": "94eeabbe1999a998aa8fb64a86e794c77755d0df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlZWFiYmUxOTk5YTk5OGFhOGZiNjRhODZlNzk0Yzc3NzU1ZDBkZg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dseketel@redhat.com", "date": "2008-07-11T18:12:37Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2008-07-11T18:12:37Z"}, "message": "re PR c++/13101 (incorrect warning on initialized extern const function pointer)\n\n2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n\n\tPR c++/13101\n\t* decl.c (grokdeclarator): Warn about initializing variables\n\t  of storage class 'extern' only after the type of the declarator\n\t  has been properly computed.\n\nFrom-SVN: r137723", "tree": {"sha": "a0177fe10608323d2634279173ad1ff453c94508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0177fe10608323d2634279173ad1ff453c94508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94eeabbe1999a998aa8fb64a86e794c77755d0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eeabbe1999a998aa8fb64a86e794c77755d0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94eeabbe1999a998aa8fb64a86e794c77755d0df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eeabbe1999a998aa8fb64a86e794c77755d0df/comments", "author": null, "committer": null, "parents": [{"sha": "ec4d7730c818bb14591b9d0c82f92e73cadf27fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4d7730c818bb14591b9d0c82f92e73cadf27fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4d7730c818bb14591b9d0c82f92e73cadf27fb"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "7b73ee1e8a113be29ffecc7cf947d9b22028ef4c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94eeabbe1999a998aa8fb64a86e794c77755d0df", "patch": "@@ -1,3 +1,10 @@\n+2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n+\n+\tPR c++/13101\n+\t* decl.c (grokdeclarator): Warn about initializing variables\n+\t  of storage class 'extern' only after the type of the declarator\n+\t  has been properly computed.\n+\n 2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/31754\n@@ -13,7 +20,8 @@\n \tcp_parser_type_specifier, cp_parser_simple_type_specifier,\n \tcp_parser_omp_for_loop, cp_parser_pragma): use location in error messages.\n \n-2008-06-30 Dodji Seketeli <dseketel@redhat.com>\n+\n+2008-07-11 Dodji Seketeli <dseketel@redhat.com>\n \n \tPR c++/31754\n \t* pt.c, semantic.c:\n@@ -148,7 +156,7 @@\n \t* pt.c: (tsubst_copy_and_build): Adjust.\n \t(unify): Handle { }.\n \t* name-lookup.c (arg_assoc_type): Handle init_list_type_node.\n-\t\n+\n 2008-07-01  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* typeck.c (comp_ptr_ttypes_real): Use vector_targets_convertible_p."}, {"sha": "83d2c4ea5a73a7c5d26226dd32bc83324d337ca9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=94eeabbe1999a998aa8fb64a86e794c77755d0df", "patch": "@@ -8005,19 +8005,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t    storage_class = sc_none;\n \t}\n     }\n-  else if (storage_class == sc_extern && initialized\n-\t   && !funcdef_flag)\n-    {\n-      if (toplevel_bindings_p ())\n-\t{\n-\t  /* It's common practice (and completely valid) to have a const\n-\t     be initialized and declared extern.  */\n-\t  if (!(type_quals & TYPE_QUAL_CONST))\n-\t    warning (0, \"%qs initialized and declared %<extern%>\", name);\n-\t}\n-      else\n-\terror (\"%qs has both %<extern%> and initializer\", name);\n-    }\n   else if (storage_class == sc_extern && funcdef_flag\n \t   && ! toplevel_bindings_p ())\n     error (\"nested function %qs declared %<extern%>\", name);\n@@ -9236,6 +9223,19 @@ grokdeclarator (const cp_declarator *declarator,\n \t  }\n       }\n \n+    if (storage_class == sc_extern && initialized && !funcdef_flag)\n+      {\n+\tif (toplevel_bindings_p ())\n+\t  {\n+\t    /* It's common practice (and completely valid) to have a const\n+\t       be initialized and declared extern.  */\n+\t    if (!(type_quals & TYPE_QUAL_CONST))\n+\t      warning (0, \"%qs initialized and declared %<extern%>\", name);\n+\t  }\n+\telse\n+\t  error (\"%qs has both %<extern%> and initializer\", name);\n+      }\n+\n     /* Record `register' declaration for warnings on &\n        and in case doing stupid register allocation.  */\n "}, {"sha": "cf57c77a0c2e9b8f5217c38fafbdd0b8caf6323c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94eeabbe1999a998aa8fb64a86e794c77755d0df", "patch": "@@ -1,3 +1,10 @@\n+2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n+\n+\tPR c++/13101\n+\t* g++.dg/parse/func-ptr-decl.C: New test.\n+\t* gcc/testsuite/g++.old-deja/g++.jason/crash11.C: Update this to\n+\t  catch a warning that is generated by virtue of fixing this bug.\n+\n 2008-07-11 Dodji Seketeli <dseketel@redhat.com>\n \n \t* g++.dg/other/semicolon.C: Tighten this test, making it column aware."}, {"sha": "5cc8e5f3d6b1f38453757655b685d281ceba6eb8", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94eeabbe1999a998aa8fb64a86e794c77755d0df/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash11.C?ref=94eeabbe1999a998aa8fb64a86e794c77755d0df", "patch": "@@ -6,4 +6,4 @@ struct A {\n };\n const char foo[] = \"bar\";\n const A a = { foo };\n-extern const A* ap = &a;\n+extern const A* ap = &a; //{ dg-warning \"warning: 'ap' initialized and declared 'extern'\" }"}]}