{"sha": "8d67c58f94f8b9166002eed18d2096b35c0666e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2N2M1OGY5NGY4YjkxNjYwMDJlZWQxOGQyMDk2YjM1YzA2NjZlNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-09-04T09:02:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-09-04T09:02:56Z"}, "message": "sse4a-check.h: New file.\n\n\t* gcc.target/i386/sse4a-check.h: New file.\n\t* gcc.target/i386/sse4a-extract.c: Include sse4a-check.h. Remove main.\n\t* gcc.target/i386/sse4a-insert.c: Ditto.\n\t* gcc.target/i386/sse4a-montsd.c: Ditto.\n\t* gcc.target/i386/sse4a-montss.c: Ditto.\n\t* gcc.target/i386/mmx-check.h: New file.\n\t* gcc.target/i386/mmx-4.c: Include mmx-check.h. Remove main.\n\t* gcc.target/i386/builtin-apply-mmx.c: Ditto.\n\t* gcc.target/i386/sse-check.h: New file.\n\t* gcc.target/i386/pr13685: Include sse-check.h. Remove main.\n\t* gcc.target/i386/sse-3.c: Ditto.\n\t* gcc.target/i386/sse-7.c: Ditto.\n\t* gcc.target/i386/sse-9.c: Ditto.\n\t* gcc.target/i386/ssefn-3.c: Ditto.\n\t* gcc.target/i386/sse-recip.c: Ditto.\n\t* gcc.target/i386/sse-recip-vec.c: Ditto.\n\t* gcc.target/i386/20020523.c: Ditto. Rename from 20020523-2.c.\n\t* gcc.target/i386/20020523-1.c: Remove.\n\t* gcc.target/i386/sse2-lrint-vec.c: Include sse2-check.h. Remove main.\n\t* gcc.target/i386/sse2-lrintf-vec.c: Ditto.\n\t* gcc.target/i386/ssefn-4.c: Ditto.\n\t* gcc.target/i386/sse-6.c: Ditto.\n\t* gcc.target/i386/sse-10.c: Ditto.\n\t* gcc.target/i386/sse-11.c: Ditto.\n\t* gcc.target/i386/sse-18.c: Ditto.\n\t* gcc.target/i386/fpprec-1.c: Ditto.\n\t* g++.dg/other/i386-1.C: Ditto.\n\nFrom-SVN: r128069", "tree": {"sha": "e57b083212d951df0897a45e179ab25c0d38f8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57b083212d951df0897a45e179ab25c0d38f8f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d67c58f94f8b9166002eed18d2096b35c0666e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67c58f94f8b9166002eed18d2096b35c0666e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d67c58f94f8b9166002eed18d2096b35c0666e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67c58f94f8b9166002eed18d2096b35c0666e7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04d86531d7cf2080903ea85d27d79daa944828fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d86531d7cf2080903ea85d27d79daa944828fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d86531d7cf2080903ea85d27d79daa944828fb"}], "stats": {"total": 707, "additions": 214, "deletions": 493}, "files": [{"sha": "465aaa29b6f280397682a055ea8842eb1f40b181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,3 +1,33 @@\n+2007-09-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse4a-check.h: New file.\n+\t* gcc.target/i386/sse4a-extract.c: Include sse4a-check.h. Remove main.\n+\t* gcc.target/i386/sse4a-insert.c: Ditto.\n+\t* gcc.target/i386/sse4a-montsd.c: Ditto.\n+\t* gcc.target/i386/sse4a-montss.c: Ditto.\n+\t* gcc.target/i386/mmx-check.h: New file.\n+\t* gcc.target/i386/mmx-4.c: Include mmx-check.h. Remove main.\n+\t* gcc.target/i386/builtin-apply-mmx.c: Ditto.\n+\t* gcc.target/i386/sse-check.h: New file.\n+\t* gcc.target/i386/pr13685: Include sse-check.h. Remove main.\n+\t* gcc.target/i386/sse-3.c: Ditto.\n+\t* gcc.target/i386/sse-7.c: Ditto.\n+\t* gcc.target/i386/sse-9.c: Ditto.\n+\t* gcc.target/i386/ssefn-3.c: Ditto.\n+\t* gcc.target/i386/sse-recip.c: Ditto.\n+\t* gcc.target/i386/sse-recip-vec.c: Ditto.\n+\t* gcc.target/i386/20020523.c: Ditto. Rename from 20020523-2.c.\n+\t* gcc.target/i386/20020523-1.c: Remove.\n+\t* gcc.target/i386/sse2-lrint-vec.c: Include sse2-check.h. Remove main.\n+\t* gcc.target/i386/sse2-lrintf-vec.c: Ditto.\n+\t* gcc.target/i386/ssefn-4.c: Ditto.\n+\t* gcc.target/i386/sse-6.c: Ditto.\n+\t* gcc.target/i386/sse-10.c: Ditto.\n+\t* gcc.target/i386/sse-11.c: Ditto.\n+\t* gcc.target/i386/sse-18.c: Ditto.\n+\t* gcc.target/i386/fpprec-1.c: Ditto.\n+\t* g++.dg/other/i386-1.C: Ditto.\n+\n 2007-09-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33291"}, {"sha": "84e04f042b3e7f112461dda0513a5364e581c96f", "filename": "gcc/testsuite/g++.dg/other/i386-1.C", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,30 +1,22 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-msse2\" } */\n \n+#include \"../../gcc.target/i386/sse2-check.h\"\n+\n #include <xmmintrin.h>\n-#include <stdio.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-int main(int argc, char** argv) {\n+static void\n+sse2_test (void)\n+{\n   float a = 1.0f;\n   float b = 2.0f;\n   float c = 3.0f;\n   float r;\n \n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n   __m128 v = _mm_set_ps(a, b, c, 0);\n   \n   v = (__m128)_mm_srli_si128((__m128i)v, 4);\n   _mm_store_ss(&r, v);\n   if (r != 3.0f)\n     abort ();\n-  exit (0);\n }"}, {"sha": "0fb7edc7a76206348ce9fc6cea74f9ca4f20a1b3", "filename": "gcc/testsuite/gcc.target/i386/20020523-1.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523-1.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,68 +0,0 @@\n-/* PR target/6753\n-   This testcase was miscompiled because sse_mov?fcc_const0*\n-   patterns were missing earlyclobber.  */\n-\n-/* { dg-do run } */\n-/* { dg-require-effective-target ilp32 } */\n-/* { dg-require-effective-target nonpic } */\n-/* { dg-options \"-march=pentium3 -msse -ffast-math -O2\" } */\n-\n-extern void abort (void);\n-extern void exit (int);\n-\n-float one = 1.f;\n-\n-void bar (float f)\n-{\n-  if (__builtin_memcmp (&one, &f, sizeof (float)))\n-    abort ();\n-}\n-\n-float foo (void)\n-{\n-  return 1.f;\n-}\n-\n-typedef struct\n-{\n-  float t;\n-} T;\n-\n-void bail_if_no_sse (void)\n-{\n-  int fl1, fl2;\n-\n-  /* See if we can use cpuid.  */\n-  __asm__ (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n-\t   \"pushl %0; popfl; pushfl; popl %0; popfl\"\n-\t   : \"=&r\" (fl1), \"=&r\" (fl2)\n-\t   : \"i\" (0x00200000));\n-  if (((fl1 ^ fl2) & 0x00200000) == 0)\n-    exit (0);\n-\n-  /* See if cpuid gives capabilities.  */\n-  __asm__ (\"cpuid\" : \"=a\" (fl1) : \"0\" (0) : \"ebx\", \"ecx\", \"edx\", \"cc\");\n-  if (fl1 == 0)\n-    exit (0);\n-\n-  /* See if capabilities include SSE (25th bit; 26 for SSE2).  */\n-  __asm__ (\"cpuid\" : \"=a\" (fl1), \"=d\" (fl2) : \"0\" (1) : \"ebx\", \"ecx\", \"cc\");\n-  if ((fl2 & (1 << 25)) == 0)\n-    exit (0);\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  T x[1];\n-\n-  bail_if_no_sse ();\n-  for (i = 0; i < 1; i++)\n-    {\n-      x[i].t = foo ();\n-      x[i].t = 0.f > x[i].t ? 0.f : x[i].t;\n-      bar (x[i].t);\n-    }\n-\n-  exit (0);\n-}"}, {"sha": "7c3490f780b6b8be2b1cfb52f4000fe3de21162a", "filename": "gcc/testsuite/gcc.target/i386/20020523.c", "status": "renamed", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20020523.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,13 +1,11 @@\n /* PR target/6753\n    This testcase was miscompiled because sse_mov?fcc_const0*\n    patterns were missing earlyclobber.  */\n+\n /* { dg-do run } */\n-/* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-march=pentium3 -msse -ffast-math -O2\" } */\n+/* { dg-options \"-O2 -msse -mfpmath=sse -ffast-math\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n-extern void abort (void);\n-extern void exit (int);\n+#include \"sse-check.h\"\n \n float one = 1.f;\n \n@@ -27,27 +25,16 @@ typedef struct\n   float t;\n } T;\n \n-void bail_if_no_sse (void)\n-{\n-  unsigned int edx;\n-  /* See if capabilities include SSE (25th bit; 26 for SSE2).  */\n-  edx = i386_cpuid();\n-  if (!(edx & bit_SSE))\n-    exit (0);\n-}\n-\n-int main (void)\n+static void\n+sse_test (void)\n {\n   int i;\n   T x[1];\n \n-  bail_if_no_sse ();\n   for (i = 0; i < 1; i++)\n     {\n       x[i].t = foo ();\n       x[i].t = 0.f > x[i].t ? 0.f : x[i].t;\n       bar (x[i].t);\n     }\n-\n-  exit (0);\n }", "previous_filename": "gcc/testsuite/gcc.target/i386/20020523-2.c"}, {"sha": "d274bd5c2e9253a0e460981ebd4313e0c26e0ba2", "filename": "gcc/testsuite/gcc.target/i386/builtin-apply-mmx.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-apply-mmx.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -13,7 +13,7 @@\n /* { dg-options \"-O2 -mmmx\" } */\n /* { dg-require-effective-target ilp32 } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"mmx-check.h\"\n \n extern void abort (void);\n \n@@ -34,19 +34,9 @@ bar (double arg)\n \t\t\t\t     __builtin_apply_args (), 16));\n }\n \n-int\n-main (int argc, char **argv)\n+static void\n+mmx_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if (!(cpu_facilities & bit_MMX))\n-    /* If host has no MMX support, pass.  */\n-    return 0;\n-\n   if (bar (116.0) != 117.0)\n     abort ();\n-\n-  return 0;\n }"}, {"sha": "0174e7c6c324fa5ff2619c6a76c22301b5f9d43b", "filename": "gcc/testsuite/gcc.target/i386/fpprec-1.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,10 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fno-math-errno -fno-trapping-math -msse2 -mfpmath=sse\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n-\n-extern void abort(void);\n-extern int printf(const char *format, ...);\n+#include \"sse2-check.h\"\n \n double x[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n \t-0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,  /* +-DBL_MAX */\n@@ -71,20 +68,12 @@ CHECK(floor)\n CHECK(ceil)\n CHECK(trunc)\n \n-int main()\n+static void\n+sse2_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & bit_SSE2) != bit_SSE2)\n-    /* If host has no SSE2 support, pass.  */\n-    return 0;\n-\n   check_round ();\n   check_rint ();\n   check_floor ();\n   check_ceil ();\n   check_trunc ();\n-  return 0;\n }"}, {"sha": "297a76fe52619b58540a593191a2caf6ed2335c1", "filename": "gcc/testsuite/gcc.target/i386/mmx-4.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-4.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,14 +1,10 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -mmmx\" } */\n+\n+#include \"mmx-check.h\"\n+\n #include <mmintrin.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n #include <string.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n-\n-#ifndef NOINLINE\n-#define NOINLINE __attribute__ ((noinline))\n-#endif\n \n #define SHIFT (4)\n \n@@ -53,15 +49,10 @@ const char *reference_mmx[] = {\n   \"\"\n };\n \n-int main()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & bit_MMX) == 0)\n-    exit (0);\n \n+static void\n+mmx_test (void)\n+{\n   d64.u[0]  = 0x01234567;\n   d64.u[1]  = 0x01234567;\n \n@@ -85,22 +76,18 @@ int main()\n \n   s64 = b64.v;\n \n-  if (cpu_facilities & bit_MMX)\n-    {\n-      mmx_tests();\n-      check (buf, reference_mmx);\n+  mmx_tests();\n+  check (buf, reference_mmx);\n #ifdef DEBUG\n-      printf (\"mmx testing:\\n\");\n-      printf (buf);\n-      printf (\"\\ncomparison:\\n\");\n-      printf (comparison);\n+  printf (\"mmx testing:\\n\");\n+  printf (buf);\n+  printf (\"\\ncomparison:\\n\");\n+  printf (comparison);\n #endif\n-      buf[0] = '\\0';\n-    }\n+  buf[0] = '\\0';\n \n   if (errors != 0)\n     abort ();\n-  exit (0);\n }\n \n void NOINLINE"}, {"sha": "0c6e1e9523be14485782e9753dd1ccb232e2e0a4", "filename": "gcc/testsuite/gcc.target/i386/mmx-check.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void mmx_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+ \n+  cpu_facilities = i386_cpuid_edx ();\n+\n+  /* Run MMX test only if host has MMX support.  */\n+  if ((cpu_facilities & bit_MMX))\n+    mmx_test ();\n+\n+  exit (0);\n+}"}, {"sha": "159112d1666868a4aca0093605783689ee86600c", "filename": "gcc/testsuite/gcc.target/i386/pr13685.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr13685.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr13685.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr13685.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,28 +1,20 @@\n /* PR target/13685 */\n /* { dg-do run } */\n /* { dg-options \"-Os -msse\" } */\n-#include <stdlib.h>\n-#include <stdio.h>\n+\n+#include \"sse-check.h\"\n+\n #include <xmmintrin.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n void foo (__m128 *, __m64 *, int);\n \n __m128 xmm0 = { 0 };\n __m64 mm0 = { 0 };\n \n-int\n-main ()\n+static void\n+sse_test (void)\n {\n-  unsigned long cpu_facilities = i386_cpuid ();\n-  \n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_CMOV))\n-    /* If host has no SSE support, pass.  */\n-    return 0;\n-\n   foo (&xmm0, &mm0, 4);\n-  return 0;\n }\n \n void"}, {"sha": "3116e80d3a9209d37e5eb1bd7e50b08ce859b56a", "filename": "gcc/testsuite/gcc.target/i386/sse-10.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O1 -msse2 -mfpmath=sse -mno-accumulate-outgoing-args -fno-omit-frame-pointer\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"sse2-check.h\"\n \n typedef _Complex double complex_16;\n \n@@ -21,14 +21,10 @@ test (complex_16 a[5][5])\n       }\n }\n \n-int main()\n+static void\n+sse2_test (void)\n {\n   static complex_16 work[5][5];\n-  unsigned long cpu_facilities;\n \n-  cpu_facilities = i386_cpuid ();\n-  if (cpu_facilities & bit_SSE2)\n-    test (work); \n-\n-  return 0;\n+  test (work); \n }"}, {"sha": "3745dbf7f6022595e241b5e579c154db5ca6bb91", "filename": "gcc/testsuite/gcc.target/i386/sse-11.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-11.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,10 +1,10 @@\n /* PR rtl-optimization/21239 */\n /* { dg-do run } */\n /* { dg-options \"-O2 -msse2\" } */\n-#include <emmintrin.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-extern void abort (void);\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n \n void\n foo (unsigned int x, double *y, const double *z)\n@@ -49,8 +49,8 @@ bar (unsigned int x, float *y, const float *z)\n     }\n }\n \n-void __attribute__((noinline))\n-run_tests (void)\n+static void\n+sse2_test (void)\n {\n   unsigned int i;\n   double a[16], b[16];\n@@ -72,21 +72,3 @@ run_tests (void)\n \tabort ();\n     }\n }\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-  unsigned int i;\n-  double a[19], b[19];\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  run_tests ();\n-  return 0;\n-}"}, {"sha": "fc0224f8f6d185901db11928961764a9bb5a8265", "filename": "gcc/testsuite/gcc.target/i386/sse-18.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,8 +1,10 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -msse2\" } */\n-extern void abort(void);\n+\n+#include \"sse2-check.h\"\n+\n #include <emmintrin.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n+\n __m128i foo (char) __attribute__((noinline));\n __m128i foo (char x) {\n   return _mm_set1_epi8(x);\n@@ -12,18 +14,11 @@ __m128i bar (char x) {\n   return _mm_set_epi8 (x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);\n }\n \n-main() {\n+static void\n+sse2_test (void) {\n   int i, j;\n   union u { __m128i v; char c[16]; };\n   union u x, y;\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n \n   for (i = -128; i <= 127; i++)\n     {\n@@ -33,6 +28,5 @@ main() {\n \tif (x.c[j] != y.c[j])\n \t  abort();\n     }\n-  return 0;\n }\n "}, {"sha": "338b7c60ba75bae8dd03edd12363acd918626ace", "filename": "gcc/testsuite/gcc.target/i386/sse-3.c", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-3.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,10 +1,10 @@\n /* PR target/21149 */\n /* { dg-do run } */\n /* { dg-options \"-O2 -msse\" } */\n-#include <xmmintrin.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-extern void abort (void);\n+#include \"sse-check.h\"\n+\n+#include <xmmintrin.h>\n \n void\n __attribute__((noinline))\n@@ -28,26 +28,9 @@ foo (__m128 *x)\n   check (w, 0, 0, 2, -3);\n }\n \n-void\n-__attribute__((noinline))\n-run_tests (void)\n+static void\n+sse_test (void)\n {\n   __m128 y = _mm_set_ps (-3, 2, 1, 9);\n   foo (&y);\n }\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  run_tests ();\n-  return 0;\n-}"}, {"sha": "237a46372bc7ebdcb79aa694eebbd69d133874a9", "filename": "gcc/testsuite/gcc.target/i386/sse-6.c", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-6.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,14 +1,10 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -msse2\" } */\n-#include <xmmintrin.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-#ifndef NOINLINE\n-#define NOINLINE __attribute__ ((noinline))\n-#endif\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+#include <string.h>\n \n #define SHIFT (4)\n \n@@ -60,17 +56,9 @@ const char *reference_sse2[] = {\n   \"\"\n };\n \n-int main()\n+static void\n+sse2_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    exit (0);\n-\n   a128.s[0] = 0x01234567;\n   a128.s[1] = 0x01234567;\n   a128.s[2] = 0x01234567;\n@@ -108,22 +96,18 @@ int main()\n \n   s128 = b128.v;\n \n-  if (cpu_facilities & bit_SSE2)\n-    {\n-      sse2_tests();\n-      check (buf, reference_sse2);\n+  sse2_tests();\n+  check (buf, reference_sse2);\n #ifdef DEBUG\n-      printf (\"sse2 testing:\\n\");\n-      printf (buf);\n-      printf (\"\\ncomparison:\\n\");\n-      printf (comparison);\n+  printf (\"sse2 testing:\\n\");\n+  printf (buf);\n+  printf (\"\\ncomparison:\\n\");\n+  printf (comparison);\n #endif\n-      buf[0] = '\\0';\n-    }\n+  buf[0] = '\\0';\n \n   if (errors != 0)\n     abort ();\n-  exit (0);\n }\n \n void NOINLINE"}, {"sha": "0ba0d65c63cae04d935bba88b5160f3ce36b056d", "filename": "gcc/testsuite/gcc.target/i386/sse-7.c", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-7.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,14 +1,10 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n #include <xmmintrin.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n #include <string.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n-\n-#ifndef NOINLINE\n-#define NOINLINE __attribute__ ((noinline))\n-#endif\n \n #define SHIFT (4)\n \n@@ -36,37 +32,25 @@ const char *reference_sse[] = {\n   \"\"\n };\n \n-int main()\n+static void\n+sse_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    exit (0);\n-\n   e64.t  = 0x0123456789abcdefULL;\n \n   m64_64 = e64.v;\n \n-  if (cpu_facilities & bit_SSE)\n-    {\n-      sse_tests();\n-      check (buf, reference_sse);\n+  sse_tests();\n+  check (buf, reference_sse);\n #ifdef DEBUG\n-      printf (\"sse testing:\\n\");\n-      printf (buf);\n-      printf (\"\\ncomparison:\\n\");\n-      printf (comparison);\n+  printf (\"sse testing:\\n\");\n+  printf (buf);\n+  printf (\"\\ncomparison:\\n\");\n+  printf (comparison);\n #endif\n-      buf[0] = '\\0';\n-    }\n+  buf[0] = '\\0';\n \n   if (errors != 0)\n     abort ();\n-  exit (0);\n }\n \n void NOINLINE"}, {"sha": "0106cb52f63fbc9c45b79f251d561833de20b44e", "filename": "gcc/testsuite/gcc.target/i386/sse-9.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-9.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,25 +1,19 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n #include <xmmintrin.h>\n-#include <stdlib.h>\n #include <stddef.h>\n #include <string.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-int\n-main()\n+static void\n+sse_test (void)\n {\n   int alignment, n;\n   void *ptr;\n   int errors = 0;\n   const char test [] = \"This is a test.\";\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & bit_SSE) != bit_SSE )\n-    /* If host has no vector support, pass.  */\n-    exit (0);\n \n   for (alignment = 1; alignment <= (1 << 20); alignment += alignment)\n     {\n@@ -40,5 +34,4 @@ main()\n    \n   if (errors != 0)\n     abort ();\n-  exit (0);\n }"}, {"sha": "2fb14e61e0beb1a1034ea586e187b45891b51e33", "filename": "gcc/testsuite/gcc.target/i386/sse-check.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+ \n+  cpu_facilities = i386_cpuid_edx ();\n+\n+  /* Run SSE test only if host has SSE support.  */\n+  if ((cpu_facilities & bit_SSE))\n+    sse_test ();\n+\n+  exit (0);\n+}"}, {"sha": "24ee1ac821e70fe97a93cc814480dc957019bc45", "filename": "gcc/testsuite/gcc.target/i386/sse-recip-vec.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,15 +1,14 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse -mfpmath=sse -mrecip\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"sse-check.h\"\n \n extern float sqrtf (float);\n-extern void abort (void);\n \n #define N 8\n \n-int __attribute__((noinline))\n-main1 ()\n+static void\n+sse_test (void)\n {\n   float a[N] = { 0.f, 18.f, 108.f, 324.f, 720.f, 1944.f, 3087.f, 5832.f };\n   float b[N] = { 1.f, 2.f, 3.f, 4.f, 5.f, 6.f, 7.f, 8.f };\n@@ -30,22 +29,4 @@ main1 ()\n       if (r[i] != rc[i])\n \tabort();\n     }   \n-\n-  return 0;\n-}\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  main1 ();\n-  return 0;\n }"}, {"sha": "b673f400b43c09e0a058487268fa24ea82af2142", "filename": "gcc/testsuite/gcc.target/i386/sse-recip.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,15 +1,14 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ffast-math -msse -mfpmath=sse -mrecip\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"sse-check.h\"\n \n extern float sqrtf (float);\n-extern void abort (void);\n \n #define N 8\n \n-int __attribute__((noinline))\n-main1 ()\n+static void\n+sse_test (void)\n {\n   float a[N] = { 0.f, 18.f, 108.f, 324.f, 720.f, 1944.f, 3087.f, 5832.f };\n   float b[N] = { 1.f, 2.f, 3.f, 4.f, 5.f, 6.f, 7.f, 8.f };\n@@ -30,22 +29,4 @@ main1 ()\n       if (r[i] != rc[i])\n \tabort();\n     }   \n-\n-  return 0;\n-}\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  main1 ();\n-  return 0;\n }"}, {"sha": "a6db5c4b56b269eff8149be1e172d8d988bf7c5e", "filename": "gcc/testsuite/gcc.target/i386/sse2-lrint-vec.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,15 +1,14 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"sse2-check.h\"\n \n extern long lrint (double);\n-extern void abort (void);\n \n #define N 32\n \n-int __attribute__((noinline))\n-main1 ()\n+static void\n+sse2_test (void)\n {\n   double a[N] = {0.4,3.5,6.6,9.4,12.5,15.6,18.4,21.5,24.6,27.4,30.5,33.6,36.4,39.5,42.6,45.4,0.5,3.6,6.4,9.5,12.6,15.4,18.5,21.6,24.4,27.5,30.6,33.4,36.5,39.6,42.4,45.5};\n   long r[N];\n@@ -27,22 +26,4 @@ main1 ()\n       if (r[i] != lrint (a[i]))\n \tabort();\n     }   \n-\n-  return 0;\n-}\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  main1 ();\n-  return 0;\n }"}, {"sha": "eb74f831d0196cd1c652ffb09cbbc1d78ad13878", "filename": "gcc/testsuite/gcc.target/i386/sse2-lrintf-vec.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,15 +1,14 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2\" } */\n \n-#include \"../../gcc.dg/i386-cpuid.h\"\n+#include \"sse2-check.h\"\n \n extern long lrintf (float);\n-extern void abort (void);\n \n #define N 32\n \n-int __attribute__((noinline))\n-main1 ()\n+static void\n+sse2_test (void)\n {\n   float a[N] = {0.4,3.5,6.6,9.4,12.5,15.6,18.4,21.5,24.6,27.4,30.5,33.6,36.4,39.5,42.6,45.4,0.5,3.6,6.4,9.5,12.6,15.4,18.5,21.6,24.4,27.5,30.6,33.4,36.5,39.6,42.4,45.5};\n   long r[N];\n@@ -27,22 +26,4 @@ main1 ()\n       if (r[i] != lrintf (a[i]))\n \tabort();\n     }   \n-\n-  return 0;\n-}\n-\n-int\n-main ()\n-{\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-      != (bit_MMX | bit_SSE | bit_SSE2 | bit_CMOV))\n-    /* If host has no vector support, pass.  */\n-    return 0;\n-\n-  main1 ();\n-  return 0;\n }"}, {"sha": "388ce650f5f6432bee2e2340b9fa54e268c5e3e6", "filename": "gcc/testsuite/gcc.target/i386/sse4a-check.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse4a_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+ \n+  cpu_facilities = i386_extended_cpuid_ecx ();\n+\n+  /* Run SSE4a test only if host has SSE4a support.  */\n+  if ((cpu_facilities & bit_SSE4a))\n+    sse4a_test ();\n+\n+  exit (0);\n+}"}, {"sha": "5fb190e44b6e1e04f75402f4bb6cca02d869acf0", "filename": "gcc/testsuite/gcc.target/i386/sse4a-extract.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-extract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-extract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-extract.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,32 +1,17 @@\n /* { dg-do run } */\n /* { dg-require-effective-target sse4a } */\n /* { dg-options \"-O2 -msse4a\" } */\n-#include <ammintrin.h>\n-#include <stdlib.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-static void sse4a_test (void);\n+#include \"sse4a-check.h\"\n+\n+#include <ammintrin.h>\n \n typedef union\n {\n   long long i[2];\n   __m128i vec;\n } LI;\n \n-int\n-main ()\n-{  \n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_extended_cpuid_ecx ();\n-\n-  /* Run SSE4a test only if host has SSE4a support.  */\n-  if ((cpu_facilities & bit_SSE4a))\n-    sse4a_test ();\n-\n-  exit (0);\n-}\n-\n static long long \n sse4a_test_extrq (long long in)\n {\n@@ -96,6 +81,4 @@ sse4a_test (void)\n \n   if (fail != 0)\n     abort ();\n-\n-  exit (0);\n }"}, {"sha": "c1bd1006d7edbdd34e3764db5652bfd1c9ad8e5a", "filename": "gcc/testsuite/gcc.target/i386/sse4a-insert.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-insert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-insert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-insert.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,32 +1,17 @@\n /* { dg-do run } */\n /* { dg-require-effective-target sse4a } */\n /* { dg-options \"-O2 -msse4a\" } */\n-#include <ammintrin.h>\n-#include <stdlib.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n-static void sse4a_test (void);\n+#include \"sse4a-check.h\"\n+\n+#include <ammintrin.h>\n \n typedef union\n {\n   long long i[2];\n   __m128i vec;\n } LI;\n \n-int\n-main ()\n-{  \n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_extended_cpuid_ecx ();\n-\n-  /* Run SSE4a test only if host has SSE4a support.  */\n-  if ((cpu_facilities & bit_SSE4a))\n-    sse4a_test ();\n-\n-  exit (0);\n-}\n-\n static long long\n sse4a_test_insert (long long in1, long long in2)\n {\n@@ -106,6 +91,4 @@ sse4a_test (void)\n \n   if (fail != 0)\n     abort ();\n-\n-  exit (0);\n }"}, {"sha": "1cc067db62fcdaa2ee7d4654298e6b798169da1e", "filename": "gcc/testsuite/gcc.target/i386/sse4a-montsd.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montsd.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,26 +1,11 @@\n /* { dg-do run } */\n /* { dg-require-effective-target sse4a } */\n /* { dg-options \"-O2 -msse4a\" } */\n-#include <ammintrin.h>\n-#include <stdlib.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n-\n-static void sse4a_test (void);\n-\n-int\n-main ()\n-{  \n-  unsigned long cpu_facilities;\n \n-  cpu_facilities = i386_extended_cpuid_ecx ();\n+#include \"sse4a-check.h\"\n \n-  /* Run SSE4a test only if host has SSE4a support.  */\n-  if ((cpu_facilities & bit_SSE4a))\n-    sse4a_test ();\n+#include <ammintrin.h>\n \n-  exit (0);\n-}\n-  \n static void \n sse4a_test_movntsd (double *out, double *in)\n {\n@@ -60,6 +45,4 @@ sse4a_test (void)\n \n   if (fail != 0)\n     abort ();\n-\n-  exit (0);\n }"}, {"sha": "41e80e83ddbc4668e696334da2308e42b02d993e", "filename": "gcc/testsuite/gcc.target/i386/sse4a-montss.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montss.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montss.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-montss.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -1,25 +1,10 @@\n /* { dg-do run } */\n /* { dg-require-effective-target sse4a } */\n /* { dg-options \"-O2 -msse4a\" } */\n-#include <ammintrin.h>\n-#include <stdlib.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n-\n-static void sse4a_test (void);\n-\n-int\n-main ()\n-{  \n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_extended_cpuid_ecx ();\n \n-  /* Run SSE4a test only if host has SSE4a support.  */\n-  if ((cpu_facilities & bit_SSE4a))\n-    sse4a_test ();\n+#include \"sse4a-check.h\"\n \n-  exit (0);\n-}\n+#include <ammintrin.h>\n \n static void \n sse4a_test_movntss (float *out, float *in)\n@@ -60,6 +45,4 @@ sse4a_test (void)\n \n   if (fail != 0)\n     abort ();\n-\n-  exit (0);\n }"}, {"sha": "adf72cce18aaf165ad04952f10bbd0258cb62827", "filename": "gcc/testsuite/gcc.target/i386/ssefn-3.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-3.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -3,8 +3,10 @@\n \n /* { dg-do run } */\n /* { dg-options \"-O2 -msse -mfpmath=sse\" } */\n+\n+#include \"sse-check.h\"\n+\n #include <assert.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n static float xs (void)\n {\n@@ -26,18 +28,11 @@ double yd (double a)\n   return xd () * a;\n }\n \n-int main()\n+static void\n+sse_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if (cpu_facilities & bit_SSE)\n-    {\n-      assert (ys (1) == xs ());\n-      assert (ys (2) == xs () * 2);\n-      assert (yd (1) == xd ());\n-      assert (yd (2) == xd () * 2);\n-    }\n-  return 0;\n+  assert (ys (1) == xs ());\n+  assert (ys (2) == xs () * 2);\n+  assert (yd (1) == xd ());\n+  assert (yd (2) == xd () * 2);\n }"}, {"sha": "eacdfa79392360ee5cb10b364e0bd2ff02d172b3", "filename": "gcc/testsuite/gcc.target/i386/ssefn-4.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d67c58f94f8b9166002eed18d2096b35c0666e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssefn-4.c?ref=8d67c58f94f8b9166002eed18d2096b35c0666e7", "patch": "@@ -3,8 +3,10 @@\n \n /* { dg-do run } */\n /* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+\n+#include \"sse2-check.h\"\n+\n #include <assert.h>\n-#include \"../../gcc.dg/i386-cpuid.h\"\n \n static float xs (void)\n {\n@@ -26,18 +28,11 @@ double yd (double a)\n   return xd () * a;\n }\n \n-int main()\n+static void\n+sse2_test (void)\n {\n-  unsigned long cpu_facilities;\n-\n-  cpu_facilities = i386_cpuid ();\n-\n-  if (cpu_facilities & bit_SSE2)\n-    {\n-      assert (ys (1) == xs ());\n-      assert (ys (2) == xs () * 2);\n-      assert (yd (1) == xd ());\n-      assert (yd (2) == xd () * 2);\n-    }\n-  return 0;\n+  assert (ys (1) == xs ());\n+  assert (ys (2) == xs () * 2);\n+  assert (yd (1) == xd ());\n+  assert (yd (2) == xd () * 2);\n }"}]}