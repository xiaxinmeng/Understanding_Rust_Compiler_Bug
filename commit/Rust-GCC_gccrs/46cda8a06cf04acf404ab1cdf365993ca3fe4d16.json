{"sha": "46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjZGE4YTA2Y2YwNGFjZjQwNGFiMWNkZjM2NTk5M2NhM2ZlNGQxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-12T23:04:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-12T23:04:22Z"}, "message": "gcc-dg.exp (${tool}_load): Handle non-existing set_target_env_var the same as if it is empty list.\n\n\t* lib/gcc-dg.exp (${tool}_load): Handle non-existing\n\tset_target_env_var the same as if it is empty list.\n\t(dg-set-target-env-var): Fix up error message.\n\t(set-target-env-var): Record both preexisting env var values\n\tas well as info that env wasn't set.\n\t(restore-target-env-var): Iterate on reversed list, if second\n\tsublist element is 1, setenv the env var to the third sublist\n\telement, otherwise unsetenv it.\n\t(gcc-dg-runtest): Don't initialize set_target_env_var.\n\t(dg-test): Unset set_target_env_var if it was set.\n\n\t* g++.dg/asan/deep-tail-call-1.C: Whitespace fixes.  Don't rely\n\ton argc being one.\n\t* g++.dg/asan/interception-malloc-test-1.C: Only run on linux.\n\tWhitespace fixes.  Avoid unnecessary * sizeof(char).\n\t* g++.dg/asan/deep-thread-stack-1.C: Add -lasan -lpthread to\n\tdg-options.  Whitespace fixes.\n\t* g++.dg/asan/deep-stack-uaf-1.C: Skip for -flto.  Whitespace fixes.\n\t* g++.dg/asan/interception-test-1.C: Whitespace fixes.\n\t* g++.dg/asan/interception-failure-test-1.C: Whitespace fixes.\n\tAvoid unnecessary * sizeof(char).  Remove // CHECK: comment.\n\t* g++.dg/asan/default-options-1.C: Whitespace fixes.\n\t* g++.dg/asan/symbolize-callback-1.C: Whitespace fixes.  Make\n\tfirst __asan_symbolize argument unnamed.  Avoid unnecessary\n\t* sizeof(char).\n\t* g++.dg/asan/large-func-test-1.C: Whitespace fixes.  Don't rely\n\ton argc being one.  Allow both _Znwj and _Znwm as operator new.\n\tIgnore everything in the backtrace above operator new.  Fix up\n\tdg-output regexps.\n\t* c-c++-common/asan/null-deref-1.c: Add -fno-omit-frame-pointer\n\tand for x86 -mno-omit-leaf-frame-pointer.  Fix up dg-output regexps.\n\t* c-c++-common/asan/clone-test-1.c: Whitespace fixes.  Return non-zero\n\ton failures.  Avoid pointless PASS dg-output check. Remove bogus\n\tdg-shouldfail.\n\t* c-c++-common/asan/sanity-check-pure-c-1.c: Fix up dg-output regexps.\n\tAvoid unnecessary * sizeof(char).\n\t* c-c++-common/asan/heap-overflow-1.c: Fix up dg-output regexps.\n\tDon't rely on argc being one.\n\t* c-c++-common/asan/sleep-before-dying-1.c: Whitespace fixes.\n\tAvoid unnecessary * sizeof(char).\n\t* c-c++-common/asan/rlimit-mmap-test-1.c: Whitespace fixes.\n\t* c-c++-common/asan/stack-overflow-1.c: Fix up dg-output regexps.\n\t* c-c++-common/asan/global-overflow-1.c: Add -fno-builtin-memset.\n\tFix up dg-output regexps.\n\t* c-c++-common/asan/strncpy-overflow-1.c: Fix up dg-output regexps.\n\t* c-c++-common/asan/memcmp-1.c:\tDon't rely on argc being one.\n\t* c-c++-common/asan/use-after-free-1.c: Fix up dg-output regexps.\n\t* c-c++-common/asan/swapcontext-test-1.c: Don't rely on argc being\n\tone.\n\t* c-c++-common/asan/force-inline-opt0-1.c: Remove dg-skip-if.\n\t* c-c++-common/asan/strip-path-prefix-1.c: Whitespace fixes.\n\tAvoid unnecessary * sizeof(char).\n\n2012-12-12  Wei Mi  <wmi@google.com>\n\n\t* lib/target-supports.exp (check_effective_target_dlopen,\n\tcheck_effective_target_clone, check_effective_target_setrlimit,\n\tcheck_effective_target_swapcontext): New procedures.\n\t* lib/gcc-dg.exp (${tool}_load): Handle dg-set-target-env-var.\n\t(dg-set-target-env-var, set-target-env-var,\n\trestore-target-env-var): New procedures.\n\t(gcc-dg-runtest): Set set_target_env_var.\n\t* g++.dg/asan/symbolize-callback-1.C: New test.\n\t* g++.dg/asan/shared-lib-test-1-so.cc: New file.\n\t* g++.dg/asan/deep-tail-call-1.C: New test.\n\t* g++.dg/asan/default-options-1.C: New test.\n\t* g++.dg/asan/interception-test-1.C: New test.\n\t* g++.dg/asan/dlclose-test-1-so.cc: New file.\n\t* g++.dg/asan/deep-thread-stack-1.C: New test.\n\t* g++.dg/asan/interception-malloc-test-1.C: New test.\n\t* g++.dg/asan/deep-stack-uaf-1.C: New test.\n\t* g++.dg/asan/large-func-test-1.C: New test.\n\t* g++.dg/asan/interception-failure-test-1.C: New test.\n\t* c-c++-common/asan/strip-path-prefix-1.c: New test.\n\t* c-c++-common/asan/force-inline-opt0-1.c: New test.\n\t* c-c++-common/asan/swapcontext-test-1.c: New test.\n\t* c-c++-common/asan/null-deref-1.c: New test.\n\t* c-c++-common/asan/global-overflow-1.c: New test.\n\t* c-c++-common/asan/strncpy-overflow-1.c: New test.\n\t* c-c++-common/asan/rlimit-mmap-test-1.c: New test.\n\t* c-c++-common/asan/stack-overflow-1.c: New test.\n\t* c-c++-common/asan/use-after-free-1.c: New test.\n\t* c-c++-common/asan/sanity-check-pure-c-1.c: New test.\n\t* c-c++-common/asan/clone-test-1.c: New test.\n\t* c-c++-common/asan/heap-overflow-1.c: New test.\n\t* c-c++-common/asan/sleep-before-dying-1.c: New test.\n\nFrom-SVN: r194458", "tree": {"sha": "f599eefbf765aa51ab18df6bffb69ac8e1d9817c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f599eefbf765aa51ab18df6bffb69ac8e1d9817c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/comments", "author": null, "committer": null, "parents": [{"sha": "f52f03c86c7daba3035aaba86f6de8141c30285b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52f03c86c7daba3035aaba86f6de8141c30285b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52f03c86c7daba3035aaba86f6de8141c30285b"}], "stats": {"total": 809, "additions": 805, "deletions": 4}, "files": [{"sha": "80981f6d60b65cdc4958037d653c981a42f99726", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -1,3 +1,92 @@\n+2012-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/gcc-dg.exp (${tool}_load): Handle non-existing\n+\tset_target_env_var the same as if it is empty list.\n+\t(dg-set-target-env-var): Fix up error message.\n+\t(set-target-env-var): Record both preexisting env var values\n+\tas well as info that env wasn't set.\n+\t(restore-target-env-var): Iterate on reversed list, if second\n+\tsublist element is 1, setenv the env var to the third sublist\n+\telement, otherwise unsetenv it.\n+\t(gcc-dg-runtest): Don't initialize set_target_env_var.\n+\t(dg-test): Unset set_target_env_var if it was set.\n+\n+\t* g++.dg/asan/deep-tail-call-1.C: Whitespace fixes.  Don't rely\n+\ton argc being one.\n+\t* g++.dg/asan/interception-malloc-test-1.C: Only run on linux.\n+\tWhitespace fixes.  Avoid unnecessary * sizeof(char).\n+\t* g++.dg/asan/deep-thread-stack-1.C: Add -lasan -lpthread to\n+\tdg-options.  Whitespace fixes.\n+\t* g++.dg/asan/deep-stack-uaf-1.C: Skip for -flto.  Whitespace fixes.\n+\t* g++.dg/asan/interception-test-1.C: Whitespace fixes.\n+\t* g++.dg/asan/interception-failure-test-1.C: Whitespace fixes.\n+\tAvoid unnecessary * sizeof(char).  Remove // CHECK: comment.\n+\t* g++.dg/asan/default-options-1.C: Whitespace fixes.\n+\t* g++.dg/asan/symbolize-callback-1.C: Whitespace fixes.  Make\n+\tfirst __asan_symbolize argument unnamed.  Avoid unnecessary\n+\t* sizeof(char).\n+\t* g++.dg/asan/large-func-test-1.C: Whitespace fixes.  Don't rely\n+\ton argc being one.  Allow both _Znwj and _Znwm as operator new.\n+\tIgnore everything in the backtrace above operator new.  Fix up\n+\tdg-output regexps.\n+\t* c-c++-common/asan/null-deref-1.c: Add -fno-omit-frame-pointer\n+\tand for x86 -mno-omit-leaf-frame-pointer.  Fix up dg-output regexps.\n+\t* c-c++-common/asan/clone-test-1.c: Whitespace fixes.  Return non-zero\n+\ton failures.  Avoid pointless PASS dg-output check. Remove bogus\n+\tdg-shouldfail.\n+\t* c-c++-common/asan/sanity-check-pure-c-1.c: Fix up dg-output regexps.\n+\tAvoid unnecessary * sizeof(char).\n+\t* c-c++-common/asan/heap-overflow-1.c: Fix up dg-output regexps.\n+\tDon't rely on argc being one.\n+\t* c-c++-common/asan/sleep-before-dying-1.c: Whitespace fixes.\n+\tAvoid unnecessary * sizeof(char).\n+\t* c-c++-common/asan/rlimit-mmap-test-1.c: Whitespace fixes.\n+\t* c-c++-common/asan/stack-overflow-1.c: Fix up dg-output regexps.\n+\t* c-c++-common/asan/global-overflow-1.c: Add -fno-builtin-memset.\n+\tFix up dg-output regexps.\n+\t* c-c++-common/asan/strncpy-overflow-1.c: Fix up dg-output regexps.\n+\t* c-c++-common/asan/memcmp-1.c:\tDon't rely on argc being one.\n+\t* c-c++-common/asan/use-after-free-1.c: Fix up dg-output regexps.\n+\t* c-c++-common/asan/swapcontext-test-1.c: Don't rely on argc being\n+\tone.\n+\t* c-c++-common/asan/force-inline-opt0-1.c: Remove dg-skip-if.\n+\t* c-c++-common/asan/strip-path-prefix-1.c: Whitespace fixes.\n+\tAvoid unnecessary * sizeof(char).\n+\n+2012-12-12  Wei Mi  <wmi@google.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_dlopen,\n+\tcheck_effective_target_clone, check_effective_target_setrlimit,\n+\tcheck_effective_target_swapcontext): New procedures.\n+\t* lib/gcc-dg.exp (${tool}_load): Handle dg-set-target-env-var.\n+\t(dg-set-target-env-var, set-target-env-var,\n+\trestore-target-env-var): New procedures.\n+\t(gcc-dg-runtest): Set set_target_env_var.\n+\t* g++.dg/asan/symbolize-callback-1.C: New test.\n+\t* g++.dg/asan/shared-lib-test-1-so.cc: New file.\n+\t* g++.dg/asan/deep-tail-call-1.C: New test.\n+\t* g++.dg/asan/default-options-1.C: New test.\n+\t* g++.dg/asan/interception-test-1.C: New test.\n+\t* g++.dg/asan/dlclose-test-1-so.cc: New file.\n+\t* g++.dg/asan/deep-thread-stack-1.C: New test.\n+\t* g++.dg/asan/interception-malloc-test-1.C: New test.\n+\t* g++.dg/asan/deep-stack-uaf-1.C: New test.\n+\t* g++.dg/asan/large-func-test-1.C: New test.\n+\t* g++.dg/asan/interception-failure-test-1.C: New test.\n+\t* c-c++-common/asan/strip-path-prefix-1.c: New test.\n+\t* c-c++-common/asan/force-inline-opt0-1.c: New test.\n+\t* c-c++-common/asan/swapcontext-test-1.c: New test.\n+\t* c-c++-common/asan/null-deref-1.c: New test.\n+\t* c-c++-common/asan/global-overflow-1.c: New test.\n+\t* c-c++-common/asan/strncpy-overflow-1.c: New test.\n+\t* c-c++-common/asan/rlimit-mmap-test-1.c: New test.\n+\t* c-c++-common/asan/stack-overflow-1.c: New test.\n+\t* c-c++-common/asan/use-after-free-1.c: New test.\n+\t* c-c++-common/asan/sanity-check-pure-c-1.c: New test.\n+\t* c-c++-common/asan/clone-test-1.c: New test.\n+\t* c-c++-common/asan/heap-overflow-1.c: New test.\n+\t* c-c++-common/asan/sleep-before-dying-1.c: New test.\n+\n 2012-12-12  Steve Ellcey  <sellcey@mips.com>\n \n \t* gcc.dg/pr55150-2.c: Add pic support check."}, {"sha": "d9acc0dcfc487abc3c86cd7991f02082709f4068", "filename": "gcc/testsuite/c-c++-common/asan/clone-test-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fclone-test-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,45 @@\n+/* Regression test for:\n+   http://code.google.com/p/address-sanitizer/issues/detail?id=37 */\n+\n+/* { dg-do run { target { *-*-linux* } } } */\n+/* { dg-require-effective-target clone } */\n+/* { dg-options \"-D_GNU_SOURCE\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <sched.h>\n+#include <sys/syscall.h>\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+\n+int Child(void *arg) {\n+  char x[32] = {0};  /* Stack gets poisoned. */\n+  printf(\"Child:  %p\\n\", x);\n+  _exit(1);  /* NoReturn, stack will remain unpoisoned unless we do something. */\n+}\n+\n+volatile int zero = 0;\n+\n+int main(int argc, char **argv) {\n+  int i;\n+  const int kStackSize = 1 << 20;\n+  char child_stack[kStackSize + 1];\n+  char *sp = child_stack + kStackSize;  /* Stack grows down. */\n+  printf(\"Parent: %p\\n\", sp);\n+  pid_t clone_pid = clone(Child, sp, CLONE_FILES | CLONE_VM, NULL, 0, 0, 0);\n+  int status;\n+  pid_t wait_result = waitpid(clone_pid, &status, __WCLONE);\n+  if (wait_result < 0) {\n+    perror(\"waitpid\");\n+    return 1;\n+  }\n+  if (wait_result == clone_pid && WIFEXITED(status)) {\n+    /* Make sure the child stack was indeed unpoisoned. */\n+    for (i = 0; i < kStackSize; i++)\n+      child_stack[i] = i;\n+    int ret = child_stack[zero];\n+    return ret;\n+  }\n+  return 1;\n+}"}, {"sha": "0576155c284b3d00d12820976a46f00bdec017f7", "filename": "gcc/testsuite/c-c++-common/asan/force-inline-opt0-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,16 @@\n+/* This test checks that we are no instrumenting a memory access twice\n+   (before and after inlining) */\n+\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"__asan_report_load\" } } */\n+\n+__attribute__((always_inline))\n+inline void foo(int *x) {\n+  *x = 0;\n+}\n+\n+int main() {\n+  int x;\n+  foo(&x);\n+  return x;\n+}"}, {"sha": "b70c300faf5fd2f976430ff7d4deb7a7cb4cfd9a", "filename": "gcc/testsuite/c-c++-common/asan/global-overflow-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fglobal-overflow-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-memset\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <string.h>\n+volatile int ten = 10;\n+\n+int main() {\n+  static char XXX[10];\n+  static char YYY[10];\n+  static char ZZZ[10];\n+  memset(XXX, 0, 10);\n+  memset(YYY, 0, 10);\n+  memset(ZZZ, 0, 10);\n+  int res = YYY[ten];  /* BOOOM */\n+  res += XXX[ten/10] + ZZZ[ten/10];\n+  return res;\n+}\n+\n+/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*global-overflow-1.c:15|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of global variable\" } */\n+/* { dg-output \".*YYY\\[^\\n\\r]* of size 10\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7e9f54b591bccf25b1e7722c67080a05812c6818", "filename": "gcc/testsuite/c-c++-common/asan/heap-overflow-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fheap-overflow-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free -fno-builtin-memset\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+volatile int ten = 10;\n+int main(int argc, char **argv) {\n+  char *x = (char*)malloc(10);\n+  memset(x, 0, 10);\n+  int res = x[ten];  /* BOOOM */\n+  free(x);\n+  return res;\n+}\n+\n+/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*heap-overflow-1.c:11|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of 10-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*heap-overflow-1.c:9|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "03f32e92a31fc67e463ae7a49670b562081423d9", "filename": "gcc/testsuite/c-c++-common/asan/memcmp-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -4,12 +4,14 @@\n \n #include <string.h>\n \n+volatile int one = 1;\n+\n int\n-main (int argc, char **argv)\n+main ()\n {\n-  char a1[] = {argc, 2, 3, 4};\n-  char a2[] = {1, 2*argc, 3, 4};\n-  int res = memcmp (a1, a2, 5 + argc);\n+  char a1[] = {one, 2, 3, 4};\n+  char a2[] = {1, 2*one, 3, 4};\n+  int res = memcmp (a1, a2, 5 + one);\n   return res;\n }\n "}, {"sha": "6a849bf6f56e63fa284aa70f63d9190d7075ee9a", "filename": "gcc/testsuite/c-c++-common/asan/null-deref-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fnull-deref-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-omit-frame-pointer\" } */\n+/* { dg-additional-options \"-mno-omit-leaf-frame-pointer\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+__attribute__((noinline, noclone))\n+static void\n+NullDeref(int *ptr)\n+{\n+  ptr[10]++;\n+}\n+\n+int main()\n+{\n+  NullDeref((int*)0);\n+  return 0;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer:? SEGV on unknown address\\[^\\n\\r]*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ \\[^\\n\\r]*pc 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"AddressSanitizer can not provide additional info.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*NullDeref\\[^\\n\\r]* (\\[^\\n\\r]*null-deref-1.c:10|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*null-deref-1.c:15|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "212db3babcbee422d25bcff9b855bc7523564ada", "filename": "gcc/testsuite/c-c++-common/asan/rlimit-mmap-test-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Frlimit-mmap-test-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,21 @@\n+/* Check that we properly report mmap failure. */\n+\n+/* { dg-do run { target setrlimit } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+\n+static volatile void *x;\n+\n+int main(int argc, char **argv) {\n+  struct rlimit mmap_resource_limit = { 0, 0 };\n+  if (setrlimit(RLIMIT_AS, &mmap_resource_limit)) return 1;\n+  x = malloc(10000000);\n+  return 0;\n+}\n+\n+/* { dg-output \"AddressSanitizer is unable to mmap\" } */"}, {"sha": "78d15e1aad3b0180df98b3af5b4c2532343a5add", "filename": "gcc/testsuite/c-c++-common/asan/sanity-check-pure-c-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanity-check-pure-c-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanity-check-pure-c-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanity-check-pure-c-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return x[5];\n+}\n+\n+/* { dg-output \"heap-use-after-free.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 \\[^\\n\\r]*(in _*(interceptor_|)free|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 \\[^\\n\\r]*(in _*main (\\[^\\n\\r]*sanity-check-pure-c-1.c:8|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 \\[^\\n\\r]*(in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 \\[^\\n\\r]*(in _*main (\\[^\\n\\r]*sanity-check-pure-c-1.c:7|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "e50885907dd55ea7162ed905b9aed3eecfb8b1e2", "filename": "gcc/testsuite/c-c++-common/asan/sleep-before-dying-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsleep-before-dying-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsleep-before-dying-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsleep-before-dying-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"sleep_before_dying=1\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return x[5];\n+}\n+\n+/* { dg-output \"Sleeping for 1 second\" } */"}, {"sha": "c44370f3417c5f2619c7546aac727100301b0123", "filename": "gcc/testsuite/c-c++-common/asan/stack-overflow-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstack-overflow-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-memset\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+volatile int ten = 10;\n+\n+#include <string.h>\n+\n+int main() {\n+  char x[10];\n+  memset(x, 0, 10);\n+  int res = x[ten];  /* BOOOM */\n+  return res;\n+}\n+\n+/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*stack-overflow-1.c:12|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"Address 0x\\[0-9a-f\\]+ is\\[^\\n\\r]*frame <main>\" } */"}, {"sha": "ea8e933c03bfc8152ac2063572dca0e612986355", "filename": "gcc/testsuite/c-c++-common/asan/strip-path-prefix-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrip-path-prefix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrip-path-prefix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrip-path-prefix-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"strip_path_prefix='/'\" } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return x[5];\n+}\n+\n+/* { dg-output \"heap-use-after-free.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ \\[(\\]\\[^/\\]\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "c8c288359c7f46ce5a92b556979aab02c8a65c38", "filename": "gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrncpy-overflow-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-strncpy\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+int main(int argc, char **argv) {\n+  char *hello = (char*)malloc(6);\n+  strcpy(hello, \"hello\");\n+  char *short_buffer = (char*)malloc(9);\n+  strncpy(short_buffer, hello, 10);  /* BOOM */\n+  return short_buffer[8];\n+}\n+\n+/* { dg-output \"WRITE of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)strncpy|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:11|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ is located 0 bytes to the right of 9-byte region\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*strncpy-overflow-1.c:10|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "23d3db0655b8711db60962267432e2e08f06e0a5", "filename": "gcc/testsuite/c-c++-common/asan/swapcontext-test-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fswapcontext-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fswapcontext-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fswapcontext-test-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,63 @@\n+/* Check that ASan plays well with easy cases of makecontext/swapcontext. */\n+\n+/* { dg-do run { target swapcontext } } */\n+\n+#include <stdio.h>\n+#include <ucontext.h>\n+#include <unistd.h>\n+\n+ucontext_t orig_context;\n+ucontext_t child_context;\n+\n+void Child(int mode) {\n+  char x[32] = {0};  /* Stack gets poisoned. */\n+  printf(\"Child: %p\\n\", x);\n+  /* (a) Do nothing, just return to parent function.\n+     (b) Jump into the original function. Stack remains poisoned unless we do\n+         something. */\n+  if (mode == 1) {\n+    if (swapcontext(&child_context, &orig_context) < 0) {\n+      perror(\"swapcontext\");\n+      _exit(0);\n+    }\n+  }\n+}\n+\n+int Run(int arg, int mode) {\n+  int i;\n+  const int kStackSize = 1 << 20;\n+  char child_stack[kStackSize + 1];\n+  printf(\"Child stack: %p\\n\", child_stack);\n+  /* Setup child context. */\n+  getcontext(&child_context);\n+  child_context.uc_stack.ss_sp = child_stack;\n+  child_context.uc_stack.ss_size = kStackSize / 2;\n+  if (mode == 0) {\n+    child_context.uc_link = &orig_context;\n+  }\n+  makecontext(&child_context, (void (*)())Child, 1, mode);\n+  if (swapcontext(&orig_context, &child_context) < 0) {\n+    perror(\"swapcontext\");\n+    return 0;\n+  }\n+  /* Touch childs's stack to make sure it's unpoisoned. */\n+  for (i = 0; i < kStackSize; i++) {\n+    child_stack[i] = i;\n+  }\n+  return child_stack[arg];\n+}\n+\n+volatile int zero = 0;\n+\n+int main(int argc, char **argv) {\n+  int ret = 0;\n+  ret += Run(zero, 0);\n+  printf(\"Test1 passed\\n\");\n+  ret += Run(zero, 1);\n+  printf(\"Test2 passed\\n\");\n+  return ret;\n+}\n+\n+/* { dg-output \"WARNING: ASan doesn't fully support makecontext/swapcontext.*\" } */\n+/* { dg-output \"Test1 passed.*\" } */\n+/* { dg-output \"Test2 passed.*\" } */"}, {"sha": "939feeb91ee424740a9080480f53cd2241598c7f", "filename": "gcc/testsuite/c-c++-common/asan/use-after-free-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fuse-after-free-1.c?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-malloc -fno-builtin-free\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <stdlib.h>\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return x[5];\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer:? heap-use-after-free on address\\[^\\n\\r]*\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:9|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"0x\\[0-9a-f\\]+ is located 5 bytes inside of 10-byte region .0x\\[0-9a-f\\]+,0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"freed by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)free|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:8|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"previously allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*use-after-free-1.c:7|\\[^\\n\\r]*:0)|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "76779959ad77a009de1a9d4fff8b32cedec2fed9", "filename": "gcc/testsuite/g++.dg/asan/deep-stack-uaf-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,39 @@\n+// Check that we can store lots of stack frames if asked to.\n+\n+// { dg-do run }\n+// { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } }\n+// { dg-set-target-env-var ASAN_OPTIONS \"malloc_context_size=120:redzone=512\" }\n+// { dg-options \"-fno-omit-frame-pointer -fno-optimize-sibling-calls\" }\n+// { dg-additional-options \"-mno-omit-leaf-frame-pointer\" { target { i?86-*-* x86_64-*-* } } }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+template <int depth>\n+struct DeepFree {\n+  static void __attribute__((noinline))\n+  free(char *x) {\n+    DeepFree<depth - 1>::free(x);\n+  }\n+};\n+\n+template<>\n+struct DeepFree<0> {\n+  static void __attribute__((noinline))\n+  free(char *x) {\n+    ::free(x);\n+  }\n+};\n+\n+int main() {\n+  char *x = new char[10];\n+  // deep_free(x);\n+  DeepFree<200>::free(x);\n+  return x[5];\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer:? heap-use-after-free on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #37 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*DeepFree\\[^\\n\\r]*36|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #99 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*DeepFree\\[^\\n\\r]*98|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #116 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*DeepFree\\[^\\n\\r]*115|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}, {"sha": "5ac63f1d54b6633d7b8300380effe739a05ef472", "filename": "gcc/testsuite/g++.dg/asan/deep-tail-call-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-tail-call-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-tail-call-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-tail-call-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-options \"-fno-omit-frame-pointer -fno-optimize-sibling-calls\" }\n+// { dg-additional-options \"-mno-omit-leaf-frame-pointer\" { target { i?86-*-* x86_64-*-* } } }\n+// { dg-shouldfail \"asan\" }\n+\n+int global[10];\n+void __attribute__((noinline)) call4(int i) { global[i+10]++; }\n+void __attribute__((noinline)) call3(int i) { call4(i); }\n+void __attribute__((noinline)) call2(int i) { call3(i); }\n+void __attribute__((noinline)) call1(int i) { call2(i); }\n+volatile int one = 1;\n+int main() {\n+  call1(one);\n+  return global[0];\n+}\n+\n+// { dg-output \"AddressSanitizer:? global-buffer-overflow.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*call4\\[^\\n\\r]*|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #1 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*call3\\[^\\n\\r]*|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #2 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*call2\\[^\\n\\r]*|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #3 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*call1\\[^\\n\\r]*|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #4 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*main\\[^\\n\\r]*|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}, {"sha": "12d8a7a64eadcb7cb1d47f277d4d2bd3eba141aa", "filename": "gcc/testsuite/g++.dg/asan/deep-thread-stack-1.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-thread-stack-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target pthread } }\n+// { dg-options \"-lasan -lpthread\" }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <pthread.h>\n+\n+int *x;\n+\n+void *AllocThread(void *arg) {\n+  x = new int;\n+  *x = 42;\n+  return NULL;\n+}\n+\n+void *FreeThread(void *arg) {\n+  delete x;\n+  return NULL;\n+}\n+\n+void *AccessThread(void *arg) {\n+  *x = 43;  // BOOM\n+  return NULL;\n+}\n+\n+typedef void* (*callback_type)(void* arg);\n+\n+void *RunnerThread(void *function) {\n+  pthread_t thread;\n+  pthread_create(&thread, NULL, (callback_type)function, NULL);\n+  pthread_join(thread, NULL);\n+  return NULL;\n+}\n+\n+void RunThread(callback_type function) {\n+  pthread_t runner;\n+  pthread_create(&runner, NULL, RunnerThread, (void*)function);\n+  pthread_join(runner, NULL);\n+}\n+\n+int main(int argc, char *argv[]) {\n+  RunThread(AllocThread);\n+  RunThread(FreeThread);\n+  RunThread(AccessThread);\n+  return (x != 0);\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: heap-use-after-free.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size 4 at 0x\\[0-9a-f\\]+ thread T(\\[0-9\\]+).*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"freed by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"previously allocated by thread T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\2 created by T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\8 created by T0 here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\4 created by T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\11 created by T0 here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\6 created by T(\\[0-9\\]+) here:.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"Thread T\\\\14 created by T0 here:\" }"}, {"sha": "42b41640afb3e43dbcb325701c6e00ac779f173b", "filename": "gcc/testsuite/g++.dg/asan/default-options-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run }\n+\n+const char *kAsanDefaultOptions=\"verbosity=1 foo=bar\";\n+\n+extern \"C\"\n+__attribute__((no_address_safety_analysis))\n+const char *__asan_default_options() {\n+  return kAsanDefaultOptions;\n+}\n+\n+int main() {\n+  return 0;\n+}\n+\n+// { dg-output \"Using the defaults from __asan_default_options:.* foo=bar.*(\\n|\\r\\n|\\r)\" }"}, {"sha": "99f00e2300745b04615fb5ec0c1f727de430bfa7", "filename": "gcc/testsuite/g++.dg/asan/dlclose-test-1-so.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdlclose-test-1-so.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdlclose-test-1-so.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdlclose-test-1-so.cc?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,32 @@\n+//===----------- dlclose-test-so.cc -----------------------------*- C++ -*-===//\n+//\n+// This file is distributed under the University of Illinois Open Source\n+// License. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file is a part of AddressSanitizer, an address sanity checker.\n+//\n+// Regression test for\n+// http://code.google.com/p/address-sanitizer/issues/detail?id=19\n+//===----------------------------------------------------------------------===//\n+\n+#include <stdio.h>\n+\n+static int pad1;\n+static int static_var;\n+static int pad2;\n+\n+extern \"C\"\n+int *get_address_of_static_var() {\n+  return &static_var;\n+}\n+\n+__attribute__((constructor))\n+void at_dlopen() {\n+  printf(\"%s: I am being dlopened\\n\", __FILE__);\n+}\n+__attribute__((destructor))\n+void at_dlclose() {\n+  printf(\"%s: I am being dlclosed\\n\", __FILE__);\n+}"}, {"sha": "db105ae871f45571757942659ff12e8039423758", "filename": "gcc/testsuite/g++.dg/asan/interception-failure-test-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-failure-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-failure-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-failure-test-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,21 @@\n+// If user provides his own libc functions, ASan doesn't\n+// intercept these functions.\n+\n+// { dg-do run }\n+// { dg-options \"-fno-builtin-malloc -fno-builtin-free\" }\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+extern \"C\" long strtol(const char *nptr, char **endptr, int base) {\n+  fprintf(stderr, \"my_strtol_interceptor\\n\");\n+  return 0;\n+}\n+\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return (int)strtol(x, 0, 10);\n+}\n+\n+// { dg-output \"my_strtol_interceptor\" }"}, {"sha": "b7999e94b1dde04ef76b6d83c925339298574b20", "filename": "gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-malloc-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-malloc-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-malloc-test-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,24 @@\n+// ASan interceptor can be accessed with __interceptor_ prefix.\n+\n+// { dg-do run { target *-*-linux* } }\n+// { dg-options \"-fno-builtin-free\" }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+extern \"C\" void *__interceptor_malloc(size_t size);\n+extern \"C\" void *malloc(size_t size) {\n+  write(2, \"malloc call\\n\", sizeof(\"malloc call\\n\") - 1);\n+  return __interceptor_malloc(size);\n+}\n+\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return (int)strtol(x, 0, 10);\n+}\n+\n+// { dg-output \"malloc call.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*heap-use-after-free\" }"}, {"sha": "f12f3b61e82efd058452e01296f99decbc29fa02", "filename": "gcc/testsuite/g++.dg/asan/interception-test-1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Finterception-test-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,23 @@\n+// ASan interceptor can be accessed with __interceptor_ prefix.\n+\n+// { dg-do run }\n+// { dg-options \"-fno-builtin-malloc -fno-builtin-free\" }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+extern \"C\" long __interceptor_strtol(const char *nptr, char **endptr, int base);\n+extern \"C\" long strtol(const char *nptr, char **endptr, int base) {\n+  fprintf(stderr, \"my_strtol_interceptor\\n\");\n+  return __interceptor_strtol(nptr, endptr, base);\n+}\n+\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return (int)strtol(x, 0, 10);\n+}\n+\n+// { dg-output \"my_strtol_interceptor.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*heap-use-after-free\" }"}, {"sha": "32981fa4b7349993c1b04c8ca5f0079fad8a64b1", "filename": "gcc/testsuite/g++.dg/asan/large-func-test-1.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdlib.h>\n+__attribute__((noinline))\n+static void LargeFunction(int *x, int zero) {\n+  x[0]++;\n+  x[1]++;\n+  x[2]++;\n+  x[3]++;\n+  x[4]++;\n+  x[5]++;\n+  x[6]++;\n+  x[7]++;\n+  x[8]++;\n+  x[9]++;\n+\n+  x[zero + 111]++;  // we should report this exact line\n+\n+  x[10]++;\n+  x[11]++;\n+  x[12]++;\n+  x[13]++;\n+  x[14]++;\n+  x[15]++;\n+  x[16]++;\n+  x[17]++;\n+  x[18]++;\n+  x[19]++;\n+}\n+volatile int one = 1;\n+int main() {\n+  int *x = new int[100];\n+  LargeFunction(x, one - 1);\n+  delete x;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer:? heap-buffer-overflow on address\\[^\\n\\r]*\" }\n+// { dg-output \"0x\\[0-9a-f\\]+ at pc 0x\\[0-9a-f\\]+ bp 0x\\[0-9a-f\\]+ sp 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*LargeFunction\\[^\\n\\r]*(large-func-test-1.C:18|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"0x\\[0-9a-f\\]+ is located 44 bytes to the right of 400-byte region.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #1 0x\\[0-9a-f\\]+ (in (operator new|_*_Znw\\[mj\\])|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}, {"sha": "7548bc02a502fdd025100c490440fac59c149364", "filename": "gcc/testsuite/g++.dg/asan/shared-lib-test-1-so.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fshared-lib-test-1-so.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fshared-lib-test-1-so.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fshared-lib-test-1-so.cc?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,20 @@\n+//===----------- shared-lib-test-so.cc --------------------------*- C++ -*-===//\n+//\n+// This file is distributed under the University of Illinois Open Source\n+// License. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file is a part of AddressSanitizer, an address sanity checker.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include <stdio.h>\n+\n+int pad[10];\n+int GLOB[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+extern \"C\"\n+void inc(int index) {\n+  GLOB[index]++;\n+}"}, {"sha": "9978958f9e26ec2a42da046200e02da18ef047c3", "filename": "gcc/testsuite/g++.dg/asan/symbolize-callback-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsymbolize-callback-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsymbolize-callback-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fsymbolize-callback-1.C?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do run }\n+// { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O2\" } }\n+// { dg-options \"-fno-builtin-malloc -fno-builtin-free\" }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+extern \"C\"\n+bool __asan_symbolize(const void *, char *out_buffer, int out_size) {\n+  snprintf(out_buffer, out_size, \"MySymbolizer\");\n+  return true;\n+}\n+\n+int main() {\n+  char *x = (char*)malloc(10);\n+  free(x);\n+  return x[5];\n+}\n+\n+// { dg-output \"MySymbolizer\" }"}, {"sha": "f2161ea6526df28e7c6c4155c217574b3a94bd2a", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -254,7 +254,21 @@ if { [info procs ${tool}_load] != [list] \\\n     proc ${tool}_load { program args } {\n \tglobal tool\n \tglobal shouldfail\n+\tglobal set_target_env_var\n+\n+\tset saved_target_env_var [list]\n+\tif { [info exists set_target_env_var] \\\n+\t     && [llength $set_target_env_var] != 0 } {\n+\t    if { [is_remote target] } {\n+\t\treturn [list \"unsupported\" \"\"]\n+\t    }\n+\t    set-target-env-var\n+\t}\n \tset result [eval [list saved_${tool}_load $program] $args]\n+\tif { [info exists set_target_env_var] \\\n+\t     && [llength $set_target_env_var] != 0 } {\n+\t    restore-target-env-var\n+\t}\n \tif { $shouldfail != 0 } {\n \t    switch [lindex $result 0] {\n \t\t\"pass\" { set status \"fail\" }\n@@ -266,6 +280,42 @@ if { [info procs ${tool}_load] != [list] \\\n     }\n }\n \n+proc dg-set-target-env-var { args } {\n+    global set_target_env_var\n+    if { [llength $args] != 3 } {\n+\terror \"dg-set-target-env-var: need two arguments\"\n+\treturn\n+    }\n+    lappend set_target_env_var [list [lindex $args 1] [lindex $args 2]]\n+}\n+\n+proc set-target-env-var { } {\n+    global set_target_env_var\n+    upvar 1 saved_target_env_var saved_target_env_var\n+    foreach env_var $set_target_env_var {\n+\tset var [lindex $env_var 0]\n+\tset value [lindex $env_var 1]\n+\tif [info exists env($var)] {\n+\t    lappend saved_target_env_var [list $var 1 $env($var)]\n+\t} else {\n+\t    lappend saved_target_env_var [list $var 0]\n+\t}\n+\tsetenv $var $value\n+    }\n+}\n+\n+proc restore-target-env-var { } {\n+    upvar 1 saved_target_env_var saved_target_env_var\n+    foreach env_var [lreverse $saved_target_env_var] {\n+\tset var [lindex $env_var 0]\n+\tif [lindex $env_var 1] {\n+\t    setenv $var [lindex $env_var 2]\n+\t} else {\n+\t    unsetenv $var\n+\t}\n+    }\n+}\n+\n # Utility routines.\n \n #\n@@ -677,6 +727,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal compiler_conditional_xfail_data\n \tglobal shouldfail\n \tglobal testname_with_flags\n+\tglobal set_target_env_var\n \n \tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n \t    set saved_info $errorInfo\n@@ -697,6 +748,9 @@ if { [info procs saved-dg-test] == [list] } {\n \tset additional_sources \"\"\n \tset additional_prunes \"\"\n \tset shouldfail 0\n+\tif [info exists set_target_env_var] {\n+\t    unset set_target_env_var\n+\t}\n \tunset_timeout_vars\n \tif [info exists compiler_conditional_xfail_data] {\n \t    unset compiler_conditional_xfail_data"}, {"sha": "75436a660de1623137bf734db740afdd4386bb62", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cda8a06cf04acf404ab1cdf365993ca3fe4d16/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=46cda8a06cf04acf404ab1cdf365993ca3fe4d16", "patch": "@@ -719,6 +719,26 @@ proc check_effective_target_mmap {} {\n     return [check_function_available \"mmap\"]\n }\n \n+# Return 1 if the target supports dlopen, 0 otherwise.\n+proc check_effective_target_dlopen {} {\n+    return [check_function_available \"dlopen\"]\n+}\n+\n+# Return 1 if the target supports clone, 0 otherwise.\n+proc check_effective_target_clone {} {\n+    return [check_function_available \"clone\"]\n+}\n+\n+# Return 1 if the target supports setrlimit, 0 otherwise.\n+proc check_effective_target_setrlimit {} {\n+    return [check_function_available \"setrlimit\"]\n+}\n+\n+# Return 1 if the target supports swapcontext, 0 otherwise.\n+proc check_effective_target_swapcontext {} {\n+    return [check_function_available \"swapcontext\"]\n+}\n+\n # Return 1 if compilation with -pthread is error-free for trivial\n # code, 0 otherwise.\n "}]}