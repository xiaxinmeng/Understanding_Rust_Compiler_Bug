{"sha": "7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExY2U2MzI3OGM0ZDI2Y2NmYjBkYjM0NTk1NDVhYTZkMjRmMTZmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-08-29T12:21:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-08-29T12:21:28Z"}, "message": "sreal.h (normalize, [...]): Add new_sig/new_exp parameters.\n\n\n\t* sreal.h (normalize, normalize_up, normalize_down): Add new_sig/new_exp\n\tparameters.\n\t(sreal constructor): Update.\n\t* sreal.c (sreal:operator+, sreal:operator-, sreal:operator*,\n\tsreal:operator/): Update.\n\nFrom-SVN: r263952", "tree": {"sha": "8ac79114f61ecfd6d551f470a979eee3750f4e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ac79114f61ecfd6d551f470a979eee3750f4e23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/comments", "author": null, "committer": null, "parents": [{"sha": "9ed6dbeeb285a010d4ab1e437cf4e2f7136dcc17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed6dbeeb285a010d4ab1e437cf4e2f7136dcc17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed6dbeeb285a010d4ab1e437cf4e2f7136dcc17"}], "stats": {"total": 111, "additions": 67, "deletions": 44}, "files": [{"sha": "7c5946a3151c516d89d9df164b110fb0f6d5e516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "patch": "@@ -1,3 +1,11 @@\n+2018-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* sreal.h (normalize, normalize_up, normalize_down): Add new_sig/new_exp\n+\tparameters.\n+\t(sreal constructor): Update.\n+\t* sreal.c (sreal:operator+, sreal:operator-, sreal:operator*,\n+\tsreal:operator/): Update.\n+\n 2018-08-29  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (switch_conversion::expand):"}, {"sha": "925b06501e1db9e2d9c09e5916fb1194cbf45d0e", "filename": "gcc/sreal.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "patch": "@@ -138,18 +138,23 @@ sreal\n sreal::operator+ (const sreal &other) const\n {\n   int dexp;\n-  sreal tmp, r;\n+  sreal tmp;\n+  int64_t r_sig, r_exp;\n \n   const sreal *a_p = this, *b_p = &other, *bb;\n \n   if (a_p->m_exp < b_p->m_exp)\n     std::swap (a_p, b_p);\n \n   dexp = a_p->m_exp - b_p->m_exp;\n-  r.m_exp = a_p->m_exp;\n+  r_exp = a_p->m_exp;\n   if (dexp > SREAL_BITS)\n     {\n-      r.m_sig = a_p->m_sig;\n+      r_sig = a_p->m_sig;\n+\n+      sreal r;\n+      r.m_sig = r_sig;\n+      r.m_exp = r_exp;\n       return r;\n     }\n \n@@ -162,8 +167,8 @@ sreal::operator+ (const sreal &other) const\n       bb = &tmp;\n     }\n \n-  r.m_sig = a_p->m_sig + bb->m_sig;\n-  r.normalize ();\n+  r_sig = a_p->m_sig + bb->m_sig;\n+  sreal r (r_sig, r_exp);\n   return r;\n }\n \n@@ -174,7 +179,8 @@ sreal\n sreal::operator- (const sreal &other) const\n {\n   int dexp;\n-  sreal tmp, r;\n+  sreal tmp;\n+  int64_t r_sig, r_exp;\n   const sreal *bb;\n   const sreal *a_p = this, *b_p = &other;\n \n@@ -186,10 +192,14 @@ sreal::operator- (const sreal &other) const\n     }\n \n   dexp = a_p->m_exp - b_p->m_exp;\n-  r.m_exp = a_p->m_exp;\n+  r_exp = a_p->m_exp;\n   if (dexp > SREAL_BITS)\n     {\n-      r.m_sig = sign * a_p->m_sig;\n+      r_sig = sign * a_p->m_sig;\n+\n+      sreal r;\n+      r.m_sig = r_sig;\n+      r.m_exp = r_exp;\n       return r;\n     }\n   if (dexp == 0)\n@@ -201,8 +211,8 @@ sreal::operator- (const sreal &other) const\n       bb = &tmp;\n     }\n \n-  r.m_sig = sign * (a_p->m_sig - bb->m_sig);\n-  r.normalize ();\n+  r_sig = sign * ((int64_t) a_p->m_sig - bb->m_sig);\n+  sreal r (r_sig, r_exp);\n   return r;\n }\n \n@@ -212,17 +222,14 @@ sreal\n sreal::operator* (const sreal &other) const\n {\n   sreal r;\n-  if (absu_hwi (m_sig) < SREAL_MIN_SIG || absu_hwi (other.m_sig) < SREAL_MIN_SIG)\n+  if (absu_hwi (m_sig) < SREAL_MIN_SIG\n+      || absu_hwi (other.m_sig) < SREAL_MIN_SIG)\n     {\n       r.m_sig = 0;\n       r.m_exp = -SREAL_MAX_EXP;\n     }\n   else\n-    {\n-      r.m_sig = m_sig * other.m_sig;\n-      r.m_exp = m_exp + other.m_exp;\n-      r.normalize ();\n-    }\n+    r.normalize (m_sig * (int64_t) other.m_sig, m_exp + other.m_exp);\n \n   return r;\n }\n@@ -233,11 +240,9 @@ sreal\n sreal::operator/ (const sreal &other) const\n {\n   gcc_checking_assert (other.m_sig != 0);\n-  sreal r;\n-  r.m_sig\n-    = SREAL_SIGN (m_sig) * (SREAL_ABS (m_sig) << SREAL_PART_BITS) / other.m_sig;\n-  r.m_exp = m_exp - other.m_exp - SREAL_PART_BITS;\n-  r.normalize ();\n+  sreal r (SREAL_SIGN (m_sig)\n+\t   * ((int64_t)SREAL_ABS (m_sig) << SREAL_PART_BITS) / other.m_sig,\n+\t   m_exp - other.m_exp - SREAL_PART_BITS);\n   return r;\n }\n "}, {"sha": "6f841cf3a5842179830da7f0f8d2d17f2c454126", "filename": "gcc/sreal.h", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1ce63278c4d26ccfb0db3459545aa6d24f16fc/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=7a1ce63278c4d26ccfb0db3459545aa6d24f16fc", "patch": "@@ -45,9 +45,9 @@ class sreal\n   sreal () : m_sig (-1), m_exp (-1) {}\n \n   /* Construct a sreal.  */\n-  sreal (int64_t sig, int exp = 0) : m_sig (sig), m_exp (exp)\n+  sreal (int64_t sig, int exp = 0)\n   {\n-    normalize ();\n+    normalize (sig, exp);\n   }\n \n   void dump (FILE *) const;\n@@ -130,9 +130,9 @@ class sreal\n   }\n \n private:\n-  inline void normalize ();\n-  inline void normalize_up ();\n-  inline void normalize_down ();\n+  inline void normalize (int64_t new_sig, signed int new_exp);\n+  inline void normalize_up (int64_t new_sig, signed int new_exp);\n+  inline void normalize_down (int64_t new_sig, signed int new_exp);\n   void shift_right (int amount);\n   static sreal signedless_plus (const sreal &a, const sreal &b, bool negative);\n   static sreal signedless_minus (const sreal &a, const sreal &b, bool negative);\n@@ -199,23 +199,24 @@ inline sreal operator>> (const sreal &a, int exp)\n    Make this separate method so inliner can handle hot path better.  */\n \n inline void\n-sreal::normalize_up ()\n+sreal::normalize_up (int64_t new_sig, signed int new_exp)\n {\n-  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+  unsigned HOST_WIDE_INT sig = absu_hwi (new_sig);\n   int shift = SREAL_PART_BITS - 2 - floor_log2 (sig);\n \n   gcc_checking_assert (shift > 0);\n   sig <<= shift;\n-  m_exp -= shift;\n+  new_exp -= shift;\n   gcc_checking_assert (sig <= SREAL_MAX_SIG && sig >= SREAL_MIN_SIG);\n \n   /* Check underflow.  */\n-  if (m_exp < -SREAL_MAX_EXP)\n+  if (new_exp < -SREAL_MAX_EXP)\n     {\n-      m_exp = -SREAL_MAX_EXP;\n+      new_exp = -SREAL_MAX_EXP;\n       sig = 0;\n     }\n-  if (SREAL_SIGN (m_sig) == -1)\n+  m_exp = new_exp;\n+  if (SREAL_SIGN (new_sig) == -1)\n     m_sig = -sig;\n   else\n     m_sig = sig;\n@@ -226,33 +227,34 @@ sreal::normalize_up ()\n    Make this separate method so inliner can handle hot path better.  */\n \n inline void\n-sreal::normalize_down ()\n+sreal::normalize_down (int64_t new_sig, signed int new_exp)\n {\n   int last_bit;\n-  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+  unsigned HOST_WIDE_INT sig = absu_hwi (new_sig);\n   int shift = floor_log2 (sig) - SREAL_PART_BITS + 2;\n \n   gcc_checking_assert (shift > 0);\n   last_bit = (sig >> (shift-1)) & 1;\n   sig >>= shift;\n-  m_exp += shift;\n+  new_exp += shift;\n   gcc_checking_assert (sig <= SREAL_MAX_SIG && sig >= SREAL_MIN_SIG);\n \n   /* Round the number.  */\n   sig += last_bit;\n   if (sig > SREAL_MAX_SIG)\n     {\n       sig >>= 1;\n-      m_exp++;\n+      new_exp++;\n     }\n \n   /* Check overflow.  */\n-  if (m_exp > SREAL_MAX_EXP)\n+  if (new_exp > SREAL_MAX_EXP)\n     {\n-      m_exp = SREAL_MAX_EXP;\n+      new_exp = SREAL_MAX_EXP;\n       sig = SREAL_MAX_SIG;\n     }\n-  if (SREAL_SIGN (m_sig) == -1)\n+  m_exp = new_exp;\n+  if (SREAL_SIGN (new_sig) == -1)\n     m_sig = -sig;\n   else\n     m_sig = sig;\n@@ -261,16 +263,24 @@ sreal::normalize_down ()\n /* Normalize *this; the hot path.  */\n \n inline void\n-sreal::normalize ()\n+sreal::normalize (int64_t new_sig, signed int new_exp)\n {\n-  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+  unsigned HOST_WIDE_INT sig = absu_hwi (new_sig);\n \n   if (sig == 0)\n-    m_exp = -SREAL_MAX_EXP;\n+    {\n+      m_sig = 0;\n+      m_exp = -SREAL_MAX_EXP;\n+    }\n   else if (sig > SREAL_MAX_SIG)\n-    normalize_down ();\n+    normalize_down (new_sig, new_exp);\n   else if (sig < SREAL_MIN_SIG)\n-    normalize_up ();\n+    normalize_up (new_sig, new_exp);\n+  else\n+    {\n+      m_sig = new_sig;\n+      m_exp = new_exp;\n+    }\n }\n \n #endif"}]}