{"sha": "b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5ZTJhNDkwM2ZhMWFjOGMzYjM0MzM4YTYyYjFlM2ZiMTVjMzc5Mg==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2015-11-23T09:15:13Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-11-23T09:15:13Z"}, "message": "libsanitizer merge from upstream r253555, compiler part.\n\ngcc/\n\n\t* opts.c (finish_options): Allow -fsanitize-recover=address for\n\tuserspace sanitization.\n\t* asan.c (asan_expand_check_ifn): Redefine recover_p.\n\t* doc/invoke.texi (fsanitize-recover): Update documentation.\n\ngcc/testsuite/\n\n\t* c-c++-common/asan/halt_on_error-1.c: New test.\n\t* c-c++-common/asan/halt_on_error-2.c: Likewise.\n\nFrom-SVN: r230741", "tree": {"sha": "f7c62c92ce48c00bad27d1fa88ecde0728255afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c62c92ce48c00bad27d1fa88ecde0728255afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/comments", "author": null, "committer": null, "parents": [{"sha": "16310b3fff2282f0d7e332c8fdb9d69952c920b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16310b3fff2282f0d7e332c8fdb9d69952c920b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16310b3fff2282f0d7e332c8fdb9d69952c920b4"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "16bb1aa32211c9e1cb40d55b41a8d57aa1ec602b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -1,3 +1,10 @@\n+2015-11-23  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* opts.c (finish_options): Allow -fsanitize-recover=address for\n+\tuserspace sanitization.\n+\t* asan.c (asan_expand_check_ifn): Redefine recover_p.\n+\t* doc/invoke.texi (fsanitize-recover): Update documentation.\n+\n 2015-11-23  Tom de Vries  <tom@codesourcery.com>\n \n \t* omp-low.c (build_receiver_ref): Mark by_ref mem_ref as non-trapping."}, {"sha": "6d9a8030fa2ff6fd3360233287900c97571dafbe", "filename": "gcc/asan.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -2533,9 +2533,11 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n {\n   gimple *g = gsi_stmt (*iter);\n   location_t loc = gimple_location (g);\n-\n-  bool recover_p\n-    = (flag_sanitize & flag_sanitize_recover & SANITIZE_KERNEL_ADDRESS) != 0;\n+  bool recover_p;\n+  if (flag_sanitize & SANITIZE_USER_ADDRESS)\n+    recover_p = (flag_sanitize_recover & SANITIZE_USER_ADDRESS) != 0;\n+  else\n+    recover_p = (flag_sanitize_recover & SANITIZE_KERNEL_ADDRESS) != 0;\n \n   HOST_WIDE_INT flags = tree_to_shwi (gimple_call_arg (g, 0));\n   gcc_assert (flags < ASAN_CHECK_LAST);"}, {"sha": "53f1fe2a9a60384a89d74b165f6742c3cecaa127", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -6111,8 +6111,10 @@ and program then exits with a non-zero exit code.\n \n Currently this feature only works for @option{-fsanitize=undefined} (and its suboptions\n except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n-@option{-fsanitize=float-cast-overflow}, @option{-fsanitize=float-divide-by-zero} and\n-@option{-fsanitize=kernel-address}.  For these sanitizers error recovery is turned on by default.\n+@option{-fsanitize=float-cast-overflow}, @option{-fsanitize=float-divide-by-zero},\n+@option{-fsanitize=kernel-address} and @option{-fsanitize=address}.\n+For these sanitizers error recovery is turned on by default, except @option{-fsanitize=address},\n+for which this feature is experimental.\n @option{-fsanitize-recover=all} and @option{-fno-sanitize-recover=all} is also\n accepted, the former enables recovery for all sanitizers that support it,\n the latter disables recovery for all sanitizers that support it."}, {"sha": "874c84fec5b07b3c09515a9e33b10226aeeb2b48", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -941,10 +941,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t      \"-fsanitize=address and -fsanitize=kernel-address \"\n \t      \"are incompatible with -fsanitize=thread\");\n \n-  /* Error recovery is not allowed for ASan and TSan.  */\n-\n-  if (opts->x_flag_sanitize_recover & SANITIZE_USER_ADDRESS)\n-    error_at (loc, \"-fsanitize-recover=address is not supported\");\n+  /* Error recovery is not allowed for LSan and TSan.  */\n \n   if (opts->x_flag_sanitize_recover & SANITIZE_THREAD)\n     error_at (loc, \"-fsanitize-recover=thread is not supported\");"}, {"sha": "8781283f6060ee742f1bf698ad71d8de533ce97c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -1,3 +1,8 @@\n+2015-11-23  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* c-c++-common/asan/halt_on_error-1.c: New test.\n+\t* c-c++-common/asan/halt_on_error-2.c: Likewise.\n+\n 2015-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68482"}, {"sha": "b015e9684bfcee63d64caec35df2913c24af108e", "filename": "gcc/testsuite/c-c++-common/asan/halt_on_error-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-1.c?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -0,0 +1,23 @@\n+/* Test recovery mode.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize-recover=address\" } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"halt_on_error=false\" } */\n+\n+#include <string.h>\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  char x[10];\n+  memset(x, 0, ten + 1);\n+  asm volatile (\"\" : : : \"memory\");\n+  volatile int res = x[ten];\n+  x[ten] = res + 3;\n+  res = x[ten];\n+  return 0;\n+}\n+\n+/* { dg-output \"WRITE of size 11 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"\\[^\\n\\r]*WRITE of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"\\[^\\n\\r]*READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */"}, {"sha": "4527889af1491b4b037654e42a53e9338849c8e2", "filename": "gcc/testsuite/c-c++-common/asan/halt_on_error-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fhalt_on_error-2.c?ref=b59e2a4903fa1ac8c3b34338a62b1e3fb15c3792", "patch": "@@ -0,0 +1,24 @@\n+/* Test recovery mode.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize-recover=address\" } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"halt_on_error=true\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <string.h>\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  char x[10];\n+  memset(x, 0, ten + 1);\n+  asm volatile (\"\" : : : \"memory\");\n+  volatile int res = x[ten];\n+  x[ten] = res + 3;\n+  res = x[ten];\n+  return 0;\n+}\n+\n+/* { dg-output \"WRITE of size 11 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-prune-output \"\\[^\\n\\r]*READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-prune-output \"\\[^\\n\\r]*WRITE of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-prune-output \"\\[^\\n\\r]*READ of size 1 at 0x\\[0-9a-f\\]+ thread T0\\[^\\n\\r]*(\\n|\\r\\n|\\r).*\" } */"}]}