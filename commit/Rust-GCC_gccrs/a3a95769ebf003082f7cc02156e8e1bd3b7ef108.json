{"sha": "a3a95769ebf003082f7cc02156e8e1bd3b7ef108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhOTU3NjllYmYwMDMwODJmN2NjMDIxNTZlOGUxYmQzYjdlZjEwOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:30:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:30:34Z"}, "message": "a-except.adb (Exception_Identity): return Null_Id for null occurrence instead of raising CE (AI-241) Add warnings...\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except.adb (Exception_Identity): return Null_Id for null occurrence\n\tinstead of raising CE (AI-241)\n\tAdd warnings off to allow categorization violations for AI-362\n\nFrom-SVN: r101021", "tree": {"sha": "a1befbb3e243601fba4c17fa63ff9262720f9213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1befbb3e243601fba4c17fa63ff9262720f9213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3a95769ebf003082f7cc02156e8e1bd3b7ef108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a95769ebf003082f7cc02156e8e1bd3b7ef108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a95769ebf003082f7cc02156e8e1bd3b7ef108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a95769ebf003082f7cc02156e8e1bd3b7ef108/comments", "author": null, "committer": null, "parents": [{"sha": "99b97b2e96674bbb43bcd9509009fd2e2663c287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b97b2e96674bbb43bcd9509009fd2e2663c287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b97b2e96674bbb43bcd9509009fd2e2663c287"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "9c8256e74ebbfb1390923d5bfbb350da0f2e0fa3", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a95769ebf003082f7cc02156e8e1bd3b7ef108/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a95769ebf003082f7cc02156e8e1bd3b7ef108/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=a3a95769ebf003082f7cc02156e8e1bd3b7ef108", "patch": "@@ -664,15 +664,18 @@ package body Ada.Exceptions is\n    ------------------------\n \n    function Exception_Identity\n-     (X    : Exception_Occurrence)\n-      return Exception_Id\n+     (X : Exception_Occurrence) return Exception_Id\n    is\n    begin\n-      if X.Id = Null_Id then\n-         raise Constraint_Error;\n-      else\n-         return X.Id;\n-      end if;\n+      --  Note that the following test used to be here for the original\n+      --  Ada 95 semantics, but these were modified by AI-241 to require\n+      --  returning Null_Id instead of raising Constraint_Error.\n+\n+      --  if X.Id = Null_Id then\n+      --     raise Constraint_Error;\n+      --  end if;\n+\n+      return X.Id;\n    end Exception_Identity;\n \n    ---------------------------\n@@ -1259,12 +1262,8 @@ package body Ada.Exceptions is\n       Save_Occurrence_No_Private (Target, Source);\n    end Save_Occurrence;\n \n-   function Save_Occurrence\n-     (Source : Exception_Occurrence)\n-      return   EOA\n-   is\n+   function Save_Occurrence (Source : Exception_Occurrence) return EOA is\n       Target : EOA := new Exception_Occurrence;\n-\n    begin\n       Save_Occurrence (Target.all, Source);\n       return Target;\n@@ -1394,6 +1393,11 @@ package body Ada.Exceptions is\n    end ZZZ;\n \n begin\n+   pragma Warnings (Off);\n+   --  Allow calls to non-static subprograms in Ada 2005 mode where this\n+   --  package will be implicitly categorized as Preelaborate. See AI-362 for\n+   --  details. It is safe in the context of the run-time to violate the rules!\n+\n    --  Allocate the Non-Tasking Machine_State\n \n    Set_Machine_State_Addr_NT (System.Address (Allocate_Machine_State));\n@@ -1403,4 +1407,6 @@ begin\n \n    AAA;\n    ZZZ;\n+\n+   pragma Warnings (On);\n end Ada.Exceptions;"}]}