{"sha": "da0dc81873164e5d105e00b55deb9b4f961d26a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwZGM4MTg3MzE2NGU1ZDEwNWUwMGI1NWRlYjliNGY5NjFkMjZhNA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-11-06T19:47:21Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-11-06T19:47:21Z"}, "message": "fr30.h (FUNCTION_VALUE_REGNO_P, [...]): Remove macros.\n\n\t* config/fr30/fr30.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n\tLIBCALL_VALUE): Remove macros.\n\t* config/fr30/fr30.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(fr30_function_value_regno_p, fr30_function_value,\n\tfr30_libcall_value): New functions.\n\nFrom-SVN: r166407", "tree": {"sha": "2c71bfa2d8abb961d9a7ead9c98f655268c540e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c71bfa2d8abb961d9a7ead9c98f655268c540e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0dc81873164e5d105e00b55deb9b4f961d26a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0dc81873164e5d105e00b55deb9b4f961d26a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0dc81873164e5d105e00b55deb9b4f961d26a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0dc81873164e5d105e00b55deb9b4f961d26a4/comments", "author": null, "committer": null, "parents": [{"sha": "134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134c192bb33f87fc0b261b32d4e18a497c1e1b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134c192bb33f87fc0b261b32d4e18a497c1e1b1c"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "c214862ce1cd24fd8286e6b7341d3342a28b2371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da0dc81873164e5d105e00b55deb9b4f961d26a4", "patch": "@@ -1,3 +1,12 @@\n+2010-11-06  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/fr30/fr30.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n+\tLIBCALL_VALUE): Remove macros.\n+\t* config/fr30/fr30.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(fr30_function_value_regno_p, fr30_function_value,\n+\tfr30_libcall_value): New functions.\n+\n 2010-11-06  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR middle-end/46314"}, {"sha": "6aad8504c7126f2a1963234b8db3aaae26c63e39", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=da0dc81873164e5d105e00b55deb9b4f961d26a4", "patch": "@@ -124,6 +124,9 @@ static rtx fr30_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static void fr30_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static bool fr30_frame_pointer_required (void);\n+static rtx fr30_function_value (const_tree, const_tree, bool);\n+static rtx fr30_libcall_value (enum machine_mode, const_rtx);\n+static bool fr30_function_value_regno_p (const unsigned int);\n static bool fr30_can_eliminate (const int, const int);\n static void fr30_asm_trampoline_template (FILE *);\n static void fr30_trampoline_init (rtx, tree, rtx);\n@@ -172,6 +175,13 @@ static const struct default_options fr30_option_optimization_table[] =\n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE fr30_function_arg_advance\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE fr30_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE fr30_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P fr30_function_value_regno_p\n+\n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS fr30_setup_incoming_varargs\n #undef  TARGET_MUST_PASS_IN_STACK\n@@ -703,6 +713,34 @@ fr30_print_operand (FILE *file, rtx x, int code)\n }\n \n /*}}}*/\n+\n+/* Implements TARGET_FUNCTION_VALUE.  */\n+\n+static rtx\n+fr30_function_value (const_tree valtype,\n+\t\t     const_tree fntype_or_decli ATTRIBUTE_UNUSED,\n+\t\t     bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (TYPE_MODE (valtype), RETURN_VALUE_REGNUM);\n+}\n+\n+/* Implements TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+fr30_libcall_value (enum machine_mode mode,\n+\t\t    const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, RETURN_VALUE_REGNUM);\n+}\n+\n+/* Implements TARGET_FUNCTION_VALUE_REGNO_P.  */\n+\n+static bool\n+fr30_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == RETURN_VALUE_REGNUM);\n+}\n+\n /*{{{  Function arguments */ \n \n /* Return true if we should pass an argument on the stack rather than"}, {"sha": "779887722fa424e40d2d260b2ae27880c465f18b", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0dc81873164e5d105e00b55deb9b4f961d26a4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=da0dc81873164e5d105e00b55deb9b4f961d26a4", "patch": "@@ -587,31 +587,6 @@ enum reg_class\n #define FUNCTION_ARG_REGNO_P(REGNO) \\\n   ((REGNO) >= FIRST_ARG_REGNUM && ((REGNO) < FIRST_ARG_REGNUM + FR30_NUM_ARG_REGS))\n \n-/*}}}*/ \f\n-/*{{{  How Scalar Function Values are Returned.  */ \n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-     gen_rtx_REG (TYPE_MODE (VALTYPE), RETURN_VALUE_REGNUM)\n-\n-/* A C expression to create an RTX representing the place where a library\n-   function returns a value of mode MODE.  If the precise function being called\n-   is known, FUNC is a tree node (`FUNCTION_DECL') for it; otherwise, FUNC is a\n-   null pointer.  This makes it possible to use a different value-returning\n-   convention for specific functions when all their calls are known.\n-\n-   Note that \"library function\" in this context means a compiler support\n-   routine, used to perform arithmetic, whose name is known specially by the\n-   compiler and was not mentioned in the C code being compiled.\n-\n-   The definition of `LIBRARY_VALUE' need not be concerned aggregate data\n-   types, because none of the library functions returns such types.  */\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, RETURN_VALUE_REGNUM)\n-\n-/* A C expression that is nonzero if REGNO is the number of a hard register in\n-   which the values of called function may come back.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(REGNO) ((REGNO) == RETURN_VALUE_REGNUM)\n-\n /*}}}*/ \f\n /*{{{  How Large Values are Returned.  */ \n "}]}