{"sha": "b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlYzRkZTc3Nzg3MGUyZDRmZjJhNWRlNjA0ZWFmZDFiZjBlNTBkZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-08T15:17:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-08T15:17:20Z"}, "message": "Another fix for single-element permutes (PR 84265)\n\nPR83753 was about a case in which we ended up trying to \"vectorise\"\na group of loads ore stores using single-element vectors.  The problem\nwas that we were classifying the load or store as VMAT_CONTIGUOUS_PERMUTE\nrather than VMAT_CONTIGUOUS, even though it doesn't make sense to permute\na single-element vector.\n\nIn that PR it was enough to change get_group_load_store_type,\nbecause vectorisation ended up being unprofitable and so we didn't\ntake things further.  But when vectorisation is profitable, the same\nfix is needed in vectorizable_load and vectorizable_store.\n\n2018-02-08  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/84265\n\t* tree-vect-stmts.c (vectorizable_store): Don't treat\n\tVMAT_CONTIGUOUS accesses as grouped.\n\t(vectorizable_load): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/84265\n\t* gcc.dg/vect/pr84265.c: New test.\n\nFrom-SVN: r257492", "tree": {"sha": "7d1c4f72e10b0597eae8549d8a317239cd7adf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1c4f72e10b0597eae8549d8a317239cd7adf16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/comments", "author": null, "committer": null, "parents": [{"sha": "fff2290073cc2d57dcade125227b74cd27c48066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff2290073cc2d57dcade125227b74cd27c48066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff2290073cc2d57dcade125227b74cd27c48066"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "d9c45c9e794927841357b25bd9526478bd4e567b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "patch": "@@ -1,3 +1,10 @@\n+2018-02-08  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84265\n+\t* tree-vect-stmts.c (vectorizable_store): Don't treat\n+\tVMAT_CONTIGUOUS accesses as grouped.\n+\t(vectorizable_load): Likewise.\n+\n 2018-02-08  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/81635"}, {"sha": "e989c94a5e4f8ec5df44d9962e2c85c11fa6769d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "patch": "@@ -1,3 +1,8 @@\n+2018-02-08  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84265\n+\t* gcc.dg/vect/pr84265.c: New test.\n+\n 2018-02-08  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/81635"}, {"sha": "59984aead053727c509e4a1dfa342f4c8d895209", "filename": "gcc/testsuite/gcc.dg/vect/pr84265.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84265.c?ref=b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+\n+struct a\n+{\n+  unsigned long b;\n+  unsigned long c;\n+  int d;\n+  int *e;\n+  char f;\n+};\n+\n+struct\n+{\n+  int g;\n+  struct a h[];\n+} i;\n+\n+int j, k;\n+void l ()\n+{\n+  for (; k; k++)\n+    j += (int) (i.h[k].c - i.h[k].b);\n+}"}, {"sha": "6066a52c23e2dd95ff86b7de110aeee785f7e70d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ec4de777870e2d4ff2a5de604eafd1bf0e50df/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b5ec4de777870e2d4ff2a5de604eafd1bf0e50df", "patch": "@@ -6214,7 +6214,8 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n     }\n \n   grouped_store = (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n-\t\t   && memory_access_type != VMAT_GATHER_SCATTER);\n+\t\t   && memory_access_type != VMAT_GATHER_SCATTER\n+\t\t   && (slp || memory_access_type != VMAT_CONTIGUOUS));\n   if (grouped_store)\n     {\n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n@@ -7708,7 +7709,8 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       return true;\n     }\n \n-  if (memory_access_type == VMAT_GATHER_SCATTER)\n+  if (memory_access_type == VMAT_GATHER_SCATTER\n+      || (!slp && memory_access_type == VMAT_CONTIGUOUS))\n     grouped_load = false;\n \n   if (grouped_load)"}]}