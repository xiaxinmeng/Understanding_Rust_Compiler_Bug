{"sha": "4c198ddff83744f8b7bf24306ed1e6b889c44044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxOThkZGZmODM3NDRmOGI3YmYyNDMwNmVkMWU2Yjg4OWM0NDA0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-02T10:09:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-02T11:34:00Z"}, "message": "tree-optimization/97558 - compute vectype for SLP nested cycles\n\nThis makes sure to compute the vector type for invariant SLP children\nof nested cycles.\n\n2020-11-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97558\n\t* tree-vect-loop.c (vectorizable_reduction): For nested SLP\n\tcycles compute invariant operands vector type.\n\n\t* gcc.dg/vect/pr97558-2.c: New testcase.", "tree": {"sha": "fa6e8f77816996af9e9159083fec5e1f09d465c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa6e8f77816996af9e9159083fec5e1f09d465c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c198ddff83744f8b7bf24306ed1e6b889c44044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c198ddff83744f8b7bf24306ed1e6b889c44044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c198ddff83744f8b7bf24306ed1e6b889c44044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c198ddff83744f8b7bf24306ed1e6b889c44044/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a3327fe3d4e20a8fe863c2a3ad949864191f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a3327fe3d4e20a8fe863c2a3ad949864191f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a3327fe3d4e20a8fe863c2a3ad949864191f5d"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "8f0808686fbad0b5b5ec11471fd38f53ebd81bde", "filename": "gcc/testsuite/gcc.dg/vect/pr97558-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c198ddff83744f8b7bf24306ed1e6b889c44044/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c198ddff83744f8b7bf24306ed1e6b889c44044/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97558-2.c?ref=4c198ddff83744f8b7bf24306ed1e6b889c44044", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O3 -fno-tree-forwprop -fno-tree-scev-cprop\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 40\n+\n+int a[N];\n+int b[N];\n+\n+__attribute__ ((noinline)) int\n+foo (int n){\n+  int i,j;\n+  int sum,x,y;\n+\n+  if (n<=0)\n+    return 0;\n+\n+  for (i = 0; i < N/2; i++) {\n+    sum = 0;\n+    x = b[2*i];\n+    y = b[2*i+1];\n+    for (j = 0; j < n; j++) {\n+      sum += j;\n+    }\n+    a[2*i] = sum + x;\n+    a[2*i+1] = sum + y;\n+  }\n+}\n+\n+int main (void)\n+{\n+  int i,j;\n+  int sum;\n+\n+  check_vect ();\n+\n+  for (i=0; i<N; i++)\n+    b[i] = i;\n+ \n+  foo (N-1);\n+\n+    /* check results:  */\n+  for (i=0; i<N/2; i++)\n+    {\n+      sum = 0;\n+      for (j = 0; j < N-1; j++)\n+        sum += j;\n+      if (a[2*i] != sum + b[2*i] || a[2*i+1] != sum + b[2*i+1])\n+        abort();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "105ea61ddbe5f6607b235fd345051022d9d49506", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c198ddff83744f8b7bf24306ed1e6b889c44044/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c198ddff83744f8b7bf24306ed1e6b889c44044/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=4c198ddff83744f8b7bf24306ed1e6b889c44044", "patch": "@@ -6336,9 +6336,28 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_nested_cycle)\n     {\n       if (is_a <gphi *> (stmt_info->stmt))\n-\t/* Analysis for double-reduction is done on the outer\n-\t   loop PHI, nested cycles have no further restrictions.  */\n-\tSTMT_VINFO_TYPE (stmt_info) = cycle_phi_info_type;\n+\t{\n+\t  if (slp_node)\n+\t    {\n+\t      /* We eventually need to set a vector type on invariant\n+\t\t arguments.  */\n+\t      unsigned j;\n+\t      slp_tree child;\n+\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (slp_node), j, child)\n+\t\tif (!vect_maybe_update_slp_op_vectype\n+\t\t       (child, SLP_TREE_VECTYPE (slp_node)))\n+\t\t  {\n+\t\t    if (dump_enabled_p ())\n+\t\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t       \"incompatible vector types for \"\n+\t\t\t\t       \"invariants\\n\");\n+\t\t    return false;\n+\t\t  }\n+\t    }\n+\t  /* Analysis for double-reduction is done on the outer\n+\t     loop PHI, nested cycles have no further restrictions.  */\n+\t  STMT_VINFO_TYPE (stmt_info) = cycle_phi_info_type;\n+\t}\n       else\n \tSTMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n       return true;"}]}