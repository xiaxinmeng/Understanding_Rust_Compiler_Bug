{"sha": "f3f110d5d1a748bf3b8a71c30fb0e786140d82ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMTEwZDVkMWE3NDhiZjNiOGE3MWMzMGZiMGU3ODYxNDBkODJhZA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-12-03T13:50:40Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-12-03T13:50:40Z"}, "message": "natClassLoader.cc (_Jv_PrepareCompiledClass): Call _Jv_PushClass.\n\n2002-12-03  Andrew Haley  <aph@redhat.com>\n\n        * java/lang/natClassLoader.cc (_Jv_PrepareCompiledClass): Call\n\t_Jv_PushClass.\n        (_Jv_InitNewClassFields): Set protectionDomain and chain = NULL.\n        (_Jv_PopClass): New.\n        (_Jv_PushClass): New.\n        * java/lang/natClass.cc (forName (jstring)): Use a StackTrace to\n        discover the ClassLoader of our caller.\n        (_Jv_CheckArrayStore): Don't check that a class is assignment\n        compatible with Object.\n        * java/lang/natVMTHrowable.cc: Delete.\n        * gnu/gcj/runtime/StackTrace.java: New, partly copied from\n\tjava.lang.VMThrowable.\n        (StackTrace(), StackTrace(int)): New constructors.\n        (classAt, methodAt, update, methodAtAddress): New methods.\n        (map): New field.\n\t* java/lang/VMThrowable.java: Use StackTrace instead of\n\tnatVMTHrowable.\n\t* java/lang/Class.h (getClassLoaderInternal): New.\n        (class Class): Be friendly with _Jv_PopClass and _Jv_PushClass.\n        Be friendly with gnu::gcj::runtime::StackTrace.\n        (Object.chain): New field.\n        * include/java-interp.h (class _Jv_InterpMethod): Be friendly with\n        gnu::gcj::runtime::StackTrace.\n        * prims.cc (_Jv_NewObjectArray): Use getClassLoaderInternal()\n        instead of getClassLoader().\n        * verify.cc (class _Jv_BytecodeVerifier): Likewise.\n        java::lang::VMThrowable.\n        * Makefile.am (core_java_source_files): Add MethodRef.java,\n\tStackTrace.java.\n        (nat_source_files): Remove natVMThrowable.cc; add natStackTrace.cc.\n        * Makefile.in: Rebuild.\n\nFrom-SVN: r59770", "tree": {"sha": "fa95fc744c64944f2888c39980f53def50f34cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa95fc744c64944f2888c39980f53def50f34cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f110d5d1a748bf3b8a71c30fb0e786140d82ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f110d5d1a748bf3b8a71c30fb0e786140d82ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f110d5d1a748bf3b8a71c30fb0e786140d82ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f110d5d1a748bf3b8a71c30fb0e786140d82ad/comments", "author": null, "committer": null, "parents": [{"sha": "421f9e6091ca35352c825e7ec69439b3651da021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421f9e6091ca35352c825e7ec69439b3651da021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421f9e6091ca35352c825e7ec69439b3651da021"}], "stats": {"total": 97, "additions": 0, "deletions": 97}, "files": [{"sha": "c1b030d42884815239f247110c55ec266c39cac1", "filename": "libjava/java/lang/natVMThrowable.cc", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatVMThrowable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatVMThrowable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMThrowable.cc?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -1,97 +0,0 @@\n-// natVMThrowable.cc - native helper methods for Throwable\n-\n-/* Copyright (C) 2000, 2002  Free Software Foundation, Inc\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/**\n- * @author Andrew Haley <aph@cygnus.com>\n- * @author Mark Wielaard <mark@klomp.org>\n- *\n- * Native helper methods for VM specific Throwable support.\n- */\n-\n-#include <config.h>\n-\n-#include <string.h>\n-\n-#include <jvm.h>\n-#include <gcj/cni.h>\n-#include <gnu/gcj/RawData.h>\n-#include <java/lang/Object.h>\n-#include <java-threads.h>\n-#include <java/lang/Throwable.h>\n-#include <java/lang/VMThrowable.h>\n-#include <java/lang/Thread.h>\n-#include <java-interp.h>\n-\n-#include <sys/types.h>\n-\n-#include <stdlib.h>\n-\n-#include <unistd.h>\n-\n-#ifdef HAVE_EXECINFO_H\n-#include <execinfo.h>\n-#endif\n-\n-/* FIXME: size of the stack trace is limited to 128 elements.  It's\n-   undoubtedly sensible to limit the stack trace, but 128 is rather\n-   arbitrary.  It may be better to configure this.  */\n-\n-java::lang::VMThrowable *\n-java::lang::VMThrowable::fillInStackTrace (java::lang::Throwable*)\n-{\n-  if (! trace_enabled)\n-    return NULL;\n-#if defined (HAVE_BACKTRACE)\n-  VMThrowable* state = new VMThrowable;\n-  void *p[128];\n-  \n-  // We subtract 1 from the number of elements because we don't want\n-  // to include the calls to fillInStackTrace in the trace.\n-  int n = backtrace (p, 128) - 1;  \n-\n-  _Jv_frame_info *addrs;\n-  if (n > 0)\n-    {\n-#ifdef INTERPRETER\n-      extern void _Jv_StartOfInterpreter (void);\n-      extern void _Jv_EndOfInterpreter (void);\n-\n-      java::lang::Thread *thread = java::lang::Thread::currentThread();\n-      _Jv_MethodChain *interp_frame\n-\t= (thread ? reinterpret_cast<_Jv_MethodChain *> (thread->interp_frame)\n-\t   : NULL);\n-#endif // INTERPRETER\n-\n-      state->length = n;\n-      int len = n;\n-      addrs = (_Jv_frame_info *) _Jv_Malloc (n * sizeof (_Jv_frame_info));\n-      for (n = 0; n < len; n++)\n-\t{\n-\t  addrs[n].addr = p[n];\n-#ifdef INTERPRETER\n-\t  if (p[n] >= &_Jv_StartOfInterpreter && p[n] <= &_Jv_EndOfInterpreter)\n-\t    {\n-\t      addrs[n].interp = (void *) interp_frame->self;\n-\t      interp_frame = interp_frame->next;\n-\t    }\n-\t  else\n-\t    addrs[n].interp = 0;\n-#endif // INTERPRETER\n-\t}\n-    }\n-  else\n-    addrs = NULL;\n-\n-  state->stackTraceAddrs = reinterpret_cast<gnu::gcj::RawData *> (addrs);\n-\n-  return state;\n-#endif\n-  return NULL;\n-}"}]}