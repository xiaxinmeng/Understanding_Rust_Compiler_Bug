{"sha": "db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1ZGM2M2Q2MjgzYTljNjZhYWIzZjQ5NTMwZTRiM2M1NDA3ZDVjZg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-01-09T15:12:36Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-01-09T15:12:36Z"}, "message": "tree-vectorizer.c (vect_analyze_offset_expr): Use expr_invariant_in_loop_p.\n\n2005-01-09  Ira Rosen  <irar@il.ibm.com>\n\n        * tree-vectorizer.c (vect_analyze_offset_expr): Use\n        expr_invariant_in_loop_p.\n        Initialize outputs first thing in the function.\n        (vect_update_ivs_after_vectorizer): Call initial_condition_in_loop_num.\n        (vect_is_simple_iv_evolution): Call initial_condition_in_loop_num.\n        (vect_analyze_pointer_ref_access): Check that the initial condition of\n        the access function is loop invariant.\n\nFrom-SVN: r93113", "tree": {"sha": "0127fa6478110a0cdebf6c50f7371ee3801f97a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0127fa6478110a0cdebf6c50f7371ee3801f97a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b927d3a45120ee708b6579bd482bb75d627ebd9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b927d3a45120ee708b6579bd482bb75d627ebd9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b927d3a45120ee708b6579bd482bb75d627ebd9d"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "3d39d220579cdf5fdbd8dcb4805bced112ed3ebc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "patch": "@@ -1,3 +1,13 @@\n+2005-01-09  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vectorizer.c (vect_analyze_offset_expr): Use \n+\texpr_invariant_in_loop_p.\n+\tInitialize outputs first thing in the function.\n+\t(vect_update_ivs_after_vectorizer): Call initial_condition_in_loop_num.\n+\t(vect_is_simple_iv_evolution): Call initial_condition_in_loop_num.\n+\t(vect_analyze_pointer_ref_access): Check that the initial condition of \n+\tthe access function is loop invariant.\n+\n 2005-01-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (bdesc_2arg): Update names for mmx_ prefixes."}, {"sha": "62767edd3f9f3324ed37ef53e6f816f9a6ec3004", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5dc63d6283a9c66aab3f49530e4b3c5407d5cf/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=db5dc63d6283a9c66aab3f49530e4b3c5407d5cf", "patch": "@@ -1415,17 +1415,17 @@ vect_analyze_offset_expr (tree expr,\n   tree left_step = size_zero_node;\n   tree right_step = size_zero_node;\n   enum tree_code code;\n-  tree init, evolution, def_stmt;\n+  tree init, evolution;\n+\n+  *step = NULL_TREE;\n+  *misalign = NULL_TREE;\n+  *initial_offset = NULL_TREE;\n \n   /* Strip conversions that don't narrow the mode.  */\n   expr = vect_strip_conversion (expr);\n   if (!expr)\n     return false;\n \n-  *step = NULL_TREE;\n-  *misalign = NULL_TREE;\n-  *initial_offset = NULL_TREE;\n-\n   /* Stop conditions:\n      1. Constant.  */\n   if (TREE_CODE (expr) == INTEGER_CST)\n@@ -1447,18 +1447,12 @@ vect_analyze_offset_expr (tree expr,\n \treturn false;\n \n       init = initial_condition_in_loop_num (access_fn, loop->num);\n-      if (init == expr)\n-\t{\n-\t  def_stmt = SSA_NAME_DEF_STMT (init);\n-\t  if (def_stmt \n-\t      && !IS_EMPTY_STMT (def_stmt)\n-\t      && flow_bb_inside_loop_p (loop, bb_for_stmt (def_stmt)))\n-\t    /* Not enough information: may be not loop invariant.  \n-\t       E.g., for a[b[i]], we get a[D], where D=b[i]. EXPR is D, its \n-\t       initial_condition is D, but it depends on i - loop's induction\n-\t       variable.  */\t  \n-\t    return false;\n-\t}\n+      if (init == expr && !expr_invariant_in_loop_p (loop, init))\n+\t/* Not enough information: may be not loop invariant.  \n+\t   E.g., for a[b[i]], we get a[D], where D=b[i]. EXPR is D, its \n+\t   initial_condition is D, but it depends on i - loop's induction\n+\t   variable.  */\t  \n+\treturn false;\n \n       evolution = evolution_part_in_loop_num (access_fn, loop->num);\n       if (evolution && TREE_CODE (evolution) != INTEGER_CST)\n@@ -3174,7 +3168,8 @@ vect_update_ivs_after_vectorizer (struct loop *loop, tree niters, edge update_e)\n       gcc_assert (!tree_is_chrec (evolution_part));\n \n       step_expr = evolution_part;\n-      init_expr = unshare_expr (initial_condition (access_fn));\n+      init_expr = unshare_expr (initial_condition_in_loop_num (access_fn, \n+\t\t\t\t\t\t\t       loop->num));\n \n       ni = build2 (PLUS_EXPR, TREE_TYPE (init_expr),\n \t\t  build2 (MULT_EXPR, TREE_TYPE (niters),\n@@ -3890,7 +3885,7 @@ vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n     return false;\n   \n   step_expr = evolution_part;\n-  init_expr = unshare_expr (initial_condition (access_fn));\n+  init_expr = unshare_expr (initial_condition_in_loop_num (access_fn, loop_nb));\n \n   if (vect_debug_details (NULL))\n     {\n@@ -4618,6 +4613,14 @@ vect_analyze_pointer_ref_access (tree memref, tree stmt, bool is_read)\n \t\t\n   STRIP_NOPS (init);\n \n+  if (!expr_invariant_in_loop_p (loop, init))\n+    {\n+      if (vect_debug_stats (loop) || vect_debug_details (loop)) \n+\tfprintf (dump_file, \n+\t\t \"not vectorized: initial condition is not loop invariant.\");\t\n+      return NULL;\n+    }\n+\n   if (TREE_CODE (step) != INTEGER_CST)\n     {\n       if (vect_debug_stats (loop) || vect_debug_details (loop)) "}]}