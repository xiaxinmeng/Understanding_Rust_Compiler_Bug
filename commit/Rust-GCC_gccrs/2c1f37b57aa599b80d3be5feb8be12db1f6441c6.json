{"sha": "2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxZjM3YjU3YWE1OTliODBkM2JlNWZlYjhiZTEyZGIxZjY0NDFjNg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-05-15T09:38:44Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-05-15T09:38:44Z"}, "message": "re PR middle-end/66134 ([CHKP] ICE: Unable to coalesce ssa_names 18 and 17 which are marked as MUST COALESCE)\n\ngcc/\n\n\tPR middle-end/66134\n\t* tree-chkp.c (chkp_get_orginal_bounds_for_abnormal_copy): New.\n\t(chkp_maybe_copy_and_register_bounds): Don't copy abnormal copy.\n\ngcc/testsuite/\n\n\tPR middle-end/66134\n\t* gcc.target/i386/mpx/pr66134.c: New test.\n\nFrom-SVN: r223215", "tree": {"sha": "8014b3e177f88bbb3d858a809ea701bd9dbc1aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8014b3e177f88bbb3d858a809ea701bd9dbc1aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/comments", "author": null, "committer": null, "parents": [{"sha": "95f991707bac9b29b5e762588acad5fa37ac89d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f991707bac9b29b5e762588acad5fa37ac89d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f991707bac9b29b5e762588acad5fa37ac89d0"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "f446b2944064708fa13cd6f78fc4e935554c8e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "patch": "@@ -1,3 +1,9 @@\n+2015-05-15  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR middle-end/66134\n+\t* tree-chkp.c (chkp_get_orginal_bounds_for_abnormal_copy): New.\n+\t(chkp_maybe_copy_and_register_bounds): Don't copy abnormal copy.\n+\n 2015-05-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_TUNE_SLOWMUL): Delete."}, {"sha": "9bd5b5ec72350abbba1a045ef06a2b85ccb959f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "patch": "@@ -1,3 +1,8 @@\n+2015-05-15  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR middle-end/66134\n+\t* gcc.target/i386/mpx/pr66134.c: New test.\n+\n 2015-05-14  Rohit Arul Raj  <rohitrulraj@freescale.com>\n \n \t* gcc.target/powerpc/pr60158.c: New test."}, {"sha": "17a52bca7e703c367c45a110e3f636efc6f06971", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f37b57aa599b80d3be5feb8be12db1f6441c6/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=2c1f37b57aa599b80d3be5feb8be12db1f6441c6", "patch": "@@ -1097,7 +1097,20 @@ chkp_get_bounds_var (tree ptr_var)\n   return bnd_var;\n }\n \n+/* If BND is an abnormal bounds copy, return a copied value.\n+   Otherwise return BND.  */\n+static tree\n+chkp_get_orginal_bounds_for_abnormal_copy (tree bnd)\n+{\n+  if (bitmap_bit_p (chkp_abnormal_copies, SSA_NAME_VERSION (bnd)))\n+    {\n+      gimple bnd_def = SSA_NAME_DEF_STMT (bnd);\n+      gcc_checking_assert (gimple_code (bnd_def) == GIMPLE_ASSIGN);\n+      bnd = gimple_assign_rhs1 (bnd_def);\n+    }\n \n+  return bnd;\n+}\n \n /* Register bounds BND for object PTR in global bounds table.\n    A copy of bounds may be created for abnormal ssa names.\n@@ -1141,11 +1154,7 @@ chkp_maybe_copy_and_register_bounds (tree ptr, tree bnd)\n       /* For abnormal copies we may just find original\n \t bounds and use them.  */\n       if (!abnormal_ptr && !SSA_NAME_IS_DEFAULT_DEF (bnd))\n-\t{\n-\t  gimple bnd_def = SSA_NAME_DEF_STMT (bnd);\n-\t  gcc_checking_assert (gimple_code (bnd_def) == GIMPLE_ASSIGN);\n-\t  bnd = gimple_assign_rhs1 (bnd_def);\n-\t}\n+\tbnd = chkp_get_orginal_bounds_for_abnormal_copy (bnd);\n       /* For undefined values we usually use none bounds\n \t value but in case of abnormal edge it may cause\n \t coalescing failures.  Use default definition of\n@@ -1177,6 +1186,7 @@ chkp_maybe_copy_and_register_bounds (tree ptr, tree bnd)\n \t    copy = make_temp_ssa_name (pointer_bounds_type_node,\n \t\t\t\t       gimple_build_nop (),\n \t\t\t\t       CHKP_BOUND_TMP_NAME);\n+\t  bnd = chkp_get_orginal_bounds_for_abnormal_copy (bnd);\n \t  assign = gimple_build_assign (copy, bnd);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}