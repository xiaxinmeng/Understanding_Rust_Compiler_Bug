{"sha": "3d02ae6520c3c20a8379d705db12bf21c7976ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwMmFlNjUyMGMzYzIwYTgzNzlkNzA1ZGIxMmJmMjFjNzk3NmFiMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-25T10:37:07Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-25T10:37:07Z"}, "message": "* common/config/c6x/c6x-common.c: New file.\n\nFrom-SVN: r176738", "tree": {"sha": "9eb220f517184846fe591fabeae39ff4fb6b40d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eb220f517184846fe591fabeae39ff4fb6b40d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d02ae6520c3c20a8379d705db12bf21c7976ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d02ae6520c3c20a8379d705db12bf21c7976ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d02ae6520c3c20a8379d705db12bf21c7976ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d02ae6520c3c20a8379d705db12bf21c7976ab3/comments", "author": null, "committer": null, "parents": [{"sha": "2eaa698b5dc2c6cf267d0812490db7eb98a761c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eaa698b5dc2c6cf267d0812490db7eb98a761c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eaa698b5dc2c6cf267d0812490db7eb98a761c4"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "66ec2c9b9823928630fda0da020f43c3bb7dd1a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d02ae6520c3c20a8379d705db12bf21c7976ab3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d02ae6520c3c20a8379d705db12bf21c7976ab3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d02ae6520c3c20a8379d705db12bf21c7976ab3", "patch": "@@ -1,3 +1,7 @@\n+2011-07-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* common/config/c6x/c6x-common.c: New file.\n+\n 2011-07-25  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* tree-flow.h (tree_ssa_loop_version): Remove unused declaration."}, {"sha": "133dddadbf4efaaa7eb544b2195c08f0046e651a", "filename": "gcc/common/config/c6x/c6x-common.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d02ae6520c3c20a8379d705db12bf21c7976ab3/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d02ae6520c3c20a8379d705db12bf21c7976ab3/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c?ref=3d02ae6520c3c20a8379d705db12bf21c7976ab3", "patch": "@@ -0,0 +1,63 @@\n+/* TI C6X common hooks.\n+   Copyright (C) 2011  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement overriding of the optimization options.  */\n+static const struct default_options c6x_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_frename_registers, NULL, 1 },\n+    { OPT_LEVELS_ALL, OPT_freciprocal_math, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_EXCEPT_UNWIND_INFO.  */\n+\n+static enum unwind_info_type\n+c6x_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+  /* Honor the --enable-sjlj-exceptions configure switch.  */\n+#ifdef CONFIG_SJLJ_EXCEPTIONS\n+  if (CONFIG_SJLJ_EXCEPTIONS)\n+    return UI_SJLJ;\n+#endif\n+\n+  return UI_TARGET;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE c6x_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO  c6x_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}]}