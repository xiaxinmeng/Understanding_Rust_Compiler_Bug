{"sha": "e8738f4e9686203451fd11f05b268b8a31b95ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3MzhmNGU5Njg2MjAzNDUxZmQxMWYwNWIyNjhiOGEzMWI5NWViZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T14:49:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T14:49:36Z"}, "message": "Remove build_{same_sized_,}truth_vector_type\n\nbuild_same_sized_truth_vector_type was confusingly named, since for\nSVE and AVX512 the returned vector isn't the same byte size (although\nit does have the same number of elements).  What it really returns\nis the \"truth\" vector type for a given data vector type.\n\nThe more general truth_type_for provides the same thing when passed\na vector and IMO has a more descriptive name, so this patch replaces\nall uses of build_same_sized_truth_vector_type with that.  It does\nthe same for a call to build_truth_vector_type, leaving truth_type_for\nitself as the only remaining caller.\n\nIt's then more natural to pass build_truth_vector_type the original\nvector type rather than its size and nunits, especially since the\ngiven size isn't the size of the returned vector.  This in turn allows\na future patch to simplify the interface of get_mask_mode.  Doing this\nalso fixes a bug in which truth_type_for would pass a size of zero for\nBLKmode vector types.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree.h (build_truth_vector_type): Delete.\n\t(build_same_sized_truth_vector_type): Likewise.\n\t* tree.c (build_truth_vector_type): Rename to...\n\t(build_truth_vector_type_for): ...this.  Make static and take\n\ta vector type as argument.\n\t(truth_type_for): Update accordingly.\n\t(build_same_sized_truth_vector_type): Delete.\n\t* tree-vect-generic.c (expand_vector_divmod): Use truth_type_for\n\tinstead of build_same_sized_truth_vector_type.\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n\t(vect_record_loop_mask, vect_get_loop_mask): Likewise.\n\t* tree-vect-patterns.c (build_mask_conversion): Likeise.\n\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Likewise.\n\t(vect_build_gather_load_calls, vectorizable_call): Likewise.\n\t(scan_store_can_perm_p, vectorizable_scan_store): Likewise.\n\t(vectorizable_store, vectorizable_condition): Likewise.\n\t(get_mask_type_for_scalar_type, get_same_sized_vectype): Likewise.\n\t(vect_get_mask_type_for_stmt): Use truth_type_for instead of\n\tbuild_truth_vector_type.\n\t* config/aarch64/aarch64-sve-builtins.cc (gimple_folder::convert_pred):\n\tUse truth_type_for instead of build_same_sized_truth_vector_type.\n\t* config/rs6000/rs6000-call.c (fold_build_vec_cmp): Likewise.\n\ngcc/c/\n\t* c-typeck.c (build_conditional_expr): Use truth_type_for instead\n\tof build_same_sized_truth_vector_type.\n\t(build_vec_cmp): Likewise.\n\ngcc/cp/\n\t* call.c (build_conditional_expr_1): Use truth_type_for instead\n\tof build_same_sized_truth_vector_type.\n\t* typeck.c (build_vec_cmp): Likewise.\n\ngcc/d/\n\t* d-codegen.cc (build_boolop): Use truth_type_for instead of\n\tbuild_same_sized_truth_vector_type.\n\nFrom-SVN: r278232", "tree": {"sha": "d5dbc63cf68c0c71f9eff08aac3fe370a2ce8e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5dbc63cf68c0c71f9eff08aac3fe370a2ce8e1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8738f4e9686203451fd11f05b268b8a31b95ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8738f4e9686203451fd11f05b268b8a31b95ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8738f4e9686203451fd11f05b268b8a31b95ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8738f4e9686203451fd11f05b268b8a31b95ebd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a0ef2387cc1561d537d8d949aef9479ef17ba35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0ef2387cc1561d537d8d949aef9479ef17ba35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0ef2387cc1561d537d8d949aef9479ef17ba35"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "2b307b70e63ee0e398e1ef5139172ef1b1d48996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1,3 +1,29 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree.h (build_truth_vector_type): Delete.\n+\t(build_same_sized_truth_vector_type): Likewise.\n+\t* tree.c (build_truth_vector_type): Rename to...\n+\t(build_truth_vector_type_for): ...this.  Make static and take\n+\ta vector type as argument.\n+\t(truth_type_for): Update accordingly.\n+\t(build_same_sized_truth_vector_type): Delete.\n+\t* tree-vect-generic.c (expand_vector_divmod): Use truth_type_for\n+\tinstead of build_same_sized_truth_vector_type.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n+\t(vect_record_loop_mask, vect_get_loop_mask): Likewise.\n+\t* tree-vect-patterns.c (build_mask_conversion): Likeise.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Likewise.\n+\t(vect_build_gather_load_calls, vectorizable_call): Likewise.\n+\t(scan_store_can_perm_p, vectorizable_scan_store): Likewise.\n+\t(vectorizable_store, vectorizable_condition): Likewise.\n+\t(get_mask_type_for_scalar_type, get_same_sized_vectype): Likewise.\n+\t(vect_get_mask_type_for_stmt): Use truth_type_for instead of\n+\tbuild_truth_vector_type.\n+\t* config/aarch64/aarch64-sve-builtins.cc (gimple_folder::convert_pred):\n+\tUse truth_type_for instead of build_same_sized_truth_vector_type.\n+\t* config/rs6000/rs6000-call.c (fold_build_vec_cmp): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree.h (build_truth_vector_type_for_mode): Declare."}, {"sha": "04dce4b45ceab01259a33957925ce2d2ed8b0cca", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1,3 +1,9 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-typeck.c (build_conditional_expr): Use truth_type_for instead\n+\tof build_same_sized_truth_vector_type.\n+\t(build_vec_cmp): Likewise.\n+\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_context_selector): Don't require score"}, {"sha": "5f74a3b28d90851b4bde40d43a7eb27e101555e6", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -5431,7 +5431,7 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n       tree elem_type = TREE_TYPE (vectype);\n       tree zero = build_int_cst (elem_type, 0);\n       tree zero_vec = build_vector_from_val (vectype, zero);\n-      tree cmp_type = build_same_sized_truth_vector_type (vectype);\n+      tree cmp_type = truth_type_for (vectype);\n       ifexp = build2 (NE_EXPR, cmp_type, ifexp, zero_vec);\n     }\n \n@@ -11340,7 +11340,7 @@ build_vec_cmp (tree_code code, tree type,\n {\n   tree zero_vec = build_zero_cst (type);\n   tree minus_one_vec = build_minus_one_cst (type);\n-  tree cmp_type = build_same_sized_truth_vector_type (type);\n+  tree cmp_type = truth_type_for (type);\n   tree cmp = build2 (code, cmp_type, arg0, arg1);\n   return build3 (VEC_COND_EXPR, type, cmp, minus_one_vec, zero_vec);\n }"}, {"sha": "63d903d0a1effbf74586876710ecb194e5a4b403", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -2240,7 +2240,7 @@ tree\n gimple_folder::convert_pred (gimple_seq &stmts, tree vectype,\n \t\t\t     unsigned int argno)\n {\n-  tree predtype = build_same_sized_truth_vector_type (vectype);\n+  tree predtype = truth_type_for (vectype);\n   tree pred = gimple_call_arg (call, argno);\n   return gimple_build (&stmts, VIEW_CONVERT_EXPR, predtype, pred);\n }"}, {"sha": "00ba74551b3ad8e8d1c644f34c8a7c4035e284f3", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -5195,7 +5195,7 @@ static tree\n fold_build_vec_cmp (tree_code code, tree type,\n \t\t    tree arg0, tree arg1)\n {\n-  tree cmp_type = build_same_sized_truth_vector_type (type);\n+  tree cmp_type = truth_type_for (type);\n   tree zero_vec = build_zero_cst (type);\n   tree minus_one_vec = build_minus_one_cst (type);\n   tree cmp = fold_build2 (code, cmp_type, arg0, arg1);"}, {"sha": "f45b59b80613105acd4d0dc35e42304096a83434", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1,3 +1,9 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* call.c (build_conditional_expr_1): Use truth_type_for instead\n+\tof build_same_sized_truth_vector_type.\n+\t* typeck.c (build_vec_cmp): Likewise.\n+\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_context_selector): Don't require score"}, {"sha": "e9ab30d9e13ed941cf6632634f32d3a3f8339760", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -5198,7 +5198,7 @@ build_conditional_expr_1 (const op_location_t &loc,\n \n       if (!COMPARISON_CLASS_P (arg1))\n \t{\n-\t  tree cmp_type = build_same_sized_truth_vector_type (arg1_type);\n+\t  tree cmp_type = truth_type_for (arg1_type);\n \t  arg1 = build2 (NE_EXPR, cmp_type, arg1, build_zero_cst (arg1_type));\n \t}\n       return build3_loc (loc, VEC_COND_EXPR, arg2_type, arg1, arg2, arg3);"}, {"sha": "3144b7ef292d86695715a798558ec34c6970f8db", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -4325,7 +4325,7 @@ build_vec_cmp (tree_code code, tree type,\n {\n   tree zero_vec = build_zero_cst (type);\n   tree minus_one_vec = build_minus_one_cst (type);\n-  tree cmp_type = build_same_sized_truth_vector_type(type);\n+  tree cmp_type = truth_type_for (type);\n   tree cmp = build2 (code, cmp_type, arg0, arg1);\n   return build3 (VEC_COND_EXPR, type, cmp, minus_one_vec, zero_vec);\n }"}, {"sha": "046f28373c5245c03b04486753a75a1053a4f4b3", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1,3 +1,8 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* d-codegen.cc (build_boolop): Use truth_type_for instead of\n+\tbuild_same_sized_truth_vector_type.\n+\n 2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* d-target.cc (define_float_constants): Update call to"}, {"sha": "01e6916febafa57b8897d86a7d9a83a07429d74d", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1399,7 +1399,7 @@ build_boolop (tree_code code, tree arg0, tree arg1)\n       /* Build a vector comparison.\n \t VEC_COND_EXPR <e1 op e2, { -1, -1, -1, -1 }, { 0, 0, 0, 0 }>; */\n       tree type = TREE_TYPE (arg0);\n-      tree cmptype = build_same_sized_truth_vector_type (type);\n+      tree cmptype = truth_type_for (type);\n       tree cmp = fold_build2_loc (input_location, code, cmptype, arg0, arg1);\n \n       return fold_build3_loc (input_location, VEC_COND_EXPR, type, cmp,"}, {"sha": "091226533e74baed6af0a67692fbf5ec07fa3934", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -694,7 +694,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t      tree zero, cst, cond, mask_type;\n \t      gimple *stmt;\n \n-\t      mask_type = build_same_sized_truth_vector_type (type);\n+\t      mask_type = truth_type_for (type);\n \t      zero = build_zero_cst (type);\n \t      cond = build2 (LT_EXPR, mask_type, op0, zero);\n \t      tree_vector_builder vec (type, nunits, 1);"}, {"sha": "8319cb10c1a5e40f337637fcf7162d1756bc7cda", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -4603,8 +4603,7 @@ vect_create_epilog_for_reduction (stmt_vec_info stmt_info,\n       tree index_vec_type = TREE_TYPE (induction_index);\n       gcc_checking_assert (TYPE_UNSIGNED (index_vec_type));\n       tree index_scalar_type = TREE_TYPE (index_vec_type);\n-      tree index_vec_cmp_type = build_same_sized_truth_vector_type\n-\t(index_vec_type);\n+      tree index_vec_cmp_type = truth_type_for (index_vec_type);\n \n       /* Get an unsigned integer version of the type of the data vector.  */\n       int scalar_precision\n@@ -4831,7 +4830,7 @@ vect_create_epilog_for_reduction (stmt_vec_info stmt_info,\n       tree index = build_index_vector (vectype, 0, 1);\n       tree index_type = TREE_TYPE (index);\n       tree index_elt_type = TREE_TYPE (index_type);\n-      tree mask_type = build_same_sized_truth_vector_type (index_type);\n+      tree mask_type = truth_type_for (index_type);\n \n       /* Create a vector that, for each element, identifies which of\n \t the REDUC_GROUP_SIZE results should use it.  */\n@@ -7948,7 +7947,7 @@ vect_record_loop_mask (loop_vec_info loop_vinfo, vec_loop_masks *masks,\n   if (rgm->max_nscalars_per_iter < nscalars_per_iter)\n     {\n       rgm->max_nscalars_per_iter = nscalars_per_iter;\n-      rgm->mask_type = build_same_sized_truth_vector_type (vectype);\n+      rgm->mask_type = truth_type_for (vectype);\n     }\n }\n \n@@ -7993,7 +7992,7 @@ vect_get_loop_mask (gimple_stmt_iterator *gsi, vec_loop_masks *masks,\n       gcc_assert (multiple_p (TYPE_VECTOR_SUBPARTS (mask_type),\n \t\t\t      TYPE_VECTOR_SUBPARTS (vectype)));\n       gimple_seq seq = NULL;\n-      mask_type = build_same_sized_truth_vector_type (vectype);\n+      mask_type = truth_type_for (vectype);\n       mask = gimple_build (&seq, VIEW_CONVERT_EXPR, mask_type, mask);\n       if (seq)\n \tgsi_insert_seq_before (gsi, seq, GSI_SAME_STMT);"}, {"sha": "86c3abfa819532398484ee2decffdecf4b4181b0", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -4214,7 +4214,7 @@ build_mask_conversion (tree mask, tree vectype, stmt_vec_info stmt_vinfo)\n   gimple *stmt;\n   tree masktype, tmp;\n \n-  masktype = build_same_sized_truth_vector_type (vectype);\n+  masktype = truth_type_for (vectype);\n   tmp = vect_recog_temp_ssa_var (TREE_TYPE (masktype), NULL);\n   stmt = gimple_build_assign (tmp, CONVERT_EXPR, mask);\n   append_pattern_def_seq (stmt_vinfo, stmt, masktype);"}, {"sha": "61a864eec93376ebd51fa58a9e0e629774141f57", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -3497,8 +3497,7 @@ vect_get_constant_vectors (slp_tree op_node, slp_tree slp_node,\n   tree stmt_vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n   if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n       && vect_mask_constant_operand_p (stmt_vinfo))\n-    vector_type\n-      = build_same_sized_truth_vector_type (stmt_vectype);\n+    vector_type = truth_type_for (stmt_vectype);\n   else\n     vector_type = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op));\n "}, {"sha": "19984b5ad22315e7fcf879d4a141c5f63b522c58", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -1605,7 +1605,7 @@ vect_get_vec_def_for_operand (tree op, stmt_vec_info stmt_vinfo, tree vectype)\n \tvector_type = vectype;\n       else if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n \t       && VECTOR_BOOLEAN_TYPE_P (stmt_vectype))\n-\tvector_type = build_same_sized_truth_vector_type (stmt_vectype);\n+\tvector_type = truth_type_for (stmt_vectype);\n       else\n \tvector_type = get_vectype_for_scalar_type (loop_vinfo, TREE_TYPE (op));\n \n@@ -2734,7 +2734,7 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n \t\t\t   || TREE_CODE (masktype) == INTEGER_TYPE\n \t\t\t   || types_compatible_p (srctype, masktype)));\n   if (mask && TREE_CODE (masktype) == INTEGER_TYPE)\n-    masktype = build_same_sized_truth_vector_type (srctype);\n+    masktype = truth_type_for (srctype);\n \n   tree mask_halftype = masktype;\n   tree perm_mask = NULL_TREE;\n@@ -2780,8 +2780,7 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n \t  mask_perm_mask = vect_gen_perm_mask_checked (masktype, indices);\n \t}\n       else if (mask)\n-\tmask_halftype\n-\t  = build_same_sized_truth_vector_type (gs_info->offset_vectype);\n+\tmask_halftype = truth_type_for (gs_info->offset_vectype);\n     }\n   else\n     gcc_unreachable ();\n@@ -3524,8 +3523,7 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  if (mask_opno >= 0 && !vectypes[mask_opno])\n \t    {\n \t      gcc_assert (modifier != WIDEN);\n-\t      vectypes[mask_opno]\n-\t\t= build_same_sized_truth_vector_type (vectype_in);\n+\t      vectypes[mask_opno] = truth_type_for (vectype_in);\n \t    }\n \n \t  for (i = 0; i < nargs; i++)\n@@ -6581,7 +6579,7 @@ scan_store_can_perm_p (tree vectype, tree init,\n \t\t   && TREE_CODE (init) != REAL_CST)\n \t\t  || !initializer_zerop (init))\n \t\t{\n-\t\t  tree masktype = build_same_sized_truth_vector_type (vectype);\n+\t\t  tree masktype = truth_type_for (vectype);\n \t\t  if (!expand_vec_cond_expr_p (vectype, masktype, VECTOR_CST))\n \t\t    return -1;\n \t\t  whole_vector_shift_kind = scan_store_kind_lshift_cond;\n@@ -7106,7 +7104,7 @@ vectorizable_scan_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t    zero_vec = build_zero_cst (vectype);\n \t  if (masktype == NULL_TREE\n \t      && use_whole_vector[i] == scan_store_kind_lshift_cond)\n-\t    masktype = build_same_sized_truth_vector_type (vectype);\n+\t    masktype = truth_type_for (vectype);\n \t  perms[i] = vect_gen_perm_mask_any (vectype, indices);\n \t}\n       else\n@@ -7547,8 +7545,7 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  ncopies *= 2;\n \n \t  if (mask)\n-\t    mask_halfvectype\n-\t      = build_same_sized_truth_vector_type (gs_info.offset_vectype);\n+\t    mask_halfvectype = truth_type_for (gs_info.offset_vectype);\n \t}\n       else\n \tgcc_unreachable ();\n@@ -9972,7 +9969,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     return false;\n \n   masked = !COMPARISON_CLASS_P (cond_expr);\n-  vec_cmp_type = build_same_sized_truth_vector_type (comp_vectype);\n+  vec_cmp_type = truth_type_for (comp_vectype);\n \n   if (vec_cmp_type == NULL_TREE)\n     return false;\n@@ -11233,8 +11230,7 @@ get_mask_type_for_scalar_type (vec_info *vinfo, tree scalar_type)\n   if (!vectype)\n     return NULL;\n \n-  return build_truth_vector_type (TYPE_VECTOR_SUBPARTS (vectype),\n-\t\t\t\t  vinfo->vector_size);\n+  return truth_type_for (vectype);\n }\n \n /* Function get_same_sized_vectype\n@@ -11246,7 +11242,7 @@ tree\n get_same_sized_vectype (tree scalar_type, tree vector_type)\n {\n   if (VECT_SCALAR_BOOLEAN_TYPE_P (scalar_type))\n-    return build_same_sized_truth_vector_type (vector_type);\n+    return truth_type_for (vector_type);\n \n   return get_vectype_for_scalar_type_and_size\n \t   (scalar_type, GET_MODE_SIZE (TYPE_MODE (vector_type)));\n@@ -12109,7 +12105,7 @@ vect_get_mask_type_for_stmt (stmt_vec_info stmt_info)\n \t  && !VECTOR_BOOLEAN_TYPE_P (mask_type)\n \t  && gimple_code (stmt) == GIMPLE_ASSIGN\n \t  && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_comparison)\n-\tmask_type = build_same_sized_truth_vector_type (mask_type);\n+\tmask_type = truth_type_for (mask_type);\n     }\n \n   /* No mask_type should mean loop invariant predicate."}, {"sha": "61b95c993c90582ed3707fad441acfdcb90b985e", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -10887,11 +10887,16 @@ build_truth_vector_type_for_mode (poly_uint64 nunits, machine_mode mask_mode)\n   return make_vector_type (bool_type, nunits, mask_mode);\n }\n \n-/* Build truth vector with specified length and number of units.  */\n+/* Build a vector type that holds one boolean result for each element of\n+   vector type VECTYPE.  The public interface for this operation is\n+   truth_type_for.  */\n \n-tree\n-build_truth_vector_type (poly_uint64 nunits, poly_uint64 vector_size)\n+static tree\n+build_truth_vector_type_for (tree vectype)\n {\n+  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  poly_uint64 vector_size = tree_to_poly_uint64 (TYPE_SIZE_UNIT (vectype));\n+\n   machine_mode mask_mode;\n   if (targetm.vectorize.get_mask_mode (nunits,\n \t\t\t\t       vector_size).exists (&mask_mode))\n@@ -10904,22 +10909,6 @@ build_truth_vector_type (poly_uint64 nunits, poly_uint64 vector_size)\n   return make_vector_type (bool_type, nunits, BLKmode);\n }\n \n-/* Returns a vector type corresponding to a comparison of VECTYPE.  */\n-\n-tree\n-build_same_sized_truth_vector_type (tree vectype)\n-{\n-  if (VECTOR_BOOLEAN_TYPE_P (vectype))\n-    return vectype;\n-\n-  poly_uint64 size = GET_MODE_SIZE (TYPE_MODE (vectype));\n-\n-  if (known_eq (size, 0U))\n-    size = tree_to_uhwi (TYPE_SIZE_UNIT (vectype));\n-\n-  return build_truth_vector_type (TYPE_VECTOR_SUBPARTS (vectype), size);\n-}\n-\n /* Like build_vector_type, but builds a variant type with TYPE_VECTOR_OPAQUE\n    set.  */\n \n@@ -11725,8 +11714,7 @@ truth_type_for (tree type)\n     {\n       if (VECTOR_BOOLEAN_TYPE_P (type))\n \treturn type;\n-      return build_truth_vector_type (TYPE_VECTOR_SUBPARTS (type),\n-\t\t\t\t      GET_MODE_SIZE (TYPE_MODE (type)));\n+      return build_truth_vector_type_for (type);\n     }\n   else\n     return boolean_type_node;"}, {"sha": "89114e227d87db2383f4ca0810d03342b2615b64", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8738f4e9686203451fd11f05b268b8a31b95ebd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e8738f4e9686203451fd11f05b268b8a31b95ebd", "patch": "@@ -4444,8 +4444,6 @@ extern tree build_reference_type (tree);\n extern tree build_vector_type_for_mode (tree, machine_mode);\n extern tree build_vector_type (tree, poly_int64);\n extern tree build_truth_vector_type_for_mode (poly_uint64, machine_mode);\n-extern tree build_truth_vector_type (poly_uint64, poly_uint64);\n-extern tree build_same_sized_truth_vector_type (tree vectype);\n extern tree build_opaque_vector_type (tree, poly_int64);\n extern tree build_index_type (tree);\n extern tree build_array_type (tree, tree, bool = false);"}]}