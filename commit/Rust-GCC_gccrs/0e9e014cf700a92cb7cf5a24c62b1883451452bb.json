{"sha": "0e9e014cf700a92cb7cf5a24c62b1883451452bb", "node_id": "C_kwDOANBUbNoAKDBlOWUwMTRjZjcwMGE5MmNiN2NmNWEyNGM2MmIxODgzNDUxNDUyYmI", "commit": {"author": {"name": "Fedor Rybin", "email": "frybin@adacore.com", "date": "2022-01-11T09:04:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:30Z"}, "message": "[Ada] Remove gnattest section from gnat user guide\n\ngcc/ada/\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove gnattest\n\tsection.", "tree": {"sha": "630662108d853cbd7b2661fd963924de190e4a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/630662108d853cbd7b2661fd963924de190e4a26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e9e014cf700a92cb7cf5a24c62b1883451452bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e014cf700a92cb7cf5a24c62b1883451452bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9e014cf700a92cb7cf5a24c62b1883451452bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e014cf700a92cb7cf5a24c62b1883451452bb/comments", "author": {"login": "fedor-rybin", "id": 38350654, "node_id": "MDQ6VXNlcjM4MzUwNjU0", "avatar_url": "https://avatars.githubusercontent.com/u/38350654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fedor-rybin", "html_url": "https://github.com/fedor-rybin", "followers_url": "https://api.github.com/users/fedor-rybin/followers", "following_url": "https://api.github.com/users/fedor-rybin/following{/other_user}", "gists_url": "https://api.github.com/users/fedor-rybin/gists{/gist_id}", "starred_url": "https://api.github.com/users/fedor-rybin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fedor-rybin/subscriptions", "organizations_url": "https://api.github.com/users/fedor-rybin/orgs", "repos_url": "https://api.github.com/users/fedor-rybin/repos", "events_url": "https://api.github.com/users/fedor-rybin/events{/privacy}", "received_events_url": "https://api.github.com/users/fedor-rybin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9d06f7115d18d57fa603d6b80a53912607a703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9d06f7115d18d57fa603d6b80a53912607a703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9d06f7115d18d57fa603d6b80a53912607a703"}], "stats": {"total": 917, "additions": 0, "deletions": 917}, "files": [{"sha": "def11a6b1206f79383f75bb8b9e3d8316f9dcd42", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 0, "deletions": 917, "changes": 917, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e014cf700a92cb7cf5a24c62b1883451452bb/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e014cf700a92cb7cf5a24c62b1883451452bb/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=0e9e014cf700a92cb7cf5a24c62b1883451452bb", "patch": "@@ -18,7 +18,6 @@ This chapter describes a number of utility programs:\n   * :ref:`The_GNAT_Metrics_Tool_gnatmetric`\n   * :ref:`The_GNAT_Pretty_Printer_gnatpp`\n   * :ref:`The_Body_Stub_Generator_gnatstub`\n-  * :ref:`The_Unit_Test_Generator_gnattest`\n   * :ref:`The_Backtrace_Symbolizer_gnatsymbolize`\n \n   It also describes how several of these tools can be used in conjunction\n@@ -3264,922 +3263,6 @@ building specialized scripts.\n     :switch:`--files={filename}`\n \n \n-.. only:: PRO or GPL\n-\n-  .. _The_Unit_Test_Generator_gnattest:\n-\n-  The Unit Test Generator ``gnattest``\n-  ====================================\n-\n-  .. index:: ! gnattest\n-\n-  ``gnattest`` is an ASIS-based utility that creates unit-test skeletons\n-  as well as a test driver infrastructure (harness). ``gnattest`` creates\n-  a skeleton for each visible subprogram in the packages under consideration when\n-  they do not exist already.\n-\n-  ``gnattest`` is a project-aware tool.\n-  (See :ref:`Using_Project_Files_with_GNAT_Tools` for a description of\n-  the project-related switches but note that ``gnattest`` does not support\n-  the :switch:`-U`, :switch:`-eL`, :switch:`--subdirs={dir}`, or\n-  :switch:`--no-objects-dir` switches.)\n-  The project file package that can specify\n-  ``gnattest`` switches is named ``gnattest``.\n-\n-  The user can choose to generate a single test driver\n-  that will run all individual tests, or separate test drivers for each test. The\n-  second option allows much greater flexibility in test execution environment,\n-  allows to benefit from parallel tests execution to increase performance, and\n-  provides stubbing support.\n-\n-  ``gnattest`` also has a mode of operation where it acts as the test\n-  aggregator when multiple test executables must be run, in particular when\n-  the separate test drivers were generated. In this mode it handles individual\n-  tests execution and upon completion reports the summary results of the test\n-  run.\n-\n-  In order to process source files from a project, ``gnattest`` has to\n-  semantically analyze the sources. Therefore, test skeletons can only be\n-  generated for legal Ada units. If a unit is dependent on other units,\n-  those units should be among the source files of the project or of other projects\n-  imported by this one.\n-\n-  Generated skeletons and harnesses are based on the AUnit testing framework.\n-  AUnit is an Ada adaptation of the xxxUnit testing frameworks, similar to JUnit\n-  for Java or CppUnit for C++. While it is advised that gnattest users read\n-  the AUnit manual, deep knowledge of AUnit is not necessary for using ``gnattest``.\n-  For correct operation of ``gnattest``, AUnit should be installed and\n-  aunit.gpr must be on the project path. Except for some special circumstances\n-  (e.g. a custom run-time is used), this should normally be the case out of the box.\n-\n-\n-  .. _Running_gnattest:\n-\n-  Running ``gnattest``\n-  --------------------\n-\n-  There are two ways of running ``gnattest``.\n-\n-  .. _Framework_Generation_Mode:\n-\n-  Framework Generation Mode\n-  ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-  In this mode ``gnattest`` has the following command-line interface:\n-\n-    ::\n-\n-        $ gnattest -Pprojname [ switches ] [ filename ] [ -cargs gcc_switches ]\n-\n-  where\n-\n-  * :switch:`-P{projname}`\n-      specifies the project defining the location of source files. When no\n-      file names are provided on the command line, all sources in the project\n-      are used as input. This switch is required.\n-\n-  * :switch:`{filename}`\n-      is the name of the source file containing the library unit package *declaration*\n-      (the package \"spec\") for which a test package will be created. The file name\n-      may be given with a path.\n-\n-  * :samp:`{switches}`\n-      is an optional sequence of switches as described below.\n-\n-  * :samp:`{gcc_switches}`\n-      is a list of additional switches for\n-      ``gcc`` that will be passed to all compiler invocations\n-      made by ``gnattest`` to generate a set of ASIS trees.\n-\n-\n-  ``gnattest`` results can be found in two different places.\n-\n-  * *automatic harness*:\n-      This is the harness code, which is located by default in\n-      \"gnattest/harness\" directory created in the object directory of\n-      the main project file. All of this code is generated completely\n-      automatically and can be destroyed and regenerated at will, with the\n-      exception of the file *gnattest_common.gpr*, which is created if absent,\n-      but never overwritten. It is not recommended to modify other files\n-      manually, since these modifications will be lost if ``gnattest`` is re-run.\n-      The entry point in the harness code is\n-      the project file named *test_driver.gpr*. Tests can be compiled and run\n-      using a command such as:\n-\n-      ::\n-\n-         $ gprbuild -P<harness-dir>/test_driver\n-\n-      Note that if you need to adjust any options used to compile the harness,\n-      you can do so by editing the file *gnattest_common.gpr*.\n-\n-  * *actual unit test skeletons*:\n-      A test skeleton for each visible subprogram is created in a separate file, if it\n-      doesn't exist already. By default, those separate test files are located in a\n-      \"gnattest/tests\" directory that is created in the object directory of\n-      corresponding project file. For example, if a source file my_unit.ads in\n-      directory src contains a visible subprogram Proc, then the corresponding unit\n-      test will be found in file src/tests/my_unit-test_data-tests.adb and will be\n-      called Test_Proc_<code>. <code> is a signature encoding used to differentiate\n-      test names in case of overloading.\n-\n-      Note that if the project already has both my_unit.ads and my_unit-test_data.ads,\n-      this will cause a name conflict with the generated test package.\n-\n-\n-  .. _Test_Execution_Mode:\n-\n-  Test Execution Mode\n-  ^^^^^^^^^^^^^^^^^^^\n-\n-  In this  mode ``gnattest`` has a the following command-line interface:\n-\n-    ::\n-\n-        $ gnattest test_drivers.list [ switches ]\n-\n-  where\n-\n-  * :samp:`{test_drivers.list}`\n-       is the name of the text file containing the list of executables to treat as\n-       test drivers. This file is automatically generated by gnattest, but can be\n-       hand-edited to add or remove tests. This switch is required.\n-\n-\n-  * :samp:`{switches}`\n-       is an optional sequence of switches as described below.\n-\n-\n-  .. _Switches_for_gnattest_in_framework_generation_mode:\n-\n-  Switches for ``gnattest`` in framework generation mode\n-  ------------------------------------------------------\n-\n-    .. index:: --strict (gnattest)\n-\n-  :switch:`--strict`\n-    Return error exit code if there are any compilation errors.\n-\n-    .. index:: -q (gnattest)\n-\n-  :switch:`-q`\n-    Quiet mode: suppresses noncritical output messages.\n-\n-\n-    .. index:: -v (gnattest)\n-\n-  :switch:`-v`\n-    Verbose mode: produces additional output about the execution of the tool.\n-    When specified alone on the command line, prints tool version and exits.\n-\n-\n-    .. index:: -r (gnattest)\n-\n-  :switch:`-r`\n-    Recursively considers all sources from all projects.\n-\n-    .. index:: -files (gnattest)\n-\n-  :switch:`-files={filename}`\n-    Take as arguments the files listed in text file ``file``.\n-    Text file ``file`` may contain empty lines that are ignored.\n-    Each nonempty line should contain the name of an existing file.\n-    Several such switches may be specified simultaneously.\n-\n-    .. index:: --ignore (gnattest)\n-\n-  :switch:`--ignore={filename}`\n-    Do not process the sources listed in a specified file.\n-\n-    .. index:: --RTS (gnattest)\n-\n-  :switch:`--RTS={rts-path}`\n-    Specifies the default location of the runtime library. Same meaning as the\n-    equivalent ``gnatmake`` flag (:ref:`Switches_for_gnatmake`). For restricted\n-    profiles, ``gnattest`` takes into account the run-time limitations when\n-    generating the harness.\n-\n-\n-    .. index:: --additional-tests (gnattest)\n-\n-  :switch:`--additional-tests={projname}`\n-    Sources described in ``projname`` are considered potential additional\n-    manual tests to be added to the test suite.\n-\n-\n-    .. index:: --harness-only (gnattest)\n-\n-  :switch:`--harness-only`\n-    When this option is given, ``gnattest`` creates a harness for all\n-    sources, treating them as test packages. This option is not compatible with\n-    closure computation done by -U main.\n-\n-\n-    .. index:: --separate-drivers (gnattest)\n-\n-  :switch:`--separate-drivers[={val}]`\n-    Generates a separate test driver for each test or unit under test, rather\n-    than a single executable incorporating all tests. ``val`` can be \"unit\" or\n-    \"test\", or may be omitted, which defaults to \"unit\".\n-\n-\n-    .. index:: --stub (gnattest)\n-\n-  :switch:`--stub`\n-    Generates the testing framework that uses subsystem stubbing to isolate the\n-    code under test.\n-\n-\n-    .. index:: --harness-dir (gnattest)\n-\n-  :switch:`--harness-dir={dirname}`\n-    Specifies the directory that will hold the harness packages and project file\n-    for the test driver. If the ``dirname`` is a relative path, it is considered\n-    relative to the object directory of the project file.\n-\n-\n-    .. index:: --tests-dir (gnattest)\n-\n-  :switch:`--tests-dir={dirname}`\n-    All test packages are placed in the ``dirname`` directory.\n-    If the ``dirname`` is a relative path, it is considered relative to the object\n-    directory of the project file. When all sources from all projects are taken\n-    recursively from all projects, ``dirname`` directories are created for each\n-    project in their object directories and test packages are placed accordingly.\n-\n-\n-    .. index:: --subdir (gnattest)\n-\n-  :switch:`--subdir={dirname}`\n-    Test packages are placed in a subdirectory of the corresponding source\n-    directory, with the name ``dirname``. Thus, each set of unit tests is located\n-    in a subdirectory of the code under test. If the sources are in separate\n-    directories, each source directory has a test subdirectory named ``dirname``.\n-\n-\n-    .. index:: --tests-root (gnattest)\n-\n-  :switch:`--tests-root={dirname}`\n-    The hierarchy of source directories, if any, is recreated in the ``dirname``\n-    directory, with test packages placed in directories corresponding to those\n-    of the sources.\n-    If the ``dirname`` is a relative path, it is considered relative to the object\n-    directory of the project file. When projects are considered recursively,\n-    directory hierarchies of tested sources are\n-    recreated for each project in their object directories and test packages are\n-    placed accordingly.\n-\n-\n-    .. index:: --stubs-dir (gnattest)\n-\n-  :switch:`--stubs-dir={dirname}`\n-    The hierarchy of directories containing stubbed units is recreated in\n-    the ``dirname`` directory, with stubs placed in directories corresponding to\n-    projects they are derived from.\n-    If the ``dirname`` is a relative path, it is considered relative to the object\n-    directory of the project file. When projects are considered recursively,\n-    directory hierarchies of stubs are\n-    recreated for each project in their object directories and test packages are\n-    placed accordingly.\n-\n-\n-    .. index:: --exclude-from-stubbing (gnattest)\n-\n-  :switch:`--exclude-from-stubbing={filename}`\n-    Disables stubbing of units listed in ``filename``. The file should contain\n-    corresponding spec files, one per line.\n-\n-  :switch:`--exclude-from-stubbing:{unit}={filename}`\n-    Same as above, but corresponding units will not be stubbed only when testing\n-    specified ``unit``.\n-\n-    .. index:: --validate-type-extensions (gnattest)\n-\n-  :switch:`--validate-type-extensions`\n-    Enables substitution check: run all tests from all parents in order\n-    to check substitutability in accordance with the Liskov substitution principle (LSP).\n-\n-    .. index:: --inheritance-check (gnattest)\n-\n-  :switch:`--inheritance-check`\n-    Enables inheritance check: run inherited tests against descendants.\n-\n-    .. index:: --no-inheritance-check (gnattest)\n-\n-  :switch:`--no-inheritance-check`\n-    Disables inheritance check.\n-\n-    .. index:: --no-inheritance-check (gnattest)\n-\n-  :switch:`--test-case-only`\n-    Generates test skeletons only for subprograms that have at least one\n-    associated pragma or aspect Test_Case.\n-\n-    .. index:: --skeleton-default (gnattest)\n-\n-  :switch:`--skeleton-default={val}`\n-    Specifies the default behavior of generated skeletons. ``val`` can be either\n-    \"fail\" or \"pass\", \"fail\" being the default.\n-\n-\n-    .. index:: --passed-tests (gnattest)\n-\n-  :switch:`--passed-tests={val}`\n-    Specifies whether or not passed tests should be shown. ``val`` can be either\n-    \"show\" or \"hide\", \"show\" being the default.\n-\n-\n-    .. index:: --exit-status (gnattest)\n-\n-  :switch:`--exit-status={val}`\n-    Specifies whether or not generated test driver should return failure exit\n-    status if at least one test fails or crashes. ``val`` can be either\n-    \"on\" or \"off\", \"off\" being the default.\n-\n-\n-    .. index:: --omit-sloc (gnattest)\n-\n-  :switch:`--omit-sloc`\n-    Suppresses comment line containing file name and line number of corresponding\n-    subprograms in test skeletons.\n-\n-\n-    .. index:: --no-command-line (gnattest)\n-\n-  :switch:`--no-command-line`\n-    Don't add command line support to test driver. Note that regardless of this\n-    switch, ``gnattest`` will automatically refrain from adding command\n-    line support if it detects that the selected run-time doesn't provide\n-    this capability.\n-\n-\n-    .. index:: --separates (gnattest)\n-\n-  :switch:`--separates`\n-    Bodies of all test routines are generated as separates. Note that this mode is\n-    kept for compatibility reasons only and it is not advised to use it due to\n-    possible problems with hash in names of test skeletons when using an\n-    inconsistent casing. Separate test skeletons can be incorporated to monolith\n-    test package with improved hash being used by using ``--transition``\n-    switch.\n-\n-\n-    .. index:: --transition (gnattest)\n-\n-  :switch:`--transition`\n-    This allows transition from separate test routines to monolith test packages.\n-    All matching test routines are overwritten with contents of corresponding\n-    separates. Note that if separate test routines had any manually added with\n-    clauses they will be moved to the test package body as is and have to be moved\n-    by hand.\n-\n-\n-    .. index:: --test-duration (gnattest)\n-\n-  :switch:`--test-duration`\n-    Adds time measurements for each test in generated test driver.\n-\n-\n-  :switch:`--tests_root`, :switch:`--subdir` and :switch:`--tests-dir` switches are mutually exclusive.\n-\n-\n-  .. _Switches_for_gnattest_in_test_execution_mode:\n-\n-  Switches for ``gnattest`` in test execution mode\n-  ------------------------------------------------\n-\n-\n-    .. index:: --passed-tests (gnattest)\n-\n-  :switch:`--passed-tests={val}`\n-    Specifies whether or not passed tests should be shown. ``val`` can be either\n-    \"show\" or \"hide\", \"show\" being the default.\n-\n-\n-    .. index:: --queues (gnattest)\n-    .. index:: -j (gnattest)\n-\n-  :switch:`--queues={n}`, :switch:`-j{n}`\n-    Runs ``n`` tests in parallel (default is 1).\n-\n-\n-    .. index:: --copy-environment (gnattest)\n-\n-  :switch:`--copy-environment={dir}`\n-    Contents of ``dir`` directory will be copied to temporary directories\n-    created by gnattest in which individual test drivers are spawned.\n-\n-\n-  .. _Project_Attributes_for_gnattest:\n-\n-  Project Attributes for ``gnattest``\n-  -----------------------------------\n-\n-  Most of the command-line options can also be passed to the tool by adding\n-  special attributes to the project file. Those attributes should be put in\n-  package ``Gnattest``. Here is the list of attributes:\n-\n-\n-  * ``Tests_Root``\n-       is used to select the same output mode as with the ``--tests-root`` option.\n-       This attribute cannot be used together with ``Subdir`` or ``Tests_Dir``.\n-\n-  * ``Subdir``\n-       is used to select the same output mode as with the ``--subdir`` option.\n-       This attribute cannot be used together with ``Tests_Root`` or ``Tests_Dir``.\n-\n-  * ``Tests_Dir``\n-       is used to select the same output mode as with the ``--tests-dir`` option.\n-       This attribute cannot be used together with ``Subdir`` or ``Tests_Root``.\n-\n-  * ``Stubs_Dir``\n-       is used to select the same output mode as with the ``--stubs-dir`` option.\n-\n-  * ``Harness_Dir``\n-       is used to specify the directory in which to place harness packages and project\n-       file for the test driver, otherwise specified by ``--harness-dir``.\n-\n-  * ``Additional_Tests``\n-       is used to specify the project file, otherwise given by\n-       ``--additional-tests`` switch.\n-\n-  * ``Skeletons_Default``\n-       is used to specify the default behaviour of test skeletons, otherwise\n-       specified by ``--skeleton-default`` option. The value of this attribute\n-       should be either ``pass`` or ``fail``.\n-\n-  * ``Default_Stub_Exclusion_List``\n-       is used to specify the file with list of units whose bodies should not\n-       be stubbed, otherwise specified by ``--exclude-from-stubbing=filename``.\n-\n-  * ``Stub_Exclusion_List (\"unit\")``\n-       is used to specify the file with list of units whose bodies should not\n-       be stubbed when testing \"unit\", otherwise specified by\n-       ``--exclude-from-stubbing:unit=filename``.\n-\n-  Each of those attributes can be overridden from the command line if needed.\n-  Other ``gnattest`` switches can also be passed via the project\n-  file as an attribute list called ``Gnattest_Switches``.\n-\n-\n-  .. _Simple_gnattest_Example:\n-\n-  Simple Example\n-  --------------\n-\n-  Let's take a very simple example using the first ``gnattest`` example\n-  located in:\n-\n-    ::\n-\n-        <install_prefix>/share/examples/gnattest/simple\n-\n-  This project contains a simple package containing one subprogram. By running ``gnattest``:\n-\n-    ::\n-\n-        $ gnattest --harness-dir=driver -Psimple.gpr\n-\n-  a test driver is created in directory ``driver``. It can be compiled and run:\n-\n-    ::\n-\n-       $ cd obj/driver\n-       $ gprbuild -Ptest_driver\n-       $ test_runner\n-\n-  One failed test with the diagnosis \"test not implemented\" is reported.\n-  Since no special output option was specified, the test package ``Simple.Tests``\n-  is located in:\n-\n-    ::\n-\n-        <install_prefix>/share/examples/gnattest/simple/obj/gnattest/tests\n-\n-\n-  For each package containing visible subprograms, a child test package is\n-  generated. It contains one test routine per tested subprogram. Each\n-  declaration of a test subprogram has a comment specifying which tested\n-  subprogram it corresponds to. Bodies of test routines are placed in test package\n-  bodies and are surrounded by special comment sections. Those comment sections\n-  should not be removed or modified in order for gnattest to be able to regenerate\n-  test packages and keep already written tests in place.\n-  The test routine ``Test_Inc_5eaee3`` located at :file:`simple-test_data-tests.adb` contains\n-  a single statement: a call to procedure ``Assert``. It has two arguments:\n-  the Boolean expression we want to check and the diagnosis message to display if\n-  the condition is false.\n-\n-  That is where actual testing code should be written after a proper setup.\n-  An actual check can be performed by replacing the ``Assert`` call with:\n-\n-    ::\n-\n-        Assert (Inc (1) = 2, \"wrong incrementation\");\n-\n-  After recompiling and running the test driver, one successfully passed test\n-  is reported.\n-\n-\n-  .. _Setting_Up_and_Tearing_Down_the_Testing_Environment:\n-\n-  Setting Up and Tearing Down the Testing Environment\n-  ---------------------------------------------------\n-\n-  Besides test routines themselves, each test package has a parent package\n-  ``Test_Data`` that has two procedures: ``Set_Up`` and ``Tear_Down``. This package is never\n-  overwritten by the tool. ``Set_Up`` is called before each test routine of the\n-  package, and ``Tear_Down`` is called after each test routine. Those two procedures\n-  can be used to perform necessary initialization and finalization,\n-  memory allocation, etc. Test type declared in ``Test_Data`` package is parent type\n-  for the test type of test package and can have user-defined components whose\n-  values can be set by ``Set_Up`` routine and used in test routines afterwards.\n-\n-\n-  .. _Regenerating_Tests:\n-\n-  Regenerating Tests\n-  ------------------\n-\n-  Bodies of test routines and ``Test_Data`` packages are never overridden after they\n-  have been created once. As long as the name of the subprogram, full expanded Ada\n-  names and order of its parameters are the same, and comment sections are\n-  intact, the old test routine will fit in its place and no test skeleton will be\n-  generated for the subprogram.\n-\n-  This can be demonstrated with the previous example. By uncommenting declaration\n-  and body of function Dec in ``simple.ads`` and ``simple.adb``, running\n-  ``gnattest`` on the project, and then running the test driver:\n-\n-    ::\n-\n-        $ gnattest --harness-dir=driver -Psimple.gpr\n-        $ cd obj/driver\n-        $ gprbuild -Ptest_driver\n-        $ test_runner\n-\n-  The old test is not replaced with a stub, nor is it lost, but a new test\n-  skeleton is created for function ``Dec``.\n-\n-  The only way of regenerating tests skeletons is to remove the previously created\n-  tests together with corresponding comment sections.\n-\n-\n-  .. _Default_Test_Behavior:\n-\n-  Default Test Behavior\n-  ---------------------\n-\n-  The generated test driver can treat unimplemented tests in two ways:\n-  either count them all as failed (this is useful to see which tests are still\n-  left to implement) or as passed (to sort out unimplemented ones from those\n-  actually failing).\n-\n-  The test driver accepts a switch to specify this behavior:\n-  :switch:`--skeleton-default={val}`, where ``val`` is either ``pass`` or ``fail`` (exactly as for\n-  ``gnattest``).\n-\n-  The default behavior of the test driver is set with the same switch\n-  as passed to ``gnattest`` when generating the test driver.\n-\n-  Passing it to the driver generated on the first example:\n-\n-    ::\n-\n-        $ test_runner --skeleton-default=pass\n-\n-  makes both tests pass, even the unimplemented one.\n-\n-\n-  .. _Testing_Primitive_Operations_of_Tagged_Types:\n-\n-  Testing Primitive Operations of Tagged Types\n-  --------------------------------------------\n-\n-  Creation of test skeletons for primitive operations of tagged types entails\n-  a number of features. Test routines for all primitives of a given tagged type\n-  are placed in a separate child package named according to the tagged type. For\n-  example, if you have tagged type ``T`` in package ``P``, all tests for primitives\n-  of ``T`` will be in ``P.T_Test_Data.T_Tests``.\n-\n-  Consider running ``gnattest`` on the second example (note: actual tests for this\n-  example already exist, so there's no need to worry if the tool reports that\n-  no new stubs were generated):\n-\n-    ::\n-\n-        $ cd <install_prefix>/share/examples/gnattest/tagged_rec\n-        $ gnattest --harness-dir=driver -Ptagged_rec.gpr\n-\n-  Taking a closer look at the test type declared in the test package\n-  *Speed1.Controller_Test_Data* is necessary. It is declared in:\n-\n-    ::\n-\n-        <install_prefix>/share/examples/gnattest/tagged_rec/obj/gnattest/tests\n-\n-  Test types are direct or indirect descendants of\n-  *AUnit.Test_Fixtures.Test_Fixture* type. In the case of non-primitive tested\n-  subprograms, the user doesn't need to be concerned with them. However,\n-  when generating test packages for primitive operations, there are some things\n-  the user needs to know.\n-\n-  Type ``Test_Controller`` has components that allow assignment of various\n-  derivations of type ``Controller``. And if you look at the specification of\n-  package *Speed2.Auto_Controller*, you will see that ``Test_Auto_Controller``\n-  actually derives from ``Test_Controller`` rather than AUnit type ``Test_Fixture``.\n-  Thus, test types mirror the hierarchy of tested types.\n-\n-  The ``Set_Up`` procedure of ``Test_Data`` package corresponding to a test package\n-  of primitive operations of type ``T`` assigns to ``Fixture`` a reference to an\n-  object of that exact type ``T``. Note, however, that if the tagged type has\n-  discriminants, the ``Set_Up`` only has a commented template for setting\n-  up the fixture, since filling the discriminant with actual value is up\n-  to the user.\n-\n-  The knowledge of the structure of test types allows additional testing\n-  without additional effort. Those possibilities are described below.\n-\n-\n-  .. _Testing_Inheritance:\n-\n-  Testing Inheritance\n-  -------------------\n-\n-  Since the test type hierarchy mimics the hierarchy of tested types, the\n-  inheritance of tests takes place. An example of such inheritance can be\n-  seen by running the test driver generated for the second example. As previously\n-  mentioned, actual tests are already written for this example.\n-\n-    ::\n-\n-        $ cd obj/driver\n-        $ gprbuild -Ptest_driver\n-        $ test_runner\n-\n-  There are 6 passed tests while there are only 5 testable subprograms. The test\n-  routine for function Speed has been inherited and run against objects of the\n-  derived type.\n-\n-\n-  .. _Tagged_Type_Substitutability_Testing:\n-\n-  Tagged Type Substitutability Testing\n-  ------------------------------------\n-\n-  *Tagged Type Substitutability Testing* is a way of verifying the global type\n-  consistency by testing. Global type consistency is a principle stating that if\n-  ``S`` is a subtype of ``T`` (in Ada, ``S`` is a derived type of tagged type ``T``),\n-  then objects of type ``T`` may be replaced with objects of type ``S`` (that is,\n-  objects of type ``S`` may be substituted for objects of type ``T``), without\n-  altering any of the desirable properties of the program. When the properties\n-  of the program are expressed in the form of subprogram preconditions and\n-  postconditions (let's call them pre and post), the principle is formulated as\n-  relations between the pre and post of primitive operations and the pre and post\n-  of their derived operations. The pre of a derived operation should not be\n-  stronger than the original pre, and the post of the derived operation should\n-  not be weaker than the original post. Those relations ensure that verifying if\n-  a dispatching call is safe can be done just by using the pre and post of the\n-  root operation.\n-\n-  Verifying global type consistency by testing consists of running all the unit\n-  tests associated with the primitives of a given tagged type with objects of its\n-  derived types.\n-\n-  In the example used in the previous section, there was clearly a violation of\n-  type consistency. The overriding primitive ``Adjust_Speed`` in package ``Speed2``\n-  removes the functionality of the overridden primitive and thus doesn't respect\n-  the consistency principle.\n-  ``gnattest`` has a special option to run overridden parent tests against objects\n-  of the type which have overriding primitives:\n-\n-    ::\n-\n-        $ gnattest --harness-dir=driver --validate-type-extensions -Ptagged_rec.gpr\n-        $ cd obj/driver\n-        $ gprbuild -Ptest_driver\n-        $ test_runner\n-\n-  While all the tests pass by themselves, the parent test for ``Adjust_Speed`` fails\n-  against objects of the derived type.\n-\n-  Non-overridden tests are already inherited for derived test types, so the\n-  ``--validate-type-extensions`` enables the application of overridden tests\n-  to objects of derived types.\n-\n-\n-  .. _Testing_with_Contracts:\n-\n-  Testing with Contracts\n-  ----------------------\n-\n-  ``gnattest`` supports pragmas ``Pre``, ``Post``, and ``Test_Case``,\n-  as well as the corresponding Ada 2012 aspects.\n-  Test routines are generated, one per each ``Test_Case`` associated with a tested\n-  subprogram. Those test routines have special wrappers for tested functions\n-  that have composition of pre- and postcondition of the subprogram with\n-  \"requires\" and \"ensures\" of the ``Test_Case`` (depending on the mode, pre and post\n-  either count for ``Nominal`` mode or do *not* count for ``Robustness`` mode).\n-\n-  The third example demonstrates how this works:\n-\n-    ::\n-\n-        $ cd <install_prefix>/share/examples/gnattest/contracts\n-        $ gnattest --harness-dir=driver -Pcontracts.gpr\n-\n-  Putting actual checks within the range of the contract does not cause any\n-  error reports. For example, for the test routine which corresponds to\n-  test case 1:\n-\n-    ::\n-\n-        Assert (Sqrt (9.0) = 3.0, \"wrong sqrt\");\n-\n-  and for the test routine corresponding to test case 2:\n-\n-    ::\n-\n-        Assert (Sqrt (-5.0) = -1.0, \"wrong error indication\");\n-\n-  are acceptable:\n-\n-    ::\n-\n-        $ cd obj/driver\n-        $ gprbuild -Ptest_driver\n-        $ test_runner\n-\n-  However, by changing 9.0 to 25.0 and 3.0 to 5.0, for example, you can get\n-  a precondition violation for test case one. Also, by using any otherwise\n-  correct but positive pair of numbers in the second test routine, you can also\n-  get a precondition violation. Postconditions are checked and reported\n-  the same way.\n-\n-\n-  .. _Additional_Tests:\n-\n-  Additional Tests\n-  ----------------\n-\n-  ``gnattest`` can add user-written tests to the main suite of the test\n-  driver. ``gnattest`` traverses the given packages and searches for test\n-  routines. All procedures with a single in out parameter of a type which is\n-  derived from *AUnit.Test_Fixtures.Test_Fixture* and that are declared in package\n-  specifications are added to the suites and are then executed by the test driver.\n-  (``Set_Up`` and ``Tear_Down`` are filtered out.)\n-\n-  An example illustrates two ways of creating test harnesses for user-written\n-  tests. Directory ``additional_tests`` contains an AUnit-based test driver written\n-  by hand.\n-\n-    ::\n-\n-        <install_prefix>/share/examples/gnattest/additional_tests/\n-\n-  To create a test driver for already-written tests, use the ``--harness-only``\n-  option:\n-\n-    ::\n-\n-        gnattest -Padditional/harness/harness.gpr --harness-dir=harness_only \\\\\n-          --harness-only\n-        gprbuild -Pharness_only/test_driver.gpr\n-        harness_only/test_runner\n-\n-  Additional tests can also be executed together with generated tests:\n-\n-    ::\n-\n-        gnattest -Psimple.gpr --additional-tests=additional/harness/harness.gpr \\\\\n-          --harness-dir=mixing\n-        gprbuild -Pmixing/test_driver.gpr\n-        mixing/test_runner\n-\n-\n-  .. _Individual_Test_Drivers:\n-\n-  Individual Test Drivers\n-  -----------------------\n-\n-  By default, ``gnattest`` generates a monolithic test driver that\n-  aggregates the individual tests into a single executable. It is also possible\n-  to generate separate executables for each test or each unit under test, by\n-  passing the switch ``--separate-drivers`` with corresponding parameter. This\n-  approach scales better for large testing campaigns, especially involving target\n-  architectures with limited resources typical for embedded development. It can\n-  also provide a major performance benefit on multi-core systems by allowing\n-  simultaneous execution of multiple tests.\n-\n-  ``gnattest`` can take charge of executing the individual tests; for this,\n-  instead of passing a project file, a text file containing the list of\n-  executables can be passed. Such a file is automatically generated by gnattest\n-  under the name :file:`test_drivers.list`, but it can be\n-  hand-edited to add or remove tests, or replaced. The individual tests can\n-  also be executed standalone, or from any user-defined scripted framework.\n-\n-\n-  .. _Stubbing:\n-\n-  Stubbing\n-  --------\n-\n-  Depending on the testing campaign, it is sometimes necessary to isolate the\n-  part of the algorithm under test from its dependencies. This is accomplished\n-  via *stubbing*, i.e. replacing the subprograms that are called from the\n-  subprogram under test by stand-in subprograms that match the profiles of the\n-  original ones, but simply return predetermined values required by the test\n-  scenario.\n-\n-  This mode of test harness generation is activated by the switch ``--stub``.\n-\n-  The implementation approach chosen by ``gnattest`` is as follows.\n-  For each package under consideration all the packages it is directly depending\n-  on are stubbed, excluding the generic packages and package instantiations.\n-  The stubs are shared for each package under test. The specs of packages to stub\n-  remain intact, while their bodies are replaced, and hide the original bodies by\n-  means of extending projects. Also, for each stubbed\n-  package, a child package with setter routines for each subprogram declaration\n-  is created. These setters are meant to be used to set the behavior of\n-  stubbed subprograms from within test cases.\n-\n-  Note that subprograms belonging to the same package as the subprogram under\n-  test are not stubbed. This guarantees that the sources being tested are\n-  exactly the sources used for production, which is an important property for\n-  establishing the traceability between the testing campaign and production code.\n-\n-  Due to the nature of stubbing process, this mode implies the switch\n-  ``--separate-drivers``, i.e. an individual test driver (with the\n-  corresponding hierarchy of extending projects) is generated for each unit under\n-  test.\n-\n-  .. note::\n-\n-     Developing a stubs-based testing campaign requires\n-     good understanding of the infrastructure created by ``gnattest`` for\n-     this purpose. We recommend following the two stubbing tutorials\n-     ``simple_stubbing`` and ``advanced_stubbing`` provided\n-     under :file:`<install_prefix>/share/examples/gnattest` before\n-     attempting to use this powerful feature.\n-\n-\n-  .. _Gnatcov_Integration:\n-\n-  Integration with GNATcoverage\n-  -----------------------------\n-\n-  In addition to the harness, ``gnattest`` generates a Makefile. This Makefile\n-  provides targets for building the test drivers and also the targets for\n-  computing the coverage information using GNATcoverage framework when this\n-  coverage analysis tool is available. The target ``coverage`` fully automates\n-  the process: it will first build all test drivers, then run them under\n-  GNATcoverage, analyze individual trace files, and finally aggregate them:\n-\n-    ::\n-\n-        make coverage\n-\n-  GNATcoverage options, such as coverage criteria and generated report format,\n-  can be adjusted using Makefile variables provided for this purpose.\n-\n-  Note that coverage targets are not generated in the Makefile when\n-  --separate-drivers=test is passed to gnattest.\n-\n-\n-  .. _Putting_Tests_under_Version_Control:\n-\n-  Putting Tests under Version Control\n-  -----------------------------------\n-\n-  As has been stated earlier, ``gnattest`` generates two different types\n-  of code, test skeletons and harness. The harness is generated completely\n-  automatically each time, does not require manual changes and therefore should\n-  not be put under version control.\n-  It makes sense to put under version control files containing test data packages,\n-  both specs and bodies, and files containing bodies of test packages. Note that\n-  test package specs are also generated automatically each time and should not be\n-  put under version control.\n-  Option ``--omit-sloc`` may be useful when putting test packages under version control.\n-\n-\n-  .. _Current_Limitations:\n-\n-  Current Limitations\n-  -------------------\n-\n-  The tool currently has the following limitations:\n-\n-  * generic tests for nested generic packages and their instantiations are\n-    not supported;\n-  * tests for protected subprograms and entries are not supported;\n-  * pragma ``No_Run_Time`` is not supported;\n-  * pragma ``No_Secondary_Stack`` is not supported;\n-  * if pragmas for interfacing with foreign languages are used, manual\n-    adjustments might be necessary to make the test harness compilable;\n-  * use of some constructs, such as elaboration-control pragmas, Type_Invariant\n-    aspects, and complex variable initializations that use Subprogram'Access,\n-    may result in elaboration circularities in the generated harness.\n-\n-\n .. only:: PRO or GPL\n \n   .. _The_Backtrace_Symbolizer_gnatsymbolize:"}]}