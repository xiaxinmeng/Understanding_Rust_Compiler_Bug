{"sha": "25a4d238d81ece682ad76e041abeabbbe23979e4", "node_id": "C_kwDOANBUbNoAKDI1YTRkMjM4ZDgxZWNlNjgyYWQ3NmUwNDFhYmVhYmJiZTIzOTc5ZTQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:24:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:24Z"}, "message": "RISC-V: Add vsuxei* C++ API intrinsics testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsuxei16-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei16-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei16-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei8-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei8-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsuxei8-3.C: New test.", "tree": {"sha": "77491909935c3100027848ab031638cb3c3c9846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77491909935c3100027848ab031638cb3c3c9846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25a4d238d81ece682ad76e041abeabbbe23979e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a4d238d81ece682ad76e041abeabbbe23979e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a4d238d81ece682ad76e041abeabbbe23979e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a4d238d81ece682ad76e041abeabbbe23979e4/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf"}], "stats": {"total": 7416, "additions": 7416, "deletions": 0}, "files": [{"sha": "85d4dbe024e63e5439784383b67ac0e07701c56b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei16-1.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-1.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8131d2c264926cece92d8b4203a8c72569fc60e5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei16-2.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-2.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "01fc4f631fa105b4fa32139a8a4ae0c872fb5b60", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei16-3.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16-3.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8a00db8b5c9239d6a33198218c40423e72df7a86", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei32-1.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-1.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "b7bfa42a374fea1185550aa83495bea90e29d600", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei32-2.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-2.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "381fbe469561df738a95c9f08528b032931bbd1e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei32-3.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32-3.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "93c598e56b2c9a585965677d3ef8ecf8dfb8b80c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei64-1.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-1.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7dcb7c67057cb76ac406247e0a18d8ac55234a75", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei64-2.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-2.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f38adc8eec90a15cca0cc81b236ff54947050340", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei64-3.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64-3.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "dc4ff4ff483a2646c57e5e183d25e04cfd8769d1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei8-1.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-1.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f6891acf982278bad35a41be0a9572e9d2133e5c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei8-2.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-2.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "59ff5806833831e553fee6842436d86cc20bd66e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsuxei8-3.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a4d238d81ece682ad76e041abeabbbe23979e4/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8-3.C?ref=25a4d238d81ece682ad76e041abeabbbe23979e4", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}